
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000221ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027a0  08022270  08022270  00023270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a10  08024a10  00026420  2**0
                  CONTENTS
  4 .ARM          00000008  08024a10  08024a10  00025a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a18  08024a18  00026420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a18  08024a18  00025a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024a1c  08024a1c  00025a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08024a20  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034fc  20000420  08024e40  00026420  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000391c  08024e40  0002691c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00026420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034a7d  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000981a  00000000  00000000  0005aec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b20  00000000  00000000  000646e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fe4  00000000  00000000  00067200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023348  00000000  00000000  000691e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000433fc  00000000  00000000  0008c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0585  00000000  00000000  000cf928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016fead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae98  00000000  00000000  0016ff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017adf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017ae65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017d3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08022254 	.word	0x08022254

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	08022254 	.word	0x08022254

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08023c44 	.word	0x08023c44
 8000e0c:	08023c84 	.word	0x08023c84
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08023cc0 	.word	0x08023cc0
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fc74 	bl	800ef50 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b fccb 	bl	800f020 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fc7e 	bl	800efac <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b fbfa 	bl	800ef50 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fc29 	bl	800efc8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fc0d 	bl	800efac <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a fbaa 	bl	800df10 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000994 	.word	0x20000994

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fc0a 	bl	8005ff0 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fc67 	bl	80060b4 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a8 	.word	0x200009a8
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b4 	.word	0x200009b4
 8003864:	200009b8 	.word	0x200009b8

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009bc 	.word	0x200009bc
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009dc 	.word	0x200009dc
 80038d0:	200009e0 	.word	0x200009e0

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <setMeasurement+0x2c>)
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <setMeasurement+0x30>)
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <setMeasurement+0x34>)
 8003918:	1dba      	adds	r2, r7, #6
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	801a      	strh	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000564 	.word	0x20000564
 800392c:	20000568 	.word	0x20000568
 8003930:	20000574 	.word	0x20000574

08003934 <setMic>:
void setMic(float dB){
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  dBC = dB;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <setMic+0x18>)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	20000578 	.word	0x20000578

08003950 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	0002      	movs	r2, r0
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	1c0a      	adds	r2, r1, #0
 8003960:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f7fd fe32 	bl	80015d0 <__aeabi_i2f>
 800396c:	1c03      	adds	r3, r0, #0
 800396e:	490d      	ldr	r1, [pc, #52]	@ (80039a4 <setPMs+0x54>)
 8003970:	1c18      	adds	r0, r3, #0
 8003972:	f7fd f92f 	bl	8000bd4 <__aeabi_fdiv>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	1c1a      	adds	r2, r3, #0
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <setPMs+0x58>)
 800397c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f7fd fe24 	bl	80015d0 <__aeabi_i2f>
 8003988:	1c03      	adds	r3, r0, #0
 800398a:	4906      	ldr	r1, [pc, #24]	@ (80039a4 <setPMs+0x54>)
 800398c:	1c18      	adds	r0, r3, #0
 800398e:	f7fd f921 	bl	8000bd4 <__aeabi_fdiv>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c1a      	adds	r2, r3, #0
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <setPMs+0x5c>)
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	41200000 	.word	0x41200000
 80039a8:	2000057c 	.word	0x2000057c
 80039ac:	20000580 	.word	0x20000580

080039b0 <SetConfigMode>:

void SetConfigMode(){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039b4:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <SetConfigMode+0x10>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000054b 	.word	0x2000054b

080039c4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039c8:	f00a faec 	bl	800dfa4 <HAL_GetUIDw0>
 80039cc:	0002      	movs	r2, r0
 80039ce:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <ESP_GetUID+0x28>)
 80039d0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039d2:	f00a faf1 	bl	800dfb8 <HAL_GetUIDw1>
 80039d6:	0002      	movs	r2, r0
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <ESP_GetUID+0x28>)
 80039da:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039dc:	f00a faf6 	bl	800dfcc <HAL_GetUIDw2>
 80039e0:	0002      	movs	r2, r0
 80039e2:	4b02      	ldr	r3, [pc, #8]	@ (80039ec <ESP_GetUID+0x28>)
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000550 	.word	0x20000550

080039f0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <ESP_Init+0x2c>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <ESP_Init+0x30>)
 8003a00:	2202      	movs	r2, #2
 8003a02:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a04:	f7ff ffde 	bl	80039c4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a08:	f7ff fef8 	bl	80037fc <checkEEprom>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <ESP_Init+0x34>)
 8003a12:	701a      	strb	r2, [r3, #0]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000440 	.word	0x20000440
 8003a20:	20000028 	.word	0x20000028
 8003a24:	2000054e 	.word	0x2000054e

08003a28 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	000a      	movs	r2, r1
 8003a32:	1cbb      	adds	r3, r7, #2
 8003a34:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <ESP_Send+0x54>)
 8003a3a:	4911      	ldr	r1, [pc, #68]	@ (8003a80 <ESP_Send+0x58>)
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f009 fec9 	bl	800d7d4 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <ESP_Send+0x5c>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	250f      	movs	r5, #15
 8003a48:	197c      	adds	r4, r7, r5
 8003a4a:	1cbb      	adds	r3, r7, #2
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0019      	movs	r1, r3
 8003a52:	f012 fd33 	bl	80164bc <HAL_UART_Transmit_DMA>
 8003a56:	0003      	movs	r3, r0
 8003a58:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a62:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <ESP_Send+0x60>)
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <ESP_Send+0x64>)
 8003a66:	0019      	movs	r1, r3
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f009 feb3 	bl	800d7d4 <CreateLine>
    return false;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <ESP_Send+0x4c>
  }
  return true;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7c:	08022270 	.word	0x08022270
 8003a80:	08022280 	.word	0x08022280
 8003a84:	20000440 	.word	0x20000440
 8003a88:	08022284 	.word	0x08022284
 8003a8c:	080222a4 	.word	0x080222a4

08003a90 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	000a      	movs	r2, r1
 8003a9a:	1cbb      	adds	r3, r7, #2
 8003a9c:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <ESP_Receive+0x5c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <ESP_Receive+0x60>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	250f      	movs	r5, #15
 8003aaa:	197c      	adds	r4, r7, r5
 8003aac:	1cbb      	adds	r3, r7, #2
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	f012 fd92 	bl	80165dc <HAL_UART_Receive_DMA>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003abc:	197b      	adds	r3, r7, r5
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <ESP_Receive+0x60>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2284      	movs	r2, #132	@ 0x84
 8003aca:	589b      	ldr	r3, [r3, r2]
 8003acc:	4a09      	ldr	r2, [pc, #36]	@ (8003af4 <ESP_Receive+0x64>)
 8003ace:	490a      	ldr	r1, [pc, #40]	@ (8003af8 <ESP_Receive+0x68>)
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f009 fe7f 	bl	800d7d4 <CreateLine>
    RxComplete = true;
 8003ad6:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <ESP_Receive+0x5c>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    return false;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <ESP_Receive+0x52>
  }
  return true;
 8003ae0:	2301      	movs	r3, #1
}
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b004      	add	sp, #16
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	20000444 	.word	0x20000444
 8003af0:	20000440 	.word	0x20000440
 8003af4:	080222a8 	.word	0x080222a8
 8003af8:	080222a4 	.word	0x080222a4

08003afc <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <HAL_UART_ErrorCallback+0x34>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d10c      	bne.n	8003b28 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2284      	movs	r2, #132	@ 0x84
 8003b12:	589b      	ldr	r3, [r3, r2]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d007      	beq.n	8003b28 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2284      	movs	r2, #132	@ 0x84
 8003b1c:	589b      	ldr	r3, [r3, r2]
 8003b1e:	4a05      	ldr	r2, [pc, #20]	@ (8003b34 <HAL_UART_ErrorCallback+0x38>)
 8003b20:	4905      	ldr	r1, [pc, #20]	@ (8003b38 <HAL_UART_ErrorCallback+0x3c>)
 8003b22:	2003      	movs	r0, #3
 8003b24:	f009 fe56 	bl	800d7d4 <CreateLine>
    }
  }
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000440 	.word	0x20000440
 8003b34:	080222d8 	.word	0x080222d8
 8003b38:	08022280 	.word	0x08022280

08003b3c <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e010      	b.n	8003b6e <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	001a      	movs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1898      	adds	r0, r3, r2
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <uint8ArrayToString+0x44>)
 8003b62:	0019      	movs	r1, r3
 8003b64:	f01b fa94 	bl	801f090 <siprintf>
  for (int i = 0; i < 12; i++)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b0b      	cmp	r3, #11
 8003b72:	ddeb      	ble.n	8003b4c <uint8ArrayToString+0x10>
  }
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	08022304 	.word	0x08022304

08003b84 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b089      	sub	sp, #36	@ 0x24
 8003b88:	af04      	add	r7, sp, #16
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b90:	4be5      	ldr	r3, [pc, #916]	@ (8003f28 <CreateMessage+0x3a4>)
 8003b92:	48e6      	ldr	r0, [pc, #920]	@ (8003f2c <CreateMessage+0x3a8>)
 8003b94:	220c      	movs	r2, #12
 8003b96:	0019      	movs	r1, r3
 8003b98:	f7ff fdae 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b9c:	4be4      	ldr	r3, [pc, #912]	@ (8003f30 <CreateMessage+0x3ac>)
 8003b9e:	48e5      	ldr	r0, [pc, #916]	@ (8003f34 <CreateMessage+0x3b0>)
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	f7ff fda8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003ba8:	4be3      	ldr	r3, [pc, #908]	@ (8003f38 <CreateMessage+0x3b4>)
 8003baa:	48e4      	ldr	r0, [pc, #912]	@ (8003f3c <CreateMessage+0x3b8>)
 8003bac:	220c      	movs	r2, #12
 8003bae:	0019      	movs	r1, r3
 8003bb0:	f7ff fda2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003bb4:	4be2      	ldr	r3, [pc, #904]	@ (8003f40 <CreateMessage+0x3bc>)
 8003bb6:	48e3      	ldr	r0, [pc, #908]	@ (8003f44 <CreateMessage+0x3c0>)
 8003bb8:	220c      	movs	r2, #12
 8003bba:	0019      	movs	r1, r3
 8003bbc:	f7ff fd9c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003bc0:	4be1      	ldr	r3, [pc, #900]	@ (8003f48 <CreateMessage+0x3c4>)
 8003bc2:	48e2      	ldr	r0, [pc, #904]	@ (8003f4c <CreateMessage+0x3c8>)
 8003bc4:	220c      	movs	r2, #12
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	f7ff fd96 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003bcc:	4be0      	ldr	r3, [pc, #896]	@ (8003f50 <CreateMessage+0x3cc>)
 8003bce:	48e1      	ldr	r0, [pc, #900]	@ (8003f54 <CreateMessage+0x3d0>)
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	f7ff fd90 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003bd8:	4bdf      	ldr	r3, [pc, #892]	@ (8003f58 <CreateMessage+0x3d4>)
 8003bda:	48e0      	ldr	r0, [pc, #896]	@ (8003f5c <CreateMessage+0x3d8>)
 8003bdc:	220c      	movs	r2, #12
 8003bde:	0019      	movs	r1, r3
 8003be0:	f7ff fd8a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003be4:	4bde      	ldr	r3, [pc, #888]	@ (8003f60 <CreateMessage+0x3dc>)
 8003be6:	48df      	ldr	r0, [pc, #892]	@ (8003f64 <CreateMessage+0x3e0>)
 8003be8:	220c      	movs	r2, #12
 8003bea:	0019      	movs	r1, r3
 8003bec:	f7ff fd84 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003bf0:	f7ff fe3a 	bl	8003868 <checkName>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d006      	beq.n	8003c06 <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003bf8:	4bdb      	ldr	r3, [pc, #876]	@ (8003f68 <CreateMessage+0x3e4>)
 8003bfa:	48dc      	ldr	r0, [pc, #880]	@ (8003f6c <CreateMessage+0x3e8>)
 8003bfc:	221e      	movs	r2, #30
 8003bfe:	0019      	movs	r1, r3
 8003c00:	f7ff fd7a 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003c04:	e005      	b.n	8003c12 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003c06:	4bd8      	ldr	r3, [pc, #864]	@ (8003f68 <CreateMessage+0x3e4>)
 8003c08:	4ad9      	ldr	r2, [pc, #868]	@ (8003f70 <CreateMessage+0x3ec>)
 8003c0a:	6811      	ldr	r1, [r2, #0]
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	7912      	ldrb	r2, [r2, #4]
 8003c10:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003c12:	f7ff fddf 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	00da      	lsls	r2, r3, #3
 8003c1a:	4bd6      	ldr	r3, [pc, #856]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f01b fb7a 	bl	801f318 <memset>
  uint16_t index = 0;
 8003c24:	260e      	movs	r6, #14
 8003c26:	19bb      	adds	r3, r7, r6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003c2c:	19bb      	adds	r3, r7, r6
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	4bd0      	ldr	r3, [pc, #832]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	4ad0      	ldr	r2, [pc, #832]	@ (8003f78 <CreateMessage+0x3f4>)
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f01b fa29 	bl	801f090 <siprintf>
  index = strlen(message);
 8003c3e:	4bcd      	ldr	r3, [pc, #820]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fc fa93 	bl	800016c <strlen>
 8003c46:	0002      	movs	r2, r0
 8003c48:	19bb      	adds	r3, r7, r6
 8003c4a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003c4c:	4ab6      	ldr	r2, [pc, #728]	@ (8003f28 <CreateMessage+0x3a4>)
 8003c4e:	4bcb      	ldr	r3, [pc, #812]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c50:	0011      	movs	r1, r2
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7ff ff72 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003c58:	19bb      	adds	r3, r7, r6
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	4bc5      	ldr	r3, [pc, #788]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c5e:	18d4      	adds	r4, r2, r3
 8003c60:	4bc7      	ldr	r3, [pc, #796]	@ (8003f80 <CreateMessage+0x3fc>)
 8003c62:	689d      	ldr	r5, [r3, #8]
 8003c64:	4bc7      	ldr	r3, [pc, #796]	@ (8003f84 <CreateMessage+0x400>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	1c18      	adds	r0, r3, #0
 8003c6a:	f7ff fbfb 	bl	8003464 <__aeabi_f2d>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	000b      	movs	r3, r1
 8003c72:	48bd      	ldr	r0, [pc, #756]	@ (8003f68 <CreateMessage+0x3e4>)
 8003c74:	49c4      	ldr	r1, [pc, #784]	@ (8003f88 <CreateMessage+0x404>)
 8003c76:	9202      	str	r2, [sp, #8]
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	4bc0      	ldr	r3, [pc, #768]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	0003      	movs	r3, r0
 8003c80:	002a      	movs	r2, r5
 8003c82:	0020      	movs	r0, r4
 8003c84:	f01b fa04 	bl	801f090 <siprintf>
  index = strlen(message);
 8003c88:	4bba      	ldr	r3, [pc, #744]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7fc fa6e 	bl	800016c <strlen>
 8003c90:	0002      	movs	r2, r0
 8003c92:	19bb      	adds	r3, r7, r6
 8003c94:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003c96:	4aa6      	ldr	r2, [pc, #664]	@ (8003f30 <CreateMessage+0x3ac>)
 8003c98:	4bb8      	ldr	r3, [pc, #736]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff ff4d 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003ca2:	19bb      	adds	r3, r7, r6
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	4bb3      	ldr	r3, [pc, #716]	@ (8003f74 <CreateMessage+0x3f0>)
 8003ca8:	18d4      	adds	r4, r2, r3
 8003caa:	4bb5      	ldr	r3, [pc, #724]	@ (8003f80 <CreateMessage+0x3fc>)
 8003cac:	689d      	ldr	r5, [r3, #8]
 8003cae:	4bb7      	ldr	r3, [pc, #732]	@ (8003f8c <CreateMessage+0x408>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1c18      	adds	r0, r3, #0
 8003cb4:	f7ff fbd6 	bl	8003464 <__aeabi_f2d>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	000b      	movs	r3, r1
 8003cbc:	48aa      	ldr	r0, [pc, #680]	@ (8003f68 <CreateMessage+0x3e4>)
 8003cbe:	49b4      	ldr	r1, [pc, #720]	@ (8003f90 <CreateMessage+0x40c>)
 8003cc0:	9202      	str	r2, [sp, #8]
 8003cc2:	9303      	str	r3, [sp, #12]
 8003cc4:	4bad      	ldr	r3, [pc, #692]	@ (8003f7c <CreateMessage+0x3f8>)
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	0003      	movs	r3, r0
 8003cca:	002a      	movs	r2, r5
 8003ccc:	0020      	movs	r0, r4
 8003cce:	f01b f9df 	bl	801f090 <siprintf>
  index = strlen(message);
 8003cd2:	4ba8      	ldr	r3, [pc, #672]	@ (8003f74 <CreateMessage+0x3f0>)
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fc fa49 	bl	800016c <strlen>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	19bb      	adds	r3, r7, r6
 8003cde:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ce0:	4a95      	ldr	r2, [pc, #596]	@ (8003f38 <CreateMessage+0x3b4>)
 8003ce2:	4ba6      	ldr	r3, [pc, #664]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7ff ff28 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003cec:	19bb      	adds	r3, r7, r6
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	4ba0      	ldr	r3, [pc, #640]	@ (8003f74 <CreateMessage+0x3f0>)
 8003cf2:	18d4      	adds	r4, r2, r3
 8003cf4:	4ba2      	ldr	r3, [pc, #648]	@ (8003f80 <CreateMessage+0x3fc>)
 8003cf6:	689d      	ldr	r5, [r3, #8]
 8003cf8:	4ba6      	ldr	r3, [pc, #664]	@ (8003f94 <CreateMessage+0x410>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	1c18      	adds	r0, r3, #0
 8003cfe:	f7ff fbb1 	bl	8003464 <__aeabi_f2d>
 8003d02:	0002      	movs	r2, r0
 8003d04:	000b      	movs	r3, r1
 8003d06:	4898      	ldr	r0, [pc, #608]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d08:	49a3      	ldr	r1, [pc, #652]	@ (8003f98 <CreateMessage+0x414>)
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	9303      	str	r3, [sp, #12]
 8003d0e:	4b9b      	ldr	r3, [pc, #620]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	0003      	movs	r3, r0
 8003d14:	002a      	movs	r2, r5
 8003d16:	0020      	movs	r0, r4
 8003d18:	f01b f9ba 	bl	801f090 <siprintf>
  index = strlen(message);
 8003d1c:	4b95      	ldr	r3, [pc, #596]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7fc fa24 	bl	800016c <strlen>
 8003d24:	0002      	movs	r2, r0
 8003d26:	19bb      	adds	r3, r7, r6
 8003d28:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003d2a:	4a85      	ldr	r2, [pc, #532]	@ (8003f40 <CreateMessage+0x3bc>)
 8003d2c:	4b93      	ldr	r3, [pc, #588]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff ff03 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003d36:	19bb      	adds	r3, r7, r6
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d3c:	18d0      	adds	r0, r2, r3
 8003d3e:	4b90      	ldr	r3, [pc, #576]	@ (8003f80 <CreateMessage+0x3fc>)
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	4b96      	ldr	r3, [pc, #600]	@ (8003f9c <CreateMessage+0x418>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	4c88      	ldr	r4, [pc, #544]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d48:	4995      	ldr	r1, [pc, #596]	@ (8003fa0 <CreateMessage+0x41c>)
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	0023      	movs	r3, r4
 8003d52:	f01b f99d 	bl	801f090 <siprintf>
  index = strlen(message);
 8003d56:	4b87      	ldr	r3, [pc, #540]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7fc fa07 	bl	800016c <strlen>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	19bb      	adds	r3, r7, r6
 8003d62:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4053      	eors	r3, r2
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d100      	bne.n	8003d74 <CreateMessage+0x1f0>
 8003d72:	e094      	b.n	8003e9e <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003d74:	4a74      	ldr	r2, [pc, #464]	@ (8003f48 <CreateMessage+0x3c4>)
 8003d76:	4b81      	ldr	r3, [pc, #516]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fede 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d80:	19bb      	adds	r3, r7, r6
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	4b7b      	ldr	r3, [pc, #492]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d86:	18d4      	adds	r4, r2, r3
 8003d88:	4b7d      	ldr	r3, [pc, #500]	@ (8003f80 <CreateMessage+0x3fc>)
 8003d8a:	689d      	ldr	r5, [r3, #8]
 8003d8c:	4b85      	ldr	r3, [pc, #532]	@ (8003fa4 <CreateMessage+0x420>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1c18      	adds	r0, r3, #0
 8003d92:	f7ff fb67 	bl	8003464 <__aeabi_f2d>
 8003d96:	0002      	movs	r2, r0
 8003d98:	000b      	movs	r3, r1
 8003d9a:	4873      	ldr	r0, [pc, #460]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d9c:	4982      	ldr	r1, [pc, #520]	@ (8003fa8 <CreateMessage+0x424>)
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	9303      	str	r3, [sp, #12]
 8003da2:	4b76      	ldr	r3, [pc, #472]	@ (8003f7c <CreateMessage+0x3f8>)
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	0003      	movs	r3, r0
 8003da8:	002a      	movs	r2, r5
 8003daa:	0020      	movs	r0, r4
 8003dac:	f01b f970 	bl	801f090 <siprintf>
    index = strlen(message);
 8003db0:	4b70      	ldr	r3, [pc, #448]	@ (8003f74 <CreateMessage+0x3f0>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fc f9da 	bl	800016c <strlen>
 8003db8:	0002      	movs	r2, r0
 8003dba:	19bb      	adds	r3, r7, r6
 8003dbc:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003dbe:	4a64      	ldr	r2, [pc, #400]	@ (8003f50 <CreateMessage+0x3cc>)
 8003dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8003f7c <CreateMessage+0x3f8>)
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff feb9 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003dca:	19bb      	adds	r3, r7, r6
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	4b69      	ldr	r3, [pc, #420]	@ (8003f74 <CreateMessage+0x3f0>)
 8003dd0:	18d4      	adds	r4, r2, r3
 8003dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f80 <CreateMessage+0x3fc>)
 8003dd4:	689d      	ldr	r5, [r3, #8]
 8003dd6:	4b75      	ldr	r3, [pc, #468]	@ (8003fac <CreateMessage+0x428>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1c18      	adds	r0, r3, #0
 8003ddc:	f7ff fb42 	bl	8003464 <__aeabi_f2d>
 8003de0:	0002      	movs	r2, r0
 8003de2:	000b      	movs	r3, r1
 8003de4:	4860      	ldr	r0, [pc, #384]	@ (8003f68 <CreateMessage+0x3e4>)
 8003de6:	4972      	ldr	r1, [pc, #456]	@ (8003fb0 <CreateMessage+0x42c>)
 8003de8:	9202      	str	r2, [sp, #8]
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	4b63      	ldr	r3, [pc, #396]	@ (8003f7c <CreateMessage+0x3f8>)
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	0003      	movs	r3, r0
 8003df2:	002a      	movs	r2, r5
 8003df4:	0020      	movs	r0, r4
 8003df6:	f01b f94b 	bl	801f090 <siprintf>
    index = strlen(message);
 8003dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <CreateMessage+0x3f0>)
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7fc f9b5 	bl	800016c <strlen>
 8003e02:	0002      	movs	r2, r0
 8003e04:	19bb      	adds	r3, r7, r6
 8003e06:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003e08:	4a53      	ldr	r2, [pc, #332]	@ (8003f58 <CreateMessage+0x3d4>)
 8003e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7ff fe94 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003e14:	19bb      	adds	r3, r7, r6
 8003e16:	881a      	ldrh	r2, [r3, #0]
 8003e18:	4b56      	ldr	r3, [pc, #344]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e1a:	18d4      	adds	r4, r2, r3
 8003e1c:	4b58      	ldr	r3, [pc, #352]	@ (8003f80 <CreateMessage+0x3fc>)
 8003e1e:	689d      	ldr	r5, [r3, #8]
 8003e20:	4b64      	ldr	r3, [pc, #400]	@ (8003fb4 <CreateMessage+0x430>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	1c18      	adds	r0, r3, #0
 8003e26:	f7ff fb1d 	bl	8003464 <__aeabi_f2d>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	000b      	movs	r3, r1
 8003e2e:	484e      	ldr	r0, [pc, #312]	@ (8003f68 <CreateMessage+0x3e4>)
 8003e30:	4961      	ldr	r1, [pc, #388]	@ (8003fb8 <CreateMessage+0x434>)
 8003e32:	9202      	str	r2, [sp, #8]
 8003e34:	9303      	str	r3, [sp, #12]
 8003e36:	4b51      	ldr	r3, [pc, #324]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	002a      	movs	r2, r5
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f01b f926 	bl	801f090 <siprintf>
    index = strlen(message);
 8003e44:	4b4b      	ldr	r3, [pc, #300]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7fc f990 	bl	800016c <strlen>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	19bb      	adds	r3, r7, r6
 8003e50:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003e52:	4a43      	ldr	r2, [pc, #268]	@ (8003f60 <CreateMessage+0x3dc>)
 8003e54:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fe6f 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003e5e:	19bb      	adds	r3, r7, r6
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	4b44      	ldr	r3, [pc, #272]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e64:	18d4      	adds	r4, r2, r3
 8003e66:	4b46      	ldr	r3, [pc, #280]	@ (8003f80 <CreateMessage+0x3fc>)
 8003e68:	689d      	ldr	r5, [r3, #8]
 8003e6a:	4b54      	ldr	r3, [pc, #336]	@ (8003fbc <CreateMessage+0x438>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1c18      	adds	r0, r3, #0
 8003e70:	f7ff faf8 	bl	8003464 <__aeabi_f2d>
 8003e74:	0002      	movs	r2, r0
 8003e76:	000b      	movs	r3, r1
 8003e78:	483b      	ldr	r0, [pc, #236]	@ (8003f68 <CreateMessage+0x3e4>)
 8003e7a:	4951      	ldr	r1, [pc, #324]	@ (8003fc0 <CreateMessage+0x43c>)
 8003e7c:	9202      	str	r2, [sp, #8]
 8003e7e:	9303      	str	r3, [sp, #12]
 8003e80:	4b3e      	ldr	r3, [pc, #248]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	0003      	movs	r3, r0
 8003e86:	002a      	movs	r2, r5
 8003e88:	0020      	movs	r0, r4
 8003e8a:	f01b f901 	bl	801f090 <siprintf>
    index = strlen(message);
 8003e8e:	4b39      	ldr	r3, [pc, #228]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fc f96b 	bl	800016c <strlen>
 8003e96:	0002      	movs	r2, r0
 8003e98:	19bb      	adds	r3, r7, r6
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e025      	b.n	8003eea <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <CreateMessage+0x3c4>)
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7ff fe49 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003eaa:	260e      	movs	r6, #14
 8003eac:	19bb      	adds	r3, r7, r6
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <CreateMessage+0x3f0>)
 8003eb2:	18d4      	adds	r4, r2, r3
 8003eb4:	4b32      	ldr	r3, [pc, #200]	@ (8003f80 <CreateMessage+0x3fc>)
 8003eb6:	689d      	ldr	r5, [r3, #8]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa4 <CreateMessage+0x420>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1c18      	adds	r0, r3, #0
 8003ebe:	f7ff fad1 	bl	8003464 <__aeabi_f2d>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	000b      	movs	r3, r1
 8003ec6:	4828      	ldr	r0, [pc, #160]	@ (8003f68 <CreateMessage+0x3e4>)
 8003ec8:	493e      	ldr	r1, [pc, #248]	@ (8003fc4 <CreateMessage+0x440>)
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9303      	str	r3, [sp, #12]
 8003ece:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	002a      	movs	r2, r5
 8003ed6:	0020      	movs	r0, r4
 8003ed8:	f01b f8da 	bl	801f090 <siprintf>
    index = strlen(message);
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <CreateMessage+0x3f0>)
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7fc f944 	bl	800016c <strlen>
 8003ee4:	0002      	movs	r2, r0
 8003ee6:	19bb      	adds	r3, r7, r6
 8003ee8:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003eea:	240e      	movs	r4, #14
 8003eec:	193b      	adds	r3, r7, r4
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	4a35      	ldr	r2, [pc, #212]	@ (8003fc8 <CreateMessage+0x444>)
 8003ef2:	4936      	ldr	r1, [pc, #216]	@ (8003fcc <CreateMessage+0x448>)
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	f009 fc6d 	bl	800d7d4 <CreateLine>
  index = sprintf(&message[index], "]");
 8003efa:	193b      	adds	r3, r7, r4
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <CreateMessage+0x3f0>)
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	4a33      	ldr	r2, [pc, #204]	@ (8003fd0 <CreateMessage+0x44c>)
 8003f04:	0011      	movs	r1, r2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f01b f8c2 	bl	801f090 <siprintf>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003f12:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <CreateMessage+0x3f0>)
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fc f929 	bl	800016c <strlen>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	b29b      	uxth	r3, r3
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b005      	add	sp, #20
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	200009e4 	.word	0x200009e4
 8003f2c:	0808000c 	.word	0x0808000c
 8003f30:	200009f0 	.word	0x200009f0
 8003f34:	08080018 	.word	0x08080018
 8003f38:	200009fc 	.word	0x200009fc
 8003f3c:	08080048 	.word	0x08080048
 8003f40:	20000a08 	.word	0x20000a08
 8003f44:	08080030 	.word	0x08080030
 8003f48:	20000a14 	.word	0x20000a14
 8003f4c:	0808006c 	.word	0x0808006c
 8003f50:	20000a20 	.word	0x20000a20
 8003f54:	08080078 	.word	0x08080078
 8003f58:	20000a2c 	.word	0x20000a2c
 8003f5c:	08080054 	.word	0x08080054
 8003f60:	20000a38 	.word	0x20000a38
 8003f64:	08080060 	.word	0x08080060
 8003f68:	20000a44 	.word	0x20000a44
 8003f6c:	08080090 	.word	0x08080090
 8003f70:	08023d24 	.word	0x08023d24
 8003f74:	20000584 	.word	0x20000584
 8003f78:	0802230c 	.word	0x0802230c
 8003f7c:	20000a64 	.word	0x20000a64
 8003f80:	20000550 	.word	0x20000550
 8003f84:	20000564 	.word	0x20000564
 8003f88:	08022310 	.word	0x08022310
 8003f8c:	20000568 	.word	0x20000568
 8003f90:	08022364 	.word	0x08022364
 8003f94:	20000578 	.word	0x20000578
 8003f98:	080223bc 	.word	0x080223bc
 8003f9c:	20000574 	.word	0x20000574
 8003fa0:	08022418 	.word	0x08022418
 8003fa4:	2000056c 	.word	0x2000056c
 8003fa8:	0802246c 	.word	0x0802246c
 8003fac:	20000570 	.word	0x20000570
 8003fb0:	080224cc 	.word	0x080224cc
 8003fb4:	2000057c 	.word	0x2000057c
 8003fb8:	0802252c 	.word	0x0802252c
 8003fbc:	20000580 	.word	0x20000580
 8003fc0:	08022588 	.word	0x08022588
 8003fc4:	080225e0 	.word	0x080225e0
 8003fc8:	08022638 	.word	0x08022638
 8003fcc:	08022280 	.word	0x08022280
 8003fd0:	08022650 	.word	0x08022650

08003fd4 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003fd8:	2064      	movs	r0, #100	@ 0x64
 8003fda:	f009 ffa3 	bl	800df24 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <StartProg+0x60>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f00b fa0e 	bl	800f406 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003fea:	2064      	movs	r0, #100	@ 0x64
 8003fec:	f009 ff9a 	bl	800df24 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003ff0:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <StartProg+0x60>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f00b fa05 	bl	800f406 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003ffc:	23fa      	movs	r3, #250	@ 0xfa
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	0018      	movs	r0, r3
 8004002:	f009 ff8f 	bl	800df24 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <StartProg+0x60>)
 8004008:	2201      	movs	r2, #1
 800400a:	2101      	movs	r1, #1
 800400c:	0018      	movs	r0, r3
 800400e:	f00b f9fa 	bl	800f406 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004012:	23fa      	movs	r3, #250	@ 0xfa
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	0018      	movs	r0, r3
 8004018:	f009 ff84 	bl	800df24 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <StartProg+0x60>)
 800401e:	2201      	movs	r2, #1
 8004020:	2102      	movs	r1, #2
 8004022:	0018      	movs	r0, r3
 8004024:	f00b f9ef 	bl	800f406 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004028:	2028      	movs	r0, #40	@ 0x28
 800402a:	f009 ff7b 	bl	800df24 <HAL_Delay>
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	50001c00 	.word	0x50001c00

08004038 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	b0d9      	sub	sp, #356	@ 0x164
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	0008      	movs	r0, r1
 8004042:	0011      	movs	r1, r2
 8004044:	4ba1      	ldr	r3, [pc, #644]	@ (80042cc <ParseBuffer+0x294>)
 8004046:	24b0      	movs	r4, #176	@ 0xb0
 8004048:	0064      	lsls	r4, r4, #1
 800404a:	191b      	adds	r3, r3, r4
 800404c:	19db      	adds	r3, r3, r7
 800404e:	1c02      	adds	r2, r0, #0
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	4b9f      	ldr	r3, [pc, #636]	@ (80042d0 <ParseBuffer+0x298>)
 8004054:	191b      	adds	r3, r3, r4
 8004056:	19db      	adds	r3, r3, r7
 8004058:	1c0a      	adds	r2, r1, #0
 800405a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	005a      	lsls	r2, r3, #1
 8004060:	2348      	movs	r3, #72	@ 0x48
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2100      	movs	r1, #0
 8004066:	0018      	movs	r0, r3
 8004068:	f01b f956 	bl	801f318 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800406c:	2360      	movs	r3, #96	@ 0x60
 800406e:	33ff      	adds	r3, #255	@ 0xff
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2203      	movs	r2, #3
 8004074:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004076:	23ae      	movs	r3, #174	@ 0xae
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2200      	movs	r2, #0
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e013      	b.n	80040aa <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004082:	20ae      	movs	r0, #174	@ 0xae
 8004084:	0040      	lsls	r0, r0, #1
 8004086:	183b      	adds	r3, r7, r0
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	18d2      	adds	r2, r2, r3
 800408e:	183b      	adds	r3, r7, r0
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	7811      	ldrb	r1, [r2, #0]
 8004094:	4a8f      	ldr	r2, [pc, #572]	@ (80042d4 <ParseBuffer+0x29c>)
 8004096:	24b0      	movs	r4, #176	@ 0xb0
 8004098:	0064      	lsls	r4, r4, #1
 800409a:	1912      	adds	r2, r2, r4
 800409c:	19d2      	adds	r2, r2, r7
 800409e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	183b      	adds	r3, r7, r0
 80040a6:	3201      	adds	r2, #1
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	23ae      	movs	r3, #174	@ 0xae
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	18fa      	adds	r2, r7, r3
 80040b0:	4b86      	ldr	r3, [pc, #536]	@ (80042cc <ParseBuffer+0x294>)
 80040b2:	24b0      	movs	r4, #176	@ 0xb0
 80040b4:	0064      	lsls	r4, r4, #1
 80040b6:	191b      	adds	r3, r3, r4
 80040b8:	19db      	adds	r3, r3, r7
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3df      	bcc.n	8004082 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80040c2:	4b82      	ldr	r3, [pc, #520]	@ (80042cc <ParseBuffer+0x294>)
 80040c4:	191b      	adds	r3, r3, r4
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	4a82      	ldr	r2, [pc, #520]	@ (80042d4 <ParseBuffer+0x29c>)
 80040cc:	1912      	adds	r2, r2, r4
 80040ce:	19d2      	adds	r2, r2, r7
 80040d0:	2100      	movs	r1, #0
 80040d2:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80040d4:	2648      	movs	r6, #72	@ 0x48
 80040d6:	19bb      	adds	r3, r7, r6
 80040d8:	4a7f      	ldr	r2, [pc, #508]	@ (80042d8 <ParseBuffer+0x2a0>)
 80040da:	4980      	ldr	r1, [pc, #512]	@ (80042dc <ParseBuffer+0x2a4>)
 80040dc:	2003      	movs	r0, #3
 80040de:	f009 fb79 	bl	800d7d4 <CreateLine>
#endif
  char * ParsePoint = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	22ac      	movs	r2, #172	@ 0xac
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	18b9      	adds	r1, r7, r2
 80040ea:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80040ec:	4b7c      	ldr	r3, [pc, #496]	@ (80042e0 <ParseBuffer+0x2a8>)
 80040ee:	0025      	movs	r5, r4
 80040f0:	195b      	adds	r3, r3, r5
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	4a7b      	ldr	r2, [pc, #492]	@ (80042e4 <ParseBuffer+0x2ac>)
 80040f6:	8811      	ldrh	r1, [r2, #0]
 80040f8:	8019      	strh	r1, [r3, #0]
 80040fa:	7892      	ldrb	r2, [r2, #2]
 80040fc:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80040fe:	4b7a      	ldr	r3, [pc, #488]	@ (80042e8 <ParseBuffer+0x2b0>)
 8004100:	195b      	adds	r3, r3, r5
 8004102:	19db      	adds	r3, r3, r7
 8004104:	4a79      	ldr	r2, [pc, #484]	@ (80042ec <ParseBuffer+0x2b4>)
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	6019      	str	r1, [r3, #0]
 800410a:	8892      	ldrh	r2, [r2, #4]
 800410c:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800410e:	4b78      	ldr	r3, [pc, #480]	@ (80042f0 <ParseBuffer+0x2b8>)
 8004110:	195b      	adds	r3, r3, r5
 8004112:	19db      	adds	r3, r3, r7
 8004114:	4a77      	ldr	r2, [pc, #476]	@ (80042f4 <ParseBuffer+0x2bc>)
 8004116:	6811      	ldr	r1, [r2, #0]
 8004118:	6019      	str	r1, [r3, #0]
 800411a:	7912      	ldrb	r2, [r2, #4]
 800411c:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800411e:	4b76      	ldr	r3, [pc, #472]	@ (80042f8 <ParseBuffer+0x2c0>)
 8004120:	195b      	adds	r3, r3, r5
 8004122:	19db      	adds	r3, r3, r7
 8004124:	4a75      	ldr	r2, [pc, #468]	@ (80042fc <ParseBuffer+0x2c4>)
 8004126:	6811      	ldr	r1, [r2, #0]
 8004128:	6019      	str	r1, [r3, #0]
 800412a:	8892      	ldrh	r2, [r2, #4]
 800412c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800412e:	4b74      	ldr	r3, [pc, #464]	@ (8004300 <ParseBuffer+0x2c8>)
 8004130:	195b      	adds	r3, r3, r5
 8004132:	19db      	adds	r3, r3, r7
 8004134:	223e      	movs	r2, #62	@ 0x3e
 8004136:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004138:	4b72      	ldr	r3, [pc, #456]	@ (8004304 <ParseBuffer+0x2cc>)
 800413a:	195b      	adds	r3, r3, r5
 800413c:	19db      	adds	r3, r3, r7
 800413e:	4a72      	ldr	r2, [pc, #456]	@ (8004308 <ParseBuffer+0x2d0>)
 8004140:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004142:	c313      	stmia	r3!, {r0, r1, r4}
 8004144:	8811      	ldrh	r1, [r2, #0]
 8004146:	8019      	strh	r1, [r3, #0]
 8004148:	7892      	ldrb	r2, [r2, #2]
 800414a:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800414c:	4b6f      	ldr	r3, [pc, #444]	@ (800430c <ParseBuffer+0x2d4>)
 800414e:	195b      	adds	r3, r3, r5
 8004150:	19db      	adds	r3, r3, r7
 8004152:	4a6f      	ldr	r2, [pc, #444]	@ (8004310 <ParseBuffer+0x2d8>)
 8004154:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004156:	c313      	stmia	r3!, {r0, r1, r4}
 8004158:	8812      	ldrh	r2, [r2, #0]
 800415a:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800415c:	4b5c      	ldr	r3, [pc, #368]	@ (80042d0 <ParseBuffer+0x298>)
 800415e:	195b      	adds	r3, r3, r5
 8004160:	19db      	adds	r3, r3, r7
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 8004168:	2344      	movs	r3, #68	@ 0x44
 800416a:	18fa      	adds	r2, r7, r3
 800416c:	19bb      	adds	r3, r7, r6
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f01b f90c 	bl	801f38e <strstr>
 8004176:	0003      	movs	r3, r0
 8004178:	22ac      	movs	r2, #172	@ 0xac
 800417a:	0052      	lsls	r2, r2, #1
 800417c:	18ba      	adds	r2, r7, r2
 800417e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004180:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <ParseBuffer+0x298>)
 8004182:	22b0      	movs	r2, #176	@ 0xb0
 8004184:	0052      	lsls	r2, r2, #1
 8004186:	189b      	adds	r3, r3, r2
 8004188:	19db      	adds	r3, r3, r7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10c      	bne.n	80041aa <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004190:	232c      	movs	r3, #44	@ 0x2c
 8004192:	18fa      	adds	r2, r7, r3
 8004194:	2348      	movs	r3, #72	@ 0x48
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	0011      	movs	r1, r2
 800419a:	0018      	movs	r0, r3
 800419c:	f01b f8f7 	bl	801f38e <strstr>
 80041a0:	0003      	movs	r3, r0
 80041a2:	22ac      	movs	r2, #172	@ 0xac
 80041a4:	0052      	lsls	r2, r2, #1
 80041a6:	18ba      	adds	r2, r7, r2
 80041a8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80041aa:	4b49      	ldr	r3, [pc, #292]	@ (80042d0 <ParseBuffer+0x298>)
 80041ac:	22b0      	movs	r2, #176	@ 0xb0
 80041ae:	0052      	lsls	r2, r2, #1
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d10c      	bne.n	80041d4 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 80041ba:	2328      	movs	r3, #40	@ 0x28
 80041bc:	18fa      	adds	r2, r7, r3
 80041be:	2348      	movs	r3, #72	@ 0x48
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f01b f8e2 	bl	801f38e <strstr>
 80041ca:	0003      	movs	r3, r0
 80041cc:	22ac      	movs	r2, #172	@ 0xac
 80041ce:	0052      	lsls	r2, r2, #1
 80041d0:	18ba      	adds	r2, r7, r2
 80041d2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80041d4:	4b3e      	ldr	r3, [pc, #248]	@ (80042d0 <ParseBuffer+0x298>)
 80041d6:	22b0      	movs	r2, #176	@ 0xb0
 80041d8:	0052      	lsls	r2, r2, #1
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80041e4:	2308      	movs	r3, #8
 80041e6:	18fa      	adds	r2, r7, r3
 80041e8:	2348      	movs	r3, #72	@ 0x48
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	0011      	movs	r1, r2
 80041ee:	0018      	movs	r0, r3
 80041f0:	f01b f8cd 	bl	801f38e <strstr>
 80041f4:	0003      	movs	r3, r0
 80041f6:	22ac      	movs	r2, #172	@ 0xac
 80041f8:	0052      	lsls	r2, r2, #1
 80041fa:	18ba      	adds	r2, r7, r2
 80041fc:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80041fe:	233c      	movs	r3, #60	@ 0x3c
 8004200:	18fa      	adds	r2, r7, r3
 8004202:	2448      	movs	r4, #72	@ 0x48
 8004204:	193b      	adds	r3, r7, r4
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f01b f8c0 	bl	801f38e <strstr>
 800420e:	0003      	movs	r3, r0
 8004210:	22aa      	movs	r2, #170	@ 0xaa
 8004212:	0052      	lsls	r2, r2, #1
 8004214:	18ba      	adds	r2, r7, r2
 8004216:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004218:	2318      	movs	r3, #24
 800421a:	18fa      	adds	r2, r7, r3
 800421c:	193b      	adds	r3, r7, r4
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f01b f8b4 	bl	801f38e <strstr>
 8004226:	0003      	movs	r3, r0
 8004228:	22a8      	movs	r2, #168	@ 0xa8
 800422a:	0052      	lsls	r2, r2, #1
 800422c:	18ba      	adds	r2, r7, r2
 800422e:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004230:	4a38      	ldr	r2, [pc, #224]	@ (8004314 <ParseBuffer+0x2dc>)
 8004232:	193b      	adds	r3, r7, r4
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f01b f8a9 	bl	801f38e <strstr>
 800423c:	0003      	movs	r3, r0
 800423e:	22a6      	movs	r2, #166	@ 0xa6
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	18ba      	adds	r2, r7, r2
 8004244:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004246:	2334      	movs	r3, #52	@ 0x34
 8004248:	18fa      	adds	r2, r7, r3
 800424a:	193b      	adds	r3, r7, r4
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f01b f89d 	bl	801f38e <strstr>
 8004254:	0003      	movs	r3, r0
 8004256:	22a4      	movs	r2, #164	@ 0xa4
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	18ba      	adds	r2, r7, r2
 800425c:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800425e:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <ParseBuffer+0x294>)
 8004260:	21b0      	movs	r1, #176	@ 0xb0
 8004262:	0049      	lsls	r1, r1, #1
 8004264:	185b      	adds	r3, r3, r1
 8004266:	19db      	adds	r3, r3, r7
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d800      	bhi.n	8004270 <ParseBuffer+0x238>
 800426e:	e0c0      	b.n	80043f2 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004270:	22ac      	movs	r2, #172	@ 0xac
 8004272:	0052      	lsls	r2, r2, #1
 8004274:	18bb      	adds	r3, r7, r2
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d053      	beq.n	8004324 <ParseBuffer+0x2ec>
 800427c:	18bb      	adds	r3, r7, r2
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b4f      	cmp	r3, #79	@ 0x4f
 8004284:	d14e      	bne.n	8004324 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004286:	2360      	movs	r3, #96	@ 0x60
 8004288:	33ff      	adds	r3, #255	@ 0xff
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004290:	4b21      	ldr	r3, [pc, #132]	@ (8004318 <ParseBuffer+0x2e0>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b12      	cmp	r3, #18
 8004296:	d145      	bne.n	8004324 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <ParseBuffer+0x294>)
 800429a:	185b      	adds	r3, r3, r1
 800429c:	19db      	adds	r3, r3, r7
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80042a2:	d10b      	bne.n	80042bc <ParseBuffer+0x284>
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <ParseBuffer+0x29c>)
 80042a6:	185b      	adds	r3, r3, r1
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	2221      	movs	r2, #33	@ 0x21
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	2b32      	cmp	r3, #50	@ 0x32
 80042b0:	d104      	bne.n	80042bc <ParseBuffer+0x284>
          ParseTime(tempBuf);
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	0018      	movs	r0, r3
 80042b6:	f002 f8c7 	bl	8006448 <ParseTime>
 80042ba:	e033      	b.n	8004324 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <ParseBuffer+0x2e4>)
 80042be:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <ParseBuffer+0x2e8>)
 80042c0:	0019      	movs	r1, r3
 80042c2:	2001      	movs	r0, #1
 80042c4:	f009 fa86 	bl	800d7d4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80042c8:	2306      	movs	r3, #6
 80042ca:	e096      	b.n	80043fa <ParseBuffer+0x3c2>
 80042cc:	fffffea2 	.word	0xfffffea2
 80042d0:	fffffea1 	.word	0xfffffea1
 80042d4:	fffffee8 	.word	0xfffffee8
 80042d8:	08022654 	.word	0x08022654
 80042dc:	08022280 	.word	0x08022280
 80042e0:	fffffee4 	.word	0xfffffee4
 80042e4:	08022680 	.word	0x08022680
 80042e8:	fffffedc 	.word	0xfffffedc
 80042ec:	08022684 	.word	0x08022684
 80042f0:	fffffed4 	.word	0xfffffed4
 80042f4:	0802268c 	.word	0x0802268c
 80042f8:	fffffecc 	.word	0xfffffecc
 80042fc:	08022694 	.word	0x08022694
 8004300:	fffffec8 	.word	0xfffffec8
 8004304:	fffffeb8 	.word	0xfffffeb8
 8004308:	0802269c 	.word	0x0802269c
 800430c:	fffffea8 	.word	0xfffffea8
 8004310:	080226ac 	.word	0x080226ac
 8004314:	08023d00 	.word	0x08023d00
 8004318:	200009a2 	.word	0x200009a2
 800431c:	0802266c 	.word	0x0802266c
 8004320:	080222a4 	.word	0x080222a4
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004324:	22ac      	movs	r2, #172	@ 0xac
 8004326:	0052      	lsls	r2, r2, #1
 8004328:	18bb      	adds	r3, r7, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <ParseBuffer+0x30c>
 8004330:	18bb      	adds	r3, r7, r2
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b72      	cmp	r3, #114	@ 0x72
 8004338:	d104      	bne.n	8004344 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800433a:	2360      	movs	r3, #96	@ 0x60
 800433c:	33ff      	adds	r3, #255	@ 0xff
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2202      	movs	r2, #2
 8004342:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004344:	22ac      	movs	r2, #172	@ 0xac
 8004346:	0052      	lsls	r2, r2, #1
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <ParseBuffer+0x32c>
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b3e      	cmp	r3, #62	@ 0x3e
 8004358:	d104      	bne.n	8004364 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800435a:	2360      	movs	r3, #96	@ 0x60
 800435c:	33ff      	adds	r3, #255	@ 0xff
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2205      	movs	r2, #5
 8004362:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004364:	22ac      	movs	r2, #172	@ 0xac
 8004366:	0052      	lsls	r2, r2, #1
 8004368:	18bb      	adds	r3, r7, r2
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <ParseBuffer+0x34c>
 8004370:	18bb      	adds	r3, r7, r2
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b2b      	cmp	r3, #43	@ 0x2b
 8004378:	d104      	bne.n	8004384 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800437a:	2360      	movs	r3, #96	@ 0x60
 800437c:	33ff      	adds	r3, #255	@ 0xff
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	220b      	movs	r2, #11
 8004382:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004384:	22aa      	movs	r2, #170	@ 0xaa
 8004386:	0052      	lsls	r2, r2, #1
 8004388:	18bb      	adds	r3, r7, r2
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <ParseBuffer+0x362>
 8004390:	18bb      	adds	r3, r7, r2
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b45      	cmp	r3, #69	@ 0x45
 8004398:	d00a      	beq.n	80043b0 <ParseBuffer+0x378>
 800439a:	22a4      	movs	r2, #164	@ 0xa4
 800439c:	0052      	lsls	r2, r2, #1
 800439e:	18bb      	adds	r3, r7, r2
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <ParseBuffer+0x382>
 80043a6:	18bb      	adds	r3, r7, r2
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b46      	cmp	r3, #70	@ 0x46
 80043ae:	d104      	bne.n	80043ba <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 80043b0:	2360      	movs	r3, #96	@ 0x60
 80043b2:	33ff      	adds	r3, #255	@ 0xff
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80043ba:	22a8      	movs	r2, #168	@ 0xa8
 80043bc:	0052      	lsls	r2, r2, #1
 80043be:	18bb      	adds	r3, r7, r2
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <ParseBuffer+0x39e>
 80043c6:	18bb      	adds	r3, r7, r2
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b57      	cmp	r3, #87	@ 0x57
 80043ce:	d102      	bne.n	80043d6 <ParseBuffer+0x39e>
      ConnectionMade = true;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <ParseBuffer+0x3cc>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80043d6:	22a6      	movs	r2, #166	@ 0xa6
 80043d8:	0052      	lsls	r2, r2, #1
 80043da:	18bb      	adds	r3, r7, r2
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <ParseBuffer+0x3ba>
 80043e2:	18bb      	adds	r3, r7, r2
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b32      	cmp	r3, #50	@ 0x32
 80043ea:	d102      	bne.n	80043f2 <ParseBuffer+0x3ba>
      beurs = true;
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <ParseBuffer+0x3d0>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80043f2:	2360      	movs	r3, #96	@ 0x60
 80043f4:	33ff      	adds	r3, #255	@ 0xff
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	781b      	ldrb	r3, [r3, #0]

}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b059      	add	sp, #356	@ 0x164
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	2000054c 	.word	0x2000054c
 8004408:	2000054e 	.word	0x2000054e

0800440c <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004412:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <PollAwake+0x34>)
 8004414:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f7fb fea7 	bl	800016c <strlen>
 800441e:	0003      	movs	r3, r0
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f7ff fafe 	bl	8003a28 <ESP_Send>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <PollAwake+0x28>
    return true;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <PollAwake+0x2a>
  }
  else{
    return false;
 8004434:	2300      	movs	r3, #0
  }
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	080226bc 	.word	0x080226bc

08004444 <RFPower>:
bool RFPower(){
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <RFPower+0x34>)
 800444c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7fb fe8b 	bl	800016c <strlen>
 8004456:	0003      	movs	r3, r0
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0011      	movs	r1, r2
 800445e:	0018      	movs	r0, r3
 8004460:	f7ff fae2 	bl	8003a28 <ESP_Send>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d001      	beq.n	800446c <RFPower+0x28>
    return true;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <RFPower+0x2a>
  }
  else{
    return false;
 800446c:	2300      	movs	r3, #0
  }
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	080226c4 	.word	0x080226c4

0800447c <CheckRFPower>:
bool CheckRFPower(){
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004482:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <CheckRFPower+0x34>)
 8004484:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7fb fe6f 	bl	800016c <strlen>
 800448e:	0003      	movs	r3, r0
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0011      	movs	r1, r2
 8004496:	0018      	movs	r0, r3
 8004498:	f7ff fac6 	bl	8003a28 <ESP_Send>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d001      	beq.n	80044a4 <CheckRFPower+0x28>
    return true;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80044a4:	2300      	movs	r3, #0
  }
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b002      	add	sp, #8
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	080226d4 	.word	0x080226d4

080044b4 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <ATRestore+0x34>)
 80044bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fb fe53 	bl	800016c <strlen>
 80044c6:	0003      	movs	r3, r0
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0011      	movs	r1, r2
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff faaa 	bl	8003a28 <ESP_Send>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <ATRestore+0x28>
    return true;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <ATRestore+0x2a>
  }
  else{
    return false;
 80044dc:	2300      	movs	r3, #0
  }
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	080226e4 	.word	0x080226e4

080044ec <CWINIT>:
bool CWINIT(){
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <CWINIT+0x34>)
 80044f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7fb fe37 	bl	800016c <strlen>
 80044fe:	0003      	movs	r3, r0
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0011      	movs	r1, r2
 8004506:	0018      	movs	r0, r3
 8004508:	f7ff fa8e 	bl	8003a28 <ESP_Send>
 800450c:	1e03      	subs	r3, r0, #0
 800450e:	d001      	beq.n	8004514 <CWINIT+0x28>
    return true;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <CWINIT+0x2a>
  }
  else{
    return false;
 8004514:	2300      	movs	r3, #0
  }
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	080226f4 	.word	0x080226f4

08004524 <CWMODE1>:
bool CWMODE1(){
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <CWMODE1+0x34>)
 800452c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f7fb fe1b 	bl	800016c <strlen>
 8004536:	0003      	movs	r3, r0
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0011      	movs	r1, r2
 800453e:	0018      	movs	r0, r3
 8004540:	f7ff fa72 	bl	8003a28 <ESP_Send>
 8004544:	1e03      	subs	r3, r0, #0
 8004546:	d001      	beq.n	800454c <CWMODE1+0x28>
    return true;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <CWMODE1+0x2a>
  }
  else{
    return false;
 800454c:	2300      	movs	r3, #0
  }
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b002      	add	sp, #8
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	08022704 	.word	0x08022704

0800455c <CWMODE2>:
bool CWMODE2(){
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <CWMODE2+0x34>)
 8004564:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f7fb fdff 	bl	800016c <strlen>
 800456e:	0003      	movs	r3, r0
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0011      	movs	r1, r2
 8004576:	0018      	movs	r0, r3
 8004578:	f7ff fa56 	bl	8003a28 <ESP_Send>
 800457c:	1e03      	subs	r3, r0, #0
 800457e:	d001      	beq.n	8004584 <CWMODE2+0x28>
    return true;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004584:	2300      	movs	r3, #0
  }
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b002      	add	sp, #8
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	08022714 	.word	0x08022714

08004594 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800459a:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <CWAUTOCONN+0x34>)
 800459c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7fb fde3 	bl	800016c <strlen>
 80045a6:	0003      	movs	r3, r0
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff fa3a 	bl	8003a28 <ESP_Send>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d001      	beq.n	80045bc <CWAUTOCONN+0x28>
    return true;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80045bc:	2300      	movs	r3, #0
  }
}
 80045be:	0018      	movs	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	08022724 	.word	0x08022724

080045cc <CWJAP>:
bool CWJAP(){
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	46c6      	mov	lr, r8
 80045d0:	b500      	push	{lr}
 80045d2:	b0a2      	sub	sp, #136	@ 0x88
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	466b      	mov	r3, sp
 80045d8:	4698      	mov	r8, r3
  beursTest = true;
 80045da:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <CWJAP+0xf4>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80045e0:	2618      	movs	r6, #24
 80045e2:	19bb      	adds	r3, r7, r6
 80045e4:	2264      	movs	r2, #100	@ 0x64
 80045e6:	2100      	movs	r1, #0
 80045e8:	0018      	movs	r0, r3
 80045ea:	f01a fe95 	bl	801f318 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80045ee:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <CWJAP+0xf8>)
 80045f0:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <CWJAP+0xfc>)
 80045f2:	4936      	ldr	r1, [pc, #216]	@ (80046cc <CWJAP+0x100>)
 80045f4:	19b8      	adds	r0, r7, r6
 80045f6:	f01a fd4b 	bl	801f090 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80045fa:	19bb      	adds	r3, r7, r6
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7fb fdb5 	bl	800016c <strlen>
 8004602:	0002      	movs	r2, r0
 8004604:	216f      	movs	r1, #111	@ 0x6f
 8004606:	0030      	movs	r0, r6
 8004608:	180b      	adds	r3, r1, r0
 800460a:	19db      	adds	r3, r3, r7
 800460c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800460e:	180b      	adds	r3, r1, r0
 8004610:	19db      	adds	r3, r3, r7
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	1879      	adds	r1, r7, r1
 800461c:	600a      	str	r2, [r1, #0]
 800461e:	001a      	movs	r2, r3
 8004620:	60ba      	str	r2, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	60fa      	str	r2, [r7, #12]
 8004626:	68b8      	ldr	r0, [r7, #8]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	0002      	movs	r2, r0
 800462c:	0f52      	lsrs	r2, r2, #29
 800462e:	000e      	movs	r6, r1
 8004630:	00f6      	lsls	r6, r6, #3
 8004632:	617e      	str	r6, [r7, #20]
 8004634:	697e      	ldr	r6, [r7, #20]
 8004636:	4316      	orrs	r6, r2
 8004638:	617e      	str	r6, [r7, #20]
 800463a:	0002      	movs	r2, r0
 800463c:	00d2      	lsls	r2, r2, #3
 800463e:	613a      	str	r2, [r7, #16]
 8004640:	001a      	movs	r2, r3
 8004642:	603a      	str	r2, [r7, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	0002      	movs	r2, r0
 800464e:	0f52      	lsrs	r2, r2, #29
 8004650:	000e      	movs	r6, r1
 8004652:	00f5      	lsls	r5, r6, #3
 8004654:	4315      	orrs	r5, r2
 8004656:	0002      	movs	r2, r0
 8004658:	00d4      	lsls	r4, r2, #3
 800465a:	3307      	adds	r3, #7
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	466a      	mov	r2, sp
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	469d      	mov	sp, r3
 8004666:	466b      	mov	r3, sp
 8004668:	3300      	adds	r3, #0
 800466a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800466c:	246f      	movs	r4, #111	@ 0x6f
 800466e:	2518      	movs	r5, #24
 8004670:	1963      	adds	r3, r4, r5
 8004672:	19db      	adds	r3, r3, r7
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	001a      	movs	r2, r3
 800467a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800467c:	2100      	movs	r1, #0
 800467e:	0018      	movs	r0, r3
 8004680:	f01a fe4a 	bl	801f318 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004684:	1963      	adds	r3, r4, r5
 8004686:	19db      	adds	r3, r3, r7
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	1979      	adds	r1, r7, r5
 800468c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800468e:	0018      	movs	r0, r3
 8004690:	f01a fe69 	bl	801f366 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004694:	1963      	adds	r3, r4, r5
 8004696:	19db      	adds	r3, r3, r7
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800469e:	0011      	movs	r1, r2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff f9c1 	bl	8003a28 <ESP_Send>
 80046a6:	1e03      	subs	r3, r0, #0
 80046a8:	d001      	beq.n	80046ae <CWJAP+0xe2>
    return true;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <CWJAP+0xe4>
  }
  else{
    return false;
 80046ae:	2300      	movs	r3, #0
 80046b0:	46c5      	mov	sp, r8
  }
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b022      	add	sp, #136	@ 0x88
 80046b8:	bc80      	pop	{r7}
 80046ba:	46b8      	mov	r8, r7
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	2000054d 	.word	0x2000054d
 80046c4:	08023d0c 	.word	0x08023d0c
 80046c8:	08023d00 	.word	0x08023d00
 80046cc:	08022738 	.word	0x08022738

080046d0 <CWMODE3>:
bool CWMODE3(){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <CWMODE3+0x34>)
 80046d8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fb fd45 	bl	800016c <strlen>
 80046e2:	0003      	movs	r3, r0
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff f99c 	bl	8003a28 <ESP_Send>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <CWMODE3+0x28>
    return true;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <CWMODE3+0x2a>
  }
  else{
    return false;
 80046f8:	2300      	movs	r3, #0
  }
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	08022750 	.word	0x08022750

08004708 <CWSTATE>:
bool CWSTATE(){
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <CWSTATE+0x34>)
 8004710:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f7fb fd29 	bl	800016c <strlen>
 800471a:	0003      	movs	r3, r0
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f7ff f980 	bl	8003a28 <ESP_Send>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d001      	beq.n	8004730 <CWSTATE+0x28>
    return true;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004730:	2300      	movs	r3, #0
  }
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	08022760 	.word	0x08022760

08004740 <CWSAP>:
bool CWSAP(){
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <CWSAP+0x34>)
 8004748:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd0d 	bl	800016c <strlen>
 8004752:	0003      	movs	r3, r0
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0011      	movs	r1, r2
 800475a:	0018      	movs	r0, r3
 800475c:	f7ff f964 	bl	8003a28 <ESP_Send>
 8004760:	1e03      	subs	r3, r0, #0
 8004762:	d001      	beq.n	8004768 <CWSAP+0x28>
    return true;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <CWSAP+0x2a>
  }
  else{
    return false;
 8004768:	2300      	movs	r3, #0
  }
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	08022770 	.word	0x08022770

08004778 <CIPMUX>:
bool CIPMUX(){
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <CIPMUX+0x34>)
 8004780:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f7fb fcf1 	bl	800016c <strlen>
 800478a:	0003      	movs	r3, r0
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f7ff f948 	bl	8003a28 <ESP_Send>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <CIPMUX+0x28>
    return true;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <CIPMUX+0x2a>
  }
  else{
    return false;
 80047a0:	2300      	movs	r3, #0
  }
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b002      	add	sp, #8
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	08022794 	.word	0x08022794

080047b0 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <WEBSERVER+0x34>)
 80047b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f7fb fcd5 	bl	800016c <strlen>
 80047c2:	0003      	movs	r3, r0
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7ff f92c 	bl	8003a28 <ESP_Send>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d001      	beq.n	80047d8 <WEBSERVER+0x28>
    return true;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <WEBSERVER+0x2a>
  }
  else{
    return false;
 80047d8:	2300      	movs	r3, #0
  }
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	080227a4 	.word	0x080227a4

080047e8 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b0c5      	sub	sp, #276	@ 0x114
 80047ec:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	2100      	movs	r1, #0
 80047f6:	0018      	movs	r0, r3
 80047f8:	f01a fd8e 	bl	801f318 <memset>
  uint16_t length = CreateMessage(beurs);
 80047fc:	4b22      	ldr	r3, [pc, #136]	@ (8004888 <HTTPCPOST+0xa0>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	1dfc      	adds	r4, r7, #7
 8004802:	34ff      	adds	r4, #255	@ 0xff
 8004804:	0018      	movs	r0, r3
 8004806:	f7ff f9bd 	bl	8003b84 <CreateMessage>
 800480a:	0003      	movs	r3, r0
 800480c:	8023      	strh	r3, [r4, #0]
  if(beurs){
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HTTPCPOST+0xa0>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	33ff      	adds	r3, #255	@ 0xff
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	@ (800488c <HTTPCPOST+0xa4>)
 800481e:	491c      	ldr	r1, [pc, #112]	@ (8004890 <HTTPCPOST+0xa8>)
 8004820:	1d38      	adds	r0, r7, #4
 8004822:	f01a fc35 	bl	801f090 <siprintf>
 8004826:	e016      	b.n	8004856 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004828:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <HTTPCPOST+0xac>)
 800482a:	481b      	ldr	r0, [pc, #108]	@ (8004898 <HTTPCPOST+0xb0>)
 800482c:	220c      	movs	r2, #12
 800482e:	0019      	movs	r1, r3
 8004830:	f7fe ff62 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HTTPCPOST+0xac>)
 8004836:	4b19      	ldr	r3, [pc, #100]	@ (800489c <HTTPCPOST+0xb4>)
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f7ff f97e 	bl	8003b3c <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004840:	1dfb      	adds	r3, r7, #7
 8004842:	33ff      	adds	r3, #255	@ 0xff
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	4c15      	ldr	r4, [pc, #84]	@ (800489c <HTTPCPOST+0xb4>)
 8004848:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HTTPCPOST+0xb8>)
 800484a:	4916      	ldr	r1, [pc, #88]	@ (80048a4 <HTTPCPOST+0xbc>)
 800484c:	1d38      	adds	r0, r7, #4
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	0023      	movs	r3, r4
 8004852:	f01a fc1d 	bl	801f090 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0002      	movs	r2, r0
 8004860:	1d7b      	adds	r3, r7, #5
 8004862:	33ff      	adds	r3, #255	@ 0xff
 8004864:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004866:	1d7b      	adds	r3, r7, #5
 8004868:	33ff      	adds	r3, #255	@ 0xff
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	0011      	movs	r1, r2
 8004870:	0018      	movs	r0, r3
 8004872:	f7ff f8d9 	bl	8003a28 <ESP_Send>
 8004876:	1e03      	subs	r3, r0, #0
 8004878:	d001      	beq.n	800487e <HTTPCPOST+0x96>
    return true;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HTTPCPOST+0x98>
  }
  else{
    return false;
 800487e:	2300      	movs	r3, #0
  }
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b043      	add	sp, #268	@ 0x10c
 8004886:	bd90      	pop	{r4, r7, pc}
 8004888:	2000054e 	.word	0x2000054e
 800488c:	08023d2c 	.word	0x08023d2c
 8004890:	080227bc 	.word	0x080227bc
 8004894:	20000a80 	.word	0x20000a80
 8004898:	08080000 	.word	0x08080000
 800489c:	20000a8c 	.word	0x20000a8c
 80048a0:	08023d68 	.word	0x08023d68
 80048a4:	080227f4 	.word	0x080227f4

080048a8 <SENDDATA>:
bool SENDDATA(){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <SENDDATA+0x34>)
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fb fc5b 	bl	800016c <strlen>
 80048b6:	0002      	movs	r2, r0
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 80048bc:	1dbb      	adds	r3, r7, #6
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <SENDDATA+0x34>)
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff f8af 	bl	8003a28 <ESP_Send>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d001      	beq.n	80048d2 <SENDDATA+0x2a>
    return true;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <SENDDATA+0x2c>
  }
  else{
    return false;
 80048d2:	2300      	movs	r3, #0
  }
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000584 	.word	0x20000584

080048e0 <SLEEP>:
bool SLEEP(){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <SLEEP+0x34>)
 80048e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7fb fc3d 	bl	800016c <strlen>
 80048f2:	0003      	movs	r3, r0
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0011      	movs	r1, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7ff f894 	bl	8003a28 <ESP_Send>
 8004900:	1e03      	subs	r3, r0, #0
 8004902:	d001      	beq.n	8004908 <SLEEP+0x28>
    return true;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <SLEEP+0x2a>
  }
  else{
    return false;
 8004908:	2300      	movs	r3, #0
  }
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	08022834 	.word	0x08022834

08004918 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <CIPSNTPCFG+0x3c>)
 8004920:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f7fb fc21 	bl	800016c <strlen>
 800492a:	0003      	movs	r3, r0
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0011      	movs	r1, r2
 8004932:	0018      	movs	r0, r3
 8004934:	f7ff f878 	bl	8003a28 <ESP_Send>
 8004938:	1e03      	subs	r3, r0, #0
 800493a:	d006      	beq.n	800494a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 800493c:	23fa      	movs	r3, #250	@ 0xfa
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	0018      	movs	r0, r3
 8004942:	f009 faef 	bl	800df24 <HAL_Delay>
    return true;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800494a:	2300      	movs	r3, #0
  }
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b002      	add	sp, #8
 8004952:	bd80      	pop	{r7, pc}
 8004954:	08022844 	.word	0x08022844

08004958 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <CIPSNTPTIME+0x34>)
 8004960:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f7fb fc01 	bl	800016c <strlen>
 800496a:	0003      	movs	r3, r0
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f7ff f858 	bl	8003a28 <ESP_Send>
 8004978:	1e03      	subs	r3, r0, #0
 800497a:	d001      	beq.n	8004980 <CIPSNTPTIME+0x28>
    return true;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004980:	2300      	movs	r3, #0
  }
}
 8004982:	0018      	movs	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	b002      	add	sp, #8
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	08022894 	.word	0x08022894

08004990 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <CIPSNTPINTV+0x34>)
 8004998:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0018      	movs	r0, r3
 800499e:	f7fb fbe5 	bl	800016c <strlen>
 80049a2:	0003      	movs	r3, r0
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0011      	movs	r1, r2
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff f83c 	bl	8003a28 <ESP_Send>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d001      	beq.n	80049b8 <CIPSNTPINTV+0x28>
    return true;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 80049b8:	2300      	movs	r3, #0
  }
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b002      	add	sp, #8
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	080228a8 	.word	0x080228a8

080049c8 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 80049c8:	b5b0      	push	{r4, r5, r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	0002      	movs	r2, r0
 80049d0:	1dfb      	adds	r3, r7, #7
 80049d2:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80049d4:	4b73      	ldr	r3, [pc, #460]	@ (8004ba4 <DMA_ProcessBuffer+0x1dc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	200e      	movs	r0, #14
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0049      	lsls	r1, r1, #1
 80049e4:	1a8a      	subs	r2, r1, r2
 80049e6:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 80049e8:	230d      	movs	r3, #13
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	2203      	movs	r2, #3
 80049ee:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 80049f0:	183b      	adds	r3, r7, r0
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d903      	bls.n	8004a04 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 80049fc:	183b      	adds	r3, r7, r0
 80049fe:	2280      	movs	r2, #128	@ 0x80
 8004a00:	0052      	lsls	r2, r2, #1
 8004a02:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004a04:	4b68      	ldr	r3, [pc, #416]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	230e      	movs	r3, #14
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d131      	bne.n	8004a7a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004a16:	4b65      	ldr	r3, [pc, #404]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b14      	cmp	r3, #20
 8004a1c:	d91b      	bls.n	8004a56 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004a1e:	4b63      	ldr	r3, [pc, #396]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004a24:	4b62      	ldr	r3, [pc, #392]	@ (8004bb0 <DMA_ProcessBuffer+0x1e8>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <DMA_ProcessBuffer+0x74>
 8004a2c:	4b61      	ldr	r3, [pc, #388]	@ (8004bb4 <DMA_ProcessBuffer+0x1ec>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004a34:	230d      	movs	r3, #13
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2207      	movs	r2, #7
 8004a3a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb0 <DMA_ProcessBuffer+0x1e8>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d103      	bne.n	8004a4c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004a44:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb8 <DMA_ProcessBuffer+0x1f0>)
 8004a46:	220b      	movs	r2, #11
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e016      	b.n	8004a7a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004a4c:	230d      	movs	r3, #13
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2206      	movs	r2, #6
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e011      	b.n	8004a7a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004a56:	4b55      	ldr	r3, [pc, #340]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b53      	ldr	r3, [pc, #332]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a60:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004a62:	f009 fa55 	bl	800df10 <HAL_GetTick>
 8004a66:	0003      	movs	r3, r0
 8004a68:	33f5      	adds	r3, #245	@ 0xf5
 8004a6a:	33ff      	adds	r3, #255	@ 0xff
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	4b53      	ldr	r3, [pc, #332]	@ (8004bbc <DMA_ProcessBuffer+0x1f4>)
 8004a70:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004a72:	230d      	movs	r3, #13
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2204      	movs	r2, #4
 8004a78:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	001a      	movs	r2, r3
 8004a82:	210e      	movs	r1, #14
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d100      	bne.n	8004a8e <DMA_ProcessBuffer+0xc6>
 8004a8c:	e082      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004a8e:	4b47      	ldr	r3, [pc, #284]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004a94:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d109      	bne.n	8004ab8 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b45      	ldr	r3, [pc, #276]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004aac:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004aae:	230d      	movs	r3, #13
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e06d      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004ab8:	4b41      	ldr	r3, [pc, #260]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	001a      	movs	r2, r3
 8004ac0:	210e      	movs	r1, #14
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004aca:	187b      	adds	r3, r7, r1
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004ad2:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004ad4:	230d      	movs	r3, #13
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	220a      	movs	r2, #10
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e05a      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004ade:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	210e      	movs	r1, #14
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d917      	bls.n	8004b20 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004af0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	001a      	movs	r2, r3
 8004af8:	4b32      	ldr	r3, [pc, #200]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004afa:	18d0      	adds	r0, r2, r3
 8004afc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	001a      	movs	r2, r3
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	b299      	uxth	r1, r3
 8004b0c:	230d      	movs	r3, #13
 8004b0e:	18fc      	adds	r4, r7, r3
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	001a      	movs	r2, r3
 8004b16:	f7ff fa8f 	bl	8004038 <ParseBuffer>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	7023      	strb	r3, [r4, #0]
 8004b1e:	e026      	b.n	8004b6e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004b20:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	001a      	movs	r2, r3
 8004b28:	4b26      	ldr	r3, [pc, #152]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004b2a:	18d0      	adds	r0, r2, r3
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	001a      	movs	r2, r3
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	b299      	uxth	r1, r3
 8004b3c:	250d      	movs	r5, #13
 8004b3e:	197c      	adds	r4, r7, r5
 8004b40:	1dfb      	adds	r3, r7, #7
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	001a      	movs	r2, r3
 8004b46:	f7ff fa77 	bl	8004038 <ParseBuffer>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004b4e:	210e      	movs	r1, #14
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004b58:	197c      	adds	r4, r7, r5
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	8819      	ldrh	r1, [r3, #0]
 8004b62:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff fa67 	bl	8004038 <ParseBuffer>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	0018      	movs	r0, r3
 8004b76:	240e      	movs	r4, #14
 8004b78:	193b      	adds	r3, r7, r4
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	@ (8004bc8 <DMA_ProcessBuffer+0x200>)
 8004b7e:	4913      	ldr	r1, [pc, #76]	@ (8004bcc <DMA_ProcessBuffer+0x204>)
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	0003      	movs	r3, r0
 8004b84:	2003      	movs	r0, #3
 8004b86:	f008 fe25 	bl	800d7d4 <CreateLine>
          OldPos = pos;
 8004b8a:	193b      	adds	r3, r7, r4
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b92:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004b94:	230d      	movs	r3, #13
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	781b      	ldrb	r3, [r3, #0]
}
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	2000246c 	.word	0x2000246c
 8004ba8:	20000aa5 	.word	0x20000aa5
 8004bac:	200009a0 	.word	0x200009a0
 8004bb0:	200009a2 	.word	0x200009a2
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	20000028 	.word	0x20000028
 8004bbc:	20000994 	.word	0x20000994
 8004bc0:	20000aa6 	.word	0x20000aa6
 8004bc4:	20000448 	.word	0x20000448
 8004bc8:	080228c0 	.word	0x080228c0
 8004bcc:	08022280 	.word	0x08022280

08004bd0 <clearDMABuffer>:

void clearDMABuffer(){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	005a      	lsls	r2, r3, #1
 8004bd8:	4b03      	ldr	r3, [pc, #12]	@ (8004be8 <clearDMABuffer+0x18>)
 8004bda:	2100      	movs	r1, #0
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f01a fb9b 	bl	801f318 <memset>
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000448 	.word	0x20000448

08004bec <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	1dfb      	adds	r3, r7, #7
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	1dbb      	adds	r3, r7, #6
 8004bfa:	1c0a      	adds	r2, r1, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004bfe:	210f      	movs	r1, #15
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004c0e:	187b      	adds	r3, r7, r1
 8004c10:	1dfa      	adds	r2, r7, #7
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	4251      	negs	r1, r2
 8004c16:	414a      	adcs	r2, r1
 8004c18:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004c1a:	1dbb      	adds	r3, r7, #6
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004c22:	230f      	movs	r3, #15
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	1dfa      	adds	r2, r7, #7
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	3a02      	subs	r2, #2
 8004c2c:	4251      	negs	r1, r2
 8004c2e:	414a      	adcs	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004c32:	1dbb      	adds	r3, r7, #6
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d107      	bne.n	8004c4a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004c3a:	230f      	movs	r3, #15
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	1dfa      	adds	r2, r7, #7
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	3a05      	subs	r2, #5
 8004c44:	4251      	negs	r1, r2
 8004c46:	414a      	adcs	r2, r1
 8004c48:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004c4a:	1dbb      	adds	r3, r7, #6
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d107      	bne.n	8004c62 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004c52:	230f      	movs	r3, #15
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	1dfa      	adds	r2, r7, #7
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	3a0b      	subs	r2, #11
 8004c5c:	4251      	negs	r1, r2
 8004c5e:	414a      	adcs	r2, r1
 8004c60:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004c62:	230f      	movs	r3, #15
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	781b      	ldrb	r3, [r3, #0]
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b004      	add	sp, #16
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	0002      	movs	r2, r0
 8004c78:	1dfb      	adds	r3, r7, #7
 8004c7a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004c84:	1dfb      	adds	r3, r7, #7
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b13      	cmp	r3, #19
 8004c8a:	d900      	bls.n	8004c8e <AT_Send+0x1e>
 8004c8c:	e18a      	b.n	8004fa4 <AT_Send+0x334>
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	4bc8      	ldr	r3, [pc, #800]	@ (8004fb4 <AT_Send+0x344>)
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004c98:	4bc7      	ldr	r3, [pc, #796]	@ (8004fb8 <AT_Send+0x348>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f008 fd43 	bl	800d728 <TimestampIsReached>
 8004ca2:	1e03      	subs	r3, r0, #0
 8004ca4:	d100      	bne.n	8004ca8 <AT_Send+0x38>
 8004ca6:	e17c      	b.n	8004fa2 <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fc      	adds	r4, r7, r3
 8004cac:	f7ff fbae 	bl	800440c <PollAwake>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004cb4:	f009 f92c 	bl	800df10 <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	3332      	adds	r3, #50	@ 0x32
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	4bbe      	ldr	r3, [pc, #760]	@ (8004fb8 <AT_Send+0x348>)
 8004cc0:	601a      	str	r2, [r3, #0]
  }
  break;
 8004cc2:	e16e      	b.n	8004fa2 <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004cc4:	4abd      	ldr	r2, [pc, #756]	@ (8004fbc <AT_Send+0x34c>)
 8004cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8004fc0 <AT_Send+0x350>)
 8004cc8:	0019      	movs	r1, r3
 8004cca:	2003      	movs	r0, #3
 8004ccc:	f008 fd82 	bl	800d7d4 <CreateLine>
    ATCommandSend = RFPower();
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	18fc      	adds	r4, r7, r3
 8004cd4:	f7ff fbb6 	bl	8004444 <RFPower>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cdc:	f009 f918 	bl	800df10 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	330a      	adds	r3, #10
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	4bb4      	ldr	r3, [pc, #720]	@ (8004fb8 <AT_Send+0x348>)
 8004ce8:	601a      	str	r2, [r3, #0]
    break;
 8004cea:	e15b      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004cec:	4ab5      	ldr	r2, [pc, #724]	@ (8004fc4 <AT_Send+0x354>)
 8004cee:	4bb4      	ldr	r3, [pc, #720]	@ (8004fc0 <AT_Send+0x350>)
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	f008 fd6e 	bl	800d7d4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fc      	adds	r4, r7, r3
 8004cfc:	f7ff fbbe 	bl	800447c <CheckRFPower>
 8004d00:	0003      	movs	r3, r0
 8004d02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d04:	f009 f904 	bl	800df10 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	330a      	adds	r3, #10
 8004d0c:	001a      	movs	r2, r3
 8004d0e:	4baa      	ldr	r3, [pc, #680]	@ (8004fb8 <AT_Send+0x348>)
 8004d10:	601a      	str	r2, [r3, #0]
    break;
 8004d12:	e147      	b.n	8004fa4 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004d14:	4aac      	ldr	r2, [pc, #688]	@ (8004fc8 <AT_Send+0x358>)
 8004d16:	4baa      	ldr	r3, [pc, #680]	@ (8004fc0 <AT_Send+0x350>)
 8004d18:	0019      	movs	r1, r3
 8004d1a:	2003      	movs	r0, #3
 8004d1c:	f008 fd5a 	bl	800d7d4 <CreateLine>
    ATCommandSend = ATRestore();
 8004d20:	230f      	movs	r3, #15
 8004d22:	18fc      	adds	r4, r7, r3
 8004d24:	f7ff fbc6 	bl	80044b4 <ATRestore>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d2c:	f009 f8f0 	bl	800df10 <HAL_GetTick>
 8004d30:	0003      	movs	r3, r0
 8004d32:	3332      	adds	r3, #50	@ 0x32
 8004d34:	001a      	movs	r2, r3
 8004d36:	4ba0      	ldr	r3, [pc, #640]	@ (8004fb8 <AT_Send+0x348>)
 8004d38:	601a      	str	r2, [r3, #0]
    break;
 8004d3a:	e133      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004d3c:	4aa3      	ldr	r2, [pc, #652]	@ (8004fcc <AT_Send+0x35c>)
 8004d3e:	4ba0      	ldr	r3, [pc, #640]	@ (8004fc0 <AT_Send+0x350>)
 8004d40:	0019      	movs	r1, r3
 8004d42:	2003      	movs	r0, #3
 8004d44:	f008 fd46 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWINIT();
 8004d48:	230f      	movs	r3, #15
 8004d4a:	18fc      	adds	r4, r7, r3
 8004d4c:	f7ff fbce 	bl	80044ec <CWINIT>
 8004d50:	0003      	movs	r3, r0
 8004d52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d54:	f009 f8dc 	bl	800df10 <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	33f5      	adds	r3, #245	@ 0xf5
 8004d5c:	33ff      	adds	r3, #255	@ 0xff
 8004d5e:	001a      	movs	r2, r3
 8004d60:	4b95      	ldr	r3, [pc, #596]	@ (8004fb8 <AT_Send+0x348>)
 8004d62:	601a      	str	r2, [r3, #0]
    break;
 8004d64:	e11e      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004d66:	4a9a      	ldr	r2, [pc, #616]	@ (8004fd0 <AT_Send+0x360>)
 8004d68:	4b95      	ldr	r3, [pc, #596]	@ (8004fc0 <AT_Send+0x350>)
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f008 fd31 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWSTATE();
 8004d72:	230f      	movs	r3, #15
 8004d74:	18fc      	adds	r4, r7, r3
 8004d76:	f7ff fcc7 	bl	8004708 <CWSTATE>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d7e:	f009 f8c7 	bl	800df10 <HAL_GetTick>
 8004d82:	0003      	movs	r3, r0
 8004d84:	33f5      	adds	r3, #245	@ 0xf5
 8004d86:	33ff      	adds	r3, #255	@ 0xff
 8004d88:	001a      	movs	r2, r3
 8004d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8004fb8 <AT_Send+0x348>)
 8004d8c:	601a      	str	r2, [r3, #0]
    break;
 8004d8e:	e109      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004d90:	4a90      	ldr	r2, [pc, #576]	@ (8004fd4 <AT_Send+0x364>)
 8004d92:	4b8b      	ldr	r3, [pc, #556]	@ (8004fc0 <AT_Send+0x350>)
 8004d94:	0019      	movs	r1, r3
 8004d96:	2003      	movs	r0, #3
 8004d98:	f008 fd1c 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWMODE1();
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	18fc      	adds	r4, r7, r3
 8004da0:	f7ff fbc0 	bl	8004524 <CWMODE1>
 8004da4:	0003      	movs	r3, r0
 8004da6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004da8:	f009 f8b2 	bl	800df10 <HAL_GetTick>
 8004dac:	0003      	movs	r3, r0
 8004dae:	330a      	adds	r3, #10
 8004db0:	001a      	movs	r2, r3
 8004db2:	4b81      	ldr	r3, [pc, #516]	@ (8004fb8 <AT_Send+0x348>)
 8004db4:	601a      	str	r2, [r3, #0]
    break;
 8004db6:	e0f5      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004db8:	4a86      	ldr	r2, [pc, #536]	@ (8004fd4 <AT_Send+0x364>)
 8004dba:	4b81      	ldr	r3, [pc, #516]	@ (8004fc0 <AT_Send+0x350>)
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	2003      	movs	r0, #3
 8004dc0:	f008 fd08 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWMODE2();
 8004dc4:	230f      	movs	r3, #15
 8004dc6:	18fc      	adds	r4, r7, r3
 8004dc8:	f7ff fbc8 	bl	800455c <CWMODE2>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dd0:	f009 f89e 	bl	800df10 <HAL_GetTick>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	330a      	adds	r3, #10
 8004dd8:	001a      	movs	r2, r3
 8004dda:	4b77      	ldr	r3, [pc, #476]	@ (8004fb8 <AT_Send+0x348>)
 8004ddc:	601a      	str	r2, [r3, #0]
    break;
 8004dde:	e0e1      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004de0:	4a7d      	ldr	r2, [pc, #500]	@ (8004fd8 <AT_Send+0x368>)
 8004de2:	4b77      	ldr	r3, [pc, #476]	@ (8004fc0 <AT_Send+0x350>)
 8004de4:	0019      	movs	r1, r3
 8004de6:	2003      	movs	r0, #3
 8004de8:	f008 fcf4 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004dec:	230f      	movs	r3, #15
 8004dee:	18fc      	adds	r4, r7, r3
 8004df0:	f7ff fbd0 	bl	8004594 <CWAUTOCONN>
 8004df4:	0003      	movs	r3, r0
 8004df6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004df8:	f009 f88a 	bl	800df10 <HAL_GetTick>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	330a      	adds	r3, #10
 8004e00:	001a      	movs	r2, r3
 8004e02:	4b6d      	ldr	r3, [pc, #436]	@ (8004fb8 <AT_Send+0x348>)
 8004e04:	601a      	str	r2, [r3, #0]
    break;
 8004e06:	e0cd      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004e08:	4a74      	ldr	r2, [pc, #464]	@ (8004fdc <AT_Send+0x36c>)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc0 <AT_Send+0x350>)
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	2003      	movs	r0, #3
 8004e10:	f008 fce0 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWJAP();
 8004e14:	230f      	movs	r3, #15
 8004e16:	18fc      	adds	r4, r7, r3
 8004e18:	f7ff fbd8 	bl	80045cc <CWJAP>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e20:	f009 f876 	bl	800df10 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	3332      	adds	r3, #50	@ 0x32
 8004e28:	001a      	movs	r2, r3
 8004e2a:	4b63      	ldr	r3, [pc, #396]	@ (8004fb8 <AT_Send+0x348>)
 8004e2c:	601a      	str	r2, [r3, #0]
    break;
 8004e2e:	e0b9      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004e30:	4a6b      	ldr	r2, [pc, #428]	@ (8004fe0 <AT_Send+0x370>)
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <AT_Send+0x350>)
 8004e34:	0019      	movs	r1, r3
 8004e36:	2003      	movs	r0, #3
 8004e38:	f008 fccc 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWMODE3();
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	18fc      	adds	r4, r7, r3
 8004e40:	f7ff fc46 	bl	80046d0 <CWMODE3>
 8004e44:	0003      	movs	r3, r0
 8004e46:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e48:	f009 f862 	bl	800df10 <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	330a      	adds	r3, #10
 8004e50:	001a      	movs	r2, r3
 8004e52:	4b59      	ldr	r3, [pc, #356]	@ (8004fb8 <AT_Send+0x348>)
 8004e54:	601a      	str	r2, [r3, #0]
    break;
 8004e56:	e0a5      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004e58:	4a62      	ldr	r2, [pc, #392]	@ (8004fe4 <AT_Send+0x374>)
 8004e5a:	4b59      	ldr	r3, [pc, #356]	@ (8004fc0 <AT_Send+0x350>)
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	2003      	movs	r0, #3
 8004e60:	f008 fcb8 	bl	800d7d4 <CreateLine>
    ATCommandSend = CWSAP();
 8004e64:	230f      	movs	r3, #15
 8004e66:	18fc      	adds	r4, r7, r3
 8004e68:	f7ff fc6a 	bl	8004740 <CWSAP>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e70:	f009 f84e 	bl	800df10 <HAL_GetTick>
 8004e74:	0003      	movs	r3, r0
 8004e76:	330a      	adds	r3, #10
 8004e78:	001a      	movs	r2, r3
 8004e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb8 <AT_Send+0x348>)
 8004e7c:	601a      	str	r2, [r3, #0]
    break;
 8004e7e:	e091      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004e80:	230f      	movs	r3, #15
 8004e82:	18fc      	adds	r4, r7, r3
 8004e84:	f7ff fc78 	bl	8004778 <CIPMUX>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e8c:	f009 f840 	bl	800df10 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	330a      	adds	r3, #10
 8004e94:	001a      	movs	r2, r3
 8004e96:	4b48      	ldr	r3, [pc, #288]	@ (8004fb8 <AT_Send+0x348>)
 8004e98:	601a      	str	r2, [r3, #0]
    break;
 8004e9a:	e083      	b.n	8004fa4 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004e9c:	230f      	movs	r3, #15
 8004e9e:	18fc      	adds	r4, r7, r3
 8004ea0:	f7ff fc86 	bl	80047b0 <WEBSERVER>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ea8:	f009 f832 	bl	800df10 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	330a      	adds	r3, #10
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <AT_Send+0x348>)
 8004eb4:	601a      	str	r2, [r3, #0]
    break;
 8004eb6:	e075      	b.n	8004fa4 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fc      	adds	r4, r7, r3
 8004ebc:	f7ff fc94 	bl	80047e8 <HTTPCPOST>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ec4:	f009 f824 	bl	800df10 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	33f5      	adds	r3, #245	@ 0xf5
 8004ecc:	33ff      	adds	r3, #255	@ 0xff
 8004ece:	001a      	movs	r2, r3
 8004ed0:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <AT_Send+0x348>)
 8004ed2:	601a      	str	r2, [r3, #0]
    break;
 8004ed4:	e066      	b.n	8004fa4 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004ed6:	4a44      	ldr	r2, [pc, #272]	@ (8004fe8 <AT_Send+0x378>)
 8004ed8:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <AT_Send+0x350>)
 8004eda:	0019      	movs	r1, r3
 8004edc:	2003      	movs	r0, #3
 8004ede:	f008 fc79 	bl	800d7d4 <CreateLine>
    ATCommandSend = SENDDATA();
 8004ee2:	230f      	movs	r3, #15
 8004ee4:	18fc      	adds	r4, r7, r3
 8004ee6:	f7ff fcdf 	bl	80048a8 <SENDDATA>
 8004eea:	0003      	movs	r3, r0
 8004eec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004eee:	f009 f80f 	bl	800df10 <HAL_GetTick>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	33f5      	adds	r3, #245	@ 0xf5
 8004ef6:	33ff      	adds	r3, #255	@ 0xff
 8004ef8:	001a      	movs	r2, r3
 8004efa:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <AT_Send+0x348>)
 8004efc:	601a      	str	r2, [r3, #0]
    break;
 8004efe:	e051      	b.n	8004fa4 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004f00:	4a3a      	ldr	r2, [pc, #232]	@ (8004fec <AT_Send+0x37c>)
 8004f02:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc0 <AT_Send+0x350>)
 8004f04:	0019      	movs	r1, r3
 8004f06:	2003      	movs	r0, #3
 8004f08:	f008 fc64 	bl	800d7d4 <CreateLine>
    ATCommandSend = SLEEP();
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fc      	adds	r4, r7, r3
 8004f10:	f7ff fce6 	bl	80048e0 <SLEEP>
 8004f14:	0003      	movs	r3, r0
 8004f16:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f18:	f008 fffa 	bl	800df10 <HAL_GetTick>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	330a      	adds	r3, #10
 8004f20:	001a      	movs	r2, r3
 8004f22:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <AT_Send+0x348>)
 8004f24:	601a      	str	r2, [r3, #0]
    break;
 8004f26:	e03d      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004f28:	4a31      	ldr	r2, [pc, #196]	@ (8004ff0 <AT_Send+0x380>)
 8004f2a:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <AT_Send+0x350>)
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	2003      	movs	r0, #3
 8004f30:	f008 fc50 	bl	800d7d4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004f34:	230f      	movs	r3, #15
 8004f36:	18fc      	adds	r4, r7, r3
 8004f38:	f7ff fcee 	bl	8004918 <CIPSNTPCFG>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f40:	f008 ffe6 	bl	800df10 <HAL_GetTick>
 8004f44:	0003      	movs	r3, r0
 8004f46:	330a      	adds	r3, #10
 8004f48:	001a      	movs	r2, r3
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <AT_Send+0x348>)
 8004f4c:	601a      	str	r2, [r3, #0]
    break;
 8004f4e:	e029      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004f50:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <AT_Send+0x384>)
 8004f52:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <AT_Send+0x350>)
 8004f54:	0019      	movs	r1, r3
 8004f56:	2003      	movs	r0, #3
 8004f58:	f008 fc3c 	bl	800d7d4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004f5c:	230f      	movs	r3, #15
 8004f5e:	18fc      	adds	r4, r7, r3
 8004f60:	f7ff fcfa 	bl	8004958 <CIPSNTPTIME>
 8004f64:	0003      	movs	r3, r0
 8004f66:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f68:	f008 ffd2 	bl	800df10 <HAL_GetTick>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	33f5      	adds	r3, #245	@ 0xf5
 8004f70:	33ff      	adds	r3, #255	@ 0xff
 8004f72:	001a      	movs	r2, r3
 8004f74:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <AT_Send+0x348>)
 8004f76:	601a      	str	r2, [r3, #0]
    break;
 8004f78:	e014      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff8 <AT_Send+0x388>)
 8004f7c:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <AT_Send+0x350>)
 8004f7e:	0019      	movs	r1, r3
 8004f80:	2003      	movs	r0, #3
 8004f82:	f008 fc27 	bl	800d7d4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004f86:	230f      	movs	r3, #15
 8004f88:	18fc      	adds	r4, r7, r3
 8004f8a:	f7ff fd01 	bl	8004990 <CIPSNTPINTV>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f92:	f008 ffbd 	bl	800df10 <HAL_GetTick>
 8004f96:	0003      	movs	r3, r0
 8004f98:	330a      	adds	r3, #10
 8004f9a:	001a      	movs	r2, r3
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <AT_Send+0x348>)
 8004f9e:	601a      	str	r2, [r3, #0]
    break;
 8004fa0:	e000      	b.n	8004fa4 <AT_Send+0x334>
  break;
 8004fa2:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004fa4:	230f      	movs	r3, #15
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b005      	add	sp, #20
 8004fb0:	bd90      	pop	{r4, r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	08023d90 	.word	0x08023d90
 8004fb8:	20000994 	.word	0x20000994
 8004fbc:	080228e8 	.word	0x080228e8
 8004fc0:	08022280 	.word	0x08022280
 8004fc4:	080228fc 	.word	0x080228fc
 8004fc8:	08022910 	.word	0x08022910
 8004fcc:	08022920 	.word	0x08022920
 8004fd0:	08022934 	.word	0x08022934
 8004fd4:	0802294c 	.word	0x0802294c
 8004fd8:	08022964 	.word	0x08022964
 8004fdc:	0802297c 	.word	0x0802297c
 8004fe0:	08022990 	.word	0x08022990
 8004fe4:	080229ac 	.word	0x080229ac
 8004fe8:	080229c8 	.word	0x080229c8
 8004fec:	080229d8 	.word	0x080229d8
 8004ff0:	080229fc 	.word	0x080229fc
 8004ff4:	08022a10 	.word	0x08022a10
 8004ff8:	08022a28 	.word	0x08022a28

08004ffc <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005008:	4b7a      	ldr	r3, [pc, #488]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b05      	cmp	r3, #5
 800500e:	d900      	bls.n	8005012 <ESP_WakeTest+0x16>
 8005010:	e0d6      	b.n	80051c0 <ESP_WakeTest+0x1c4>
 8005012:	009a      	lsls	r2, r3, #2
 8005014:	4b78      	ldr	r3, [pc, #480]	@ (80051f8 <ESP_WakeTest+0x1fc>)
 8005016:	18d3      	adds	r3, r2, r3
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 800501c:	4b77      	ldr	r3, [pc, #476]	@ (80051fc <ESP_WakeTest+0x200>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	4053      	eors	r3, r2
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800502a:	2380      	movs	r3, #128	@ 0x80
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	4874      	ldr	r0, [pc, #464]	@ (8005200 <ESP_WakeTest+0x204>)
 8005030:	2200      	movs	r2, #0
 8005032:	0019      	movs	r1, r3
 8005034:	f00a f9e7 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005038:	2032      	movs	r0, #50	@ 0x32
 800503a:	f008 ff73 	bl	800df24 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	486f      	ldr	r0, [pc, #444]	@ (8005200 <ESP_WakeTest+0x204>)
 8005044:	2201      	movs	r2, #1
 8005046:	0019      	movs	r1, r3
 8005048:	f00a f9dd 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800504c:	200a      	movs	r0, #10
 800504e:	f008 ff69 	bl	800df24 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005052:	4b6c      	ldr	r3, [pc, #432]	@ (8005204 <ESP_WakeTest+0x208>)
 8005054:	2200      	movs	r2, #0
 8005056:	2101      	movs	r1, #1
 8005058:	0018      	movs	r0, r3
 800505a:	f00a f9d4 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800505e:	200a      	movs	r0, #10
 8005060:	f008 ff60 	bl	800df24 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005064:	4b67      	ldr	r3, [pc, #412]	@ (8005204 <ESP_WakeTest+0x208>)
 8005066:	2201      	movs	r2, #1
 8005068:	2102      	movs	r1, #2
 800506a:	0018      	movs	r0, r3
 800506c:	f00a f9cb 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005070:	200a      	movs	r0, #10
 8005072:	f008 ff57 	bl	800df24 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005076:	4b63      	ldr	r3, [pc, #396]	@ (8005204 <ESP_WakeTest+0x208>)
 8005078:	2201      	movs	r2, #1
 800507a:	2101      	movs	r1, #1
 800507c:	0018      	movs	r0, r3
 800507e:	f00a f9c2 	bl	800f406 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005082:	f008 ff45 	bl	800df10 <HAL_GetTick>
 8005086:	0003      	movs	r3, r0
 8005088:	22af      	movs	r2, #175	@ 0xaf
 800508a:	0092      	lsls	r2, r2, #2
 800508c:	189a      	adds	r2, r3, r2
 800508e:	4b5e      	ldr	r3, [pc, #376]	@ (8005208 <ESP_WakeTest+0x20c>)
 8005090:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005092:	4b5a      	ldr	r3, [pc, #360]	@ (80051fc <ESP_WakeTest+0x200>)
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	005a      	lsls	r2, r3, #1
 800509c:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <ESP_WakeTest+0x210>)
 800509e:	0011      	movs	r1, r2
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe fcf5 	bl	8003a90 <ESP_Receive>
 80050a6:	1e03      	subs	r3, r0, #0
 80050a8:	d100      	bne.n	80050ac <ESP_WakeTest+0xb0>
 80050aa:	e099      	b.n	80051e0 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 80050ac:	4b51      	ldr	r3, [pc, #324]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80050b2:	e095      	b.n	80051e0 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80050b4:	4b54      	ldr	r3, [pc, #336]	@ (8005208 <ESP_WakeTest+0x20c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f008 fb35 	bl	800d728 <TimestampIsReached>
 80050be:	1e03      	subs	r3, r0, #0
 80050c0:	d100      	bne.n	80050c4 <ESP_WakeTest+0xc8>
 80050c2:	e08f      	b.n	80051e4 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 80050c4:	4b52      	ldr	r3, [pc, #328]	@ (8005210 <ESP_WakeTest+0x214>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	1dfc      	adds	r4, r7, #7
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7ff fdd0 	bl	8004c70 <AT_Send>
 80050d0:	0003      	movs	r3, r0
 80050d2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80050d4:	1dfb      	adds	r3, r7, #7
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d100      	bne.n	80050de <ESP_WakeTest+0xe2>
 80050dc:	e082      	b.n	80051e4 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80050de:	4b45      	ldr	r3, [pc, #276]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80050e0:	2202      	movs	r2, #2
 80050e2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80050e4:	e07e      	b.n	80051e4 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80050e6:	4b48      	ldr	r3, [pc, #288]	@ (8005208 <ESP_WakeTest+0x20c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f008 fb1c 	bl	800d728 <TimestampIsReached>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d100      	bne.n	80050f6 <ESP_WakeTest+0xfa>
 80050f4:	e078      	b.n	80051e8 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80050f6:	4b47      	ldr	r3, [pc, #284]	@ (8005214 <ESP_WakeTest+0x218>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fc64 	bl	80049c8 <DMA_ProcessBuffer>
 8005100:	0003      	movs	r3, r0
 8005102:	001a      	movs	r2, r3
 8005104:	4b44      	ldr	r3, [pc, #272]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005106:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005108:	4b43      	ldr	r3, [pc, #268]	@ (8005218 <ESP_WakeTest+0x21c>)
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	4b41      	ldr	r3, [pc, #260]	@ (8005214 <ESP_WakeTest+0x218>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	1dbc      	adds	r4, r7, #6
 8005112:	0019      	movs	r1, r3
 8005114:	0010      	movs	r0, r2
 8005116:	f7ff fd69 	bl	8004bec <ATCompare>
 800511a:	0003      	movs	r3, r0
 800511c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800511e:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8005126:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800512c:	4b3a      	ldr	r3, [pc, #232]	@ (8005218 <ESP_WakeTest+0x21c>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b07      	cmp	r3, #7
 8005132:	d104      	bne.n	800513e <ESP_WakeTest+0x142>
          StartProg();
 8005134:	f7fe ff4e 	bl	8003fd4 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005138:	4b2e      	ldr	r3, [pc, #184]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 800513a:	2205      	movs	r2, #5
 800513c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800513e:	4b36      	ldr	r3, [pc, #216]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d109      	bne.n	800515a <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8005146:	f008 fee3 	bl	800df10 <HAL_GetTick>
 800514a:	0003      	movs	r3, r0
 800514c:	3332      	adds	r3, #50	@ 0x32
 800514e:	001a      	movs	r2, r3
 8005150:	4b2d      	ldr	r3, [pc, #180]	@ (8005208 <ESP_WakeTest+0x20c>)
 8005152:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8005154:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d042      	beq.n	80051e8 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8005162:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005164:	2203      	movs	r2, #3
 8005166:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005168:	e03e      	b.n	80051e8 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800516a:	4b2c      	ldr	r3, [pc, #176]	@ (800521c <ESP_WakeTest+0x220>)
 800516c:	22fa      	movs	r2, #250	@ 0xfa
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8005172:	4b2a      	ldr	r3, [pc, #168]	@ (800521c <ESP_WakeTest+0x220>)
 8005174:	4a2a      	ldr	r2, [pc, #168]	@ (8005220 <ESP_WakeTest+0x224>)
 8005176:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005178:	4b28      	ldr	r3, [pc, #160]	@ (800521c <ESP_WakeTest+0x220>)
 800517a:	22fa      	movs	r2, #250	@ 0xfa
 800517c:	0112      	lsls	r2, r2, #4
 800517e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005180:	4b1c      	ldr	r3, [pc, #112]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005182:	2204      	movs	r2, #4
 8005184:	701a      	strb	r2, [r3, #0]

      break;
 8005186:	e030      	b.n	80051ea <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005188:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <ESP_WakeTest+0x228>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800518e:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <ESP_WakeTest+0x200>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005194:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <ESP_WakeTest+0x208>)
 8005196:	2200      	movs	r2, #0
 8005198:	2101      	movs	r1, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f00a f933 	bl	800f406 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	4816      	ldr	r0, [pc, #88]	@ (8005200 <ESP_WakeTest+0x204>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	0019      	movs	r1, r3
 80051aa:	f00a f92c 	bl	800f406 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80051ae:	4b15      	ldr	r3, [pc, #84]	@ (8005204 <ESP_WakeTest+0x208>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	2102      	movs	r1, #2
 80051b4:	0018      	movs	r0, r3
 80051b6:	f00a f926 	bl	800f406 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80051ba:	f003 facd 	bl	8008758 <SetESPMeasurementDone>
      break;
 80051be:	e014      	b.n	80051ea <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 80051c0:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
      break;
 80051c6:	e010      	b.n	80051ea <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <ESP_WakeTest+0x220>)
 80051ca:	22fa      	movs	r2, #250	@ 0xfa
 80051cc:	0112      	lsls	r2, r2, #4
 80051ce:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80051d0:	4b12      	ldr	r3, [pc, #72]	@ (800521c <ESP_WakeTest+0x220>)
 80051d2:	22fa      	movs	r2, #250	@ 0xfa
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80051d8:	4b10      	ldr	r3, [pc, #64]	@ (800521c <ESP_WakeTest+0x220>)
 80051da:	2200      	movs	r2, #0
 80051dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80051de:	e004      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	e002      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e4:	46c0      	nop			@ (mov r8, r8)
 80051e6:	e000      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b003      	add	sp, #12
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	200009a4 	.word	0x200009a4
 80051f8:	08023de0 	.word	0x08023de0
 80051fc:	20000548 	.word	0x20000548
 8005200:	50000800 	.word	0x50000800
 8005204:	50001c00 	.word	0x50001c00
 8005208:	20000994 	.word	0x20000994
 800520c:	20000448 	.word	0x20000448
 8005210:	200009a2 	.word	0x200009a2
 8005214:	200009a1 	.word	0x200009a1
 8005218:	20000029 	.word	0x20000029
 800521c:	40000400 	.word	0x40000400
 8005220:	00000bb8 	.word	0x00000bb8
 8005224:	20000000 	.word	0x20000000

08005228 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 8005234:	4bdb      	ldr	r3, [pc, #876]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	4bdb      	ldr	r3, [pc, #876]	@ (80055a8 <ESP_Upkeep+0x380>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d01f      	beq.n	8005280 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005240:	4bd8      	ldr	r3, [pc, #864]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	4bd8      	ldr	r3, [pc, #864]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005246:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005248:	4bd7      	ldr	r3, [pc, #860]	@ (80055a8 <ESP_Upkeep+0x380>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d103      	bne.n	8005258 <ESP_Upkeep+0x30>
 8005250:	4bd6      	ldr	r3, [pc, #856]	@ (80055ac <ESP_Upkeep+0x384>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b0e      	cmp	r3, #14
 8005256:	d013      	beq.n	8005280 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005258:	4bd3      	ldr	r3, [pc, #844]	@ (80055a8 <ESP_Upkeep+0x380>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	001d      	movs	r5, r3
 800525e:	4bd3      	ldr	r3, [pc, #844]	@ (80055ac <ESP_Upkeep+0x384>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	0018      	movs	r0, r3
 8005264:	4bd2      	ldr	r3, [pc, #840]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	001c      	movs	r4, r3
 800526a:	4bd2      	ldr	r3, [pc, #840]	@ (80055b4 <ESP_Upkeep+0x38c>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4ad2      	ldr	r2, [pc, #840]	@ (80055b8 <ESP_Upkeep+0x390>)
 8005270:	49d2      	ldr	r1, [pc, #840]	@ (80055bc <ESP_Upkeep+0x394>)
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	9401      	str	r4, [sp, #4]
 8005276:	9000      	str	r0, [sp, #0]
 8005278:	002b      	movs	r3, r5
 800527a:	2003      	movs	r0, #3
 800527c:	f008 faaa 	bl	800d7d4 <CreateLine>
    }
  }

  switch (EspState) {
 8005280:	4bc8      	ldr	r3, [pc, #800]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d901      	bls.n	800528c <ESP_Upkeep+0x64>
 8005288:	f000 fbfb 	bl	8005a82 <ESP_Upkeep+0x85a>
 800528c:	009a      	lsls	r2, r3, #2
 800528e:	4bcc      	ldr	r3, [pc, #816]	@ (80055c0 <ESP_Upkeep+0x398>)
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005296:	4bc3      	ldr	r3, [pc, #780]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
      break;
 800529c:	f000 fc0a 	bl	8005ab4 <ESP_Upkeep+0x88c>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 80052a0:	4bc8      	ldr	r3, [pc, #800]	@ (80055c4 <ESP_Upkeep+0x39c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	4053      	eors	r3, r2
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d036      	beq.n	800531c <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	48c5      	ldr	r0, [pc, #788]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	0019      	movs	r1, r3
 80052b8:	f00a f8a5 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052bc:	2001      	movs	r0, #1
 80052be:	f008 fe31 	bl	800df24 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	48c0      	ldr	r0, [pc, #768]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	0019      	movs	r1, r3
 80052cc:	f00a f89b 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052d0:	2001      	movs	r0, #1
 80052d2:	f008 fe27 	bl	800df24 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052d6:	4bbd      	ldr	r3, [pc, #756]	@ (80055cc <ESP_Upkeep+0x3a4>)
 80052d8:	2200      	movs	r2, #0
 80052da:	2101      	movs	r1, #1
 80052dc:	0018      	movs	r0, r3
 80052de:	f00a f892 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052e2:	2001      	movs	r0, #1
 80052e4:	f008 fe1e 	bl	800df24 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052e8:	4bb8      	ldr	r3, [pc, #736]	@ (80055cc <ESP_Upkeep+0x3a4>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	2102      	movs	r1, #2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f00a f889 	bl	800f406 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052f4:	2001      	movs	r0, #1
 80052f6:	f008 fe15 	bl	800df24 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052fa:	4bb4      	ldr	r3, [pc, #720]	@ (80055cc <ESP_Upkeep+0x3a4>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	2101      	movs	r1, #1
 8005300:	0018      	movs	r0, r3
 8005302:	f00a f880 	bl	800f406 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005306:	f008 fe03 	bl	800df10 <HAL_GetTick>
 800530a:	0003      	movs	r3, r0
 800530c:	22af      	movs	r2, #175	@ 0xaf
 800530e:	0092      	lsls	r2, r2, #2
 8005310:	189a      	adds	r2, r3, r2
 8005312:	4baf      	ldr	r3, [pc, #700]	@ (80055d0 <ESP_Upkeep+0x3a8>)
 8005314:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005316:	4bab      	ldr	r3, [pc, #684]	@ (80055c4 <ESP_Upkeep+0x39c>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	005a      	lsls	r2, r3, #1
 8005320:	4bac      	ldr	r3, [pc, #688]	@ (80055d4 <ESP_Upkeep+0x3ac>)
 8005322:	0011      	movs	r1, r2
 8005324:	0018      	movs	r0, r3
 8005326:	f7fe fbb3 	bl	8003a90 <ESP_Receive>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d101      	bne.n	8005332 <ESP_Upkeep+0x10a>
 800532e:	f000 fbb4 	bl	8005a9a <ESP_Upkeep+0x872>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005332:	4b9c      	ldr	r3, [pc, #624]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005334:	220f      	movs	r2, #15
 8005336:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005338:	f008 fdea 	bl	800df10 <HAL_GetTick>
 800533c:	0003      	movs	r3, r0
 800533e:	22fa      	movs	r2, #250	@ 0xfa
 8005340:	00d2      	lsls	r2, r2, #3
 8005342:	189a      	adds	r2, r3, r2
 8005344:	4ba4      	ldr	r3, [pc, #656]	@ (80055d8 <ESP_Upkeep+0x3b0>)
 8005346:	601a      	str	r2, [r3, #0]
      }
      break;
 8005348:	f000 fba7 	bl	8005a9a <ESP_Upkeep+0x872>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800534c:	2001      	movs	r0, #1
 800534e:	f7ff fb3b 	bl	80049c8 <DMA_ProcessBuffer>
 8005352:	0003      	movs	r3, r0
 8005354:	001a      	movs	r2, r3
 8005356:	4ba1      	ldr	r3, [pc, #644]	@ (80055dc <ESP_Upkeep+0x3b4>)
 8005358:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800535a:	4ba0      	ldr	r3, [pc, #640]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	1dbc      	adds	r4, r7, #6
 8005360:	2101      	movs	r1, #1
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff fc42 	bl	8004bec <ATCompare>
 8005368:	0003      	movs	r3, r0
 800536a:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800536c:	1dbb      	adds	r3, r7, #6
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d107      	bne.n	8005384 <ESP_Upkeep+0x15c>
 8005374:	4b98      	ldr	r3, [pc, #608]	@ (80055d8 <ESP_Upkeep+0x3b0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	0018      	movs	r0, r3
 800537a:	f008 f9d5 	bl	800d728 <TimestampIsReached>
 800537e:	1e03      	subs	r3, r0, #0
 8005380:	d100      	bne.n	8005384 <ESP_Upkeep+0x15c>
 8005382:	e38c      	b.n	8005a9e <ESP_Upkeep+0x876>
          EspState = ESP_STATE_MODE_SELECT;
 8005384:	4b87      	ldr	r3, [pc, #540]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005386:	220b      	movs	r2, #11
 8005388:	701a      	strb	r2, [r3, #0]
        }
        break;
 800538a:	e388      	b.n	8005a9e <ESP_Upkeep+0x876>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 800538c:	4b94      	ldr	r3, [pc, #592]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 800538e:	2209      	movs	r2, #9
 8005390:	2114      	movs	r1, #20
 8005392:	0018      	movs	r0, r3
 8005394:	f019 ffc0 	bl	801f318 <memset>
      if(!InitIsDone || WifiReset){
 8005398:	4b92      	ldr	r3, [pc, #584]	@ (80055e4 <ESP_Upkeep+0x3bc>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	4053      	eors	r3, r2
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <ESP_Upkeep+0x186>
 80053a6:	4b90      	ldr	r3, [pc, #576]	@ (80055e8 <ESP_Upkeep+0x3c0>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01a      	beq.n	80053e4 <ESP_Upkeep+0x1bc>
        memcpy(ATCommandArray, AT_INIT, 7);
 80053ae:	4b8c      	ldr	r3, [pc, #560]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80053b0:	4a8e      	ldr	r2, [pc, #568]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80053b2:	6811      	ldr	r1, [r2, #0]
 80053b4:	6019      	str	r1, [r3, #0]
 80053b6:	8891      	ldrh	r1, [r2, #4]
 80053b8:	8099      	strh	r1, [r3, #4]
 80053ba:	7992      	ldrb	r2, [r2, #6]
 80053bc:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80053be:	4b79      	ldr	r3, [pc, #484]	@ (80055a4 <ESP_Upkeep+0x37c>)
 80053c0:	2204      	movs	r2, #4
 80053c2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053c4:	4b8a      	ldr	r3, [pc, #552]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80053ca:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <ESP_Upkeep+0x388>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80053d0:	4b87      	ldr	r3, [pc, #540]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	001a      	movs	r2, r3
 80053d6:	4b82      	ldr	r3, [pc, #520]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80053d8:	5c9a      	ldrb	r2, [r3, r2]
 80053da:	4b74      	ldr	r3, [pc, #464]	@ (80055ac <ESP_Upkeep+0x384>)
 80053dc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053de:	4b75      	ldr	r3, [pc, #468]	@ (80055b4 <ESP_Upkeep+0x38c>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80053e4:	4b7f      	ldr	r3, [pc, #508]	@ (80055e4 <ESP_Upkeep+0x3bc>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d01f      	beq.n	800542c <ESP_Upkeep+0x204>
 80053ec:	4b81      	ldr	r3, [pc, #516]	@ (80055f4 <ESP_Upkeep+0x3cc>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4053      	eors	r3, r2
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <ESP_Upkeep+0x204>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80053fa:	4b79      	ldr	r3, [pc, #484]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80053fc:	4a7e      	ldr	r2, [pc, #504]	@ (80055f8 <ESP_Upkeep+0x3d0>)
 80053fe:	6811      	ldr	r1, [r2, #0]
 8005400:	6019      	str	r1, [r3, #0]
 8005402:	8892      	ldrh	r2, [r2, #4]
 8005404:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005406:	4b67      	ldr	r3, [pc, #412]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005408:	2204      	movs	r2, #4
 800540a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800540c:	4b78      	ldr	r3, [pc, #480]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005412:	4b67      	ldr	r3, [pc, #412]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005418:	4b75      	ldr	r3, [pc, #468]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	001a      	movs	r2, r3
 800541e:	4b70      	ldr	r3, [pc, #448]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005420:	5c9a      	ldrb	r2, [r3, r2]
 8005422:	4b62      	ldr	r3, [pc, #392]	@ (80055ac <ESP_Upkeep+0x384>)
 8005424:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005426:	4b63      	ldr	r3, [pc, #396]	@ (80055b4 <ESP_Upkeep+0x38c>)
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800542c:	4b6d      	ldr	r3, [pc, #436]	@ (80055e4 <ESP_Upkeep+0x3bc>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d021      	beq.n	8005478 <ESP_Upkeep+0x250>
 8005434:	4b6f      	ldr	r3, [pc, #444]	@ (80055f4 <ESP_Upkeep+0x3cc>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01d      	beq.n	8005478 <ESP_Upkeep+0x250>
 800543c:	4b6f      	ldr	r3, [pc, #444]	@ (80055fc <ESP_Upkeep+0x3d4>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2201      	movs	r2, #1
 8005442:	4053      	eors	r3, r2
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d016      	beq.n	8005478 <ESP_Upkeep+0x250>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 800544a:	4b6d      	ldr	r3, [pc, #436]	@ (8005600 <ESP_Upkeep+0x3d8>)
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	4b64      	ldr	r3, [pc, #400]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005450:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005452:	4b54      	ldr	r3, [pc, #336]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005454:	2204      	movs	r2, #4
 8005456:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005458:	4b65      	ldr	r3, [pc, #404]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800545e:	4b54      	ldr	r3, [pc, #336]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005460:	2204      	movs	r2, #4
 8005462:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005464:	4b62      	ldr	r3, [pc, #392]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	001a      	movs	r2, r3
 800546a:	4b5d      	ldr	r3, [pc, #372]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 800546c:	5c9a      	ldrb	r2, [r3, r2]
 800546e:	4b4f      	ldr	r3, [pc, #316]	@ (80055ac <ESP_Upkeep+0x384>)
 8005470:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005472:	4b50      	ldr	r3, [pc, #320]	@ (80055b4 <ESP_Upkeep+0x38c>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005478:	4b5a      	ldr	r3, [pc, #360]	@ (80055e4 <ESP_Upkeep+0x3bc>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02e      	beq.n	80054de <ESP_Upkeep+0x2b6>
 8005480:	4b5c      	ldr	r3, [pc, #368]	@ (80055f4 <ESP_Upkeep+0x3cc>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02a      	beq.n	80054de <ESP_Upkeep+0x2b6>
 8005488:	4b5c      	ldr	r3, [pc, #368]	@ (80055fc <ESP_Upkeep+0x3d4>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d026      	beq.n	80054de <ESP_Upkeep+0x2b6>
 8005490:	4b5c      	ldr	r3, [pc, #368]	@ (8005604 <ESP_Upkeep+0x3dc>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	4053      	eors	r3, r2
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01f      	beq.n	80054de <ESP_Upkeep+0x2b6>
        memcpy(ATCommandArray, AT_SEND, 3);
 800549e:	4b50      	ldr	r3, [pc, #320]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80054a0:	4a59      	ldr	r2, [pc, #356]	@ (8005608 <ESP_Upkeep+0x3e0>)
 80054a2:	8811      	ldrh	r1, [r2, #0]
 80054a4:	8019      	strh	r1, [r3, #0]
 80054a6:	7892      	ldrb	r2, [r2, #2]
 80054a8:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80054aa:	4b3e      	ldr	r3, [pc, #248]	@ (80055a4 <ESP_Upkeep+0x37c>)
 80054ac:	2204      	movs	r2, #4
 80054ae:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054b0:	4b4f      	ldr	r3, [pc, #316]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80054b6:	4b3e      	ldr	r3, [pc, #248]	@ (80055b0 <ESP_Upkeep+0x388>)
 80054b8:	2202      	movs	r2, #2
 80054ba:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80054bc:	f008 fd28 	bl	800df10 <HAL_GetTick>
 80054c0:	0002      	movs	r2, r0
 80054c2:	4b52      	ldr	r3, [pc, #328]	@ (800560c <ESP_Upkeep+0x3e4>)
 80054c4:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80054c6:	f007 facf 	bl	800ca68 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80054ca:	4b49      	ldr	r3, [pc, #292]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	001a      	movs	r2, r3
 80054d0:	4b43      	ldr	r3, [pc, #268]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80054d2:	5c9a      	ldrb	r2, [r3, r2]
 80054d4:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <ESP_Upkeep+0x384>)
 80054d6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054d8:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <ESP_Upkeep+0x38c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80054de:	4b4c      	ldr	r3, [pc, #304]	@ (8005610 <ESP_Upkeep+0x3e8>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d01a      	beq.n	800551c <ESP_Upkeep+0x2f4>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80054e6:	4b3e      	ldr	r3, [pc, #248]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80054e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005614 <ESP_Upkeep+0x3ec>)
 80054ea:	6811      	ldr	r1, [r2, #0]
 80054ec:	6019      	str	r1, [r3, #0]
 80054ee:	7912      	ldrb	r2, [r2, #4]
 80054f0:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054f2:	4b2c      	ldr	r3, [pc, #176]	@ (80055a4 <ESP_Upkeep+0x37c>)
 80054f4:	2204      	movs	r2, #4
 80054f6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054f8:	4b3d      	ldr	r3, [pc, #244]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80054fe:	4b2c      	ldr	r3, [pc, #176]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005500:	2203      	movs	r2, #3
 8005502:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005504:	f007 fab0 	bl	800ca68 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005508:	4b39      	ldr	r3, [pc, #228]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	001a      	movs	r2, r3
 800550e:	4b34      	ldr	r3, [pc, #208]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005510:	5c9a      	ldrb	r2, [r3, r2]
 8005512:	4b26      	ldr	r3, [pc, #152]	@ (80055ac <ESP_Upkeep+0x384>)
 8005514:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005516:	4b27      	ldr	r3, [pc, #156]	@ (80055b4 <ESP_Upkeep+0x38c>)
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 800551c:	4b31      	ldr	r3, [pc, #196]	@ (80055e4 <ESP_Upkeep+0x3bc>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d100      	bne.n	8005526 <ESP_Upkeep+0x2fe>
 8005524:	e2bd      	b.n	8005aa2 <ESP_Upkeep+0x87a>
 8005526:	4b33      	ldr	r3, [pc, #204]	@ (80055f4 <ESP_Upkeep+0x3cc>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d100      	bne.n	8005530 <ESP_Upkeep+0x308>
 800552e:	e2b8      	b.n	8005aa2 <ESP_Upkeep+0x87a>
 8005530:	4b32      	ldr	r3, [pc, #200]	@ (80055fc <ESP_Upkeep+0x3d4>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d100      	bne.n	800553a <ESP_Upkeep+0x312>
 8005538:	e2b3      	b.n	8005aa2 <ESP_Upkeep+0x87a>
 800553a:	4b32      	ldr	r3, [pc, #200]	@ (8005604 <ESP_Upkeep+0x3dc>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d100      	bne.n	8005544 <ESP_Upkeep+0x31c>
 8005542:	e2ae      	b.n	8005aa2 <ESP_Upkeep+0x87a>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005544:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <ESP_Upkeep+0x3f0>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 800554a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800554c:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800554e:	2204      	movs	r2, #4
 8005550:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005552:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005558:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <ESP_Upkeep+0x388>)
 800555a:	2205      	movs	r2, #5
 800555c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800555e:	f008 fcd7 	bl	800df10 <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	4b29      	ldr	r3, [pc, #164]	@ (800560c <ESP_Upkeep+0x3e4>)
 8005566:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005568:	f007 fa7e 	bl	800ca68 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800556c:	4b20      	ldr	r3, [pc, #128]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	001a      	movs	r2, r3
 8005572:	4b1b      	ldr	r3, [pc, #108]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005574:	5c9a      	ldrb	r2, [r3, r2]
 8005576:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <ESP_Upkeep+0x384>)
 8005578:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800557a:	4b0e      	ldr	r3, [pc, #56]	@ (80055b4 <ESP_Upkeep+0x38c>)
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005580:	e28f      	b.n	8005aa2 <ESP_Upkeep+0x87a>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <ESP_Upkeep+0x384>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	1dfc      	adds	r4, r7, #7
 8005588:	0018      	movs	r0, r3
 800558a:	f7ff fb71 	bl	8004c70 <AT_Send>
 800558e:	0003      	movs	r3, r0
 8005590:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d100      	bne.n	800559c <ESP_Upkeep+0x374>
 800559a:	e284      	b.n	8005aa6 <ESP_Upkeep+0x87e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800559c:	4b01      	ldr	r3, [pc, #4]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800559e:	2203      	movs	r2, #3
 80055a0:	701a      	strb	r2, [r3, #0]
        }
    break;
 80055a2:	e280      	b.n	8005aa6 <ESP_Upkeep+0x87e>
 80055a4:	20000028 	.word	0x20000028
 80055a8:	20000002 	.word	0x20000002
 80055ac:	200009a2 	.word	0x200009a2
 80055b0:	200009a3 	.word	0x200009a3
 80055b4:	200009a1 	.word	0x200009a1
 80055b8:	08022a48 	.word	0x08022a48
 80055bc:	08022280 	.word	0x08022280
 80055c0:	08023df8 	.word	0x08023df8
 80055c4:	20000548 	.word	0x20000548
 80055c8:	50000800 	.word	0x50000800
 80055cc:	50001c00 	.word	0x50001c00
 80055d0:	20000994 	.word	0x20000994
 80055d4:	20000448 	.word	0x20000448
 80055d8:	20000aa8 	.word	0x20000aa8
 80055dc:	2000002a 	.word	0x2000002a
 80055e0:	20000984 	.word	0x20000984
 80055e4:	20000549 	.word	0x20000549
 80055e8:	2000054a 	.word	0x2000054a
 80055ec:	20000004 	.word	0x20000004
 80055f0:	2000098e 	.word	0x2000098e
 80055f4:	2000054c 	.word	0x2000054c
 80055f8:	20000014 	.word	0x20000014
 80055fc:	2000054d 	.word	0x2000054d
 8005600:	20000010 	.word	0x20000010
 8005604:	20000001 	.word	0x20000001
 8005608:	2000000c 	.word	0x2000000c
 800560c:	2000055c 	.word	0x2000055c
 8005610:	2000054b 	.word	0x2000054b
 8005614:	2000001c 	.word	0x2000001c
 8005618:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 800561c:	4bdf      	ldr	r3, [pc, #892]	@ (800599c <ESP_Upkeep+0x774>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	0018      	movs	r0, r3
 8005622:	f008 f881 	bl	800d728 <TimestampIsReached>
 8005626:	1e03      	subs	r3, r0, #0
 8005628:	d100      	bne.n	800562c <ESP_Upkeep+0x404>
 800562a:	e23e      	b.n	8005aaa <ESP_Upkeep+0x882>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800562c:	4bdc      	ldr	r3, [pc, #880]	@ (80059a0 <ESP_Upkeep+0x778>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	0018      	movs	r0, r3
 8005632:	f7ff f9c9 	bl	80049c8 <DMA_ProcessBuffer>
 8005636:	0003      	movs	r3, r0
 8005638:	001a      	movs	r2, r3
 800563a:	4bda      	ldr	r3, [pc, #872]	@ (80059a4 <ESP_Upkeep+0x77c>)
 800563c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800563e:	4bd9      	ldr	r3, [pc, #868]	@ (80059a4 <ESP_Upkeep+0x77c>)
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	4bd7      	ldr	r3, [pc, #860]	@ (80059a0 <ESP_Upkeep+0x778>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	1d7c      	adds	r4, r7, #5
 8005648:	0019      	movs	r1, r3
 800564a:	0010      	movs	r0, r2
 800564c:	f7ff face 	bl	8004bec <ATCompare>
 8005650:	0003      	movs	r3, r0
 8005652:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005654:	4bd3      	ldr	r3, [pc, #844]	@ (80059a4 <ESP_Upkeep+0x77c>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d139      	bne.n	80056d0 <ESP_Upkeep+0x4a8>
          if(ATCommand == AT_SENDDATA){
 800565c:	4bd2      	ldr	r3, [pc, #840]	@ (80059a8 <ESP_Upkeep+0x780>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b0f      	cmp	r3, #15
 8005662:	d108      	bne.n	8005676 <ESP_Upkeep+0x44e>
            ATCommand = AT_HTTPCPOST;
 8005664:	4bd0      	ldr	r3, [pc, #832]	@ (80059a8 <ESP_Upkeep+0x780>)
 8005666:	220e      	movs	r2, #14
 8005668:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800566a:	4bcd      	ldr	r3, [pc, #820]	@ (80059a0 <ESP_Upkeep+0x778>)
 800566c:	2202      	movs	r2, #2
 800566e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005670:	4bce      	ldr	r3, [pc, #824]	@ (80059ac <ESP_Upkeep+0x784>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005676:	4bce      	ldr	r3, [pc, #824]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005678:	2204      	movs	r2, #4
 800567a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800567c:	4bcd      	ldr	r3, [pc, #820]	@ (80059b4 <ESP_Upkeep+0x78c>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	b2da      	uxtb	r2, r3
 8005684:	4bcb      	ldr	r3, [pc, #812]	@ (80059b4 <ESP_Upkeep+0x78c>)
 8005686:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005688:	4bca      	ldr	r3, [pc, #808]	@ (80059b4 <ESP_Upkeep+0x78c>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b03      	cmp	r3, #3
 800568e:	d11f      	bne.n	80056d0 <ESP_Upkeep+0x4a8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005690:	f008 fc3e 	bl	800df10 <HAL_GetTick>
 8005694:	0003      	movs	r3, r0
 8005696:	4ac8      	ldr	r2, [pc, #800]	@ (80059b8 <ESP_Upkeep+0x790>)
 8005698:	189a      	adds	r2, r3, r2
 800569a:	4bc0      	ldr	r3, [pc, #768]	@ (800599c <ESP_Upkeep+0x774>)
 800569c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800569e:	4bc7      	ldr	r3, [pc, #796]	@ (80059bc <ESP_Upkeep+0x794>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80056a4:	f007 f9f8 	bl	800ca98 <ResetESPIndicator>
            clearDMABuffer();
 80056a8:	f7ff fa92 	bl	8004bd0 <clearDMABuffer>
            stop = HAL_GetTick();
 80056ac:	f008 fc30 	bl	800df10 <HAL_GetTick>
 80056b0:	0002      	movs	r2, r0
 80056b2:	4bc3      	ldr	r3, [pc, #780]	@ (80059c0 <ESP_Upkeep+0x798>)
 80056b4:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80056b6:	4bc2      	ldr	r3, [pc, #776]	@ (80059c0 <ESP_Upkeep+0x798>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4bc2      	ldr	r3, [pc, #776]	@ (80059c4 <ESP_Upkeep+0x79c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	4ac1      	ldr	r2, [pc, #772]	@ (80059c8 <ESP_Upkeep+0x7a0>)
 80056c2:	49c2      	ldr	r1, [pc, #776]	@ (80059cc <ESP_Upkeep+0x7a4>)
 80056c4:	2003      	movs	r0, #3
 80056c6:	f008 f885 	bl	800d7d4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80056ca:	4bb9      	ldr	r3, [pc, #740]	@ (80059b0 <ESP_Upkeep+0x788>)
 80056cc:	220d      	movs	r2, #13
 80056ce:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80056d0:	4bb4      	ldr	r3, [pc, #720]	@ (80059a4 <ESP_Upkeep+0x77c>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d106      	bne.n	80056e6 <ESP_Upkeep+0x4be>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056d8:	f008 fc1a 	bl	800df10 <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	330a      	adds	r3, #10
 80056e0:	001a      	movs	r2, r3
 80056e2:	4bae      	ldr	r3, [pc, #696]	@ (800599c <ESP_Upkeep+0x774>)
 80056e4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80056e6:	4baf      	ldr	r3, [pc, #700]	@ (80059a4 <ESP_Upkeep+0x77c>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b0a      	cmp	r3, #10
 80056ec:	d106      	bne.n	80056fc <ESP_Upkeep+0x4d4>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056ee:	f008 fc0f 	bl	800df10 <HAL_GetTick>
 80056f2:	0003      	movs	r3, r0
 80056f4:	330a      	adds	r3, #10
 80056f6:	001a      	movs	r2, r3
 80056f8:	4ba8      	ldr	r3, [pc, #672]	@ (800599c <ESP_Upkeep+0x774>)
 80056fa:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80056fc:	4ba9      	ldr	r3, [pc, #676]	@ (80059a4 <ESP_Upkeep+0x77c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b06      	cmp	r3, #6
 8005702:	d146      	bne.n	8005792 <ESP_Upkeep+0x56a>
//====
          timeoutcntr++;
 8005704:	4bb2      	ldr	r3, [pc, #712]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	b2da      	uxtb	r2, r3
 800570c:	4bb0      	ldr	r3, [pc, #704]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 800570e:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 8005710:	4baf      	ldr	r3, [pc, #700]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d125      	bne.n	8005764 <ESP_Upkeep+0x53c>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005718:	f008 fbfa 	bl	800df10 <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	4aa6      	ldr	r2, [pc, #664]	@ (80059b8 <ESP_Upkeep+0x790>)
 8005720:	189a      	adds	r2, r3, r2
 8005722:	4b9e      	ldr	r3, [pc, #632]	@ (800599c <ESP_Upkeep+0x774>)
 8005724:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005726:	4ba5      	ldr	r3, [pc, #660]	@ (80059bc <ESP_Upkeep+0x794>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 800572c:	f007 f9b4 	bl	800ca98 <ResetESPIndicator>
            clearDMABuffer();
 8005730:	f7ff fa4e 	bl	8004bd0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005734:	f008 fbec 	bl	800df10 <HAL_GetTick>
 8005738:	0002      	movs	r2, r0
 800573a:	4ba1      	ldr	r3, [pc, #644]	@ (80059c0 <ESP_Upkeep+0x798>)
 800573c:	601a      	str	r2, [r3, #0]
            Debug("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800573e:	4ba0      	ldr	r3, [pc, #640]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4ba0      	ldr	r3, [pc, #640]	@ (80059c4 <ESP_Upkeep+0x79c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	4aa2      	ldr	r2, [pc, #648]	@ (80059d4 <ESP_Upkeep+0x7ac>)
 800574a:	49a0      	ldr	r1, [pc, #640]	@ (80059cc <ESP_Upkeep+0x7a4>)
 800574c:	2003      	movs	r0, #3
 800574e:	f008 f841 	bl	800d7d4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005752:	4b97      	ldr	r3, [pc, #604]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005754:	220d      	movs	r2, #13
 8005756:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005758:	4b93      	ldr	r3, [pc, #588]	@ (80059a8 <ESP_Upkeep+0x780>)
 800575a:	2214      	movs	r2, #20
 800575c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 800575e:	4b90      	ldr	r3, [pc, #576]	@ (80059a0 <ESP_Upkeep+0x778>)
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
          }
//====
          if(ATCommand != AT_SENDDATA){
 8005764:	4b90      	ldr	r3, [pc, #576]	@ (80059a8 <ESP_Upkeep+0x780>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b0f      	cmp	r3, #15
 800576a:	d003      	beq.n	8005774 <ESP_Upkeep+0x54c>
            EspState = ESP_STATE_SEND;
 800576c:	4b90      	ldr	r3, [pc, #576]	@ (80059b0 <ESP_Upkeep+0x788>)
 800576e:	2204      	movs	r2, #4
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e00e      	b.n	8005792 <ESP_Upkeep+0x56a>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005774:	4b8c      	ldr	r3, [pc, #560]	@ (80059a8 <ESP_Upkeep+0x780>)
 8005776:	220e      	movs	r2, #14
 8005778:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800577a:	4b8c      	ldr	r3, [pc, #560]	@ (80059ac <ESP_Upkeep+0x784>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	3b01      	subs	r3, #1
 8005780:	b2da      	uxtb	r2, r3
 8005782:	4b8a      	ldr	r3, [pc, #552]	@ (80059ac <ESP_Upkeep+0x784>)
 8005784:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005786:	4b86      	ldr	r3, [pc, #536]	@ (80059a0 <ESP_Upkeep+0x778>)
 8005788:	2202      	movs	r2, #2
 800578a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 800578c:	4b88      	ldr	r3, [pc, #544]	@ (80059b0 <ESP_Upkeep+0x788>)
 800578e:	2204      	movs	r2, #4
 8005790:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005792:	1d7b      	adds	r3, r7, #5
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d100      	bne.n	800579c <ESP_Upkeep+0x574>
 800579a:	e186      	b.n	8005aaa <ESP_Upkeep+0x882>
          EspState = ESP_STATE_NEXT_AT;
 800579c:	4b84      	ldr	r3, [pc, #528]	@ (80059b0 <ESP_Upkeep+0x788>)
 800579e:	2205      	movs	r2, #5
 80057a0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80057a2:	e182      	b.n	8005aaa <ESP_Upkeep+0x882>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 80057a4:	4b81      	ldr	r3, [pc, #516]	@ (80059ac <ESP_Upkeep+0x784>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	3301      	adds	r3, #1
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	4b7f      	ldr	r3, [pc, #508]	@ (80059ac <ESP_Upkeep+0x784>)
 80057ae:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80057b0:	4b7e      	ldr	r3, [pc, #504]	@ (80059ac <ESP_Upkeep+0x784>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	001a      	movs	r2, r3
 80057b6:	4b88      	ldr	r3, [pc, #544]	@ (80059d8 <ESP_Upkeep+0x7b0>)
 80057b8:	5c9a      	ldrb	r2, [r3, r2]
 80057ba:	4b7b      	ldr	r3, [pc, #492]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057bc:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80057be:	4b7a      	ldr	r3, [pc, #488]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d102      	bne.n	80057cc <ESP_Upkeep+0x5a4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80057c6:	4b76      	ldr	r3, [pc, #472]	@ (80059a0 <ESP_Upkeep+0x778>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80057cc:	4b76      	ldr	r3, [pc, #472]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b0e      	cmp	r3, #14
 80057d2:	d102      	bne.n	80057da <ESP_Upkeep+0x5b2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80057d4:	4b72      	ldr	r3, [pc, #456]	@ (80059a0 <ESP_Upkeep+0x778>)
 80057d6:	2202      	movs	r2, #2
 80057d8:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80057da:	4b73      	ldr	r3, [pc, #460]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b0e      	cmp	r3, #14
 80057e0:	d006      	beq.n	80057f0 <ESP_Upkeep+0x5c8>
 80057e2:	4b71      	ldr	r3, [pc, #452]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b03      	cmp	r3, #3
 80057e8:	d002      	beq.n	80057f0 <ESP_Upkeep+0x5c8>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057ea:	4b6d      	ldr	r3, [pc, #436]	@ (80059a0 <ESP_Upkeep+0x778>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80057f0:	4b6d      	ldr	r3, [pc, #436]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b11      	cmp	r3, #17
 80057f6:	d102      	bne.n	80057fe <ESP_Upkeep+0x5d6>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80057f8:	4b69      	ldr	r3, [pc, #420]	@ (80059a0 <ESP_Upkeep+0x778>)
 80057fa:	2205      	movs	r2, #5
 80057fc:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80057fe:	4b6c      	ldr	r3, [pc, #432]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005800:	2204      	movs	r2, #4
 8005802:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005804:	4b68      	ldr	r3, [pc, #416]	@ (80059a8 <ESP_Upkeep+0x780>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b14      	cmp	r3, #20
 800580a:	d000      	beq.n	800580e <ESP_Upkeep+0x5e6>
 800580c:	e14f      	b.n	8005aae <ESP_Upkeep+0x886>
        if(Mode == AT_MODE_SEND){
 800580e:	4b73      	ldr	r3, [pc, #460]	@ (80059dc <ESP_Upkeep+0x7b4>)
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d122      	bne.n	800585c <ESP_Upkeep+0x634>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005816:	f008 fb7b 	bl	800df10 <HAL_GetTick>
 800581a:	0003      	movs	r3, r0
 800581c:	4a66      	ldr	r2, [pc, #408]	@ (80059b8 <ESP_Upkeep+0x790>)
 800581e:	189a      	adds	r2, r3, r2
 8005820:	4b5e      	ldr	r3, [pc, #376]	@ (800599c <ESP_Upkeep+0x774>)
 8005822:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005824:	f007 f938 	bl	800ca98 <ResetESPIndicator>
          clearDMABuffer();
 8005828:	f7ff f9d2 	bl	8004bd0 <clearDMABuffer>
          stop = HAL_GetTick();
 800582c:	f008 fb70 	bl	800df10 <HAL_GetTick>
 8005830:	0002      	movs	r2, r0
 8005832:	4b63      	ldr	r3, [pc, #396]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005834:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 8005836:	4b62      	ldr	r3, [pc, #392]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b62      	ldr	r3, [pc, #392]	@ (80059c4 <ESP_Upkeep+0x79c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	4a67      	ldr	r2, [pc, #412]	@ (80059e0 <ESP_Upkeep+0x7b8>)
 8005842:	4962      	ldr	r1, [pc, #392]	@ (80059cc <ESP_Upkeep+0x7a4>)
 8005844:	2003      	movs	r0, #3
 8005846:	f007 ffc5 	bl	800d7d4 <CreateLine>
          showTime();
 800584a:	f000 fcc7 	bl	80061dc <showTime>
          ESPTransmitDone = true;
 800584e:	4b5b      	ldr	r3, [pc, #364]	@ (80059bc <ESP_Upkeep+0x794>)
 8005850:	2201      	movs	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005854:	4b56      	ldr	r3, [pc, #344]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005856:	220d      	movs	r2, #13
 8005858:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 800585a:	e128      	b.n	8005aae <ESP_Upkeep+0x886>
        else if (Mode == AT_MODE_GETTIME) {
 800585c:	4b5f      	ldr	r3, [pc, #380]	@ (80059dc <ESP_Upkeep+0x7b4>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b05      	cmp	r3, #5
 8005862:	d12e      	bne.n	80058c2 <ESP_Upkeep+0x69a>
            setTime = false;
 8005864:	4b5f      	ldr	r3, [pc, #380]	@ (80059e4 <ESP_Upkeep+0x7bc>)
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 800586a:	f008 fb51 	bl	800df10 <HAL_GetTick>
 800586e:	0003      	movs	r3, r0
 8005870:	4a5d      	ldr	r2, [pc, #372]	@ (80059e8 <ESP_Upkeep+0x7c0>)
 8005872:	189a      	adds	r2, r3, r2
 8005874:	4b5d      	ldr	r3, [pc, #372]	@ (80059ec <ESP_Upkeep+0x7c4>)
 8005876:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005878:	4b5c      	ldr	r3, [pc, #368]	@ (80059ec <ESP_Upkeep+0x7c4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5c      	ldr	r2, [pc, #368]	@ (80059f0 <ESP_Upkeep+0x7c8>)
 800587e:	4953      	ldr	r1, [pc, #332]	@ (80059cc <ESP_Upkeep+0x7a4>)
 8005880:	2003      	movs	r0, #3
 8005882:	f007 ffa7 	bl	800d7d4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005886:	4b5b      	ldr	r3, [pc, #364]	@ (80059f4 <ESP_Upkeep+0x7cc>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4b44      	ldr	r3, [pc, #272]	@ (800599c <ESP_Upkeep+0x774>)
 800588c:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 800588e:	f007 f903 	bl	800ca98 <ResetESPIndicator>
            clearDMABuffer();
 8005892:	f7ff f99d 	bl	8004bd0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005896:	f008 fb3b 	bl	800df10 <HAL_GetTick>
 800589a:	0002      	movs	r2, r0
 800589c:	4b48      	ldr	r3, [pc, #288]	@ (80059c0 <ESP_Upkeep+0x798>)
 800589e:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 80058a0:	4b47      	ldr	r3, [pc, #284]	@ (80059c0 <ESP_Upkeep+0x798>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	4b47      	ldr	r3, [pc, #284]	@ (80059c4 <ESP_Upkeep+0x79c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	4a53      	ldr	r2, [pc, #332]	@ (80059f8 <ESP_Upkeep+0x7d0>)
 80058ac:	4947      	ldr	r1, [pc, #284]	@ (80059cc <ESP_Upkeep+0x7a4>)
 80058ae:	2003      	movs	r0, #3
 80058b0:	f007 ff90 	bl	800d7d4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80058b4:	4b3e      	ldr	r3, [pc, #248]	@ (80059b0 <ESP_Upkeep+0x788>)
 80058b6:	220d      	movs	r2, #13
 80058b8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 80058ba:	4b48      	ldr	r3, [pc, #288]	@ (80059dc <ESP_Upkeep+0x7b4>)
 80058bc:	2202      	movs	r2, #2
 80058be:	701a      	strb	r2, [r3, #0]
    break;
 80058c0:	e0f5      	b.n	8005aae <ESP_Upkeep+0x886>
          EspState = ESP_STATE_RESET;
 80058c2:	4b3b      	ldr	r3, [pc, #236]	@ (80059b0 <ESP_Upkeep+0x788>)
 80058c4:	2209      	movs	r2, #9
 80058c6:	701a      	strb	r2, [r3, #0]
    break;
 80058c8:	e0f1      	b.n	8005aae <ESP_Upkeep+0x886>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80058ca:	4b4c      	ldr	r3, [pc, #304]	@ (80059fc <ESP_Upkeep+0x7d4>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80058d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a00 <ESP_Upkeep+0x7d8>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	2101      	movs	r1, #1
 80058d6:	0018      	movs	r0, r3
 80058d8:	f009 fd95 	bl	800f406 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80058dc:	2001      	movs	r0, #1
 80058de:	f008 fb21 	bl	800df24 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80058e2:	2380      	movs	r3, #128	@ 0x80
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	4847      	ldr	r0, [pc, #284]	@ (8005a04 <ESP_Upkeep+0x7dc>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	0019      	movs	r1, r3
 80058ec:	f009 fd8b 	bl	800f406 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80058f0:	2001      	movs	r0, #1
 80058f2:	f008 fb17 	bl	800df24 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80058f6:	4b42      	ldr	r3, [pc, #264]	@ (8005a00 <ESP_Upkeep+0x7d8>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	2102      	movs	r1, #2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f009 fd82 	bl	800f406 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005902:	4b2b      	ldr	r3, [pc, #172]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005904:	2209      	movs	r2, #9
 8005906:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005908:	2001      	movs	r0, #1
 800590a:	f008 fb0b 	bl	800df24 <HAL_Delay>
      errorcntr = 0;
 800590e:	4b29      	ldr	r3, [pc, #164]	@ (80059b4 <ESP_Upkeep+0x78c>)
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
      break;
 8005914:	e0ce      	b.n	8005ab4 <ESP_Upkeep+0x88c>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005916:	4b21      	ldr	r3, [pc, #132]	@ (800599c <ESP_Upkeep+0x774>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	0018      	movs	r0, r3
 800591c:	f007 ff04 	bl	800d728 <TimestampIsReached>
 8005920:	1e03      	subs	r3, r0, #0
 8005922:	d104      	bne.n	800592e <ESP_Upkeep+0x706>
 8005924:	4b38      	ldr	r3, [pc, #224]	@ (8005a08 <ESP_Upkeep+0x7e0>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d100      	bne.n	800592e <ESP_Upkeep+0x706>
 800592c:	e078      	b.n	8005a20 <ESP_Upkeep+0x7f8>
        if(Mode == AT_MODE_INIT){
 800592e:	4b2b      	ldr	r3, [pc, #172]	@ (80059dc <ESP_Upkeep+0x7b4>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <ESP_Upkeep+0x71a>
          InitIsDone = true;
 8005936:	4b35      	ldr	r3, [pc, #212]	@ (8005a0c <ESP_Upkeep+0x7e4>)
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800593c:	4b1c      	ldr	r3, [pc, #112]	@ (80059b0 <ESP_Upkeep+0x788>)
 800593e:	220b      	movs	r2, #11
 8005940:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005942:	4b26      	ldr	r3, [pc, #152]	@ (80059dc <ESP_Upkeep+0x7b4>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d108      	bne.n	800595c <ESP_Upkeep+0x734>
          ConnectionMade = true;
 800594a:	4b31      	ldr	r3, [pc, #196]	@ (8005a10 <ESP_Upkeep+0x7e8>)
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005950:	4b30      	ldr	r3, [pc, #192]	@ (8005a14 <ESP_Upkeep+0x7ec>)
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005956:	4b16      	ldr	r3, [pc, #88]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005958:	220b      	movs	r2, #11
 800595a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800595c:	4b1f      	ldr	r3, [pc, #124]	@ (80059dc <ESP_Upkeep+0x7b4>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d102      	bne.n	800596a <ESP_Upkeep+0x742>
          EspState = ESP_STATE_INIT;
 8005964:	4b12      	ldr	r3, [pc, #72]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005966:	2202      	movs	r2, #2
 8005968:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800596a:	4b1c      	ldr	r3, [pc, #112]	@ (80059dc <ESP_Upkeep+0x7b4>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d108      	bne.n	8005984 <ESP_Upkeep+0x75c>
          EspState = ESP_STATE_CONFIG;
 8005972:	4b0f      	ldr	r3, [pc, #60]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005974:	220e      	movs	r2, #14
 8005976:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005978:	4a27      	ldr	r2, [pc, #156]	@ (8005a18 <ESP_Upkeep+0x7f0>)
 800597a:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <ESP_Upkeep+0x7a4>)
 800597c:	0019      	movs	r1, r3
 800597e:	2003      	movs	r0, #3
 8005980:	f007 ff28 	bl	800d7d4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005984:	4b15      	ldr	r3, [pc, #84]	@ (80059dc <ESP_Upkeep+0x7b4>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d168      	bne.n	8005a5e <ESP_Upkeep+0x836>
          EspState = ESP_STATE_MODE_SELECT;
 800598c:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <ESP_Upkeep+0x788>)
 800598e:	220b      	movs	r2, #11
 8005990:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005992:	4b22      	ldr	r3, [pc, #136]	@ (8005a1c <ESP_Upkeep+0x7f4>)
 8005994:	2201      	movs	r2, #1
 8005996:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005998:	e061      	b.n	8005a5e <ESP_Upkeep+0x836>
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	20000994 	.word	0x20000994
 80059a0:	200009a1 	.word	0x200009a1
 80059a4:	2000002a 	.word	0x2000002a
 80059a8:	200009a2 	.word	0x200009a2
 80059ac:	2000098e 	.word	0x2000098e
 80059b0:	20000028 	.word	0x20000028
 80059b4:	2000098f 	.word	0x2000098f
 80059b8:	000493e0 	.word	0x000493e0
 80059bc:	2000054f 	.word	0x2000054f
 80059c0:	20000560 	.word	0x20000560
 80059c4:	2000055c 	.word	0x2000055c
 80059c8:	08022a74 	.word	0x08022a74
 80059cc:	08022280 	.word	0x08022280
 80059d0:	20000990 	.word	0x20000990
 80059d4:	08022aa8 	.word	0x08022aa8
 80059d8:	20000984 	.word	0x20000984
 80059dc:	200009a3 	.word	0x200009a3
 80059e0:	08022ad8 	.word	0x08022ad8
 80059e4:	20000001 	.word	0x20000001
 80059e8:	002c4020 	.word	0x002c4020
 80059ec:	20000998 	.word	0x20000998
 80059f0:	08022af0 	.word	0x08022af0
 80059f4:	2000099c 	.word	0x2000099c
 80059f8:	08022b34 	.word	0x08022b34
 80059fc:	20000548 	.word	0x20000548
 8005a00:	50001c00 	.word	0x50001c00
 8005a04:	50000800 	.word	0x50000800
 8005a08:	2000054b 	.word	0x2000054b
 8005a0c:	20000549 	.word	0x20000549
 8005a10:	2000054c 	.word	0x2000054c
 8005a14:	2000054e 	.word	0x2000054e
 8005a18:	08022b54 	.word	0x08022b54
 8005a1c:	2000054d 	.word	0x2000054d
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005a20:	4b27      	ldr	r3, [pc, #156]	@ (8005ac0 <ESP_Upkeep+0x898>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f007 fe7f 	bl	800d728 <TimestampIsReached>
 8005a2a:	1e03      	subs	r3, r0, #0
 8005a2c:	d041      	beq.n	8005ab2 <ESP_Upkeep+0x88a>
        if(Mode == AT_MODE_SEND ) {
 8005a2e:	4b25      	ldr	r3, [pc, #148]	@ (8005ac4 <ESP_Upkeep+0x89c>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d13d      	bne.n	8005ab2 <ESP_Upkeep+0x88a>
            Mode = AT_MODE_GETTIME;
 8005a36:	4b23      	ldr	r3, [pc, #140]	@ (8005ac4 <ESP_Upkeep+0x89c>)
 8005a38:	2205      	movs	r2, #5
 8005a3a:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005a3c:	4b22      	ldr	r3, [pc, #136]	@ (8005ac8 <ESP_Upkeep+0x8a0>)
 8005a3e:	2202      	movs	r2, #2
 8005a40:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005a42:	4b22      	ldr	r3, [pc, #136]	@ (8005acc <ESP_Upkeep+0x8a4>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4b22      	ldr	r3, [pc, #136]	@ (8005ad0 <ESP_Upkeep+0x8a8>)
 8005a48:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005a4a:	4b22      	ldr	r3, [pc, #136]	@ (8005ad4 <ESP_Upkeep+0x8ac>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005a50:	4a21      	ldr	r2, [pc, #132]	@ (8005ad8 <ESP_Upkeep+0x8b0>)
 8005a52:	4b22      	ldr	r3, [pc, #136]	@ (8005adc <ESP_Upkeep+0x8b4>)
 8005a54:	0019      	movs	r1, r3
 8005a56:	2003      	movs	r0, #3
 8005a58:	f007 febc 	bl	800d7d4 <CreateLine>
        }
      }
      break;
 8005a5c:	e029      	b.n	8005ab2 <ESP_Upkeep+0x88a>
 8005a5e:	e028      	b.n	8005ab2 <ESP_Upkeep+0x88a>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 8005a60:	f016 fa42 	bl	801bee8 <GetUsbRxPointer>
 8005a64:	0003      	movs	r3, r0
 8005a66:	0018      	movs	r0, r3
 8005a68:	f000 f8b0 	bl	8005bcc <Process_PC_Config>
      break;
 8005a6c:	e022      	b.n	8005ab4 <ESP_Upkeep+0x88c>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae0 <ESP_Upkeep+0x8b8>)
 8005a70:	4b1a      	ldr	r3, [pc, #104]	@ (8005adc <ESP_Upkeep+0x8b4>)
 8005a72:	0019      	movs	r1, r3
 8005a74:	2003      	movs	r0, #3
 8005a76:	f007 fead 	bl	800d7d4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005a7a:	4b13      	ldr	r3, [pc, #76]	@ (8005ac8 <ESP_Upkeep+0x8a0>)
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	701a      	strb	r2, [r3, #0]
      break;
 8005a80:	e018      	b.n	8005ab4 <ESP_Upkeep+0x88c>

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 8005a82:	4a18      	ldr	r2, [pc, #96]	@ (8005ae4 <ESP_Upkeep+0x8bc>)
 8005a84:	4b15      	ldr	r3, [pc, #84]	@ (8005adc <ESP_Upkeep+0x8b4>)
 8005a86:	0019      	movs	r1, r3
 8005a88:	2003      	movs	r0, #3
 8005a8a:	f007 fea3 	bl	800d7d4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <ESP_Upkeep+0x8a0>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	701a      	strb	r2, [r3, #0]
      break;
 8005a94:	e00e      	b.n	8005ab4 <ESP_Upkeep+0x88c>
      break;
 8005a96:	46c0      	nop			@ (mov r8, r8)
 8005a98:	e00c      	b.n	8005ab4 <ESP_Upkeep+0x88c>
      break;
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	e00a      	b.n	8005ab4 <ESP_Upkeep+0x88c>
        break;
 8005a9e:	46c0      	nop			@ (mov r8, r8)
 8005aa0:	e008      	b.n	8005ab4 <ESP_Upkeep+0x88c>
    break;
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	e006      	b.n	8005ab4 <ESP_Upkeep+0x88c>
    break;
 8005aa6:	46c0      	nop			@ (mov r8, r8)
 8005aa8:	e004      	b.n	8005ab4 <ESP_Upkeep+0x88c>
      break;
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	e002      	b.n	8005ab4 <ESP_Upkeep+0x88c>
    break;
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	e000      	b.n	8005ab4 <ESP_Upkeep+0x88c>
      break;
 8005ab2:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005ab4:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <ESP_Upkeep+0x8a0>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
}
 8005ab8:	0018      	movs	r0, r3
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b002      	add	sp, #8
 8005abe:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac0:	20000998 	.word	0x20000998
 8005ac4:	200009a3 	.word	0x200009a3
 8005ac8:	20000028 	.word	0x20000028
 8005acc:	20000994 	.word	0x20000994
 8005ad0:	2000099c 	.word	0x2000099c
 8005ad4:	20000001 	.word	0x20000001
 8005ad8:	08022b6c 	.word	0x08022b6c
 8005adc:	08022280 	.word	0x08022280
 8005ae0:	08022b7c 	.word	0x08022b7c
 8005ae4:	08022b90 	.word	0x08022b90

08005ae8 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005af0:	4b09      	ldr	r3, [pc, #36]	@ (8005b18 <I2CSensors_Init+0x30>)
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005af6:	4a09      	ldr	r2, [pc, #36]	@ (8005b1c <I2CSensors_Init+0x34>)
 8005af8:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <I2CSensors_Init+0x38>)
 8005afa:	0011      	movs	r1, r2
 8005afc:	0018      	movs	r0, r3
 8005afe:	f001 fcab 	bl	8007458 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005b02:	4a06      	ldr	r2, [pc, #24]	@ (8005b1c <I2CSensors_Init+0x34>)
 8005b04:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <I2CSensors_Init+0x38>)
 8005b06:	0011      	movs	r1, r2
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f001 fafb 	bl	8007104 <Gas_Init>
}
 8005b0e:	46c0      	nop			@ (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b002      	add	sp, #8
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			@ (mov r8, r8)
 8005b18:	20000aac 	.word	0x20000aac
 8005b1c:	08005b79 	.word	0x08005b79
 8005b20:	08005b25 	.word	0x08005b25

08005b24 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005b24:	b5b0      	push	{r4, r5, r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6039      	str	r1, [r7, #0]
 8005b2c:	0011      	movs	r1, r2
 8005b2e:	1dfb      	adds	r3, r7, #7
 8005b30:	1c02      	adds	r2, r0, #0
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	1c0a      	adds	r2, r1, #0
 8005b38:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b74 <ReadI2C+0x50>)
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	18db      	adds	r3, r3, r3
 8005b46:	b299      	uxth	r1, r3
 8005b48:	1dbb      	adds	r3, r7, #6
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	250f      	movs	r5, #15
 8005b50:	197c      	adds	r4, r7, r5
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	f00a f83c 	bl	800fbd0 <HAL_I2C_Master_Receive_DMA>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005b5c:	197b      	adds	r3, r7, r5
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <ReadI2C+0x44>
        return false;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e000      	b.n	8005b6a <ReadI2C+0x46>
    }
    return true;
 8005b68:	2301      	movs	r3, #1
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bdb0      	pop	{r4, r5, r7, pc}
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	20000aac 	.word	0x20000aac

08005b78 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005b78:	b5b0      	push	{r4, r5, r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6039      	str	r1, [r7, #0]
 8005b80:	0011      	movs	r1, r2
 8005b82:	1dfb      	adds	r3, r7, #7
 8005b84:	1c02      	adds	r2, r0, #0
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	1dbb      	adds	r3, r7, #6
 8005b8a:	1c0a      	adds	r2, r1, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc8 <WriteI2C+0x50>)
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	1dfb      	adds	r3, r7, #7
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	18db      	adds	r3, r3, r3
 8005b9a:	b299      	uxth	r1, r3
 8005b9c:	1dbb      	adds	r3, r7, #6
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	250f      	movs	r5, #15
 8005ba4:	197c      	adds	r4, r7, r5
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	f009 ff0c 	bl	800f9c4 <HAL_I2C_Master_Transmit_DMA>
 8005bac:	0003      	movs	r3, r0
 8005bae:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005bb0:	197b      	adds	r3, r7, r5
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <WriteI2C+0x44>
        return false;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <WriteI2C+0x46>
    }
    return true;
 8005bbc:	2301      	movs	r3, #1
}
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b004      	add	sp, #16
 8005bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	20000aac 	.word	0x20000aac

08005bcc <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005bcc:	b590      	push	{r4, r7, lr}
 8005bce:	b0c3      	sub	sp, #268	@ 0x10c
 8005bd0:	af3e      	add	r7, sp, #248	@ 0xf8
 8005bd2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005bd4:	f016 f9a8 	bl	801bf28 <GetUsbRxDataSize>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d971      	bls.n	8005cc6 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2123      	movs	r1, #35	@ 0x23
 8005be6:	0018      	movs	r0, r3
 8005be8:	f019 fb9e 	bl	801f328 <strchr>
 8005bec:	0003      	movs	r3, r0
 8005bee:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d065      	beq.n	8005cc2 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	785a      	ldrb	r2, [r3, #1]
 8005bfa:	4b34      	ldr	r3, [pc, #208]	@ (8005ccc <Process_PC_Config+0x100>)
 8005bfc:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	789a      	ldrb	r2, [r3, #2]
 8005c02:	4b32      	ldr	r3, [pc, #200]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c04:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005c06:	4b31      	ldr	r3, [pc, #196]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c08:	785b      	ldrb	r3, [r3, #1]
 8005c0a:	3305      	adds	r3, #5
 8005c0c:	001a      	movs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d351      	bcc.n	8005cb8 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	1cd9      	adds	r1, r3, #3
 8005c18:	4b2c      	ldr	r3, [pc, #176]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cd0 <Process_PC_Config+0x104>)
 8005c20:	0018      	movs	r0, r3
 8005c22:	f019 fc55 	bl	801f4d0 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005c26:	4b29      	ldr	r3, [pc, #164]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	3303      	adds	r3, #3
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	189b      	adds	r3, r3, r2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	b21a      	sxth	r2, r3
 8005c38:	4b24      	ldr	r3, [pc, #144]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c3a:	785b      	ldrb	r3, [r3, #1]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	18cb      	adds	r3, r1, r3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	b21b      	sxth	r3, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b21b      	sxth	r3, r3
 8005c4a:	b299      	uxth	r1, r3
 8005c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c4e:	2381      	movs	r3, #129	@ 0x81
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005c54:	4a1d      	ldr	r2, [pc, #116]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c56:	2381      	movs	r3, #129	@ 0x81
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	5ad4      	ldrh	r4, [r2, r3]
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	3303      	adds	r3, #3
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	0011      	movs	r1, r2
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 f975 	bl	8005f58 <CRC16_ARC>
 8005c6e:	0003      	movs	r3, r0
 8005c70:	429c      	cmp	r4, r3
 8005c72:	d007      	beq.n	8005c84 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005c74:	4b15      	ldr	r3, [pc, #84]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c76:	785a      	ldrb	r2, [r3, #1]
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <Process_PC_Config+0x104>)
 8005c7a:	0019      	movs	r1, r3
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f000 f919 	bl	8005eb4 <Create_Message>
 8005c82:	e016      	b.n	8005cb2 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005c84:	4c11      	ldr	r4, [pc, #68]	@ (8005ccc <Process_PC_Config+0x100>)
 8005c86:	466b      	mov	r3, sp
 8005c88:	0018      	movs	r0, r3
 8005c8a:	0023      	movs	r3, r4
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	22f4      	movs	r2, #244	@ 0xf4
 8005c90:	0019      	movs	r1, r3
 8005c92:	f019 fc1d 	bl	801f4d0 <memcpy>
 8005c96:	6820      	ldr	r0, [r4, #0]
 8005c98:	6861      	ldr	r1, [r4, #4]
 8005c9a:	68a2      	ldr	r2, [r4, #8]
 8005c9c:	68e3      	ldr	r3, [r4, #12]
 8005c9e:	f000 f819 	bl	8005cd4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ccc <Process_PC_Config+0x100>)
 8005ca4:	7818      	ldrb	r0, [r3, #0]
 8005ca6:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <Process_PC_Config+0x100>)
 8005ca8:	785a      	ldrb	r2, [r3, #1]
 8005caa:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <Process_PC_Config+0x104>)
 8005cac:	0019      	movs	r1, r3
 8005cae:	f000 f901 	bl	8005eb4 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005cb2:	f016 f921 	bl	801bef8 <ResetUsbRxDataSize>
                return;
 8005cb6:	e006      	b.n	8005cc6 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f016 f93e 	bl	801bf3c <GetUsbRxNextChunk>
 8005cc0:	e001      	b.n	8005cc6 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005cc2:	f016 f919 	bl	801bef8 <ResetUsbRxDataSize>
        }
    }
}
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	b005      	add	sp, #20
 8005cca:	bd90      	pop	{r4, r7, pc}
 8005ccc:	20000ab0 	.word	0x20000ab0
 8005cd0:	20000ab2 	.word	0x20000ab2

08005cd4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	b5b0      	push	{r4, r5, r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	2518      	movs	r5, #24
 8005cde:	197c      	adds	r4, r7, r5
 8005ce0:	6020      	str	r0, [r4, #0]
 8005ce2:	6061      	str	r1, [r4, #4]
 8005ce4:	60a2      	str	r2, [r4, #8]
 8005ce6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005ce8:	197b      	adds	r3, r7, r5
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2bfe      	cmp	r3, #254	@ 0xfe
 8005cee:	d100      	bne.n	8005cf2 <ProcessCmd+0x1e>
 8005cf0:	e09c      	b.n	8005e2c <ProcessCmd+0x158>
 8005cf2:	dd00      	ble.n	8005cf6 <ProcessCmd+0x22>
 8005cf4:	e0bc      	b.n	8005e70 <ProcessCmd+0x19c>
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	dc0a      	bgt.n	8005d10 <ProcessCmd+0x3c>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da00      	bge.n	8005d00 <ProcessCmd+0x2c>
 8005cfe:	e0b7      	b.n	8005e70 <ProcessCmd+0x19c>
 8005d00:	2b0c      	cmp	r3, #12
 8005d02:	d900      	bls.n	8005d06 <ProcessCmd+0x32>
 8005d04:	e0b4      	b.n	8005e70 <ProcessCmd+0x19c>
 8005d06:	009a      	lsls	r2, r3, #2
 8005d08:	4b5d      	ldr	r3, [pc, #372]	@ (8005e80 <ProcessCmd+0x1ac>)
 8005d0a:	18d3      	adds	r3, r2, r3
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	469f      	mov	pc, r3
 8005d10:	2bfd      	cmp	r3, #253	@ 0xfd
 8005d12:	d100      	bne.n	8005d16 <ProcessCmd+0x42>
 8005d14:	e084      	b.n	8005e20 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005d16:	e0ab      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d18:	2118      	movs	r1, #24
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	001a      	movs	r2, r3
 8005d20:	187b      	adds	r3, r7, r1
 8005d22:	1c99      	adds	r1, r3, #2
 8005d24:	4857      	ldr	r0, [pc, #348]	@ (8005e84 <ProcessCmd+0x1b0>)
 8005d26:	230c      	movs	r3, #12
 8005d28:	f7fd fcca 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d2c:	e0a0      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d2e:	2118      	movs	r1, #24
 8005d30:	187b      	adds	r3, r7, r1
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	001a      	movs	r2, r3
 8005d36:	187b      	adds	r3, r7, r1
 8005d38:	1c99      	adds	r1, r3, #2
 8005d3a:	4853      	ldr	r0, [pc, #332]	@ (8005e88 <ProcessCmd+0x1b4>)
 8005d3c:	230c      	movs	r3, #12
 8005d3e:	f7fd fcbf 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d42:	e095      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d44:	2118      	movs	r1, #24
 8005d46:	187b      	adds	r3, r7, r1
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	187b      	adds	r3, r7, r1
 8005d4e:	1c99      	adds	r1, r3, #2
 8005d50:	484e      	ldr	r0, [pc, #312]	@ (8005e8c <ProcessCmd+0x1b8>)
 8005d52:	230c      	movs	r3, #12
 8005d54:	f7fd fcb4 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d58:	e08a      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d5a:	2118      	movs	r1, #24
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	001a      	movs	r2, r3
 8005d62:	187b      	adds	r3, r7, r1
 8005d64:	1c99      	adds	r1, r3, #2
 8005d66:	484a      	ldr	r0, [pc, #296]	@ (8005e90 <ProcessCmd+0x1bc>)
 8005d68:	230c      	movs	r3, #12
 8005d6a:	f7fd fca9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d6e:	e07f      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d70:	2118      	movs	r1, #24
 8005d72:	187b      	adds	r3, r7, r1
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	001a      	movs	r2, r3
 8005d78:	187b      	adds	r3, r7, r1
 8005d7a:	1c99      	adds	r1, r3, #2
 8005d7c:	4845      	ldr	r0, [pc, #276]	@ (8005e94 <ProcessCmd+0x1c0>)
 8005d7e:	230c      	movs	r3, #12
 8005d80:	f7fd fc9e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d84:	e074      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d86:	2118      	movs	r1, #24
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	785b      	ldrb	r3, [r3, #1]
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	187b      	adds	r3, r7, r1
 8005d90:	1c99      	adds	r1, r3, #2
 8005d92:	4841      	ldr	r0, [pc, #260]	@ (8005e98 <ProcessCmd+0x1c4>)
 8005d94:	230c      	movs	r3, #12
 8005d96:	f7fd fc93 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d9a:	e069      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d9c:	2118      	movs	r1, #24
 8005d9e:	187b      	adds	r3, r7, r1
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	001a      	movs	r2, r3
 8005da4:	187b      	adds	r3, r7, r1
 8005da6:	1c99      	adds	r1, r3, #2
 8005da8:	483c      	ldr	r0, [pc, #240]	@ (8005e9c <ProcessCmd+0x1c8>)
 8005daa:	230c      	movs	r3, #12
 8005dac:	f7fd fc88 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005db0:	e05e      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005db2:	2118      	movs	r1, #24
 8005db4:	187b      	adds	r3, r7, r1
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	001a      	movs	r2, r3
 8005dba:	187b      	adds	r3, r7, r1
 8005dbc:	1c99      	adds	r1, r3, #2
 8005dbe:	4838      	ldr	r0, [pc, #224]	@ (8005ea0 <ProcessCmd+0x1cc>)
 8005dc0:	231e      	movs	r3, #30
 8005dc2:	f7fd fc7d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005dc6:	e053      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005dc8:	2118      	movs	r1, #24
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	785b      	ldrb	r3, [r3, #1]
 8005dce:	001a      	movs	r2, r3
 8005dd0:	187b      	adds	r3, r7, r1
 8005dd2:	1c99      	adds	r1, r3, #2
 8005dd4:	4833      	ldr	r0, [pc, #204]	@ (8005ea4 <ProcessCmd+0x1d0>)
 8005dd6:	230c      	movs	r3, #12
 8005dd8:	f7fd fc72 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ddc:	e048      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005dde:	2118      	movs	r1, #24
 8005de0:	187b      	adds	r3, r7, r1
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	001a      	movs	r2, r3
 8005de6:	187b      	adds	r3, r7, r1
 8005de8:	1c99      	adds	r1, r3, #2
 8005dea:	482f      	ldr	r0, [pc, #188]	@ (8005ea8 <ProcessCmd+0x1d4>)
 8005dec:	230c      	movs	r3, #12
 8005dee:	f7fd fc67 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005df2:	e03d      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005df4:	2118      	movs	r1, #24
 8005df6:	187b      	adds	r3, r7, r1
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	187b      	adds	r3, r7, r1
 8005dfe:	1c99      	adds	r1, r3, #2
 8005e00:	482a      	ldr	r0, [pc, #168]	@ (8005eac <ProcessCmd+0x1d8>)
 8005e02:	230c      	movs	r3, #12
 8005e04:	f7fd fc5c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e08:	e032      	b.n	8005e70 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e0a:	2118      	movs	r1, #24
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	001a      	movs	r2, r3
 8005e12:	187b      	adds	r3, r7, r1
 8005e14:	1c99      	adds	r1, r3, #2
 8005e16:	4826      	ldr	r0, [pc, #152]	@ (8005eb0 <ProcessCmd+0x1dc>)
 8005e18:	230c      	movs	r3, #12
 8005e1a:	f7fd fc51 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e1e:	e027      	b.n	8005e70 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005e20:	4b18      	ldr	r3, [pc, #96]	@ (8005e84 <ProcessCmd+0x1b0>)
 8005e22:	21ba      	movs	r1, #186	@ 0xba
 8005e24:	0018      	movs	r0, r3
 8005e26:	f7fd fc90 	bl	800374a <ClearEEprom>
        break;
 8005e2a:	e021      	b.n	8005e70 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005e2c:	2118      	movs	r1, #24
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	789b      	ldrb	r3, [r3, #2]
 8005e32:	021b      	lsls	r3, r3, #8
 8005e34:	b21a      	sxth	r2, r3
 8005e36:	187b      	adds	r3, r7, r1
 8005e38:	78db      	ldrb	r3, [r3, #3]
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	b21a      	sxth	r2, r3
 8005e40:	1dbb      	adds	r3, r7, #6
 8005e42:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005e44:	1dbb      	adds	r3, r7, #6
 8005e46:	881a      	ldrh	r2, [r3, #0]
 8005e48:	23c0      	movs	r3, #192	@ 0xc0
 8005e4a:	015b      	lsls	r3, r3, #5
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d207      	bcs.n	8005e60 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005e50:	1dbb      	adds	r3, r7, #6
 8005e52:	881b      	ldrh	r3, [r3, #0]
 8005e54:	4a0b      	ldr	r2, [pc, #44]	@ (8005e84 <ProcessCmd+0x1b0>)
 8005e56:	0019      	movs	r1, r3
 8005e58:	0010      	movs	r0, r2
 8005e5a:	f7fd fc76 	bl	800374a <ClearEEprom>
            break;
 8005e5e:	e006      	b.n	8005e6e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005e60:	23c0      	movs	r3, #192	@ 0xc0
 8005e62:	015b      	lsls	r3, r3, #5
 8005e64:	4a07      	ldr	r2, [pc, #28]	@ (8005e84 <ProcessCmd+0x1b0>)
 8005e66:	0019      	movs	r1, r3
 8005e68:	0010      	movs	r0, r2
 8005e6a:	f7fd fc6e 	bl	800374a <ClearEEprom>
            break;
 8005e6e:	46c0      	nop			@ (mov r8, r8)
}
 8005e70:	46c0      	nop			@ (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bcb0      	pop	{r4, r5, r7}
 8005e78:	bc08      	pop	{r3}
 8005e7a:	b004      	add	sp, #16
 8005e7c:	4718      	bx	r3
 8005e7e:	46c0      	nop			@ (mov r8, r8)
 8005e80:	08023e38 	.word	0x08023e38
 8005e84:	08080000 	.word	0x08080000
 8005e88:	0808000c 	.word	0x0808000c
 8005e8c:	08080018 	.word	0x08080018
 8005e90:	08080024 	.word	0x08080024
 8005e94:	08080030 	.word	0x08080030
 8005e98:	0808003c 	.word	0x0808003c
 8005e9c:	08080048 	.word	0x08080048
 8005ea0:	08080090 	.word	0x08080090
 8005ea4:	08080078 	.word	0x08080078
 8005ea8:	0808006c 	.word	0x0808006c
 8005eac:	08080060 	.word	0x08080060
 8005eb0:	08080054 	.word	0x08080054

08005eb4 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6039      	str	r1, [r7, #0]
 8005ebc:	0011      	movs	r1, r2
 8005ebe:	1dfb      	adds	r3, r7, #7
 8005ec0:	1c02      	adds	r2, r0, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	1dbb      	adds	r3, r7, #6
 8005ec6:	1c0a      	adds	r2, r1, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005eca:	2223      	movs	r2, #35	@ 0x23
 8005ecc:	4b20      	ldr	r3, [pc, #128]	@ (8005f50 <Create_Message+0x9c>)
 8005ece:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f50 <Create_Message+0x9c>)
 8005ed2:	1dfa      	adds	r2, r7, #7
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f50 <Create_Message+0x9c>)
 8005eda:	1dba      	adds	r2, r7, #6
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005ee0:	1dbb      	adds	r3, r7, #6
 8005ee2:	781a      	ldrb	r2, [r3, #0]
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f54 <Create_Message+0xa0>)
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f019 faf1 	bl	801f4d0 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005eee:	1dbb      	adds	r3, r7, #6
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	250e      	movs	r5, #14
 8005ef6:	197b      	adds	r3, r7, r5
 8005ef8:	3203      	adds	r2, #3
 8005efa:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005efc:	260c      	movs	r6, #12
 8005efe:	19bc      	adds	r4, r7, r6
 8005f00:	197b      	adds	r3, r7, r5
 8005f02:	881a      	ldrh	r2, [r3, #0]
 8005f04:	4b12      	ldr	r3, [pc, #72]	@ (8005f50 <Create_Message+0x9c>)
 8005f06:	0011      	movs	r1, r2
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f000 f825 	bl	8005f58 <CRC16_ARC>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005f12:	0030      	movs	r0, r6
 8005f14:	183b      	adds	r3, r7, r0
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	197b      	adds	r3, r7, r5
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b2d1      	uxtb	r1, r2
 8005f22:	4a0b      	ldr	r2, [pc, #44]	@ (8005f50 <Create_Message+0x9c>)
 8005f24:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005f26:	197b      	adds	r3, r7, r5
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	183a      	adds	r2, r7, r0
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	b2d1      	uxtb	r1, r2
 8005f32:	4a07      	ldr	r2, [pc, #28]	@ (8005f50 <Create_Message+0x9c>)
 8005f34:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005f36:	197b      	adds	r3, r7, r5
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	4b04      	ldr	r3, [pc, #16]	@ (8005f50 <Create_Message+0x9c>)
 8005f40:	0011      	movs	r1, r2
 8005f42:	0018      	movs	r0, r3
 8005f44:	f015 ff96 	bl	801be74 <CDC_Transmit_FS>
}
 8005f48:	46c0      	nop			@ (mov r8, r8)
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b005      	add	sp, #20
 8005f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f50:	20000bb4 	.word	0x20000bb4
 8005f54:	20000bb7 	.word	0x20000bb7

08005f58 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	000a      	movs	r2, r1
 8005f62:	1cbb      	adds	r3, r7, #2
 8005f64:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005f66:	2316      	movs	r3, #22
 8005f68:	18fb      	adds	r3, r7, r3
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
 8005f72:	e02e      	b.n	8005fd2 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	18d3      	adds	r3, r2, r3
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	0019      	movs	r1, r3
 8005f7e:	2216      	movs	r2, #22
 8005f80:	18bb      	adds	r3, r7, r2
 8005f82:	18ba      	adds	r2, r7, r2
 8005f84:	8812      	ldrh	r2, [r2, #0]
 8005f86:	404a      	eors	r2, r1
 8005f88:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e01a      	b.n	8005fc6 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005f90:	2116      	movs	r1, #22
 8005f92:	187b      	adds	r3, r7, r1
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	2201      	movs	r2, #1
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005f9c:	187b      	adds	r3, r7, r1
 8005f9e:	187a      	adds	r2, r7, r1
 8005fa0:	8812      	ldrh	r2, [r2, #0]
 8005fa2:	0852      	lsrs	r2, r2, #1
 8005fa4:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005fa6:	187b      	adds	r3, r7, r1
 8005fa8:	187a      	adds	r2, r7, r1
 8005faa:	8812      	ldrh	r2, [r2, #0]
 8005fac:	490f      	ldr	r1, [pc, #60]	@ (8005fec <CRC16_ARC+0x94>)
 8005fae:	404a      	eors	r2, r1
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	e005      	b.n	8005fc0 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005fb4:	2216      	movs	r2, #22
 8005fb6:	18bb      	adds	r3, r7, r2
 8005fb8:	18ba      	adds	r2, r7, r2
 8005fba:	8812      	ldrh	r2, [r2, #0]
 8005fbc:	0852      	lsrs	r2, r2, #1
 8005fbe:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b07      	cmp	r3, #7
 8005fca:	dde1      	ble.n	8005f90 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	1cbb      	adds	r3, r7, #2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	dbcb      	blt.n	8005f74 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005fdc:	2316      	movs	r3, #22
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	881b      	ldrh	r3, [r3, #0]
}
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	b006      	add	sp, #24
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	46c0      	nop			@ (mov r8, r8)
 8005fec:	ffffa001 	.word	0xffffa001

08005ff0 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 8005ff4:	4b26      	ldr	r3, [pc, #152]	@ (8006090 <ReadBatteryVoltage+0xa0>)
 8005ff6:	4a27      	ldr	r2, [pc, #156]	@ (8006094 <ReadBatteryVoltage+0xa4>)
 8005ff8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005ffa:	4b25      	ldr	r3, [pc, #148]	@ (8006090 <ReadBatteryVoltage+0xa0>)
 8005ffc:	2280      	movs	r2, #128	@ 0x80
 8005ffe:	0152      	lsls	r2, r2, #5
 8006000:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006002:	4a23      	ldr	r2, [pc, #140]	@ (8006090 <ReadBatteryVoltage+0xa0>)
 8006004:	4b24      	ldr	r3, [pc, #144]	@ (8006098 <ReadBatteryVoltage+0xa8>)
 8006006:	0011      	movs	r1, r2
 8006008:	0018      	movs	r0, r3
 800600a:	f008 fa59 	bl	800e4c0 <HAL_ADC_ConfigChannel>
 800600e:	1e03      	subs	r3, r0, #0
 8006010:	d001      	beq.n	8006016 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006012:	f001 ff61 	bl	8007ed8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8006016:	4b20      	ldr	r3, [pc, #128]	@ (8006098 <ReadBatteryVoltage+0xa8>)
 8006018:	0018      	movs	r0, r3
 800601a:	f008 f955 	bl	800e2c8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 800601e:	4b1e      	ldr	r3, [pc, #120]	@ (8006098 <ReadBatteryVoltage+0xa8>)
 8006020:	2101      	movs	r1, #1
 8006022:	0018      	movs	r0, r3
 8006024:	f008 f9a4 	bl	800e370 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006028:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <ReadBatteryVoltage+0xa8>)
 800602a:	0018      	movs	r0, r3
 800602c:	f008 fa3c 	bl	800e4a8 <HAL_ADC_GetValue>
 8006030:	0002      	movs	r2, r0
 8006032:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <ReadBatteryVoltage+0xac>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4353      	muls	r3, r2
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	4919      	ldr	r1, [pc, #100]	@ (80060a0 <ReadBatteryVoltage+0xb0>)
 800603c:	0018      	movs	r0, r3
 800603e:	f7fa f8b1 	bl	80001a4 <__udivsi3>
 8006042:	0003      	movs	r3, r0
 8006044:	001a      	movs	r2, r3
 8006046:	4b17      	ldr	r3, [pc, #92]	@ (80060a4 <ReadBatteryVoltage+0xb4>)
 8006048:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800604a:	4b16      	ldr	r3, [pc, #88]	@ (80060a4 <ReadBatteryVoltage+0xb4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	0018      	movs	r0, r3
 8006050:	f7fb fb0a 	bl	8001668 <__aeabi_ui2f>
 8006054:	1c03      	adds	r3, r0, #0
 8006056:	4914      	ldr	r1, [pc, #80]	@ (80060a8 <ReadBatteryVoltage+0xb8>)
 8006058:	1c18      	adds	r0, r3, #0
 800605a:	f7fa fdbb 	bl	8000bd4 <__aeabi_fdiv>
 800605e:	1c03      	adds	r3, r0, #0
 8006060:	1c1a      	adds	r2, r3, #0
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <ReadBatteryVoltage+0xbc>)
 8006064:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006066:	4b0a      	ldr	r3, [pc, #40]	@ (8006090 <ReadBatteryVoltage+0xa0>)
 8006068:	4a0a      	ldr	r2, [pc, #40]	@ (8006094 <ReadBatteryVoltage+0xa4>)
 800606a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800606c:	4b08      	ldr	r3, [pc, #32]	@ (8006090 <ReadBatteryVoltage+0xa0>)
 800606e:	4a10      	ldr	r2, [pc, #64]	@ (80060b0 <ReadBatteryVoltage+0xc0>)
 8006070:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006072:	4a07      	ldr	r2, [pc, #28]	@ (8006090 <ReadBatteryVoltage+0xa0>)
 8006074:	4b08      	ldr	r3, [pc, #32]	@ (8006098 <ReadBatteryVoltage+0xa8>)
 8006076:	0011      	movs	r1, r2
 8006078:	0018      	movs	r0, r3
 800607a:	f008 fa21 	bl	800e4c0 <HAL_ADC_ConfigChannel>
 800607e:	1e03      	subs	r3, r0, #0
 8006080:	d001      	beq.n	8006086 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006082:	f001 ff29 	bl	8007ed8 <Error_Handler>
  }
  return trueValue;
 8006086:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <ReadBatteryVoltage+0xbc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 }
 800608a:	1c18      	adds	r0, r3, #0
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20000cbc 	.word	0x20000cbc
 8006094:	38004000 	.word	0x38004000
 8006098:	20000cfc 	.word	0x20000cfc
 800609c:	2000002c 	.word	0x2000002c
 80060a0:	00000fff 	.word	0x00000fff
 80060a4:	20000cc4 	.word	0x20000cc4
 80060a8:	447a0000 	.word	0x447a0000
 80060ac:	20000cc8 	.word	0x20000cc8
 80060b0:	00001001 	.word	0x00001001

080060b4 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80060b8:	4b27      	ldr	r3, [pc, #156]	@ (8006158 <ReadSolarVoltage+0xa4>)
 80060ba:	4a28      	ldr	r2, [pc, #160]	@ (800615c <ReadSolarVoltage+0xa8>)
 80060bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80060be:	4b26      	ldr	r3, [pc, #152]	@ (8006158 <ReadSolarVoltage+0xa4>)
 80060c0:	2280      	movs	r2, #128	@ 0x80
 80060c2:	0152      	lsls	r2, r2, #5
 80060c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80060c6:	4a24      	ldr	r2, [pc, #144]	@ (8006158 <ReadSolarVoltage+0xa4>)
 80060c8:	4b25      	ldr	r3, [pc, #148]	@ (8006160 <ReadSolarVoltage+0xac>)
 80060ca:	0011      	movs	r1, r2
 80060cc:	0018      	movs	r0, r3
 80060ce:	f008 f9f7 	bl	800e4c0 <HAL_ADC_ConfigChannel>
 80060d2:	1e03      	subs	r3, r0, #0
 80060d4:	d001      	beq.n	80060da <ReadSolarVoltage+0x26>
    Error_Handler();
 80060d6:	f001 feff 	bl	8007ed8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80060da:	4b21      	ldr	r3, [pc, #132]	@ (8006160 <ReadSolarVoltage+0xac>)
 80060dc:	0018      	movs	r0, r3
 80060de:	f008 f8f3 	bl	800e2c8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80060e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006160 <ReadSolarVoltage+0xac>)
 80060e4:	2101      	movs	r1, #1
 80060e6:	0018      	movs	r0, r3
 80060e8:	f008 f942 	bl	800e370 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80060ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006160 <ReadSolarVoltage+0xac>)
 80060ee:	0018      	movs	r0, r3
 80060f0:	f008 f9da 	bl	800e4a8 <HAL_ADC_GetValue>
 80060f4:	0002      	movs	r2, r0
 80060f6:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <ReadSolarVoltage+0xb0>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	435a      	muls	r2, r3
 80060fc:	0013      	movs	r3, r2
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	189b      	adds	r3, r3, r2
 8006102:	4919      	ldr	r1, [pc, #100]	@ (8006168 <ReadSolarVoltage+0xb4>)
 8006104:	0018      	movs	r0, r3
 8006106:	f7fa f84d 	bl	80001a4 <__udivsi3>
 800610a:	0003      	movs	r3, r0
 800610c:	001a      	movs	r2, r3
 800610e:	4b17      	ldr	r3, [pc, #92]	@ (800616c <ReadSolarVoltage+0xb8>)
 8006110:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 8006112:	4b16      	ldr	r3, [pc, #88]	@ (800616c <ReadSolarVoltage+0xb8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	0018      	movs	r0, r3
 8006118:	f7fb faa6 	bl	8001668 <__aeabi_ui2f>
 800611c:	1c03      	adds	r3, r0, #0
 800611e:	4914      	ldr	r1, [pc, #80]	@ (8006170 <ReadSolarVoltage+0xbc>)
 8006120:	1c18      	adds	r0, r3, #0
 8006122:	f7fa fd57 	bl	8000bd4 <__aeabi_fdiv>
 8006126:	1c03      	adds	r3, r0, #0
 8006128:	1c1a      	adds	r2, r3, #0
 800612a:	4b12      	ldr	r3, [pc, #72]	@ (8006174 <ReadSolarVoltage+0xc0>)
 800612c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800612e:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <ReadSolarVoltage+0xa4>)
 8006130:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <ReadSolarVoltage+0xa8>)
 8006132:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006134:	4b08      	ldr	r3, [pc, #32]	@ (8006158 <ReadSolarVoltage+0xa4>)
 8006136:	4a10      	ldr	r2, [pc, #64]	@ (8006178 <ReadSolarVoltage+0xc4>)
 8006138:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800613a:	4a07      	ldr	r2, [pc, #28]	@ (8006158 <ReadSolarVoltage+0xa4>)
 800613c:	4b08      	ldr	r3, [pc, #32]	@ (8006160 <ReadSolarVoltage+0xac>)
 800613e:	0011      	movs	r1, r2
 8006140:	0018      	movs	r0, r3
 8006142:	f008 f9bd 	bl	800e4c0 <HAL_ADC_ConfigChannel>
 8006146:	1e03      	subs	r3, r0, #0
 8006148:	d001      	beq.n	800614e <ReadSolarVoltage+0x9a>
    Error_Handler();
 800614a:	f001 fec5 	bl	8007ed8 <Error_Handler>
  }
  return trueValue;
 800614e:	4b09      	ldr	r3, [pc, #36]	@ (8006174 <ReadSolarVoltage+0xc0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 }
 8006152:	1c18      	adds	r0, r3, #0
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000cbc 	.word	0x20000cbc
 800615c:	3c008000 	.word	0x3c008000
 8006160:	20000cfc 	.word	0x20000cfc
 8006164:	2000002c 	.word	0x2000002c
 8006168:	00000fff 	.word	0x00000fff
 800616c:	20000ccc 	.word	0x20000ccc
 8006170:	447a0000 	.word	0x447a0000
 8006174:	20000cd0 	.word	0x20000cd0
 8006178:	00001001 	.word	0x00001001

0800617c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 800617c:	b580      	push	{r7, lr}
 800617e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006180:	23a0      	movs	r3, #160	@ 0xa0
 8006182:	05db      	lsls	r3, r3, #23
 8006184:	2180      	movs	r1, #128	@ 0x80
 8006186:	0018      	movs	r0, r3
 8006188:	f009 f920 	bl	800f3cc <HAL_GPIO_ReadPin>
 800618c:	0003      	movs	r3, r0
 800618e:	1e5a      	subs	r2, r3, #1
 8006190:	4193      	sbcs	r3, r2
 8006192:	b2db      	uxtb	r3, r3
}
 8006194:	0018      	movs	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800619a:	b580      	push	{r7, lr}
 800619c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800619e:	2380      	movs	r3, #128	@ 0x80
 80061a0:	021a      	lsls	r2, r3, #8
 80061a2:	23a0      	movs	r3, #160	@ 0xa0
 80061a4:	05db      	lsls	r3, r3, #23
 80061a6:	0011      	movs	r1, r2
 80061a8:	0018      	movs	r0, r3
 80061aa:	f009 f90f 	bl	800f3cc <HAL_GPIO_ReadPin>
 80061ae:	0003      	movs	r3, r0
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	4193      	sbcs	r3, r2
 80061b4:	b2db      	uxtb	r3, r3
}
 80061b6:	0018      	movs	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80061c0:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <UserButton_Pressed+0x1c>)
 80061c2:	2104      	movs	r1, #4
 80061c4:	0018      	movs	r0, r3
 80061c6:	f009 f901 	bl	800f3cc <HAL_GPIO_ReadPin>
 80061ca:	0003      	movs	r3, r0
 80061cc:	425a      	negs	r2, r3
 80061ce:	4153      	adcs	r3, r2
 80061d0:	b2db      	uxtb	r3, r3
}
 80061d2:	0018      	movs	r0, r3
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	50000c00 	.word	0x50000c00

080061dc <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	46d6      	mov	lr, sl
 80061e0:	464f      	mov	r7, r9
 80061e2:	4646      	mov	r6, r8
 80061e4:	b5c0      	push	{r6, r7, lr}
 80061e6:	b08e      	sub	sp, #56	@ 0x38
 80061e8:	af08      	add	r7, sp, #32
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80061ea:	003a      	movs	r2, r7
 80061ec:	1d3b      	adds	r3, r7, #4
 80061ee:	0011      	movs	r1, r2
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 f9f9 	bl	80065e8 <RTC_GetTime>
  UpdateSystemUptime();
 80061f6:	f000 f83d 	bl	8006274 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80061fa:	003b      	movs	r3, r7
 80061fc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061fe:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006200:	003b      	movs	r3, r7
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006206:	4b18      	ldr	r3, [pc, #96]	@ (8006268 <showTime+0x8c>)
 8006208:	0092      	lsls	r2, r2, #2
 800620a:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800620c:	003b      	movs	r3, r7
 800620e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006210:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006216:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006218:	1d3b      	adds	r3, r7, #4
 800621a:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800621c:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800621e:	1d3b      	adds	r3, r7, #4
 8006220:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006222:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006224:	4b11      	ldr	r3, [pc, #68]	@ (800626c <showTime+0x90>)
 8006226:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006228:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800622a:	4b10      	ldr	r3, [pc, #64]	@ (800626c <showTime+0x90>)
 800622c:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800622e:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006230:	4b0e      	ldr	r3, [pc, #56]	@ (800626c <showTime+0x90>)
 8006232:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006234:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006236:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <showTime+0x90>)
 8006238:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800623a:	480d      	ldr	r0, [pc, #52]	@ (8006270 <showTime+0x94>)
 800623c:	9306      	str	r3, [sp, #24]
 800623e:	4643      	mov	r3, r8
 8006240:	9305      	str	r3, [sp, #20]
 8006242:	4663      	mov	r3, ip
 8006244:	9304      	str	r3, [sp, #16]
 8006246:	9603      	str	r6, [sp, #12]
 8006248:	9502      	str	r5, [sp, #8]
 800624a:	9401      	str	r4, [sp, #4]
 800624c:	9100      	str	r1, [sp, #0]
 800624e:	4653      	mov	r3, sl
 8006250:	4649      	mov	r1, r9
 8006252:	f018 fead 	bl	801efb0 <iprintf>
}
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	46bd      	mov	sp, r7
 800625a:	b006      	add	sp, #24
 800625c:	bce0      	pop	{r5, r6, r7}
 800625e:	46ba      	mov	sl, r7
 8006260:	46b1      	mov	r9, r6
 8006262:	46a8      	mov	r8, r5
 8006264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	2000004c 	.word	0x2000004c
 800626c:	20000cd4 	.word	0x20000cd4
 8006270:	08022c0c 	.word	0x08022c0c

08006274 <UpdateSystemUptime>:
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}

void UpdateSystemUptime() {
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800627a:	003a      	movs	r2, r7
 800627c:	1d3b      	adds	r3, r7, #4
 800627e:	0011      	movs	r1, r2
 8006280:	0018      	movs	r0, r3
 8006282:	f000 f9b1 	bl	80065e8 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006286:	1d3a      	adds	r2, r7, #4
 8006288:	003b      	movs	r3, r7
 800628a:	0011      	movs	r1, r2
 800628c:	0018      	movs	r0, r3
 800628e:	f000 fb13 	bl	80068b8 <makeTime>
 8006292:	0002      	movs	r2, r0
 8006294:	4b1e      	ldr	r3, [pc, #120]	@ (8006310 <UpdateSystemUptime+0x9c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	213c      	movs	r1, #60	@ 0x3c
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7fa f803 	bl	80002b0 <__aeabi_uidivmod>
 80062aa:	000b      	movs	r3, r1
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	4b19      	ldr	r3, [pc, #100]	@ (8006314 <UpdateSystemUptime+0xa0>)
 80062b0:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	213c      	movs	r1, #60	@ 0x3c
 80062b6:	0018      	movs	r0, r3
 80062b8:	f7f9 ff74 	bl	80001a4 <__udivsi3>
 80062bc:	0003      	movs	r3, r0
 80062be:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	213c      	movs	r1, #60	@ 0x3c
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7f9 fff3 	bl	80002b0 <__aeabi_uidivmod>
 80062ca:	000b      	movs	r3, r1
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4b11      	ldr	r3, [pc, #68]	@ (8006314 <UpdateSystemUptime+0xa0>)
 80062d0:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	213c      	movs	r1, #60	@ 0x3c
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7f9 ff64 	bl	80001a4 <__udivsi3>
 80062dc:	0003      	movs	r3, r0
 80062de:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2118      	movs	r1, #24
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7f9 ffe3 	bl	80002b0 <__aeabi_uidivmod>
 80062ea:	000b      	movs	r3, r1
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <UpdateSystemUptime+0xa0>)
 80062f0:	709a      	strb	r2, [r3, #2]
  myUpTime.Day /= 24; // now it is days
 80062f2:	4b08      	ldr	r3, [pc, #32]	@ (8006314 <UpdateSystemUptime+0xa0>)
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	2118      	movs	r1, #24
 80062f8:	0018      	movs	r0, r3
 80062fa:	f7f9 ff53 	bl	80001a4 <__udivsi3>
 80062fe:	0003      	movs	r3, r0
 8006300:	b29a      	uxth	r2, r3
 8006302:	4b04      	ldr	r3, [pc, #16]	@ (8006314 <UpdateSystemUptime+0xa0>)
 8006304:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	46bd      	mov	sp, r7
 800630a:	b008      	add	sp, #32
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	20000ce0 	.word	0x20000ce0
 8006314:	20000cd4 	.word	0x20000cd4

08006318 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	0008      	movs	r0, r1
 8006322:	0011      	movs	r1, r2
 8006324:	1cfb      	adds	r3, r7, #3
 8006326:	1c02      	adds	r2, r0, #0
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	1cbb      	adds	r3, r7, #2
 800632c:	1c0a      	adds	r2, r1, #0
 800632e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006330:	230e      	movs	r3, #14
 8006332:	18fb      	adds	r3, r7, r3
 8006334:	2200      	movs	r2, #0
 8006336:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006338:	230f      	movs	r3, #15
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	1cfa      	adds	r2, r7, #3
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e015      	b.n	8006370 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006344:	200f      	movs	r0, #15
 8006346:	183b      	adds	r3, r7, r0
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	18d2      	adds	r2, r2, r3
 800634e:	240e      	movs	r4, #14
 8006350:	193b      	adds	r3, r7, r4
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	7811      	ldrb	r1, [r2, #0]
 8006356:	2208      	movs	r2, #8
 8006358:	18ba      	adds	r2, r7, r2
 800635a:	54d1      	strb	r1, [r2, r3]
    pos++;
 800635c:	193b      	adds	r3, r7, r4
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	193b      	adds	r3, r7, r4
 8006362:	3201      	adds	r2, #1
 8006364:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006366:	183b      	adds	r3, r7, r0
 8006368:	781a      	ldrb	r2, [r3, #0]
 800636a:	183b      	adds	r3, r7, r0
 800636c:	3201      	adds	r2, #1
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	200f      	movs	r0, #15
 8006372:	183a      	adds	r2, r7, r0
 8006374:	1cbb      	adds	r3, r7, #2
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d9e2      	bls.n	8006344 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800637e:	230e      	movs	r3, #14
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	18ba      	adds	r2, r7, r2
 8006388:	2100      	movs	r1, #0
 800638a:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800638c:	1cfb      	adds	r3, r7, #3
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b13      	cmp	r3, #19
 8006392:	d849      	bhi.n	8006428 <aBuff2int+0x110>
    if (start == 17) { //month
 8006394:	1cfb      	adds	r3, r7, #3
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b11      	cmp	r3, #17
 800639a:	d122      	bne.n	80063e2 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800639c:	183b      	adds	r3, r7, r0
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e018      	b.n	80063d6 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80063a4:	240f      	movs	r4, #15
 80063a6:	193b      	adds	r3, r7, r4
 80063a8:	781a      	ldrb	r2, [r3, #0]
 80063aa:	4b25      	ldr	r3, [pc, #148]	@ (8006440 <aBuff2int+0x128>)
 80063ac:	0092      	lsls	r2, r2, #2
 80063ae:	58d2      	ldr	r2, [r2, r3]
 80063b0:	2308      	movs	r3, #8
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	0011      	movs	r1, r2
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7f9 fece 	bl	8000158 <strcmp>
 80063bc:	1e03      	subs	r3, r0, #0
 80063be:	d104      	bne.n	80063ca <aBuff2int+0xb2>
          return i+1;
 80063c0:	193b      	adds	r3, r7, r4
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	e035      	b.n	8006436 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80063ca:	210f      	movs	r1, #15
 80063cc:	187b      	adds	r3, r7, r1
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	187b      	adds	r3, r7, r1
 80063d2:	3201      	adds	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	230f      	movs	r3, #15
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b0b      	cmp	r3, #11
 80063de:	d9e1      	bls.n	80063a4 <aBuff2int+0x8c>
 80063e0:	e022      	b.n	8006428 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80063e2:	230f      	movs	r3, #15
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e018      	b.n	800641e <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80063ec:	240f      	movs	r4, #15
 80063ee:	193b      	adds	r3, r7, r4
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	4b14      	ldr	r3, [pc, #80]	@ (8006444 <aBuff2int+0x12c>)
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	58d2      	ldr	r2, [r2, r3]
 80063f8:	2308      	movs	r3, #8
 80063fa:	18fb      	adds	r3, r7, r3
 80063fc:	0011      	movs	r1, r2
 80063fe:	0018      	movs	r0, r3
 8006400:	f7f9 feaa 	bl	8000158 <strcmp>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d104      	bne.n	8006412 <aBuff2int+0xfa>
          return i+1;
 8006408:	193b      	adds	r3, r7, r4
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	b2db      	uxtb	r3, r3
 8006410:	e011      	b.n	8006436 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006412:	210f      	movs	r1, #15
 8006414:	187b      	adds	r3, r7, r1
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	187b      	adds	r3, r7, r1
 800641a:	3201      	adds	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	230f      	movs	r3, #15
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b06      	cmp	r3, #6
 8006426:	d9e1      	bls.n	80063ec <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006428:	2308      	movs	r3, #8
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	0018      	movs	r0, r3
 800642e:	f017 f9e4 	bl	801d7fa <atoi>
 8006432:	0003      	movs	r3, r0
 8006434:	b2db      	uxtb	r3, r3
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b005      	add	sp, #20
 800643c:	bd90      	pop	{r4, r7, pc}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	2000004c 	.word	0x2000004c
 8006444:	20000030 	.word	0x20000030

08006448 <ParseTime>:

void ParseTime(char* buffer) {
 8006448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644a:	b08b      	sub	sp, #44	@ 0x2c
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006450:	2508      	movs	r5, #8
 8006452:	197a      	adds	r2, r7, r5
 8006454:	240c      	movs	r4, #12
 8006456:	193b      	adds	r3, r7, r4
 8006458:	0011      	movs	r1, r2
 800645a:	0018      	movs	r0, r3
 800645c:	f000 f8c4 	bl	80065e8 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2219      	movs	r2, #25
 8006464:	2118      	movs	r1, #24
 8006466:	0018      	movs	r0, r3
 8006468:	f7ff ff56 	bl	8006318 <aBuff2int>
 800646c:	0003      	movs	r3, r0
 800646e:	001a      	movs	r2, r3
 8006470:	193b      	adds	r3, r7, r4
 8006472:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	221c      	movs	r2, #28
 8006478:	211b      	movs	r1, #27
 800647a:	0018      	movs	r0, r3
 800647c:	f7ff ff4c 	bl	8006318 <aBuff2int>
 8006480:	0003      	movs	r3, r0
 8006482:	001a      	movs	r2, r3
 8006484:	193b      	adds	r3, r7, r4
 8006486:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	221f      	movs	r2, #31
 800648c:	211e      	movs	r1, #30
 800648e:	0018      	movs	r0, r3
 8006490:	f7ff ff42 	bl	8006318 <aBuff2int>
 8006494:	0003      	movs	r3, r0
 8006496:	001a      	movs	r2, r3
 8006498:	193b      	adds	r3, r7, r4
 800649a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2224      	movs	r2, #36	@ 0x24
 80064a0:	2123      	movs	r1, #35	@ 0x23
 80064a2:	0018      	movs	r0, r3
 80064a4:	f7ff ff38 	bl	8006318 <aBuff2int>
 80064a8:	0003      	movs	r3, r0
 80064aa:	001a      	movs	r2, r3
 80064ac:	002e      	movs	r6, r5
 80064ae:	19bb      	adds	r3, r7, r6
 80064b0:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2213      	movs	r2, #19
 80064b6:	2111      	movs	r1, #17
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7ff ff2d 	bl	8006318 <aBuff2int>
 80064be:	0003      	movs	r3, r0
 80064c0:	001a      	movs	r2, r3
 80064c2:	19bb      	adds	r3, r7, r6
 80064c4:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2216      	movs	r2, #22
 80064ca:	2115      	movs	r1, #21
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7ff ff23 	bl	8006318 <aBuff2int>
 80064d2:	0003      	movs	r3, r0
 80064d4:	001a      	movs	r2, r3
 80064d6:	19bb      	adds	r3, r7, r6
 80064d8:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	220f      	movs	r2, #15
 80064de:	210d      	movs	r1, #13
 80064e0:	0018      	movs	r0, r3
 80064e2:	f7ff ff19 	bl	8006318 <aBuff2int>
 80064e6:	0003      	movs	r3, r0
 80064e8:	001a      	movs	r2, r3
 80064ea:	19bb      	adds	r3, r7, r6
 80064ec:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80064ee:	0025      	movs	r5, r4
 80064f0:	197b      	adds	r3, r7, r5
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	001c      	movs	r4, r3
 80064f6:	197b      	adds	r3, r7, r5
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	0018      	movs	r0, r3
 80064fc:	197b      	adds	r3, r7, r5
 80064fe:	789b      	ldrb	r3, [r3, #2]
 8006500:	4a14      	ldr	r2, [pc, #80]	@ (8006554 <ParseTime+0x10c>)
 8006502:	4915      	ldr	r1, [pc, #84]	@ (8006558 <ParseTime+0x110>)
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	9000      	str	r0, [sp, #0]
 8006508:	0023      	movs	r3, r4
 800650a:	2003      	movs	r0, #3
 800650c:	f007 f962 	bl	800d7d4 <CreateLine>
  RTC_SetTime(&currentTime);
 8006510:	197b      	adds	r3, r7, r5
 8006512:	0018      	movs	r0, r3
 8006514:	f000 f824 	bl	8006560 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006518:	19bb      	adds	r3, r7, r6
 800651a:	0018      	movs	r0, r3
 800651c:	f000 f846 	bl	80065ac <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006520:	19bb      	adds	r3, r7, r6
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d101      	bne.n	800652c <ParseTime+0xe4>
    reset_fanCleaningDone();
 8006528:	f002 fbb6 	bl	8008c98 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 800652c:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <ParseTime+0x114>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <ParseTime+0x102>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006534:	230c      	movs	r3, #12
 8006536:	18fa      	adds	r2, r7, r3
 8006538:	2308      	movs	r3, #8
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	0011      	movs	r1, r2
 800653e:	0018      	movs	r0, r3
 8006540:	f000 f9ba 	bl	80068b8 <makeTime>
 8006544:	0002      	movs	r2, r0
 8006546:	4b05      	ldr	r3, [pc, #20]	@ (800655c <ParseTime+0x114>)
 8006548:	601a      	str	r2, [r3, #0]
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	b009      	add	sp, #36	@ 0x24
 8006550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	08022c64 	.word	0x08022c64
 8006558:	08022c9c 	.word	0x08022c9c
 800655c:	20000ce0 	.word	0x20000ce0

08006560 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800657a:	4b09      	ldr	r3, [pc, #36]	@ (80065a0 <RTC_SetTime+0x40>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	0018      	movs	r0, r3
 8006584:	f00e fdbe 	bl	8015104 <HAL_RTC_SetTime>
 8006588:	1e03      	subs	r3, r0, #0
 800658a:	d005      	beq.n	8006598 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 800658c:	4a05      	ldr	r2, [pc, #20]	@ (80065a4 <RTC_SetTime+0x44>)
 800658e:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <RTC_SetTime+0x48>)
 8006590:	0019      	movs	r1, r3
 8006592:	2001      	movs	r0, #1
 8006594:	f007 f91e 	bl	800d7d4 <CreateLine>
    }
}
 8006598:	46c0      	nop			@ (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000cdc 	.word	0x20000cdc
 80065a4:	08022ca0 	.word	0x08022ca0
 80065a8:	08022cbc 	.word	0x08022cbc

080065ac <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80065b4:	4b09      	ldr	r3, [pc, #36]	@ (80065dc <RTC_SetDate+0x30>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	0018      	movs	r0, r3
 80065be:	f00e fea9 	bl	8015314 <HAL_RTC_SetDate>
 80065c2:	1e03      	subs	r3, r0, #0
 80065c4:	d005      	beq.n	80065d2 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80065c6:	4a06      	ldr	r2, [pc, #24]	@ (80065e0 <RTC_SetDate+0x34>)
 80065c8:	4b06      	ldr	r3, [pc, #24]	@ (80065e4 <RTC_SetDate+0x38>)
 80065ca:	0019      	movs	r1, r3
 80065cc:	2001      	movs	r0, #1
 80065ce:	f007 f901 	bl	800d7d4 <CreateLine>
    }
}
 80065d2:	46c0      	nop			@ (mov r8, r8)
 80065d4:	46bd      	mov	sp, r7
 80065d6:	b002      	add	sp, #8
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	46c0      	nop			@ (mov r8, r8)
 80065dc:	20000cdc 	.word	0x20000cdc
 80065e0:	08022cc0 	.word	0x08022cc0
 80065e4:	08022cbc 	.word	0x08022cbc

080065e8 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80065f2:	4b11      	ldr	r3, [pc, #68]	@ (8006638 <RTC_GetTime+0x50>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	0018      	movs	r0, r3
 80065fc:	f00e fe2c 	bl	8015258 <HAL_RTC_GetTime>
 8006600:	1e03      	subs	r3, r0, #0
 8006602:	d005      	beq.n	8006610 <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 8006604:	4a0d      	ldr	r2, [pc, #52]	@ (800663c <RTC_GetTime+0x54>)
 8006606:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <RTC_GetTime+0x58>)
 8006608:	0019      	movs	r1, r3
 800660a:	2001      	movs	r0, #1
 800660c:	f007 f8e2 	bl	800d7d4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006610:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <RTC_GetTime+0x50>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	0018      	movs	r0, r3
 800661a:	f00e ff0f 	bl	801543c <HAL_RTC_GetDate>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d005      	beq.n	800662e <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 8006622:	4a08      	ldr	r2, [pc, #32]	@ (8006644 <RTC_GetTime+0x5c>)
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <RTC_GetTime+0x58>)
 8006626:	0019      	movs	r1, r3
 8006628:	2001      	movs	r0, #1
 800662a:	f007 f8d3 	bl	800d7d4 <CreateLine>
    }
}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b002      	add	sp, #8
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	20000cdc 	.word	0x20000cdc
 800663c:	08022cdc 	.word	0x08022cdc
 8006640:	08022cbc 	.word	0x08022cbc
 8006644:	08022cf8 	.word	0x08022cf8

08006648 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800664e:	003a      	movs	r2, r7
 8006650:	1d3b      	adds	r3, r7, #4
 8006652:	0011      	movs	r1, r2
 8006654:	0018      	movs	r0, r3
 8006656:	f7ff ffc7 	bl	80065e8 <RTC_GetTime>
  return currentDate.WeekDay;
 800665a:	003b      	movs	r3, r7
 800665c:	781b      	ldrb	r3, [r3, #0]
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b006      	add	sp, #24
 8006664:	bd80      	pop	{r7, pc}

08006666 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800666c:	003a      	movs	r2, r7
 800666e:	1d3b      	adds	r3, r7, #4
 8006670:	0011      	movs	r1, r2
 8006672:	0018      	movs	r0, r3
 8006674:	f7ff ffb8 	bl	80065e8 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006678:	1d3a      	adds	r2, r7, #4
 800667a:	003b      	movs	r3, r7
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f000 f91a 	bl	80068b8 <makeTime>
 8006684:	0003      	movs	r3, r0
}
 8006686:	0018      	movs	r0, r3
 8006688:	46bd      	mov	sp, r7
 800668a:	b006      	add	sp, #24
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006692:	b08d      	sub	sp, #52	@ 0x34
 8006694:	af04      	add	r7, sp, #16
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800669a:	240c      	movs	r4, #12
 800669c:	193a      	adds	r2, r7, r4
 800669e:	2508      	movs	r5, #8
 80066a0:	1979      	adds	r1, r7, r5
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	0018      	movs	r0, r3
 80066a6:	f000 f9d1 	bl	8006a4c <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80066aa:	002a      	movs	r2, r5
 80066ac:	18bb      	adds	r3, r7, r2
 80066ae:	789b      	ldrb	r3, [r3, #2]
 80066b0:	001e      	movs	r6, r3
 80066b2:	18bb      	adds	r3, r7, r2
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	469c      	mov	ip, r3
 80066b8:	18bb      	adds	r3, r7, r2
 80066ba:	78db      	ldrb	r3, [r3, #3]
 80066bc:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80066be:	0021      	movs	r1, r4
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80066c4:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80066c6:	187b      	adds	r3, r7, r1
 80066c8:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80066ca:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80066cc:	187b      	adds	r3, r7, r1
 80066ce:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80066d0:	4906      	ldr	r1, [pc, #24]	@ (80066ec <getUTCfromPosixTime+0x5c>)
 80066d2:	6838      	ldr	r0, [r7, #0]
 80066d4:	9303      	str	r3, [sp, #12]
 80066d6:	9502      	str	r5, [sp, #8]
 80066d8:	9401      	str	r4, [sp, #4]
 80066da:	9200      	str	r2, [sp, #0]
 80066dc:	4663      	mov	r3, ip
 80066de:	0032      	movs	r2, r6
 80066e0:	f018 fcd6 	bl	801f090 <siprintf>
}
 80066e4:	46c0      	nop			@ (mov r8, r8)
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b009      	add	sp, #36	@ 0x24
 80066ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ec:	08022d14 	.word	0x08022d14

080066f0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80066f8:	4b10      	ldr	r3, [pc, #64]	@ (800673c <RTC_SetWakeUpTimer+0x4c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	0018      	movs	r0, r3
 80066fe:	f00f f89b 	bl	8015838 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006702:	4b0e      	ldr	r3, [pc, #56]	@ (800673c <RTC_SetWakeUpTimer+0x4c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	22ff      	movs	r2, #255	@ 0xff
 800670c:	401a      	ands	r2, r3
 800670e:	4b0b      	ldr	r3, [pc, #44]	@ (800673c <RTC_SetWakeUpTimer+0x4c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	490a      	ldr	r1, [pc, #40]	@ (8006740 <RTC_SetWakeUpTimer+0x50>)
 8006716:	430a      	orrs	r2, r1
 8006718:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800671a:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <RTC_SetWakeUpTimer+0x54>)
 800671c:	2280      	movs	r2, #128	@ 0x80
 800671e:	0352      	lsls	r2, r2, #13
 8006720:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006722:	4b06      	ldr	r3, [pc, #24]	@ (800673c <RTC_SetWakeUpTimer+0x4c>)
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3b01      	subs	r3, #1
 800672a:	2204      	movs	r2, #4
 800672c:	0019      	movs	r1, r3
 800672e:	f00e ffab 	bl	8015688 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	46bd      	mov	sp, r7
 8006736:	b002      	add	sp, #8
 8006738:	bd80      	pop	{r7, pc}
 800673a:	46c0      	nop			@ (mov r8, r8)
 800673c:	20000cdc 	.word	0x20000cdc
 8006740:	fffffb7f 	.word	0xfffffb7f
 8006744:	40010400 	.word	0x40010400

08006748 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 800674c:	4a0c      	ldr	r2, [pc, #48]	@ (8006780 <Enter_Standby_Mode+0x38>)
 800674e:	4b0d      	ldr	r3, [pc, #52]	@ (8006784 <Enter_Standby_Mode+0x3c>)
 8006750:	0019      	movs	r1, r3
 8006752:	2003      	movs	r0, #3
 8006754:	f007 f83e 	bl	800d7d4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006758:	2064      	movs	r0, #100	@ 0x64
 800675a:	f007 fbe3 	bl	800df24 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800675e:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <Enter_Standby_Mode+0x40>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	0018      	movs	r0, r3
 8006764:	f00f f868 	bl	8015838 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006768:	f007 fc00 	bl	800df6c <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 800676c:	f00d fcc4 	bl	80140f8 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006770:	f001 fa68 	bl	8007c44 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006774:	f007 fc08 	bl	800df88 <HAL_ResumeTick>
}
 8006778:	46c0      	nop			@ (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	08022d68 	.word	0x08022d68
 8006784:	08022c9c 	.word	0x08022c9c
 8006788:	20000cdc 	.word	0x20000cdc

0800678c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af02      	add	r7, sp, #8
 8006792:	0002      	movs	r2, r0
 8006794:	1dbb      	adds	r3, r7, #6
 8006796:	801a      	strh	r2, [r3, #0]
    // Schakel de clock voor de Power Controller in
//    __HAL_RCC_PWR_CLK_ENABLE();
  //just for sure disable the sen5x power supply
  sen5x_Power_Off();
 8006798:	f002 fa60 	bl	8008c5c <sen5x_Power_Off>
  Info("Battery voltage %.2fV", ReadBatteryVoltage());
 800679c:	f7ff fc28 	bl	8005ff0 <ReadBatteryVoltage>
 80067a0:	1c03      	adds	r3, r0, #0
 80067a2:	1c18      	adds	r0, r3, #0
 80067a4:	f7fc fe5e 	bl	8003464 <__aeabi_f2d>
 80067a8:	0002      	movs	r2, r0
 80067aa:	000b      	movs	r3, r1
 80067ac:	4832      	ldr	r0, [pc, #200]	@ (8006878 <Enter_Stop_Mode+0xec>)
 80067ae:	4933      	ldr	r1, [pc, #204]	@ (800687c <Enter_Stop_Mode+0xf0>)
 80067b0:	9200      	str	r2, [sp, #0]
 80067b2:	9301      	str	r3, [sp, #4]
 80067b4:	0002      	movs	r2, r0
 80067b6:	2002      	movs	r0, #2
 80067b8:	f007 f80c 	bl	800d7d4 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80067bc:	1dbb      	adds	r3, r7, #6
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006880 <Enter_Stop_Mode+0xf4>)
 80067c2:	4930      	ldr	r1, [pc, #192]	@ (8006884 <Enter_Stop_Mode+0xf8>)
 80067c4:	2003      	movs	r0, #3
 80067c6:	f007 f805 	bl	800d7d4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 80067ca:	f7ff ff4c 	bl	8006666 <getPosixTime>
 80067ce:	0002      	movs	r2, r0
 80067d0:	1dbb      	adds	r3, r7, #6
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	18d3      	adds	r3, r2, r3
 80067d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006888 <Enter_Stop_Mode+0xfc>)
 80067d8:	0011      	movs	r1, r2
 80067da:	0018      	movs	r0, r3
 80067dc:	f7ff ff58 	bl	8006690 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 80067e0:	4b29      	ldr	r3, [pc, #164]	@ (8006888 <Enter_Stop_Mode+0xfc>)
 80067e2:	4a2a      	ldr	r2, [pc, #168]	@ (800688c <Enter_Stop_Mode+0x100>)
 80067e4:	4925      	ldr	r1, [pc, #148]	@ (800687c <Enter_Stop_Mode+0xf0>)
 80067e6:	2002      	movs	r0, #2
 80067e8:	f006 fff4 	bl	800d7d4 <CreateLine>
  HAL_Delay(100);
 80067ec:	2064      	movs	r0, #100	@ 0x64
 80067ee:	f007 fb99 	bl	800df24 <HAL_Delay>
  HAL_SuspendTick();
 80067f2:	f007 fbbb 	bl	800df6c <HAL_SuspendTick>
  //set wake up timer
  RTC_SetWakeUpTimer(sleepTime);
 80067f6:	1dbb      	adds	r3, r7, #6
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	0018      	movs	r0, r3
 80067fc:	f7ff ff78 	bl	80066f0 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006800:	2101      	movs	r1, #1
 8006802:	2001      	movs	r0, #1
 8006804:	f00d fc1c 	bl	8014040 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006808:	f001 fa1c 	bl	8007c44 <SystemClock_Config>
  if (enable_sen5x((uint32_t)sleepTime)) {
 800680c:	1dbb      	adds	r3, r7, #6
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	0018      	movs	r0, r3
 8006812:	f002 f9bf 	bl	8008b94 <enable_sen5x>
 8006816:	1e03      	subs	r3, r0, #0
 8006818:	d019      	beq.n	800684e <Enter_Stop_Mode+0xc2>
    showTime();
 800681a:	f7ff fcdf 	bl	80061dc <showTime>
    set_light_on_state();
 800681e:	f002 fddd 	bl	80093dc <set_light_on_state>
    if (!userToggle) {
 8006822:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <Enter_Stop_Mode+0x104>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2201      	movs	r2, #1
 8006828:	4053      	eors	r3, r2
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00e      	beq.n	800684e <Enter_Stop_Mode+0xc2>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 30 seconds
 8006830:	201e      	movs	r0, #30
 8006832:	f7ff ff5d 	bl	80066f0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006836:	4a12      	ldr	r2, [pc, #72]	@ (8006880 <Enter_Stop_Mode+0xf4>)
 8006838:	4912      	ldr	r1, [pc, #72]	@ (8006884 <Enter_Stop_Mode+0xf8>)
 800683a:	231e      	movs	r3, #30
 800683c:	2003      	movs	r0, #3
 800683e:	f006 ffc9 	bl	800d7d4 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006842:	2101      	movs	r1, #1
 8006844:	2001      	movs	r0, #1
 8006846:	f00d fbfb 	bl	8014040 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800684a:	f001 f9fb 	bl	8007c44 <SystemClock_Config>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800684e:	f007 fb9b 	bl	800df88 <HAL_ResumeTick>
  showTime();
 8006852:	f7ff fcc3 	bl	80061dc <showTime>
  setMeasStamp(300);
 8006856:	2396      	movs	r3, #150	@ 0x96
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	0018      	movs	r0, r3
 800685c:	f001 fb8c 	bl	8007f78 <setMeasStamp>
  ESPTransmitDone = false;
 8006860:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <Enter_Stop_Mode+0x108>)
 8006862:	2200      	movs	r2, #0
 8006864:	701a      	strb	r2, [r3, #0]
  setESPTimeStamp(4500);
 8006866:	4b0c      	ldr	r3, [pc, #48]	@ (8006898 <Enter_Stop_Mode+0x10c>)
 8006868:	0018      	movs	r0, r3
 800686a:	f7fc ffa1 	bl	80037b0 <setESPTimeStamp>
}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	46bd      	mov	sp, r7
 8006872:	b002      	add	sp, #8
 8006874:	bd80      	pop	{r7, pc}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	08022d8c 	.word	0x08022d8c
 800687c:	08022da4 	.word	0x08022da4
 8006880:	08022da8 	.word	0x08022da8
 8006884:	08022c9c 	.word	0x08022c9c
 8006888:	20000ce4 	.word	0x20000ce4
 800688c:	08022dcc 	.word	0x08022dcc
 8006890:	2000217a 	.word	0x2000217a
 8006894:	2000054f 	.word	0x2000054f
 8006898:	00001194 	.word	0x00001194

0800689c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 80068a4:	4b03      	ldr	r3, [pc, #12]	@ (80068b4 <InitClock+0x18>)
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	46c0      	nop			@ (mov r8, r8)
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b002      	add	sp, #8
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	46c0      	nop			@ (mov r8, r8)
 80068b4:	20000cdc 	.word	0x20000cdc

080068b8 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	78db      	ldrb	r3, [r3, #3]
 80068c6:	001a      	movs	r2, r3
 80068c8:	0013      	movs	r3, r2
 80068ca:	025b      	lsls	r3, r3, #9
 80068cc:	189b      	adds	r3, r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	189b      	adds	r3, r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	189b      	adds	r3, r3, r2
 80068d6:	011a      	lsls	r2, r3, #4
 80068d8:	1ad2      	subs	r2, r2, r3
 80068da:	01d3      	lsls	r3, r2, #7
 80068dc:	001a      	movs	r2, r3
 80068de:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e028      	b.n	8006938 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4a53      	ldr	r2, [pc, #332]	@ (8006a38 <makeTime+0x180>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	db21      	blt.n	8006932 <makeTime+0x7a>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a52      	ldr	r2, [pc, #328]	@ (8006a3c <makeTime+0x184>)
 80068f2:	4694      	mov	ip, r2
 80068f4:	4463      	add	r3, ip
 80068f6:	001a      	movs	r2, r3
 80068f8:	2303      	movs	r3, #3
 80068fa:	4013      	ands	r3, r2
 80068fc:	d119      	bne.n	8006932 <makeTime+0x7a>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4a4e      	ldr	r2, [pc, #312]	@ (8006a3c <makeTime+0x184>)
 8006902:	4694      	mov	ip, r2
 8006904:	4463      	add	r3, ip
 8006906:	2164      	movs	r1, #100	@ 0x64
 8006908:	0018      	movs	r0, r3
 800690a:	f7f9 fdbb 	bl	8000484 <__aeabi_idivmod>
 800690e:	1e0b      	subs	r3, r1, #0
 8006910:	d10a      	bne.n	8006928 <makeTime+0x70>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a49      	ldr	r2, [pc, #292]	@ (8006a3c <makeTime+0x184>)
 8006916:	4694      	mov	ip, r2
 8006918:	4463      	add	r3, ip
 800691a:	22c8      	movs	r2, #200	@ 0xc8
 800691c:	0051      	lsls	r1, r2, #1
 800691e:	0018      	movs	r0, r3
 8006920:	f7f9 fdb0 	bl	8000484 <__aeabi_idivmod>
 8006924:	1e0b      	subs	r3, r1, #0
 8006926:	d104      	bne.n	8006932 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4a45      	ldr	r2, [pc, #276]	@ (8006a40 <makeTime+0x188>)
 800692c:	4694      	mov	ip, r2
 800692e:	4463      	add	r3, ip
 8006930:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	78db      	ldrb	r3, [r3, #3]
 800693c:	001a      	movs	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4293      	cmp	r3, r2
 8006942:	dbd0      	blt.n	80068e6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006944:	2301      	movs	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e03c      	b.n	80069c4 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d125      	bne.n	800699c <makeTime+0xe4>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	4a39      	ldr	r2, [pc, #228]	@ (8006a3c <makeTime+0x184>)
 8006956:	4694      	mov	ip, r2
 8006958:	4463      	add	r3, ip
 800695a:	001a      	movs	r2, r3
 800695c:	2303      	movs	r3, #3
 800695e:	4013      	ands	r3, r2
 8006960:	d11c      	bne.n	800699c <makeTime+0xe4>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	78db      	ldrb	r3, [r3, #3]
 8006966:	4a35      	ldr	r2, [pc, #212]	@ (8006a3c <makeTime+0x184>)
 8006968:	4694      	mov	ip, r2
 800696a:	4463      	add	r3, ip
 800696c:	2164      	movs	r1, #100	@ 0x64
 800696e:	0018      	movs	r0, r3
 8006970:	f7f9 fd88 	bl	8000484 <__aeabi_idivmod>
 8006974:	1e0b      	subs	r3, r1, #0
 8006976:	d10b      	bne.n	8006990 <makeTime+0xd8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	78db      	ldrb	r3, [r3, #3]
 800697c:	4a2f      	ldr	r2, [pc, #188]	@ (8006a3c <makeTime+0x184>)
 800697e:	4694      	mov	ip, r2
 8006980:	4463      	add	r3, ip
 8006982:	22c8      	movs	r2, #200	@ 0xc8
 8006984:	0051      	lsls	r1, r2, #1
 8006986:	0018      	movs	r0, r3
 8006988:	f7f9 fd7c 	bl	8000484 <__aeabi_idivmod>
 800698c:	1e0b      	subs	r3, r1, #0
 800698e:	d105      	bne.n	800699c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4a2c      	ldr	r2, [pc, #176]	@ (8006a44 <makeTime+0x18c>)
 8006994:	4694      	mov	ip, r2
 8006996:	4463      	add	r3, ip
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	e010      	b.n	80069be <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3b01      	subs	r3, #1
 80069a0:	4a29      	ldr	r2, [pc, #164]	@ (8006a48 <makeTime+0x190>)
 80069a2:	5cd3      	ldrb	r3, [r2, r3]
 80069a4:	001a      	movs	r2, r3
 80069a6:	0013      	movs	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	011a      	lsls	r2, r3, #4
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	0113      	lsls	r3, r2, #4
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	01db      	lsls	r3, r3, #7
 80069b6:	001a      	movs	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	189b      	adds	r3, r3, r2
 80069bc:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	001a      	movs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	dbbc      	blt.n	800694a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	001a      	movs	r2, r3
 80069d8:	0013      	movs	r3, r2
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	189b      	adds	r3, r3, r2
 80069de:	011a      	lsls	r2, r3, #4
 80069e0:	1ad2      	subs	r2, r2, r3
 80069e2:	0113      	lsls	r3, r2, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	01db      	lsls	r3, r3, #7
 80069e8:	001a      	movs	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	189b      	adds	r3, r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	001a      	movs	r2, r3
 80069f6:	0013      	movs	r3, r2
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	011a      	lsls	r2, r3, #4
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	0113      	lsls	r3, r2, #4
 8006a02:	001a      	movs	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	785b      	ldrb	r3, [r3, #1]
 8006a0e:	001a      	movs	r2, r3
 8006a10:	0013      	movs	r3, r2
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	001a      	movs	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	189b      	adds	r3, r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	001a      	movs	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	189b      	adds	r3, r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b004      	add	sp, #16
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			@ (mov r8, r8)
 8006a38:	fffff84f 	.word	0xfffff84f
 8006a3c:	000007b2 	.word	0x000007b2
 8006a40:	00015180 	.word	0x00015180
 8006a44:	00263b80 	.word	0x00263b80
 8006a48:	08023e6c 	.word	0x08023e6c

08006a4c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006a4c:	b590      	push	{r4, r7, lr}
 8006a4e:	b089      	sub	sp, #36	@ 0x24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	213c      	movs	r1, #60	@ 0x3c
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7f9 fc25 	bl	80002b0 <__aeabi_uidivmod>
 8006a66:	000b      	movs	r3, r1
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	213c      	movs	r1, #60	@ 0x3c
 8006a72:	0018      	movs	r0, r3
 8006a74:	f7f9 fb96 	bl	80001a4 <__udivsi3>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	213c      	movs	r1, #60	@ 0x3c
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7f9 fc15 	bl	80002b0 <__aeabi_uidivmod>
 8006a86:	000b      	movs	r3, r1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	213c      	movs	r1, #60	@ 0x3c
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7f9 fb86 	bl	80001a4 <__udivsi3>
 8006a98:	0003      	movs	r3, r0
 8006a9a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2118      	movs	r1, #24
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f7f9 fc05 	bl	80002b0 <__aeabi_uidivmod>
 8006aa6:	000b      	movs	r3, r1
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2118      	movs	r1, #24
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f7f9 fb76 	bl	80001a4 <__udivsi3>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	2107      	movs	r1, #7
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7f9 fbf4 	bl	80002b0 <__aeabi_uidivmod>
 8006ac8:	000b      	movs	r3, r1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	3301      	adds	r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006ad4:	231f      	movs	r3, #31
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ae0:	e005      	b.n	8006aee <breakPosixTime+0xa2>
    year++;
 8006ae2:	211f      	movs	r1, #31
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	781a      	ldrb	r2, [r3, #0]
 8006ae8:	187b      	adds	r3, r7, r1
 8006aea:	3201      	adds	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006aee:	241f      	movs	r4, #31
 8006af0:	193b      	adds	r3, r7, r4
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	4a64      	ldr	r2, [pc, #400]	@ (8006c88 <breakPosixTime+0x23c>)
 8006af6:	4694      	mov	ip, r2
 8006af8:	4463      	add	r3, ip
 8006afa:	001a      	movs	r2, r3
 8006afc:	2303      	movs	r3, #3
 8006afe:	4013      	ands	r3, r2
 8006b00:	d119      	bne.n	8006b36 <breakPosixTime+0xea>
 8006b02:	193b      	adds	r3, r7, r4
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	4a60      	ldr	r2, [pc, #384]	@ (8006c88 <breakPosixTime+0x23c>)
 8006b08:	4694      	mov	ip, r2
 8006b0a:	4463      	add	r3, ip
 8006b0c:	2164      	movs	r1, #100	@ 0x64
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f7f9 fcb8 	bl	8000484 <__aeabi_idivmod>
 8006b14:	1e0b      	subs	r3, r1, #0
 8006b16:	d10b      	bne.n	8006b30 <breakPosixTime+0xe4>
 8006b18:	193b      	adds	r3, r7, r4
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8006c88 <breakPosixTime+0x23c>)
 8006b1e:	4694      	mov	ip, r2
 8006b20:	4463      	add	r3, ip
 8006b22:	22c8      	movs	r2, #200	@ 0xc8
 8006b24:	0051      	lsls	r1, r2, #1
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7f9 fcac 	bl	8000484 <__aeabi_idivmod>
 8006b2c:	1e0b      	subs	r3, r1, #0
 8006b2e:	d102      	bne.n	8006b36 <breakPosixTime+0xea>
 8006b30:	23b7      	movs	r3, #183	@ 0xb7
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	e001      	b.n	8006b3a <breakPosixTime+0xee>
 8006b36:	236e      	movs	r3, #110	@ 0x6e
 8006b38:	33ff      	adds	r3, #255	@ 0xff
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	18d3      	adds	r3, r2, r3
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d9cc      	bls.n	8006ae2 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	241f      	movs	r4, #31
 8006b4c:	193a      	adds	r2, r7, r4
 8006b4e:	7812      	ldrb	r2, [r2, #0]
 8006b50:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006b52:	193b      	adds	r3, r7, r4
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	4a4c      	ldr	r2, [pc, #304]	@ (8006c88 <breakPosixTime+0x23c>)
 8006b58:	4694      	mov	ip, r2
 8006b5a:	4463      	add	r3, ip
 8006b5c:	001a      	movs	r2, r3
 8006b5e:	2303      	movs	r3, #3
 8006b60:	4013      	ands	r3, r2
 8006b62:	d119      	bne.n	8006b98 <breakPosixTime+0x14c>
 8006b64:	193b      	adds	r3, r7, r4
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	4a47      	ldr	r2, [pc, #284]	@ (8006c88 <breakPosixTime+0x23c>)
 8006b6a:	4694      	mov	ip, r2
 8006b6c:	4463      	add	r3, ip
 8006b6e:	2164      	movs	r1, #100	@ 0x64
 8006b70:	0018      	movs	r0, r3
 8006b72:	f7f9 fc87 	bl	8000484 <__aeabi_idivmod>
 8006b76:	1e0b      	subs	r3, r1, #0
 8006b78:	d10b      	bne.n	8006b92 <breakPosixTime+0x146>
 8006b7a:	193b      	adds	r3, r7, r4
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	4a42      	ldr	r2, [pc, #264]	@ (8006c88 <breakPosixTime+0x23c>)
 8006b80:	4694      	mov	ip, r2
 8006b82:	4463      	add	r3, ip
 8006b84:	22c8      	movs	r2, #200	@ 0xc8
 8006b86:	0051      	lsls	r1, r2, #1
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7f9 fc7b 	bl	8000484 <__aeabi_idivmod>
 8006b8e:	1e0b      	subs	r3, r1, #0
 8006b90:	d102      	bne.n	8006b98 <breakPosixTime+0x14c>
 8006b92:	23b7      	movs	r3, #183	@ 0xb7
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	e001      	b.n	8006b9c <breakPosixTime+0x150>
 8006b98:	236e      	movs	r3, #110	@ 0x6e
 8006b9a:	33ff      	adds	r3, #255	@ 0xff
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	61bb      	str	r3, [r7, #24]

  days=0;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]
  month=0;
 8006bae:	211e      	movs	r1, #30
 8006bb0:	187b      	adds	r3, r7, r1
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006bb6:	231d      	movs	r3, #29
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006bbe:	187b      	adds	r3, r7, r1
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e048      	b.n	8006c58 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006bc6:	231e      	movs	r3, #30
 8006bc8:	18fb      	adds	r3, r7, r3
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d12a      	bne.n	8006c26 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006bd0:	241f      	movs	r4, #31
 8006bd2:	193b      	adds	r3, r7, r4
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8006c88 <breakPosixTime+0x23c>)
 8006bd8:	4694      	mov	ip, r2
 8006bda:	4463      	add	r3, ip
 8006bdc:	001a      	movs	r2, r3
 8006bde:	2303      	movs	r3, #3
 8006be0:	4013      	ands	r3, r2
 8006be2:	d11b      	bne.n	8006c1c <breakPosixTime+0x1d0>
 8006be4:	193b      	adds	r3, r7, r4
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	4a27      	ldr	r2, [pc, #156]	@ (8006c88 <breakPosixTime+0x23c>)
 8006bea:	4694      	mov	ip, r2
 8006bec:	4463      	add	r3, ip
 8006bee:	2164      	movs	r1, #100	@ 0x64
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7f9 fc47 	bl	8000484 <__aeabi_idivmod>
 8006bf6:	1e0b      	subs	r3, r1, #0
 8006bf8:	d10b      	bne.n	8006c12 <breakPosixTime+0x1c6>
 8006bfa:	193b      	adds	r3, r7, r4
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	4a22      	ldr	r2, [pc, #136]	@ (8006c88 <breakPosixTime+0x23c>)
 8006c00:	4694      	mov	ip, r2
 8006c02:	4463      	add	r3, ip
 8006c04:	22c8      	movs	r2, #200	@ 0xc8
 8006c06:	0051      	lsls	r1, r2, #1
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f7f9 fc3b 	bl	8000484 <__aeabi_idivmod>
 8006c0e:	1e0b      	subs	r3, r1, #0
 8006c10:	d104      	bne.n	8006c1c <breakPosixTime+0x1d0>
        monthLength=29;
 8006c12:	231d      	movs	r3, #29
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	221d      	movs	r2, #29
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	e00c      	b.n	8006c36 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006c1c:	231d      	movs	r3, #29
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	221c      	movs	r2, #28
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e007      	b.n	8006c36 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006c26:	231e      	movs	r3, #30
 8006c28:	18fb      	adds	r3, r7, r3
 8006c2a:	781a      	ldrb	r2, [r3, #0]
 8006c2c:	231d      	movs	r3, #29
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	4916      	ldr	r1, [pc, #88]	@ (8006c8c <breakPosixTime+0x240>)
 8006c32:	5c8a      	ldrb	r2, [r1, r2]
 8006c34:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006c36:	211d      	movs	r1, #29
 8006c38:	187b      	adds	r3, r7, r1
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d310      	bcc.n	8006c64 <breakPosixTime+0x218>
      time -= monthLength;
 8006c42:	187b      	adds	r3, r7, r1
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006c4c:	211e      	movs	r1, #30
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	187b      	adds	r3, r7, r1
 8006c54:	3201      	adds	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	231e      	movs	r3, #30
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b0b      	cmp	r3, #11
 8006c60:	d9b1      	bls.n	8006bc6 <breakPosixTime+0x17a>
 8006c62:	e000      	b.n	8006c66 <breakPosixTime+0x21a>
    } else {
        break;
 8006c64:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006c66:	231e      	movs	r3, #30
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	3301      	adds	r3, #1
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006c80:	46c0      	nop			@ (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b009      	add	sp, #36	@ 0x24
 8006c86:	bd90      	pop	{r4, r7, pc}
 8006c88:	000007b2 	.word	0x000007b2
 8006c8c:	08023e6c 	.word	0x08023e6c

08006c90 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c96:	003b      	movs	r3, r7
 8006c98:	0018      	movs	r0, r3
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	f018 fb3a 	bl	801f318 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006ca4:	4b30      	ldr	r3, [pc, #192]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006ca6:	4a31      	ldr	r2, [pc, #196]	@ (8006d6c <MX_ADC_Init+0xdc>)
 8006ca8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006caa:	4b2f      	ldr	r3, [pc, #188]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cb2:	22c0      	movs	r2, #192	@ 0xc0
 8006cb4:	0612      	lsls	r2, r2, #24
 8006cb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006cc4:	4b28      	ldr	r3, [pc, #160]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006cca:	4b27      	ldr	r3, [pc, #156]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006cd0:	4b25      	ldr	r3, [pc, #148]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006cd8:	4b23      	ldr	r3, [pc, #140]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cda:	2221      	movs	r2, #33	@ 0x21
 8006cdc:	2101      	movs	r1, #1
 8006cde:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ce0:	4b21      	ldr	r3, [pc, #132]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ce6:	4b20      	ldr	r3, [pc, #128]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006ce8:	22c2      	movs	r2, #194	@ 0xc2
 8006cea:	32ff      	adds	r2, #255	@ 0xff
 8006cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006cee:	4b1e      	ldr	r3, [pc, #120]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cf0:	222c      	movs	r2, #44	@ 0x2c
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006d02:	4b19      	ldr	r3, [pc, #100]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006d08:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006d0e:	4b16      	ldr	r3, [pc, #88]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006d14:	4b14      	ldr	r3, [pc, #80]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006d16:	0018      	movs	r0, r3
 8006d18:	f007 f962 	bl	800dfe0 <HAL_ADC_Init>
 8006d1c:	1e03      	subs	r3, r0, #0
 8006d1e:	d001      	beq.n	8006d24 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006d20:	f001 f8da 	bl	8007ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006d24:	003b      	movs	r3, r7
 8006d26:	4a12      	ldr	r2, [pc, #72]	@ (8006d70 <MX_ADC_Init+0xe0>)
 8006d28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006d2a:	003b      	movs	r3, r7
 8006d2c:	2280      	movs	r2, #128	@ 0x80
 8006d2e:	0152      	lsls	r2, r2, #5
 8006d30:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d32:	003a      	movs	r2, r7
 8006d34:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006d36:	0011      	movs	r1, r2
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f007 fbc1 	bl	800e4c0 <HAL_ADC_ConfigChannel>
 8006d3e:	1e03      	subs	r3, r0, #0
 8006d40:	d001      	beq.n	8006d46 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006d42:	f001 f8c9 	bl	8007ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006d46:	003b      	movs	r3, r7
 8006d48:	4a0a      	ldr	r2, [pc, #40]	@ (8006d74 <MX_ADC_Init+0xe4>)
 8006d4a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006d4c:	003a      	movs	r2, r7
 8006d4e:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <MX_ADC_Init+0xd8>)
 8006d50:	0011      	movs	r1, r2
 8006d52:	0018      	movs	r0, r3
 8006d54:	f007 fbb4 	bl	800e4c0 <HAL_ADC_ConfigChannel>
 8006d58:	1e03      	subs	r3, r0, #0
 8006d5a:	d001      	beq.n	8006d60 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8006d5c:	f001 f8bc 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006d60:	46c0      	nop			@ (mov r8, r8)
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000cfc 	.word	0x20000cfc
 8006d6c:	40012400 	.word	0x40012400
 8006d70:	38004000 	.word	0x38004000
 8006d74:	3c008000 	.word	0x3c008000

08006d78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006d78:	b590      	push	{r4, r7, lr}
 8006d7a:	b089      	sub	sp, #36	@ 0x24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d80:	240c      	movs	r4, #12
 8006d82:	193b      	adds	r3, r7, r4
 8006d84:	0018      	movs	r0, r3
 8006d86:	2314      	movs	r3, #20
 8006d88:	001a      	movs	r2, r3
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	f018 fac4 	bl	801f318 <memset>
  if(adcHandle->Instance==ADC1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a14      	ldr	r2, [pc, #80]	@ (8006de8 <HAL_ADC_MspInit+0x70>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d121      	bne.n	8006dde <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006d9a:	4b14      	ldr	r3, [pc, #80]	@ (8006dec <HAL_ADC_MspInit+0x74>)
 8006d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d9e:	4b13      	ldr	r3, [pc, #76]	@ (8006dec <HAL_ADC_MspInit+0x74>)
 8006da0:	2180      	movs	r1, #128	@ 0x80
 8006da2:	0089      	lsls	r1, r1, #2
 8006da4:	430a      	orrs	r2, r1
 8006da6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006da8:	4b10      	ldr	r3, [pc, #64]	@ (8006dec <HAL_ADC_MspInit+0x74>)
 8006daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dac:	4b0f      	ldr	r3, [pc, #60]	@ (8006dec <HAL_ADC_MspInit+0x74>)
 8006dae:	2104      	movs	r1, #4
 8006db0:	430a      	orrs	r2, r1
 8006db2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006db4:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <HAL_ADC_MspInit+0x74>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db8:	2204      	movs	r2, #4
 8006dba:	4013      	ands	r3, r2
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006dc0:	193b      	adds	r3, r7, r4
 8006dc2:	2230      	movs	r2, #48	@ 0x30
 8006dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dc6:	193b      	adds	r3, r7, r4
 8006dc8:	2203      	movs	r2, #3
 8006dca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dcc:	193b      	adds	r3, r7, r4
 8006dce:	2200      	movs	r2, #0
 8006dd0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dd2:	193b      	adds	r3, r7, r4
 8006dd4:	4a06      	ldr	r2, [pc, #24]	@ (8006df0 <HAL_ADC_MspInit+0x78>)
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	0010      	movs	r0, r2
 8006dda:	f008 f979 	bl	800f0d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	46bd      	mov	sp, r7
 8006de2:	b009      	add	sp, #36	@ 0x24
 8006de4:	bd90      	pop	{r4, r7, pc}
 8006de6:	46c0      	nop			@ (mov r8, r8)
 8006de8:	40012400 	.word	0x40012400
 8006dec:	40021000 	.word	0x40021000
 8006df0:	50000800 	.word	0x50000800

08006df4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006dfa:	4b10      	ldr	r3, [pc, #64]	@ (8006e3c <MX_DMA_Init+0x48>)
 8006dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8006e3c <MX_DMA_Init+0x48>)
 8006e00:	2101      	movs	r1, #1
 8006e02:	430a      	orrs	r2, r1
 8006e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e06:	4b0d      	ldr	r3, [pc, #52]	@ (8006e3c <MX_DMA_Init+0x48>)
 8006e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	607b      	str	r3, [r7, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006e12:	2200      	movs	r2, #0
 8006e14:	2100      	movs	r1, #0
 8006e16:	200a      	movs	r0, #10
 8006e18:	f007 fd0c 	bl	800e834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006e1c:	200a      	movs	r0, #10
 8006e1e:	f007 fd1e 	bl	800e85e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006e22:	2200      	movs	r2, #0
 8006e24:	2103      	movs	r1, #3
 8006e26:	200b      	movs	r0, #11
 8006e28:	f007 fd04 	bl	800e834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006e2c:	200b      	movs	r0, #11
 8006e2e:	f007 fd16 	bl	800e85e <HAL_NVIC_EnableIRQ>

}
 8006e32:	46c0      	nop			@ (mov r8, r8)
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b002      	add	sp, #8
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	46c0      	nop			@ (mov r8, r8)
 8006e3c:	40021000 	.word	0x40021000

08006e40 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e50:	d901      	bls.n	8006e56 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006e52:	237f      	movs	r3, #127	@ 0x7f
 8006e54:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006e56:	2017      	movs	r0, #23
 8006e58:	183b      	adds	r3, r7, r0
 8006e5a:	490d      	ldr	r1, [pc, #52]	@ (8006e90 <accessLUT10log10+0x50>)
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	188a      	adds	r2, r1, r2
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006e64:	0001      	movs	r1, r0
 8006e66:	187b      	adds	r3, r7, r1
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2206      	movs	r2, #6
 8006e6c:	4113      	asrs	r3, r2
 8006e6e:	001a      	movs	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006e74:	187b      	adds	r3, r7, r1
 8006e76:	781a      	ldrb	r2, [r3, #0]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2106      	movs	r1, #6
 8006e7e:	408b      	lsls	r3, r1
 8006e80:	1ad2      	subs	r2, r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	601a      	str	r2, [r3, #0]
}
 8006e86:	46c0      	nop			@ (mov r8, r8)
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	b006      	add	sp, #24
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	46c0      	nop			@ (mov r8, r8)
 8006e90:	08023e78 	.word	0x08023e78

08006e94 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006e94:	b5b0      	push	{r4, r5, r7, lr}
 8006e96:	b090      	sub	sp, #64	@ 0x40
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6138      	str	r0, [r7, #16]
 8006e9c:	6179      	str	r1, [r7, #20]
 8006e9e:	60fa      	str	r2, [r7, #12]
 8006ea0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006ea2:	2308      	movs	r3, #8
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	3a20      	subs	r2, #32
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	db03      	blt.n	8006eb4 <efficient10log10+0x20>
 8006eac:	2101      	movs	r1, #1
 8006eae:	4091      	lsls	r1, r2
 8006eb0:	000d      	movs	r5, r1
 8006eb2:	e008      	b.n	8006ec6 <efficient10log10+0x32>
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	2101      	movs	r1, #1
 8006eba:	40d1      	lsrs	r1, r2
 8006ebc:	000a      	movs	r2, r1
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4099      	lsls	r1, r3
 8006ec2:	000d      	movs	r5, r1
 8006ec4:	4315      	orrs	r5, r2
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	409a      	lsls	r2, r3
 8006eca:	0014      	movs	r4, r2
 8006ecc:	2201      	movs	r2, #1
 8006ece:	4252      	negs	r2, r2
 8006ed0:	17d3      	asrs	r3, r2, #31
 8006ed2:	1912      	adds	r2, r2, r4
 8006ed4:	416b      	adcs	r3, r5
 8006ed6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8006eda:	2336      	movs	r3, #54	@ 0x36
 8006edc:	2208      	movs	r2, #8
 8006ede:	189b      	adds	r3, r3, r2
 8006ee0:	19db      	adds	r3, r3, r7
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006ee6:	e017      	b.n	8006f18 <efficient10log10+0x84>
    {
        P = P >> 1;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	07db      	lsls	r3, r3, #31
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	0852      	lsrs	r2, r2, #1
 8006ef0:	603a      	str	r2, [r7, #0]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	603a      	str	r2, [r7, #0]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	687c      	ldr	r4, [r7, #4]
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	617c      	str	r4, [r7, #20]
        bShift++;
 8006f06:	2136      	movs	r1, #54	@ 0x36
 8006f08:	2008      	movs	r0, #8
 8006f0a:	180b      	adds	r3, r1, r0
 8006f0c:	19db      	adds	r3, r3, r7
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	180b      	adds	r3, r1, r0
 8006f12:	19db      	adds	r3, r3, r7
 8006f14:	3201      	adds	r2, #1
 8006f16:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d8e3      	bhi.n	8006ee8 <efficient10log10+0x54>
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d103      	bne.n	8006f30 <efficient10log10+0x9c>
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d8db      	bhi.n	8006ee8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	2308      	movs	r3, #8
 8006f34:	3b01      	subs	r3, #1
 8006f36:	2101      	movs	r1, #1
 8006f38:	4099      	lsls	r1, r3
 8006f3a:	000b      	movs	r3, r1
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8006f48:	231c      	movs	r3, #28
 8006f4a:	2408      	movs	r4, #8
 8006f4c:	191b      	adds	r3, r3, r4
 8006f4e:	19da      	adds	r2, r3, r7
 8006f50:	2320      	movs	r3, #32
 8006f52:	191b      	adds	r3, r3, r4
 8006f54:	19d9      	adds	r1, r3, r7
 8006f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7ff ff71 	bl	8006e40 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006f5e:	2215      	movs	r2, #21
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8006f64:	2036      	movs	r0, #54	@ 0x36
 8006f66:	1902      	adds	r2, r0, r4
 8006f68:	19d2      	adds	r2, r2, r7
 8006f6a:	8812      	ldrh	r2, [r2, #0]
 8006f6c:	2103      	movs	r1, #3
 8006f6e:	434a      	muls	r2, r1
 8006f70:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006f72:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006f74:	0021      	movs	r1, r4
 8006f76:	1843      	adds	r3, r0, r1
 8006f78:	19db      	adds	r3, r3, r7
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	4353      	muls	r3, r2
 8006f80:	2203      	movs	r2, #3
 8006f82:	4113      	asrs	r3, r2
 8006f84:	001a      	movs	r2, r3
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8006f8a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8006f8c:	2314      	movs	r3, #20
 8006f8e:	185b      	adds	r3, r3, r1
 8006f90:	19da      	adds	r2, r3, r7
 8006f92:	2318      	movs	r3, #24
 8006f94:	185b      	adds	r3, r3, r1
 8006f96:	19db      	adds	r3, r3, r7
 8006f98:	0011      	movs	r1, r2
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f000 f80a 	bl	8006fb4 <correctIntFracNumber>
    integerPart[0] = intPart;
 8006fa0:	6a3a      	ldr	r2, [r7, #32]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	601a      	str	r2, [r3, #0]
}
 8006fac:	46c0      	nop			@ (mov r8, r8)
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b010      	add	sp, #64	@ 0x40
 8006fb2:	bdb0      	pop	{r4, r5, r7, pc}

08006fb4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8006fbe:	e00a      	b.n	8006fd6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3b0a      	subs	r3, #10
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	dcf0      	bgt.n	8006fc0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8006fde:	e00a      	b.n	8006ff6 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	1e5a      	subs	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330a      	adds	r3, #10
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3309      	adds	r3, #9
 8006ffc:	dbf0      	blt.n	8006fe0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	da0f      	bge.n	8007026 <correctIntFracNumber+0x72>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dd0b      	ble.n	8007026 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3b0a      	subs	r3, #10
 800701e:	001a      	movs	r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007024:	e012      	b.n	800704c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	dd0e      	ble.n	800704c <correctIntFracNumber+0x98>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	da0a      	bge.n	800704c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	1e5a      	subs	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	330a      	adds	r3, #10
 8007046:	001a      	movs	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	601a      	str	r2, [r3, #0]
}
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}

08007054 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8007062:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <Gadget_Init+0x40>)
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	f001 fb29 	bl	80086bc <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	0018      	movs	r0, r3
 8007072:	f000 ffa7 	bl	8007fc4 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	0018      	movs	r0, r3
 800707a:	f7fc fcb9 	bl	80039f0 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800707e:	4a06      	ldr	r2, [pc, #24]	@ (8007098 <Gadget_Init+0x44>)
 8007080:	4b06      	ldr	r3, [pc, #24]	@ (800709c <Gadget_Init+0x48>)
 8007082:	0019      	movs	r1, r3
 8007084:	2003      	movs	r0, #3
 8007086:	f006 fba5 	bl	800d7d4 <CreateLine>
}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			@ (mov r8, r8)
 8007094:	2000007c 	.word	0x2000007c
 8007098:	08022dec 	.word	0x08022dec
 800709c:	08022e00 	.word	0x08022e00

080070a0 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  Meas_Test();
 80070a4:	f001 f8c6 	bl	8008234 <Meas_Test>
}
 80070a8:	46c0      	nop			@ (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <UpkeepGadget>:

bool UpkeepGadget() {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 80070b6:	f001 fa79 	bl	80085ac <Meas_Upkeep>
 80070ba:	0003      	movs	r3, r0
 80070bc:	001a      	movs	r2, r3
 80070be:	4b0f      	ldr	r3, [pc, #60]	@ (80070fc <UpkeepGadget+0x4c>)
 80070c0:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 80070c2:	f001 f95b 	bl	800837c <Mic_Upkeep>
 80070c6:	0003      	movs	r3, r0
 80070c8:	001a      	movs	r2, r3
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <UpkeepGadget+0x50>)
 80070cc:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 80070ce:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <UpkeepGadget+0x4c>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d103      	bne.n	80070de <UpkeepGadget+0x2e>
 80070d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <UpkeepGadget+0x50>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d001      	beq.n	80070e2 <UpkeepGadget+0x32>
 80070de:	2201      	movs	r2, #1
 80070e0:	e000      	b.n	80070e4 <UpkeepGadget+0x34>
 80070e2:	2200      	movs	r2, #0
 80070e4:	1dfb      	adds	r3, r7, #7
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	781a      	ldrb	r2, [r3, #0]
 80070ea:	2101      	movs	r1, #1
 80070ec:	400a      	ands	r2, r1
 80070ee:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 80070f0:	1dfb      	adds	r3, r7, #7
 80070f2:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 80070f4:	0018      	movs	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b002      	add	sp, #8
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20000d58 	.word	0x20000d58
 8007100:	20000d59 	.word	0x20000d59

08007104 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	0011      	movs	r1, r2
 8007114:	0018      	movs	r0, r3
 8007116:	f003 ff27 	bl	800af68 <SGP_Init>
}
 800711a:	46c0      	nop			@ (mov r8, r8)
 800711c:	46bd      	mov	sp, r7
 800711e:	b002      	add	sp, #8
 8007120:	bd80      	pop	{r7, pc}

08007122 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8007122:	b580      	push	{r7, lr}
 8007124:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8007126:	f003 ff39 	bl	800af9c <SGP_StartMeasurement>
}
 800712a:	46c0      	nop			@ (mov r8, r8)
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	0018      	movs	r0, r3
 800713c:	f003 ff9e 	bl	800b07c <SGP_GetMeasurementValues>
 8007140:	0003      	movs	r3, r0
}
 8007142:	0018      	movs	r0, r3
 8007144:	46bd      	mov	sp, r7
 8007146:	b002      	add	sp, #8
 8007148:	bd80      	pop	{r7, pc}

0800714a <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800714a:	b580      	push	{r7, lr}
 800714c:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 800714e:	f004 f9a3 	bl	800b498 <SGP_DeviceConnected>
 8007152:	0003      	movs	r3, r0
}
 8007154:	0018      	movs	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b08b      	sub	sp, #44	@ 0x2c
 8007160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007162:	2414      	movs	r4, #20
 8007164:	193b      	adds	r3, r7, r4
 8007166:	0018      	movs	r0, r3
 8007168:	2314      	movs	r3, #20
 800716a:	001a      	movs	r2, r3
 800716c:	2100      	movs	r1, #0
 800716e:	f018 f8d3 	bl	801f318 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007172:	4b8a      	ldr	r3, [pc, #552]	@ (800739c <MX_GPIO_Init+0x240>)
 8007174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007176:	4b89      	ldr	r3, [pc, #548]	@ (800739c <MX_GPIO_Init+0x240>)
 8007178:	2104      	movs	r1, #4
 800717a:	430a      	orrs	r2, r1
 800717c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800717e:	4b87      	ldr	r3, [pc, #540]	@ (800739c <MX_GPIO_Init+0x240>)
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	2204      	movs	r2, #4
 8007184:	4013      	ands	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800718a:	4b84      	ldr	r3, [pc, #528]	@ (800739c <MX_GPIO_Init+0x240>)
 800718c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718e:	4b83      	ldr	r3, [pc, #524]	@ (800739c <MX_GPIO_Init+0x240>)
 8007190:	2180      	movs	r1, #128	@ 0x80
 8007192:	430a      	orrs	r2, r1
 8007194:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007196:	4b81      	ldr	r3, [pc, #516]	@ (800739c <MX_GPIO_Init+0x240>)
 8007198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719a:	2280      	movs	r2, #128	@ 0x80
 800719c:	4013      	ands	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80071a2:	4b7e      	ldr	r3, [pc, #504]	@ (800739c <MX_GPIO_Init+0x240>)
 80071a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a6:	4b7d      	ldr	r3, [pc, #500]	@ (800739c <MX_GPIO_Init+0x240>)
 80071a8:	2101      	movs	r1, #1
 80071aa:	430a      	orrs	r2, r1
 80071ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071ae:	4b7b      	ldr	r3, [pc, #492]	@ (800739c <MX_GPIO_Init+0x240>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	2201      	movs	r2, #1
 80071b4:	4013      	ands	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80071ba:	4b78      	ldr	r3, [pc, #480]	@ (800739c <MX_GPIO_Init+0x240>)
 80071bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071be:	4b77      	ldr	r3, [pc, #476]	@ (800739c <MX_GPIO_Init+0x240>)
 80071c0:	2102      	movs	r1, #2
 80071c2:	430a      	orrs	r2, r1
 80071c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071c6:	4b75      	ldr	r3, [pc, #468]	@ (800739c <MX_GPIO_Init+0x240>)
 80071c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ca:	2202      	movs	r2, #2
 80071cc:	4013      	ands	r3, r2
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80071d2:	4b72      	ldr	r3, [pc, #456]	@ (800739c <MX_GPIO_Init+0x240>)
 80071d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d6:	4b71      	ldr	r3, [pc, #452]	@ (800739c <MX_GPIO_Init+0x240>)
 80071d8:	2108      	movs	r1, #8
 80071da:	430a      	orrs	r2, r1
 80071dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80071de:	4b6f      	ldr	r3, [pc, #444]	@ (800739c <MX_GPIO_Init+0x240>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	2208      	movs	r2, #8
 80071e4:	4013      	ands	r3, r2
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80071ea:	4b6d      	ldr	r3, [pc, #436]	@ (80073a0 <MX_GPIO_Init+0x244>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	2101      	movs	r1, #1
 80071f0:	0018      	movs	r0, r3
 80071f2:	f008 f908 	bl	800f406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80071f6:	4b6a      	ldr	r3, [pc, #424]	@ (80073a0 <MX_GPIO_Init+0x244>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	2102      	movs	r1, #2
 80071fc:	0018      	movs	r0, r3
 80071fe:	f008 f902 	bl	800f406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007202:	4968      	ldr	r1, [pc, #416]	@ (80073a4 <MX_GPIO_Init+0x248>)
 8007204:	4b68      	ldr	r3, [pc, #416]	@ (80073a8 <MX_GPIO_Init+0x24c>)
 8007206:	2201      	movs	r2, #1
 8007208:	0018      	movs	r0, r3
 800720a:	f008 f8fc 	bl	800f406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800720e:	2380      	movs	r3, #128	@ 0x80
 8007210:	011b      	lsls	r3, r3, #4
 8007212:	4866      	ldr	r0, [pc, #408]	@ (80073ac <MX_GPIO_Init+0x250>)
 8007214:	2201      	movs	r2, #1
 8007216:	0019      	movs	r1, r3
 8007218:	f008 f8f5 	bl	800f406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800721c:	2380      	movs	r3, #128	@ 0x80
 800721e:	015b      	lsls	r3, r3, #5
 8007220:	4862      	ldr	r0, [pc, #392]	@ (80073ac <MX_GPIO_Init+0x250>)
 8007222:	2200      	movs	r2, #0
 8007224:	0019      	movs	r1, r3
 8007226:	f008 f8ee 	bl	800f406 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800722a:	193b      	adds	r3, r7, r4
 800722c:	4a60      	ldr	r2, [pc, #384]	@ (80073b0 <MX_GPIO_Init+0x254>)
 800722e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007230:	193b      	adds	r3, r7, r4
 8007232:	2203      	movs	r2, #3
 8007234:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007236:	193b      	adds	r3, r7, r4
 8007238:	2200      	movs	r2, #0
 800723a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800723c:	193b      	adds	r3, r7, r4
 800723e:	4a5b      	ldr	r2, [pc, #364]	@ (80073ac <MX_GPIO_Init+0x250>)
 8007240:	0019      	movs	r1, r3
 8007242:	0010      	movs	r0, r2
 8007244:	f007 ff44 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007248:	193b      	adds	r3, r7, r4
 800724a:	2203      	movs	r2, #3
 800724c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800724e:	193b      	adds	r3, r7, r4
 8007250:	2201      	movs	r2, #1
 8007252:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007254:	193b      	adds	r3, r7, r4
 8007256:	2200      	movs	r2, #0
 8007258:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800725a:	193b      	adds	r3, r7, r4
 800725c:	2200      	movs	r2, #0
 800725e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007260:	193b      	adds	r3, r7, r4
 8007262:	4a4f      	ldr	r2, [pc, #316]	@ (80073a0 <MX_GPIO_Init+0x244>)
 8007264:	0019      	movs	r1, r3
 8007266:	0010      	movs	r0, r2
 8007268:	f007 ff32 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800726c:	193b      	adds	r3, r7, r4
 800726e:	2270      	movs	r2, #112	@ 0x70
 8007270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007272:	193b      	adds	r3, r7, r4
 8007274:	2203      	movs	r2, #3
 8007276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007278:	193b      	adds	r3, r7, r4
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800727e:	193a      	adds	r2, r7, r4
 8007280:	23a0      	movs	r3, #160	@ 0xa0
 8007282:	05db      	lsls	r3, r3, #23
 8007284:	0011      	movs	r1, r2
 8007286:	0018      	movs	r0, r3
 8007288:	f007 ff22 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800728c:	193b      	adds	r3, r7, r4
 800728e:	22c0      	movs	r2, #192	@ 0xc0
 8007290:	0052      	lsls	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007294:	193b      	adds	r3, r7, r4
 8007296:	2200      	movs	r2, #0
 8007298:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729a:	193b      	adds	r3, r7, r4
 800729c:	2200      	movs	r2, #0
 800729e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072a0:	193a      	adds	r2, r7, r4
 80072a2:	23a0      	movs	r3, #160	@ 0xa0
 80072a4:	05db      	lsls	r3, r3, #23
 80072a6:	0011      	movs	r1, r2
 80072a8:	0018      	movs	r0, r3
 80072aa:	f007 ff11 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80072ae:	193b      	adds	r3, r7, r4
 80072b0:	4a3c      	ldr	r2, [pc, #240]	@ (80073a4 <MX_GPIO_Init+0x248>)
 80072b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072b4:	193b      	adds	r3, r7, r4
 80072b6:	2201      	movs	r2, #1
 80072b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ba:	193b      	adds	r3, r7, r4
 80072bc:	2200      	movs	r2, #0
 80072be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072c0:	193b      	adds	r3, r7, r4
 80072c2:	2200      	movs	r2, #0
 80072c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072c6:	193b      	adds	r3, r7, r4
 80072c8:	4a37      	ldr	r2, [pc, #220]	@ (80073a8 <MX_GPIO_Init+0x24c>)
 80072ca:	0019      	movs	r1, r3
 80072cc:	0010      	movs	r0, r2
 80072ce:	f007 feff 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80072d2:	193b      	adds	r3, r7, r4
 80072d4:	4a37      	ldr	r2, [pc, #220]	@ (80073b4 <MX_GPIO_Init+0x258>)
 80072d6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072d8:	193b      	adds	r3, r7, r4
 80072da:	2203      	movs	r2, #3
 80072dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072de:	193b      	adds	r3, r7, r4
 80072e0:	2200      	movs	r2, #0
 80072e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e4:	193b      	adds	r3, r7, r4
 80072e6:	4a30      	ldr	r2, [pc, #192]	@ (80073a8 <MX_GPIO_Init+0x24c>)
 80072e8:	0019      	movs	r1, r3
 80072ea:	0010      	movs	r0, r2
 80072ec:	f007 fef0 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80072f0:	0021      	movs	r1, r4
 80072f2:	187b      	adds	r3, r7, r1
 80072f4:	2280      	movs	r2, #128	@ 0x80
 80072f6:	0092      	lsls	r2, r2, #2
 80072f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072fa:	000c      	movs	r4, r1
 80072fc:	193b      	adds	r3, r7, r4
 80072fe:	2200      	movs	r2, #0
 8007300:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007302:	193b      	adds	r3, r7, r4
 8007304:	2200      	movs	r2, #0
 8007306:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007308:	193b      	adds	r3, r7, r4
 800730a:	4a28      	ldr	r2, [pc, #160]	@ (80073ac <MX_GPIO_Init+0x250>)
 800730c:	0019      	movs	r1, r3
 800730e:	0010      	movs	r0, r2
 8007310:	f007 fede 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007314:	193b      	adds	r3, r7, r4
 8007316:	2280      	movs	r2, #128	@ 0x80
 8007318:	0212      	lsls	r2, r2, #8
 800731a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800731c:	193b      	adds	r3, r7, r4
 800731e:	2288      	movs	r2, #136	@ 0x88
 8007320:	0352      	lsls	r2, r2, #13
 8007322:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007324:	193b      	adds	r3, r7, r4
 8007326:	2200      	movs	r2, #0
 8007328:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800732a:	193a      	adds	r2, r7, r4
 800732c:	23a0      	movs	r3, #160	@ 0xa0
 800732e:	05db      	lsls	r3, r3, #23
 8007330:	0011      	movs	r1, r2
 8007332:	0018      	movs	r0, r3
 8007334:	f007 fecc 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007338:	0021      	movs	r1, r4
 800733a:	187b      	adds	r3, r7, r1
 800733c:	22c0      	movs	r2, #192	@ 0xc0
 800733e:	0152      	lsls	r2, r2, #5
 8007340:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007342:	000c      	movs	r4, r1
 8007344:	193b      	adds	r3, r7, r4
 8007346:	2201      	movs	r2, #1
 8007348:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734a:	193b      	adds	r3, r7, r4
 800734c:	2200      	movs	r2, #0
 800734e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007350:	193b      	adds	r3, r7, r4
 8007352:	2200      	movs	r2, #0
 8007354:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007356:	193b      	adds	r3, r7, r4
 8007358:	4a14      	ldr	r2, [pc, #80]	@ (80073ac <MX_GPIO_Init+0x250>)
 800735a:	0019      	movs	r1, r3
 800735c:	0010      	movs	r0, r2
 800735e:	f007 feb7 	bl	800f0d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007362:	0021      	movs	r1, r4
 8007364:	187b      	adds	r3, r7, r1
 8007366:	2204      	movs	r2, #4
 8007368:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800736a:	187b      	adds	r3, r7, r1
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007370:	187b      	adds	r3, r7, r1
 8007372:	2201      	movs	r2, #1
 8007374:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007376:	187b      	adds	r3, r7, r1
 8007378:	4a0f      	ldr	r2, [pc, #60]	@ (80073b8 <MX_GPIO_Init+0x25c>)
 800737a:	0019      	movs	r1, r3
 800737c:	0010      	movs	r0, r2
 800737e:	f007 fea7 	bl	800f0d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	2007      	movs	r0, #7
 8007388:	f007 fa54 	bl	800e834 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800738c:	2007      	movs	r0, #7
 800738e:	f007 fa66 	bl	800e85e <HAL_NVIC_EnableIRQ>

}
 8007392:	46c0      	nop			@ (mov r8, r8)
 8007394:	46bd      	mov	sp, r7
 8007396:	b00b      	add	sp, #44	@ 0x2c
 8007398:	bd90      	pop	{r4, r7, pc}
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	40021000 	.word	0x40021000
 80073a0:	50001c00 	.word	0x50001c00
 80073a4:	00000301 	.word	0x00000301
 80073a8:	50000400 	.word	0x50000400
 80073ac:	50000800 	.word	0x50000800
 80073b0:	0000200c 	.word	0x0000200c
 80073b4:	0000403e 	.word	0x0000403e
 80073b8:	50000c00 	.word	0x50000c00

080073bc <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2100      	movs	r1, #0
 80073ca:	0018      	movs	r0, r3
 80073cc:	f00e fbb8 	bl	8015b40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2108      	movs	r1, #8
 80073d4:	0018      	movs	r0, r3
 80073d6:	f00e fbb3 	bl	8015b40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	210c      	movs	r1, #12
 80073de:	0018      	movs	r0, r3
 80073e0:	f00e fbae 	bl	8015b40 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80073e4:	2380      	movs	r3, #128	@ 0x80
 80073e6:	05db      	lsls	r3, r3, #23
 80073e8:	22fa      	movs	r2, #250	@ 0xfa
 80073ea:	0112      	lsls	r2, r2, #4
 80073ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80073ee:	2380      	movs	r3, #128	@ 0x80
 80073f0:	05db      	lsls	r3, r3, #23
 80073f2:	22fa      	movs	r2, #250	@ 0xfa
 80073f4:	0112      	lsls	r2, r2, #4
 80073f6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80073f8:	2380      	movs	r3, #128	@ 0x80
 80073fa:	05db      	lsls	r3, r3, #23
 80073fc:	22fa      	movs	r2, #250	@ 0xfa
 80073fe:	0112      	lsls	r2, r2, #4
 8007400:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007402:	2380      	movs	r3, #128	@ 0x80
 8007404:	05db      	lsls	r3, r3, #23
 8007406:	22fa      	movs	r2, #250	@ 0xfa
 8007408:	0112      	lsls	r2, r2, #4
 800740a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2100      	movs	r1, #0
 8007410:	0018      	movs	r0, r3
 8007412:	f00e fb95 	bl	8015b40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2104      	movs	r1, #4
 800741a:	0018      	movs	r0, r3
 800741c:	f00e fb90 	bl	8015b40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2108      	movs	r1, #8
 8007424:	0018      	movs	r0, r3
 8007426:	f00e fb8b 	bl	8015b40 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800742a:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <GPIO_InitPWMLEDs+0x98>)
 800742c:	22fa      	movs	r2, #250	@ 0xfa
 800742e:	0112      	lsls	r2, r2, #4
 8007430:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007432:	4b08      	ldr	r3, [pc, #32]	@ (8007454 <GPIO_InitPWMLEDs+0x98>)
 8007434:	22fa      	movs	r2, #250	@ 0xfa
 8007436:	0112      	lsls	r2, r2, #4
 8007438:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800743a:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <GPIO_InitPWMLEDs+0x98>)
 800743c:	22fa      	movs	r2, #250	@ 0xfa
 800743e:	0112      	lsls	r2, r2, #4
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007442:	4b04      	ldr	r3, [pc, #16]	@ (8007454 <GPIO_InitPWMLEDs+0x98>)
 8007444:	22fa      	movs	r2, #250	@ 0xfa
 8007446:	0112      	lsls	r2, r2, #4
 8007448:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800744a:	46c0      	nop			@ (mov r8, r8)
 800744c:	46bd      	mov	sp, r7
 800744e:	b002      	add	sp, #8
 8007450:	bd80      	pop	{r7, pc}
 8007452:	46c0      	nop			@ (mov r8, r8)
 8007454:	40000400 	.word	0x40000400

08007458 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	0011      	movs	r1, r2
 8007468:	0018      	movs	r0, r3
 800746a:	f006 fb15 	bl	800da98 <HIDS_Init>
}
 800746e:	46c0      	nop			@ (mov r8, r8)
 8007470:	46bd      	mov	sp, r7
 8007472:	b002      	add	sp, #8
 8007474:	bd80      	pop	{r7, pc}

08007476 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8007476:	b580      	push	{r7, lr}
 8007478:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800747a:	f006 fb2f 	bl	800dadc <HIDS_StartMeasurement>
}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0011      	movs	r1, r2
 8007494:	0018      	movs	r0, r3
 8007496:	f006 fc07 	bl	800dca8 <HIDS_GetMeasurementValues>
 800749a:	0003      	movs	r3, r0
}
 800749c:	0018      	movs	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	b002      	add	sp, #8
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 80074a8:	f006 fba2 	bl	800dbf0 <HIDS_DeviceConnected>
 80074ac:	0003      	movs	r3, r0
}
 80074ae:	0018      	movs	r0, r3
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80074b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074ba:	4a1c      	ldr	r2, [pc, #112]	@ (800752c <MX_I2C1_Init+0x78>)
 80074bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80074be:	4b1a      	ldr	r3, [pc, #104]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007530 <MX_I2C1_Init+0x7c>)
 80074c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80074c4:	4b18      	ldr	r3, [pc, #96]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074ca:	4b17      	ldr	r3, [pc, #92]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074cc:	2201      	movs	r2, #1
 80074ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80074d0:	4b15      	ldr	r3, [pc, #84]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80074d6:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074d8:	2200      	movs	r2, #0
 80074da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80074dc:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074de:	2200      	movs	r2, #0
 80074e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80074e2:	4b11      	ldr	r3, [pc, #68]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80074e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80074ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007528 <MX_I2C1_Init+0x74>)
 80074f0:	0018      	movs	r0, r3
 80074f2:	f007 ffc1 	bl	800f478 <HAL_I2C_Init>
 80074f6:	1e03      	subs	r3, r0, #0
 80074f8:	d001      	beq.n	80074fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80074fa:	f000 fced 	bl	8007ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80074fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <MX_I2C1_Init+0x74>)
 8007500:	2100      	movs	r1, #0
 8007502:	0018      	movs	r0, r3
 8007504:	f00a fb92 	bl	8011c2c <HAL_I2CEx_ConfigAnalogFilter>
 8007508:	1e03      	subs	r3, r0, #0
 800750a:	d001      	beq.n	8007510 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800750c:	f000 fce4 	bl	8007ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <MX_I2C1_Init+0x74>)
 8007512:	2100      	movs	r1, #0
 8007514:	0018      	movs	r0, r3
 8007516:	f00a fbd5 	bl	8011cc4 <HAL_I2CEx_ConfigDigitalFilter>
 800751a:	1e03      	subs	r3, r0, #0
 800751c:	d001      	beq.n	8007522 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800751e:	f000 fcdb 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007522:	46c0      	nop			@ (mov r8, r8)
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000d5c 	.word	0x20000d5c
 800752c:	40005400 	.word	0x40005400
 8007530:	00503d58 	.word	0x00503d58

08007534 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007538:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <MX_I2C2_Init+0x74>)
 800753a:	4a1c      	ldr	r2, [pc, #112]	@ (80075ac <MX_I2C2_Init+0x78>)
 800753c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800753e:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007540:	4a1b      	ldr	r2, [pc, #108]	@ (80075b0 <MX_I2C2_Init+0x7c>)
 8007542:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007544:	4b18      	ldr	r3, [pc, #96]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007546:	2200      	movs	r2, #0
 8007548:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800754a:	4b17      	ldr	r3, [pc, #92]	@ (80075a8 <MX_I2C2_Init+0x74>)
 800754c:	2201      	movs	r2, #1
 800754e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007550:	4b15      	ldr	r3, [pc, #84]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007552:	2200      	movs	r2, #0
 8007554:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007556:	4b14      	ldr	r3, [pc, #80]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007558:	2200      	movs	r2, #0
 800755a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800755c:	4b12      	ldr	r3, [pc, #72]	@ (80075a8 <MX_I2C2_Init+0x74>)
 800755e:	2200      	movs	r2, #0
 8007560:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007562:	4b11      	ldr	r3, [pc, #68]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007564:	2200      	movs	r2, #0
 8007566:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007568:	4b0f      	ldr	r3, [pc, #60]	@ (80075a8 <MX_I2C2_Init+0x74>)
 800756a:	2200      	movs	r2, #0
 800756c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800756e:	4b0e      	ldr	r3, [pc, #56]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007570:	0018      	movs	r0, r3
 8007572:	f007 ff81 	bl	800f478 <HAL_I2C_Init>
 8007576:	1e03      	subs	r3, r0, #0
 8007578:	d001      	beq.n	800757e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800757a:	f000 fcad 	bl	8007ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800757e:	4b0a      	ldr	r3, [pc, #40]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007580:	2100      	movs	r1, #0
 8007582:	0018      	movs	r0, r3
 8007584:	f00a fb52 	bl	8011c2c <HAL_I2CEx_ConfigAnalogFilter>
 8007588:	1e03      	subs	r3, r0, #0
 800758a:	d001      	beq.n	8007590 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800758c:	f000 fca4 	bl	8007ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007590:	4b05      	ldr	r3, [pc, #20]	@ (80075a8 <MX_I2C2_Init+0x74>)
 8007592:	2100      	movs	r1, #0
 8007594:	0018      	movs	r0, r3
 8007596:	f00a fb95 	bl	8011cc4 <HAL_I2CEx_ConfigDigitalFilter>
 800759a:	1e03      	subs	r3, r0, #0
 800759c:	d001      	beq.n	80075a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800759e:	f000 fc9b 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000db0 	.word	0x20000db0
 80075ac:	40005800 	.word	0x40005800
 80075b0:	00503d58 	.word	0x00503d58

080075b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b08b      	sub	sp, #44	@ 0x2c
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075bc:	2414      	movs	r4, #20
 80075be:	193b      	adds	r3, r7, r4
 80075c0:	0018      	movs	r0, r3
 80075c2:	2314      	movs	r3, #20
 80075c4:	001a      	movs	r2, r3
 80075c6:	2100      	movs	r1, #0
 80075c8:	f017 fea6 	bl	801f318 <memset>
  if(i2cHandle->Instance==I2C1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a5d      	ldr	r2, [pc, #372]	@ (8007748 <HAL_I2C_MspInit+0x194>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d000      	beq.n	80075d8 <HAL_I2C_MspInit+0x24>
 80075d6:	e083      	b.n	80076e0 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d8:	4b5c      	ldr	r3, [pc, #368]	@ (800774c <HAL_I2C_MspInit+0x198>)
 80075da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075dc:	4b5b      	ldr	r3, [pc, #364]	@ (800774c <HAL_I2C_MspInit+0x198>)
 80075de:	2102      	movs	r1, #2
 80075e0:	430a      	orrs	r2, r1
 80075e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80075e4:	4b59      	ldr	r3, [pc, #356]	@ (800774c <HAL_I2C_MspInit+0x198>)
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	2202      	movs	r2, #2
 80075ea:	4013      	ands	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80075f0:	0021      	movs	r1, r4
 80075f2:	187b      	adds	r3, r7, r1
 80075f4:	22c0      	movs	r2, #192	@ 0xc0
 80075f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075f8:	187b      	adds	r3, r7, r1
 80075fa:	2212      	movs	r2, #18
 80075fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fe:	187b      	adds	r3, r7, r1
 8007600:	2200      	movs	r2, #0
 8007602:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007604:	187b      	adds	r3, r7, r1
 8007606:	2203      	movs	r2, #3
 8007608:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800760a:	187b      	adds	r3, r7, r1
 800760c:	2201      	movs	r2, #1
 800760e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007610:	187b      	adds	r3, r7, r1
 8007612:	4a4f      	ldr	r2, [pc, #316]	@ (8007750 <HAL_I2C_MspInit+0x19c>)
 8007614:	0019      	movs	r1, r3
 8007616:	0010      	movs	r0, r2
 8007618:	f007 fd5a 	bl	800f0d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800761c:	4b4b      	ldr	r3, [pc, #300]	@ (800774c <HAL_I2C_MspInit+0x198>)
 800761e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007620:	4b4a      	ldr	r3, [pc, #296]	@ (800774c <HAL_I2C_MspInit+0x198>)
 8007622:	2180      	movs	r1, #128	@ 0x80
 8007624:	0389      	lsls	r1, r1, #14
 8007626:	430a      	orrs	r2, r1
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800762a:	4b4a      	ldr	r3, [pc, #296]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 800762c:	4a4a      	ldr	r2, [pc, #296]	@ (8007758 <HAL_I2C_MspInit+0x1a4>)
 800762e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007630:	4b48      	ldr	r3, [pc, #288]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007632:	2206      	movs	r2, #6
 8007634:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007636:	4b47      	ldr	r3, [pc, #284]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007638:	2200      	movs	r2, #0
 800763a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800763c:	4b45      	ldr	r3, [pc, #276]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 800763e:	2200      	movs	r2, #0
 8007640:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007642:	4b44      	ldr	r3, [pc, #272]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007644:	2280      	movs	r2, #128	@ 0x80
 8007646:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007648:	4b42      	ldr	r3, [pc, #264]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 800764a:	2200      	movs	r2, #0
 800764c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800764e:	4b41      	ldr	r3, [pc, #260]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007650:	2200      	movs	r2, #0
 8007652:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007654:	4b3f      	ldr	r3, [pc, #252]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007656:	2200      	movs	r2, #0
 8007658:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800765a:	4b3e      	ldr	r3, [pc, #248]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 800765c:	2200      	movs	r2, #0
 800765e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007660:	4b3c      	ldr	r3, [pc, #240]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007662:	0018      	movs	r0, r3
 8007664:	f007 f918 	bl	800e898 <HAL_DMA_Init>
 8007668:	1e03      	subs	r3, r0, #0
 800766a:	d001      	beq.n	8007670 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800766c:	f000 fc34 	bl	8007ed8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a38      	ldr	r2, [pc, #224]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007674:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007676:	4b37      	ldr	r3, [pc, #220]	@ (8007754 <HAL_I2C_MspInit+0x1a0>)
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800767c:	4b37      	ldr	r3, [pc, #220]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 800767e:	4a38      	ldr	r2, [pc, #224]	@ (8007760 <HAL_I2C_MspInit+0x1ac>)
 8007680:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007682:	4b36      	ldr	r3, [pc, #216]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 8007684:	2206      	movs	r2, #6
 8007686:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007688:	4b34      	ldr	r3, [pc, #208]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 800768a:	2210      	movs	r2, #16
 800768c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800768e:	4b33      	ldr	r3, [pc, #204]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 8007690:	2200      	movs	r2, #0
 8007692:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007694:	4b31      	ldr	r3, [pc, #196]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 8007696:	2280      	movs	r2, #128	@ 0x80
 8007698:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800769a:	4b30      	ldr	r3, [pc, #192]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 800769c:	2200      	movs	r2, #0
 800769e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076a0:	4b2e      	ldr	r3, [pc, #184]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80076a6:	4b2d      	ldr	r3, [pc, #180]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076ac:	4b2b      	ldr	r3, [pc, #172]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80076b2:	4b2a      	ldr	r3, [pc, #168]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 80076b4:	0018      	movs	r0, r3
 80076b6:	f007 f8ef 	bl	800e898 <HAL_DMA_Init>
 80076ba:	1e03      	subs	r3, r0, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80076be:	f000 fc0b 	bl	8007ed8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a25      	ldr	r2, [pc, #148]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 80076c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80076c8:	4b24      	ldr	r3, [pc, #144]	@ (800775c <HAL_I2C_MspInit+0x1a8>)
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	2017      	movs	r0, #23
 80076d4:	f007 f8ae 	bl	800e834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80076d8:	2017      	movs	r0, #23
 80076da:	f007 f8c0 	bl	800e85e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80076de:	e02e      	b.n	800773e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007764 <HAL_I2C_MspInit+0x1b0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d129      	bne.n	800773e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076ea:	4b18      	ldr	r3, [pc, #96]	@ (800774c <HAL_I2C_MspInit+0x198>)
 80076ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ee:	4b17      	ldr	r3, [pc, #92]	@ (800774c <HAL_I2C_MspInit+0x198>)
 80076f0:	2102      	movs	r1, #2
 80076f2:	430a      	orrs	r2, r1
 80076f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076f6:	4b15      	ldr	r3, [pc, #84]	@ (800774c <HAL_I2C_MspInit+0x198>)
 80076f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fa:	2202      	movs	r2, #2
 80076fc:	4013      	ands	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007702:	2114      	movs	r1, #20
 8007704:	187b      	adds	r3, r7, r1
 8007706:	22c0      	movs	r2, #192	@ 0xc0
 8007708:	0112      	lsls	r2, r2, #4
 800770a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800770c:	187b      	adds	r3, r7, r1
 800770e:	2212      	movs	r2, #18
 8007710:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007712:	187b      	adds	r3, r7, r1
 8007714:	2200      	movs	r2, #0
 8007716:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007718:	187b      	adds	r3, r7, r1
 800771a:	2203      	movs	r2, #3
 800771c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800771e:	187b      	adds	r3, r7, r1
 8007720:	2206      	movs	r2, #6
 8007722:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007724:	187b      	adds	r3, r7, r1
 8007726:	4a0a      	ldr	r2, [pc, #40]	@ (8007750 <HAL_I2C_MspInit+0x19c>)
 8007728:	0019      	movs	r1, r3
 800772a:	0010      	movs	r0, r2
 800772c:	f007 fcd0 	bl	800f0d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007730:	4b06      	ldr	r3, [pc, #24]	@ (800774c <HAL_I2C_MspInit+0x198>)
 8007732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <HAL_I2C_MspInit+0x198>)
 8007736:	2180      	movs	r1, #128	@ 0x80
 8007738:	03c9      	lsls	r1, r1, #15
 800773a:	430a      	orrs	r2, r1
 800773c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800773e:	46c0      	nop			@ (mov r8, r8)
 8007740:	46bd      	mov	sp, r7
 8007742:	b00b      	add	sp, #44	@ 0x2c
 8007744:	bd90      	pop	{r4, r7, pc}
 8007746:	46c0      	nop			@ (mov r8, r8)
 8007748:	40005400 	.word	0x40005400
 800774c:	40021000 	.word	0x40021000
 8007750:	50000400 	.word	0x50000400
 8007754:	20000e04 	.word	0x20000e04
 8007758:	40020030 	.word	0x40020030
 800775c:	20000e4c 	.word	0x20000e4c
 8007760:	4002001c 	.word	0x4002001c
 8007764:	40005800 	.word	0x40005800

08007768 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800776c:	4b10      	ldr	r3, [pc, #64]	@ (80077b0 <MX_I2S2_Init+0x48>)
 800776e:	4a11      	ldr	r2, [pc, #68]	@ (80077b4 <MX_I2S2_Init+0x4c>)
 8007770:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007772:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <MX_I2S2_Init+0x48>)
 8007774:	22c0      	movs	r2, #192	@ 0xc0
 8007776:	0092      	lsls	r2, r2, #2
 8007778:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <MX_I2S2_Init+0x48>)
 800777c:	2200      	movs	r2, #0
 800777e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <MX_I2S2_Init+0x48>)
 8007782:	2203      	movs	r2, #3
 8007784:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007786:	4b0a      	ldr	r3, [pc, #40]	@ (80077b0 <MX_I2S2_Init+0x48>)
 8007788:	2200      	movs	r2, #0
 800778a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800778c:	4b08      	ldr	r3, [pc, #32]	@ (80077b0 <MX_I2S2_Init+0x48>)
 800778e:	22fa      	movs	r2, #250	@ 0xfa
 8007790:	0192      	lsls	r2, r2, #6
 8007792:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007794:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <MX_I2S2_Init+0x48>)
 8007796:	2200      	movs	r2, #0
 8007798:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800779a:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <MX_I2S2_Init+0x48>)
 800779c:	0018      	movs	r0, r3
 800779e:	f00a fadd 	bl	8011d5c <HAL_I2S_Init>
 80077a2:	1e03      	subs	r3, r0, #0
 80077a4:	d001      	beq.n	80077aa <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80077a6:	f000 fb97 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80077aa:	46c0      	nop			@ (mov r8, r8)
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000e94 	.word	0x20000e94
 80077b4:	40003800 	.word	0x40003800

080077b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80077b8:	b590      	push	{r4, r7, lr}
 80077ba:	b089      	sub	sp, #36	@ 0x24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077c0:	240c      	movs	r4, #12
 80077c2:	193b      	adds	r3, r7, r4
 80077c4:	0018      	movs	r0, r3
 80077c6:	2314      	movs	r3, #20
 80077c8:	001a      	movs	r2, r3
 80077ca:	2100      	movs	r1, #0
 80077cc:	f017 fda4 	bl	801f318 <memset>
  if(i2sHandle->Instance==SPI2)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a2d      	ldr	r2, [pc, #180]	@ (800788c <HAL_I2S_MspInit+0xd4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d154      	bne.n	8007884 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077da:	4b2d      	ldr	r3, [pc, #180]	@ (8007890 <HAL_I2S_MspInit+0xd8>)
 80077dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077de:	4b2c      	ldr	r3, [pc, #176]	@ (8007890 <HAL_I2S_MspInit+0xd8>)
 80077e0:	2180      	movs	r1, #128	@ 0x80
 80077e2:	01c9      	lsls	r1, r1, #7
 80077e4:	430a      	orrs	r2, r1
 80077e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e8:	4b29      	ldr	r3, [pc, #164]	@ (8007890 <HAL_I2S_MspInit+0xd8>)
 80077ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ec:	4b28      	ldr	r3, [pc, #160]	@ (8007890 <HAL_I2S_MspInit+0xd8>)
 80077ee:	2102      	movs	r1, #2
 80077f0:	430a      	orrs	r2, r1
 80077f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077f4:	4b26      	ldr	r3, [pc, #152]	@ (8007890 <HAL_I2S_MspInit+0xd8>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	2202      	movs	r2, #2
 80077fa:	4013      	ands	r3, r2
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007800:	193b      	adds	r3, r7, r4
 8007802:	22b0      	movs	r2, #176	@ 0xb0
 8007804:	0212      	lsls	r2, r2, #8
 8007806:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007808:	0021      	movs	r1, r4
 800780a:	187b      	adds	r3, r7, r1
 800780c:	2202      	movs	r2, #2
 800780e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007810:	187b      	adds	r3, r7, r1
 8007812:	2200      	movs	r2, #0
 8007814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007816:	187b      	adds	r3, r7, r1
 8007818:	2200      	movs	r2, #0
 800781a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800781c:	187b      	adds	r3, r7, r1
 800781e:	2200      	movs	r2, #0
 8007820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007822:	187b      	adds	r3, r7, r1
 8007824:	4a1b      	ldr	r2, [pc, #108]	@ (8007894 <HAL_I2S_MspInit+0xdc>)
 8007826:	0019      	movs	r1, r3
 8007828:	0010      	movs	r0, r2
 800782a:	f007 fc51 	bl	800f0d0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800782e:	4b1a      	ldr	r3, [pc, #104]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 8007830:	4a1a      	ldr	r2, [pc, #104]	@ (800789c <HAL_I2S_MspInit+0xe4>)
 8007832:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007834:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 8007836:	2202      	movs	r2, #2
 8007838:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800783a:	4b17      	ldr	r3, [pc, #92]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 800783c:	2200      	movs	r2, #0
 800783e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007840:	4b15      	ldr	r3, [pc, #84]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 8007842:	2200      	movs	r2, #0
 8007844:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007846:	4b14      	ldr	r3, [pc, #80]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 8007848:	2280      	movs	r2, #128	@ 0x80
 800784a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800784c:	4b12      	ldr	r3, [pc, #72]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 800784e:	2280      	movs	r2, #128	@ 0x80
 8007850:	0052      	lsls	r2, r2, #1
 8007852:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007854:	4b10      	ldr	r3, [pc, #64]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 8007856:	2280      	movs	r2, #128	@ 0x80
 8007858:	00d2      	lsls	r2, r2, #3
 800785a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800785c:	4b0e      	ldr	r3, [pc, #56]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 800785e:	2220      	movs	r2, #32
 8007860:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007862:	4b0d      	ldr	r3, [pc, #52]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 8007864:	2200      	movs	r2, #0
 8007866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007868:	4b0b      	ldr	r3, [pc, #44]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 800786a:	0018      	movs	r0, r3
 800786c:	f007 f814 	bl	800e898 <HAL_DMA_Init>
 8007870:	1e03      	subs	r3, r0, #0
 8007872:	d001      	beq.n	8007878 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007874:	f000 fb30 	bl	8007ed8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a07      	ldr	r2, [pc, #28]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 800787c:	631a      	str	r2, [r3, #48]	@ 0x30
 800787e:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <HAL_I2S_MspInit+0xe0>)
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007884:	46c0      	nop			@ (mov r8, r8)
 8007886:	46bd      	mov	sp, r7
 8007888:	b009      	add	sp, #36	@ 0x24
 800788a:	bd90      	pop	{r4, r7, pc}
 800788c:	40003800 	.word	0x40003800
 8007890:	40021000 	.word	0x40021000
 8007894:	50000400 	.word	0x50000400
 8007898:	20000ed0 	.word	0x20000ed0
 800789c:	40020044 	.word	0x40020044

080078a0 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
  testDone = true;
 80078a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007920 <SetTestDone+0x80>)
 80078a6:	2201      	movs	r2, #1
 80078a8:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 80078aa:	23fa      	movs	r3, #250	@ 0xfa
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	0018      	movs	r0, r3
 80078b0:	f006 fb38 	bl	800df24 <HAL_Delay>
  SetDBLED(false, false, true);
 80078b4:	2201      	movs	r2, #1
 80078b6:	2100      	movs	r1, #0
 80078b8:	2000      	movs	r0, #0
 80078ba:	f004 fffb 	bl	800c8b4 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80078be:	4a19      	ldr	r2, [pc, #100]	@ (8007924 <SetTestDone+0x84>)
 80078c0:	23fa      	movs	r3, #250	@ 0xfa
 80078c2:	0119      	lsls	r1, r3, #4
 80078c4:	23fa      	movs	r3, #250	@ 0xfa
 80078c6:	011b      	lsls	r3, r3, #4
 80078c8:	0018      	movs	r0, r3
 80078ca:	f004 ffbf 	bl	800c84c <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80078ce:	4a15      	ldr	r2, [pc, #84]	@ (8007924 <SetTestDone+0x84>)
 80078d0:	23fa      	movs	r3, #250	@ 0xfa
 80078d2:	0119      	lsls	r1, r3, #4
 80078d4:	23fa      	movs	r3, #250	@ 0xfa
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	0018      	movs	r0, r3
 80078da:	f005 f835 	bl	800c948 <SetVocLED>
  HAL_Delay(1000);
 80078de:	23fa      	movs	r3, #250	@ 0xfa
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	0018      	movs	r0, r3
 80078e4:	f006 fb1e 	bl	800df24 <HAL_Delay>
  SetDBLED(false, false, false);
 80078e8:	2200      	movs	r2, #0
 80078ea:	2100      	movs	r1, #0
 80078ec:	2000      	movs	r0, #0
 80078ee:	f004 ffe1 	bl	800c8b4 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 80078f2:	23fa      	movs	r3, #250	@ 0xfa
 80078f4:	011a      	lsls	r2, r3, #4
 80078f6:	23fa      	movs	r3, #250	@ 0xfa
 80078f8:	0119      	lsls	r1, r3, #4
 80078fa:	23fa      	movs	r3, #250	@ 0xfa
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	0018      	movs	r0, r3
 8007900:	f004 ffa4 	bl	800c84c <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007904:	23fa      	movs	r3, #250	@ 0xfa
 8007906:	011a      	lsls	r2, r3, #4
 8007908:	23fa      	movs	r3, #250	@ 0xfa
 800790a:	0119      	lsls	r1, r3, #4
 800790c:	23fa      	movs	r3, #250	@ 0xfa
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	0018      	movs	r0, r3
 8007912:	f005 f819 	bl	800c948 <SetVocLED>
  InitDone();
 8007916:	f004 ff43 	bl	800c7a0 <InitDone>
}
 800791a:	46c0      	nop			@ (mov r8, r8)
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20000f18 	.word	0x20000f18
 8007924:	00000bb8 	.word	0x00000bb8

08007928 <FlashLEDs>:

void FlashLEDs(){
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800792e:	1dfb      	adds	r3, r7, #7
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e021      	b.n	800797a <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007936:	2201      	movs	r2, #1
 8007938:	2101      	movs	r1, #1
 800793a:	2001      	movs	r0, #1
 800793c:	f004 ffba 	bl	800c8b4 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007940:	4a12      	ldr	r2, [pc, #72]	@ (800798c <FlashLEDs+0x64>)
 8007942:	23fa      	movs	r3, #250	@ 0xfa
 8007944:	0119      	lsls	r1, r3, #4
 8007946:	23fa      	movs	r3, #250	@ 0xfa
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	0018      	movs	r0, r3
 800794c:	f004 ff7e 	bl	800c84c <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007950:	4a0e      	ldr	r2, [pc, #56]	@ (800798c <FlashLEDs+0x64>)
 8007952:	23fa      	movs	r3, #250	@ 0xfa
 8007954:	0119      	lsls	r1, r3, #4
 8007956:	23fa      	movs	r3, #250	@ 0xfa
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	0018      	movs	r0, r3
 800795c:	f004 fff4 	bl	800c948 <SetVocLED>
    HAL_Delay(250);
 8007960:	20fa      	movs	r0, #250	@ 0xfa
 8007962:	f006 fadf 	bl	800df24 <HAL_Delay>
    SetLEDsOff();
 8007966:	f005 f8ad 	bl	800cac4 <SetLEDsOff>
    HAL_Delay(250);
 800796a:	20fa      	movs	r0, #250	@ 0xfa
 800796c:	f006 fada 	bl	800df24 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007970:	1dfb      	adds	r3, r7, #7
 8007972:	781a      	ldrb	r2, [r3, #0]
 8007974:	1dfb      	adds	r3, r7, #7
 8007976:	3201      	adds	r2, #1
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	1dfb      	adds	r3, r7, #7
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d9d9      	bls.n	8007936 <FlashLEDs+0xe>
  }
}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	46c0      	nop			@ (mov r8, r8)
 8007986:	46bd      	mov	sp, r7
 8007988:	b002      	add	sp, #8
 800798a:	bd80      	pop	{r7, pc}
 800798c:	00000bb8 	.word	0x00000bb8

08007990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007994:	f006 fa56 	bl	800de44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007998:	f000 f954 	bl	8007c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800799c:	f7ff fbde 	bl	800715c <MX_GPIO_Init>
  MX_DMA_Init();
 80079a0:	f7ff fa28 	bl	8006df4 <MX_DMA_Init>
  MX_I2C1_Init();
 80079a4:	f7ff fd86 	bl	80074b4 <MX_I2C1_Init>
  MX_I2S2_Init();
 80079a8:	f7ff fede 	bl	8007768 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80079ac:	f005 fd20 	bl	800d3f0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80079b0:	f7ff fdc0 	bl	8007534 <MX_I2C2_Init>
  MX_TIM2_Init();
 80079b4:	f005 fb14 	bl	800cfe0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80079b8:	f005 fb86 	bl	800d0c8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80079bc:	f005 fd4c 	bl	800d458 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80079c0:	f7ff f966 	bl	8006c90 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80079c4:	f014 f9b6 	bl	801bd34 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80079c8:	f001 f844 	bl	8008a54 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80079cc:	f005 fcda 	bl	800d384 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80079d0:	f005 fbf8 	bl	800d1c4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80079d4:	4a7c      	ldr	r2, [pc, #496]	@ (8007bc8 <main+0x238>)
 80079d6:	4b7d      	ldr	r3, [pc, #500]	@ (8007bcc <main+0x23c>)
 80079d8:	0011      	movs	r1, r2
 80079da:	0018      	movs	r0, r3
 80079dc:	f7ff fcee 	bl	80073bc <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80079e0:	f7fe fbec 	bl	80061bc <UserButton_Pressed>
 80079e4:	1e03      	subs	r3, r0, #0
 80079e6:	d004      	beq.n	80079f2 <main+0x62>
    EnableESPProg();
 80079e8:	f014 fa74 	bl	801bed4 <EnableESPProg>
    ESP_Programming = true;
 80079ec:	4b78      	ldr	r3, [pc, #480]	@ (8007bd0 <main+0x240>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 80079f2:	2003      	movs	r0, #3
 80079f4:	f005 ff58 	bl	800d8a8 <SetVerboseLevel>
  BinaryReleaseInfo();
 80079f8:	f005 ff6e 	bl	800d8d8 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80079fc:	4975      	ldr	r1, [pc, #468]	@ (8007bd4 <main+0x244>)
 80079fe:	4b76      	ldr	r3, [pc, #472]	@ (8007bd8 <main+0x248>)
 8007a00:	2201      	movs	r2, #1
 8007a02:	0018      	movs	r0, r3
 8007a04:	f00e fcfc 	bl	8016400 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007a08:	4b74      	ldr	r3, [pc, #464]	@ (8007bdc <main+0x24c>)
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7fe ff46 	bl	800689c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007a10:	4a73      	ldr	r2, [pc, #460]	@ (8007be0 <main+0x250>)
 8007a12:	4974      	ldr	r1, [pc, #464]	@ (8007be4 <main+0x254>)
 8007a14:	4874      	ldr	r0, [pc, #464]	@ (8007be8 <main+0x258>)
 8007a16:	230b      	movs	r3, #11
 8007a18:	f004 f838 	bl	800ba8c <soundInit>
 8007a1c:	0003      	movs	r3, r0
 8007a1e:	001a      	movs	r2, r3
 8007a20:	2301      	movs	r3, #1
 8007a22:	4053      	eors	r3, r2
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 8007a2a:	4a70      	ldr	r2, [pc, #448]	@ (8007bec <main+0x25c>)
 8007a2c:	4b70      	ldr	r3, [pc, #448]	@ (8007bf0 <main+0x260>)
 8007a2e:	21e5      	movs	r1, #229	@ 0xe5
 8007a30:	0018      	movs	r0, r3
 8007a32:	f005 ff85 	bl	800d940 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8007a36:	4b6f      	ldr	r3, [pc, #444]	@ (8007bf4 <main+0x264>)
 8007a38:	4a6f      	ldr	r2, [pc, #444]	@ (8007bf8 <main+0x268>)
 8007a3a:	496a      	ldr	r1, [pc, #424]	@ (8007be4 <main+0x254>)
 8007a3c:	486f      	ldr	r0, [pc, #444]	@ (8007bfc <main+0x26c>)
 8007a3e:	f7ff fb09 	bl	8007054 <Gadget_Init>
  Debug("Clock init done");
 8007a42:	4a6f      	ldr	r2, [pc, #444]	@ (8007c00 <main+0x270>)
 8007a44:	4b6f      	ldr	r3, [pc, #444]	@ (8007c04 <main+0x274>)
 8007a46:	0019      	movs	r1, r3
 8007a48:	2003      	movs	r0, #3
 8007a4a:	f005 fec3 	bl	800d7d4 <CreateLine>
  if (!probe_sen5x()) {
 8007a4e:	f001 f92d 	bl	8008cac <probe_sen5x>
 8007a52:	1e03      	subs	r3, r0, #0
 8007a54:	d10a      	bne.n	8007a6c <main+0xdc>
    sen5x_Present = true; // not present
 8007a56:	4b6c      	ldr	r3, [pc, #432]	@ (8007c08 <main+0x278>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	701a      	strb	r2, [r3, #0]
    sen5x_Power_Off();      // switch off buck converter
 8007a5c:	f001 f8fe 	bl	8008c5c <sen5x_Power_Off>
    Debug("sen5x sensor not detected, polling disabled.");
 8007a60:	4a6a      	ldr	r2, [pc, #424]	@ (8007c0c <main+0x27c>)
 8007a62:	4b68      	ldr	r3, [pc, #416]	@ (8007c04 <main+0x274>)
 8007a64:	0019      	movs	r1, r3
 8007a66:	2003      	movs	r0, #3
 8007a68:	f005 feb4 	bl	800d7d4 <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007a6c:	4b68      	ldr	r3, [pc, #416]	@ (8007c10 <main+0x280>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d019      	beq.n	8007aa8 <main+0x118>
 8007a74:	4b56      	ldr	r3, [pc, #344]	@ (8007bd0 <main+0x240>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4053      	eors	r3, r2
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d012      	beq.n	8007aa8 <main+0x118>
 8007a82:	4b64      	ldr	r3, [pc, #400]	@ (8007c14 <main+0x284>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2201      	movs	r2, #1
 8007a88:	4053      	eors	r3, r2
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00b      	beq.n	8007aa8 <main+0x118>
      MeasurementBusy = UpkeepGadget();
 8007a90:	f7ff fb0e 	bl	80070b0 <UpkeepGadget>
 8007a94:	0003      	movs	r3, r0
 8007a96:	001a      	movs	r2, r3
 8007a98:	4b5f      	ldr	r3, [pc, #380]	@ (8007c18 <main+0x288>)
 8007a9a:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007a9c:	f7fd fbc4 	bl	8005228 <ESP_Upkeep>
 8007aa0:	0003      	movs	r3, r0
 8007aa2:	001a      	movs	r2, r3
 8007aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8007c1c <main+0x28c>)
 8007aa6:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007aa8:	4b59      	ldr	r3, [pc, #356]	@ (8007c10 <main+0x280>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2201      	movs	r2, #1
 8007aae:	4053      	eors	r3, r2
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00f      	beq.n	8007ad6 <main+0x146>
 8007ab6:	4b46      	ldr	r3, [pc, #280]	@ (8007bd0 <main+0x240>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2201      	movs	r2, #1
 8007abc:	4053      	eors	r3, r2
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d008      	beq.n	8007ad6 <main+0x146>
 8007ac4:	4b53      	ldr	r3, [pc, #332]	@ (8007c14 <main+0x284>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	4053      	eors	r3, r2
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <main+0x146>
      Gadget_Test();
 8007ad2:	f7ff fae5 	bl	80070a0 <Gadget_Test>
    }
    Status_Upkeep();
 8007ad6:	f005 f907 	bl	800cce8 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8007ada:	4b51      	ldr	r3, [pc, #324]	@ (8007c20 <main+0x290>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f005 fe22 	bl	800d728 <TimestampIsReached>
 8007ae4:	1e03      	subs	r3, r0, #0
 8007ae6:	d00e      	beq.n	8007b06 <main+0x176>
      charge = Battery_Upkeep();
 8007ae8:	f005 f905 	bl	800ccf6 <Battery_Upkeep>
 8007aec:	0003      	movs	r3, r0
 8007aee:	001a      	movs	r2, r3
 8007af0:	4b4c      	ldr	r3, [pc, #304]	@ (8007c24 <main+0x294>)
 8007af2:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007af4:	f006 fa0c 	bl	800df10 <HAL_GetTick>
 8007af8:	0003      	movs	r3, r0
 8007afa:	4a4b      	ldr	r2, [pc, #300]	@ (8007c28 <main+0x298>)
 8007afc:	189a      	adds	r2, r3, r2
 8007afe:	4b48      	ldr	r3, [pc, #288]	@ (8007c20 <main+0x290>)
 8007b00:	601a      	str	r2, [r3, #0]
      showTime();
 8007b02:	f7fe fb6b 	bl	80061dc <showTime>
    }

    if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && sen5x_Present) {
 8007b06:	4b47      	ldr	r3, [pc, #284]	@ (8007c24 <main+0x294>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d803      	bhi.n	8007b16 <main+0x186>
 8007b0e:	4b45      	ldr	r3, [pc, #276]	@ (8007c24 <main+0x294>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d119      	bne.n	8007b4a <main+0x1ba>
 8007b16:	4b3c      	ldr	r3, [pc, #240]	@ (8007c08 <main+0x278>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d015      	beq.n	8007b4a <main+0x1ba>
      if  (charge > BATTERY_LOW) {
 8007b1e:	4b41      	ldr	r3, [pc, #260]	@ (8007c24 <main+0x294>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d903      	bls.n	8007b2e <main+0x19e>
        sen5x_statemachine(0);
 8007b26:	2000      	movs	r0, #0
 8007b28:	f001 fc7c 	bl	8009424 <sen5x_statemachine>
 8007b2c:	e00d      	b.n	8007b4a <main+0x1ba>
      }
      else {
        if (charge == USB_PLUGGED_IN) {
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <main+0x294>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d103      	bne.n	8007b3e <main+0x1ae>
          sen5x_statemachine(USB_PLUGGED_IN);
 8007b36:	2001      	movs	r0, #1
 8007b38:	f001 fc74 	bl	8009424 <sen5x_statemachine>
 8007b3c:	e005      	b.n	8007b4a <main+0x1ba>
        }
        else  {
          Info("Battery level insufficient for sen5x operation");
 8007b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8007c2c <main+0x29c>)
 8007b40:	4b3b      	ldr	r3, [pc, #236]	@ (8007c30 <main+0x2a0>)
 8007b42:	0019      	movs	r1, r3
 8007b44:	2002      	movs	r0, #2
 8007b46:	f005 fe45 	bl	800d7d4 <CreateLine>
        }
      }
    }

    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007b4a:	4b36      	ldr	r3, [pc, #216]	@ (8007c24 <main+0x294>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d003      	beq.n	8007b5a <main+0x1ca>
 8007b52:	4b34      	ldr	r3, [pc, #208]	@ (8007c24 <main+0x294>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <main+0x1ce>
      FlashLEDs();
 8007b5a:	f7ff fee5 	bl	8007928 <FlashLEDs>
    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8007b5e:	4b31      	ldr	r3, [pc, #196]	@ (8007c24 <main+0x294>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <main+0x1ea>
 8007b66:	4b2d      	ldr	r3, [pc, #180]	@ (8007c1c <main+0x28c>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b09      	cmp	r3, #9
 8007b6c:	d105      	bne.n	8007b7a <main+0x1ea>
      batteryEmpty = true;
 8007b6e:	4b29      	ldr	r3, [pc, #164]	@ (8007c14 <main+0x284>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	701a      	strb	r2, [r3, #0]
      Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007b74:	f7fe fde8 	bl	8006748 <Enter_Standby_Mode>
 8007b78:	e002      	b.n	8007b80 <main+0x1f0>
    }
    else{
      batteryEmpty = false;
 8007b7a:	4b26      	ldr	r3, [pc, #152]	@ (8007c14 <main+0x284>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
    }
    if (!usbPluggedIn && !userToggle && ESPTransmitDone && !EspTurnedOn) {
 8007b80:	4b2c      	ldr	r3, [pc, #176]	@ (8007c34 <main+0x2a4>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2201      	movs	r2, #1
 8007b86:	4053      	eors	r3, r2
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d100      	bne.n	8007b90 <main+0x200>
 8007b8e:	e76d      	b.n	8007a6c <main+0xdc>
 8007b90:	4b29      	ldr	r3, [pc, #164]	@ (8007c38 <main+0x2a8>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2201      	movs	r2, #1
 8007b96:	4053      	eors	r3, r2
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d100      	bne.n	8007ba0 <main+0x210>
 8007b9e:	e765      	b.n	8007a6c <main+0xdc>
 8007ba0:	4b26      	ldr	r3, [pc, #152]	@ (8007c3c <main+0x2ac>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d100      	bne.n	8007baa <main+0x21a>
 8007ba8:	e760      	b.n	8007a6c <main+0xdc>
 8007baa:	4b25      	ldr	r3, [pc, #148]	@ (8007c40 <main+0x2b0>)
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4053      	eors	r3, r2
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d100      	bne.n	8007bba <main+0x22a>
 8007bb8:	e758      	b.n	8007a6c <main+0xdc>
      // ok to operate on battery
      Enter_Stop_Mode(880);
 8007bba:	23dc      	movs	r3, #220	@ 0xdc
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f7fe fde4 	bl	800678c <Enter_Stop_Mode>
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007bc4:	e752      	b.n	8007a6c <main+0xdc>
 8007bc6:	46c0      	nop			@ (mov r8, r8)
 8007bc8:	200021c4 	.word	0x200021c4
 8007bcc:	20002184 	.word	0x20002184
 8007bd0:	20000f19 	.word	0x20000f19
 8007bd4:	20000f28 	.word	0x20000f28
 8007bd8:	200022fc 	.word	0x200022fc
 8007bdc:	200011d8 	.word	0x200011d8
 8007be0:	20002204 	.word	0x20002204
 8007be4:	20000e94 	.word	0x20000e94
 8007be8:	20000ed0 	.word	0x20000ed0
 8007bec:	08022e04 	.word	0x08022e04
 8007bf0:	08023f48 	.word	0x08023f48
 8007bf4:	20000cfc 	.word	0x20000cfc
 8007bf8:	200023b4 	.word	0x200023b4
 8007bfc:	20000d5c 	.word	0x20000d5c
 8007c00:	08022e18 	.word	0x08022e18
 8007c04:	08022e28 	.word	0x08022e28
 8007c08:	20000f1c 	.word	0x20000f1c
 8007c0c:	08022e2c 	.word	0x08022e2c
 8007c10:	20000f18 	.word	0x20000f18
 8007c14:	20000f1a 	.word	0x20000f1a
 8007c18:	20000f1b 	.word	0x20000f1b
 8007c1c:	20000f25 	.word	0x20000f25
 8007c20:	20000f20 	.word	0x20000f20
 8007c24:	20000f24 	.word	0x20000f24
 8007c28:	0000c350 	.word	0x0000c350
 8007c2c:	08022e5c 	.word	0x08022e5c
 8007c30:	08022e8c 	.word	0x08022e8c
 8007c34:	20002179 	.word	0x20002179
 8007c38:	2000217a 	.word	0x2000217a
 8007c3c:	2000054f 	.word	0x2000054f
 8007c40:	20000548 	.word	0x20000548

08007c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b09d      	sub	sp, #116	@ 0x74
 8007c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c4a:	2438      	movs	r4, #56	@ 0x38
 8007c4c:	193b      	adds	r3, r7, r4
 8007c4e:	0018      	movs	r0, r3
 8007c50:	2338      	movs	r3, #56	@ 0x38
 8007c52:	001a      	movs	r2, r3
 8007c54:	2100      	movs	r1, #0
 8007c56:	f017 fb5f 	bl	801f318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c5a:	2324      	movs	r3, #36	@ 0x24
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	0018      	movs	r0, r3
 8007c60:	2314      	movs	r3, #20
 8007c62:	001a      	movs	r2, r3
 8007c64:	2100      	movs	r1, #0
 8007c66:	f017 fb57 	bl	801f318 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007c6a:	003b      	movs	r3, r7
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	2324      	movs	r3, #36	@ 0x24
 8007c70:	001a      	movs	r2, r3
 8007c72:	2100      	movs	r1, #0
 8007c74:	f017 fb50 	bl	801f318 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c78:	4b34      	ldr	r3, [pc, #208]	@ (8007d4c <SystemClock_Config+0x108>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a34      	ldr	r2, [pc, #208]	@ (8007d50 <SystemClock_Config+0x10c>)
 8007c7e:	401a      	ands	r2, r3
 8007c80:	4b32      	ldr	r3, [pc, #200]	@ (8007d4c <SystemClock_Config+0x108>)
 8007c82:	2180      	movs	r1, #128	@ 0x80
 8007c84:	0109      	lsls	r1, r1, #4
 8007c86:	430a      	orrs	r2, r1
 8007c88:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007c8a:	f00c f9cb 	bl	8014024 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8007c8e:	4b31      	ldr	r3, [pc, #196]	@ (8007d54 <SystemClock_Config+0x110>)
 8007c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c92:	4a2f      	ldr	r2, [pc, #188]	@ (8007d50 <SystemClock_Config+0x10c>)
 8007c94:	401a      	ands	r2, r3
 8007c96:	4b2f      	ldr	r3, [pc, #188]	@ (8007d54 <SystemClock_Config+0x110>)
 8007c98:	2180      	movs	r1, #128	@ 0x80
 8007c9a:	0149      	lsls	r1, r1, #5
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007ca0:	193b      	adds	r3, r7, r4
 8007ca2:	2226      	movs	r2, #38	@ 0x26
 8007ca4:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007ca6:	193b      	adds	r3, r7, r4
 8007ca8:	2280      	movs	r2, #128	@ 0x80
 8007caa:	0052      	lsls	r2, r2, #1
 8007cac:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007cae:	0021      	movs	r1, r4
 8007cb0:	187b      	adds	r3, r7, r1
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007cb6:	187b      	adds	r3, r7, r1
 8007cb8:	2210      	movs	r2, #16
 8007cba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007cbc:	187b      	adds	r3, r7, r1
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007cc8:	187b      	adds	r3, r7, r1
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f00c fa2a 	bl	8014124 <HAL_RCC_OscConfig>
 8007cd0:	1e03      	subs	r3, r0, #0
 8007cd2:	d001      	beq.n	8007cd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007cd4:	f000 f900 	bl	8007ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007cd8:	2124      	movs	r1, #36	@ 0x24
 8007cda:	187b      	adds	r3, r7, r1
 8007cdc:	220f      	movs	r2, #15
 8007cde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007ce0:	187b      	adds	r3, r7, r1
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ce6:	187b      	adds	r3, r7, r1
 8007ce8:	2200      	movs	r2, #0
 8007cea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007cec:	187b      	adds	r3, r7, r1
 8007cee:	2200      	movs	r2, #0
 8007cf0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007cf2:	187b      	adds	r3, r7, r1
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007cf8:	187b      	adds	r3, r7, r1
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f00c fde5 	bl	80148cc <HAL_RCC_ClockConfig>
 8007d02:	1e03      	subs	r3, r0, #0
 8007d04:	d001      	beq.n	8007d0a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007d06:	f000 f8e7 	bl	8007ed8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007d0a:	003b      	movs	r3, r7
 8007d0c:	226d      	movs	r2, #109	@ 0x6d
 8007d0e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007d10:	003b      	movs	r3, r7
 8007d12:	2200      	movs	r2, #0
 8007d14:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007d16:	003b      	movs	r3, r7
 8007d18:	2200      	movs	r2, #0
 8007d1a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007d1c:	003b      	movs	r3, r7
 8007d1e:	2200      	movs	r2, #0
 8007d20:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007d22:	003b      	movs	r3, r7
 8007d24:	2280      	movs	r2, #128	@ 0x80
 8007d26:	0252      	lsls	r2, r2, #9
 8007d28:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007d2a:	003b      	movs	r3, r7
 8007d2c:	2280      	movs	r2, #128	@ 0x80
 8007d2e:	04d2      	lsls	r2, r2, #19
 8007d30:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007d32:	003b      	movs	r3, r7
 8007d34:	0018      	movs	r0, r3
 8007d36:	f00c ffed 	bl	8014d14 <HAL_RCCEx_PeriphCLKConfig>
 8007d3a:	1e03      	subs	r3, r0, #0
 8007d3c:	d001      	beq.n	8007d42 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8007d3e:	f000 f8cb 	bl	8007ed8 <Error_Handler>
  }
}
 8007d42:	46c0      	nop			@ (mov r8, r8)
 8007d44:	46bd      	mov	sp, r7
 8007d46:	b01d      	add	sp, #116	@ 0x74
 8007d48:	bd90      	pop	{r4, r7, pc}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	40007000 	.word	0x40007000
 8007d50:	ffffe7ff 	.word	0xffffe7ff
 8007d54:	40021000 	.word	0x40021000

08007d58 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007d58:	b590      	push	{r4, r7, lr}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	000a      	movs	r2, r1
 8007d62:	1cbb      	adds	r3, r7, #2
 8007d64:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8007d66:	4c06      	ldr	r4, [pc, #24]	@ (8007d80 <printString+0x28>)
 8007d68:	1cbb      	adds	r3, r7, #2
 8007d6a:	881a      	ldrh	r2, [r3, #0]
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4805      	ldr	r0, [pc, #20]	@ (8007d84 <printString+0x2c>)
 8007d70:	0023      	movs	r3, r4
 8007d72:	f00e faa5 	bl	80162c0 <HAL_UART_Transmit>
}
 8007d76:	46c0      	nop			@ (mov r8, r8)
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b003      	add	sp, #12
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	0000ffff 	.word	0x0000ffff
 8007d84:	200022fc 	.word	0x200022fc

08007d88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007d90:	4936      	ldr	r1, [pc, #216]	@ (8007e6c <HAL_UART_RxCpltCallback+0xe4>)
 8007d92:	4b37      	ldr	r3, [pc, #220]	@ (8007e70 <HAL_UART_RxCpltCallback+0xe8>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	0018      	movs	r0, r3
 8007d98:	f00e fb32 	bl	8016400 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007d9c:	4b33      	ldr	r3, [pc, #204]	@ (8007e6c <HAL_UART_RxCpltCallback+0xe4>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	3b61      	subs	r3, #97	@ 0x61
 8007da2:	2b13      	cmp	r3, #19
 8007da4:	d830      	bhi.n	8007e08 <HAL_UART_RxCpltCallback+0x80>
 8007da6:	009a      	lsls	r2, r3, #2
 8007da8:	4b32      	ldr	r3, [pc, #200]	@ (8007e74 <HAL_UART_RxCpltCallback+0xec>)
 8007daa:	18d3      	adds	r3, r2, r3
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8007db0:	4b31      	ldr	r3, [pc, #196]	@ (8007e78 <HAL_UART_RxCpltCallback+0xf0>)
 8007db2:	0018      	movs	r0, r3
 8007db4:	f017 f962 	bl	801f07c <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8007db8:	2003      	movs	r0, #3
 8007dba:	f005 fd75 	bl	800d8a8 <SetVerboseLevel>
      break;
 8007dbe:	e04a      	b.n	8007e56 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8007dc0:	f7fb fcec 	bl	800379c <forceNTPupdate>
    break;
 8007dc4:	e047      	b.n	8007e56 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8007dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8007e7c <HAL_UART_RxCpltCallback+0xf4>)
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f017 f957 	bl	801f07c <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8007dce:	2002      	movs	r0, #2
 8007dd0:	f005 fd6a 	bl	800d8a8 <SetVerboseLevel>
      break;
 8007dd4:	e03f      	b.n	8007e56 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8007e80 <HAL_UART_RxCpltCallback+0xf8>)
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f017 f94f 	bl	801f07c <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8007dde:	2001      	movs	r0, #1
 8007de0:	f005 fd62 	bl	800d8a8 <SetVerboseLevel>
      break;
 8007de4:	e037      	b.n	8007e56 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007de6:	4b27      	ldr	r3, [pc, #156]	@ (8007e84 <HAL_UART_RxCpltCallback+0xfc>)
 8007de8:	0018      	movs	r0, r3
 8007dea:	f017 f947 	bl	801f07c <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8007dee:	2000      	movs	r0, #0
 8007df0:	f005 fd5a 	bl	800d8a8 <SetVerboseLevel>
      break;
 8007df4:	e02f      	b.n	8007e56 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007df6:	f006 f88b 	bl	800df10 <HAL_GetTick>
 8007dfa:	0002      	movs	r2, r0
 8007dfc:	4b22      	ldr	r3, [pc, #136]	@ (8007e88 <HAL_UART_RxCpltCallback+0x100>)
 8007dfe:	601a      	str	r2, [r3, #0]
      break;
 8007e00:	e029      	b.n	8007e56 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8007e02:	f7fe f9eb 	bl	80061dc <showTime>
      break;
 8007e06:	e026      	b.n	8007e56 <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007e08:	4a20      	ldr	r2, [pc, #128]	@ (8007e8c <HAL_UART_RxCpltCallback+0x104>)
 8007e0a:	4b21      	ldr	r3, [pc, #132]	@ (8007e90 <HAL_UART_RxCpltCallback+0x108>)
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	2001      	movs	r0, #1
 8007e10:	f005 fce0 	bl	800d7d4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8007e14:	4b1f      	ldr	r3, [pc, #124]	@ (8007e94 <HAL_UART_RxCpltCallback+0x10c>)
 8007e16:	0018      	movs	r0, r3
 8007e18:	f017 f930 	bl	801f07c <puts>
      printf("a - VerboseLevel set to all\r\n");
 8007e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8007e98 <HAL_UART_RxCpltCallback+0x110>)
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f017 f92c 	bl	801f07c <puts>
      printf("f - Force NTP time synchronization\r\n");
 8007e24:	4b1d      	ldr	r3, [pc, #116]	@ (8007e9c <HAL_UART_RxCpltCallback+0x114>)
 8007e26:	0018      	movs	r0, r3
 8007e28:	f017 f928 	bl	801f07c <puts>
      printf("i - VerboseLevel set to info\r\n");
 8007e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea0 <HAL_UART_RxCpltCallback+0x118>)
 8007e2e:	0018      	movs	r0, r3
 8007e30:	f017 f924 	bl	801f07c <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8007e34:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea4 <HAL_UART_RxCpltCallback+0x11c>)
 8007e36:	0018      	movs	r0, r3
 8007e38:	f017 f920 	bl	801f07c <puts>
      printf("n - VerboseLevel set to none\r\n");
 8007e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea8 <HAL_UART_RxCpltCallback+0x120>)
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f017 f91c 	bl	801f07c <puts>
      printf("s - Start particle measurement\r\n");
 8007e44:	4b19      	ldr	r3, [pc, #100]	@ (8007eac <HAL_UART_RxCpltCallback+0x124>)
 8007e46:	0018      	movs	r0, r3
 8007e48:	f017 f918 	bl	801f07c <puts>
      printf("t - Show actual systemtime\r\n");
 8007e4c:	4b18      	ldr	r3, [pc, #96]	@ (8007eb0 <HAL_UART_RxCpltCallback+0x128>)
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f017 f914 	bl	801f07c <puts>
  break;
 8007e54:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007e56:	4905      	ldr	r1, [pc, #20]	@ (8007e6c <HAL_UART_RxCpltCallback+0xe4>)
 8007e58:	4b05      	ldr	r3, [pc, #20]	@ (8007e70 <HAL_UART_RxCpltCallback+0xe8>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f00e facf 	bl	8016400 <HAL_UART_Receive_IT>
}
 8007e62:	46c0      	nop			@ (mov r8, r8)
 8007e64:	46bd      	mov	sp, r7
 8007e66:	b002      	add	sp, #8
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	46c0      	nop			@ (mov r8, r8)
 8007e6c:	20000f28 	.word	0x20000f28
 8007e70:	200022fc 	.word	0x200022fc
 8007e74:	08023ef8 	.word	0x08023ef8
 8007e78:	08022e90 	.word	0x08022e90
 8007e7c:	08022eac 	.word	0x08022eac
 8007e80:	08022ec8 	.word	0x08022ec8
 8007e84:	08022ee8 	.word	0x08022ee8
 8007e88:	20001200 	.word	0x20001200
 8007e8c:	08022f04 	.word	0x08022f04
 8007e90:	08022f34 	.word	0x08022f34
 8007e94:	08022f38 	.word	0x08022f38
 8007e98:	08022f50 	.word	0x08022f50
 8007e9c:	08022f70 	.word	0x08022f70
 8007ea0:	08022f94 	.word	0x08022f94
 8007ea4:	08022fb4 	.word	0x08022fb4
 8007ea8:	08022fd8 	.word	0x08022fd8
 8007eac:	08022ff8 	.word	0x08022ff8
 8007eb0:	08023018 	.word	0x08023018

08007eb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	0002      	movs	r2, r0
 8007ebc:	1dbb      	adds	r3, r7, #6
 8007ebe:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8007ec0:	1dbb      	adds	r3, r7, #6
 8007ec2:	881a      	ldrh	r2, [r3, #0]
 8007ec4:	2380      	movs	r3, #128	@ 0x80
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d101      	bne.n	8007ed0 <HAL_GPIO_EXTI_Callback+0x1c>
    setuserToggle();
 8007ecc:	f004 ff26 	bl	800cd1c <setuserToggle>
  }
}
 8007ed0:	46c0      	nop			@ (mov r8, r8)
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b002      	add	sp, #8
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8007edc:	4a04      	ldr	r2, [pc, #16]	@ (8007ef0 <Error_Handler+0x18>)
 8007ede:	4b05      	ldr	r3, [pc, #20]	@ (8007ef4 <Error_Handler+0x1c>)
 8007ee0:	0019      	movs	r1, r3
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f005 fc76 	bl	800d7d4 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007ee8:	b672      	cpsid	i
}
 8007eea:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8007eec:	46c0      	nop			@ (mov r8, r8)
 8007eee:	e7fd      	b.n	8007eec <Error_Handler+0x14>
 8007ef0:	08023034 	.word	0x08023034
 8007ef4:	08022f34 	.word	0x08022f34

08007ef8 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007efc:	f7ff fabb 	bl	8007476 <HT_StartMeasurement>
}
 8007f00:	46c0      	nop			@ (mov r8, r8)
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007f0c:	4a04      	ldr	r2, [pc, #16]	@ (8007f20 <HT_IsMeasurementDoneWrapper+0x18>)
 8007f0e:	4b05      	ldr	r3, [pc, #20]	@ (8007f24 <HT_IsMeasurementDoneWrapper+0x1c>)
 8007f10:	0011      	movs	r1, r2
 8007f12:	0018      	movs	r0, r3
 8007f14:	f7ff fab6 	bl	8007484 <HT_GetMeasurementValues>
 8007f18:	0003      	movs	r3, r0
}
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000f3c 	.word	0x20000f3c
 8007f24:	20000f38 	.word	0x20000f38

08007f28 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007f2c:	f7ff f8f9 	bl	8007122 <Gas_StartMeasurement>
}
 8007f30:	46c0      	nop			@ (mov r8, r8)
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8007f3c:	4b03      	ldr	r3, [pc, #12]	@ (8007f4c <VOC_IsMeasurementDoneWrapper+0x14>)
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f7ff f8f6 	bl	8007130 <Gas_GetMeasurementValues>
 8007f44:	0003      	movs	r3, r0
}
 8007f46:	0018      	movs	r0, r3
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000f40 	.word	0x20000f40

08007f50 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
}
 8007f54:	46c0      	nop			@ (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	af00      	add	r7, sp, #0
  return true;
 8007f5e:	2301      	movs	r3, #1
}
 8007f60:	0018      	movs	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <MIC_IsTestMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
  return MIC_MeasurementDone();
}

bool MIC_IsTestMeasurementDoneWrapper(void) {
 8007f66:	b580      	push	{r7, lr}
 8007f68:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8007f6a:	f000 fd21 	bl	80089b0 <MIC_TestMeasurementDone>
 8007f6e:	0003      	movs	r3, r0
}
 8007f70:	0018      	movs	r0, r3
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <setMeasStamp>:
void setMeasStamp(uint32_t nrTicks) {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  MeasStamp = HAL_GetTick() + nrTicks;
 8007f80:	f005 ffc6 	bl	800df10 <HAL_GetTick>
 8007f84:	0002      	movs	r2, r0
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	18d2      	adds	r2, r2, r3
 8007f8a:	4b03      	ldr	r3, [pc, #12]	@ (8007f98 <setMeasStamp+0x20>)
 8007f8c:	601a      	str	r2, [r3, #0]
}
 8007f8e:	46c0      	nop			@ (mov r8, r8)
 8007f90:	46bd      	mov	sp, r7
 8007f92:	b002      	add	sp, #8
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	20000f84 	.word	0x20000f84

08007f9c <testInit>:

void testInit(){
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8007fa0:	4b07      	ldr	r3, [pc, #28]	@ (8007fc0 <testInit+0x24>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007fa6:	4b06      	ldr	r3, [pc, #24]	@ (8007fc0 <testInit+0x24>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8007fac:	4b04      	ldr	r3, [pc, #16]	@ (8007fc0 <testInit+0x24>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8007fb2:	4b03      	ldr	r3, [pc, #12]	@ (8007fc0 <testInit+0x24>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	705a      	strb	r2, [r3, #1]
}
 8007fb8:	46c0      	nop			@ (mov r8, r8)
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			@ (mov r8, r8)
 8007fc0:	20000f7c 	.word	0x20000f7c

08007fc4 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8007fc4:	b5b0      	push	{r4, r5, r7, lr}
 8007fc6:	b092      	sub	sp, #72	@ 0x48
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 8007fd0:	f7ff ffe4 	bl	8007f9c <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8007fd4:	4b6e      	ldr	r3, [pc, #440]	@ (8008190 <Meas_Init+0x1cc>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <Meas_Init+0x20>
 8007fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8008190 <Meas_Init+0x1cc>)
 8007fde:	785b      	ldrb	r3, [r3, #1]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d068      	beq.n	80080b6 <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f7fd fd7e 	bl	8005ae8 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8007fec:	f7ff fa5a 	bl	80074a4 <HT_DeviceConnected>
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	001a      	movs	r2, r3
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4053      	eors	r3, r2
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 8007ffe:	4a65      	ldr	r2, [pc, #404]	@ (8008194 <Meas_Init+0x1d0>)
 8008000:	4b65      	ldr	r3, [pc, #404]	@ (8008198 <Meas_Init+0x1d4>)
 8008002:	0019      	movs	r1, r3
 8008004:	2001      	movs	r0, #1
 8008006:	f005 fbe5 	bl	800d7d4 <CreateLine>
       MeasTest.HT_Tested = false;
 800800a:	4b64      	ldr	r3, [pc, #400]	@ (800819c <Meas_Init+0x1d8>)
 800800c:	2200      	movs	r2, #0
 800800e:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8008010:	4b5f      	ldr	r3, [pc, #380]	@ (8008190 <Meas_Init+0x1cc>)
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
 8008016:	e008      	b.n	800802a <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8008018:	4b60      	ldr	r3, [pc, #384]	@ (800819c <Meas_Init+0x1d8>)
 800801a:	2201      	movs	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 800801e:	4a60      	ldr	r2, [pc, #384]	@ (80081a0 <Meas_Init+0x1dc>)
 8008020:	4b60      	ldr	r3, [pc, #384]	@ (80081a4 <Meas_Init+0x1e0>)
 8008022:	0019      	movs	r1, r3
 8008024:	2003      	movs	r0, #3
 8008026:	f005 fbd5 	bl	800d7d4 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 800802a:	f7ff f88e 	bl	800714a <Gas_DeviceConnected>
 800802e:	0003      	movs	r3, r0
 8008030:	001a      	movs	r2, r3
 8008032:	2301      	movs	r3, #1
 8008034:	4053      	eors	r3, r2
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 800803c:	4b57      	ldr	r3, [pc, #348]	@ (800819c <Meas_Init+0x1d8>)
 800803e:	2200      	movs	r2, #0
 8008040:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8008042:	4a59      	ldr	r2, [pc, #356]	@ (80081a8 <Meas_Init+0x1e4>)
 8008044:	4b54      	ldr	r3, [pc, #336]	@ (8008198 <Meas_Init+0x1d4>)
 8008046:	0019      	movs	r1, r3
 8008048:	2001      	movs	r0, #1
 800804a:	f005 fbc3 	bl	800d7d4 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 800804e:	4b50      	ldr	r3, [pc, #320]	@ (8008190 <Meas_Init+0x1cc>)
 8008050:	2200      	movs	r2, #0
 8008052:	705a      	strb	r2, [r3, #1]
 8008054:	e008      	b.n	8008068 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8008056:	4b51      	ldr	r3, [pc, #324]	@ (800819c <Meas_Init+0x1d8>)
 8008058:	2201      	movs	r2, #1
 800805a:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 800805c:	4a53      	ldr	r2, [pc, #332]	@ (80081ac <Meas_Init+0x1e8>)
 800805e:	4b51      	ldr	r3, [pc, #324]	@ (80081a4 <Meas_Init+0x1e0>)
 8008060:	0019      	movs	r1, r3
 8008062:	2003      	movs	r0, #3
 8008064:	f005 fbb6 	bl	800d7d4 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8008068:	4b4c      	ldr	r3, [pc, #304]	@ (800819c <Meas_Init+0x1d8>)
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d009      	beq.n	8008084 <Meas_Init+0xc0>
 8008070:	4b4a      	ldr	r3, [pc, #296]	@ (800819c <Meas_Init+0x1d8>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8008078:	2200      	movs	r2, #0
 800807a:	2101      	movs	r1, #1
 800807c:	2000      	movs	r0, #0
 800807e:	f004 fc19 	bl	800c8b4 <SetDBLED>
 8008082:	e018      	b.n	80080b6 <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8008084:	2200      	movs	r2, #0
 8008086:	2100      	movs	r1, #0
 8008088:	2001      	movs	r0, #1
 800808a:	f004 fc13 	bl	800c8b4 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800808e:	4b48      	ldr	r3, [pc, #288]	@ (80081b0 <Meas_Init+0x1ec>)
 8008090:	2200      	movs	r2, #0
 8008092:	2101      	movs	r1, #1
 8008094:	0018      	movs	r0, r3
 8008096:	f007 f9b6 	bl	800f406 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800809a:	2380      	movs	r3, #128	@ 0x80
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	4844      	ldr	r0, [pc, #272]	@ (80081b0 <Meas_Init+0x1ec>)
 80080a0:	2201      	movs	r2, #1
 80080a2:	0019      	movs	r1, r3
 80080a4:	f007 f9af 	bl	800f406 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80080a8:	2380      	movs	r3, #128	@ 0x80
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4840      	ldr	r0, [pc, #256]	@ (80081b0 <Meas_Init+0x1ec>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	0019      	movs	r1, r3
 80080b2:	f007 f9a8 	bl	800f406 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80080b6:	4b36      	ldr	r3, [pc, #216]	@ (8008190 <Meas_Init+0x1cc>)
 80080b8:	78db      	ldrb	r3, [r3, #3]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d008      	beq.n	80080d0 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 80080be:	4a3d      	ldr	r2, [pc, #244]	@ (80081b4 <Meas_Init+0x1f0>)
 80080c0:	4b3d      	ldr	r3, [pc, #244]	@ (80081b8 <Meas_Init+0x1f4>)
 80080c2:	0019      	movs	r1, r3
 80080c4:	2002      	movs	r0, #2
 80080c6:	f005 fb85 	bl	800d7d4 <CreateLine>
          enableMicrophone(true);
 80080ca:	2001      	movs	r0, #1
 80080cc:	f003 fd46 	bl	800bb5c <enableMicrophone>

  }
  uint8_t offset = 0;
 80080d0:	2547      	movs	r5, #71	@ 0x47
 80080d2:	197b      	adds	r3, r7, r5
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80080d8:	197b      	adds	r3, r7, r5
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	197a      	adds	r2, r7, r5
 80080de:	1c59      	adds	r1, r3, #1
 80080e0:	7011      	strb	r1, [r2, #0]
 80080e2:	4a2b      	ldr	r2, [pc, #172]	@ (8008190 <Meas_Init+0x1cc>)
 80080e4:	7814      	ldrb	r4, [r2, #0]
 80080e6:	4a35      	ldr	r2, [pc, #212]	@ (80081bc <Meas_Init+0x1f8>)
 80080e8:	0119      	lsls	r1, r3, #4
 80080ea:	4835      	ldr	r0, [pc, #212]	@ (80081c0 <Meas_Init+0x1fc>)
 80080ec:	5088      	str	r0, [r1, r2]
 80080ee:	4933      	ldr	r1, [pc, #204]	@ (80081bc <Meas_Init+0x1f8>)
 80080f0:	011a      	lsls	r2, r3, #4
 80080f2:	188a      	adds	r2, r1, r2
 80080f4:	3204      	adds	r2, #4
 80080f6:	4933      	ldr	r1, [pc, #204]	@ (80081c4 <Meas_Init+0x200>)
 80080f8:	6011      	str	r1, [r2, #0]
 80080fa:	4930      	ldr	r1, [pc, #192]	@ (80081bc <Meas_Init+0x1f8>)
 80080fc:	011a      	lsls	r2, r3, #4
 80080fe:	188a      	adds	r2, r1, r2
 8008100:	3208      	adds	r2, #8
 8008102:	4931      	ldr	r1, [pc, #196]	@ (80081c8 <Meas_Init+0x204>)
 8008104:	6011      	str	r1, [r2, #0]
 8008106:	4a2d      	ldr	r2, [pc, #180]	@ (80081bc <Meas_Init+0x1f8>)
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	18d3      	adds	r3, r2, r3
 800810c:	330c      	adds	r3, #12
 800810e:	1c22      	adds	r2, r4, #0
 8008110:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8008112:	197b      	adds	r3, r7, r5
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	197a      	adds	r2, r7, r5
 8008118:	1c59      	adds	r1, r3, #1
 800811a:	7011      	strb	r1, [r2, #0]
 800811c:	4a1c      	ldr	r2, [pc, #112]	@ (8008190 <Meas_Init+0x1cc>)
 800811e:	7854      	ldrb	r4, [r2, #1]
 8008120:	4a26      	ldr	r2, [pc, #152]	@ (80081bc <Meas_Init+0x1f8>)
 8008122:	0119      	lsls	r1, r3, #4
 8008124:	4829      	ldr	r0, [pc, #164]	@ (80081cc <Meas_Init+0x208>)
 8008126:	5088      	str	r0, [r1, r2]
 8008128:	4924      	ldr	r1, [pc, #144]	@ (80081bc <Meas_Init+0x1f8>)
 800812a:	011a      	lsls	r2, r3, #4
 800812c:	188a      	adds	r2, r1, r2
 800812e:	3204      	adds	r2, #4
 8008130:	4927      	ldr	r1, [pc, #156]	@ (80081d0 <Meas_Init+0x20c>)
 8008132:	6011      	str	r1, [r2, #0]
 8008134:	4921      	ldr	r1, [pc, #132]	@ (80081bc <Meas_Init+0x1f8>)
 8008136:	011a      	lsls	r2, r3, #4
 8008138:	188a      	adds	r2, r1, r2
 800813a:	3208      	adds	r2, #8
 800813c:	4925      	ldr	r1, [pc, #148]	@ (80081d4 <Meas_Init+0x210>)
 800813e:	6011      	str	r1, [r2, #0]
 8008140:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <Meas_Init+0x1f8>)
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	18d3      	adds	r3, r2, r3
 8008146:	330c      	adds	r3, #12
 8008148:	1c22      	adds	r2, r4, #0
 800814a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 800814c:	197b      	adds	r3, r7, r5
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	197a      	adds	r2, r7, r5
 8008152:	1c59      	adds	r1, r3, #1
 8008154:	7011      	strb	r1, [r2, #0]
 8008156:	4a0e      	ldr	r2, [pc, #56]	@ (8008190 <Meas_Init+0x1cc>)
 8008158:	7894      	ldrb	r4, [r2, #2]
 800815a:	4a18      	ldr	r2, [pc, #96]	@ (80081bc <Meas_Init+0x1f8>)
 800815c:	0119      	lsls	r1, r3, #4
 800815e:	481e      	ldr	r0, [pc, #120]	@ (80081d8 <Meas_Init+0x214>)
 8008160:	5088      	str	r0, [r1, r2]
 8008162:	4916      	ldr	r1, [pc, #88]	@ (80081bc <Meas_Init+0x1f8>)
 8008164:	011a      	lsls	r2, r3, #4
 8008166:	188a      	adds	r2, r1, r2
 8008168:	3204      	adds	r2, #4
 800816a:	491c      	ldr	r1, [pc, #112]	@ (80081dc <Meas_Init+0x218>)
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	4913      	ldr	r1, [pc, #76]	@ (80081bc <Meas_Init+0x1f8>)
 8008170:	011a      	lsls	r2, r3, #4
 8008172:	188a      	adds	r2, r1, r2
 8008174:	3208      	adds	r2, #8
 8008176:	491a      	ldr	r1, [pc, #104]	@ (80081e0 <Meas_Init+0x21c>)
 8008178:	6011      	str	r1, [r2, #0]
 800817a:	4a10      	ldr	r2, [pc, #64]	@ (80081bc <Meas_Init+0x1f8>)
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	18d3      	adds	r3, r2, r3
 8008180:	330c      	adds	r3, #12
 8008182:	1c22      	adds	r2, r4, #0
 8008184:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8008186:	46c0      	nop			@ (mov r8, r8)
 8008188:	46bd      	mov	sp, r7
 800818a:	b012      	add	sp, #72	@ 0x48
 800818c:	bdb0      	pop	{r4, r5, r7, pc}
 800818e:	46c0      	nop			@ (mov r8, r8)
 8008190:	20000f78 	.word	0x20000f78
 8008194:	08023060 	.word	0x08023060
 8008198:	08023090 	.word	0x08023090
 800819c:	20000f7c 	.word	0x20000f7c
 80081a0:	08023094 	.word	0x08023094
 80081a4:	080230c0 	.word	0x080230c0
 80081a8:	080230c4 	.word	0x080230c4
 80081ac:	080230e0 	.word	0x080230e0
 80081b0:	50000400 	.word	0x50000400
 80081b4:	080230f8 	.word	0x080230f8
 80081b8:	0802311c 	.word	0x0802311c
 80081bc:	20000f48 	.word	0x20000f48
 80081c0:	08007ef9 	.word	0x08007ef9
 80081c4:	08007f09 	.word	0x08007f09
 80081c8:	20000f44 	.word	0x20000f44
 80081cc:	08007f29 	.word	0x08007f29
 80081d0:	08007f39 	.word	0x08007f39
 80081d4:	20000f45 	.word	0x20000f45
 80081d8:	08007f51 	.word	0x08007f51
 80081dc:	08007f5b 	.word	0x08007f5b
 80081e0:	20000f46 	.word	0x20000f46

080081e4 <StartMeasurements>:

void StartMeasurements(void) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80081e8:	4b10      	ldr	r3, [pc, #64]	@ (800822c <StartMeasurements+0x48>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e015      	b.n	800821c <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80081f0:	4b0e      	ldr	r3, [pc, #56]	@ (800822c <StartMeasurements+0x48>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	4a0e      	ldr	r2, [pc, #56]	@ (8008230 <StartMeasurements+0x4c>)
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	18d3      	adds	r3, r2, r3
 80081fa:	330c      	adds	r3, #12
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d006      	beq.n	8008210 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8008202:	4b0a      	ldr	r3, [pc, #40]	@ (800822c <StartMeasurements+0x48>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	001a      	movs	r2, r3
 8008208:	4b09      	ldr	r3, [pc, #36]	@ (8008230 <StartMeasurements+0x4c>)
 800820a:	0112      	lsls	r2, r2, #4
 800820c:	58d3      	ldr	r3, [r2, r3]
 800820e:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8008210:	4b06      	ldr	r3, [pc, #24]	@ (800822c <StartMeasurements+0x48>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	3301      	adds	r3, #1
 8008216:	b2da      	uxtb	r2, r3
 8008218:	4b04      	ldr	r3, [pc, #16]	@ (800822c <StartMeasurements+0x48>)
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	4b03      	ldr	r3, [pc, #12]	@ (800822c <StartMeasurements+0x48>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b02      	cmp	r3, #2
 8008222:	d9e5      	bls.n	80081f0 <StartMeasurements+0xc>
    }
  }
}
 8008224:	46c0      	nop			@ (mov r8, r8)
 8008226:	46c0      	nop			@ (mov r8, r8)
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000f80 	.word	0x20000f80
 8008230:	20000f48 	.word	0x20000f48

08008234 <Meas_Test>:

void Meas_Test(){
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8008238:	4b23      	ldr	r3, [pc, #140]	@ (80082c8 <Meas_Test+0x94>)
 800823a:	78db      	ldrb	r3, [r3, #3]
 800823c:	2201      	movs	r2, #1
 800823e:	4053      	eors	r3, r2
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <Meas_Test+0x16>
    ESP_WakeTest();
 8008246:	f7fc fed9 	bl	8004ffc <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 800824a:	4b1f      	ldr	r3, [pc, #124]	@ (80082c8 <Meas_Test+0x94>)
 800824c:	789b      	ldrb	r3, [r3, #2]
 800824e:	2201      	movs	r2, #1
 8008250:	4053      	eors	r3, r2
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8008258:	f7ff fe85 	bl	8007f66 <MIC_IsTestMeasurementDoneWrapper>
 800825c:	1e03      	subs	r3, r0, #0
 800825e:	d00b      	beq.n	8008278 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8008260:	4b19      	ldr	r3, [pc, #100]	@ (80082c8 <Meas_Test+0x94>)
 8008262:	2201      	movs	r2, #1
 8008264:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8008266:	23fa      	movs	r3, #250	@ 0xfa
 8008268:	011a      	lsls	r2, r3, #4
 800826a:	4918      	ldr	r1, [pc, #96]	@ (80082cc <Meas_Test+0x98>)
 800826c:	23fa      	movs	r3, #250	@ 0xfa
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	0018      	movs	r0, r3
 8008272:	f004 faeb 	bl	800c84c <SetStatusLED>
 8008276:	e00b      	b.n	8008290 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8008278:	f003 fc4c 	bl	800bb14 <micSettlingComplete>
 800827c:	1e03      	subs	r3, r0, #0
 800827e:	d007      	beq.n	8008290 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8008280:	23fa      	movs	r3, #250	@ 0xfa
 8008282:	011a      	lsls	r2, r3, #4
 8008284:	23fa      	movs	r3, #250	@ 0xfa
 8008286:	011b      	lsls	r3, r3, #4
 8008288:	4810      	ldr	r0, [pc, #64]	@ (80082cc <Meas_Test+0x98>)
 800828a:	0019      	movs	r1, r3
 800828c:	f004 fade 	bl	800c84c <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8008290:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <Meas_Test+0x94>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d013      	beq.n	80082c0 <Meas_Test+0x8c>
 8008298:	4b0b      	ldr	r3, [pc, #44]	@ (80082c8 <Meas_Test+0x94>)
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00f      	beq.n	80082c0 <Meas_Test+0x8c>
 80082a0:	4b09      	ldr	r3, [pc, #36]	@ (80082c8 <Meas_Test+0x94>)
 80082a2:	78db      	ldrb	r3, [r3, #3]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d00b      	beq.n	80082c0 <Meas_Test+0x8c>
 80082a8:	4b07      	ldr	r3, [pc, #28]	@ (80082c8 <Meas_Test+0x94>)
 80082aa:	789b      	ldrb	r3, [r3, #2]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d007      	beq.n	80082c0 <Meas_Test+0x8c>
    Info("Test completed");
 80082b0:	4a07      	ldr	r2, [pc, #28]	@ (80082d0 <Meas_Test+0x9c>)
 80082b2:	4b08      	ldr	r3, [pc, #32]	@ (80082d4 <Meas_Test+0xa0>)
 80082b4:	0019      	movs	r1, r3
 80082b6:	2002      	movs	r0, #2
 80082b8:	f005 fa8c 	bl	800d7d4 <CreateLine>
    SetTestDone();
 80082bc:	f7ff faf0 	bl	80078a0 <SetTestDone>
  }
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	20000f7c 	.word	0x20000f7c
 80082cc:	00000bb8 	.word	0x00000bb8
 80082d0:	08023120 	.word	0x08023120
 80082d4:	0802311c 	.word	0x0802311c

080082d8 <ResetMeasurements>:
void ResetMeasurements(void) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80082dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008308 <ResetMeasurements+0x30>)
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 80082e2:	4b09      	ldr	r3, [pc, #36]	@ (8008308 <ResetMeasurements+0x30>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80082e8:	4b07      	ldr	r3, [pc, #28]	@ (8008308 <ResetMeasurements+0x30>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80082ee:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <ResetMeasurements+0x30>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 80082f4:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <ResetMeasurements+0x30>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 80082fa:	4b03      	ldr	r3, [pc, #12]	@ (8008308 <ResetMeasurements+0x30>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	739a      	strb	r2, [r3, #14]
//  MeasurementCtx.MIC_measurementDone = false;
}
 8008300:	46c0      	nop			@ (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	46c0      	nop			@ (mov r8, r8)
 8008308:	20000f38 	.word	0x20000f38

0800830c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 800830c:	b580      	push	{r7, lr}
 800830e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8008310:	4b18      	ldr	r3, [pc, #96]	@ (8008374 <MeasurementsCompleted+0x68>)
 8008312:	2200      	movs	r2, #0
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	e024      	b.n	8008362 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8008318:	4b16      	ldr	r3, [pc, #88]	@ (8008374 <MeasurementsCompleted+0x68>)
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	4a16      	ldr	r2, [pc, #88]	@ (8008378 <MeasurementsCompleted+0x6c>)
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	18d3      	adds	r3, r2, r3
 8008322:	330c      	adds	r3, #12
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d015      	beq.n	8008356 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800832a:	4b12      	ldr	r3, [pc, #72]	@ (8008374 <MeasurementsCompleted+0x68>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	4a12      	ldr	r2, [pc, #72]	@ (8008378 <MeasurementsCompleted+0x6c>)
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	18d3      	adds	r3, r2, r3
 8008334:	3304      	adds	r3, #4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4798      	blx	r3
 800833a:	1e03      	subs	r3, r0, #0
 800833c:	d009      	beq.n	8008352 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 800833e:	4b0d      	ldr	r3, [pc, #52]	@ (8008374 <MeasurementsCompleted+0x68>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	4a0d      	ldr	r2, [pc, #52]	@ (8008378 <MeasurementsCompleted+0x6c>)
 8008344:	011b      	lsls	r3, r3, #4
 8008346:	18d3      	adds	r3, r2, r3
 8008348:	3308      	adds	r3, #8
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2201      	movs	r2, #1
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	e001      	b.n	8008356 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8008352:	2300      	movs	r3, #0
 8008354:	e00a      	b.n	800836c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8008356:	4b07      	ldr	r3, [pc, #28]	@ (8008374 <MeasurementsCompleted+0x68>)
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	3301      	adds	r3, #1
 800835c:	b2da      	uxtb	r2, r3
 800835e:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <MeasurementsCompleted+0x68>)
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	4b04      	ldr	r3, [pc, #16]	@ (8008374 <MeasurementsCompleted+0x68>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d9d6      	bls.n	8008318 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800836a:	2301      	movs	r3, #1
}
 800836c:	0018      	movs	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	46c0      	nop			@ (mov r8, r8)
 8008374:	20000f80 	.word	0x20000f80
 8008378:	20000f48 	.word	0x20000f48

0800837c <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b085      	sub	sp, #20
 8008380:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008382:	4b7c      	ldr	r3, [pc, #496]	@ (8008574 <Mic_Upkeep+0x1f8>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b03      	cmp	r3, #3
 8008388:	d100      	bne.n	800838c <Mic_Upkeep+0x10>
 800838a:	e0c0      	b.n	800850e <Mic_Upkeep+0x192>
 800838c:	dd00      	ble.n	8008390 <Mic_Upkeep+0x14>
 800838e:	e0db      	b.n	8008548 <Mic_Upkeep+0x1cc>
 8008390:	2b02      	cmp	r3, #2
 8008392:	d037      	beq.n	8008404 <Mic_Upkeep+0x88>
 8008394:	dd00      	ble.n	8008398 <Mic_Upkeep+0x1c>
 8008396:	e0d7      	b.n	8008548 <Mic_Upkeep+0x1cc>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <Mic_Upkeep+0x26>
 800839c:	2b01      	cmp	r3, #1
 800839e:	d014      	beq.n	80083ca <Mic_Upkeep+0x4e>
 80083a0:	e0d2      	b.n	8008548 <Mic_Upkeep+0x1cc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 80083a2:	2001      	movs	r0, #1
 80083a4:	f003 fbda 	bl	800bb5c <enableMicrophone>
 80083a8:	0003      	movs	r3, r0
 80083aa:	001a      	movs	r2, r3
 80083ac:	2301      	movs	r3, #1
 80083ae:	4053      	eors	r3, r2
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80083b6:	4a70      	ldr	r2, [pc, #448]	@ (8008578 <Mic_Upkeep+0x1fc>)
 80083b8:	4b70      	ldr	r3, [pc, #448]	@ (800857c <Mic_Upkeep+0x200>)
 80083ba:	21ca      	movs	r1, #202	@ 0xca
 80083bc:	0018      	movs	r0, r3
 80083be:	f005 fabf 	bl	800d940 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 80083c2:	4b6c      	ldr	r3, [pc, #432]	@ (8008574 <Mic_Upkeep+0x1f8>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
    break;
 80083c8:	e0cd      	b.n	8008566 <Mic_Upkeep+0x1ea>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 80083ca:	f003 fba3 	bl	800bb14 <micSettlingComplete>
 80083ce:	1e03      	subs	r3, r0, #0
 80083d0:	d105      	bne.n	80083de <Mic_Upkeep+0x62>
 80083d2:	4b6b      	ldr	r3, [pc, #428]	@ (8008580 <Mic_Upkeep+0x204>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d100      	bne.n	80083de <Mic_Upkeep+0x62>
 80083dc:	e0be      	b.n	800855c <Mic_Upkeep+0x1e0>
      if (!startSPLcalculation())
 80083de:	f003 fc27 	bl	800bc30 <startSPLcalculation>
 80083e2:	0003      	movs	r3, r0
 80083e4:	001a      	movs	r2, r3
 80083e6:	2301      	movs	r3, #1
 80083e8:	4053      	eors	r3, r2
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80083f0:	4a61      	ldr	r2, [pc, #388]	@ (8008578 <Mic_Upkeep+0x1fc>)
 80083f2:	4b62      	ldr	r3, [pc, #392]	@ (800857c <Mic_Upkeep+0x200>)
 80083f4:	21d3      	movs	r1, #211	@ 0xd3
 80083f6:	0018      	movs	r0, r3
 80083f8:	f005 faa2 	bl	800d940 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80083fc:	4b5d      	ldr	r3, [pc, #372]	@ (8008574 <Mic_Upkeep+0x1f8>)
 80083fe:	2202      	movs	r2, #2
 8008400:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008402:	e0ab      	b.n	800855c <Mic_Upkeep+0x1e0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008404:	4b5f      	ldr	r3, [pc, #380]	@ (8008584 <Mic_Upkeep+0x208>)
 8008406:	2201      	movs	r2, #1
 8008408:	2101      	movs	r1, #1
 800840a:	0018      	movs	r0, r3
 800840c:	f003 fa64 	bl	800b8d8 <getSoundData>
 8008410:	1e03      	subs	r3, r0, #0
 8008412:	d100      	bne.n	8008416 <Mic_Upkeep+0x9a>
 8008414:	e0a4      	b.n	8008560 <Mic_Upkeep+0x1e4>
      clearMaximumAmplitude();
 8008416:	f003 fb5d 	bl	800bad4 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800841a:	4b5a      	ldr	r3, [pc, #360]	@ (8008584 <Mic_Upkeep+0x208>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8008420:	4b58      	ldr	r3, [pc, #352]	@ (8008584 <Mic_Upkeep+0x208>)
 8008422:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8008424:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8008426:	4b57      	ldr	r3, [pc, #348]	@ (8008584 <Mic_Upkeep+0x208>)
 8008428:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800842a:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 800842c:	4b55      	ldr	r3, [pc, #340]	@ (8008584 <Mic_Upkeep+0x208>)
 800842e:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8008430:	4855      	ldr	r0, [pc, #340]	@ (8008588 <Mic_Upkeep+0x20c>)
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	0023      	movs	r3, r4
 8008436:	f000 faeb 	bl	8008a10 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800843a:	4b52      	ldr	r3, [pc, #328]	@ (8008584 <Mic_Upkeep+0x208>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	001a      	movs	r2, r3
 8008440:	4b50      	ldr	r3, [pc, #320]	@ (8008584 <Mic_Upkeep+0x208>)
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	4951      	ldr	r1, [pc, #324]	@ (800858c <Mic_Upkeep+0x210>)
 8008446:	0038      	movs	r0, r7
 8008448:	f016 fe22 	bl	801f090 <siprintf>

      dBValue = atof(dBbuffer);
 800844c:	003b      	movs	r3, r7
 800844e:	0018      	movs	r0, r3
 8008450:	f015 f9ce 	bl	801d7f0 <atof>
 8008454:	0002      	movs	r2, r0
 8008456:	000b      	movs	r3, r1
 8008458:	0010      	movs	r0, r2
 800845a:	0019      	movs	r1, r3
 800845c:	f7fb f84a 	bl	80034f4 <__aeabi_d2f>
 8008460:	1c02      	adds	r2, r0, #0
 8008462:	4b4b      	ldr	r3, [pc, #300]	@ (8008590 <Mic_Upkeep+0x214>)
 8008464:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008466:	4b4a      	ldr	r3, [pc, #296]	@ (8008590 <Mic_Upkeep+0x214>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	494a      	ldr	r1, [pc, #296]	@ (8008594 <Mic_Upkeep+0x218>)
 800846c:	1c18      	adds	r0, r3, #0
 800846e:	f7f8 fd97 	bl	8000fa0 <__aeabi_fmul>
 8008472:	1c03      	adds	r3, r0, #0
 8008474:	1c18      	adds	r0, r3, #0
 8008476:	f7fa fff5 	bl	8003464 <__aeabi_f2d>
 800847a:	2200      	movs	r2, #0
 800847c:	4b46      	ldr	r3, [pc, #280]	@ (8008598 <Mic_Upkeep+0x21c>)
 800847e:	f7f9 f935 	bl	80016ec <__aeabi_dadd>
 8008482:	0002      	movs	r2, r0
 8008484:	000b      	movs	r3, r1
 8008486:	0010      	movs	r0, r2
 8008488:	0019      	movs	r1, r3
 800848a:	f7fa ff5d 	bl	8003348 <__aeabi_d2iz>
 800848e:	0003      	movs	r3, r0
 8008490:	0018      	movs	r0, r3
 8008492:	f7fa ff95 	bl	80033c0 <__aeabi_i2d>
 8008496:	2200      	movs	r2, #0
 8008498:	4b40      	ldr	r3, [pc, #256]	@ (800859c <Mic_Upkeep+0x220>)
 800849a:	f7f9 fc8b 	bl	8001db4 <__aeabi_ddiv>
 800849e:	0002      	movs	r2, r0
 80084a0:	000b      	movs	r3, r1
 80084a2:	0010      	movs	r0, r2
 80084a4:	0019      	movs	r1, r3
 80084a6:	f7fb f825 	bl	80034f4 <__aeabi_d2f>
 80084aa:	1c02      	adds	r2, r0, #0
 80084ac:	4b38      	ldr	r3, [pc, #224]	@ (8008590 <Mic_Upkeep+0x214>)
 80084ae:	601a      	str	r2, [r3, #0]
      MIC_Print();
 80084b0:	f000 f95c 	bl	800876c <MIC_Print>
      if (!startSPLcalculation()) {
 80084b4:	f003 fbbc 	bl	800bc30 <startSPLcalculation>
 80084b8:	0003      	movs	r3, r0
 80084ba:	001a      	movs	r2, r3
 80084bc:	2301      	movs	r3, #1
 80084be:	4053      	eors	r3, r2
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 80084c6:	4a2c      	ldr	r2, [pc, #176]	@ (8008578 <Mic_Upkeep+0x1fc>)
 80084c8:	4b2c      	ldr	r3, [pc, #176]	@ (800857c <Mic_Upkeep+0x200>)
 80084ca:	21e6      	movs	r1, #230	@ 0xe6
 80084cc:	0018      	movs	r0, r3
 80084ce:	f005 fa37 	bl	800d940 <errorHandler>
      }
      if (!enableMicrophone(false))
 80084d2:	2000      	movs	r0, #0
 80084d4:	f003 fb42 	bl	800bb5c <enableMicrophone>
 80084d8:	0003      	movs	r3, r0
 80084da:	001a      	movs	r2, r3
 80084dc:	2301      	movs	r3, #1
 80084de:	4053      	eors	r3, r2
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80084e6:	4a24      	ldr	r2, [pc, #144]	@ (8008578 <Mic_Upkeep+0x1fc>)
 80084e8:	4b24      	ldr	r3, [pc, #144]	@ (800857c <Mic_Upkeep+0x200>)
 80084ea:	21ea      	movs	r1, #234	@ 0xea
 80084ec:	0018      	movs	r0, r3
 80084ee:	f005 fa27 	bl	800d940 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 80084f2:	f005 fd0d 	bl	800df10 <HAL_GetTick>
 80084f6:	0003      	movs	r3, r0
 80084f8:	22fa      	movs	r2, #250	@ 0xfa
 80084fa:	0092      	lsls	r2, r2, #2
 80084fc:	189a      	adds	r2, r3, r2
 80084fe:	4b28      	ldr	r3, [pc, #160]	@ (80085a0 <Mic_Upkeep+0x224>)
 8008500:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008502:	4b1c      	ldr	r3, [pc, #112]	@ (8008574 <Mic_Upkeep+0x1f8>)
 8008504:	2203      	movs	r2, #3
 8008506:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008508:	f004 fa98 	bl	800ca3c <ResetMICIndicator>
    }
    break;
 800850c:	e028      	b.n	8008560 <Mic_Upkeep+0x1e4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 800850e:	4b24      	ldr	r3, [pc, #144]	@ (80085a0 <Mic_Upkeep+0x224>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	0018      	movs	r0, r3
 8008514:	f005 f908 	bl	800d728 <TimestampIsReached>
 8008518:	1e03      	subs	r3, r0, #0
 800851a:	d023      	beq.n	8008564 <Mic_Upkeep+0x1e8>
      if (!enableMicrophone(true))
 800851c:	2001      	movs	r0, #1
 800851e:	f003 fb1d 	bl	800bb5c <enableMicrophone>
 8008522:	0003      	movs	r3, r0
 8008524:	001a      	movs	r2, r3
 8008526:	2301      	movs	r3, #1
 8008528:	4053      	eors	r3, r2
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d005      	beq.n	800853c <Mic_Upkeep+0x1c0>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8008530:	4a11      	ldr	r2, [pc, #68]	@ (8008578 <Mic_Upkeep+0x1fc>)
 8008532:	4b12      	ldr	r3, [pc, #72]	@ (800857c <Mic_Upkeep+0x200>)
 8008534:	21f7      	movs	r1, #247	@ 0xf7
 8008536:	0018      	movs	r0, r3
 8008538:	f005 fa02 	bl	800d940 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 800853c:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <Mic_Upkeep+0x1f8>)
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008542:	f004 fa63 	bl	800ca0c <SetMICIndicator>
    }
    break;
 8008546:	e00d      	b.n	8008564 <Mic_Upkeep+0x1e8>

  default:
    Debug("Unexpected occurrence happened");
 8008548:	4a16      	ldr	r2, [pc, #88]	@ (80085a4 <Mic_Upkeep+0x228>)
 800854a:	4b17      	ldr	r3, [pc, #92]	@ (80085a8 <Mic_Upkeep+0x22c>)
 800854c:	0019      	movs	r1, r3
 800854e:	2003      	movs	r0, #3
 8008550:	f005 f940 	bl	800d7d4 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008554:	4b07      	ldr	r3, [pc, #28]	@ (8008574 <Mic_Upkeep+0x1f8>)
 8008556:	2200      	movs	r2, #0
 8008558:	701a      	strb	r2, [r3, #0]
    break;
 800855a:	e004      	b.n	8008566 <Mic_Upkeep+0x1ea>
    break;
 800855c:	46c0      	nop			@ (mov r8, r8)
 800855e:	e002      	b.n	8008566 <Mic_Upkeep+0x1ea>
    break;
 8008560:	46c0      	nop			@ (mov r8, r8)
 8008562:	e000      	b.n	8008566 <Mic_Upkeep+0x1ea>
    break;
 8008564:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008566:	4b03      	ldr	r3, [pc, #12]	@ (8008574 <Mic_Upkeep+0x1f8>)
 8008568:	781b      	ldrb	r3, [r3, #0]
}
 800856a:	0018      	movs	r0, r3
 800856c:	46bd      	mov	sp, r7
 800856e:	b003      	add	sp, #12
 8008570:	bd90      	pop	{r4, r7, pc}
 8008572:	46c0      	nop			@ (mov r8, r8)
 8008574:	20000f9e 	.word	0x20000f9e
 8008578:	08023130 	.word	0x08023130
 800857c:	08023f6c 	.word	0x08023f6c
 8008580:	200012dc 	.word	0x200012dc
 8008584:	20000f8c 	.word	0x20000f8c
 8008588:	0802314c 	.word	0x0802314c
 800858c:	08023178 	.word	0x08023178
 8008590:	20000fd0 	.word	0x20000fd0
 8008594:	42c80000 	.word	0x42c80000
 8008598:	3fe00000 	.word	0x3fe00000
 800859c:	40590000 	.word	0x40590000
 80085a0:	20000f88 	.word	0x20000f88
 80085a4:	08023180 	.word	0x08023180
 80085a8:	080230c0 	.word	0x080230c0

080085ac <Meas_Upkeep>:

MeasurementState Meas_Upkeep(void) {
 80085ac:	b5b0      	push	{r4, r5, r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 80085b2:	4b39      	ldr	r3, [pc, #228]	@ (8008698 <Meas_Upkeep+0xec>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	d862      	bhi.n	8008680 <Meas_Upkeep+0xd4>
 80085ba:	009a      	lsls	r2, r3, #2
 80085bc:	4b37      	ldr	r3, [pc, #220]	@ (800869c <Meas_Upkeep+0xf0>)
 80085be:	18d3      	adds	r3, r2, r3
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 80085c4:	4a36      	ldr	r2, [pc, #216]	@ (80086a0 <Meas_Upkeep+0xf4>)
 80085c6:	4b37      	ldr	r3, [pc, #220]	@ (80086a4 <Meas_Upkeep+0xf8>)
 80085c8:	0019      	movs	r1, r3
 80085ca:	2003      	movs	r0, #3
 80085cc:	f005 f902 	bl	800d7d4 <CreateLine>
    break;
 80085d0:	e05d      	b.n	800868e <Meas_Upkeep+0xe2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80085d2:	f7ff fe81 	bl	80082d8 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80085d6:	4b30      	ldr	r3, [pc, #192]	@ (8008698 <Meas_Upkeep+0xec>)
 80085d8:	2201      	movs	r2, #1
 80085da:	701a      	strb	r2, [r3, #0]
    break;
 80085dc:	e057      	b.n	800868e <Meas_Upkeep+0xe2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80085de:	f7ff fe01 	bl	80081e4 <StartMeasurements>
    SetMeasurementIndicator();
 80085e2:	f004 f9e5 	bl	800c9b0 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80085e6:	4b2c      	ldr	r3, [pc, #176]	@ (8008698 <Meas_Upkeep+0xec>)
 80085e8:	2202      	movs	r2, #2
 80085ea:	701a      	strb	r2, [r3, #0]
   break;
 80085ec:	e04f      	b.n	800868e <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80085ee:	f7ff fe8d 	bl	800830c <MeasurementsCompleted>
 80085f2:	1e03      	subs	r3, r0, #0
 80085f4:	d048      	beq.n	8008688 <Meas_Upkeep+0xdc>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80085f6:	4b28      	ldr	r3, [pc, #160]	@ (8008698 <Meas_Upkeep+0xec>)
 80085f8:	2203      	movs	r2, #3
 80085fa:	701a      	strb	r2, [r3, #0]
    }
    break;
 80085fc:	e044      	b.n	8008688 <Meas_Upkeep+0xdc>
  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
//    Debug("Processing results.");
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 80085fe:	4b2a      	ldr	r3, [pc, #168]	@ (80086a8 <Meas_Upkeep+0xfc>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	4a2a      	ldr	r2, [pc, #168]	@ (80086ac <Meas_Upkeep+0x100>)
 8008604:	4927      	ldr	r1, [pc, #156]	@ (80086a4 <Meas_Upkeep+0xf8>)
 8008606:	2003      	movs	r0, #3
 8008608:	f005 f8e4 	bl	800d7d4 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 800860c:	4b26      	ldr	r3, [pc, #152]	@ (80086a8 <Meas_Upkeep+0xfc>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	1c18      	adds	r0, r3, #0
 8008612:	f7fa ff27 	bl	8003464 <__aeabi_f2d>
 8008616:	0004      	movs	r4, r0
 8008618:	000d      	movs	r5, r1
 800861a:	4b23      	ldr	r3, [pc, #140]	@ (80086a8 <Meas_Upkeep+0xfc>)
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	1c18      	adds	r0, r3, #0
 8008620:	f7fa ff20 	bl	8003464 <__aeabi_f2d>
 8008624:	0002      	movs	r2, r0
 8008626:	000b      	movs	r3, r1
 8008628:	4821      	ldr	r0, [pc, #132]	@ (80086b0 <Meas_Upkeep+0x104>)
 800862a:	491e      	ldr	r1, [pc, #120]	@ (80086a4 <Meas_Upkeep+0xf8>)
 800862c:	9202      	str	r2, [sp, #8]
 800862e:	9303      	str	r3, [sp, #12]
 8008630:	9400      	str	r4, [sp, #0]
 8008632:	9501      	str	r5, [sp, #4]
 8008634:	0002      	movs	r2, r0
 8008636:	2003      	movs	r0, #3
 8008638:	f005 f8cc 	bl	800d7d4 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 800863c:	4b1a      	ldr	r3, [pc, #104]	@ (80086a8 <Meas_Upkeep+0xfc>)
 800863e:	6858      	ldr	r0, [r3, #4]
 8008640:	4b19      	ldr	r3, [pc, #100]	@ (80086a8 <Meas_Upkeep+0xfc>)
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	4b18      	ldr	r3, [pc, #96]	@ (80086a8 <Meas_Upkeep+0xfc>)
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	b29b      	uxth	r3, r3
 800864a:	001a      	movs	r2, r3
 800864c:	f7fb f956 	bl	80038fc <setMeasurement>
    ResetMeasurementIndicator();
 8008650:	f004 f9c6 	bl	800c9e0 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 60000;  // once a minute
 8008654:	f005 fc5c 	bl	800df10 <HAL_GetTick>
 8008658:	0003      	movs	r3, r0
 800865a:	4a16      	ldr	r2, [pc, #88]	@ (80086b4 <Meas_Upkeep+0x108>)
 800865c:	189a      	adds	r2, r3, r2
 800865e:	4b16      	ldr	r3, [pc, #88]	@ (80086b8 <Meas_Upkeep+0x10c>)
 8008660:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8008662:	4b0d      	ldr	r3, [pc, #52]	@ (8008698 <Meas_Upkeep+0xec>)
 8008664:	2206      	movs	r2, #6
 8008666:	701a      	strb	r2, [r3, #0]
    break;
 8008668:	e011      	b.n	800868e <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 800866a:	4b13      	ldr	r3, [pc, #76]	@ (80086b8 <Meas_Upkeep+0x10c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	0018      	movs	r0, r3
 8008670:	f005 f85a 	bl	800d728 <TimestampIsReached>
 8008674:	1e03      	subs	r3, r0, #0
 8008676:	d009      	beq.n	800868c <Meas_Upkeep+0xe0>
      MeasState = MEAS_STATE_INIT;
 8008678:	4b07      	ldr	r3, [pc, #28]	@ (8008698 <Meas_Upkeep+0xec>)
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]
    }

    break;
 800867e:	e005      	b.n	800868c <Meas_Upkeep+0xe0>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8008680:	4b05      	ldr	r3, [pc, #20]	@ (8008698 <Meas_Upkeep+0xec>)
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
    break;
 8008686:	e002      	b.n	800868e <Meas_Upkeep+0xe2>
    break;
 8008688:	46c0      	nop			@ (mov r8, r8)
 800868a:	e000      	b.n	800868e <Meas_Upkeep+0xe2>
    break;
 800868c:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 800868e:	4b02      	ldr	r3, [pc, #8]	@ (8008698 <Meas_Upkeep+0xec>)
 8008690:	781b      	ldrb	r3, [r3, #0]
}
 8008692:	0018      	movs	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	bdb0      	pop	{r4, r5, r7, pc}
 8008698:	20000f9f 	.word	0x20000f9f
 800869c:	08023f50 	.word	0x08023f50
 80086a0:	080231a0 	.word	0x080231a0
 80086a4:	080230c0 	.word	0x080230c0
 80086a8:	20000f38 	.word	0x20000f38
 80086ac:	080231c0 	.word	0x080231c0
 80086b0:	080231d8 	.word	0x080231d8
 80086b4:	0000ea60 	.word	0x0000ea60
 80086b8:	20000f84 	.word	0x20000f84

080086bc <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80086bc:	b590      	push	{r4, r7, lr}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	1d3b      	adds	r3, r7, #4
 80086c4:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80086c6:	240f      	movs	r4, #15
 80086c8:	193b      	adds	r3, r7, r4
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80086ce:	4b20      	ldr	r3, [pc, #128]	@ (8008750 <Meas_SetEnabledSensors+0x94>)
 80086d0:	1d3a      	adds	r2, r7, #4
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80086d6:	193b      	adds	r3, r7, r4
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	193a      	adds	r2, r7, r4
 80086dc:	1c59      	adds	r1, r3, #1
 80086de:	7011      	strb	r1, [r2, #0]
 80086e0:	0018      	movs	r0, r3
 80086e2:	1d3b      	adds	r3, r7, #4
 80086e4:	7819      	ldrb	r1, [r3, #0]
 80086e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008754 <Meas_SetEnabledSensors+0x98>)
 80086e8:	0103      	lsls	r3, r0, #4
 80086ea:	18d3      	adds	r3, r2, r3
 80086ec:	330c      	adds	r3, #12
 80086ee:	1c0a      	adds	r2, r1, #0
 80086f0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80086f2:	193b      	adds	r3, r7, r4
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	193a      	adds	r2, r7, r4
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	7011      	strb	r1, [r2, #0]
 80086fc:	0018      	movs	r0, r3
 80086fe:	1d3b      	adds	r3, r7, #4
 8008700:	7859      	ldrb	r1, [r3, #1]
 8008702:	4a14      	ldr	r2, [pc, #80]	@ (8008754 <Meas_SetEnabledSensors+0x98>)
 8008704:	0103      	lsls	r3, r0, #4
 8008706:	18d3      	adds	r3, r2, r3
 8008708:	330c      	adds	r3, #12
 800870a:	1c0a      	adds	r2, r1, #0
 800870c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 800870e:	193b      	adds	r3, r7, r4
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	193a      	adds	r2, r7, r4
 8008714:	1c59      	adds	r1, r3, #1
 8008716:	7011      	strb	r1, [r2, #0]
 8008718:	0018      	movs	r0, r3
 800871a:	1d3b      	adds	r3, r7, #4
 800871c:	7899      	ldrb	r1, [r3, #2]
 800871e:	4a0d      	ldr	r2, [pc, #52]	@ (8008754 <Meas_SetEnabledSensors+0x98>)
 8008720:	0103      	lsls	r3, r0, #4
 8008722:	18d3      	adds	r3, r2, r3
 8008724:	330c      	adds	r3, #12
 8008726:	1c0a      	adds	r2, r1, #0
 8008728:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 800872a:	193b      	adds	r3, r7, r4
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	193a      	adds	r2, r7, r4
 8008730:	1c59      	adds	r1, r3, #1
 8008732:	7011      	strb	r1, [r2, #0]
 8008734:	0018      	movs	r0, r3
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	78d9      	ldrb	r1, [r3, #3]
 800873a:	4a06      	ldr	r2, [pc, #24]	@ (8008754 <Meas_SetEnabledSensors+0x98>)
 800873c:	0103      	lsls	r3, r0, #4
 800873e:	18d3      	adds	r3, r2, r3
 8008740:	330c      	adds	r3, #12
 8008742:	1c0a      	adds	r2, r1, #0
 8008744:	701a      	strb	r2, [r3, #0]
}
 8008746:	46c0      	nop			@ (mov r8, r8)
 8008748:	46bd      	mov	sp, r7
 800874a:	b005      	add	sp, #20
 800874c:	bd90      	pop	{r4, r7, pc}
 800874e:	46c0      	nop			@ (mov r8, r8)
 8008750:	20000f78 	.word	0x20000f78
 8008754:	20000f48 	.word	0x20000f48

08008758 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8008758:	b580      	push	{r7, lr}
 800875a:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 800875c:	4b02      	ldr	r3, [pc, #8]	@ (8008768 <SetESPMeasurementDone+0x10>)
 800875e:	2201      	movs	r2, #1
 8008760:	70da      	strb	r2, [r3, #3]
}
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20000f7c 	.word	0x20000f7c

0800876c <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8008772:	4b81      	ldr	r3, [pc, #516]	@ (8008978 <MIC_Print+0x20c>)
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	4b81      	ldr	r3, [pc, #516]	@ (800897c <MIC_Print+0x210>)
 8008778:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 800877a:	4b81      	ldr	r3, [pc, #516]	@ (8008980 <MIC_Print+0x214>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b09      	cmp	r3, #9
 8008780:	d80e      	bhi.n	80087a0 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8008782:	4b7f      	ldr	r3, [pc, #508]	@ (8008980 <MIC_Print+0x214>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	001a      	movs	r2, r3
 8008788:	4b7c      	ldr	r3, [pc, #496]	@ (800897c <MIC_Print+0x210>)
 800878a:	6819      	ldr	r1, [r3, #0]
 800878c:	4b7d      	ldr	r3, [pc, #500]	@ (8008984 <MIC_Print+0x218>)
 800878e:	0092      	lsls	r2, r2, #2
 8008790:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8008792:	4b7b      	ldr	r3, [pc, #492]	@ (8008980 <MIC_Print+0x214>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	b2da      	uxtb	r2, r3
 800879a:	4b79      	ldr	r3, [pc, #484]	@ (8008980 <MIC_Print+0x214>)
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	e013      	b.n	80087c8 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 80087a0:	4b77      	ldr	r3, [pc, #476]	@ (8008980 <MIC_Print+0x214>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 80087a6:	4b76      	ldr	r3, [pc, #472]	@ (8008980 <MIC_Print+0x214>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	001a      	movs	r2, r3
 80087ac:	4b73      	ldr	r3, [pc, #460]	@ (800897c <MIC_Print+0x210>)
 80087ae:	6819      	ldr	r1, [r3, #0]
 80087b0:	4b74      	ldr	r3, [pc, #464]	@ (8008984 <MIC_Print+0x218>)
 80087b2:	0092      	lsls	r2, r2, #2
 80087b4:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80087b6:	4b72      	ldr	r3, [pc, #456]	@ (8008980 <MIC_Print+0x214>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	3301      	adds	r3, #1
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	4b70      	ldr	r3, [pc, #448]	@ (8008980 <MIC_Print+0x214>)
 80087c0:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 80087c2:	4b71      	ldr	r3, [pc, #452]	@ (8008988 <MIC_Print+0x21c>)
 80087c4:	2201      	movs	r2, #1
 80087c6:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 80087c8:	4b6f      	ldr	r3, [pc, #444]	@ (8008988 <MIC_Print+0x21c>)
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2201      	movs	r2, #1
 80087ce:	4053      	eors	r3, r2
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d005      	beq.n	80087e2 <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 80087d6:	4b69      	ldr	r3, [pc, #420]	@ (800897c <MIC_Print+0x210>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	1c18      	adds	r0, r3, #0
 80087dc:	f7fb f8aa 	bl	8003934 <setMic>
 80087e0:	e02d      	b.n	800883e <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 80087e2:	4b6a      	ldr	r3, [pc, #424]	@ (800898c <MIC_Print+0x220>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 80087e8:	1dfb      	adds	r3, r7, #7
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]
 80087ee:	e013      	b.n	8008818 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 80087f0:	1dfb      	adds	r3, r7, #7
 80087f2:	781a      	ldrb	r2, [r3, #0]
 80087f4:	4b63      	ldr	r3, [pc, #396]	@ (8008984 <MIC_Print+0x218>)
 80087f6:	0092      	lsls	r2, r2, #2
 80087f8:	58d2      	ldr	r2, [r2, r3]
 80087fa:	4b64      	ldr	r3, [pc, #400]	@ (800898c <MIC_Print+0x220>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	1c19      	adds	r1, r3, #0
 8008800:	1c10      	adds	r0, r2, #0
 8008802:	f7f8 f85d 	bl	80008c0 <__aeabi_fadd>
 8008806:	1c03      	adds	r3, r0, #0
 8008808:	1c1a      	adds	r2, r3, #0
 800880a:	4b60      	ldr	r3, [pc, #384]	@ (800898c <MIC_Print+0x220>)
 800880c:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 800880e:	1dfb      	adds	r3, r7, #7
 8008810:	781a      	ldrb	r2, [r3, #0]
 8008812:	1dfb      	adds	r3, r7, #7
 8008814:	3201      	adds	r2, #1
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	1dfb      	adds	r3, r7, #7
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	2b09      	cmp	r3, #9
 800881e:	d9e7      	bls.n	80087f0 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8008820:	4b5a      	ldr	r3, [pc, #360]	@ (800898c <MIC_Print+0x220>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	495a      	ldr	r1, [pc, #360]	@ (8008990 <MIC_Print+0x224>)
 8008826:	1c18      	adds	r0, r3, #0
 8008828:	f7f8 f9d4 	bl	8000bd4 <__aeabi_fdiv>
 800882c:	1c03      	adds	r3, r0, #0
 800882e:	1c1a      	adds	r2, r3, #0
 8008830:	4b56      	ldr	r3, [pc, #344]	@ (800898c <MIC_Print+0x220>)
 8008832:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8008834:	4b55      	ldr	r3, [pc, #340]	@ (800898c <MIC_Print+0x220>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	1c18      	adds	r0, r3, #0
 800883a:	f7fb f87b 	bl	8003934 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 800883e:	4b4f      	ldr	r3, [pc, #316]	@ (800897c <MIC_Print+0x210>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4954      	ldr	r1, [pc, #336]	@ (8008994 <MIC_Print+0x228>)
 8008844:	1c18      	adds	r0, r3, #0
 8008846:	f7f7 fe91 	bl	800056c <__aeabi_fcmpge>
 800884a:	1e03      	subs	r3, r0, #0
 800884c:	d004      	beq.n	8008858 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 800884e:	2201      	movs	r2, #1
 8008850:	2101      	movs	r1, #1
 8008852:	2001      	movs	r0, #1
 8008854:	f004 f82e 	bl	800c8b4 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8008858:	4b48      	ldr	r3, [pc, #288]	@ (800897c <MIC_Print+0x210>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	494d      	ldr	r1, [pc, #308]	@ (8008994 <MIC_Print+0x228>)
 800885e:	1c18      	adds	r0, r3, #0
 8008860:	f7f7 fe66 	bl	8000530 <__aeabi_fcmplt>
 8008864:	1e03      	subs	r3, r0, #0
 8008866:	d00c      	beq.n	8008882 <MIC_Print+0x116>
 8008868:	4b44      	ldr	r3, [pc, #272]	@ (800897c <MIC_Print+0x210>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	494a      	ldr	r1, [pc, #296]	@ (8008998 <MIC_Print+0x22c>)
 800886e:	1c18      	adds	r0, r3, #0
 8008870:	f7f7 fe7c 	bl	800056c <__aeabi_fcmpge>
 8008874:	1e03      	subs	r3, r0, #0
 8008876:	d004      	beq.n	8008882 <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8008878:	2200      	movs	r2, #0
 800887a:	2100      	movs	r1, #0
 800887c:	2001      	movs	r0, #1
 800887e:	f004 f819 	bl	800c8b4 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 8008882:	4b3e      	ldr	r3, [pc, #248]	@ (800897c <MIC_Print+0x210>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4944      	ldr	r1, [pc, #272]	@ (8008998 <MIC_Print+0x22c>)
 8008888:	1c18      	adds	r0, r3, #0
 800888a:	f7f7 fe51 	bl	8000530 <__aeabi_fcmplt>
 800888e:	1e03      	subs	r3, r0, #0
 8008890:	d00c      	beq.n	80088ac <MIC_Print+0x140>
 8008892:	4b3a      	ldr	r3, [pc, #232]	@ (800897c <MIC_Print+0x210>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4941      	ldr	r1, [pc, #260]	@ (800899c <MIC_Print+0x230>)
 8008898:	1c18      	adds	r0, r3, #0
 800889a:	f7f7 fe67 	bl	800056c <__aeabi_fcmpge>
 800889e:	1e03      	subs	r3, r0, #0
 80088a0:	d004      	beq.n	80088ac <MIC_Print+0x140>
    SetDBLED(true, true, false);
 80088a2:	2200      	movs	r2, #0
 80088a4:	2101      	movs	r1, #1
 80088a6:	2001      	movs	r0, #1
 80088a8:	f004 f804 	bl	800c8b4 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 80088ac:	4b33      	ldr	r3, [pc, #204]	@ (800897c <MIC_Print+0x210>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	493a      	ldr	r1, [pc, #232]	@ (800899c <MIC_Print+0x230>)
 80088b2:	1c18      	adds	r0, r3, #0
 80088b4:	f7f7 fe3c 	bl	8000530 <__aeabi_fcmplt>
 80088b8:	1e03      	subs	r3, r0, #0
 80088ba:	d00c      	beq.n	80088d6 <MIC_Print+0x16a>
 80088bc:	4b2f      	ldr	r3, [pc, #188]	@ (800897c <MIC_Print+0x210>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4937      	ldr	r1, [pc, #220]	@ (80089a0 <MIC_Print+0x234>)
 80088c2:	1c18      	adds	r0, r3, #0
 80088c4:	f7f7 fe52 	bl	800056c <__aeabi_fcmpge>
 80088c8:	1e03      	subs	r3, r0, #0
 80088ca:	d004      	beq.n	80088d6 <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 80088cc:	2200      	movs	r2, #0
 80088ce:	2101      	movs	r1, #1
 80088d0:	2000      	movs	r0, #0
 80088d2:	f003 ffef 	bl	800c8b4 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 80088d6:	4b29      	ldr	r3, [pc, #164]	@ (800897c <MIC_Print+0x210>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4931      	ldr	r1, [pc, #196]	@ (80089a0 <MIC_Print+0x234>)
 80088dc:	1c18      	adds	r0, r3, #0
 80088de:	f7f7 fe27 	bl	8000530 <__aeabi_fcmplt>
 80088e2:	1e03      	subs	r3, r0, #0
 80088e4:	d00c      	beq.n	8008900 <MIC_Print+0x194>
 80088e6:	4b25      	ldr	r3, [pc, #148]	@ (800897c <MIC_Print+0x210>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	492e      	ldr	r1, [pc, #184]	@ (80089a4 <MIC_Print+0x238>)
 80088ec:	1c18      	adds	r0, r3, #0
 80088ee:	f7f7 fe3d 	bl	800056c <__aeabi_fcmpge>
 80088f2:	1e03      	subs	r3, r0, #0
 80088f4:	d004      	beq.n	8008900 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 80088f6:	2201      	movs	r2, #1
 80088f8:	2100      	movs	r1, #0
 80088fa:	2000      	movs	r0, #0
 80088fc:	f003 ffda 	bl	800c8b4 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8008900:	4b1e      	ldr	r3, [pc, #120]	@ (800897c <MIC_Print+0x210>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4927      	ldr	r1, [pc, #156]	@ (80089a4 <MIC_Print+0x238>)
 8008906:	1c18      	adds	r0, r3, #0
 8008908:	f7f7 fe12 	bl	8000530 <__aeabi_fcmplt>
 800890c:	1e03      	subs	r3, r0, #0
 800890e:	d00c      	beq.n	800892a <MIC_Print+0x1be>
 8008910:	4b1a      	ldr	r3, [pc, #104]	@ (800897c <MIC_Print+0x210>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4924      	ldr	r1, [pc, #144]	@ (80089a8 <MIC_Print+0x23c>)
 8008916:	1c18      	adds	r0, r3, #0
 8008918:	f7f7 fe28 	bl	800056c <__aeabi_fcmpge>
 800891c:	1e03      	subs	r3, r0, #0
 800891e:	d004      	beq.n	800892a <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8008920:	2201      	movs	r2, #1
 8008922:	2101      	movs	r1, #1
 8008924:	2000      	movs	r0, #0
 8008926:	f003 ffc5 	bl	800c8b4 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 800892a:	4b14      	ldr	r3, [pc, #80]	@ (800897c <MIC_Print+0x210>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	491e      	ldr	r1, [pc, #120]	@ (80089a8 <MIC_Print+0x23c>)
 8008930:	1c18      	adds	r0, r3, #0
 8008932:	f7f7 fdfd 	bl	8000530 <__aeabi_fcmplt>
 8008936:	1e03      	subs	r3, r0, #0
 8008938:	d00c      	beq.n	8008954 <MIC_Print+0x1e8>
 800893a:	4b10      	ldr	r3, [pc, #64]	@ (800897c <MIC_Print+0x210>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	491b      	ldr	r1, [pc, #108]	@ (80089ac <MIC_Print+0x240>)
 8008940:	1c18      	adds	r0, r3, #0
 8008942:	f7f7 fe13 	bl	800056c <__aeabi_fcmpge>
 8008946:	1e03      	subs	r3, r0, #0
 8008948:	d004      	beq.n	8008954 <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 800894a:	2201      	movs	r2, #1
 800894c:	2100      	movs	r1, #0
 800894e:	2001      	movs	r0, #1
 8008950:	f003 ffb0 	bl	800c8b4 <SetDBLED>
  }
  if(dBc < 35){//off
 8008954:	4b09      	ldr	r3, [pc, #36]	@ (800897c <MIC_Print+0x210>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4914      	ldr	r1, [pc, #80]	@ (80089ac <MIC_Print+0x240>)
 800895a:	1c18      	adds	r0, r3, #0
 800895c:	f7f7 fde8 	bl	8000530 <__aeabi_fcmplt>
 8008960:	1e03      	subs	r3, r0, #0
 8008962:	d100      	bne.n	8008966 <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 8008964:	e004      	b.n	8008970 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 8008966:	2200      	movs	r2, #0
 8008968:	2100      	movs	r1, #0
 800896a:	2000      	movs	r0, #0
 800896c:	f003 ffa2 	bl	800c8b4 <SetDBLED>
}
 8008970:	46c0      	nop			@ (mov r8, r8)
 8008972:	46bd      	mov	sp, r7
 8008974:	b002      	add	sp, #8
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000fd0 	.word	0x20000fd0
 800897c:	20000fa0 	.word	0x20000fa0
 8008980:	20000fd4 	.word	0x20000fd4
 8008984:	20000fa4 	.word	0x20000fa4
 8008988:	20000fd5 	.word	0x20000fd5
 800898c:	20000fcc 	.word	0x20000fcc
 8008990:	41200000 	.word	0x41200000
 8008994:	42b40000 	.word	0x42b40000
 8008998:	42a00000 	.word	0x42a00000
 800899c:	428c0000 	.word	0x428c0000
 80089a0:	42700000 	.word	0x42700000
 80089a4:	42480000 	.word	0x42480000
 80089a8:	42200000 	.word	0x42200000
 80089ac:	420c0000 	.word	0x420c0000

080089b0 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80089b6:	4b11      	ldr	r3, [pc, #68]	@ (80089fc <MIC_TestMeasurementDone+0x4c>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4a10      	ldr	r2, [pc, #64]	@ (8008a00 <MIC_TestMeasurementDone+0x50>)
 80089be:	4911      	ldr	r1, [pc, #68]	@ (8008a04 <MIC_TestMeasurementDone+0x54>)
 80089c0:	2002      	movs	r0, #2
 80089c2:	f004 ff07 	bl	800d7d4 <CreateLine>
  if(DataReady) {
 80089c6:	4b0d      	ldr	r3, [pc, #52]	@ (80089fc <MIC_TestMeasurementDone+0x4c>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d010      	beq.n	80089f2 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 80089d0:	1dfb      	adds	r3, r7, #7
 80089d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008a08 <MIC_TestMeasurementDone+0x58>)
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80089d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008a08 <MIC_TestMeasurementDone+0x58>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	4a0b      	ldr	r2, [pc, #44]	@ (8008a0c <MIC_TestMeasurementDone+0x5c>)
 80089e0:	4908      	ldr	r1, [pc, #32]	@ (8008a04 <MIC_TestMeasurementDone+0x54>)
 80089e2:	2002      	movs	r0, #2
 80089e4:	f004 fef6 	bl	800d7d4 <CreateLine>
    ResetMICIndicator();
 80089e8:	f004 f828 	bl	800ca3c <ResetMICIndicator>
    return Check;
 80089ec:	1dfb      	adds	r3, r7, #7
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	e000      	b.n	80089f4 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	0018      	movs	r0, r3
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b002      	add	sp, #8
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	200012dc 	.word	0x200012dc
 8008a00:	0802320c 	.word	0x0802320c
 8008a04:	08023238 	.word	0x08023238
 8008a08:	200012dd 	.word	0x200012dd
 8008a0c:	0802323c 	.word	0x0802323c

08008a10 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008a10:	b40f      	push	{r0, r1, r2, r3}
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008a18:	2314      	movs	r3, #20
 8008a1a:	18fb      	adds	r3, r7, r3
 8008a1c:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	2180      	movs	r1, #128	@ 0x80
 8008a24:	0089      	lsls	r1, r1, #2
 8008a26:	480a      	ldr	r0, [pc, #40]	@ (8008a50 <print+0x40>)
 8008a28:	f016 fbca 	bl	801f1c0 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008a2c:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <print+0x40>)
 8008a2e:	0018      	movs	r0, r3
 8008a30:	f7f7 fb9c 	bl	800016c <strlen>
 8008a34:	0003      	movs	r3, r0
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	4b05      	ldr	r3, [pc, #20]	@ (8008a50 <print+0x40>)
 8008a3a:	0011      	movs	r1, r2
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7ff f98b 	bl	8007d58 <printString>
}
 8008a42:	46c0      	nop			@ (mov r8, r8)
 8008a44:	46bd      	mov	sp, r7
 8008a46:	b002      	add	sp, #8
 8008a48:	bc80      	pop	{r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	b004      	add	sp, #16
 8008a4e:	4718      	bx	r3
 8008a50:	20000fd8 	.word	0x20000fd8

08008a54 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008a5a:	1d3b      	adds	r3, r7, #4
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	2314      	movs	r3, #20
 8008a60:	001a      	movs	r2, r3
 8008a62:	2100      	movs	r1, #0
 8008a64:	f016 fc58 	bl	801f318 <memset>
  RTC_DateTypeDef sDate = {0};
 8008a68:	003b      	movs	r3, r7
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a70:	4a2e      	ldr	r2, [pc, #184]	@ (8008b2c <MX_RTC_Init+0xd8>)
 8008a72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008a74:	4b2c      	ldr	r3, [pc, #176]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a7c:	227f      	movs	r2, #127	@ 0x7f
 8008a7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008a80:	4b29      	ldr	r3, [pc, #164]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a82:	22ff      	movs	r2, #255	@ 0xff
 8008a84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008a86:	4b28      	ldr	r3, [pc, #160]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008a8c:	4b26      	ldr	r3, [pc, #152]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008a92:	4b25      	ldr	r3, [pc, #148]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008a98:	4b23      	ldr	r3, [pc, #140]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008a9e:	4b22      	ldr	r3, [pc, #136]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f00c fa93 	bl	8014fcc <HAL_RTC_Init>
 8008aa6:	1e03      	subs	r3, r0, #0
 8008aa8:	d001      	beq.n	8008aae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008aaa:	f7ff fa15 	bl	8007ed8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008aae:	1d3b      	adds	r3, r7, #4
 8008ab0:	220d      	movs	r2, #13
 8008ab2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008ab4:	1d3b      	adds	r3, r7, #4
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008aba:	1d3b      	adds	r3, r7, #4
 8008abc:	2200      	movs	r2, #0
 8008abe:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008ac0:	1d3b      	adds	r3, r7, #4
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008ac6:	1d3b      	adds	r3, r7, #4
 8008ac8:	2200      	movs	r2, #0
 8008aca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008acc:	1d39      	adds	r1, r7, #4
 8008ace:	4b16      	ldr	r3, [pc, #88]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f00c fb16 	bl	8015104 <HAL_RTC_SetTime>
 8008ad8:	1e03      	subs	r3, r0, #0
 8008ada:	d001      	beq.n	8008ae0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008adc:	f7ff f9fc 	bl	8007ed8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008ae0:	003b      	movs	r3, r7
 8008ae2:	2206      	movs	r2, #6
 8008ae4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008ae6:	003b      	movs	r3, r7
 8008ae8:	2211      	movs	r2, #17
 8008aea:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008aec:	003b      	movs	r3, r7
 8008aee:	2217      	movs	r2, #23
 8008af0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008af2:	003b      	movs	r3, r7
 8008af4:	2218      	movs	r2, #24
 8008af6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008af8:	0039      	movs	r1, r7
 8008afa:	4b0b      	ldr	r3, [pc, #44]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	0018      	movs	r0, r3
 8008b00:	f00c fc08 	bl	8015314 <HAL_RTC_SetDate>
 8008b04:	1e03      	subs	r3, r0, #0
 8008b06:	d001      	beq.n	8008b0c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008b08:	f7ff f9e6 	bl	8007ed8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008b0c:	4b06      	ldr	r3, [pc, #24]	@ (8008b28 <MX_RTC_Init+0xd4>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	0018      	movs	r0, r3
 8008b14:	f00c fdb8 	bl	8015688 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008b18:	1e03      	subs	r3, r0, #0
 8008b1a:	d001      	beq.n	8008b20 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008b1c:	f7ff f9dc 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008b20:	46c0      	nop			@ (mov r8, r8)
 8008b22:	46bd      	mov	sp, r7
 8008b24:	b006      	add	sp, #24
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	200011d8 	.word	0x200011d8
 8008b2c:	40002800 	.word	0x40002800

08008b30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b68 <HAL_RTC_MspInit+0x38>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d10e      	bne.n	8008b60 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008b42:	4b0a      	ldr	r3, [pc, #40]	@ (8008b6c <HAL_RTC_MspInit+0x3c>)
 8008b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b46:	4b09      	ldr	r3, [pc, #36]	@ (8008b6c <HAL_RTC_MspInit+0x3c>)
 8008b48:	2180      	movs	r1, #128	@ 0x80
 8008b4a:	02c9      	lsls	r1, r1, #11
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008b50:	2200      	movs	r2, #0
 8008b52:	2100      	movs	r1, #0
 8008b54:	2002      	movs	r0, #2
 8008b56:	f005 fe6d 	bl	800e834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008b5a:	2002      	movs	r0, #2
 8008b5c:	f005 fe7f 	bl	800e85e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008b60:	46c0      	nop			@ (mov r8, r8)
 8008b62:	46bd      	mov	sp, r7
 8008b64:	b002      	add	sp, #8
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40002800 	.word	0x40002800
 8008b6c:	40021000 	.word	0x40021000

08008b70 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
static sen5x_states samplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008b78:	f005 f9ca 	bl	800df10 <HAL_GetTick>
 8008b7c:	0002      	movs	r2, r0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	18d2      	adds	r2, r2, r3
 8008b82:	4b03      	ldr	r3, [pc, #12]	@ (8008b90 <setsen5xReadTimer+0x20>)
 8008b84:	601a      	str	r2, [r3, #0]
}
 8008b86:	46c0      	nop			@ (mov r8, r8)
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	b002      	add	sp, #8
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	46c0      	nop			@ (mov r8, r8)
 8008b90:	20001200 	.word	0x20001200

08008b94 <enable_sen5x>:

bool enable_sen5x(uint32_t sleepTime) {
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  if (sen5x_Present) {
 8008b9c:	4b19      	ldr	r3, [pc, #100]	@ (8008c04 <enable_sen5x+0x70>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d026      	beq.n	8008bf2 <enable_sen5x+0x5e>
    sen5x_Enable = !sen5x_Enable;
 8008ba4:	4b18      	ldr	r3, [pc, #96]	@ (8008c08 <enable_sen5x+0x74>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	1e5a      	subs	r2, r3, #1
 8008baa:	4193      	sbcs	r3, r2
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4053      	eors	r3, r2
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	1c1a      	adds	r2, r3, #0
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4013      	ands	r3, r2
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	4b12      	ldr	r3, [pc, #72]	@ (8008c08 <enable_sen5x+0x74>)
 8008bbe:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008bc0:	4b11      	ldr	r3, [pc, #68]	@ (8008c08 <enable_sen5x+0x74>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <enable_sen5x+0x4a>
      setsen5xReadTimer(0);
 8008bc8:	2000      	movs	r0, #0
 8008bca:	f7ff ffd1 	bl	8008b70 <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 8008bce:	4b0e      	ldr	r3, [pc, #56]	@ (8008c08 <enable_sen5x+0x74>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8008c0c <enable_sen5x+0x78>)
 8008bd4:	490e      	ldr	r1, [pc, #56]	@ (8008c10 <enable_sen5x+0x7c>)
 8008bd6:	2003      	movs	r0, #3
 8008bd8:	f004 fdfc 	bl	800d7d4 <CreateLine>
 8008bdc:	e009      	b.n	8008bf2 <enable_sen5x+0x5e>
    }
    else {
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008bde:	f005 f997 	bl	800df10 <HAL_GetTick>
 8008be2:	0002      	movs	r2, r0
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	490b      	ldr	r1, [pc, #44]	@ (8008c14 <enable_sen5x+0x80>)
 8008be8:	434b      	muls	r3, r1
 8008bea:	18d3      	adds	r3, r2, r3
 8008bec:	0018      	movs	r0, r3
 8008bee:	f7ff ffbf 	bl	8008b70 <setsen5xReadTimer>
    }
  }
  samplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008bf2:	4b09      	ldr	r3, [pc, #36]	@ (8008c18 <enable_sen5x+0x84>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008bf8:	4b03      	ldr	r3, [pc, #12]	@ (8008c08 <enable_sen5x+0x74>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
}
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	b002      	add	sp, #8
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20000f1c 	.word	0x20000f1c
 8008c08:	200011fe 	.word	0x200011fe
 8008c0c:	08023254 	.word	0x08023254
 8008c10:	08023274 	.word	0x08023274
 8008c14:	00000bb8 	.word	0x00000bb8
 8008c18:	20000080 	.word	0x20000080

08008c1c <sen5x_Power_On>:
void sen5x_Power_On(void) {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008c20:	4a0a      	ldr	r2, [pc, #40]	@ (8008c4c <sen5x_Power_On+0x30>)
 8008c22:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <sen5x_Power_On+0x34>)
 8008c24:	0019      	movs	r1, r3
 8008c26:	2003      	movs	r0, #3
 8008c28:	f004 fdd4 	bl	800d7d4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008c2c:	2380      	movs	r3, #128	@ 0x80
 8008c2e:	015b      	lsls	r3, r3, #5
 8008c30:	4808      	ldr	r0, [pc, #32]	@ (8008c54 <sen5x_Power_On+0x38>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	0019      	movs	r1, r3
 8008c36:	f006 fbe6 	bl	800f406 <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008c3a:	4b07      	ldr	r3, [pc, #28]	@ (8008c58 <sen5x_Power_On+0x3c>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 8008c40:	20c8      	movs	r0, #200	@ 0xc8
 8008c42:	f005 f96f 	bl	800df24 <HAL_Delay>
  return;
 8008c46:	46c0      	nop			@ (mov r8, r8)
}
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	08023278 	.word	0x08023278
 8008c50:	08023274 	.word	0x08023274
 8008c54:	50000800 	.word	0x50000800
 8008c58:	200011fd 	.word	0x200011fd

08008c5c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008c60:	4a09      	ldr	r2, [pc, #36]	@ (8008c88 <sen5x_Power_Off+0x2c>)
 8008c62:	4b0a      	ldr	r3, [pc, #40]	@ (8008c8c <sen5x_Power_Off+0x30>)
 8008c64:	0019      	movs	r1, r3
 8008c66:	2003      	movs	r0, #3
 8008c68:	f004 fdb4 	bl	800d7d4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008c6c:	2380      	movs	r3, #128	@ 0x80
 8008c6e:	015b      	lsls	r3, r3, #5
 8008c70:	4807      	ldr	r0, [pc, #28]	@ (8008c90 <sen5x_Power_Off+0x34>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	0019      	movs	r1, r3
 8008c76:	f006 fbc6 	bl	800f406 <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008c7a:	4b06      	ldr	r3, [pc, #24]	@ (8008c94 <sen5x_Power_Off+0x38>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
  return;
 8008c80:	46c0      	nop			@ (mov r8, r8)
}
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	46c0      	nop			@ (mov r8, r8)
 8008c88:	08023294 	.word	0x08023294
 8008c8c:	08023274 	.word	0x08023274
 8008c90:	50000800 	.word	0x50000800
 8008c94:	200011fd 	.word	0x200011fd

08008c98 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008c9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ca8 <reset_fanCleaningDone+0x10>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]
}
 8008ca2:	46c0      	nop			@ (mov r8, r8)
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	200011fc 	.word	0x200011fc

08008cac <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cae:	b09b      	sub	sp, #108	@ 0x6c
 8008cb0:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008cb2:	2456      	movs	r4, #86	@ 0x56
 8008cb4:	193b      	adds	r3, r7, r4
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008cba:	2355      	movs	r3, #85	@ 0x55
 8008cbc:	18fb      	adds	r3, r7, r3
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 8008cc2:	2354      	movs	r3, #84	@ 0x54
 8008cc4:	18fb      	adds	r3, r7, r3
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008cca:	f7ff ffa7 	bl	8008c1c <sen5x_Power_On>

  error = sen5x_device_reset();
 8008cce:	0025      	movs	r5, r4
 8008cd0:	193c      	adds	r4, r7, r4
 8008cd2:	f000 ffed 	bl	8009cb0 <sen5x_device_reset>
 8008cd6:	0003      	movs	r3, r0
 8008cd8:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008cda:	002c      	movs	r4, r5
 8008cdc:	193b      	adds	r3, r7, r4
 8008cde:	2200      	movs	r2, #0
 8008ce0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008ce6:	193b      	adds	r3, r7, r4
 8008ce8:	2200      	movs	r2, #0
 8008cea:	5e9b      	ldrsh	r3, [r3, r2]
 8008cec:	4a6d      	ldr	r2, [pc, #436]	@ (8008ea4 <probe_sen5x+0x1f8>)
 8008cee:	496e      	ldr	r1, [pc, #440]	@ (8008ea8 <probe_sen5x+0x1fc>)
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	f004 fd6f 	bl	800d7d4 <CreateLine>
      return error;
 8008cf6:	193b      	adds	r3, r7, r4
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	5e9b      	ldrsh	r3, [r3, r2]
 8008cfc:	e0ce      	b.n	8008e9c <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008cfe:	2556      	movs	r5, #86	@ 0x56
 8008d00:	197c      	adds	r4, r7, r5
 8008d02:	2355      	movs	r3, #85	@ 0x55
 8008d04:	18fb      	adds	r3, r7, r3
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	232c      	movs	r3, #44	@ 0x2c
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	0011      	movs	r1, r2
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f000 feba 	bl	8009a88 <sen5x_get_serial_number>
 8008d14:	0003      	movs	r3, r0
 8008d16:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008d18:	197b      	adds	r3, r7, r5
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	5e9b      	ldrsh	r3, [r3, r2]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00b      	beq.n	8008d3a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008d22:	197b      	adds	r3, r7, r5
 8008d24:	2200      	movs	r2, #0
 8008d26:	5e9a      	ldrsh	r2, [r3, r2]
 8008d28:	4b60      	ldr	r3, [pc, #384]	@ (8008eac <probe_sen5x+0x200>)
 8008d2a:	0011      	movs	r1, r2
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f016 f93f 	bl	801efb0 <iprintf>
      return error;
 8008d32:	197b      	adds	r3, r7, r5
 8008d34:	2200      	movs	r2, #0
 8008d36:	5e9b      	ldrsh	r3, [r3, r2]
 8008d38:	e0b0      	b.n	8008e9c <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008d3a:	232c      	movs	r3, #44	@ 0x2c
 8008d3c:	18fa      	adds	r2, r7, r3
 8008d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8008eb0 <probe_sen5x+0x204>)
 8008d40:	0011      	movs	r1, r2
 8008d42:	0018      	movs	r0, r3
 8008d44:	f016 f934 	bl	801efb0 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008d48:	2556      	movs	r5, #86	@ 0x56
 8008d4a:	197c      	adds	r4, r7, r5
 8008d4c:	2354      	movs	r3, #84	@ 0x54
 8008d4e:	18fb      	adds	r3, r7, r3
 8008d50:	781a      	ldrb	r2, [r3, #0]
 8008d52:	230c      	movs	r3, #12
 8008d54:	18fb      	adds	r3, r7, r3
 8008d56:	0011      	movs	r1, r2
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 fe3f 	bl	80099dc <sen5x_get_product_name>
 8008d5e:	0003      	movs	r3, r0
 8008d60:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008d62:	197b      	adds	r3, r7, r5
 8008d64:	2200      	movs	r2, #0
 8008d66:	5e9b      	ldrsh	r3, [r3, r2]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00b      	beq.n	8008d84 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008d6c:	197b      	adds	r3, r7, r5
 8008d6e:	2200      	movs	r2, #0
 8008d70:	5e9a      	ldrsh	r2, [r3, r2]
 8008d72:	4b50      	ldr	r3, [pc, #320]	@ (8008eb4 <probe_sen5x+0x208>)
 8008d74:	0011      	movs	r1, r2
 8008d76:	0018      	movs	r0, r3
 8008d78:	f016 f91a 	bl	801efb0 <iprintf>
      return error;
 8008d7c:	197b      	adds	r3, r7, r5
 8008d7e:	2200      	movs	r2, #0
 8008d80:	5e9b      	ldrsh	r3, [r3, r2]
 8008d82:	e08b      	b.n	8008e9c <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008d84:	230c      	movs	r3, #12
 8008d86:	18fa      	adds	r2, r7, r3
 8008d88:	4b4b      	ldr	r3, [pc, #300]	@ (8008eb8 <probe_sen5x+0x20c>)
 8008d8a:	0011      	movs	r1, r2
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f016 f90f 	bl	801efb0 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008d92:	2656      	movs	r6, #86	@ 0x56
 8008d94:	19bc      	adds	r4, r7, r6
 8008d96:	2308      	movs	r3, #8
 8008d98:	18fd      	adds	r5, r7, r3
 8008d9a:	2309      	movs	r3, #9
 8008d9c:	18fa      	adds	r2, r7, r3
 8008d9e:	230a      	movs	r3, #10
 8008da0:	18f9      	adds	r1, r7, r3
 8008da2:	230b      	movs	r3, #11
 8008da4:	18f8      	adds	r0, r7, r3
 8008da6:	1d7b      	adds	r3, r7, #5
 8008da8:	9302      	str	r3, [sp, #8]
 8008daa:	1dbb      	adds	r3, r7, #6
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	1dfb      	adds	r3, r7, #7
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	002b      	movs	r3, r5
 8008db4:	f000 febe 	bl	8009b34 <sen5x_get_version>
 8008db8:	0003      	movs	r3, r0
 8008dba:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008dbc:	19bb      	adds	r3, r7, r6
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	5e9b      	ldrsh	r3, [r3, r2]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00b      	beq.n	8008dde <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008dc6:	19bb      	adds	r3, r7, r6
 8008dc8:	2200      	movs	r2, #0
 8008dca:	5e9a      	ldrsh	r2, [r3, r2]
 8008dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8008ebc <probe_sen5x+0x210>)
 8008dce:	0011      	movs	r1, r2
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f016 f8ed 	bl	801efb0 <iprintf>
      return error;
 8008dd6:	19bb      	adds	r3, r7, r6
 8008dd8:	2200      	movs	r2, #0
 8008dda:	5e9b      	ldrsh	r3, [r3, r2]
 8008ddc:	e05e      	b.n	8008e9c <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008dde:	230b      	movs	r3, #11
 8008de0:	18fb      	adds	r3, r7, r3
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	0019      	movs	r1, r3
 8008de6:	230a      	movs	r3, #10
 8008de8:	18fb      	adds	r3, r7, r3
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	001a      	movs	r2, r3
 8008dee:	2308      	movs	r3, #8
 8008df0:	18fb      	adds	r3, r7, r3
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	001c      	movs	r4, r3
 8008df6:	1dfb      	adds	r3, r7, #7
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	4831      	ldr	r0, [pc, #196]	@ (8008ec0 <probe_sen5x+0x214>)
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	0023      	movs	r3, r4
 8008e00:	f016 f8d6 	bl	801efb0 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008e04:	2300      	movs	r3, #0
 8008e06:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008e08:	264e      	movs	r6, #78	@ 0x4e
 8008e0a:	19bb      	adds	r3, r7, r6
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008e10:	234c      	movs	r3, #76	@ 0x4c
 8008e12:	18fb      	adds	r3, r7, r3
 8008e14:	2200      	movs	r2, #0
 8008e16:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008e18:	492a      	ldr	r1, [pc, #168]	@ (8008ec4 <probe_sen5x+0x218>)
 8008e1a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008e1c:	f7f8 f8c0 	bl	8000fa0 <__aeabi_fmul>
 8008e20:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008e22:	1c18      	adds	r0, r3, #0
 8008e24:	f7f8 fbb4 	bl	8001590 <__aeabi_f2iz>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	b218      	sxth	r0, r3
 8008e2c:	2556      	movs	r5, #86	@ 0x56
 8008e2e:	197c      	adds	r4, r7, r5
 8008e30:	234c      	movs	r3, #76	@ 0x4c
 8008e32:	18fb      	adds	r3, r7, r3
 8008e34:	881a      	ldrh	r2, [r3, #0]
 8008e36:	19bb      	adds	r3, r7, r6
 8008e38:	2100      	movs	r1, #0
 8008e3a:	5e5b      	ldrsh	r3, [r3, r1]
 8008e3c:	0019      	movs	r1, r3
 8008e3e:	f000 fd69 	bl	8009914 <sen5x_set_temperature_offset_parameters>
 8008e42:	0003      	movs	r3, r0
 8008e44:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008e46:	197b      	adds	r3, r7, r5
 8008e48:	2200      	movs	r2, #0
 8008e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00b      	beq.n	8008e68 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008e50:	197b      	adds	r3, r7, r5
 8008e52:	2200      	movs	r2, #0
 8008e54:	5e9b      	ldrsh	r3, [r3, r2]
 8008e56:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec8 <probe_sen5x+0x21c>)
 8008e58:	4913      	ldr	r1, [pc, #76]	@ (8008ea8 <probe_sen5x+0x1fc>)
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	f004 fcba 	bl	800d7d4 <CreateLine>
      return error;
 8008e60:	197b      	adds	r3, r7, r5
 8008e62:	2200      	movs	r2, #0
 8008e64:	5e9b      	ldrsh	r3, [r3, r2]
 8008e66:	e019      	b.n	8008e9c <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008e68:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008e6a:	f7fa fafb 	bl	8003464 <__aeabi_f2d>
 8008e6e:	0002      	movs	r2, r0
 8008e70:	000b      	movs	r3, r1
 8008e72:	4816      	ldr	r0, [pc, #88]	@ (8008ecc <probe_sen5x+0x220>)
 8008e74:	4916      	ldr	r1, [pc, #88]	@ (8008ed0 <probe_sen5x+0x224>)
 8008e76:	9200      	str	r2, [sp, #0]
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	0002      	movs	r2, r0
 8008e7c:	2002      	movs	r0, #2
 8008e7e:	f004 fca9 	bl	800d7d4 <CreateLine>
  }
  sen5x_Power_Off();
 8008e82:	f7ff feeb 	bl	8008c5c <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008e86:	f005 f843 	bl	800df10 <HAL_GetTick>
 8008e8a:	0003      	movs	r3, r0
 8008e8c:	4a11      	ldr	r2, [pc, #68]	@ (8008ed4 <probe_sen5x+0x228>)
 8008e8e:	189a      	adds	r2, r3, r2
 8008e90:	4b11      	ldr	r3, [pc, #68]	@ (8008ed8 <probe_sen5x+0x22c>)
 8008e92:	601a      	str	r2, [r3, #0]
  return error;
 8008e94:	2356      	movs	r3, #86	@ 0x56
 8008e96:	18fb      	adds	r3, r7, r3
 8008e98:	2200      	movs	r2, #0
 8008e9a:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008e9c:	0018      	movs	r0, r3
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	b017      	add	sp, #92	@ 0x5c
 8008ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea4:	080232b0 	.word	0x080232b0
 8008ea8:	080232dc 	.word	0x080232dc
 8008eac:	080232e0 	.word	0x080232e0
 8008eb0:	08023310 	.word	0x08023310
 8008eb4:	08023324 	.word	0x08023324
 8008eb8:	08023354 	.word	0x08023354
 8008ebc:	08023368 	.word	0x08023368
 8008ec0:	08023394 	.word	0x08023394
 8008ec4:	43480000 	.word	0x43480000
 8008ec8:	080233b8 	.word	0x080233b8
 8008ecc:	080233f8 	.word	0x080233f8
 8008ed0:	08023430 	.word	0x08023430
 8008ed4:	000061a8 	.word	0x000061a8
 8008ed8:	20001200 	.word	0x20001200

08008edc <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008edc:	b590      	push	{r4, r7, lr}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8008ee2:	1dbb      	adds	r3, r7, #6
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 8008ee8:	1dbc      	adds	r4, r7, #6
 8008eea:	f000 fb9f 	bl	800962c <sen5x_start_measurement>
 8008eee:	0003      	movs	r3, r0
 8008ef0:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008ef2:	1dbb      	adds	r3, r7, #6
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d007      	beq.n	8008f0c <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008efc:	1dbb      	adds	r3, r7, #6
 8008efe:	2200      	movs	r2, #0
 8008f00:	5e9b      	ldrsh	r3, [r3, r2]
 8008f02:	4a06      	ldr	r2, [pc, #24]	@ (8008f1c <sen5x_lightup_measurement+0x40>)
 8008f04:	4906      	ldr	r1, [pc, #24]	@ (8008f20 <sen5x_lightup_measurement+0x44>)
 8008f06:	2001      	movs	r0, #1
 8008f08:	f004 fc64 	bl	800d7d4 <CreateLine>
  }
  return error;
 8008f0c:	1dbb      	adds	r3, r7, #6
 8008f0e:	2200      	movs	r2, #0
 8008f10:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008f12:	0018      	movs	r0, r3
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b003      	add	sp, #12
 8008f18:	bd90      	pop	{r4, r7, pc}
 8008f1a:	46c0      	nop			@ (mov r8, r8)
 8008f1c:	08023434 	.word	0x08023434
 8008f20:	080232dc 	.word	0x080232dc

08008f24 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008f24:	b590      	push	{r4, r7, lr}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008f2a:	1dbb      	adds	r3, r7, #6
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008f30:	1dbc      	adds	r4, r7, #6
 8008f32:	f000 fba9 	bl	8009688 <sen5x_stop_measurement>
 8008f36:	0003      	movs	r3, r0
 8008f38:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008f3a:	1dbb      	adds	r3, r7, #6
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008f44:	1dbb      	adds	r3, r7, #6
 8008f46:	2200      	movs	r2, #0
 8008f48:	5e9b      	ldrsh	r3, [r3, r2]
 8008f4a:	4a06      	ldr	r2, [pc, #24]	@ (8008f64 <sen5x_extinguish_measurement+0x40>)
 8008f4c:	4906      	ldr	r1, [pc, #24]	@ (8008f68 <sen5x_extinguish_measurement+0x44>)
 8008f4e:	2001      	movs	r0, #1
 8008f50:	f004 fc40 	bl	800d7d4 <CreateLine>
  }
  return error;
 8008f54:	1dbb      	adds	r3, r7, #6
 8008f56:	2200      	movs	r2, #0
 8008f58:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	b003      	add	sp, #12
 8008f60:	bd90      	pop	{r4, r7, pc}
 8008f62:	46c0      	nop			@ (mov r8, r8)
 8008f64:	08023464 	.word	0x08023464
 8008f68:	080232dc 	.word	0x080232dc

08008f6c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8008f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6e:	b08d      	sub	sp, #52	@ 0x34
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8008f74:	261e      	movs	r6, #30
 8008f76:	19bb      	adds	r3, r7, r6
 8008f78:	2200      	movs	r2, #0
 8008f7a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8008f7c:	19bc      	adds	r4, r7, r6
 8008f7e:	2316      	movs	r3, #22
 8008f80:	18fd      	adds	r5, r7, r3
 8008f82:	2318      	movs	r3, #24
 8008f84:	18fa      	adds	r2, r7, r3
 8008f86:	231a      	movs	r3, #26
 8008f88:	18f9      	adds	r1, r7, r3
 8008f8a:	231c      	movs	r3, #28
 8008f8c:	18f8      	adds	r0, r7, r3
 8008f8e:	230e      	movs	r3, #14
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	2310      	movs	r3, #16
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	2312      	movs	r3, #18
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	2314      	movs	r3, #20
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	002b      	movs	r3, r5
 8008fa8:	f000 fbf0 	bl	800978c <sen5x_read_measured_values>
 8008fac:	0003      	movs	r3, r0
 8008fae:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8008fb0:	19bb      	adds	r3, r7, r6
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	5e9b      	ldrsh	r3, [r3, r2]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <sen5x_read_measurement+0x56>
    return error;
 8008fba:	19bb      	adds	r3, r7, r6
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	5e9b      	ldrsh	r3, [r3, r2]
 8008fc0:	e034      	b.n	800902c <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8008fc2:	231c      	movs	r3, #28
 8008fc4:	18fb      	adds	r3, r7, r3
 8008fc6:	881a      	ldrh	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8008fcc:	211a      	movs	r1, #26
 8008fce:	187b      	adds	r3, r7, r1
 8008fd0:	881a      	ldrh	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8008fd6:	2318      	movs	r3, #24
 8008fd8:	18fb      	adds	r3, r7, r3
 8008fda:	881a      	ldrh	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8008fe0:	2016      	movs	r0, #22
 8008fe2:	183b      	adds	r3, r7, r0
 8008fe4:	881a      	ldrh	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8008fea:	2314      	movs	r3, #20
 8008fec:	18fb      	adds	r3, r7, r3
 8008fee:	2200      	movs	r2, #0
 8008ff0:	5e9a      	ldrsh	r2, [r3, r2]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8008ff6:	2312      	movs	r3, #18
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	5e9a      	ldrsh	r2, [r3, r2]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8009002:	2310      	movs	r3, #16
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	2200      	movs	r2, #0
 8009008:	5e9a      	ldrsh	r2, [r3, r2]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800900e:	230e      	movs	r3, #14
 8009010:	18fb      	adds	r3, r7, r3
 8009012:	2200      	movs	r2, #0
 8009014:	5e9a      	ldrsh	r2, [r3, r2]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 800901a:	187b      	adds	r3, r7, r1
 800901c:	881a      	ldrh	r2, [r3, #0]
 800901e:	183b      	adds	r3, r7, r0
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	0019      	movs	r1, r3
 8009024:	0010      	movs	r0, r2
 8009026:	f7fa fc93 	bl	8003950 <setPMs>
  return 0;
 800902a:	2300      	movs	r3, #0
}
 800902c:	0018      	movs	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	b009      	add	sp, #36	@ 0x24
 8009032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009034 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 800903a:	1dbb      	adds	r3, r7, #6
 800903c:	2200      	movs	r2, #0
 800903e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
    if (sen5x_read_measurement(&sen5x_data)) {
 8009040:	4b6b      	ldr	r3, [pc, #428]	@ (80091f0 <sen5x_measurement+0x1bc>)
 8009042:	0018      	movs	r0, r3
 8009044:	f7ff ff92 	bl	8008f6c <sen5x_read_measurement>
 8009048:	1e03      	subs	r3, r0, #0
 800904a:	d008      	beq.n	800905e <sen5x_measurement+0x2a>
      Error("Error executing sen5x_read_measured_values(): %i", error);
 800904c:	1dbb      	adds	r3, r7, #6
 800904e:	2200      	movs	r2, #0
 8009050:	5e9b      	ldrsh	r3, [r3, r2]
 8009052:	4a68      	ldr	r2, [pc, #416]	@ (80091f4 <sen5x_measurement+0x1c0>)
 8009054:	4968      	ldr	r1, [pc, #416]	@ (80091f8 <sen5x_measurement+0x1c4>)
 8009056:	2001      	movs	r0, #1
 8009058:	f004 fbbc 	bl	800d7d4 <CreateLine>
 800905c:	e0c1      	b.n	80091e2 <sen5x_measurement+0x1ae>
    }
    else {
      if (sen5xSamples == 0) {
 800905e:	4b67      	ldr	r3, [pc, #412]	@ (80091fc <sen5x_measurement+0x1c8>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <sen5x_measurement+0x36>
      return 0; // first sample reads zero's
 8009066:	2300      	movs	r3, #0
 8009068:	e0be      	b.n	80091e8 <sen5x_measurement+0x1b4>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800906a:	4b61      	ldr	r3, [pc, #388]	@ (80091f0 <sen5x_measurement+0x1bc>)
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	0018      	movs	r0, r3
 8009070:	f7f8 faae 	bl	80015d0 <__aeabi_i2f>
 8009074:	1c03      	adds	r3, r0, #0
 8009076:	4962      	ldr	r1, [pc, #392]	@ (8009200 <sen5x_measurement+0x1cc>)
 8009078:	1c18      	adds	r0, r3, #0
 800907a:	f7f7 fdab 	bl	8000bd4 <__aeabi_fdiv>
 800907e:	1c03      	adds	r3, r0, #0
 8009080:	1c18      	adds	r0, r3, #0
 8009082:	f7fa f9ef 	bl	8003464 <__aeabi_f2d>
 8009086:	0002      	movs	r2, r0
 8009088:	000b      	movs	r3, r1
 800908a:	495e      	ldr	r1, [pc, #376]	@ (8009204 <sen5x_measurement+0x1d0>)
 800908c:	0008      	movs	r0, r1
 800908e:	f015 ff8f 	bl	801efb0 <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009092:	4b57      	ldr	r3, [pc, #348]	@ (80091f0 <sen5x_measurement+0x1bc>)
 8009094:	885b      	ldrh	r3, [r3, #2]
 8009096:	0018      	movs	r0, r3
 8009098:	f7f8 fa9a 	bl	80015d0 <__aeabi_i2f>
 800909c:	1c03      	adds	r3, r0, #0
 800909e:	4958      	ldr	r1, [pc, #352]	@ (8009200 <sen5x_measurement+0x1cc>)
 80090a0:	1c18      	adds	r0, r3, #0
 80090a2:	f7f7 fd97 	bl	8000bd4 <__aeabi_fdiv>
 80090a6:	1c03      	adds	r3, r0, #0
 80090a8:	1c18      	adds	r0, r3, #0
 80090aa:	f7fa f9db 	bl	8003464 <__aeabi_f2d>
 80090ae:	0002      	movs	r2, r0
 80090b0:	000b      	movs	r3, r1
 80090b2:	4955      	ldr	r1, [pc, #340]	@ (8009208 <sen5x_measurement+0x1d4>)
 80090b4:	0008      	movs	r0, r1
 80090b6:	f015 ff7b 	bl	801efb0 <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 80090ba:	4b4d      	ldr	r3, [pc, #308]	@ (80091f0 <sen5x_measurement+0x1bc>)
 80090bc:	889b      	ldrh	r3, [r3, #4]
 80090be:	0018      	movs	r0, r3
 80090c0:	f7f8 fa86 	bl	80015d0 <__aeabi_i2f>
 80090c4:	1c03      	adds	r3, r0, #0
 80090c6:	494e      	ldr	r1, [pc, #312]	@ (8009200 <sen5x_measurement+0x1cc>)
 80090c8:	1c18      	adds	r0, r3, #0
 80090ca:	f7f7 fd83 	bl	8000bd4 <__aeabi_fdiv>
 80090ce:	1c03      	adds	r3, r0, #0
 80090d0:	1c18      	adds	r0, r3, #0
 80090d2:	f7fa f9c7 	bl	8003464 <__aeabi_f2d>
 80090d6:	0002      	movs	r2, r0
 80090d8:	000b      	movs	r3, r1
 80090da:	494c      	ldr	r1, [pc, #304]	@ (800920c <sen5x_measurement+0x1d8>)
 80090dc:	0008      	movs	r0, r1
 80090de:	f015 ff67 	bl	801efb0 <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 80090e2:	4b43      	ldr	r3, [pc, #268]	@ (80091f0 <sen5x_measurement+0x1bc>)
 80090e4:	88db      	ldrh	r3, [r3, #6]
 80090e6:	0018      	movs	r0, r3
 80090e8:	f7f8 fa72 	bl	80015d0 <__aeabi_i2f>
 80090ec:	1c03      	adds	r3, r0, #0
 80090ee:	4944      	ldr	r1, [pc, #272]	@ (8009200 <sen5x_measurement+0x1cc>)
 80090f0:	1c18      	adds	r0, r3, #0
 80090f2:	f7f7 fd6f 	bl	8000bd4 <__aeabi_fdiv>
 80090f6:	1c03      	adds	r3, r0, #0
 80090f8:	1c18      	adds	r0, r3, #0
 80090fa:	f7fa f9b3 	bl	8003464 <__aeabi_f2d>
 80090fe:	0002      	movs	r2, r0
 8009100:	000b      	movs	r3, r1
 8009102:	4943      	ldr	r1, [pc, #268]	@ (8009210 <sen5x_measurement+0x1dc>)
 8009104:	0008      	movs	r0, r1
 8009106:	f015 ff53 	bl	801efb0 <iprintf>
    if (sen5x_data.ambient_humidity != 0x7fff) {
 800910a:	4b39      	ldr	r3, [pc, #228]	@ (80091f0 <sen5x_measurement+0x1bc>)
 800910c:	2208      	movs	r2, #8
 800910e:	5e9b      	ldrsh	r3, [r3, r2]
 8009110:	4a40      	ldr	r2, [pc, #256]	@ (8009214 <sen5x_measurement+0x1e0>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d014      	beq.n	8009140 <sen5x_measurement+0x10c>
      printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009116:	4b36      	ldr	r3, [pc, #216]	@ (80091f0 <sen5x_measurement+0x1bc>)
 8009118:	2208      	movs	r2, #8
 800911a:	5e9b      	ldrsh	r3, [r3, r2]
 800911c:	0018      	movs	r0, r3
 800911e:	f7f8 fa57 	bl	80015d0 <__aeabi_i2f>
 8009122:	1c03      	adds	r3, r0, #0
 8009124:	493c      	ldr	r1, [pc, #240]	@ (8009218 <sen5x_measurement+0x1e4>)
 8009126:	1c18      	adds	r0, r3, #0
 8009128:	f7f7 fd54 	bl	8000bd4 <__aeabi_fdiv>
 800912c:	1c03      	adds	r3, r0, #0
 800912e:	1c18      	adds	r0, r3, #0
 8009130:	f7fa f998 	bl	8003464 <__aeabi_f2d>
 8009134:	0002      	movs	r2, r0
 8009136:	000b      	movs	r3, r1
 8009138:	4938      	ldr	r1, [pc, #224]	@ (800921c <sen5x_measurement+0x1e8>)
 800913a:	0008      	movs	r0, r1
 800913c:	f015 ff38 	bl	801efb0 <iprintf>
    }
    if (sen5x_data.ambient_temperature != 0x7fff) {
 8009140:	4b2b      	ldr	r3, [pc, #172]	@ (80091f0 <sen5x_measurement+0x1bc>)
 8009142:	220a      	movs	r2, #10
 8009144:	5e9b      	ldrsh	r3, [r3, r2]
 8009146:	4a33      	ldr	r2, [pc, #204]	@ (8009214 <sen5x_measurement+0x1e0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d014      	beq.n	8009176 <sen5x_measurement+0x142>
      printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800914c:	4b28      	ldr	r3, [pc, #160]	@ (80091f0 <sen5x_measurement+0x1bc>)
 800914e:	220a      	movs	r2, #10
 8009150:	5e9b      	ldrsh	r3, [r3, r2]
 8009152:	0018      	movs	r0, r3
 8009154:	f7f8 fa3c 	bl	80015d0 <__aeabi_i2f>
 8009158:	1c03      	adds	r3, r0, #0
 800915a:	4931      	ldr	r1, [pc, #196]	@ (8009220 <sen5x_measurement+0x1ec>)
 800915c:	1c18      	adds	r0, r3, #0
 800915e:	f7f7 fd39 	bl	8000bd4 <__aeabi_fdiv>
 8009162:	1c03      	adds	r3, r0, #0
 8009164:	1c18      	adds	r0, r3, #0
 8009166:	f7fa f97d 	bl	8003464 <__aeabi_f2d>
 800916a:	0002      	movs	r2, r0
 800916c:	000b      	movs	r3, r1
 800916e:	492d      	ldr	r1, [pc, #180]	@ (8009224 <sen5x_measurement+0x1f0>)
 8009170:	0008      	movs	r0, r1
 8009172:	f015 ff1d 	bl	801efb0 <iprintf>
    }
    if (sen5x_data.voc_index != 0x7fff) {
 8009176:	4b1e      	ldr	r3, [pc, #120]	@ (80091f0 <sen5x_measurement+0x1bc>)
 8009178:	220c      	movs	r2, #12
 800917a:	5e9b      	ldrsh	r3, [r3, r2]
 800917c:	4a25      	ldr	r2, [pc, #148]	@ (8009214 <sen5x_measurement+0x1e0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d014      	beq.n	80091ac <sen5x_measurement+0x178>
      printf("Voc index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009182:	4b1b      	ldr	r3, [pc, #108]	@ (80091f0 <sen5x_measurement+0x1bc>)
 8009184:	220c      	movs	r2, #12
 8009186:	5e9b      	ldrsh	r3, [r3, r2]
 8009188:	0018      	movs	r0, r3
 800918a:	f7f8 fa21 	bl	80015d0 <__aeabi_i2f>
 800918e:	1c03      	adds	r3, r0, #0
 8009190:	491b      	ldr	r1, [pc, #108]	@ (8009200 <sen5x_measurement+0x1cc>)
 8009192:	1c18      	adds	r0, r3, #0
 8009194:	f7f7 fd1e 	bl	8000bd4 <__aeabi_fdiv>
 8009198:	1c03      	adds	r3, r0, #0
 800919a:	1c18      	adds	r0, r3, #0
 800919c:	f7fa f962 	bl	8003464 <__aeabi_f2d>
 80091a0:	0002      	movs	r2, r0
 80091a2:	000b      	movs	r3, r1
 80091a4:	4920      	ldr	r1, [pc, #128]	@ (8009228 <sen5x_measurement+0x1f4>)
 80091a6:	0008      	movs	r0, r1
 80091a8:	f015 ff02 	bl	801efb0 <iprintf>
    }
    if (sen5x_data.nox_index != 0x7fff) {
 80091ac:	4b10      	ldr	r3, [pc, #64]	@ (80091f0 <sen5x_measurement+0x1bc>)
 80091ae:	220e      	movs	r2, #14
 80091b0:	5e9b      	ldrsh	r3, [r3, r2]
 80091b2:	4a18      	ldr	r2, [pc, #96]	@ (8009214 <sen5x_measurement+0x1e0>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d014      	beq.n	80091e2 <sen5x_measurement+0x1ae>
      printf("Nox index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 80091b8:	4b0d      	ldr	r3, [pc, #52]	@ (80091f0 <sen5x_measurement+0x1bc>)
 80091ba:	220e      	movs	r2, #14
 80091bc:	5e9b      	ldrsh	r3, [r3, r2]
 80091be:	0018      	movs	r0, r3
 80091c0:	f7f8 fa06 	bl	80015d0 <__aeabi_i2f>
 80091c4:	1c03      	adds	r3, r0, #0
 80091c6:	490e      	ldr	r1, [pc, #56]	@ (8009200 <sen5x_measurement+0x1cc>)
 80091c8:	1c18      	adds	r0, r3, #0
 80091ca:	f7f7 fd03 	bl	8000bd4 <__aeabi_fdiv>
 80091ce:	1c03      	adds	r3, r0, #0
 80091d0:	1c18      	adds	r0, r3, #0
 80091d2:	f7fa f947 	bl	8003464 <__aeabi_f2d>
 80091d6:	0002      	movs	r2, r0
 80091d8:	000b      	movs	r3, r1
 80091da:	4914      	ldr	r1, [pc, #80]	@ (800922c <sen5x_measurement+0x1f8>)
 80091dc:	0008      	movs	r0, r1
 80091de:	f015 fee7 	bl	801efb0 <iprintf>
    }
  }
  return error;
 80091e2:	1dbb      	adds	r3, r7, #6
 80091e4:	2200      	movs	r2, #0
 80091e6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80091e8:	0018      	movs	r0, r3
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b002      	add	sp, #8
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20001208 	.word	0x20001208
 80091f4:	08023494 	.word	0x08023494
 80091f8:	080232dc 	.word	0x080232dc
 80091fc:	20001204 	.word	0x20001204
 8009200:	41200000 	.word	0x41200000
 8009204:	080234c8 	.word	0x080234c8
 8009208:	080234f4 	.word	0x080234f4
 800920c:	08023520 	.word	0x08023520
 8009210:	0802354c 	.word	0x0802354c
 8009214:	00007fff 	.word	0x00007fff
 8009218:	42c80000 	.word	0x42c80000
 800921c:	08023578 	.word	0x08023578
 8009220:	43480000 	.word	0x43480000
 8009224:	08023598 	.word	0x08023598
 8009228:	080235b8 	.word	0x080235b8
 800922c:	080235cc 	.word	0x080235cc

08009230 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b085      	sub	sp, #20
 8009234:	af02      	add	r7, sp, #8
 8009236:	6039      	str	r1, [r7, #0]
 8009238:	0011      	movs	r1, r2
 800923a:	1dfb      	adds	r3, r7, #7
 800923c:	1c02      	adds	r2, r0, #0
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	1d3b      	adds	r3, r7, #4
 8009242:	1c0a      	adds	r2, r1, #0
 8009244:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009246:	1dfb      	adds	r3, r7, #7
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	18db      	adds	r3, r3, r3
 800924e:	b299      	uxth	r1, r3
 8009250:	1d3b      	adds	r3, r7, #4
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	4805      	ldr	r0, [pc, #20]	@ (800926c <sensirion_i2c_hal_read+0x3c>)
 8009258:	2464      	movs	r4, #100	@ 0x64
 800925a:	9400      	str	r4, [sp, #0]
 800925c:	f006 faaa 	bl	800f7b4 <HAL_I2C_Master_Receive>
 8009260:	0003      	movs	r3, r0
 8009262:	b25b      	sxtb	r3, r3
}
 8009264:	0018      	movs	r0, r3
 8009266:	46bd      	mov	sp, r7
 8009268:	b003      	add	sp, #12
 800926a:	bd90      	pop	{r4, r7, pc}
 800926c:	20000db0 	.word	0x20000db0

08009270 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009270:	b590      	push	{r4, r7, lr}
 8009272:	b085      	sub	sp, #20
 8009274:	af02      	add	r7, sp, #8
 8009276:	6039      	str	r1, [r7, #0]
 8009278:	0011      	movs	r1, r2
 800927a:	1dfb      	adds	r3, r7, #7
 800927c:	1c02      	adds	r2, r0, #0
 800927e:	701a      	strb	r2, [r3, #0]
 8009280:	1d3b      	adds	r3, r7, #4
 8009282:	1c0a      	adds	r2, r1, #0
 8009284:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009286:	1dfb      	adds	r3, r7, #7
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	18db      	adds	r3, r3, r3
 800928e:	b299      	uxth	r1, r3
 8009290:	1d3b      	adds	r3, r7, #4
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	4805      	ldr	r0, [pc, #20]	@ (80092ac <sensirion_i2c_hal_write+0x3c>)
 8009298:	2464      	movs	r4, #100	@ 0x64
 800929a:	9400      	str	r4, [sp, #0]
 800929c:	f006 f982 	bl	800f5a4 <HAL_I2C_Master_Transmit>
 80092a0:	0003      	movs	r3, r0
 80092a2:	b25b      	sxtb	r3, r3
}
 80092a4:	0018      	movs	r0, r3
 80092a6:	46bd      	mov	sp, r7
 80092a8:	b003      	add	sp, #12
 80092aa:	bd90      	pop	{r4, r7, pc}
 80092ac:	20000db0 	.word	0x20000db0

080092b0 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	22fa      	movs	r2, #250	@ 0xfa
 80092bc:	0091      	lsls	r1, r2, #2
 80092be:	0018      	movs	r0, r3
 80092c0:	f7f6 ff70 	bl	80001a4 <__udivsi3>
 80092c4:	0003      	movs	r3, r0
 80092c6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	22fa      	movs	r2, #250	@ 0xfa
 80092cc:	0091      	lsls	r1, r2, #2
 80092ce:	0018      	movs	r0, r3
 80092d0:	f7f6 ffee 	bl	80002b0 <__aeabi_uidivmod>
 80092d4:	1e0b      	subs	r3, r1, #0
 80092d6:	d002      	beq.n	80092de <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	3301      	adds	r3, #1
 80092dc:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	0018      	movs	r0, r3
 80092e2:	f004 fe1f 	bl	800df24 <HAL_Delay>
}
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b004      	add	sp, #16
 80092ec:	bd80      	pop	{r7, pc}
	...

080092f0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80092fa:	1d3b      	adds	r3, r7, #4
 80092fc:	0018      	movs	r0, r3
 80092fe:	f000 fc85 	bl	8009c0c <sen5x_read_device_status>
 8009302:	1e03      	subs	r3, r0, #0
 8009304:	d007      	beq.n	8009316 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009306:	4a2b      	ldr	r2, [pc, #172]	@ (80093b4 <sen5x_check_for_errors+0xc4>)
 8009308:	4b2b      	ldr	r3, [pc, #172]	@ (80093b8 <sen5x_check_for_errors+0xc8>)
 800930a:	0019      	movs	r1, r3
 800930c:	2001      	movs	r0, #1
 800930e:	f004 fa61 	bl	800d7d4 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 8009312:	2300      	movs	r3, #0
 8009314:	e049      	b.n	80093aa <sen5x_check_for_errors+0xba>
  }
  if (device_status == 0) {
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d107      	bne.n	800932c <sen5x_check_for_errors+0x3c>
    Debug("sen5x operates normal");
 800931c:	4a27      	ldr	r2, [pc, #156]	@ (80093bc <sen5x_check_for_errors+0xcc>)
 800931e:	4b28      	ldr	r3, [pc, #160]	@ (80093c0 <sen5x_check_for_errors+0xd0>)
 8009320:	0019      	movs	r1, r3
 8009322:	2003      	movs	r0, #3
 8009324:	f004 fa56 	bl	800d7d4 <CreateLine>
    return 0;
 8009328:	2300      	movs	r3, #0
 800932a:	e03e      	b.n	80093aa <sen5x_check_for_errors+0xba>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	2380      	movs	r3, #128	@ 0x80
 8009330:	039b      	lsls	r3, r3, #14
 8009332:	4013      	ands	r3, r2
 8009334:	d005      	beq.n	8009342 <sen5x_check_for_errors+0x52>
    Debug("sen5x Fan speed out of range");
 8009336:	4a23      	ldr	r2, [pc, #140]	@ (80093c4 <sen5x_check_for_errors+0xd4>)
 8009338:	4b21      	ldr	r3, [pc, #132]	@ (80093c0 <sen5x_check_for_errors+0xd0>)
 800933a:	0019      	movs	r1, r3
 800933c:	2003      	movs	r0, #3
 800933e:	f004 fa49 	bl	800d7d4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	2380      	movs	r3, #128	@ 0x80
 8009346:	031b      	lsls	r3, r3, #12
 8009348:	4013      	ands	r3, r2
 800934a:	d005      	beq.n	8009358 <sen5x_check_for_errors+0x68>
    Debug("sen5x Fan cleaning active");
 800934c:	4a1e      	ldr	r2, [pc, #120]	@ (80093c8 <sen5x_check_for_errors+0xd8>)
 800934e:	4b1c      	ldr	r3, [pc, #112]	@ (80093c0 <sen5x_check_for_errors+0xd0>)
 8009350:	0019      	movs	r1, r3
 8009352:	2003      	movs	r0, #3
 8009354:	f004 fa3e 	bl	800d7d4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2280      	movs	r2, #128	@ 0x80
 800935c:	4013      	ands	r3, r2
 800935e:	d005      	beq.n	800936c <sen5x_check_for_errors+0x7c>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009360:	4a1a      	ldr	r2, [pc, #104]	@ (80093cc <sen5x_check_for_errors+0xdc>)
 8009362:	4b17      	ldr	r3, [pc, #92]	@ (80093c0 <sen5x_check_for_errors+0xd0>)
 8009364:	0019      	movs	r1, r3
 8009366:	2003      	movs	r0, #3
 8009368:	f004 fa34 	bl	800d7d4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2240      	movs	r2, #64	@ 0x40
 8009370:	4013      	ands	r3, r2
 8009372:	d005      	beq.n	8009380 <sen5x_check_for_errors+0x90>
    Debug("sen5x RHT communication error");
 8009374:	4a16      	ldr	r2, [pc, #88]	@ (80093d0 <sen5x_check_for_errors+0xe0>)
 8009376:	4b12      	ldr	r3, [pc, #72]	@ (80093c0 <sen5x_check_for_errors+0xd0>)
 8009378:	0019      	movs	r1, r3
 800937a:	2003      	movs	r0, #3
 800937c:	f004 fa2a 	bl	800d7d4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	4013      	ands	r3, r2
 8009386:	d005      	beq.n	8009394 <sen5x_check_for_errors+0xa4>
    Debug("sen5x Laser failure");
 8009388:	4a12      	ldr	r2, [pc, #72]	@ (80093d4 <sen5x_check_for_errors+0xe4>)
 800938a:	4b0d      	ldr	r3, [pc, #52]	@ (80093c0 <sen5x_check_for_errors+0xd0>)
 800938c:	0019      	movs	r1, r3
 800938e:	2003      	movs	r0, #3
 8009390:	f004 fa20 	bl	800d7d4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2210      	movs	r2, #16
 8009398:	4013      	ands	r3, r2
 800939a:	d005      	beq.n	80093a8 <sen5x_check_for_errors+0xb8>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800939c:	4a0e      	ldr	r2, [pc, #56]	@ (80093d8 <sen5x_check_for_errors+0xe8>)
 800939e:	4b08      	ldr	r3, [pc, #32]	@ (80093c0 <sen5x_check_for_errors+0xd0>)
 80093a0:	0019      	movs	r1, r3
 80093a2:	2003      	movs	r0, #3
 80093a4:	f004 fa16 	bl	800d7d4 <CreateLine>
  }
  return 1;
 80093a8:	2301      	movs	r3, #1
}
 80093aa:	0018      	movs	r0, r3
 80093ac:	46bd      	mov	sp, r7
 80093ae:	b002      	add	sp, #8
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	46c0      	nop			@ (mov r8, r8)
 80093b4:	080235e0 	.word	0x080235e0
 80093b8:	080232dc 	.word	0x080232dc
 80093bc:	0802360c 	.word	0x0802360c
 80093c0:	08023274 	.word	0x08023274
 80093c4:	08023624 	.word	0x08023624
 80093c8:	08023644 	.word	0x08023644
 80093cc:	08023660 	.word	0x08023660
 80093d0:	08023684 	.word	0x08023684
 80093d4:	080236a4 	.word	0x080236a4
 80093d8:	080236b8 	.word	0x080236b8

080093dc <set_light_on_state>:

void set_light_on_state(void) {
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  sen5x_Power_On();
 80093e0:	f7ff fc1c 	bl	8008c1c <sen5x_Power_On>
  Debug("sen5x powered on, warming up for 30 sec.");
 80093e4:	4a0a      	ldr	r2, [pc, #40]	@ (8009410 <set_light_on_state+0x34>)
 80093e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009414 <set_light_on_state+0x38>)
 80093e8:	0019      	movs	r1, r3
 80093ea:	2003      	movs	r0, #3
 80093ec:	f004 f9f2 	bl	800d7d4 <CreateLine>
  if (sen5x_lightup_measurement()) {
 80093f0:	f7ff fd74 	bl	8008edc <sen5x_lightup_measurement>
 80093f4:	1e03      	subs	r3, r0, #0
 80093f6:	d005      	beq.n	8009404 <set_light_on_state+0x28>
    Error("Error executing sen5x_lightup_measurement()");
 80093f8:	4a07      	ldr	r2, [pc, #28]	@ (8009418 <set_light_on_state+0x3c>)
 80093fa:	4b08      	ldr	r3, [pc, #32]	@ (800941c <set_light_on_state+0x40>)
 80093fc:	0019      	movs	r1, r3
 80093fe:	2001      	movs	r0, #1
 8009400:	f004 f9e8 	bl	800d7d4 <CreateLine>
  }
  samplesState = CHECK_SEN5X;
 8009404:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <set_light_on_state+0x44>)
 8009406:	2203      	movs	r2, #3
 8009408:	701a      	strb	r2, [r3, #0]
}
 800940a:	46c0      	nop			@ (mov r8, r8)
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	080236f4 	.word	0x080236f4
 8009414:	08023274 	.word	0x08023274
 8009418:	08023720 	.word	0x08023720
 800941c:	080232dc 	.word	0x080232dc
 8009420:	20000080 	.word	0x20000080

08009424 <sen5x_statemachine>:

void sen5x_statemachine(uint8_t delayfactor) {
 8009424:	b590      	push	{r4, r7, lr}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	0002      	movs	r2, r0
 800942c:	1dfb      	adds	r3, r7, #7
 800942e:	701a      	strb	r2, [r3, #0]
  bool data_ready = false;
 8009430:	230f      	movs	r3, #15
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
  if (delayfactor == USB_PLUGGED_IN) {
 8009438:	1dfb      	adds	r3, r7, #7
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d103      	bne.n	8009448 <sen5x_statemachine+0x24>
    delayfactor =100; // if operated on USB read about every 30 seconds
 8009440:	1dfb      	adds	r3, r7, #7
 8009442:	2264      	movs	r2, #100	@ 0x64
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e002      	b.n	800944e <sen5x_statemachine+0x2a>
  }
  else {
    delayfactor = 1;
 8009448:	1dfb      	adds	r3, r7, #7
 800944a:	2201      	movs	r2, #1
 800944c:	701a      	strb	r2, [r3, #0]
  }
  if (TimestampIsReached(sen5xReadTimer)) {
 800944e:	4b67      	ldr	r3, [pc, #412]	@ (80095ec <sen5x_statemachine+0x1c8>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	0018      	movs	r0, r3
 8009454:	f004 f968 	bl	800d728 <TimestampIsReached>
 8009458:	1e03      	subs	r3, r0, #0
 800945a:	d100      	bne.n	800945e <sen5x_statemachine+0x3a>
 800945c:	e0c2      	b.n	80095e4 <sen5x_statemachine+0x1c0>
    switch (samplesState) {
 800945e:	4b64      	ldr	r3, [pc, #400]	@ (80095f0 <sen5x_statemachine+0x1cc>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	2b05      	cmp	r3, #5
 8009464:	d900      	bls.n	8009468 <sen5x_statemachine+0x44>
 8009466:	e0bd      	b.n	80095e4 <sen5x_statemachine+0x1c0>
 8009468:	009a      	lsls	r2, r3, #2
 800946a:	4b62      	ldr	r3, [pc, #392]	@ (80095f4 <sen5x_statemachine+0x1d0>)
 800946c:	18d3      	adds	r3, r2, r3
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009472:	4a61      	ldr	r2, [pc, #388]	@ (80095f8 <sen5x_statemachine+0x1d4>)
 8009474:	4b61      	ldr	r3, [pc, #388]	@ (80095fc <sen5x_statemachine+0x1d8>)
 8009476:	0019      	movs	r1, r3
 8009478:	2001      	movs	r0, #1
 800947a:	f004 f9ab 	bl	800d7d4 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 800947e:	f004 fd47 	bl	800df10 <HAL_GetTick>
 8009482:	0004      	movs	r4, r0
 8009484:	1dfb      	adds	r3, r7, #7
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	0019      	movs	r1, r3
 800948a:	485d      	ldr	r0, [pc, #372]	@ (8009600 <sen5x_statemachine+0x1dc>)
 800948c:	f7f6 ff14 	bl	80002b8 <__divsi3>
 8009490:	0003      	movs	r3, r0
 8009492:	18e2      	adds	r2, r4, r3
 8009494:	4b55      	ldr	r3, [pc, #340]	@ (80095ec <sen5x_statemachine+0x1c8>)
 8009496:	601a      	str	r2, [r3, #0]
      break;
 8009498:	e0a4      	b.n	80095e4 <sen5x_statemachine+0x1c0>
    case LIGHT_OUT:
//      Debug(" state is LIGHT_OUT");
      set_light_on_state();
 800949a:	f7ff ff9f 	bl	80093dc <set_light_on_state>
      sen5xReadTimer = HAL_GetTick() + 28000;
 800949e:	f004 fd37 	bl	800df10 <HAL_GetTick>
 80094a2:	0003      	movs	r3, r0
 80094a4:	4a57      	ldr	r2, [pc, #348]	@ (8009604 <sen5x_statemachine+0x1e0>)
 80094a6:	189a      	adds	r2, r3, r2
 80094a8:	4b50      	ldr	r3, [pc, #320]	@ (80095ec <sen5x_statemachine+0x1c8>)
 80094aa:	601a      	str	r2, [r3, #0]
      break;
 80094ac:	e09a      	b.n	80095e4 <sen5x_statemachine+0x1c0>
    case CHECK_SEN5X:
      samplesState = LIGHT_ON;
 80094ae:	4b50      	ldr	r3, [pc, #320]	@ (80095f0 <sen5x_statemachine+0x1cc>)
 80094b0:	2202      	movs	r2, #2
 80094b2:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 80094b4:	4b54      	ldr	r3, [pc, #336]	@ (8009608 <sen5x_statemachine+0x1e4>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b05      	cmp	r3, #5
 80094ba:	d905      	bls.n	80094c8 <sen5x_statemachine+0xa4>
        samplesState = S5X_DISABLED;
 80094bc:	4b4c      	ldr	r3, [pc, #304]	@ (80095f0 <sen5x_statemachine+0x1cc>)
 80094be:	2200      	movs	r2, #0
 80094c0:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 80094c2:	f7ff fbcb 	bl	8008c5c <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 80094c6:	e08c      	b.n	80095e2 <sen5x_statemachine+0x1be>
        if (sen5x_check_for_errors()) {
 80094c8:	f7ff ff12 	bl	80092f0 <sen5x_check_for_errors>
 80094cc:	1e03      	subs	r3, r0, #0
 80094ce:	d100      	bne.n	80094d2 <sen5x_statemachine+0xae>
 80094d0:	e087      	b.n	80095e2 <sen5x_statemachine+0x1be>
          if (sen5x_device_reset()) {
 80094d2:	f000 fbed 	bl	8009cb0 <sen5x_device_reset>
 80094d6:	1e03      	subs	r3, r0, #0
 80094d8:	d006      	beq.n	80094e8 <sen5x_statemachine+0xc4>
            Error("Error resetting sen5x");
 80094da:	4a4c      	ldr	r2, [pc, #304]	@ (800960c <sen5x_statemachine+0x1e8>)
 80094dc:	4b47      	ldr	r3, [pc, #284]	@ (80095fc <sen5x_statemachine+0x1d8>)
 80094de:	0019      	movs	r1, r3
 80094e0:	2001      	movs	r0, #1
 80094e2:	f004 f977 	bl	800d7d4 <CreateLine>
 80094e6:	e005      	b.n	80094f4 <sen5x_statemachine+0xd0>
            Info("sen5x reset executed");
 80094e8:	4a49      	ldr	r2, [pc, #292]	@ (8009610 <sen5x_statemachine+0x1ec>)
 80094ea:	4b4a      	ldr	r3, [pc, #296]	@ (8009614 <sen5x_statemachine+0x1f0>)
 80094ec:	0019      	movs	r1, r3
 80094ee:	2002      	movs	r0, #2
 80094f0:	f004 f970 	bl	800d7d4 <CreateLine>
          sen5xErrors++;
 80094f4:	4b44      	ldr	r3, [pc, #272]	@ (8009608 <sen5x_statemachine+0x1e4>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	3301      	adds	r3, #1
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	4b42      	ldr	r3, [pc, #264]	@ (8009608 <sen5x_statemachine+0x1e4>)
 80094fe:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009500:	f004 fd06 	bl	800df10 <HAL_GetTick>
 8009504:	0003      	movs	r3, r0
 8009506:	3396      	adds	r3, #150	@ 0x96
 8009508:	001a      	movs	r2, r3
 800950a:	4b38      	ldr	r3, [pc, #224]	@ (80095ec <sen5x_statemachine+0x1c8>)
 800950c:	601a      	str	r2, [r3, #0]
      break;
 800950e:	e068      	b.n	80095e2 <sen5x_statemachine+0x1be>
    case LIGHT_ON:
//      Debug(" state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 8009510:	240f      	movs	r4, #15
 8009512:	193b      	adds	r3, r7, r4
 8009514:	0018      	movs	r0, r3
 8009516:	f000 f8e7 	bl	80096e8 <sen5x_read_data_ready>
      if (data_ready) {
 800951a:	193b      	adds	r3, r7, r4
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d026      	beq.n	8009570 <sen5x_statemachine+0x14c>
        if (sen5x_measurement()) {
 8009522:	f7ff fd87 	bl	8009034 <sen5x_measurement>
 8009526:	1e03      	subs	r3, r0, #0
 8009528:	d005      	beq.n	8009536 <sen5x_statemachine+0x112>
          Error("Error executing sen5x_measurement()");
 800952a:	4a3b      	ldr	r2, [pc, #236]	@ (8009618 <sen5x_statemachine+0x1f4>)
 800952c:	4b33      	ldr	r3, [pc, #204]	@ (80095fc <sen5x_statemachine+0x1d8>)
 800952e:	0019      	movs	r1, r3
 8009530:	2001      	movs	r0, #1
 8009532:	f004 f94f 	bl	800d7d4 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 8009536:	4b39      	ldr	r3, [pc, #228]	@ (800961c <sen5x_statemachine+0x1f8>)
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d012      	beq.n	8009564 <sen5x_statemachine+0x140>
          if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 800953e:	f7fd f883 	bl	8006648 <RTC_GetWeekday>
 8009542:	0003      	movs	r3, r0
 8009544:	2b01      	cmp	r3, #1
 8009546:	d10a      	bne.n	800955e <sen5x_statemachine+0x13a>
 8009548:	4b35      	ldr	r3, [pc, #212]	@ (8009620 <sen5x_statemachine+0x1fc>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2201      	movs	r2, #1
 800954e:	4053      	eors	r3, r2
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <sen5x_statemachine+0x13a>
            samplesState = CLEAN_FAN;
 8009556:	4b26      	ldr	r3, [pc, #152]	@ (80095f0 <sen5x_statemachine+0x1cc>)
 8009558:	2204      	movs	r2, #4
 800955a:	701a      	strb	r2, [r3, #0]
 800955c:	e002      	b.n	8009564 <sen5x_statemachine+0x140>
          }
          else {
            samplesState = SAMPLES_TAKEN;
 800955e:	4b24      	ldr	r3, [pc, #144]	@ (80095f0 <sen5x_statemachine+0x1cc>)
 8009560:	2205      	movs	r2, #5
 8009562:	701a      	strb	r2, [r3, #0]
          }
        }
        sen5xSamples++;
 8009564:	4b2d      	ldr	r3, [pc, #180]	@ (800961c <sen5x_statemachine+0x1f8>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	b2da      	uxtb	r2, r3
 800956c:	4b2b      	ldr	r3, [pc, #172]	@ (800961c <sen5x_statemachine+0x1f8>)
 800956e:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009570:	f004 fcce 	bl	800df10 <HAL_GetTick>
 8009574:	0003      	movs	r3, r0
 8009576:	22fa      	movs	r2, #250	@ 0xfa
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	189a      	adds	r2, r3, r2
 800957c:	4b1b      	ldr	r3, [pc, #108]	@ (80095ec <sen5x_statemachine+0x1c8>)
 800957e:	601a      	str	r2, [r3, #0]
      break;
 8009580:	e030      	b.n	80095e4 <sen5x_statemachine+0x1c0>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      sen5x_start_fan_cleaning();
 8009582:	f000 f997 	bl	80098b4 <sen5x_start_fan_cleaning>
      sen5xReadTimer = HAL_GetTick() + 11000;
 8009586:	f004 fcc3 	bl	800df10 <HAL_GetTick>
 800958a:	0003      	movs	r3, r0
 800958c:	4a25      	ldr	r2, [pc, #148]	@ (8009624 <sen5x_statemachine+0x200>)
 800958e:	189a      	adds	r2, r3, r2
 8009590:	4b16      	ldr	r3, [pc, #88]	@ (80095ec <sen5x_statemachine+0x1c8>)
 8009592:	601a      	str	r2, [r3, #0]
      fanCleaningDone = true;
 8009594:	4b22      	ldr	r3, [pc, #136]	@ (8009620 <sen5x_statemachine+0x1fc>)
 8009596:	2201      	movs	r2, #1
 8009598:	701a      	strb	r2, [r3, #0]
      samplesState = SAMPLES_TAKEN;
 800959a:	4b15      	ldr	r3, [pc, #84]	@ (80095f0 <sen5x_statemachine+0x1cc>)
 800959c:	2205      	movs	r2, #5
 800959e:	701a      	strb	r2, [r3, #0]
      break;
 80095a0:	e020      	b.n	80095e4 <sen5x_statemachine+0x1c0>

    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      sen5xSamples = 0;
 80095a2:	4b1e      	ldr	r3, [pc, #120]	@ (800961c <sen5x_statemachine+0x1f8>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 80095a8:	f7ff fcbc 	bl	8008f24 <sen5x_extinguish_measurement>
 80095ac:	1e03      	subs	r3, r0, #0
 80095ae:	d005      	beq.n	80095bc <sen5x_statemachine+0x198>
        Error("Error executing sen5x_extinguish_measurement()");
 80095b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009628 <sen5x_statemachine+0x204>)
 80095b2:	4b12      	ldr	r3, [pc, #72]	@ (80095fc <sen5x_statemachine+0x1d8>)
 80095b4:	0019      	movs	r1, r3
 80095b6:	2001      	movs	r0, #1
 80095b8:	f004 f90c 	bl	800d7d4 <CreateLine>
      }
      sen5x_Power_Off();
 80095bc:	f7ff fb4e 	bl	8008c5c <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 80095c0:	f004 fca6 	bl	800df10 <HAL_GetTick>
 80095c4:	0004      	movs	r4, r0
 80095c6:	1dfb      	adds	r3, r7, #7
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	0019      	movs	r1, r3
 80095cc:	480c      	ldr	r0, [pc, #48]	@ (8009600 <sen5x_statemachine+0x1dc>)
 80095ce:	f7f6 fe73 	bl	80002b8 <__divsi3>
 80095d2:	0003      	movs	r3, r0
 80095d4:	18e2      	adds	r2, r4, r3
 80095d6:	4b05      	ldr	r3, [pc, #20]	@ (80095ec <sen5x_statemachine+0x1c8>)
 80095d8:	601a      	str	r2, [r3, #0]
      samplesState = LIGHT_OUT;
 80095da:	4b05      	ldr	r3, [pc, #20]	@ (80095f0 <sen5x_statemachine+0x1cc>)
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80095e0:	e000      	b.n	80095e4 <sen5x_statemachine+0x1c0>
      break;
 80095e2:	46c0      	nop			@ (mov r8, r8)
}
 80095e4:	46c0      	nop			@ (mov r8, r8)
 80095e6:	46bd      	mov	sp, r7
 80095e8:	b005      	add	sp, #20
 80095ea:	bd90      	pop	{r4, r7, pc}
 80095ec:	20001200 	.word	0x20001200
 80095f0:	20000080 	.word	0x20000080
 80095f4:	08023f78 	.word	0x08023f78
 80095f8:	0802374c 	.word	0x0802374c
 80095fc:	080232dc 	.word	0x080232dc
 8009600:	002fefd8 	.word	0x002fefd8
 8009604:	00006d60 	.word	0x00006d60
 8009608:	20001205 	.word	0x20001205
 800960c:	0802377c 	.word	0x0802377c
 8009610:	08023794 	.word	0x08023794
 8009614:	08023430 	.word	0x08023430
 8009618:	080237ac 	.word	0x080237ac
 800961c:	20001204 	.word	0x20001204
 8009620:	200011fc 	.word	0x200011fc
 8009624:	00002af8 	.word	0x00002af8
 8009628:	080237d0 	.word	0x080237d0

0800962c <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800962c:	b590      	push	{r4, r7, lr}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009632:	1dbb      	adds	r3, r7, #6
 8009634:	2200      	movs	r2, #0
 8009636:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009638:	1dbc      	adds	r4, r7, #6
 800963a:	1dbb      	adds	r3, r7, #6
 800963c:	8819      	ldrh	r1, [r3, #0]
 800963e:	003b      	movs	r3, r7
 8009640:	2221      	movs	r2, #33	@ 0x21
 8009642:	0018      	movs	r0, r3
 8009644:	f001 fb28 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 8009648:	0003      	movs	r3, r0
 800964a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800964c:	1d3c      	adds	r4, r7, #4
 800964e:	1dbb      	adds	r3, r7, #6
 8009650:	881a      	ldrh	r2, [r3, #0]
 8009652:	003b      	movs	r3, r7
 8009654:	0019      	movs	r1, r3
 8009656:	2069      	movs	r0, #105	@ 0x69
 8009658:	f001 fba2 	bl	800ada0 <sensirion_i2c_write_data>
 800965c:	0003      	movs	r3, r0
 800965e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009660:	1d3b      	adds	r3, r7, #4
 8009662:	2200      	movs	r2, #0
 8009664:	5e9b      	ldrsh	r3, [r3, r2]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d003      	beq.n	8009672 <sen5x_start_measurement+0x46>
        return error;
 800966a:	1d3b      	adds	r3, r7, #4
 800966c:	2200      	movs	r2, #0
 800966e:	5e9b      	ldrsh	r3, [r3, r2]
 8009670:	e004      	b.n	800967c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009672:	4b04      	ldr	r3, [pc, #16]	@ (8009684 <sen5x_start_measurement+0x58>)
 8009674:	0018      	movs	r0, r3
 8009676:	f7ff fe1b 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800967a:	2300      	movs	r3, #0
}
 800967c:	0018      	movs	r0, r3
 800967e:	46bd      	mov	sp, r7
 8009680:	b003      	add	sp, #12
 8009682:	bd90      	pop	{r4, r7, pc}
 8009684:	0000c350 	.word	0x0000c350

08009688 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8009688:	b590      	push	{r4, r7, lr}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800968e:	1dbb      	adds	r3, r7, #6
 8009690:	2200      	movs	r2, #0
 8009692:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009694:	1dbc      	adds	r4, r7, #6
 8009696:	2382      	movs	r3, #130	@ 0x82
 8009698:	005a      	lsls	r2, r3, #1
 800969a:	1dbb      	adds	r3, r7, #6
 800969c:	8819      	ldrh	r1, [r3, #0]
 800969e:	003b      	movs	r3, r7
 80096a0:	0018      	movs	r0, r3
 80096a2:	f001 faf9 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 80096a6:	0003      	movs	r3, r0
 80096a8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80096aa:	1d3c      	adds	r4, r7, #4
 80096ac:	1dbb      	adds	r3, r7, #6
 80096ae:	881a      	ldrh	r2, [r3, #0]
 80096b0:	003b      	movs	r3, r7
 80096b2:	0019      	movs	r1, r3
 80096b4:	2069      	movs	r0, #105	@ 0x69
 80096b6:	f001 fb73 	bl	800ada0 <sensirion_i2c_write_data>
 80096ba:	0003      	movs	r3, r0
 80096bc:	8023      	strh	r3, [r4, #0]
    if (error) {
 80096be:	1d3b      	adds	r3, r7, #4
 80096c0:	2200      	movs	r2, #0
 80096c2:	5e9b      	ldrsh	r3, [r3, r2]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <sen5x_stop_measurement+0x48>
        return error;
 80096c8:	1d3b      	adds	r3, r7, #4
 80096ca:	2200      	movs	r2, #0
 80096cc:	5e9b      	ldrsh	r3, [r3, r2]
 80096ce:	e004      	b.n	80096da <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 80096d0:	4b04      	ldr	r3, [pc, #16]	@ (80096e4 <sen5x_stop_measurement+0x5c>)
 80096d2:	0018      	movs	r0, r3
 80096d4:	f7ff fdec 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	0018      	movs	r0, r3
 80096dc:	46bd      	mov	sp, r7
 80096de:	b003      	add	sp, #12
 80096e0:	bd90      	pop	{r4, r7, pc}
 80096e2:	46c0      	nop			@ (mov r8, r8)
 80096e4:	00030d40 	.word	0x00030d40

080096e8 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 80096e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 80096f0:	250e      	movs	r5, #14
 80096f2:	197b      	adds	r3, r7, r5
 80096f4:	2200      	movs	r2, #0
 80096f6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 80096f8:	197c      	adds	r4, r7, r5
 80096fa:	4a22      	ldr	r2, [pc, #136]	@ (8009784 <sen5x_read_data_ready+0x9c>)
 80096fc:	197b      	adds	r3, r7, r5
 80096fe:	8819      	ldrh	r1, [r3, #0]
 8009700:	2308      	movs	r3, #8
 8009702:	18fb      	adds	r3, r7, r3
 8009704:	0018      	movs	r0, r3
 8009706:	f001 fac7 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 800970a:	0003      	movs	r3, r0
 800970c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800970e:	260c      	movs	r6, #12
 8009710:	19bc      	adds	r4, r7, r6
 8009712:	197b      	adds	r3, r7, r5
 8009714:	881a      	ldrh	r2, [r3, #0]
 8009716:	2308      	movs	r3, #8
 8009718:	18fb      	adds	r3, r7, r3
 800971a:	0019      	movs	r1, r3
 800971c:	2069      	movs	r0, #105	@ 0x69
 800971e:	f001 fb3f 	bl	800ada0 <sensirion_i2c_write_data>
 8009722:	0003      	movs	r3, r0
 8009724:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009726:	19bb      	adds	r3, r7, r6
 8009728:	2200      	movs	r2, #0
 800972a:	5e9b      	ldrsh	r3, [r3, r2]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <sen5x_read_data_ready+0x50>
        return error;
 8009730:	19bb      	adds	r3, r7, r6
 8009732:	2200      	movs	r2, #0
 8009734:	5e9b      	ldrsh	r3, [r3, r2]
 8009736:	e020      	b.n	800977a <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009738:	4b13      	ldr	r3, [pc, #76]	@ (8009788 <sen5x_read_data_ready+0xa0>)
 800973a:	0018      	movs	r0, r3
 800973c:	f7ff fdb8 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009740:	250c      	movs	r5, #12
 8009742:	197c      	adds	r4, r7, r5
 8009744:	2308      	movs	r3, #8
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	2202      	movs	r2, #2
 800974a:	0019      	movs	r1, r3
 800974c:	2069      	movs	r0, #105	@ 0x69
 800974e:	f001 fb3f 	bl	800add0 <sensirion_i2c_read_data_inplace>
 8009752:	0003      	movs	r3, r0
 8009754:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009756:	197b      	adds	r3, r7, r5
 8009758:	2200      	movs	r2, #0
 800975a:	5e9b      	ldrsh	r3, [r3, r2]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d003      	beq.n	8009768 <sen5x_read_data_ready+0x80>
        return error;
 8009760:	197b      	adds	r3, r7, r5
 8009762:	2200      	movs	r2, #0
 8009764:	5e9b      	ldrsh	r3, [r3, r2]
 8009766:	e008      	b.n	800977a <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009768:	2308      	movs	r3, #8
 800976a:	18fb      	adds	r3, r7, r3
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	1e5a      	subs	r2, r3, #1
 8009770:	4193      	sbcs	r3, r2
 8009772:	b2da      	uxtb	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009778:	2300      	movs	r3, #0
}
 800977a:	0018      	movs	r0, r3
 800977c:	46bd      	mov	sp, r7
 800977e:	b005      	add	sp, #20
 8009780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009782:	46c0      	nop			@ (mov r8, r8)
 8009784:	00000202 	.word	0x00000202
 8009788:	00004e20 	.word	0x00004e20

0800978c <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800978c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978e:	b08d      	sub	sp, #52	@ 0x34
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800979a:	252e      	movs	r5, #46	@ 0x2e
 800979c:	197b      	adds	r3, r7, r5
 800979e:	2200      	movs	r2, #0
 80097a0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 80097a2:	197c      	adds	r4, r7, r5
 80097a4:	23f1      	movs	r3, #241	@ 0xf1
 80097a6:	009a      	lsls	r2, r3, #2
 80097a8:	197b      	adds	r3, r7, r5
 80097aa:	8819      	ldrh	r1, [r3, #0]
 80097ac:	2314      	movs	r3, #20
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	0018      	movs	r0, r3
 80097b2:	f001 fa71 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 80097b6:	0003      	movs	r3, r0
 80097b8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80097ba:	262c      	movs	r6, #44	@ 0x2c
 80097bc:	19bc      	adds	r4, r7, r6
 80097be:	197b      	adds	r3, r7, r5
 80097c0:	881a      	ldrh	r2, [r3, #0]
 80097c2:	2314      	movs	r3, #20
 80097c4:	18fb      	adds	r3, r7, r3
 80097c6:	0019      	movs	r1, r3
 80097c8:	2069      	movs	r0, #105	@ 0x69
 80097ca:	f001 fae9 	bl	800ada0 <sensirion_i2c_write_data>
 80097ce:	0003      	movs	r3, r0
 80097d0:	8023      	strh	r3, [r4, #0]
    if (error) {
 80097d2:	19bb      	adds	r3, r7, r6
 80097d4:	2200      	movs	r2, #0
 80097d6:	5e9b      	ldrsh	r3, [r3, r2]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <sen5x_read_measured_values+0x58>
        return error;
 80097dc:	19bb      	adds	r3, r7, r6
 80097de:	2200      	movs	r2, #0
 80097e0:	5e9b      	ldrsh	r3, [r3, r2]
 80097e2:	e060      	b.n	80098a6 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80097e4:	4b32      	ldr	r3, [pc, #200]	@ (80098b0 <sen5x_read_measured_values+0x124>)
 80097e6:	0018      	movs	r0, r3
 80097e8:	f7ff fd62 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 80097ec:	252c      	movs	r5, #44	@ 0x2c
 80097ee:	197c      	adds	r4, r7, r5
 80097f0:	2314      	movs	r3, #20
 80097f2:	18fb      	adds	r3, r7, r3
 80097f4:	2210      	movs	r2, #16
 80097f6:	0019      	movs	r1, r3
 80097f8:	2069      	movs	r0, #105	@ 0x69
 80097fa:	f001 fae9 	bl	800add0 <sensirion_i2c_read_data_inplace>
 80097fe:	0003      	movs	r3, r0
 8009800:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009802:	197b      	adds	r3, r7, r5
 8009804:	2200      	movs	r2, #0
 8009806:	5e9b      	ldrsh	r3, [r3, r2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <sen5x_read_measured_values+0x88>
        return error;
 800980c:	197b      	adds	r3, r7, r5
 800980e:	2200      	movs	r2, #0
 8009810:	5e9b      	ldrsh	r3, [r3, r2]
 8009812:	e048      	b.n	80098a6 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009814:	2414      	movs	r4, #20
 8009816:	193b      	adds	r3, r7, r4
 8009818:	0018      	movs	r0, r3
 800981a:	f000 fa79 	bl	8009d10 <sensirion_common_bytes_to_uint16_t>
 800981e:	0003      	movs	r3, r0
 8009820:	001a      	movs	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009826:	193b      	adds	r3, r7, r4
 8009828:	3302      	adds	r3, #2
 800982a:	0018      	movs	r0, r3
 800982c:	f000 fa70 	bl	8009d10 <sensirion_common_bytes_to_uint16_t>
 8009830:	0003      	movs	r3, r0
 8009832:	001a      	movs	r2, r3
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009838:	193b      	adds	r3, r7, r4
 800983a:	3304      	adds	r3, #4
 800983c:	0018      	movs	r0, r3
 800983e:	f000 fa67 	bl	8009d10 <sensirion_common_bytes_to_uint16_t>
 8009842:	0003      	movs	r3, r0
 8009844:	001a      	movs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800984a:	193b      	adds	r3, r7, r4
 800984c:	3306      	adds	r3, #6
 800984e:	0018      	movs	r0, r3
 8009850:	f000 fa5e 	bl	8009d10 <sensirion_common_bytes_to_uint16_t>
 8009854:	0003      	movs	r3, r0
 8009856:	001a      	movs	r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800985c:	193b      	adds	r3, r7, r4
 800985e:	3308      	adds	r3, #8
 8009860:	0018      	movs	r0, r3
 8009862:	f000 fa81 	bl	8009d68 <sensirion_common_bytes_to_int16_t>
 8009866:	0003      	movs	r3, r0
 8009868:	001a      	movs	r2, r3
 800986a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800986c:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800986e:	193b      	adds	r3, r7, r4
 8009870:	330a      	adds	r3, #10
 8009872:	0018      	movs	r0, r3
 8009874:	f000 fa78 	bl	8009d68 <sensirion_common_bytes_to_int16_t>
 8009878:	0003      	movs	r3, r0
 800987a:	001a      	movs	r2, r3
 800987c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800987e:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009880:	193b      	adds	r3, r7, r4
 8009882:	330c      	adds	r3, #12
 8009884:	0018      	movs	r0, r3
 8009886:	f000 fa6f 	bl	8009d68 <sensirion_common_bytes_to_int16_t>
 800988a:	0003      	movs	r3, r0
 800988c:	001a      	movs	r2, r3
 800988e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009890:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009892:	193b      	adds	r3, r7, r4
 8009894:	330e      	adds	r3, #14
 8009896:	0018      	movs	r0, r3
 8009898:	f000 fa66 	bl	8009d68 <sensirion_common_bytes_to_int16_t>
 800989c:	0003      	movs	r3, r0
 800989e:	001a      	movs	r2, r3
 80098a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098a2:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	0018      	movs	r0, r3
 80098a8:	46bd      	mov	sp, r7
 80098aa:	b00d      	add	sp, #52	@ 0x34
 80098ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ae:	46c0      	nop			@ (mov r8, r8)
 80098b0:	00004e20 	.word	0x00004e20

080098b4 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 80098b4:	b590      	push	{r4, r7, lr}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80098ba:	1dbb      	adds	r3, r7, #6
 80098bc:	2200      	movs	r2, #0
 80098be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 80098c0:	1dbc      	adds	r4, r7, #6
 80098c2:	4a12      	ldr	r2, [pc, #72]	@ (800990c <sen5x_start_fan_cleaning+0x58>)
 80098c4:	1dbb      	adds	r3, r7, #6
 80098c6:	8819      	ldrh	r1, [r3, #0]
 80098c8:	003b      	movs	r3, r7
 80098ca:	0018      	movs	r0, r3
 80098cc:	f001 f9e4 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 80098d0:	0003      	movs	r3, r0
 80098d2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80098d4:	1d3c      	adds	r4, r7, #4
 80098d6:	1dbb      	adds	r3, r7, #6
 80098d8:	881a      	ldrh	r2, [r3, #0]
 80098da:	003b      	movs	r3, r7
 80098dc:	0019      	movs	r1, r3
 80098de:	2069      	movs	r0, #105	@ 0x69
 80098e0:	f001 fa5e 	bl	800ada0 <sensirion_i2c_write_data>
 80098e4:	0003      	movs	r3, r0
 80098e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098e8:	1d3b      	adds	r3, r7, #4
 80098ea:	2200      	movs	r2, #0
 80098ec:	5e9b      	ldrsh	r3, [r3, r2]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <sen5x_start_fan_cleaning+0x46>
        return error;
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	2200      	movs	r2, #0
 80098f6:	5e9b      	ldrsh	r3, [r3, r2]
 80098f8:	e004      	b.n	8009904 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80098fa:	4b05      	ldr	r3, [pc, #20]	@ (8009910 <sen5x_start_fan_cleaning+0x5c>)
 80098fc:	0018      	movs	r0, r3
 80098fe:	f7ff fcd7 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009902:	2300      	movs	r3, #0
}
 8009904:	0018      	movs	r0, r3
 8009906:	46bd      	mov	sp, r7
 8009908:	b003      	add	sp, #12
 800990a:	bd90      	pop	{r4, r7, pc}
 800990c:	00005607 	.word	0x00005607
 8009910:	00004e20 	.word	0x00004e20

08009914 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8009914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	0004      	movs	r4, r0
 800991c:	0008      	movs	r0, r1
 800991e:	0011      	movs	r1, r2
 8009920:	1dbb      	adds	r3, r7, #6
 8009922:	1c22      	adds	r2, r4, #0
 8009924:	801a      	strh	r2, [r3, #0]
 8009926:	1d3b      	adds	r3, r7, #4
 8009928:	1c02      	adds	r2, r0, #0
 800992a:	801a      	strh	r2, [r3, #0]
 800992c:	1cbb      	adds	r3, r7, #2
 800992e:	1c0a      	adds	r2, r1, #0
 8009930:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009932:	2516      	movs	r5, #22
 8009934:	197b      	adds	r3, r7, r5
 8009936:	2200      	movs	r2, #0
 8009938:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800993a:	197c      	adds	r4, r7, r5
 800993c:	4a25      	ldr	r2, [pc, #148]	@ (80099d4 <sen5x_set_temperature_offset_parameters+0xc0>)
 800993e:	197b      	adds	r3, r7, r5
 8009940:	8819      	ldrh	r1, [r3, #0]
 8009942:	2608      	movs	r6, #8
 8009944:	19bb      	adds	r3, r7, r6
 8009946:	0018      	movs	r0, r3
 8009948:	f001 f9a6 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 800994c:	0003      	movs	r3, r0
 800994e:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009950:	197c      	adds	r4, r7, r5
 8009952:	1dbb      	adds	r3, r7, #6
 8009954:	2200      	movs	r2, #0
 8009956:	5e9a      	ldrsh	r2, [r3, r2]
 8009958:	197b      	adds	r3, r7, r5
 800995a:	8819      	ldrh	r1, [r3, #0]
 800995c:	19bb      	adds	r3, r7, r6
 800995e:	0018      	movs	r0, r3
 8009960:	f001 fa05 	bl	800ad6e <sensirion_i2c_add_int16_t_to_buffer>
 8009964:	0003      	movs	r3, r0
 8009966:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009968:	197c      	adds	r4, r7, r5
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	2200      	movs	r2, #0
 800996e:	5e9a      	ldrsh	r2, [r3, r2]
 8009970:	197b      	adds	r3, r7, r5
 8009972:	8819      	ldrh	r1, [r3, #0]
 8009974:	19bb      	adds	r3, r7, r6
 8009976:	0018      	movs	r0, r3
 8009978:	f001 f9f9 	bl	800ad6e <sensirion_i2c_add_int16_t_to_buffer>
 800997c:	0003      	movs	r3, r0
 800997e:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009980:	197c      	adds	r4, r7, r5
 8009982:	1cbb      	adds	r3, r7, #2
 8009984:	881a      	ldrh	r2, [r3, #0]
 8009986:	197b      	adds	r3, r7, r5
 8009988:	8819      	ldrh	r1, [r3, #0]
 800998a:	19bb      	adds	r3, r7, r6
 800998c:	0018      	movs	r0, r3
 800998e:	f001 f9af 	bl	800acf0 <sensirion_i2c_add_uint16_t_to_buffer>
 8009992:	0003      	movs	r3, r0
 8009994:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009996:	2214      	movs	r2, #20
 8009998:	18bc      	adds	r4, r7, r2
 800999a:	197b      	adds	r3, r7, r5
 800999c:	881a      	ldrh	r2, [r3, #0]
 800999e:	19bb      	adds	r3, r7, r6
 80099a0:	0019      	movs	r1, r3
 80099a2:	2069      	movs	r0, #105	@ 0x69
 80099a4:	f001 f9fc 	bl	800ada0 <sensirion_i2c_write_data>
 80099a8:	0003      	movs	r3, r0
 80099aa:	8023      	strh	r3, [r4, #0]
    if (error) {
 80099ac:	2214      	movs	r2, #20
 80099ae:	18bb      	adds	r3, r7, r2
 80099b0:	2100      	movs	r1, #0
 80099b2:	5e5b      	ldrsh	r3, [r3, r1]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d003      	beq.n	80099c0 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 80099b8:	18bb      	adds	r3, r7, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	5e9b      	ldrsh	r3, [r3, r2]
 80099be:	e004      	b.n	80099ca <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80099c0:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <sen5x_set_temperature_offset_parameters+0xc4>)
 80099c2:	0018      	movs	r0, r3
 80099c4:	f7ff fc74 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	0018      	movs	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	b007      	add	sp, #28
 80099d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d2:	46c0      	nop			@ (mov r8, r8)
 80099d4:	000060b2 	.word	0x000060b2
 80099d8:	00004e20 	.word	0x00004e20

080099dc <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	b091      	sub	sp, #68	@ 0x44
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	000a      	movs	r2, r1
 80099e6:	1cfb      	adds	r3, r7, #3
 80099e8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 80099ea:	253e      	movs	r5, #62	@ 0x3e
 80099ec:	197b      	adds	r3, r7, r5
 80099ee:	2200      	movs	r2, #0
 80099f0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 80099f2:	197c      	adds	r4, r7, r5
 80099f4:	4a22      	ldr	r2, [pc, #136]	@ (8009a80 <sen5x_get_product_name+0xa4>)
 80099f6:	197b      	adds	r3, r7, r5
 80099f8:	8819      	ldrh	r1, [r3, #0]
 80099fa:	230c      	movs	r3, #12
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	0018      	movs	r0, r3
 8009a00:	f001 f94a 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 8009a04:	0003      	movs	r3, r0
 8009a06:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009a08:	263c      	movs	r6, #60	@ 0x3c
 8009a0a:	19bc      	adds	r4, r7, r6
 8009a0c:	197b      	adds	r3, r7, r5
 8009a0e:	881a      	ldrh	r2, [r3, #0]
 8009a10:	230c      	movs	r3, #12
 8009a12:	18fb      	adds	r3, r7, r3
 8009a14:	0019      	movs	r1, r3
 8009a16:	2069      	movs	r0, #105	@ 0x69
 8009a18:	f001 f9c2 	bl	800ada0 <sensirion_i2c_write_data>
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a20:	19bb      	adds	r3, r7, r6
 8009a22:	2200      	movs	r2, #0
 8009a24:	5e9b      	ldrsh	r3, [r3, r2]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <sen5x_get_product_name+0x56>
        return error;
 8009a2a:	19bb      	adds	r3, r7, r6
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	5e9b      	ldrsh	r3, [r3, r2]
 8009a30:	e021      	b.n	8009a76 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009a32:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <sen5x_get_product_name+0xa8>)
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7ff fc3b 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009a3a:	253c      	movs	r5, #60	@ 0x3c
 8009a3c:	197c      	adds	r4, r7, r5
 8009a3e:	230c      	movs	r3, #12
 8009a40:	18fb      	adds	r3, r7, r3
 8009a42:	2220      	movs	r2, #32
 8009a44:	0019      	movs	r1, r3
 8009a46:	2069      	movs	r0, #105	@ 0x69
 8009a48:	f001 f9c2 	bl	800add0 <sensirion_i2c_read_data_inplace>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a50:	197b      	adds	r3, r7, r5
 8009a52:	2200      	movs	r2, #0
 8009a54:	5e9b      	ldrsh	r3, [r3, r2]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <sen5x_get_product_name+0x86>
        return error;
 8009a5a:	197b      	adds	r3, r7, r5
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	5e9b      	ldrsh	r3, [r3, r2]
 8009a60:	e009      	b.n	8009a76 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009a62:	1cfb      	adds	r3, r7, #3
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	18fb      	adds	r3, r7, r3
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f000 f988 	bl	8009d84 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	0018      	movs	r0, r3
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	b011      	add	sp, #68	@ 0x44
 8009a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a7e:	46c0      	nop			@ (mov r8, r8)
 8009a80:	0000d014 	.word	0x0000d014
 8009a84:	0000c350 	.word	0x0000c350

08009a88 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a8a:	b091      	sub	sp, #68	@ 0x44
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	000a      	movs	r2, r1
 8009a92:	1cfb      	adds	r3, r7, #3
 8009a94:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009a96:	253e      	movs	r5, #62	@ 0x3e
 8009a98:	197b      	adds	r3, r7, r5
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009a9e:	197c      	adds	r4, r7, r5
 8009aa0:	4a22      	ldr	r2, [pc, #136]	@ (8009b2c <sen5x_get_serial_number+0xa4>)
 8009aa2:	197b      	adds	r3, r7, r5
 8009aa4:	8819      	ldrh	r1, [r3, #0]
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	18fb      	adds	r3, r7, r3
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f001 f8f4 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 8009ab0:	0003      	movs	r3, r0
 8009ab2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ab4:	263c      	movs	r6, #60	@ 0x3c
 8009ab6:	19bc      	adds	r4, r7, r6
 8009ab8:	197b      	adds	r3, r7, r5
 8009aba:	881a      	ldrh	r2, [r3, #0]
 8009abc:	230c      	movs	r3, #12
 8009abe:	18fb      	adds	r3, r7, r3
 8009ac0:	0019      	movs	r1, r3
 8009ac2:	2069      	movs	r0, #105	@ 0x69
 8009ac4:	f001 f96c 	bl	800ada0 <sensirion_i2c_write_data>
 8009ac8:	0003      	movs	r3, r0
 8009aca:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009acc:	19bb      	adds	r3, r7, r6
 8009ace:	2200      	movs	r2, #0
 8009ad0:	5e9b      	ldrsh	r3, [r3, r2]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <sen5x_get_serial_number+0x56>
        return error;
 8009ad6:	19bb      	adds	r3, r7, r6
 8009ad8:	2200      	movs	r2, #0
 8009ada:	5e9b      	ldrsh	r3, [r3, r2]
 8009adc:	e021      	b.n	8009b22 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009ade:	4b14      	ldr	r3, [pc, #80]	@ (8009b30 <sen5x_get_serial_number+0xa8>)
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	f7ff fbe5 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009ae6:	253c      	movs	r5, #60	@ 0x3c
 8009ae8:	197c      	adds	r4, r7, r5
 8009aea:	230c      	movs	r3, #12
 8009aec:	18fb      	adds	r3, r7, r3
 8009aee:	2220      	movs	r2, #32
 8009af0:	0019      	movs	r1, r3
 8009af2:	2069      	movs	r0, #105	@ 0x69
 8009af4:	f001 f96c 	bl	800add0 <sensirion_i2c_read_data_inplace>
 8009af8:	0003      	movs	r3, r0
 8009afa:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009afc:	197b      	adds	r3, r7, r5
 8009afe:	2200      	movs	r2, #0
 8009b00:	5e9b      	ldrsh	r3, [r3, r2]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <sen5x_get_serial_number+0x86>
        return error;
 8009b06:	197b      	adds	r3, r7, r5
 8009b08:	2200      	movs	r2, #0
 8009b0a:	5e9b      	ldrsh	r3, [r3, r2]
 8009b0c:	e009      	b.n	8009b22 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009b0e:	1cfb      	adds	r3, r7, #3
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	230c      	movs	r3, #12
 8009b18:	18fb      	adds	r3, r7, r3
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f000 f932 	bl	8009d84 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	0018      	movs	r0, r3
 8009b24:	46bd      	mov	sp, r7
 8009b26:	b011      	add	sp, #68	@ 0x44
 8009b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b2a:	46c0      	nop			@ (mov r8, r8)
 8009b2c:	0000d033 	.word	0x0000d033
 8009b30:	0000c350 	.word	0x0000c350

08009b34 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b36:	b089      	sub	sp, #36	@ 0x24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009b42:	251e      	movs	r5, #30
 8009b44:	197b      	adds	r3, r7, r5
 8009b46:	2200      	movs	r2, #0
 8009b48:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009b4a:	197c      	adds	r4, r7, r5
 8009b4c:	23d1      	movs	r3, #209	@ 0xd1
 8009b4e:	021a      	lsls	r2, r3, #8
 8009b50:	197b      	adds	r3, r7, r5
 8009b52:	8819      	ldrh	r1, [r3, #0]
 8009b54:	2310      	movs	r3, #16
 8009b56:	18fb      	adds	r3, r7, r3
 8009b58:	0018      	movs	r0, r3
 8009b5a:	f001 f89d 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 8009b5e:	0003      	movs	r3, r0
 8009b60:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b62:	261c      	movs	r6, #28
 8009b64:	19bc      	adds	r4, r7, r6
 8009b66:	197b      	adds	r3, r7, r5
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	2310      	movs	r3, #16
 8009b6c:	18fb      	adds	r3, r7, r3
 8009b6e:	0019      	movs	r1, r3
 8009b70:	2069      	movs	r0, #105	@ 0x69
 8009b72:	f001 f915 	bl	800ada0 <sensirion_i2c_write_data>
 8009b76:	0003      	movs	r3, r0
 8009b78:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b7a:	19bb      	adds	r3, r7, r6
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <sen5x_get_version+0x58>
        return error;
 8009b84:	19bb      	adds	r3, r7, r6
 8009b86:	2200      	movs	r2, #0
 8009b88:	5e9b      	ldrsh	r3, [r3, r2]
 8009b8a:	e038      	b.n	8009bfe <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009c08 <sen5x_get_version+0xd4>)
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f7ff fb8e 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009b94:	251c      	movs	r5, #28
 8009b96:	197c      	adds	r4, r7, r5
 8009b98:	2310      	movs	r3, #16
 8009b9a:	18fb      	adds	r3, r7, r3
 8009b9c:	2208      	movs	r2, #8
 8009b9e:	0019      	movs	r1, r3
 8009ba0:	2069      	movs	r0, #105	@ 0x69
 8009ba2:	f001 f915 	bl	800add0 <sensirion_i2c_read_data_inplace>
 8009ba6:	0003      	movs	r3, r0
 8009ba8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009baa:	197b      	adds	r3, r7, r5
 8009bac:	2200      	movs	r2, #0
 8009bae:	5e9b      	ldrsh	r3, [r3, r2]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <sen5x_get_version+0x88>
        return error;
 8009bb4:	197b      	adds	r3, r7, r5
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	5e9b      	ldrsh	r3, [r3, r2]
 8009bba:	e020      	b.n	8009bfe <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009bbc:	2110      	movs	r1, #16
 8009bbe:	187b      	adds	r3, r7, r1
 8009bc0:	781a      	ldrb	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009bc6:	187b      	adds	r3, r7, r1
 8009bc8:	785a      	ldrb	r2, [r3, #1]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009bce:	187b      	adds	r3, r7, r1
 8009bd0:	789b      	ldrb	r3, [r3, #2]
 8009bd2:	1e5a      	subs	r2, r3, #1
 8009bd4:	4193      	sbcs	r3, r2
 8009bd6:	b2da      	uxtb	r2, r3
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009bdc:	187b      	adds	r3, r7, r1
 8009bde:	78da      	ldrb	r2, [r3, #3]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009be4:	187b      	adds	r3, r7, r1
 8009be6:	791a      	ldrb	r2, [r3, #4]
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009bec:	187b      	adds	r3, r7, r1
 8009bee:	795a      	ldrb	r2, [r3, #5]
 8009bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf2:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009bf4:	187b      	adds	r3, r7, r1
 8009bf6:	799a      	ldrb	r2, [r3, #6]
 8009bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bfa:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	0018      	movs	r0, r3
 8009c00:	46bd      	mov	sp, r7
 8009c02:	b009      	add	sp, #36	@ 0x24
 8009c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c06:	46c0      	nop			@ (mov r8, r8)
 8009c08:	00004e20 	.word	0x00004e20

08009c0c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009c14:	2516      	movs	r5, #22
 8009c16:	197b      	adds	r3, r7, r5
 8009c18:	2200      	movs	r2, #0
 8009c1a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009c1c:	197c      	adds	r4, r7, r5
 8009c1e:	4a22      	ldr	r2, [pc, #136]	@ (8009ca8 <sen5x_read_device_status+0x9c>)
 8009c20:	197b      	adds	r3, r7, r5
 8009c22:	8819      	ldrh	r1, [r3, #0]
 8009c24:	230c      	movs	r3, #12
 8009c26:	18fb      	adds	r3, r7, r3
 8009c28:	0018      	movs	r0, r3
 8009c2a:	f001 f835 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 8009c2e:	0003      	movs	r3, r0
 8009c30:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c32:	2614      	movs	r6, #20
 8009c34:	19bc      	adds	r4, r7, r6
 8009c36:	197b      	adds	r3, r7, r5
 8009c38:	881a      	ldrh	r2, [r3, #0]
 8009c3a:	230c      	movs	r3, #12
 8009c3c:	18fb      	adds	r3, r7, r3
 8009c3e:	0019      	movs	r1, r3
 8009c40:	2069      	movs	r0, #105	@ 0x69
 8009c42:	f001 f8ad 	bl	800ada0 <sensirion_i2c_write_data>
 8009c46:	0003      	movs	r3, r0
 8009c48:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c4a:	19bb      	adds	r3, r7, r6
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	5e9b      	ldrsh	r3, [r3, r2]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <sen5x_read_device_status+0x50>
        return error;
 8009c54:	19bb      	adds	r3, r7, r6
 8009c56:	2200      	movs	r2, #0
 8009c58:	5e9b      	ldrsh	r3, [r3, r2]
 8009c5a:	e020      	b.n	8009c9e <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009c5c:	4b13      	ldr	r3, [pc, #76]	@ (8009cac <sen5x_read_device_status+0xa0>)
 8009c5e:	0018      	movs	r0, r3
 8009c60:	f7ff fb26 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009c64:	2514      	movs	r5, #20
 8009c66:	197c      	adds	r4, r7, r5
 8009c68:	230c      	movs	r3, #12
 8009c6a:	18fb      	adds	r3, r7, r3
 8009c6c:	2204      	movs	r2, #4
 8009c6e:	0019      	movs	r1, r3
 8009c70:	2069      	movs	r0, #105	@ 0x69
 8009c72:	f001 f8ad 	bl	800add0 <sensirion_i2c_read_data_inplace>
 8009c76:	0003      	movs	r3, r0
 8009c78:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c7a:	197b      	adds	r3, r7, r5
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	5e9b      	ldrsh	r3, [r3, r2]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <sen5x_read_device_status+0x80>
        return error;
 8009c84:	197b      	adds	r3, r7, r5
 8009c86:	2200      	movs	r2, #0
 8009c88:	5e9b      	ldrsh	r3, [r3, r2]
 8009c8a:	e008      	b.n	8009c9e <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	18fb      	adds	r3, r7, r3
 8009c90:	0018      	movs	r0, r3
 8009c92:	f000 f850 	bl	8009d36 <sensirion_common_bytes_to_uint32_t>
 8009c96:	0002      	movs	r2, r0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	0018      	movs	r0, r3
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	b007      	add	sp, #28
 8009ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca6:	46c0      	nop			@ (mov r8, r8)
 8009ca8:	0000d206 	.word	0x0000d206
 8009cac:	00004e20 	.word	0x00004e20

08009cb0 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009cb0:	b590      	push	{r4, r7, lr}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009cb6:	1dbb      	adds	r3, r7, #6
 8009cb8:	2200      	movs	r2, #0
 8009cba:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009cbc:	1dbc      	adds	r4, r7, #6
 8009cbe:	4a12      	ldr	r2, [pc, #72]	@ (8009d08 <sen5x_device_reset+0x58>)
 8009cc0:	1dbb      	adds	r3, r7, #6
 8009cc2:	8819      	ldrh	r1, [r3, #0]
 8009cc4:	003b      	movs	r3, r7
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f000 ffe6 	bl	800ac98 <sensirion_i2c_add_command_to_buffer>
 8009ccc:	0003      	movs	r3, r0
 8009cce:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009cd0:	1d3c      	adds	r4, r7, #4
 8009cd2:	1dbb      	adds	r3, r7, #6
 8009cd4:	881a      	ldrh	r2, [r3, #0]
 8009cd6:	003b      	movs	r3, r7
 8009cd8:	0019      	movs	r1, r3
 8009cda:	2069      	movs	r0, #105	@ 0x69
 8009cdc:	f001 f860 	bl	800ada0 <sensirion_i2c_write_data>
 8009ce0:	0003      	movs	r3, r0
 8009ce2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ce4:	1d3b      	adds	r3, r7, #4
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	5e9b      	ldrsh	r3, [r3, r2]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <sen5x_device_reset+0x46>
        return error;
 8009cee:	1d3b      	adds	r3, r7, #4
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	5e9b      	ldrsh	r3, [r3, r2]
 8009cf4:	e004      	b.n	8009d00 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009cf6:	4b05      	ldr	r3, [pc, #20]	@ (8009d0c <sen5x_device_reset+0x5c>)
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f7ff fad9 	bl	80092b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	b003      	add	sp, #12
 8009d06:	bd90      	pop	{r4, r7, pc}
 8009d08:	0000d304 	.word	0x0000d304
 8009d0c:	00030d40 	.word	0x00030d40

08009d10 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	b21a      	sxth	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3301      	adds	r3, #1
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b21b      	sxth	r3, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	b21b      	sxth	r3, r3
 8009d2c:	b29b      	uxth	r3, r3
}
 8009d2e:	0018      	movs	r0, r3
 8009d30:	46bd      	mov	sp, r7
 8009d32:	b002      	add	sp, #8
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	061a      	lsls	r2, r3, #24
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3301      	adds	r3, #1
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	041b      	lsls	r3, r3, #16
 8009d4c:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3302      	adds	r3, #2
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009d56:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	3203      	adds	r2, #3
 8009d5c:	7812      	ldrb	r2, [r2, #0]
 8009d5e:	4313      	orrs	r3, r2
}
 8009d60:	0018      	movs	r0, r3
 8009d62:	46bd      	mov	sp, r7
 8009d64:	b002      	add	sp, #8
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	0018      	movs	r0, r3
 8009d74:	f7ff ffcc 	bl	8009d10 <sensirion_common_bytes_to_uint16_t>
 8009d78:	0003      	movs	r3, r0
 8009d7a:	b21b      	sxth	r3, r3
}
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	b002      	add	sp, #8
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	1dbb      	adds	r3, r7, #6
 8009d90:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009d92:	2316      	movs	r3, #22
 8009d94:	18fb      	adds	r3, r7, r3
 8009d96:	2200      	movs	r2, #0
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	e00f      	b.n	8009dbc <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009d9c:	2016      	movs	r0, #22
 8009d9e:	183b      	adds	r3, r7, r0
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	18d2      	adds	r2, r2, r3
 8009da6:	183b      	adds	r3, r7, r0
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	18cb      	adds	r3, r1, r3
 8009dae:	7812      	ldrb	r2, [r2, #0]
 8009db0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009db2:	183b      	adds	r3, r7, r0
 8009db4:	881a      	ldrh	r2, [r3, #0]
 8009db6:	183b      	adds	r3, r7, r0
 8009db8:	3201      	adds	r2, #1
 8009dba:	801a      	strh	r2, [r3, #0]
 8009dbc:	2316      	movs	r3, #22
 8009dbe:	18fa      	adds	r2, r7, r3
 8009dc0:	1dbb      	adds	r3, r7, #6
 8009dc2:	8812      	ldrh	r2, [r2, #0]
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d3e8      	bcc.n	8009d9c <sensirion_common_copy_bytes+0x18>
    }
}
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	46c0      	nop			@ (mov r8, r8)
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	b006      	add	sp, #24
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d113      	bne.n	8009e1a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	22fe      	movs	r2, #254	@ 0xfe
 8009df6:	0592      	lsls	r2, r2, #22
 8009df8:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8009e68 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009dfe:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	4a1a      	ldr	r2, [pc, #104]	@ (8009e6c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009e04:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4a19      	ldr	r2, [pc, #100]	@ (8009e70 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009e0a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4a19      	ldr	r2, [pc, #100]	@ (8009e74 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009e10:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	4a18      	ldr	r2, [pc, #96]	@ (8009e78 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009e16:	61da      	str	r2, [r3, #28]
 8009e18:	e011      	b.n	8009e3e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4a17      	ldr	r2, [pc, #92]	@ (8009e7c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009e1e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4a17      	ldr	r2, [pc, #92]	@ (8009e80 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009e24:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4a16      	ldr	r2, [pc, #88]	@ (8009e84 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009e2a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4a16      	ldr	r2, [pc, #88]	@ (8009e88 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009e30:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4a15      	ldr	r2, [pc, #84]	@ (8009e8c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009e36:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4a15      	ldr	r2, [pc, #84]	@ (8009e90 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009e3c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4a14      	ldr	r2, [pc, #80]	@ (8009e94 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009e42:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4a14      	ldr	r2, [pc, #80]	@ (8009e98 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009e48:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4a12      	ldr	r2, [pc, #72]	@ (8009e98 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009e4e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4a12      	ldr	r2, [pc, #72]	@ (8009e9c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009e54:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f000 f833 	bl	8009ec4 <GasIndexAlgorithm_reset>
}
 8009e5e:	46c0      	nop			@ (mov r8, r8)
 8009e60:	46bd      	mov	sp, r7
 8009e62:	b004      	add	sp, #16
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	46c0      	nop			@ (mov r8, r8)
 8009e68:	00002710 	.word	0x00002710
 8009e6c:	44340000 	.word	0x44340000
 8009e70:	46859800 	.word	0x46859800
 8009e74:	46a05000 	.word	0x46a05000
 8009e78:	41f00000 	.word	0x41f00000
 8009e7c:	42c80000 	.word	0x42c80000
 8009e80:	00004e20 	.word	0x00004e20
 8009e84:	43340000 	.word	0x43340000
 8009e88:	4528c000 	.word	0x4528c000
 8009e8c:	45a32000 	.word	0x45a32000
 8009e90:	43aa0000 	.word	0x43aa0000
 8009e94:	43660000 	.word	0x43660000
 8009e98:	41400000 	.word	0x41400000
 8009e9c:	42480000 	.word	0x42480000

08009ea0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009eaa:	4a05      	ldr	r2, [pc, #20]	@ (8009ec0 <GasIndexAlgorithm_init+0x20>)
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f7ff ff8f 	bl	8009dd4 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8009eb6:	46c0      	nop			@ (mov r8, r8)
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	b002      	add	sp, #8
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	46c0      	nop			@ (mov r8, r8)
 8009ec0:	44610000 	.word	0x44610000

08009ec4 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f000 f805 	bl	8009ef0 <GasIndexAlgorithm__init_instances>
}
 8009ee6:	46c0      	nop			@ (mov r8, r8)
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	b002      	add	sp, #8
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8009ef0:	b590      	push	{r4, r7, lr}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	0018      	movs	r0, r3
 8009efc:	f000 f8e8 	bl	800a0d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	0018      	movs	r0, r3
 8009f04:	f000 f9a6 	bl	800a254 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009f08:	1c04      	adds	r4, r0, #0
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	f000 f9ab 	bl	800a268 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009f12:	1c02      	adds	r2, r0, #0
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	1c21      	adds	r1, r4, #0
 8009f18:	0018      	movs	r0, r3
 8009f1a:	f000 fc3b 	bl	800a794 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d107      	bne.n	8009f36 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009f26:	23fe      	movs	r3, #254	@ 0xfe
 8009f28:	059b      	lsls	r3, r3, #22
 8009f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f54 <GasIndexAlgorithm__init_instances+0x64>)
 8009f2c:	490a      	ldr	r1, [pc, #40]	@ (8009f58 <GasIndexAlgorithm__init_instances+0x68>)
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fc86 	bl	800a840 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8009f34:	e005      	b.n	8009f42 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009f36:	4b09      	ldr	r3, [pc, #36]	@ (8009f5c <GasIndexAlgorithm__init_instances+0x6c>)
 8009f38:	4a09      	ldr	r2, [pc, #36]	@ (8009f60 <GasIndexAlgorithm__init_instances+0x70>)
 8009f3a:	490a      	ldr	r1, [pc, #40]	@ (8009f64 <GasIndexAlgorithm__init_instances+0x74>)
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fc7f 	bl	800a840 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	0018      	movs	r0, r3
 8009f46:	f000 fd35 	bl	800a9b4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b003      	add	sp, #12
 8009f50:	bd90      	pop	{r4, r7, pc}
 8009f52:	46c0      	nop			@ (mov r8, r8)
 8009f54:	bc257a78 	.word	0xbc257a78
 8009f58:	44198000 	.word	0x44198000
 8009f5c:	42c80000 	.word	0x42c80000
 8009f60:	bbd4fdf4 	.word	0xbbd4fdf4
 8009f64:	43550000 	.word	0x43550000

08009f68 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8009f68:	b590      	push	{r4, r7, lr}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f78:	4952      	ldr	r1, [pc, #328]	@ (800a0c4 <GasIndexAlgorithm_process+0x15c>)
 8009f7a:	1c18      	adds	r0, r3, #0
 8009f7c:	f7f6 fae2 	bl	8000544 <__aeabi_fcmple>
 8009f80:	1e03      	subs	r3, r0, #0
 8009f82:	d00c      	beq.n	8009f9e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	1c19      	adds	r1, r3, #0
 8009f8e:	1c10      	adds	r0, r2, #0
 8009f90:	f7f6 fc96 	bl	80008c0 <__aeabi_fadd>
 8009f94:	1c03      	adds	r3, r0, #0
 8009f96:	1c1a      	adds	r2, r3, #0
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f9c:	e080      	b.n	800a0a0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dd25      	ble.n	8009ff0 <GasIndexAlgorithm_process+0x88>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	4a48      	ldr	r2, [pc, #288]	@ (800a0c8 <GasIndexAlgorithm_process+0x160>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	dc21      	bgt.n	8009ff0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	68ba      	ldr	r2, [r7, #8]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	dc04      	bgt.n	8009fc0 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60bb      	str	r3, [r7, #8]
 8009fbe:	e00d      	b.n	8009fdc <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	4a41      	ldr	r2, [pc, #260]	@ (800a0cc <GasIndexAlgorithm_process+0x164>)
 8009fc6:	4694      	mov	ip, r2
 8009fc8:	4463      	add	r3, ip
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	dd05      	ble.n	8009fdc <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	4a3d      	ldr	r2, [pc, #244]	@ (800a0cc <GasIndexAlgorithm_process+0x164>)
 8009fd6:	4694      	mov	ip, r2
 8009fd8:	4463      	add	r3, ip
 8009fda:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f7f7 faf3 	bl	80015d0 <__aeabi_i2f>
 8009fea:	1c02      	adds	r2, r0, #0
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f000 f945 	bl	800a28a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a000:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a002:	d014      	beq.n	800a02e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	1c11      	adds	r1, r2, #0
 800a00c:	0018      	movs	r0, r3
 800a00e:	f000 fbd1 	bl	800a7b4 <GasIndexAlgorithm__mox_model__process>
 800a012:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	1c11      	adds	r1, r2, #0
 800a020:	0018      	movs	r0, r3
 800a022:	f000 fc25 	bl	800a870 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a026:	1c02      	adds	r2, r0, #0
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a02c:	e003      	b.n	800a036 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	689a      	ldr	r2, [r3, #8]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	1c11      	adds	r1, r2, #0
 800a03e:	0018      	movs	r0, r3
 800a040:	f000 fcec 	bl	800aa1c <GasIndexAlgorithm__adaptive_lowpass__process>
 800a044:	1c02      	adds	r2, r0, #0
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a04e:	21fc      	movs	r1, #252	@ 0xfc
 800a050:	0589      	lsls	r1, r1, #22
 800a052:	1c18      	adds	r0, r3, #0
 800a054:	f7f6 fa6c 	bl	8000530 <__aeabi_fcmplt>
 800a058:	1e03      	subs	r3, r0, #0
 800a05a:	d003      	beq.n	800a064 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	22fc      	movs	r2, #252	@ 0xfc
 800a060:	0592      	lsls	r2, r2, #22
 800a062:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a068:	2100      	movs	r1, #0
 800a06a:	1c18      	adds	r0, r3, #0
 800a06c:	f7f6 fa74 	bl	8000558 <__aeabi_fcmpgt>
 800a070:	1e03      	subs	r3, r0, #0
 800a072:	d015      	beq.n	800a0a0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	1c11      	adds	r1, r2, #0
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 fa4f 	bl	800a520 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	0018      	movs	r0, r3
 800a086:	f000 f8e5 	bl	800a254 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a08a:	1c04      	adds	r4, r0, #0
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	0018      	movs	r0, r3
 800a090:	f000 f8ea 	bl	800a268 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a094:	1c02      	adds	r2, r0, #0
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	1c21      	adds	r1, r4, #0
 800a09a:	0018      	movs	r0, r3
 800a09c:	f000 fb7a 	bl	800a794 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a4:	21fc      	movs	r1, #252	@ 0xfc
 800a0a6:	0589      	lsls	r1, r1, #22
 800a0a8:	1c18      	adds	r0, r3, #0
 800a0aa:	f7f6 fc09 	bl	80008c0 <__aeabi_fadd>
 800a0ae:	1c03      	adds	r3, r0, #0
 800a0b0:	1c18      	adds	r0, r3, #0
 800a0b2:	f7f7 fa6d 	bl	8001590 <__aeabi_f2iz>
 800a0b6:	0002      	movs	r2, r0
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	601a      	str	r2, [r3, #0]
    return;
 800a0bc:	46c0      	nop			@ (mov r8, r8)
}
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	b005      	add	sp, #20
 800a0c2:	bd90      	pop	{r4, r7, pc}
 800a0c4:	42340000 	.word	0x42340000
 800a0c8:	0000fde7 	.word	0x0000fde7
 800a0cc:	00007fff 	.word	0x00007fff

0800a0d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a0d0:	b5b0      	push	{r4, r5, r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	223c      	movs	r2, #60	@ 0x3c
 800a0dc:	2100      	movs	r1, #0
 800a0de:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	4952      	ldr	r1, [pc, #328]	@ (800a244 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a0fa:	1c18      	adds	r0, r3, #0
 800a0fc:	f7f6 fd6a 	bl	8000bd4 <__aeabi_fdiv>
 800a100:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a102:	2188      	movs	r1, #136	@ 0x88
 800a104:	05c9      	lsls	r1, r1, #23
 800a106:	1c18      	adds	r0, r3, #0
 800a108:	f7f6 ff4a 	bl	8000fa0 <__aeabi_fmul>
 800a10c:	1c03      	adds	r3, r0, #0
 800a10e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	494a      	ldr	r1, [pc, #296]	@ (800a244 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a11a:	1c18      	adds	r0, r3, #0
 800a11c:	f7f6 fd5a 	bl	8000bd4 <__aeabi_fdiv>
 800a120:	1c03      	adds	r3, r0, #0
 800a122:	1c19      	adds	r1, r3, #0
 800a124:	1c20      	adds	r0, r4, #0
 800a126:	f7f6 fbcb 	bl	80008c0 <__aeabi_fadd>
 800a12a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a12c:	1c19      	adds	r1, r3, #0
 800a12e:	1c28      	adds	r0, r5, #0
 800a130:	f7f6 fd50 	bl	8000bd4 <__aeabi_fdiv>
 800a134:	1c03      	adds	r3, r0, #0
 800a136:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4940      	ldr	r1, [pc, #256]	@ (800a244 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a142:	1c18      	adds	r0, r3, #0
 800a144:	f7f6 fd46 	bl	8000bd4 <__aeabi_fdiv>
 800a148:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a14a:	2185      	movs	r1, #133	@ 0x85
 800a14c:	05c9      	lsls	r1, r1, #23
 800a14e:	1c18      	adds	r0, r3, #0
 800a150:	f7f6 ff26 	bl	8000fa0 <__aeabi_fmul>
 800a154:	1c03      	adds	r3, r0, #0
 800a156:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	4938      	ldr	r1, [pc, #224]	@ (800a244 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a162:	1c18      	adds	r0, r3, #0
 800a164:	f7f6 fd36 	bl	8000bd4 <__aeabi_fdiv>
 800a168:	1c03      	adds	r3, r0, #0
 800a16a:	1c19      	adds	r1, r3, #0
 800a16c:	1c20      	adds	r0, r4, #0
 800a16e:	f7f6 fba7 	bl	80008c0 <__aeabi_fadd>
 800a172:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a174:	1c19      	adds	r1, r3, #0
 800a176:	1c28      	adds	r0, r5, #0
 800a178:	f7f6 fd2c 	bl	8000bd4 <__aeabi_fdiv>
 800a17c:	1c03      	adds	r3, r0, #0
 800a17e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d118      	bne.n	800a1be <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a190:	2188      	movs	r1, #136	@ 0x88
 800a192:	05c9      	lsls	r1, r1, #23
 800a194:	1c18      	adds	r0, r3, #0
 800a196:	f7f6 ff03 	bl	8000fa0 <__aeabi_fmul>
 800a19a:	1c03      	adds	r3, r0, #0
 800a19c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a1a2:	4929      	ldr	r1, [pc, #164]	@ (800a248 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a1a4:	1c18      	adds	r0, r3, #0
 800a1a6:	f7f6 fb8b 	bl	80008c0 <__aeabi_fadd>
 800a1aa:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a1ac:	1c19      	adds	r1, r3, #0
 800a1ae:	1c20      	adds	r0, r4, #0
 800a1b0:	f7f6 fd10 	bl	8000bd4 <__aeabi_fdiv>
 800a1b4:	1c03      	adds	r3, r0, #0
 800a1b6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	655a      	str	r2, [r3, #84]	@ 0x54
 800a1bc:	e017      	b.n	800a1ee <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a1c2:	2188      	movs	r1, #136	@ 0x88
 800a1c4:	05c9      	lsls	r1, r1, #23
 800a1c6:	1c18      	adds	r0, r3, #0
 800a1c8:	f7f6 feea 	bl	8000fa0 <__aeabi_fmul>
 800a1cc:	1c03      	adds	r3, r0, #0
 800a1ce:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a1d4:	491d      	ldr	r1, [pc, #116]	@ (800a24c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a1d6:	1c18      	adds	r0, r3, #0
 800a1d8:	f7f6 fb72 	bl	80008c0 <__aeabi_fadd>
 800a1dc:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a1de:	1c19      	adds	r1, r3, #0
 800a1e0:	1c20      	adds	r0, r4, #0
 800a1e2:	f7f6 fcf7 	bl	8000bd4 <__aeabi_fdiv>
 800a1e6:	1c03      	adds	r3, r0, #0
 800a1e8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a1f2:	2185      	movs	r1, #133	@ 0x85
 800a1f4:	05c9      	lsls	r1, r1, #23
 800a1f6:	1c18      	adds	r0, r3, #0
 800a1f8:	f7f6 fed2 	bl	8000fa0 <__aeabi_fmul>
 800a1fc:	1c03      	adds	r3, r0, #0
 800a1fe:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	4912      	ldr	r1, [pc, #72]	@ (800a250 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a206:	1c18      	adds	r0, r3, #0
 800a208:	f7f6 fb5a 	bl	80008c0 <__aeabi_fadd>
 800a20c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a20e:	1c19      	adds	r1, r3, #0
 800a210:	1c20      	adds	r0, r4, #0
 800a212:	f7f6 fcdf 	bl	8000bd4 <__aeabi_fdiv>
 800a216:	1c03      	adds	r3, r0, #0
 800a218:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a23c:	46c0      	nop			@ (mov r8, r8)
 800a23e:	46bd      	mov	sp, r7
 800a240:	b002      	add	sp, #8
 800a242:	bdb0      	pop	{r4, r5, r7, pc}
 800a244:	45610000 	.word	0x45610000
 800a248:	44960000 	.word	0x44960000
 800a24c:	41a00000 	.word	0x41a00000
 800a250:	451c4000 	.word	0x451c4000

0800a254 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a260:	1c18      	adds	r0, r3, #0
 800a262:	46bd      	mov	sp, r7
 800a264:	b002      	add	sp, #8
 800a266:	bd80      	pop	{r7, pc}

0800a268 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a278:	1c19      	adds	r1, r3, #0
 800a27a:	1c10      	adds	r0, r2, #0
 800a27c:	f7f6 fb20 	bl	80008c0 <__aeabi_fadd>
 800a280:	1c03      	adds	r3, r0, #0
}
 800a282:	1c18      	adds	r0, r3, #0
 800a284:	46bd      	mov	sp, r7
 800a286:	b002      	add	sp, #8
 800a288:	bd80      	pop	{r7, pc}

0800a28a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	223c      	movs	r2, #60	@ 0x3c
 800a296:	5c9b      	ldrb	r3, [r3, r2]
}
 800a298:	0018      	movs	r0, r3
 800a29a:	46bd      	mov	sp, r7
 800a29c:	b002      	add	sp, #8
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a2a0:	b5b0      	push	{r4, r5, r7, lr}
 800a2a2:	b08c      	sub	sp, #48	@ 0x30
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a2ac:	1c19      	adds	r1, r3, #0
 800a2ae:	4895      	ldr	r0, [pc, #596]	@ (800a504 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a2b0:	f7f6 ffb4 	bl	800121c <__aeabi_fsub>
 800a2b4:	1c03      	adds	r3, r0, #0
 800a2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2bc:	1c19      	adds	r1, r3, #0
 800a2be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2c0:	f7f6 f94a 	bl	8000558 <__aeabi_fcmpgt>
 800a2c4:	1e03      	subs	r3, r0, #0
 800a2c6:	d00b      	beq.n	800a2e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a2d0:	1c19      	adds	r1, r3, #0
 800a2d2:	1c10      	adds	r0, r2, #0
 800a2d4:	f7f6 faf4 	bl	80008c0 <__aeabi_fadd>
 800a2d8:	1c03      	adds	r3, r0, #0
 800a2da:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2e4:	1c19      	adds	r1, r3, #0
 800a2e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2e8:	f7f6 f936 	bl	8000558 <__aeabi_fcmpgt>
 800a2ec:	1e03      	subs	r3, r0, #0
 800a2ee:	d00b      	beq.n	800a308 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a2f8:	1c19      	adds	r1, r3, #0
 800a2fa:	1c10      	adds	r0, r2, #0
 800a2fc:	f7f6 fae0 	bl	80008c0 <__aeabi_fadd>
 800a300:	1c03      	adds	r3, r0, #0
 800a302:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6959      	ldr	r1, [r3, #20]
 800a30c:	4a7e      	ldr	r2, [pc, #504]	@ (800a508 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	0018      	movs	r0, r3
 800a312:	f000 f9f1 	bl	800a6f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	1c11      	adds	r1, r2, #0
 800a31e:	0018      	movs	r0, r3
 800a320:	f000 f9fa 	bl	800a718 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a324:	1c03      	adds	r3, r0, #0
 800a326:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a334:	1c19      	adds	r1, r3, #0
 800a336:	1c10      	adds	r0, r2, #0
 800a338:	f7f6 ff70 	bl	800121c <__aeabi_fsub>
 800a33c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a33e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a340:	1c18      	adds	r0, r3, #0
 800a342:	f7f6 fe2d 	bl	8000fa0 <__aeabi_fmul>
 800a346:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a348:	1c19      	adds	r1, r3, #0
 800a34a:	1c20      	adds	r0, r4, #0
 800a34c:	f7f6 fab8 	bl	80008c0 <__aeabi_fadd>
 800a350:	1c03      	adds	r3, r0, #0
 800a352:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a35c:	1c19      	adds	r1, r3, #0
 800a35e:	486b      	ldr	r0, [pc, #428]	@ (800a50c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a360:	f7f6 ff5c 	bl	800121c <__aeabi_fsub>
 800a364:	1c03      	adds	r3, r0, #0
 800a366:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	1c11      	adds	r1, r2, #0
 800a370:	0018      	movs	r0, r3
 800a372:	f000 f9d1 	bl	800a718 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a376:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a378:	1c19      	adds	r1, r3, #0
 800a37a:	1c28      	adds	r0, r5, #0
 800a37c:	f7f6 fe10 	bl	8000fa0 <__aeabi_fmul>
 800a380:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a382:	1c19      	adds	r1, r3, #0
 800a384:	1c20      	adds	r0, r4, #0
 800a386:	f7f6 fa9b 	bl	80008c0 <__aeabi_fadd>
 800a38a:	1c03      	adds	r3, r0, #0
 800a38c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a38e:	4a60      	ldr	r2, [pc, #384]	@ (800a510 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a390:	6a39      	ldr	r1, [r7, #32]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	0018      	movs	r0, r3
 800a396:	f000 f9af 	bl	800a6f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	1c11      	adds	r1, r2, #0
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	f000 f9b8 	bl	800a718 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a3a8:	1c03      	adds	r3, r0, #0
 800a3aa:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a3ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3ae:	69f8      	ldr	r0, [r7, #28]
 800a3b0:	f7f6 fdf6 	bl	8000fa0 <__aeabi_fmul>
 800a3b4:	1c03      	adds	r3, r0, #0
 800a3b6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6999      	ldr	r1, [r3, #24]
 800a3c0:	4a51      	ldr	r2, [pc, #324]	@ (800a508 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f000 f997 	bl	800a6f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	1c11      	adds	r1, r2, #0
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f000 f9a0 	bl	800a718 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a3d8:	1c03      	adds	r3, r0, #0
 800a3da:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a3e8:	1c19      	adds	r1, r3, #0
 800a3ea:	1c10      	adds	r0, r2, #0
 800a3ec:	f7f6 ff16 	bl	800121c <__aeabi_fsub>
 800a3f0:	1c03      	adds	r3, r0, #0
 800a3f2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a3f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3f6:	69b8      	ldr	r0, [r7, #24]
 800a3f8:	f7f6 ff10 	bl	800121c <__aeabi_fsub>
 800a3fc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a3fe:	1c19      	adds	r1, r3, #0
 800a400:	1c28      	adds	r0, r5, #0
 800a402:	f7f6 fdcd 	bl	8000fa0 <__aeabi_fmul>
 800a406:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a408:	1c19      	adds	r1, r3, #0
 800a40a:	1c20      	adds	r0, r4, #0
 800a40c:	f7f6 fa58 	bl	80008c0 <__aeabi_fadd>
 800a410:	1c03      	adds	r3, r0, #0
 800a412:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a41c:	1c19      	adds	r1, r3, #0
 800a41e:	483b      	ldr	r0, [pc, #236]	@ (800a50c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a420:	f7f6 fefc 	bl	800121c <__aeabi_fsub>
 800a424:	1c03      	adds	r3, r0, #0
 800a426:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	1c11      	adds	r1, r2, #0
 800a430:	0018      	movs	r0, r3
 800a432:	f000 f971 	bl	800a718 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a436:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a438:	1c19      	adds	r1, r3, #0
 800a43a:	1c28      	adds	r0, r5, #0
 800a43c:	f7f6 fdb0 	bl	8000fa0 <__aeabi_fmul>
 800a440:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a442:	1c19      	adds	r1, r3, #0
 800a444:	1c20      	adds	r0, r4, #0
 800a446:	f7f6 fa3b 	bl	80008c0 <__aeabi_fadd>
 800a44a:	1c03      	adds	r3, r0, #0
 800a44c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a44e:	4a30      	ldr	r2, [pc, #192]	@ (800a510 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a450:	6939      	ldr	r1, [r7, #16]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	0018      	movs	r0, r3
 800a456:	f000 f94f 	bl	800a6f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	1c11      	adds	r1, r2, #0
 800a462:	0018      	movs	r0, r3
 800a464:	f000 f958 	bl	800a718 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a468:	1c03      	adds	r3, r0, #0
 800a46a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a46c:	6979      	ldr	r1, [r7, #20]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f7f6 fd96 	bl	8000fa0 <__aeabi_fmul>
 800a474:	1c03      	adds	r3, r0, #0
 800a476:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	4923      	ldr	r1, [pc, #140]	@ (800a514 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a486:	1c18      	adds	r0, r3, #0
 800a488:	f7f6 fba4 	bl	8000bd4 <__aeabi_fdiv>
 800a48c:	1c03      	adds	r3, r0, #0
 800a48e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a490:	69f9      	ldr	r1, [r7, #28]
 800a492:	20fe      	movs	r0, #254	@ 0xfe
 800a494:	0580      	lsls	r0, r0, #22
 800a496:	f7f6 fec1 	bl	800121c <__aeabi_fsub>
 800a49a:	1c03      	adds	r3, r0, #0
 800a49c:	491e      	ldr	r1, [pc, #120]	@ (800a518 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a49e:	1c18      	adds	r0, r3, #0
 800a4a0:	f7f6 fd7e 	bl	8000fa0 <__aeabi_fmul>
 800a4a4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a4a6:	491d      	ldr	r1, [pc, #116]	@ (800a51c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a4a8:	1c18      	adds	r0, r3, #0
 800a4aa:	f7f6 feb7 	bl	800121c <__aeabi_fsub>
 800a4ae:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a4b0:	1c19      	adds	r1, r3, #0
 800a4b2:	1c28      	adds	r0, r5, #0
 800a4b4:	f7f6 fd74 	bl	8000fa0 <__aeabi_fmul>
 800a4b8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a4ba:	1c19      	adds	r1, r3, #0
 800a4bc:	1c20      	adds	r0, r4, #0
 800a4be:	f7f6 f9ff 	bl	80008c0 <__aeabi_fadd>
 800a4c2:	1c03      	adds	r3, r0, #0
 800a4c4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	1c18      	adds	r0, r3, #0
 800a4d2:	f7f6 f82d 	bl	8000530 <__aeabi_fcmplt>
 800a4d6:	1e03      	subs	r3, r0, #0
 800a4d8:	d002      	beq.n	800a4e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a4e8:	1c19      	adds	r1, r3, #0
 800a4ea:	1c10      	adds	r0, r2, #0
 800a4ec:	f7f6 f834 	bl	8000558 <__aeabi_fcmpgt>
 800a4f0:	1e03      	subs	r3, r0, #0
 800a4f2:	d100      	bne.n	800a4f6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a4f4:	e002      	b.n	800a4fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a4fc:	46c0      	nop			@ (mov r8, r8)
 800a4fe:	46bd      	mov	sp, r7
 800a500:	b00c      	add	sp, #48	@ 0x30
 800a502:	bdb0      	pop	{r4, r5, r7, pc}
 800a504:	46fffe00 	.word	0x46fffe00
 800a508:	3c23d70a 	.word	0x3c23d70a
 800a50c:	43ff0000 	.word	0x43ff0000
 800a510:	3db851ec 	.word	0x3db851ec
 800a514:	42700000 	.word	0x42700000
 800a518:	3fa66666 	.word	0x3fa66666
 800a51c:	3e99999a 	.word	0x3e99999a

0800a520 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	223c      	movs	r2, #60	@ 0x3c
 800a52e:	5c9b      	ldrb	r3, [r3, r2]
 800a530:	2201      	movs	r2, #1
 800a532:	4053      	eors	r3, r2
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00a      	beq.n	800a550 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	223c      	movs	r2, #60	@ 0x3c
 800a53e:	2101      	movs	r1, #1
 800a540:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a54e:	e0c8      	b.n	800a6e2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a554:	4965      	ldr	r1, [pc, #404]	@ (800a6ec <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a556:	1c18      	adds	r0, r3, #0
 800a558:	f7f6 f808 	bl	800056c <__aeabi_fcmpge>
 800a55c:	1e03      	subs	r3, r0, #0
 800a55e:	d107      	bne.n	800a570 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a564:	4962      	ldr	r1, [pc, #392]	@ (800a6f0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a566:	1c18      	adds	r0, r3, #0
 800a568:	f7f5 ffec 	bl	8000544 <__aeabi_fcmple>
 800a56c:	1e03      	subs	r3, r0, #0
 800a56e:	d00e      	beq.n	800a58e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a578:	1c19      	adds	r1, r3, #0
 800a57a:	1c10      	adds	r0, r2, #0
 800a57c:	f7f6 f9a0 	bl	80008c0 <__aeabi_fadd>
 800a580:	1c03      	adds	r3, r0, #0
 800a582:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a592:	1c19      	adds	r1, r3, #0
 800a594:	6838      	ldr	r0, [r7, #0]
 800a596:	f7f6 fe41 	bl	800121c <__aeabi_fsub>
 800a59a:	1c03      	adds	r3, r0, #0
 800a59c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	f7ff fe7d 	bl	800a2a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5aa:	1c19      	adds	r1, r3, #0
 800a5ac:	6838      	ldr	r0, [r7, #0]
 800a5ae:	f7f6 fe35 	bl	800121c <__aeabi_fsub>
 800a5b2:	1c03      	adds	r3, r0, #0
 800a5b4:	2185      	movs	r1, #133	@ 0x85
 800a5b6:	05c9      	lsls	r1, r1, #23
 800a5b8:	1c18      	adds	r0, r3, #0
 800a5ba:	f7f6 fb0b 	bl	8000bd4 <__aeabi_fdiv>
 800a5be:	1c03      	adds	r3, r0, #0
 800a5c0:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7f5 ffb3 	bl	8000530 <__aeabi_fcmplt>
 800a5ca:	1e03      	subs	r3, r0, #0
 800a5cc:	d008      	beq.n	800a5e0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5d2:	68f9      	ldr	r1, [r7, #12]
 800a5d4:	1c18      	adds	r0, r3, #0
 800a5d6:	f7f6 fe21 	bl	800121c <__aeabi_fsub>
 800a5da:	1c03      	adds	r3, r0, #0
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	e007      	b.n	800a5f0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5e4:	1c19      	adds	r1, r3, #0
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f7f6 f96a 	bl	80008c0 <__aeabi_fadd>
 800a5ec:	1c03      	adds	r3, r0, #0
 800a5ee:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a5f0:	23fe      	movs	r3, #254	@ 0xfe
 800a5f2:	059b      	lsls	r3, r3, #22
 800a5f4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a5f6:	493f      	ldr	r1, [pc, #252]	@ (800a6f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a5f8:	6978      	ldr	r0, [r7, #20]
 800a5fa:	f7f5 ffad 	bl	8000558 <__aeabi_fcmpgt>
 800a5fe:	1e03      	subs	r3, r0, #0
 800a600:	d010      	beq.n	800a624 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a602:	493c      	ldr	r1, [pc, #240]	@ (800a6f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a604:	6978      	ldr	r0, [r7, #20]
 800a606:	f7f6 fae5 	bl	8000bd4 <__aeabi_fdiv>
 800a60a:	1c03      	adds	r3, r0, #0
 800a60c:	1c1c      	adds	r4, r3, #0
 800a60e:	4939      	ldr	r1, [pc, #228]	@ (800a6f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a610:	6978      	ldr	r0, [r7, #20]
 800a612:	f7f6 fadf 	bl	8000bd4 <__aeabi_fdiv>
 800a616:	1c03      	adds	r3, r0, #0
 800a618:	1c19      	adds	r1, r3, #0
 800a61a:	1c20      	adds	r0, r4, #0
 800a61c:	f7f6 fcc0 	bl	8000fa0 <__aeabi_fmul>
 800a620:	1c03      	adds	r3, r0, #0
 800a622:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a628:	1c19      	adds	r1, r3, #0
 800a62a:	2085      	movs	r0, #133	@ 0x85
 800a62c:	05c0      	lsls	r0, r0, #23
 800a62e:	f7f6 fdf5 	bl	800121c <__aeabi_fsub>
 800a632:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a634:	6939      	ldr	r1, [r7, #16]
 800a636:	1c18      	adds	r0, r3, #0
 800a638:	f7f6 fcb2 	bl	8000fa0 <__aeabi_fmul>
 800a63c:	1c03      	adds	r3, r0, #0
 800a63e:	1c18      	adds	r0, r3, #0
 800a640:	f017 fc34 	bl	8021eac <sqrtf>
 800a644:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a64e:	2185      	movs	r1, #133	@ 0x85
 800a650:	05c9      	lsls	r1, r1, #23
 800a652:	6938      	ldr	r0, [r7, #16]
 800a654:	f7f6 fca4 	bl	8000fa0 <__aeabi_fmul>
 800a658:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a65a:	1c19      	adds	r1, r3, #0
 800a65c:	1c28      	adds	r0, r5, #0
 800a65e:	f7f6 fab9 	bl	8000bd4 <__aeabi_fdiv>
 800a662:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a664:	1c19      	adds	r1, r3, #0
 800a666:	1c20      	adds	r0, r4, #0
 800a668:	f7f6 fc9a 	bl	8000fa0 <__aeabi_fmul>
 800a66c:	1c03      	adds	r3, r0, #0
 800a66e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a674:	68f9      	ldr	r1, [r7, #12]
 800a676:	1c18      	adds	r0, r3, #0
 800a678:	f7f6 fc92 	bl	8000fa0 <__aeabi_fmul>
 800a67c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a67e:	6939      	ldr	r1, [r7, #16]
 800a680:	1c18      	adds	r0, r3, #0
 800a682:	f7f6 faa7 	bl	8000bd4 <__aeabi_fdiv>
 800a686:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a688:	68f9      	ldr	r1, [r7, #12]
 800a68a:	1c18      	adds	r0, r3, #0
 800a68c:	f7f6 fc88 	bl	8000fa0 <__aeabi_fmul>
 800a690:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a692:	1c19      	adds	r1, r3, #0
 800a694:	1c20      	adds	r0, r4, #0
 800a696:	f7f6 f913 	bl	80008c0 <__aeabi_fadd>
 800a69a:	1c03      	adds	r3, r0, #0
 800a69c:	1c18      	adds	r0, r3, #0
 800a69e:	f017 fc05 	bl	8021eac <sqrtf>
 800a6a2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a6a4:	1c19      	adds	r1, r3, #0
 800a6a6:	1c30      	adds	r0, r6, #0
 800a6a8:	f7f6 fc7a 	bl	8000fa0 <__aeabi_fmul>
 800a6ac:	1c03      	adds	r3, r0, #0
 800a6ae:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6bc:	68f9      	ldr	r1, [r7, #12]
 800a6be:	1c18      	adds	r0, r3, #0
 800a6c0:	f7f6 fc6e 	bl	8000fa0 <__aeabi_fmul>
 800a6c4:	1c03      	adds	r3, r0, #0
 800a6c6:	2182      	movs	r1, #130	@ 0x82
 800a6c8:	05c9      	lsls	r1, r1, #23
 800a6ca:	1c18      	adds	r0, r3, #0
 800a6cc:	f7f6 fa82 	bl	8000bd4 <__aeabi_fdiv>
 800a6d0:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a6d2:	1c19      	adds	r1, r3, #0
 800a6d4:	1c20      	adds	r0, r4, #0
 800a6d6:	f7f6 f8f3 	bl	80008c0 <__aeabi_fadd>
 800a6da:	1c03      	adds	r3, r0, #0
 800a6dc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a6e2:	46c0      	nop			@ (mov r8, r8)
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	b007      	add	sp, #28
 800a6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ea:	46c0      	nop			@ (mov r8, r8)
 800a6ec:	42c80000 	.word	0x42c80000
 800a6f0:	c2c80000 	.word	0xc2c80000
 800a6f4:	44b40000 	.word	0x44b40000

0800a6f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a710:	46c0      	nop			@ (mov r8, r8)
 800a712:	46bd      	mov	sp, r7
 800a714:	b004      	add	sp, #16
 800a716:	bd80      	pop	{r7, pc}

0800a718 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a718:	b590      	push	{r4, r7, lr}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a72a:	1c19      	adds	r1, r3, #0
 800a72c:	6838      	ldr	r0, [r7, #0]
 800a72e:	f7f6 fd75 	bl	800121c <__aeabi_fsub>
 800a732:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a734:	1c19      	adds	r1, r3, #0
 800a736:	1c20      	adds	r0, r4, #0
 800a738:	f7f6 fc32 	bl	8000fa0 <__aeabi_fmul>
 800a73c:	1c03      	adds	r3, r0, #0
 800a73e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a740:	4912      	ldr	r1, [pc, #72]	@ (800a78c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f7f5 fef4 	bl	8000530 <__aeabi_fcmplt>
 800a748:	1e03      	subs	r3, r0, #0
 800a74a:	d002      	beq.n	800a752 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a74c:	23fe      	movs	r3, #254	@ 0xfe
 800a74e:	059b      	lsls	r3, r3, #22
 800a750:	e018      	b.n	800a784 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a752:	490f      	ldr	r1, [pc, #60]	@ (800a790 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7f5 feff 	bl	8000558 <__aeabi_fcmpgt>
 800a75a:	1e03      	subs	r3, r0, #0
 800a75c:	d001      	beq.n	800a762 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a75e:	2300      	movs	r3, #0
 800a760:	e010      	b.n	800a784 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	1c18      	adds	r0, r3, #0
 800a766:	f017 fb79 	bl	8021e5c <expf>
 800a76a:	1c03      	adds	r3, r0, #0
 800a76c:	21fe      	movs	r1, #254	@ 0xfe
 800a76e:	0589      	lsls	r1, r1, #22
 800a770:	1c18      	adds	r0, r3, #0
 800a772:	f7f6 f8a5 	bl	80008c0 <__aeabi_fadd>
 800a776:	1c03      	adds	r3, r0, #0
 800a778:	1c19      	adds	r1, r3, #0
 800a77a:	20fe      	movs	r0, #254	@ 0xfe
 800a77c:	0580      	lsls	r0, r0, #22
 800a77e:	f7f6 fa29 	bl	8000bd4 <__aeabi_fdiv>
 800a782:	1c03      	adds	r3, r0, #0
    }
}
 800a784:	1c18      	adds	r0, r3, #0
 800a786:	46bd      	mov	sp, r7
 800a788:	b005      	add	sp, #20
 800a78a:	bd90      	pop	{r4, r7, pc}
 800a78c:	c2480000 	.word	0xc2480000
 800a790:	42480000 	.word	0x42480000

0800a794 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a7ac:	46c0      	nop			@ (mov r8, r8)
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b004      	add	sp, #16
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a7b4:	b590      	push	{r4, r7, lr}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d114      	bne.n	800a7f0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7ca:	1c19      	adds	r1, r3, #0
 800a7cc:	6838      	ldr	r0, [r7, #0]
 800a7ce:	f7f6 fd25 	bl	800121c <__aeabi_fsub>
 800a7d2:	1c03      	adds	r3, r0, #0
 800a7d4:	4918      	ldr	r1, [pc, #96]	@ (800a838 <GasIndexAlgorithm__mox_model__process+0x84>)
 800a7d6:	1c18      	adds	r0, r3, #0
 800a7d8:	f7f6 f9fc 	bl	8000bd4 <__aeabi_fdiv>
 800a7dc:	1c03      	adds	r3, r0, #0
 800a7de:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a7e4:	1c19      	adds	r1, r3, #0
 800a7e6:	1c10      	adds	r0, r2, #0
 800a7e8:	f7f6 fbda 	bl	8000fa0 <__aeabi_fmul>
 800a7ec:	1c03      	adds	r3, r0, #0
 800a7ee:	e01f      	b.n	800a830 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7f4:	1c19      	adds	r1, r3, #0
 800a7f6:	6838      	ldr	r0, [r7, #0]
 800a7f8:	f7f6 fd10 	bl	800121c <__aeabi_fsub>
 800a7fc:	1c03      	adds	r3, r0, #0
 800a7fe:	1c1a      	adds	r2, r3, #0
 800a800:	2380      	movs	r3, #128	@ 0x80
 800a802:	061b      	lsls	r3, r3, #24
 800a804:	4053      	eors	r3, r2
 800a806:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a80c:	490b      	ldr	r1, [pc, #44]	@ (800a83c <GasIndexAlgorithm__mox_model__process+0x88>)
 800a80e:	1c18      	adds	r0, r3, #0
 800a810:	f7f6 f856 	bl	80008c0 <__aeabi_fadd>
 800a814:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a816:	1c19      	adds	r1, r3, #0
 800a818:	1c20      	adds	r0, r4, #0
 800a81a:	f7f6 f9db 	bl	8000bd4 <__aeabi_fdiv>
 800a81e:	1c03      	adds	r3, r0, #0
 800a820:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a826:	1c19      	adds	r1, r3, #0
 800a828:	1c10      	adds	r0, r2, #0
 800a82a:	f7f6 fbb9 	bl	8000fa0 <__aeabi_fmul>
 800a82e:	1c03      	adds	r3, r0, #0
    }
}
 800a830:	1c18      	adds	r0, r3, #0
 800a832:	46bd      	mov	sp, r7
 800a834:	b003      	add	sp, #12
 800a836:	bd90      	pop	{r4, r7, pc}
 800a838:	44fa0000 	.word	0x44fa0000
 800a83c:	435c0000 	.word	0x435c0000

0800a840 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2180      	movs	r1, #128	@ 0x80
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2184      	movs	r1, #132	@ 0x84
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2188      	movs	r1, #136	@ 0x88
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	505a      	str	r2, [r3, r1]
}
 800a866:	46c0      	nop			@ (mov r8, r8)
 800a868:	46bd      	mov	sp, r7
 800a86a:	b004      	add	sp, #16
 800a86c:	bd80      	pop	{r7, pc}
	...

0800a870 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800a870:	b590      	push	{r4, r7, lr}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2280      	movs	r2, #128	@ 0x80
 800a87e:	589c      	ldr	r4, [r3, r2]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2284      	movs	r2, #132	@ 0x84
 800a884:	589b      	ldr	r3, [r3, r2]
 800a886:	1c19      	adds	r1, r3, #0
 800a888:	6838      	ldr	r0, [r7, #0]
 800a88a:	f7f6 fcc7 	bl	800121c <__aeabi_fsub>
 800a88e:	1c03      	adds	r3, r0, #0
 800a890:	1c19      	adds	r1, r3, #0
 800a892:	1c20      	adds	r0, r4, #0
 800a894:	f7f6 fb84 	bl	8000fa0 <__aeabi_fmul>
 800a898:	1c03      	adds	r3, r0, #0
 800a89a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800a89c:	4940      	ldr	r1, [pc, #256]	@ (800a9a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800a89e:	68b8      	ldr	r0, [r7, #8]
 800a8a0:	f7f5 fe46 	bl	8000530 <__aeabi_fcmplt>
 800a8a4:	1e03      	subs	r3, r0, #0
 800a8a6:	d001      	beq.n	800a8ac <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800a8a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a9a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a8aa:	e075      	b.n	800a998 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800a8ac:	493e      	ldr	r1, [pc, #248]	@ (800a9a8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800a8ae:	68b8      	ldr	r0, [r7, #8]
 800a8b0:	f7f5 fe52 	bl	8000558 <__aeabi_fcmpgt>
 800a8b4:	1e03      	subs	r3, r0, #0
 800a8b6:	d001      	beq.n	800a8bc <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e06d      	b.n	800a998 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800a8bc:	2100      	movs	r1, #0
 800a8be:	6838      	ldr	r0, [r7, #0]
 800a8c0:	f7f5 fe54 	bl	800056c <__aeabi_fcmpge>
 800a8c4:	1e03      	subs	r3, r0, #0
 800a8c6:	d047      	beq.n	800a958 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2288      	movs	r2, #136	@ 0x88
 800a8cc:	589b      	ldr	r3, [r3, r2]
 800a8ce:	21fe      	movs	r1, #254	@ 0xfe
 800a8d0:	0589      	lsls	r1, r1, #22
 800a8d2:	1c18      	adds	r0, r3, #0
 800a8d4:	f7f5 fe26 	bl	8000524 <__aeabi_fcmpeq>
 800a8d8:	1e03      	subs	r3, r0, #0
 800a8da:	d00e      	beq.n	800a8fa <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	1c19      	adds	r1, r3, #0
 800a8e2:	20fe      	movs	r0, #254	@ 0xfe
 800a8e4:	0580      	lsls	r0, r0, #22
 800a8e6:	f7f6 fc99 	bl	800121c <__aeabi_fsub>
 800a8ea:	1c03      	adds	r3, r0, #0
 800a8ec:	492f      	ldr	r1, [pc, #188]	@ (800a9ac <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800a8ee:	1c18      	adds	r0, r3, #0
 800a8f0:	f7f6 fb56 	bl	8000fa0 <__aeabi_fmul>
 800a8f4:	1c03      	adds	r3, r0, #0
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e012      	b.n	800a920 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	492c      	ldr	r1, [pc, #176]	@ (800a9b0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800a900:	1c18      	adds	r0, r3, #0
 800a902:	f7f6 fb4d 	bl	8000fa0 <__aeabi_fmul>
 800a906:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800a908:	1c19      	adds	r1, r3, #0
 800a90a:	4826      	ldr	r0, [pc, #152]	@ (800a9a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a90c:	f7f6 fc86 	bl	800121c <__aeabi_fsub>
 800a910:	1c03      	adds	r3, r0, #0
 800a912:	2181      	movs	r1, #129	@ 0x81
 800a914:	05c9      	lsls	r1, r1, #23
 800a916:	1c18      	adds	r0, r3, #0
 800a918:	f7f6 f95c 	bl	8000bd4 <__aeabi_fdiv>
 800a91c:	1c03      	adds	r3, r0, #0
 800a91e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a920:	4920      	ldr	r1, [pc, #128]	@ (800a9a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f7f5 ffcc 	bl	80008c0 <__aeabi_fadd>
 800a928:	1c03      	adds	r3, r0, #0
 800a92a:	1c1c      	adds	r4, r3, #0
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	1c18      	adds	r0, r3, #0
 800a930:	f017 fa94 	bl	8021e5c <expf>
 800a934:	1c03      	adds	r3, r0, #0
 800a936:	21fe      	movs	r1, #254	@ 0xfe
 800a938:	0589      	lsls	r1, r1, #22
 800a93a:	1c18      	adds	r0, r3, #0
 800a93c:	f7f5 ffc0 	bl	80008c0 <__aeabi_fadd>
 800a940:	1c03      	adds	r3, r0, #0
 800a942:	1c19      	adds	r1, r3, #0
 800a944:	1c20      	adds	r0, r4, #0
 800a946:	f7f6 f945 	bl	8000bd4 <__aeabi_fdiv>
 800a94a:	1c03      	adds	r3, r0, #0
 800a94c:	68f9      	ldr	r1, [r7, #12]
 800a94e:	1c18      	adds	r0, r3, #0
 800a950:	f7f6 fc64 	bl	800121c <__aeabi_fsub>
 800a954:	1c03      	adds	r3, r0, #0
 800a956:	e01f      	b.n	800a998 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2188      	movs	r1, #136	@ 0x88
 800a960:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800a962:	1c19      	adds	r1, r3, #0
 800a964:	1c10      	adds	r0, r2, #0
 800a966:	f7f6 f935 	bl	8000bd4 <__aeabi_fdiv>
 800a96a:	1c03      	adds	r3, r0, #0
 800a96c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	1c18      	adds	r0, r3, #0
 800a972:	f017 fa73 	bl	8021e5c <expf>
 800a976:	1c03      	adds	r3, r0, #0
 800a978:	21fe      	movs	r1, #254	@ 0xfe
 800a97a:	0589      	lsls	r1, r1, #22
 800a97c:	1c18      	adds	r0, r3, #0
 800a97e:	f7f5 ff9f 	bl	80008c0 <__aeabi_fadd>
 800a982:	1c03      	adds	r3, r0, #0
 800a984:	1c19      	adds	r1, r3, #0
 800a986:	4807      	ldr	r0, [pc, #28]	@ (800a9a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a988:	f7f6 f924 	bl	8000bd4 <__aeabi_fdiv>
 800a98c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a98e:	1c19      	adds	r1, r3, #0
 800a990:	1c20      	adds	r0, r4, #0
 800a992:	f7f6 fb05 	bl	8000fa0 <__aeabi_fmul>
 800a996:	1c03      	adds	r3, r0, #0
        }
    }
}
 800a998:	1c18      	adds	r0, r3, #0
 800a99a:	46bd      	mov	sp, r7
 800a99c:	b005      	add	sp, #20
 800a99e:	bd90      	pop	{r4, r7, pc}
 800a9a0:	c2480000 	.word	0xc2480000
 800a9a4:	43fa0000 	.word	0x43fa0000
 800a9a8:	42480000 	.word	0x42480000
 800a9ac:	3f8041ab 	.word	0x3f8041ab
 800a9b0:	40a00000 	.word	0x40a00000

0800a9b4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a9b4:	b590      	push	{r4, r7, lr}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	4913      	ldr	r1, [pc, #76]	@ (800aa14 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800a9c6:	1c18      	adds	r0, r3, #0
 800a9c8:	f7f5 ff7a 	bl	80008c0 <__aeabi_fadd>
 800a9cc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a9ce:	1c19      	adds	r1, r3, #0
 800a9d0:	1c20      	adds	r0, r4, #0
 800a9d2:	f7f6 f8ff 	bl	8000bd4 <__aeabi_fdiv>
 800a9d6:	1c03      	adds	r3, r0, #0
 800a9d8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	228c      	movs	r2, #140	@ 0x8c
 800a9de:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	490b      	ldr	r1, [pc, #44]	@ (800aa18 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800a9ea:	1c18      	adds	r0, r3, #0
 800a9ec:	f7f5 ff68 	bl	80008c0 <__aeabi_fadd>
 800a9f0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a9f2:	1c19      	adds	r1, r3, #0
 800a9f4:	1c20      	adds	r0, r4, #0
 800a9f6:	f7f6 f8ed 	bl	8000bd4 <__aeabi_fdiv>
 800a9fa:	1c03      	adds	r3, r0, #0
 800a9fc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2290      	movs	r2, #144	@ 0x90
 800aa02:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2294      	movs	r2, #148	@ 0x94
 800aa08:	2100      	movs	r1, #0
 800aa0a:	5499      	strb	r1, [r3, r2]
}
 800aa0c:	46c0      	nop			@ (mov r8, r8)
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	b003      	add	sp, #12
 800aa12:	bd90      	pop	{r4, r7, pc}
 800aa14:	41a00000 	.word	0x41a00000
 800aa18:	43fa0000 	.word	0x43fa0000

0800aa1c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800aa1c:	b590      	push	{r4, r7, lr}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2294      	movs	r2, #148	@ 0x94
 800aa2a:	5c9b      	ldrb	r3, [r3, r2]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	4053      	eors	r3, r2
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00f      	beq.n	800aa56 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2198      	movs	r1, #152	@ 0x98
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	219c      	movs	r1, #156	@ 0x9c
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	21a0      	movs	r1, #160	@ 0xa0
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2294      	movs	r2, #148	@ 0x94
 800aa52:	2101      	movs	r1, #1
 800aa54:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	228c      	movs	r2, #140	@ 0x8c
 800aa5a:	589b      	ldr	r3, [r3, r2]
 800aa5c:	1c19      	adds	r1, r3, #0
 800aa5e:	20fe      	movs	r0, #254	@ 0xfe
 800aa60:	0580      	lsls	r0, r0, #22
 800aa62:	f7f6 fbdb 	bl	800121c <__aeabi_fsub>
 800aa66:	1c03      	adds	r3, r0, #0
 800aa68:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2298      	movs	r2, #152	@ 0x98
 800aa6e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800aa70:	1c19      	adds	r1, r3, #0
 800aa72:	f7f6 fa95 	bl	8000fa0 <__aeabi_fmul>
 800aa76:	1c03      	adds	r3, r0, #0
 800aa78:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	228c      	movs	r2, #140	@ 0x8c
 800aa7e:	589b      	ldr	r3, [r3, r2]
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	1c18      	adds	r0, r3, #0
 800aa84:	f7f6 fa8c 	bl	8000fa0 <__aeabi_fmul>
 800aa88:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800aa8a:	1c19      	adds	r1, r3, #0
 800aa8c:	1c20      	adds	r0, r4, #0
 800aa8e:	f7f5 ff17 	bl	80008c0 <__aeabi_fadd>
 800aa92:	1c03      	adds	r3, r0, #0
 800aa94:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2298      	movs	r2, #152	@ 0x98
 800aa9a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2290      	movs	r2, #144	@ 0x90
 800aaa0:	589b      	ldr	r3, [r3, r2]
 800aaa2:	1c19      	adds	r1, r3, #0
 800aaa4:	20fe      	movs	r0, #254	@ 0xfe
 800aaa6:	0580      	lsls	r0, r0, #22
 800aaa8:	f7f6 fbb8 	bl	800121c <__aeabi_fsub>
 800aaac:	1c03      	adds	r3, r0, #0
 800aaae:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	229c      	movs	r2, #156	@ 0x9c
 800aab4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800aab6:	1c19      	adds	r1, r3, #0
 800aab8:	f7f6 fa72 	bl	8000fa0 <__aeabi_fmul>
 800aabc:	1c03      	adds	r3, r0, #0
 800aabe:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2290      	movs	r2, #144	@ 0x90
 800aac4:	589b      	ldr	r3, [r3, r2]
 800aac6:	6839      	ldr	r1, [r7, #0]
 800aac8:	1c18      	adds	r0, r3, #0
 800aaca:	f7f6 fa69 	bl	8000fa0 <__aeabi_fmul>
 800aace:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800aad0:	1c19      	adds	r1, r3, #0
 800aad2:	1c20      	adds	r0, r4, #0
 800aad4:	f7f5 fef4 	bl	80008c0 <__aeabi_fadd>
 800aad8:	1c03      	adds	r3, r0, #0
 800aada:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	229c      	movs	r2, #156	@ 0x9c
 800aae0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2298      	movs	r2, #152	@ 0x98
 800aae6:	589a      	ldr	r2, [r3, r2]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	219c      	movs	r1, #156	@ 0x9c
 800aaec:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800aaee:	1c19      	adds	r1, r3, #0
 800aaf0:	1c10      	adds	r0, r2, #0
 800aaf2:	f7f6 fb93 	bl	800121c <__aeabi_fsub>
 800aaf6:	1c03      	adds	r3, r0, #0
 800aaf8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800aafa:	2100      	movs	r1, #0
 800aafc:	6978      	ldr	r0, [r7, #20]
 800aafe:	f7f5 fd17 	bl	8000530 <__aeabi_fcmplt>
 800ab02:	1e03      	subs	r3, r0, #0
 800ab04:	d004      	beq.n	800ab10 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2280      	movs	r2, #128	@ 0x80
 800ab0a:	0612      	lsls	r2, r2, #24
 800ab0c:	4053      	eors	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800ab10:	4923      	ldr	r1, [pc, #140]	@ (800aba0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800ab12:	6978      	ldr	r0, [r7, #20]
 800ab14:	f7f6 fa44 	bl	8000fa0 <__aeabi_fmul>
 800ab18:	1c03      	adds	r3, r0, #0
 800ab1a:	1c18      	adds	r0, r3, #0
 800ab1c:	f017 f99e 	bl	8021e5c <expf>
 800ab20:	1c03      	adds	r3, r0, #0
 800ab22:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800ab24:	491f      	ldr	r1, [pc, #124]	@ (800aba4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800ab26:	6938      	ldr	r0, [r7, #16]
 800ab28:	f7f6 fa3a 	bl	8000fa0 <__aeabi_fmul>
 800ab2c:	1c03      	adds	r3, r0, #0
 800ab2e:	491e      	ldr	r1, [pc, #120]	@ (800aba8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800ab30:	1c18      	adds	r0, r3, #0
 800ab32:	f7f5 fec5 	bl	80008c0 <__aeabi_fadd>
 800ab36:	1c03      	adds	r3, r0, #0
 800ab38:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685c      	ldr	r4, [r3, #4]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	68f9      	ldr	r1, [r7, #12]
 800ab44:	1c18      	adds	r0, r3, #0
 800ab46:	f7f5 febb 	bl	80008c0 <__aeabi_fadd>
 800ab4a:	1c03      	adds	r3, r0, #0
 800ab4c:	1c19      	adds	r1, r3, #0
 800ab4e:	1c20      	adds	r0, r4, #0
 800ab50:	f7f6 f840 	bl	8000bd4 <__aeabi_fdiv>
 800ab54:	1c03      	adds	r3, r0, #0
 800ab56:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	20fe      	movs	r0, #254	@ 0xfe
 800ab5c:	0580      	lsls	r0, r0, #22
 800ab5e:	f7f6 fb5d 	bl	800121c <__aeabi_fsub>
 800ab62:	1c03      	adds	r3, r0, #0
 800ab64:	1c18      	adds	r0, r3, #0
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	22a0      	movs	r2, #160	@ 0xa0
 800ab6a:	589b      	ldr	r3, [r3, r2]
 800ab6c:	1c19      	adds	r1, r3, #0
 800ab6e:	f7f6 fa17 	bl	8000fa0 <__aeabi_fmul>
 800ab72:	1c03      	adds	r3, r0, #0
 800ab74:	1c1c      	adds	r4, r3, #0
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	68b8      	ldr	r0, [r7, #8]
 800ab7a:	f7f6 fa11 	bl	8000fa0 <__aeabi_fmul>
 800ab7e:	1c03      	adds	r3, r0, #0
 800ab80:	1c19      	adds	r1, r3, #0
 800ab82:	1c20      	adds	r0, r4, #0
 800ab84:	f7f5 fe9c 	bl	80008c0 <__aeabi_fadd>
 800ab88:	1c03      	adds	r3, r0, #0
 800ab8a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	22a0      	movs	r2, #160	@ 0xa0
 800ab90:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	22a0      	movs	r2, #160	@ 0xa0
 800ab96:	589b      	ldr	r3, [r3, r2]
}
 800ab98:	1c18      	adds	r0, r3, #0
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b007      	add	sp, #28
 800ab9e:	bd90      	pop	{r4, r7, pc}
 800aba0:	be4ccccd 	.word	0xbe4ccccd
 800aba4:	43f00000 	.word	0x43f00000
 800aba8:	41a00000 	.word	0x41a00000

0800abac <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	000a      	movs	r2, r1
 800abb6:	1cbb      	adds	r3, r7, #2
 800abb8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800abba:	230d      	movs	r3, #13
 800abbc:	18fb      	adds	r3, r7, r3
 800abbe:	22ff      	movs	r2, #255	@ 0xff
 800abc0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800abc2:	230e      	movs	r3, #14
 800abc4:	18fb      	adds	r3, r7, r3
 800abc6:	2200      	movs	r2, #0
 800abc8:	801a      	strh	r2, [r3, #0]
 800abca:	e037      	b.n	800ac3c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800abcc:	230e      	movs	r3, #14
 800abce:	18fb      	adds	r3, r7, r3
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	18d3      	adds	r3, r2, r3
 800abd6:	7819      	ldrb	r1, [r3, #0]
 800abd8:	220d      	movs	r2, #13
 800abda:	18bb      	adds	r3, r7, r2
 800abdc:	18ba      	adds	r2, r7, r2
 800abde:	7812      	ldrb	r2, [r2, #0]
 800abe0:	404a      	eors	r2, r1
 800abe2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800abe4:	230c      	movs	r3, #12
 800abe6:	18fb      	adds	r3, r7, r3
 800abe8:	2208      	movs	r2, #8
 800abea:	701a      	strb	r2, [r3, #0]
 800abec:	e01b      	b.n	800ac26 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800abee:	210d      	movs	r1, #13
 800abf0:	187b      	adds	r3, r7, r1
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	b25b      	sxtb	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	da09      	bge.n	800ac0e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800abfa:	187b      	adds	r3, r7, r1
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	b25b      	sxtb	r3, r3
 800ac02:	2231      	movs	r2, #49	@ 0x31
 800ac04:	4053      	eors	r3, r2
 800ac06:	b25a      	sxtb	r2, r3
 800ac08:	187b      	adds	r3, r7, r1
 800ac0a:	701a      	strb	r2, [r3, #0]
 800ac0c:	e005      	b.n	800ac1a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800ac0e:	230d      	movs	r3, #13
 800ac10:	18fa      	adds	r2, r7, r3
 800ac12:	18fb      	adds	r3, r7, r3
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	18db      	adds	r3, r3, r3
 800ac18:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ac1a:	220c      	movs	r2, #12
 800ac1c:	18bb      	adds	r3, r7, r2
 800ac1e:	18ba      	adds	r2, r7, r2
 800ac20:	7812      	ldrb	r2, [r2, #0]
 800ac22:	3a01      	subs	r2, #1
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	230c      	movs	r3, #12
 800ac28:	18fb      	adds	r3, r7, r3
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1de      	bne.n	800abee <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ac30:	220e      	movs	r2, #14
 800ac32:	18bb      	adds	r3, r7, r2
 800ac34:	18ba      	adds	r2, r7, r2
 800ac36:	8812      	ldrh	r2, [r2, #0]
 800ac38:	3201      	adds	r2, #1
 800ac3a:	801a      	strh	r2, [r3, #0]
 800ac3c:	230e      	movs	r3, #14
 800ac3e:	18fa      	adds	r2, r7, r3
 800ac40:	1cbb      	adds	r3, r7, #2
 800ac42:	8812      	ldrh	r2, [r2, #0]
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d3c0      	bcc.n	800abcc <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800ac4a:	230d      	movs	r3, #13
 800ac4c:	18fb      	adds	r3, r7, r3
 800ac4e:	781b      	ldrb	r3, [r3, #0]
}
 800ac50:	0018      	movs	r0, r3
 800ac52:	46bd      	mov	sp, r7
 800ac54:	b004      	add	sp, #16
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	0008      	movs	r0, r1
 800ac62:	0011      	movs	r1, r2
 800ac64:	1cbb      	adds	r3, r7, #2
 800ac66:	1c02      	adds	r2, r0, #0
 800ac68:	801a      	strh	r2, [r3, #0]
 800ac6a:	1c7b      	adds	r3, r7, #1
 800ac6c:	1c0a      	adds	r2, r1, #0
 800ac6e:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800ac70:	1cbb      	adds	r3, r7, #2
 800ac72:	881a      	ldrh	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	0011      	movs	r1, r2
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f7ff ff97 	bl	800abac <sensirion_i2c_generate_crc>
 800ac7e:	0003      	movs	r3, r0
 800ac80:	001a      	movs	r2, r3
 800ac82:	1c7b      	adds	r3, r7, #1
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d001      	beq.n	800ac8e <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	0018      	movs	r0, r3
 800ac92:	46bd      	mov	sp, r7
 800ac94:	b002      	add	sp, #8
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	0008      	movs	r0, r1
 800aca2:	0011      	movs	r1, r2
 800aca4:	1cbb      	adds	r3, r7, #2
 800aca6:	1c02      	adds	r2, r0, #0
 800aca8:	801a      	strh	r2, [r3, #0]
 800acaa:	003b      	movs	r3, r7
 800acac:	1c0a      	adds	r2, r1, #0
 800acae:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800acb0:	003b      	movs	r3, r7
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	0a1b      	lsrs	r3, r3, #8
 800acb6:	b299      	uxth	r1, r3
 800acb8:	1cbb      	adds	r3, r7, #2
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	1cba      	adds	r2, r7, #2
 800acbe:	1c58      	adds	r0, r3, #1
 800acc0:	8010      	strh	r0, [r2, #0]
 800acc2:	001a      	movs	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	189b      	adds	r3, r3, r2
 800acc8:	b2ca      	uxtb	r2, r1
 800acca:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800accc:	1cbb      	adds	r3, r7, #2
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	1cba      	adds	r2, r7, #2
 800acd2:	1c59      	adds	r1, r3, #1
 800acd4:	8011      	strh	r1, [r2, #0]
 800acd6:	001a      	movs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	189b      	adds	r3, r3, r2
 800acdc:	003a      	movs	r2, r7
 800acde:	8812      	ldrh	r2, [r2, #0]
 800ace0:	b2d2      	uxtb	r2, r2
 800ace2:	701a      	strb	r2, [r3, #0]
    return offset;
 800ace4:	1cbb      	adds	r3, r7, #2
 800ace6:	881b      	ldrh	r3, [r3, #0]
}
 800ace8:	0018      	movs	r0, r3
 800acea:	46bd      	mov	sp, r7
 800acec:	b002      	add	sp, #8
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	0008      	movs	r0, r1
 800acfa:	0011      	movs	r1, r2
 800acfc:	1cbb      	adds	r3, r7, #2
 800acfe:	1c02      	adds	r2, r0, #0
 800ad00:	801a      	strh	r2, [r3, #0]
 800ad02:	003b      	movs	r3, r7
 800ad04:	1c0a      	adds	r2, r1, #0
 800ad06:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800ad08:	003b      	movs	r3, r7
 800ad0a:	881b      	ldrh	r3, [r3, #0]
 800ad0c:	0a1b      	lsrs	r3, r3, #8
 800ad0e:	b299      	uxth	r1, r3
 800ad10:	1cbb      	adds	r3, r7, #2
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	1cba      	adds	r2, r7, #2
 800ad16:	1c58      	adds	r0, r3, #1
 800ad18:	8010      	strh	r0, [r2, #0]
 800ad1a:	001a      	movs	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	189b      	adds	r3, r3, r2
 800ad20:	b2ca      	uxtb	r2, r1
 800ad22:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800ad24:	1cbb      	adds	r3, r7, #2
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	1cba      	adds	r2, r7, #2
 800ad2a:	1c59      	adds	r1, r3, #1
 800ad2c:	8011      	strh	r1, [r2, #0]
 800ad2e:	001a      	movs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	189b      	adds	r3, r3, r2
 800ad34:	003a      	movs	r2, r7
 800ad36:	8812      	ldrh	r2, [r2, #0]
 800ad38:	b2d2      	uxtb	r2, r2
 800ad3a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800ad3c:	1cbb      	adds	r3, r7, #2
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	3b02      	subs	r3, #2
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800ad46:	1cbb      	adds	r3, r7, #2
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	18d4      	adds	r4, r2, r3
 800ad4e:	2102      	movs	r1, #2
 800ad50:	f7ff ff2c 	bl	800abac <sensirion_i2c_generate_crc>
 800ad54:	0003      	movs	r3, r0
 800ad56:	7023      	strb	r3, [r4, #0]
    offset++;
 800ad58:	1cbb      	adds	r3, r7, #2
 800ad5a:	881a      	ldrh	r2, [r3, #0]
 800ad5c:	1cbb      	adds	r3, r7, #2
 800ad5e:	3201      	adds	r2, #1
 800ad60:	801a      	strh	r2, [r3, #0]

    return offset;
 800ad62:	1cbb      	adds	r3, r7, #2
 800ad64:	881b      	ldrh	r3, [r3, #0]
}
 800ad66:	0018      	movs	r0, r3
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b003      	add	sp, #12
 800ad6c:	bd90      	pop	{r4, r7, pc}

0800ad6e <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	0008      	movs	r0, r1
 800ad78:	0011      	movs	r1, r2
 800ad7a:	1cbb      	adds	r3, r7, #2
 800ad7c:	1c02      	adds	r2, r0, #0
 800ad7e:	801a      	strh	r2, [r3, #0]
 800ad80:	003b      	movs	r3, r7
 800ad82:	1c0a      	adds	r2, r1, #0
 800ad84:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800ad86:	003b      	movs	r3, r7
 800ad88:	881a      	ldrh	r2, [r3, #0]
 800ad8a:	1cbb      	adds	r3, r7, #2
 800ad8c:	8819      	ldrh	r1, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	0018      	movs	r0, r3
 800ad92:	f7ff ffad 	bl	800acf0 <sensirion_i2c_add_uint16_t_to_buffer>
 800ad96:	0003      	movs	r3, r0
}
 800ad98:	0018      	movs	r0, r3
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	b002      	add	sp, #8
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6039      	str	r1, [r7, #0]
 800ada8:	0011      	movs	r1, r2
 800adaa:	1dfb      	adds	r3, r7, #7
 800adac:	1c02      	adds	r2, r0, #0
 800adae:	701a      	strb	r2, [r3, #0]
 800adb0:	1d3b      	adds	r3, r7, #4
 800adb2:	1c0a      	adds	r2, r1, #0
 800adb4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800adb6:	1d3b      	adds	r3, r7, #4
 800adb8:	881a      	ldrh	r2, [r3, #0]
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	1dfb      	adds	r3, r7, #7
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	0018      	movs	r0, r3
 800adc2:	f7fe fa55 	bl	8009270 <sensirion_i2c_hal_write>
 800adc6:	0003      	movs	r3, r0
}
 800adc8:	0018      	movs	r0, r3
 800adca:	46bd      	mov	sp, r7
 800adcc:	b002      	add	sp, #8
 800adce:	bd80      	pop	{r7, pc}

0800add0 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800add0:	b5b0      	push	{r4, r5, r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6039      	str	r1, [r7, #0]
 800add8:	0011      	movs	r1, r2
 800adda:	1dfb      	adds	r3, r7, #7
 800addc:	1c02      	adds	r2, r0, #0
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	1d3b      	adds	r3, r7, #4
 800ade2:	1c0a      	adds	r2, r1, #0
 800ade4:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800ade6:	1d3b      	adds	r3, r7, #4
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	085b      	lsrs	r3, r3, #1
 800adec:	b29b      	uxth	r3, r3
 800adee:	220a      	movs	r2, #10
 800adf0:	18ba      	adds	r2, r7, r2
 800adf2:	1c19      	adds	r1, r3, #0
 800adf4:	1c0b      	adds	r3, r1, #0
 800adf6:	18db      	adds	r3, r3, r3
 800adf8:	185b      	adds	r3, r3, r1
 800adfa:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800adfc:	1d3b      	adds	r3, r7, #4
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	2201      	movs	r2, #1
 800ae02:	4013      	ands	r3, r2
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800ae0a:	2304      	movs	r3, #4
 800ae0c:	e06b      	b.n	800aee6 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800ae0e:	230a      	movs	r3, #10
 800ae10:	18fb      	adds	r3, r7, r3
 800ae12:	881a      	ldrh	r2, [r3, #0]
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	1dfb      	adds	r3, r7, #7
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	f7fe fa08 	bl	8009230 <sensirion_i2c_hal_read>
 800ae20:	0003      	movs	r3, r0
 800ae22:	001a      	movs	r2, r3
 800ae24:	2108      	movs	r1, #8
 800ae26:	187b      	adds	r3, r7, r1
 800ae28:	801a      	strh	r2, [r3, #0]
    if (error) {
 800ae2a:	000a      	movs	r2, r1
 800ae2c:	18bb      	adds	r3, r7, r2
 800ae2e:	2100      	movs	r1, #0
 800ae30:	5e5b      	ldrsh	r3, [r3, r1]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d003      	beq.n	800ae3e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800ae36:	18bb      	adds	r3, r7, r2
 800ae38:	2200      	movs	r2, #0
 800ae3a:	5e9b      	ldrsh	r3, [r3, r2]
 800ae3c:	e053      	b.n	800aee6 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800ae3e:	230e      	movs	r3, #14
 800ae40:	18fb      	adds	r3, r7, r3
 800ae42:	2200      	movs	r2, #0
 800ae44:	801a      	strh	r2, [r3, #0]
 800ae46:	230c      	movs	r3, #12
 800ae48:	18fb      	adds	r3, r7, r3
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	801a      	strh	r2, [r3, #0]
 800ae4e:	e041      	b.n	800aed4 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800ae50:	210e      	movs	r1, #14
 800ae52:	187b      	adds	r3, r7, r1
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800ae5a:	187b      	adds	r3, r7, r1
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	3302      	adds	r3, #2
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	001a      	movs	r2, r3
 800ae68:	2102      	movs	r1, #2
 800ae6a:	f7ff fef5 	bl	800ac58 <sensirion_i2c_check_crc>
 800ae6e:	0003      	movs	r3, r0
 800ae70:	001a      	movs	r2, r3
 800ae72:	2108      	movs	r1, #8
 800ae74:	187b      	adds	r3, r7, r1
 800ae76:	801a      	strh	r2, [r3, #0]
        if (error) {
 800ae78:	000a      	movs	r2, r1
 800ae7a:	18bb      	adds	r3, r7, r2
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	5e5b      	ldrsh	r3, [r3, r1]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800ae84:	18bb      	adds	r3, r7, r2
 800ae86:	2200      	movs	r2, #0
 800ae88:	5e9b      	ldrsh	r3, [r3, r2]
 800ae8a:	e02c      	b.n	800aee6 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800ae8c:	240e      	movs	r4, #14
 800ae8e:	193b      	adds	r3, r7, r4
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	18d2      	adds	r2, r2, r3
 800ae96:	250c      	movs	r5, #12
 800ae98:	197b      	adds	r3, r7, r5
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	1979      	adds	r1, r7, r5
 800ae9e:	1c58      	adds	r0, r3, #1
 800aea0:	8008      	strh	r0, [r1, #0]
 800aea2:	0019      	movs	r1, r3
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	185b      	adds	r3, r3, r1
 800aea8:	7812      	ldrb	r2, [r2, #0]
 800aeaa:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800aeac:	193b      	adds	r3, r7, r4
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	18d2      	adds	r2, r2, r3
 800aeb6:	197b      	adds	r3, r7, r5
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	1979      	adds	r1, r7, r5
 800aebc:	1c58      	adds	r0, r3, #1
 800aebe:	8008      	strh	r0, [r1, #0]
 800aec0:	0019      	movs	r1, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	185b      	adds	r3, r3, r1
 800aec6:	7812      	ldrb	r2, [r2, #0]
 800aec8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800aeca:	193b      	adds	r3, r7, r4
 800aecc:	193a      	adds	r2, r7, r4
 800aece:	8812      	ldrh	r2, [r2, #0]
 800aed0:	3203      	adds	r2, #3
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	230e      	movs	r3, #14
 800aed6:	18fa      	adds	r2, r7, r3
 800aed8:	230a      	movs	r3, #10
 800aeda:	18fb      	adds	r3, r7, r3
 800aedc:	8812      	ldrh	r2, [r2, #0]
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d3b5      	bcc.n	800ae50 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	0018      	movs	r0, r3
 800aee8:	46bd      	mov	sp, r7
 800aeea:	b004      	add	sp, #16
 800aeec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800aef0 <ReadRegister>:

//void forceVOCstart(void) {
//  SGP_MeasurementDutyCycle = HAL_GetTick() + 500;
//}

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800aef0:	b590      	push	{r4, r7, lr}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6039      	str	r1, [r7, #0]
 800aef8:	0011      	movs	r1, r2
 800aefa:	1dfb      	adds	r3, r7, #7
 800aefc:	1c02      	adds	r2, r0, #0
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	1dbb      	adds	r3, r7, #6
 800af02:	1c0a      	adds	r2, r1, #0
 800af04:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800af06:	4b08      	ldr	r3, [pc, #32]	@ (800af28 <ReadRegister+0x38>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d008      	beq.n	800af20 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800af0e:	4b06      	ldr	r3, [pc, #24]	@ (800af28 <ReadRegister+0x38>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	1dba      	adds	r2, r7, #6
 800af14:	7814      	ldrb	r4, [r2, #0]
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	1dfa      	adds	r2, r7, #7
 800af1a:	7810      	ldrb	r0, [r2, #0]
 800af1c:	0022      	movs	r2, r4
 800af1e:	4798      	blx	r3
  }
}
 800af20:	46c0      	nop			@ (mov r8, r8)
 800af22:	46bd      	mov	sp, r7
 800af24:	b003      	add	sp, #12
 800af26:	bd90      	pop	{r4, r7, pc}
 800af28:	20001218 	.word	0x20001218

0800af2c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6039      	str	r1, [r7, #0]
 800af34:	0011      	movs	r1, r2
 800af36:	1dfb      	adds	r3, r7, #7
 800af38:	1c02      	adds	r2, r0, #0
 800af3a:	701a      	strb	r2, [r3, #0]
 800af3c:	1dbb      	adds	r3, r7, #6
 800af3e:	1c0a      	adds	r2, r1, #0
 800af40:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800af42:	4b08      	ldr	r3, [pc, #32]	@ (800af64 <WriteRegister+0x38>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d008      	beq.n	800af5c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800af4a:	4b06      	ldr	r3, [pc, #24]	@ (800af64 <WriteRegister+0x38>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	1dba      	adds	r2, r7, #6
 800af50:	7814      	ldrb	r4, [r2, #0]
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	1dfa      	adds	r2, r7, #7
 800af56:	7810      	ldrb	r0, [r2, #0]
 800af58:	0022      	movs	r2, r4
 800af5a:	4798      	blx	r3
  }
}
 800af5c:	46c0      	nop			@ (mov r8, r8)
 800af5e:	46bd      	mov	sp, r7
 800af60:	b003      	add	sp, #12
 800af62:	bd90      	pop	{r4, r7, pc}
 800af64:	2000121c 	.word	0x2000121c

0800af68 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800af72:	4b07      	ldr	r3, [pc, #28]	@ (800af90 <SGP_Init+0x28>)
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800af78:	4b06      	ldr	r3, [pc, #24]	@ (800af94 <SGP_Init+0x2c>)
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800af7e:	4b06      	ldr	r3, [pc, #24]	@ (800af98 <SGP_Init+0x30>)
 800af80:	2100      	movs	r1, #0
 800af82:	0018      	movs	r0, r3
 800af84:	f7fe ff8c 	bl	8009ea0 <GasIndexAlgorithm_init>
}
 800af88:	46c0      	nop			@ (mov r8, r8)
 800af8a:	46bd      	mov	sp, r7
 800af8c:	b002      	add	sp, #8
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20001218 	.word	0x20001218
 800af94:	2000121c 	.word	0x2000121c
 800af98:	2000122c 	.word	0x2000122c

0800af9c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800af9c:	b580      	push	{r7, lr}
 800af9e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800afa0:	4b13      	ldr	r3, [pc, #76]	@ (800aff0 <SGP_StartMeasurement+0x54>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00d      	beq.n	800afc4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800afa8:	4b12      	ldr	r3, [pc, #72]	@ (800aff4 <SGP_StartMeasurement+0x58>)
 800afaa:	2208      	movs	r2, #8
 800afac:	0019      	movs	r1, r3
 800afae:	2059      	movs	r0, #89	@ 0x59
 800afb0:	f7ff ffbc 	bl	800af2c <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800afb4:	f002 fc88 	bl	800d8c8 <GetCurrentHalTicks>
 800afb8:	0003      	movs	r3, r0
 800afba:	331e      	adds	r3, #30
 800afbc:	001a      	movs	r2, r3
 800afbe:	4b0e      	ldr	r3, [pc, #56]	@ (800aff8 <SGP_StartMeasurement+0x5c>)
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	e00c      	b.n	800afde <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800afc4:	4b0d      	ldr	r3, [pc, #52]	@ (800affc <SGP_StartMeasurement+0x60>)
 800afc6:	2208      	movs	r2, #8
 800afc8:	0019      	movs	r1, r3
 800afca:	2059      	movs	r0, #89	@ 0x59
 800afcc:	f7ff ffae 	bl	800af2c <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800afd0:	f002 fc7a 	bl	800d8c8 <GetCurrentHalTicks>
 800afd4:	0003      	movs	r3, r0
 800afd6:	33aa      	adds	r3, #170	@ 0xaa
 800afd8:	001a      	movs	r2, r3
 800afda:	4b09      	ldr	r3, [pc, #36]	@ (800b000 <SGP_StartMeasurement+0x64>)
 800afdc:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800afde:	4b09      	ldr	r3, [pc, #36]	@ (800b004 <SGP_StartMeasurement+0x68>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800afe4:	4b08      	ldr	r3, [pc, #32]	@ (800b008 <SGP_StartMeasurement+0x6c>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	701a      	strb	r2, [r3, #0]
}
 800afea:	46c0      	nop			@ (mov r8, r8)
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	200012d4 	.word	0x200012d4
 800aff4:	20000094 	.word	0x20000094
 800aff8:	200000a8 	.word	0x200000a8
 800affc:	2000008c 	.word	0x2000008c
 800b000:	200000a0 	.word	0x200000a0
 800b004:	2000122a 	.word	0x2000122a
 800b008:	2000122b 	.word	0x2000122b

0800b00c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800b00c:	b580      	push	{r7, lr}
 800b00e:	af00      	add	r7, sp, #0
 800b010:	4b04      	ldr	r3, [pc, #16]	@ (800b024 <SGP_HeatedUp+0x18>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	0018      	movs	r0, r3
 800b016:	f002 fb87 	bl	800d728 <TimestampIsReached>
 800b01a:	0003      	movs	r3, r0
 800b01c:	0018      	movs	r0, r3
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	46c0      	nop			@ (mov r8, r8)
 800b024:	200000a0 	.word	0x200000a0

0800b028 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b02c:	4b04      	ldr	r3, [pc, #16]	@ (800b040 <SGP_MeasurementReady+0x18>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	0018      	movs	r0, r3
 800b032:	f002 fb79 	bl	800d728 <TimestampIsReached>
 800b036:	0003      	movs	r3, r0
}
 800b038:	0018      	movs	r0, r3
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	46c0      	nop			@ (mov r8, r8)
 800b040:	200000a8 	.word	0x200000a8

0800b044 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b048:	4b04      	ldr	r3, [pc, #16]	@ (800b05c <SGP_MeasurementDone+0x18>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	0018      	movs	r0, r3
 800b04e:	f002 fb6b 	bl	800d728 <TimestampIsReached>
 800b052:	0003      	movs	r3, r0
}
 800b054:	0018      	movs	r0, r3
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	46c0      	nop			@ (mov r8, r8)
 800b05c:	200000a4 	.word	0x200000a4

0800b060 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b060:	b580      	push	{r7, lr}
 800b062:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b064:	4b04      	ldr	r3, [pc, #16]	@ (800b078 <SGP_TurnHeaterOff+0x18>)
 800b066:	2202      	movs	r2, #2
 800b068:	0019      	movs	r1, r3
 800b06a:	2059      	movs	r0, #89	@ 0x59
 800b06c:	f7ff ff5e 	bl	800af2c <WriteRegister>
}
 800b070:	46c0      	nop			@ (mov r8, r8)
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	46c0      	nop			@ (mov r8, r8)
 800b078:	20000084 	.word	0x20000084

0800b07c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b07c:	b5b0      	push	{r4, r5, r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af02      	add	r7, sp, #8
 800b082:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b084:	f7ff ffc2 	bl	800b00c <SGP_HeatedUp>
 800b088:	1e03      	subs	r3, r0, #0
 800b08a:	d038      	beq.n	800b0fe <SGP_GetMeasurementValues+0x82>
 800b08c:	4bd2      	ldr	r3, [pc, #840]	@ (800b3d8 <SGP_GetMeasurementValues+0x35c>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2201      	movs	r2, #1
 800b092:	4053      	eors	r3, r2
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d031      	beq.n	800b0fe <SGP_GetMeasurementValues+0x82>
 800b09a:	4bd0      	ldr	r3, [pc, #832]	@ (800b3dc <SGP_GetMeasurementValues+0x360>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4053      	eors	r3, r2
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d02a      	beq.n	800b0fe <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up");
 800b0a8:	4acd      	ldr	r2, [pc, #820]	@ (800b3e0 <SGP_GetMeasurementValues+0x364>)
 800b0aa:	4bce      	ldr	r3, [pc, #824]	@ (800b3e4 <SGP_GetMeasurementValues+0x368>)
 800b0ac:	0019      	movs	r1, r3
 800b0ae:	2003      	movs	r0, #3
 800b0b0:	f002 fb90 	bl	800d7d4 <CreateLine>
    HeatUpIsDone = true;
 800b0b4:	4bc8      	ldr	r3, [pc, #800]	@ (800b3d8 <SGP_GetMeasurementValues+0x35c>)
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b0ba:	4bcb      	ldr	r3, [pc, #812]	@ (800b3e8 <SGP_GetMeasurementValues+0x36c>)
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00d      	beq.n	800b0de <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b0c2:	4bca      	ldr	r3, [pc, #808]	@ (800b3ec <SGP_GetMeasurementValues+0x370>)
 800b0c4:	2208      	movs	r2, #8
 800b0c6:	0019      	movs	r1, r3
 800b0c8:	2059      	movs	r0, #89	@ 0x59
 800b0ca:	f7ff ff2f 	bl	800af2c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800b0ce:	f002 fbfb 	bl	800d8c8 <GetCurrentHalTicks>
 800b0d2:	0003      	movs	r3, r0
 800b0d4:	331e      	adds	r3, #30
 800b0d6:	001a      	movs	r2, r3
 800b0d8:	4bc5      	ldr	r3, [pc, #788]	@ (800b3f0 <SGP_GetMeasurementValues+0x374>)
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	e00c      	b.n	800b0f8 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b0de:	4bc5      	ldr	r3, [pc, #788]	@ (800b3f4 <SGP_GetMeasurementValues+0x378>)
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	0019      	movs	r1, r3
 800b0e4:	2059      	movs	r0, #89	@ 0x59
 800b0e6:	f7ff ff21 	bl	800af2c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800b0ea:	f002 fbed 	bl	800d8c8 <GetCurrentHalTicks>
 800b0ee:	0003      	movs	r3, r0
 800b0f0:	331e      	adds	r3, #30
 800b0f2:	001a      	movs	r2, r3
 800b0f4:	4bbe      	ldr	r3, [pc, #760]	@ (800b3f0 <SGP_GetMeasurementValues+0x374>)
 800b0f6:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b0f8:	4bb8      	ldr	r3, [pc, #736]	@ (800b3dc <SGP_GetMeasurementValues+0x360>)
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b0fe:	4bb6      	ldr	r3, [pc, #728]	@ (800b3d8 <SGP_GetMeasurementValues+0x35c>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d100      	bne.n	800b108 <SGP_GetMeasurementValues+0x8c>
 800b106:	e1a1      	b.n	800b44c <SGP_GetMeasurementValues+0x3d0>
 800b108:	f7ff ff8e 	bl	800b028 <SGP_MeasurementReady>
 800b10c:	1e03      	subs	r3, r0, #0
 800b10e:	d100      	bne.n	800b112 <SGP_GetMeasurementValues+0x96>
 800b110:	e19c      	b.n	800b44c <SGP_GetMeasurementValues+0x3d0>
 800b112:	4bb9      	ldr	r3, [pc, #740]	@ (800b3f8 <SGP_GetMeasurementValues+0x37c>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	2201      	movs	r2, #1
 800b118:	4053      	eors	r3, r2
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d100      	bne.n	800b122 <SGP_GetMeasurementValues+0xa6>
 800b120:	e194      	b.n	800b44c <SGP_GetMeasurementValues+0x3d0>
    Debug("SGP sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
 800b122:	4bb6      	ldr	r3, [pc, #728]	@ (800b3fc <SGP_GetMeasurementValues+0x380>)
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	3301      	adds	r3, #1
 800b128:	4ab5      	ldr	r2, [pc, #724]	@ (800b400 <SGP_GetMeasurementValues+0x384>)
 800b12a:	49ae      	ldr	r1, [pc, #696]	@ (800b3e4 <SGP_GetMeasurementValues+0x368>)
 800b12c:	2003      	movs	r0, #3
 800b12e:	f002 fb51 	bl	800d7d4 <CreateLine>
    MeasurementIsReady = true;
 800b132:	4bb1      	ldr	r3, [pc, #708]	@ (800b3f8 <SGP_GetMeasurementValues+0x37c>)
 800b134:	2201      	movs	r2, #1
 800b136:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b138:	4bb2      	ldr	r3, [pc, #712]	@ (800b404 <SGP_GetMeasurementValues+0x388>)
 800b13a:	2203      	movs	r2, #3
 800b13c:	0019      	movs	r1, r3
 800b13e:	2059      	movs	r0, #89	@ 0x59
 800b140:	f7ff fed6 	bl	800aef0 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b144:	4baf      	ldr	r3, [pc, #700]	@ (800b404 <SGP_GetMeasurementValues+0x388>)
 800b146:	2203      	movs	r2, #3
 800b148:	2103      	movs	r1, #3
 800b14a:	0018      	movs	r0, r3
 800b14c:	f000 f9e4 	bl	800b518 <CheckCRC>
 800b150:	0003      	movs	r3, r0
 800b152:	001a      	movs	r2, r3
 800b154:	2301      	movs	r3, #1
 800b156:	4053      	eors	r3, r2
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d02a      	beq.n	800b1b4 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800b15e:	4aaa      	ldr	r2, [pc, #680]	@ (800b408 <SGP_GetMeasurementValues+0x38c>)
 800b160:	4baa      	ldr	r3, [pc, #680]	@ (800b40c <SGP_GetMeasurementValues+0x390>)
 800b162:	0019      	movs	r1, r3
 800b164:	2001      	movs	r0, #1
 800b166:	f002 fb35 	bl	800d7d4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b16a:	4aa9      	ldr	r2, [pc, #676]	@ (800b410 <SGP_GetMeasurementValues+0x394>)
 800b16c:	4ba9      	ldr	r3, [pc, #676]	@ (800b414 <SGP_GetMeasurementValues+0x398>)
 800b16e:	0019      	movs	r1, r3
 800b170:	2002      	movs	r0, #2
 800b172:	f002 fb2f 	bl	800d7d4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b176:	230f      	movs	r3, #15
 800b178:	18fb      	adds	r3, r7, r3
 800b17a:	2200      	movs	r2, #0
 800b17c:	701a      	strb	r2, [r3, #0]
 800b17e:	e012      	b.n	800b1a6 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b180:	240f      	movs	r4, #15
 800b182:	193b      	adds	r3, r7, r4
 800b184:	7818      	ldrb	r0, [r3, #0]
 800b186:	193b      	adds	r3, r7, r4
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	4a9e      	ldr	r2, [pc, #632]	@ (800b404 <SGP_GetMeasurementValues+0x388>)
 800b18c:	5cd3      	ldrb	r3, [r2, r3]
 800b18e:	4aa2      	ldr	r2, [pc, #648]	@ (800b418 <SGP_GetMeasurementValues+0x39c>)
 800b190:	4994      	ldr	r1, [pc, #592]	@ (800b3e4 <SGP_GetMeasurementValues+0x368>)
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	0003      	movs	r3, r0
 800b196:	2003      	movs	r0, #3
 800b198:	f002 fb1c 	bl	800d7d4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b19c:	193b      	adds	r3, r7, r4
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	193b      	adds	r3, r7, r4
 800b1a2:	3201      	adds	r2, #1
 800b1a4:	701a      	strb	r2, [r3, #0]
 800b1a6:	230f      	movs	r3, #15
 800b1a8:	18fb      	adds	r3, r7, r3
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d9e7      	bls.n	800b180 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	e163      	b.n	800b47c <SGP_GetMeasurementValues+0x400>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800b1b4:	f002 fb88 	bl	800d8c8 <GetCurrentHalTicks>
 800b1b8:	0003      	movs	r3, r0
 800b1ba:	22fa      	movs	r2, #250	@ 0xfa
 800b1bc:	0092      	lsls	r2, r2, #2
 800b1be:	189a      	adds	r2, r3, r2
 800b1c0:	4b96      	ldr	r3, [pc, #600]	@ (800b41c <SGP_GetMeasurementValues+0x3a0>)
 800b1c2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b1c4:	f7ff ff4c 	bl	800b060 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b1c8:	4b8c      	ldr	r3, [pc, #560]	@ (800b3fc <SGP_GetMeasurementValues+0x380>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	4b8a      	ldr	r3, [pc, #552]	@ (800b3fc <SGP_GetMeasurementValues+0x380>)
 800b1d2:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b1d4:	4b89      	ldr	r3, [pc, #548]	@ (800b3fc <SGP_GetMeasurementValues+0x380>)
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	4b91      	ldr	r3, [pc, #580]	@ (800b420 <SGP_GetMeasurementValues+0x3a4>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d200      	bcs.n	800b1e2 <SGP_GetMeasurementValues+0x166>
 800b1e0:	e134      	b.n	800b44c <SGP_GetMeasurementValues+0x3d0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b1e2:	4b88      	ldr	r3, [pc, #544]	@ (800b404 <SGP_GetMeasurementValues+0x388>)
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	021b      	lsls	r3, r3, #8
 800b1e8:	b21a      	sxth	r2, r3
 800b1ea:	4b86      	ldr	r3, [pc, #536]	@ (800b404 <SGP_GetMeasurementValues+0x388>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	b21b      	sxth	r3, r3
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	b21a      	sxth	r2, r3
 800b1f4:	240c      	movs	r4, #12
 800b1f6:	193b      	adds	r3, r7, r4
 800b1f8:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800b1fa:	193b      	adds	r3, r7, r4
 800b1fc:	881b      	ldrh	r3, [r3, #0]
 800b1fe:	4a89      	ldr	r2, [pc, #548]	@ (800b424 <SGP_GetMeasurementValues+0x3a8>)
 800b200:	4978      	ldr	r1, [pc, #480]	@ (800b3e4 <SGP_GetMeasurementValues+0x368>)
 800b202:	2003      	movs	r0, #3
 800b204:	f002 fae6 	bl	800d7d4 <CreateLine>
      int32_t tempVocIndex = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b20c:	193b      	adds	r3, r7, r4
 800b20e:	8819      	ldrh	r1, [r3, #0]
 800b210:	2308      	movs	r3, #8
 800b212:	18fa      	adds	r2, r7, r3
 800b214:	4b84      	ldr	r3, [pc, #528]	@ (800b428 <SGP_GetMeasurementValues+0x3ac>)
 800b216:	0018      	movs	r0, r3
 800b218:	f7fe fea6 	bl	8009f68 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	4a83      	ldr	r2, [pc, #524]	@ (800b42c <SGP_GetMeasurementValues+0x3b0>)
 800b220:	4970      	ldr	r1, [pc, #448]	@ (800b3e4 <SGP_GetMeasurementValues+0x368>)
 800b222:	2003      	movs	r0, #3
 800b224:	f002 fad6 	bl	800d7d4 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	dd5a      	ble.n	800b2ec <SGP_GetMeasurementValues+0x270>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2b64      	cmp	r3, #100	@ 0x64
 800b23c:	dc56      	bgt.n	800b2ec <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	0018      	movs	r0, r3
 800b244:	f7f8 f8bc 	bl	80033c0 <__aeabi_i2d>
 800b248:	2200      	movs	r2, #0
 800b24a:	4b79      	ldr	r3, [pc, #484]	@ (800b430 <SGP_GetMeasurementValues+0x3b4>)
 800b24c:	f7f6 fdb2 	bl	8001db4 <__aeabi_ddiv>
 800b250:	0002      	movs	r2, r0
 800b252:	000b      	movs	r3, r1
 800b254:	2000      	movs	r0, #0
 800b256:	4977      	ldr	r1, [pc, #476]	@ (800b434 <SGP_GetMeasurementValues+0x3b8>)
 800b258:	f7f7 fcb8 	bl	8002bcc <__aeabi_dsub>
 800b25c:	0002      	movs	r2, r0
 800b25e:	000b      	movs	r3, r1
 800b260:	0014      	movs	r4, r2
 800b262:	001d      	movs	r5, r3
 800b264:	4b74      	ldr	r3, [pc, #464]	@ (800b438 <SGP_GetMeasurementValues+0x3bc>)
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	0018      	movs	r0, r3
 800b26a:	f7f8 f8a9 	bl	80033c0 <__aeabi_i2d>
 800b26e:	0002      	movs	r2, r0
 800b270:	000b      	movs	r3, r1
 800b272:	0020      	movs	r0, r4
 800b274:	0029      	movs	r1, r5
 800b276:	f7f7 f9e1 	bl	800263c <__aeabi_dmul>
 800b27a:	0002      	movs	r2, r0
 800b27c:	000b      	movs	r3, r1
 800b27e:	0010      	movs	r0, r2
 800b280:	0019      	movs	r1, r3
 800b282:	f7f5 f9e3 	bl	800064c <__aeabi_d2uiz>
 800b286:	0003      	movs	r3, r0
 800b288:	b29a      	uxth	r2, r3
 800b28a:	4b6c      	ldr	r3, [pc, #432]	@ (800b43c <SGP_GetMeasurementValues+0x3c0>)
 800b28c:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	0018      	movs	r0, r3
 800b294:	f7f8 f894 	bl	80033c0 <__aeabi_i2d>
 800b298:	2200      	movs	r2, #0
 800b29a:	4b65      	ldr	r3, [pc, #404]	@ (800b430 <SGP_GetMeasurementValues+0x3b4>)
 800b29c:	f7f6 fd8a 	bl	8001db4 <__aeabi_ddiv>
 800b2a0:	0002      	movs	r2, r0
 800b2a2:	000b      	movs	r3, r1
 800b2a4:	0014      	movs	r4, r2
 800b2a6:	001d      	movs	r5, r3
 800b2a8:	4b63      	ldr	r3, [pc, #396]	@ (800b438 <SGP_GetMeasurementValues+0x3bc>)
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	f7f8 f887 	bl	80033c0 <__aeabi_i2d>
 800b2b2:	0002      	movs	r2, r0
 800b2b4:	000b      	movs	r3, r1
 800b2b6:	0020      	movs	r0, r4
 800b2b8:	0029      	movs	r1, r5
 800b2ba:	f7f7 f9bf 	bl	800263c <__aeabi_dmul>
 800b2be:	0002      	movs	r2, r0
 800b2c0:	000b      	movs	r3, r1
 800b2c2:	0010      	movs	r0, r2
 800b2c4:	0019      	movs	r1, r3
 800b2c6:	f7f5 f9c1 	bl	800064c <__aeabi_d2uiz>
 800b2ca:	0003      	movs	r3, r0
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	4b5c      	ldr	r3, [pc, #368]	@ (800b440 <SGP_GetMeasurementValues+0x3c4>)
 800b2d0:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800b2d2:	4b59      	ldr	r3, [pc, #356]	@ (800b438 <SGP_GetMeasurementValues+0x3bc>)
 800b2d4:	881a      	ldrh	r2, [r3, #0]
 800b2d6:	4b5b      	ldr	r3, [pc, #364]	@ (800b444 <SGP_GetMeasurementValues+0x3c8>)
 800b2d8:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800b2da:	4b5a      	ldr	r3, [pc, #360]	@ (800b444 <SGP_GetMeasurementValues+0x3c8>)
 800b2dc:	8818      	ldrh	r0, [r3, #0]
 800b2de:	4b57      	ldr	r3, [pc, #348]	@ (800b43c <SGP_GetMeasurementValues+0x3c0>)
 800b2e0:	8819      	ldrh	r1, [r3, #0]
 800b2e2:	4b57      	ldr	r3, [pc, #348]	@ (800b440 <SGP_GetMeasurementValues+0x3c4>)
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	001a      	movs	r2, r3
 800b2e8:	f001 fb2e 	bl	800c948 <SetVocLED>
      }
      if(*vocIndex > 100){
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b64      	cmp	r3, #100	@ 0x64
 800b2f2:	dd66      	ble.n	800b3c2 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	0018      	movs	r0, r3
 800b2fa:	f7f8 f861 	bl	80033c0 <__aeabi_i2d>
 800b2fe:	2200      	movs	r2, #0
 800b300:	4b4b      	ldr	r3, [pc, #300]	@ (800b430 <SGP_GetMeasurementValues+0x3b4>)
 800b302:	f7f7 fc63 	bl	8002bcc <__aeabi_dsub>
 800b306:	0002      	movs	r2, r0
 800b308:	000b      	movs	r3, r1
 800b30a:	0010      	movs	r0, r2
 800b30c:	0019      	movs	r1, r3
 800b30e:	2200      	movs	r2, #0
 800b310:	4b4d      	ldr	r3, [pc, #308]	@ (800b448 <SGP_GetMeasurementValues+0x3cc>)
 800b312:	f7f6 fd4f 	bl	8001db4 <__aeabi_ddiv>
 800b316:	0002      	movs	r2, r0
 800b318:	000b      	movs	r3, r1
 800b31a:	0014      	movs	r4, r2
 800b31c:	001d      	movs	r5, r3
 800b31e:	4b46      	ldr	r3, [pc, #280]	@ (800b438 <SGP_GetMeasurementValues+0x3bc>)
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	0018      	movs	r0, r3
 800b324:	f7f8 f84c 	bl	80033c0 <__aeabi_i2d>
 800b328:	0002      	movs	r2, r0
 800b32a:	000b      	movs	r3, r1
 800b32c:	0020      	movs	r0, r4
 800b32e:	0029      	movs	r1, r5
 800b330:	f7f7 f984 	bl	800263c <__aeabi_dmul>
 800b334:	0002      	movs	r2, r0
 800b336:	000b      	movs	r3, r1
 800b338:	0010      	movs	r0, r2
 800b33a:	0019      	movs	r1, r3
 800b33c:	f7f5 f986 	bl	800064c <__aeabi_d2uiz>
 800b340:	0003      	movs	r3, r0
 800b342:	b29a      	uxth	r2, r3
 800b344:	4b3d      	ldr	r3, [pc, #244]	@ (800b43c <SGP_GetMeasurementValues+0x3c0>)
 800b346:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	0018      	movs	r0, r3
 800b34e:	f7f8 f837 	bl	80033c0 <__aeabi_i2d>
 800b352:	2200      	movs	r2, #0
 800b354:	4b36      	ldr	r3, [pc, #216]	@ (800b430 <SGP_GetMeasurementValues+0x3b4>)
 800b356:	f7f7 fc39 	bl	8002bcc <__aeabi_dsub>
 800b35a:	0002      	movs	r2, r0
 800b35c:	000b      	movs	r3, r1
 800b35e:	0010      	movs	r0, r2
 800b360:	0019      	movs	r1, r3
 800b362:	2200      	movs	r2, #0
 800b364:	4b38      	ldr	r3, [pc, #224]	@ (800b448 <SGP_GetMeasurementValues+0x3cc>)
 800b366:	f7f6 fd25 	bl	8001db4 <__aeabi_ddiv>
 800b36a:	0002      	movs	r2, r0
 800b36c:	000b      	movs	r3, r1
 800b36e:	2000      	movs	r0, #0
 800b370:	4930      	ldr	r1, [pc, #192]	@ (800b434 <SGP_GetMeasurementValues+0x3b8>)
 800b372:	f7f7 fc2b 	bl	8002bcc <__aeabi_dsub>
 800b376:	0002      	movs	r2, r0
 800b378:	000b      	movs	r3, r1
 800b37a:	0014      	movs	r4, r2
 800b37c:	001d      	movs	r5, r3
 800b37e:	4b2e      	ldr	r3, [pc, #184]	@ (800b438 <SGP_GetMeasurementValues+0x3bc>)
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	0018      	movs	r0, r3
 800b384:	f7f8 f81c 	bl	80033c0 <__aeabi_i2d>
 800b388:	0002      	movs	r2, r0
 800b38a:	000b      	movs	r3, r1
 800b38c:	0020      	movs	r0, r4
 800b38e:	0029      	movs	r1, r5
 800b390:	f7f7 f954 	bl	800263c <__aeabi_dmul>
 800b394:	0002      	movs	r2, r0
 800b396:	000b      	movs	r3, r1
 800b398:	0010      	movs	r0, r2
 800b39a:	0019      	movs	r1, r3
 800b39c:	f7f5 f956 	bl	800064c <__aeabi_d2uiz>
 800b3a0:	0003      	movs	r3, r0
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	4b27      	ldr	r3, [pc, #156]	@ (800b444 <SGP_GetMeasurementValues+0x3c8>)
 800b3a6:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b3a8:	4b23      	ldr	r3, [pc, #140]	@ (800b438 <SGP_GetMeasurementValues+0x3bc>)
 800b3aa:	881a      	ldrh	r2, [r3, #0]
 800b3ac:	4b24      	ldr	r3, [pc, #144]	@ (800b440 <SGP_GetMeasurementValues+0x3c4>)
 800b3ae:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b3b0:	4b24      	ldr	r3, [pc, #144]	@ (800b444 <SGP_GetMeasurementValues+0x3c8>)
 800b3b2:	8818      	ldrh	r0, [r3, #0]
 800b3b4:	4b21      	ldr	r3, [pc, #132]	@ (800b43c <SGP_GetMeasurementValues+0x3c0>)
 800b3b6:	8819      	ldrh	r1, [r3, #0]
 800b3b8:	4b21      	ldr	r3, [pc, #132]	@ (800b440 <SGP_GetMeasurementValues+0x3c4>)
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	001a      	movs	r2, r3
 800b3be:	f001 fac3 	bl	800c948 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b3c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3fc <SGP_GetMeasurementValues+0x380>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b3c8:	4b07      	ldr	r3, [pc, #28]	@ (800b3e8 <SGP_GetMeasurementValues+0x36c>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b3ce:	4b03      	ldr	r3, [pc, #12]	@ (800b3dc <SGP_GetMeasurementValues+0x360>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e051      	b.n	800b47c <SGP_GetMeasurementValues+0x400>
 800b3d8:	2000122a 	.word	0x2000122a
 800b3dc:	200012d5 	.word	0x200012d5
 800b3e0:	08023800 	.word	0x08023800
 800b3e4:	08023814 	.word	0x08023814
 800b3e8:	200012d4 	.word	0x200012d4
 800b3ec:	20000094 	.word	0x20000094
 800b3f0:	200000a8 	.word	0x200000a8
 800b3f4:	2000008c 	.word	0x2000008c
 800b3f8:	2000122b 	.word	0x2000122b
 800b3fc:	20001229 	.word	0x20001229
 800b400:	08023818 	.word	0x08023818
 800b404:	20001220 	.word	0x20001220
 800b408:	08023830 	.word	0x08023830
 800b40c:	08023854 	.word	0x08023854
 800b410:	08023858 	.word	0x08023858
 800b414:	08023878 	.word	0x08023878
 800b418:	0802387c 	.word	0x0802387c
 800b41c:	200000a4 	.word	0x200000a4
 800b420:	2000009c 	.word	0x2000009c
 800b424:	0802389c 	.word	0x0802389c
 800b428:	2000122c 	.word	0x2000122c
 800b42c:	080238b0 	.word	0x080238b0
 800b430:	40590000 	.word	0x40590000
 800b434:	3ff00000 	.word	0x3ff00000
 800b438:	200000ac 	.word	0x200000ac
 800b43c:	200012da 	.word	0x200012da
 800b440:	200012d8 	.word	0x200012d8
 800b444:	200012d6 	.word	0x200012d6
 800b448:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b44c:	f7ff fdfa 	bl	800b044 <SGP_MeasurementDone>
 800b450:	1e03      	subs	r3, r0, #0
 800b452:	d012      	beq.n	800b47a <SGP_GetMeasurementValues+0x3fe>
 800b454:	4b0b      	ldr	r3, [pc, #44]	@ (800b484 <SGP_GetMeasurementValues+0x408>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00e      	beq.n	800b47a <SGP_GetMeasurementValues+0x3fe>
 800b45c:	4b0a      	ldr	r3, [pc, #40]	@ (800b488 <SGP_GetMeasurementValues+0x40c>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00a      	beq.n	800b47a <SGP_GetMeasurementValues+0x3fe>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b464:	4a09      	ldr	r2, [pc, #36]	@ (800b48c <SGP_GetMeasurementValues+0x410>)
 800b466:	4b0a      	ldr	r3, [pc, #40]	@ (800b490 <SGP_GetMeasurementValues+0x414>)
 800b468:	0019      	movs	r1, r3
 800b46a:	2003      	movs	r0, #3
 800b46c:	f002 f9b2 	bl	800d7d4 <CreateLine>
    SGP_StartMeasurement();
 800b470:	f7ff fd94 	bl	800af9c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b474:	4b07      	ldr	r3, [pc, #28]	@ (800b494 <SGP_GetMeasurementValues+0x418>)
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	0018      	movs	r0, r3
 800b47e:	46bd      	mov	sp, r7
 800b480:	b004      	add	sp, #16
 800b482:	bdb0      	pop	{r4, r5, r7, pc}
 800b484:	2000122a 	.word	0x2000122a
 800b488:	2000122b 	.word	0x2000122b
 800b48c:	080238c4 	.word	0x080238c4
 800b490:	08023814 	.word	0x08023814
 800b494:	200012d5 	.word	0x200012d5

0800b498 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b49e:	4b1a      	ldr	r3, [pc, #104]	@ (800b508 <SGP_DeviceConnected+0x70>)
 800b4a0:	2202      	movs	r2, #2
 800b4a2:	0019      	movs	r1, r3
 800b4a4:	2059      	movs	r0, #89	@ 0x59
 800b4a6:	f7ff fd41 	bl	800af2c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	f002 fd3a 	bl	800df24 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b4b0:	4b16      	ldr	r3, [pc, #88]	@ (800b50c <SGP_DeviceConnected+0x74>)
 800b4b2:	2209      	movs	r2, #9
 800b4b4:	0019      	movs	r1, r3
 800b4b6:	2059      	movs	r0, #89	@ 0x59
 800b4b8:	f7ff fd1a 	bl	800aef0 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b4bc:	1dfb      	adds	r3, r7, #7
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
 800b4c2:	e011      	b.n	800b4e8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b4c4:	1dfb      	adds	r3, r7, #7
 800b4c6:	7818      	ldrb	r0, [r3, #0]
 800b4c8:	1dfb      	adds	r3, r7, #7
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4a0f      	ldr	r2, [pc, #60]	@ (800b50c <SGP_DeviceConnected+0x74>)
 800b4ce:	5cd3      	ldrb	r3, [r2, r3]
 800b4d0:	4a0f      	ldr	r2, [pc, #60]	@ (800b510 <SGP_DeviceConnected+0x78>)
 800b4d2:	4910      	ldr	r1, [pc, #64]	@ (800b514 <SGP_DeviceConnected+0x7c>)
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	0003      	movs	r3, r0
 800b4d8:	2002      	movs	r0, #2
 800b4da:	f002 f97b 	bl	800d7d4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b4de:	1dfb      	adds	r3, r7, #7
 800b4e0:	781a      	ldrb	r2, [r3, #0]
 800b4e2:	1dfb      	adds	r3, r7, #7
 800b4e4:	3201      	adds	r2, #1
 800b4e6:	701a      	strb	r2, [r3, #0]
 800b4e8:	1dfb      	adds	r3, r7, #7
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b08      	cmp	r3, #8
 800b4ee:	d9e9      	bls.n	800b4c4 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b4f0:	4b06      	ldr	r3, [pc, #24]	@ (800b50c <SGP_DeviceConnected+0x74>)
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	2109      	movs	r1, #9
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f000 f80e 	bl	800b518 <CheckCRC>
 800b4fc:	0003      	movs	r3, r0
}
 800b4fe:	0018      	movs	r0, r3
 800b500:	46bd      	mov	sp, r7
 800b502:	b002      	add	sp, #8
 800b504:	bd80      	pop	{r7, pc}
 800b506:	46c0      	nop			@ (mov r8, r8)
 800b508:	20000088 	.word	0x20000088
 800b50c:	20001220 	.word	0x20001220
 800b510:	080238e4 	.word	0x080238e4
 800b514:	08023878 	.word	0x08023878

0800b518 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51a:	b08f      	sub	sp, #60	@ 0x3c
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6278      	str	r0, [r7, #36]	@ 0x24
 800b520:	0008      	movs	r0, r1
 800b522:	0011      	movs	r1, r2
 800b524:	2323      	movs	r3, #35	@ 0x23
 800b526:	18fb      	adds	r3, r7, r3
 800b528:	1c02      	adds	r2, r0, #0
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	2322      	movs	r3, #34	@ 0x22
 800b52e:	18fb      	adds	r3, r7, r3
 800b530:	1c0a      	adds	r2, r1, #0
 800b532:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b534:	2317      	movs	r3, #23
 800b536:	2220      	movs	r2, #32
 800b538:	189b      	adds	r3, r3, r2
 800b53a:	19db      	adds	r3, r3, r7
 800b53c:	2200      	movs	r2, #0
 800b53e:	701a      	strb	r2, [r3, #0]
 800b540:	e09f      	b.n	800b682 <CheckCRC+0x16a>
 800b542:	466b      	mov	r3, sp
 800b544:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b546:	2322      	movs	r3, #34	@ 0x22
 800b548:	18fb      	adds	r3, r7, r3
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	001a      	movs	r2, r3
 800b54e:	3a01      	subs	r2, #1
 800b550:	633a      	str	r2, [r7, #48]	@ 0x30
 800b552:	60bb      	str	r3, [r7, #8]
 800b554:	2200      	movs	r2, #0
 800b556:	60fa      	str	r2, [r7, #12]
 800b558:	68b8      	ldr	r0, [r7, #8]
 800b55a:	68f9      	ldr	r1, [r7, #12]
 800b55c:	0002      	movs	r2, r0
 800b55e:	0f52      	lsrs	r2, r2, #29
 800b560:	000c      	movs	r4, r1
 800b562:	00e4      	lsls	r4, r4, #3
 800b564:	61fc      	str	r4, [r7, #28]
 800b566:	69fc      	ldr	r4, [r7, #28]
 800b568:	4314      	orrs	r4, r2
 800b56a:	61fc      	str	r4, [r7, #28]
 800b56c:	0002      	movs	r2, r0
 800b56e:	00d2      	lsls	r2, r2, #3
 800b570:	61ba      	str	r2, [r7, #24]
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	2200      	movs	r2, #0
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	6838      	ldr	r0, [r7, #0]
 800b57a:	6879      	ldr	r1, [r7, #4]
 800b57c:	0002      	movs	r2, r0
 800b57e:	0f52      	lsrs	r2, r2, #29
 800b580:	000c      	movs	r4, r1
 800b582:	00e4      	lsls	r4, r4, #3
 800b584:	617c      	str	r4, [r7, #20]
 800b586:	697c      	ldr	r4, [r7, #20]
 800b588:	4314      	orrs	r4, r2
 800b58a:	617c      	str	r4, [r7, #20]
 800b58c:	0002      	movs	r2, r0
 800b58e:	00d2      	lsls	r2, r2, #3
 800b590:	613a      	str	r2, [r7, #16]
 800b592:	3307      	adds	r3, #7
 800b594:	08db      	lsrs	r3, r3, #3
 800b596:	00db      	lsls	r3, r3, #3
 800b598:	466a      	mov	r2, sp
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	469d      	mov	sp, r3
 800b59e:	466b      	mov	r3, sp
 800b5a0:	3300      	adds	r3, #0
 800b5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b5a4:	2316      	movs	r3, #22
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	189b      	adds	r3, r3, r2
 800b5aa:	19db      	adds	r3, r3, r7
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
 800b5b0:	e01e      	b.n	800b5f0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b5b2:	2317      	movs	r3, #23
 800b5b4:	2220      	movs	r2, #32
 800b5b6:	189b      	adds	r3, r3, r2
 800b5b8:	19db      	adds	r3, r3, r7
 800b5ba:	781a      	ldrb	r2, [r3, #0]
 800b5bc:	2116      	movs	r1, #22
 800b5be:	2320      	movs	r3, #32
 800b5c0:	18cb      	adds	r3, r1, r3
 800b5c2:	19db      	adds	r3, r3, r7
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	18d3      	adds	r3, r2, r3
 800b5c8:	001a      	movs	r2, r3
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5cc:	189a      	adds	r2, r3, r2
 800b5ce:	0008      	movs	r0, r1
 800b5d0:	2320      	movs	r3, #32
 800b5d2:	18cb      	adds	r3, r1, r3
 800b5d4:	19db      	adds	r3, r3, r7
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	7811      	ldrb	r1, [r2, #0]
 800b5da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5dc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b5de:	2320      	movs	r3, #32
 800b5e0:	18c3      	adds	r3, r0, r3
 800b5e2:	19db      	adds	r3, r3, r7
 800b5e4:	781a      	ldrb	r2, [r3, #0]
 800b5e6:	2320      	movs	r3, #32
 800b5e8:	18c3      	adds	r3, r0, r3
 800b5ea:	19db      	adds	r3, r3, r7
 800b5ec:	3201      	adds	r2, #1
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	2316      	movs	r3, #22
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	189b      	adds	r3, r3, r2
 800b5f6:	19da      	adds	r2, r3, r7
 800b5f8:	2322      	movs	r3, #34	@ 0x22
 800b5fa:	18fb      	adds	r3, r7, r3
 800b5fc:	7812      	ldrb	r2, [r2, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d3d6      	bcc.n	800b5b2 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b604:	2417      	movs	r4, #23
 800b606:	2320      	movs	r3, #32
 800b608:	18e3      	adds	r3, r4, r3
 800b60a:	19db      	adds	r3, r3, r7
 800b60c:	781a      	ldrb	r2, [r3, #0]
 800b60e:	2322      	movs	r3, #34	@ 0x22
 800b610:	18fb      	adds	r3, r7, r3
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	18d3      	adds	r3, r2, r3
 800b616:	3b01      	subs	r3, #1
 800b618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b61a:	18d2      	adds	r2, r2, r3
 800b61c:	250b      	movs	r5, #11
 800b61e:	2320      	movs	r3, #32
 800b620:	18eb      	adds	r3, r5, r3
 800b622:	19db      	adds	r3, r3, r7
 800b624:	7812      	ldrb	r2, [r2, #0]
 800b626:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b628:	2322      	movs	r3, #34	@ 0x22
 800b62a:	18fb      	adds	r3, r7, r3
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	3b01      	subs	r3, #1
 800b630:	b2da      	uxtb	r2, r3
 800b632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b634:	0011      	movs	r1, r2
 800b636:	0018      	movs	r0, r3
 800b638:	f000 f838 	bl	800b6ac <CalculateCRC>
 800b63c:	0003      	movs	r3, r0
 800b63e:	001a      	movs	r2, r3
 800b640:	2320      	movs	r3, #32
 800b642:	18eb      	adds	r3, r5, r3
 800b644:	19db      	adds	r3, r3, r7
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	4293      	cmp	r3, r2
 800b64a:	d00c      	beq.n	800b666 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b64c:	2320      	movs	r3, #32
 800b64e:	18e3      	adds	r3, r4, r3
 800b650:	19db      	adds	r3, r3, r7
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	4a13      	ldr	r2, [pc, #76]	@ (800b6a4 <CheckCRC+0x18c>)
 800b658:	4913      	ldr	r1, [pc, #76]	@ (800b6a8 <CheckCRC+0x190>)
 800b65a:	2001      	movs	r0, #1
 800b65c:	f002 f8ba 	bl	800d7d4 <CreateLine>
      return false;
 800b660:	2300      	movs	r3, #0
 800b662:	46b5      	mov	sp, r6
 800b664:	e019      	b.n	800b69a <CheckCRC+0x182>
 800b666:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b668:	2217      	movs	r2, #23
 800b66a:	2320      	movs	r3, #32
 800b66c:	18d3      	adds	r3, r2, r3
 800b66e:	19db      	adds	r3, r3, r7
 800b670:	2120      	movs	r1, #32
 800b672:	1852      	adds	r2, r2, r1
 800b674:	19d1      	adds	r1, r2, r7
 800b676:	2222      	movs	r2, #34	@ 0x22
 800b678:	18ba      	adds	r2, r7, r2
 800b67a:	7809      	ldrb	r1, [r1, #0]
 800b67c:	7812      	ldrb	r2, [r2, #0]
 800b67e:	188a      	adds	r2, r1, r2
 800b680:	701a      	strb	r2, [r3, #0]
 800b682:	2317      	movs	r3, #23
 800b684:	2220      	movs	r2, #32
 800b686:	189b      	adds	r3, r3, r2
 800b688:	19da      	adds	r2, r3, r7
 800b68a:	2323      	movs	r3, #35	@ 0x23
 800b68c:	18fb      	adds	r3, r7, r3
 800b68e:	7812      	ldrb	r2, [r2, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	429a      	cmp	r2, r3
 800b694:	d200      	bcs.n	800b698 <CheckCRC+0x180>
 800b696:	e754      	b.n	800b542 <CheckCRC+0x2a>
    }
  }
  return true;
 800b698:	2301      	movs	r3, #1
}
 800b69a:	0018      	movs	r0, r3
 800b69c:	46bd      	mov	sp, r7
 800b69e:	b00f      	add	sp, #60	@ 0x3c
 800b6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a2:	46c0      	nop			@ (mov r8, r8)
 800b6a4:	08023904 	.word	0x08023904
 800b6a8:	08023854 	.word	0x08023854

0800b6ac <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	000a      	movs	r2, r1
 800b6b6:	1cfb      	adds	r3, r7, #3
 800b6b8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b6ba:	230f      	movs	r3, #15
 800b6bc:	18fb      	adds	r3, r7, r3
 800b6be:	22ff      	movs	r2, #255	@ 0xff
 800b6c0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b6c2:	230e      	movs	r3, #14
 800b6c4:	18fb      	adds	r3, r7, r3
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	e037      	b.n	800b73c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b6cc:	230e      	movs	r3, #14
 800b6ce:	18fb      	adds	r3, r7, r3
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	18d3      	adds	r3, r2, r3
 800b6d6:	7819      	ldrb	r1, [r3, #0]
 800b6d8:	220f      	movs	r2, #15
 800b6da:	18bb      	adds	r3, r7, r2
 800b6dc:	18ba      	adds	r2, r7, r2
 800b6de:	7812      	ldrb	r2, [r2, #0]
 800b6e0:	404a      	eors	r2, r1
 800b6e2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b6e4:	230d      	movs	r3, #13
 800b6e6:	18fb      	adds	r3, r7, r3
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	701a      	strb	r2, [r3, #0]
 800b6ec:	e01b      	b.n	800b726 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b6ee:	210f      	movs	r1, #15
 800b6f0:	187b      	adds	r3, r7, r1
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	b25b      	sxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	da09      	bge.n	800b70e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b6fa:	187b      	adds	r3, r7, r1
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	005b      	lsls	r3, r3, #1
 800b700:	b25b      	sxtb	r3, r3
 800b702:	2231      	movs	r2, #49	@ 0x31
 800b704:	4053      	eors	r3, r2
 800b706:	b25a      	sxtb	r2, r3
 800b708:	187b      	adds	r3, r7, r1
 800b70a:	701a      	strb	r2, [r3, #0]
 800b70c:	e005      	b.n	800b71a <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b70e:	230f      	movs	r3, #15
 800b710:	18fa      	adds	r2, r7, r3
 800b712:	18fb      	adds	r3, r7, r3
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	18db      	adds	r3, r3, r3
 800b718:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b71a:	210d      	movs	r1, #13
 800b71c:	187b      	adds	r3, r7, r1
 800b71e:	781a      	ldrb	r2, [r3, #0]
 800b720:	187b      	adds	r3, r7, r1
 800b722:	3201      	adds	r2, #1
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	230d      	movs	r3, #13
 800b728:	18fb      	adds	r3, r7, r3
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b07      	cmp	r3, #7
 800b72e:	d9de      	bls.n	800b6ee <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b730:	210e      	movs	r1, #14
 800b732:	187b      	adds	r3, r7, r1
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	187b      	adds	r3, r7, r1
 800b738:	3201      	adds	r2, #1
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	230e      	movs	r3, #14
 800b73e:	18fa      	adds	r2, r7, r3
 800b740:	1cfb      	adds	r3, r7, #3
 800b742:	7812      	ldrb	r2, [r2, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	429a      	cmp	r2, r3
 800b748:	d3c0      	bcc.n	800b6cc <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b74a:	230f      	movs	r3, #15
 800b74c:	18fb      	adds	r3, r7, r3
 800b74e:	781b      	ldrb	r3, [r3, #0]
}
 800b750:	0018      	movs	r0, r3
 800b752:	46bd      	mov	sp, r7
 800b754:	b004      	add	sp, #16
 800b756:	bd80      	pop	{r7, pc}

0800b758 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4936      	ldr	r1, [pc, #216]	@ (800b840 <SGP_GetHT+0xe8>)
 800b768:	1c18      	adds	r0, r3, #0
 800b76a:	f7f5 f8a9 	bl	80008c0 <__aeabi_fadd>
 800b76e:	1c03      	adds	r3, r0, #0
 800b770:	4934      	ldr	r1, [pc, #208]	@ (800b844 <SGP_GetHT+0xec>)
 800b772:	1c18      	adds	r0, r3, #0
 800b774:	f7f5 fa2e 	bl	8000bd4 <__aeabi_fdiv>
 800b778:	1c03      	adds	r3, r0, #0
 800b77a:	4933      	ldr	r1, [pc, #204]	@ (800b848 <SGP_GetHT+0xf0>)
 800b77c:	1c18      	adds	r0, r3, #0
 800b77e:	f7f5 fc0f 	bl	8000fa0 <__aeabi_fmul>
 800b782:	1c03      	adds	r3, r0, #0
 800b784:	1c18      	adds	r0, r3, #0
 800b786:	f7f4 ff49 	bl	800061c <__aeabi_f2uiz>
 800b78a:	0003      	movs	r3, r0
 800b78c:	b29a      	uxth	r2, r3
 800b78e:	4b2f      	ldr	r3, [pc, #188]	@ (800b84c <SGP_GetHT+0xf4>)
 800b790:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	492e      	ldr	r1, [pc, #184]	@ (800b850 <SGP_GetHT+0xf8>)
 800b798:	1c18      	adds	r0, r3, #0
 800b79a:	f7f5 fa1b 	bl	8000bd4 <__aeabi_fdiv>
 800b79e:	1c03      	adds	r3, r0, #0
 800b7a0:	4929      	ldr	r1, [pc, #164]	@ (800b848 <SGP_GetHT+0xf0>)
 800b7a2:	1c18      	adds	r0, r3, #0
 800b7a4:	f7f5 fbfc 	bl	8000fa0 <__aeabi_fmul>
 800b7a8:	1c03      	adds	r3, r0, #0
 800b7aa:	1c18      	adds	r0, r3, #0
 800b7ac:	f7f4 ff36 	bl	800061c <__aeabi_f2uiz>
 800b7b0:	0003      	movs	r3, r0
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	4b27      	ldr	r3, [pc, #156]	@ (800b854 <SGP_GetHT+0xfc>)
 800b7b6:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b7b8:	4b26      	ldr	r3, [pc, #152]	@ (800b854 <SGP_GetHT+0xfc>)
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	0a1b      	lsrs	r3, r3, #8
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	b2da      	uxtb	r2, r3
 800b7c2:	4b25      	ldr	r3, [pc, #148]	@ (800b858 <SGP_GetHT+0x100>)
 800b7c4:	709a      	strb	r2, [r3, #2]
 800b7c6:	4b24      	ldr	r3, [pc, #144]	@ (800b858 <SGP_GetHT+0x100>)
 800b7c8:	789a      	ldrb	r2, [r3, #2]
 800b7ca:	210c      	movs	r1, #12
 800b7cc:	187b      	adds	r3, r7, r1
 800b7ce:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b7d0:	4b20      	ldr	r3, [pc, #128]	@ (800b854 <SGP_GetHT+0xfc>)
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	4b20      	ldr	r3, [pc, #128]	@ (800b858 <SGP_GetHT+0x100>)
 800b7d8:	70da      	strb	r2, [r3, #3]
 800b7da:	4b1f      	ldr	r3, [pc, #124]	@ (800b858 <SGP_GetHT+0x100>)
 800b7dc:	78da      	ldrb	r2, [r3, #3]
 800b7de:	187b      	adds	r3, r7, r1
 800b7e0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b7e2:	187b      	adds	r3, r7, r1
 800b7e4:	2102      	movs	r1, #2
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	f7ff ff60 	bl	800b6ac <CalculateCRC>
 800b7ec:	0003      	movs	r3, r0
 800b7ee:	001a      	movs	r2, r3
 800b7f0:	4b19      	ldr	r3, [pc, #100]	@ (800b858 <SGP_GetHT+0x100>)
 800b7f2:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b7f4:	4b15      	ldr	r3, [pc, #84]	@ (800b84c <SGP_GetHT+0xf4>)
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	0a1b      	lsrs	r3, r3, #8
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	b2da      	uxtb	r2, r3
 800b7fe:	4b16      	ldr	r3, [pc, #88]	@ (800b858 <SGP_GetHT+0x100>)
 800b800:	715a      	strb	r2, [r3, #5]
 800b802:	4b15      	ldr	r3, [pc, #84]	@ (800b858 <SGP_GetHT+0x100>)
 800b804:	795a      	ldrb	r2, [r3, #5]
 800b806:	2108      	movs	r1, #8
 800b808:	187b      	adds	r3, r7, r1
 800b80a:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b80c:	4b0f      	ldr	r3, [pc, #60]	@ (800b84c <SGP_GetHT+0xf4>)
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	b2da      	uxtb	r2, r3
 800b812:	4b11      	ldr	r3, [pc, #68]	@ (800b858 <SGP_GetHT+0x100>)
 800b814:	719a      	strb	r2, [r3, #6]
 800b816:	4b10      	ldr	r3, [pc, #64]	@ (800b858 <SGP_GetHT+0x100>)
 800b818:	799a      	ldrb	r2, [r3, #6]
 800b81a:	187b      	adds	r3, r7, r1
 800b81c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b81e:	187b      	adds	r3, r7, r1
 800b820:	2102      	movs	r1, #2
 800b822:	0018      	movs	r0, r3
 800b824:	f7ff ff42 	bl	800b6ac <CalculateCRC>
 800b828:	0003      	movs	r3, r0
 800b82a:	001a      	movs	r2, r3
 800b82c:	4b0a      	ldr	r3, [pc, #40]	@ (800b858 <SGP_GetHT+0x100>)
 800b82e:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b830:	4b0a      	ldr	r3, [pc, #40]	@ (800b85c <SGP_GetHT+0x104>)
 800b832:	2201      	movs	r2, #1
 800b834:	701a      	strb	r2, [r3, #0]
}
 800b836:	46c0      	nop			@ (mov r8, r8)
 800b838:	46bd      	mov	sp, r7
 800b83a:	b004      	add	sp, #16
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	46c0      	nop			@ (mov r8, r8)
 800b840:	42340000 	.word	0x42340000
 800b844:	432f0000 	.word	0x432f0000
 800b848:	477fff00 	.word	0x477fff00
 800b84c:	200012d2 	.word	0x200012d2
 800b850:	42c80000 	.word	0x42c80000
 800b854:	200012d0 	.word	0x200012d0
 800b858:	20000094 	.word	0x20000094
 800b85c:	200012d4 	.word	0x200012d4

0800b860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	0002      	movs	r2, r0
 800b868:	1dfb      	adds	r3, r7, #7
 800b86a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b86c:	1dfb      	adds	r3, r7, #7
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b7f      	cmp	r3, #127	@ 0x7f
 800b872:	d809      	bhi.n	800b888 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b874:	1dfb      	adds	r3, r7, #7
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	001a      	movs	r2, r3
 800b87a:	231f      	movs	r3, #31
 800b87c:	401a      	ands	r2, r3
 800b87e:	4b04      	ldr	r3, [pc, #16]	@ (800b890 <__NVIC_EnableIRQ+0x30>)
 800b880:	2101      	movs	r1, #1
 800b882:	4091      	lsls	r1, r2
 800b884:	000a      	movs	r2, r1
 800b886:	601a      	str	r2, [r3, #0]
  }
}
 800b888:	46c0      	nop			@ (mov r8, r8)
 800b88a:	46bd      	mov	sp, r7
 800b88c:	b002      	add	sp, #8
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	e000e100 	.word	0xe000e100

0800b894 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	0002      	movs	r2, r0
 800b89c:	1dfb      	adds	r3, r7, #7
 800b89e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b8a0:	1dfb      	adds	r3, r7, #7
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8a6:	d810      	bhi.n	800b8ca <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b8a8:	1dfb      	adds	r3, r7, #7
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	001a      	movs	r2, r3
 800b8ae:	231f      	movs	r3, #31
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	4908      	ldr	r1, [pc, #32]	@ (800b8d4 <__NVIC_DisableIRQ+0x40>)
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	409a      	lsls	r2, r3
 800b8b8:	0013      	movs	r3, r2
 800b8ba:	2280      	movs	r2, #128	@ 0x80
 800b8bc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b8be:	f3bf 8f4f 	dsb	sy
}
 800b8c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b8c4:	f3bf 8f6f 	isb	sy
}
 800b8c8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800b8ca:	46c0      	nop			@ (mov r8, r8)
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	b002      	add	sp, #8
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	46c0      	nop			@ (mov r8, r8)
 800b8d4:	e000e100 	.word	0xe000e100

0800b8d8 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800b8d8:	b5b0      	push	{r4, r5, r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af02      	add	r7, sp, #8
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	0008      	movs	r0, r1
 800b8e2:	0011      	movs	r1, r2
 800b8e4:	1cfb      	adds	r3, r7, #3
 800b8e6:	1c02      	adds	r2, r0, #0
 800b8e8:	701a      	strb	r2, [r3, #0]
 800b8ea:	1cbb      	adds	r3, r7, #2
 800b8ec:	1c0a      	adds	r2, r1, #0
 800b8ee:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800b8f0:	4b5b      	ldr	r3, [pc, #364]	@ (800ba60 <getSoundData+0x188>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	4053      	eors	r3, r2
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d107      	bne.n	800b910 <getSoundData+0x38>
 800b900:	4b58      	ldr	r3, [pc, #352]	@ (800ba64 <getSoundData+0x18c>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2201      	movs	r2, #1
 800b908:	4053      	eors	r3, r2
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d001      	beq.n	800b914 <getSoundData+0x3c>
    {
        return false;
 800b910:	2300      	movs	r3, #0
 800b912:	e0a0      	b.n	800ba56 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800b914:	4b54      	ldr	r3, [pc, #336]	@ (800ba68 <getSoundData+0x190>)
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d005      	beq.n	800b92a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b91e:	4b53      	ldr	r3, [pc, #332]	@ (800ba6c <getSoundData+0x194>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b25b      	sxtb	r3, r3
 800b924:	0018      	movs	r0, r3
 800b926:	f7ff ffb5 	bl	800b894 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800b92a:	f3bf 8f4f 	dsb	sy
}
 800b92e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b930:	f3bf 8f6f 	isb	sy
}
 800b934:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800b936:	1cfb      	adds	r3, r7, #3
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d04c      	beq.n	800b9d8 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800b93e:	4b4c      	ldr	r3, [pc, #304]	@ (800ba70 <getSoundData+0x198>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d11b      	bne.n	800b97e <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]
 800b956:	e00e      	b.n	800b976 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	18d3      	adds	r3, r2, r3
 800b95e:	3302      	adds	r3, #2
 800b960:	2200      	movs	r2, #0
 800b962:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	18d3      	adds	r3, r2, r3
 800b96a:	3308      	adds	r3, #8
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	3301      	adds	r3, #1
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2b05      	cmp	r3, #5
 800b97a:	d9ed      	bls.n	800b958 <getSoundData+0x80>
 800b97c:	e02c      	b.n	800b9d8 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	1c59      	adds	r1, r3, #1
 800b984:	4b3b      	ldr	r3, [pc, #236]	@ (800ba74 <getSoundData+0x19c>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	4b3b      	ldr	r3, [pc, #236]	@ (800ba78 <getSoundData+0x1a0>)
 800b98a:	681c      	ldr	r4, [r3, #0]
 800b98c:	4b38      	ldr	r3, [pc, #224]	@ (800ba70 <getSoundData+0x198>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	0023      	movs	r3, r4
 800b994:	f000 fde8 	bl	800c568 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b998:	2300      	movs	r3, #0
 800b99a:	613b      	str	r3, [r7, #16]
 800b99c:	e019      	b.n	800b9d2 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	18d3      	adds	r3, r2, r3
 800b9a4:	1c98      	adds	r0, r3, #2
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	3308      	adds	r3, #8
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800b9ae:	4b33      	ldr	r3, [pc, #204]	@ (800ba7c <getSoundData+0x1a4>)
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	0092      	lsls	r2, r2, #2
 800b9b4:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800b9b6:	4b32      	ldr	r3, [pc, #200]	@ (800ba80 <getSoundData+0x1a8>)
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	0092      	lsls	r2, r2, #2
 800b9bc:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b9be:	4b2c      	ldr	r3, [pc, #176]	@ (800ba70 <getSoundData+0x198>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	0013      	movs	r3, r2
 800b9c6:	0022      	movs	r2, r4
 800b9c8:	f000 fdce 	bl	800c568 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	2b05      	cmp	r3, #5
 800b9d6:	d9e2      	bls.n	800b99e <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800b9d8:	1cbb      	adds	r3, r7, #2
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d028      	beq.n	800ba32 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800b9e0:	240e      	movs	r4, #14
 800b9e2:	193b      	adds	r3, r7, r4
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800b9e8:	250d      	movs	r5, #13
 800b9ea:	197b      	adds	r3, r7, r5
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800b9f0:	4b24      	ldr	r3, [pc, #144]	@ (800ba84 <getSoundData+0x1ac>)
 800b9f2:	6818      	ldr	r0, [r3, #0]
 800b9f4:	4924      	ldr	r1, [pc, #144]	@ (800ba88 <getSoundData+0x1b0>)
 800b9f6:	197b      	adds	r3, r7, r5
 800b9f8:	193a      	adds	r2, r7, r4
 800b9fa:	f000 fe59 	bl	800c6b0 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800b9fe:	193b      	adds	r3, r7, r4
 800ba00:	881a      	ldrh	r2, [r3, #0]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	21ff      	movs	r1, #255	@ 0xff
 800ba06:	4011      	ands	r1, r2
 800ba08:	000c      	movs	r4, r1
 800ba0a:	7b99      	ldrb	r1, [r3, #14]
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	4001      	ands	r1, r0
 800ba10:	1c08      	adds	r0, r1, #0
 800ba12:	1c21      	adds	r1, r4, #0
 800ba14:	4301      	orrs	r1, r0
 800ba16:	7399      	strb	r1, [r3, #14]
 800ba18:	0a12      	lsrs	r2, r2, #8
 800ba1a:	b290      	uxth	r0, r2
 800ba1c:	7bda      	ldrb	r2, [r3, #15]
 800ba1e:	2100      	movs	r1, #0
 800ba20:	400a      	ands	r2, r1
 800ba22:	1c11      	adds	r1, r2, #0
 800ba24:	1c02      	adds	r2, r0, #0
 800ba26:	430a      	orrs	r2, r1
 800ba28:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800ba2a:	197b      	adds	r3, r7, r5
 800ba2c:	781a      	ldrb	r2, [r3, #0]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800ba32:	f000 f86f 	bl	800bb14 <micSettlingComplete>
 800ba36:	0003      	movs	r3, r0
 800ba38:	001a      	movs	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800ba3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba68 <getSoundData+0x190>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800ba48:	4b08      	ldr	r3, [pc, #32]	@ (800ba6c <getSoundData+0x194>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	b25b      	sxtb	r3, r3
 800ba4e:	0018      	movs	r0, r3
 800ba50:	f7ff ff06 	bl	800b860 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800ba54:	2301      	movs	r3, #1
}
 800ba56:	0018      	movs	r0, r3
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	b006      	add	sp, #24
 800ba5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba5e:	46c0      	nop			@ (mov r8, r8)
 800ba60:	200012dd 	.word	0x200012dd
 800ba64:	200012e0 	.word	0x200012e0
 800ba68:	200012df 	.word	0x200012df
 800ba6c:	20001d30 	.word	0x20001d30
 800ba70:	20001d6c 	.word	0x20001d6c
 800ba74:	20001d34 	.word	0x20001d34
 800ba78:	20001d38 	.word	0x20001d38
 800ba7c:	20001d3c 	.word	0x20001d3c
 800ba80:	20001d54 	.word	0x20001d54
 800ba84:	200012e8 	.word	0x200012e8
 800ba88:	3b5c7333 	.word	0x3b5c7333

0800ba8c <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	001a      	movs	r2, r3
 800ba9a:	1cfb      	adds	r3, r7, #3
 800ba9c:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800ba9e:	4b09      	ldr	r3, [pc, #36]	@ (800bac4 <soundInit+0x38>)
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800baa4:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <soundInit+0x3c>)
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800baaa:	4b08      	ldr	r3, [pc, #32]	@ (800bacc <soundInit+0x40>)
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bab0:	4b07      	ldr	r3, [pc, #28]	@ (800bad0 <soundInit+0x44>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	569a      	ldrsb	r2, [r3, r2]
 800bab6:	4b06      	ldr	r3, [pc, #24]	@ (800bad0 <soundInit+0x44>)
 800bab8:	701a      	strb	r2, [r3, #0]

    return true;
 800baba:	2301      	movs	r3, #1
}
 800babc:	0018      	movs	r0, r3
 800babe:	46bd      	mov	sp, r7
 800bac0:	b004      	add	sp, #16
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20001d28 	.word	0x20001d28
 800bac8:	20001d24 	.word	0x20001d24
 800bacc:	20001d2c 	.word	0x20001d2c
 800bad0:	20001d30 	.word	0x20001d30

0800bad4 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800bad8:	4b02      	ldr	r3, [pc, #8]	@ (800bae4 <clearMaximumAmplitude+0x10>)
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
}
 800bade:	46c0      	nop			@ (mov r8, r8)
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	200012e8 	.word	0x200012e8

0800bae8 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800baec:	4b08      	ldr	r3, [pc, #32]	@ (800bb10 <startMicSettlingPeriod+0x28>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2200      	movs	r2, #0
 800baf4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800baf6:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <startMicSettlingPeriod+0x28>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	0018      	movs	r0, r3
 800bafc:	f009 ff78 	bl	80159f0 <HAL_TIM_Base_Start>
 800bb00:	1e03      	subs	r3, r0, #0
 800bb02:	d001      	beq.n	800bb08 <startMicSettlingPeriod+0x20>
    {
        return false;
 800bb04:	2300      	movs	r3, #0
 800bb06:	e000      	b.n	800bb0a <startMicSettlingPeriod+0x22>
    }
    return true;
 800bb08:	2301      	movs	r3, #1
}
 800bb0a:	0018      	movs	r0, r3
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20001d24 	.word	0x20001d24

0800bb14 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800bb1a:	4b0e      	ldr	r3, [pc, #56]	@ (800bb54 <micSettlingComplete+0x40>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2201      	movs	r2, #1
 800bb24:	401a      	ands	r2, r3
 800bb26:	1dfb      	adds	r3, r7, #7
 800bb28:	3a01      	subs	r2, #1
 800bb2a:	4251      	negs	r1, r2
 800bb2c:	414a      	adcs	r2, r1
 800bb2e:	701a      	strb	r2, [r3, #0]
    if (complete)
 800bb30:	1dfb      	adds	r3, r7, #7
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d007      	beq.n	800bb48 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800bb38:	4b06      	ldr	r3, [pc, #24]	@ (800bb54 <micSettlingComplete+0x40>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	0018      	movs	r0, r3
 800bb3e:	f009 ffa1 	bl	8015a84 <HAL_TIM_Base_Stop>
      DataReady = true;
 800bb42:	4b05      	ldr	r3, [pc, #20]	@ (800bb58 <micSettlingComplete+0x44>)
 800bb44:	2201      	movs	r2, #1
 800bb46:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800bb48:	1dfb      	adds	r3, r7, #7
 800bb4a:	781b      	ldrb	r3, [r3, #0]
}
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	b002      	add	sp, #8
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20001d24 	.word	0x20001d24
 800bb58:	200012dc 	.word	0x200012dc

0800bb5c <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	0002      	movs	r2, r0
 800bb64:	1dfb      	adds	r3, r7, #7
 800bb66:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800bb68:	4b29      	ldr	r3, [pc, #164]	@ (800bc10 <enableMicrophone+0xb4>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	1dfa      	adds	r2, r7, #7
 800bb70:	7812      	ldrb	r2, [r2, #0]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d101      	bne.n	800bb7a <enableMicrophone+0x1e>
    {
        return true;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e045      	b.n	800bc06 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bb7a:	1dfb      	adds	r3, r7, #7
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d025      	beq.n	800bbce <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bb82:	f7ff ffb1 	bl	800bae8 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800bb86:	4b23      	ldr	r3, [pc, #140]	@ (800bc14 <enableMicrophone+0xb8>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2280      	movs	r2, #128	@ 0x80
 800bb8c:	0092      	lsls	r2, r2, #2
 800bb8e:	4922      	ldr	r1, [pc, #136]	@ (800bc18 <enableMicrophone+0xbc>)
 800bb90:	0018      	movs	r0, r3
 800bb92:	f006 f9d5 	bl	8011f40 <HAL_I2S_Receive_DMA>
 800bb96:	1e03      	subs	r3, r0, #0
 800bb98:	d001      	beq.n	800bb9e <enableMicrophone+0x42>
        {
            return false;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e033      	b.n	800bc06 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bb9e:	f7ff ff99 	bl	800bad4 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bba2:	4b1e      	ldr	r3, [pc, #120]	@ (800bc1c <enableMicrophone+0xc0>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bba8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc20 <enableMicrophone+0xc4>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	b25b      	sxtb	r3, r3
 800bbae:	0018      	movs	r0, r3
 800bbb0:	f7ff fe56 	bl	800b860 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800bbb4:	4b1b      	ldr	r3, [pc, #108]	@ (800bc24 <enableMicrophone+0xc8>)
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800bbba:	4b15      	ldr	r3, [pc, #84]	@ (800bc10 <enableMicrophone+0xb4>)
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bbc0:	4b19      	ldr	r3, [pc, #100]	@ (800bc28 <enableMicrophone+0xcc>)
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bbc6:	4b19      	ldr	r3, [pc, #100]	@ (800bc2c <enableMicrophone+0xd0>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	701a      	strb	r2, [r3, #0]
 800bbcc:	e01a      	b.n	800bc04 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bbce:	4b14      	ldr	r3, [pc, #80]	@ (800bc20 <enableMicrophone+0xc4>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	f7ff fe5d 	bl	800b894 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800bbda:	4b12      	ldr	r3, [pc, #72]	@ (800bc24 <enableMicrophone+0xc8>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bbe0:	4b11      	ldr	r3, [pc, #68]	@ (800bc28 <enableMicrophone+0xcc>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bbe6:	4b11      	ldr	r3, [pc, #68]	@ (800bc2c <enableMicrophone+0xd0>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800bbec:	4b09      	ldr	r3, [pc, #36]	@ (800bc14 <enableMicrophone+0xb8>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	0018      	movs	r0, r3
 800bbf2:	f006 fa67 	bl	80120c4 <HAL_I2S_DMAStop>
 800bbf6:	1e03      	subs	r3, r0, #0
 800bbf8:	d001      	beq.n	800bbfe <enableMicrophone+0xa2>
        {
            return false;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e003      	b.n	800bc06 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800bbfe:	4b04      	ldr	r3, [pc, #16]	@ (800bc10 <enableMicrophone+0xb4>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800bc04:	2301      	movs	r3, #1
}
 800bc06:	0018      	movs	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	b002      	add	sp, #8
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	46c0      	nop			@ (mov r8, r8)
 800bc10:	200012dd 	.word	0x200012dd
 800bc14:	20001d28 	.word	0x20001d28
 800bc18:	20001324 	.word	0x20001324
 800bc1c:	200012e4 	.word	0x200012e4
 800bc20:	20001d30 	.word	0x20001d30
 800bc24:	200012df 	.word	0x200012df
 800bc28:	200012de 	.word	0x200012de
 800bc2c:	200012e0 	.word	0x200012e0

0800bc30 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800bc34:	4b0c      	ldr	r3, [pc, #48]	@ (800bc68 <startSPLcalculation+0x38>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	4053      	eors	r3, r2
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <startSPLcalculation+0x18>
    {
        return false;
 800bc44:	2300      	movs	r3, #0
 800bc46:	e00c      	b.n	800bc62 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800bc48:	4b08      	ldr	r3, [pc, #32]	@ (800bc6c <startSPLcalculation+0x3c>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <startSPLcalculation+0x26>
    {
        return true;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e005      	b.n	800bc62 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800bc56:	f000 fb63 	bl	800c320 <resetSPLstate>
    SPLcalcEnabled = true;
 800bc5a:	4b04      	ldr	r3, [pc, #16]	@ (800bc6c <startSPLcalculation+0x3c>)
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	701a      	strb	r2, [r3, #0]
    return true;
 800bc60:	2301      	movs	r3, #1
}
 800bc62:	0018      	movs	r0, r3
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	200012dd 	.word	0x200012dd
 800bc6c:	200012de 	.word	0x200012de

0800bc70 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bc78:	4b05      	ldr	r3, [pc, #20]	@ (800bc90 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d102      	bne.n	800bc88 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800bc82:	2000      	movs	r0, #0
 800bc84:	f000 f81a 	bl	800bcbc <processHalfDMAbuffer>
  }
}
 800bc88:	46c0      	nop			@ (mov r8, r8)
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b002      	add	sp, #8
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20001d28 	.word	0x20001d28

0800bc94 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bc9c:	4b06      	ldr	r3, [pc, #24]	@ (800bcb8 <HAL_I2S_RxCpltCallback+0x24>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d104      	bne.n	800bcb0 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800bca6:	2380      	movs	r3, #128	@ 0x80
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	0018      	movs	r0, r3
 800bcac:	f000 f806 	bl	800bcbc <processHalfDMAbuffer>
  }
}
 800bcb0:	46c0      	nop			@ (mov r8, r8)
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	b002      	add	sp, #8
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20001d28 	.word	0x20001d28

0800bcbc <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	005a      	lsls	r2, r3, #1
 800bcc8:	4b15      	ldr	r3, [pc, #84]	@ (800bd20 <processHalfDMAbuffer+0x64>)
 800bcca:	18d3      	adds	r3, r2, r3
 800bccc:	4a15      	ldr	r2, [pc, #84]	@ (800bd24 <processHalfDMAbuffer+0x68>)
 800bcce:	2180      	movs	r1, #128	@ 0x80
 800bcd0:	0089      	lsls	r1, r1, #2
 800bcd2:	0018      	movs	r0, r3
 800bcd4:	f000 fd35 	bl	800c742 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800bcd8:	4b13      	ldr	r3, [pc, #76]	@ (800bd28 <processHalfDMAbuffer+0x6c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	425a      	negs	r2, r3
 800bcde:	4153      	adcs	r3, r2
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	4b11      	ldr	r3, [pc, #68]	@ (800bd28 <processHalfDMAbuffer+0x6c>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2109      	movs	r1, #9
 800bce8:	4299      	cmp	r1, r3
 800bcea:	419b      	sbcs	r3, r3
 800bcec:	425b      	negs	r3, r3
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	480c      	ldr	r0, [pc, #48]	@ (800bd24 <processHalfDMAbuffer+0x68>)
 800bcf2:	2180      	movs	r1, #128	@ 0x80
 800bcf4:	f000 fb46 	bl	800c384 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800bcf8:	4b0b      	ldr	r3, [pc, #44]	@ (800bd28 <processHalfDMAbuffer+0x6c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b09      	cmp	r3, #9
 800bcfe:	d804      	bhi.n	800bd0a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800bd00:	4b09      	ldr	r3, [pc, #36]	@ (800bd28 <processHalfDMAbuffer+0x6c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	1c5a      	adds	r2, r3, #1
 800bd06:	4b08      	ldr	r3, [pc, #32]	@ (800bd28 <processHalfDMAbuffer+0x6c>)
 800bd08:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800bd0a:	4b08      	ldr	r3, [pc, #32]	@ (800bd2c <processHalfDMAbuffer+0x70>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800bd14:	f000 f826 	bl	800bd64 <calculateSPLQ31>
    }
}
 800bd18:	46c0      	nop			@ (mov r8, r8)
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	b002      	add	sp, #8
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20001324 	.word	0x20001324
 800bd24:	20001b24 	.word	0x20001b24
 800bd28:	200012e4 	.word	0x200012e4
 800bd2c:	200012de 	.word	0x200012de

0800bd30 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bd38:	4b07      	ldr	r3, [pc, #28]	@ (800bd58 <HAL_I2S_ErrorCallback+0x28>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d106      	bne.n	800bd50 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800bd42:	4a06      	ldr	r2, [pc, #24]	@ (800bd5c <HAL_I2S_ErrorCallback+0x2c>)
 800bd44:	239f      	movs	r3, #159	@ 0x9f
 800bd46:	0059      	lsls	r1, r3, #1
 800bd48:	4b05      	ldr	r3, [pc, #20]	@ (800bd60 <HAL_I2S_ErrorCallback+0x30>)
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f001 fdf8 	bl	800d940 <errorHandler>
  }
}
 800bd50:	46c0      	nop			@ (mov r8, r8)
 800bd52:	46bd      	mov	sp, r7
 800bd54:	b002      	add	sp, #8
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20001d28 	.word	0x20001d28
 800bd5c:	080239ac 	.word	0x080239ac
 800bd60:	08024060 	.word	0x08024060

0800bd64 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800bd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd66:	b0b3      	sub	sp, #204	@ 0xcc
 800bd68:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800bd6a:	4ae2      	ldr	r2, [pc, #904]	@ (800c0f4 <calculateSPLQ31+0x390>)
 800bd6c:	2338      	movs	r3, #56	@ 0x38
 800bd6e:	2030      	movs	r0, #48	@ 0x30
 800bd70:	181b      	adds	r3, r3, r0
 800bd72:	19d9      	adds	r1, r3, r7
 800bd74:	2334      	movs	r3, #52	@ 0x34
 800bd76:	181b      	adds	r3, r3, r0
 800bd78:	19d8      	adds	r0, r3, r7
 800bd7a:	2380      	movs	r3, #128	@ 0x80
 800bd7c:	f000 fc36 	bl	800c5ec <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800bd80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	da00      	bge.n	800bd88 <calculateSPLQ31+0x24>
 800bd86:	3301      	adds	r3, #1
 800bd88:	105b      	asrs	r3, r3, #1
 800bd8a:	001a      	movs	r2, r3
 800bd8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	da00      	bge.n	800bd94 <calculateSPLQ31+0x30>
 800bd92:	3301      	adds	r3, #1
 800bd94:	105b      	asrs	r3, r3, #1
 800bd96:	18d3      	adds	r3, r2, r3
 800bd98:	2188      	movs	r1, #136	@ 0x88
 800bd9a:	187a      	adds	r2, r7, r1
 800bd9c:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800bd9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bda0:	187b      	adds	r3, r7, r1
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	3304      	adds	r3, #4
 800bda8:	2284      	movs	r2, #132	@ 0x84
 800bdaa:	18b9      	adds	r1, r7, r2
 800bdac:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800bdae:	18bb      	adds	r3, r7, r2
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4ad1      	ldr	r2, [pc, #836]	@ (800c0f8 <calculateSPLQ31+0x394>)
 800bdb4:	0019      	movs	r1, r3
 800bdb6:	0010      	movs	r0, r2
 800bdb8:	f000 fc58 	bl	800c66c <getPo2factor>
 800bdbc:	0003      	movs	r3, r0
 800bdbe:	2280      	movs	r2, #128	@ 0x80
 800bdc0:	18ba      	adds	r2, r7, r2
 800bdc2:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	2284      	movs	r2, #132	@ 0x84
 800bdc8:	2130      	movs	r1, #48	@ 0x30
 800bdca:	1852      	adds	r2, r2, r1
 800bdcc:	19d2      	adds	r2, r2, r7
 800bdce:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	2280      	movs	r2, #128	@ 0x80
 800bdd4:	1852      	adds	r2, r2, r1
 800bdd6:	19d2      	adds	r2, r2, r7
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	e032      	b.n	800be42 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800bddc:	4ac5      	ldr	r2, [pc, #788]	@ (800c0f4 <calculateSPLQ31+0x390>)
 800bdde:	2680      	movs	r6, #128	@ 0x80
 800bde0:	2330      	movs	r3, #48	@ 0x30
 800bde2:	18f1      	adds	r1, r6, r3
 800bde4:	19cb      	adds	r3, r1, r7
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	589a      	ldr	r2, [r3, r2]
 800bdec:	2188      	movs	r1, #136	@ 0x88
 800bdee:	1879      	adds	r1, r7, r1
 800bdf0:	680b      	ldr	r3, [r1, #0]
 800bdf2:	1ad2      	subs	r2, r2, r3
 800bdf4:	2180      	movs	r1, #128	@ 0x80
 800bdf6:	1879      	adds	r1, r7, r1
 800bdf8:	680b      	ldr	r3, [r1, #0]
 800bdfa:	409a      	lsls	r2, r3
 800bdfc:	0011      	movs	r1, r2
 800bdfe:	4abf      	ldr	r2, [pc, #764]	@ (800c0fc <calculateSPLQ31+0x398>)
 800be00:	2084      	movs	r0, #132	@ 0x84
 800be02:	2330      	movs	r3, #48	@ 0x30
 800be04:	18c3      	adds	r3, r0, r3
 800be06:	19db      	adds	r3, r3, r7
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800be0e:	2230      	movs	r2, #48	@ 0x30
 800be10:	1883      	adds	r3, r0, r2
 800be12:	19db      	adds	r3, r3, r7
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	3301      	adds	r3, #1
 800be18:	49b8      	ldr	r1, [pc, #736]	@ (800c0fc <calculateSPLQ31+0x398>)
 800be1a:	009a      	lsls	r2, r3, #2
 800be1c:	2300      	movs	r3, #0
 800be1e:	5053      	str	r3, [r2, r1]
        count += 2;
 800be20:	2230      	movs	r2, #48	@ 0x30
 800be22:	1883      	adds	r3, r0, r2
 800be24:	19db      	adds	r3, r3, r7
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3302      	adds	r3, #2
 800be2a:	0011      	movs	r1, r2
 800be2c:	1882      	adds	r2, r0, r2
 800be2e:	19d2      	adds	r2, r2, r7
 800be30:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800be32:	000a      	movs	r2, r1
 800be34:	18b3      	adds	r3, r6, r2
 800be36:	19db      	adds	r3, r3, r7
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3301      	adds	r3, #1
 800be3c:	18b2      	adds	r2, r6, r2
 800be3e:	19d2      	adds	r2, r2, r7
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	2380      	movs	r3, #128	@ 0x80
 800be44:	2630      	movs	r6, #48	@ 0x30
 800be46:	199b      	adds	r3, r3, r6
 800be48:	19db      	adds	r3, r3, r7
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b7f      	cmp	r3, #127	@ 0x7f
 800be4e:	d9c5      	bls.n	800bddc <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800be50:	4bab      	ldr	r3, [pc, #684]	@ (800c100 <calculateSPLQ31+0x39c>)
 800be52:	6818      	ldr	r0, [r3, #0]
 800be54:	49a9      	ldr	r1, [pc, #676]	@ (800c0fc <calculateSPLQ31+0x398>)
 800be56:	2301      	movs	r3, #1
 800be58:	2200      	movs	r2, #0
 800be5a:	f010 fe8f 	bl	801cb7c <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800be5e:	4aa9      	ldr	r2, [pc, #676]	@ (800c104 <calculateSPLQ31+0x3a0>)
 800be60:	2338      	movs	r3, #56	@ 0x38
 800be62:	199b      	adds	r3, r3, r6
 800be64:	19d9      	adds	r1, r3, r7
 800be66:	2334      	movs	r3, #52	@ 0x34
 800be68:	199b      	adds	r3, r3, r6
 800be6a:	19d8      	adds	r0, r3, r7
 800be6c:	237e      	movs	r3, #126	@ 0x7e
 800be6e:	f000 fbbd 	bl	800c5ec <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800be72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800be74:	2380      	movs	r3, #128	@ 0x80
 800be76:	061b      	lsls	r3, r3, #24
 800be78:	429a      	cmp	r2, r3
 800be7a:	d101      	bne.n	800be80 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800be7c:	4b9e      	ldr	r3, [pc, #632]	@ (800c0f8 <calculateSPLQ31+0x394>)
 800be7e:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800be80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800be82:	2380      	movs	r3, #128	@ 0x80
 800be84:	061b      	lsls	r3, r3, #24
 800be86:	429a      	cmp	r2, r3
 800be88:	d101      	bne.n	800be8e <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800be8a:	4b9b      	ldr	r3, [pc, #620]	@ (800c0f8 <calculateSPLQ31+0x394>)
 800be8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800be8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be90:	17da      	asrs	r2, r3, #31
 800be92:	189b      	adds	r3, r3, r2
 800be94:	4053      	eors	r3, r2
 800be96:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800be98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be9a:	17da      	asrs	r2, r3, #31
 800be9c:	189b      	adds	r3, r3, r2
 800be9e:	4053      	eors	r3, r2
 800bea0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800bea2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bea6:	429a      	cmp	r2, r3
 800bea8:	dd01      	ble.n	800beae <calculateSPLQ31+0x14a>
    {
        max = min;
 800beaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800beac:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800beae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800beb0:	3304      	adds	r3, #4
 800beb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800beb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800beb6:	4a90      	ldr	r2, [pc, #576]	@ (800c0f8 <calculateSPLQ31+0x394>)
 800beb8:	0019      	movs	r1, r3
 800beba:	0010      	movs	r0, r2
 800bebc:	f000 fbd6 	bl	800c66c <getPo2factor>
 800bec0:	0003      	movs	r3, r0
 800bec2:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800bec4:	2302      	movs	r3, #2
 800bec6:	22ac      	movs	r2, #172	@ 0xac
 800bec8:	18ba      	adds	r2, r7, r2
 800beca:	6013      	str	r3, [r2, #0]
 800becc:	e012      	b.n	800bef4 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800bece:	4a8b      	ldr	r2, [pc, #556]	@ (800c0fc <calculateSPLQ31+0x398>)
 800bed0:	20ac      	movs	r0, #172	@ 0xac
 800bed2:	183b      	adds	r3, r7, r0
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	589a      	ldr	r2, [r3, r2]
 800beda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bedc:	409a      	lsls	r2, r3
 800bede:	0011      	movs	r1, r2
 800bee0:	4a86      	ldr	r2, [pc, #536]	@ (800c0fc <calculateSPLQ31+0x398>)
 800bee2:	183b      	adds	r3, r7, r0
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800beea:	183b      	adds	r3, r7, r0
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3301      	adds	r3, #1
 800bef0:	183a      	adds	r2, r7, r0
 800bef2:	6013      	str	r3, [r2, #0]
 800bef4:	23ac      	movs	r3, #172	@ 0xac
 800bef6:	18fb      	adds	r3, r7, r3
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2b7f      	cmp	r3, #127	@ 0x7f
 800befc:	d9e7      	bls.n	800bece <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800befe:	4b7d      	ldr	r3, [pc, #500]	@ (800c0f4 <calculateSPLQ31+0x390>)
 800bf00:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800bf02:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800bf04:	4b7d      	ldr	r3, [pc, #500]	@ (800c0fc <calculateSPLQ31+0x398>)
 800bf06:	2240      	movs	r2, #64	@ 0x40
 800bf08:	0018      	movs	r0, r3
 800bf0a:	f011 fbe1 	bl	801d6d0 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800bf0e:	2330      	movs	r3, #48	@ 0x30
 800bf10:	18fb      	adds	r3, r7, r3
 800bf12:	0018      	movs	r0, r3
 800bf14:	2330      	movs	r3, #48	@ 0x30
 800bf16:	001a      	movs	r2, r3
 800bf18:	2100      	movs	r1, #0
 800bf1a:	f013 f9fd 	bl	801f318 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2300      	movs	r3, #0
 800bf22:	21a0      	movs	r1, #160	@ 0xa0
 800bf24:	1879      	adds	r1, r7, r1
 800bf26:	600a      	str	r2, [r1, #0]
 800bf28:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	229c      	movs	r2, #156	@ 0x9c
 800bf2e:	18ba      	adds	r2, r7, r2
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	e05b      	b.n	800bfec <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800bf34:	269c      	movs	r6, #156	@ 0x9c
 800bf36:	19bb      	adds	r3, r7, r6
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	009a      	lsls	r2, r3, #2
 800bf3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf3e:	189b      	adds	r3, r3, r2
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	613b      	str	r3, [r7, #16]
 800bf44:	17db      	asrs	r3, r3, #31
 800bf46:	617b      	str	r3, [r7, #20]
 800bf48:	4b6f      	ldr	r3, [pc, #444]	@ (800c108 <calculateSPLQ31+0x3a4>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	19bb      	adds	r3, r7, r6
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	18d3      	adds	r3, r2, r3
 800bf54:	881b      	ldrh	r3, [r3, #0]
 800bf56:	60bb      	str	r3, [r7, #8]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6938      	ldr	r0, [r7, #16]
 800bf62:	6979      	ldr	r1, [r7, #20]
 800bf64:	f7f4 fb2c 	bl	80005c0 <__aeabi_lmul>
 800bf68:	0002      	movs	r2, r0
 800bf6a:	000b      	movs	r3, r1
 800bf6c:	0010      	movs	r0, r2
 800bf6e:	0019      	movs	r1, r3
 800bf70:	23a0      	movs	r3, #160	@ 0xa0
 800bf72:	18fa      	adds	r2, r7, r3
 800bf74:	6853      	ldr	r3, [r2, #4]
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	1812      	adds	r2, r2, r0
 800bf7a:	414b      	adcs	r3, r1
 800bf7c:	21a0      	movs	r1, #160	@ 0xa0
 800bf7e:	1879      	adds	r1, r7, r1
 800bf80:	600a      	str	r2, [r1, #0]
 800bf82:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800bf84:	4b61      	ldr	r3, [pc, #388]	@ (800c10c <calculateSPLQ31+0x3a8>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	19bb      	adds	r3, r7, r6
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	18d3      	adds	r3, r2, r3
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	2b06      	cmp	r3, #6
 800bf92:	d025      	beq.n	800bfe0 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800bf94:	4b5d      	ldr	r3, [pc, #372]	@ (800c10c <calculateSPLQ31+0x3a8>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	19bb      	adds	r3, r7, r6
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	18d3      	adds	r3, r2, r3
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2230      	movs	r2, #48	@ 0x30
 800bfa2:	18ba      	adds	r2, r7, r2
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	18d3      	adds	r3, r2, r3
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	6859      	ldr	r1, [r3, #4]
 800bfac:	19bb      	adds	r3, r7, r6
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	009a      	lsls	r2, r3, #2
 800bfb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfb4:	189b      	adds	r3, r3, r2
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	603b      	str	r3, [r7, #0]
 800bfba:	17db      	asrs	r3, r3, #31
 800bfbc:	607b      	str	r3, [r7, #4]
 800bfbe:	4b53      	ldr	r3, [pc, #332]	@ (800c10c <calculateSPLQ31+0x3a8>)
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	19be      	adds	r6, r7, r6
 800bfc4:	6833      	ldr	r3, [r6, #0]
 800bfc6:	18d3      	adds	r3, r2, r3
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	001e      	movs	r6, r3
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	1880      	adds	r0, r0, r2
 800bfd2:	4159      	adcs	r1, r3
 800bfd4:	2330      	movs	r3, #48	@ 0x30
 800bfd6:	18fa      	adds	r2, r7, r3
 800bfd8:	00f3      	lsls	r3, r6, #3
 800bfda:	18d3      	adds	r3, r2, r3
 800bfdc:	6018      	str	r0, [r3, #0]
 800bfde:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800bfe0:	229c      	movs	r2, #156	@ 0x9c
 800bfe2:	18bb      	adds	r3, r7, r2
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	18ba      	adds	r2, r7, r2
 800bfea:	6013      	str	r3, [r2, #0]
 800bfec:	239c      	movs	r3, #156	@ 0x9c
 800bfee:	18fb      	adds	r3, r7, r3
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b3f      	cmp	r3, #63	@ 0x3f
 800bff4:	d99e      	bls.n	800bf34 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800bff6:	2380      	movs	r3, #128	@ 0x80
 800bff8:	18fb      	adds	r3, r7, r3
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	005b      	lsls	r3, r3, #1
 800bffe:	001a      	movs	r2, r3
 800c000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	18d3      	adds	r3, r2, r3
 800c006:	3b22      	subs	r3, #34	@ 0x22
 800c008:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c00a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c00c:	17da      	asrs	r2, r3, #31
 800c00e:	189b      	adds	r3, r3, r2
 800c010:	4053      	eors	r3, r2
 800c012:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c016:	2b00      	cmp	r3, #0
 800c018:	da62      	bge.n	800c0e0 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c01a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c01c:	3b20      	subs	r3, #32
 800c01e:	2b00      	cmp	r3, #0
 800c020:	db05      	blt.n	800c02e <calculateSPLQ31+0x2ca>
 800c022:	22a0      	movs	r2, #160	@ 0xa0
 800c024:	18ba      	adds	r2, r7, r2
 800c026:	6812      	ldr	r2, [r2, #0]
 800c028:	409a      	lsls	r2, r3
 800c02a:	627a      	str	r2, [r7, #36]	@ 0x24
 800c02c:	e010      	b.n	800c050 <calculateSPLQ31+0x2ec>
 800c02e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c030:	2220      	movs	r2, #32
 800c032:	1ad3      	subs	r3, r2, r3
 800c034:	22a0      	movs	r2, #160	@ 0xa0
 800c036:	18ba      	adds	r2, r7, r2
 800c038:	6812      	ldr	r2, [r2, #0]
 800c03a:	40da      	lsrs	r2, r3
 800c03c:	0013      	movs	r3, r2
 800c03e:	22a4      	movs	r2, #164	@ 0xa4
 800c040:	18ba      	adds	r2, r7, r2
 800c042:	6811      	ldr	r1, [r2, #0]
 800c044:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c046:	4091      	lsls	r1, r2
 800c048:	6279      	str	r1, [r7, #36]	@ 0x24
 800c04a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c04c:	431a      	orrs	r2, r3
 800c04e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c050:	21a0      	movs	r1, #160	@ 0xa0
 800c052:	187b      	adds	r3, r7, r1
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c058:	409a      	lsls	r2, r3
 800c05a:	623a      	str	r2, [r7, #32]
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c060:	187a      	adds	r2, r7, r1
 800c062:	6013      	str	r3, [r2, #0]
 800c064:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c066:	2300      	movs	r3, #0
 800c068:	2298      	movs	r2, #152	@ 0x98
 800c06a:	18ba      	adds	r2, r7, r2
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	e031      	b.n	800c0d4 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c070:	2330      	movs	r3, #48	@ 0x30
 800c072:	18fa      	adds	r2, r7, r3
 800c074:	2398      	movs	r3, #152	@ 0x98
 800c076:	18fb      	adds	r3, r7, r3
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	18d3      	adds	r3, r2, r3
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c084:	3920      	subs	r1, #32
 800c086:	2900      	cmp	r1, #0
 800c088:	db03      	blt.n	800c092 <calculateSPLQ31+0x32e>
 800c08a:	0010      	movs	r0, r2
 800c08c:	4088      	lsls	r0, r1
 800c08e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c090:	e00c      	b.n	800c0ac <calculateSPLQ31+0x348>
 800c092:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c094:	2020      	movs	r0, #32
 800c096:	1a41      	subs	r1, r0, r1
 800c098:	0010      	movs	r0, r2
 800c09a:	40c8      	lsrs	r0, r1
 800c09c:	0001      	movs	r1, r0
 800c09e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c0a0:	001c      	movs	r4, r3
 800c0a2:	4084      	lsls	r4, r0
 800c0a4:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c0a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c0a8:	4308      	orrs	r0, r1
 800c0aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c0ac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c0ae:	0013      	movs	r3, r2
 800c0b0:	408b      	lsls	r3, r1
 800c0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0b4:	2330      	movs	r3, #48	@ 0x30
 800c0b6:	18fa      	adds	r2, r7, r3
 800c0b8:	2098      	movs	r0, #152	@ 0x98
 800c0ba:	183b      	adds	r3, r7, r0
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	18d3      	adds	r3, r2, r3
 800c0c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0c6:	6019      	str	r1, [r3, #0]
 800c0c8:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c0ca:	183b      	adds	r3, r7, r0
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	183a      	adds	r2, r7, r0
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	2398      	movs	r3, #152	@ 0x98
 800c0d6:	18fb      	adds	r3, r7, r3
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b05      	cmp	r3, #5
 800c0dc:	d9c8      	bls.n	800c070 <calculateSPLQ31+0x30c>
 800c0de:	e06b      	b.n	800c1b8 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c0e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0e2:	3b20      	subs	r3, #32
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	db13      	blt.n	800c110 <calculateSPLQ31+0x3ac>
 800c0e8:	22a4      	movs	r2, #164	@ 0xa4
 800c0ea:	18ba      	adds	r2, r7, r2
 800c0ec:	6812      	ldr	r2, [r2, #0]
 800c0ee:	40da      	lsrs	r2, r3
 800c0f0:	61ba      	str	r2, [r7, #24]
 800c0f2:	e01e      	b.n	800c132 <calculateSPLQ31+0x3ce>
 800c0f4:	20001b24 	.word	0x20001b24
 800c0f8:	7fffffff 	.word	0x7fffffff
 800c0fc:	20001d70 	.word	0x20001d70
 800c100:	200000b0 	.word	0x200000b0
 800c104:	20001d78 	.word	0x20001d78
 800c108:	200000b4 	.word	0x200000b4
 800c10c:	200000c0 	.word	0x200000c0
 800c110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c112:	2220      	movs	r2, #32
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	22a4      	movs	r2, #164	@ 0xa4
 800c118:	18ba      	adds	r2, r7, r2
 800c11a:	6812      	ldr	r2, [r2, #0]
 800c11c:	409a      	lsls	r2, r3
 800c11e:	0013      	movs	r3, r2
 800c120:	22a0      	movs	r2, #160	@ 0xa0
 800c122:	18ba      	adds	r2, r7, r2
 800c124:	6811      	ldr	r1, [r2, #0]
 800c126:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c128:	40d1      	lsrs	r1, r2
 800c12a:	61b9      	str	r1, [r7, #24]
 800c12c:	69ba      	ldr	r2, [r7, #24]
 800c12e:	431a      	orrs	r2, r3
 800c130:	61ba      	str	r2, [r7, #24]
 800c132:	23a4      	movs	r3, #164	@ 0xa4
 800c134:	18fb      	adds	r3, r7, r3
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c13a:	40da      	lsrs	r2, r3
 800c13c:	61fa      	str	r2, [r7, #28]
 800c13e:	69ba      	ldr	r2, [r7, #24]
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	21a0      	movs	r1, #160	@ 0xa0
 800c144:	1879      	adds	r1, r7, r1
 800c146:	600a      	str	r2, [r1, #0]
 800c148:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c14a:	2300      	movs	r3, #0
 800c14c:	2294      	movs	r2, #148	@ 0x94
 800c14e:	18ba      	adds	r2, r7, r2
 800c150:	6013      	str	r3, [r2, #0]
 800c152:	e02c      	b.n	800c1ae <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c154:	2330      	movs	r3, #48	@ 0x30
 800c156:	18fa      	adds	r2, r7, r3
 800c158:	2394      	movs	r3, #148	@ 0x94
 800c15a:	18fb      	adds	r3, r7, r3
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	18d3      	adds	r3, r2, r3
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c168:	3920      	subs	r1, #32
 800c16a:	2900      	cmp	r1, #0
 800c16c:	db03      	blt.n	800c176 <calculateSPLQ31+0x412>
 800c16e:	0018      	movs	r0, r3
 800c170:	40c8      	lsrs	r0, r1
 800c172:	0004      	movs	r4, r0
 800c174:	e00a      	b.n	800c18c <calculateSPLQ31+0x428>
 800c176:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c178:	2020      	movs	r0, #32
 800c17a:	1a41      	subs	r1, r0, r1
 800c17c:	0018      	movs	r0, r3
 800c17e:	4088      	lsls	r0, r1
 800c180:	0001      	movs	r1, r0
 800c182:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c184:	0016      	movs	r6, r2
 800c186:	40c6      	lsrs	r6, r0
 800c188:	0034      	movs	r4, r6
 800c18a:	430c      	orrs	r4, r1
 800c18c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c18e:	40cb      	lsrs	r3, r1
 800c190:	001d      	movs	r5, r3
 800c192:	2330      	movs	r3, #48	@ 0x30
 800c194:	18fa      	adds	r2, r7, r3
 800c196:	2194      	movs	r1, #148	@ 0x94
 800c198:	187b      	adds	r3, r7, r1
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	18d3      	adds	r3, r2, r3
 800c1a0:	601c      	str	r4, [r3, #0]
 800c1a2:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c1a4:	187b      	adds	r3, r7, r1
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	3301      	adds	r3, #1
 800c1aa:	187a      	adds	r2, r7, r1
 800c1ac:	6013      	str	r3, [r2, #0]
 800c1ae:	2394      	movs	r3, #148	@ 0x94
 800c1b0:	18fb      	adds	r3, r7, r3
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b05      	cmp	r3, #5
 800c1b6:	d9cd      	bls.n	800c154 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c1b8:	230f      	movs	r3, #15
 800c1ba:	425d      	negs	r5, r3
 800c1bc:	2305      	movs	r3, #5
 800c1be:	425e      	negs	r6, r3
 800c1c0:	4b4a      	ldr	r3, [pc, #296]	@ (800c2ec <calculateSPLQ31+0x588>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	4b4a      	ldr	r3, [pc, #296]	@ (800c2f0 <calculateSPLQ31+0x58c>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	21a0      	movs	r1, #160	@ 0xa0
 800c1ce:	1879      	adds	r1, r7, r1
 800c1d0:	6808      	ldr	r0, [r1, #0]
 800c1d2:	6849      	ldr	r1, [r1, #4]
 800c1d4:	4c47      	ldr	r4, [pc, #284]	@ (800c2f4 <calculateSPLQ31+0x590>)
 800c1d6:	9403      	str	r4, [sp, #12]
 800c1d8:	4c47      	ldr	r4, [pc, #284]	@ (800c2f8 <calculateSPLQ31+0x594>)
 800c1da:	9402      	str	r4, [sp, #8]
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	9200      	str	r2, [sp, #0]
 800c1e0:	0033      	movs	r3, r6
 800c1e2:	002a      	movs	r2, r5
 800c1e4:	f000 fa86 	bl	800c6f4 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	2290      	movs	r2, #144	@ 0x90
 800c1ec:	18ba      	adds	r2, r7, r2
 800c1ee:	6013      	str	r3, [r2, #0]
 800c1f0:	e026      	b.n	800c240 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c1f2:	2330      	movs	r3, #48	@ 0x30
 800c1f4:	18fa      	adds	r2, r7, r3
 800c1f6:	2490      	movs	r4, #144	@ 0x90
 800c1f8:	193b      	adds	r3, r7, r4
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	18d3      	adds	r3, r2, r3
 800c200:	6818      	ldr	r0, [r3, #0]
 800c202:	6859      	ldr	r1, [r3, #4]
 800c204:	230f      	movs	r3, #15
 800c206:	425d      	negs	r5, r3
 800c208:	2305      	movs	r3, #5
 800c20a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c20c:	193b      	adds	r3, r7, r4
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	009a      	lsls	r2, r3, #2
 800c212:	4b3a      	ldr	r3, [pc, #232]	@ (800c2fc <calculateSPLQ31+0x598>)
 800c214:	18d3      	adds	r3, r2, r3
 800c216:	193a      	adds	r2, r7, r4
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	0094      	lsls	r4, r2, #2
 800c21c:	4a38      	ldr	r2, [pc, #224]	@ (800c300 <calculateSPLQ31+0x59c>)
 800c21e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c220:	9203      	str	r2, [sp, #12]
 800c222:	9302      	str	r3, [sp, #8]
 800c224:	2300      	movs	r3, #0
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	2300      	movs	r3, #0
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	0033      	movs	r3, r6
 800c22e:	002a      	movs	r2, r5
 800c230:	f000 fa60 	bl	800c6f4 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c234:	2490      	movs	r4, #144	@ 0x90
 800c236:	193b      	adds	r3, r7, r4
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3301      	adds	r3, #1
 800c23c:	193a      	adds	r2, r7, r4
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	2390      	movs	r3, #144	@ 0x90
 800c242:	18fb      	adds	r3, r7, r3
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b05      	cmp	r3, #5
 800c248:	d9d3      	bls.n	800c1f2 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c24a:	4b2b      	ldr	r3, [pc, #172]	@ (800c2f8 <calculateSPLQ31+0x594>)
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	4b2d      	ldr	r3, [pc, #180]	@ (800c304 <calculateSPLQ31+0x5a0>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	18d2      	adds	r2, r2, r3
 800c254:	4b2b      	ldr	r3, [pc, #172]	@ (800c304 <calculateSPLQ31+0x5a0>)
 800c256:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c258:	4b26      	ldr	r3, [pc, #152]	@ (800c2f4 <calculateSPLQ31+0x590>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	4b2a      	ldr	r3, [pc, #168]	@ (800c308 <calculateSPLQ31+0x5a4>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	18d2      	adds	r2, r2, r3
 800c262:	4b29      	ldr	r3, [pc, #164]	@ (800c308 <calculateSPLQ31+0x5a4>)
 800c264:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c266:	2300      	movs	r3, #0
 800c268:	228c      	movs	r2, #140	@ 0x8c
 800c26a:	18ba      	adds	r2, r7, r2
 800c26c:	6013      	str	r3, [r2, #0]
 800c26e:	e025      	b.n	800c2bc <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c270:	4b22      	ldr	r3, [pc, #136]	@ (800c2fc <calculateSPLQ31+0x598>)
 800c272:	208c      	movs	r0, #140	@ 0x8c
 800c274:	183a      	adds	r2, r7, r0
 800c276:	6812      	ldr	r2, [r2, #0]
 800c278:	0092      	lsls	r2, r2, #2
 800c27a:	58d2      	ldr	r2, [r2, r3]
 800c27c:	4b23      	ldr	r3, [pc, #140]	@ (800c30c <calculateSPLQ31+0x5a8>)
 800c27e:	1839      	adds	r1, r7, r0
 800c280:	6809      	ldr	r1, [r1, #0]
 800c282:	0089      	lsls	r1, r1, #2
 800c284:	58cb      	ldr	r3, [r1, r3]
 800c286:	18d1      	adds	r1, r2, r3
 800c288:	4b20      	ldr	r3, [pc, #128]	@ (800c30c <calculateSPLQ31+0x5a8>)
 800c28a:	183a      	adds	r2, r7, r0
 800c28c:	6812      	ldr	r2, [r2, #0]
 800c28e:	0092      	lsls	r2, r2, #2
 800c290:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c292:	4b1b      	ldr	r3, [pc, #108]	@ (800c300 <calculateSPLQ31+0x59c>)
 800c294:	183a      	adds	r2, r7, r0
 800c296:	6812      	ldr	r2, [r2, #0]
 800c298:	0092      	lsls	r2, r2, #2
 800c29a:	58d2      	ldr	r2, [r2, r3]
 800c29c:	4b1c      	ldr	r3, [pc, #112]	@ (800c310 <calculateSPLQ31+0x5ac>)
 800c29e:	1839      	adds	r1, r7, r0
 800c2a0:	6809      	ldr	r1, [r1, #0]
 800c2a2:	0089      	lsls	r1, r1, #2
 800c2a4:	58cb      	ldr	r3, [r1, r3]
 800c2a6:	18d1      	adds	r1, r2, r3
 800c2a8:	4b19      	ldr	r3, [pc, #100]	@ (800c310 <calculateSPLQ31+0x5ac>)
 800c2aa:	183a      	adds	r2, r7, r0
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	0092      	lsls	r2, r2, #2
 800c2b0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2b2:	183b      	adds	r3, r7, r0
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	183a      	adds	r2, r7, r0
 800c2ba:	6013      	str	r3, [r2, #0]
 800c2bc:	238c      	movs	r3, #140	@ 0x8c
 800c2be:	18fb      	adds	r3, r7, r3
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b05      	cmp	r3, #5
 800c2c4:	d9d4      	bls.n	800c270 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c2c6:	4b13      	ldr	r3, [pc, #76]	@ (800c314 <calculateSPLQ31+0x5b0>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	1c5a      	adds	r2, r3, #1
 800c2cc:	4b11      	ldr	r3, [pc, #68]	@ (800c314 <calculateSPLQ31+0x5b0>)
 800c2ce:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c2d0:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <calculateSPLQ31+0x5b0>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b0f      	cmp	r3, #15
 800c2d6:	d905      	bls.n	800c2e4 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c318 <calculateSPLQ31+0x5b4>)
 800c2da:	2201      	movs	r2, #1
 800c2dc:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c2de:	4b0f      	ldr	r3, [pc, #60]	@ (800c31c <calculateSPLQ31+0x5b8>)
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	701a      	strb	r2, [r3, #0]
    }
}
 800c2e4:	46c0      	nop			@ (mov r8, r8)
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b02f      	add	sp, #188	@ 0xbc
 800c2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ec:	200000b8 	.word	0x200000b8
 800c2f0:	200000bc 	.word	0x200000bc
 800c2f4:	200012f0 	.word	0x200012f0
 800c2f8:	200012ec 	.word	0x200012ec
 800c2fc:	200012f4 	.word	0x200012f4
 800c300:	2000130c 	.word	0x2000130c
 800c304:	20001d34 	.word	0x20001d34
 800c308:	20001d38 	.word	0x20001d38
 800c30c:	20001d3c 	.word	0x20001d3c
 800c310:	20001d54 	.word	0x20001d54
 800c314:	20001d6c 	.word	0x20001d6c
 800c318:	200012e0 	.word	0x200012e0
 800c31c:	200012de 	.word	0x200012de

0800c320 <resetSPLstate>:

static void resetSPLstate(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c326:	4b11      	ldr	r3, [pc, #68]	@ (800c36c <resetSPLstate+0x4c>)
 800c328:	2200      	movs	r2, #0
 800c32a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c32c:	4b10      	ldr	r3, [pc, #64]	@ (800c370 <resetSPLstate+0x50>)
 800c32e:	2200      	movs	r2, #0
 800c330:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <resetSPLstate+0x54>)
 800c334:	2200      	movs	r2, #0
 800c336:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c338:	2300      	movs	r3, #0
 800c33a:	607b      	str	r3, [r7, #4]
 800c33c:	e00c      	b.n	800c358 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c33e:	4b0e      	ldr	r3, [pc, #56]	@ (800c378 <resetSPLstate+0x58>)
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	0092      	lsls	r2, r2, #2
 800c344:	2100      	movs	r1, #0
 800c346:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c348:	4b0c      	ldr	r3, [pc, #48]	@ (800c37c <resetSPLstate+0x5c>)
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	0092      	lsls	r2, r2, #2
 800c34e:	2100      	movs	r1, #0
 800c350:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3301      	adds	r3, #1
 800c356:	607b      	str	r3, [r7, #4]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b05      	cmp	r3, #5
 800c35c:	d9ef      	bls.n	800c33e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c35e:	4b08      	ldr	r3, [pc, #32]	@ (800c380 <resetSPLstate+0x60>)
 800c360:	2200      	movs	r2, #0
 800c362:	701a      	strb	r2, [r3, #0]
}
 800c364:	46c0      	nop			@ (mov r8, r8)
 800c366:	46bd      	mov	sp, r7
 800c368:	b002      	add	sp, #8
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	20001d34 	.word	0x20001d34
 800c370:	20001d38 	.word	0x20001d38
 800c374:	20001d6c 	.word	0x20001d6c
 800c378:	20001d3c 	.word	0x20001d3c
 800c37c:	20001d54 	.word	0x20001d54
 800c380:	200012e0 	.word	0x200012e0

0800c384 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c384:	b5b0      	push	{r4, r5, r7, lr}
 800c386:	b090      	sub	sp, #64	@ 0x40
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	0019      	movs	r1, r3
 800c390:	1dfb      	adds	r3, r7, #7
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	1dbb      	adds	r3, r7, #6
 800c396:	1c0a      	adds	r2, r1, #0
 800c398:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c39a:	1dfb      	adds	r3, r7, #7
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d005      	beq.n	800c3ae <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c3a2:	4b3b      	ldr	r3, [pc, #236]	@ (800c490 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c3a8:	4b3a      	ldr	r3, [pc, #232]	@ (800c494 <getFilteredMaxAmplitudeQ31+0x110>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c3b6:	2305      	movs	r3, #5
 800c3b8:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3be:	e040      	b.n	800c442 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	18d3      	adds	r3, r2, r3
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3cc:	409a      	lsls	r2, r3
 800c3ce:	0013      	movs	r3, r2
 800c3d0:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c3d2:	4b30      	ldr	r3, [pc, #192]	@ (800c494 <getFilteredMaxAmplitudeQ31+0x110>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	425a      	negs	r2, r3
 800c3d8:	4b2e      	ldr	r3, [pc, #184]	@ (800c494 <getFilteredMaxAmplitudeQ31+0x110>)
 800c3da:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c3dc:	2418      	movs	r4, #24
 800c3de:	193a      	adds	r2, r7, r4
 800c3e0:	492c      	ldr	r1, [pc, #176]	@ (800c494 <getFilteredMaxAmplitudeQ31+0x110>)
 800c3e2:	231c      	movs	r3, #28
 800c3e4:	18f8      	adds	r0, r7, r3
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	f011 f9ca 	bl	801d780 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c3ec:	2514      	movs	r5, #20
 800c3ee:	197a      	adds	r2, r7, r5
 800c3f0:	1939      	adds	r1, r7, r4
 800c3f2:	4829      	ldr	r0, [pc, #164]	@ (800c498 <getFilteredMaxAmplitudeQ31+0x114>)
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	f011 f991 	bl	801d71c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c3fa:	2410      	movs	r4, #16
 800c3fc:	193a      	adds	r2, r7, r4
 800c3fe:	4924      	ldr	r1, [pc, #144]	@ (800c490 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c400:	4826      	ldr	r0, [pc, #152]	@ (800c49c <getFilteredMaxAmplitudeQ31+0x118>)
 800c402:	2301      	movs	r3, #1
 800c404:	f011 f98a 	bl	801d71c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c408:	4a21      	ldr	r2, [pc, #132]	@ (800c490 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c40a:	1939      	adds	r1, r7, r4
 800c40c:	1978      	adds	r0, r7, r5
 800c40e:	2301      	movs	r3, #1
 800c410:	f011 f9b6 	bl	801d780 <arm_add_q31>

        lastData = fx;
 800c414:	69fa      	ldr	r2, [r7, #28]
 800c416:	4b1f      	ldr	r3, [pc, #124]	@ (800c494 <getFilteredMaxAmplitudeQ31+0x110>)
 800c418:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c41a:	4b1d      	ldr	r3, [pc, #116]	@ (800c490 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c420:	429a      	cmp	r2, r3
 800c422:	da03      	bge.n	800c42c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c424:	4b1a      	ldr	r3, [pc, #104]	@ (800c490 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c42a:	e007      	b.n	800c43c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c42c:	4b18      	ldr	r3, [pc, #96]	@ (800c490 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c432:	429a      	cmp	r2, r3
 800c434:	dd02      	ble.n	800c43c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c436:	4b16      	ldr	r3, [pc, #88]	@ (800c490 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c43e:	3301      	adds	r3, #1
 800c440:	637b      	str	r3, [r7, #52]	@ 0x34
 800c442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	429a      	cmp	r2, r3
 800c448:	d3ba      	bcc.n	800c3c0 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44c:	17da      	asrs	r2, r3, #31
 800c44e:	189b      	adds	r3, r3, r2
 800c450:	4053      	eors	r3, r2
 800c452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c456:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d200      	bcs.n	800c462 <getFilteredMaxAmplitudeQ31+0xde>
 800c460:	0013      	movs	r3, r2
 800c462:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c468:	40da      	lsrs	r2, r3
 800c46a:	0013      	movs	r3, r2
 800c46c:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c46e:	1dbb      	adds	r3, r7, #6
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d007      	beq.n	800c486 <getFilteredMaxAmplitudeQ31+0x102>
 800c476:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a0 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	6a3a      	ldr	r2, [r7, #32]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d902      	bls.n	800c486 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c480:	4b07      	ldr	r3, [pc, #28]	@ (800c4a0 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c482:	6a3a      	ldr	r2, [r7, #32]
 800c484:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c486:	6a3b      	ldr	r3, [r7, #32]
}
 800c488:	0018      	movs	r0, r3
 800c48a:	46bd      	mov	sp, r7
 800c48c:	b010      	add	sp, #64	@ 0x40
 800c48e:	bdb0      	pop	{r4, r5, r7, pc}
 800c490:	20002170 	.word	0x20002170
 800c494:	20002174 	.word	0x20002174
 800c498:	08024058 	.word	0x08024058
 800c49c:	0802405c 	.word	0x0802405c
 800c4a0:	200012e8 	.word	0x200012e8

0800c4a4 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c4b0:	4913      	ldr	r1, [pc, #76]	@ (800c500 <floatToIntAndFrac2dp+0x5c>)
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f7f4 fd74 	bl	8000fa0 <__aeabi_fmul>
 800c4b8:	1c03      	adds	r3, r0, #0
 800c4ba:	1c18      	adds	r0, r3, #0
 800c4bc:	f015 fd94 	bl	8021fe8 <roundf>
 800c4c0:	1c03      	adds	r3, r0, #0
 800c4c2:	1c18      	adds	r0, r3, #0
 800c4c4:	f7f4 f8aa 	bl	800061c <__aeabi_f2uiz>
 800c4c8:	0003      	movs	r3, r0
 800c4ca:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2164      	movs	r1, #100	@ 0x64
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f7f3 fe67 	bl	80001a4 <__udivsi3>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	001a      	movs	r2, r3
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	b2da      	uxtb	r2, r3
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	b2db      	uxtb	r3, r3
 800c4e8:	2164      	movs	r1, #100	@ 0x64
 800c4ea:	434b      	muls	r3, r1
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	701a      	strb	r2, [r3, #0]
}
 800c4f6:	46c0      	nop			@ (mov r8, r8)
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	b006      	add	sp, #24
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	46c0      	nop			@ (mov r8, r8)
 800c500:	42c80000 	.word	0x42c80000

0800c504 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c510:	4914      	ldr	r1, [pc, #80]	@ (800c564 <floatToIntAndFrac1dp+0x60>)
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	f7f4 fd44 	bl	8000fa0 <__aeabi_fmul>
 800c518:	1c03      	adds	r3, r0, #0
 800c51a:	1c18      	adds	r0, r3, #0
 800c51c:	f015 fd64 	bl	8021fe8 <roundf>
 800c520:	1c03      	adds	r3, r0, #0
 800c522:	1c18      	adds	r0, r3, #0
 800c524:	f7f4 f87a 	bl	800061c <__aeabi_f2uiz>
 800c528:	0003      	movs	r3, r0
 800c52a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	210a      	movs	r1, #10
 800c530:	0018      	movs	r0, r3
 800c532:	f7f3 fe37 	bl	80001a4 <__udivsi3>
 800c536:	0003      	movs	r3, r0
 800c538:	001a      	movs	r2, r3
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	b2da      	uxtb	r2, r3
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	b2db      	uxtb	r3, r3
 800c548:	1c19      	adds	r1, r3, #0
 800c54a:	0089      	lsls	r1, r1, #2
 800c54c:	18cb      	adds	r3, r1, r3
 800c54e:	18db      	adds	r3, r3, r3
 800c550:	b2db      	uxtb	r3, r3
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	b2da      	uxtb	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	701a      	strb	r2, [r3, #0]
}
 800c55a:	46c0      	nop			@ (mov r8, r8)
 800c55c:	46bd      	mov	sp, r7
 800c55e:	b006      	add	sp, #24
 800c560:	bd80      	pop	{r7, pc}
 800c562:	46c0      	nop			@ (mov r8, r8)
 800c564:	41200000 	.word	0x41200000

0800c568 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c568:	b590      	push	{r4, r7, lr}
 800c56a:	b087      	sub	sp, #28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7f5 f82a 	bl	80015d0 <__aeabi_i2f>
 800c57c:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c57e:	6838      	ldr	r0, [r7, #0]
 800c580:	f7f5 f826 	bl	80015d0 <__aeabi_i2f>
 800c584:	1c03      	adds	r3, r0, #0
 800c586:	4918      	ldr	r1, [pc, #96]	@ (800c5e8 <sumToIntAverage+0x80>)
 800c588:	1c18      	adds	r0, r3, #0
 800c58a:	f7f4 fb23 	bl	8000bd4 <__aeabi_fdiv>
 800c58e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c590:	1c19      	adds	r1, r3, #0
 800c592:	1c20      	adds	r0, r4, #0
 800c594:	f7f4 f994 	bl	80008c0 <__aeabi_fadd>
 800c598:	1c03      	adds	r3, r0, #0
 800c59a:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c59c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c59e:	f7f5 f863 	bl	8001668 <__aeabi_ui2f>
 800c5a2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c5a4:	1c19      	adds	r1, r3, #0
 800c5a6:	1c20      	adds	r0, r4, #0
 800c5a8:	f7f4 fb14 	bl	8000bd4 <__aeabi_fdiv>
 800c5ac:	1c03      	adds	r3, r0, #0
 800c5ae:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	2310      	movs	r3, #16
 800c5b8:	18f9      	adds	r1, r7, r3
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	1c18      	adds	r0, r3, #0
 800c5be:	f7ff ffa1 	bl	800c504 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	2bff      	cmp	r3, #255	@ 0xff
 800c5c6:	d906      	bls.n	800c5d6 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	22ff      	movs	r2, #255	@ 0xff
 800c5cc:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2209      	movs	r2, #9
 800c5d2:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c5d4:	e003      	b.n	800c5de <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	701a      	strb	r2, [r3, #0]
}
 800c5de:	46c0      	nop			@ (mov r8, r8)
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	b007      	add	sp, #28
 800c5e4:	bd90      	pop	{r4, r7, pc}
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	41200000 	.word	0x41200000

0800c5ec <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	607a      	str	r2, [r7, #4]
 800c5f8:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2280      	movs	r2, #128	@ 0x80
 800c5fe:	0612      	lsls	r2, r2, #24
 800c600:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	4a18      	ldr	r2, [pc, #96]	@ (800c668 <findMinMax+0x7c>)
 800c606:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c608:	2300      	movs	r3, #0
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	e022      	b.n	800c654 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	18d3      	adds	r3, r2, r3
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	da06      	bge.n	800c62e <findMinMax+0x42>
        {
            min[0] = array[i];
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	18d3      	adds	r3, r2, r3
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	18d3      	adds	r3, r2, r3
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	dd06      	ble.n	800c64e <findMinMax+0x62>
        {
            max[0] = array[i];
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	18d3      	adds	r3, r2, r3
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	3301      	adds	r3, #1
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d3d8      	bcc.n	800c60e <findMinMax+0x22>
        }
    }
}
 800c65c:	46c0      	nop			@ (mov r8, r8)
 800c65e:	46c0      	nop			@ (mov r8, r8)
 800c660:	46bd      	mov	sp, r7
 800c662:	b006      	add	sp, #24
 800c664:	bd80      	pop	{r7, pc}
 800c666:	46c0      	nop			@ (mov r8, r8)
 800c668:	7fffffff 	.word	0x7fffffff

0800c66c <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d302      	bcc.n	800c688 <getPo2factor+0x1c>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d107      	bne.n	800c698 <getPo2factor+0x2c>
    {
        return 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	e00d      	b.n	800c6a8 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	085b      	lsrs	r3, r3, #1
 800c690:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3301      	adds	r3, #1
 800c696:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d2f5      	bcs.n	800c68c <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
}
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	b004      	add	sp, #16
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b086      	sub	sp, #24
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7f4 ffd2 	bl	8001668 <__aeabi_ui2f>
 800c6c4:	1c03      	adds	r3, r0, #0
 800c6c6:	1c19      	adds	r1, r3, #0
 800c6c8:	68b8      	ldr	r0, [r7, #8]
 800c6ca:	f7f4 fc69 	bl	8000fa0 <__aeabi_fmul>
 800c6ce:	1c03      	adds	r3, r0, #0
 800c6d0:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	2310      	movs	r3, #16
 800c6da:	18f9      	adds	r1, r7, r3
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	1c18      	adds	r0, r3, #0
 800c6e0:	f7ff fee0 	bl	800c4a4 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	801a      	strh	r2, [r3, #0]
}
 800c6ec:	46c0      	nop			@ (mov r8, r8)
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	b006      	add	sp, #24
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60b8      	str	r0, [r7, #8]
 800c6fc:	60f9      	str	r1, [r7, #12]
 800c6fe:	607a      	str	r2, [r7, #4]
 800c700:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	6a3a      	ldr	r2, [r7, #32]
 800c706:	68b8      	ldr	r0, [r7, #8]
 800c708:	68f9      	ldr	r1, [r7, #12]
 800c70a:	f7fa fbc3 	bl	8006e94 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c70e:	6a3b      	ldr	r3, [r7, #32]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	18d2      	adds	r2, r2, r3
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	18d2      	adds	r2, r2, r3
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	18d2      	adds	r2, r2, r3
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	18d2      	adds	r2, r2, r3
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	0011      	movs	r1, r2
 800c734:	0018      	movs	r0, r3
 800c736:	f7fa fc3d 	bl	8006fb4 <correctIntFracNumber>
}
 800c73a:	46c0      	nop			@ (mov r8, r8)
 800c73c:	46bd      	mov	sp, r7
 800c73e:	b004      	add	sp, #16
 800c740:	bd80      	pop	{r7, pc}

0800c742 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b086      	sub	sp, #24
 800c746:	af00      	add	r7, sp, #0
 800c748:	60f8      	str	r0, [r7, #12]
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c752:	2300      	movs	r3, #0
 800c754:	613b      	str	r3, [r7, #16]
 800c756:	e019      	b.n	800c78c <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	005b      	lsls	r3, r3, #1
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	18d3      	adds	r3, r2, r3
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	3201      	adds	r2, #1
 800c768:	0052      	lsls	r2, r2, #1
 800c76a:	68f9      	ldr	r1, [r7, #12]
 800c76c:	188a      	adds	r2, r1, r2
 800c76e:	8812      	ldrh	r2, [r2, #0]
 800c770:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c772:	0019      	movs	r1, r3
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c77c:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c77e:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	3301      	adds	r3, #1
 800c784:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	3304      	adds	r3, #4
 800c78a:	613b      	str	r3, [r7, #16]
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	429a      	cmp	r2, r3
 800c792:	d3e1      	bcc.n	800c758 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c794:	46c0      	nop			@ (mov r8, r8)
 800c796:	46c0      	nop			@ (mov r8, r8)
 800c798:	46bd      	mov	sp, r7
 800c79a:	b006      	add	sp, #24
 800c79c:	bd80      	pop	{r7, pc}
	...

0800c7a0 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  init = false;
 800c7a4:	4b02      	ldr	r3, [pc, #8]	@ (800c7b0 <InitDone+0x10>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	701a      	strb	r2, [r3, #0]
}
 800c7aa:	46c0      	nop			@ (mov r8, r8)
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	200000c4 	.word	0x200000c4

0800c7b4 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800c7ba:	f7f9 fc19 	bl	8005ff0 <ReadBatteryVoltage>
 800c7be:	1c03      	adds	r3, r0, #0
 800c7c0:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800c7c2:	491f      	ldr	r1, [pc, #124]	@ (800c840 <batteryChargeCheck+0x8c>)
 800c7c4:	6838      	ldr	r0, [r7, #0]
 800c7c6:	f7f3 feb3 	bl	8000530 <__aeabi_fcmplt>
 800c7ca:	1e03      	subs	r3, r0, #0
 800c7cc:	d002      	beq.n	800c7d4 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800c7ce:	1dfb      	adds	r3, r7, #7
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800c7d4:	6838      	ldr	r0, [r7, #0]
 800c7d6:	f7f6 fe45 	bl	8003464 <__aeabi_f2d>
 800c7da:	4a1a      	ldr	r2, [pc, #104]	@ (800c844 <batteryChargeCheck+0x90>)
 800c7dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c848 <batteryChargeCheck+0x94>)
 800c7de:	f7f3 fe6d 	bl	80004bc <__aeabi_dcmplt>
 800c7e2:	1e03      	subs	r3, r0, #0
 800c7e4:	d008      	beq.n	800c7f8 <batteryChargeCheck+0x44>
 800c7e6:	4916      	ldr	r1, [pc, #88]	@ (800c840 <batteryChargeCheck+0x8c>)
 800c7e8:	6838      	ldr	r0, [r7, #0]
 800c7ea:	f7f3 febf 	bl	800056c <__aeabi_fcmpge>
 800c7ee:	1e03      	subs	r3, r0, #0
 800c7f0:	d002      	beq.n	800c7f8 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800c7f2:	1dfb      	adds	r3, r7, #7
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800c7f8:	2181      	movs	r1, #129	@ 0x81
 800c7fa:	05c9      	lsls	r1, r1, #23
 800c7fc:	6838      	ldr	r0, [r7, #0]
 800c7fe:	f7f3 fe97 	bl	8000530 <__aeabi_fcmplt>
 800c802:	1e03      	subs	r3, r0, #0
 800c804:	d00b      	beq.n	800c81e <batteryChargeCheck+0x6a>
 800c806:	6838      	ldr	r0, [r7, #0]
 800c808:	f7f6 fe2c 	bl	8003464 <__aeabi_f2d>
 800c80c:	4a0d      	ldr	r2, [pc, #52]	@ (800c844 <batteryChargeCheck+0x90>)
 800c80e:	4b0e      	ldr	r3, [pc, #56]	@ (800c848 <batteryChargeCheck+0x94>)
 800c810:	f7f3 fe72 	bl	80004f8 <__aeabi_dcmpge>
 800c814:	1e03      	subs	r3, r0, #0
 800c816:	d002      	beq.n	800c81e <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800c818:	1dfb      	adds	r3, r7, #7
 800c81a:	2203      	movs	r2, #3
 800c81c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800c81e:	2181      	movs	r1, #129	@ 0x81
 800c820:	05c9      	lsls	r1, r1, #23
 800c822:	6838      	ldr	r0, [r7, #0]
 800c824:	f7f3 fea2 	bl	800056c <__aeabi_fcmpge>
 800c828:	1e03      	subs	r3, r0, #0
 800c82a:	d002      	beq.n	800c832 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800c82c:	1dfb      	adds	r3, r7, #7
 800c82e:	2204      	movs	r2, #4
 800c830:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800c832:	1dfb      	adds	r3, r7, #7
 800c834:	781b      	ldrb	r3, [r3, #0]
}
 800c836:	0018      	movs	r0, r3
 800c838:	46bd      	mov	sp, r7
 800c83a:	b002      	add	sp, #8
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	46c0      	nop			@ (mov r8, r8)
 800c840:	40600000 	.word	0x40600000
 800c844:	9999999a 	.word	0x9999999a
 800c848:	400d9999 	.word	0x400d9999

0800c84c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800c84c:	b590      	push	{r4, r7, lr}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	0004      	movs	r4, r0
 800c854:	0008      	movs	r0, r1
 800c856:	0011      	movs	r1, r2
 800c858:	1dbb      	adds	r3, r7, #6
 800c85a:	1c22      	adds	r2, r4, #0
 800c85c:	801a      	strh	r2, [r3, #0]
 800c85e:	1d3b      	adds	r3, r7, #4
 800c860:	1c02      	adds	r2, r0, #0
 800c862:	801a      	strh	r2, [r3, #0]
 800c864:	1cbb      	adds	r3, r7, #2
 800c866:	1c0a      	adds	r2, r1, #0
 800c868:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c86a:	4b0f      	ldr	r3, [pc, #60]	@ (800c8a8 <SetStatusLED+0x5c>)
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d107      	bne.n	800c882 <SetStatusLED+0x36>
 800c872:	4b0e      	ldr	r3, [pc, #56]	@ (800c8ac <SetStatusLED+0x60>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d103      	bne.n	800c882 <SetStatusLED+0x36>
 800c87a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b0 <SetStatusLED+0x64>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00e      	beq.n	800c8a0 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800c882:	2380      	movs	r3, #128	@ 0x80
 800c884:	05db      	lsls	r3, r3, #23
 800c886:	1dba      	adds	r2, r7, #6
 800c888:	8812      	ldrh	r2, [r2, #0]
 800c88a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800c88c:	2380      	movs	r3, #128	@ 0x80
 800c88e:	05db      	lsls	r3, r3, #23
 800c890:	1d3a      	adds	r2, r7, #4
 800c892:	8812      	ldrh	r2, [r2, #0]
 800c894:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800c896:	2380      	movs	r3, #128	@ 0x80
 800c898:	05db      	lsls	r3, r3, #23
 800c89a:	1cba      	adds	r2, r7, #2
 800c89c:	8812      	ldrh	r2, [r2, #0]
 800c89e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c8a0:	46c0      	nop			@ (mov r8, r8)
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	b003      	add	sp, #12
 800c8a6:	bd90      	pop	{r4, r7, pc}
 800c8a8:	20002179 	.word	0x20002179
 800c8ac:	200000c4 	.word	0x200000c4
 800c8b0:	2000217a 	.word	0x2000217a

0800c8b4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800c8b4:	b590      	push	{r4, r7, lr}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	0004      	movs	r4, r0
 800c8bc:	0008      	movs	r0, r1
 800c8be:	0011      	movs	r1, r2
 800c8c0:	1dfb      	adds	r3, r7, #7
 800c8c2:	1c22      	adds	r2, r4, #0
 800c8c4:	701a      	strb	r2, [r3, #0]
 800c8c6:	1dbb      	adds	r3, r7, #6
 800c8c8:	1c02      	adds	r2, r0, #0
 800c8ca:	701a      	strb	r2, [r3, #0]
 800c8cc:	1d7b      	adds	r3, r7, #5
 800c8ce:	1c0a      	adds	r2, r1, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800c8d2:	4b19      	ldr	r3, [pc, #100]	@ (800c938 <SetDBLED+0x84>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d107      	bne.n	800c8ea <SetDBLED+0x36>
 800c8da:	4b18      	ldr	r3, [pc, #96]	@ (800c93c <SetDBLED+0x88>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d103      	bne.n	800c8ea <SetDBLED+0x36>
 800c8e2:	4b17      	ldr	r3, [pc, #92]	@ (800c940 <SetDBLED+0x8c>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d022      	beq.n	800c930 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800c8ea:	1dfb      	adds	r3, r7, #7
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	4053      	eors	r3, r2
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	001a      	movs	r2, r3
 800c8f6:	4b13      	ldr	r3, [pc, #76]	@ (800c944 <SetDBLED+0x90>)
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	0018      	movs	r0, r3
 800c8fc:	f002 fd83 	bl	800f406 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800c900:	1dbb      	adds	r3, r7, #6
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2201      	movs	r2, #1
 800c906:	4053      	eors	r3, r2
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	001a      	movs	r2, r3
 800c90c:	2380      	movs	r3, #128	@ 0x80
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	480c      	ldr	r0, [pc, #48]	@ (800c944 <SetDBLED+0x90>)
 800c912:	0019      	movs	r1, r3
 800c914:	f002 fd77 	bl	800f406 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800c918:	1d7b      	adds	r3, r7, #5
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2201      	movs	r2, #1
 800c91e:	4053      	eors	r3, r2
 800c920:	b2db      	uxtb	r3, r3
 800c922:	001a      	movs	r2, r3
 800c924:	2380      	movs	r3, #128	@ 0x80
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4806      	ldr	r0, [pc, #24]	@ (800c944 <SetDBLED+0x90>)
 800c92a:	0019      	movs	r1, r3
 800c92c:	f002 fd6b 	bl	800f406 <HAL_GPIO_WritePin>
  }
}
 800c930:	46c0      	nop			@ (mov r8, r8)
 800c932:	46bd      	mov	sp, r7
 800c934:	b003      	add	sp, #12
 800c936:	bd90      	pop	{r4, r7, pc}
 800c938:	20002179 	.word	0x20002179
 800c93c:	200000c4 	.word	0x200000c4
 800c940:	2000217a 	.word	0x2000217a
 800c944:	50000400 	.word	0x50000400

0800c948 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800c948:	b590      	push	{r4, r7, lr}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	0004      	movs	r4, r0
 800c950:	0008      	movs	r0, r1
 800c952:	0011      	movs	r1, r2
 800c954:	1dbb      	adds	r3, r7, #6
 800c956:	1c22      	adds	r2, r4, #0
 800c958:	801a      	strh	r2, [r3, #0]
 800c95a:	1d3b      	adds	r3, r7, #4
 800c95c:	1c02      	adds	r2, r0, #0
 800c95e:	801a      	strh	r2, [r3, #0]
 800c960:	1cbb      	adds	r3, r7, #2
 800c962:	1c0a      	adds	r2, r1, #0
 800c964:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c966:	4b0e      	ldr	r3, [pc, #56]	@ (800c9a0 <SetVocLED+0x58>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d107      	bne.n	800c97e <SetVocLED+0x36>
 800c96e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a4 <SetVocLED+0x5c>)
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d103      	bne.n	800c97e <SetVocLED+0x36>
 800c976:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <SetVocLED+0x60>)
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00b      	beq.n	800c996 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800c97e:	4b0b      	ldr	r3, [pc, #44]	@ (800c9ac <SetVocLED+0x64>)
 800c980:	1dba      	adds	r2, r7, #6
 800c982:	8812      	ldrh	r2, [r2, #0]
 800c984:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800c986:	4b09      	ldr	r3, [pc, #36]	@ (800c9ac <SetVocLED+0x64>)
 800c988:	1d3a      	adds	r2, r7, #4
 800c98a:	8812      	ldrh	r2, [r2, #0]
 800c98c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800c98e:	4b07      	ldr	r3, [pc, #28]	@ (800c9ac <SetVocLED+0x64>)
 800c990:	1cba      	adds	r2, r7, #2
 800c992:	8812      	ldrh	r2, [r2, #0]
 800c994:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	46bd      	mov	sp, r7
 800c99a:	b003      	add	sp, #12
 800c99c:	bd90      	pop	{r4, r7, pc}
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	20002179 	.word	0x20002179
 800c9a4:	200000c4 	.word	0x200000c4
 800c9a8:	2000217a 	.word	0x2000217a
 800c9ac:	40000400 	.word	0x40000400

0800c9b0 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c9b4:	4b07      	ldr	r3, [pc, #28]	@ (800c9d4 <SetMeasurementIndicator+0x24>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d103      	bne.n	800c9c4 <SetMeasurementIndicator+0x14>
 800c9bc:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <SetMeasurementIndicator+0x28>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d003      	beq.n	800c9cc <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800c9c4:	2380      	movs	r3, #128	@ 0x80
 800c9c6:	05db      	lsls	r3, r3, #23
 800c9c8:	4a04      	ldr	r2, [pc, #16]	@ (800c9dc <SetMeasurementIndicator+0x2c>)
 800c9ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c9cc:	46c0      	nop			@ (mov r8, r8)
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	46c0      	nop			@ (mov r8, r8)
 800c9d4:	20002179 	.word	0x20002179
 800c9d8:	2000217a 	.word	0x2000217a
 800c9dc:	00000bb8 	.word	0x00000bb8

0800c9e0 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c9e4:	4b07      	ldr	r3, [pc, #28]	@ (800ca04 <ResetMeasurementIndicator+0x24>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <ResetMeasurementIndicator+0x14>
 800c9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ca08 <ResetMeasurementIndicator+0x28>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800c9f4:	2380      	movs	r3, #128	@ 0x80
 800c9f6:	05db      	lsls	r3, r3, #23
 800c9f8:	22fa      	movs	r2, #250	@ 0xfa
 800c9fa:	0112      	lsls	r2, r2, #4
 800c9fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c9fe:	46c0      	nop			@ (mov r8, r8)
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	20002179 	.word	0x20002179
 800ca08:	2000217a 	.word	0x2000217a

0800ca0c <SetMICIndicator>:
void SetMICIndicator(){
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ca10:	4b07      	ldr	r3, [pc, #28]	@ (800ca30 <SetMICIndicator+0x24>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d103      	bne.n	800ca20 <SetMICIndicator+0x14>
 800ca18:	4b06      	ldr	r3, [pc, #24]	@ (800ca34 <SetMICIndicator+0x28>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d003      	beq.n	800ca28 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800ca20:	2380      	movs	r3, #128	@ 0x80
 800ca22:	05db      	lsls	r3, r3, #23
 800ca24:	4a04      	ldr	r2, [pc, #16]	@ (800ca38 <SetMICIndicator+0x2c>)
 800ca26:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800ca28:	46c0      	nop			@ (mov r8, r8)
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	46c0      	nop			@ (mov r8, r8)
 800ca30:	20002179 	.word	0x20002179
 800ca34:	2000217a 	.word	0x2000217a
 800ca38:	00000bb8 	.word	0x00000bb8

0800ca3c <ResetMICIndicator>:
void ResetMICIndicator(){
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ca40:	4b07      	ldr	r3, [pc, #28]	@ (800ca60 <ResetMICIndicator+0x24>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d103      	bne.n	800ca50 <ResetMICIndicator+0x14>
 800ca48:	4b06      	ldr	r3, [pc, #24]	@ (800ca64 <ResetMICIndicator+0x28>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d004      	beq.n	800ca5a <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800ca50:	2380      	movs	r3, #128	@ 0x80
 800ca52:	05db      	lsls	r3, r3, #23
 800ca54:	22fa      	movs	r2, #250	@ 0xfa
 800ca56:	0112      	lsls	r2, r2, #4
 800ca58:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800ca5a:	46c0      	nop			@ (mov r8, r8)
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	20002179 	.word	0x20002179
 800ca64:	2000217a 	.word	0x2000217a

0800ca68 <SetESPIndicator>:
void SetESPIndicator(){
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ca6c:	4b07      	ldr	r3, [pc, #28]	@ (800ca8c <SetESPIndicator+0x24>)
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d103      	bne.n	800ca7c <SetESPIndicator+0x14>
 800ca74:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <SetESPIndicator+0x28>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d003      	beq.n	800ca84 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800ca7c:	2380      	movs	r3, #128	@ 0x80
 800ca7e:	05db      	lsls	r3, r3, #23
 800ca80:	4a04      	ldr	r2, [pc, #16]	@ (800ca94 <SetESPIndicator+0x2c>)
 800ca82:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ca84:	46c0      	nop			@ (mov r8, r8)
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	46c0      	nop			@ (mov r8, r8)
 800ca8c:	20002179 	.word	0x20002179
 800ca90:	2000217a 	.word	0x2000217a
 800ca94:	00000bb8 	.word	0x00000bb8

0800ca98 <ResetESPIndicator>:
void ResetESPIndicator(){
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ca9c:	4b07      	ldr	r3, [pc, #28]	@ (800cabc <ResetESPIndicator+0x24>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d103      	bne.n	800caac <ResetESPIndicator+0x14>
 800caa4:	4b06      	ldr	r3, [pc, #24]	@ (800cac0 <ResetESPIndicator+0x28>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d004      	beq.n	800cab6 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800caac:	2380      	movs	r3, #128	@ 0x80
 800caae:	05db      	lsls	r3, r3, #23
 800cab0:	22fa      	movs	r2, #250	@ 0xfa
 800cab2:	0112      	lsls	r2, r2, #4
 800cab4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cab6:	46c0      	nop			@ (mov r8, r8)
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	20002179 	.word	0x20002179
 800cac0:	2000217a 	.word	0x2000217a

0800cac4 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800cac4:	b580      	push	{r7, lr}
 800cac6:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800cac8:	23fa      	movs	r3, #250	@ 0xfa
 800caca:	011a      	lsls	r2, r3, #4
 800cacc:	23fa      	movs	r3, #250	@ 0xfa
 800cace:	0119      	lsls	r1, r3, #4
 800cad0:	23fa      	movs	r3, #250	@ 0xfa
 800cad2:	011b      	lsls	r3, r3, #4
 800cad4:	0018      	movs	r0, r3
 800cad6:	f7ff feb9 	bl	800c84c <SetStatusLED>
  SetDBLED(false,false,false);
 800cada:	2200      	movs	r2, #0
 800cadc:	2100      	movs	r1, #0
 800cade:	2000      	movs	r0, #0
 800cae0:	f7ff fee8 	bl	800c8b4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800cae4:	23fa      	movs	r3, #250	@ 0xfa
 800cae6:	011a      	lsls	r2, r3, #4
 800cae8:	23fa      	movs	r3, #250	@ 0xfa
 800caea:	0119      	lsls	r1, r3, #4
 800caec:	23fa      	movs	r3, #250	@ 0xfa
 800caee:	011b      	lsls	r3, r3, #4
 800caf0:	0018      	movs	r0, r3
 800caf2:	f7ff ff29 	bl	800c948 <SetVocLED>
return;
 800caf6:	46c0      	nop			@ (mov r8, r8)
}
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <powerCheck>:

Battery_Status powerCheck(){
 800cafc:	b590      	push	{r4, r7, lr}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800cb02:	f7f9 fb3b 	bl	800617c <Check_USB_PowerOn>
 800cb06:	0003      	movs	r3, r0
 800cb08:	001a      	movs	r2, r3
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4053      	eors	r3, r2
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d005      	beq.n	800cb20 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cb14:	1dfc      	adds	r4, r7, #7
 800cb16:	f7ff fe4d 	bl	800c7b4 <batteryChargeCheck>
 800cb1a:	0003      	movs	r3, r0
 800cb1c:	7023      	strb	r3, [r4, #0]
 800cb1e:	e002      	b.n	800cb26 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800cb20:	1dfb      	adds	r3, r7, #7
 800cb22:	2201      	movs	r2, #1
 800cb24:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cb26:	1dfb      	adds	r3, r7, #7
 800cb28:	781b      	ldrb	r3, [r3, #0]
}
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	b003      	add	sp, #12
 800cb30:	bd90      	pop	{r4, r7, pc}
	...

0800cb34 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	0002      	movs	r2, r0
 800cb3c:	1dfb      	adds	r3, r7, #7
 800cb3e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800cb40:	1dfb      	adds	r3, r7, #7
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d105      	bne.n	800cb54 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800cb48:	4a18      	ldr	r2, [pc, #96]	@ (800cbac <powerDisplay+0x78>)
 800cb4a:	4b19      	ldr	r3, [pc, #100]	@ (800cbb0 <powerDisplay+0x7c>)
 800cb4c:	0019      	movs	r1, r3
 800cb4e:	2003      	movs	r0, #3
 800cb50:	f000 fe40 	bl	800d7d4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800cb54:	1dfb      	adds	r3, r7, #7
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b04      	cmp	r3, #4
 800cb5a:	d105      	bne.n	800cb68 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800cb5c:	4a15      	ldr	r2, [pc, #84]	@ (800cbb4 <powerDisplay+0x80>)
 800cb5e:	4b14      	ldr	r3, [pc, #80]	@ (800cbb0 <powerDisplay+0x7c>)
 800cb60:	0019      	movs	r1, r3
 800cb62:	2003      	movs	r0, #3
 800cb64:	f000 fe36 	bl	800d7d4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800cb68:	1dfb      	adds	r3, r7, #7
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	d105      	bne.n	800cb7c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800cb70:	4a11      	ldr	r2, [pc, #68]	@ (800cbb8 <powerDisplay+0x84>)
 800cb72:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb0 <powerDisplay+0x7c>)
 800cb74:	0019      	movs	r1, r3
 800cb76:	2003      	movs	r0, #3
 800cb78:	f000 fe2c 	bl	800d7d4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800cb7c:	1dfb      	adds	r3, r7, #7
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d105      	bne.n	800cb90 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800cb84:	4a0d      	ldr	r2, [pc, #52]	@ (800cbbc <powerDisplay+0x88>)
 800cb86:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb0 <powerDisplay+0x7c>)
 800cb88:	0019      	movs	r1, r3
 800cb8a:	2003      	movs	r0, #3
 800cb8c:	f000 fe22 	bl	800d7d4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800cb90:	1dfb      	adds	r3, r7, #7
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d105      	bne.n	800cba4 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800cb98:	4a09      	ldr	r2, [pc, #36]	@ (800cbc0 <powerDisplay+0x8c>)
 800cb9a:	4b05      	ldr	r3, [pc, #20]	@ (800cbb0 <powerDisplay+0x7c>)
 800cb9c:	0019      	movs	r1, r3
 800cb9e:	2003      	movs	r0, #3
 800cba0:	f000 fe18 	bl	800d7d4 <CreateLine>
  }
}
 800cba4:	46c0      	nop			@ (mov r8, r8)
 800cba6:	46bd      	mov	sp, r7
 800cba8:	b002      	add	sp, #8
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	080239cc 	.word	0x080239cc
 800cbb0:	080239dc 	.word	0x080239dc
 800cbb4:	080239e0 	.word	0x080239e0
 800cbb8:	080239f8 	.word	0x080239f8
 800cbbc:	08023a18 	.word	0x08023a18
 800cbc0:	08023a30 	.word	0x08023a30

0800cbc4 <configCheck>:

void configCheck(){
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800cbc8:	f7f9 fae7 	bl	800619a <BootButton_Pressed>
 800cbcc:	1e03      	subs	r3, r0, #0
 800cbce:	d007      	beq.n	800cbe0 <configCheck+0x1c>
 800cbd0:	f7f9 faf4 	bl	80061bc <UserButton_Pressed>
 800cbd4:	1e03      	subs	r3, r0, #0
 800cbd6:	d003      	beq.n	800cbe0 <configCheck+0x1c>
    configSet = true;
 800cbd8:	4b3d      	ldr	r3, [pc, #244]	@ (800ccd0 <configCheck+0x10c>)
 800cbda:	2201      	movs	r2, #1
 800cbdc:	701a      	strb	r2, [r3, #0]
 800cbde:	e00a      	b.n	800cbf6 <configCheck+0x32>
  }
  else{
    configSet = false;
 800cbe0:	4b3b      	ldr	r3, [pc, #236]	@ (800ccd0 <configCheck+0x10c>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800cbe6:	f001 f993 	bl	800df10 <HAL_GetTick>
 800cbea:	0003      	movs	r3, r0
 800cbec:	22fa      	movs	r2, #250	@ 0xfa
 800cbee:	00d2      	lsls	r2, r2, #3
 800cbf0:	189a      	adds	r2, r3, r2
 800cbf2:	4b38      	ldr	r3, [pc, #224]	@ (800ccd4 <configCheck+0x110>)
 800cbf4:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800cbf6:	4b36      	ldr	r3, [pc, #216]	@ (800ccd0 <configCheck+0x10c>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00d      	beq.n	800cc1a <configCheck+0x56>
 800cbfe:	4b35      	ldr	r3, [pc, #212]	@ (800ccd4 <configCheck+0x110>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	0018      	movs	r0, r3
 800cc04:	f000 fd90 	bl	800d728 <TimestampIsReached>
 800cc08:	1e03      	subs	r3, r0, #0
 800cc0a:	d006      	beq.n	800cc1a <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800cc0c:	f7f6 fed0 	bl	80039b0 <SetConfigMode>
    SetDBLED(true, true, true);
 800cc10:	2201      	movs	r2, #1
 800cc12:	2101      	movs	r1, #1
 800cc14:	2001      	movs	r0, #1
 800cc16:	f7ff fe4d 	bl	800c8b4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800cc1a:	f7f9 fabe 	bl	800619a <BootButton_Pressed>
 800cc1e:	0003      	movs	r3, r0
 800cc20:	001a      	movs	r2, r3
 800cc22:	2301      	movs	r3, #1
 800cc24:	4053      	eors	r3, r2
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d01d      	beq.n	800cc68 <configCheck+0xa4>
 800cc2c:	f7f9 fac6 	bl	80061bc <UserButton_Pressed>
 800cc30:	1e03      	subs	r3, r0, #0
 800cc32:	d019      	beq.n	800cc68 <configCheck+0xa4>
 800cc34:	4b28      	ldr	r3, [pc, #160]	@ (800ccd8 <configCheck+0x114>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	4053      	eors	r3, r2
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d012      	beq.n	800cc68 <configCheck+0xa4>
    SetLEDsOff();
 800cc42:	f7ff ff3f 	bl	800cac4 <SetLEDsOff>
    userToggle = !userToggle;
 800cc46:	4b25      	ldr	r3, [pc, #148]	@ (800ccdc <configCheck+0x118>)
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	1e5a      	subs	r2, r3, #1
 800cc4c:	4193      	sbcs	r3, r2
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2201      	movs	r2, #1
 800cc52:	4053      	eors	r3, r2
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	1c1a      	adds	r2, r3, #0
 800cc58:	2301      	movs	r3, #1
 800cc5a:	4013      	ands	r3, r2
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	4b1f      	ldr	r3, [pc, #124]	@ (800ccdc <configCheck+0x118>)
 800cc60:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800cc62:	4b1d      	ldr	r3, [pc, #116]	@ (800ccd8 <configCheck+0x114>)
 800cc64:	2201      	movs	r2, #1
 800cc66:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800cc68:	f7f9 fa97 	bl	800619a <BootButton_Pressed>
 800cc6c:	0003      	movs	r3, r0
 800cc6e:	001a      	movs	r2, r3
 800cc70:	2301      	movs	r3, #1
 800cc72:	4053      	eors	r3, r2
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00b      	beq.n	800cc92 <configCheck+0xce>
 800cc7a:	f7f9 fa9f 	bl	80061bc <UserButton_Pressed>
 800cc7e:	0003      	movs	r3, r0
 800cc80:	001a      	movs	r2, r3
 800cc82:	2301      	movs	r3, #1
 800cc84:	4053      	eors	r3, r2
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d002      	beq.n	800cc92 <configCheck+0xce>
    buttonHeld = false;
 800cc8c:	4b12      	ldr	r3, [pc, #72]	@ (800ccd8 <configCheck+0x114>)
 800cc8e:	2200      	movs	r2, #0
 800cc90:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800cc92:	f7f9 fa73 	bl	800617c <Check_USB_PowerOn>
 800cc96:	1e03      	subs	r3, r0, #0
 800cc98:	d003      	beq.n	800cca2 <configCheck+0xde>
    usbPluggedIn = true;
 800cc9a:	4b11      	ldr	r3, [pc, #68]	@ (800cce0 <configCheck+0x11c>)
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800cca0:	e012      	b.n	800ccc8 <configCheck+0x104>
    if(!userToggle && !init){
 800cca2:	4b0e      	ldr	r3, [pc, #56]	@ (800ccdc <configCheck+0x118>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	2201      	movs	r2, #1
 800cca8:	4053      	eors	r3, r2
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d008      	beq.n	800ccc2 <configCheck+0xfe>
 800ccb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cce4 <configCheck+0x120>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	4053      	eors	r3, r2
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <configCheck+0xfe>
      SetLEDsOff();
 800ccbe:	f7ff ff01 	bl	800cac4 <SetLEDsOff>
    usbPluggedIn = false;
 800ccc2:	4b07      	ldr	r3, [pc, #28]	@ (800cce0 <configCheck+0x11c>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	701a      	strb	r2, [r3, #0]
}
 800ccc8:	46c0      	nop			@ (mov r8, r8)
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	46c0      	nop			@ (mov r8, r8)
 800ccd0:	20002178 	.word	0x20002178
 800ccd4:	2000217c 	.word	0x2000217c
 800ccd8:	2000217b 	.word	0x2000217b
 800ccdc:	2000217a 	.word	0x2000217a
 800cce0:	20002179 	.word	0x20002179
 800cce4:	200000c4 	.word	0x200000c4

0800cce8 <Status_Upkeep>:
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  SystemClock_Config();
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800cce8:	b580      	push	{r7, lr}
 800ccea:	af00      	add	r7, sp, #0
  configCheck();
 800ccec:	f7ff ff6a 	bl	800cbc4 <configCheck>
}
 800ccf0:	46c0      	nop			@ (mov r8, r8)
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800ccf6:	b590      	push	{r4, r7, lr}
 800ccf8:	b083      	sub	sp, #12
 800ccfa:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800ccfc:	1dfc      	adds	r4, r7, #7
 800ccfe:	f7ff fefd 	bl	800cafc <powerCheck>
 800cd02:	0003      	movs	r3, r0
 800cd04:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800cd06:	1dfb      	adds	r3, r7, #7
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	0018      	movs	r0, r3
 800cd0c:	f7ff ff12 	bl	800cb34 <powerDisplay>
  return status;
 800cd10:	1dfb      	adds	r3, r7, #7
 800cd12:	781b      	ldrb	r3, [r3, #0]

}
 800cd14:	0018      	movs	r0, r3
 800cd16:	46bd      	mov	sp, r7
 800cd18:	b003      	add	sp, #12
 800cd1a:	bd90      	pop	{r4, r7, pc}

0800cd1c <setuserToggle>:

void setuserToggle(void) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800cd20:	f7ff feec 	bl	800cafc <powerCheck>
 800cd24:	0003      	movs	r3, r0
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d002      	beq.n	800cd30 <setuserToggle+0x14>
    userToggle = true;
 800cd2a:	4b03      	ldr	r3, [pc, #12]	@ (800cd38 <setuserToggle+0x1c>)
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	701a      	strb	r2, [r3, #0]
  }
}
 800cd30:	46c0      	nop			@ (mov r8, r8)
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	46c0      	nop			@ (mov r8, r8)
 800cd38:	2000217a 	.word	0x2000217a

0800cd3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd40:	4b07      	ldr	r3, [pc, #28]	@ (800cd60 <HAL_MspInit+0x24>)
 800cd42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd44:	4b06      	ldr	r3, [pc, #24]	@ (800cd60 <HAL_MspInit+0x24>)
 800cd46:	2101      	movs	r1, #1
 800cd48:	430a      	orrs	r2, r1
 800cd4a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <HAL_MspInit+0x24>)
 800cd4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd50:	4b03      	ldr	r3, [pc, #12]	@ (800cd60 <HAL_MspInit+0x24>)
 800cd52:	2180      	movs	r1, #128	@ 0x80
 800cd54:	0549      	lsls	r1, r1, #21
 800cd56:	430a      	orrs	r2, r1
 800cd58:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cd5a:	46c0      	nop			@ (mov r8, r8)
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	40021000 	.word	0x40021000

0800cd64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800cd68:	46c0      	nop			@ (mov r8, r8)
 800cd6a:	e7fd      	b.n	800cd68 <NMI_Handler+0x4>

0800cd6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cd70:	46c0      	nop			@ (mov r8, r8)
 800cd72:	e7fd      	b.n	800cd70 <HardFault_Handler+0x4>

0800cd74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800cd78:	46c0      	nop			@ (mov r8, r8)
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}

0800cd7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cd82:	46c0      	nop			@ (mov r8, r8)
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cd8c:	f001 f8ae 	bl	800deec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cd90:	46c0      	nop			@ (mov r8, r8)
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
	...

0800cd98 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800cd9c:	4b03      	ldr	r3, [pc, #12]	@ (800cdac <RTC_IRQHandler+0x14>)
 800cd9e:	0018      	movs	r0, r3
 800cda0:	f008 fdae 	bl	8015900 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800cda4:	46c0      	nop			@ (mov r8, r8)
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	200011d8 	.word	0x200011d8

0800cdb0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800cdb4:	2380      	movs	r3, #128	@ 0x80
 800cdb6:	021b      	lsls	r3, r3, #8
 800cdb8:	0018      	movs	r0, r3
 800cdba:	f002 fb41 	bl	800f440 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800cdbe:	46c0      	nop			@ (mov r8, r8)
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800cdc8:	4b05      	ldr	r3, [pc, #20]	@ (800cde0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800cdca:	0018      	movs	r0, r3
 800cdcc:	f001 fec9 	bl	800eb62 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800cdd0:	4b04      	ldr	r3, [pc, #16]	@ (800cde4 <DMA1_Channel2_3_IRQHandler+0x20>)
 800cdd2:	0018      	movs	r0, r3
 800cdd4:	f001 fec5 	bl	800eb62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800cdd8:	46c0      	nop			@ (mov r8, r8)
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	46c0      	nop			@ (mov r8, r8)
 800cde0:	20000e4c 	.word	0x20000e4c
 800cde4:	20000e04 	.word	0x20000e04

0800cde8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800cdec:	4b07      	ldr	r3, [pc, #28]	@ (800ce0c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800cdee:	0018      	movs	r0, r3
 800cdf0:	f001 feb7 	bl	800eb62 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800cdf4:	4b06      	ldr	r3, [pc, #24]	@ (800ce10 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	f001 feb3 	bl	800eb62 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800cdfc:	4b05      	ldr	r3, [pc, #20]	@ (800ce14 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800cdfe:	0018      	movs	r0, r3
 800ce00:	f001 feaf 	bl	800eb62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800ce04:	46c0      	nop			@ (mov r8, r8)
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	46c0      	nop			@ (mov r8, r8)
 800ce0c:	20000ed0 	.word	0x20000ed0
 800ce10:	2000246c 	.word	0x2000246c
 800ce14:	200024b4 	.word	0x200024b4

0800ce18 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ce1c:	4b03      	ldr	r3, [pc, #12]	@ (800ce2c <USART4_5_IRQHandler+0x14>)
 800ce1e:	0018      	movs	r0, r3
 800ce20:	f009 fc3a 	bl	8016698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800ce24:	46c0      	nop			@ (mov r8, r8)
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	46c0      	nop			@ (mov r8, r8)
 800ce2c:	200023b4 	.word	0x200023b4

0800ce30 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800ce34:	4b09      	ldr	r3, [pc, #36]	@ (800ce5c <I2C1_IRQHandler+0x2c>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	699a      	ldr	r2, [r3, #24]
 800ce3a:	23e0      	movs	r3, #224	@ 0xe0
 800ce3c:	00db      	lsls	r3, r3, #3
 800ce3e:	4013      	ands	r3, r2
 800ce40:	d004      	beq.n	800ce4c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800ce42:	4b06      	ldr	r3, [pc, #24]	@ (800ce5c <I2C1_IRQHandler+0x2c>)
 800ce44:	0018      	movs	r0, r3
 800ce46:	f002 ffe3 	bl	800fe10 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800ce4a:	e003      	b.n	800ce54 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800ce4c:	4b03      	ldr	r3, [pc, #12]	@ (800ce5c <I2C1_IRQHandler+0x2c>)
 800ce4e:	0018      	movs	r0, r3
 800ce50:	f002 ffc4 	bl	800fddc <HAL_I2C_EV_IRQHandler>
}
 800ce54:	46c0      	nop			@ (mov r8, r8)
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	46c0      	nop			@ (mov r8, r8)
 800ce5c:	20000d5c 	.word	0x20000d5c

0800ce60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ce64:	4b03      	ldr	r3, [pc, #12]	@ (800ce74 <USART1_IRQHandler+0x14>)
 800ce66:	0018      	movs	r0, r3
 800ce68:	f009 fc16 	bl	8016698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ce6c:	46c0      	nop			@ (mov r8, r8)
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	46c0      	nop			@ (mov r8, r8)
 800ce74:	200022fc 	.word	0x200022fc

0800ce78 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800ce7c:	4b03      	ldr	r3, [pc, #12]	@ (800ce8c <USB_IRQHandler+0x14>)
 800ce7e:	0018      	movs	r0, r3
 800ce80:	f005 fba4 	bl	80125cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800ce84:	46c0      	nop			@ (mov r8, r8)
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
 800ce8c:	200032bc 	.word	0x200032bc

0800ce90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	af00      	add	r7, sp, #0
  return 1;
 800ce94:	2301      	movs	r3, #1
}
 800ce96:	0018      	movs	r0, r3
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <_kill>:

int _kill(int pid, int sig)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cea6:	f012 fadb 	bl	801f460 <__errno>
 800ceaa:	0003      	movs	r3, r0
 800ceac:	2216      	movs	r2, #22
 800ceae:	601a      	str	r2, [r3, #0]
  return -1;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	425b      	negs	r3, r3
}
 800ceb4:	0018      	movs	r0, r3
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	b002      	add	sp, #8
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <_exit>:

void _exit (int status)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800cec4:	2301      	movs	r3, #1
 800cec6:	425a      	negs	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	0011      	movs	r1, r2
 800cecc:	0018      	movs	r0, r3
 800cece:	f7ff ffe5 	bl	800ce9c <_kill>
  while (1) {}    /* Make sure we hang here */
 800ced2:	46c0      	nop			@ (mov r8, r8)
 800ced4:	e7fd      	b.n	800ced2 <_exit+0x16>

0800ced6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b086      	sub	sp, #24
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	60f8      	str	r0, [r7, #12]
 800cede:	60b9      	str	r1, [r7, #8]
 800cee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cee2:	2300      	movs	r3, #0
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	e00a      	b.n	800cefe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cee8:	e000      	b.n	800ceec <_read+0x16>
 800ceea:	bf00      	nop
 800ceec:	0001      	movs	r1, r0
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	60ba      	str	r2, [r7, #8]
 800cef4:	b2ca      	uxtb	r2, r1
 800cef6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	3301      	adds	r3, #1
 800cefc:	617b      	str	r3, [r7, #20]
 800cefe:	697a      	ldr	r2, [r7, #20]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	dbf0      	blt.n	800cee8 <_read+0x12>
  }

  return len;
 800cf06:	687b      	ldr	r3, [r7, #4]
}
 800cf08:	0018      	movs	r0, r3
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	b006      	add	sp, #24
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <_close>:
  }
  return len;
}

int _close(int file)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	425b      	negs	r3, r3
}
 800cf1c:	0018      	movs	r0, r3
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	b002      	add	sp, #8
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2280      	movs	r2, #128	@ 0x80
 800cf32:	0192      	lsls	r2, r2, #6
 800cf34:	605a      	str	r2, [r3, #4]
  return 0;
 800cf36:	2300      	movs	r3, #0
}
 800cf38:	0018      	movs	r0, r3
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	b002      	add	sp, #8
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <_isatty>:

int _isatty(int file)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cf48:	2301      	movs	r3, #1
}
 800cf4a:	0018      	movs	r0, r3
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	b002      	add	sp, #8
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	60f8      	str	r0, [r7, #12]
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cf5e:	2300      	movs	r3, #0
}
 800cf60:	0018      	movs	r0, r3
 800cf62:	46bd      	mov	sp, r7
 800cf64:	b004      	add	sp, #16
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cf70:	4a14      	ldr	r2, [pc, #80]	@ (800cfc4 <_sbrk+0x5c>)
 800cf72:	4b15      	ldr	r3, [pc, #84]	@ (800cfc8 <_sbrk+0x60>)
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cf7c:	4b13      	ldr	r3, [pc, #76]	@ (800cfcc <_sbrk+0x64>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d102      	bne.n	800cf8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cf84:	4b11      	ldr	r3, [pc, #68]	@ (800cfcc <_sbrk+0x64>)
 800cf86:	4a12      	ldr	r2, [pc, #72]	@ (800cfd0 <_sbrk+0x68>)
 800cf88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cf8a:	4b10      	ldr	r3, [pc, #64]	@ (800cfcc <_sbrk+0x64>)
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	18d3      	adds	r3, r2, r3
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d207      	bcs.n	800cfa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cf98:	f012 fa62 	bl	801f460 <__errno>
 800cf9c:	0003      	movs	r3, r0
 800cf9e:	220c      	movs	r2, #12
 800cfa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	425b      	negs	r3, r3
 800cfa6:	e009      	b.n	800cfbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cfa8:	4b08      	ldr	r3, [pc, #32]	@ (800cfcc <_sbrk+0x64>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cfae:	4b07      	ldr	r3, [pc, #28]	@ (800cfcc <_sbrk+0x64>)
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	18d2      	adds	r2, r2, r3
 800cfb6:	4b05      	ldr	r3, [pc, #20]	@ (800cfcc <_sbrk+0x64>)
 800cfb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800cfba:	68fb      	ldr	r3, [r7, #12]
}
 800cfbc:	0018      	movs	r0, r3
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	b006      	add	sp, #24
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	20005000 	.word	0x20005000
 800cfc8:	00000400 	.word	0x00000400
 800cfcc:	20002180 	.word	0x20002180
 800cfd0:	20003920 	.word	0x20003920

0800cfd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800cfd8:	46c0      	nop			@ (mov r8, r8)
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
	...

0800cfe0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cfe6:	2310      	movs	r3, #16
 800cfe8:	18fb      	adds	r3, r7, r3
 800cfea:	0018      	movs	r0, r3
 800cfec:	2308      	movs	r3, #8
 800cfee:	001a      	movs	r2, r3
 800cff0:	2100      	movs	r1, #0
 800cff2:	f012 f991 	bl	801f318 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cff6:	003b      	movs	r3, r7
 800cff8:	0018      	movs	r0, r3
 800cffa:	2310      	movs	r3, #16
 800cffc:	001a      	movs	r2, r3
 800cffe:	2100      	movs	r1, #0
 800d000:	f012 f98a 	bl	801f318 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d004:	4b2e      	ldr	r3, [pc, #184]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d006:	2280      	movs	r2, #128	@ 0x80
 800d008:	05d2      	lsls	r2, r2, #23
 800d00a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d00c:	4b2c      	ldr	r3, [pc, #176]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d00e:	2200      	movs	r2, #0
 800d010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d012:	4b2b      	ldr	r3, [pc, #172]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d014:	2200      	movs	r2, #0
 800d016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d018:	4b29      	ldr	r3, [pc, #164]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d01a:	4a2a      	ldr	r2, [pc, #168]	@ (800d0c4 <MX_TIM2_Init+0xe4>)
 800d01c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d01e:	4b28      	ldr	r3, [pc, #160]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d020:	2200      	movs	r2, #0
 800d022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d024:	4b26      	ldr	r3, [pc, #152]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d026:	2200      	movs	r2, #0
 800d028:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d02a:	4b25      	ldr	r3, [pc, #148]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d02c:	0018      	movs	r0, r3
 800d02e:	f008 fd47 	bl	8015ac0 <HAL_TIM_PWM_Init>
 800d032:	1e03      	subs	r3, r0, #0
 800d034:	d001      	beq.n	800d03a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d036:	f7fa ff4f 	bl	8007ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d03a:	2110      	movs	r1, #16
 800d03c:	187b      	adds	r3, r7, r1
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d042:	187b      	adds	r3, r7, r1
 800d044:	2200      	movs	r2, #0
 800d046:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d048:	187a      	adds	r2, r7, r1
 800d04a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d04c:	0011      	movs	r1, r2
 800d04e:	0018      	movs	r0, r3
 800d050:	f009 f854 	bl	80160fc <HAL_TIMEx_MasterConfigSynchronization>
 800d054:	1e03      	subs	r3, r0, #0
 800d056:	d001      	beq.n	800d05c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d058:	f7fa ff3e 	bl	8007ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d05c:	003b      	movs	r3, r7
 800d05e:	2260      	movs	r2, #96	@ 0x60
 800d060:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d062:	003b      	movs	r3, r7
 800d064:	2200      	movs	r2, #0
 800d066:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d068:	003b      	movs	r3, r7
 800d06a:	2200      	movs	r2, #0
 800d06c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d06e:	003b      	movs	r3, r7
 800d070:	2200      	movs	r2, #0
 800d072:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d074:	0039      	movs	r1, r7
 800d076:	4b12      	ldr	r3, [pc, #72]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d078:	2200      	movs	r2, #0
 800d07a:	0018      	movs	r0, r3
 800d07c:	f008 fdf2 	bl	8015c64 <HAL_TIM_PWM_ConfigChannel>
 800d080:	1e03      	subs	r3, r0, #0
 800d082:	d001      	beq.n	800d088 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d084:	f7fa ff28 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d088:	0039      	movs	r1, r7
 800d08a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d08c:	2208      	movs	r2, #8
 800d08e:	0018      	movs	r0, r3
 800d090:	f008 fde8 	bl	8015c64 <HAL_TIM_PWM_ConfigChannel>
 800d094:	1e03      	subs	r3, r0, #0
 800d096:	d001      	beq.n	800d09c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d098:	f7fa ff1e 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d09c:	0039      	movs	r1, r7
 800d09e:	4b08      	ldr	r3, [pc, #32]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d0a0:	220c      	movs	r2, #12
 800d0a2:	0018      	movs	r0, r3
 800d0a4:	f008 fdde 	bl	8015c64 <HAL_TIM_PWM_ConfigChannel>
 800d0a8:	1e03      	subs	r3, r0, #0
 800d0aa:	d001      	beq.n	800d0b0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d0ac:	f7fa ff14 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d0b0:	4b03      	ldr	r3, [pc, #12]	@ (800d0c0 <MX_TIM2_Init+0xe0>)
 800d0b2:	0018      	movs	r0, r3
 800d0b4:	f000 f8fe 	bl	800d2b4 <HAL_TIM_MspPostInit>

}
 800d0b8:	46c0      	nop			@ (mov r8, r8)
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	b006      	add	sp, #24
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	20002184 	.word	0x20002184
 800d0c4:	0000ffff 	.word	0x0000ffff

0800d0c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d0ce:	2310      	movs	r3, #16
 800d0d0:	18fb      	adds	r3, r7, r3
 800d0d2:	0018      	movs	r0, r3
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	001a      	movs	r2, r3
 800d0d8:	2100      	movs	r1, #0
 800d0da:	f012 f91d 	bl	801f318 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d0de:	003b      	movs	r3, r7
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	2310      	movs	r3, #16
 800d0e4:	001a      	movs	r2, r3
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	f012 f916 	bl	801f318 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d0ec:	4b32      	ldr	r3, [pc, #200]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d0ee:	4a33      	ldr	r2, [pc, #204]	@ (800d1bc <MX_TIM3_Init+0xf4>)
 800d0f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d0f2:	4b31      	ldr	r3, [pc, #196]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0f8:	4b2f      	ldr	r3, [pc, #188]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d0fe:	4b2e      	ldr	r3, [pc, #184]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d100:	4a2f      	ldr	r2, [pc, #188]	@ (800d1c0 <MX_TIM3_Init+0xf8>)
 800d102:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d104:	4b2c      	ldr	r3, [pc, #176]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d106:	2200      	movs	r2, #0
 800d108:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d10a:	4b2b      	ldr	r3, [pc, #172]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d110:	4b29      	ldr	r3, [pc, #164]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d112:	0018      	movs	r0, r3
 800d114:	f008 fcd4 	bl	8015ac0 <HAL_TIM_PWM_Init>
 800d118:	1e03      	subs	r3, r0, #0
 800d11a:	d001      	beq.n	800d120 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d11c:	f7fa fedc 	bl	8007ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d120:	2110      	movs	r1, #16
 800d122:	187b      	adds	r3, r7, r1
 800d124:	2200      	movs	r2, #0
 800d126:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d128:	187b      	adds	r3, r7, r1
 800d12a:	2200      	movs	r2, #0
 800d12c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d12e:	187a      	adds	r2, r7, r1
 800d130:	4b21      	ldr	r3, [pc, #132]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d132:	0011      	movs	r1, r2
 800d134:	0018      	movs	r0, r3
 800d136:	f008 ffe1 	bl	80160fc <HAL_TIMEx_MasterConfigSynchronization>
 800d13a:	1e03      	subs	r3, r0, #0
 800d13c:	d001      	beq.n	800d142 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d13e:	f7fa fecb 	bl	8007ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d142:	003b      	movs	r3, r7
 800d144:	2260      	movs	r2, #96	@ 0x60
 800d146:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d148:	003b      	movs	r3, r7
 800d14a:	2200      	movs	r2, #0
 800d14c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d14e:	003b      	movs	r3, r7
 800d150:	2200      	movs	r2, #0
 800d152:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d154:	003b      	movs	r3, r7
 800d156:	2200      	movs	r2, #0
 800d158:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d15a:	0039      	movs	r1, r7
 800d15c:	4b16      	ldr	r3, [pc, #88]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d15e:	2200      	movs	r2, #0
 800d160:	0018      	movs	r0, r3
 800d162:	f008 fd7f 	bl	8015c64 <HAL_TIM_PWM_ConfigChannel>
 800d166:	1e03      	subs	r3, r0, #0
 800d168:	d001      	beq.n	800d16e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d16a:	f7fa feb5 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d16e:	4b12      	ldr	r3, [pc, #72]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d170:	2104      	movs	r1, #4
 800d172:	0018      	movs	r0, r3
 800d174:	f009 f820 	bl	80161b8 <HAL_TIMEx_RemapConfig>
 800d178:	1e03      	subs	r3, r0, #0
 800d17a:	d001      	beq.n	800d180 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d17c:	f7fa feac 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d180:	0039      	movs	r1, r7
 800d182:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d184:	2204      	movs	r2, #4
 800d186:	0018      	movs	r0, r3
 800d188:	f008 fd6c 	bl	8015c64 <HAL_TIM_PWM_ConfigChannel>
 800d18c:	1e03      	subs	r3, r0, #0
 800d18e:	d001      	beq.n	800d194 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d190:	f7fa fea2 	bl	8007ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d194:	0039      	movs	r1, r7
 800d196:	4b08      	ldr	r3, [pc, #32]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d198:	2208      	movs	r2, #8
 800d19a:	0018      	movs	r0, r3
 800d19c:	f008 fd62 	bl	8015c64 <HAL_TIM_PWM_ConfigChannel>
 800d1a0:	1e03      	subs	r3, r0, #0
 800d1a2:	d001      	beq.n	800d1a8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d1a4:	f7fa fe98 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d1a8:	4b03      	ldr	r3, [pc, #12]	@ (800d1b8 <MX_TIM3_Init+0xf0>)
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	f000 f882 	bl	800d2b4 <HAL_TIM_MspPostInit>

}
 800d1b0:	46c0      	nop			@ (mov r8, r8)
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	b006      	add	sp, #24
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	200021c4 	.word	0x200021c4
 800d1bc:	40000400 	.word	0x40000400
 800d1c0:	0000ffff 	.word	0x0000ffff

0800d1c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d1ca:	003b      	movs	r3, r7
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	2308      	movs	r3, #8
 800d1d0:	001a      	movs	r2, r3
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	f012 f8a0 	bl	801f318 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d1d8:	4b15      	ldr	r3, [pc, #84]	@ (800d230 <MX_TIM6_Init+0x6c>)
 800d1da:	4a16      	ldr	r2, [pc, #88]	@ (800d234 <MX_TIM6_Init+0x70>)
 800d1dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d1de:	4b14      	ldr	r3, [pc, #80]	@ (800d230 <MX_TIM6_Init+0x6c>)
 800d1e0:	220a      	movs	r2, #10
 800d1e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d1e4:	4b12      	ldr	r3, [pc, #72]	@ (800d230 <MX_TIM6_Init+0x6c>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d1ea:	4b11      	ldr	r3, [pc, #68]	@ (800d230 <MX_TIM6_Init+0x6c>)
 800d1ec:	4a12      	ldr	r2, [pc, #72]	@ (800d238 <MX_TIM6_Init+0x74>)
 800d1ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d230 <MX_TIM6_Init+0x6c>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d230 <MX_TIM6_Init+0x6c>)
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f008 fbb9 	bl	8015970 <HAL_TIM_Base_Init>
 800d1fe:	1e03      	subs	r3, r0, #0
 800d200:	d001      	beq.n	800d206 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d202:	f7fa fe69 	bl	8007ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d206:	003b      	movs	r3, r7
 800d208:	2200      	movs	r2, #0
 800d20a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d20c:	003b      	movs	r3, r7
 800d20e:	2200      	movs	r2, #0
 800d210:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d212:	003a      	movs	r2, r7
 800d214:	4b06      	ldr	r3, [pc, #24]	@ (800d230 <MX_TIM6_Init+0x6c>)
 800d216:	0011      	movs	r1, r2
 800d218:	0018      	movs	r0, r3
 800d21a:	f008 ff6f 	bl	80160fc <HAL_TIMEx_MasterConfigSynchronization>
 800d21e:	1e03      	subs	r3, r0, #0
 800d220:	d001      	beq.n	800d226 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d222:	f7fa fe59 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d226:	46c0      	nop			@ (mov r8, r8)
 800d228:	46bd      	mov	sp, r7
 800d22a:	b002      	add	sp, #8
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	46c0      	nop			@ (mov r8, r8)
 800d230:	20002204 	.word	0x20002204
 800d234:	40001000 	.word	0x40001000
 800d238:	0000ffff 	.word	0x0000ffff

0800d23c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	2380      	movs	r3, #128	@ 0x80
 800d24a:	05db      	lsls	r3, r3, #23
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d106      	bne.n	800d25e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d250:	4b0a      	ldr	r3, [pc, #40]	@ (800d27c <HAL_TIM_PWM_MspInit+0x40>)
 800d252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d254:	4b09      	ldr	r3, [pc, #36]	@ (800d27c <HAL_TIM_PWM_MspInit+0x40>)
 800d256:	2101      	movs	r1, #1
 800d258:	430a      	orrs	r2, r1
 800d25a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d25c:	e00a      	b.n	800d274 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a07      	ldr	r2, [pc, #28]	@ (800d280 <HAL_TIM_PWM_MspInit+0x44>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d105      	bne.n	800d274 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d268:	4b04      	ldr	r3, [pc, #16]	@ (800d27c <HAL_TIM_PWM_MspInit+0x40>)
 800d26a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d26c:	4b03      	ldr	r3, [pc, #12]	@ (800d27c <HAL_TIM_PWM_MspInit+0x40>)
 800d26e:	2102      	movs	r1, #2
 800d270:	430a      	orrs	r2, r1
 800d272:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d274:	46c0      	nop			@ (mov r8, r8)
 800d276:	46bd      	mov	sp, r7
 800d278:	b002      	add	sp, #8
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	40021000 	.word	0x40021000
 800d280:	40000400 	.word	0x40000400

0800d284 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a06      	ldr	r2, [pc, #24]	@ (800d2ac <HAL_TIM_Base_MspInit+0x28>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d105      	bne.n	800d2a2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d296:	4b06      	ldr	r3, [pc, #24]	@ (800d2b0 <HAL_TIM_Base_MspInit+0x2c>)
 800d298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d29a:	4b05      	ldr	r3, [pc, #20]	@ (800d2b0 <HAL_TIM_Base_MspInit+0x2c>)
 800d29c:	2110      	movs	r1, #16
 800d29e:	430a      	orrs	r2, r1
 800d2a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d2a2:	46c0      	nop			@ (mov r8, r8)
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	b002      	add	sp, #8
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	46c0      	nop			@ (mov r8, r8)
 800d2ac:	40001000 	.word	0x40001000
 800d2b0:	40021000 	.word	0x40021000

0800d2b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d2b4:	b590      	push	{r4, r7, lr}
 800d2b6:	b08b      	sub	sp, #44	@ 0x2c
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2bc:	2414      	movs	r4, #20
 800d2be:	193b      	adds	r3, r7, r4
 800d2c0:	0018      	movs	r0, r3
 800d2c2:	2314      	movs	r3, #20
 800d2c4:	001a      	movs	r2, r3
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	f012 f826 	bl	801f318 <memset>
  if(timHandle->Instance==TIM2)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	2380      	movs	r3, #128	@ 0x80
 800d2d2:	05db      	lsls	r3, r3, #23
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d123      	bne.n	800d320 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2d8:	4b27      	ldr	r3, [pc, #156]	@ (800d378 <HAL_TIM_MspPostInit+0xc4>)
 800d2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2dc:	4b26      	ldr	r3, [pc, #152]	@ (800d378 <HAL_TIM_MspPostInit+0xc4>)
 800d2de:	2101      	movs	r1, #1
 800d2e0:	430a      	orrs	r2, r1
 800d2e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d2e4:	4b24      	ldr	r3, [pc, #144]	@ (800d378 <HAL_TIM_MspPostInit+0xc4>)
 800d2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	613b      	str	r3, [r7, #16]
 800d2ee:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d2f0:	0021      	movs	r1, r4
 800d2f2:	187b      	adds	r3, r7, r1
 800d2f4:	220d      	movs	r2, #13
 800d2f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2f8:	187b      	adds	r3, r7, r1
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2fe:	187b      	adds	r3, r7, r1
 800d300:	2200      	movs	r2, #0
 800d302:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d304:	187b      	adds	r3, r7, r1
 800d306:	2200      	movs	r2, #0
 800d308:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d30a:	187b      	adds	r3, r7, r1
 800d30c:	2202      	movs	r2, #2
 800d30e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d310:	187a      	adds	r2, r7, r1
 800d312:	23a0      	movs	r3, #160	@ 0xa0
 800d314:	05db      	lsls	r3, r3, #23
 800d316:	0011      	movs	r1, r2
 800d318:	0018      	movs	r0, r3
 800d31a:	f001 fed9 	bl	800f0d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d31e:	e027      	b.n	800d370 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a15      	ldr	r2, [pc, #84]	@ (800d37c <HAL_TIM_MspPostInit+0xc8>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d122      	bne.n	800d370 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d32a:	4b13      	ldr	r3, [pc, #76]	@ (800d378 <HAL_TIM_MspPostInit+0xc4>)
 800d32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d32e:	4b12      	ldr	r3, [pc, #72]	@ (800d378 <HAL_TIM_MspPostInit+0xc4>)
 800d330:	2104      	movs	r1, #4
 800d332:	430a      	orrs	r2, r1
 800d334:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d336:	4b10      	ldr	r3, [pc, #64]	@ (800d378 <HAL_TIM_MspPostInit+0xc4>)
 800d338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d33a:	2204      	movs	r2, #4
 800d33c:	4013      	ands	r3, r2
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d342:	2114      	movs	r1, #20
 800d344:	187b      	adds	r3, r7, r1
 800d346:	22e0      	movs	r2, #224	@ 0xe0
 800d348:	0052      	lsls	r2, r2, #1
 800d34a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d34c:	187b      	adds	r3, r7, r1
 800d34e:	2202      	movs	r2, #2
 800d350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d352:	187b      	adds	r3, r7, r1
 800d354:	2200      	movs	r2, #0
 800d356:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d358:	187b      	adds	r3, r7, r1
 800d35a:	2200      	movs	r2, #0
 800d35c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d35e:	187b      	adds	r3, r7, r1
 800d360:	2202      	movs	r2, #2
 800d362:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d364:	187b      	adds	r3, r7, r1
 800d366:	4a06      	ldr	r2, [pc, #24]	@ (800d380 <HAL_TIM_MspPostInit+0xcc>)
 800d368:	0019      	movs	r1, r3
 800d36a:	0010      	movs	r0, r2
 800d36c:	f001 feb0 	bl	800f0d0 <HAL_GPIO_Init>
}
 800d370:	46c0      	nop			@ (mov r8, r8)
 800d372:	46bd      	mov	sp, r7
 800d374:	b00b      	add	sp, #44	@ 0x2c
 800d376:	bd90      	pop	{r4, r7, pc}
 800d378:	40021000 	.word	0x40021000
 800d37c:	40000400 	.word	0x40000400
 800d380:	50000800 	.word	0x50000800

0800d384 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d388:	4b17      	ldr	r3, [pc, #92]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d38a:	4a18      	ldr	r2, [pc, #96]	@ (800d3ec <MX_LPUART1_UART_Init+0x68>)
 800d38c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d38e:	4b16      	ldr	r3, [pc, #88]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d390:	22e1      	movs	r2, #225	@ 0xe1
 800d392:	0252      	lsls	r2, r2, #9
 800d394:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d396:	4b14      	ldr	r3, [pc, #80]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d398:	2200      	movs	r2, #0
 800d39a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d39c:	4b12      	ldr	r3, [pc, #72]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d3a2:	4b11      	ldr	r3, [pc, #68]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d3a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3aa:	220c      	movs	r2, #12
 800d3ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3bc:	2218      	movs	r2, #24
 800d3be:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d3c0:	4b09      	ldr	r3, [pc, #36]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3c2:	2280      	movs	r2, #128	@ 0x80
 800d3c4:	0212      	lsls	r2, r2, #8
 800d3c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d3c8:	4b07      	ldr	r3, [pc, #28]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3ca:	2280      	movs	r2, #128	@ 0x80
 800d3cc:	0152      	lsls	r2, r2, #5
 800d3ce:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d3d0:	4b05      	ldr	r3, [pc, #20]	@ (800d3e8 <MX_LPUART1_UART_Init+0x64>)
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f008 ff0e 	bl	80161f4 <HAL_UART_Init>
 800d3d8:	1e03      	subs	r3, r0, #0
 800d3da:	d001      	beq.n	800d3e0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d3dc:	f7fa fd7c 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d3e0:	46c0      	nop			@ (mov r8, r8)
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	46c0      	nop			@ (mov r8, r8)
 800d3e8:	20002244 	.word	0x20002244
 800d3ec:	40004800 	.word	0x40004800

0800d3f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d3f4:	4b16      	ldr	r3, [pc, #88]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d3f6:	4a17      	ldr	r2, [pc, #92]	@ (800d454 <MX_USART1_UART_Init+0x64>)
 800d3f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d3fa:	4b15      	ldr	r3, [pc, #84]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d3fc:	22e1      	movs	r2, #225	@ 0xe1
 800d3fe:	0252      	lsls	r2, r2, #9
 800d400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d402:	4b13      	ldr	r3, [pc, #76]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d404:	2200      	movs	r2, #0
 800d406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d408:	4b11      	ldr	r3, [pc, #68]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d40e:	4b10      	ldr	r3, [pc, #64]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d410:	2200      	movs	r2, #0
 800d412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d414:	4b0e      	ldr	r3, [pc, #56]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d416:	220c      	movs	r2, #12
 800d418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d41a:	4b0d      	ldr	r3, [pc, #52]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d420:	4b0b      	ldr	r3, [pc, #44]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d422:	2200      	movs	r2, #0
 800d424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d426:	4b0a      	ldr	r3, [pc, #40]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d428:	2200      	movs	r2, #0
 800d42a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d42c:	4b08      	ldr	r3, [pc, #32]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d42e:	2208      	movs	r2, #8
 800d430:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d432:	4b07      	ldr	r3, [pc, #28]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d434:	2280      	movs	r2, #128	@ 0x80
 800d436:	0212      	lsls	r2, r2, #8
 800d438:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d43a:	4b05      	ldr	r3, [pc, #20]	@ (800d450 <MX_USART1_UART_Init+0x60>)
 800d43c:	0018      	movs	r0, r3
 800d43e:	f008 fed9 	bl	80161f4 <HAL_UART_Init>
 800d442:	1e03      	subs	r3, r0, #0
 800d444:	d001      	beq.n	800d44a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d446:	f7fa fd47 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d44a:	46c0      	nop			@ (mov r8, r8)
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	200022fc 	.word	0x200022fc
 800d454:	40013800 	.word	0x40013800

0800d458 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d45c:	4b14      	ldr	r3, [pc, #80]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d45e:	4a15      	ldr	r2, [pc, #84]	@ (800d4b4 <MX_USART4_UART_Init+0x5c>)
 800d460:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d462:	4b13      	ldr	r3, [pc, #76]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d464:	22e1      	movs	r2, #225	@ 0xe1
 800d466:	0252      	lsls	r2, r2, #9
 800d468:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d46a:	4b11      	ldr	r3, [pc, #68]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d46c:	2200      	movs	r2, #0
 800d46e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d470:	4b0f      	ldr	r3, [pc, #60]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d472:	2200      	movs	r2, #0
 800d474:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d476:	4b0e      	ldr	r3, [pc, #56]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d478:	2200      	movs	r2, #0
 800d47a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d47c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d47e:	220c      	movs	r2, #12
 800d480:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d482:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d484:	2200      	movs	r2, #0
 800d486:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d488:	4b09      	ldr	r3, [pc, #36]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d48e:	4b08      	ldr	r3, [pc, #32]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d490:	2200      	movs	r2, #0
 800d492:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d494:	4b06      	ldr	r3, [pc, #24]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d496:	2200      	movs	r2, #0
 800d498:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d49a:	4b05      	ldr	r3, [pc, #20]	@ (800d4b0 <MX_USART4_UART_Init+0x58>)
 800d49c:	0018      	movs	r0, r3
 800d49e:	f008 fea9 	bl	80161f4 <HAL_UART_Init>
 800d4a2:	1e03      	subs	r3, r0, #0
 800d4a4:	d001      	beq.n	800d4aa <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d4a6:	f7fa fd17 	bl	8007ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d4aa:	46c0      	nop			@ (mov r8, r8)
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	200023b4 	.word	0x200023b4
 800d4b4:	40004c00 	.word	0x40004c00

0800d4b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d4b8:	b590      	push	{r4, r7, lr}
 800d4ba:	b08d      	sub	sp, #52	@ 0x34
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4c0:	241c      	movs	r4, #28
 800d4c2:	193b      	adds	r3, r7, r4
 800d4c4:	0018      	movs	r0, r3
 800d4c6:	2314      	movs	r3, #20
 800d4c8:	001a      	movs	r2, r3
 800d4ca:	2100      	movs	r1, #0
 800d4cc:	f011 ff24 	bl	801f318 <memset>
  if(uartHandle->Instance==LPUART1)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a8b      	ldr	r2, [pc, #556]	@ (800d704 <HAL_UART_MspInit+0x24c>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d129      	bne.n	800d52e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d4da:	4b8b      	ldr	r3, [pc, #556]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d4dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4de:	4b8a      	ldr	r3, [pc, #552]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d4e0:	2180      	movs	r1, #128	@ 0x80
 800d4e2:	02c9      	lsls	r1, r1, #11
 800d4e4:	430a      	orrs	r2, r1
 800d4e6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4e8:	4b87      	ldr	r3, [pc, #540]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ec:	4b86      	ldr	r3, [pc, #536]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d4ee:	2104      	movs	r1, #4
 800d4f0:	430a      	orrs	r2, r1
 800d4f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d4f4:	4b84      	ldr	r3, [pc, #528]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f8:	2204      	movs	r2, #4
 800d4fa:	4013      	ands	r3, r2
 800d4fc:	61bb      	str	r3, [r7, #24]
 800d4fe:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d500:	0021      	movs	r1, r4
 800d502:	187b      	adds	r3, r7, r1
 800d504:	2203      	movs	r2, #3
 800d506:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d508:	187b      	adds	r3, r7, r1
 800d50a:	2202      	movs	r2, #2
 800d50c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d50e:	187b      	adds	r3, r7, r1
 800d510:	2200      	movs	r2, #0
 800d512:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d514:	187b      	adds	r3, r7, r1
 800d516:	2203      	movs	r2, #3
 800d518:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d51a:	187b      	adds	r3, r7, r1
 800d51c:	2206      	movs	r2, #6
 800d51e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d520:	187b      	adds	r3, r7, r1
 800d522:	4a7a      	ldr	r2, [pc, #488]	@ (800d70c <HAL_UART_MspInit+0x254>)
 800d524:	0019      	movs	r1, r3
 800d526:	0010      	movs	r0, r2
 800d528:	f001 fdd2 	bl	800f0d0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d52c:	e0e5      	b.n	800d6fa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4a77      	ldr	r2, [pc, #476]	@ (800d710 <HAL_UART_MspInit+0x258>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d133      	bne.n	800d5a0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d538:	4b73      	ldr	r3, [pc, #460]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d53a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d53c:	4b72      	ldr	r3, [pc, #456]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d53e:	2180      	movs	r1, #128	@ 0x80
 800d540:	01c9      	lsls	r1, r1, #7
 800d542:	430a      	orrs	r2, r1
 800d544:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d546:	4b70      	ldr	r3, [pc, #448]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54a:	4b6f      	ldr	r3, [pc, #444]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d54c:	2101      	movs	r1, #1
 800d54e:	430a      	orrs	r2, r1
 800d550:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d552:	4b6d      	ldr	r3, [pc, #436]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d556:	2201      	movs	r2, #1
 800d558:	4013      	ands	r3, r2
 800d55a:	617b      	str	r3, [r7, #20]
 800d55c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d55e:	211c      	movs	r1, #28
 800d560:	187b      	adds	r3, r7, r1
 800d562:	22c0      	movs	r2, #192	@ 0xc0
 800d564:	00d2      	lsls	r2, r2, #3
 800d566:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d568:	187b      	adds	r3, r7, r1
 800d56a:	2202      	movs	r2, #2
 800d56c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d56e:	187b      	adds	r3, r7, r1
 800d570:	2200      	movs	r2, #0
 800d572:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d574:	187b      	adds	r3, r7, r1
 800d576:	2203      	movs	r2, #3
 800d578:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d57a:	187b      	adds	r3, r7, r1
 800d57c:	2204      	movs	r2, #4
 800d57e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d580:	187a      	adds	r2, r7, r1
 800d582:	23a0      	movs	r3, #160	@ 0xa0
 800d584:	05db      	lsls	r3, r3, #23
 800d586:	0011      	movs	r1, r2
 800d588:	0018      	movs	r0, r3
 800d58a:	f001 fda1 	bl	800f0d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d58e:	2200      	movs	r2, #0
 800d590:	2100      	movs	r1, #0
 800d592:	201b      	movs	r0, #27
 800d594:	f001 f94e 	bl	800e834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d598:	201b      	movs	r0, #27
 800d59a:	f001 f960 	bl	800e85e <HAL_NVIC_EnableIRQ>
}
 800d59e:	e0ac      	b.n	800d6fa <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a5b      	ldr	r2, [pc, #364]	@ (800d714 <HAL_UART_MspInit+0x25c>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d000      	beq.n	800d5ac <HAL_UART_MspInit+0xf4>
 800d5aa:	e0a6      	b.n	800d6fa <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d5ac:	4b56      	ldr	r3, [pc, #344]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5b0:	4b55      	ldr	r3, [pc, #340]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5b2:	2180      	movs	r1, #128	@ 0x80
 800d5b4:	0309      	lsls	r1, r1, #12
 800d5b6:	430a      	orrs	r2, r1
 800d5b8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5ba:	4b53      	ldr	r3, [pc, #332]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5be:	4b52      	ldr	r3, [pc, #328]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	430a      	orrs	r2, r1
 800d5c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d5c6:	4b50      	ldr	r3, [pc, #320]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	4013      	ands	r3, r2
 800d5ce:	613b      	str	r3, [r7, #16]
 800d5d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d5d2:	4b4d      	ldr	r3, [pc, #308]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d6:	4b4c      	ldr	r3, [pc, #304]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5d8:	2104      	movs	r1, #4
 800d5da:	430a      	orrs	r2, r1
 800d5dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d5de:	4b4a      	ldr	r3, [pc, #296]	@ (800d708 <HAL_UART_MspInit+0x250>)
 800d5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5e2:	2204      	movs	r2, #4
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d5ea:	241c      	movs	r4, #28
 800d5ec:	193b      	adds	r3, r7, r4
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5f2:	193b      	adds	r3, r7, r4
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5f8:	193b      	adds	r3, r7, r4
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5fe:	193b      	adds	r3, r7, r4
 800d600:	2203      	movs	r2, #3
 800d602:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d604:	193b      	adds	r3, r7, r4
 800d606:	2206      	movs	r2, #6
 800d608:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d60a:	193a      	adds	r2, r7, r4
 800d60c:	23a0      	movs	r3, #160	@ 0xa0
 800d60e:	05db      	lsls	r3, r3, #23
 800d610:	0011      	movs	r1, r2
 800d612:	0018      	movs	r0, r3
 800d614:	f001 fd5c 	bl	800f0d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d618:	0021      	movs	r1, r4
 800d61a:	187b      	adds	r3, r7, r1
 800d61c:	2280      	movs	r2, #128	@ 0x80
 800d61e:	00d2      	lsls	r2, r2, #3
 800d620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d622:	187b      	adds	r3, r7, r1
 800d624:	2202      	movs	r2, #2
 800d626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d628:	187b      	adds	r3, r7, r1
 800d62a:	2200      	movs	r2, #0
 800d62c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d62e:	187b      	adds	r3, r7, r1
 800d630:	2203      	movs	r2, #3
 800d632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d634:	187b      	adds	r3, r7, r1
 800d636:	2206      	movs	r2, #6
 800d638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d63a:	187b      	adds	r3, r7, r1
 800d63c:	4a33      	ldr	r2, [pc, #204]	@ (800d70c <HAL_UART_MspInit+0x254>)
 800d63e:	0019      	movs	r1, r3
 800d640:	0010      	movs	r0, r2
 800d642:	f001 fd45 	bl	800f0d0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d646:	4b34      	ldr	r3, [pc, #208]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d648:	4a34      	ldr	r2, [pc, #208]	@ (800d71c <HAL_UART_MspInit+0x264>)
 800d64a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d64c:	4b32      	ldr	r3, [pc, #200]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d64e:	220c      	movs	r2, #12
 800d650:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d652:	4b31      	ldr	r3, [pc, #196]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d654:	2200      	movs	r2, #0
 800d656:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d658:	4b2f      	ldr	r3, [pc, #188]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d65e:	4b2e      	ldr	r3, [pc, #184]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d660:	2280      	movs	r2, #128	@ 0x80
 800d662:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d664:	4b2c      	ldr	r3, [pc, #176]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d666:	2200      	movs	r2, #0
 800d668:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d66a:	4b2b      	ldr	r3, [pc, #172]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d66c:	2200      	movs	r2, #0
 800d66e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d670:	4b29      	ldr	r3, [pc, #164]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d672:	2220      	movs	r2, #32
 800d674:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d676:	4b28      	ldr	r3, [pc, #160]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d678:	2200      	movs	r2, #0
 800d67a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d67c:	4b26      	ldr	r3, [pc, #152]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d67e:	0018      	movs	r0, r3
 800d680:	f001 f90a 	bl	800e898 <HAL_DMA_Init>
 800d684:	1e03      	subs	r3, r0, #0
 800d686:	d001      	beq.n	800d68c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d688:	f7fa fc26 	bl	8007ed8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a22      	ldr	r2, [pc, #136]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d690:	675a      	str	r2, [r3, #116]	@ 0x74
 800d692:	4b21      	ldr	r3, [pc, #132]	@ (800d718 <HAL_UART_MspInit+0x260>)
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d698:	4b21      	ldr	r3, [pc, #132]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d69a:	4a22      	ldr	r2, [pc, #136]	@ (800d724 <HAL_UART_MspInit+0x26c>)
 800d69c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d69e:	4b20      	ldr	r3, [pc, #128]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6a0:	220c      	movs	r2, #12
 800d6a2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d6a4:	4b1e      	ldr	r3, [pc, #120]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6a6:	2210      	movs	r2, #16
 800d6a8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d6aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d6b0:	4b1b      	ldr	r3, [pc, #108]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6b2:	2280      	movs	r2, #128	@ 0x80
 800d6b4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d6b6:	4b1a      	ldr	r3, [pc, #104]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d6bc:	4b18      	ldr	r3, [pc, #96]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d6c2:	4b17      	ldr	r3, [pc, #92]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d6c8:	4b15      	ldr	r3, [pc, #84]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d6ce:	4b14      	ldr	r3, [pc, #80]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6d0:	0018      	movs	r0, r3
 800d6d2:	f001 f8e1 	bl	800e898 <HAL_DMA_Init>
 800d6d6:	1e03      	subs	r3, r0, #0
 800d6d8:	d001      	beq.n	800d6de <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d6da:	f7fa fbfd 	bl	8007ed8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a0f      	ldr	r2, [pc, #60]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6e2:	671a      	str	r2, [r3, #112]	@ 0x70
 800d6e4:	4b0e      	ldr	r3, [pc, #56]	@ (800d720 <HAL_UART_MspInit+0x268>)
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	200e      	movs	r0, #14
 800d6f0:	f001 f8a0 	bl	800e834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d6f4:	200e      	movs	r0, #14
 800d6f6:	f001 f8b2 	bl	800e85e <HAL_NVIC_EnableIRQ>
}
 800d6fa:	46c0      	nop			@ (mov r8, r8)
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	b00d      	add	sp, #52	@ 0x34
 800d700:	bd90      	pop	{r4, r7, pc}
 800d702:	46c0      	nop			@ (mov r8, r8)
 800d704:	40004800 	.word	0x40004800
 800d708:	40021000 	.word	0x40021000
 800d70c:	50000800 	.word	0x50000800
 800d710:	40013800 	.word	0x40013800
 800d714:	40004c00 	.word	0x40004c00
 800d718:	2000246c 	.word	0x2000246c
 800d71c:	4002006c 	.word	0x4002006c
 800d720:	200024b4 	.word	0x200024b4
 800d724:	40020080 	.word	0x40020080

0800d728 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800d730:	f000 fbee 	bl	800df10 <HAL_GetTick>
 800d734:	0003      	movs	r3, r0
 800d736:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800d738:	4b1c      	ldr	r3, [pc, #112]	@ (800d7ac <TimestampIsReached+0x84>)
 800d73a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d307      	bcc.n	800d754 <TimestampIsReached+0x2c>
 800d744:	697a      	ldr	r2, [r7, #20]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d901      	bls.n	800d754 <TimestampIsReached+0x2c>
 800d750:	2201      	movs	r2, #1
 800d752:	e000      	b.n	800d756 <TimestampIsReached+0x2e>
 800d754:	2200      	movs	r2, #0
 800d756:	230f      	movs	r3, #15
 800d758:	18fb      	adds	r3, r7, r3
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	781a      	ldrb	r2, [r3, #0]
 800d75e:	2101      	movs	r1, #1
 800d760:	400a      	ands	r2, r1
 800d762:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800d764:	697a      	ldr	r2, [r7, #20]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d207      	bcs.n	800d77c <TimestampIsReached+0x54>
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	429a      	cmp	r2, r3
 800d776:	d201      	bcs.n	800d77c <TimestampIsReached+0x54>
 800d778:	2201      	movs	r2, #1
 800d77a:	e000      	b.n	800d77e <TimestampIsReached+0x56>
 800d77c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800d77e:	200e      	movs	r0, #14
 800d780:	183b      	adds	r3, r7, r0
 800d782:	701a      	strb	r2, [r3, #0]
 800d784:	781a      	ldrb	r2, [r3, #0]
 800d786:	2101      	movs	r1, #1
 800d788:	400a      	ands	r2, r1
 800d78a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800d78c:	230f      	movs	r3, #15
 800d78e:	18fb      	adds	r3, r7, r3
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d103      	bne.n	800d79e <TimestampIsReached+0x76>
 800d796:	183b      	adds	r3, r7, r0
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e000      	b.n	800d7a4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	0018      	movs	r0, r3
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	b006      	add	sp, #24
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	7fffffff 	.word	0x7fffffff

0800d7b0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800d7b8:	f000 fbaa 	bl	800df10 <HAL_GetTick>
 800d7bc:	0002      	movs	r2, r0
 800d7be:	4904      	ldr	r1, [pc, #16]	@ (800d7d0 <AddTimestamp+0x20>)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	0018      	movs	r0, r3
 800d7c4:	f011 fc64 	bl	801f090 <siprintf>
}
 800d7c8:	46c0      	nop			@ (mov r8, r8)
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	b002      	add	sp, #8
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	08023a78 	.word	0x08023a78

0800d7d4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800d7d4:	b40c      	push	{r2, r3}
 800d7d6:	b5b0      	push	{r4, r5, r7, lr}
 800d7d8:	b0a4      	sub	sp, #144	@ 0x90
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	0002      	movs	r2, r0
 800d7de:	6039      	str	r1, [r7, #0]
 800d7e0:	1dfb      	adds	r3, r7, #7
 800d7e2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800d7e4:	4b23      	ldr	r3, [pc, #140]	@ (800d874 <CreateLine+0xa0>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	1dfa      	adds	r2, r7, #7
 800d7ea:	7812      	ldrb	r2, [r2, #0]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d839      	bhi.n	800d864 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	4921      	ldr	r1, [pc, #132]	@ (800d878 <CreateLine+0xa4>)
 800d7f4:	240c      	movs	r4, #12
 800d7f6:	193b      	adds	r3, r7, r4
 800d7f8:	0018      	movs	r0, r3
 800d7fa:	f011 fc49 	bl	801f090 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800d7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800d874 <CreateLine+0xa0>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d909      	bls.n	800d81a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800d806:	193b      	adds	r3, r7, r4
 800d808:	0018      	movs	r0, r3
 800d80a:	f7f2 fcaf 	bl	800016c <strlen>
 800d80e:	0002      	movs	r2, r0
 800d810:	193b      	adds	r3, r7, r4
 800d812:	189b      	adds	r3, r3, r2
 800d814:	0018      	movs	r0, r3
 800d816:	f7ff ffcb 	bl	800d7b0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800d81a:	240c      	movs	r4, #12
 800d81c:	193b      	adds	r3, r7, r4
 800d81e:	0018      	movs	r0, r3
 800d820:	f7f2 fca4 	bl	800016c <strlen>
 800d824:	0003      	movs	r3, r0
 800d826:	218c      	movs	r1, #140	@ 0x8c
 800d828:	187a      	adds	r2, r7, r1
 800d82a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800d82c:	239c      	movs	r3, #156	@ 0x9c
 800d82e:	2508      	movs	r5, #8
 800d830:	195b      	adds	r3, r3, r5
 800d832:	19db      	adds	r3, r3, r7
 800d834:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800d836:	193a      	adds	r2, r7, r4
 800d838:	187b      	adds	r3, r7, r1
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	18d0      	adds	r0, r2, r3
 800d83e:	187b      	adds	r3, r7, r1
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2280      	movs	r2, #128	@ 0x80
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	0019      	movs	r1, r3
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	2298      	movs	r2, #152	@ 0x98
 800d84c:	1952      	adds	r2, r2, r5
 800d84e:	19d2      	adds	r2, r2, r7
 800d850:	6812      	ldr	r2, [r2, #0]
 800d852:	f011 fcb5 	bl	801f1c0 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800d856:	193a      	adds	r2, r7, r4
 800d858:	4b08      	ldr	r3, [pc, #32]	@ (800d87c <CreateLine+0xa8>)
 800d85a:	0011      	movs	r1, r2
 800d85c:	0018      	movs	r0, r3
 800d85e:	f011 fba7 	bl	801efb0 <iprintf>
 800d862:	e000      	b.n	800d866 <CreateLine+0x92>
    return;
 800d864:	46c0      	nop			@ (mov r8, r8)
}
 800d866:	46bd      	mov	sp, r7
 800d868:	b024      	add	sp, #144	@ 0x90
 800d86a:	bcb0      	pop	{r4, r5, r7}
 800d86c:	bc08      	pop	{r3}
 800d86e:	b002      	add	sp, #8
 800d870:	4718      	bx	r3
 800d872:	46c0      	nop			@ (mov r8, r8)
 800d874:	200000cc 	.word	0x200000cc
 800d878:	08023a84 	.word	0x08023a84
 800d87c:	08023a88 	.word	0x08023a88

0800d880 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	b29a      	uxth	r2, r3
 800d890:	68b9      	ldr	r1, [r7, #8]
 800d892:	4804      	ldr	r0, [pc, #16]	@ (800d8a4 <_write+0x24>)
 800d894:	2364      	movs	r3, #100	@ 0x64
 800d896:	f008 fd13 	bl	80162c0 <HAL_UART_Transmit>
  return count;
 800d89a:	687b      	ldr	r3, [r7, #4]
}
 800d89c:	0018      	movs	r0, r3
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	b004      	add	sp, #16
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	200022fc 	.word	0x200022fc

0800d8a8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	0002      	movs	r2, r0
 800d8b0:	1dfb      	adds	r3, r7, #7
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	4b03      	ldr	r3, [pc, #12]	@ (800d8c4 <SetVerboseLevel+0x1c>)
 800d8b6:	1dfa      	adds	r2, r7, #7
 800d8b8:	7812      	ldrb	r2, [r2, #0]
 800d8ba:	701a      	strb	r2, [r3, #0]
 800d8bc:	46c0      	nop			@ (mov r8, r8)
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	b002      	add	sp, #8
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	200000cc 	.word	0x200000cc

0800d8c8 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d8cc:	f000 fb20 	bl	800df10 <HAL_GetTick>
 800d8d0:	0003      	movs	r3, r0
}
 800d8d2:	0018      	movs	r0, r3
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800d8de:	4a0f      	ldr	r2, [pc, #60]	@ (800d91c <BinaryReleaseInfo+0x44>)
 800d8e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d920 <BinaryReleaseInfo+0x48>)
 800d8e2:	0019      	movs	r1, r3
 800d8e4:	2002      	movs	r0, #2
 800d8e6:	f7ff ff75 	bl	800d7d4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800d8ea:	480e      	ldr	r0, [pc, #56]	@ (800d924 <BinaryReleaseInfo+0x4c>)
 800d8ec:	4a0e      	ldr	r2, [pc, #56]	@ (800d928 <BinaryReleaseInfo+0x50>)
 800d8ee:	490c      	ldr	r1, [pc, #48]	@ (800d920 <BinaryReleaseInfo+0x48>)
 800d8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d92c <BinaryReleaseInfo+0x54>)
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	0003      	movs	r3, r0
 800d8f6:	2002      	movs	r0, #2
 800d8f8:	f7ff ff6c 	bl	800d7d4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800d8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d930 <BinaryReleaseInfo+0x58>)
 800d8fe:	4a0d      	ldr	r2, [pc, #52]	@ (800d934 <BinaryReleaseInfo+0x5c>)
 800d900:	4907      	ldr	r1, [pc, #28]	@ (800d920 <BinaryReleaseInfo+0x48>)
 800d902:	2002      	movs	r0, #2
 800d904:	f7ff ff66 	bl	800d7d4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800d908:	4b0b      	ldr	r3, [pc, #44]	@ (800d938 <BinaryReleaseInfo+0x60>)
 800d90a:	4a0c      	ldr	r2, [pc, #48]	@ (800d93c <BinaryReleaseInfo+0x64>)
 800d90c:	4904      	ldr	r1, [pc, #16]	@ (800d920 <BinaryReleaseInfo+0x48>)
 800d90e:	2002      	movs	r0, #2
 800d910:	f7ff ff60 	bl	800d7d4 <CreateLine>
}
 800d914:	46c0      	nop			@ (mov r8, r8)
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	46c0      	nop			@ (mov r8, r8)
 800d91c:	08023a90 	.word	0x08023a90
 800d920:	08023abc 	.word	0x08023abc
 800d924:	08023ac0 	.word	0x08023ac0
 800d928:	08023acc 	.word	0x08023acc
 800d92c:	08023ae0 	.word	0x08023ae0
 800d930:	08023aec 	.word	0x08023aec
 800d934:	08023af4 	.word	0x08023af4
 800d938:	08023afc 	.word	0x08023afc
 800d93c:	08023b08 	.word	0x08023b08

0800d940 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	68f9      	ldr	r1, [r7, #12]
 800d952:	4803      	ldr	r0, [pc, #12]	@ (800d960 <errorHandler+0x20>)
 800d954:	f011 fb2c 	bl	801efb0 <iprintf>
//    while (true)
//    {
//    }
}
 800d958:	46c0      	nop			@ (mov r8, r8)
 800d95a:	46bd      	mov	sp, r7
 800d95c:	b004      	add	sp, #16
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	08023b20 	.word	0x08023b20

0800d964 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d964:	b590      	push	{r4, r7, lr}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6039      	str	r1, [r7, #0]
 800d96c:	0011      	movs	r1, r2
 800d96e:	1dfb      	adds	r3, r7, #7
 800d970:	1c02      	adds	r2, r0, #0
 800d972:	701a      	strb	r2, [r3, #0]
 800d974:	1dbb      	adds	r3, r7, #6
 800d976:	1c0a      	adds	r2, r1, #0
 800d978:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800d97a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a4 <ReadRegister+0x40>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00a      	beq.n	800d998 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800d982:	4b08      	ldr	r3, [pc, #32]	@ (800d9a4 <ReadRegister+0x40>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	1dba      	adds	r2, r7, #6
 800d988:	7814      	ldrb	r4, [r2, #0]
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	1dfa      	adds	r2, r7, #7
 800d98e:	7810      	ldrb	r0, [r2, #0]
 800d990:	0022      	movs	r2, r4
 800d992:	4798      	blx	r3
 800d994:	0003      	movs	r3, r0
 800d996:	e000      	b.n	800d99a <ReadRegister+0x36>
	}
	return false;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	0018      	movs	r0, r3
 800d99c:	46bd      	mov	sp, r7
 800d99e:	b003      	add	sp, #12
 800d9a0:	bd90      	pop	{r4, r7, pc}
 800d9a2:	46c0      	nop			@ (mov r8, r8)
 800d9a4:	200024fc 	.word	0x200024fc

0800d9a8 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d9a8:	b590      	push	{r4, r7, lr}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6039      	str	r1, [r7, #0]
 800d9b0:	0011      	movs	r1, r2
 800d9b2:	1dfb      	adds	r3, r7, #7
 800d9b4:	1c02      	adds	r2, r0, #0
 800d9b6:	701a      	strb	r2, [r3, #0]
 800d9b8:	1dbb      	adds	r3, r7, #6
 800d9ba:	1c0a      	adds	r2, r1, #0
 800d9bc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d9be:	4b0a      	ldr	r3, [pc, #40]	@ (800d9e8 <WriteRegister+0x40>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00a      	beq.n	800d9dc <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800d9c6:	4b08      	ldr	r3, [pc, #32]	@ (800d9e8 <WriteRegister+0x40>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	1dba      	adds	r2, r7, #6
 800d9cc:	7814      	ldrb	r4, [r2, #0]
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	1dfa      	adds	r2, r7, #7
 800d9d2:	7810      	ldrb	r0, [r2, #0]
 800d9d4:	0022      	movs	r2, r4
 800d9d6:	4798      	blx	r3
 800d9d8:	0003      	movs	r3, r0
 800d9da:	e000      	b.n	800d9de <WriteRegister+0x36>
  }
  return false;
 800d9dc:	2300      	movs	r3, #0
}
 800d9de:	0018      	movs	r0, r3
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	b003      	add	sp, #12
 800d9e4:	bd90      	pop	{r4, r7, pc}
 800d9e6:	46c0      	nop			@ (mov r8, r8)
 800d9e8:	20002500 	.word	0x20002500

0800d9ec <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	000a      	movs	r2, r1
 800d9f6:	1cfb      	adds	r3, r7, #3
 800d9f8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800d9fa:	230f      	movs	r3, #15
 800d9fc:	18fb      	adds	r3, r7, r3
 800d9fe:	22ff      	movs	r2, #255	@ 0xff
 800da00:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800da02:	230e      	movs	r3, #14
 800da04:	18fb      	adds	r3, r7, r3
 800da06:	2200      	movs	r2, #0
 800da08:	701a      	strb	r2, [r3, #0]
 800da0a:	e037      	b.n	800da7c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800da0c:	230e      	movs	r3, #14
 800da0e:	18fb      	adds	r3, r7, r3
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	18d3      	adds	r3, r2, r3
 800da16:	7819      	ldrb	r1, [r3, #0]
 800da18:	220f      	movs	r2, #15
 800da1a:	18bb      	adds	r3, r7, r2
 800da1c:	18ba      	adds	r2, r7, r2
 800da1e:	7812      	ldrb	r2, [r2, #0]
 800da20:	404a      	eors	r2, r1
 800da22:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800da24:	230d      	movs	r3, #13
 800da26:	18fb      	adds	r3, r7, r3
 800da28:	2200      	movs	r2, #0
 800da2a:	701a      	strb	r2, [r3, #0]
 800da2c:	e01b      	b.n	800da66 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800da2e:	210f      	movs	r1, #15
 800da30:	187b      	adds	r3, r7, r1
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	b25b      	sxtb	r3, r3
 800da36:	2b00      	cmp	r3, #0
 800da38:	da09      	bge.n	800da4e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800da3a:	187b      	adds	r3, r7, r1
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	005b      	lsls	r3, r3, #1
 800da40:	b25b      	sxtb	r3, r3
 800da42:	2231      	movs	r2, #49	@ 0x31
 800da44:	4053      	eors	r3, r2
 800da46:	b25a      	sxtb	r2, r3
 800da48:	187b      	adds	r3, r7, r1
 800da4a:	701a      	strb	r2, [r3, #0]
 800da4c:	e005      	b.n	800da5a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800da4e:	230f      	movs	r3, #15
 800da50:	18fa      	adds	r2, r7, r3
 800da52:	18fb      	adds	r3, r7, r3
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	18db      	adds	r3, r3, r3
 800da58:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800da5a:	210d      	movs	r1, #13
 800da5c:	187b      	adds	r3, r7, r1
 800da5e:	781a      	ldrb	r2, [r3, #0]
 800da60:	187b      	adds	r3, r7, r1
 800da62:	3201      	adds	r2, #1
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	230d      	movs	r3, #13
 800da68:	18fb      	adds	r3, r7, r3
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	2b07      	cmp	r3, #7
 800da6e:	d9de      	bls.n	800da2e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800da70:	210e      	movs	r1, #14
 800da72:	187b      	adds	r3, r7, r1
 800da74:	781a      	ldrb	r2, [r3, #0]
 800da76:	187b      	adds	r3, r7, r1
 800da78:	3201      	adds	r2, #1
 800da7a:	701a      	strb	r2, [r3, #0]
 800da7c:	230e      	movs	r3, #14
 800da7e:	18fa      	adds	r2, r7, r3
 800da80:	1cfb      	adds	r3, r7, #3
 800da82:	7812      	ldrb	r2, [r2, #0]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d3c0      	bcc.n	800da0c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800da8a:	230f      	movs	r3, #15
 800da8c:	18fb      	adds	r3, r7, r3
 800da8e:	781b      	ldrb	r3, [r3, #0]
}
 800da90:	0018      	movs	r0, r3
 800da92:	46bd      	mov	sp, r7
 800da94:	b004      	add	sp, #16
 800da96:	bd80      	pop	{r7, pc}

0800da98 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800daa2:	4b0a      	ldr	r3, [pc, #40]	@ (800dacc <HIDS_Init+0x34>)
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800daa8:	4b09      	ldr	r3, [pc, #36]	@ (800dad0 <HIDS_Init+0x38>)
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800daae:	4b09      	ldr	r3, [pc, #36]	@ (800dad4 <HIDS_Init+0x3c>)
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	0018      	movs	r0, r3
 800dab4:	f000 f8da 	bl	800dc6c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800dab8:	4b07      	ldr	r3, [pc, #28]	@ (800dad8 <HIDS_Init+0x40>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	0018      	movs	r0, r3
 800dabe:	f000 f82b 	bl	800db18 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800dac2:	46c0      	nop			@ (mov r8, r8)
 800dac4:	46bd      	mov	sp, r7
 800dac6:	b002      	add	sp, #8
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	46c0      	nop			@ (mov r8, r8)
 800dacc:	200024fc 	.word	0x200024fc
 800dad0:	20002500 	.word	0x20002500
 800dad4:	200000ce 	.word	0x200000ce
 800dad8:	200000cd 	.word	0x200000cd

0800dadc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800dae0:	f7ff fef2 	bl	800d8c8 <GetCurrentHalTicks>
 800dae4:	0002      	movs	r2, r0
 800dae6:	4b08      	ldr	r3, [pc, #32]	@ (800db08 <HIDS_StartMeasurement+0x2c>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	18d2      	adds	r2, r2, r3
 800daec:	4b07      	ldr	r3, [pc, #28]	@ (800db0c <HIDS_StartMeasurement+0x30>)
 800daee:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800daf0:	4b07      	ldr	r3, [pc, #28]	@ (800db10 <HIDS_StartMeasurement+0x34>)
 800daf2:	2201      	movs	r2, #1
 800daf4:	0019      	movs	r1, r3
 800daf6:	2044      	movs	r0, #68	@ 0x44
 800daf8:	f7ff ff56 	bl	800d9a8 <WriteRegister>
  MeasurementDone = false;
 800dafc:	4b05      	ldr	r3, [pc, #20]	@ (800db14 <HIDS_StartMeasurement+0x38>)
 800dafe:	2200      	movs	r2, #0
 800db00:	701a      	strb	r2, [r3, #0]
}
 800db02:	46c0      	nop			@ (mov r8, r8)
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	200000d4 	.word	0x200000d4
 800db0c:	200000d0 	.word	0x200000d0
 800db10:	200000ce 	.word	0x200000ce
 800db14:	20002512 	.word	0x20002512

0800db18 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	0002      	movs	r2, r0
 800db20:	1dfb      	adds	r3, r7, #7
 800db22:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800db24:	4b03      	ldr	r3, [pc, #12]	@ (800db34 <HIDS_SetHeaterMode+0x1c>)
 800db26:	1dfa      	adds	r2, r7, #7
 800db28:	7812      	ldrb	r2, [r2, #0]
 800db2a:	701a      	strb	r2, [r3, #0]
}
 800db2c:	46c0      	nop			@ (mov r8, r8)
 800db2e:	46bd      	mov	sp, r7
 800db30:	b002      	add	sp, #8
 800db32:	bd80      	pop	{r7, pc}
 800db34:	200000cd 	.word	0x200000cd

0800db38 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	781a      	ldrb	r2, [r3, #0]
 800db44:	210c      	movs	r1, #12
 800db46:	187b      	adds	r3, r7, r1
 800db48:	701a      	strb	r2, [r3, #0]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	785a      	ldrb	r2, [r3, #1]
 800db4e:	187b      	adds	r3, r7, r1
 800db50:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800db52:	240f      	movs	r4, #15
 800db54:	193b      	adds	r3, r7, r4
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	7892      	ldrb	r2, [r2, #2]
 800db5a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800db5c:	187b      	adds	r3, r7, r1
 800db5e:	2102      	movs	r1, #2
 800db60:	0018      	movs	r0, r3
 800db62:	f7ff ff43 	bl	800d9ec <CalculateCRC>
 800db66:	0003      	movs	r3, r0
 800db68:	001a      	movs	r2, r3
 800db6a:	193b      	adds	r3, r7, r4
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	4293      	cmp	r3, r2
 800db70:	d007      	beq.n	800db82 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800db72:	4a1a      	ldr	r2, [pc, #104]	@ (800dbdc <CheckCRC+0xa4>)
 800db74:	4b1a      	ldr	r3, [pc, #104]	@ (800dbe0 <CheckCRC+0xa8>)
 800db76:	0019      	movs	r1, r3
 800db78:	2001      	movs	r0, #1
 800db7a:	f7ff fe2b 	bl	800d7d4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800db7e:	2300      	movs	r3, #0
 800db80:	e027      	b.n	800dbd2 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	78da      	ldrb	r2, [r3, #3]
 800db86:	2108      	movs	r1, #8
 800db88:	187b      	adds	r3, r7, r1
 800db8a:	701a      	strb	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	791a      	ldrb	r2, [r3, #4]
 800db90:	187b      	adds	r3, r7, r1
 800db92:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800db94:	240e      	movs	r4, #14
 800db96:	193b      	adds	r3, r7, r4
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	7952      	ldrb	r2, [r2, #5]
 800db9c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800db9e:	187b      	adds	r3, r7, r1
 800dba0:	2102      	movs	r1, #2
 800dba2:	0018      	movs	r0, r3
 800dba4:	f7ff ff22 	bl	800d9ec <CalculateCRC>
 800dba8:	0003      	movs	r3, r0
 800dbaa:	001a      	movs	r2, r3
 800dbac:	193b      	adds	r3, r7, r4
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d00d      	beq.n	800dbd0 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800dbb4:	4a0b      	ldr	r2, [pc, #44]	@ (800dbe4 <CheckCRC+0xac>)
 800dbb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dbe0 <CheckCRC+0xa8>)
 800dbb8:	0019      	movs	r1, r3
 800dbba:	2001      	movs	r0, #1
 800dbbc:	f7ff fe0a 	bl	800d7d4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800dbc0:	4a09      	ldr	r2, [pc, #36]	@ (800dbe8 <CheckCRC+0xb0>)
 800dbc2:	4b0a      	ldr	r3, [pc, #40]	@ (800dbec <CheckCRC+0xb4>)
 800dbc4:	2170      	movs	r1, #112	@ 0x70
 800dbc6:	0018      	movs	r0, r3
 800dbc8:	f7ff feba 	bl	800d940 <errorHandler>
		return false;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	e000      	b.n	800dbd2 <CheckCRC+0x9a>
	}
	return true;
 800dbd0:	2301      	movs	r3, #1
}
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	b005      	add	sp, #20
 800dbd8:	bd90      	pop	{r4, r7, pc}
 800dbda:	46c0      	nop			@ (mov r8, r8)
 800dbdc:	08023b6c 	.word	0x08023b6c
 800dbe0:	08023b94 	.word	0x08023b94
 800dbe4:	08023b98 	.word	0x08023b98
 800dbe8:	08023bc4 	.word	0x08023bc4
 800dbec:	0802409c 	.word	0x0802409c

0800dbf0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800dbf6:	1dbb      	adds	r3, r7, #6
 800dbf8:	2289      	movs	r2, #137	@ 0x89
 800dbfa:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800dbfc:	1dbb      	adds	r3, r7, #6
 800dbfe:	2201      	movs	r2, #1
 800dc00:	0019      	movs	r1, r3
 800dc02:	2044      	movs	r0, #68	@ 0x44
 800dc04:	f7ff fed0 	bl	800d9a8 <WriteRegister>
	HAL_Delay(30);
 800dc08:	201e      	movs	r0, #30
 800dc0a:	f000 f98b 	bl	800df24 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800dc0e:	4b14      	ldr	r3, [pc, #80]	@ (800dc60 <HIDS_DeviceConnected+0x70>)
 800dc10:	2206      	movs	r2, #6
 800dc12:	0019      	movs	r1, r3
 800dc14:	2044      	movs	r0, #68	@ 0x44
 800dc16:	f7ff fea5 	bl	800d964 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800dc1a:	1dfb      	adds	r3, r7, #7
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	701a      	strb	r2, [r3, #0]
 800dc20:	e011      	b.n	800dc46 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800dc22:	1dfb      	adds	r3, r7, #7
 800dc24:	7818      	ldrb	r0, [r3, #0]
 800dc26:	1dfb      	adds	r3, r7, #7
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	4a0d      	ldr	r2, [pc, #52]	@ (800dc60 <HIDS_DeviceConnected+0x70>)
 800dc2c:	5cd3      	ldrb	r3, [r2, r3]
 800dc2e:	4a0d      	ldr	r2, [pc, #52]	@ (800dc64 <HIDS_DeviceConnected+0x74>)
 800dc30:	490d      	ldr	r1, [pc, #52]	@ (800dc68 <HIDS_DeviceConnected+0x78>)
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	0003      	movs	r3, r0
 800dc36:	2002      	movs	r0, #2
 800dc38:	f7ff fdcc 	bl	800d7d4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800dc3c:	1dfb      	adds	r3, r7, #7
 800dc3e:	781a      	ldrb	r2, [r3, #0]
 800dc40:	1dfb      	adds	r3, r7, #7
 800dc42:	3201      	adds	r2, #1
 800dc44:	701a      	strb	r2, [r3, #0]
 800dc46:	1dfb      	adds	r3, r7, #7
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	2b05      	cmp	r3, #5
 800dc4c:	d9e9      	bls.n	800dc22 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800dc4e:	4b04      	ldr	r3, [pc, #16]	@ (800dc60 <HIDS_DeviceConnected+0x70>)
 800dc50:	0018      	movs	r0, r3
 800dc52:	f7ff ff71 	bl	800db38 <CheckCRC>
 800dc56:	0003      	movs	r3, r0
}
 800dc58:	0018      	movs	r0, r3
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	b002      	add	sp, #8
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	20002504 	.word	0x20002504
 800dc64:	08023bdc 	.word	0x08023bdc
 800dc68:	08023b68 	.word	0x08023b68

0800dc6c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	0002      	movs	r2, r0
 800dc74:	1dfb      	adds	r3, r7, #7
 800dc76:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800dc78:	4b03      	ldr	r3, [pc, #12]	@ (800dc88 <HIDS_SetMeasurementMode+0x1c>)
 800dc7a:	1dfa      	adds	r2, r7, #7
 800dc7c:	7812      	ldrb	r2, [r2, #0]
 800dc7e:	701a      	strb	r2, [r3, #0]
}
 800dc80:	46c0      	nop			@ (mov r8, r8)
 800dc82:	46bd      	mov	sp, r7
 800dc84:	b002      	add	sp, #8
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	200000ce 	.word	0x200000ce

0800dc8c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800dc90:	4b04      	ldr	r3, [pc, #16]	@ (800dca4 <HIDS_MeasurementReady+0x18>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	0018      	movs	r0, r3
 800dc96:	f7ff fd47 	bl	800d728 <TimestampIsReached>
 800dc9a:	0003      	movs	r3, r0
}
 800dc9c:	0018      	movs	r0, r3
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	200000d0 	.word	0x200000d0

0800dca8 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800dca8:	b590      	push	{r4, r7, lr}
 800dcaa:	b087      	sub	sp, #28
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800dcb2:	4b49      	ldr	r3, [pc, #292]	@ (800ddd8 <HIDS_GetMeasurementValues+0x130>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <HIDS_GetMeasurementValues+0x16>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e087      	b.n	800ddce <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800dcbe:	f7ff ffe5 	bl	800dc8c <HIDS_MeasurementReady>
 800dcc2:	0003      	movs	r3, r0
 800dcc4:	001a      	movs	r2, r3
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	4053      	eors	r3, r2
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <HIDS_GetMeasurementValues+0x2c>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e07c      	b.n	800ddce <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800dcd4:	2316      	movs	r3, #22
 800dcd6:	18fc      	adds	r4, r7, r3
 800dcd8:	4b40      	ldr	r3, [pc, #256]	@ (800dddc <HIDS_GetMeasurementValues+0x134>)
 800dcda:	2206      	movs	r2, #6
 800dcdc:	0019      	movs	r1, r3
 800dcde:	2044      	movs	r0, #68	@ 0x44
 800dce0:	f7ff fe40 	bl	800d964 <ReadRegister>
 800dce4:	0003      	movs	r3, r0
 800dce6:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800dce8:	4b3c      	ldr	r3, [pc, #240]	@ (800dddc <HIDS_GetMeasurementValues+0x134>)
 800dcea:	0018      	movs	r0, r3
 800dcec:	f7ff ff24 	bl	800db38 <CheckCRC>
 800dcf0:	0003      	movs	r3, r0
 800dcf2:	001a      	movs	r2, r3
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	4053      	eors	r3, r2
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d011      	beq.n	800dd22 <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800dcfe:	2317      	movs	r3, #23
 800dd00:	18fb      	adds	r3, r7, r3
 800dd02:	2200      	movs	r2, #0
 800dd04:	701a      	strb	r2, [r3, #0]
 800dd06:	e005      	b.n	800dd14 <HIDS_GetMeasurementValues+0x6c>
 800dd08:	2117      	movs	r1, #23
 800dd0a:	187b      	adds	r3, r7, r1
 800dd0c:	781a      	ldrb	r2, [r3, #0]
 800dd0e:	187b      	adds	r3, r7, r1
 800dd10:	3201      	adds	r2, #1
 800dd12:	701a      	strb	r2, [r3, #0]
 800dd14:	2317      	movs	r3, #23
 800dd16:	18fb      	adds	r3, r7, r3
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	2b05      	cmp	r3, #5
 800dd1c:	d9f4      	bls.n	800dd08 <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e055      	b.n	800ddce <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800dd22:	4b2e      	ldr	r3, [pc, #184]	@ (800dddc <HIDS_GetMeasurementValues+0x134>)
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	021b      	lsls	r3, r3, #8
 800dd28:	4a2c      	ldr	r2, [pc, #176]	@ (800dddc <HIDS_GetMeasurementValues+0x134>)
 800dd2a:	7852      	ldrb	r2, [r2, #1]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	22af      	movs	r2, #175	@ 0xaf
 800dd30:	4353      	muls	r3, r2
 800dd32:	0018      	movs	r0, r3
 800dd34:	f7f5 fb44 	bl	80033c0 <__aeabi_i2d>
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4b29      	ldr	r3, [pc, #164]	@ (800dde0 <HIDS_GetMeasurementValues+0x138>)
 800dd3c:	f7f4 f83a 	bl	8001db4 <__aeabi_ddiv>
 800dd40:	0002      	movs	r2, r0
 800dd42:	000b      	movs	r3, r1
 800dd44:	0010      	movs	r0, r2
 800dd46:	0019      	movs	r1, r3
 800dd48:	f7f5 fbd4 	bl	80034f4 <__aeabi_d2f>
 800dd4c:	1c03      	adds	r3, r0, #0
 800dd4e:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800dd50:	4924      	ldr	r1, [pc, #144]	@ (800dde4 <HIDS_GetMeasurementValues+0x13c>)
 800dd52:	6938      	ldr	r0, [r7, #16]
 800dd54:	f7f3 fa62 	bl	800121c <__aeabi_fsub>
 800dd58:	1c03      	adds	r3, r0, #0
 800dd5a:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800dd5c:	4b1f      	ldr	r3, [pc, #124]	@ (800dddc <HIDS_GetMeasurementValues+0x134>)
 800dd5e:	78db      	ldrb	r3, [r3, #3]
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	4a1e      	ldr	r2, [pc, #120]	@ (800dddc <HIDS_GetMeasurementValues+0x134>)
 800dd64:	7912      	ldrb	r2, [r2, #4]
 800dd66:	431a      	orrs	r2, r3
 800dd68:	0013      	movs	r3, r2
 800dd6a:	015b      	lsls	r3, r3, #5
 800dd6c:	1a9b      	subs	r3, r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	189b      	adds	r3, r3, r2
 800dd72:	0018      	movs	r0, r3
 800dd74:	f7f5 fb24 	bl	80033c0 <__aeabi_i2d>
 800dd78:	2200      	movs	r2, #0
 800dd7a:	4b19      	ldr	r3, [pc, #100]	@ (800dde0 <HIDS_GetMeasurementValues+0x138>)
 800dd7c:	f7f4 f81a 	bl	8001db4 <__aeabi_ddiv>
 800dd80:	0002      	movs	r2, r0
 800dd82:	000b      	movs	r3, r1
 800dd84:	0010      	movs	r0, r2
 800dd86:	0019      	movs	r1, r3
 800dd88:	f7f5 fbb4 	bl	80034f4 <__aeabi_d2f>
 800dd8c:	1c03      	adds	r3, r0, #0
 800dd8e:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800dd90:	4915      	ldr	r1, [pc, #84]	@ (800dde8 <HIDS_GetMeasurementValues+0x140>)
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7f3 fa42 	bl	800121c <__aeabi_fsub>
 800dd98:	1c03      	adds	r3, r0, #0
 800dd9a:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	693a      	ldr	r2, [r7, #16]
 800dda0:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	0011      	movs	r1, r2
 800ddae:	0018      	movs	r0, r3
 800ddb0:	f7fd fcd2 	bl	800b758 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	1c11      	adds	r1, r2, #0
 800ddba:	1c18      	adds	r0, r3, #0
 800ddbc:	f7f5 fd8a 	bl	80038d4 <ESP_GetHT>

   measurements = 0;
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	@ (800ddec <HIDS_GetMeasurementValues+0x144>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800ddc6:	4b04      	ldr	r3, [pc, #16]	@ (800ddd8 <HIDS_GetMeasurementValues+0x130>)
 800ddc8:	2201      	movs	r2, #1
 800ddca:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800ddcc:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800ddce:	0018      	movs	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	b007      	add	sp, #28
 800ddd4:	bd90      	pop	{r4, r7, pc}
 800ddd6:	46c0      	nop			@ (mov r8, r8)
 800ddd8:	20002512 	.word	0x20002512
 800dddc:	2000250c 	.word	0x2000250c
 800dde0:	40efffe0 	.word	0x40efffe0
 800dde4:	42340000 	.word	0x42340000
 800dde8:	40c00000 	.word	0x40c00000
 800ddec:	20002514 	.word	0x20002514

0800ddf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800ddf0:	480d      	ldr	r0, [pc, #52]	@ (800de28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800ddf2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ddf4:	f7ff f8ee 	bl	800cfd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ddf8:	480c      	ldr	r0, [pc, #48]	@ (800de2c <LoopForever+0x6>)
  ldr r1, =_edata
 800ddfa:	490d      	ldr	r1, [pc, #52]	@ (800de30 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ddfc:	4a0d      	ldr	r2, [pc, #52]	@ (800de34 <LoopForever+0xe>)
  movs r3, #0
 800ddfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800de00:	e002      	b.n	800de08 <LoopCopyDataInit>

0800de02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800de02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800de04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800de06:	3304      	adds	r3, #4

0800de08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800de08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800de0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800de0c:	d3f9      	bcc.n	800de02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800de0e:	4a0a      	ldr	r2, [pc, #40]	@ (800de38 <LoopForever+0x12>)
  ldr r4, =_ebss
 800de10:	4c0a      	ldr	r4, [pc, #40]	@ (800de3c <LoopForever+0x16>)
  movs r3, #0
 800de12:	2300      	movs	r3, #0
  b LoopFillZerobss
 800de14:	e001      	b.n	800de1a <LoopFillZerobss>

0800de16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800de16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800de18:	3204      	adds	r2, #4

0800de1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800de1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800de1c:	d3fb      	bcc.n	800de16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800de1e:	f011 fb25 	bl	801f46c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800de22:	f7f9 fdb5 	bl	8007990 <main>

0800de26 <LoopForever>:

LoopForever:
    b LoopForever
 800de26:	e7fe      	b.n	800de26 <LoopForever>
   ldr   r0, =_estack
 800de28:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800de2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800de30:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800de34:	08024a20 	.word	0x08024a20
  ldr r2, =_sbss
 800de38:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800de3c:	2000391c 	.word	0x2000391c

0800de40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800de40:	e7fe      	b.n	800de40 <ADC1_COMP_IRQHandler>
	...

0800de44 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800de4a:	1dfb      	adds	r3, r7, #7
 800de4c:	2200      	movs	r2, #0
 800de4e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800de50:	4b0b      	ldr	r3, [pc, #44]	@ (800de80 <HAL_Init+0x3c>)
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	4b0a      	ldr	r3, [pc, #40]	@ (800de80 <HAL_Init+0x3c>)
 800de56:	2140      	movs	r1, #64	@ 0x40
 800de58:	430a      	orrs	r2, r1
 800de5a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800de5c:	2003      	movs	r0, #3
 800de5e:	f000 f811 	bl	800de84 <HAL_InitTick>
 800de62:	1e03      	subs	r3, r0, #0
 800de64:	d003      	beq.n	800de6e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800de66:	1dfb      	adds	r3, r7, #7
 800de68:	2201      	movs	r2, #1
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	e001      	b.n	800de72 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800de6e:	f7fe ff65 	bl	800cd3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800de72:	1dfb      	adds	r3, r7, #7
 800de74:	781b      	ldrb	r3, [r3, #0]
}
 800de76:	0018      	movs	r0, r3
 800de78:	46bd      	mov	sp, r7
 800de7a:	b002      	add	sp, #8
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	46c0      	nop			@ (mov r8, r8)
 800de80:	40022000 	.word	0x40022000

0800de84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800de84:	b590      	push	{r4, r7, lr}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800de8c:	4b14      	ldr	r3, [pc, #80]	@ (800dee0 <HAL_InitTick+0x5c>)
 800de8e:	681c      	ldr	r4, [r3, #0]
 800de90:	4b14      	ldr	r3, [pc, #80]	@ (800dee4 <HAL_InitTick+0x60>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	0019      	movs	r1, r3
 800de96:	23fa      	movs	r3, #250	@ 0xfa
 800de98:	0098      	lsls	r0, r3, #2
 800de9a:	f7f2 f983 	bl	80001a4 <__udivsi3>
 800de9e:	0003      	movs	r3, r0
 800dea0:	0019      	movs	r1, r3
 800dea2:	0020      	movs	r0, r4
 800dea4:	f7f2 f97e 	bl	80001a4 <__udivsi3>
 800dea8:	0003      	movs	r3, r0
 800deaa:	0018      	movs	r0, r3
 800deac:	f000 fce7 	bl	800e87e <HAL_SYSTICK_Config>
 800deb0:	1e03      	subs	r3, r0, #0
 800deb2:	d001      	beq.n	800deb8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	e00f      	b.n	800ded8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2b03      	cmp	r3, #3
 800debc:	d80b      	bhi.n	800ded6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800debe:	6879      	ldr	r1, [r7, #4]
 800dec0:	2301      	movs	r3, #1
 800dec2:	425b      	negs	r3, r3
 800dec4:	2200      	movs	r2, #0
 800dec6:	0018      	movs	r0, r3
 800dec8:	f000 fcb4 	bl	800e834 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800decc:	4b06      	ldr	r3, [pc, #24]	@ (800dee8 <HAL_InitTick+0x64>)
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ded2:	2300      	movs	r3, #0
 800ded4:	e000      	b.n	800ded8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ded6:	2301      	movs	r3, #1
}
 800ded8:	0018      	movs	r0, r3
 800deda:	46bd      	mov	sp, r7
 800dedc:	b003      	add	sp, #12
 800dede:	bd90      	pop	{r4, r7, pc}
 800dee0:	200000c8 	.word	0x200000c8
 800dee4:	200000dc 	.word	0x200000dc
 800dee8:	200000d8 	.word	0x200000d8

0800deec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800def0:	4b05      	ldr	r3, [pc, #20]	@ (800df08 <HAL_IncTick+0x1c>)
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	001a      	movs	r2, r3
 800def6:	4b05      	ldr	r3, [pc, #20]	@ (800df0c <HAL_IncTick+0x20>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	18d2      	adds	r2, r2, r3
 800defc:	4b03      	ldr	r3, [pc, #12]	@ (800df0c <HAL_IncTick+0x20>)
 800defe:	601a      	str	r2, [r3, #0]
}
 800df00:	46c0      	nop			@ (mov r8, r8)
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	46c0      	nop			@ (mov r8, r8)
 800df08:	200000dc 	.word	0x200000dc
 800df0c:	20002518 	.word	0x20002518

0800df10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	af00      	add	r7, sp, #0
  return uwTick;
 800df14:	4b02      	ldr	r3, [pc, #8]	@ (800df20 <HAL_GetTick+0x10>)
 800df16:	681b      	ldr	r3, [r3, #0]
}
 800df18:	0018      	movs	r0, r3
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	46c0      	nop			@ (mov r8, r8)
 800df20:	20002518 	.word	0x20002518

0800df24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b084      	sub	sp, #16
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800df2c:	f7ff fff0 	bl	800df10 <HAL_GetTick>
 800df30:	0003      	movs	r3, r0
 800df32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	d005      	beq.n	800df4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800df3e:	4b0a      	ldr	r3, [pc, #40]	@ (800df68 <HAL_Delay+0x44>)
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	001a      	movs	r2, r3
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	189b      	adds	r3, r3, r2
 800df48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800df4a:	46c0      	nop			@ (mov r8, r8)
 800df4c:	f7ff ffe0 	bl	800df10 <HAL_GetTick>
 800df50:	0002      	movs	r2, r0
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d8f7      	bhi.n	800df4c <HAL_Delay+0x28>
  {
  }
}
 800df5c:	46c0      	nop			@ (mov r8, r8)
 800df5e:	46c0      	nop			@ (mov r8, r8)
 800df60:	46bd      	mov	sp, r7
 800df62:	b004      	add	sp, #16
 800df64:	bd80      	pop	{r7, pc}
 800df66:	46c0      	nop			@ (mov r8, r8)
 800df68:	200000dc 	.word	0x200000dc

0800df6c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800df70:	4b04      	ldr	r3, [pc, #16]	@ (800df84 <HAL_SuspendTick+0x18>)
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	4b03      	ldr	r3, [pc, #12]	@ (800df84 <HAL_SuspendTick+0x18>)
 800df76:	2102      	movs	r1, #2
 800df78:	438a      	bics	r2, r1
 800df7a:	601a      	str	r2, [r3, #0]
}
 800df7c:	46c0      	nop			@ (mov r8, r8)
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	46c0      	nop			@ (mov r8, r8)
 800df84:	e000e010 	.word	0xe000e010

0800df88 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800df8c:	4b04      	ldr	r3, [pc, #16]	@ (800dfa0 <HAL_ResumeTick+0x18>)
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	4b03      	ldr	r3, [pc, #12]	@ (800dfa0 <HAL_ResumeTick+0x18>)
 800df92:	2102      	movs	r1, #2
 800df94:	430a      	orrs	r2, r1
 800df96:	601a      	str	r2, [r3, #0]
}
 800df98:	46c0      	nop			@ (mov r8, r8)
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	46c0      	nop			@ (mov r8, r8)
 800dfa0:	e000e010 	.word	0xe000e010

0800dfa4 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800dfa8:	4b02      	ldr	r3, [pc, #8]	@ (800dfb4 <HAL_GetUIDw0+0x10>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
}
 800dfac:	0018      	movs	r0, r3
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	46c0      	nop			@ (mov r8, r8)
 800dfb4:	1ff80050 	.word	0x1ff80050

0800dfb8 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800dfbc:	4b02      	ldr	r3, [pc, #8]	@ (800dfc8 <HAL_GetUIDw1+0x10>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
}
 800dfc0:	0018      	movs	r0, r3
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	46c0      	nop			@ (mov r8, r8)
 800dfc8:	1ff80054 	.word	0x1ff80054

0800dfcc <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800dfd0:	4b02      	ldr	r3, [pc, #8]	@ (800dfdc <HAL_GetUIDw2+0x10>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
}
 800dfd4:	0018      	movs	r0, r3
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	46c0      	nop			@ (mov r8, r8)
 800dfdc:	1ff80064 	.word	0x1ff80064

0800dfe0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	e159      	b.n	800e2a6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10a      	bne.n	800e010 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2250      	movs	r2, #80	@ 0x50
 800e004:	2100      	movs	r1, #0
 800e006:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	0018      	movs	r0, r3
 800e00c:	f7f8 feb4 	bl	8006d78 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e014:	2210      	movs	r2, #16
 800e016:	4013      	ands	r3, r2
 800e018:	2b10      	cmp	r3, #16
 800e01a:	d005      	beq.n	800e028 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	2204      	movs	r2, #4
 800e024:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e026:	d00b      	beq.n	800e040 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e02c:	2210      	movs	r2, #16
 800e02e:	431a      	orrs	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2250      	movs	r2, #80	@ 0x50
 800e038:	2100      	movs	r1, #0
 800e03a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e132      	b.n	800e2a6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e044:	4a9a      	ldr	r2, [pc, #616]	@ (800e2b0 <HAL_ADC_Init+0x2d0>)
 800e046:	4013      	ands	r3, r2
 800e048:	2202      	movs	r2, #2
 800e04a:	431a      	orrs	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	2203      	movs	r2, #3
 800e058:	4013      	ands	r3, r2
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d108      	bne.n	800e070 <HAL_ADC_Init+0x90>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2201      	movs	r2, #1
 800e066:	4013      	ands	r3, r2
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d101      	bne.n	800e070 <HAL_ADC_Init+0x90>
 800e06c:	2301      	movs	r3, #1
 800e06e:	e000      	b.n	800e072 <HAL_ADC_Init+0x92>
 800e070:	2300      	movs	r3, #0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d149      	bne.n	800e10a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	685a      	ldr	r2, [r3, #4]
 800e07a:	23c0      	movs	r3, #192	@ 0xc0
 800e07c:	061b      	lsls	r3, r3, #24
 800e07e:	429a      	cmp	r2, r3
 800e080:	d00b      	beq.n	800e09a <HAL_ADC_Init+0xba>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	2380      	movs	r3, #128	@ 0x80
 800e088:	05db      	lsls	r3, r3, #23
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d005      	beq.n	800e09a <HAL_ADC_Init+0xba>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	685a      	ldr	r2, [r3, #4]
 800e092:	2380      	movs	r3, #128	@ 0x80
 800e094:	061b      	lsls	r3, r3, #24
 800e096:	429a      	cmp	r2, r3
 800e098:	d111      	bne.n	800e0be <HAL_ADC_Init+0xde>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	691a      	ldr	r2, [r3, #16]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	0092      	lsls	r2, r2, #2
 800e0a6:	0892      	lsrs	r2, r2, #2
 800e0a8:	611a      	str	r2, [r3, #16]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6919      	ldr	r1, [r3, #16]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	611a      	str	r2, [r3, #16]
 800e0bc:	e014      	b.n	800e0e8 <HAL_ADC_Init+0x108>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	691a      	ldr	r2, [r3, #16]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	0092      	lsls	r2, r2, #2
 800e0ca:	0892      	lsrs	r2, r2, #2
 800e0cc:	611a      	str	r2, [r3, #16]
 800e0ce:	4b79      	ldr	r3, [pc, #484]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	4b78      	ldr	r3, [pc, #480]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e0d4:	4978      	ldr	r1, [pc, #480]	@ (800e2b8 <HAL_ADC_Init+0x2d8>)
 800e0d6:	400a      	ands	r2, r1
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	4b76      	ldr	r3, [pc, #472]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e0dc:	6819      	ldr	r1, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	685a      	ldr	r2, [r3, #4]
 800e0e2:	4b74      	ldr	r3, [pc, #464]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e0e4:	430a      	orrs	r2, r1
 800e0e6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68da      	ldr	r2, [r3, #12]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2118      	movs	r1, #24
 800e0f4:	438a      	bics	r2, r1
 800e0f6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68d9      	ldr	r1, [r3, #12]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	689a      	ldr	r2, [r3, #8]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	430a      	orrs	r2, r1
 800e108:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e10a:	4b6a      	ldr	r3, [pc, #424]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	4b69      	ldr	r3, [pc, #420]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e110:	496a      	ldr	r1, [pc, #424]	@ (800e2bc <HAL_ADC_Init+0x2dc>)
 800e112:	400a      	ands	r2, r1
 800e114:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e116:	4b67      	ldr	r3, [pc, #412]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e118:	6819      	ldr	r1, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e11e:	065a      	lsls	r2, r3, #25
 800e120:	4b64      	ldr	r3, [pc, #400]	@ (800e2b4 <HAL_ADC_Init+0x2d4>)
 800e122:	430a      	orrs	r2, r1
 800e124:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689a      	ldr	r2, [r3, #8]
 800e12c:	2380      	movs	r3, #128	@ 0x80
 800e12e:	055b      	lsls	r3, r3, #21
 800e130:	4013      	ands	r3, r2
 800e132:	d108      	bne.n	800e146 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	689a      	ldr	r2, [r3, #8]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2180      	movs	r1, #128	@ 0x80
 800e140:	0549      	lsls	r1, r1, #21
 800e142:	430a      	orrs	r2, r1
 800e144:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68da      	ldr	r2, [r3, #12]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	495b      	ldr	r1, [pc, #364]	@ (800e2c0 <HAL_ADC_Init+0x2e0>)
 800e152:	400a      	ands	r2, r1
 800e154:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68d9      	ldr	r1, [r3, #12]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	2b02      	cmp	r3, #2
 800e166:	d101      	bne.n	800e16c <HAL_ADC_Init+0x18c>
 800e168:	2304      	movs	r3, #4
 800e16a:	e000      	b.n	800e16e <HAL_ADC_Init+0x18e>
 800e16c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e16e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2020      	movs	r0, #32
 800e174:	5c1b      	ldrb	r3, [r3, r0]
 800e176:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e178:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	202c      	movs	r0, #44	@ 0x2c
 800e17e:	5c1b      	ldrb	r3, [r3, r0]
 800e180:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e182:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e188:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	699b      	ldr	r3, [r3, #24]
 800e18e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e190:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	69db      	ldr	r3, [r3, #28]
 800e196:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e198:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	430a      	orrs	r2, r1
 800e1a0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e1a6:	23c2      	movs	r3, #194	@ 0xc2
 800e1a8:	33ff      	adds	r3, #255	@ 0xff
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d00b      	beq.n	800e1c6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	68d9      	ldr	r1, [r3, #12]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e1bc:	431a      	orrs	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	430a      	orrs	r2, r1
 800e1c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2221      	movs	r2, #33	@ 0x21
 800e1ca:	5c9b      	ldrb	r3, [r3, r2]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d11a      	bne.n	800e206 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2220      	movs	r2, #32
 800e1d4:	5c9b      	ldrb	r3, [r3, r2]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d109      	bne.n	800e1ee <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	68da      	ldr	r2, [r3, #12]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2180      	movs	r1, #128	@ 0x80
 800e1e6:	0249      	lsls	r1, r1, #9
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	60da      	str	r2, [r3, #12]
 800e1ec:	e00b      	b.n	800e206 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1f2:	2220      	movs	r2, #32
 800e1f4:	431a      	orrs	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1fe:	2201      	movs	r2, #1
 800e200:	431a      	orrs	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d11f      	bne.n	800e24e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	691a      	ldr	r2, [r3, #16]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	492a      	ldr	r1, [pc, #168]	@ (800e2c4 <HAL_ADC_Init+0x2e4>)
 800e21a:	400a      	ands	r2, r1
 800e21c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6919      	ldr	r1, [r3, #16]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e22c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e232:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	430a      	orrs	r2, r1
 800e23a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	691a      	ldr	r2, [r3, #16]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2101      	movs	r1, #1
 800e248:	430a      	orrs	r2, r1
 800e24a:	611a      	str	r2, [r3, #16]
 800e24c:	e00e      	b.n	800e26c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	691b      	ldr	r3, [r3, #16]
 800e254:	2201      	movs	r2, #1
 800e256:	4013      	ands	r3, r2
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d107      	bne.n	800e26c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	691a      	ldr	r2, [r3, #16]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2101      	movs	r1, #1
 800e268:	438a      	bics	r2, r1
 800e26a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	695a      	ldr	r2, [r3, #20]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2107      	movs	r1, #7
 800e278:	438a      	bics	r2, r1
 800e27a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6959      	ldr	r1, [r3, #20]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	430a      	orrs	r2, r1
 800e28c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e298:	2203      	movs	r2, #3
 800e29a:	4393      	bics	r3, r2
 800e29c:	2201      	movs	r2, #1
 800e29e:	431a      	orrs	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	0018      	movs	r0, r3
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	b002      	add	sp, #8
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	46c0      	nop			@ (mov r8, r8)
 800e2b0:	fffffefd 	.word	0xfffffefd
 800e2b4:	40012708 	.word	0x40012708
 800e2b8:	ffc3ffff 	.word	0xffc3ffff
 800e2bc:	fdffffff 	.word	0xfdffffff
 800e2c0:	fffe0219 	.word	0xfffe0219
 800e2c4:	fffffc03 	.word	0xfffffc03

0800e2c8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e2d0:	230f      	movs	r3, #15
 800e2d2:	18fb      	adds	r3, r7, r3
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	2204      	movs	r2, #4
 800e2e0:	4013      	ands	r3, r2
 800e2e2:	d138      	bne.n	800e356 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2250      	movs	r2, #80	@ 0x50
 800e2e8:	5c9b      	ldrb	r3, [r3, r2]
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d101      	bne.n	800e2f2 <HAL_ADC_Start+0x2a>
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	e038      	b.n	800e364 <HAL_ADC_Start+0x9c>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2250      	movs	r2, #80	@ 0x50
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	69db      	ldr	r3, [r3, #28]
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d007      	beq.n	800e312 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800e302:	230f      	movs	r3, #15
 800e304:	18fc      	adds	r4, r7, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	0018      	movs	r0, r3
 800e30a:	f000 f95f 	bl	800e5cc <ADC_Enable>
 800e30e:	0003      	movs	r3, r0
 800e310:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800e312:	230f      	movs	r3, #15
 800e314:	18fb      	adds	r3, r7, r3
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d120      	bne.n	800e35e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e320:	4a12      	ldr	r2, [pc, #72]	@ (800e36c <HAL_ADC_Start+0xa4>)
 800e322:	4013      	ands	r3, r2
 800e324:	2280      	movs	r2, #128	@ 0x80
 800e326:	0052      	lsls	r2, r2, #1
 800e328:	431a      	orrs	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2250      	movs	r2, #80	@ 0x50
 800e338:	2100      	movs	r1, #0
 800e33a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	221c      	movs	r2, #28
 800e342:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	689a      	ldr	r2, [r3, #8]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2104      	movs	r1, #4
 800e350:	430a      	orrs	r2, r1
 800e352:	609a      	str	r2, [r3, #8]
 800e354:	e003      	b.n	800e35e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e356:	230f      	movs	r3, #15
 800e358:	18fb      	adds	r3, r7, r3
 800e35a:	2202      	movs	r2, #2
 800e35c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800e35e:	230f      	movs	r3, #15
 800e360:	18fb      	adds	r3, r7, r3
 800e362:	781b      	ldrb	r3, [r3, #0]
}
 800e364:	0018      	movs	r0, r3
 800e366:	46bd      	mov	sp, r7
 800e368:	b005      	add	sp, #20
 800e36a:	bd90      	pop	{r4, r7, pc}
 800e36c:	fffff0fe 	.word	0xfffff0fe

0800e370 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e37a:	2300      	movs	r3, #0
 800e37c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e37e:	2300      	movs	r3, #0
 800e380:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	695b      	ldr	r3, [r3, #20]
 800e386:	2b08      	cmp	r3, #8
 800e388:	d102      	bne.n	800e390 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e38a:	2308      	movs	r3, #8
 800e38c:	60fb      	str	r3, [r7, #12]
 800e38e:	e014      	b.n	800e3ba <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	2201      	movs	r2, #1
 800e398:	4013      	ands	r3, r2
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d10b      	bne.n	800e3b6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3a2:	2220      	movs	r2, #32
 800e3a4:	431a      	orrs	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2250      	movs	r2, #80	@ 0x50
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e072      	b.n	800e49c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e3b6:	230c      	movs	r3, #12
 800e3b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e3ba:	f7ff fda9 	bl	800df10 <HAL_GetTick>
 800e3be:	0003      	movs	r3, r0
 800e3c0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e3c2:	e01f      	b.n	800e404 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	d01c      	beq.n	800e404 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d007      	beq.n	800e3e0 <HAL_ADC_PollForConversion+0x70>
 800e3d0:	f7ff fd9e 	bl	800df10 <HAL_GetTick>
 800e3d4:	0002      	movs	r2, r0
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	1ad3      	subs	r3, r2, r3
 800e3da:	683a      	ldr	r2, [r7, #0]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d211      	bcs.n	800e404 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68fa      	ldr	r2, [r7, #12]
 800e3e8:	4013      	ands	r3, r2
 800e3ea:	d10b      	bne.n	800e404 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3f0:	2204      	movs	r2, #4
 800e3f2:	431a      	orrs	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2250      	movs	r2, #80	@ 0x50
 800e3fc:	2100      	movs	r1, #0
 800e3fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e400:	2303      	movs	r3, #3
 800e402:	e04b      	b.n	800e49c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	4013      	ands	r3, r2
 800e40e:	d0d9      	beq.n	800e3c4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e414:	2280      	movs	r2, #128	@ 0x80
 800e416:	0092      	lsls	r2, r2, #2
 800e418:	431a      	orrs	r2, r3
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	23c0      	movs	r3, #192	@ 0xc0
 800e426:	011b      	lsls	r3, r3, #4
 800e428:	4013      	ands	r3, r2
 800e42a:	d12e      	bne.n	800e48a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2220      	movs	r2, #32
 800e430:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e432:	2b00      	cmp	r3, #0
 800e434:	d129      	bne.n	800e48a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2208      	movs	r2, #8
 800e43e:	4013      	ands	r3, r2
 800e440:	2b08      	cmp	r3, #8
 800e442:	d122      	bne.n	800e48a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	2204      	movs	r2, #4
 800e44c:	4013      	ands	r3, r2
 800e44e:	d110      	bne.n	800e472 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	685a      	ldr	r2, [r3, #4]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	210c      	movs	r1, #12
 800e45c:	438a      	bics	r2, r1
 800e45e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e464:	4a0f      	ldr	r2, [pc, #60]	@ (800e4a4 <HAL_ADC_PollForConversion+0x134>)
 800e466:	4013      	ands	r3, r2
 800e468:	2201      	movs	r2, #1
 800e46a:	431a      	orrs	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	655a      	str	r2, [r3, #84]	@ 0x54
 800e470:	e00b      	b.n	800e48a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e476:	2220      	movs	r2, #32
 800e478:	431a      	orrs	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e482:	2201      	movs	r2, #1
 800e484:	431a      	orrs	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	699b      	ldr	r3, [r3, #24]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d103      	bne.n	800e49a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	220c      	movs	r2, #12
 800e498:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e49a:	2300      	movs	r3, #0
}
 800e49c:	0018      	movs	r0, r3
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	b004      	add	sp, #16
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	fffffefe 	.word	0xfffffefe

0800e4a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e4b6:	0018      	movs	r0, r3
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	b002      	add	sp, #8
 800e4bc:	bd80      	pop	{r7, pc}
	...

0800e4c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2250      	movs	r2, #80	@ 0x50
 800e4ce:	5c9b      	ldrb	r3, [r3, r2]
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d101      	bne.n	800e4d8 <HAL_ADC_ConfigChannel+0x18>
 800e4d4:	2302      	movs	r3, #2
 800e4d6:	e06c      	b.n	800e5b2 <HAL_ADC_ConfigChannel+0xf2>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2250      	movs	r2, #80	@ 0x50
 800e4dc:	2101      	movs	r1, #1
 800e4de:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	2204      	movs	r2, #4
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	d00b      	beq.n	800e504 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	431a      	orrs	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2250      	movs	r2, #80	@ 0x50
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e500:	2301      	movs	r3, #1
 800e502:	e056      	b.n	800e5b2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	4a2c      	ldr	r2, [pc, #176]	@ (800e5bc <HAL_ADC_ConfigChannel+0xfc>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d028      	beq.n	800e560 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	035b      	lsls	r3, r3, #13
 800e51a:	0b5a      	lsrs	r2, r3, #13
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	430a      	orrs	r2, r1
 800e522:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	2380      	movs	r3, #128	@ 0x80
 800e52a:	02db      	lsls	r3, r3, #11
 800e52c:	4013      	ands	r3, r2
 800e52e:	d009      	beq.n	800e544 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e530:	4b23      	ldr	r3, [pc, #140]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	4b22      	ldr	r3, [pc, #136]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e536:	2180      	movs	r1, #128	@ 0x80
 800e538:	0409      	lsls	r1, r1, #16
 800e53a:	430a      	orrs	r2, r1
 800e53c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e53e:	200a      	movs	r0, #10
 800e540:	f000 f8ac 	bl	800e69c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	2380      	movs	r3, #128	@ 0x80
 800e54a:	029b      	lsls	r3, r3, #10
 800e54c:	4013      	ands	r3, r2
 800e54e:	d02b      	beq.n	800e5a8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e550:	4b1b      	ldr	r3, [pc, #108]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	4b1a      	ldr	r3, [pc, #104]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e556:	2180      	movs	r1, #128	@ 0x80
 800e558:	03c9      	lsls	r1, r1, #15
 800e55a:	430a      	orrs	r2, r1
 800e55c:	601a      	str	r2, [r3, #0]
 800e55e:	e023      	b.n	800e5a8 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	035b      	lsls	r3, r3, #13
 800e56c:	0b5b      	lsrs	r3, r3, #13
 800e56e:	43d9      	mvns	r1, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	400a      	ands	r2, r1
 800e576:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	2380      	movs	r3, #128	@ 0x80
 800e57e:	02db      	lsls	r3, r3, #11
 800e580:	4013      	ands	r3, r2
 800e582:	d005      	beq.n	800e590 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e584:	4b0e      	ldr	r3, [pc, #56]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e58a:	490e      	ldr	r1, [pc, #56]	@ (800e5c4 <HAL_ADC_ConfigChannel+0x104>)
 800e58c:	400a      	ands	r2, r1
 800e58e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	2380      	movs	r3, #128	@ 0x80
 800e596:	029b      	lsls	r3, r3, #10
 800e598:	4013      	ands	r3, r2
 800e59a:	d005      	beq.n	800e5a8 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800e59c:	4b08      	ldr	r3, [pc, #32]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	4b07      	ldr	r3, [pc, #28]	@ (800e5c0 <HAL_ADC_ConfigChannel+0x100>)
 800e5a2:	4909      	ldr	r1, [pc, #36]	@ (800e5c8 <HAL_ADC_ConfigChannel+0x108>)
 800e5a4:	400a      	ands	r2, r1
 800e5a6:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2250      	movs	r2, #80	@ 0x50
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	0018      	movs	r0, r3
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	b002      	add	sp, #8
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	46c0      	nop			@ (mov r8, r8)
 800e5bc:	00001001 	.word	0x00001001
 800e5c0:	40012708 	.word	0x40012708
 800e5c4:	ff7fffff 	.word	0xff7fffff
 800e5c8:	ffbfffff 	.word	0xffbfffff

0800e5cc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	689b      	ldr	r3, [r3, #8]
 800e5de:	2203      	movs	r2, #3
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d108      	bne.n	800e5f8 <ADC_Enable+0x2c>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	4013      	ands	r3, r2
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d101      	bne.n	800e5f8 <ADC_Enable+0x2c>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	e000      	b.n	800e5fa <ADC_Enable+0x2e>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d146      	bne.n	800e68c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	4a24      	ldr	r2, [pc, #144]	@ (800e698 <ADC_Enable+0xcc>)
 800e606:	4013      	ands	r3, r2
 800e608:	d00d      	beq.n	800e626 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e60e:	2210      	movs	r2, #16
 800e610:	431a      	orrs	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e61a:	2201      	movs	r2, #1
 800e61c:	431a      	orrs	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	e033      	b.n	800e68e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	689a      	ldr	r2, [r3, #8]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2101      	movs	r1, #1
 800e632:	430a      	orrs	r2, r1
 800e634:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800e636:	2001      	movs	r0, #1
 800e638:	f000 f830 	bl	800e69c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800e63c:	f7ff fc68 	bl	800df10 <HAL_GetTick>
 800e640:	0003      	movs	r3, r0
 800e642:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e644:	e01b      	b.n	800e67e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e646:	f7ff fc63 	bl	800df10 <HAL_GetTick>
 800e64a:	0002      	movs	r2, r0
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	1ad3      	subs	r3, r2, r3
 800e650:	2b0a      	cmp	r3, #10
 800e652:	d914      	bls.n	800e67e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2201      	movs	r2, #1
 800e65c:	4013      	ands	r3, r2
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d00d      	beq.n	800e67e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e666:	2210      	movs	r2, #16
 800e668:	431a      	orrs	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e672:	2201      	movs	r2, #1
 800e674:	431a      	orrs	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e007      	b.n	800e68e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2201      	movs	r2, #1
 800e686:	4013      	ands	r3, r2
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d1dc      	bne.n	800e646 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	0018      	movs	r0, r3
 800e690:	46bd      	mov	sp, r7
 800e692:	b004      	add	sp, #16
 800e694:	bd80      	pop	{r7, pc}
 800e696:	46c0      	nop			@ (mov r8, r8)
 800e698:	80000017 	.word	0x80000017

0800e69c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800e6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e6d4 <ADC_DelayMicroSecond+0x38>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	490b      	ldr	r1, [pc, #44]	@ (800e6d8 <ADC_DelayMicroSecond+0x3c>)
 800e6aa:	0018      	movs	r0, r3
 800e6ac:	f7f1 fd7a 	bl	80001a4 <__udivsi3>
 800e6b0:	0003      	movs	r3, r0
 800e6b2:	001a      	movs	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4353      	muls	r3, r2
 800e6b8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800e6ba:	e002      	b.n	800e6c2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d1f9      	bne.n	800e6bc <ADC_DelayMicroSecond+0x20>
  }
}
 800e6c8:	46c0      	nop			@ (mov r8, r8)
 800e6ca:	46c0      	nop			@ (mov r8, r8)
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	b004      	add	sp, #16
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	46c0      	nop			@ (mov r8, r8)
 800e6d4:	200000c8 	.word	0x200000c8
 800e6d8:	000f4240 	.word	0x000f4240

0800e6dc <__NVIC_EnableIRQ>:
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	0002      	movs	r2, r0
 800e6e4:	1dfb      	adds	r3, r7, #7
 800e6e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e6e8:	1dfb      	adds	r3, r7, #7
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800e6ee:	d809      	bhi.n	800e704 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e6f0:	1dfb      	adds	r3, r7, #7
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	001a      	movs	r2, r3
 800e6f6:	231f      	movs	r3, #31
 800e6f8:	401a      	ands	r2, r3
 800e6fa:	4b04      	ldr	r3, [pc, #16]	@ (800e70c <__NVIC_EnableIRQ+0x30>)
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	4091      	lsls	r1, r2
 800e700:	000a      	movs	r2, r1
 800e702:	601a      	str	r2, [r3, #0]
}
 800e704:	46c0      	nop			@ (mov r8, r8)
 800e706:	46bd      	mov	sp, r7
 800e708:	b002      	add	sp, #8
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	e000e100 	.word	0xe000e100

0800e710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	0002      	movs	r2, r0
 800e718:	6039      	str	r1, [r7, #0]
 800e71a:	1dfb      	adds	r3, r7, #7
 800e71c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e71e:	1dfb      	adds	r3, r7, #7
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	2b7f      	cmp	r3, #127	@ 0x7f
 800e724:	d828      	bhi.n	800e778 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e726:	4a2f      	ldr	r2, [pc, #188]	@ (800e7e4 <__NVIC_SetPriority+0xd4>)
 800e728:	1dfb      	adds	r3, r7, #7
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	b25b      	sxtb	r3, r3
 800e72e:	089b      	lsrs	r3, r3, #2
 800e730:	33c0      	adds	r3, #192	@ 0xc0
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	589b      	ldr	r3, [r3, r2]
 800e736:	1dfa      	adds	r2, r7, #7
 800e738:	7812      	ldrb	r2, [r2, #0]
 800e73a:	0011      	movs	r1, r2
 800e73c:	2203      	movs	r2, #3
 800e73e:	400a      	ands	r2, r1
 800e740:	00d2      	lsls	r2, r2, #3
 800e742:	21ff      	movs	r1, #255	@ 0xff
 800e744:	4091      	lsls	r1, r2
 800e746:	000a      	movs	r2, r1
 800e748:	43d2      	mvns	r2, r2
 800e74a:	401a      	ands	r2, r3
 800e74c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	019b      	lsls	r3, r3, #6
 800e752:	22ff      	movs	r2, #255	@ 0xff
 800e754:	401a      	ands	r2, r3
 800e756:	1dfb      	adds	r3, r7, #7
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	0018      	movs	r0, r3
 800e75c:	2303      	movs	r3, #3
 800e75e:	4003      	ands	r3, r0
 800e760:	00db      	lsls	r3, r3, #3
 800e762:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e764:	481f      	ldr	r0, [pc, #124]	@ (800e7e4 <__NVIC_SetPriority+0xd4>)
 800e766:	1dfb      	adds	r3, r7, #7
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	b25b      	sxtb	r3, r3
 800e76c:	089b      	lsrs	r3, r3, #2
 800e76e:	430a      	orrs	r2, r1
 800e770:	33c0      	adds	r3, #192	@ 0xc0
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800e776:	e031      	b.n	800e7dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e778:	4a1b      	ldr	r2, [pc, #108]	@ (800e7e8 <__NVIC_SetPriority+0xd8>)
 800e77a:	1dfb      	adds	r3, r7, #7
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	0019      	movs	r1, r3
 800e780:	230f      	movs	r3, #15
 800e782:	400b      	ands	r3, r1
 800e784:	3b08      	subs	r3, #8
 800e786:	089b      	lsrs	r3, r3, #2
 800e788:	3306      	adds	r3, #6
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	18d3      	adds	r3, r2, r3
 800e78e:	3304      	adds	r3, #4
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	1dfa      	adds	r2, r7, #7
 800e794:	7812      	ldrb	r2, [r2, #0]
 800e796:	0011      	movs	r1, r2
 800e798:	2203      	movs	r2, #3
 800e79a:	400a      	ands	r2, r1
 800e79c:	00d2      	lsls	r2, r2, #3
 800e79e:	21ff      	movs	r1, #255	@ 0xff
 800e7a0:	4091      	lsls	r1, r2
 800e7a2:	000a      	movs	r2, r1
 800e7a4:	43d2      	mvns	r2, r2
 800e7a6:	401a      	ands	r2, r3
 800e7a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	019b      	lsls	r3, r3, #6
 800e7ae:	22ff      	movs	r2, #255	@ 0xff
 800e7b0:	401a      	ands	r2, r3
 800e7b2:	1dfb      	adds	r3, r7, #7
 800e7b4:	781b      	ldrb	r3, [r3, #0]
 800e7b6:	0018      	movs	r0, r3
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	4003      	ands	r3, r0
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e7c0:	4809      	ldr	r0, [pc, #36]	@ (800e7e8 <__NVIC_SetPriority+0xd8>)
 800e7c2:	1dfb      	adds	r3, r7, #7
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	001c      	movs	r4, r3
 800e7c8:	230f      	movs	r3, #15
 800e7ca:	4023      	ands	r3, r4
 800e7cc:	3b08      	subs	r3, #8
 800e7ce:	089b      	lsrs	r3, r3, #2
 800e7d0:	430a      	orrs	r2, r1
 800e7d2:	3306      	adds	r3, #6
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	18c3      	adds	r3, r0, r3
 800e7d8:	3304      	adds	r3, #4
 800e7da:	601a      	str	r2, [r3, #0]
}
 800e7dc:	46c0      	nop			@ (mov r8, r8)
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	b003      	add	sp, #12
 800e7e2:	bd90      	pop	{r4, r7, pc}
 800e7e4:	e000e100 	.word	0xe000e100
 800e7e8:	e000ed00 	.word	0xe000ed00

0800e7ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	1e5a      	subs	r2, r3, #1
 800e7f8:	2380      	movs	r3, #128	@ 0x80
 800e7fa:	045b      	lsls	r3, r3, #17
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d301      	bcc.n	800e804 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e800:	2301      	movs	r3, #1
 800e802:	e010      	b.n	800e826 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e804:	4b0a      	ldr	r3, [pc, #40]	@ (800e830 <SysTick_Config+0x44>)
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	3a01      	subs	r2, #1
 800e80a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e80c:	2301      	movs	r3, #1
 800e80e:	425b      	negs	r3, r3
 800e810:	2103      	movs	r1, #3
 800e812:	0018      	movs	r0, r3
 800e814:	f7ff ff7c 	bl	800e710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e818:	4b05      	ldr	r3, [pc, #20]	@ (800e830 <SysTick_Config+0x44>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e81e:	4b04      	ldr	r3, [pc, #16]	@ (800e830 <SysTick_Config+0x44>)
 800e820:	2207      	movs	r2, #7
 800e822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e824:	2300      	movs	r3, #0
}
 800e826:	0018      	movs	r0, r3
 800e828:	46bd      	mov	sp, r7
 800e82a:	b002      	add	sp, #8
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	46c0      	nop			@ (mov r8, r8)
 800e830:	e000e010 	.word	0xe000e010

0800e834 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60b9      	str	r1, [r7, #8]
 800e83c:	607a      	str	r2, [r7, #4]
 800e83e:	210f      	movs	r1, #15
 800e840:	187b      	adds	r3, r7, r1
 800e842:	1c02      	adds	r2, r0, #0
 800e844:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800e846:	68ba      	ldr	r2, [r7, #8]
 800e848:	187b      	adds	r3, r7, r1
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	b25b      	sxtb	r3, r3
 800e84e:	0011      	movs	r1, r2
 800e850:	0018      	movs	r0, r3
 800e852:	f7ff ff5d 	bl	800e710 <__NVIC_SetPriority>
}
 800e856:	46c0      	nop			@ (mov r8, r8)
 800e858:	46bd      	mov	sp, r7
 800e85a:	b004      	add	sp, #16
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b082      	sub	sp, #8
 800e862:	af00      	add	r7, sp, #0
 800e864:	0002      	movs	r2, r0
 800e866:	1dfb      	adds	r3, r7, #7
 800e868:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e86a:	1dfb      	adds	r3, r7, #7
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	b25b      	sxtb	r3, r3
 800e870:	0018      	movs	r0, r3
 800e872:	f7ff ff33 	bl	800e6dc <__NVIC_EnableIRQ>
}
 800e876:	46c0      	nop			@ (mov r8, r8)
 800e878:	46bd      	mov	sp, r7
 800e87a:	b002      	add	sp, #8
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b082      	sub	sp, #8
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	0018      	movs	r0, r3
 800e88a:	f7ff ffaf 	bl	800e7ec <SysTick_Config>
 800e88e:	0003      	movs	r3, r0
}
 800e890:	0018      	movs	r0, r3
 800e892:	46bd      	mov	sp, r7
 800e894:	b002      	add	sp, #8
 800e896:	bd80      	pop	{r7, pc}

0800e898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d101      	bne.n	800e8aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e061      	b.n	800e96e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a32      	ldr	r2, [pc, #200]	@ (800e978 <HAL_DMA_Init+0xe0>)
 800e8b0:	4694      	mov	ip, r2
 800e8b2:	4463      	add	r3, ip
 800e8b4:	2114      	movs	r1, #20
 800e8b6:	0018      	movs	r0, r3
 800e8b8:	f7f1 fc74 	bl	80001a4 <__udivsi3>
 800e8bc:	0003      	movs	r3, r0
 800e8be:	009a      	lsls	r2, r3, #2
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a2d      	ldr	r2, [pc, #180]	@ (800e97c <HAL_DMA_Init+0xe4>)
 800e8c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2225      	movs	r2, #37	@ 0x25
 800e8ce:	2102      	movs	r1, #2
 800e8d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	4a28      	ldr	r2, [pc, #160]	@ (800e980 <HAL_DMA_Init+0xe8>)
 800e8de:	4013      	ands	r3, r2
 800e8e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800e8ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e8f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	699b      	ldr	r3, [r3, #24]
 800e8fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a1b      	ldr	r3, [r3, #32]
 800e908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	689a      	ldr	r2, [r3, #8]
 800e91c:	2380      	movs	r3, #128	@ 0x80
 800e91e:	01db      	lsls	r3, r3, #7
 800e920:	429a      	cmp	r2, r3
 800e922:	d018      	beq.n	800e956 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800e924:	4b17      	ldr	r3, [pc, #92]	@ (800e984 <HAL_DMA_Init+0xec>)
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e92c:	211c      	movs	r1, #28
 800e92e:	400b      	ands	r3, r1
 800e930:	210f      	movs	r1, #15
 800e932:	4099      	lsls	r1, r3
 800e934:	000b      	movs	r3, r1
 800e936:	43d9      	mvns	r1, r3
 800e938:	4b12      	ldr	r3, [pc, #72]	@ (800e984 <HAL_DMA_Init+0xec>)
 800e93a:	400a      	ands	r2, r1
 800e93c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800e93e:	4b11      	ldr	r3, [pc, #68]	@ (800e984 <HAL_DMA_Init+0xec>)
 800e940:	6819      	ldr	r1, [r3, #0]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e94a:	201c      	movs	r0, #28
 800e94c:	4003      	ands	r3, r0
 800e94e:	409a      	lsls	r2, r3
 800e950:	4b0c      	ldr	r3, [pc, #48]	@ (800e984 <HAL_DMA_Init+0xec>)
 800e952:	430a      	orrs	r2, r1
 800e954:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2225      	movs	r2, #37	@ 0x25
 800e960:	2101      	movs	r1, #1
 800e962:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2224      	movs	r2, #36	@ 0x24
 800e968:	2100      	movs	r1, #0
 800e96a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	0018      	movs	r0, r3
 800e970:	46bd      	mov	sp, r7
 800e972:	b004      	add	sp, #16
 800e974:	bd80      	pop	{r7, pc}
 800e976:	46c0      	nop			@ (mov r8, r8)
 800e978:	bffdfff8 	.word	0xbffdfff8
 800e97c:	40020000 	.word	0x40020000
 800e980:	ffff800f 	.word	0xffff800f
 800e984:	400200a8 	.word	0x400200a8

0800e988 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e996:	2317      	movs	r3, #23
 800e998:	18fb      	adds	r3, r7, r3
 800e99a:	2200      	movs	r2, #0
 800e99c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2224      	movs	r2, #36	@ 0x24
 800e9a2:	5c9b      	ldrb	r3, [r3, r2]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d101      	bne.n	800e9ac <HAL_DMA_Start_IT+0x24>
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	e04f      	b.n	800ea4c <HAL_DMA_Start_IT+0xc4>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2224      	movs	r2, #36	@ 0x24
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2225      	movs	r2, #37	@ 0x25
 800e9b8:	5c9b      	ldrb	r3, [r3, r2]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d13a      	bne.n	800ea36 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2225      	movs	r2, #37	@ 0x25
 800e9c4:	2102      	movs	r1, #2
 800e9c6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2101      	movs	r1, #1
 800e9da:	438a      	bics	r2, r1
 800e9dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	68b9      	ldr	r1, [r7, #8]
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f000 f976 	bl	800ecd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d008      	beq.n	800ea04 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	210e      	movs	r1, #14
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	601a      	str	r2, [r3, #0]
 800ea02:	e00f      	b.n	800ea24 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2104      	movs	r1, #4
 800ea10:	438a      	bics	r2, r1
 800ea12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	210a      	movs	r1, #10
 800ea20:	430a      	orrs	r2, r1
 800ea22:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2101      	movs	r1, #1
 800ea30:	430a      	orrs	r2, r1
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	e007      	b.n	800ea46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2224      	movs	r2, #36	@ 0x24
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800ea3e:	2317      	movs	r3, #23
 800ea40:	18fb      	adds	r3, r7, r3
 800ea42:	2202      	movs	r2, #2
 800ea44:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ea46:	2317      	movs	r3, #23
 800ea48:	18fb      	adds	r3, r7, r3
 800ea4a:	781b      	ldrb	r3, [r3, #0]
}
 800ea4c:	0018      	movs	r0, r3
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	b006      	add	sp, #24
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea5c:	230f      	movs	r3, #15
 800ea5e:	18fb      	adds	r3, r7, r3
 800ea60:	2200      	movs	r2, #0
 800ea62:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2225      	movs	r2, #37	@ 0x25
 800ea68:	5c9b      	ldrb	r3, [r3, r2]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b02      	cmp	r3, #2
 800ea6e:	d008      	beq.n	800ea82 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2204      	movs	r2, #4
 800ea74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2224      	movs	r2, #36	@ 0x24
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	e024      	b.n	800eacc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	210e      	movs	r1, #14
 800ea8e:	438a      	bics	r2, r1
 800ea90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2101      	movs	r1, #1
 800ea9e:	438a      	bics	r2, r1
 800eaa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaa6:	221c      	movs	r2, #28
 800eaa8:	401a      	ands	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaae:	2101      	movs	r1, #1
 800eab0:	4091      	lsls	r1, r2
 800eab2:	000a      	movs	r2, r1
 800eab4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2225      	movs	r2, #37	@ 0x25
 800eaba:	2101      	movs	r1, #1
 800eabc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2224      	movs	r2, #36	@ 0x24
 800eac2:	2100      	movs	r1, #0
 800eac4:	5499      	strb	r1, [r3, r2]

    return status;
 800eac6:	230f      	movs	r3, #15
 800eac8:	18fb      	adds	r3, r7, r3
 800eaca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eacc:	0018      	movs	r0, r3
 800eace:	46bd      	mov	sp, r7
 800ead0:	b004      	add	sp, #16
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eadc:	210f      	movs	r1, #15
 800eade:	187b      	adds	r3, r7, r1
 800eae0:	2200      	movs	r2, #0
 800eae2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2225      	movs	r2, #37	@ 0x25
 800eae8:	5c9b      	ldrb	r3, [r3, r2]
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	d006      	beq.n	800eafe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800eaf6:	187b      	adds	r3, r7, r1
 800eaf8:	2201      	movs	r2, #1
 800eafa:	701a      	strb	r2, [r3, #0]
 800eafc:	e02a      	b.n	800eb54 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	210e      	movs	r1, #14
 800eb0a:	438a      	bics	r2, r1
 800eb0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2101      	movs	r1, #1
 800eb1a:	438a      	bics	r2, r1
 800eb1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb22:	221c      	movs	r2, #28
 800eb24:	401a      	ands	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb2a:	2101      	movs	r1, #1
 800eb2c:	4091      	lsls	r1, r2
 800eb2e:	000a      	movs	r2, r1
 800eb30:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2225      	movs	r2, #37	@ 0x25
 800eb36:	2101      	movs	r1, #1
 800eb38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2224      	movs	r2, #36	@ 0x24
 800eb3e:	2100      	movs	r1, #0
 800eb40:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d004      	beq.n	800eb54 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	0010      	movs	r0, r2
 800eb52:	4798      	blx	r3
    }
  }
  return status;
 800eb54:	230f      	movs	r3, #15
 800eb56:	18fb      	adds	r3, r7, r3
 800eb58:	781b      	ldrb	r3, [r3, #0]
}
 800eb5a:	0018      	movs	r0, r3
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	b004      	add	sp, #16
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b084      	sub	sp, #16
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb7e:	221c      	movs	r2, #28
 800eb80:	4013      	ands	r3, r2
 800eb82:	2204      	movs	r2, #4
 800eb84:	409a      	lsls	r2, r3
 800eb86:	0013      	movs	r3, r2
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	d026      	beq.n	800ebdc <HAL_DMA_IRQHandler+0x7a>
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	2204      	movs	r2, #4
 800eb92:	4013      	ands	r3, r2
 800eb94:	d022      	beq.n	800ebdc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2220      	movs	r2, #32
 800eb9e:	4013      	ands	r3, r2
 800eba0:	d107      	bne.n	800ebb2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2104      	movs	r1, #4
 800ebae:	438a      	bics	r2, r1
 800ebb0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebb6:	221c      	movs	r2, #28
 800ebb8:	401a      	ands	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebbe:	2104      	movs	r1, #4
 800ebc0:	4091      	lsls	r1, r2
 800ebc2:	000a      	movs	r2, r1
 800ebc4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d100      	bne.n	800ebd0 <HAL_DMA_IRQHandler+0x6e>
 800ebce:	e071      	b.n	800ecb4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	0010      	movs	r0, r2
 800ebd8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800ebda:	e06b      	b.n	800ecb4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebe0:	221c      	movs	r2, #28
 800ebe2:	4013      	ands	r3, r2
 800ebe4:	2202      	movs	r2, #2
 800ebe6:	409a      	lsls	r2, r3
 800ebe8:	0013      	movs	r3, r2
 800ebea:	68fa      	ldr	r2, [r7, #12]
 800ebec:	4013      	ands	r3, r2
 800ebee:	d02d      	beq.n	800ec4c <HAL_DMA_IRQHandler+0xea>
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	4013      	ands	r3, r2
 800ebf6:	d029      	beq.n	800ec4c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2220      	movs	r2, #32
 800ec00:	4013      	ands	r3, r2
 800ec02:	d10b      	bne.n	800ec1c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	210a      	movs	r1, #10
 800ec10:	438a      	bics	r2, r1
 800ec12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2225      	movs	r2, #37	@ 0x25
 800ec18:	2101      	movs	r1, #1
 800ec1a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec20:	221c      	movs	r2, #28
 800ec22:	401a      	ands	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec28:	2102      	movs	r1, #2
 800ec2a:	4091      	lsls	r1, r2
 800ec2c:	000a      	movs	r2, r1
 800ec2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2224      	movs	r2, #36	@ 0x24
 800ec34:	2100      	movs	r1, #0
 800ec36:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d039      	beq.n	800ecb4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	0010      	movs	r0, r2
 800ec48:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800ec4a:	e033      	b.n	800ecb4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec50:	221c      	movs	r2, #28
 800ec52:	4013      	ands	r3, r2
 800ec54:	2208      	movs	r2, #8
 800ec56:	409a      	lsls	r2, r3
 800ec58:	0013      	movs	r3, r2
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	4013      	ands	r3, r2
 800ec5e:	d02a      	beq.n	800ecb6 <HAL_DMA_IRQHandler+0x154>
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2208      	movs	r2, #8
 800ec64:	4013      	ands	r3, r2
 800ec66:	d026      	beq.n	800ecb6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	210e      	movs	r1, #14
 800ec74:	438a      	bics	r2, r1
 800ec76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec7c:	221c      	movs	r2, #28
 800ec7e:	401a      	ands	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec84:	2101      	movs	r1, #1
 800ec86:	4091      	lsls	r1, r2
 800ec88:	000a      	movs	r2, r1
 800ec8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2225      	movs	r2, #37	@ 0x25
 800ec96:	2101      	movs	r1, #1
 800ec98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2224      	movs	r2, #36	@ 0x24
 800ec9e:	2100      	movs	r1, #0
 800eca0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d005      	beq.n	800ecb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	0010      	movs	r0, r2
 800ecb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ecb4:	46c0      	nop			@ (mov r8, r8)
 800ecb6:	46c0      	nop			@ (mov r8, r8)
}
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	b004      	add	sp, #16
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ecbe:	b580      	push	{r7, lr}
 800ecc0:	b082      	sub	sp, #8
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2225      	movs	r2, #37	@ 0x25
 800ecca:	5c9b      	ldrb	r3, [r3, r2]
 800eccc:	b2db      	uxtb	r3, r3
}
 800ecce:	0018      	movs	r0, r3
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	b002      	add	sp, #8
 800ecd4:	bd80      	pop	{r7, pc}

0800ecd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b084      	sub	sp, #16
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	60f8      	str	r0, [r7, #12]
 800ecde:	60b9      	str	r1, [r7, #8]
 800ece0:	607a      	str	r2, [r7, #4]
 800ece2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ece8:	221c      	movs	r2, #28
 800ecea:	401a      	ands	r2, r3
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	4091      	lsls	r1, r2
 800ecf4:	000a      	movs	r2, r1
 800ecf6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	2b10      	cmp	r3, #16
 800ed06:	d108      	bne.n	800ed1a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	68ba      	ldr	r2, [r7, #8]
 800ed16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ed18:	e007      	b.n	800ed2a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	68ba      	ldr	r2, [r7, #8]
 800ed20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	60da      	str	r2, [r3, #12]
}
 800ed2a:	46c0      	nop			@ (mov r8, r8)
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	b004      	add	sp, #16
 800ed30:	bd80      	pop	{r7, pc}
	...

0800ed34 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ed3c:	f7ff f8e8 	bl	800df10 <HAL_GetTick>
 800ed40:	0003      	movs	r3, r0
 800ed42:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ed44:	e00f      	b.n	800ed66 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3301      	adds	r3, #1
 800ed4a:	d00c      	beq.n	800ed66 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d007      	beq.n	800ed62 <FLASH_WaitForLastOperation+0x2e>
 800ed52:	f7ff f8dd 	bl	800df10 <HAL_GetTick>
 800ed56:	0002      	movs	r2, r0
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	1ad3      	subs	r3, r2, r3
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d201      	bcs.n	800ed66 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ed62:	2303      	movs	r3, #3
 800ed64:	e052      	b.n	800ee0c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ed66:	4b2b      	ldr	r3, [pc, #172]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800ed68:	699b      	ldr	r3, [r3, #24]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d0e9      	beq.n	800ed46 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ed72:	4b28      	ldr	r3, [pc, #160]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800ed74:	699b      	ldr	r3, [r3, #24]
 800ed76:	2202      	movs	r2, #2
 800ed78:	4013      	ands	r3, r2
 800ed7a:	2b02      	cmp	r3, #2
 800ed7c:	d102      	bne.n	800ed84 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ed7e:	4b25      	ldr	r3, [pc, #148]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800ed80:	2202      	movs	r2, #2
 800ed82:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ed84:	4b23      	ldr	r3, [pc, #140]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800ed86:	699a      	ldr	r2, [r3, #24]
 800ed88:	2380      	movs	r3, #128	@ 0x80
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	401a      	ands	r2, r3
 800ed8e:	2380      	movs	r3, #128	@ 0x80
 800ed90:	005b      	lsls	r3, r3, #1
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d035      	beq.n	800ee02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ed96:	4b1f      	ldr	r3, [pc, #124]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800ed98:	699a      	ldr	r2, [r3, #24]
 800ed9a:	2380      	movs	r3, #128	@ 0x80
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800eda0:	2380      	movs	r3, #128	@ 0x80
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d02c      	beq.n	800ee02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800eda8:	4b1a      	ldr	r3, [pc, #104]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800edaa:	699a      	ldr	r2, [r3, #24]
 800edac:	2380      	movs	r3, #128	@ 0x80
 800edae:	00db      	lsls	r3, r3, #3
 800edb0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800edb2:	2380      	movs	r3, #128	@ 0x80
 800edb4:	00db      	lsls	r3, r3, #3
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d023      	beq.n	800ee02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800edba:	4b16      	ldr	r3, [pc, #88]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800edbc:	699a      	ldr	r2, [r3, #24]
 800edbe:	2380      	movs	r3, #128	@ 0x80
 800edc0:	011b      	lsls	r3, r3, #4
 800edc2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800edc4:	2380      	movs	r3, #128	@ 0x80
 800edc6:	011b      	lsls	r3, r3, #4
 800edc8:	429a      	cmp	r2, r3
 800edca:	d01a      	beq.n	800ee02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800edcc:	4b11      	ldr	r3, [pc, #68]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800edce:	699a      	ldr	r2, [r3, #24]
 800edd0:	2380      	movs	r3, #128	@ 0x80
 800edd2:	019b      	lsls	r3, r3, #6
 800edd4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800edd6:	2380      	movs	r3, #128	@ 0x80
 800edd8:	019b      	lsls	r3, r3, #6
 800edda:	429a      	cmp	r2, r3
 800eddc:	d011      	beq.n	800ee02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800edde:	4b0d      	ldr	r3, [pc, #52]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800ede0:	699a      	ldr	r2, [r3, #24]
 800ede2:	2380      	movs	r3, #128	@ 0x80
 800ede4:	029b      	lsls	r3, r3, #10
 800ede6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ede8:	2380      	movs	r3, #128	@ 0x80
 800edea:	029b      	lsls	r3, r3, #10
 800edec:	429a      	cmp	r2, r3
 800edee:	d008      	beq.n	800ee02 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800edf0:	4b08      	ldr	r3, [pc, #32]	@ (800ee14 <FLASH_WaitForLastOperation+0xe0>)
 800edf2:	699a      	ldr	r2, [r3, #24]
 800edf4:	2380      	movs	r3, #128	@ 0x80
 800edf6:	025b      	lsls	r3, r3, #9
 800edf8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800edfa:	2380      	movs	r3, #128	@ 0x80
 800edfc:	025b      	lsls	r3, r3, #9
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d103      	bne.n	800ee0a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ee02:	f000 f809 	bl	800ee18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ee06:	2301      	movs	r3, #1
 800ee08:	e000      	b.n	800ee0c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	0018      	movs	r0, r3
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	b004      	add	sp, #16
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	40022000 	.word	0x40022000

0800ee18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ee22:	4b49      	ldr	r3, [pc, #292]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800ee24:	699a      	ldr	r2, [r3, #24]
 800ee26:	2380      	movs	r3, #128	@ 0x80
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	401a      	ands	r2, r3
 800ee2c:	2380      	movs	r3, #128	@ 0x80
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d10a      	bne.n	800ee4a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ee34:	4b45      	ldr	r3, [pc, #276]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	2202      	movs	r2, #2
 800ee3a:	431a      	orrs	r2, r3
 800ee3c:	4b43      	ldr	r3, [pc, #268]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ee3e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2280      	movs	r2, #128	@ 0x80
 800ee44:	0052      	lsls	r2, r2, #1
 800ee46:	4313      	orrs	r3, r2
 800ee48:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800ee4a:	4b3f      	ldr	r3, [pc, #252]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800ee4c:	699a      	ldr	r2, [r3, #24]
 800ee4e:	2380      	movs	r3, #128	@ 0x80
 800ee50:	009b      	lsls	r3, r3, #2
 800ee52:	401a      	ands	r2, r3
 800ee54:	2380      	movs	r3, #128	@ 0x80
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d10a      	bne.n	800ee72 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ee5c:	4b3b      	ldr	r3, [pc, #236]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ee5e:	695b      	ldr	r3, [r3, #20]
 800ee60:	2201      	movs	r2, #1
 800ee62:	431a      	orrs	r2, r3
 800ee64:	4b39      	ldr	r3, [pc, #228]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ee66:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2280      	movs	r2, #128	@ 0x80
 800ee6c:	0092      	lsls	r2, r2, #2
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ee72:	4b35      	ldr	r3, [pc, #212]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800ee74:	699a      	ldr	r2, [r3, #24]
 800ee76:	2380      	movs	r3, #128	@ 0x80
 800ee78:	00db      	lsls	r3, r3, #3
 800ee7a:	401a      	ands	r2, r3
 800ee7c:	2380      	movs	r3, #128	@ 0x80
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d10a      	bne.n	800ee9a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ee84:	4b31      	ldr	r3, [pc, #196]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ee86:	695b      	ldr	r3, [r3, #20]
 800ee88:	2208      	movs	r2, #8
 800ee8a:	431a      	orrs	r2, r3
 800ee8c:	4b2f      	ldr	r3, [pc, #188]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ee8e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2280      	movs	r2, #128	@ 0x80
 800ee94:	00d2      	lsls	r2, r2, #3
 800ee96:	4313      	orrs	r3, r2
 800ee98:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ee9a:	4b2b      	ldr	r3, [pc, #172]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800ee9c:	699a      	ldr	r2, [r3, #24]
 800ee9e:	2380      	movs	r3, #128	@ 0x80
 800eea0:	011b      	lsls	r3, r3, #4
 800eea2:	401a      	ands	r2, r3
 800eea4:	2380      	movs	r3, #128	@ 0x80
 800eea6:	011b      	lsls	r3, r3, #4
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d10a      	bne.n	800eec2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800eeac:	4b27      	ldr	r3, [pc, #156]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800eeae:	695b      	ldr	r3, [r3, #20]
 800eeb0:	2204      	movs	r2, #4
 800eeb2:	431a      	orrs	r2, r3
 800eeb4:	4b25      	ldr	r3, [pc, #148]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800eeb6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2280      	movs	r2, #128	@ 0x80
 800eebc:	0112      	lsls	r2, r2, #4
 800eebe:	4313      	orrs	r3, r2
 800eec0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800eec2:	4b21      	ldr	r3, [pc, #132]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800eec4:	699a      	ldr	r2, [r3, #24]
 800eec6:	2380      	movs	r3, #128	@ 0x80
 800eec8:	019b      	lsls	r3, r3, #6
 800eeca:	401a      	ands	r2, r3
 800eecc:	2380      	movs	r3, #128	@ 0x80
 800eece:	019b      	lsls	r3, r3, #6
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d10a      	bne.n	800eeea <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800eed4:	4b1d      	ldr	r3, [pc, #116]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	2210      	movs	r2, #16
 800eeda:	431a      	orrs	r2, r3
 800eedc:	4b1b      	ldr	r3, [pc, #108]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800eede:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2280      	movs	r2, #128	@ 0x80
 800eee4:	0192      	lsls	r2, r2, #6
 800eee6:	4313      	orrs	r3, r2
 800eee8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800eeea:	4b17      	ldr	r3, [pc, #92]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800eeec:	699a      	ldr	r2, [r3, #24]
 800eeee:	2380      	movs	r3, #128	@ 0x80
 800eef0:	029b      	lsls	r3, r3, #10
 800eef2:	401a      	ands	r2, r3
 800eef4:	2380      	movs	r3, #128	@ 0x80
 800eef6:	029b      	lsls	r3, r3, #10
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d109      	bne.n	800ef10 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800eefc:	4b13      	ldr	r3, [pc, #76]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800eefe:	695b      	ldr	r3, [r3, #20]
 800ef00:	2220      	movs	r2, #32
 800ef02:	431a      	orrs	r2, r3
 800ef04:	4b11      	ldr	r3, [pc, #68]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ef06:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2220      	movs	r2, #32
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800ef10:	4b0d      	ldr	r3, [pc, #52]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800ef12:	699a      	ldr	r2, [r3, #24]
 800ef14:	2380      	movs	r3, #128	@ 0x80
 800ef16:	025b      	lsls	r3, r3, #9
 800ef18:	401a      	ands	r2, r3
 800ef1a:	2380      	movs	r3, #128	@ 0x80
 800ef1c:	025b      	lsls	r3, r3, #9
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d10a      	bne.n	800ef38 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800ef22:	4b0a      	ldr	r3, [pc, #40]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	2240      	movs	r2, #64	@ 0x40
 800ef28:	431a      	orrs	r2, r3
 800ef2a:	4b08      	ldr	r3, [pc, #32]	@ (800ef4c <FLASH_SetErrorCode+0x134>)
 800ef2c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2280      	movs	r2, #128	@ 0x80
 800ef32:	0252      	lsls	r2, r2, #9
 800ef34:	4313      	orrs	r3, r2
 800ef36:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ef38:	4b03      	ldr	r3, [pc, #12]	@ (800ef48 <FLASH_SetErrorCode+0x130>)
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	619a      	str	r2, [r3, #24]
}  
 800ef3e:	46c0      	nop			@ (mov r8, r8)
 800ef40:	46bd      	mov	sp, r7
 800ef42:	b002      	add	sp, #8
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	46c0      	nop			@ (mov r8, r8)
 800ef48:	40022000 	.word	0x40022000
 800ef4c:	2000251c 	.word	0x2000251c

0800ef50 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ef56:	4b12      	ldr	r3, [pc, #72]	@ (800efa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	d019      	beq.n	800ef94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef60:	f3ef 8310 	mrs	r3, PRIMASK
 800ef64:	607b      	str	r3, [r7, #4]
  return(result);
 800ef66:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ef68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef6a:	b672      	cpsid	i
}
 800ef6c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ef6e:	4b0c      	ldr	r3, [pc, #48]	@ (800efa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ef70:	4a0c      	ldr	r2, [pc, #48]	@ (800efa4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ef72:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ef74:	4b0a      	ldr	r3, [pc, #40]	@ (800efa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ef76:	4a0c      	ldr	r2, [pc, #48]	@ (800efa8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ef78:	60da      	str	r2, [r3, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	f383 8810 	msr	PRIMASK, r3
}
 800ef84:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ef86:	4b06      	ldr	r3, [pc, #24]	@ (800efa0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	d001      	beq.n	800ef94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e000      	b.n	800ef96 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ef94:	2300      	movs	r3, #0
}
 800ef96:	0018      	movs	r0, r3
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	b004      	add	sp, #16
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	46c0      	nop			@ (mov r8, r8)
 800efa0:	40022000 	.word	0x40022000
 800efa4:	89abcdef 	.word	0x89abcdef
 800efa8:	02030405 	.word	0x02030405

0800efac <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800efb0:	4b04      	ldr	r3, [pc, #16]	@ (800efc4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	4b03      	ldr	r3, [pc, #12]	@ (800efc4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800efb6:	2101      	movs	r1, #1
 800efb8:	430a      	orrs	r2, r1
 800efba:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	0018      	movs	r0, r3
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	40022000 	.word	0x40022000

0800efc8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800efc8:	b5b0      	push	{r4, r5, r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800efd0:	250f      	movs	r5, #15
 800efd2:	197b      	adds	r3, r7, r5
 800efd4:	2200      	movs	r2, #0
 800efd6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800efd8:	197c      	adds	r4, r7, r5
 800efda:	4b0f      	ldr	r3, [pc, #60]	@ (800f018 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800efdc:	0018      	movs	r0, r3
 800efde:	f7ff fea9 	bl	800ed34 <FLASH_WaitForLastOperation>
 800efe2:	0003      	movs	r3, r0
 800efe4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800efe6:	0029      	movs	r1, r5
 800efe8:	187b      	adds	r3, r7, r1
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d10c      	bne.n	800f00a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800eff0:	4b0a      	ldr	r3, [pc, #40]	@ (800f01c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2200      	movs	r2, #0
 800effa:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800effc:	187c      	adds	r4, r7, r1
 800effe:	4b06      	ldr	r3, [pc, #24]	@ (800f018 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f000:	0018      	movs	r0, r3
 800f002:	f7ff fe97 	bl	800ed34 <FLASH_WaitForLastOperation>
 800f006:	0003      	movs	r3, r0
 800f008:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f00a:	230f      	movs	r3, #15
 800f00c:	18fb      	adds	r3, r7, r3
 800f00e:	781b      	ldrb	r3, [r3, #0]
}  
 800f010:	0018      	movs	r0, r3
 800f012:	46bd      	mov	sp, r7
 800f014:	b004      	add	sp, #16
 800f016:	bdb0      	pop	{r4, r5, r7, pc}
 800f018:	0000c350 	.word	0x0000c350
 800f01c:	2000251c 	.word	0x2000251c

0800f020 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f020:	b5b0      	push	{r4, r5, r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f02c:	2317      	movs	r3, #23
 800f02e:	18fb      	adds	r3, r7, r3
 800f030:	2201      	movs	r2, #1
 800f032:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f034:	4b24      	ldr	r3, [pc, #144]	@ (800f0c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f036:	7c1b      	ldrb	r3, [r3, #16]
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d101      	bne.n	800f040 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f03c:	2302      	movs	r3, #2
 800f03e:	e03e      	b.n	800f0be <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f040:	4b21      	ldr	r3, [pc, #132]	@ (800f0c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f042:	2201      	movs	r2, #1
 800f044:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f046:	2517      	movs	r5, #23
 800f048:	197c      	adds	r4, r7, r5
 800f04a:	4b20      	ldr	r3, [pc, #128]	@ (800f0cc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f04c:	0018      	movs	r0, r3
 800f04e:	f7ff fe71 	bl	800ed34 <FLASH_WaitForLastOperation>
 800f052:	0003      	movs	r3, r0
 800f054:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f056:	197b      	adds	r3, r7, r5
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d129      	bne.n	800f0b2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f05e:	4b1a      	ldr	r3, [pc, #104]	@ (800f0c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f060:	2200      	movs	r2, #0
 800f062:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b02      	cmp	r3, #2
 800f068:	d103      	bne.n	800f072 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	e013      	b.n	800f09a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d104      	bne.n	800f082 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	b292      	uxth	r2, r2
 800f07e:	801a      	strh	r2, [r3, #0]
 800f080:	e00b      	b.n	800f09a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d104      	bne.n	800f092 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	b2d2      	uxtb	r2, r2
 800f08e:	701a      	strb	r2, [r3, #0]
 800f090:	e003      	b.n	800f09a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f092:	2317      	movs	r3, #23
 800f094:	18fb      	adds	r3, r7, r3
 800f096:	2201      	movs	r2, #1
 800f098:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f09a:	2217      	movs	r2, #23
 800f09c:	18bb      	adds	r3, r7, r2
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d106      	bne.n	800f0b2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f0a4:	18bc      	adds	r4, r7, r2
 800f0a6:	4b09      	ldr	r3, [pc, #36]	@ (800f0cc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f0a8:	0018      	movs	r0, r3
 800f0aa:	f7ff fe43 	bl	800ed34 <FLASH_WaitForLastOperation>
 800f0ae:	0003      	movs	r3, r0
 800f0b0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f0b2:	4b05      	ldr	r3, [pc, #20]	@ (800f0c8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	741a      	strb	r2, [r3, #16]

  return status;
 800f0b8:	2317      	movs	r3, #23
 800f0ba:	18fb      	adds	r3, r7, r3
 800f0bc:	781b      	ldrb	r3, [r3, #0]
}
 800f0be:	0018      	movs	r0, r3
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	b006      	add	sp, #24
 800f0c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f0c6:	46c0      	nop			@ (mov r8, r8)
 800f0c8:	2000251c 	.word	0x2000251c
 800f0cc:	0000c350 	.word	0x0000c350

0800f0d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b086      	sub	sp, #24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f0e6:	e155      	b.n	800f394 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	4091      	lsls	r1, r2
 800f0f2:	000a      	movs	r2, r1
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d100      	bne.n	800f100 <HAL_GPIO_Init+0x30>
 800f0fe:	e146      	b.n	800f38e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	2203      	movs	r2, #3
 800f106:	4013      	ands	r3, r2
 800f108:	2b01      	cmp	r3, #1
 800f10a:	d005      	beq.n	800f118 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	2203      	movs	r2, #3
 800f112:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f114:	2b02      	cmp	r3, #2
 800f116:	d130      	bne.n	800f17a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	005b      	lsls	r3, r3, #1
 800f122:	2203      	movs	r2, #3
 800f124:	409a      	lsls	r2, r3
 800f126:	0013      	movs	r3, r2
 800f128:	43da      	mvns	r2, r3
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	4013      	ands	r3, r2
 800f12e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	68da      	ldr	r2, [r3, #12]
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	409a      	lsls	r2, r3
 800f13a:	0013      	movs	r3, r2
 800f13c:	693a      	ldr	r2, [r7, #16]
 800f13e:	4313      	orrs	r3, r2
 800f140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f14e:	2201      	movs	r2, #1
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	409a      	lsls	r2, r3
 800f154:	0013      	movs	r3, r2
 800f156:	43da      	mvns	r2, r3
 800f158:	693b      	ldr	r3, [r7, #16]
 800f15a:	4013      	ands	r3, r2
 800f15c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	091b      	lsrs	r3, r3, #4
 800f164:	2201      	movs	r2, #1
 800f166:	401a      	ands	r2, r3
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	409a      	lsls	r2, r3
 800f16c:	0013      	movs	r3, r2
 800f16e:	693a      	ldr	r2, [r7, #16]
 800f170:	4313      	orrs	r3, r2
 800f172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	693a      	ldr	r2, [r7, #16]
 800f178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	2203      	movs	r2, #3
 800f180:	4013      	ands	r3, r2
 800f182:	2b03      	cmp	r3, #3
 800f184:	d017      	beq.n	800f1b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	005b      	lsls	r3, r3, #1
 800f190:	2203      	movs	r2, #3
 800f192:	409a      	lsls	r2, r3
 800f194:	0013      	movs	r3, r2
 800f196:	43da      	mvns	r2, r3
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	4013      	ands	r3, r2
 800f19c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	689a      	ldr	r2, [r3, #8]
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	409a      	lsls	r2, r3
 800f1a8:	0013      	movs	r3, r2
 800f1aa:	693a      	ldr	r2, [r7, #16]
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	693a      	ldr	r2, [r7, #16]
 800f1b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	2203      	movs	r2, #3
 800f1bc:	4013      	ands	r3, r2
 800f1be:	2b02      	cmp	r3, #2
 800f1c0:	d123      	bne.n	800f20a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	08da      	lsrs	r2, r3, #3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3208      	adds	r2, #8
 800f1ca:	0092      	lsls	r2, r2, #2
 800f1cc:	58d3      	ldr	r3, [r2, r3]
 800f1ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	2207      	movs	r2, #7
 800f1d4:	4013      	ands	r3, r2
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	220f      	movs	r2, #15
 800f1da:	409a      	lsls	r2, r3
 800f1dc:	0013      	movs	r3, r2
 800f1de:	43da      	mvns	r2, r3
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	4013      	ands	r3, r2
 800f1e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	691a      	ldr	r2, [r3, #16]
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	2107      	movs	r1, #7
 800f1ee:	400b      	ands	r3, r1
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	409a      	lsls	r2, r3
 800f1f4:	0013      	movs	r3, r2
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	4313      	orrs	r3, r2
 800f1fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	08da      	lsrs	r2, r3, #3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	3208      	adds	r2, #8
 800f204:	0092      	lsls	r2, r2, #2
 800f206:	6939      	ldr	r1, [r7, #16]
 800f208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	005b      	lsls	r3, r3, #1
 800f214:	2203      	movs	r2, #3
 800f216:	409a      	lsls	r2, r3
 800f218:	0013      	movs	r3, r2
 800f21a:	43da      	mvns	r2, r3
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	4013      	ands	r3, r2
 800f220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	2203      	movs	r2, #3
 800f228:	401a      	ands	r2, r3
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	005b      	lsls	r3, r3, #1
 800f22e:	409a      	lsls	r2, r3
 800f230:	0013      	movs	r3, r2
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	4313      	orrs	r3, r2
 800f236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	685a      	ldr	r2, [r3, #4]
 800f242:	23c0      	movs	r3, #192	@ 0xc0
 800f244:	029b      	lsls	r3, r3, #10
 800f246:	4013      	ands	r3, r2
 800f248:	d100      	bne.n	800f24c <HAL_GPIO_Init+0x17c>
 800f24a:	e0a0      	b.n	800f38e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f24c:	4b57      	ldr	r3, [pc, #348]	@ (800f3ac <HAL_GPIO_Init+0x2dc>)
 800f24e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f250:	4b56      	ldr	r3, [pc, #344]	@ (800f3ac <HAL_GPIO_Init+0x2dc>)
 800f252:	2101      	movs	r1, #1
 800f254:	430a      	orrs	r2, r1
 800f256:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800f258:	4a55      	ldr	r2, [pc, #340]	@ (800f3b0 <HAL_GPIO_Init+0x2e0>)
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	089b      	lsrs	r3, r3, #2
 800f25e:	3302      	adds	r3, #2
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	589b      	ldr	r3, [r3, r2]
 800f264:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2203      	movs	r2, #3
 800f26a:	4013      	ands	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	220f      	movs	r2, #15
 800f270:	409a      	lsls	r2, r3
 800f272:	0013      	movs	r3, r2
 800f274:	43da      	mvns	r2, r3
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	4013      	ands	r3, r2
 800f27a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	23a0      	movs	r3, #160	@ 0xa0
 800f280:	05db      	lsls	r3, r3, #23
 800f282:	429a      	cmp	r2, r3
 800f284:	d01f      	beq.n	800f2c6 <HAL_GPIO_Init+0x1f6>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	4a4a      	ldr	r2, [pc, #296]	@ (800f3b4 <HAL_GPIO_Init+0x2e4>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d019      	beq.n	800f2c2 <HAL_GPIO_Init+0x1f2>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4a49      	ldr	r2, [pc, #292]	@ (800f3b8 <HAL_GPIO_Init+0x2e8>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d013      	beq.n	800f2be <HAL_GPIO_Init+0x1ee>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	4a48      	ldr	r2, [pc, #288]	@ (800f3bc <HAL_GPIO_Init+0x2ec>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d00d      	beq.n	800f2ba <HAL_GPIO_Init+0x1ea>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4a47      	ldr	r2, [pc, #284]	@ (800f3c0 <HAL_GPIO_Init+0x2f0>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d007      	beq.n	800f2b6 <HAL_GPIO_Init+0x1e6>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a46      	ldr	r2, [pc, #280]	@ (800f3c4 <HAL_GPIO_Init+0x2f4>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d101      	bne.n	800f2b2 <HAL_GPIO_Init+0x1e2>
 800f2ae:	2305      	movs	r3, #5
 800f2b0:	e00a      	b.n	800f2c8 <HAL_GPIO_Init+0x1f8>
 800f2b2:	2306      	movs	r3, #6
 800f2b4:	e008      	b.n	800f2c8 <HAL_GPIO_Init+0x1f8>
 800f2b6:	2304      	movs	r3, #4
 800f2b8:	e006      	b.n	800f2c8 <HAL_GPIO_Init+0x1f8>
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e004      	b.n	800f2c8 <HAL_GPIO_Init+0x1f8>
 800f2be:	2302      	movs	r3, #2
 800f2c0:	e002      	b.n	800f2c8 <HAL_GPIO_Init+0x1f8>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e000      	b.n	800f2c8 <HAL_GPIO_Init+0x1f8>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	697a      	ldr	r2, [r7, #20]
 800f2ca:	2103      	movs	r1, #3
 800f2cc:	400a      	ands	r2, r1
 800f2ce:	0092      	lsls	r2, r2, #2
 800f2d0:	4093      	lsls	r3, r2
 800f2d2:	693a      	ldr	r2, [r7, #16]
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f2d8:	4935      	ldr	r1, [pc, #212]	@ (800f3b0 <HAL_GPIO_Init+0x2e0>)
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	089b      	lsrs	r3, r3, #2
 800f2de:	3302      	adds	r3, #2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	693a      	ldr	r2, [r7, #16]
 800f2e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f2e6:	4b38      	ldr	r3, [pc, #224]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	43da      	mvns	r2, r3
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	4013      	ands	r3, r2
 800f2f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	685a      	ldr	r2, [r3, #4]
 800f2fa:	2380      	movs	r3, #128	@ 0x80
 800f2fc:	035b      	lsls	r3, r3, #13
 800f2fe:	4013      	ands	r3, r2
 800f300:	d003      	beq.n	800f30a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800f302:	693a      	ldr	r2, [r7, #16]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	4313      	orrs	r3, r2
 800f308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800f30a:	4b2f      	ldr	r3, [pc, #188]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f30c:	693a      	ldr	r2, [r7, #16]
 800f30e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800f310:	4b2d      	ldr	r3, [pc, #180]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	43da      	mvns	r2, r3
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	4013      	ands	r3, r2
 800f31e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	685a      	ldr	r2, [r3, #4]
 800f324:	2380      	movs	r3, #128	@ 0x80
 800f326:	039b      	lsls	r3, r3, #14
 800f328:	4013      	ands	r3, r2
 800f32a:	d003      	beq.n	800f334 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	4313      	orrs	r3, r2
 800f332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800f334:	4b24      	ldr	r3, [pc, #144]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800f33a:	4b23      	ldr	r3, [pc, #140]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	43da      	mvns	r2, r3
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	4013      	ands	r3, r2
 800f348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	2380      	movs	r3, #128	@ 0x80
 800f350:	029b      	lsls	r3, r3, #10
 800f352:	4013      	ands	r3, r2
 800f354:	d003      	beq.n	800f35e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800f356:	693a      	ldr	r2, [r7, #16]
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800f35e:	4b1a      	ldr	r3, [pc, #104]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f360:	693a      	ldr	r2, [r7, #16]
 800f362:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f364:	4b18      	ldr	r3, [pc, #96]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	43da      	mvns	r2, r3
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	4013      	ands	r3, r2
 800f372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	2380      	movs	r3, #128	@ 0x80
 800f37a:	025b      	lsls	r3, r3, #9
 800f37c:	4013      	ands	r3, r2
 800f37e:	d003      	beq.n	800f388 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f380:	693a      	ldr	r2, [r7, #16]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	4313      	orrs	r3, r2
 800f386:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f388:	4b0f      	ldr	r3, [pc, #60]	@ (800f3c8 <HAL_GPIO_Init+0x2f8>)
 800f38a:	693a      	ldr	r2, [r7, #16]
 800f38c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	3301      	adds	r3, #1
 800f392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	40da      	lsrs	r2, r3
 800f39c:	1e13      	subs	r3, r2, #0
 800f39e:	d000      	beq.n	800f3a2 <HAL_GPIO_Init+0x2d2>
 800f3a0:	e6a2      	b.n	800f0e8 <HAL_GPIO_Init+0x18>
  }
}
 800f3a2:	46c0      	nop			@ (mov r8, r8)
 800f3a4:	46c0      	nop			@ (mov r8, r8)
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	b006      	add	sp, #24
 800f3aa:	bd80      	pop	{r7, pc}
 800f3ac:	40021000 	.word	0x40021000
 800f3b0:	40010000 	.word	0x40010000
 800f3b4:	50000400 	.word	0x50000400
 800f3b8:	50000800 	.word	0x50000800
 800f3bc:	50000c00 	.word	0x50000c00
 800f3c0:	50001000 	.word	0x50001000
 800f3c4:	50001c00 	.word	0x50001c00
 800f3c8:	40010400 	.word	0x40010400

0800f3cc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	000a      	movs	r2, r1
 800f3d6:	1cbb      	adds	r3, r7, #2
 800f3d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	691b      	ldr	r3, [r3, #16]
 800f3de:	1cba      	adds	r2, r7, #2
 800f3e0:	8812      	ldrh	r2, [r2, #0]
 800f3e2:	4013      	ands	r3, r2
 800f3e4:	d004      	beq.n	800f3f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f3e6:	230f      	movs	r3, #15
 800f3e8:	18fb      	adds	r3, r7, r3
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	701a      	strb	r2, [r3, #0]
 800f3ee:	e003      	b.n	800f3f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f3f0:	230f      	movs	r3, #15
 800f3f2:	18fb      	adds	r3, r7, r3
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f3f8:	230f      	movs	r3, #15
 800f3fa:	18fb      	adds	r3, r7, r3
 800f3fc:	781b      	ldrb	r3, [r3, #0]
}
 800f3fe:	0018      	movs	r0, r3
 800f400:	46bd      	mov	sp, r7
 800f402:	b004      	add	sp, #16
 800f404:	bd80      	pop	{r7, pc}

0800f406 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f406:	b580      	push	{r7, lr}
 800f408:	b082      	sub	sp, #8
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	0008      	movs	r0, r1
 800f410:	0011      	movs	r1, r2
 800f412:	1cbb      	adds	r3, r7, #2
 800f414:	1c02      	adds	r2, r0, #0
 800f416:	801a      	strh	r2, [r3, #0]
 800f418:	1c7b      	adds	r3, r7, #1
 800f41a:	1c0a      	adds	r2, r1, #0
 800f41c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f41e:	1c7b      	adds	r3, r7, #1
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d004      	beq.n	800f430 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f426:	1cbb      	adds	r3, r7, #2
 800f428:	881a      	ldrh	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f42e:	e003      	b.n	800f438 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f430:	1cbb      	adds	r3, r7, #2
 800f432:	881a      	ldrh	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f438:	46c0      	nop			@ (mov r8, r8)
 800f43a:	46bd      	mov	sp, r7
 800f43c:	b002      	add	sp, #8
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	0002      	movs	r2, r0
 800f448:	1dbb      	adds	r3, r7, #6
 800f44a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f44c:	4b09      	ldr	r3, [pc, #36]	@ (800f474 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	1dba      	adds	r2, r7, #6
 800f452:	8812      	ldrh	r2, [r2, #0]
 800f454:	4013      	ands	r3, r2
 800f456:	d008      	beq.n	800f46a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f458:	4b06      	ldr	r3, [pc, #24]	@ (800f474 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f45a:	1dba      	adds	r2, r7, #6
 800f45c:	8812      	ldrh	r2, [r2, #0]
 800f45e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f460:	1dbb      	adds	r3, r7, #6
 800f462:	881b      	ldrh	r3, [r3, #0]
 800f464:	0018      	movs	r0, r3
 800f466:	f7f8 fd25 	bl	8007eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 800f46a:	46c0      	nop			@ (mov r8, r8)
 800f46c:	46bd      	mov	sp, r7
 800f46e:	b002      	add	sp, #8
 800f470:	bd80      	pop	{r7, pc}
 800f472:	46c0      	nop			@ (mov r8, r8)
 800f474:	40010400 	.word	0x40010400

0800f478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f486:	2301      	movs	r3, #1
 800f488:	e082      	b.n	800f590 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2241      	movs	r2, #65	@ 0x41
 800f48e:	5c9b      	ldrb	r3, [r3, r2]
 800f490:	b2db      	uxtb	r3, r3
 800f492:	2b00      	cmp	r3, #0
 800f494:	d107      	bne.n	800f4a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2240      	movs	r2, #64	@ 0x40
 800f49a:	2100      	movs	r1, #0
 800f49c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	0018      	movs	r0, r3
 800f4a2:	f7f8 f887 	bl	80075b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2241      	movs	r2, #65	@ 0x41
 800f4aa:	2124      	movs	r1, #36	@ 0x24
 800f4ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	438a      	bics	r2, r1
 800f4bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	685a      	ldr	r2, [r3, #4]
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4934      	ldr	r1, [pc, #208]	@ (800f598 <HAL_I2C_Init+0x120>)
 800f4c8:	400a      	ands	r2, r1
 800f4ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	689a      	ldr	r2, [r3, #8]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4931      	ldr	r1, [pc, #196]	@ (800f59c <HAL_I2C_Init+0x124>)
 800f4d8:	400a      	ands	r2, r1
 800f4da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d108      	bne.n	800f4f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	689a      	ldr	r2, [r3, #8]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2180      	movs	r1, #128	@ 0x80
 800f4ee:	0209      	lsls	r1, r1, #8
 800f4f0:	430a      	orrs	r2, r1
 800f4f2:	609a      	str	r2, [r3, #8]
 800f4f4:	e007      	b.n	800f506 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	689a      	ldr	r2, [r3, #8]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2184      	movs	r1, #132	@ 0x84
 800f500:	0209      	lsls	r1, r1, #8
 800f502:	430a      	orrs	r2, r1
 800f504:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	d104      	bne.n	800f518 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2280      	movs	r2, #128	@ 0x80
 800f514:	0112      	lsls	r2, r2, #4
 800f516:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	685a      	ldr	r2, [r3, #4]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	491f      	ldr	r1, [pc, #124]	@ (800f5a0 <HAL_I2C_Init+0x128>)
 800f524:	430a      	orrs	r2, r1
 800f526:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	68da      	ldr	r2, [r3, #12]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	491a      	ldr	r1, [pc, #104]	@ (800f59c <HAL_I2C_Init+0x124>)
 800f534:	400a      	ands	r2, r1
 800f536:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	691a      	ldr	r2, [r3, #16]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	695b      	ldr	r3, [r3, #20]
 800f540:	431a      	orrs	r2, r3
 800f542:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	699b      	ldr	r3, [r3, #24]
 800f548:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	430a      	orrs	r2, r1
 800f550:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	69d9      	ldr	r1, [r3, #28]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a1a      	ldr	r2, [r3, #32]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	430a      	orrs	r2, r1
 800f560:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2101      	movs	r1, #1
 800f56e:	430a      	orrs	r2, r1
 800f570:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2241      	movs	r2, #65	@ 0x41
 800f57c:	2120      	movs	r1, #32
 800f57e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2242      	movs	r2, #66	@ 0x42
 800f58a:	2100      	movs	r1, #0
 800f58c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f58e:	2300      	movs	r3, #0
}
 800f590:	0018      	movs	r0, r3
 800f592:	46bd      	mov	sp, r7
 800f594:	b002      	add	sp, #8
 800f596:	bd80      	pop	{r7, pc}
 800f598:	f0ffffff 	.word	0xf0ffffff
 800f59c:	ffff7fff 	.word	0xffff7fff
 800f5a0:	02008000 	.word	0x02008000

0800f5a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f5a4:	b590      	push	{r4, r7, lr}
 800f5a6:	b089      	sub	sp, #36	@ 0x24
 800f5a8:	af02      	add	r7, sp, #8
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	0008      	movs	r0, r1
 800f5ae:	607a      	str	r2, [r7, #4]
 800f5b0:	0019      	movs	r1, r3
 800f5b2:	230a      	movs	r3, #10
 800f5b4:	18fb      	adds	r3, r7, r3
 800f5b6:	1c02      	adds	r2, r0, #0
 800f5b8:	801a      	strh	r2, [r3, #0]
 800f5ba:	2308      	movs	r3, #8
 800f5bc:	18fb      	adds	r3, r7, r3
 800f5be:	1c0a      	adds	r2, r1, #0
 800f5c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2241      	movs	r2, #65	@ 0x41
 800f5c6:	5c9b      	ldrb	r3, [r3, r2]
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	2b20      	cmp	r3, #32
 800f5cc:	d000      	beq.n	800f5d0 <HAL_I2C_Master_Transmit+0x2c>
 800f5ce:	e0e7      	b.n	800f7a0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2240      	movs	r2, #64	@ 0x40
 800f5d4:	5c9b      	ldrb	r3, [r3, r2]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d101      	bne.n	800f5de <HAL_I2C_Master_Transmit+0x3a>
 800f5da:	2302      	movs	r3, #2
 800f5dc:	e0e1      	b.n	800f7a2 <HAL_I2C_Master_Transmit+0x1fe>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2240      	movs	r2, #64	@ 0x40
 800f5e2:	2101      	movs	r1, #1
 800f5e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f5e6:	f7fe fc93 	bl	800df10 <HAL_GetTick>
 800f5ea:	0003      	movs	r3, r0
 800f5ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f5ee:	2380      	movs	r3, #128	@ 0x80
 800f5f0:	0219      	lsls	r1, r3, #8
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	9300      	str	r3, [sp, #0]
 800f5f8:	2319      	movs	r3, #25
 800f5fa:	2201      	movs	r2, #1
 800f5fc:	f001 ff98 	bl	8011530 <I2C_WaitOnFlagUntilTimeout>
 800f600:	1e03      	subs	r3, r0, #0
 800f602:	d001      	beq.n	800f608 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800f604:	2301      	movs	r3, #1
 800f606:	e0cc      	b.n	800f7a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	2241      	movs	r2, #65	@ 0x41
 800f60c:	2121      	movs	r1, #33	@ 0x21
 800f60e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2242      	movs	r2, #66	@ 0x42
 800f614:	2110      	movs	r1, #16
 800f616:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2208      	movs	r2, #8
 800f628:	18ba      	adds	r2, r7, r2
 800f62a:	8812      	ldrh	r2, [r2, #0]
 800f62c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2200      	movs	r2, #0
 800f632:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f638:	b29b      	uxth	r3, r3
 800f63a:	2bff      	cmp	r3, #255	@ 0xff
 800f63c:	d911      	bls.n	800f662 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	22ff      	movs	r2, #255	@ 0xff
 800f642:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	2380      	movs	r3, #128	@ 0x80
 800f64c:	045c      	lsls	r4, r3, #17
 800f64e:	230a      	movs	r3, #10
 800f650:	18fb      	adds	r3, r7, r3
 800f652:	8819      	ldrh	r1, [r3, #0]
 800f654:	68f8      	ldr	r0, [r7, #12]
 800f656:	4b55      	ldr	r3, [pc, #340]	@ (800f7ac <HAL_I2C_Master_Transmit+0x208>)
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	0023      	movs	r3, r4
 800f65c:	f002 f9ba 	bl	80119d4 <I2C_TransferConfig>
 800f660:	e075      	b.n	800f74e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f666:	b29a      	uxth	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f670:	b2da      	uxtb	r2, r3
 800f672:	2380      	movs	r3, #128	@ 0x80
 800f674:	049c      	lsls	r4, r3, #18
 800f676:	230a      	movs	r3, #10
 800f678:	18fb      	adds	r3, r7, r3
 800f67a:	8819      	ldrh	r1, [r3, #0]
 800f67c:	68f8      	ldr	r0, [r7, #12]
 800f67e:	4b4b      	ldr	r3, [pc, #300]	@ (800f7ac <HAL_I2C_Master_Transmit+0x208>)
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	0023      	movs	r3, r4
 800f684:	f002 f9a6 	bl	80119d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800f688:	e061      	b.n	800f74e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	0018      	movs	r0, r3
 800f692:	f001 ff9b 	bl	80115cc <I2C_WaitOnTXISFlagUntilTimeout>
 800f696:	1e03      	subs	r3, r0, #0
 800f698:	d001      	beq.n	800f69e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800f69a:	2301      	movs	r3, #1
 800f69c:	e081      	b.n	800f7a2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6a2:	781a      	ldrb	r2, [r3, #0]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6ae:	1c5a      	adds	r2, r3, #1
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	b29a      	uxth	r2, r3
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d03a      	beq.n	800f74e <HAL_I2C_Master_Transmit+0x1aa>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d136      	bne.n	800f74e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f6e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	9300      	str	r3, [sp, #0]
 800f6e8:	0013      	movs	r3, r2
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	2180      	movs	r1, #128	@ 0x80
 800f6ee:	f001 ff1f 	bl	8011530 <I2C_WaitOnFlagUntilTimeout>
 800f6f2:	1e03      	subs	r3, r0, #0
 800f6f4:	d001      	beq.n	800f6fa <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	e053      	b.n	800f7a2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	2bff      	cmp	r3, #255	@ 0xff
 800f702:	d911      	bls.n	800f728 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	22ff      	movs	r2, #255	@ 0xff
 800f708:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	2380      	movs	r3, #128	@ 0x80
 800f712:	045c      	lsls	r4, r3, #17
 800f714:	230a      	movs	r3, #10
 800f716:	18fb      	adds	r3, r7, r3
 800f718:	8819      	ldrh	r1, [r3, #0]
 800f71a:	68f8      	ldr	r0, [r7, #12]
 800f71c:	2300      	movs	r3, #0
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	0023      	movs	r3, r4
 800f722:	f002 f957 	bl	80119d4 <I2C_TransferConfig>
 800f726:	e012      	b.n	800f74e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f736:	b2da      	uxtb	r2, r3
 800f738:	2380      	movs	r3, #128	@ 0x80
 800f73a:	049c      	lsls	r4, r3, #18
 800f73c:	230a      	movs	r3, #10
 800f73e:	18fb      	adds	r3, r7, r3
 800f740:	8819      	ldrh	r1, [r3, #0]
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	2300      	movs	r3, #0
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	0023      	movs	r3, r4
 800f74a:	f002 f943 	bl	80119d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f752:	b29b      	uxth	r3, r3
 800f754:	2b00      	cmp	r3, #0
 800f756:	d198      	bne.n	800f68a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	0018      	movs	r0, r3
 800f760:	f001 ff7a 	bl	8011658 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f764:	1e03      	subs	r3, r0, #0
 800f766:	d001      	beq.n	800f76c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800f768:	2301      	movs	r3, #1
 800f76a:	e01a      	b.n	800f7a2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2220      	movs	r2, #32
 800f772:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	685a      	ldr	r2, [r3, #4]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	490c      	ldr	r1, [pc, #48]	@ (800f7b0 <HAL_I2C_Master_Transmit+0x20c>)
 800f780:	400a      	ands	r2, r1
 800f782:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2241      	movs	r2, #65	@ 0x41
 800f788:	2120      	movs	r1, #32
 800f78a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2242      	movs	r2, #66	@ 0x42
 800f790:	2100      	movs	r1, #0
 800f792:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2240      	movs	r2, #64	@ 0x40
 800f798:	2100      	movs	r1, #0
 800f79a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f79c:	2300      	movs	r3, #0
 800f79e:	e000      	b.n	800f7a2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800f7a0:	2302      	movs	r3, #2
  }
}
 800f7a2:	0018      	movs	r0, r3
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	b007      	add	sp, #28
 800f7a8:	bd90      	pop	{r4, r7, pc}
 800f7aa:	46c0      	nop			@ (mov r8, r8)
 800f7ac:	80002000 	.word	0x80002000
 800f7b0:	fe00e800 	.word	0xfe00e800

0800f7b4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b089      	sub	sp, #36	@ 0x24
 800f7b8:	af02      	add	r7, sp, #8
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	0008      	movs	r0, r1
 800f7be:	607a      	str	r2, [r7, #4]
 800f7c0:	0019      	movs	r1, r3
 800f7c2:	230a      	movs	r3, #10
 800f7c4:	18fb      	adds	r3, r7, r3
 800f7c6:	1c02      	adds	r2, r0, #0
 800f7c8:	801a      	strh	r2, [r3, #0]
 800f7ca:	2308      	movs	r3, #8
 800f7cc:	18fb      	adds	r3, r7, r3
 800f7ce:	1c0a      	adds	r2, r1, #0
 800f7d0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2241      	movs	r2, #65	@ 0x41
 800f7d6:	5c9b      	ldrb	r3, [r3, r2]
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b20      	cmp	r3, #32
 800f7dc:	d000      	beq.n	800f7e0 <HAL_I2C_Master_Receive+0x2c>
 800f7de:	e0e8      	b.n	800f9b2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2240      	movs	r2, #64	@ 0x40
 800f7e4:	5c9b      	ldrb	r3, [r3, r2]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d101      	bne.n	800f7ee <HAL_I2C_Master_Receive+0x3a>
 800f7ea:	2302      	movs	r3, #2
 800f7ec:	e0e2      	b.n	800f9b4 <HAL_I2C_Master_Receive+0x200>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2240      	movs	r2, #64	@ 0x40
 800f7f2:	2101      	movs	r1, #1
 800f7f4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f7f6:	f7fe fb8b 	bl	800df10 <HAL_GetTick>
 800f7fa:	0003      	movs	r3, r0
 800f7fc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f7fe:	2380      	movs	r3, #128	@ 0x80
 800f800:	0219      	lsls	r1, r3, #8
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	2319      	movs	r3, #25
 800f80a:	2201      	movs	r2, #1
 800f80c:	f001 fe90 	bl	8011530 <I2C_WaitOnFlagUntilTimeout>
 800f810:	1e03      	subs	r3, r0, #0
 800f812:	d001      	beq.n	800f818 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800f814:	2301      	movs	r3, #1
 800f816:	e0cd      	b.n	800f9b4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2241      	movs	r2, #65	@ 0x41
 800f81c:	2122      	movs	r1, #34	@ 0x22
 800f81e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2242      	movs	r2, #66	@ 0x42
 800f824:	2110      	movs	r1, #16
 800f826:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2208      	movs	r2, #8
 800f838:	18ba      	adds	r2, r7, r2
 800f83a:	8812      	ldrh	r2, [r2, #0]
 800f83c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f848:	b29b      	uxth	r3, r3
 800f84a:	2bff      	cmp	r3, #255	@ 0xff
 800f84c:	d911      	bls.n	800f872 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	22ff      	movs	r2, #255	@ 0xff
 800f852:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	2380      	movs	r3, #128	@ 0x80
 800f85c:	045c      	lsls	r4, r3, #17
 800f85e:	230a      	movs	r3, #10
 800f860:	18fb      	adds	r3, r7, r3
 800f862:	8819      	ldrh	r1, [r3, #0]
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	4b55      	ldr	r3, [pc, #340]	@ (800f9bc <HAL_I2C_Master_Receive+0x208>)
 800f868:	9300      	str	r3, [sp, #0]
 800f86a:	0023      	movs	r3, r4
 800f86c:	f002 f8b2 	bl	80119d4 <I2C_TransferConfig>
 800f870:	e076      	b.n	800f960 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f876:	b29a      	uxth	r2, r3
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f880:	b2da      	uxtb	r2, r3
 800f882:	2380      	movs	r3, #128	@ 0x80
 800f884:	049c      	lsls	r4, r3, #18
 800f886:	230a      	movs	r3, #10
 800f888:	18fb      	adds	r3, r7, r3
 800f88a:	8819      	ldrh	r1, [r3, #0]
 800f88c:	68f8      	ldr	r0, [r7, #12]
 800f88e:	4b4b      	ldr	r3, [pc, #300]	@ (800f9bc <HAL_I2C_Master_Receive+0x208>)
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	0023      	movs	r3, r4
 800f894:	f002 f89e 	bl	80119d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800f898:	e062      	b.n	800f960 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	0018      	movs	r0, r3
 800f8a2:	f001 ff1d 	bl	80116e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f8a6:	1e03      	subs	r3, r0, #0
 800f8a8:	d001      	beq.n	800f8ae <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e082      	b.n	800f9b4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8b8:	b2d2      	uxtb	r2, r2
 800f8ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8c0:	1c5a      	adds	r2, r3, #1
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8ca:	3b01      	subs	r3, #1
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d03a      	beq.n	800f960 <HAL_I2C_Master_Receive+0x1ac>
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d136      	bne.n	800f960 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f8f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	0013      	movs	r3, r2
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	2180      	movs	r1, #128	@ 0x80
 800f900:	f001 fe16 	bl	8011530 <I2C_WaitOnFlagUntilTimeout>
 800f904:	1e03      	subs	r3, r0, #0
 800f906:	d001      	beq.n	800f90c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800f908:	2301      	movs	r3, #1
 800f90a:	e053      	b.n	800f9b4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f910:	b29b      	uxth	r3, r3
 800f912:	2bff      	cmp	r3, #255	@ 0xff
 800f914:	d911      	bls.n	800f93a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	22ff      	movs	r2, #255	@ 0xff
 800f91a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f920:	b2da      	uxtb	r2, r3
 800f922:	2380      	movs	r3, #128	@ 0x80
 800f924:	045c      	lsls	r4, r3, #17
 800f926:	230a      	movs	r3, #10
 800f928:	18fb      	adds	r3, r7, r3
 800f92a:	8819      	ldrh	r1, [r3, #0]
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	2300      	movs	r3, #0
 800f930:	9300      	str	r3, [sp, #0]
 800f932:	0023      	movs	r3, r4
 800f934:	f002 f84e 	bl	80119d4 <I2C_TransferConfig>
 800f938:	e012      	b.n	800f960 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f93e:	b29a      	uxth	r2, r3
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f948:	b2da      	uxtb	r2, r3
 800f94a:	2380      	movs	r3, #128	@ 0x80
 800f94c:	049c      	lsls	r4, r3, #18
 800f94e:	230a      	movs	r3, #10
 800f950:	18fb      	adds	r3, r7, r3
 800f952:	8819      	ldrh	r1, [r3, #0]
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	2300      	movs	r3, #0
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	0023      	movs	r3, r4
 800f95c:	f002 f83a 	bl	80119d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f964:	b29b      	uxth	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d197      	bne.n	800f89a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f96a:	697a      	ldr	r2, [r7, #20]
 800f96c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	0018      	movs	r0, r3
 800f972:	f001 fe71 	bl	8011658 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f976:	1e03      	subs	r3, r0, #0
 800f978:	d001      	beq.n	800f97e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800f97a:	2301      	movs	r3, #1
 800f97c:	e01a      	b.n	800f9b4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2220      	movs	r2, #32
 800f984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	685a      	ldr	r2, [r3, #4]
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	490b      	ldr	r1, [pc, #44]	@ (800f9c0 <HAL_I2C_Master_Receive+0x20c>)
 800f992:	400a      	ands	r2, r1
 800f994:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2241      	movs	r2, #65	@ 0x41
 800f99a:	2120      	movs	r1, #32
 800f99c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2242      	movs	r2, #66	@ 0x42
 800f9a2:	2100      	movs	r1, #0
 800f9a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2240      	movs	r2, #64	@ 0x40
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	e000      	b.n	800f9b4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800f9b2:	2302      	movs	r3, #2
  }
}
 800f9b4:	0018      	movs	r0, r3
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	b007      	add	sp, #28
 800f9ba:	bd90      	pop	{r4, r7, pc}
 800f9bc:	80002400 	.word	0x80002400
 800f9c0:	fe00e800 	.word	0xfe00e800

0800f9c4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800f9c4:	b5b0      	push	{r4, r5, r7, lr}
 800f9c6:	b088      	sub	sp, #32
 800f9c8:	af02      	add	r7, sp, #8
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	0008      	movs	r0, r1
 800f9ce:	607a      	str	r2, [r7, #4]
 800f9d0:	0019      	movs	r1, r3
 800f9d2:	230a      	movs	r3, #10
 800f9d4:	18fb      	adds	r3, r7, r3
 800f9d6:	1c02      	adds	r2, r0, #0
 800f9d8:	801a      	strh	r2, [r3, #0]
 800f9da:	2308      	movs	r3, #8
 800f9dc:	18fb      	adds	r3, r7, r3
 800f9de:	1c0a      	adds	r2, r1, #0
 800f9e0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2241      	movs	r2, #65	@ 0x41
 800f9e6:	5c9b      	ldrb	r3, [r3, r2]
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	2b20      	cmp	r3, #32
 800f9ec:	d000      	beq.n	800f9f0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800f9ee:	e0dd      	b.n	800fbac <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	699a      	ldr	r2, [r3, #24]
 800f9f6:	2380      	movs	r3, #128	@ 0x80
 800f9f8:	021b      	lsls	r3, r3, #8
 800f9fa:	401a      	ands	r2, r3
 800f9fc:	2380      	movs	r3, #128	@ 0x80
 800f9fe:	021b      	lsls	r3, r3, #8
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d101      	bne.n	800fa08 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800fa04:	2302      	movs	r3, #2
 800fa06:	e0d2      	b.n	800fbae <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2240      	movs	r2, #64	@ 0x40
 800fa0c:	5c9b      	ldrb	r3, [r3, r2]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d101      	bne.n	800fa16 <HAL_I2C_Master_Transmit_DMA+0x52>
 800fa12:	2302      	movs	r3, #2
 800fa14:	e0cb      	b.n	800fbae <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2240      	movs	r2, #64	@ 0x40
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2241      	movs	r2, #65	@ 0x41
 800fa22:	2121      	movs	r1, #33	@ 0x21
 800fa24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2242      	movs	r2, #66	@ 0x42
 800fa2a:	2110      	movs	r1, #16
 800fa2c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2208      	movs	r2, #8
 800fa3e:	18ba      	adds	r2, r7, r2
 800fa40:	8812      	ldrh	r2, [r2, #0]
 800fa42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	4a5c      	ldr	r2, [pc, #368]	@ (800fbb8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800fa48:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	4a5b      	ldr	r2, [pc, #364]	@ (800fbbc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800fa4e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	2bff      	cmp	r3, #255	@ 0xff
 800fa58:	d906      	bls.n	800fa68 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	22ff      	movs	r2, #255	@ 0xff
 800fa5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fa60:	2380      	movs	r3, #128	@ 0x80
 800fa62:	045b      	lsls	r3, r3, #17
 800fa64:	617b      	str	r3, [r7, #20]
 800fa66:	e007      	b.n	800fa78 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa6c:	b29a      	uxth	r2, r3
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fa72:	2380      	movs	r3, #128	@ 0x80
 800fa74:	049b      	lsls	r3, r3, #18
 800fa76:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d100      	bne.n	800fa82 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800fa80:	e078      	b.n	800fb74 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d023      	beq.n	800fad2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa8e:	4a4c      	ldr	r2, [pc, #304]	@ (800fbc0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800fa90:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa96:	4a4b      	ldr	r2, [pc, #300]	@ (800fbc4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800fa98:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa9e:	2200      	movs	r2, #0
 800faa0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faa6:	2200      	movs	r2, #0
 800faa8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	3328      	adds	r3, #40	@ 0x28
 800fab6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800fabc:	2513      	movs	r5, #19
 800fabe:	197c      	adds	r4, r7, r5
 800fac0:	f7fe ff62 	bl	800e988 <HAL_DMA_Start_IT>
 800fac4:	0003      	movs	r3, r0
 800fac6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fac8:	197b      	adds	r3, r7, r5
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d13d      	bne.n	800fb4c <HAL_I2C_Master_Transmit_DMA+0x188>
 800fad0:	e013      	b.n	800fafa <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2241      	movs	r2, #65	@ 0x41
 800fad6:	2120      	movs	r1, #32
 800fad8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2242      	movs	r2, #66	@ 0x42
 800fade:	2100      	movs	r1, #0
 800fae0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fae6:	2280      	movs	r2, #128	@ 0x80
 800fae8:	431a      	orrs	r2, r3
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2240      	movs	r2, #64	@ 0x40
 800faf2:	2100      	movs	r1, #0
 800faf4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800faf6:	2301      	movs	r3, #1
 800faf8:	e059      	b.n	800fbae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	697c      	ldr	r4, [r7, #20]
 800fb02:	230a      	movs	r3, #10
 800fb04:	18fb      	adds	r3, r7, r3
 800fb06:	8819      	ldrh	r1, [r3, #0]
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	4b2f      	ldr	r3, [pc, #188]	@ (800fbc8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	0023      	movs	r3, r4
 800fb10:	f001 ff60 	bl	80119d4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2240      	movs	r2, #64	@ 0x40
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	2110      	movs	r1, #16
 800fb32:	0018      	movs	r0, r3
 800fb34:	f001 ff88 	bl	8011a48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2180      	movs	r1, #128	@ 0x80
 800fb44:	01c9      	lsls	r1, r1, #7
 800fb46:	430a      	orrs	r2, r1
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	e02d      	b.n	800fba8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2241      	movs	r2, #65	@ 0x41
 800fb50:	2120      	movs	r1, #32
 800fb52:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2242      	movs	r2, #66	@ 0x42
 800fb58:	2100      	movs	r1, #0
 800fb5a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb60:	2210      	movs	r2, #16
 800fb62:	431a      	orrs	r2, r3
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2240      	movs	r2, #64	@ 0x40
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fb70:	2301      	movs	r3, #1
 800fb72:	e01c      	b.n	800fbae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	4a15      	ldr	r2, [pc, #84]	@ (800fbcc <HAL_I2C_Master_Transmit_DMA+0x208>)
 800fb78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb7e:	b2da      	uxtb	r2, r3
 800fb80:	2380      	movs	r3, #128	@ 0x80
 800fb82:	049c      	lsls	r4, r3, #18
 800fb84:	230a      	movs	r3, #10
 800fb86:	18fb      	adds	r3, r7, r3
 800fb88:	8819      	ldrh	r1, [r3, #0]
 800fb8a:	68f8      	ldr	r0, [r7, #12]
 800fb8c:	4b0e      	ldr	r3, [pc, #56]	@ (800fbc8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	0023      	movs	r3, r4
 800fb92:	f001 ff1f 	bl	80119d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2240      	movs	r2, #64	@ 0x40
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2101      	movs	r1, #1
 800fba2:	0018      	movs	r0, r3
 800fba4:	f001 ff50 	bl	8011a48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	e000      	b.n	800fbae <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800fbac:	2302      	movs	r3, #2
  }
}
 800fbae:	0018      	movs	r0, r3
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	b006      	add	sp, #24
 800fbb4:	bdb0      	pop	{r4, r5, r7, pc}
 800fbb6:	46c0      	nop			@ (mov r8, r8)
 800fbb8:	ffff0000 	.word	0xffff0000
 800fbbc:	080103c9 	.word	0x080103c9
 800fbc0:	08011381 	.word	0x08011381
 800fbc4:	080114c1 	.word	0x080114c1
 800fbc8:	80002000 	.word	0x80002000
 800fbcc:	0800ff75 	.word	0x0800ff75

0800fbd0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800fbd0:	b5b0      	push	{r4, r5, r7, lr}
 800fbd2:	b088      	sub	sp, #32
 800fbd4:	af02      	add	r7, sp, #8
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	0008      	movs	r0, r1
 800fbda:	607a      	str	r2, [r7, #4]
 800fbdc:	0019      	movs	r1, r3
 800fbde:	230a      	movs	r3, #10
 800fbe0:	18fb      	adds	r3, r7, r3
 800fbe2:	1c02      	adds	r2, r0, #0
 800fbe4:	801a      	strh	r2, [r3, #0]
 800fbe6:	2308      	movs	r3, #8
 800fbe8:	18fb      	adds	r3, r7, r3
 800fbea:	1c0a      	adds	r2, r1, #0
 800fbec:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2241      	movs	r2, #65	@ 0x41
 800fbf2:	5c9b      	ldrb	r3, [r3, r2]
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b20      	cmp	r3, #32
 800fbf8:	d000      	beq.n	800fbfc <HAL_I2C_Master_Receive_DMA+0x2c>
 800fbfa:	e0dd      	b.n	800fdb8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	699a      	ldr	r2, [r3, #24]
 800fc02:	2380      	movs	r3, #128	@ 0x80
 800fc04:	021b      	lsls	r3, r3, #8
 800fc06:	401a      	ands	r2, r3
 800fc08:	2380      	movs	r3, #128	@ 0x80
 800fc0a:	021b      	lsls	r3, r3, #8
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d101      	bne.n	800fc14 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800fc10:	2302      	movs	r3, #2
 800fc12:	e0d2      	b.n	800fdba <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2240      	movs	r2, #64	@ 0x40
 800fc18:	5c9b      	ldrb	r3, [r3, r2]
 800fc1a:	2b01      	cmp	r3, #1
 800fc1c:	d101      	bne.n	800fc22 <HAL_I2C_Master_Receive_DMA+0x52>
 800fc1e:	2302      	movs	r3, #2
 800fc20:	e0cb      	b.n	800fdba <HAL_I2C_Master_Receive_DMA+0x1ea>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2240      	movs	r2, #64	@ 0x40
 800fc26:	2101      	movs	r1, #1
 800fc28:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2241      	movs	r2, #65	@ 0x41
 800fc2e:	2122      	movs	r1, #34	@ 0x22
 800fc30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2242      	movs	r2, #66	@ 0x42
 800fc36:	2110      	movs	r1, #16
 800fc38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2208      	movs	r2, #8
 800fc4a:	18ba      	adds	r2, r7, r2
 800fc4c:	8812      	ldrh	r2, [r2, #0]
 800fc4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	4a5c      	ldr	r2, [pc, #368]	@ (800fdc4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800fc54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	4a5b      	ldr	r2, [pc, #364]	@ (800fdc8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800fc5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	2bff      	cmp	r3, #255	@ 0xff
 800fc64:	d906      	bls.n	800fc74 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	22ff      	movs	r2, #255	@ 0xff
 800fc6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fc6c:	2380      	movs	r3, #128	@ 0x80
 800fc6e:	045b      	lsls	r3, r3, #17
 800fc70:	617b      	str	r3, [r7, #20]
 800fc72:	e007      	b.n	800fc84 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc78:	b29a      	uxth	r2, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fc7e:	2380      	movs	r3, #128	@ 0x80
 800fc80:	049b      	lsls	r3, r3, #18
 800fc82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d100      	bne.n	800fc8e <HAL_I2C_Master_Receive_DMA+0xbe>
 800fc8c:	e078      	b.n	800fd80 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d023      	beq.n	800fcde <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc9a:	4a4c      	ldr	r2, [pc, #304]	@ (800fdcc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800fc9c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fca2:	4a4b      	ldr	r2, [pc, #300]	@ (800fdd0 <HAL_I2C_Master_Receive_DMA+0x200>)
 800fca4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcaa:	2200      	movs	r2, #0
 800fcac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	3324      	adds	r3, #36	@ 0x24
 800fcc0:	0019      	movs	r1, r3
 800fcc2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800fcc8:	2513      	movs	r5, #19
 800fcca:	197c      	adds	r4, r7, r5
 800fccc:	f7fe fe5c 	bl	800e988 <HAL_DMA_Start_IT>
 800fcd0:	0003      	movs	r3, r0
 800fcd2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fcd4:	197b      	adds	r3, r7, r5
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d13d      	bne.n	800fd58 <HAL_I2C_Master_Receive_DMA+0x188>
 800fcdc:	e013      	b.n	800fd06 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2241      	movs	r2, #65	@ 0x41
 800fce2:	2120      	movs	r1, #32
 800fce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2242      	movs	r2, #66	@ 0x42
 800fcea:	2100      	movs	r1, #0
 800fcec:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcf2:	2280      	movs	r2, #128	@ 0x80
 800fcf4:	431a      	orrs	r2, r3
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2240      	movs	r2, #64	@ 0x40
 800fcfe:	2100      	movs	r1, #0
 800fd00:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800fd02:	2301      	movs	r3, #1
 800fd04:	e059      	b.n	800fdba <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd0a:	b2da      	uxtb	r2, r3
 800fd0c:	697c      	ldr	r4, [r7, #20]
 800fd0e:	230a      	movs	r3, #10
 800fd10:	18fb      	adds	r3, r7, r3
 800fd12:	8819      	ldrh	r1, [r3, #0]
 800fd14:	68f8      	ldr	r0, [r7, #12]
 800fd16:	4b2f      	ldr	r3, [pc, #188]	@ (800fdd4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	0023      	movs	r3, r4
 800fd1c:	f001 fe5a 	bl	80119d4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd2a:	1ad3      	subs	r3, r2, r3
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2240      	movs	r2, #64	@ 0x40
 800fd36:	2100      	movs	r1, #0
 800fd38:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2110      	movs	r1, #16
 800fd3e:	0018      	movs	r0, r3
 800fd40:	f001 fe82 	bl	8011a48 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2180      	movs	r1, #128	@ 0x80
 800fd50:	0209      	lsls	r1, r1, #8
 800fd52:	430a      	orrs	r2, r1
 800fd54:	601a      	str	r2, [r3, #0]
 800fd56:	e02d      	b.n	800fdb4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2241      	movs	r2, #65	@ 0x41
 800fd5c:	2120      	movs	r1, #32
 800fd5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2242      	movs	r2, #66	@ 0x42
 800fd64:	2100      	movs	r1, #0
 800fd66:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd6c:	2210      	movs	r2, #16
 800fd6e:	431a      	orrs	r2, r3
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2240      	movs	r2, #64	@ 0x40
 800fd78:	2100      	movs	r1, #0
 800fd7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e01c      	b.n	800fdba <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4a15      	ldr	r2, [pc, #84]	@ (800fdd8 <HAL_I2C_Master_Receive_DMA+0x208>)
 800fd84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd8a:	b2da      	uxtb	r2, r3
 800fd8c:	2380      	movs	r3, #128	@ 0x80
 800fd8e:	049c      	lsls	r4, r3, #18
 800fd90:	230a      	movs	r3, #10
 800fd92:	18fb      	adds	r3, r7, r3
 800fd94:	8819      	ldrh	r1, [r3, #0]
 800fd96:	68f8      	ldr	r0, [r7, #12]
 800fd98:	4b0e      	ldr	r3, [pc, #56]	@ (800fdd4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	0023      	movs	r3, r4
 800fd9e:	f001 fe19 	bl	80119d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2240      	movs	r2, #64	@ 0x40
 800fda6:	2100      	movs	r1, #0
 800fda8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2101      	movs	r1, #1
 800fdae:	0018      	movs	r0, r3
 800fdb0:	f001 fe4a 	bl	8011a48 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	e000      	b.n	800fdba <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800fdb8:	2302      	movs	r3, #2
  }
}
 800fdba:	0018      	movs	r0, r3
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	b006      	add	sp, #24
 800fdc0:	bdb0      	pop	{r4, r5, r7, pc}
 800fdc2:	46c0      	nop			@ (mov r8, r8)
 800fdc4:	ffff0000 	.word	0xffff0000
 800fdc8:	080103c9 	.word	0x080103c9
 800fdcc:	08011421 	.word	0x08011421
 800fdd0:	080114c1 	.word	0x080114c1
 800fdd4:	80002400 	.word	0x80002400
 800fdd8:	0800ff75 	.word	0x0800ff75

0800fddc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	699b      	ldr	r3, [r3, #24]
 800fdea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d005      	beq.n	800fe08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe00:	68ba      	ldr	r2, [r7, #8]
 800fe02:	68f9      	ldr	r1, [r7, #12]
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	4798      	blx	r3
  }
}
 800fe08:	46c0      	nop			@ (mov r8, r8)
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	b004      	add	sp, #16
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b086      	sub	sp, #24
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	699b      	ldr	r3, [r3, #24]
 800fe1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	2380      	movs	r3, #128	@ 0x80
 800fe2c:	005b      	lsls	r3, r3, #1
 800fe2e:	4013      	ands	r3, r2
 800fe30:	d00e      	beq.n	800fe50 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	2280      	movs	r2, #128	@ 0x80
 800fe36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fe38:	d00a      	beq.n	800fe50 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe3e:	2201      	movs	r2, #1
 800fe40:	431a      	orrs	r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2280      	movs	r2, #128	@ 0x80
 800fe4c:	0052      	lsls	r2, r2, #1
 800fe4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fe50:	697a      	ldr	r2, [r7, #20]
 800fe52:	2380      	movs	r3, #128	@ 0x80
 800fe54:	00db      	lsls	r3, r3, #3
 800fe56:	4013      	ands	r3, r2
 800fe58:	d00e      	beq.n	800fe78 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	2280      	movs	r2, #128	@ 0x80
 800fe5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fe60:	d00a      	beq.n	800fe78 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe66:	2208      	movs	r2, #8
 800fe68:	431a      	orrs	r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2280      	movs	r2, #128	@ 0x80
 800fe74:	00d2      	lsls	r2, r2, #3
 800fe76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fe78:	697a      	ldr	r2, [r7, #20]
 800fe7a:	2380      	movs	r3, #128	@ 0x80
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	4013      	ands	r3, r2
 800fe80:	d00e      	beq.n	800fea0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	2280      	movs	r2, #128	@ 0x80
 800fe86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fe88:	d00a      	beq.n	800fea0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe8e:	2202      	movs	r2, #2
 800fe90:	431a      	orrs	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2280      	movs	r2, #128	@ 0x80
 800fe9c:	0092      	lsls	r2, r2, #2
 800fe9e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fea4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	220b      	movs	r2, #11
 800feaa:	4013      	ands	r3, r2
 800feac:	d005      	beq.n	800feba <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800feae:	68fa      	ldr	r2, [r7, #12]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	0011      	movs	r1, r2
 800feb4:	0018      	movs	r0, r3
 800feb6:	f001 f915 	bl	80110e4 <I2C_ITError>
  }
}
 800feba:	46c0      	nop			@ (mov r8, r8)
 800febc:	46bd      	mov	sp, r7
 800febe:	b006      	add	sp, #24
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fec2:	b580      	push	{r7, lr}
 800fec4:	b082      	sub	sp, #8
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800feca:	46c0      	nop			@ (mov r8, r8)
 800fecc:	46bd      	mov	sp, r7
 800fece:	b002      	add	sp, #8
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b082      	sub	sp, #8
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800feda:	46c0      	nop			@ (mov r8, r8)
 800fedc:	46bd      	mov	sp, r7
 800fede:	b002      	add	sp, #8
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b082      	sub	sp, #8
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800feea:	46c0      	nop			@ (mov r8, r8)
 800feec:	46bd      	mov	sp, r7
 800feee:	b002      	add	sp, #8
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b082      	sub	sp, #8
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800fefa:	46c0      	nop			@ (mov r8, r8)
 800fefc:	46bd      	mov	sp, r7
 800fefe:	b002      	add	sp, #8
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b082      	sub	sp, #8
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
 800ff0a:	0008      	movs	r0, r1
 800ff0c:	0011      	movs	r1, r2
 800ff0e:	1cfb      	adds	r3, r7, #3
 800ff10:	1c02      	adds	r2, r0, #0
 800ff12:	701a      	strb	r2, [r3, #0]
 800ff14:	003b      	movs	r3, r7
 800ff16:	1c0a      	adds	r2, r1, #0
 800ff18:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ff1a:	46c0      	nop			@ (mov r8, r8)
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	b002      	add	sp, #8
 800ff20:	bd80      	pop	{r7, pc}

0800ff22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b082      	sub	sp, #8
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ff2a:	46c0      	nop			@ (mov r8, r8)
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	b002      	add	sp, #8
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b082      	sub	sp, #8
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ff3a:	46c0      	nop			@ (mov r8, r8)
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	b002      	add	sp, #8
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b082      	sub	sp, #8
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ff4a:	46c0      	nop			@ (mov r8, r8)
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	b002      	add	sp, #8
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b082      	sub	sp, #8
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ff5a:	46c0      	nop			@ (mov r8, r8)
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	b002      	add	sp, #8
 800ff60:	bd80      	pop	{r7, pc}

0800ff62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ff62:	b580      	push	{r7, lr}
 800ff64:	b082      	sub	sp, #8
 800ff66:	af00      	add	r7, sp, #0
 800ff68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ff6a:	46c0      	nop			@ (mov r8, r8)
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	b002      	add	sp, #8
 800ff70:	bd80      	pop	{r7, pc}
	...

0800ff74 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ff74:	b590      	push	{r4, r7, lr}
 800ff76:	b089      	sub	sp, #36	@ 0x24
 800ff78:	af02      	add	r7, sp, #8
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2240      	movs	r2, #64	@ 0x40
 800ff88:	5c9b      	ldrb	r3, [r3, r2]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d101      	bne.n	800ff92 <I2C_Master_ISR_IT+0x1e>
 800ff8e:	2302      	movs	r3, #2
 800ff90:	e113      	b.n	80101ba <I2C_Master_ISR_IT+0x246>
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2240      	movs	r2, #64	@ 0x40
 800ff96:	2101      	movs	r1, #1
 800ff98:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	2210      	movs	r2, #16
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	d012      	beq.n	800ffc8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2210      	movs	r2, #16
 800ffa6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ffa8:	d00e      	beq.n	800ffc8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2210      	movs	r2, #16
 800ffb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffb6:	2204      	movs	r2, #4
 800ffb8:	431a      	orrs	r2, r3
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	0018      	movs	r0, r3
 800ffc2:	f001 f9ba 	bl	801133a <I2C_Flush_TXDR>
 800ffc6:	e0e5      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	2204      	movs	r2, #4
 800ffcc:	4013      	ands	r3, r2
 800ffce:	d021      	beq.n	8010014 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2204      	movs	r2, #4
 800ffd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ffd6:	d01d      	beq.n	8010014 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	2204      	movs	r2, #4
 800ffdc:	4393      	bics	r3, r2
 800ffde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffea:	b2d2      	uxtb	r2, r2
 800ffec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff2:	1c5a      	adds	r2, r3, #1
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fffc:	3b01      	subs	r3, #1
 800fffe:	b29a      	uxth	r2, r3
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010008:	b29b      	uxth	r3, r3
 801000a:	3b01      	subs	r3, #1
 801000c:	b29a      	uxth	r2, r3
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010012:	e0bf      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	2202      	movs	r2, #2
 8010018:	4013      	ands	r3, r2
 801001a:	d01c      	beq.n	8010056 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2202      	movs	r2, #2
 8010020:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010022:	d018      	beq.n	8010056 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010028:	781a      	ldrb	r2, [r3, #0]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010034:	1c5a      	adds	r2, r3, #1
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801003e:	3b01      	subs	r3, #1
 8010040:	b29a      	uxth	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801004a:	b29b      	uxth	r3, r3
 801004c:	3b01      	subs	r3, #1
 801004e:	b29a      	uxth	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010054:	e09e      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	2280      	movs	r2, #128	@ 0x80
 801005a:	4013      	ands	r3, r2
 801005c:	d100      	bne.n	8010060 <I2C_Master_ISR_IT+0xec>
 801005e:	e069      	b.n	8010134 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2240      	movs	r2, #64	@ 0x40
 8010064:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010066:	d065      	beq.n	8010134 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801006c:	b29b      	uxth	r3, r3
 801006e:	2b00      	cmp	r3, #0
 8010070:	d04a      	beq.n	8010108 <I2C_Master_ISR_IT+0x194>
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010076:	2b00      	cmp	r3, #0
 8010078:	d146      	bne.n	8010108 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	b29a      	uxth	r2, r3
 8010082:	2112      	movs	r1, #18
 8010084:	187b      	adds	r3, r7, r1
 8010086:	0592      	lsls	r2, r2, #22
 8010088:	0d92      	lsrs	r2, r2, #22
 801008a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010090:	b29b      	uxth	r3, r3
 8010092:	2bff      	cmp	r3, #255	@ 0xff
 8010094:	d910      	bls.n	80100b8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	22ff      	movs	r2, #255	@ 0xff
 801009a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100a0:	b2da      	uxtb	r2, r3
 80100a2:	2380      	movs	r3, #128	@ 0x80
 80100a4:	045c      	lsls	r4, r3, #17
 80100a6:	187b      	adds	r3, r7, r1
 80100a8:	8819      	ldrh	r1, [r3, #0]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	2300      	movs	r3, #0
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	0023      	movs	r3, r4
 80100b2:	f001 fc8f 	bl	80119d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80100b6:	e03c      	b.n	8010132 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100bc:	b29a      	uxth	r2, r3
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c6:	4a3f      	ldr	r2, [pc, #252]	@ (80101c4 <I2C_Master_ISR_IT+0x250>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d00e      	beq.n	80100ea <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100d0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80100d6:	2312      	movs	r3, #18
 80100d8:	18fb      	adds	r3, r7, r3
 80100da:	8819      	ldrh	r1, [r3, #0]
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	2300      	movs	r3, #0
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	0023      	movs	r3, r4
 80100e4:	f001 fc76 	bl	80119d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80100e8:	e023      	b.n	8010132 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	2380      	movs	r3, #128	@ 0x80
 80100f2:	049c      	lsls	r4, r3, #18
 80100f4:	2312      	movs	r3, #18
 80100f6:	18fb      	adds	r3, r7, r3
 80100f8:	8819      	ldrh	r1, [r3, #0]
 80100fa:	68f8      	ldr	r0, [r7, #12]
 80100fc:	2300      	movs	r3, #0
 80100fe:	9300      	str	r3, [sp, #0]
 8010100:	0023      	movs	r3, r4
 8010102:	f001 fc67 	bl	80119d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010106:	e014      	b.n	8010132 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	685a      	ldr	r2, [r3, #4]
 801010e:	2380      	movs	r3, #128	@ 0x80
 8010110:	049b      	lsls	r3, r3, #18
 8010112:	401a      	ands	r2, r3
 8010114:	2380      	movs	r3, #128	@ 0x80
 8010116:	049b      	lsls	r3, r3, #18
 8010118:	429a      	cmp	r2, r3
 801011a:	d004      	beq.n	8010126 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	0018      	movs	r0, r3
 8010120:	f000 fcf4 	bl	8010b0c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010124:	e036      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2140      	movs	r1, #64	@ 0x40
 801012a:	0018      	movs	r0, r3
 801012c:	f000 ffda 	bl	80110e4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010130:	e030      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
 8010132:	e02f      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	2240      	movs	r2, #64	@ 0x40
 8010138:	4013      	ands	r3, r2
 801013a:	d02b      	beq.n	8010194 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2240      	movs	r2, #64	@ 0x40
 8010140:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010142:	d027      	beq.n	8010194 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010148:	b29b      	uxth	r3, r3
 801014a:	2b00      	cmp	r3, #0
 801014c:	d11d      	bne.n	801018a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	685a      	ldr	r2, [r3, #4]
 8010154:	2380      	movs	r3, #128	@ 0x80
 8010156:	049b      	lsls	r3, r3, #18
 8010158:	401a      	ands	r2, r3
 801015a:	2380      	movs	r3, #128	@ 0x80
 801015c:	049b      	lsls	r3, r3, #18
 801015e:	429a      	cmp	r2, r3
 8010160:	d018      	beq.n	8010194 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010166:	4a17      	ldr	r2, [pc, #92]	@ (80101c4 <I2C_Master_ISR_IT+0x250>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d109      	bne.n	8010180 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	685a      	ldr	r2, [r3, #4]
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	2180      	movs	r1, #128	@ 0x80
 8010178:	01c9      	lsls	r1, r1, #7
 801017a:	430a      	orrs	r2, r1
 801017c:	605a      	str	r2, [r3, #4]
 801017e:	e009      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	0018      	movs	r0, r3
 8010184:	f000 fcc2 	bl	8010b0c <I2C_ITMasterSeqCplt>
 8010188:	e004      	b.n	8010194 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2140      	movs	r1, #64	@ 0x40
 801018e:	0018      	movs	r0, r3
 8010190:	f000 ffa8 	bl	80110e4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	2220      	movs	r2, #32
 8010198:	4013      	ands	r3, r2
 801019a:	d009      	beq.n	80101b0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2220      	movs	r2, #32
 80101a0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80101a2:	d005      	beq.n	80101b0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80101a4:	697a      	ldr	r2, [r7, #20]
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	0011      	movs	r1, r2
 80101aa:	0018      	movs	r0, r3
 80101ac:	f000 fd54 	bl	8010c58 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2240      	movs	r2, #64	@ 0x40
 80101b4:	2100      	movs	r1, #0
 80101b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80101b8:	2300      	movs	r3, #0
}
 80101ba:	0018      	movs	r0, r3
 80101bc:	46bd      	mov	sp, r7
 80101be:	b007      	add	sp, #28
 80101c0:	bd90      	pop	{r4, r7, pc}
 80101c2:	46c0      	nop			@ (mov r8, r8)
 80101c4:	ffff0000 	.word	0xffff0000

080101c8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b086      	sub	sp, #24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2240      	movs	r2, #64	@ 0x40
 80101e2:	5c9b      	ldrb	r3, [r3, r2]
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d101      	bne.n	80101ec <I2C_Slave_ISR_IT+0x24>
 80101e8:	2302      	movs	r3, #2
 80101ea:	e0e6      	b.n	80103ba <I2C_Slave_ISR_IT+0x1f2>
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2240      	movs	r2, #64	@ 0x40
 80101f0:	2101      	movs	r1, #1
 80101f2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	2220      	movs	r2, #32
 80101f8:	4013      	ands	r3, r2
 80101fa:	d009      	beq.n	8010210 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2220      	movs	r2, #32
 8010200:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010202:	d005      	beq.n	8010210 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8010204:	693a      	ldr	r2, [r7, #16]
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	0011      	movs	r1, r2
 801020a:	0018      	movs	r0, r3
 801020c:	f000 fdf2 	bl	8010df4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010210:	693b      	ldr	r3, [r7, #16]
 8010212:	2210      	movs	r2, #16
 8010214:	4013      	ands	r3, r2
 8010216:	d052      	beq.n	80102be <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2210      	movs	r2, #16
 801021c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801021e:	d04e      	beq.n	80102be <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010224:	b29b      	uxth	r3, r3
 8010226:	2b00      	cmp	r3, #0
 8010228:	d12d      	bne.n	8010286 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2241      	movs	r2, #65	@ 0x41
 801022e:	5c9b      	ldrb	r3, [r3, r2]
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b28      	cmp	r3, #40	@ 0x28
 8010234:	d10b      	bne.n	801024e <I2C_Slave_ISR_IT+0x86>
 8010236:	697a      	ldr	r2, [r7, #20]
 8010238:	2380      	movs	r3, #128	@ 0x80
 801023a:	049b      	lsls	r3, r3, #18
 801023c:	429a      	cmp	r2, r3
 801023e:	d106      	bne.n	801024e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010240:	693a      	ldr	r2, [r7, #16]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	0011      	movs	r1, r2
 8010246:	0018      	movs	r0, r3
 8010248:	f000 fef4 	bl	8011034 <I2C_ITListenCplt>
 801024c:	e036      	b.n	80102bc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2241      	movs	r2, #65	@ 0x41
 8010252:	5c9b      	ldrb	r3, [r3, r2]
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b29      	cmp	r3, #41	@ 0x29
 8010258:	d110      	bne.n	801027c <I2C_Slave_ISR_IT+0xb4>
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	4a59      	ldr	r2, [pc, #356]	@ (80103c4 <I2C_Slave_ISR_IT+0x1fc>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d00c      	beq.n	801027c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	2210      	movs	r2, #16
 8010268:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	0018      	movs	r0, r3
 801026e:	f001 f864 	bl	801133a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	0018      	movs	r0, r3
 8010276:	f000 fc8b 	bl	8010b90 <I2C_ITSlaveSeqCplt>
 801027a:	e01f      	b.n	80102bc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2210      	movs	r2, #16
 8010282:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8010284:	e091      	b.n	80103aa <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	2210      	movs	r2, #16
 801028c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010292:	2204      	movs	r2, #4
 8010294:	431a      	orrs	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d005      	beq.n	80102ac <I2C_Slave_ISR_IT+0xe4>
 80102a0:	697a      	ldr	r2, [r7, #20]
 80102a2:	2380      	movs	r3, #128	@ 0x80
 80102a4:	045b      	lsls	r3, r3, #17
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d000      	beq.n	80102ac <I2C_Slave_ISR_IT+0xe4>
 80102aa:	e07e      	b.n	80103aa <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	0011      	movs	r1, r2
 80102b4:	0018      	movs	r0, r3
 80102b6:	f000 ff15 	bl	80110e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80102ba:	e076      	b.n	80103aa <I2C_Slave_ISR_IT+0x1e2>
 80102bc:	e075      	b.n	80103aa <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	2204      	movs	r2, #4
 80102c2:	4013      	ands	r3, r2
 80102c4:	d02f      	beq.n	8010326 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2204      	movs	r2, #4
 80102ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80102cc:	d02b      	beq.n	8010326 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d018      	beq.n	801030a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e2:	b2d2      	uxtb	r2, r2
 80102e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102f4:	3b01      	subs	r3, #1
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010300:	b29b      	uxth	r3, r3
 8010302:	3b01      	subs	r3, #1
 8010304:	b29a      	uxth	r2, r3
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801030e:	b29b      	uxth	r3, r3
 8010310:	2b00      	cmp	r3, #0
 8010312:	d14c      	bne.n	80103ae <I2C_Slave_ISR_IT+0x1e6>
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	4a2b      	ldr	r2, [pc, #172]	@ (80103c4 <I2C_Slave_ISR_IT+0x1fc>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d048      	beq.n	80103ae <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	0018      	movs	r0, r3
 8010320:	f000 fc36 	bl	8010b90 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8010324:	e043      	b.n	80103ae <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	2208      	movs	r2, #8
 801032a:	4013      	ands	r3, r2
 801032c:	d00a      	beq.n	8010344 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2208      	movs	r2, #8
 8010332:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010334:	d006      	beq.n	8010344 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	0011      	movs	r1, r2
 801033c:	0018      	movs	r0, r3
 801033e:	f000 fb41 	bl	80109c4 <I2C_ITAddrCplt>
 8010342:	e035      	b.n	80103b0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	2202      	movs	r2, #2
 8010348:	4013      	ands	r3, r2
 801034a:	d031      	beq.n	80103b0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	2202      	movs	r2, #2
 8010350:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010352:	d02d      	beq.n	80103b0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010358:	b29b      	uxth	r3, r3
 801035a:	2b00      	cmp	r3, #0
 801035c:	d018      	beq.n	8010390 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010362:	781a      	ldrb	r2, [r3, #0]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801036e:	1c5a      	adds	r2, r3, #1
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010378:	b29b      	uxth	r3, r3
 801037a:	3b01      	subs	r3, #1
 801037c:	b29a      	uxth	r2, r3
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010386:	3b01      	subs	r3, #1
 8010388:	b29a      	uxth	r2, r3
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801038e:	e00f      	b.n	80103b0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010390:	697a      	ldr	r2, [r7, #20]
 8010392:	2380      	movs	r3, #128	@ 0x80
 8010394:	045b      	lsls	r3, r3, #17
 8010396:	429a      	cmp	r2, r3
 8010398:	d002      	beq.n	80103a0 <I2C_Slave_ISR_IT+0x1d8>
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d107      	bne.n	80103b0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	0018      	movs	r0, r3
 80103a4:	f000 fbf4 	bl	8010b90 <I2C_ITSlaveSeqCplt>
 80103a8:	e002      	b.n	80103b0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80103aa:	46c0      	nop			@ (mov r8, r8)
 80103ac:	e000      	b.n	80103b0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80103ae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2240      	movs	r2, #64	@ 0x40
 80103b4:	2100      	movs	r1, #0
 80103b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80103b8:	2300      	movs	r3, #0
}
 80103ba:	0018      	movs	r0, r3
 80103bc:	46bd      	mov	sp, r7
 80103be:	b006      	add	sp, #24
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	46c0      	nop			@ (mov r8, r8)
 80103c4:	ffff0000 	.word	0xffff0000

080103c8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80103c8:	b590      	push	{r4, r7, lr}
 80103ca:	b089      	sub	sp, #36	@ 0x24
 80103cc:	af02      	add	r7, sp, #8
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2240      	movs	r2, #64	@ 0x40
 80103d8:	5c9b      	ldrb	r3, [r3, r2]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d101      	bne.n	80103e2 <I2C_Master_ISR_DMA+0x1a>
 80103de:	2302      	movs	r3, #2
 80103e0:	e0e7      	b.n	80105b2 <I2C_Master_ISR_DMA+0x1ea>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2240      	movs	r2, #64	@ 0x40
 80103e6:	2101      	movs	r1, #1
 80103e8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	2210      	movs	r2, #16
 80103ee:	4013      	ands	r3, r2
 80103f0:	d017      	beq.n	8010422 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2210      	movs	r2, #16
 80103f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80103f8:	d013      	beq.n	8010422 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2210      	movs	r2, #16
 8010400:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010406:	2204      	movs	r2, #4
 8010408:	431a      	orrs	r2, r3
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2120      	movs	r1, #32
 8010412:	0018      	movs	r0, r3
 8010414:	f001 fb18 	bl	8011a48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	0018      	movs	r0, r3
 801041c:	f000 ff8d 	bl	801133a <I2C_Flush_TXDR>
 8010420:	e0c2      	b.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	2280      	movs	r2, #128	@ 0x80
 8010426:	4013      	ands	r3, r2
 8010428:	d100      	bne.n	801042c <I2C_Master_ISR_DMA+0x64>
 801042a:	e07c      	b.n	8010526 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2240      	movs	r2, #64	@ 0x40
 8010430:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010432:	d100      	bne.n	8010436 <I2C_Master_ISR_DMA+0x6e>
 8010434:	e077      	b.n	8010526 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2140      	movs	r1, #64	@ 0x40
 8010442:	438a      	bics	r2, r1
 8010444:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801044a:	b29b      	uxth	r3, r3
 801044c:	2b00      	cmp	r3, #0
 801044e:	d055      	beq.n	80104fc <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	b29a      	uxth	r2, r3
 8010458:	2312      	movs	r3, #18
 801045a:	18fb      	adds	r3, r7, r3
 801045c:	0592      	lsls	r2, r2, #22
 801045e:	0d92      	lsrs	r2, r2, #22
 8010460:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010466:	b29b      	uxth	r3, r3
 8010468:	2bff      	cmp	r3, #255	@ 0xff
 801046a:	d906      	bls.n	801047a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	22ff      	movs	r2, #255	@ 0xff
 8010470:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8010472:	2380      	movs	r3, #128	@ 0x80
 8010474:	045b      	lsls	r3, r3, #17
 8010476:	617b      	str	r3, [r7, #20]
 8010478:	e010      	b.n	801049c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801047e:	b29a      	uxth	r2, r3
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010488:	4a4c      	ldr	r2, [pc, #304]	@ (80105bc <I2C_Master_ISR_DMA+0x1f4>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d003      	beq.n	8010496 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010492:	617b      	str	r3, [r7, #20]
 8010494:	e002      	b.n	801049c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8010496:	2380      	movs	r3, #128	@ 0x80
 8010498:	049b      	lsls	r3, r3, #18
 801049a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104a0:	b2da      	uxtb	r2, r3
 80104a2:	697c      	ldr	r4, [r7, #20]
 80104a4:	2312      	movs	r3, #18
 80104a6:	18fb      	adds	r3, r7, r3
 80104a8:	8819      	ldrh	r1, [r3, #0]
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	2300      	movs	r3, #0
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	0023      	movs	r3, r4
 80104b2:	f001 fa8f 	bl	80119d4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2241      	movs	r2, #65	@ 0x41
 80104cc:	5c9b      	ldrb	r3, [r3, r2]
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	2b22      	cmp	r3, #34	@ 0x22
 80104d2:	d109      	bne.n	80104e8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2180      	movs	r1, #128	@ 0x80
 80104e0:	0209      	lsls	r1, r1, #8
 80104e2:	430a      	orrs	r2, r1
 80104e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80104e6:	e05f      	b.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	2180      	movs	r1, #128	@ 0x80
 80104f4:	01c9      	lsls	r1, r1, #7
 80104f6:	430a      	orrs	r2, r1
 80104f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80104fa:	e055      	b.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	685a      	ldr	r2, [r3, #4]
 8010502:	2380      	movs	r3, #128	@ 0x80
 8010504:	049b      	lsls	r3, r3, #18
 8010506:	401a      	ands	r2, r3
 8010508:	2380      	movs	r3, #128	@ 0x80
 801050a:	049b      	lsls	r3, r3, #18
 801050c:	429a      	cmp	r2, r3
 801050e:	d004      	beq.n	801051a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	0018      	movs	r0, r3
 8010514:	f000 fafa 	bl	8010b0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8010518:	e046      	b.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2140      	movs	r1, #64	@ 0x40
 801051e:	0018      	movs	r0, r3
 8010520:	f000 fde0 	bl	80110e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010524:	e040      	b.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	2240      	movs	r2, #64	@ 0x40
 801052a:	4013      	ands	r3, r2
 801052c:	d02c      	beq.n	8010588 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2240      	movs	r2, #64	@ 0x40
 8010532:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010534:	d028      	beq.n	8010588 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801053a:	b29b      	uxth	r3, r3
 801053c:	2b00      	cmp	r3, #0
 801053e:	d11d      	bne.n	801057c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	685a      	ldr	r2, [r3, #4]
 8010546:	2380      	movs	r3, #128	@ 0x80
 8010548:	049b      	lsls	r3, r3, #18
 801054a:	401a      	ands	r2, r3
 801054c:	2380      	movs	r3, #128	@ 0x80
 801054e:	049b      	lsls	r3, r3, #18
 8010550:	429a      	cmp	r2, r3
 8010552:	d028      	beq.n	80105a6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010558:	4a18      	ldr	r2, [pc, #96]	@ (80105bc <I2C_Master_ISR_DMA+0x1f4>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d109      	bne.n	8010572 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	685a      	ldr	r2, [r3, #4]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2180      	movs	r1, #128	@ 0x80
 801056a:	01c9      	lsls	r1, r1, #7
 801056c:	430a      	orrs	r2, r1
 801056e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010570:	e019      	b.n	80105a6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	0018      	movs	r0, r3
 8010576:	f000 fac9 	bl	8010b0c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801057a:	e014      	b.n	80105a6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2140      	movs	r1, #64	@ 0x40
 8010580:	0018      	movs	r0, r3
 8010582:	f000 fdaf 	bl	80110e4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010586:	e00e      	b.n	80105a6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2220      	movs	r2, #32
 801058c:	4013      	ands	r3, r2
 801058e:	d00b      	beq.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2220      	movs	r2, #32
 8010594:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010596:	d007      	beq.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	0011      	movs	r1, r2
 801059e:	0018      	movs	r0, r3
 80105a0:	f000 fb5a 	bl	8010c58 <I2C_ITMasterCplt>
 80105a4:	e000      	b.n	80105a8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80105a6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2240      	movs	r2, #64	@ 0x40
 80105ac:	2100      	movs	r1, #0
 80105ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	0018      	movs	r0, r3
 80105b4:	46bd      	mov	sp, r7
 80105b6:	b007      	add	sp, #28
 80105b8:	bd90      	pop	{r4, r7, pc}
 80105ba:	46c0      	nop			@ (mov r8, r8)
 80105bc:	ffff0000 	.word	0xffff0000

080105c0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80105c0:	b590      	push	{r4, r7, lr}
 80105c2:	b089      	sub	sp, #36	@ 0x24
 80105c4:	af02      	add	r7, sp, #8
 80105c6:	60f8      	str	r0, [r7, #12]
 80105c8:	60b9      	str	r1, [r7, #8]
 80105ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80105cc:	4b88      	ldr	r3, [pc, #544]	@ (80107f0 <I2C_Mem_ISR_DMA+0x230>)
 80105ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2240      	movs	r2, #64	@ 0x40
 80105d4:	5c9b      	ldrb	r3, [r3, r2]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d101      	bne.n	80105de <I2C_Mem_ISR_DMA+0x1e>
 80105da:	2302      	movs	r3, #2
 80105dc:	e104      	b.n	80107e8 <I2C_Mem_ISR_DMA+0x228>
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2240      	movs	r2, #64	@ 0x40
 80105e2:	2101      	movs	r1, #1
 80105e4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	2210      	movs	r2, #16
 80105ea:	4013      	ands	r3, r2
 80105ec:	d017      	beq.n	801061e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2210      	movs	r2, #16
 80105f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80105f4:	d013      	beq.n	801061e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2210      	movs	r2, #16
 80105fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010602:	2204      	movs	r2, #4
 8010604:	431a      	orrs	r2, r3
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2120      	movs	r1, #32
 801060e:	0018      	movs	r0, r3
 8010610:	f001 fa1a 	bl	8011a48 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	0018      	movs	r0, r3
 8010618:	f000 fe8f 	bl	801133a <I2C_Flush_TXDR>
 801061c:	e0df      	b.n	80107de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	2202      	movs	r2, #2
 8010622:	4013      	ands	r3, r2
 8010624:	d00d      	beq.n	8010642 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2202      	movs	r2, #2
 801062a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801062c:	d009      	beq.n	8010642 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010636:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2201      	movs	r2, #1
 801063c:	4252      	negs	r2, r2
 801063e:	651a      	str	r2, [r3, #80]	@ 0x50
 8010640:	e0cd      	b.n	80107de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	2280      	movs	r2, #128	@ 0x80
 8010646:	4013      	ands	r3, r2
 8010648:	d05e      	beq.n	8010708 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2240      	movs	r2, #64	@ 0x40
 801064e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010650:	d05a      	beq.n	8010708 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2110      	movs	r1, #16
 8010656:	0018      	movs	r0, r3
 8010658:	f001 f9f6 	bl	8011a48 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010660:	b29b      	uxth	r3, r3
 8010662:	2b00      	cmp	r3, #0
 8010664:	d04a      	beq.n	80106fc <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801066a:	b29b      	uxth	r3, r3
 801066c:	2bff      	cmp	r3, #255	@ 0xff
 801066e:	d910      	bls.n	8010692 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	22ff      	movs	r2, #255	@ 0xff
 8010674:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801067a:	b299      	uxth	r1, r3
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010680:	b2da      	uxtb	r2, r3
 8010682:	2380      	movs	r3, #128	@ 0x80
 8010684:	045b      	lsls	r3, r3, #17
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	2400      	movs	r4, #0
 801068a:	9400      	str	r4, [sp, #0]
 801068c:	f001 f9a2 	bl	80119d4 <I2C_TransferConfig>
 8010690:	e011      	b.n	80106b6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010696:	b29a      	uxth	r2, r3
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80106a0:	b299      	uxth	r1, r3
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106a6:	b2da      	uxtb	r2, r3
 80106a8:	2380      	movs	r3, #128	@ 0x80
 80106aa:	049b      	lsls	r3, r3, #18
 80106ac:	68f8      	ldr	r0, [r7, #12]
 80106ae:	2400      	movs	r4, #0
 80106b0:	9400      	str	r4, [sp, #0]
 80106b2:	f001 f98f 	bl	80119d4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2241      	movs	r2, #65	@ 0x41
 80106cc:	5c9b      	ldrb	r3, [r3, r2]
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	2b22      	cmp	r3, #34	@ 0x22
 80106d2:	d109      	bne.n	80106e8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2180      	movs	r1, #128	@ 0x80
 80106e0:	0209      	lsls	r1, r1, #8
 80106e2:	430a      	orrs	r2, r1
 80106e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80106e6:	e07a      	b.n	80107de <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2180      	movs	r1, #128	@ 0x80
 80106f4:	01c9      	lsls	r1, r1, #7
 80106f6:	430a      	orrs	r2, r1
 80106f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80106fa:	e070      	b.n	80107de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2140      	movs	r1, #64	@ 0x40
 8010700:	0018      	movs	r0, r3
 8010702:	f000 fcef 	bl	80110e4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010706:	e06a      	b.n	80107de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2240      	movs	r2, #64	@ 0x40
 801070c:	4013      	ands	r3, r2
 801070e:	d058      	beq.n	80107c2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2240      	movs	r2, #64	@ 0x40
 8010714:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010716:	d054      	beq.n	80107c2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2241      	movs	r2, #65	@ 0x41
 801071c:	5c9b      	ldrb	r3, [r3, r2]
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b22      	cmp	r3, #34	@ 0x22
 8010722:	d101      	bne.n	8010728 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8010724:	4b33      	ldr	r3, [pc, #204]	@ (80107f4 <I2C_Mem_ISR_DMA+0x234>)
 8010726:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801072c:	b29b      	uxth	r3, r3
 801072e:	2bff      	cmp	r3, #255	@ 0xff
 8010730:	d911      	bls.n	8010756 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	22ff      	movs	r2, #255	@ 0xff
 8010736:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801073c:	b299      	uxth	r1, r3
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010742:	b2da      	uxtb	r2, r3
 8010744:	2380      	movs	r3, #128	@ 0x80
 8010746:	045c      	lsls	r4, r3, #17
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	0023      	movs	r3, r4
 8010750:	f001 f940 	bl	80119d4 <I2C_TransferConfig>
 8010754:	e012      	b.n	801077c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801075a:	b29a      	uxth	r2, r3
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010764:	b299      	uxth	r1, r3
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801076a:	b2da      	uxtb	r2, r3
 801076c:	2380      	movs	r3, #128	@ 0x80
 801076e:	049c      	lsls	r4, r3, #18
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	0023      	movs	r3, r4
 8010778:	f001 f92c 	bl	80119d4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010780:	b29a      	uxth	r2, r3
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	b29a      	uxth	r2, r3
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2241      	movs	r2, #65	@ 0x41
 8010792:	5c9b      	ldrb	r3, [r3, r2]
 8010794:	b2db      	uxtb	r3, r3
 8010796:	2b22      	cmp	r3, #34	@ 0x22
 8010798:	d109      	bne.n	80107ae <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2180      	movs	r1, #128	@ 0x80
 80107a6:	0209      	lsls	r1, r1, #8
 80107a8:	430a      	orrs	r2, r1
 80107aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80107ac:	e017      	b.n	80107de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2180      	movs	r1, #128	@ 0x80
 80107ba:	01c9      	lsls	r1, r1, #7
 80107bc:	430a      	orrs	r2, r1
 80107be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80107c0:	e00d      	b.n	80107de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	2220      	movs	r2, #32
 80107c6:	4013      	ands	r3, r2
 80107c8:	d009      	beq.n	80107de <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2220      	movs	r2, #32
 80107ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80107d0:	d005      	beq.n	80107de <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	0011      	movs	r1, r2
 80107d8:	0018      	movs	r0, r3
 80107da:	f000 fa3d 	bl	8010c58 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2240      	movs	r2, #64	@ 0x40
 80107e2:	2100      	movs	r1, #0
 80107e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80107e6:	2300      	movs	r3, #0
}
 80107e8:	0018      	movs	r0, r3
 80107ea:	46bd      	mov	sp, r7
 80107ec:	b007      	add	sp, #28
 80107ee:	bd90      	pop	{r4, r7, pc}
 80107f0:	80002000 	.word	0x80002000
 80107f4:	80002400 	.word	0x80002400

080107f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b088      	sub	sp, #32
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010808:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801080a:	2300      	movs	r3, #0
 801080c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2240      	movs	r2, #64	@ 0x40
 8010812:	5c9b      	ldrb	r3, [r3, r2]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d101      	bne.n	801081c <I2C_Slave_ISR_DMA+0x24>
 8010818:	2302      	movs	r3, #2
 801081a:	e0cd      	b.n	80109b8 <I2C_Slave_ISR_DMA+0x1c0>
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2240      	movs	r2, #64	@ 0x40
 8010820:	2101      	movs	r1, #1
 8010822:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	2220      	movs	r2, #32
 8010828:	4013      	ands	r3, r2
 801082a:	d009      	beq.n	8010840 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2220      	movs	r2, #32
 8010830:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010832:	d005      	beq.n	8010840 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	0011      	movs	r1, r2
 801083a:	0018      	movs	r0, r3
 801083c:	f000 fada 	bl	8010df4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	2210      	movs	r2, #16
 8010844:	4013      	ands	r3, r2
 8010846:	d100      	bne.n	801084a <I2C_Slave_ISR_DMA+0x52>
 8010848:	e0a3      	b.n	8010992 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2210      	movs	r2, #16
 801084e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010850:	d100      	bne.n	8010854 <I2C_Slave_ISR_DMA+0x5c>
 8010852:	e09e      	b.n	8010992 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	2380      	movs	r3, #128	@ 0x80
 8010858:	01db      	lsls	r3, r3, #7
 801085a:	4013      	ands	r3, r2
 801085c:	d105      	bne.n	801086a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801085e:	687a      	ldr	r2, [r7, #4]
 8010860:	2380      	movs	r3, #128	@ 0x80
 8010862:	021b      	lsls	r3, r3, #8
 8010864:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010866:	d100      	bne.n	801086a <I2C_Slave_ISR_DMA+0x72>
 8010868:	e08c      	b.n	8010984 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801086e:	2b00      	cmp	r3, #0
 8010870:	d00c      	beq.n	801088c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	2380      	movs	r3, #128	@ 0x80
 8010876:	021b      	lsls	r3, r3, #8
 8010878:	4013      	ands	r3, r2
 801087a:	d007      	beq.n	801088c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d101      	bne.n	801088c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010888:	2301      	movs	r3, #1
 801088a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010890:	2b00      	cmp	r3, #0
 8010892:	d00c      	beq.n	80108ae <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	2380      	movs	r3, #128	@ 0x80
 8010898:	01db      	lsls	r3, r3, #7
 801089a:	4013      	ands	r3, r2
 801089c:	d007      	beq.n	80108ae <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 80108aa:	2301      	movs	r3, #1
 80108ac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d12d      	bne.n	8010910 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2241      	movs	r2, #65	@ 0x41
 80108b8:	5c9b      	ldrb	r3, [r3, r2]
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	2b28      	cmp	r3, #40	@ 0x28
 80108be:	d10b      	bne.n	80108d8 <I2C_Slave_ISR_DMA+0xe0>
 80108c0:	69ba      	ldr	r2, [r7, #24]
 80108c2:	2380      	movs	r3, #128	@ 0x80
 80108c4:	049b      	lsls	r3, r3, #18
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d106      	bne.n	80108d8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	0011      	movs	r1, r2
 80108d0:	0018      	movs	r0, r3
 80108d2:	f000 fbaf 	bl	8011034 <I2C_ITListenCplt>
 80108d6:	e054      	b.n	8010982 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	2241      	movs	r2, #65	@ 0x41
 80108dc:	5c9b      	ldrb	r3, [r3, r2]
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b29      	cmp	r3, #41	@ 0x29
 80108e2:	d110      	bne.n	8010906 <I2C_Slave_ISR_DMA+0x10e>
 80108e4:	69bb      	ldr	r3, [r7, #24]
 80108e6:	4a36      	ldr	r2, [pc, #216]	@ (80109c0 <I2C_Slave_ISR_DMA+0x1c8>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d00c      	beq.n	8010906 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2210      	movs	r2, #16
 80108f2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	0018      	movs	r0, r3
 80108f8:	f000 fd1f 	bl	801133a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	0018      	movs	r0, r3
 8010900:	f000 f946 	bl	8010b90 <I2C_ITSlaveSeqCplt>
 8010904:	e03d      	b.n	8010982 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2210      	movs	r2, #16
 801090c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801090e:	e03e      	b.n	801098e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2210      	movs	r2, #16
 8010916:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801091c:	2204      	movs	r2, #4
 801091e:	431a      	orrs	r2, r3
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8010924:	2317      	movs	r3, #23
 8010926:	18fb      	adds	r3, r7, r3
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	2141      	movs	r1, #65	@ 0x41
 801092c:	5c52      	ldrb	r2, [r2, r1]
 801092e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d004      	beq.n	8010940 <I2C_Slave_ISR_DMA+0x148>
 8010936:	69ba      	ldr	r2, [r7, #24]
 8010938:	2380      	movs	r3, #128	@ 0x80
 801093a:	045b      	lsls	r3, r3, #17
 801093c:	429a      	cmp	r2, r3
 801093e:	d126      	bne.n	801098e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010940:	2217      	movs	r2, #23
 8010942:	18bb      	adds	r3, r7, r2
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	2b21      	cmp	r3, #33	@ 0x21
 8010948:	d003      	beq.n	8010952 <I2C_Slave_ISR_DMA+0x15a>
 801094a:	18bb      	adds	r3, r7, r2
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	2b29      	cmp	r3, #41	@ 0x29
 8010950:	d103      	bne.n	801095a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2221      	movs	r2, #33	@ 0x21
 8010956:	631a      	str	r2, [r3, #48]	@ 0x30
 8010958:	e00b      	b.n	8010972 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801095a:	2217      	movs	r2, #23
 801095c:	18bb      	adds	r3, r7, r2
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	2b22      	cmp	r3, #34	@ 0x22
 8010962:	d003      	beq.n	801096c <I2C_Slave_ISR_DMA+0x174>
 8010964:	18bb      	adds	r3, r7, r2
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	2b2a      	cmp	r3, #42	@ 0x2a
 801096a:	d102      	bne.n	8010972 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	2222      	movs	r2, #34	@ 0x22
 8010970:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	0011      	movs	r1, r2
 801097a:	0018      	movs	r0, r3
 801097c:	f000 fbb2 	bl	80110e4 <I2C_ITError>
      if (treatdmanack == 1U)
 8010980:	e005      	b.n	801098e <I2C_Slave_ISR_DMA+0x196>
 8010982:	e004      	b.n	801098e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2210      	movs	r2, #16
 801098a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801098c:	e00f      	b.n	80109ae <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801098e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010990:	e00d      	b.n	80109ae <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	2208      	movs	r2, #8
 8010996:	4013      	ands	r3, r2
 8010998:	d009      	beq.n	80109ae <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2208      	movs	r2, #8
 801099e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80109a0:	d005      	beq.n	80109ae <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	0011      	movs	r1, r2
 80109a8:	0018      	movs	r0, r3
 80109aa:	f000 f80b 	bl	80109c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2240      	movs	r2, #64	@ 0x40
 80109b2:	2100      	movs	r1, #0
 80109b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80109b6:	2300      	movs	r3, #0
}
 80109b8:	0018      	movs	r0, r3
 80109ba:	46bd      	mov	sp, r7
 80109bc:	b008      	add	sp, #32
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	ffff0000 	.word	0xffff0000

080109c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80109c4:	b5b0      	push	{r4, r5, r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2241      	movs	r2, #65	@ 0x41
 80109d2:	5c9b      	ldrb	r3, [r3, r2]
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	001a      	movs	r2, r3
 80109d8:	2328      	movs	r3, #40	@ 0x28
 80109da:	4013      	ands	r3, r2
 80109dc:	2b28      	cmp	r3, #40	@ 0x28
 80109de:	d000      	beq.n	80109e2 <I2C_ITAddrCplt+0x1e>
 80109e0:	e088      	b.n	8010af4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	699b      	ldr	r3, [r3, #24]
 80109e8:	0c1b      	lsrs	r3, r3, #16
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	250f      	movs	r5, #15
 80109ee:	197b      	adds	r3, r7, r5
 80109f0:	2101      	movs	r1, #1
 80109f2:	400a      	ands	r2, r1
 80109f4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	699b      	ldr	r3, [r3, #24]
 80109fc:	0c1b      	lsrs	r3, r3, #16
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	200c      	movs	r0, #12
 8010a02:	183b      	adds	r3, r7, r0
 8010a04:	21fe      	movs	r1, #254	@ 0xfe
 8010a06:	400a      	ands	r2, r1
 8010a08:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	240a      	movs	r4, #10
 8010a14:	193b      	adds	r3, r7, r4
 8010a16:	0592      	lsls	r2, r2, #22
 8010a18:	0d92      	lsrs	r2, r2, #22
 8010a1a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	2308      	movs	r3, #8
 8010a26:	18fb      	adds	r3, r7, r3
 8010a28:	21fe      	movs	r1, #254	@ 0xfe
 8010a2a:	400a      	ands	r2, r1
 8010a2c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	2b02      	cmp	r3, #2
 8010a34:	d148      	bne.n	8010ac8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8010a36:	0021      	movs	r1, r4
 8010a38:	187b      	adds	r3, r7, r1
 8010a3a:	881b      	ldrh	r3, [r3, #0]
 8010a3c:	09db      	lsrs	r3, r3, #7
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	183b      	adds	r3, r7, r0
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	4053      	eors	r3, r2
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	001a      	movs	r2, r3
 8010a4a:	2306      	movs	r3, #6
 8010a4c:	4013      	ands	r3, r2
 8010a4e:	d120      	bne.n	8010a92 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010a50:	183b      	adds	r3, r7, r0
 8010a52:	187a      	adds	r2, r7, r1
 8010a54:	8812      	ldrh	r2, [r2, #0]
 8010a56:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a5c:	1c5a      	adds	r2, r3, #1
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d14c      	bne.n	8010b04 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2208      	movs	r2, #8
 8010a76:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2240      	movs	r2, #64	@ 0x40
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010a80:	183b      	adds	r3, r7, r0
 8010a82:	881a      	ldrh	r2, [r3, #0]
 8010a84:	197b      	adds	r3, r7, r5
 8010a86:	7819      	ldrb	r1, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	0018      	movs	r0, r3
 8010a8c:	f7ff fa39 	bl	800ff02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010a90:	e038      	b.n	8010b04 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8010a92:	240c      	movs	r4, #12
 8010a94:	193b      	adds	r3, r7, r4
 8010a96:	2208      	movs	r2, #8
 8010a98:	18ba      	adds	r2, r7, r2
 8010a9a:	8812      	ldrh	r2, [r2, #0]
 8010a9c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010a9e:	2380      	movs	r3, #128	@ 0x80
 8010aa0:	021a      	lsls	r2, r3, #8
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	0011      	movs	r1, r2
 8010aa6:	0018      	movs	r0, r3
 8010aa8:	f001 f85c 	bl	8011b64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2240      	movs	r2, #64	@ 0x40
 8010ab0:	2100      	movs	r1, #0
 8010ab2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010ab4:	193b      	adds	r3, r7, r4
 8010ab6:	881a      	ldrh	r2, [r3, #0]
 8010ab8:	230f      	movs	r3, #15
 8010aba:	18fb      	adds	r3, r7, r3
 8010abc:	7819      	ldrb	r1, [r3, #0]
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	f7ff fa1e 	bl	800ff02 <HAL_I2C_AddrCallback>
}
 8010ac6:	e01d      	b.n	8010b04 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010ac8:	2380      	movs	r3, #128	@ 0x80
 8010aca:	021a      	lsls	r2, r3, #8
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	0011      	movs	r1, r2
 8010ad0:	0018      	movs	r0, r3
 8010ad2:	f001 f847 	bl	8011b64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2240      	movs	r2, #64	@ 0x40
 8010ada:	2100      	movs	r1, #0
 8010adc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010ade:	230c      	movs	r3, #12
 8010ae0:	18fb      	adds	r3, r7, r3
 8010ae2:	881a      	ldrh	r2, [r3, #0]
 8010ae4:	230f      	movs	r3, #15
 8010ae6:	18fb      	adds	r3, r7, r3
 8010ae8:	7819      	ldrb	r1, [r3, #0]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	0018      	movs	r0, r3
 8010aee:	f7ff fa08 	bl	800ff02 <HAL_I2C_AddrCallback>
}
 8010af2:	e007      	b.n	8010b04 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2208      	movs	r2, #8
 8010afa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2240      	movs	r2, #64	@ 0x40
 8010b00:	2100      	movs	r1, #0
 8010b02:	5499      	strb	r1, [r3, r2]
}
 8010b04:	46c0      	nop			@ (mov r8, r8)
 8010b06:	46bd      	mov	sp, r7
 8010b08:	b004      	add	sp, #16
 8010b0a:	bdb0      	pop	{r4, r5, r7, pc}

08010b0c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2242      	movs	r2, #66	@ 0x42
 8010b18:	2100      	movs	r1, #0
 8010b1a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2241      	movs	r2, #65	@ 0x41
 8010b20:	5c9b      	ldrb	r3, [r3, r2]
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	2b21      	cmp	r3, #33	@ 0x21
 8010b26:	d117      	bne.n	8010b58 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2241      	movs	r2, #65	@ 0x41
 8010b2c:	2120      	movs	r1, #32
 8010b2e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2211      	movs	r2, #17
 8010b34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2101      	movs	r1, #1
 8010b40:	0018      	movs	r0, r3
 8010b42:	f001 f80f 	bl	8011b64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2240      	movs	r2, #64	@ 0x40
 8010b4a:	2100      	movs	r1, #0
 8010b4c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	0018      	movs	r0, r3
 8010b52:	f7ff f9b6 	bl	800fec2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010b56:	e016      	b.n	8010b86 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2241      	movs	r2, #65	@ 0x41
 8010b5c:	2120      	movs	r1, #32
 8010b5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2212      	movs	r2, #18
 8010b64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2102      	movs	r1, #2
 8010b70:	0018      	movs	r0, r3
 8010b72:	f000 fff7 	bl	8011b64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2240      	movs	r2, #64	@ 0x40
 8010b7a:	2100      	movs	r1, #0
 8010b7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	0018      	movs	r0, r3
 8010b82:	f7ff f9a6 	bl	800fed2 <HAL_I2C_MasterRxCpltCallback>
}
 8010b86:	46c0      	nop			@ (mov r8, r8)
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	b002      	add	sp, #8
 8010b8c:	bd80      	pop	{r7, pc}
	...

08010b90 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2242      	movs	r2, #66	@ 0x42
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010ba8:	68fa      	ldr	r2, [r7, #12]
 8010baa:	2380      	movs	r3, #128	@ 0x80
 8010bac:	01db      	lsls	r3, r3, #7
 8010bae:	4013      	ands	r3, r2
 8010bb0:	d008      	beq.n	8010bc4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4924      	ldr	r1, [pc, #144]	@ (8010c50 <I2C_ITSlaveSeqCplt+0xc0>)
 8010bbe:	400a      	ands	r2, r1
 8010bc0:	601a      	str	r2, [r3, #0]
 8010bc2:	e00c      	b.n	8010bde <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	2380      	movs	r3, #128	@ 0x80
 8010bc8:	021b      	lsls	r3, r3, #8
 8010bca:	4013      	ands	r3, r2
 8010bcc:	d007      	beq.n	8010bde <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	491e      	ldr	r1, [pc, #120]	@ (8010c54 <I2C_ITSlaveSeqCplt+0xc4>)
 8010bda:	400a      	ands	r2, r1
 8010bdc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2241      	movs	r2, #65	@ 0x41
 8010be2:	5c9b      	ldrb	r3, [r3, r2]
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	2b29      	cmp	r3, #41	@ 0x29
 8010be8:	d114      	bne.n	8010c14 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2241      	movs	r2, #65	@ 0x41
 8010bee:	2128      	movs	r1, #40	@ 0x28
 8010bf0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2221      	movs	r2, #33	@ 0x21
 8010bf6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2101      	movs	r1, #1
 8010bfc:	0018      	movs	r0, r3
 8010bfe:	f000 ffb1 	bl	8011b64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2240      	movs	r2, #64	@ 0x40
 8010c06:	2100      	movs	r1, #0
 8010c08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	0018      	movs	r0, r3
 8010c0e:	f7ff f968 	bl	800fee2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010c12:	e019      	b.n	8010c48 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2241      	movs	r2, #65	@ 0x41
 8010c18:	5c9b      	ldrb	r3, [r3, r2]
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c1e:	d113      	bne.n	8010c48 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2241      	movs	r2, #65	@ 0x41
 8010c24:	2128      	movs	r1, #40	@ 0x28
 8010c26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2222      	movs	r2, #34	@ 0x22
 8010c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2102      	movs	r1, #2
 8010c32:	0018      	movs	r0, r3
 8010c34:	f000 ff96 	bl	8011b64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2240      	movs	r2, #64	@ 0x40
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	0018      	movs	r0, r3
 8010c44:	f7ff f955 	bl	800fef2 <HAL_I2C_SlaveRxCpltCallback>
}
 8010c48:	46c0      	nop			@ (mov r8, r8)
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	b004      	add	sp, #16
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	ffffbfff 	.word	0xffffbfff
 8010c54:	ffff7fff 	.word	0xffff7fff

08010c58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b086      	sub	sp, #24
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2220      	movs	r2, #32
 8010c6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2241      	movs	r2, #65	@ 0x41
 8010c72:	5c9b      	ldrb	r3, [r3, r2]
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	2b21      	cmp	r3, #33	@ 0x21
 8010c78:	d108      	bne.n	8010c8c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2101      	movs	r1, #1
 8010c7e:	0018      	movs	r0, r3
 8010c80:	f000 ff70 	bl	8011b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2211      	movs	r2, #17
 8010c88:	631a      	str	r2, [r3, #48]	@ 0x30
 8010c8a:	e00d      	b.n	8010ca8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2241      	movs	r2, #65	@ 0x41
 8010c90:	5c9b      	ldrb	r3, [r3, r2]
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b22      	cmp	r3, #34	@ 0x22
 8010c96:	d107      	bne.n	8010ca8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2102      	movs	r1, #2
 8010c9c:	0018      	movs	r0, r3
 8010c9e:	f000 ff61 	bl	8011b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2212      	movs	r2, #18
 8010ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	685a      	ldr	r2, [r3, #4]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	494e      	ldr	r1, [pc, #312]	@ (8010dec <I2C_ITMasterCplt+0x194>)
 8010cb4:	400a      	ands	r2, r1
 8010cb6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8010df0 <I2C_ITMasterCplt+0x198>)
 8010cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	2210      	movs	r2, #16
 8010cc8:	4013      	ands	r3, r2
 8010cca:	d009      	beq.n	8010ce0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2210      	movs	r2, #16
 8010cd2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cd8:	2204      	movs	r2, #4
 8010cda:	431a      	orrs	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2241      	movs	r2, #65	@ 0x41
 8010ce4:	5c9b      	ldrb	r3, [r3, r2]
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	2b60      	cmp	r3, #96	@ 0x60
 8010cea:	d109      	bne.n	8010d00 <I2C_ITMasterCplt+0xa8>
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	2204      	movs	r2, #4
 8010cf0:	4013      	ands	r3, r2
 8010cf2:	d005      	beq.n	8010d00 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010cfe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	0018      	movs	r0, r3
 8010d04:	f000 fb19 	bl	801133a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d0c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2241      	movs	r2, #65	@ 0x41
 8010d12:	5c9b      	ldrb	r3, [r3, r2]
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	2b60      	cmp	r3, #96	@ 0x60
 8010d18:	d002      	beq.n	8010d20 <I2C_ITMasterCplt+0xc8>
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d007      	beq.n	8010d30 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	0011      	movs	r1, r2
 8010d28:	0018      	movs	r0, r3
 8010d2a:	f000 f9db 	bl	80110e4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010d2e:	e058      	b.n	8010de2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2241      	movs	r2, #65	@ 0x41
 8010d34:	5c9b      	ldrb	r3, [r3, r2]
 8010d36:	b2db      	uxtb	r3, r3
 8010d38:	2b21      	cmp	r3, #33	@ 0x21
 8010d3a:	d126      	bne.n	8010d8a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2241      	movs	r2, #65	@ 0x41
 8010d40:	2120      	movs	r1, #32
 8010d42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2242      	movs	r2, #66	@ 0x42
 8010d4e:	5c9b      	ldrb	r3, [r3, r2]
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	2b40      	cmp	r3, #64	@ 0x40
 8010d54:	d10c      	bne.n	8010d70 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2242      	movs	r2, #66	@ 0x42
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2240      	movs	r2, #64	@ 0x40
 8010d62:	2100      	movs	r1, #0
 8010d64:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	0018      	movs	r0, r3
 8010d6a:	f7ff f8e2 	bl	800ff32 <HAL_I2C_MemTxCpltCallback>
}
 8010d6e:	e038      	b.n	8010de2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2242      	movs	r2, #66	@ 0x42
 8010d74:	2100      	movs	r1, #0
 8010d76:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2240      	movs	r2, #64	@ 0x40
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	0018      	movs	r0, r3
 8010d84:	f7ff f89d 	bl	800fec2 <HAL_I2C_MasterTxCpltCallback>
}
 8010d88:	e02b      	b.n	8010de2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2241      	movs	r2, #65	@ 0x41
 8010d8e:	5c9b      	ldrb	r3, [r3, r2]
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	2b22      	cmp	r3, #34	@ 0x22
 8010d94:	d125      	bne.n	8010de2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2241      	movs	r2, #65	@ 0x41
 8010d9a:	2120      	movs	r1, #32
 8010d9c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2200      	movs	r2, #0
 8010da2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2242      	movs	r2, #66	@ 0x42
 8010da8:	5c9b      	ldrb	r3, [r3, r2]
 8010daa:	b2db      	uxtb	r3, r3
 8010dac:	2b40      	cmp	r3, #64	@ 0x40
 8010dae:	d10c      	bne.n	8010dca <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2242      	movs	r2, #66	@ 0x42
 8010db4:	2100      	movs	r1, #0
 8010db6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2240      	movs	r2, #64	@ 0x40
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	f7ff f8bd 	bl	800ff42 <HAL_I2C_MemRxCpltCallback>
}
 8010dc8:	e00b      	b.n	8010de2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2242      	movs	r2, #66	@ 0x42
 8010dce:	2100      	movs	r1, #0
 8010dd0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2240      	movs	r2, #64	@ 0x40
 8010dd6:	2100      	movs	r1, #0
 8010dd8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	0018      	movs	r0, r3
 8010dde:	f7ff f878 	bl	800fed2 <HAL_I2C_MasterRxCpltCallback>
}
 8010de2:	46c0      	nop			@ (mov r8, r8)
 8010de4:	46bd      	mov	sp, r7
 8010de6:	b006      	add	sp, #24
 8010de8:	bd80      	pop	{r7, pc}
 8010dea:	46c0      	nop			@ (mov r8, r8)
 8010dec:	fe00e800 	.word	0xfe00e800
 8010df0:	ffff0000 	.word	0xffff0000

08010df4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b086      	sub	sp, #24
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010e0a:	200f      	movs	r0, #15
 8010e0c:	183b      	adds	r3, r7, r0
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	2141      	movs	r1, #65	@ 0x41
 8010e12:	5c52      	ldrb	r2, [r2, r1]
 8010e14:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	2220      	movs	r2, #32
 8010e1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010e1e:	183b      	adds	r3, r7, r0
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	2b21      	cmp	r3, #33	@ 0x21
 8010e24:	d003      	beq.n	8010e2e <I2C_ITSlaveCplt+0x3a>
 8010e26:	183b      	adds	r3, r7, r0
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	2b29      	cmp	r3, #41	@ 0x29
 8010e2c:	d109      	bne.n	8010e42 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010e2e:	4a7b      	ldr	r2, [pc, #492]	@ (801101c <I2C_ITSlaveCplt+0x228>)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	0011      	movs	r1, r2
 8010e34:	0018      	movs	r0, r3
 8010e36:	f000 fe95 	bl	8011b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2221      	movs	r2, #33	@ 0x21
 8010e3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8010e40:	e011      	b.n	8010e66 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010e42:	220f      	movs	r2, #15
 8010e44:	18bb      	adds	r3, r7, r2
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	2b22      	cmp	r3, #34	@ 0x22
 8010e4a:	d003      	beq.n	8010e54 <I2C_ITSlaveCplt+0x60>
 8010e4c:	18bb      	adds	r3, r7, r2
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e52:	d108      	bne.n	8010e66 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8010e54:	4a72      	ldr	r2, [pc, #456]	@ (8011020 <I2C_ITSlaveCplt+0x22c>)
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	0011      	movs	r1, r2
 8010e5a:	0018      	movs	r0, r3
 8010e5c:	f000 fe82 	bl	8011b64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2222      	movs	r2, #34	@ 0x22
 8010e64:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2180      	movs	r1, #128	@ 0x80
 8010e72:	0209      	lsls	r1, r1, #8
 8010e74:	430a      	orrs	r2, r1
 8010e76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	685a      	ldr	r2, [r3, #4]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4968      	ldr	r1, [pc, #416]	@ (8011024 <I2C_ITSlaveCplt+0x230>)
 8010e84:	400a      	ands	r2, r1
 8010e86:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	0018      	movs	r0, r3
 8010e8c:	f000 fa55 	bl	801133a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010e90:	693a      	ldr	r2, [r7, #16]
 8010e92:	2380      	movs	r3, #128	@ 0x80
 8010e94:	01db      	lsls	r3, r3, #7
 8010e96:	4013      	ands	r3, r2
 8010e98:	d013      	beq.n	8010ec2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	681a      	ldr	r2, [r3, #0]
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4960      	ldr	r1, [pc, #384]	@ (8011028 <I2C_ITSlaveCplt+0x234>)
 8010ea6:	400a      	ands	r2, r1
 8010ea8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d01f      	beq.n	8010ef2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010ec0:	e017      	b.n	8010ef2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010ec2:	693a      	ldr	r2, [r7, #16]
 8010ec4:	2380      	movs	r3, #128	@ 0x80
 8010ec6:	021b      	lsls	r3, r3, #8
 8010ec8:	4013      	ands	r3, r2
 8010eca:	d012      	beq.n	8010ef2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4955      	ldr	r1, [pc, #340]	@ (801102c <I2C_ITSlaveCplt+0x238>)
 8010ed8:	400a      	ands	r2, r1
 8010eda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d006      	beq.n	8010ef2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	2204      	movs	r2, #4
 8010ef6:	4013      	ands	r3, r2
 8010ef8:	d020      	beq.n	8010f3c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	2204      	movs	r2, #4
 8010efe:	4393      	bics	r3, r2
 8010f00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f0c:	b2d2      	uxtb	r2, r2
 8010f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f14:	1c5a      	adds	r2, r3, #1
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00c      	beq.n	8010f3c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f26:	3b01      	subs	r3, #1
 8010f28:	b29a      	uxth	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	3b01      	subs	r3, #1
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d005      	beq.n	8010f52 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f4a:	2204      	movs	r2, #4
 8010f4c:	431a      	orrs	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2242      	movs	r2, #66	@ 0x42
 8010f56:	2100      	movs	r1, #0
 8010f58:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d013      	beq.n	8010f90 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	0011      	movs	r1, r2
 8010f70:	0018      	movs	r0, r3
 8010f72:	f000 f8b7 	bl	80110e4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2241      	movs	r2, #65	@ 0x41
 8010f7a:	5c9b      	ldrb	r3, [r3, r2]
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	2b28      	cmp	r3, #40	@ 0x28
 8010f80:	d147      	bne.n	8011012 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010f82:	697a      	ldr	r2, [r7, #20]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	0011      	movs	r1, r2
 8010f88:	0018      	movs	r0, r3
 8010f8a:	f000 f853 	bl	8011034 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010f8e:	e040      	b.n	8011012 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f94:	4a26      	ldr	r2, [pc, #152]	@ (8011030 <I2C_ITSlaveCplt+0x23c>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d016      	beq.n	8010fc8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	0018      	movs	r0, r3
 8010f9e:	f7ff fdf7 	bl	8010b90 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	4a22      	ldr	r2, [pc, #136]	@ (8011030 <I2C_ITSlaveCplt+0x23c>)
 8010fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2241      	movs	r2, #65	@ 0x41
 8010fac:	2120      	movs	r1, #32
 8010fae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2240      	movs	r2, #64	@ 0x40
 8010fba:	2100      	movs	r1, #0
 8010fbc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	0018      	movs	r0, r3
 8010fc2:	f7fe ffae 	bl	800ff22 <HAL_I2C_ListenCpltCallback>
}
 8010fc6:	e024      	b.n	8011012 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2241      	movs	r2, #65	@ 0x41
 8010fcc:	5c9b      	ldrb	r3, [r3, r2]
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	2b22      	cmp	r3, #34	@ 0x22
 8010fd2:	d10f      	bne.n	8010ff4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2241      	movs	r2, #65	@ 0x41
 8010fd8:	2120      	movs	r1, #32
 8010fda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2240      	movs	r2, #64	@ 0x40
 8010fe6:	2100      	movs	r1, #0
 8010fe8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	0018      	movs	r0, r3
 8010fee:	f7fe ff80 	bl	800fef2 <HAL_I2C_SlaveRxCpltCallback>
}
 8010ff2:	e00e      	b.n	8011012 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2241      	movs	r2, #65	@ 0x41
 8010ff8:	2120      	movs	r1, #32
 8010ffa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2200      	movs	r2, #0
 8011000:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2240      	movs	r2, #64	@ 0x40
 8011006:	2100      	movs	r1, #0
 8011008:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	0018      	movs	r0, r3
 801100e:	f7fe ff68 	bl	800fee2 <HAL_I2C_SlaveTxCpltCallback>
}
 8011012:	46c0      	nop			@ (mov r8, r8)
 8011014:	46bd      	mov	sp, r7
 8011016:	b006      	add	sp, #24
 8011018:	bd80      	pop	{r7, pc}
 801101a:	46c0      	nop			@ (mov r8, r8)
 801101c:	00008001 	.word	0x00008001
 8011020:	00008002 	.word	0x00008002
 8011024:	fe00e800 	.word	0xfe00e800
 8011028:	ffffbfff 	.word	0xffffbfff
 801102c:	ffff7fff 	.word	0xffff7fff
 8011030:	ffff0000 	.word	0xffff0000

08011034 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4a26      	ldr	r2, [pc, #152]	@ (80110dc <I2C_ITListenCplt+0xa8>)
 8011042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2200      	movs	r2, #0
 8011048:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2241      	movs	r2, #65	@ 0x41
 801104e:	2120      	movs	r1, #32
 8011050:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2242      	movs	r2, #66	@ 0x42
 8011056:	2100      	movs	r1, #0
 8011058:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2200      	movs	r2, #0
 801105e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	2204      	movs	r2, #4
 8011064:	4013      	ands	r3, r2
 8011066:	d022      	beq.n	80110ae <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011072:	b2d2      	uxtb	r2, r2
 8011074:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801107a:	1c5a      	adds	r2, r3, #1
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011084:	2b00      	cmp	r3, #0
 8011086:	d012      	beq.n	80110ae <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801108c:	3b01      	subs	r3, #1
 801108e:	b29a      	uxth	r2, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011098:	b29b      	uxth	r3, r3
 801109a:	3b01      	subs	r3, #1
 801109c:	b29a      	uxth	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110a6:	2204      	movs	r2, #4
 80110a8:	431a      	orrs	r2, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80110ae:	4a0c      	ldr	r2, [pc, #48]	@ (80110e0 <I2C_ITListenCplt+0xac>)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	0011      	movs	r1, r2
 80110b4:	0018      	movs	r0, r3
 80110b6:	f000 fd55 	bl	8011b64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	2210      	movs	r2, #16
 80110c0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	2240      	movs	r2, #64	@ 0x40
 80110c6:	2100      	movs	r1, #0
 80110c8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	0018      	movs	r0, r3
 80110ce:	f7fe ff28 	bl	800ff22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80110d2:	46c0      	nop			@ (mov r8, r8)
 80110d4:	46bd      	mov	sp, r7
 80110d6:	b002      	add	sp, #8
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	46c0      	nop			@ (mov r8, r8)
 80110dc:	ffff0000 	.word	0xffff0000
 80110e0:	00008003 	.word	0x00008003

080110e4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80110ee:	200f      	movs	r0, #15
 80110f0:	183b      	adds	r3, r7, r0
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	2141      	movs	r1, #65	@ 0x41
 80110f6:	5c52      	ldrb	r2, [r2, r1]
 80110f8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2242      	movs	r2, #66	@ 0x42
 80110fe:	2100      	movs	r1, #0
 8011100:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	4a72      	ldr	r2, [pc, #456]	@ (80112d0 <I2C_ITError+0x1ec>)
 8011106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	431a      	orrs	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801111a:	183b      	adds	r3, r7, r0
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	2b28      	cmp	r3, #40	@ 0x28
 8011120:	d007      	beq.n	8011132 <I2C_ITError+0x4e>
 8011122:	183b      	adds	r3, r7, r0
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	2b29      	cmp	r3, #41	@ 0x29
 8011128:	d003      	beq.n	8011132 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801112a:	183b      	adds	r3, r7, r0
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011130:	d10c      	bne.n	801114c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2103      	movs	r1, #3
 8011136:	0018      	movs	r0, r3
 8011138:	f000 fd14 	bl	8011b64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2241      	movs	r2, #65	@ 0x41
 8011140:	2128      	movs	r1, #40	@ 0x28
 8011142:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4a63      	ldr	r2, [pc, #396]	@ (80112d4 <I2C_ITError+0x1f0>)
 8011148:	635a      	str	r2, [r3, #52]	@ 0x34
 801114a:	e032      	b.n	80111b2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801114c:	4a62      	ldr	r2, [pc, #392]	@ (80112d8 <I2C_ITError+0x1f4>)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	0011      	movs	r1, r2
 8011152:	0018      	movs	r0, r3
 8011154:	f000 fd06 	bl	8011b64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	0018      	movs	r0, r3
 801115c:	f000 f8ed 	bl	801133a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2241      	movs	r2, #65	@ 0x41
 8011164:	5c9b      	ldrb	r3, [r3, r2]
 8011166:	b2db      	uxtb	r3, r3
 8011168:	2b60      	cmp	r3, #96	@ 0x60
 801116a:	d01f      	beq.n	80111ac <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2241      	movs	r2, #65	@ 0x41
 8011170:	2120      	movs	r1, #32
 8011172:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	699b      	ldr	r3, [r3, #24]
 801117a:	2220      	movs	r2, #32
 801117c:	4013      	ands	r3, r2
 801117e:	2b20      	cmp	r3, #32
 8011180:	d114      	bne.n	80111ac <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	699b      	ldr	r3, [r3, #24]
 8011188:	2210      	movs	r2, #16
 801118a:	4013      	ands	r3, r2
 801118c:	2b10      	cmp	r3, #16
 801118e:	d109      	bne.n	80111a4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2210      	movs	r2, #16
 8011196:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801119c:	2204      	movs	r2, #4
 801119e:	431a      	orrs	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2220      	movs	r2, #32
 80111aa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111b6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d03b      	beq.n	8011238 <I2C_ITError+0x154>
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2b11      	cmp	r3, #17
 80111c4:	d002      	beq.n	80111cc <I2C_ITError+0xe8>
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	2b21      	cmp	r3, #33	@ 0x21
 80111ca:	d135      	bne.n	8011238 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	2380      	movs	r3, #128	@ 0x80
 80111d4:	01db      	lsls	r3, r3, #7
 80111d6:	401a      	ands	r2, r3
 80111d8:	2380      	movs	r3, #128	@ 0x80
 80111da:	01db      	lsls	r3, r3, #7
 80111dc:	429a      	cmp	r2, r3
 80111de:	d107      	bne.n	80111f0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	493c      	ldr	r1, [pc, #240]	@ (80112dc <I2C_ITError+0x1f8>)
 80111ec:	400a      	ands	r2, r1
 80111ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111f4:	0018      	movs	r0, r3
 80111f6:	f7fd fd62 	bl	800ecbe <HAL_DMA_GetState>
 80111fa:	0003      	movs	r3, r0
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d016      	beq.n	801122e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011204:	4a36      	ldr	r2, [pc, #216]	@ (80112e0 <I2C_ITError+0x1fc>)
 8011206:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2240      	movs	r2, #64	@ 0x40
 801120c:	2100      	movs	r1, #0
 801120e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011214:	0018      	movs	r0, r3
 8011216:	f7fd fc5d 	bl	800ead4 <HAL_DMA_Abort_IT>
 801121a:	1e03      	subs	r3, r0, #0
 801121c:	d051      	beq.n	80112c2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011228:	0018      	movs	r0, r3
 801122a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801122c:	e049      	b.n	80112c2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	0018      	movs	r0, r3
 8011232:	f000 f859 	bl	80112e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011236:	e044      	b.n	80112c2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801123c:	2b00      	cmp	r3, #0
 801123e:	d03b      	beq.n	80112b8 <I2C_ITError+0x1d4>
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	2b12      	cmp	r3, #18
 8011244:	d002      	beq.n	801124c <I2C_ITError+0x168>
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	2b22      	cmp	r3, #34	@ 0x22
 801124a:	d135      	bne.n	80112b8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	2380      	movs	r3, #128	@ 0x80
 8011254:	021b      	lsls	r3, r3, #8
 8011256:	401a      	ands	r2, r3
 8011258:	2380      	movs	r3, #128	@ 0x80
 801125a:	021b      	lsls	r3, r3, #8
 801125c:	429a      	cmp	r2, r3
 801125e:	d107      	bne.n	8011270 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	681a      	ldr	r2, [r3, #0]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	491e      	ldr	r1, [pc, #120]	@ (80112e4 <I2C_ITError+0x200>)
 801126c:	400a      	ands	r2, r1
 801126e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011274:	0018      	movs	r0, r3
 8011276:	f7fd fd22 	bl	800ecbe <HAL_DMA_GetState>
 801127a:	0003      	movs	r3, r0
 801127c:	2b01      	cmp	r3, #1
 801127e:	d016      	beq.n	80112ae <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011284:	4a16      	ldr	r2, [pc, #88]	@ (80112e0 <I2C_ITError+0x1fc>)
 8011286:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2240      	movs	r2, #64	@ 0x40
 801128c:	2100      	movs	r1, #0
 801128e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011294:	0018      	movs	r0, r3
 8011296:	f7fd fc1d 	bl	800ead4 <HAL_DMA_Abort_IT>
 801129a:	1e03      	subs	r3, r0, #0
 801129c:	d013      	beq.n	80112c6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112a8:	0018      	movs	r0, r3
 80112aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80112ac:	e00b      	b.n	80112c6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	0018      	movs	r0, r3
 80112b2:	f000 f819 	bl	80112e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80112b6:	e006      	b.n	80112c6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	0018      	movs	r0, r3
 80112bc:	f000 f814 	bl	80112e8 <I2C_TreatErrorCallback>
  }
}
 80112c0:	e002      	b.n	80112c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80112c2:	46c0      	nop			@ (mov r8, r8)
 80112c4:	e000      	b.n	80112c8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80112c6:	46c0      	nop			@ (mov r8, r8)
}
 80112c8:	46c0      	nop			@ (mov r8, r8)
 80112ca:	46bd      	mov	sp, r7
 80112cc:	b004      	add	sp, #16
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	ffff0000 	.word	0xffff0000
 80112d4:	080101c9 	.word	0x080101c9
 80112d8:	00008003 	.word	0x00008003
 80112dc:	ffffbfff 	.word	0xffffbfff
 80112e0:	080114f3 	.word	0x080114f3
 80112e4:	ffff7fff 	.word	0xffff7fff

080112e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2241      	movs	r2, #65	@ 0x41
 80112f4:	5c9b      	ldrb	r3, [r3, r2]
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	2b60      	cmp	r3, #96	@ 0x60
 80112fa:	d10f      	bne.n	801131c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2241      	movs	r2, #65	@ 0x41
 8011300:	2120      	movs	r1, #32
 8011302:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2240      	movs	r2, #64	@ 0x40
 801130e:	2100      	movs	r1, #0
 8011310:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	0018      	movs	r0, r3
 8011316:	f7fe fe24 	bl	800ff62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801131a:	e00a      	b.n	8011332 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2240      	movs	r2, #64	@ 0x40
 8011326:	2100      	movs	r1, #0
 8011328:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	0018      	movs	r0, r3
 801132e:	f7fe fe10 	bl	800ff52 <HAL_I2C_ErrorCallback>
}
 8011332:	46c0      	nop			@ (mov r8, r8)
 8011334:	46bd      	mov	sp, r7
 8011336:	b002      	add	sp, #8
 8011338:	bd80      	pop	{r7, pc}

0801133a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801133a:	b580      	push	{r7, lr}
 801133c:	b082      	sub	sp, #8
 801133e:	af00      	add	r7, sp, #0
 8011340:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	699b      	ldr	r3, [r3, #24]
 8011348:	2202      	movs	r2, #2
 801134a:	4013      	ands	r3, r2
 801134c:	2b02      	cmp	r3, #2
 801134e:	d103      	bne.n	8011358 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2200      	movs	r2, #0
 8011356:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	2201      	movs	r2, #1
 8011360:	4013      	ands	r3, r2
 8011362:	2b01      	cmp	r3, #1
 8011364:	d007      	beq.n	8011376 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	699a      	ldr	r2, [r3, #24]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2101      	movs	r1, #1
 8011372:	430a      	orrs	r2, r1
 8011374:	619a      	str	r2, [r3, #24]
  }
}
 8011376:	46c0      	nop			@ (mov r8, r8)
 8011378:	46bd      	mov	sp, r7
 801137a:	b002      	add	sp, #8
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801138c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	4920      	ldr	r1, [pc, #128]	@ (801141c <I2C_DMAMasterTransmitCplt+0x9c>)
 801139a:	400a      	ands	r2, r1
 801139c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d105      	bne.n	80113b4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2120      	movs	r1, #32
 80113ac:	0018      	movs	r0, r3
 80113ae:	f000 fb4b 	bl	8011a48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80113b2:	e02e      	b.n	8011412 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b8:	68fa      	ldr	r2, [r7, #12]
 80113ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80113bc:	189a      	adds	r2, r3, r2
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	2bff      	cmp	r3, #255	@ 0xff
 80113ca:	d903      	bls.n	80113d4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	22ff      	movs	r2, #255	@ 0xff
 80113d0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80113d2:	e004      	b.n	80113de <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113d8:	b29a      	uxth	r2, r3
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113e6:	0019      	movs	r1, r3
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	3328      	adds	r3, #40	@ 0x28
 80113ee:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80113f4:	f7fd fac8 	bl	800e988 <HAL_DMA_Start_IT>
 80113f8:	1e03      	subs	r3, r0, #0
 80113fa:	d005      	beq.n	8011408 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2110      	movs	r1, #16
 8011400:	0018      	movs	r0, r3
 8011402:	f7ff fe6f 	bl	80110e4 <I2C_ITError>
}
 8011406:	e004      	b.n	8011412 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2140      	movs	r1, #64	@ 0x40
 801140c:	0018      	movs	r0, r3
 801140e:	f000 fb1b 	bl	8011a48 <I2C_Enable_IRQ>
}
 8011412:	46c0      	nop			@ (mov r8, r8)
 8011414:	46bd      	mov	sp, r7
 8011416:	b004      	add	sp, #16
 8011418:	bd80      	pop	{r7, pc}
 801141a:	46c0      	nop			@ (mov r8, r8)
 801141c:	ffffbfff 	.word	0xffffbfff

08011420 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801142c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4920      	ldr	r1, [pc, #128]	@ (80114bc <I2C_DMAMasterReceiveCplt+0x9c>)
 801143a:	400a      	ands	r2, r1
 801143c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011442:	b29b      	uxth	r3, r3
 8011444:	2b00      	cmp	r3, #0
 8011446:	d105      	bne.n	8011454 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2120      	movs	r1, #32
 801144c:	0018      	movs	r0, r3
 801144e:	f000 fafb 	bl	8011a48 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8011452:	e02e      	b.n	80114b2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011458:	68fa      	ldr	r2, [r7, #12]
 801145a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801145c:	189a      	adds	r2, r3, r2
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011466:	b29b      	uxth	r3, r3
 8011468:	2bff      	cmp	r3, #255	@ 0xff
 801146a:	d903      	bls.n	8011474 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	22ff      	movs	r2, #255	@ 0xff
 8011470:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011472:	e004      	b.n	801147e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011478:	b29a      	uxth	r2, r3
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	3324      	adds	r3, #36	@ 0x24
 8011488:	0019      	movs	r1, r3
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801148e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011494:	f7fd fa78 	bl	800e988 <HAL_DMA_Start_IT>
 8011498:	1e03      	subs	r3, r0, #0
 801149a:	d005      	beq.n	80114a8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2110      	movs	r1, #16
 80114a0:	0018      	movs	r0, r3
 80114a2:	f7ff fe1f 	bl	80110e4 <I2C_ITError>
}
 80114a6:	e004      	b.n	80114b2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2140      	movs	r1, #64	@ 0x40
 80114ac:	0018      	movs	r0, r3
 80114ae:	f000 facb 	bl	8011a48 <I2C_Enable_IRQ>
}
 80114b2:	46c0      	nop			@ (mov r8, r8)
 80114b4:	46bd      	mov	sp, r7
 80114b6:	b004      	add	sp, #16
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	46c0      	nop			@ (mov r8, r8)
 80114bc:	ffff7fff 	.word	0xffff7fff

080114c0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114cc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	685a      	ldr	r2, [r3, #4]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2180      	movs	r1, #128	@ 0x80
 80114da:	0209      	lsls	r1, r1, #8
 80114dc:	430a      	orrs	r2, r1
 80114de:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2110      	movs	r1, #16
 80114e4:	0018      	movs	r0, r3
 80114e6:	f7ff fdfd 	bl	80110e4 <I2C_ITError>
}
 80114ea:	46c0      	nop			@ (mov r8, r8)
 80114ec:	46bd      	mov	sp, r7
 80114ee:	b004      	add	sp, #16
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b084      	sub	sp, #16
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011504:	2b00      	cmp	r3, #0
 8011506:	d003      	beq.n	8011510 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801150c:	2200      	movs	r2, #0
 801150e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011514:	2b00      	cmp	r3, #0
 8011516:	d003      	beq.n	8011520 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801151c:	2200      	movs	r2, #0
 801151e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	0018      	movs	r0, r3
 8011524:	f7ff fee0 	bl	80112e8 <I2C_TreatErrorCallback>
}
 8011528:	46c0      	nop			@ (mov r8, r8)
 801152a:	46bd      	mov	sp, r7
 801152c:	b004      	add	sp, #16
 801152e:	bd80      	pop	{r7, pc}

08011530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	603b      	str	r3, [r7, #0]
 801153c:	1dfb      	adds	r3, r7, #7
 801153e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011540:	e030      	b.n	80115a4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	3301      	adds	r3, #1
 8011546:	d02d      	beq.n	80115a4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011548:	f7fc fce2 	bl	800df10 <HAL_GetTick>
 801154c:	0002      	movs	r2, r0
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	683a      	ldr	r2, [r7, #0]
 8011554:	429a      	cmp	r2, r3
 8011556:	d302      	bcc.n	801155e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d122      	bne.n	80115a4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	699b      	ldr	r3, [r3, #24]
 8011564:	68ba      	ldr	r2, [r7, #8]
 8011566:	4013      	ands	r3, r2
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	1ad3      	subs	r3, r2, r3
 801156c:	425a      	negs	r2, r3
 801156e:	4153      	adcs	r3, r2
 8011570:	b2db      	uxtb	r3, r3
 8011572:	001a      	movs	r2, r3
 8011574:	1dfb      	adds	r3, r7, #7
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	429a      	cmp	r2, r3
 801157a:	d113      	bne.n	80115a4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011580:	2220      	movs	r2, #32
 8011582:	431a      	orrs	r2, r3
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2241      	movs	r2, #65	@ 0x41
 801158c:	2120      	movs	r1, #32
 801158e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2242      	movs	r2, #66	@ 0x42
 8011594:	2100      	movs	r1, #0
 8011596:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2240      	movs	r2, #64	@ 0x40
 801159c:	2100      	movs	r1, #0
 801159e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80115a0:	2301      	movs	r3, #1
 80115a2:	e00f      	b.n	80115c4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	699b      	ldr	r3, [r3, #24]
 80115aa:	68ba      	ldr	r2, [r7, #8]
 80115ac:	4013      	ands	r3, r2
 80115ae:	68ba      	ldr	r2, [r7, #8]
 80115b0:	1ad3      	subs	r3, r2, r3
 80115b2:	425a      	negs	r2, r3
 80115b4:	4153      	adcs	r3, r2
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	001a      	movs	r2, r3
 80115ba:	1dfb      	adds	r3, r7, #7
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d0bf      	beq.n	8011542 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80115c2:	2300      	movs	r3, #0
}
 80115c4:	0018      	movs	r0, r3
 80115c6:	46bd      	mov	sp, r7
 80115c8:	b004      	add	sp, #16
 80115ca:	bd80      	pop	{r7, pc}

080115cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	60f8      	str	r0, [r7, #12]
 80115d4:	60b9      	str	r1, [r7, #8]
 80115d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80115d8:	e032      	b.n	8011640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	68b9      	ldr	r1, [r7, #8]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	0018      	movs	r0, r3
 80115e2:	f000 f8ff 	bl	80117e4 <I2C_IsErrorOccurred>
 80115e6:	1e03      	subs	r3, r0, #0
 80115e8:	d001      	beq.n	80115ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80115ea:	2301      	movs	r3, #1
 80115ec:	e030      	b.n	8011650 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	3301      	adds	r3, #1
 80115f2:	d025      	beq.n	8011640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115f4:	f7fc fc8c 	bl	800df10 <HAL_GetTick>
 80115f8:	0002      	movs	r2, r0
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	1ad3      	subs	r3, r2, r3
 80115fe:	68ba      	ldr	r2, [r7, #8]
 8011600:	429a      	cmp	r2, r3
 8011602:	d302      	bcc.n	801160a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d11a      	bne.n	8011640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	699b      	ldr	r3, [r3, #24]
 8011610:	2202      	movs	r2, #2
 8011612:	4013      	ands	r3, r2
 8011614:	2b02      	cmp	r3, #2
 8011616:	d013      	beq.n	8011640 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801161c:	2220      	movs	r2, #32
 801161e:	431a      	orrs	r2, r3
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2241      	movs	r2, #65	@ 0x41
 8011628:	2120      	movs	r1, #32
 801162a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2242      	movs	r2, #66	@ 0x42
 8011630:	2100      	movs	r1, #0
 8011632:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	2240      	movs	r2, #64	@ 0x40
 8011638:	2100      	movs	r1, #0
 801163a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801163c:	2301      	movs	r3, #1
 801163e:	e007      	b.n	8011650 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	699b      	ldr	r3, [r3, #24]
 8011646:	2202      	movs	r2, #2
 8011648:	4013      	ands	r3, r2
 801164a:	2b02      	cmp	r3, #2
 801164c:	d1c5      	bne.n	80115da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801164e:	2300      	movs	r3, #0
}
 8011650:	0018      	movs	r0, r3
 8011652:	46bd      	mov	sp, r7
 8011654:	b004      	add	sp, #16
 8011656:	bd80      	pop	{r7, pc}

08011658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
 801165e:	60f8      	str	r0, [r7, #12]
 8011660:	60b9      	str	r1, [r7, #8]
 8011662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011664:	e02f      	b.n	80116c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	68b9      	ldr	r1, [r7, #8]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	0018      	movs	r0, r3
 801166e:	f000 f8b9 	bl	80117e4 <I2C_IsErrorOccurred>
 8011672:	1e03      	subs	r3, r0, #0
 8011674:	d001      	beq.n	801167a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011676:	2301      	movs	r3, #1
 8011678:	e02d      	b.n	80116d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801167a:	f7fc fc49 	bl	800df10 <HAL_GetTick>
 801167e:	0002      	movs	r2, r0
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	429a      	cmp	r2, r3
 8011688:	d302      	bcc.n	8011690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d11a      	bne.n	80116c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	699b      	ldr	r3, [r3, #24]
 8011696:	2220      	movs	r2, #32
 8011698:	4013      	ands	r3, r2
 801169a:	2b20      	cmp	r3, #32
 801169c:	d013      	beq.n	80116c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116a2:	2220      	movs	r2, #32
 80116a4:	431a      	orrs	r2, r3
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2241      	movs	r2, #65	@ 0x41
 80116ae:	2120      	movs	r1, #32
 80116b0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2242      	movs	r2, #66	@ 0x42
 80116b6:	2100      	movs	r1, #0
 80116b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2240      	movs	r2, #64	@ 0x40
 80116be:	2100      	movs	r1, #0
 80116c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80116c2:	2301      	movs	r3, #1
 80116c4:	e007      	b.n	80116d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	699b      	ldr	r3, [r3, #24]
 80116cc:	2220      	movs	r2, #32
 80116ce:	4013      	ands	r3, r2
 80116d0:	2b20      	cmp	r3, #32
 80116d2:	d1c8      	bne.n	8011666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	0018      	movs	r0, r3
 80116d8:	46bd      	mov	sp, r7
 80116da:	b004      	add	sp, #16
 80116dc:	bd80      	pop	{r7, pc}
	...

080116e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80116ec:	e06b      	b.n	80117c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	68b9      	ldr	r1, [r7, #8]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	0018      	movs	r0, r3
 80116f6:	f000 f875 	bl	80117e4 <I2C_IsErrorOccurred>
 80116fa:	1e03      	subs	r3, r0, #0
 80116fc:	d001      	beq.n	8011702 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80116fe:	2301      	movs	r3, #1
 8011700:	e069      	b.n	80117d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	699b      	ldr	r3, [r3, #24]
 8011708:	2220      	movs	r2, #32
 801170a:	4013      	ands	r3, r2
 801170c:	2b20      	cmp	r3, #32
 801170e:	d138      	bne.n	8011782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	699b      	ldr	r3, [r3, #24]
 8011716:	2204      	movs	r2, #4
 8011718:	4013      	ands	r3, r2
 801171a:	2b04      	cmp	r3, #4
 801171c:	d105      	bne.n	801172a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011722:	2b00      	cmp	r3, #0
 8011724:	d001      	beq.n	801172a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	e055      	b.n	80117d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	699b      	ldr	r3, [r3, #24]
 8011730:	2210      	movs	r2, #16
 8011732:	4013      	ands	r3, r2
 8011734:	2b10      	cmp	r3, #16
 8011736:	d107      	bne.n	8011748 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	2210      	movs	r2, #16
 801173e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2204      	movs	r2, #4
 8011744:	645a      	str	r2, [r3, #68]	@ 0x44
 8011746:	e002      	b.n	801174e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	2200      	movs	r2, #0
 801174c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2220      	movs	r2, #32
 8011754:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	685a      	ldr	r2, [r3, #4]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	491f      	ldr	r1, [pc, #124]	@ (80117e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8011762:	400a      	ands	r2, r1
 8011764:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2241      	movs	r2, #65	@ 0x41
 801176a:	2120      	movs	r1, #32
 801176c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2242      	movs	r2, #66	@ 0x42
 8011772:	2100      	movs	r1, #0
 8011774:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	2240      	movs	r2, #64	@ 0x40
 801177a:	2100      	movs	r1, #0
 801177c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801177e:	2301      	movs	r3, #1
 8011780:	e029      	b.n	80117d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011782:	f7fc fbc5 	bl	800df10 <HAL_GetTick>
 8011786:	0002      	movs	r2, r0
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	68ba      	ldr	r2, [r7, #8]
 801178e:	429a      	cmp	r2, r3
 8011790:	d302      	bcc.n	8011798 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d116      	bne.n	80117c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	2204      	movs	r2, #4
 80117a0:	4013      	ands	r3, r2
 80117a2:	2b04      	cmp	r3, #4
 80117a4:	d00f      	beq.n	80117c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117aa:	2220      	movs	r2, #32
 80117ac:	431a      	orrs	r2, r3
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2241      	movs	r2, #65	@ 0x41
 80117b6:	2120      	movs	r1, #32
 80117b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2240      	movs	r2, #64	@ 0x40
 80117be:	2100      	movs	r1, #0
 80117c0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80117c2:	2301      	movs	r3, #1
 80117c4:	e007      	b.n	80117d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	2204      	movs	r2, #4
 80117ce:	4013      	ands	r3, r2
 80117d0:	2b04      	cmp	r3, #4
 80117d2:	d18c      	bne.n	80116ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80117d4:	2300      	movs	r3, #0
}
 80117d6:	0018      	movs	r0, r3
 80117d8:	46bd      	mov	sp, r7
 80117da:	b004      	add	sp, #16
 80117dc:	bd80      	pop	{r7, pc}
 80117de:	46c0      	nop			@ (mov r8, r8)
 80117e0:	fe00e800 	.word	0xfe00e800

080117e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b08a      	sub	sp, #40	@ 0x28
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	60f8      	str	r0, [r7, #12]
 80117ec:	60b9      	str	r1, [r7, #8]
 80117ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80117f0:	2327      	movs	r3, #39	@ 0x27
 80117f2:	18fb      	adds	r3, r7, r3
 80117f4:	2200      	movs	r2, #0
 80117f6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	699b      	ldr	r3, [r3, #24]
 80117fe:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011800:	2300      	movs	r3, #0
 8011802:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	2210      	movs	r2, #16
 801180c:	4013      	ands	r3, r2
 801180e:	d100      	bne.n	8011812 <I2C_IsErrorOccurred+0x2e>
 8011810:	e079      	b.n	8011906 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	2210      	movs	r2, #16
 8011818:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801181a:	e057      	b.n	80118cc <I2C_IsErrorOccurred+0xe8>
 801181c:	2227      	movs	r2, #39	@ 0x27
 801181e:	18bb      	adds	r3, r7, r2
 8011820:	18ba      	adds	r2, r7, r2
 8011822:	7812      	ldrb	r2, [r2, #0]
 8011824:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	3301      	adds	r3, #1
 801182a:	d04f      	beq.n	80118cc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801182c:	f7fc fb70 	bl	800df10 <HAL_GetTick>
 8011830:	0002      	movs	r2, r0
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	68ba      	ldr	r2, [r7, #8]
 8011838:	429a      	cmp	r2, r3
 801183a:	d302      	bcc.n	8011842 <I2C_IsErrorOccurred+0x5e>
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d144      	bne.n	80118cc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	685a      	ldr	r2, [r3, #4]
 8011848:	2380      	movs	r3, #128	@ 0x80
 801184a:	01db      	lsls	r3, r3, #7
 801184c:	4013      	ands	r3, r2
 801184e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011850:	2013      	movs	r0, #19
 8011852:	183b      	adds	r3, r7, r0
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	2142      	movs	r1, #66	@ 0x42
 8011858:	5c52      	ldrb	r2, [r2, r1]
 801185a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	699a      	ldr	r2, [r3, #24]
 8011862:	2380      	movs	r3, #128	@ 0x80
 8011864:	021b      	lsls	r3, r3, #8
 8011866:	401a      	ands	r2, r3
 8011868:	2380      	movs	r3, #128	@ 0x80
 801186a:	021b      	lsls	r3, r3, #8
 801186c:	429a      	cmp	r2, r3
 801186e:	d126      	bne.n	80118be <I2C_IsErrorOccurred+0xda>
 8011870:	697a      	ldr	r2, [r7, #20]
 8011872:	2380      	movs	r3, #128	@ 0x80
 8011874:	01db      	lsls	r3, r3, #7
 8011876:	429a      	cmp	r2, r3
 8011878:	d021      	beq.n	80118be <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 801187a:	183b      	adds	r3, r7, r0
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	2b20      	cmp	r3, #32
 8011880:	d01d      	beq.n	80118be <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	685a      	ldr	r2, [r3, #4]
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2180      	movs	r1, #128	@ 0x80
 801188e:	01c9      	lsls	r1, r1, #7
 8011890:	430a      	orrs	r2, r1
 8011892:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011894:	f7fc fb3c 	bl	800df10 <HAL_GetTick>
 8011898:	0003      	movs	r3, r0
 801189a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801189c:	e00f      	b.n	80118be <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801189e:	f7fc fb37 	bl	800df10 <HAL_GetTick>
 80118a2:	0002      	movs	r2, r0
 80118a4:	69fb      	ldr	r3, [r7, #28]
 80118a6:	1ad3      	subs	r3, r2, r3
 80118a8:	2b19      	cmp	r3, #25
 80118aa:	d908      	bls.n	80118be <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80118ac:	6a3b      	ldr	r3, [r7, #32]
 80118ae:	2220      	movs	r2, #32
 80118b0:	4313      	orrs	r3, r2
 80118b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80118b4:	2327      	movs	r3, #39	@ 0x27
 80118b6:	18fb      	adds	r3, r7, r3
 80118b8:	2201      	movs	r2, #1
 80118ba:	701a      	strb	r2, [r3, #0]

              break;
 80118bc:	e006      	b.n	80118cc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	699b      	ldr	r3, [r3, #24]
 80118c4:	2220      	movs	r2, #32
 80118c6:	4013      	ands	r3, r2
 80118c8:	2b20      	cmp	r3, #32
 80118ca:	d1e8      	bne.n	801189e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	699b      	ldr	r3, [r3, #24]
 80118d2:	2220      	movs	r2, #32
 80118d4:	4013      	ands	r3, r2
 80118d6:	2b20      	cmp	r3, #32
 80118d8:	d004      	beq.n	80118e4 <I2C_IsErrorOccurred+0x100>
 80118da:	2327      	movs	r3, #39	@ 0x27
 80118dc:	18fb      	adds	r3, r7, r3
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d09b      	beq.n	801181c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80118e4:	2327      	movs	r3, #39	@ 0x27
 80118e6:	18fb      	adds	r3, r7, r3
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d103      	bne.n	80118f6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2220      	movs	r2, #32
 80118f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80118f6:	6a3b      	ldr	r3, [r7, #32]
 80118f8:	2204      	movs	r2, #4
 80118fa:	4313      	orrs	r3, r2
 80118fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80118fe:	2327      	movs	r3, #39	@ 0x27
 8011900:	18fb      	adds	r3, r7, r3
 8011902:	2201      	movs	r2, #1
 8011904:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	699b      	ldr	r3, [r3, #24]
 801190c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801190e:	69ba      	ldr	r2, [r7, #24]
 8011910:	2380      	movs	r3, #128	@ 0x80
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	4013      	ands	r3, r2
 8011916:	d00c      	beq.n	8011932 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	2201      	movs	r2, #1
 801191c:	4313      	orrs	r3, r2
 801191e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2280      	movs	r2, #128	@ 0x80
 8011926:	0052      	lsls	r2, r2, #1
 8011928:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801192a:	2327      	movs	r3, #39	@ 0x27
 801192c:	18fb      	adds	r3, r7, r3
 801192e:	2201      	movs	r2, #1
 8011930:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011932:	69ba      	ldr	r2, [r7, #24]
 8011934:	2380      	movs	r3, #128	@ 0x80
 8011936:	00db      	lsls	r3, r3, #3
 8011938:	4013      	ands	r3, r2
 801193a:	d00c      	beq.n	8011956 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801193c:	6a3b      	ldr	r3, [r7, #32]
 801193e:	2208      	movs	r2, #8
 8011940:	4313      	orrs	r3, r2
 8011942:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2280      	movs	r2, #128	@ 0x80
 801194a:	00d2      	lsls	r2, r2, #3
 801194c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801194e:	2327      	movs	r3, #39	@ 0x27
 8011950:	18fb      	adds	r3, r7, r3
 8011952:	2201      	movs	r2, #1
 8011954:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011956:	69ba      	ldr	r2, [r7, #24]
 8011958:	2380      	movs	r3, #128	@ 0x80
 801195a:	009b      	lsls	r3, r3, #2
 801195c:	4013      	ands	r3, r2
 801195e:	d00c      	beq.n	801197a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	2202      	movs	r2, #2
 8011964:	4313      	orrs	r3, r2
 8011966:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2280      	movs	r2, #128	@ 0x80
 801196e:	0092      	lsls	r2, r2, #2
 8011970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011972:	2327      	movs	r3, #39	@ 0x27
 8011974:	18fb      	adds	r3, r7, r3
 8011976:	2201      	movs	r2, #1
 8011978:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 801197a:	2327      	movs	r3, #39	@ 0x27
 801197c:	18fb      	adds	r3, r7, r3
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d01d      	beq.n	80119c0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	0018      	movs	r0, r3
 8011988:	f7ff fcd7 	bl	801133a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	685a      	ldr	r2, [r3, #4]
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	490e      	ldr	r1, [pc, #56]	@ (80119d0 <I2C_IsErrorOccurred+0x1ec>)
 8011998:	400a      	ands	r2, r1
 801199a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80119a0:	6a3b      	ldr	r3, [r7, #32]
 80119a2:	431a      	orrs	r2, r3
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2241      	movs	r2, #65	@ 0x41
 80119ac:	2120      	movs	r1, #32
 80119ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2242      	movs	r2, #66	@ 0x42
 80119b4:	2100      	movs	r1, #0
 80119b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2240      	movs	r2, #64	@ 0x40
 80119bc:	2100      	movs	r1, #0
 80119be:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80119c0:	2327      	movs	r3, #39	@ 0x27
 80119c2:	18fb      	adds	r3, r7, r3
 80119c4:	781b      	ldrb	r3, [r3, #0]
}
 80119c6:	0018      	movs	r0, r3
 80119c8:	46bd      	mov	sp, r7
 80119ca:	b00a      	add	sp, #40	@ 0x28
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	46c0      	nop			@ (mov r8, r8)
 80119d0:	fe00e800 	.word	0xfe00e800

080119d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80119d4:	b590      	push	{r4, r7, lr}
 80119d6:	b087      	sub	sp, #28
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	0008      	movs	r0, r1
 80119de:	0011      	movs	r1, r2
 80119e0:	607b      	str	r3, [r7, #4]
 80119e2:	240a      	movs	r4, #10
 80119e4:	193b      	adds	r3, r7, r4
 80119e6:	1c02      	adds	r2, r0, #0
 80119e8:	801a      	strh	r2, [r3, #0]
 80119ea:	2009      	movs	r0, #9
 80119ec:	183b      	adds	r3, r7, r0
 80119ee:	1c0a      	adds	r2, r1, #0
 80119f0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80119f2:	193b      	adds	r3, r7, r4
 80119f4:	881b      	ldrh	r3, [r3, #0]
 80119f6:	059b      	lsls	r3, r3, #22
 80119f8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80119fa:	183b      	adds	r3, r7, r0
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	0419      	lsls	r1, r3, #16
 8011a00:	23ff      	movs	r3, #255	@ 0xff
 8011a02:	041b      	lsls	r3, r3, #16
 8011a04:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011a06:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a0e:	4313      	orrs	r3, r2
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	085b      	lsrs	r3, r3, #1
 8011a14:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a1e:	0d51      	lsrs	r1, r2, #21
 8011a20:	2280      	movs	r2, #128	@ 0x80
 8011a22:	00d2      	lsls	r2, r2, #3
 8011a24:	400a      	ands	r2, r1
 8011a26:	4907      	ldr	r1, [pc, #28]	@ (8011a44 <I2C_TransferConfig+0x70>)
 8011a28:	430a      	orrs	r2, r1
 8011a2a:	43d2      	mvns	r2, r2
 8011a2c:	401a      	ands	r2, r3
 8011a2e:	0011      	movs	r1, r2
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	697a      	ldr	r2, [r7, #20]
 8011a36:	430a      	orrs	r2, r1
 8011a38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011a3a:	46c0      	nop			@ (mov r8, r8)
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	b007      	add	sp, #28
 8011a40:	bd90      	pop	{r4, r7, pc}
 8011a42:	46c0      	nop			@ (mov r8, r8)
 8011a44:	03ff63ff 	.word	0x03ff63ff

08011a48 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	000a      	movs	r2, r1
 8011a52:	1cbb      	adds	r3, r7, #2
 8011a54:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011a56:	2300      	movs	r3, #0
 8011a58:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8011b58 <I2C_Enable_IRQ+0x110>)
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d035      	beq.n	8011ad0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011a68:	4b3c      	ldr	r3, [pc, #240]	@ (8011b5c <I2C_Enable_IRQ+0x114>)
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d030      	beq.n	8011ad0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011a72:	4b3b      	ldr	r3, [pc, #236]	@ (8011b60 <I2C_Enable_IRQ+0x118>)
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d02b      	beq.n	8011ad0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011a78:	1cbb      	adds	r3, r7, #2
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	5e9b      	ldrsh	r3, [r3, r2]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	da03      	bge.n	8011a8a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	22b8      	movs	r2, #184	@ 0xb8
 8011a86:	4313      	orrs	r3, r2
 8011a88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011a8a:	1cbb      	adds	r3, r7, #2
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	4013      	ands	r3, r2
 8011a92:	d003      	beq.n	8011a9c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	22f2      	movs	r2, #242	@ 0xf2
 8011a98:	4313      	orrs	r3, r2
 8011a9a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011a9c:	1cbb      	adds	r3, r7, #2
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	2202      	movs	r2, #2
 8011aa2:	4013      	ands	r3, r2
 8011aa4:	d003      	beq.n	8011aae <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	22f4      	movs	r2, #244	@ 0xf4
 8011aaa:	4313      	orrs	r3, r2
 8011aac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011aae:	1cbb      	adds	r3, r7, #2
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	2b10      	cmp	r3, #16
 8011ab4:	d103      	bne.n	8011abe <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2290      	movs	r2, #144	@ 0x90
 8011aba:	4313      	orrs	r3, r2
 8011abc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011abe:	1cbb      	adds	r3, r7, #2
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	2b20      	cmp	r3, #32
 8011ac4:	d13c      	bne.n	8011b40 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	2220      	movs	r2, #32
 8011aca:	4313      	orrs	r3, r2
 8011acc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011ace:	e037      	b.n	8011b40 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011ad0:	1cbb      	adds	r3, r7, #2
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	5e9b      	ldrsh	r3, [r3, r2]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	da03      	bge.n	8011ae2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	22b8      	movs	r2, #184	@ 0xb8
 8011ade:	4313      	orrs	r3, r2
 8011ae0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011ae2:	1cbb      	adds	r3, r7, #2
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	4013      	ands	r3, r2
 8011aea:	d003      	beq.n	8011af4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	22f2      	movs	r2, #242	@ 0xf2
 8011af0:	4313      	orrs	r3, r2
 8011af2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011af4:	1cbb      	adds	r3, r7, #2
 8011af6:	881b      	ldrh	r3, [r3, #0]
 8011af8:	2202      	movs	r2, #2
 8011afa:	4013      	ands	r3, r2
 8011afc:	d003      	beq.n	8011b06 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	22f4      	movs	r2, #244	@ 0xf4
 8011b02:	4313      	orrs	r3, r2
 8011b04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011b06:	1cbb      	adds	r3, r7, #2
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	2b10      	cmp	r3, #16
 8011b0c:	d103      	bne.n	8011b16 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	2290      	movs	r2, #144	@ 0x90
 8011b12:	4313      	orrs	r3, r2
 8011b14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011b16:	1cbb      	adds	r3, r7, #2
 8011b18:	881b      	ldrh	r3, [r3, #0]
 8011b1a:	2b20      	cmp	r3, #32
 8011b1c:	d103      	bne.n	8011b26 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2260      	movs	r2, #96	@ 0x60
 8011b22:	4313      	orrs	r3, r2
 8011b24:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011b60 <I2C_Enable_IRQ+0x118>)
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d007      	beq.n	8011b40 <I2C_Enable_IRQ+0xf8>
 8011b30:	1cbb      	adds	r3, r7, #2
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	2b40      	cmp	r3, #64	@ 0x40
 8011b36:	d103      	bne.n	8011b40 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2240      	movs	r2, #64	@ 0x40
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	6819      	ldr	r1, [r3, #0]
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	430a      	orrs	r2, r1
 8011b4e:	601a      	str	r2, [r3, #0]
}
 8011b50:	46c0      	nop			@ (mov r8, r8)
 8011b52:	46bd      	mov	sp, r7
 8011b54:	b004      	add	sp, #16
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	080103c9 	.word	0x080103c9
 8011b5c:	080107f9 	.word	0x080107f9
 8011b60:	080105c1 	.word	0x080105c1

08011b64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	000a      	movs	r2, r1
 8011b6e:	1cbb      	adds	r3, r7, #2
 8011b70:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011b72:	2300      	movs	r3, #0
 8011b74:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011b76:	1cbb      	adds	r3, r7, #2
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	4013      	ands	r3, r2
 8011b7e:	d010      	beq.n	8011ba2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2242      	movs	r2, #66	@ 0x42
 8011b84:	4313      	orrs	r3, r2
 8011b86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2241      	movs	r2, #65	@ 0x41
 8011b8c:	5c9b      	ldrb	r3, [r3, r2]
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	001a      	movs	r2, r3
 8011b92:	2328      	movs	r3, #40	@ 0x28
 8011b94:	4013      	ands	r3, r2
 8011b96:	2b28      	cmp	r3, #40	@ 0x28
 8011b98:	d003      	beq.n	8011ba2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	22b0      	movs	r2, #176	@ 0xb0
 8011b9e:	4313      	orrs	r3, r2
 8011ba0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011ba2:	1cbb      	adds	r3, r7, #2
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	2202      	movs	r2, #2
 8011ba8:	4013      	ands	r3, r2
 8011baa:	d010      	beq.n	8011bce <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2244      	movs	r2, #68	@ 0x44
 8011bb0:	4313      	orrs	r3, r2
 8011bb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2241      	movs	r2, #65	@ 0x41
 8011bb8:	5c9b      	ldrb	r3, [r3, r2]
 8011bba:	b2db      	uxtb	r3, r3
 8011bbc:	001a      	movs	r2, r3
 8011bbe:	2328      	movs	r3, #40	@ 0x28
 8011bc0:	4013      	ands	r3, r2
 8011bc2:	2b28      	cmp	r3, #40	@ 0x28
 8011bc4:	d003      	beq.n	8011bce <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	22b0      	movs	r2, #176	@ 0xb0
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011bce:	1cbb      	adds	r3, r7, #2
 8011bd0:	2200      	movs	r2, #0
 8011bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	da03      	bge.n	8011be0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	22b8      	movs	r2, #184	@ 0xb8
 8011bdc:	4313      	orrs	r3, r2
 8011bde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011be0:	1cbb      	adds	r3, r7, #2
 8011be2:	881b      	ldrh	r3, [r3, #0]
 8011be4:	2b10      	cmp	r3, #16
 8011be6:	d103      	bne.n	8011bf0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2290      	movs	r2, #144	@ 0x90
 8011bec:	4313      	orrs	r3, r2
 8011bee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011bf0:	1cbb      	adds	r3, r7, #2
 8011bf2:	881b      	ldrh	r3, [r3, #0]
 8011bf4:	2b20      	cmp	r3, #32
 8011bf6:	d103      	bne.n	8011c00 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2220      	movs	r2, #32
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011c00:	1cbb      	adds	r3, r7, #2
 8011c02:	881b      	ldrh	r3, [r3, #0]
 8011c04:	2b40      	cmp	r3, #64	@ 0x40
 8011c06:	d103      	bne.n	8011c10 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2240      	movs	r2, #64	@ 0x40
 8011c0c:	4313      	orrs	r3, r2
 8011c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	681a      	ldr	r2, [r3, #0]
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	43d9      	mvns	r1, r3
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	400a      	ands	r2, r1
 8011c20:	601a      	str	r2, [r3, #0]
}
 8011c22:	46c0      	nop			@ (mov r8, r8)
 8011c24:	46bd      	mov	sp, r7
 8011c26:	b004      	add	sp, #16
 8011c28:	bd80      	pop	{r7, pc}
	...

08011c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b082      	sub	sp, #8
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2241      	movs	r2, #65	@ 0x41
 8011c3a:	5c9b      	ldrb	r3, [r3, r2]
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b20      	cmp	r3, #32
 8011c40:	d138      	bne.n	8011cb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2240      	movs	r2, #64	@ 0x40
 8011c46:	5c9b      	ldrb	r3, [r3, r2]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d101      	bne.n	8011c50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011c4c:	2302      	movs	r3, #2
 8011c4e:	e032      	b.n	8011cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2240      	movs	r2, #64	@ 0x40
 8011c54:	2101      	movs	r1, #1
 8011c56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2241      	movs	r2, #65	@ 0x41
 8011c5c:	2124      	movs	r1, #36	@ 0x24
 8011c5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	681a      	ldr	r2, [r3, #0]
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	2101      	movs	r1, #1
 8011c6c:	438a      	bics	r2, r1
 8011c6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4911      	ldr	r1, [pc, #68]	@ (8011cc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8011c7c:	400a      	ands	r2, r1
 8011c7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	6819      	ldr	r1, [r3, #0]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	683a      	ldr	r2, [r7, #0]
 8011c8c:	430a      	orrs	r2, r1
 8011c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	681a      	ldr	r2, [r3, #0]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2101      	movs	r1, #1
 8011c9c:	430a      	orrs	r2, r1
 8011c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2241      	movs	r2, #65	@ 0x41
 8011ca4:	2120      	movs	r1, #32
 8011ca6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2240      	movs	r2, #64	@ 0x40
 8011cac:	2100      	movs	r1, #0
 8011cae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	e000      	b.n	8011cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011cb4:	2302      	movs	r3, #2
  }
}
 8011cb6:	0018      	movs	r0, r3
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	b002      	add	sp, #8
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	46c0      	nop			@ (mov r8, r8)
 8011cc0:	ffffefff 	.word	0xffffefff

08011cc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2241      	movs	r2, #65	@ 0x41
 8011cd2:	5c9b      	ldrb	r3, [r3, r2]
 8011cd4:	b2db      	uxtb	r3, r3
 8011cd6:	2b20      	cmp	r3, #32
 8011cd8:	d139      	bne.n	8011d4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2240      	movs	r2, #64	@ 0x40
 8011cde:	5c9b      	ldrb	r3, [r3, r2]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d101      	bne.n	8011ce8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011ce4:	2302      	movs	r3, #2
 8011ce6:	e033      	b.n	8011d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	2240      	movs	r2, #64	@ 0x40
 8011cec:	2101      	movs	r1, #1
 8011cee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2241      	movs	r2, #65	@ 0x41
 8011cf4:	2124      	movs	r1, #36	@ 0x24
 8011cf6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2101      	movs	r1, #1
 8011d04:	438a      	bics	r2, r1
 8011d06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	4a11      	ldr	r2, [pc, #68]	@ (8011d58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8011d14:	4013      	ands	r3, r2
 8011d16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	021b      	lsls	r3, r3, #8
 8011d1c:	68fa      	ldr	r2, [r7, #12]
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	2101      	movs	r1, #1
 8011d36:	430a      	orrs	r2, r1
 8011d38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2241      	movs	r2, #65	@ 0x41
 8011d3e:	2120      	movs	r1, #32
 8011d40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2240      	movs	r2, #64	@ 0x40
 8011d46:	2100      	movs	r1, #0
 8011d48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	e000      	b.n	8011d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011d4e:	2302      	movs	r3, #2
  }
}
 8011d50:	0018      	movs	r0, r3
 8011d52:	46bd      	mov	sp, r7
 8011d54:	b004      	add	sp, #16
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	fffff0ff 	.word	0xfffff0ff

08011d5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b088      	sub	sp, #32
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d101      	bne.n	8011d6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	e0e1      	b.n	8011f32 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2235      	movs	r2, #53	@ 0x35
 8011d72:	5c9b      	ldrb	r3, [r3, r2]
 8011d74:	b2db      	uxtb	r3, r3
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d107      	bne.n	8011d8a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2234      	movs	r2, #52	@ 0x34
 8011d7e:	2100      	movs	r1, #0
 8011d80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	0018      	movs	r0, r3
 8011d86:	f7f5 fd17 	bl	80077b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2235      	movs	r2, #53	@ 0x35
 8011d8e:	2102      	movs	r1, #2
 8011d90:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	69da      	ldr	r2, [r3, #28]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4967      	ldr	r1, [pc, #412]	@ (8011f3c <HAL_I2S_Init+0x1e0>)
 8011d9e:	400a      	ands	r2, r1
 8011da0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	2202      	movs	r2, #2
 8011da8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	695b      	ldr	r3, [r3, #20]
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d073      	beq.n	8011e9a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	68db      	ldr	r3, [r3, #12]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d102      	bne.n	8011dc0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011dba:	2310      	movs	r3, #16
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	e001      	b.n	8011dc4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011dc0:	2320      	movs	r3, #32
 8011dc2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	2b20      	cmp	r3, #32
 8011dca:	d802      	bhi.n	8011dd2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	005b      	lsls	r3, r3, #1
 8011dd0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8011dd2:	f002 fec3 	bl	8014b5c <HAL_RCC_GetSysClockFreq>
 8011dd6:	0003      	movs	r3, r0
 8011dd8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	691a      	ldr	r2, [r3, #16]
 8011dde:	2380      	movs	r3, #128	@ 0x80
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d131      	bne.n	8011e4a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	68db      	ldr	r3, [r3, #12]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d016      	beq.n	8011e1c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	0019      	movs	r1, r3
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f7ee f9d5 	bl	80001a4 <__udivsi3>
 8011dfa:	0003      	movs	r3, r0
 8011dfc:	001a      	movs	r2, r3
 8011dfe:	0013      	movs	r3, r2
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	189b      	adds	r3, r3, r2
 8011e04:	005b      	lsls	r3, r3, #1
 8011e06:	001a      	movs	r2, r3
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	695b      	ldr	r3, [r3, #20]
 8011e0c:	0019      	movs	r1, r3
 8011e0e:	0010      	movs	r0, r2
 8011e10:	f7ee f9c8 	bl	80001a4 <__udivsi3>
 8011e14:	0003      	movs	r3, r0
 8011e16:	3305      	adds	r3, #5
 8011e18:	613b      	str	r3, [r7, #16]
 8011e1a:	e02a      	b.n	8011e72 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	00db      	lsls	r3, r3, #3
 8011e20:	0019      	movs	r1, r3
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	f7ee f9be 	bl	80001a4 <__udivsi3>
 8011e28:	0003      	movs	r3, r0
 8011e2a:	001a      	movs	r2, r3
 8011e2c:	0013      	movs	r3, r2
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	189b      	adds	r3, r3, r2
 8011e32:	005b      	lsls	r3, r3, #1
 8011e34:	001a      	movs	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	695b      	ldr	r3, [r3, #20]
 8011e3a:	0019      	movs	r1, r3
 8011e3c:	0010      	movs	r0, r2
 8011e3e:	f7ee f9b1 	bl	80001a4 <__udivsi3>
 8011e42:	0003      	movs	r3, r0
 8011e44:	3305      	adds	r3, #5
 8011e46:	613b      	str	r3, [r7, #16]
 8011e48:	e013      	b.n	8011e72 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011e4a:	6979      	ldr	r1, [r7, #20]
 8011e4c:	68f8      	ldr	r0, [r7, #12]
 8011e4e:	f7ee f9a9 	bl	80001a4 <__udivsi3>
 8011e52:	0003      	movs	r3, r0
 8011e54:	001a      	movs	r2, r3
 8011e56:	0013      	movs	r3, r2
 8011e58:	009b      	lsls	r3, r3, #2
 8011e5a:	189b      	adds	r3, r3, r2
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	001a      	movs	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	695b      	ldr	r3, [r3, #20]
 8011e64:	0019      	movs	r1, r3
 8011e66:	0010      	movs	r0, r2
 8011e68:	f7ee f99c 	bl	80001a4 <__udivsi3>
 8011e6c:	0003      	movs	r3, r0
 8011e6e:	3305      	adds	r3, #5
 8011e70:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	210a      	movs	r1, #10
 8011e76:	0018      	movs	r0, r3
 8011e78:	f7ee f994 	bl	80001a4 <__udivsi3>
 8011e7c:	0003      	movs	r3, r0
 8011e7e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	2201      	movs	r2, #1
 8011e84:	4013      	ands	r3, r2
 8011e86:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8011e88:	693a      	ldr	r2, [r7, #16]
 8011e8a:	69bb      	ldr	r3, [r7, #24]
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	085b      	lsrs	r3, r3, #1
 8011e90:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	021b      	lsls	r3, r3, #8
 8011e96:	61bb      	str	r3, [r7, #24]
 8011e98:	e003      	b.n	8011ea2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8011e9a:	2302      	movs	r3, #2
 8011e9c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d902      	bls.n	8011eae <HAL_I2S_Init+0x152>
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	2bff      	cmp	r3, #255	@ 0xff
 8011eac:	d907      	bls.n	8011ebe <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eb2:	2210      	movs	r2, #16
 8011eb4:	431a      	orrs	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e039      	b.n	8011f32 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	691a      	ldr	r2, [r3, #16]
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	431a      	orrs	r2, r3
 8011ec6:	0011      	movs	r1, r2
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	69fa      	ldr	r2, [r7, #28]
 8011ece:	430a      	orrs	r2, r1
 8011ed0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	69db      	ldr	r3, [r3, #28]
 8011ed8:	4a18      	ldr	r2, [pc, #96]	@ (8011f3c <HAL_I2S_Init+0x1e0>)
 8011eda:	401a      	ands	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6859      	ldr	r1, [r3, #4]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	4319      	orrs	r1, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	4319      	orrs	r1, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	699b      	ldr	r3, [r3, #24]
 8011ef0:	430b      	orrs	r3, r1
 8011ef2:	431a      	orrs	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2180      	movs	r1, #128	@ 0x80
 8011efa:	0109      	lsls	r1, r1, #4
 8011efc:	430a      	orrs	r2, r1
 8011efe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	2b30      	cmp	r3, #48	@ 0x30
 8011f06:	d003      	beq.n	8011f10 <HAL_I2S_Init+0x1b4>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	689b      	ldr	r3, [r3, #8]
 8011f0c:	2bb0      	cmp	r3, #176	@ 0xb0
 8011f0e:	d108      	bne.n	8011f22 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	69da      	ldr	r2, [r3, #28]
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2180      	movs	r1, #128	@ 0x80
 8011f1c:	0149      	lsls	r1, r1, #5
 8011f1e:	430a      	orrs	r2, r1
 8011f20:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2200      	movs	r2, #0
 8011f26:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2235      	movs	r2, #53	@ 0x35
 8011f2c:	2101      	movs	r1, #1
 8011f2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	0018      	movs	r0, r3
 8011f34:	46bd      	mov	sp, r7
 8011f36:	b008      	add	sp, #32
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	46c0      	nop			@ (mov r8, r8)
 8011f3c:	fffff040 	.word	0xfffff040

08011f40 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b086      	sub	sp, #24
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	1dbb      	adds	r3, r7, #6
 8011f4c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d003      	beq.n	8011f5c <HAL_I2S_Receive_DMA+0x1c>
 8011f54:	1dbb      	adds	r3, r7, #6
 8011f56:	881b      	ldrh	r3, [r3, #0]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d101      	bne.n	8011f60 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	e0a6      	b.n	80120ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2234      	movs	r2, #52	@ 0x34
 8011f64:	5c9b      	ldrb	r3, [r3, r2]
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d101      	bne.n	8011f70 <HAL_I2S_Receive_DMA+0x30>
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	e09e      	b.n	80120ae <HAL_I2S_Receive_DMA+0x16e>
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2234      	movs	r2, #52	@ 0x34
 8011f74:	2101      	movs	r1, #1
 8011f76:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	2235      	movs	r2, #53	@ 0x35
 8011f7c:	5c9b      	ldrb	r3, [r3, r2]
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d005      	beq.n	8011f90 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2234      	movs	r2, #52	@ 0x34
 8011f88:	2100      	movs	r1, #0
 8011f8a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8011f8c:	2302      	movs	r3, #2
 8011f8e:	e08e      	b.n	80120ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2235      	movs	r2, #53	@ 0x35
 8011f94:	2104      	movs	r1, #4
 8011f96:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	69db      	ldr	r3, [r3, #28]
 8011faa:	2207      	movs	r2, #7
 8011fac:	4013      	ands	r3, r2
 8011fae:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	2b03      	cmp	r3, #3
 8011fb4:	d002      	beq.n	8011fbc <HAL_I2S_Receive_DMA+0x7c>
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	2b05      	cmp	r3, #5
 8011fba:	d10c      	bne.n	8011fd6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8011fbc:	1dbb      	adds	r3, r7, #6
 8011fbe:	881b      	ldrh	r3, [r3, #0]
 8011fc0:	18db      	adds	r3, r3, r3
 8011fc2:	b29a      	uxth	r2, r3
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8011fc8:	1dbb      	adds	r3, r7, #6
 8011fca:	881b      	ldrh	r3, [r3, #0]
 8011fcc:	18db      	adds	r3, r3, r3
 8011fce:	b29a      	uxth	r2, r3
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011fd4:	e007      	b.n	8011fe6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	1dba      	adds	r2, r7, #6
 8011fda:	8812      	ldrh	r2, [r2, #0]
 8011fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	1dba      	adds	r2, r7, #6
 8011fe2:	8812      	ldrh	r2, [r2, #0]
 8011fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fea:	4a33      	ldr	r2, [pc, #204]	@ (80120b8 <HAL_I2S_Receive_DMA+0x178>)
 8011fec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ff2:	4a32      	ldr	r2, [pc, #200]	@ (80120bc <HAL_I2S_Receive_DMA+0x17c>)
 8011ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ffa:	4a31      	ldr	r2, [pc, #196]	@ (80120c0 <HAL_I2S_Receive_DMA+0x180>)
 8011ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	69da      	ldr	r2, [r3, #28]
 8012004:	23c0      	movs	r3, #192	@ 0xc0
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	401a      	ands	r2, r3
 801200a:	23c0      	movs	r3, #192	@ 0xc0
 801200c:	009b      	lsls	r3, r3, #2
 801200e:	429a      	cmp	r2, r3
 8012010:	d10a      	bne.n	8012028 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012012:	2300      	movs	r3, #0
 8012014:	613b      	str	r3, [r7, #16]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	68db      	ldr	r3, [r3, #12]
 801201c:	613b      	str	r3, [r7, #16]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	613b      	str	r3, [r7, #16]
 8012026:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	330c      	adds	r3, #12
 8012032:	0019      	movs	r1, r3
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012038:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801203e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012040:	f7fc fca2 	bl	800e988 <HAL_DMA_Start_IT>
 8012044:	1e03      	subs	r3, r0, #0
 8012046:	d00f      	beq.n	8012068 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801204c:	2208      	movs	r2, #8
 801204e:	431a      	orrs	r2, r3
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	2235      	movs	r2, #53	@ 0x35
 8012058:	2101      	movs	r1, #1
 801205a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	2234      	movs	r2, #52	@ 0x34
 8012060:	2100      	movs	r1, #0
 8012062:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012064:	2301      	movs	r3, #1
 8012066:	e022      	b.n	80120ae <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	69da      	ldr	r2, [r3, #28]
 801206e:	2380      	movs	r3, #128	@ 0x80
 8012070:	00db      	lsls	r3, r3, #3
 8012072:	4013      	ands	r3, r2
 8012074:	d108      	bne.n	8012088 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	69da      	ldr	r2, [r3, #28]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2180      	movs	r1, #128	@ 0x80
 8012082:	00c9      	lsls	r1, r1, #3
 8012084:	430a      	orrs	r2, r1
 8012086:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	685b      	ldr	r3, [r3, #4]
 801208e:	2201      	movs	r2, #1
 8012090:	4013      	ands	r3, r2
 8012092:	d107      	bne.n	80120a4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	685a      	ldr	r2, [r3, #4]
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2101      	movs	r1, #1
 80120a0:	430a      	orrs	r2, r1
 80120a2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2234      	movs	r2, #52	@ 0x34
 80120a8:	2100      	movs	r1, #0
 80120aa:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80120ac:	2300      	movs	r3, #0
}
 80120ae:	0018      	movs	r0, r3
 80120b0:	46bd      	mov	sp, r7
 80120b2:	b006      	add	sp, #24
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	46c0      	nop			@ (mov r8, r8)
 80120b8:	080122a1 	.word	0x080122a1
 80120bc:	0801225d 	.word	0x0801225d
 80120c0:	080122bf 	.word	0x080122bf

080120c4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b086      	sub	sp, #24
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80120cc:	2317      	movs	r3, #23
 80120ce:	18fb      	adds	r3, r7, r3
 80120d0:	2200      	movs	r2, #0
 80120d2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	685a      	ldr	r2, [r3, #4]
 80120d8:	2380      	movs	r3, #128	@ 0x80
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	429a      	cmp	r2, r3
 80120de:	d003      	beq.n	80120e8 <HAL_I2S_DMAStop+0x24>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d158      	bne.n	801219a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d010      	beq.n	8012112 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120f4:	0018      	movs	r0, r3
 80120f6:	f7fc fcad 	bl	800ea54 <HAL_DMA_Abort>
 80120fa:	1e03      	subs	r3, r0, #0
 80120fc:	d009      	beq.n	8012112 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012102:	2208      	movs	r2, #8
 8012104:	431a      	orrs	r2, r3
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801210a:	2317      	movs	r3, #23
 801210c:	18fb      	adds	r3, r7, r3
 801210e:	2201      	movs	r2, #1
 8012110:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	2364      	movs	r3, #100	@ 0x64
 8012116:	2201      	movs	r2, #1
 8012118:	2102      	movs	r1, #2
 801211a:	f000 f8f7 	bl	801230c <I2S_WaitFlagStateUntilTimeout>
 801211e:	1e03      	subs	r3, r0, #0
 8012120:	d00d      	beq.n	801213e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012126:	2201      	movs	r2, #1
 8012128:	431a      	orrs	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2235      	movs	r2, #53	@ 0x35
 8012132:	2101      	movs	r1, #1
 8012134:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012136:	2317      	movs	r3, #23
 8012138:	18fb      	adds	r3, r7, r3
 801213a:	2201      	movs	r2, #1
 801213c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	2364      	movs	r3, #100	@ 0x64
 8012142:	2200      	movs	r2, #0
 8012144:	2180      	movs	r1, #128	@ 0x80
 8012146:	f000 f8e1 	bl	801230c <I2S_WaitFlagStateUntilTimeout>
 801214a:	1e03      	subs	r3, r0, #0
 801214c:	d00d      	beq.n	801216a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012152:	2201      	movs	r2, #1
 8012154:	431a      	orrs	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2235      	movs	r2, #53	@ 0x35
 801215e:	2101      	movs	r1, #1
 8012160:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012162:	2317      	movs	r3, #23
 8012164:	18fb      	adds	r3, r7, r3
 8012166:	2201      	movs	r2, #1
 8012168:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	69da      	ldr	r2, [r3, #28]
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4938      	ldr	r1, [pc, #224]	@ (8012258 <HAL_I2S_DMAStop+0x194>)
 8012176:	400a      	ands	r2, r1
 8012178:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801217a:	2300      	movs	r3, #0
 801217c:	613b      	str	r3, [r7, #16]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	689b      	ldr	r3, [r3, #8]
 8012184:	613b      	str	r3, [r7, #16]
 8012186:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	685a      	ldr	r2, [r3, #4]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	2102      	movs	r1, #2
 8012194:	438a      	bics	r2, r1
 8012196:	605a      	str	r2, [r3, #4]
 8012198:	e053      	b.n	8012242 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	685a      	ldr	r2, [r3, #4]
 801219e:	23c0      	movs	r3, #192	@ 0xc0
 80121a0:	009b      	lsls	r3, r3, #2
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d005      	beq.n	80121b2 <HAL_I2S_DMAStop+0xee>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	685a      	ldr	r2, [r3, #4]
 80121aa:	2380      	movs	r3, #128	@ 0x80
 80121ac:	005b      	lsls	r3, r3, #1
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d147      	bne.n	8012242 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d010      	beq.n	80121dc <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121be:	0018      	movs	r0, r3
 80121c0:	f7fc fc48 	bl	800ea54 <HAL_DMA_Abort>
 80121c4:	1e03      	subs	r3, r0, #0
 80121c6:	d009      	beq.n	80121dc <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121cc:	2208      	movs	r2, #8
 80121ce:	431a      	orrs	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80121d4:	2317      	movs	r3, #23
 80121d6:	18fb      	adds	r3, r7, r3
 80121d8:	2201      	movs	r2, #1
 80121da:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	69da      	ldr	r2, [r3, #28]
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	491c      	ldr	r1, [pc, #112]	@ (8012258 <HAL_I2S_DMAStop+0x194>)
 80121e8:	400a      	ands	r2, r1
 80121ea:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80121ec:	2300      	movs	r3, #0
 80121ee:	60fb      	str	r3, [r7, #12]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	60fb      	str	r3, [r7, #12]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	689b      	ldr	r3, [r3, #8]
 80121fe:	60fb      	str	r3, [r7, #12]
 8012200:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	685a      	ldr	r2, [r3, #4]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	2101      	movs	r1, #1
 801220e:	438a      	bics	r2, r1
 8012210:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	2380      	movs	r3, #128	@ 0x80
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	429a      	cmp	r2, r3
 801221c:	d10e      	bne.n	801223c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012222:	2240      	movs	r2, #64	@ 0x40
 8012224:	431a      	orrs	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2235      	movs	r2, #53	@ 0x35
 801222e:	2101      	movs	r1, #1
 8012230:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8012232:	2317      	movs	r3, #23
 8012234:	18fb      	adds	r3, r7, r3
 8012236:	2201      	movs	r2, #1
 8012238:	701a      	strb	r2, [r3, #0]
 801223a:	e002      	b.n	8012242 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2235      	movs	r2, #53	@ 0x35
 8012246:	2101      	movs	r1, #1
 8012248:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801224a:	2317      	movs	r3, #23
 801224c:	18fb      	adds	r3, r7, r3
 801224e:	781b      	ldrb	r3, [r3, #0]
}
 8012250:	0018      	movs	r0, r3
 8012252:	46bd      	mov	sp, r7
 8012254:	b006      	add	sp, #24
 8012256:	bd80      	pop	{r7, pc}
 8012258:	fffffbff 	.word	0xfffffbff

0801225c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012268:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	69db      	ldr	r3, [r3, #28]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d10e      	bne.n	8012290 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	685a      	ldr	r2, [r3, #4]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2101      	movs	r1, #1
 801227e:	438a      	bics	r2, r1
 8012280:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2200      	movs	r2, #0
 8012286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	2235      	movs	r2, #53	@ 0x35
 801228c:	2101      	movs	r1, #1
 801228e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	0018      	movs	r0, r3
 8012294:	f7f9 fcfe 	bl	800bc94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012298:	46c0      	nop			@ (mov r8, r8)
 801229a:	46bd      	mov	sp, r7
 801229c:	b004      	add	sp, #16
 801229e:	bd80      	pop	{r7, pc}

080122a0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b084      	sub	sp, #16
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122ac:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	0018      	movs	r0, r3
 80122b2:	f7f9 fcdd 	bl	800bc70 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80122b6:	46c0      	nop			@ (mov r8, r8)
 80122b8:	46bd      	mov	sp, r7
 80122ba:	b004      	add	sp, #16
 80122bc:	bd80      	pop	{r7, pc}

080122be <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b084      	sub	sp, #16
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122ca:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	685a      	ldr	r2, [r3, #4]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2103      	movs	r1, #3
 80122d8:	438a      	bics	r2, r1
 80122da:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2200      	movs	r2, #0
 80122e0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2200      	movs	r2, #0
 80122e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	2235      	movs	r2, #53	@ 0x35
 80122ec:	2101      	movs	r1, #1
 80122ee:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122f4:	2208      	movs	r2, #8
 80122f6:	431a      	orrs	r2, r3
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	0018      	movs	r0, r3
 8012300:	f7f9 fd16 	bl	800bd30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012304:	46c0      	nop			@ (mov r8, r8)
 8012306:	46bd      	mov	sp, r7
 8012308:	b004      	add	sp, #16
 801230a:	bd80      	pop	{r7, pc}

0801230c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b086      	sub	sp, #24
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	603b      	str	r3, [r7, #0]
 8012318:	1dfb      	adds	r3, r7, #7
 801231a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801231c:	f7fb fdf8 	bl	800df10 <HAL_GetTick>
 8012320:	0003      	movs	r3, r0
 8012322:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012324:	e017      	b.n	8012356 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	3301      	adds	r3, #1
 801232a:	d014      	beq.n	8012356 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801232c:	f7fb fdf0 	bl	800df10 <HAL_GetTick>
 8012330:	0002      	movs	r2, r0
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	1ad3      	subs	r3, r2, r3
 8012336:	683a      	ldr	r2, [r7, #0]
 8012338:	429a      	cmp	r2, r3
 801233a:	d902      	bls.n	8012342 <I2S_WaitFlagStateUntilTimeout+0x36>
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d109      	bne.n	8012356 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	2235      	movs	r2, #53	@ 0x35
 8012346:	2101      	movs	r1, #1
 8012348:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	2234      	movs	r2, #52	@ 0x34
 801234e:	2100      	movs	r1, #0
 8012350:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012352:	2303      	movs	r3, #3
 8012354:	e00f      	b.n	8012376 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	4013      	ands	r3, r2
 8012360:	68ba      	ldr	r2, [r7, #8]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	425a      	negs	r2, r3
 8012366:	4153      	adcs	r3, r2
 8012368:	b2db      	uxtb	r3, r3
 801236a:	001a      	movs	r2, r3
 801236c:	1dfb      	adds	r3, r7, #7
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	429a      	cmp	r2, r3
 8012372:	d1d8      	bne.n	8012326 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8012374:	2300      	movs	r3, #0
}
 8012376:	0018      	movs	r0, r3
 8012378:	46bd      	mov	sp, r7
 801237a:	b006      	add	sp, #24
 801237c:	bd80      	pop	{r7, pc}
	...

08012380 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012382:	b08b      	sub	sp, #44	@ 0x2c
 8012384:	af06      	add	r7, sp, #24
 8012386:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d101      	bne.n	8012392 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801238e:	2301      	movs	r3, #1
 8012390:	e0f0      	b.n	8012574 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	4a79      	ldr	r2, [pc, #484]	@ (801257c <HAL_PCD_Init+0x1fc>)
 8012396:	5c9b      	ldrb	r3, [r3, r2]
 8012398:	b2db      	uxtb	r3, r3
 801239a:	2b00      	cmp	r3, #0
 801239c:	d108      	bne.n	80123b0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	23aa      	movs	r3, #170	@ 0xaa
 80123a2:	009b      	lsls	r3, r3, #2
 80123a4:	2100      	movs	r1, #0
 80123a6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	0018      	movs	r0, r3
 80123ac:	f009 ff0c 	bl	801c1c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	4a72      	ldr	r2, [pc, #456]	@ (801257c <HAL_PCD_Init+0x1fc>)
 80123b4:	2103      	movs	r1, #3
 80123b6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	0018      	movs	r0, r3
 80123be:	f005 febf 	bl	8018140 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80123c2:	230f      	movs	r3, #15
 80123c4:	18fb      	adds	r3, r7, r3
 80123c6:	2200      	movs	r2, #0
 80123c8:	701a      	strb	r2, [r3, #0]
 80123ca:	e049      	b.n	8012460 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80123cc:	200f      	movs	r0, #15
 80123ce:	183b      	adds	r3, r7, r0
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	6879      	ldr	r1, [r7, #4]
 80123d4:	1c5a      	adds	r2, r3, #1
 80123d6:	0013      	movs	r3, r2
 80123d8:	009b      	lsls	r3, r3, #2
 80123da:	189b      	adds	r3, r3, r2
 80123dc:	00db      	lsls	r3, r3, #3
 80123de:	18cb      	adds	r3, r1, r3
 80123e0:	3301      	adds	r3, #1
 80123e2:	2201      	movs	r2, #1
 80123e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80123e6:	183b      	adds	r3, r7, r0
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	6879      	ldr	r1, [r7, #4]
 80123ec:	1c5a      	adds	r2, r3, #1
 80123ee:	0013      	movs	r3, r2
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	189b      	adds	r3, r3, r2
 80123f4:	00db      	lsls	r3, r3, #3
 80123f6:	183a      	adds	r2, r7, r0
 80123f8:	7812      	ldrb	r2, [r2, #0]
 80123fa:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80123fc:	183b      	adds	r3, r7, r0
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	6879      	ldr	r1, [r7, #4]
 8012402:	1c5a      	adds	r2, r3, #1
 8012404:	0013      	movs	r3, r2
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	189b      	adds	r3, r3, r2
 801240a:	00db      	lsls	r3, r3, #3
 801240c:	18cb      	adds	r3, r1, r3
 801240e:	3303      	adds	r3, #3
 8012410:	2200      	movs	r2, #0
 8012412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8012414:	183b      	adds	r3, r7, r0
 8012416:	781a      	ldrb	r2, [r3, #0]
 8012418:	6879      	ldr	r1, [r7, #4]
 801241a:	0013      	movs	r3, r2
 801241c:	009b      	lsls	r3, r3, #2
 801241e:	189b      	adds	r3, r3, r2
 8012420:	00db      	lsls	r3, r3, #3
 8012422:	18cb      	adds	r3, r1, r3
 8012424:	3338      	adds	r3, #56	@ 0x38
 8012426:	2200      	movs	r2, #0
 8012428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801242a:	183b      	adds	r3, r7, r0
 801242c:	781a      	ldrb	r2, [r3, #0]
 801242e:	6879      	ldr	r1, [r7, #4]
 8012430:	0013      	movs	r3, r2
 8012432:	009b      	lsls	r3, r3, #2
 8012434:	189b      	adds	r3, r3, r2
 8012436:	00db      	lsls	r3, r3, #3
 8012438:	18cb      	adds	r3, r1, r3
 801243a:	333c      	adds	r3, #60	@ 0x3c
 801243c:	2200      	movs	r2, #0
 801243e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012440:	183b      	adds	r3, r7, r0
 8012442:	781a      	ldrb	r2, [r3, #0]
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	0013      	movs	r3, r2
 8012448:	009b      	lsls	r3, r3, #2
 801244a:	189b      	adds	r3, r3, r2
 801244c:	00db      	lsls	r3, r3, #3
 801244e:	18cb      	adds	r3, r1, r3
 8012450:	3340      	adds	r3, #64	@ 0x40
 8012452:	2200      	movs	r2, #0
 8012454:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012456:	183b      	adds	r3, r7, r0
 8012458:	781a      	ldrb	r2, [r3, #0]
 801245a:	183b      	adds	r3, r7, r0
 801245c:	3201      	adds	r2, #1
 801245e:	701a      	strb	r2, [r3, #0]
 8012460:	210f      	movs	r1, #15
 8012462:	187b      	adds	r3, r7, r1
 8012464:	781a      	ldrb	r2, [r3, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	429a      	cmp	r2, r3
 801246c:	d3ae      	bcc.n	80123cc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801246e:	187b      	adds	r3, r7, r1
 8012470:	2200      	movs	r2, #0
 8012472:	701a      	strb	r2, [r3, #0]
 8012474:	e056      	b.n	8012524 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8012476:	240f      	movs	r4, #15
 8012478:	193b      	adds	r3, r7, r4
 801247a:	781a      	ldrb	r2, [r3, #0]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	236a      	movs	r3, #106	@ 0x6a
 8012480:	33ff      	adds	r3, #255	@ 0xff
 8012482:	0019      	movs	r1, r3
 8012484:	0013      	movs	r3, r2
 8012486:	009b      	lsls	r3, r3, #2
 8012488:	189b      	adds	r3, r3, r2
 801248a:	00db      	lsls	r3, r3, #3
 801248c:	18c3      	adds	r3, r0, r3
 801248e:	185b      	adds	r3, r3, r1
 8012490:	2200      	movs	r2, #0
 8012492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8012494:	193b      	adds	r3, r7, r4
 8012496:	781a      	ldrb	r2, [r3, #0]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	23b4      	movs	r3, #180	@ 0xb4
 801249c:	0059      	lsls	r1, r3, #1
 801249e:	0013      	movs	r3, r2
 80124a0:	009b      	lsls	r3, r3, #2
 80124a2:	189b      	adds	r3, r3, r2
 80124a4:	00db      	lsls	r3, r3, #3
 80124a6:	18c3      	adds	r3, r0, r3
 80124a8:	185b      	adds	r3, r3, r1
 80124aa:	193a      	adds	r2, r7, r4
 80124ac:	7812      	ldrb	r2, [r2, #0]
 80124ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80124b0:	193b      	adds	r3, r7, r4
 80124b2:	781a      	ldrb	r2, [r3, #0]
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	236c      	movs	r3, #108	@ 0x6c
 80124b8:	33ff      	adds	r3, #255	@ 0xff
 80124ba:	0019      	movs	r1, r3
 80124bc:	0013      	movs	r3, r2
 80124be:	009b      	lsls	r3, r3, #2
 80124c0:	189b      	adds	r3, r3, r2
 80124c2:	00db      	lsls	r3, r3, #3
 80124c4:	18c3      	adds	r3, r0, r3
 80124c6:	185b      	adds	r3, r3, r1
 80124c8:	2200      	movs	r2, #0
 80124ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80124cc:	193b      	adds	r3, r7, r4
 80124ce:	781a      	ldrb	r2, [r3, #0]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	23bc      	movs	r3, #188	@ 0xbc
 80124d4:	0059      	lsls	r1, r3, #1
 80124d6:	0013      	movs	r3, r2
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	189b      	adds	r3, r3, r2
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	18c3      	adds	r3, r0, r3
 80124e0:	185b      	adds	r3, r3, r1
 80124e2:	2200      	movs	r2, #0
 80124e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80124e6:	193b      	adds	r3, r7, r4
 80124e8:	781a      	ldrb	r2, [r3, #0]
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	23be      	movs	r3, #190	@ 0xbe
 80124ee:	0059      	lsls	r1, r3, #1
 80124f0:	0013      	movs	r3, r2
 80124f2:	009b      	lsls	r3, r3, #2
 80124f4:	189b      	adds	r3, r3, r2
 80124f6:	00db      	lsls	r3, r3, #3
 80124f8:	18c3      	adds	r3, r0, r3
 80124fa:	185b      	adds	r3, r3, r1
 80124fc:	2200      	movs	r2, #0
 80124fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8012500:	193b      	adds	r3, r7, r4
 8012502:	781a      	ldrb	r2, [r3, #0]
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	23c0      	movs	r3, #192	@ 0xc0
 8012508:	0059      	lsls	r1, r3, #1
 801250a:	0013      	movs	r3, r2
 801250c:	009b      	lsls	r3, r3, #2
 801250e:	189b      	adds	r3, r3, r2
 8012510:	00db      	lsls	r3, r3, #3
 8012512:	18c3      	adds	r3, r0, r3
 8012514:	185b      	adds	r3, r3, r1
 8012516:	2200      	movs	r2, #0
 8012518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801251a:	193b      	adds	r3, r7, r4
 801251c:	781a      	ldrb	r2, [r3, #0]
 801251e:	193b      	adds	r3, r7, r4
 8012520:	3201      	adds	r2, #1
 8012522:	701a      	strb	r2, [r3, #0]
 8012524:	230f      	movs	r3, #15
 8012526:	18fb      	adds	r3, r7, r3
 8012528:	781a      	ldrb	r2, [r3, #0]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	429a      	cmp	r2, r3
 8012530:	d3a1      	bcc.n	8012476 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6818      	ldr	r0, [r3, #0]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	466a      	mov	r2, sp
 801253a:	0011      	movs	r1, r2
 801253c:	001a      	movs	r2, r3
 801253e:	3210      	adds	r2, #16
 8012540:	ca70      	ldmia	r2!, {r4, r5, r6}
 8012542:	c170      	stmia	r1!, {r4, r5, r6}
 8012544:	ca30      	ldmia	r2!, {r4, r5}
 8012546:	c130      	stmia	r1!, {r4, r5}
 8012548:	6859      	ldr	r1, [r3, #4]
 801254a:	689a      	ldr	r2, [r3, #8]
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	f005 fe11 	bl	8018174 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2224      	movs	r2, #36	@ 0x24
 8012556:	2100      	movs	r1, #0
 8012558:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	4a07      	ldr	r2, [pc, #28]	@ (801257c <HAL_PCD_Init+0x1fc>)
 801255e:	2101      	movs	r1, #1
 8012560:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	69db      	ldr	r3, [r3, #28]
 8012566:	2b01      	cmp	r3, #1
 8012568:	d103      	bne.n	8012572 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	0018      	movs	r0, r3
 801256e:	f001 fd23 	bl	8013fb8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8012572:	2300      	movs	r3, #0
}
 8012574:	0018      	movs	r0, r3
 8012576:	46bd      	mov	sp, r7
 8012578:	b005      	add	sp, #20
 801257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801257c:	000002a9 	.word	0x000002a9

08012580 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	23aa      	movs	r3, #170	@ 0xaa
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	5cd3      	ldrb	r3, [r2, r3]
 8012590:	2b01      	cmp	r3, #1
 8012592:	d101      	bne.n	8012598 <HAL_PCD_Start+0x18>
 8012594:	2302      	movs	r3, #2
 8012596:	e014      	b.n	80125c2 <HAL_PCD_Start+0x42>
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	23aa      	movs	r3, #170	@ 0xaa
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	2101      	movs	r1, #1
 80125a0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	0018      	movs	r0, r3
 80125a8:	f005 fdb4 	bl	8018114 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	0018      	movs	r0, r3
 80125b2:	f007 fdb7 	bl	801a124 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	23aa      	movs	r3, #170	@ 0xaa
 80125ba:	009b      	lsls	r3, r3, #2
 80125bc:	2100      	movs	r1, #0
 80125be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80125c0:	2300      	movs	r3, #0
}
 80125c2:	0018      	movs	r0, r3
 80125c4:	46bd      	mov	sp, r7
 80125c6:	b002      	add	sp, #8
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	0018      	movs	r0, r3
 80125da:	f007 fdb9 	bl	801a150 <USB_ReadInterrupts>
 80125de:	0003      	movs	r3, r0
 80125e0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	2380      	movs	r3, #128	@ 0x80
 80125e6:	021b      	lsls	r3, r3, #8
 80125e8:	4013      	ands	r3, r2
 80125ea:	d004      	beq.n	80125f6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	0018      	movs	r0, r3
 80125f0:	f000 fb62 	bl	8012cb8 <PCD_EP_ISR_Handler>

    return;
 80125f4:	e11d      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80125f6:	68fa      	ldr	r2, [r7, #12]
 80125f8:	2380      	movs	r3, #128	@ 0x80
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	4013      	ands	r3, r2
 80125fe:	d015      	beq.n	801262c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2244      	movs	r2, #68	@ 0x44
 8012606:	5a9b      	ldrh	r3, [r3, r2]
 8012608:	b29a      	uxth	r2, r3
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	498a      	ldr	r1, [pc, #552]	@ (8012838 <HAL_PCD_IRQHandler+0x26c>)
 8012610:	400a      	ands	r2, r1
 8012612:	b291      	uxth	r1, r2
 8012614:	2244      	movs	r2, #68	@ 0x44
 8012616:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	0018      	movs	r0, r3
 801261c:	f009 fe57 	bl	801c2ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2100      	movs	r1, #0
 8012624:	0018      	movs	r0, r3
 8012626:	f000 f915 	bl	8012854 <HAL_PCD_SetAddress>

    return;
 801262a:	e102      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	2380      	movs	r3, #128	@ 0x80
 8012630:	01db      	lsls	r3, r3, #7
 8012632:	4013      	ands	r3, r2
 8012634:	d00c      	beq.n	8012650 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	2244      	movs	r2, #68	@ 0x44
 801263c:	5a9b      	ldrh	r3, [r3, r2]
 801263e:	b29a      	uxth	r2, r3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	497d      	ldr	r1, [pc, #500]	@ (801283c <HAL_PCD_IRQHandler+0x270>)
 8012646:	400a      	ands	r2, r1
 8012648:	b291      	uxth	r1, r2
 801264a:	2244      	movs	r2, #68	@ 0x44
 801264c:	5299      	strh	r1, [r3, r2]

    return;
 801264e:	e0f0      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	2380      	movs	r3, #128	@ 0x80
 8012654:	019b      	lsls	r3, r3, #6
 8012656:	4013      	ands	r3, r2
 8012658:	d00c      	beq.n	8012674 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2244      	movs	r2, #68	@ 0x44
 8012660:	5a9b      	ldrh	r3, [r3, r2]
 8012662:	b29a      	uxth	r2, r3
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	4975      	ldr	r1, [pc, #468]	@ (8012840 <HAL_PCD_IRQHandler+0x274>)
 801266a:	400a      	ands	r2, r1
 801266c:	b291      	uxth	r1, r2
 801266e:	2244      	movs	r2, #68	@ 0x44
 8012670:	5299      	strh	r1, [r3, r2]

    return;
 8012672:	e0de      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8012674:	68fa      	ldr	r2, [r7, #12]
 8012676:	2380      	movs	r3, #128	@ 0x80
 8012678:	015b      	lsls	r3, r3, #5
 801267a:	4013      	ands	r3, r2
 801267c:	d038      	beq.n	80126f0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2240      	movs	r2, #64	@ 0x40
 8012684:	5a9b      	ldrh	r3, [r3, r2]
 8012686:	b29a      	uxth	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2104      	movs	r1, #4
 801268e:	438a      	bics	r2, r1
 8012690:	b291      	uxth	r1, r2
 8012692:	2240      	movs	r2, #64	@ 0x40
 8012694:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	2240      	movs	r2, #64	@ 0x40
 801269c:	5a9b      	ldrh	r3, [r3, r2]
 801269e:	b29a      	uxth	r2, r3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2108      	movs	r1, #8
 80126a6:	438a      	bics	r2, r1
 80126a8:	b291      	uxth	r1, r2
 80126aa:	2240      	movs	r2, #64	@ 0x40
 80126ac:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80126ae:	687a      	ldr	r2, [r7, #4]
 80126b0:	23b8      	movs	r3, #184	@ 0xb8
 80126b2:	009b      	lsls	r3, r3, #2
 80126b4:	5cd3      	ldrb	r3, [r2, r3]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d109      	bne.n	80126ce <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	23b8      	movs	r3, #184	@ 0xb8
 80126be:	009b      	lsls	r3, r3, #2
 80126c0:	2100      	movs	r1, #0
 80126c2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2100      	movs	r1, #0
 80126c8:	0018      	movs	r0, r3
 80126ca:	f001 fc9f 	bl	801400c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	0018      	movs	r0, r3
 80126d2:	f009 fe3d 	bl	801c350 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2244      	movs	r2, #68	@ 0x44
 80126dc:	5a9b      	ldrh	r3, [r3, r2]
 80126de:	b29a      	uxth	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4957      	ldr	r1, [pc, #348]	@ (8012844 <HAL_PCD_IRQHandler+0x278>)
 80126e6:	400a      	ands	r2, r1
 80126e8:	b291      	uxth	r1, r2
 80126ea:	2244      	movs	r2, #68	@ 0x44
 80126ec:	5299      	strh	r1, [r3, r2]

    return;
 80126ee:	e0a0      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80126f0:	68fa      	ldr	r2, [r7, #12]
 80126f2:	2380      	movs	r3, #128	@ 0x80
 80126f4:	011b      	lsls	r3, r3, #4
 80126f6:	4013      	ands	r3, r2
 80126f8:	d028      	beq.n	801274c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	2240      	movs	r2, #64	@ 0x40
 8012700:	5a9b      	ldrh	r3, [r3, r2]
 8012702:	b29a      	uxth	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	2108      	movs	r1, #8
 801270a:	430a      	orrs	r2, r1
 801270c:	b291      	uxth	r1, r2
 801270e:	2240      	movs	r2, #64	@ 0x40
 8012710:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2244      	movs	r2, #68	@ 0x44
 8012718:	5a9b      	ldrh	r3, [r3, r2]
 801271a:	b29a      	uxth	r2, r3
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	4949      	ldr	r1, [pc, #292]	@ (8012848 <HAL_PCD_IRQHandler+0x27c>)
 8012722:	400a      	ands	r2, r1
 8012724:	b291      	uxth	r1, r2
 8012726:	2244      	movs	r2, #68	@ 0x44
 8012728:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2240      	movs	r2, #64	@ 0x40
 8012730:	5a9b      	ldrh	r3, [r3, r2]
 8012732:	b29a      	uxth	r2, r3
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2104      	movs	r1, #4
 801273a:	430a      	orrs	r2, r1
 801273c:	b291      	uxth	r1, r2
 801273e:	2240      	movs	r2, #64	@ 0x40
 8012740:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	0018      	movs	r0, r3
 8012746:	f009 fde7 	bl	801c318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801274a:	e072      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	2280      	movs	r2, #128	@ 0x80
 8012750:	4013      	ands	r3, r2
 8012752:	d046      	beq.n	80127e2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2244      	movs	r2, #68	@ 0x44
 801275a:	5a9b      	ldrh	r3, [r3, r2]
 801275c:	b29a      	uxth	r2, r3
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2180      	movs	r1, #128	@ 0x80
 8012764:	438a      	bics	r2, r1
 8012766:	b291      	uxth	r1, r2
 8012768:	2244      	movs	r2, #68	@ 0x44
 801276a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	23b8      	movs	r3, #184	@ 0xb8
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	5cd3      	ldrb	r3, [r2, r3]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d12f      	bne.n	80127d8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2240      	movs	r2, #64	@ 0x40
 801277e:	5a9b      	ldrh	r3, [r3, r2]
 8012780:	b29a      	uxth	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2104      	movs	r1, #4
 8012788:	430a      	orrs	r2, r1
 801278a:	b291      	uxth	r1, r2
 801278c:	2240      	movs	r2, #64	@ 0x40
 801278e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	2240      	movs	r2, #64	@ 0x40
 8012796:	5a9b      	ldrh	r3, [r3, r2]
 8012798:	b29a      	uxth	r2, r3
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2108      	movs	r1, #8
 80127a0:	430a      	orrs	r2, r1
 80127a2:	b291      	uxth	r1, r2
 80127a4:	2240      	movs	r2, #64	@ 0x40
 80127a6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	23b8      	movs	r3, #184	@ 0xb8
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	2101      	movs	r1, #1
 80127b0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	2254      	movs	r2, #84	@ 0x54
 80127b8:	5a9b      	ldrh	r3, [r3, r2]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	089b      	lsrs	r3, r3, #2
 80127be:	223c      	movs	r2, #60	@ 0x3c
 80127c0:	4013      	ands	r3, r2
 80127c2:	0019      	movs	r1, r3
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	23b9      	movs	r3, #185	@ 0xb9
 80127c8:	009b      	lsls	r3, r3, #2
 80127ca:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2101      	movs	r1, #1
 80127d0:	0018      	movs	r0, r3
 80127d2:	f001 fc1b 	bl	801400c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80127d6:	e02c      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	0018      	movs	r0, r3
 80127dc:	f009 fd9c 	bl	801c318 <HAL_PCD_SuspendCallback>
    return;
 80127e0:	e027      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	2380      	movs	r3, #128	@ 0x80
 80127e6:	009b      	lsls	r3, r3, #2
 80127e8:	4013      	ands	r3, r2
 80127ea:	d010      	beq.n	801280e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2244      	movs	r2, #68	@ 0x44
 80127f2:	5a9b      	ldrh	r3, [r3, r2]
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4914      	ldr	r1, [pc, #80]	@ (801284c <HAL_PCD_IRQHandler+0x280>)
 80127fc:	400a      	ands	r2, r1
 80127fe:	b291      	uxth	r1, r2
 8012800:	2244      	movs	r2, #68	@ 0x44
 8012802:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	0018      	movs	r0, r3
 8012808:	f009 fd52 	bl	801c2b0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801280c:	e011      	b.n	8012832 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801280e:	68fa      	ldr	r2, [r7, #12]
 8012810:	2380      	movs	r3, #128	@ 0x80
 8012812:	005b      	lsls	r3, r3, #1
 8012814:	4013      	ands	r3, r2
 8012816:	d00c      	beq.n	8012832 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	2244      	movs	r2, #68	@ 0x44
 801281e:	5a9b      	ldrh	r3, [r3, r2]
 8012820:	b29a      	uxth	r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	490a      	ldr	r1, [pc, #40]	@ (8012850 <HAL_PCD_IRQHandler+0x284>)
 8012828:	400a      	ands	r2, r1
 801282a:	b291      	uxth	r1, r2
 801282c:	2244      	movs	r2, #68	@ 0x44
 801282e:	5299      	strh	r1, [r3, r2]

    return;
 8012830:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012832:	46bd      	mov	sp, r7
 8012834:	b004      	add	sp, #16
 8012836:	bd80      	pop	{r7, pc}
 8012838:	fffffbff 	.word	0xfffffbff
 801283c:	ffffbfff 	.word	0xffffbfff
 8012840:	ffffdfff 	.word	0xffffdfff
 8012844:	ffffefff 	.word	0xffffefff
 8012848:	fffff7ff 	.word	0xfffff7ff
 801284c:	fffffdff 	.word	0xfffffdff
 8012850:	fffffeff 	.word	0xfffffeff

08012854 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	000a      	movs	r2, r1
 801285e:	1cfb      	adds	r3, r7, #3
 8012860:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	23aa      	movs	r3, #170	@ 0xaa
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	5cd3      	ldrb	r3, [r2, r3]
 801286a:	2b01      	cmp	r3, #1
 801286c:	d101      	bne.n	8012872 <HAL_PCD_SetAddress+0x1e>
 801286e:	2302      	movs	r3, #2
 8012870:	e017      	b.n	80128a2 <HAL_PCD_SetAddress+0x4e>
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	23aa      	movs	r3, #170	@ 0xaa
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	2101      	movs	r1, #1
 801287a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	1cfa      	adds	r2, r7, #3
 8012880:	2124      	movs	r1, #36	@ 0x24
 8012882:	7812      	ldrb	r2, [r2, #0]
 8012884:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	1cfb      	adds	r3, r7, #3
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	0019      	movs	r1, r3
 8012890:	0010      	movs	r0, r2
 8012892:	f007 fc33 	bl	801a0fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	23aa      	movs	r3, #170	@ 0xaa
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	2100      	movs	r1, #0
 801289e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80128a0:	2300      	movs	r3, #0
}
 80128a2:	0018      	movs	r0, r3
 80128a4:	46bd      	mov	sp, r7
 80128a6:	b002      	add	sp, #8
 80128a8:	bd80      	pop	{r7, pc}

080128aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80128aa:	b590      	push	{r4, r7, lr}
 80128ac:	b085      	sub	sp, #20
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
 80128b2:	000c      	movs	r4, r1
 80128b4:	0010      	movs	r0, r2
 80128b6:	0019      	movs	r1, r3
 80128b8:	1cfb      	adds	r3, r7, #3
 80128ba:	1c22      	adds	r2, r4, #0
 80128bc:	701a      	strb	r2, [r3, #0]
 80128be:	003b      	movs	r3, r7
 80128c0:	1c02      	adds	r2, r0, #0
 80128c2:	801a      	strh	r2, [r3, #0]
 80128c4:	1cbb      	adds	r3, r7, #2
 80128c6:	1c0a      	adds	r2, r1, #0
 80128c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80128ca:	230b      	movs	r3, #11
 80128cc:	18fb      	adds	r3, r7, r3
 80128ce:	2200      	movs	r2, #0
 80128d0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80128d2:	1cfb      	adds	r3, r7, #3
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	b25b      	sxtb	r3, r3
 80128d8:	2b00      	cmp	r3, #0
 80128da:	da0f      	bge.n	80128fc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80128dc:	1cfb      	adds	r3, r7, #3
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	2207      	movs	r2, #7
 80128e2:	4013      	ands	r3, r2
 80128e4:	1c5a      	adds	r2, r3, #1
 80128e6:	0013      	movs	r3, r2
 80128e8:	009b      	lsls	r3, r3, #2
 80128ea:	189b      	adds	r3, r3, r2
 80128ec:	00db      	lsls	r3, r3, #3
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	18d3      	adds	r3, r2, r3
 80128f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2201      	movs	r2, #1
 80128f8:	705a      	strb	r2, [r3, #1]
 80128fa:	e00f      	b.n	801291c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80128fc:	1cfb      	adds	r3, r7, #3
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	2207      	movs	r2, #7
 8012902:	401a      	ands	r2, r3
 8012904:	0013      	movs	r3, r2
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	189b      	adds	r3, r3, r2
 801290a:	00db      	lsls	r3, r3, #3
 801290c:	3369      	adds	r3, #105	@ 0x69
 801290e:	33ff      	adds	r3, #255	@ 0xff
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	18d3      	adds	r3, r2, r3
 8012914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	2200      	movs	r2, #0
 801291a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801291c:	1cfb      	adds	r3, r7, #3
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2207      	movs	r2, #7
 8012922:	4013      	ands	r3, r2
 8012924:	b2da      	uxtb	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 801292a:	003b      	movs	r3, r7
 801292c:	881a      	ldrh	r2, [r3, #0]
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	1cba      	adds	r2, r7, #2
 8012936:	7812      	ldrb	r2, [r2, #0]
 8012938:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801293a:	1cbb      	adds	r3, r7, #2
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	2b02      	cmp	r3, #2
 8012940:	d102      	bne.n	8012948 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2200      	movs	r2, #0
 8012946:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	23aa      	movs	r3, #170	@ 0xaa
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	5cd3      	ldrb	r3, [r2, r3]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d101      	bne.n	8012958 <HAL_PCD_EP_Open+0xae>
 8012954:	2302      	movs	r3, #2
 8012956:	e013      	b.n	8012980 <HAL_PCD_EP_Open+0xd6>
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	23aa      	movs	r3, #170	@ 0xaa
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	2101      	movs	r1, #1
 8012960:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	68fa      	ldr	r2, [r7, #12]
 8012968:	0011      	movs	r1, r2
 801296a:	0018      	movs	r0, r3
 801296c:	f005 fc2a 	bl	80181c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012970:	687a      	ldr	r2, [r7, #4]
 8012972:	23aa      	movs	r3, #170	@ 0xaa
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	2100      	movs	r1, #0
 8012978:	54d1      	strb	r1, [r2, r3]

  return ret;
 801297a:	230b      	movs	r3, #11
 801297c:	18fb      	adds	r3, r7, r3
 801297e:	781b      	ldrb	r3, [r3, #0]
}
 8012980:	0018      	movs	r0, r3
 8012982:	46bd      	mov	sp, r7
 8012984:	b005      	add	sp, #20
 8012986:	bd90      	pop	{r4, r7, pc}

08012988 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	000a      	movs	r2, r1
 8012992:	1cfb      	adds	r3, r7, #3
 8012994:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012996:	1cfb      	adds	r3, r7, #3
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	b25b      	sxtb	r3, r3
 801299c:	2b00      	cmp	r3, #0
 801299e:	da0f      	bge.n	80129c0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80129a0:	1cfb      	adds	r3, r7, #3
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	2207      	movs	r2, #7
 80129a6:	4013      	ands	r3, r2
 80129a8:	1c5a      	adds	r2, r3, #1
 80129aa:	0013      	movs	r3, r2
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	189b      	adds	r3, r3, r2
 80129b0:	00db      	lsls	r3, r3, #3
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	18d3      	adds	r3, r2, r3
 80129b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2201      	movs	r2, #1
 80129bc:	705a      	strb	r2, [r3, #1]
 80129be:	e00f      	b.n	80129e0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80129c0:	1cfb      	adds	r3, r7, #3
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	2207      	movs	r2, #7
 80129c6:	401a      	ands	r2, r3
 80129c8:	0013      	movs	r3, r2
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	189b      	adds	r3, r3, r2
 80129ce:	00db      	lsls	r3, r3, #3
 80129d0:	3369      	adds	r3, #105	@ 0x69
 80129d2:	33ff      	adds	r3, #255	@ 0xff
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	18d3      	adds	r3, r2, r3
 80129d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	2200      	movs	r2, #0
 80129de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80129e0:	1cfb      	adds	r3, r7, #3
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	2207      	movs	r2, #7
 80129e6:	4013      	ands	r3, r2
 80129e8:	b2da      	uxtb	r2, r3
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	23aa      	movs	r3, #170	@ 0xaa
 80129f2:	009b      	lsls	r3, r3, #2
 80129f4:	5cd3      	ldrb	r3, [r2, r3]
 80129f6:	2b01      	cmp	r3, #1
 80129f8:	d101      	bne.n	80129fe <HAL_PCD_EP_Close+0x76>
 80129fa:	2302      	movs	r3, #2
 80129fc:	e011      	b.n	8012a22 <HAL_PCD_EP_Close+0x9a>
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	23aa      	movs	r3, #170	@ 0xaa
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	2101      	movs	r1, #1
 8012a06:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	0011      	movs	r1, r2
 8012a10:	0018      	movs	r0, r3
 8012a12:	f005 ff79 	bl	8018908 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012a16:	687a      	ldr	r2, [r7, #4]
 8012a18:	23aa      	movs	r3, #170	@ 0xaa
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	2100      	movs	r1, #0
 8012a1e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	0018      	movs	r0, r3
 8012a24:	46bd      	mov	sp, r7
 8012a26:	b004      	add	sp, #16
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b086      	sub	sp, #24
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	60f8      	str	r0, [r7, #12]
 8012a32:	607a      	str	r2, [r7, #4]
 8012a34:	603b      	str	r3, [r7, #0]
 8012a36:	200b      	movs	r0, #11
 8012a38:	183b      	adds	r3, r7, r0
 8012a3a:	1c0a      	adds	r2, r1, #0
 8012a3c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012a3e:	0001      	movs	r1, r0
 8012a40:	187b      	adds	r3, r7, r1
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	2207      	movs	r2, #7
 8012a46:	401a      	ands	r2, r3
 8012a48:	0013      	movs	r3, r2
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	189b      	adds	r3, r3, r2
 8012a4e:	00db      	lsls	r3, r3, #3
 8012a50:	3369      	adds	r3, #105	@ 0x69
 8012a52:	33ff      	adds	r3, #255	@ 0xff
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	18d3      	adds	r3, r2, r3
 8012a58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	683a      	ldr	r2, [r7, #0]
 8012a64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012a72:	187b      	adds	r3, r7, r1
 8012a74:	781b      	ldrb	r3, [r3, #0]
 8012a76:	2207      	movs	r2, #7
 8012a78:	4013      	ands	r3, r2
 8012a7a:	b2da      	uxtb	r2, r3
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	697a      	ldr	r2, [r7, #20]
 8012a86:	0011      	movs	r1, r2
 8012a88:	0018      	movs	r0, r3
 8012a8a:	f006 f8fd 	bl	8018c88 <USB_EPStartXfer>

  return HAL_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	0018      	movs	r0, r3
 8012a92:	46bd      	mov	sp, r7
 8012a94:	b006      	add	sp, #24
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	000a      	movs	r2, r1
 8012aa2:	1cfb      	adds	r3, r7, #3
 8012aa4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012aa6:	1cfb      	adds	r3, r7, #3
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	2207      	movs	r2, #7
 8012aac:	401a      	ands	r2, r3
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	23c2      	movs	r3, #194	@ 0xc2
 8012ab2:	0059      	lsls	r1, r3, #1
 8012ab4:	0013      	movs	r3, r2
 8012ab6:	009b      	lsls	r3, r3, #2
 8012ab8:	189b      	adds	r3, r3, r2
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	18c3      	adds	r3, r0, r3
 8012abe:	185b      	adds	r3, r3, r1
 8012ac0:	681b      	ldr	r3, [r3, #0]
}
 8012ac2:	0018      	movs	r0, r3
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	b002      	add	sp, #8
 8012ac8:	bd80      	pop	{r7, pc}

08012aca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012aca:	b580      	push	{r7, lr}
 8012acc:	b086      	sub	sp, #24
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	60f8      	str	r0, [r7, #12]
 8012ad2:	607a      	str	r2, [r7, #4]
 8012ad4:	603b      	str	r3, [r7, #0]
 8012ad6:	200b      	movs	r0, #11
 8012ad8:	183b      	adds	r3, r7, r0
 8012ada:	1c0a      	adds	r2, r1, #0
 8012adc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012ade:	183b      	adds	r3, r7, r0
 8012ae0:	781b      	ldrb	r3, [r3, #0]
 8012ae2:	2207      	movs	r2, #7
 8012ae4:	4013      	ands	r3, r2
 8012ae6:	1c5a      	adds	r2, r3, #1
 8012ae8:	0013      	movs	r3, r2
 8012aea:	009b      	lsls	r3, r3, #2
 8012aec:	189b      	adds	r3, r3, r2
 8012aee:	00db      	lsls	r3, r3, #3
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	18d3      	adds	r3, r2, r3
 8012af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	687a      	ldr	r2, [r7, #4]
 8012afa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	683a      	ldr	r2, [r7, #0]
 8012b00:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	2224      	movs	r2, #36	@ 0x24
 8012b06:	2101      	movs	r1, #1
 8012b08:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	683a      	ldr	r2, [r7, #0]
 8012b0e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	2200      	movs	r2, #0
 8012b14:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	2201      	movs	r2, #1
 8012b1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012b1c:	183b      	adds	r3, r7, r0
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	2207      	movs	r2, #7
 8012b22:	4013      	ands	r3, r2
 8012b24:	b2da      	uxtb	r2, r3
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	697a      	ldr	r2, [r7, #20]
 8012b30:	0011      	movs	r1, r2
 8012b32:	0018      	movs	r0, r3
 8012b34:	f006 f8a8 	bl	8018c88 <USB_EPStartXfer>

  return HAL_OK;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	b006      	add	sp, #24
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b084      	sub	sp, #16
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	6078      	str	r0, [r7, #4]
 8012b4a:	000a      	movs	r2, r1
 8012b4c:	1cfb      	adds	r3, r7, #3
 8012b4e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012b50:	1cfb      	adds	r3, r7, #3
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	2207      	movs	r2, #7
 8012b56:	401a      	ands	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d901      	bls.n	8012b64 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012b60:	2301      	movs	r3, #1
 8012b62:	e046      	b.n	8012bf2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012b64:	1cfb      	adds	r3, r7, #3
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	b25b      	sxtb	r3, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	da0f      	bge.n	8012b8e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012b6e:	1cfb      	adds	r3, r7, #3
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	2207      	movs	r2, #7
 8012b74:	4013      	ands	r3, r2
 8012b76:	1c5a      	adds	r2, r3, #1
 8012b78:	0013      	movs	r3, r2
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	189b      	adds	r3, r3, r2
 8012b7e:	00db      	lsls	r3, r3, #3
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	18d3      	adds	r3, r2, r3
 8012b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	2201      	movs	r2, #1
 8012b8a:	705a      	strb	r2, [r3, #1]
 8012b8c:	e00d      	b.n	8012baa <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012b8e:	1cfb      	adds	r3, r7, #3
 8012b90:	781a      	ldrb	r2, [r3, #0]
 8012b92:	0013      	movs	r3, r2
 8012b94:	009b      	lsls	r3, r3, #2
 8012b96:	189b      	adds	r3, r3, r2
 8012b98:	00db      	lsls	r3, r3, #3
 8012b9a:	3369      	adds	r3, #105	@ 0x69
 8012b9c:	33ff      	adds	r3, #255	@ 0xff
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	18d3      	adds	r3, r2, r3
 8012ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2201      	movs	r2, #1
 8012bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012bb0:	1cfb      	adds	r3, r7, #3
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2207      	movs	r2, #7
 8012bb6:	4013      	ands	r3, r2
 8012bb8:	b2da      	uxtb	r2, r3
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	23aa      	movs	r3, #170	@ 0xaa
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	5cd3      	ldrb	r3, [r2, r3]
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d101      	bne.n	8012bce <HAL_PCD_EP_SetStall+0x8c>
 8012bca:	2302      	movs	r3, #2
 8012bcc:	e011      	b.n	8012bf2 <HAL_PCD_EP_SetStall+0xb0>
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	23aa      	movs	r3, #170	@ 0xaa
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	2101      	movs	r1, #1
 8012bd6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	68fa      	ldr	r2, [r7, #12]
 8012bde:	0011      	movs	r1, r2
 8012be0:	0018      	movs	r0, r3
 8012be2:	f007 f989 	bl	8019ef8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8012be6:	687a      	ldr	r2, [r7, #4]
 8012be8:	23aa      	movs	r3, #170	@ 0xaa
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	2100      	movs	r1, #0
 8012bee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012bf0:	2300      	movs	r3, #0
}
 8012bf2:	0018      	movs	r0, r3
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	b004      	add	sp, #16
 8012bf8:	bd80      	pop	{r7, pc}

08012bfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012bfa:	b580      	push	{r7, lr}
 8012bfc:	b084      	sub	sp, #16
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	6078      	str	r0, [r7, #4]
 8012c02:	000a      	movs	r2, r1
 8012c04:	1cfb      	adds	r3, r7, #3
 8012c06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012c08:	1cfb      	adds	r3, r7, #3
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	220f      	movs	r2, #15
 8012c0e:	401a      	ands	r2, r3
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d901      	bls.n	8012c1c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e048      	b.n	8012cae <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012c1c:	1cfb      	adds	r3, r7, #3
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	b25b      	sxtb	r3, r3
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	da0f      	bge.n	8012c46 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012c26:	1cfb      	adds	r3, r7, #3
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2207      	movs	r2, #7
 8012c2c:	4013      	ands	r3, r2
 8012c2e:	1c5a      	adds	r2, r3, #1
 8012c30:	0013      	movs	r3, r2
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	189b      	adds	r3, r3, r2
 8012c36:	00db      	lsls	r3, r3, #3
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	18d3      	adds	r3, r2, r3
 8012c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	2201      	movs	r2, #1
 8012c42:	705a      	strb	r2, [r3, #1]
 8012c44:	e00f      	b.n	8012c66 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012c46:	1cfb      	adds	r3, r7, #3
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	2207      	movs	r2, #7
 8012c4c:	401a      	ands	r2, r3
 8012c4e:	0013      	movs	r3, r2
 8012c50:	009b      	lsls	r3, r3, #2
 8012c52:	189b      	adds	r3, r3, r2
 8012c54:	00db      	lsls	r3, r3, #3
 8012c56:	3369      	adds	r3, #105	@ 0x69
 8012c58:	33ff      	adds	r3, #255	@ 0xff
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	18d3      	adds	r3, r2, r3
 8012c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2200      	movs	r2, #0
 8012c64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012c6c:	1cfb      	adds	r3, r7, #3
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	2207      	movs	r2, #7
 8012c72:	4013      	ands	r3, r2
 8012c74:	b2da      	uxtb	r2, r3
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	23aa      	movs	r3, #170	@ 0xaa
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	5cd3      	ldrb	r3, [r2, r3]
 8012c82:	2b01      	cmp	r3, #1
 8012c84:	d101      	bne.n	8012c8a <HAL_PCD_EP_ClrStall+0x90>
 8012c86:	2302      	movs	r3, #2
 8012c88:	e011      	b.n	8012cae <HAL_PCD_EP_ClrStall+0xb4>
 8012c8a:	687a      	ldr	r2, [r7, #4]
 8012c8c:	23aa      	movs	r3, #170	@ 0xaa
 8012c8e:	009b      	lsls	r3, r3, #2
 8012c90:	2101      	movs	r1, #1
 8012c92:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	68fa      	ldr	r2, [r7, #12]
 8012c9a:	0011      	movs	r1, r2
 8012c9c:	0018      	movs	r0, r3
 8012c9e:	f007 f97b 	bl	8019f98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012ca2:	687a      	ldr	r2, [r7, #4]
 8012ca4:	23aa      	movs	r3, #170	@ 0xaa
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	2100      	movs	r1, #0
 8012caa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012cac:	2300      	movs	r3, #0
}
 8012cae:	0018      	movs	r0, r3
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	b004      	add	sp, #16
 8012cb4:	bd80      	pop	{r7, pc}
	...

08012cb8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8012cb8:	b5b0      	push	{r4, r5, r7, lr}
 8012cba:	b096      	sub	sp, #88	@ 0x58
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012cc0:	f000 fbec 	bl	801349c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	204e      	movs	r0, #78	@ 0x4e
 8012cca:	183b      	adds	r3, r7, r0
 8012ccc:	2144      	movs	r1, #68	@ 0x44
 8012cce:	5a52      	ldrh	r2, [r2, r1]
 8012cd0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8012cd2:	183b      	adds	r3, r7, r0
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	b2da      	uxtb	r2, r3
 8012cd8:	244d      	movs	r4, #77	@ 0x4d
 8012cda:	193b      	adds	r3, r7, r4
 8012cdc:	210f      	movs	r1, #15
 8012cde:	400a      	ands	r2, r1
 8012ce0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8012ce2:	193b      	adds	r3, r7, r4
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d000      	beq.n	8012cec <PCD_EP_ISR_Handler+0x34>
 8012cea:	e18f      	b.n	801300c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012cec:	183b      	adds	r3, r7, r0
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	2210      	movs	r2, #16
 8012cf2:	4013      	ands	r3, r2
 8012cf4:	d155      	bne.n	8012da2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	881b      	ldrh	r3, [r3, #0]
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	200e      	movs	r0, #14
 8012d00:	183b      	adds	r3, r7, r0
 8012d02:	49bb      	ldr	r1, [pc, #748]	@ (8012ff0 <PCD_EP_ISR_Handler+0x338>)
 8012d04:	400a      	ands	r2, r1
 8012d06:	801a      	strh	r2, [r3, #0]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	183a      	adds	r2, r7, r0
 8012d0e:	8812      	ldrh	r2, [r2, #0]
 8012d10:	49b8      	ldr	r1, [pc, #736]	@ (8012ff4 <PCD_EP_ISR_Handler+0x33c>)
 8012d12:	430a      	orrs	r2, r1
 8012d14:	b292      	uxth	r2, r2
 8012d16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	3328      	adds	r3, #40	@ 0x28
 8012d1c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2250      	movs	r2, #80	@ 0x50
 8012d24:	5a9b      	ldrh	r3, [r3, r2]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	001a      	movs	r2, r3
 8012d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d2c:	781b      	ldrb	r3, [r3, #0]
 8012d2e:	00db      	lsls	r3, r3, #3
 8012d30:	18d2      	adds	r2, r2, r3
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	18d3      	adds	r3, r2, r3
 8012d38:	4aaf      	ldr	r2, [pc, #700]	@ (8012ff8 <PCD_EP_ISR_Handler+0x340>)
 8012d3a:	4694      	mov	ip, r2
 8012d3c:	4463      	add	r3, ip
 8012d3e:	881b      	ldrh	r3, [r3, #0]
 8012d40:	059b      	lsls	r3, r3, #22
 8012d42:	0d9a      	lsrs	r2, r3, #22
 8012d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8012d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d4a:	695a      	ldr	r2, [r3, #20]
 8012d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d4e:	69db      	ldr	r3, [r3, #28]
 8012d50:	18d2      	adds	r2, r2, r3
 8012d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d54:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2100      	movs	r1, #0
 8012d5a:	0018      	movs	r0, r3
 8012d5c:	f009 fa8a 	bl	801c274 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2224      	movs	r2, #36	@ 0x24
 8012d64:	5c9b      	ldrb	r3, [r3, r2]
 8012d66:	b2db      	uxtb	r3, r3
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d101      	bne.n	8012d70 <PCD_EP_ISR_Handler+0xb8>
 8012d6c:	f000 fb96 	bl	801349c <PCD_EP_ISR_Handler+0x7e4>
 8012d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d72:	699b      	ldr	r3, [r3, #24]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d001      	beq.n	8012d7c <PCD_EP_ISR_Handler+0xc4>
 8012d78:	f000 fb90 	bl	801349c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2224      	movs	r2, #36	@ 0x24
 8012d80:	5c9b      	ldrb	r3, [r3, r2]
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	2280      	movs	r2, #128	@ 0x80
 8012d86:	4252      	negs	r2, r2
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	b2da      	uxtb	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	0011      	movs	r1, r2
 8012d92:	224c      	movs	r2, #76	@ 0x4c
 8012d94:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2224      	movs	r2, #36	@ 0x24
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	5499      	strb	r1, [r3, r2]
 8012d9e:	f000 fb7d 	bl	801349c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	3369      	adds	r3, #105	@ 0x69
 8012da6:	33ff      	adds	r3, #255	@ 0xff
 8012da8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	214a      	movs	r1, #74	@ 0x4a
 8012db0:	187b      	adds	r3, r7, r1
 8012db2:	8812      	ldrh	r2, [r2, #0]
 8012db4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8012db6:	187b      	adds	r3, r7, r1
 8012db8:	881a      	ldrh	r2, [r3, #0]
 8012dba:	2380      	movs	r3, #128	@ 0x80
 8012dbc:	011b      	lsls	r3, r3, #4
 8012dbe:	4013      	ands	r3, r2
 8012dc0:	d037      	beq.n	8012e32 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	2250      	movs	r2, #80	@ 0x50
 8012dc8:	5a9b      	ldrh	r3, [r3, r2]
 8012dca:	b29b      	uxth	r3, r3
 8012dcc:	001a      	movs	r2, r3
 8012dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	00db      	lsls	r3, r3, #3
 8012dd4:	18d2      	adds	r2, r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	18d3      	adds	r3, r2, r3
 8012ddc:	4a87      	ldr	r2, [pc, #540]	@ (8012ffc <PCD_EP_ISR_Handler+0x344>)
 8012dde:	4694      	mov	ip, r2
 8012de0:	4463      	add	r3, ip
 8012de2:	881b      	ldrh	r3, [r3, #0]
 8012de4:	059b      	lsls	r3, r3, #22
 8012de6:	0d9a      	lsrs	r2, r3, #22
 8012de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6818      	ldr	r0, [r3, #0]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	22ac      	movs	r2, #172	@ 0xac
 8012df4:	0092      	lsls	r2, r2, #2
 8012df6:	1899      	adds	r1, r3, r2
 8012df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dfa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8012dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dfe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	f007 f9fc 	bl	801a1fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	881b      	ldrh	r3, [r3, #0]
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	2010      	movs	r0, #16
 8012e10:	183b      	adds	r3, r7, r0
 8012e12:	497b      	ldr	r1, [pc, #492]	@ (8013000 <PCD_EP_ISR_Handler+0x348>)
 8012e14:	400a      	ands	r2, r1
 8012e16:	801a      	strh	r2, [r3, #0]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	183a      	adds	r2, r7, r0
 8012e1e:	8812      	ldrh	r2, [r2, #0]
 8012e20:	2180      	movs	r1, #128	@ 0x80
 8012e22:	430a      	orrs	r2, r1
 8012e24:	b292      	uxth	r2, r2
 8012e26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	0018      	movs	r0, r3
 8012e2c:	f009 f9ec 	bl	801c208 <HAL_PCD_SetupStageCallback>
 8012e30:	e334      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012e32:	234a      	movs	r3, #74	@ 0x4a
 8012e34:	18fb      	adds	r3, r7, r3
 8012e36:	2200      	movs	r2, #0
 8012e38:	5e9b      	ldrsh	r3, [r3, r2]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	db00      	blt.n	8012e40 <PCD_EP_ISR_Handler+0x188>
 8012e3e:	e32d      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	881b      	ldrh	r3, [r3, #0]
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	201e      	movs	r0, #30
 8012e4a:	183b      	adds	r3, r7, r0
 8012e4c:	496c      	ldr	r1, [pc, #432]	@ (8013000 <PCD_EP_ISR_Handler+0x348>)
 8012e4e:	400a      	ands	r2, r1
 8012e50:	801a      	strh	r2, [r3, #0]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	183a      	adds	r2, r7, r0
 8012e58:	8812      	ldrh	r2, [r2, #0]
 8012e5a:	2180      	movs	r1, #128	@ 0x80
 8012e5c:	430a      	orrs	r2, r1
 8012e5e:	b292      	uxth	r2, r2
 8012e60:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	2250      	movs	r2, #80	@ 0x50
 8012e68:	5a9b      	ldrh	r3, [r3, r2]
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	001a      	movs	r2, r3
 8012e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	00db      	lsls	r3, r3, #3
 8012e74:	18d2      	adds	r2, r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	18d3      	adds	r3, r2, r3
 8012e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8012ffc <PCD_EP_ISR_Handler+0x344>)
 8012e7e:	4694      	mov	ip, r2
 8012e80:	4463      	add	r3, ip
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	059b      	lsls	r3, r3, #22
 8012e86:	0d9a      	lsrs	r2, r3, #22
 8012e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8012e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e8e:	69db      	ldr	r3, [r3, #28]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d01a      	beq.n	8012eca <PCD_EP_ISR_Handler+0x212>
 8012e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e96:	695b      	ldr	r3, [r3, #20]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d016      	beq.n	8012eca <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6818      	ldr	r0, [r3, #0]
 8012ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ea2:	6959      	ldr	r1, [r3, #20]
 8012ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ea6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8012ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eaa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	f007 f9a6 	bl	801a1fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8012eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eb4:	695a      	ldr	r2, [r3, #20]
 8012eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eb8:	69db      	ldr	r3, [r3, #28]
 8012eba:	18d2      	adds	r2, r2, r3
 8012ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ebe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	0018      	movs	r0, r3
 8012ec6:	f009 f9b4 	bl	801c232 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681a      	ldr	r2, [r3, #0]
 8012ece:	214a      	movs	r1, #74	@ 0x4a
 8012ed0:	187b      	adds	r3, r7, r1
 8012ed2:	8812      	ldrh	r2, [r2, #0]
 8012ed4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8012ed6:	187b      	adds	r3, r7, r1
 8012ed8:	881a      	ldrh	r2, [r3, #0]
 8012eda:	2380      	movs	r3, #128	@ 0x80
 8012edc:	011b      	lsls	r3, r3, #4
 8012ede:	4013      	ands	r3, r2
 8012ee0:	d000      	beq.n	8012ee4 <PCD_EP_ISR_Handler+0x22c>
 8012ee2:	e2db      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
 8012ee4:	187b      	adds	r3, r7, r1
 8012ee6:	881a      	ldrh	r2, [r3, #0]
 8012ee8:	23c0      	movs	r3, #192	@ 0xc0
 8012eea:	019b      	lsls	r3, r3, #6
 8012eec:	401a      	ands	r2, r3
 8012eee:	23c0      	movs	r3, #192	@ 0xc0
 8012ef0:	019b      	lsls	r3, r3, #6
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d100      	bne.n	8012ef8 <PCD_EP_ISR_Handler+0x240>
 8012ef6:	e2d1      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	61bb      	str	r3, [r7, #24]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2250      	movs	r2, #80	@ 0x50
 8012f04:	5a9b      	ldrh	r3, [r3, r2]
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	001a      	movs	r2, r3
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	189b      	adds	r3, r3, r2
 8012f0e:	61bb      	str	r3, [r7, #24]
 8012f10:	69bb      	ldr	r3, [r7, #24]
 8012f12:	4a3a      	ldr	r2, [pc, #232]	@ (8012ffc <PCD_EP_ISR_Handler+0x344>)
 8012f14:	4694      	mov	ip, r2
 8012f16:	4463      	add	r3, ip
 8012f18:	617b      	str	r3, [r7, #20]
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	059b      	lsls	r3, r3, #22
 8012f22:	0d9b      	lsrs	r3, r3, #22
 8012f24:	b29a      	uxth	r2, r3
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	801a      	strh	r2, [r3, #0]
 8012f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012f30:	d91a      	bls.n	8012f68 <PCD_EP_ISR_Handler+0x2b0>
 8012f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f34:	691b      	ldr	r3, [r3, #16]
 8012f36:	095b      	lsrs	r3, r3, #5
 8012f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f3c:	691b      	ldr	r3, [r3, #16]
 8012f3e:	221f      	movs	r2, #31
 8012f40:	4013      	ands	r3, r2
 8012f42:	d102      	bne.n	8012f4a <PCD_EP_ISR_Handler+0x292>
 8012f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f46:	3b01      	subs	r3, #1
 8012f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	881b      	ldrh	r3, [r3, #0]
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	029b      	lsls	r3, r3, #10
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	4313      	orrs	r3, r2
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	4a25      	ldr	r2, [pc, #148]	@ (8012ff4 <PCD_EP_ISR_Handler+0x33c>)
 8012f5e:	4313      	orrs	r3, r2
 8012f60:	b29a      	uxth	r2, r3
 8012f62:	697b      	ldr	r3, [r7, #20]
 8012f64:	801a      	strh	r2, [r3, #0]
 8012f66:	e023      	b.n	8012fb0 <PCD_EP_ISR_Handler+0x2f8>
 8012f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f6a:	691b      	ldr	r3, [r3, #16]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d108      	bne.n	8012f82 <PCD_EP_ISR_Handler+0x2ca>
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	881b      	ldrh	r3, [r3, #0]
 8012f74:	b29b      	uxth	r3, r3
 8012f76:	4a1f      	ldr	r2, [pc, #124]	@ (8012ff4 <PCD_EP_ISR_Handler+0x33c>)
 8012f78:	4313      	orrs	r3, r2
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	801a      	strh	r2, [r3, #0]
 8012f80:	e016      	b.n	8012fb0 <PCD_EP_ISR_Handler+0x2f8>
 8012f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f84:	691b      	ldr	r3, [r3, #16]
 8012f86:	085b      	lsrs	r3, r3, #1
 8012f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f8c:	691b      	ldr	r3, [r3, #16]
 8012f8e:	2201      	movs	r2, #1
 8012f90:	4013      	ands	r3, r2
 8012f92:	d002      	beq.n	8012f9a <PCD_EP_ISR_Handler+0x2e2>
 8012f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f96:	3301      	adds	r3, #1
 8012f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	881b      	ldrh	r3, [r3, #0]
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	029b      	lsls	r3, r3, #10
 8012fa6:	b29b      	uxth	r3, r3
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	881b      	ldrh	r3, [r3, #0]
 8012fb6:	b29a      	uxth	r2, r3
 8012fb8:	2012      	movs	r0, #18
 8012fba:	183b      	adds	r3, r7, r0
 8012fbc:	4911      	ldr	r1, [pc, #68]	@ (8013004 <PCD_EP_ISR_Handler+0x34c>)
 8012fbe:	400a      	ands	r2, r1
 8012fc0:	801a      	strh	r2, [r3, #0]
 8012fc2:	183b      	adds	r3, r7, r0
 8012fc4:	183a      	adds	r2, r7, r0
 8012fc6:	8812      	ldrh	r2, [r2, #0]
 8012fc8:	2180      	movs	r1, #128	@ 0x80
 8012fca:	0149      	lsls	r1, r1, #5
 8012fcc:	404a      	eors	r2, r1
 8012fce:	801a      	strh	r2, [r3, #0]
 8012fd0:	183b      	adds	r3, r7, r0
 8012fd2:	183a      	adds	r2, r7, r0
 8012fd4:	8812      	ldrh	r2, [r2, #0]
 8012fd6:	2180      	movs	r1, #128	@ 0x80
 8012fd8:	0189      	lsls	r1, r1, #6
 8012fda:	404a      	eors	r2, r1
 8012fdc:	801a      	strh	r2, [r3, #0]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	183a      	adds	r2, r7, r0
 8012fe4:	8812      	ldrh	r2, [r2, #0]
 8012fe6:	4908      	ldr	r1, [pc, #32]	@ (8013008 <PCD_EP_ISR_Handler+0x350>)
 8012fe8:	430a      	orrs	r2, r1
 8012fea:	b292      	uxth	r2, r2
 8012fec:	801a      	strh	r2, [r3, #0]
 8012fee:	e255      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
 8012ff0:	ffff8f0f 	.word	0xffff8f0f
 8012ff4:	ffff8000 	.word	0xffff8000
 8012ff8:	00000402 	.word	0x00000402
 8012ffc:	00000406 	.word	0x00000406
 8013000:	00000f8f 	.word	0x00000f8f
 8013004:	ffffbf8f 	.word	0xffffbf8f
 8013008:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	001a      	movs	r2, r3
 8013012:	204d      	movs	r0, #77	@ 0x4d
 8013014:	183b      	adds	r3, r7, r0
 8013016:	781b      	ldrb	r3, [r3, #0]
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	18d2      	adds	r2, r2, r3
 801301c:	214a      	movs	r1, #74	@ 0x4a
 801301e:	187b      	adds	r3, r7, r1
 8013020:	8812      	ldrh	r2, [r2, #0]
 8013022:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013024:	187b      	adds	r3, r7, r1
 8013026:	2200      	movs	r2, #0
 8013028:	5e9b      	ldrsh	r3, [r3, r2]
 801302a:	2b00      	cmp	r3, #0
 801302c:	db00      	blt.n	8013030 <PCD_EP_ISR_Handler+0x378>
 801302e:	e0fa      	b.n	8013226 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	001a      	movs	r2, r3
 8013036:	183b      	adds	r3, r7, r0
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	18d3      	adds	r3, r2, r3
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	b29a      	uxth	r2, r3
 8013042:	2448      	movs	r4, #72	@ 0x48
 8013044:	193b      	adds	r3, r7, r4
 8013046:	49d1      	ldr	r1, [pc, #836]	@ (801338c <PCD_EP_ISR_Handler+0x6d4>)
 8013048:	400a      	ands	r2, r1
 801304a:	801a      	strh	r2, [r3, #0]
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	001a      	movs	r2, r3
 8013052:	183b      	adds	r3, r7, r0
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	009b      	lsls	r3, r3, #2
 8013058:	18d3      	adds	r3, r2, r3
 801305a:	193a      	adds	r2, r7, r4
 801305c:	8812      	ldrh	r2, [r2, #0]
 801305e:	2180      	movs	r1, #128	@ 0x80
 8013060:	430a      	orrs	r2, r1
 8013062:	b292      	uxth	r2, r2
 8013064:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013066:	183b      	adds	r3, r7, r0
 8013068:	781a      	ldrb	r2, [r3, #0]
 801306a:	0013      	movs	r3, r2
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	189b      	adds	r3, r3, r2
 8013070:	00db      	lsls	r3, r3, #3
 8013072:	3369      	adds	r3, #105	@ 0x69
 8013074:	33ff      	adds	r3, #255	@ 0xff
 8013076:	687a      	ldr	r2, [r7, #4]
 8013078:	18d3      	adds	r3, r2, r3
 801307a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801307e:	7b1b      	ldrb	r3, [r3, #12]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d125      	bne.n	80130d0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	2250      	movs	r2, #80	@ 0x50
 801308a:	5a9b      	ldrh	r3, [r3, r2]
 801308c:	b29b      	uxth	r3, r3
 801308e:	001a      	movs	r2, r3
 8013090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	00db      	lsls	r3, r3, #3
 8013096:	18d2      	adds	r2, r2, r3
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	18d3      	adds	r3, r2, r3
 801309e:	4abc      	ldr	r2, [pc, #752]	@ (8013390 <PCD_EP_ISR_Handler+0x6d8>)
 80130a0:	4694      	mov	ip, r2
 80130a2:	4463      	add	r3, ip
 80130a4:	881a      	ldrh	r2, [r3, #0]
 80130a6:	2450      	movs	r4, #80	@ 0x50
 80130a8:	193b      	adds	r3, r7, r4
 80130aa:	0592      	lsls	r2, r2, #22
 80130ac:	0d92      	lsrs	r2, r2, #22
 80130ae:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80130b0:	193b      	adds	r3, r7, r4
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d100      	bne.n	80130ba <PCD_EP_ISR_Handler+0x402>
 80130b8:	e08d      	b.n	80131d6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	6818      	ldr	r0, [r3, #0]
 80130be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130c0:	6959      	ldr	r1, [r3, #20]
 80130c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130c4:	88da      	ldrh	r2, [r3, #6]
 80130c6:	193b      	adds	r3, r7, r4
 80130c8:	881b      	ldrh	r3, [r3, #0]
 80130ca:	f007 f898 	bl	801a1fe <USB_ReadPMA>
 80130ce:	e082      	b.n	80131d6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80130d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130d2:	78db      	ldrb	r3, [r3, #3]
 80130d4:	2b02      	cmp	r3, #2
 80130d6:	d10c      	bne.n	80130f2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80130d8:	2350      	movs	r3, #80	@ 0x50
 80130da:	18fc      	adds	r4, r7, r3
 80130dc:	234a      	movs	r3, #74	@ 0x4a
 80130de:	18fb      	adds	r3, r7, r3
 80130e0:	881a      	ldrh	r2, [r3, #0]
 80130e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	0018      	movs	r0, r3
 80130e8:	f000 f9ec 	bl	80134c4 <HAL_PCD_EP_DB_Receive>
 80130ec:	0003      	movs	r3, r0
 80130ee:	8023      	strh	r3, [r4, #0]
 80130f0:	e071      	b.n	80131d6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	001a      	movs	r2, r3
 80130f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	18d3      	adds	r3, r2, r3
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	b29a      	uxth	r2, r3
 8013104:	2052      	movs	r0, #82	@ 0x52
 8013106:	183b      	adds	r3, r7, r0
 8013108:	49a2      	ldr	r1, [pc, #648]	@ (8013394 <PCD_EP_ISR_Handler+0x6dc>)
 801310a:	400a      	ands	r2, r1
 801310c:	801a      	strh	r2, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	001a      	movs	r2, r3
 8013114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	18d3      	adds	r3, r2, r3
 801311c:	183a      	adds	r2, r7, r0
 801311e:	8812      	ldrh	r2, [r2, #0]
 8013120:	499d      	ldr	r1, [pc, #628]	@ (8013398 <PCD_EP_ISR_Handler+0x6e0>)
 8013122:	430a      	orrs	r2, r1
 8013124:	b292      	uxth	r2, r2
 8013126:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	001a      	movs	r2, r3
 801312e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	009b      	lsls	r3, r3, #2
 8013134:	18d3      	adds	r3, r2, r3
 8013136:	881b      	ldrh	r3, [r3, #0]
 8013138:	b29b      	uxth	r3, r3
 801313a:	001a      	movs	r2, r3
 801313c:	2380      	movs	r3, #128	@ 0x80
 801313e:	01db      	lsls	r3, r3, #7
 8013140:	4013      	ands	r3, r2
 8013142:	d024      	beq.n	801318e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	2250      	movs	r2, #80	@ 0x50
 801314a:	5a9b      	ldrh	r3, [r3, r2]
 801314c:	b29b      	uxth	r3, r3
 801314e:	001a      	movs	r2, r3
 8013150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	00db      	lsls	r3, r3, #3
 8013156:	18d2      	adds	r2, r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	18d3      	adds	r3, r2, r3
 801315e:	4a8f      	ldr	r2, [pc, #572]	@ (801339c <PCD_EP_ISR_Handler+0x6e4>)
 8013160:	4694      	mov	ip, r2
 8013162:	4463      	add	r3, ip
 8013164:	881a      	ldrh	r2, [r3, #0]
 8013166:	2450      	movs	r4, #80	@ 0x50
 8013168:	193b      	adds	r3, r7, r4
 801316a:	0592      	lsls	r2, r2, #22
 801316c:	0d92      	lsrs	r2, r2, #22
 801316e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013170:	193b      	adds	r3, r7, r4
 8013172:	881b      	ldrh	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d02e      	beq.n	80131d6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6818      	ldr	r0, [r3, #0]
 801317c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801317e:	6959      	ldr	r1, [r3, #20]
 8013180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013182:	891a      	ldrh	r2, [r3, #8]
 8013184:	193b      	adds	r3, r7, r4
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	f007 f839 	bl	801a1fe <USB_ReadPMA>
 801318c:	e023      	b.n	80131d6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2250      	movs	r2, #80	@ 0x50
 8013194:	5a9b      	ldrh	r3, [r3, r2]
 8013196:	b29b      	uxth	r3, r3
 8013198:	001a      	movs	r2, r3
 801319a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	00db      	lsls	r3, r3, #3
 80131a0:	18d2      	adds	r2, r2, r3
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	18d3      	adds	r3, r2, r3
 80131a8:	4a79      	ldr	r2, [pc, #484]	@ (8013390 <PCD_EP_ISR_Handler+0x6d8>)
 80131aa:	4694      	mov	ip, r2
 80131ac:	4463      	add	r3, ip
 80131ae:	881a      	ldrh	r2, [r3, #0]
 80131b0:	2450      	movs	r4, #80	@ 0x50
 80131b2:	193b      	adds	r3, r7, r4
 80131b4:	0592      	lsls	r2, r2, #22
 80131b6:	0d92      	lsrs	r2, r2, #22
 80131b8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80131ba:	193b      	adds	r3, r7, r4
 80131bc:	881b      	ldrh	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d009      	beq.n	80131d6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6818      	ldr	r0, [r3, #0]
 80131c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131c8:	6959      	ldr	r1, [r3, #20]
 80131ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131cc:	895a      	ldrh	r2, [r3, #10]
 80131ce:	193b      	adds	r3, r7, r4
 80131d0:	881b      	ldrh	r3, [r3, #0]
 80131d2:	f007 f814 	bl	801a1fe <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80131d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131d8:	69da      	ldr	r2, [r3, #28]
 80131da:	2150      	movs	r1, #80	@ 0x50
 80131dc:	187b      	adds	r3, r7, r1
 80131de:	881b      	ldrh	r3, [r3, #0]
 80131e0:	18d2      	adds	r2, r2, r3
 80131e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80131e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131e8:	695a      	ldr	r2, [r3, #20]
 80131ea:	187b      	adds	r3, r7, r1
 80131ec:	881b      	ldrh	r3, [r3, #0]
 80131ee:	18d2      	adds	r2, r2, r3
 80131f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80131f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f6:	699b      	ldr	r3, [r3, #24]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d005      	beq.n	8013208 <PCD_EP_ISR_Handler+0x550>
 80131fc:	187b      	adds	r3, r7, r1
 80131fe:	881a      	ldrh	r2, [r3, #0]
 8013200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013202:	691b      	ldr	r3, [r3, #16]
 8013204:	429a      	cmp	r2, r3
 8013206:	d207      	bcs.n	8013218 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8013208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801320a:	781a      	ldrb	r2, [r3, #0]
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	0011      	movs	r1, r2
 8013210:	0018      	movs	r0, r3
 8013212:	f009 f80e 	bl	801c232 <HAL_PCD_DataOutStageCallback>
 8013216:	e006      	b.n	8013226 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801321e:	0011      	movs	r1, r2
 8013220:	0018      	movs	r0, r3
 8013222:	f005 fd31 	bl	8018c88 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8013226:	244a      	movs	r4, #74	@ 0x4a
 8013228:	193b      	adds	r3, r7, r4
 801322a:	881b      	ldrh	r3, [r3, #0]
 801322c:	2280      	movs	r2, #128	@ 0x80
 801322e:	4013      	ands	r3, r2
 8013230:	d100      	bne.n	8013234 <PCD_EP_ISR_Handler+0x57c>
 8013232:	e133      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8013234:	204d      	movs	r0, #77	@ 0x4d
 8013236:	183b      	adds	r3, r7, r0
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	1c5a      	adds	r2, r3, #1
 801323c:	0013      	movs	r3, r2
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	189b      	adds	r3, r3, r2
 8013242:	00db      	lsls	r3, r3, #3
 8013244:	687a      	ldr	r2, [r7, #4]
 8013246:	18d3      	adds	r3, r2, r3
 8013248:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	001a      	movs	r2, r3
 8013250:	183b      	adds	r3, r7, r0
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	18d3      	adds	r3, r2, r3
 8013258:	881b      	ldrh	r3, [r3, #0]
 801325a:	b29a      	uxth	r2, r3
 801325c:	2542      	movs	r5, #66	@ 0x42
 801325e:	197b      	adds	r3, r7, r5
 8013260:	494f      	ldr	r1, [pc, #316]	@ (80133a0 <PCD_EP_ISR_Handler+0x6e8>)
 8013262:	400a      	ands	r2, r1
 8013264:	801a      	strh	r2, [r3, #0]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	001a      	movs	r2, r3
 801326c:	183b      	adds	r3, r7, r0
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	009b      	lsls	r3, r3, #2
 8013272:	18d3      	adds	r3, r2, r3
 8013274:	197a      	adds	r2, r7, r5
 8013276:	8812      	ldrh	r2, [r2, #0]
 8013278:	494a      	ldr	r1, [pc, #296]	@ (80133a4 <PCD_EP_ISR_Handler+0x6ec>)
 801327a:	430a      	orrs	r2, r1
 801327c:	b292      	uxth	r2, r2
 801327e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013282:	78db      	ldrb	r3, [r3, #3]
 8013284:	2b01      	cmp	r3, #1
 8013286:	d000      	beq.n	801328a <PCD_EP_ISR_Handler+0x5d2>
 8013288:	e0af      	b.n	80133ea <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801328a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801328c:	2200      	movs	r2, #0
 801328e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013292:	7b1b      	ldrb	r3, [r3, #12]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d100      	bne.n	801329a <PCD_EP_ISR_Handler+0x5e2>
 8013298:	e09f      	b.n	80133da <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801329a:	193b      	adds	r3, r7, r4
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	2240      	movs	r2, #64	@ 0x40
 80132a0:	4013      	ands	r3, r2
 80132a2:	d046      	beq.n	8013332 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80132a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132a6:	785b      	ldrb	r3, [r3, #1]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d125      	bne.n	80132f8 <PCD_EP_ISR_Handler+0x640>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2250      	movs	r2, #80	@ 0x50
 80132b8:	5a9b      	ldrh	r3, [r3, r2]
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	001a      	movs	r2, r3
 80132be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132c0:	189b      	adds	r3, r3, r2
 80132c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80132c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	00da      	lsls	r2, r3, #3
 80132ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132cc:	18d3      	adds	r3, r2, r3
 80132ce:	4a33      	ldr	r2, [pc, #204]	@ (801339c <PCD_EP_ISR_Handler+0x6e4>)
 80132d0:	4694      	mov	ip, r2
 80132d2:	4463      	add	r3, ip
 80132d4:	623b      	str	r3, [r7, #32]
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	881b      	ldrh	r3, [r3, #0]
 80132da:	b29b      	uxth	r3, r3
 80132dc:	059b      	lsls	r3, r3, #22
 80132de:	0d9b      	lsrs	r3, r3, #22
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	6a3b      	ldr	r3, [r7, #32]
 80132e4:	801a      	strh	r2, [r3, #0]
 80132e6:	6a3b      	ldr	r3, [r7, #32]
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	4a2d      	ldr	r2, [pc, #180]	@ (80133a4 <PCD_EP_ISR_Handler+0x6ec>)
 80132ee:	4313      	orrs	r3, r2
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	6a3b      	ldr	r3, [r7, #32]
 80132f4:	801a      	strh	r2, [r3, #0]
 80132f6:	e070      	b.n	80133da <PCD_EP_ISR_Handler+0x722>
 80132f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132fa:	785b      	ldrb	r3, [r3, #1]
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d16c      	bne.n	80133da <PCD_EP_ISR_Handler+0x722>
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	2250      	movs	r2, #80	@ 0x50
 801330c:	5a9b      	ldrh	r3, [r3, r2]
 801330e:	b29b      	uxth	r3, r3
 8013310:	001a      	movs	r2, r3
 8013312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013314:	189b      	adds	r3, r3, r2
 8013316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	00da      	lsls	r2, r3, #3
 801331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013320:	18d3      	adds	r3, r2, r3
 8013322:	4a1e      	ldr	r2, [pc, #120]	@ (801339c <PCD_EP_ISR_Handler+0x6e4>)
 8013324:	4694      	mov	ip, r2
 8013326:	4463      	add	r3, ip
 8013328:	62bb      	str	r3, [r7, #40]	@ 0x28
 801332a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801332c:	2200      	movs	r2, #0
 801332e:	801a      	strh	r2, [r3, #0]
 8013330:	e053      	b.n	80133da <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801333a:	785b      	ldrb	r3, [r3, #1]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d133      	bne.n	80133a8 <PCD_EP_ISR_Handler+0x6f0>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	637b      	str	r3, [r7, #52]	@ 0x34
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2250      	movs	r2, #80	@ 0x50
 801334c:	5a9b      	ldrh	r3, [r3, r2]
 801334e:	b29b      	uxth	r3, r3
 8013350:	001a      	movs	r2, r3
 8013352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013354:	189b      	adds	r3, r3, r2
 8013356:	637b      	str	r3, [r7, #52]	@ 0x34
 8013358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	00da      	lsls	r2, r3, #3
 801335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013360:	18d3      	adds	r3, r2, r3
 8013362:	4a0b      	ldr	r2, [pc, #44]	@ (8013390 <PCD_EP_ISR_Handler+0x6d8>)
 8013364:	4694      	mov	ip, r2
 8013366:	4463      	add	r3, ip
 8013368:	633b      	str	r3, [r7, #48]	@ 0x30
 801336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801336c:	881b      	ldrh	r3, [r3, #0]
 801336e:	b29b      	uxth	r3, r3
 8013370:	059b      	lsls	r3, r3, #22
 8013372:	0d9b      	lsrs	r3, r3, #22
 8013374:	b29a      	uxth	r2, r3
 8013376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013378:	801a      	strh	r2, [r3, #0]
 801337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	b29b      	uxth	r3, r3
 8013380:	4a08      	ldr	r2, [pc, #32]	@ (80133a4 <PCD_EP_ISR_Handler+0x6ec>)
 8013382:	4313      	orrs	r3, r2
 8013384:	b29a      	uxth	r2, r3
 8013386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013388:	801a      	strh	r2, [r3, #0]
 801338a:	e026      	b.n	80133da <PCD_EP_ISR_Handler+0x722>
 801338c:	00000f8f 	.word	0x00000f8f
 8013390:	00000406 	.word	0x00000406
 8013394:	ffff8f8f 	.word	0xffff8f8f
 8013398:	ffff80c0 	.word	0xffff80c0
 801339c:	00000402 	.word	0x00000402
 80133a0:	ffff8f0f 	.word	0xffff8f0f
 80133a4:	ffff8000 	.word	0xffff8000
 80133a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133aa:	785b      	ldrb	r3, [r3, #1]
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d114      	bne.n	80133da <PCD_EP_ISR_Handler+0x722>
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2250      	movs	r2, #80	@ 0x50
 80133b6:	5a9b      	ldrh	r3, [r3, r2]
 80133b8:	b29b      	uxth	r3, r3
 80133ba:	001a      	movs	r2, r3
 80133bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133be:	189b      	adds	r3, r3, r2
 80133c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	00da      	lsls	r2, r3, #3
 80133c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133ca:	18d3      	adds	r3, r2, r3
 80133cc:	4a3b      	ldr	r2, [pc, #236]	@ (80134bc <PCD_EP_ISR_Handler+0x804>)
 80133ce:	4694      	mov	ip, r2
 80133d0:	4463      	add	r3, ip
 80133d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80133d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133d6:	2200      	movs	r2, #0
 80133d8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80133da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133dc:	781a      	ldrb	r2, [r3, #0]
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	0011      	movs	r1, r2
 80133e2:	0018      	movs	r0, r3
 80133e4:	f008 ff46 	bl	801c274 <HAL_PCD_DataInStageCallback>
 80133e8:	e058      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80133ea:	234a      	movs	r3, #74	@ 0x4a
 80133ec:	18fb      	adds	r3, r7, r3
 80133ee:	881a      	ldrh	r2, [r3, #0]
 80133f0:	2380      	movs	r3, #128	@ 0x80
 80133f2:	005b      	lsls	r3, r3, #1
 80133f4:	4013      	ands	r3, r2
 80133f6:	d149      	bne.n	801348c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2250      	movs	r2, #80	@ 0x50
 80133fe:	5a9b      	ldrh	r3, [r3, r2]
 8013400:	b29b      	uxth	r3, r3
 8013402:	001a      	movs	r2, r3
 8013404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	00db      	lsls	r3, r3, #3
 801340a:	18d2      	adds	r2, r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	18d3      	adds	r3, r2, r3
 8013412:	4a2b      	ldr	r2, [pc, #172]	@ (80134c0 <PCD_EP_ISR_Handler+0x808>)
 8013414:	4694      	mov	ip, r2
 8013416:	4463      	add	r3, ip
 8013418:	881a      	ldrh	r2, [r3, #0]
 801341a:	2140      	movs	r1, #64	@ 0x40
 801341c:	187b      	adds	r3, r7, r1
 801341e:	0592      	lsls	r2, r2, #22
 8013420:	0d92      	lsrs	r2, r2, #22
 8013422:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8013424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013426:	699a      	ldr	r2, [r3, #24]
 8013428:	187b      	adds	r3, r7, r1
 801342a:	881b      	ldrh	r3, [r3, #0]
 801342c:	429a      	cmp	r2, r3
 801342e:	d907      	bls.n	8013440 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8013430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013432:	699a      	ldr	r2, [r3, #24]
 8013434:	187b      	adds	r3, r7, r1
 8013436:	881b      	ldrh	r3, [r3, #0]
 8013438:	1ad2      	subs	r2, r2, r3
 801343a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801343c:	619a      	str	r2, [r3, #24]
 801343e:	e002      	b.n	8013446 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8013440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013442:	2200      	movs	r2, #0
 8013444:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8013446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013448:	699b      	ldr	r3, [r3, #24]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d107      	bne.n	801345e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801344e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013450:	781a      	ldrb	r2, [r3, #0]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	0011      	movs	r1, r2
 8013456:	0018      	movs	r0, r3
 8013458:	f008 ff0c 	bl	801c274 <HAL_PCD_DataInStageCallback>
 801345c:	e01e      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013460:	695a      	ldr	r2, [r3, #20]
 8013462:	2140      	movs	r1, #64	@ 0x40
 8013464:	187b      	adds	r3, r7, r1
 8013466:	881b      	ldrh	r3, [r3, #0]
 8013468:	18d2      	adds	r2, r2, r3
 801346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801346c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013470:	69da      	ldr	r2, [r3, #28]
 8013472:	187b      	adds	r3, r7, r1
 8013474:	881b      	ldrh	r3, [r3, #0]
 8013476:	18d2      	adds	r2, r2, r3
 8013478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801347a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013482:	0011      	movs	r1, r2
 8013484:	0018      	movs	r0, r3
 8013486:	f005 fbff 	bl	8018c88 <USB_EPStartXfer>
 801348a:	e007      	b.n	801349c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801348c:	234a      	movs	r3, #74	@ 0x4a
 801348e:	18fb      	adds	r3, r7, r3
 8013490:	881a      	ldrh	r2, [r3, #0]
 8013492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	0018      	movs	r0, r3
 8013498:	f000 f930 	bl	80136fc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2244      	movs	r2, #68	@ 0x44
 80134a2:	5a9b      	ldrh	r3, [r3, r2]
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	b21b      	sxth	r3, r3
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	da01      	bge.n	80134b0 <PCD_EP_ISR_Handler+0x7f8>
 80134ac:	f7ff fc0a 	bl	8012cc4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80134b0:	2300      	movs	r3, #0
}
 80134b2:	0018      	movs	r0, r3
 80134b4:	46bd      	mov	sp, r7
 80134b6:	b016      	add	sp, #88	@ 0x58
 80134b8:	bdb0      	pop	{r4, r5, r7, pc}
 80134ba:	46c0      	nop			@ (mov r8, r8)
 80134bc:	00000406 	.word	0x00000406
 80134c0:	00000402 	.word	0x00000402

080134c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80134c4:	b590      	push	{r4, r7, lr}
 80134c6:	b089      	sub	sp, #36	@ 0x24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	1dbb      	adds	r3, r7, #6
 80134d0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80134d2:	1dbb      	adds	r3, r7, #6
 80134d4:	881a      	ldrh	r2, [r3, #0]
 80134d6:	2380      	movs	r3, #128	@ 0x80
 80134d8:	01db      	lsls	r3, r3, #7
 80134da:	4013      	ands	r3, r2
 80134dc:	d100      	bne.n	80134e0 <HAL_PCD_EP_DB_Receive+0x1c>
 80134de:	e07d      	b.n	80135dc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2250      	movs	r2, #80	@ 0x50
 80134e6:	5a9b      	ldrh	r3, [r3, r2]
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	001a      	movs	r2, r3
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	00db      	lsls	r3, r3, #3
 80134f2:	18d2      	adds	r2, r2, r3
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	18d3      	adds	r3, r2, r3
 80134fa:	4a7a      	ldr	r2, [pc, #488]	@ (80136e4 <HAL_PCD_EP_DB_Receive+0x220>)
 80134fc:	4694      	mov	ip, r2
 80134fe:	4463      	add	r3, ip
 8013500:	881a      	ldrh	r2, [r3, #0]
 8013502:	211a      	movs	r1, #26
 8013504:	187b      	adds	r3, r7, r1
 8013506:	0592      	lsls	r2, r2, #22
 8013508:	0d92      	lsrs	r2, r2, #22
 801350a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	699a      	ldr	r2, [r3, #24]
 8013510:	187b      	adds	r3, r7, r1
 8013512:	881b      	ldrh	r3, [r3, #0]
 8013514:	429a      	cmp	r2, r3
 8013516:	d307      	bcc.n	8013528 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	699a      	ldr	r2, [r3, #24]
 801351c:	187b      	adds	r3, r7, r1
 801351e:	881b      	ldrh	r3, [r3, #0]
 8013520:	1ad2      	subs	r2, r2, r3
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	619a      	str	r2, [r3, #24]
 8013526:	e002      	b.n	801352e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	2200      	movs	r2, #0
 801352c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d121      	bne.n	801357a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	001a      	movs	r2, r3
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	781b      	ldrb	r3, [r3, #0]
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	18d3      	adds	r3, r2, r3
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	b29a      	uxth	r2, r3
 8013548:	2018      	movs	r0, #24
 801354a:	183b      	adds	r3, r7, r0
 801354c:	4966      	ldr	r1, [pc, #408]	@ (80136e8 <HAL_PCD_EP_DB_Receive+0x224>)
 801354e:	400a      	ands	r2, r1
 8013550:	801a      	strh	r2, [r3, #0]
 8013552:	183b      	adds	r3, r7, r0
 8013554:	183a      	adds	r2, r7, r0
 8013556:	8812      	ldrh	r2, [r2, #0]
 8013558:	2180      	movs	r1, #128	@ 0x80
 801355a:	0189      	lsls	r1, r1, #6
 801355c:	404a      	eors	r2, r1
 801355e:	801a      	strh	r2, [r3, #0]
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	001a      	movs	r2, r3
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	18d3      	adds	r3, r2, r3
 801356e:	183a      	adds	r2, r7, r0
 8013570:	8812      	ldrh	r2, [r2, #0]
 8013572:	495e      	ldr	r1, [pc, #376]	@ (80136ec <HAL_PCD_EP_DB_Receive+0x228>)
 8013574:	430a      	orrs	r2, r1
 8013576:	b292      	uxth	r2, r2
 8013578:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801357a:	1dbb      	adds	r3, r7, #6
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	2240      	movs	r2, #64	@ 0x40
 8013580:	4013      	ands	r3, r2
 8013582:	d01a      	beq.n	80135ba <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	001a      	movs	r2, r3
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	781b      	ldrb	r3, [r3, #0]
 801358e:	009b      	lsls	r3, r3, #2
 8013590:	18d3      	adds	r3, r2, r3
 8013592:	881b      	ldrh	r3, [r3, #0]
 8013594:	b29a      	uxth	r2, r3
 8013596:	2016      	movs	r0, #22
 8013598:	183b      	adds	r3, r7, r0
 801359a:	4955      	ldr	r1, [pc, #340]	@ (80136f0 <HAL_PCD_EP_DB_Receive+0x22c>)
 801359c:	400a      	ands	r2, r1
 801359e:	801a      	strh	r2, [r3, #0]
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	001a      	movs	r2, r3
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	009b      	lsls	r3, r3, #2
 80135ac:	18d3      	adds	r3, r2, r3
 80135ae:	183a      	adds	r2, r7, r0
 80135b0:	8812      	ldrh	r2, [r2, #0]
 80135b2:	4950      	ldr	r1, [pc, #320]	@ (80136f4 <HAL_PCD_EP_DB_Receive+0x230>)
 80135b4:	430a      	orrs	r2, r1
 80135b6:	b292      	uxth	r2, r2
 80135b8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80135ba:	241a      	movs	r4, #26
 80135bc:	193b      	adds	r3, r7, r4
 80135be:	881b      	ldrh	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d100      	bne.n	80135c6 <HAL_PCD_EP_DB_Receive+0x102>
 80135c4:	e086      	b.n	80136d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	6818      	ldr	r0, [r3, #0]
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	6959      	ldr	r1, [r3, #20]
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	891a      	ldrh	r2, [r3, #8]
 80135d2:	193b      	adds	r3, r7, r4
 80135d4:	881b      	ldrh	r3, [r3, #0]
 80135d6:	f006 fe12 	bl	801a1fe <USB_ReadPMA>
 80135da:	e07b      	b.n	80136d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2250      	movs	r2, #80	@ 0x50
 80135e2:	5a9b      	ldrh	r3, [r3, r2]
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	001a      	movs	r2, r3
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	00db      	lsls	r3, r3, #3
 80135ee:	18d2      	adds	r2, r2, r3
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	18d3      	adds	r3, r2, r3
 80135f6:	4a40      	ldr	r2, [pc, #256]	@ (80136f8 <HAL_PCD_EP_DB_Receive+0x234>)
 80135f8:	4694      	mov	ip, r2
 80135fa:	4463      	add	r3, ip
 80135fc:	881a      	ldrh	r2, [r3, #0]
 80135fe:	211a      	movs	r1, #26
 8013600:	187b      	adds	r3, r7, r1
 8013602:	0592      	lsls	r2, r2, #22
 8013604:	0d92      	lsrs	r2, r2, #22
 8013606:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	699a      	ldr	r2, [r3, #24]
 801360c:	187b      	adds	r3, r7, r1
 801360e:	881b      	ldrh	r3, [r3, #0]
 8013610:	429a      	cmp	r2, r3
 8013612:	d307      	bcc.n	8013624 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	699a      	ldr	r2, [r3, #24]
 8013618:	187b      	adds	r3, r7, r1
 801361a:	881b      	ldrh	r3, [r3, #0]
 801361c:	1ad2      	subs	r2, r2, r3
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	619a      	str	r2, [r3, #24]
 8013622:	e002      	b.n	801362a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	2200      	movs	r2, #0
 8013628:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	699b      	ldr	r3, [r3, #24]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d121      	bne.n	8013676 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	001a      	movs	r2, r3
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	009b      	lsls	r3, r3, #2
 801363e:	18d3      	adds	r3, r2, r3
 8013640:	881b      	ldrh	r3, [r3, #0]
 8013642:	b29a      	uxth	r2, r3
 8013644:	201e      	movs	r0, #30
 8013646:	183b      	adds	r3, r7, r0
 8013648:	4927      	ldr	r1, [pc, #156]	@ (80136e8 <HAL_PCD_EP_DB_Receive+0x224>)
 801364a:	400a      	ands	r2, r1
 801364c:	801a      	strh	r2, [r3, #0]
 801364e:	183b      	adds	r3, r7, r0
 8013650:	183a      	adds	r2, r7, r0
 8013652:	8812      	ldrh	r2, [r2, #0]
 8013654:	2180      	movs	r1, #128	@ 0x80
 8013656:	0189      	lsls	r1, r1, #6
 8013658:	404a      	eors	r2, r1
 801365a:	801a      	strh	r2, [r3, #0]
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	001a      	movs	r2, r3
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	18d3      	adds	r3, r2, r3
 801366a:	183a      	adds	r2, r7, r0
 801366c:	8812      	ldrh	r2, [r2, #0]
 801366e:	491f      	ldr	r1, [pc, #124]	@ (80136ec <HAL_PCD_EP_DB_Receive+0x228>)
 8013670:	430a      	orrs	r2, r1
 8013672:	b292      	uxth	r2, r2
 8013674:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8013676:	1dbb      	adds	r3, r7, #6
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	2240      	movs	r2, #64	@ 0x40
 801367c:	4013      	ands	r3, r2
 801367e:	d11a      	bne.n	80136b6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	001a      	movs	r2, r3
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	18d3      	adds	r3, r2, r3
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	b29a      	uxth	r2, r3
 8013692:	201c      	movs	r0, #28
 8013694:	183b      	adds	r3, r7, r0
 8013696:	4916      	ldr	r1, [pc, #88]	@ (80136f0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013698:	400a      	ands	r2, r1
 801369a:	801a      	strh	r2, [r3, #0]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	001a      	movs	r2, r3
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	18d3      	adds	r3, r2, r3
 80136aa:	183a      	adds	r2, r7, r0
 80136ac:	8812      	ldrh	r2, [r2, #0]
 80136ae:	4911      	ldr	r1, [pc, #68]	@ (80136f4 <HAL_PCD_EP_DB_Receive+0x230>)
 80136b0:	430a      	orrs	r2, r1
 80136b2:	b292      	uxth	r2, r2
 80136b4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80136b6:	241a      	movs	r4, #26
 80136b8:	193b      	adds	r3, r7, r4
 80136ba:	881b      	ldrh	r3, [r3, #0]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d009      	beq.n	80136d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	6818      	ldr	r0, [r3, #0]
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	6959      	ldr	r1, [r3, #20]
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	895a      	ldrh	r2, [r3, #10]
 80136cc:	193b      	adds	r3, r7, r4
 80136ce:	881b      	ldrh	r3, [r3, #0]
 80136d0:	f006 fd95 	bl	801a1fe <USB_ReadPMA>
    }
  }

  return count;
 80136d4:	231a      	movs	r3, #26
 80136d6:	18fb      	adds	r3, r7, r3
 80136d8:	881b      	ldrh	r3, [r3, #0]
}
 80136da:	0018      	movs	r0, r3
 80136dc:	46bd      	mov	sp, r7
 80136de:	b009      	add	sp, #36	@ 0x24
 80136e0:	bd90      	pop	{r4, r7, pc}
 80136e2:	46c0      	nop			@ (mov r8, r8)
 80136e4:	00000402 	.word	0x00000402
 80136e8:	ffffbf8f 	.word	0xffffbf8f
 80136ec:	ffff8080 	.word	0xffff8080
 80136f0:	ffff8f8f 	.word	0xffff8f8f
 80136f4:	ffff80c0 	.word	0xffff80c0
 80136f8:	00000406 	.word	0x00000406

080136fc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b0a4      	sub	sp, #144	@ 0x90
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	1dbb      	adds	r3, r7, #6
 8013708:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801370a:	1dbb      	adds	r3, r7, #6
 801370c:	881b      	ldrh	r3, [r3, #0]
 801370e:	2240      	movs	r2, #64	@ 0x40
 8013710:	4013      	ands	r3, r2
 8013712:	d100      	bne.n	8013716 <HAL_PCD_EP_DB_Transmit+0x1a>
 8013714:	e1e4      	b.n	8013ae0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	2250      	movs	r2, #80	@ 0x50
 801371c:	5a9b      	ldrh	r3, [r3, r2]
 801371e:	b29b      	uxth	r3, r3
 8013720:	001a      	movs	r2, r3
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	00db      	lsls	r3, r3, #3
 8013728:	18d2      	adds	r2, r2, r3
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	18d3      	adds	r3, r2, r3
 8013730:	4ad0      	ldr	r2, [pc, #832]	@ (8013a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013732:	4694      	mov	ip, r2
 8013734:	4463      	add	r3, ip
 8013736:	881a      	ldrh	r2, [r3, #0]
 8013738:	2186      	movs	r1, #134	@ 0x86
 801373a:	187b      	adds	r3, r7, r1
 801373c:	0592      	lsls	r2, r2, #22
 801373e:	0d92      	lsrs	r2, r2, #22
 8013740:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	699a      	ldr	r2, [r3, #24]
 8013746:	187b      	adds	r3, r7, r1
 8013748:	881b      	ldrh	r3, [r3, #0]
 801374a:	429a      	cmp	r2, r3
 801374c:	d907      	bls.n	801375e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	699a      	ldr	r2, [r3, #24]
 8013752:	187b      	adds	r3, r7, r1
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	1ad2      	subs	r2, r2, r3
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	619a      	str	r2, [r3, #24]
 801375c:	e002      	b.n	8013764 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	2200      	movs	r2, #0
 8013762:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	699b      	ldr	r3, [r3, #24]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d000      	beq.n	801376e <HAL_PCD_EP_DB_Transmit+0x72>
 801376c:	e0b5      	b.n	80138da <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	785b      	ldrb	r3, [r3, #1]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d125      	bne.n	80137c2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	2250      	movs	r2, #80	@ 0x50
 8013782:	5a9b      	ldrh	r3, [r3, r2]
 8013784:	b29b      	uxth	r3, r3
 8013786:	001a      	movs	r2, r3
 8013788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378a:	189b      	adds	r3, r3, r2
 801378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	00da      	lsls	r2, r3, #3
 8013794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013796:	18d3      	adds	r3, r2, r3
 8013798:	4ab6      	ldr	r2, [pc, #728]	@ (8013a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 801379a:	4694      	mov	ip, r2
 801379c:	4463      	add	r3, ip
 801379e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a2:	881b      	ldrh	r3, [r3, #0]
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	059b      	lsls	r3, r3, #22
 80137a8:	0d9b      	lsrs	r3, r3, #22
 80137aa:	b29a      	uxth	r2, r3
 80137ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ae:	801a      	strh	r2, [r3, #0]
 80137b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b2:	881b      	ldrh	r3, [r3, #0]
 80137b4:	b29b      	uxth	r3, r3
 80137b6:	4ab0      	ldr	r2, [pc, #704]	@ (8013a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80137b8:	4313      	orrs	r3, r2
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137be:	801a      	strh	r2, [r3, #0]
 80137c0:	e01b      	b.n	80137fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	785b      	ldrb	r3, [r3, #1]
 80137c6:	2b01      	cmp	r3, #1
 80137c8:	d117      	bne.n	80137fa <HAL_PCD_EP_DB_Transmit+0xfe>
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	2250      	movs	r2, #80	@ 0x50
 80137d6:	5a9b      	ldrh	r3, [r3, r2]
 80137d8:	b29b      	uxth	r3, r3
 80137da:	001a      	movs	r2, r3
 80137dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137de:	189b      	adds	r3, r3, r2
 80137e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	00da      	lsls	r2, r3, #3
 80137e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ea:	18d3      	adds	r3, r2, r3
 80137ec:	4aa1      	ldr	r2, [pc, #644]	@ (8013a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 80137ee:	4694      	mov	ip, r2
 80137f0:	4463      	add	r3, ip
 80137f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80137f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137f6:	2200      	movs	r2, #0
 80137f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	785b      	ldrb	r3, [r3, #1]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d125      	bne.n	8013854 <HAL_PCD_EP_DB_Transmit+0x158>
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	61fb      	str	r3, [r7, #28]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	2250      	movs	r2, #80	@ 0x50
 8013814:	5a9b      	ldrh	r3, [r3, r2]
 8013816:	b29b      	uxth	r3, r3
 8013818:	001a      	movs	r2, r3
 801381a:	69fb      	ldr	r3, [r7, #28]
 801381c:	189b      	adds	r3, r3, r2
 801381e:	61fb      	str	r3, [r7, #28]
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	00da      	lsls	r2, r3, #3
 8013826:	69fb      	ldr	r3, [r7, #28]
 8013828:	18d3      	adds	r3, r2, r3
 801382a:	4a94      	ldr	r2, [pc, #592]	@ (8013a7c <HAL_PCD_EP_DB_Transmit+0x380>)
 801382c:	4694      	mov	ip, r2
 801382e:	4463      	add	r3, ip
 8013830:	61bb      	str	r3, [r7, #24]
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	b29b      	uxth	r3, r3
 8013838:	059b      	lsls	r3, r3, #22
 801383a:	0d9b      	lsrs	r3, r3, #22
 801383c:	b29a      	uxth	r2, r3
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	801a      	strh	r2, [r3, #0]
 8013842:	69bb      	ldr	r3, [r7, #24]
 8013844:	881b      	ldrh	r3, [r3, #0]
 8013846:	b29b      	uxth	r3, r3
 8013848:	4a8b      	ldr	r2, [pc, #556]	@ (8013a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801384a:	4313      	orrs	r3, r2
 801384c:	b29a      	uxth	r2, r3
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	801a      	strh	r2, [r3, #0]
 8013852:	e018      	b.n	8013886 <HAL_PCD_EP_DB_Transmit+0x18a>
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d114      	bne.n	8013886 <HAL_PCD_EP_DB_Transmit+0x18a>
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2250      	movs	r2, #80	@ 0x50
 8013862:	5a9b      	ldrh	r3, [r3, r2]
 8013864:	b29b      	uxth	r3, r3
 8013866:	001a      	movs	r2, r3
 8013868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801386a:	189b      	adds	r3, r3, r2
 801386c:	627b      	str	r3, [r7, #36]	@ 0x24
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	00da      	lsls	r2, r3, #3
 8013874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013876:	18d3      	adds	r3, r2, r3
 8013878:	4a80      	ldr	r2, [pc, #512]	@ (8013a7c <HAL_PCD_EP_DB_Transmit+0x380>)
 801387a:	4694      	mov	ip, r2
 801387c:	4463      	add	r3, ip
 801387e:	623b      	str	r3, [r7, #32]
 8013880:	6a3b      	ldr	r3, [r7, #32]
 8013882:	2200      	movs	r2, #0
 8013884:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	781a      	ldrb	r2, [r3, #0]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	0011      	movs	r1, r2
 801388e:	0018      	movs	r0, r3
 8013890:	f008 fcf0 	bl	801c274 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013894:	1dbb      	adds	r3, r7, #6
 8013896:	881a      	ldrh	r2, [r3, #0]
 8013898:	2380      	movs	r3, #128	@ 0x80
 801389a:	01db      	lsls	r3, r3, #7
 801389c:	4013      	ands	r3, r2
 801389e:	d100      	bne.n	80138a2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80138a0:	e309      	b.n	8013eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	001a      	movs	r2, r3
 80138a8:	68bb      	ldr	r3, [r7, #8]
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	009b      	lsls	r3, r3, #2
 80138ae:	18d3      	adds	r3, r2, r3
 80138b0:	881b      	ldrh	r3, [r3, #0]
 80138b2:	b29a      	uxth	r2, r3
 80138b4:	2016      	movs	r0, #22
 80138b6:	183b      	adds	r3, r7, r0
 80138b8:	4971      	ldr	r1, [pc, #452]	@ (8013a80 <HAL_PCD_EP_DB_Transmit+0x384>)
 80138ba:	400a      	ands	r2, r1
 80138bc:	801a      	strh	r2, [r3, #0]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	001a      	movs	r2, r3
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	18d3      	adds	r3, r2, r3
 80138cc:	183a      	adds	r2, r7, r0
 80138ce:	8812      	ldrh	r2, [r2, #0]
 80138d0:	496c      	ldr	r1, [pc, #432]	@ (8013a84 <HAL_PCD_EP_DB_Transmit+0x388>)
 80138d2:	430a      	orrs	r2, r1
 80138d4:	b292      	uxth	r2, r2
 80138d6:	801a      	strh	r2, [r3, #0]
 80138d8:	e2ed      	b.n	8013eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80138da:	1dbb      	adds	r3, r7, #6
 80138dc:	881a      	ldrh	r2, [r3, #0]
 80138de:	2380      	movs	r3, #128	@ 0x80
 80138e0:	01db      	lsls	r3, r3, #7
 80138e2:	4013      	ands	r3, r2
 80138e4:	d01a      	beq.n	801391c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	001a      	movs	r2, r3
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	781b      	ldrb	r3, [r3, #0]
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	18d3      	adds	r3, r2, r3
 80138f4:	881b      	ldrh	r3, [r3, #0]
 80138f6:	b29a      	uxth	r2, r3
 80138f8:	208a      	movs	r0, #138	@ 0x8a
 80138fa:	183b      	adds	r3, r7, r0
 80138fc:	4960      	ldr	r1, [pc, #384]	@ (8013a80 <HAL_PCD_EP_DB_Transmit+0x384>)
 80138fe:	400a      	ands	r2, r1
 8013900:	801a      	strh	r2, [r3, #0]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	001a      	movs	r2, r3
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	18d3      	adds	r3, r2, r3
 8013910:	183a      	adds	r2, r7, r0
 8013912:	8812      	ldrh	r2, [r2, #0]
 8013914:	495b      	ldr	r1, [pc, #364]	@ (8013a84 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013916:	430a      	orrs	r2, r1
 8013918:	b292      	uxth	r2, r2
 801391a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2224      	movs	r2, #36	@ 0x24
 8013920:	5c9b      	ldrb	r3, [r3, r2]
 8013922:	2b01      	cmp	r3, #1
 8013924:	d000      	beq.n	8013928 <HAL_PCD_EP_DB_Transmit+0x22c>
 8013926:	e2c6      	b.n	8013eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	695a      	ldr	r2, [r3, #20]
 801392c:	2186      	movs	r1, #134	@ 0x86
 801392e:	187b      	adds	r3, r7, r1
 8013930:	881b      	ldrh	r3, [r3, #0]
 8013932:	18d2      	adds	r2, r2, r3
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	69da      	ldr	r2, [r3, #28]
 801393c:	187b      	adds	r3, r7, r1
 801393e:	881b      	ldrh	r3, [r3, #0]
 8013940:	18d2      	adds	r2, r2, r3
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	6a1a      	ldr	r2, [r3, #32]
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	691b      	ldr	r3, [r3, #16]
 801394e:	429a      	cmp	r2, r3
 8013950:	d30c      	bcc.n	801396c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	691b      	ldr	r3, [r3, #16]
 8013956:	218c      	movs	r1, #140	@ 0x8c
 8013958:	187a      	adds	r2, r7, r1
 801395a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	6a1a      	ldr	r2, [r3, #32]
 8013960:	187b      	adds	r3, r7, r1
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	1ad2      	subs	r2, r2, r3
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	621a      	str	r2, [r3, #32]
 801396a:	e01a      	b.n	80139a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	6a1b      	ldr	r3, [r3, #32]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d10a      	bne.n	801398a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8013974:	2386      	movs	r3, #134	@ 0x86
 8013976:	18fb      	adds	r3, r7, r3
 8013978:	881b      	ldrh	r3, [r3, #0]
 801397a:	228c      	movs	r2, #140	@ 0x8c
 801397c:	18ba      	adds	r2, r7, r2
 801397e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	2224      	movs	r2, #36	@ 0x24
 8013984:	2100      	movs	r1, #0
 8013986:	5499      	strb	r1, [r3, r2]
 8013988:	e00b      	b.n	80139a2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	2224      	movs	r2, #36	@ 0x24
 801398e:	2100      	movs	r1, #0
 8013990:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	6a1b      	ldr	r3, [r3, #32]
 8013996:	228c      	movs	r2, #140	@ 0x8c
 8013998:	18ba      	adds	r2, r7, r2
 801399a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	2200      	movs	r2, #0
 80139a0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	785b      	ldrb	r3, [r3, #1]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d000      	beq.n	80139ac <HAL_PCD_EP_DB_Transmit+0x2b0>
 80139aa:	e06d      	b.n	8013a88 <HAL_PCD_EP_DB_Transmit+0x38c>
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	2250      	movs	r2, #80	@ 0x50
 80139b8:	5a9b      	ldrh	r3, [r3, r2]
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	001a      	movs	r2, r3
 80139be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139c0:	189b      	adds	r3, r3, r2
 80139c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	00da      	lsls	r2, r3, #3
 80139ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139cc:	18d3      	adds	r3, r2, r3
 80139ce:	4a29      	ldr	r2, [pc, #164]	@ (8013a74 <HAL_PCD_EP_DB_Transmit+0x378>)
 80139d0:	4694      	mov	ip, r2
 80139d2:	4463      	add	r3, ip
 80139d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80139d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139d8:	881b      	ldrh	r3, [r3, #0]
 80139da:	b29b      	uxth	r3, r3
 80139dc:	059b      	lsls	r3, r3, #22
 80139de:	0d9b      	lsrs	r3, r3, #22
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e4:	801a      	strh	r2, [r3, #0]
 80139e6:	228c      	movs	r2, #140	@ 0x8c
 80139e8:	18bb      	adds	r3, r7, r2
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80139ee:	d91a      	bls.n	8013a26 <HAL_PCD_EP_DB_Transmit+0x32a>
 80139f0:	18bb      	adds	r3, r7, r2
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	095b      	lsrs	r3, r3, #5
 80139f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139f8:	18bb      	adds	r3, r7, r2
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	221f      	movs	r2, #31
 80139fe:	4013      	ands	r3, r2
 8013a00:	d102      	bne.n	8013a08 <HAL_PCD_EP_DB_Transmit+0x30c>
 8013a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a04:	3b01      	subs	r3, #1
 8013a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a0a:	881b      	ldrh	r3, [r3, #0]
 8013a0c:	b29a      	uxth	r2, r3
 8013a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	029b      	lsls	r3, r3, #10
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	4313      	orrs	r3, r2
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	4a17      	ldr	r2, [pc, #92]	@ (8013a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013a1c:	4313      	orrs	r3, r2
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a22:	801a      	strh	r2, [r3, #0]
 8013a24:	e04f      	b.n	8013ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013a26:	238c      	movs	r3, #140	@ 0x8c
 8013a28:	18fb      	adds	r3, r7, r3
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d108      	bne.n	8013a42 <HAL_PCD_EP_DB_Transmit+0x346>
 8013a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a32:	881b      	ldrh	r3, [r3, #0]
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	4a10      	ldr	r2, [pc, #64]	@ (8013a78 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013a38:	4313      	orrs	r3, r2
 8013a3a:	b29a      	uxth	r2, r3
 8013a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a3e:	801a      	strh	r2, [r3, #0]
 8013a40:	e041      	b.n	8013ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013a42:	228c      	movs	r2, #140	@ 0x8c
 8013a44:	18bb      	adds	r3, r7, r2
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	085b      	lsrs	r3, r3, #1
 8013a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a4c:	18bb      	adds	r3, r7, r2
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2201      	movs	r2, #1
 8013a52:	4013      	ands	r3, r2
 8013a54:	d002      	beq.n	8013a5c <HAL_PCD_EP_DB_Transmit+0x360>
 8013a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a58:	3301      	adds	r3, #1
 8013a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5e:	881b      	ldrh	r3, [r3, #0]
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	029b      	lsls	r3, r3, #10
 8013a68:	b29b      	uxth	r3, r3
 8013a6a:	4313      	orrs	r3, r2
 8013a6c:	b29a      	uxth	r2, r3
 8013a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a70:	801a      	strh	r2, [r3, #0]
 8013a72:	e028      	b.n	8013ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013a74:	00000402 	.word	0x00000402
 8013a78:	ffff8000 	.word	0xffff8000
 8013a7c:	00000406 	.word	0x00000406
 8013a80:	ffff8f8f 	.word	0xffff8f8f
 8013a84:	ffffc080 	.word	0xffffc080
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	785b      	ldrb	r3, [r3, #1]
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d11a      	bne.n	8013ac6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	2250      	movs	r2, #80	@ 0x50
 8013a9c:	5a9b      	ldrh	r3, [r3, r2]
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	001a      	movs	r2, r3
 8013aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aa4:	189b      	adds	r3, r3, r2
 8013aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	00da      	lsls	r2, r3, #3
 8013aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ab0:	18d3      	adds	r3, r2, r3
 8013ab2:	4adb      	ldr	r2, [pc, #876]	@ (8013e20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013ab4:	4694      	mov	ip, r2
 8013ab6:	4463      	add	r3, ip
 8013ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8013aba:	238c      	movs	r3, #140	@ 0x8c
 8013abc:	18fb      	adds	r3, r7, r3
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ac4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	6818      	ldr	r0, [r3, #0]
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	6959      	ldr	r1, [r3, #20]
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	891a      	ldrh	r2, [r3, #8]
 8013ad2:	238c      	movs	r3, #140	@ 0x8c
 8013ad4:	18fb      	adds	r3, r7, r3
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	f006 fb47 	bl	801a16c <USB_WritePMA>
 8013ade:	e1ea      	b.n	8013eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2250      	movs	r2, #80	@ 0x50
 8013ae6:	5a9b      	ldrh	r3, [r3, r2]
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	001a      	movs	r2, r3
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	00db      	lsls	r3, r3, #3
 8013af2:	18d2      	adds	r2, r2, r3
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	18d3      	adds	r3, r2, r3
 8013afa:	4aca      	ldr	r2, [pc, #808]	@ (8013e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013afc:	4694      	mov	ip, r2
 8013afe:	4463      	add	r3, ip
 8013b00:	881a      	ldrh	r2, [r3, #0]
 8013b02:	2186      	movs	r1, #134	@ 0x86
 8013b04:	187b      	adds	r3, r7, r1
 8013b06:	0592      	lsls	r2, r2, #22
 8013b08:	0d92      	lsrs	r2, r2, #22
 8013b0a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	699a      	ldr	r2, [r3, #24]
 8013b10:	187b      	adds	r3, r7, r1
 8013b12:	881b      	ldrh	r3, [r3, #0]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d307      	bcc.n	8013b28 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	699a      	ldr	r2, [r3, #24]
 8013b1c:	187b      	adds	r3, r7, r1
 8013b1e:	881b      	ldrh	r3, [r3, #0]
 8013b20:	1ad2      	subs	r2, r2, r3
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	619a      	str	r2, [r3, #24]
 8013b26:	e002      	b.n	8013b2e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	699b      	ldr	r3, [r3, #24]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d000      	beq.n	8013b38 <HAL_PCD_EP_DB_Transmit+0x43c>
 8013b36:	e0bb      	b.n	8013cb0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	785b      	ldrb	r3, [r3, #1]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d125      	bne.n	8013b8c <HAL_PCD_EP_DB_Transmit+0x490>
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	2250      	movs	r2, #80	@ 0x50
 8013b4c:	5a9b      	ldrh	r3, [r3, r2]
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	001a      	movs	r2, r3
 8013b52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013b54:	189b      	adds	r3, r3, r2
 8013b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	00da      	lsls	r2, r3, #3
 8013b5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013b60:	18d3      	adds	r3, r2, r3
 8013b62:	4aaf      	ldr	r2, [pc, #700]	@ (8013e20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013b64:	4694      	mov	ip, r2
 8013b66:	4463      	add	r3, ip
 8013b68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013b6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b6c:	881b      	ldrh	r3, [r3, #0]
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	059b      	lsls	r3, r3, #22
 8013b72:	0d9b      	lsrs	r3, r3, #22
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b78:	801a      	strh	r2, [r3, #0]
 8013b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b7c:	881b      	ldrh	r3, [r3, #0]
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	4aa9      	ldr	r2, [pc, #676]	@ (8013e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013b82:	4313      	orrs	r3, r2
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b88:	801a      	strh	r2, [r3, #0]
 8013b8a:	e01b      	b.n	8013bc4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	785b      	ldrb	r3, [r3, #1]
 8013b90:	2b01      	cmp	r3, #1
 8013b92:	d117      	bne.n	8013bc4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	667b      	str	r3, [r7, #100]	@ 0x64
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2250      	movs	r2, #80	@ 0x50
 8013ba0:	5a9b      	ldrh	r3, [r3, r2]
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	001a      	movs	r2, r3
 8013ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013ba8:	189b      	adds	r3, r3, r2
 8013baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	00da      	lsls	r2, r3, #3
 8013bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013bb4:	18d3      	adds	r3, r2, r3
 8013bb6:	4a9a      	ldr	r2, [pc, #616]	@ (8013e20 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013bb8:	4694      	mov	ip, r2
 8013bba:	4463      	add	r3, ip
 8013bbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8013bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	785b      	ldrb	r3, [r3, #1]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d12b      	bne.n	8013c2a <HAL_PCD_EP_DB_Transmit+0x52e>
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2250      	movs	r2, #80	@ 0x50
 8013bde:	5a9b      	ldrh	r3, [r3, r2]
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	001a      	movs	r2, r3
 8013be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013be6:	189b      	adds	r3, r3, r2
 8013be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	00da      	lsls	r2, r3, #3
 8013bf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013bf2:	18d3      	adds	r3, r2, r3
 8013bf4:	4a8b      	ldr	r2, [pc, #556]	@ (8013e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013bf6:	4694      	mov	ip, r2
 8013bf8:	4463      	add	r3, ip
 8013bfa:	2180      	movs	r1, #128	@ 0x80
 8013bfc:	187a      	adds	r2, r7, r1
 8013bfe:	6013      	str	r3, [r2, #0]
 8013c00:	187b      	adds	r3, r7, r1
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	881b      	ldrh	r3, [r3, #0]
 8013c06:	b29b      	uxth	r3, r3
 8013c08:	059b      	lsls	r3, r3, #22
 8013c0a:	0d9b      	lsrs	r3, r3, #22
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	187b      	adds	r3, r7, r1
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	801a      	strh	r2, [r3, #0]
 8013c14:	187b      	adds	r3, r7, r1
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	881b      	ldrh	r3, [r3, #0]
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	4a82      	ldr	r2, [pc, #520]	@ (8013e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013c1e:	4313      	orrs	r3, r2
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	187b      	adds	r3, r7, r1
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	801a      	strh	r2, [r3, #0]
 8013c28:	e018      	b.n	8013c5c <HAL_PCD_EP_DB_Transmit+0x560>
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	785b      	ldrb	r3, [r3, #1]
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d114      	bne.n	8013c5c <HAL_PCD_EP_DB_Transmit+0x560>
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2250      	movs	r2, #80	@ 0x50
 8013c38:	5a9b      	ldrh	r3, [r3, r2]
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	001a      	movs	r2, r3
 8013c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013c40:	189b      	adds	r3, r3, r2
 8013c42:	677b      	str	r3, [r7, #116]	@ 0x74
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	00da      	lsls	r2, r3, #3
 8013c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013c4c:	18d3      	adds	r3, r2, r3
 8013c4e:	4a75      	ldr	r2, [pc, #468]	@ (8013e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013c50:	4694      	mov	ip, r2
 8013c52:	4463      	add	r3, ip
 8013c54:	673b      	str	r3, [r7, #112]	@ 0x70
 8013c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013c58:	2200      	movs	r2, #0
 8013c5a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	781a      	ldrb	r2, [r3, #0]
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	0011      	movs	r1, r2
 8013c64:	0018      	movs	r0, r3
 8013c66:	f008 fb05 	bl	801c274 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013c6a:	1dbb      	adds	r3, r7, #6
 8013c6c:	881a      	ldrh	r2, [r3, #0]
 8013c6e:	2380      	movs	r3, #128	@ 0x80
 8013c70:	01db      	lsls	r3, r3, #7
 8013c72:	4013      	ands	r3, r2
 8013c74:	d000      	beq.n	8013c78 <HAL_PCD_EP_DB_Transmit+0x57c>
 8013c76:	e11e      	b.n	8013eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	001a      	movs	r2, r3
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	781b      	ldrb	r3, [r3, #0]
 8013c82:	009b      	lsls	r3, r3, #2
 8013c84:	18d3      	adds	r3, r2, r3
 8013c86:	881b      	ldrh	r3, [r3, #0]
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	2088      	movs	r0, #136	@ 0x88
 8013c8c:	183b      	adds	r3, r7, r0
 8013c8e:	4967      	ldr	r1, [pc, #412]	@ (8013e2c <HAL_PCD_EP_DB_Transmit+0x730>)
 8013c90:	400a      	ands	r2, r1
 8013c92:	801a      	strh	r2, [r3, #0]
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	001a      	movs	r2, r3
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	781b      	ldrb	r3, [r3, #0]
 8013c9e:	009b      	lsls	r3, r3, #2
 8013ca0:	18d3      	adds	r3, r2, r3
 8013ca2:	183a      	adds	r2, r7, r0
 8013ca4:	8812      	ldrh	r2, [r2, #0]
 8013ca6:	4962      	ldr	r1, [pc, #392]	@ (8013e30 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013ca8:	430a      	orrs	r2, r1
 8013caa:	b292      	uxth	r2, r2
 8013cac:	801a      	strh	r2, [r3, #0]
 8013cae:	e102      	b.n	8013eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013cb0:	1dbb      	adds	r3, r7, #6
 8013cb2:	881a      	ldrh	r2, [r3, #0]
 8013cb4:	2380      	movs	r3, #128	@ 0x80
 8013cb6:	01db      	lsls	r3, r3, #7
 8013cb8:	4013      	ands	r3, r2
 8013cba:	d11a      	bne.n	8013cf2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	001a      	movs	r2, r3
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	781b      	ldrb	r3, [r3, #0]
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	18d3      	adds	r3, r2, r3
 8013cca:	881b      	ldrh	r3, [r3, #0]
 8013ccc:	b29a      	uxth	r2, r3
 8013cce:	204e      	movs	r0, #78	@ 0x4e
 8013cd0:	183b      	adds	r3, r7, r0
 8013cd2:	4956      	ldr	r1, [pc, #344]	@ (8013e2c <HAL_PCD_EP_DB_Transmit+0x730>)
 8013cd4:	400a      	ands	r2, r1
 8013cd6:	801a      	strh	r2, [r3, #0]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	001a      	movs	r2, r3
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	18d3      	adds	r3, r2, r3
 8013ce6:	183a      	adds	r2, r7, r0
 8013ce8:	8812      	ldrh	r2, [r2, #0]
 8013cea:	4951      	ldr	r1, [pc, #324]	@ (8013e30 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013cec:	430a      	orrs	r2, r1
 8013cee:	b292      	uxth	r2, r2
 8013cf0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	2224      	movs	r2, #36	@ 0x24
 8013cf6:	5c9b      	ldrb	r3, [r3, r2]
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d000      	beq.n	8013cfe <HAL_PCD_EP_DB_Transmit+0x602>
 8013cfc:	e0db      	b.n	8013eb6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	695a      	ldr	r2, [r3, #20]
 8013d02:	2186      	movs	r1, #134	@ 0x86
 8013d04:	187b      	adds	r3, r7, r1
 8013d06:	881b      	ldrh	r3, [r3, #0]
 8013d08:	18d2      	adds	r2, r2, r3
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013d0e:	68bb      	ldr	r3, [r7, #8]
 8013d10:	69da      	ldr	r2, [r3, #28]
 8013d12:	187b      	adds	r3, r7, r1
 8013d14:	881b      	ldrh	r3, [r3, #0]
 8013d16:	18d2      	adds	r2, r2, r3
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013d1c:	68bb      	ldr	r3, [r7, #8]
 8013d1e:	6a1a      	ldr	r2, [r3, #32]
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	691b      	ldr	r3, [r3, #16]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d30c      	bcc.n	8013d42 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	691b      	ldr	r3, [r3, #16]
 8013d2c:	218c      	movs	r1, #140	@ 0x8c
 8013d2e:	187a      	adds	r2, r7, r1
 8013d30:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	6a1a      	ldr	r2, [r3, #32]
 8013d36:	187b      	adds	r3, r7, r1
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	1ad2      	subs	r2, r2, r3
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	621a      	str	r2, [r3, #32]
 8013d40:	e01a      	b.n	8013d78 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	6a1b      	ldr	r3, [r3, #32]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d10a      	bne.n	8013d60 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8013d4a:	2386      	movs	r3, #134	@ 0x86
 8013d4c:	18fb      	adds	r3, r7, r3
 8013d4e:	881b      	ldrh	r3, [r3, #0]
 8013d50:	228c      	movs	r2, #140	@ 0x8c
 8013d52:	18ba      	adds	r2, r7, r2
 8013d54:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	2224      	movs	r2, #36	@ 0x24
 8013d5a:	2100      	movs	r1, #0
 8013d5c:	5499      	strb	r1, [r3, r2]
 8013d5e:	e00b      	b.n	8013d78 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	6a1b      	ldr	r3, [r3, #32]
 8013d64:	228c      	movs	r2, #140	@ 0x8c
 8013d66:	18ba      	adds	r2, r7, r2
 8013d68:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	2224      	movs	r2, #36	@ 0x24
 8013d74:	2100      	movs	r1, #0
 8013d76:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	785b      	ldrb	r3, [r3, #1]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d000      	beq.n	8013d88 <HAL_PCD_EP_DB_Transmit+0x68c>
 8013d86:	e06e      	b.n	8013e66 <HAL_PCD_EP_DB_Transmit+0x76a>
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	2250      	movs	r2, #80	@ 0x50
 8013d94:	5a9b      	ldrh	r3, [r3, r2]
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	001a      	movs	r2, r3
 8013d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d9c:	189b      	adds	r3, r3, r2
 8013d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	00da      	lsls	r2, r3, #3
 8013da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013da8:	18d3      	adds	r3, r2, r3
 8013daa:	4a1e      	ldr	r2, [pc, #120]	@ (8013e24 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013dac:	4694      	mov	ip, r2
 8013dae:	4463      	add	r3, ip
 8013db0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013db4:	881b      	ldrh	r3, [r3, #0]
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	059b      	lsls	r3, r3, #22
 8013dba:	0d9b      	lsrs	r3, r3, #22
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dc0:	801a      	strh	r2, [r3, #0]
 8013dc2:	228c      	movs	r2, #140	@ 0x8c
 8013dc4:	18bb      	adds	r3, r7, r2
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8013dca:	d91a      	bls.n	8013e02 <HAL_PCD_EP_DB_Transmit+0x706>
 8013dcc:	18bb      	adds	r3, r7, r2
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	095b      	lsrs	r3, r3, #5
 8013dd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013dd4:	18bb      	adds	r3, r7, r2
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	221f      	movs	r2, #31
 8013dda:	4013      	ands	r3, r2
 8013ddc:	d102      	bne.n	8013de4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8013dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013de0:	3b01      	subs	r3, #1
 8013de2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013de6:	881b      	ldrh	r3, [r3, #0]
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013dec:	b29b      	uxth	r3, r3
 8013dee:	029b      	lsls	r3, r3, #10
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	4313      	orrs	r3, r2
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	4a0c      	ldr	r2, [pc, #48]	@ (8013e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013df8:	4313      	orrs	r3, r2
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dfe:	801a      	strh	r2, [r3, #0]
 8013e00:	e04d      	b.n	8013e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013e02:	238c      	movs	r3, #140	@ 0x8c
 8013e04:	18fb      	adds	r3, r7, r3
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d113      	bne.n	8013e34 <HAL_PCD_EP_DB_Transmit+0x738>
 8013e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e0e:	881b      	ldrh	r3, [r3, #0]
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	4a05      	ldr	r2, [pc, #20]	@ (8013e28 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013e14:	4313      	orrs	r3, r2
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e1a:	801a      	strh	r2, [r3, #0]
 8013e1c:	e03f      	b.n	8013e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013e1e:	46c0      	nop			@ (mov r8, r8)
 8013e20:	00000402 	.word	0x00000402
 8013e24:	00000406 	.word	0x00000406
 8013e28:	ffff8000 	.word	0xffff8000
 8013e2c:	ffff8f8f 	.word	0xffff8f8f
 8013e30:	ffffc080 	.word	0xffffc080
 8013e34:	228c      	movs	r2, #140	@ 0x8c
 8013e36:	18bb      	adds	r3, r7, r2
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	085b      	lsrs	r3, r3, #1
 8013e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013e3e:	18bb      	adds	r3, r7, r2
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2201      	movs	r2, #1
 8013e44:	4013      	ands	r3, r2
 8013e46:	d002      	beq.n	8013e4e <HAL_PCD_EP_DB_Transmit+0x752>
 8013e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013e4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e50:	881b      	ldrh	r3, [r3, #0]
 8013e52:	b29a      	uxth	r2, r3
 8013e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013e56:	b29b      	uxth	r3, r3
 8013e58:	029b      	lsls	r3, r3, #10
 8013e5a:	b29b      	uxth	r3, r3
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e62:	801a      	strh	r2, [r3, #0]
 8013e64:	e01b      	b.n	8013e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	785b      	ldrb	r3, [r3, #1]
 8013e6a:	2b01      	cmp	r3, #1
 8013e6c:	d117      	bne.n	8013e9e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2250      	movs	r2, #80	@ 0x50
 8013e74:	5a9b      	ldrh	r3, [r3, r2]
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	001a      	movs	r2, r3
 8013e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e7c:	189b      	adds	r3, r3, r2
 8013e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	00da      	lsls	r2, r3, #3
 8013e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e88:	18d3      	adds	r3, r2, r3
 8013e8a:	4a21      	ldr	r2, [pc, #132]	@ (8013f10 <HAL_PCD_EP_DB_Transmit+0x814>)
 8013e8c:	4694      	mov	ip, r2
 8013e8e:	4463      	add	r3, ip
 8013e90:	653b      	str	r3, [r7, #80]	@ 0x50
 8013e92:	238c      	movs	r3, #140	@ 0x8c
 8013e94:	18fb      	adds	r3, r7, r3
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	b29a      	uxth	r2, r3
 8013e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	6818      	ldr	r0, [r3, #0]
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	6959      	ldr	r1, [r3, #20]
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	895a      	ldrh	r2, [r3, #10]
 8013eaa:	238c      	movs	r3, #140	@ 0x8c
 8013eac:	18fb      	adds	r3, r7, r3
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	b29b      	uxth	r3, r3
 8013eb2:	f006 f95b 	bl	801a16c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	001a      	movs	r2, r3
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	009b      	lsls	r3, r3, #2
 8013ec2:	18d3      	adds	r3, r2, r3
 8013ec4:	881b      	ldrh	r3, [r3, #0]
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	2014      	movs	r0, #20
 8013eca:	183b      	adds	r3, r7, r0
 8013ecc:	4911      	ldr	r1, [pc, #68]	@ (8013f14 <HAL_PCD_EP_DB_Transmit+0x818>)
 8013ece:	400a      	ands	r2, r1
 8013ed0:	801a      	strh	r2, [r3, #0]
 8013ed2:	183b      	adds	r3, r7, r0
 8013ed4:	183a      	adds	r2, r7, r0
 8013ed6:	8812      	ldrh	r2, [r2, #0]
 8013ed8:	2110      	movs	r1, #16
 8013eda:	404a      	eors	r2, r1
 8013edc:	801a      	strh	r2, [r3, #0]
 8013ede:	183b      	adds	r3, r7, r0
 8013ee0:	183a      	adds	r2, r7, r0
 8013ee2:	8812      	ldrh	r2, [r2, #0]
 8013ee4:	2120      	movs	r1, #32
 8013ee6:	404a      	eors	r2, r1
 8013ee8:	801a      	strh	r2, [r3, #0]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	001a      	movs	r2, r3
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	18d3      	adds	r3, r2, r3
 8013ef8:	183a      	adds	r2, r7, r0
 8013efa:	8812      	ldrh	r2, [r2, #0]
 8013efc:	4906      	ldr	r1, [pc, #24]	@ (8013f18 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8013efe:	430a      	orrs	r2, r1
 8013f00:	b292      	uxth	r2, r2
 8013f02:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8013f04:	2300      	movs	r3, #0
}
 8013f06:	0018      	movs	r0, r3
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	b024      	add	sp, #144	@ 0x90
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	46c0      	nop			@ (mov r8, r8)
 8013f10:	00000406 	.word	0x00000406
 8013f14:	ffff8fbf 	.word	0xffff8fbf
 8013f18:	ffff8080 	.word	0xffff8080

08013f1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8013f1c:	b590      	push	{r4, r7, lr}
 8013f1e:	b087      	sub	sp, #28
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	0008      	movs	r0, r1
 8013f26:	0011      	movs	r1, r2
 8013f28:	607b      	str	r3, [r7, #4]
 8013f2a:	240a      	movs	r4, #10
 8013f2c:	193b      	adds	r3, r7, r4
 8013f2e:	1c02      	adds	r2, r0, #0
 8013f30:	801a      	strh	r2, [r3, #0]
 8013f32:	2308      	movs	r3, #8
 8013f34:	18fb      	adds	r3, r7, r3
 8013f36:	1c0a      	adds	r2, r1, #0
 8013f38:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8013f3a:	0021      	movs	r1, r4
 8013f3c:	187b      	adds	r3, r7, r1
 8013f3e:	881b      	ldrh	r3, [r3, #0]
 8013f40:	2280      	movs	r2, #128	@ 0x80
 8013f42:	4013      	ands	r3, r2
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d00c      	beq.n	8013f64 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013f4a:	187b      	adds	r3, r7, r1
 8013f4c:	881b      	ldrh	r3, [r3, #0]
 8013f4e:	2207      	movs	r2, #7
 8013f50:	4013      	ands	r3, r2
 8013f52:	1c5a      	adds	r2, r3, #1
 8013f54:	0013      	movs	r3, r2
 8013f56:	009b      	lsls	r3, r3, #2
 8013f58:	189b      	adds	r3, r3, r2
 8013f5a:	00db      	lsls	r3, r3, #3
 8013f5c:	68fa      	ldr	r2, [r7, #12]
 8013f5e:	18d3      	adds	r3, r2, r3
 8013f60:	617b      	str	r3, [r7, #20]
 8013f62:	e00b      	b.n	8013f7c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013f64:	230a      	movs	r3, #10
 8013f66:	18fb      	adds	r3, r7, r3
 8013f68:	881a      	ldrh	r2, [r3, #0]
 8013f6a:	0013      	movs	r3, r2
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	189b      	adds	r3, r3, r2
 8013f70:	00db      	lsls	r3, r3, #3
 8013f72:	3369      	adds	r3, #105	@ 0x69
 8013f74:	33ff      	adds	r3, #255	@ 0xff
 8013f76:	68fa      	ldr	r2, [r7, #12]
 8013f78:	18d3      	adds	r3, r2, r3
 8013f7a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8013f7c:	2308      	movs	r3, #8
 8013f7e:	18fb      	adds	r3, r7, r3
 8013f80:	881b      	ldrh	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d107      	bne.n	8013f96 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	80da      	strh	r2, [r3, #6]
 8013f94:	e00b      	b.n	8013fae <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	2201      	movs	r2, #1
 8013f9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	0c1b      	lsrs	r3, r3, #16
 8013fa8:	b29a      	uxth	r2, r3
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013fae:	2300      	movs	r3, #0
}
 8013fb0:	0018      	movs	r0, r3
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	b007      	add	sp, #28
 8013fb6:	bd90      	pop	{r4, r7, pc}

08013fb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	23ba      	movs	r3, #186	@ 0xba
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	2101      	movs	r1, #1
 8013fce:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8013fd0:	687a      	ldr	r2, [r7, #4]
 8013fd2:	23b8      	movs	r3, #184	@ 0xb8
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	2254      	movs	r2, #84	@ 0x54
 8013fde:	5a9b      	ldrh	r3, [r3, r2]
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	4313      	orrs	r3, r2
 8013fe6:	b299      	uxth	r1, r3
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	2254      	movs	r2, #84	@ 0x54
 8013fec:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	2254      	movs	r2, #84	@ 0x54
 8013ff2:	5a9b      	ldrh	r3, [r3, r2]
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	2202      	movs	r2, #2
 8013ff8:	4313      	orrs	r3, r2
 8013ffa:	b299      	uxth	r1, r3
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2254      	movs	r2, #84	@ 0x54
 8014000:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014002:	2300      	movs	r3, #0
}
 8014004:	0018      	movs	r0, r3
 8014006:	46bd      	mov	sp, r7
 8014008:	b004      	add	sp, #16
 801400a:	bd80      	pop	{r7, pc}

0801400c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	000a      	movs	r2, r1
 8014016:	1cfb      	adds	r3, r7, #3
 8014018:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801401a:	46c0      	nop			@ (mov r8, r8)
 801401c:	46bd      	mov	sp, r7
 801401e:	b002      	add	sp, #8
 8014020:	bd80      	pop	{r7, pc}
	...

08014024 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014028:	4b04      	ldr	r3, [pc, #16]	@ (801403c <HAL_PWR_EnableBkUpAccess+0x18>)
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	4b03      	ldr	r3, [pc, #12]	@ (801403c <HAL_PWR_EnableBkUpAccess+0x18>)
 801402e:	2180      	movs	r1, #128	@ 0x80
 8014030:	0049      	lsls	r1, r1, #1
 8014032:	430a      	orrs	r2, r1
 8014034:	601a      	str	r2, [r3, #0]
}
 8014036:	46c0      	nop			@ (mov r8, r8)
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}
 801403c:	40007000 	.word	0x40007000

08014040 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b086      	sub	sp, #24
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	000a      	movs	r2, r1
 801404a:	1cfb      	adds	r3, r7, #3
 801404c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801404e:	2300      	movs	r3, #0
 8014050:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014052:	4b25      	ldr	r3, [pc, #148]	@ (80140e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	2380      	movs	r3, #128	@ 0x80
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4013      	ands	r3, r2
 801405c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801405e:	4b23      	ldr	r3, [pc, #140]	@ (80140ec <HAL_PWR_EnterSTOPMode+0xac>)
 8014060:	6a1b      	ldr	r3, [r3, #32]
 8014062:	2201      	movs	r2, #1
 8014064:	4013      	ands	r3, r2
 8014066:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d008      	beq.n	8014080 <HAL_PWR_EnterSTOPMode+0x40>
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d005      	beq.n	8014080 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014074:	4b1c      	ldr	r3, [pc, #112]	@ (80140e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014076:	681a      	ldr	r2, [r3, #0]
 8014078:	4b1b      	ldr	r3, [pc, #108]	@ (80140e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801407a:	491d      	ldr	r1, [pc, #116]	@ (80140f0 <HAL_PWR_EnterSTOPMode+0xb0>)
 801407c:	400a      	ands	r2, r1
 801407e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014080:	4b19      	ldr	r3, [pc, #100]	@ (80140e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	2203      	movs	r2, #3
 801408a:	4393      	bics	r3, r2
 801408c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801408e:	697a      	ldr	r2, [r7, #20]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	4313      	orrs	r3, r2
 8014094:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014096:	4b14      	ldr	r3, [pc, #80]	@ (80140e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014098:	697a      	ldr	r2, [r7, #20]
 801409a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801409c:	4b15      	ldr	r3, [pc, #84]	@ (80140f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 801409e:	691a      	ldr	r2, [r3, #16]
 80140a0:	4b14      	ldr	r3, [pc, #80]	@ (80140f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80140a2:	2104      	movs	r1, #4
 80140a4:	430a      	orrs	r2, r1
 80140a6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80140a8:	1cfb      	adds	r3, r7, #3
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d101      	bne.n	80140b4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80140b0:	bf30      	wfi
 80140b2:	e002      	b.n	80140ba <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80140b4:	bf40      	sev
    __WFE();
 80140b6:	bf20      	wfe
    __WFE();
 80140b8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80140ba:	4b0e      	ldr	r3, [pc, #56]	@ (80140f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80140bc:	691a      	ldr	r2, [r3, #16]
 80140be:	4b0d      	ldr	r3, [pc, #52]	@ (80140f4 <HAL_PWR_EnterSTOPMode+0xb4>)
 80140c0:	2104      	movs	r1, #4
 80140c2:	438a      	bics	r2, r1
 80140c4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d009      	beq.n	80140e0 <HAL_PWR_EnterSTOPMode+0xa0>
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d006      	beq.n	80140e0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80140d2:	4b05      	ldr	r3, [pc, #20]	@ (80140e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	4b04      	ldr	r3, [pc, #16]	@ (80140e8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80140d8:	2180      	movs	r1, #128	@ 0x80
 80140da:	0089      	lsls	r1, r1, #2
 80140dc:	430a      	orrs	r2, r1
 80140de:	601a      	str	r2, [r3, #0]
  }
}
 80140e0:	46c0      	nop			@ (mov r8, r8)
 80140e2:	46bd      	mov	sp, r7
 80140e4:	b006      	add	sp, #24
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	40007000 	.word	0x40007000
 80140ec:	40010000 	.word	0x40010000
 80140f0:	fffffdff 	.word	0xfffffdff
 80140f4:	e000ed00 	.word	0xe000ed00

080140f8 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80140fc:	4b07      	ldr	r3, [pc, #28]	@ (801411c <HAL_PWR_EnterSTANDBYMode+0x24>)
 80140fe:	681a      	ldr	r2, [r3, #0]
 8014100:	4b06      	ldr	r3, [pc, #24]	@ (801411c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014102:	2102      	movs	r1, #2
 8014104:	430a      	orrs	r2, r1
 8014106:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014108:	4b05      	ldr	r3, [pc, #20]	@ (8014120 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801410a:	691a      	ldr	r2, [r3, #16]
 801410c:	4b04      	ldr	r3, [pc, #16]	@ (8014120 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801410e:	2104      	movs	r1, #4
 8014110:	430a      	orrs	r2, r1
 8014112:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014114:	bf30      	wfi
}
 8014116:	46c0      	nop			@ (mov r8, r8)
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	40007000 	.word	0x40007000
 8014120:	e000ed00 	.word	0xe000ed00

08014124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014124:	b5b0      	push	{r4, r5, r7, lr}
 8014126:	b08a      	sub	sp, #40	@ 0x28
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d102      	bne.n	8014138 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014132:	2301      	movs	r3, #1
 8014134:	f000 fbbf 	bl	80148b6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014138:	4bc9      	ldr	r3, [pc, #804]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	220c      	movs	r2, #12
 801413e:	4013      	ands	r3, r2
 8014140:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014142:	4bc7      	ldr	r3, [pc, #796]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014144:	68da      	ldr	r2, [r3, #12]
 8014146:	2380      	movs	r3, #128	@ 0x80
 8014148:	025b      	lsls	r3, r3, #9
 801414a:	4013      	ands	r3, r2
 801414c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	2201      	movs	r2, #1
 8014154:	4013      	ands	r3, r2
 8014156:	d100      	bne.n	801415a <HAL_RCC_OscConfig+0x36>
 8014158:	e07e      	b.n	8014258 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	2b08      	cmp	r3, #8
 801415e:	d007      	beq.n	8014170 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	2b0c      	cmp	r3, #12
 8014164:	d112      	bne.n	801418c <HAL_RCC_OscConfig+0x68>
 8014166:	69ba      	ldr	r2, [r7, #24]
 8014168:	2380      	movs	r3, #128	@ 0x80
 801416a:	025b      	lsls	r3, r3, #9
 801416c:	429a      	cmp	r2, r3
 801416e:	d10d      	bne.n	801418c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014170:	4bbb      	ldr	r3, [pc, #748]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014172:	681a      	ldr	r2, [r3, #0]
 8014174:	2380      	movs	r3, #128	@ 0x80
 8014176:	029b      	lsls	r3, r3, #10
 8014178:	4013      	ands	r3, r2
 801417a:	d100      	bne.n	801417e <HAL_RCC_OscConfig+0x5a>
 801417c:	e06b      	b.n	8014256 <HAL_RCC_OscConfig+0x132>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d167      	bne.n	8014256 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014186:	2301      	movs	r3, #1
 8014188:	f000 fb95 	bl	80148b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	685a      	ldr	r2, [r3, #4]
 8014190:	2380      	movs	r3, #128	@ 0x80
 8014192:	025b      	lsls	r3, r3, #9
 8014194:	429a      	cmp	r2, r3
 8014196:	d107      	bne.n	80141a8 <HAL_RCC_OscConfig+0x84>
 8014198:	4bb1      	ldr	r3, [pc, #708]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 801419a:	681a      	ldr	r2, [r3, #0]
 801419c:	4bb0      	ldr	r3, [pc, #704]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 801419e:	2180      	movs	r1, #128	@ 0x80
 80141a0:	0249      	lsls	r1, r1, #9
 80141a2:	430a      	orrs	r2, r1
 80141a4:	601a      	str	r2, [r3, #0]
 80141a6:	e027      	b.n	80141f8 <HAL_RCC_OscConfig+0xd4>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	685a      	ldr	r2, [r3, #4]
 80141ac:	23a0      	movs	r3, #160	@ 0xa0
 80141ae:	02db      	lsls	r3, r3, #11
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d10e      	bne.n	80141d2 <HAL_RCC_OscConfig+0xae>
 80141b4:	4baa      	ldr	r3, [pc, #680]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	4ba9      	ldr	r3, [pc, #676]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141ba:	2180      	movs	r1, #128	@ 0x80
 80141bc:	02c9      	lsls	r1, r1, #11
 80141be:	430a      	orrs	r2, r1
 80141c0:	601a      	str	r2, [r3, #0]
 80141c2:	4ba7      	ldr	r3, [pc, #668]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141c4:	681a      	ldr	r2, [r3, #0]
 80141c6:	4ba6      	ldr	r3, [pc, #664]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141c8:	2180      	movs	r1, #128	@ 0x80
 80141ca:	0249      	lsls	r1, r1, #9
 80141cc:	430a      	orrs	r2, r1
 80141ce:	601a      	str	r2, [r3, #0]
 80141d0:	e012      	b.n	80141f8 <HAL_RCC_OscConfig+0xd4>
 80141d2:	4ba3      	ldr	r3, [pc, #652]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	4ba2      	ldr	r3, [pc, #648]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141d8:	49a2      	ldr	r1, [pc, #648]	@ (8014464 <HAL_RCC_OscConfig+0x340>)
 80141da:	400a      	ands	r2, r1
 80141dc:	601a      	str	r2, [r3, #0]
 80141de:	4ba0      	ldr	r3, [pc, #640]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141e0:	681a      	ldr	r2, [r3, #0]
 80141e2:	2380      	movs	r3, #128	@ 0x80
 80141e4:	025b      	lsls	r3, r3, #9
 80141e6:	4013      	ands	r3, r2
 80141e8:	60fb      	str	r3, [r7, #12]
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	4b9c      	ldr	r3, [pc, #624]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141ee:	681a      	ldr	r2, [r3, #0]
 80141f0:	4b9b      	ldr	r3, [pc, #620]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80141f2:	499d      	ldr	r1, [pc, #628]	@ (8014468 <HAL_RCC_OscConfig+0x344>)
 80141f4:	400a      	ands	r2, r1
 80141f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d015      	beq.n	801422c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014200:	f7f9 fe86 	bl	800df10 <HAL_GetTick>
 8014204:	0003      	movs	r3, r0
 8014206:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014208:	e009      	b.n	801421e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801420a:	f7f9 fe81 	bl	800df10 <HAL_GetTick>
 801420e:	0002      	movs	r2, r0
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	1ad3      	subs	r3, r2, r3
 8014214:	2b64      	cmp	r3, #100	@ 0x64
 8014216:	d902      	bls.n	801421e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014218:	2303      	movs	r3, #3
 801421a:	f000 fb4c 	bl	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801421e:	4b90      	ldr	r3, [pc, #576]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	2380      	movs	r3, #128	@ 0x80
 8014224:	029b      	lsls	r3, r3, #10
 8014226:	4013      	ands	r3, r2
 8014228:	d0ef      	beq.n	801420a <HAL_RCC_OscConfig+0xe6>
 801422a:	e015      	b.n	8014258 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801422c:	f7f9 fe70 	bl	800df10 <HAL_GetTick>
 8014230:	0003      	movs	r3, r0
 8014232:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014234:	e008      	b.n	8014248 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014236:	f7f9 fe6b 	bl	800df10 <HAL_GetTick>
 801423a:	0002      	movs	r2, r0
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	2b64      	cmp	r3, #100	@ 0x64
 8014242:	d901      	bls.n	8014248 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8014244:	2303      	movs	r3, #3
 8014246:	e336      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014248:	4b85      	ldr	r3, [pc, #532]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	2380      	movs	r3, #128	@ 0x80
 801424e:	029b      	lsls	r3, r3, #10
 8014250:	4013      	ands	r3, r2
 8014252:	d1f0      	bne.n	8014236 <HAL_RCC_OscConfig+0x112>
 8014254:	e000      	b.n	8014258 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014256:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2202      	movs	r2, #2
 801425e:	4013      	ands	r3, r2
 8014260:	d100      	bne.n	8014264 <HAL_RCC_OscConfig+0x140>
 8014262:	e099      	b.n	8014398 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801426c:	2220      	movs	r2, #32
 801426e:	4013      	ands	r3, r2
 8014270:	d009      	beq.n	8014286 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8014272:	4b7b      	ldr	r3, [pc, #492]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014274:	681a      	ldr	r2, [r3, #0]
 8014276:	4b7a      	ldr	r3, [pc, #488]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014278:	2120      	movs	r1, #32
 801427a:	430a      	orrs	r2, r1
 801427c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014280:	2220      	movs	r2, #32
 8014282:	4393      	bics	r3, r2
 8014284:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	2b04      	cmp	r3, #4
 801428a:	d005      	beq.n	8014298 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801428c:	69fb      	ldr	r3, [r7, #28]
 801428e:	2b0c      	cmp	r3, #12
 8014290:	d13e      	bne.n	8014310 <HAL_RCC_OscConfig+0x1ec>
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d13b      	bne.n	8014310 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8014298:	4b71      	ldr	r3, [pc, #452]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2204      	movs	r2, #4
 801429e:	4013      	ands	r3, r2
 80142a0:	d004      	beq.n	80142ac <HAL_RCC_OscConfig+0x188>
 80142a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d101      	bne.n	80142ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80142a8:	2301      	movs	r3, #1
 80142aa:	e304      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80142ac:	4b6c      	ldr	r3, [pc, #432]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80142ae:	685b      	ldr	r3, [r3, #4]
 80142b0:	4a6e      	ldr	r2, [pc, #440]	@ (801446c <HAL_RCC_OscConfig+0x348>)
 80142b2:	4013      	ands	r3, r2
 80142b4:	0019      	movs	r1, r3
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	691b      	ldr	r3, [r3, #16]
 80142ba:	021a      	lsls	r2, r3, #8
 80142bc:	4b68      	ldr	r3, [pc, #416]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80142be:	430a      	orrs	r2, r1
 80142c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80142c2:	4b67      	ldr	r3, [pc, #412]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	2209      	movs	r2, #9
 80142c8:	4393      	bics	r3, r2
 80142ca:	0019      	movs	r1, r3
 80142cc:	4b64      	ldr	r3, [pc, #400]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80142ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142d0:	430a      	orrs	r2, r1
 80142d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80142d4:	f000 fc42 	bl	8014b5c <HAL_RCC_GetSysClockFreq>
 80142d8:	0001      	movs	r1, r0
 80142da:	4b61      	ldr	r3, [pc, #388]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80142dc:	68db      	ldr	r3, [r3, #12]
 80142de:	091b      	lsrs	r3, r3, #4
 80142e0:	220f      	movs	r2, #15
 80142e2:	4013      	ands	r3, r2
 80142e4:	4a62      	ldr	r2, [pc, #392]	@ (8014470 <HAL_RCC_OscConfig+0x34c>)
 80142e6:	5cd3      	ldrb	r3, [r2, r3]
 80142e8:	000a      	movs	r2, r1
 80142ea:	40da      	lsrs	r2, r3
 80142ec:	4b61      	ldr	r3, [pc, #388]	@ (8014474 <HAL_RCC_OscConfig+0x350>)
 80142ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80142f0:	4b61      	ldr	r3, [pc, #388]	@ (8014478 <HAL_RCC_OscConfig+0x354>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2513      	movs	r5, #19
 80142f6:	197c      	adds	r4, r7, r5
 80142f8:	0018      	movs	r0, r3
 80142fa:	f7f9 fdc3 	bl	800de84 <HAL_InitTick>
 80142fe:	0003      	movs	r3, r0
 8014300:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8014302:	197b      	adds	r3, r7, r5
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d046      	beq.n	8014398 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801430a:	197b      	adds	r3, r7, r5
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	e2d2      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8014310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014312:	2b00      	cmp	r3, #0
 8014314:	d027      	beq.n	8014366 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8014316:	4b52      	ldr	r3, [pc, #328]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	2209      	movs	r2, #9
 801431c:	4393      	bics	r3, r2
 801431e:	0019      	movs	r1, r3
 8014320:	4b4f      	ldr	r3, [pc, #316]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014324:	430a      	orrs	r2, r1
 8014326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014328:	f7f9 fdf2 	bl	800df10 <HAL_GetTick>
 801432c:	0003      	movs	r3, r0
 801432e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014330:	e008      	b.n	8014344 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014332:	f7f9 fded 	bl	800df10 <HAL_GetTick>
 8014336:	0002      	movs	r2, r0
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	2b02      	cmp	r3, #2
 801433e:	d901      	bls.n	8014344 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8014340:	2303      	movs	r3, #3
 8014342:	e2b8      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014344:	4b46      	ldr	r3, [pc, #280]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2204      	movs	r2, #4
 801434a:	4013      	ands	r3, r2
 801434c:	d0f1      	beq.n	8014332 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801434e:	4b44      	ldr	r3, [pc, #272]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	4a46      	ldr	r2, [pc, #280]	@ (801446c <HAL_RCC_OscConfig+0x348>)
 8014354:	4013      	ands	r3, r2
 8014356:	0019      	movs	r1, r3
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	691b      	ldr	r3, [r3, #16]
 801435c:	021a      	lsls	r2, r3, #8
 801435e:	4b40      	ldr	r3, [pc, #256]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014360:	430a      	orrs	r2, r1
 8014362:	605a      	str	r2, [r3, #4]
 8014364:	e018      	b.n	8014398 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014366:	4b3e      	ldr	r3, [pc, #248]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014368:	681a      	ldr	r2, [r3, #0]
 801436a:	4b3d      	ldr	r3, [pc, #244]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 801436c:	2101      	movs	r1, #1
 801436e:	438a      	bics	r2, r1
 8014370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014372:	f7f9 fdcd 	bl	800df10 <HAL_GetTick>
 8014376:	0003      	movs	r3, r0
 8014378:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801437a:	e008      	b.n	801438e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801437c:	f7f9 fdc8 	bl	800df10 <HAL_GetTick>
 8014380:	0002      	movs	r2, r0
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	1ad3      	subs	r3, r2, r3
 8014386:	2b02      	cmp	r3, #2
 8014388:	d901      	bls.n	801438e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801438a:	2303      	movs	r3, #3
 801438c:	e293      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801438e:	4b34      	ldr	r3, [pc, #208]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2204      	movs	r2, #4
 8014394:	4013      	ands	r3, r2
 8014396:	d1f1      	bne.n	801437c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2210      	movs	r2, #16
 801439e:	4013      	ands	r3, r2
 80143a0:	d100      	bne.n	80143a4 <HAL_RCC_OscConfig+0x280>
 80143a2:	e0a2      	b.n	80144ea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d140      	bne.n	801442c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80143aa:	4b2d      	ldr	r3, [pc, #180]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	2380      	movs	r3, #128	@ 0x80
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	4013      	ands	r3, r2
 80143b4:	d005      	beq.n	80143c2 <HAL_RCC_OscConfig+0x29e>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	69db      	ldr	r3, [r3, #28]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d101      	bne.n	80143c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80143be:	2301      	movs	r3, #1
 80143c0:	e279      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80143c2:	4b27      	ldr	r3, [pc, #156]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	4a2d      	ldr	r2, [pc, #180]	@ (801447c <HAL_RCC_OscConfig+0x358>)
 80143c8:	4013      	ands	r3, r2
 80143ca:	0019      	movs	r1, r3
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80143d0:	4b23      	ldr	r3, [pc, #140]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80143d2:	430a      	orrs	r2, r1
 80143d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80143d6:	4b22      	ldr	r3, [pc, #136]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	021b      	lsls	r3, r3, #8
 80143dc:	0a19      	lsrs	r1, r3, #8
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6a1b      	ldr	r3, [r3, #32]
 80143e2:	061a      	lsls	r2, r3, #24
 80143e4:	4b1e      	ldr	r3, [pc, #120]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80143e6:	430a      	orrs	r2, r1
 80143e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143ee:	0b5b      	lsrs	r3, r3, #13
 80143f0:	3301      	adds	r3, #1
 80143f2:	2280      	movs	r2, #128	@ 0x80
 80143f4:	0212      	lsls	r2, r2, #8
 80143f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80143f8:	4b19      	ldr	r3, [pc, #100]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 80143fa:	68db      	ldr	r3, [r3, #12]
 80143fc:	091b      	lsrs	r3, r3, #4
 80143fe:	210f      	movs	r1, #15
 8014400:	400b      	ands	r3, r1
 8014402:	491b      	ldr	r1, [pc, #108]	@ (8014470 <HAL_RCC_OscConfig+0x34c>)
 8014404:	5ccb      	ldrb	r3, [r1, r3]
 8014406:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014408:	4b1a      	ldr	r3, [pc, #104]	@ (8014474 <HAL_RCC_OscConfig+0x350>)
 801440a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801440c:	4b1a      	ldr	r3, [pc, #104]	@ (8014478 <HAL_RCC_OscConfig+0x354>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	2513      	movs	r5, #19
 8014412:	197c      	adds	r4, r7, r5
 8014414:	0018      	movs	r0, r3
 8014416:	f7f9 fd35 	bl	800de84 <HAL_InitTick>
 801441a:	0003      	movs	r3, r0
 801441c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801441e:	197b      	adds	r3, r7, r5
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d061      	beq.n	80144ea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8014426:	197b      	adds	r3, r7, r5
 8014428:	781b      	ldrb	r3, [r3, #0]
 801442a:	e244      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	69db      	ldr	r3, [r3, #28]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d040      	beq.n	80144b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8014434:	4b0a      	ldr	r3, [pc, #40]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	4b09      	ldr	r3, [pc, #36]	@ (8014460 <HAL_RCC_OscConfig+0x33c>)
 801443a:	2180      	movs	r1, #128	@ 0x80
 801443c:	0049      	lsls	r1, r1, #1
 801443e:	430a      	orrs	r2, r1
 8014440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014442:	f7f9 fd65 	bl	800df10 <HAL_GetTick>
 8014446:	0003      	movs	r3, r0
 8014448:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801444a:	e019      	b.n	8014480 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801444c:	f7f9 fd60 	bl	800df10 <HAL_GetTick>
 8014450:	0002      	movs	r2, r0
 8014452:	697b      	ldr	r3, [r7, #20]
 8014454:	1ad3      	subs	r3, r2, r3
 8014456:	2b02      	cmp	r3, #2
 8014458:	d912      	bls.n	8014480 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801445a:	2303      	movs	r3, #3
 801445c:	e22b      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
 801445e:	46c0      	nop			@ (mov r8, r8)
 8014460:	40021000 	.word	0x40021000
 8014464:	fffeffff 	.word	0xfffeffff
 8014468:	fffbffff 	.word	0xfffbffff
 801446c:	ffffe0ff 	.word	0xffffe0ff
 8014470:	08024078 	.word	0x08024078
 8014474:	200000c8 	.word	0x200000c8
 8014478:	200000d8 	.word	0x200000d8
 801447c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014480:	4bca      	ldr	r3, [pc, #808]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	2380      	movs	r3, #128	@ 0x80
 8014486:	009b      	lsls	r3, r3, #2
 8014488:	4013      	ands	r3, r2
 801448a:	d0df      	beq.n	801444c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801448c:	4bc7      	ldr	r3, [pc, #796]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	4ac7      	ldr	r2, [pc, #796]	@ (80147b0 <HAL_RCC_OscConfig+0x68c>)
 8014492:	4013      	ands	r3, r2
 8014494:	0019      	movs	r1, r3
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801449a:	4bc4      	ldr	r3, [pc, #784]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801449c:	430a      	orrs	r2, r1
 801449e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80144a0:	4bc2      	ldr	r3, [pc, #776]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	021b      	lsls	r3, r3, #8
 80144a6:	0a19      	lsrs	r1, r3, #8
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6a1b      	ldr	r3, [r3, #32]
 80144ac:	061a      	lsls	r2, r3, #24
 80144ae:	4bbf      	ldr	r3, [pc, #764]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80144b0:	430a      	orrs	r2, r1
 80144b2:	605a      	str	r2, [r3, #4]
 80144b4:	e019      	b.n	80144ea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80144b6:	4bbd      	ldr	r3, [pc, #756]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80144b8:	681a      	ldr	r2, [r3, #0]
 80144ba:	4bbc      	ldr	r3, [pc, #752]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80144bc:	49bd      	ldr	r1, [pc, #756]	@ (80147b4 <HAL_RCC_OscConfig+0x690>)
 80144be:	400a      	ands	r2, r1
 80144c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80144c2:	f7f9 fd25 	bl	800df10 <HAL_GetTick>
 80144c6:	0003      	movs	r3, r0
 80144c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80144ca:	e008      	b.n	80144de <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80144cc:	f7f9 fd20 	bl	800df10 <HAL_GetTick>
 80144d0:	0002      	movs	r2, r0
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	1ad3      	subs	r3, r2, r3
 80144d6:	2b02      	cmp	r3, #2
 80144d8:	d901      	bls.n	80144de <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80144da:	2303      	movs	r3, #3
 80144dc:	e1eb      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80144de:	4bb3      	ldr	r3, [pc, #716]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	2380      	movs	r3, #128	@ 0x80
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	4013      	ands	r3, r2
 80144e8:	d1f0      	bne.n	80144cc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2208      	movs	r2, #8
 80144f0:	4013      	ands	r3, r2
 80144f2:	d036      	beq.n	8014562 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	695b      	ldr	r3, [r3, #20]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d019      	beq.n	8014530 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80144fc:	4bab      	ldr	r3, [pc, #684]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80144fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014500:	4baa      	ldr	r3, [pc, #680]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014502:	2101      	movs	r1, #1
 8014504:	430a      	orrs	r2, r1
 8014506:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014508:	f7f9 fd02 	bl	800df10 <HAL_GetTick>
 801450c:	0003      	movs	r3, r0
 801450e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014510:	e008      	b.n	8014524 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014512:	f7f9 fcfd 	bl	800df10 <HAL_GetTick>
 8014516:	0002      	movs	r2, r0
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	2b02      	cmp	r3, #2
 801451e:	d901      	bls.n	8014524 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8014520:	2303      	movs	r3, #3
 8014522:	e1c8      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014524:	4ba1      	ldr	r3, [pc, #644]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014528:	2202      	movs	r2, #2
 801452a:	4013      	ands	r3, r2
 801452c:	d0f1      	beq.n	8014512 <HAL_RCC_OscConfig+0x3ee>
 801452e:	e018      	b.n	8014562 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014530:	4b9e      	ldr	r3, [pc, #632]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014532:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014534:	4b9d      	ldr	r3, [pc, #628]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014536:	2101      	movs	r1, #1
 8014538:	438a      	bics	r2, r1
 801453a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801453c:	f7f9 fce8 	bl	800df10 <HAL_GetTick>
 8014540:	0003      	movs	r3, r0
 8014542:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014544:	e008      	b.n	8014558 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014546:	f7f9 fce3 	bl	800df10 <HAL_GetTick>
 801454a:	0002      	movs	r2, r0
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	2b02      	cmp	r3, #2
 8014552:	d901      	bls.n	8014558 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8014554:	2303      	movs	r3, #3
 8014556:	e1ae      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014558:	4b94      	ldr	r3, [pc, #592]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801455a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801455c:	2202      	movs	r2, #2
 801455e:	4013      	ands	r3, r2
 8014560:	d1f1      	bne.n	8014546 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	2204      	movs	r2, #4
 8014568:	4013      	ands	r3, r2
 801456a:	d100      	bne.n	801456e <HAL_RCC_OscConfig+0x44a>
 801456c:	e0ae      	b.n	80146cc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801456e:	2023      	movs	r0, #35	@ 0x23
 8014570:	183b      	adds	r3, r7, r0
 8014572:	2200      	movs	r2, #0
 8014574:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014576:	4b8d      	ldr	r3, [pc, #564]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801457a:	2380      	movs	r3, #128	@ 0x80
 801457c:	055b      	lsls	r3, r3, #21
 801457e:	4013      	ands	r3, r2
 8014580:	d109      	bne.n	8014596 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014582:	4b8a      	ldr	r3, [pc, #552]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014586:	4b89      	ldr	r3, [pc, #548]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014588:	2180      	movs	r1, #128	@ 0x80
 801458a:	0549      	lsls	r1, r1, #21
 801458c:	430a      	orrs	r2, r1
 801458e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014590:	183b      	adds	r3, r7, r0
 8014592:	2201      	movs	r2, #1
 8014594:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014596:	4b88      	ldr	r3, [pc, #544]	@ (80147b8 <HAL_RCC_OscConfig+0x694>)
 8014598:	681a      	ldr	r2, [r3, #0]
 801459a:	2380      	movs	r3, #128	@ 0x80
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4013      	ands	r3, r2
 80145a0:	d11a      	bne.n	80145d8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80145a2:	4b85      	ldr	r3, [pc, #532]	@ (80147b8 <HAL_RCC_OscConfig+0x694>)
 80145a4:	681a      	ldr	r2, [r3, #0]
 80145a6:	4b84      	ldr	r3, [pc, #528]	@ (80147b8 <HAL_RCC_OscConfig+0x694>)
 80145a8:	2180      	movs	r1, #128	@ 0x80
 80145aa:	0049      	lsls	r1, r1, #1
 80145ac:	430a      	orrs	r2, r1
 80145ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80145b0:	f7f9 fcae 	bl	800df10 <HAL_GetTick>
 80145b4:	0003      	movs	r3, r0
 80145b6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80145b8:	e008      	b.n	80145cc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80145ba:	f7f9 fca9 	bl	800df10 <HAL_GetTick>
 80145be:	0002      	movs	r2, r0
 80145c0:	697b      	ldr	r3, [r7, #20]
 80145c2:	1ad3      	subs	r3, r2, r3
 80145c4:	2b64      	cmp	r3, #100	@ 0x64
 80145c6:	d901      	bls.n	80145cc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80145c8:	2303      	movs	r3, #3
 80145ca:	e174      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80145cc:	4b7a      	ldr	r3, [pc, #488]	@ (80147b8 <HAL_RCC_OscConfig+0x694>)
 80145ce:	681a      	ldr	r2, [r3, #0]
 80145d0:	2380      	movs	r3, #128	@ 0x80
 80145d2:	005b      	lsls	r3, r3, #1
 80145d4:	4013      	ands	r3, r2
 80145d6:	d0f0      	beq.n	80145ba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	689a      	ldr	r2, [r3, #8]
 80145dc:	2380      	movs	r3, #128	@ 0x80
 80145de:	005b      	lsls	r3, r3, #1
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d107      	bne.n	80145f4 <HAL_RCC_OscConfig+0x4d0>
 80145e4:	4b71      	ldr	r3, [pc, #452]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80145e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80145e8:	4b70      	ldr	r3, [pc, #448]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80145ea:	2180      	movs	r1, #128	@ 0x80
 80145ec:	0049      	lsls	r1, r1, #1
 80145ee:	430a      	orrs	r2, r1
 80145f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80145f2:	e031      	b.n	8014658 <HAL_RCC_OscConfig+0x534>
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	689b      	ldr	r3, [r3, #8]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d10c      	bne.n	8014616 <HAL_RCC_OscConfig+0x4f2>
 80145fc:	4b6b      	ldr	r3, [pc, #428]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80145fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014600:	4b6a      	ldr	r3, [pc, #424]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014602:	496c      	ldr	r1, [pc, #432]	@ (80147b4 <HAL_RCC_OscConfig+0x690>)
 8014604:	400a      	ands	r2, r1
 8014606:	651a      	str	r2, [r3, #80]	@ 0x50
 8014608:	4b68      	ldr	r3, [pc, #416]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801460a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801460c:	4b67      	ldr	r3, [pc, #412]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801460e:	496b      	ldr	r1, [pc, #428]	@ (80147bc <HAL_RCC_OscConfig+0x698>)
 8014610:	400a      	ands	r2, r1
 8014612:	651a      	str	r2, [r3, #80]	@ 0x50
 8014614:	e020      	b.n	8014658 <HAL_RCC_OscConfig+0x534>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	689a      	ldr	r2, [r3, #8]
 801461a:	23a0      	movs	r3, #160	@ 0xa0
 801461c:	00db      	lsls	r3, r3, #3
 801461e:	429a      	cmp	r2, r3
 8014620:	d10e      	bne.n	8014640 <HAL_RCC_OscConfig+0x51c>
 8014622:	4b62      	ldr	r3, [pc, #392]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014626:	4b61      	ldr	r3, [pc, #388]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014628:	2180      	movs	r1, #128	@ 0x80
 801462a:	00c9      	lsls	r1, r1, #3
 801462c:	430a      	orrs	r2, r1
 801462e:	651a      	str	r2, [r3, #80]	@ 0x50
 8014630:	4b5e      	ldr	r3, [pc, #376]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014632:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014634:	4b5d      	ldr	r3, [pc, #372]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014636:	2180      	movs	r1, #128	@ 0x80
 8014638:	0049      	lsls	r1, r1, #1
 801463a:	430a      	orrs	r2, r1
 801463c:	651a      	str	r2, [r3, #80]	@ 0x50
 801463e:	e00b      	b.n	8014658 <HAL_RCC_OscConfig+0x534>
 8014640:	4b5a      	ldr	r3, [pc, #360]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014642:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014644:	4b59      	ldr	r3, [pc, #356]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014646:	495b      	ldr	r1, [pc, #364]	@ (80147b4 <HAL_RCC_OscConfig+0x690>)
 8014648:	400a      	ands	r2, r1
 801464a:	651a      	str	r2, [r3, #80]	@ 0x50
 801464c:	4b57      	ldr	r3, [pc, #348]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801464e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014650:	4b56      	ldr	r3, [pc, #344]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014652:	495a      	ldr	r1, [pc, #360]	@ (80147bc <HAL_RCC_OscConfig+0x698>)
 8014654:	400a      	ands	r2, r1
 8014656:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	689b      	ldr	r3, [r3, #8]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d015      	beq.n	801468c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014660:	f7f9 fc56 	bl	800df10 <HAL_GetTick>
 8014664:	0003      	movs	r3, r0
 8014666:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014668:	e009      	b.n	801467e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801466a:	f7f9 fc51 	bl	800df10 <HAL_GetTick>
 801466e:	0002      	movs	r2, r0
 8014670:	697b      	ldr	r3, [r7, #20]
 8014672:	1ad3      	subs	r3, r2, r3
 8014674:	4a52      	ldr	r2, [pc, #328]	@ (80147c0 <HAL_RCC_OscConfig+0x69c>)
 8014676:	4293      	cmp	r3, r2
 8014678:	d901      	bls.n	801467e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801467a:	2303      	movs	r3, #3
 801467c:	e11b      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801467e:	4b4b      	ldr	r3, [pc, #300]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014682:	2380      	movs	r3, #128	@ 0x80
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	4013      	ands	r3, r2
 8014688:	d0ef      	beq.n	801466a <HAL_RCC_OscConfig+0x546>
 801468a:	e014      	b.n	80146b6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801468c:	f7f9 fc40 	bl	800df10 <HAL_GetTick>
 8014690:	0003      	movs	r3, r0
 8014692:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014694:	e009      	b.n	80146aa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014696:	f7f9 fc3b 	bl	800df10 <HAL_GetTick>
 801469a:	0002      	movs	r2, r0
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	1ad3      	subs	r3, r2, r3
 80146a0:	4a47      	ldr	r2, [pc, #284]	@ (80147c0 <HAL_RCC_OscConfig+0x69c>)
 80146a2:	4293      	cmp	r3, r2
 80146a4:	d901      	bls.n	80146aa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80146a6:	2303      	movs	r3, #3
 80146a8:	e105      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80146aa:	4b40      	ldr	r3, [pc, #256]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80146ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146ae:	2380      	movs	r3, #128	@ 0x80
 80146b0:	009b      	lsls	r3, r3, #2
 80146b2:	4013      	ands	r3, r2
 80146b4:	d1ef      	bne.n	8014696 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80146b6:	2323      	movs	r3, #35	@ 0x23
 80146b8:	18fb      	adds	r3, r7, r3
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	2b01      	cmp	r3, #1
 80146be:	d105      	bne.n	80146cc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80146c0:	4b3a      	ldr	r3, [pc, #232]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80146c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80146c4:	4b39      	ldr	r3, [pc, #228]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80146c6:	493f      	ldr	r1, [pc, #252]	@ (80147c4 <HAL_RCC_OscConfig+0x6a0>)
 80146c8:	400a      	ands	r2, r1
 80146ca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2220      	movs	r2, #32
 80146d2:	4013      	ands	r3, r2
 80146d4:	d049      	beq.n	801476a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	699b      	ldr	r3, [r3, #24]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d026      	beq.n	801472c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80146de:	4b33      	ldr	r3, [pc, #204]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80146e0:	689a      	ldr	r2, [r3, #8]
 80146e2:	4b32      	ldr	r3, [pc, #200]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80146e4:	2101      	movs	r1, #1
 80146e6:	430a      	orrs	r2, r1
 80146e8:	609a      	str	r2, [r3, #8]
 80146ea:	4b30      	ldr	r3, [pc, #192]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80146ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80146ee:	4b2f      	ldr	r3, [pc, #188]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 80146f0:	2101      	movs	r1, #1
 80146f2:	430a      	orrs	r2, r1
 80146f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80146f6:	4b34      	ldr	r3, [pc, #208]	@ (80147c8 <HAL_RCC_OscConfig+0x6a4>)
 80146f8:	6a1a      	ldr	r2, [r3, #32]
 80146fa:	4b33      	ldr	r3, [pc, #204]	@ (80147c8 <HAL_RCC_OscConfig+0x6a4>)
 80146fc:	2180      	movs	r1, #128	@ 0x80
 80146fe:	0189      	lsls	r1, r1, #6
 8014700:	430a      	orrs	r2, r1
 8014702:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014704:	f7f9 fc04 	bl	800df10 <HAL_GetTick>
 8014708:	0003      	movs	r3, r0
 801470a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801470c:	e008      	b.n	8014720 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801470e:	f7f9 fbff 	bl	800df10 <HAL_GetTick>
 8014712:	0002      	movs	r2, r0
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	2b02      	cmp	r3, #2
 801471a:	d901      	bls.n	8014720 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801471c:	2303      	movs	r3, #3
 801471e:	e0ca      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014720:	4b22      	ldr	r3, [pc, #136]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014722:	689b      	ldr	r3, [r3, #8]
 8014724:	2202      	movs	r2, #2
 8014726:	4013      	ands	r3, r2
 8014728:	d0f1      	beq.n	801470e <HAL_RCC_OscConfig+0x5ea>
 801472a:	e01e      	b.n	801476a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801472c:	4b1f      	ldr	r3, [pc, #124]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801472e:	689a      	ldr	r2, [r3, #8]
 8014730:	4b1e      	ldr	r3, [pc, #120]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014732:	2101      	movs	r1, #1
 8014734:	438a      	bics	r2, r1
 8014736:	609a      	str	r2, [r3, #8]
 8014738:	4b23      	ldr	r3, [pc, #140]	@ (80147c8 <HAL_RCC_OscConfig+0x6a4>)
 801473a:	6a1a      	ldr	r2, [r3, #32]
 801473c:	4b22      	ldr	r3, [pc, #136]	@ (80147c8 <HAL_RCC_OscConfig+0x6a4>)
 801473e:	4923      	ldr	r1, [pc, #140]	@ (80147cc <HAL_RCC_OscConfig+0x6a8>)
 8014740:	400a      	ands	r2, r1
 8014742:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014744:	f7f9 fbe4 	bl	800df10 <HAL_GetTick>
 8014748:	0003      	movs	r3, r0
 801474a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801474c:	e008      	b.n	8014760 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801474e:	f7f9 fbdf 	bl	800df10 <HAL_GetTick>
 8014752:	0002      	movs	r2, r0
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	1ad3      	subs	r3, r2, r3
 8014758:	2b02      	cmp	r3, #2
 801475a:	d901      	bls.n	8014760 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801475c:	2303      	movs	r3, #3
 801475e:	e0aa      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014760:	4b12      	ldr	r3, [pc, #72]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	2202      	movs	r2, #2
 8014766:	4013      	ands	r3, r2
 8014768:	d1f1      	bne.n	801474e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801476e:	2b00      	cmp	r3, #0
 8014770:	d100      	bne.n	8014774 <HAL_RCC_OscConfig+0x650>
 8014772:	e09f      	b.n	80148b4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014774:	69fb      	ldr	r3, [r7, #28]
 8014776:	2b0c      	cmp	r3, #12
 8014778:	d100      	bne.n	801477c <HAL_RCC_OscConfig+0x658>
 801477a:	e078      	b.n	801486e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014780:	2b02      	cmp	r3, #2
 8014782:	d159      	bne.n	8014838 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014784:	4b09      	ldr	r3, [pc, #36]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	4b08      	ldr	r3, [pc, #32]	@ (80147ac <HAL_RCC_OscConfig+0x688>)
 801478a:	4911      	ldr	r1, [pc, #68]	@ (80147d0 <HAL_RCC_OscConfig+0x6ac>)
 801478c:	400a      	ands	r2, r1
 801478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014790:	f7f9 fbbe 	bl	800df10 <HAL_GetTick>
 8014794:	0003      	movs	r3, r0
 8014796:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014798:	e01c      	b.n	80147d4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801479a:	f7f9 fbb9 	bl	800df10 <HAL_GetTick>
 801479e:	0002      	movs	r2, r0
 80147a0:	697b      	ldr	r3, [r7, #20]
 80147a2:	1ad3      	subs	r3, r2, r3
 80147a4:	2b02      	cmp	r3, #2
 80147a6:	d915      	bls.n	80147d4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80147a8:	2303      	movs	r3, #3
 80147aa:	e084      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
 80147ac:	40021000 	.word	0x40021000
 80147b0:	ffff1fff 	.word	0xffff1fff
 80147b4:	fffffeff 	.word	0xfffffeff
 80147b8:	40007000 	.word	0x40007000
 80147bc:	fffffbff 	.word	0xfffffbff
 80147c0:	00001388 	.word	0x00001388
 80147c4:	efffffff 	.word	0xefffffff
 80147c8:	40010000 	.word	0x40010000
 80147cc:	ffffdfff 	.word	0xffffdfff
 80147d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80147d4:	4b3a      	ldr	r3, [pc, #232]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	2380      	movs	r3, #128	@ 0x80
 80147da:	049b      	lsls	r3, r3, #18
 80147dc:	4013      	ands	r3, r2
 80147de:	d1dc      	bne.n	801479a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80147e0:	4b37      	ldr	r3, [pc, #220]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	4a37      	ldr	r2, [pc, #220]	@ (80148c4 <HAL_RCC_OscConfig+0x7a0>)
 80147e6:	4013      	ands	r3, r2
 80147e8:	0019      	movs	r1, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80147f2:	431a      	orrs	r2, r3
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80147f8:	431a      	orrs	r2, r3
 80147fa:	4b31      	ldr	r3, [pc, #196]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 80147fc:	430a      	orrs	r2, r1
 80147fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014800:	4b2f      	ldr	r3, [pc, #188]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 8014802:	681a      	ldr	r2, [r3, #0]
 8014804:	4b2e      	ldr	r3, [pc, #184]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 8014806:	2180      	movs	r1, #128	@ 0x80
 8014808:	0449      	lsls	r1, r1, #17
 801480a:	430a      	orrs	r2, r1
 801480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801480e:	f7f9 fb7f 	bl	800df10 <HAL_GetTick>
 8014812:	0003      	movs	r3, r0
 8014814:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014816:	e008      	b.n	801482a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014818:	f7f9 fb7a 	bl	800df10 <HAL_GetTick>
 801481c:	0002      	movs	r2, r0
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	1ad3      	subs	r3, r2, r3
 8014822:	2b02      	cmp	r3, #2
 8014824:	d901      	bls.n	801482a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8014826:	2303      	movs	r3, #3
 8014828:	e045      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801482a:	4b25      	ldr	r3, [pc, #148]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	2380      	movs	r3, #128	@ 0x80
 8014830:	049b      	lsls	r3, r3, #18
 8014832:	4013      	ands	r3, r2
 8014834:	d0f0      	beq.n	8014818 <HAL_RCC_OscConfig+0x6f4>
 8014836:	e03d      	b.n	80148b4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014838:	4b21      	ldr	r3, [pc, #132]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	4b20      	ldr	r3, [pc, #128]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 801483e:	4922      	ldr	r1, [pc, #136]	@ (80148c8 <HAL_RCC_OscConfig+0x7a4>)
 8014840:	400a      	ands	r2, r1
 8014842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014844:	f7f9 fb64 	bl	800df10 <HAL_GetTick>
 8014848:	0003      	movs	r3, r0
 801484a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801484c:	e008      	b.n	8014860 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801484e:	f7f9 fb5f 	bl	800df10 <HAL_GetTick>
 8014852:	0002      	movs	r2, r0
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	1ad3      	subs	r3, r2, r3
 8014858:	2b02      	cmp	r3, #2
 801485a:	d901      	bls.n	8014860 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801485c:	2303      	movs	r3, #3
 801485e:	e02a      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014860:	4b17      	ldr	r3, [pc, #92]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 8014862:	681a      	ldr	r2, [r3, #0]
 8014864:	2380      	movs	r3, #128	@ 0x80
 8014866:	049b      	lsls	r3, r3, #18
 8014868:	4013      	ands	r3, r2
 801486a:	d1f0      	bne.n	801484e <HAL_RCC_OscConfig+0x72a>
 801486c:	e022      	b.n	80148b4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014872:	2b01      	cmp	r3, #1
 8014874:	d101      	bne.n	801487a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8014876:	2301      	movs	r3, #1
 8014878:	e01d      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801487a:	4b11      	ldr	r3, [pc, #68]	@ (80148c0 <HAL_RCC_OscConfig+0x79c>)
 801487c:	68db      	ldr	r3, [r3, #12]
 801487e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014880:	69ba      	ldr	r2, [r7, #24]
 8014882:	2380      	movs	r3, #128	@ 0x80
 8014884:	025b      	lsls	r3, r3, #9
 8014886:	401a      	ands	r2, r3
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801488c:	429a      	cmp	r2, r3
 801488e:	d10f      	bne.n	80148b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014890:	69ba      	ldr	r2, [r7, #24]
 8014892:	23f0      	movs	r3, #240	@ 0xf0
 8014894:	039b      	lsls	r3, r3, #14
 8014896:	401a      	ands	r2, r3
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801489c:	429a      	cmp	r2, r3
 801489e:	d107      	bne.n	80148b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80148a0:	69ba      	ldr	r2, [r7, #24]
 80148a2:	23c0      	movs	r3, #192	@ 0xc0
 80148a4:	041b      	lsls	r3, r3, #16
 80148a6:	401a      	ands	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d001      	beq.n	80148b4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80148b0:	2301      	movs	r3, #1
 80148b2:	e000      	b.n	80148b6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80148b4:	2300      	movs	r3, #0
}
 80148b6:	0018      	movs	r0, r3
 80148b8:	46bd      	mov	sp, r7
 80148ba:	b00a      	add	sp, #40	@ 0x28
 80148bc:	bdb0      	pop	{r4, r5, r7, pc}
 80148be:	46c0      	nop			@ (mov r8, r8)
 80148c0:	40021000 	.word	0x40021000
 80148c4:	ff02ffff 	.word	0xff02ffff
 80148c8:	feffffff 	.word	0xfeffffff

080148cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80148cc:	b5b0      	push	{r4, r5, r7, lr}
 80148ce:	b084      	sub	sp, #16
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d101      	bne.n	80148e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80148dc:	2301      	movs	r3, #1
 80148de:	e128      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80148e0:	4b96      	ldr	r3, [pc, #600]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2201      	movs	r2, #1
 80148e6:	4013      	ands	r3, r2
 80148e8:	683a      	ldr	r2, [r7, #0]
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d91e      	bls.n	801492c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80148ee:	4b93      	ldr	r3, [pc, #588]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2201      	movs	r2, #1
 80148f4:	4393      	bics	r3, r2
 80148f6:	0019      	movs	r1, r3
 80148f8:	4b90      	ldr	r3, [pc, #576]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 80148fa:	683a      	ldr	r2, [r7, #0]
 80148fc:	430a      	orrs	r2, r1
 80148fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014900:	f7f9 fb06 	bl	800df10 <HAL_GetTick>
 8014904:	0003      	movs	r3, r0
 8014906:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014908:	e009      	b.n	801491e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801490a:	f7f9 fb01 	bl	800df10 <HAL_GetTick>
 801490e:	0002      	movs	r2, r0
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	1ad3      	subs	r3, r2, r3
 8014914:	4a8a      	ldr	r2, [pc, #552]	@ (8014b40 <HAL_RCC_ClockConfig+0x274>)
 8014916:	4293      	cmp	r3, r2
 8014918:	d901      	bls.n	801491e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801491a:	2303      	movs	r3, #3
 801491c:	e109      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801491e:	4b87      	ldr	r3, [pc, #540]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	2201      	movs	r2, #1
 8014924:	4013      	ands	r3, r2
 8014926:	683a      	ldr	r2, [r7, #0]
 8014928:	429a      	cmp	r2, r3
 801492a:	d1ee      	bne.n	801490a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	2202      	movs	r2, #2
 8014932:	4013      	ands	r3, r2
 8014934:	d009      	beq.n	801494a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014936:	4b83      	ldr	r3, [pc, #524]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014938:	68db      	ldr	r3, [r3, #12]
 801493a:	22f0      	movs	r2, #240	@ 0xf0
 801493c:	4393      	bics	r3, r2
 801493e:	0019      	movs	r1, r3
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	689a      	ldr	r2, [r3, #8]
 8014944:	4b7f      	ldr	r3, [pc, #508]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014946:	430a      	orrs	r2, r1
 8014948:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2201      	movs	r2, #1
 8014950:	4013      	ands	r3, r2
 8014952:	d100      	bne.n	8014956 <HAL_RCC_ClockConfig+0x8a>
 8014954:	e089      	b.n	8014a6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	2b02      	cmp	r3, #2
 801495c:	d107      	bne.n	801496e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801495e:	4b79      	ldr	r3, [pc, #484]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	2380      	movs	r3, #128	@ 0x80
 8014964:	029b      	lsls	r3, r3, #10
 8014966:	4013      	ands	r3, r2
 8014968:	d120      	bne.n	80149ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801496a:	2301      	movs	r3, #1
 801496c:	e0e1      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	2b03      	cmp	r3, #3
 8014974:	d107      	bne.n	8014986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014976:	4b73      	ldr	r3, [pc, #460]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	2380      	movs	r3, #128	@ 0x80
 801497c:	049b      	lsls	r3, r3, #18
 801497e:	4013      	ands	r3, r2
 8014980:	d114      	bne.n	80149ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014982:	2301      	movs	r3, #1
 8014984:	e0d5      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	2b01      	cmp	r3, #1
 801498c:	d106      	bne.n	801499c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801498e:	4b6d      	ldr	r3, [pc, #436]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	2204      	movs	r2, #4
 8014994:	4013      	ands	r3, r2
 8014996:	d109      	bne.n	80149ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014998:	2301      	movs	r3, #1
 801499a:	e0ca      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801499c:	4b69      	ldr	r3, [pc, #420]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 801499e:	681a      	ldr	r2, [r3, #0]
 80149a0:	2380      	movs	r3, #128	@ 0x80
 80149a2:	009b      	lsls	r3, r3, #2
 80149a4:	4013      	ands	r3, r2
 80149a6:	d101      	bne.n	80149ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80149a8:	2301      	movs	r3, #1
 80149aa:	e0c2      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80149ac:	4b65      	ldr	r3, [pc, #404]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 80149ae:	68db      	ldr	r3, [r3, #12]
 80149b0:	2203      	movs	r2, #3
 80149b2:	4393      	bics	r3, r2
 80149b4:	0019      	movs	r1, r3
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	685a      	ldr	r2, [r3, #4]
 80149ba:	4b62      	ldr	r3, [pc, #392]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 80149bc:	430a      	orrs	r2, r1
 80149be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80149c0:	f7f9 faa6 	bl	800df10 <HAL_GetTick>
 80149c4:	0003      	movs	r3, r0
 80149c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	2b02      	cmp	r3, #2
 80149ce:	d111      	bne.n	80149f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80149d0:	e009      	b.n	80149e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80149d2:	f7f9 fa9d 	bl	800df10 <HAL_GetTick>
 80149d6:	0002      	movs	r2, r0
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	1ad3      	subs	r3, r2, r3
 80149dc:	4a58      	ldr	r2, [pc, #352]	@ (8014b40 <HAL_RCC_ClockConfig+0x274>)
 80149de:	4293      	cmp	r3, r2
 80149e0:	d901      	bls.n	80149e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80149e2:	2303      	movs	r3, #3
 80149e4:	e0a5      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80149e6:	4b57      	ldr	r3, [pc, #348]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 80149e8:	68db      	ldr	r3, [r3, #12]
 80149ea:	220c      	movs	r2, #12
 80149ec:	4013      	ands	r3, r2
 80149ee:	2b08      	cmp	r3, #8
 80149f0:	d1ef      	bne.n	80149d2 <HAL_RCC_ClockConfig+0x106>
 80149f2:	e03a      	b.n	8014a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	2b03      	cmp	r3, #3
 80149fa:	d111      	bne.n	8014a20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80149fc:	e009      	b.n	8014a12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80149fe:	f7f9 fa87 	bl	800df10 <HAL_GetTick>
 8014a02:	0002      	movs	r2, r0
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	1ad3      	subs	r3, r2, r3
 8014a08:	4a4d      	ldr	r2, [pc, #308]	@ (8014b40 <HAL_RCC_ClockConfig+0x274>)
 8014a0a:	4293      	cmp	r3, r2
 8014a0c:	d901      	bls.n	8014a12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014a0e:	2303      	movs	r3, #3
 8014a10:	e08f      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014a12:	4b4c      	ldr	r3, [pc, #304]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	220c      	movs	r2, #12
 8014a18:	4013      	ands	r3, r2
 8014a1a:	2b0c      	cmp	r3, #12
 8014a1c:	d1ef      	bne.n	80149fe <HAL_RCC_ClockConfig+0x132>
 8014a1e:	e024      	b.n	8014a6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d11b      	bne.n	8014a60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014a28:	e009      	b.n	8014a3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014a2a:	f7f9 fa71 	bl	800df10 <HAL_GetTick>
 8014a2e:	0002      	movs	r2, r0
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	1ad3      	subs	r3, r2, r3
 8014a34:	4a42      	ldr	r2, [pc, #264]	@ (8014b40 <HAL_RCC_ClockConfig+0x274>)
 8014a36:	4293      	cmp	r3, r2
 8014a38:	d901      	bls.n	8014a3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8014a3a:	2303      	movs	r3, #3
 8014a3c:	e079      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014a3e:	4b41      	ldr	r3, [pc, #260]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014a40:	68db      	ldr	r3, [r3, #12]
 8014a42:	220c      	movs	r2, #12
 8014a44:	4013      	ands	r3, r2
 8014a46:	2b04      	cmp	r3, #4
 8014a48:	d1ef      	bne.n	8014a2a <HAL_RCC_ClockConfig+0x15e>
 8014a4a:	e00e      	b.n	8014a6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014a4c:	f7f9 fa60 	bl	800df10 <HAL_GetTick>
 8014a50:	0002      	movs	r2, r0
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	1ad3      	subs	r3, r2, r3
 8014a56:	4a3a      	ldr	r2, [pc, #232]	@ (8014b40 <HAL_RCC_ClockConfig+0x274>)
 8014a58:	4293      	cmp	r3, r2
 8014a5a:	d901      	bls.n	8014a60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014a5c:	2303      	movs	r3, #3
 8014a5e:	e068      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014a60:	4b38      	ldr	r3, [pc, #224]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	220c      	movs	r2, #12
 8014a66:	4013      	ands	r3, r2
 8014a68:	d1f0      	bne.n	8014a4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014a6a:	4b34      	ldr	r3, [pc, #208]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	2201      	movs	r2, #1
 8014a70:	4013      	ands	r3, r2
 8014a72:	683a      	ldr	r2, [r7, #0]
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d21e      	bcs.n	8014ab6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014a78:	4b30      	ldr	r3, [pc, #192]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2201      	movs	r2, #1
 8014a7e:	4393      	bics	r3, r2
 8014a80:	0019      	movs	r1, r3
 8014a82:	4b2e      	ldr	r3, [pc, #184]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 8014a84:	683a      	ldr	r2, [r7, #0]
 8014a86:	430a      	orrs	r2, r1
 8014a88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014a8a:	f7f9 fa41 	bl	800df10 <HAL_GetTick>
 8014a8e:	0003      	movs	r3, r0
 8014a90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014a92:	e009      	b.n	8014aa8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014a94:	f7f9 fa3c 	bl	800df10 <HAL_GetTick>
 8014a98:	0002      	movs	r2, r0
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	1ad3      	subs	r3, r2, r3
 8014a9e:	4a28      	ldr	r2, [pc, #160]	@ (8014b40 <HAL_RCC_ClockConfig+0x274>)
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	d901      	bls.n	8014aa8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8014aa4:	2303      	movs	r3, #3
 8014aa6:	e044      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014aa8:	4b24      	ldr	r3, [pc, #144]	@ (8014b3c <HAL_RCC_ClockConfig+0x270>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2201      	movs	r2, #1
 8014aae:	4013      	ands	r3, r2
 8014ab0:	683a      	ldr	r2, [r7, #0]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d1ee      	bne.n	8014a94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	2204      	movs	r2, #4
 8014abc:	4013      	ands	r3, r2
 8014abe:	d009      	beq.n	8014ad4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014ac0:	4b20      	ldr	r3, [pc, #128]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	4a20      	ldr	r2, [pc, #128]	@ (8014b48 <HAL_RCC_ClockConfig+0x27c>)
 8014ac6:	4013      	ands	r3, r2
 8014ac8:	0019      	movs	r1, r3
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	68da      	ldr	r2, [r3, #12]
 8014ace:	4b1d      	ldr	r3, [pc, #116]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014ad0:	430a      	orrs	r2, r1
 8014ad2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2208      	movs	r2, #8
 8014ada:	4013      	ands	r3, r2
 8014adc:	d00a      	beq.n	8014af4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014ade:	4b19      	ldr	r3, [pc, #100]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014ae0:	68db      	ldr	r3, [r3, #12]
 8014ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8014b4c <HAL_RCC_ClockConfig+0x280>)
 8014ae4:	4013      	ands	r3, r2
 8014ae6:	0019      	movs	r1, r3
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	691b      	ldr	r3, [r3, #16]
 8014aec:	00da      	lsls	r2, r3, #3
 8014aee:	4b15      	ldr	r3, [pc, #84]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014af0:	430a      	orrs	r2, r1
 8014af2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014af4:	f000 f832 	bl	8014b5c <HAL_RCC_GetSysClockFreq>
 8014af8:	0001      	movs	r1, r0
 8014afa:	4b12      	ldr	r3, [pc, #72]	@ (8014b44 <HAL_RCC_ClockConfig+0x278>)
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	091b      	lsrs	r3, r3, #4
 8014b00:	220f      	movs	r2, #15
 8014b02:	4013      	ands	r3, r2
 8014b04:	4a12      	ldr	r2, [pc, #72]	@ (8014b50 <HAL_RCC_ClockConfig+0x284>)
 8014b06:	5cd3      	ldrb	r3, [r2, r3]
 8014b08:	000a      	movs	r2, r1
 8014b0a:	40da      	lsrs	r2, r3
 8014b0c:	4b11      	ldr	r3, [pc, #68]	@ (8014b54 <HAL_RCC_ClockConfig+0x288>)
 8014b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014b10:	4b11      	ldr	r3, [pc, #68]	@ (8014b58 <HAL_RCC_ClockConfig+0x28c>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	250b      	movs	r5, #11
 8014b16:	197c      	adds	r4, r7, r5
 8014b18:	0018      	movs	r0, r3
 8014b1a:	f7f9 f9b3 	bl	800de84 <HAL_InitTick>
 8014b1e:	0003      	movs	r3, r0
 8014b20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8014b22:	197b      	adds	r3, r7, r5
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d002      	beq.n	8014b30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8014b2a:	197b      	adds	r3, r7, r5
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	e000      	b.n	8014b32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8014b30:	2300      	movs	r3, #0
}
 8014b32:	0018      	movs	r0, r3
 8014b34:	46bd      	mov	sp, r7
 8014b36:	b004      	add	sp, #16
 8014b38:	bdb0      	pop	{r4, r5, r7, pc}
 8014b3a:	46c0      	nop			@ (mov r8, r8)
 8014b3c:	40022000 	.word	0x40022000
 8014b40:	00001388 	.word	0x00001388
 8014b44:	40021000 	.word	0x40021000
 8014b48:	fffff8ff 	.word	0xfffff8ff
 8014b4c:	ffffc7ff 	.word	0xffffc7ff
 8014b50:	08024078 	.word	0x08024078
 8014b54:	200000c8 	.word	0x200000c8
 8014b58:	200000d8 	.word	0x200000d8

08014b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014b5c:	b5b0      	push	{r4, r5, r7, lr}
 8014b5e:	b08e      	sub	sp, #56	@ 0x38
 8014b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8014b62:	4b4c      	ldr	r3, [pc, #304]	@ (8014c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8014b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014b6a:	230c      	movs	r3, #12
 8014b6c:	4013      	ands	r3, r2
 8014b6e:	2b0c      	cmp	r3, #12
 8014b70:	d014      	beq.n	8014b9c <HAL_RCC_GetSysClockFreq+0x40>
 8014b72:	d900      	bls.n	8014b76 <HAL_RCC_GetSysClockFreq+0x1a>
 8014b74:	e07b      	b.n	8014c6e <HAL_RCC_GetSysClockFreq+0x112>
 8014b76:	2b04      	cmp	r3, #4
 8014b78:	d002      	beq.n	8014b80 <HAL_RCC_GetSysClockFreq+0x24>
 8014b7a:	2b08      	cmp	r3, #8
 8014b7c:	d00b      	beq.n	8014b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8014b7e:	e076      	b.n	8014c6e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014b80:	4b44      	ldr	r3, [pc, #272]	@ (8014c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2210      	movs	r2, #16
 8014b86:	4013      	ands	r3, r2
 8014b88:	d002      	beq.n	8014b90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8014b8a:	4b43      	ldr	r3, [pc, #268]	@ (8014c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014b8c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8014b8e:	e07c      	b.n	8014c8a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014b90:	4b42      	ldr	r3, [pc, #264]	@ (8014c9c <HAL_RCC_GetSysClockFreq+0x140>)
 8014b92:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014b94:	e079      	b.n	8014c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8014b96:	4b42      	ldr	r3, [pc, #264]	@ (8014ca0 <HAL_RCC_GetSysClockFreq+0x144>)
 8014b98:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014b9a:	e076      	b.n	8014c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8014b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b9e:	0c9a      	lsrs	r2, r3, #18
 8014ba0:	230f      	movs	r3, #15
 8014ba2:	401a      	ands	r2, r3
 8014ba4:	4b3f      	ldr	r3, [pc, #252]	@ (8014ca4 <HAL_RCC_GetSysClockFreq+0x148>)
 8014ba6:	5c9b      	ldrb	r3, [r3, r2]
 8014ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8014baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bac:	0d9a      	lsrs	r2, r3, #22
 8014bae:	2303      	movs	r3, #3
 8014bb0:	4013      	ands	r3, r2
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014bb6:	4b37      	ldr	r3, [pc, #220]	@ (8014c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8014bb8:	68da      	ldr	r2, [r3, #12]
 8014bba:	2380      	movs	r3, #128	@ 0x80
 8014bbc:	025b      	lsls	r3, r3, #9
 8014bbe:	4013      	ands	r3, r2
 8014bc0:	d01a      	beq.n	8014bf8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bc4:	61bb      	str	r3, [r7, #24]
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	61fb      	str	r3, [r7, #28]
 8014bca:	4a35      	ldr	r2, [pc, #212]	@ (8014ca0 <HAL_RCC_GetSysClockFreq+0x144>)
 8014bcc:	2300      	movs	r3, #0
 8014bce:	69b8      	ldr	r0, [r7, #24]
 8014bd0:	69f9      	ldr	r1, [r7, #28]
 8014bd2:	f7eb fcf5 	bl	80005c0 <__aeabi_lmul>
 8014bd6:	0002      	movs	r2, r0
 8014bd8:	000b      	movs	r3, r1
 8014bda:	0010      	movs	r0, r2
 8014bdc:	0019      	movs	r1, r3
 8014bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014be0:	613b      	str	r3, [r7, #16]
 8014be2:	2300      	movs	r3, #0
 8014be4:	617b      	str	r3, [r7, #20]
 8014be6:	693a      	ldr	r2, [r7, #16]
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	f7eb fcc9 	bl	8000580 <__aeabi_uldivmod>
 8014bee:	0002      	movs	r2, r0
 8014bf0:	000b      	movs	r3, r1
 8014bf2:	0013      	movs	r3, r2
 8014bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bf6:	e037      	b.n	8014c68 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014bf8:	4b26      	ldr	r3, [pc, #152]	@ (8014c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	2210      	movs	r2, #16
 8014bfe:	4013      	ands	r3, r2
 8014c00:	d01a      	beq.n	8014c38 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8014c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c04:	60bb      	str	r3, [r7, #8]
 8014c06:	2300      	movs	r3, #0
 8014c08:	60fb      	str	r3, [r7, #12]
 8014c0a:	4a23      	ldr	r2, [pc, #140]	@ (8014c98 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	68b8      	ldr	r0, [r7, #8]
 8014c10:	68f9      	ldr	r1, [r7, #12]
 8014c12:	f7eb fcd5 	bl	80005c0 <__aeabi_lmul>
 8014c16:	0002      	movs	r2, r0
 8014c18:	000b      	movs	r3, r1
 8014c1a:	0010      	movs	r0, r2
 8014c1c:	0019      	movs	r1, r3
 8014c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c20:	603b      	str	r3, [r7, #0]
 8014c22:	2300      	movs	r3, #0
 8014c24:	607b      	str	r3, [r7, #4]
 8014c26:	683a      	ldr	r2, [r7, #0]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f7eb fca9 	bl	8000580 <__aeabi_uldivmod>
 8014c2e:	0002      	movs	r2, r0
 8014c30:	000b      	movs	r3, r1
 8014c32:	0013      	movs	r3, r2
 8014c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8014c36:	e017      	b.n	8014c68 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c3a:	0018      	movs	r0, r3
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	0019      	movs	r1, r3
 8014c40:	4a16      	ldr	r2, [pc, #88]	@ (8014c9c <HAL_RCC_GetSysClockFreq+0x140>)
 8014c42:	2300      	movs	r3, #0
 8014c44:	f7eb fcbc 	bl	80005c0 <__aeabi_lmul>
 8014c48:	0002      	movs	r2, r0
 8014c4a:	000b      	movs	r3, r1
 8014c4c:	0010      	movs	r0, r2
 8014c4e:	0019      	movs	r1, r3
 8014c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c52:	001c      	movs	r4, r3
 8014c54:	2300      	movs	r3, #0
 8014c56:	001d      	movs	r5, r3
 8014c58:	0022      	movs	r2, r4
 8014c5a:	002b      	movs	r3, r5
 8014c5c:	f7eb fc90 	bl	8000580 <__aeabi_uldivmod>
 8014c60:	0002      	movs	r2, r0
 8014c62:	000b      	movs	r3, r1
 8014c64:	0013      	movs	r3, r2
 8014c66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8014c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014c6c:	e00d      	b.n	8014c8a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8014c6e:	4b09      	ldr	r3, [pc, #36]	@ (8014c94 <HAL_RCC_GetSysClockFreq+0x138>)
 8014c70:	685b      	ldr	r3, [r3, #4]
 8014c72:	0b5b      	lsrs	r3, r3, #13
 8014c74:	2207      	movs	r2, #7
 8014c76:	4013      	ands	r3, r2
 8014c78:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8014c7a:	6a3b      	ldr	r3, [r7, #32]
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	2280      	movs	r2, #128	@ 0x80
 8014c80:	0212      	lsls	r2, r2, #8
 8014c82:	409a      	lsls	r2, r3
 8014c84:	0013      	movs	r3, r2
 8014c86:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014c88:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8014c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8014c8c:	0018      	movs	r0, r3
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	b00e      	add	sp, #56	@ 0x38
 8014c92:	bdb0      	pop	{r4, r5, r7, pc}
 8014c94:	40021000 	.word	0x40021000
 8014c98:	003d0900 	.word	0x003d0900
 8014c9c:	00f42400 	.word	0x00f42400
 8014ca0:	007a1200 	.word	0x007a1200
 8014ca4:	08024090 	.word	0x08024090

08014ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014cac:	4b02      	ldr	r3, [pc, #8]	@ (8014cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8014cae:	681b      	ldr	r3, [r3, #0]
}
 8014cb0:	0018      	movs	r0, r3
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd80      	pop	{r7, pc}
 8014cb6:	46c0      	nop			@ (mov r8, r8)
 8014cb8:	200000c8 	.word	0x200000c8

08014cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014cc0:	f7ff fff2 	bl	8014ca8 <HAL_RCC_GetHCLKFreq>
 8014cc4:	0001      	movs	r1, r0
 8014cc6:	4b06      	ldr	r3, [pc, #24]	@ (8014ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014cc8:	68db      	ldr	r3, [r3, #12]
 8014cca:	0a1b      	lsrs	r3, r3, #8
 8014ccc:	2207      	movs	r2, #7
 8014cce:	4013      	ands	r3, r2
 8014cd0:	4a04      	ldr	r2, [pc, #16]	@ (8014ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014cd2:	5cd3      	ldrb	r3, [r2, r3]
 8014cd4:	40d9      	lsrs	r1, r3
 8014cd6:	000b      	movs	r3, r1
}
 8014cd8:	0018      	movs	r0, r3
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	46c0      	nop			@ (mov r8, r8)
 8014ce0:	40021000 	.word	0x40021000
 8014ce4:	08024088 	.word	0x08024088

08014ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8014cec:	f7ff ffdc 	bl	8014ca8 <HAL_RCC_GetHCLKFreq>
 8014cf0:	0001      	movs	r1, r0
 8014cf2:	4b06      	ldr	r3, [pc, #24]	@ (8014d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8014cf4:	68db      	ldr	r3, [r3, #12]
 8014cf6:	0adb      	lsrs	r3, r3, #11
 8014cf8:	2207      	movs	r2, #7
 8014cfa:	4013      	ands	r3, r2
 8014cfc:	4a04      	ldr	r2, [pc, #16]	@ (8014d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014cfe:	5cd3      	ldrb	r3, [r2, r3]
 8014d00:	40d9      	lsrs	r1, r3
 8014d02:	000b      	movs	r3, r1
}
 8014d04:	0018      	movs	r0, r3
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	46c0      	nop			@ (mov r8, r8)
 8014d0c:	40021000 	.word	0x40021000
 8014d10:	08024088 	.word	0x08024088

08014d14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8014d1c:	2017      	movs	r0, #23
 8014d1e:	183b      	adds	r3, r7, r0
 8014d20:	2200      	movs	r2, #0
 8014d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	2220      	movs	r2, #32
 8014d2a:	4013      	ands	r3, r2
 8014d2c:	d100      	bne.n	8014d30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8014d2e:	e0c7      	b.n	8014ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014d30:	4b9b      	ldr	r3, [pc, #620]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014d32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d34:	2380      	movs	r3, #128	@ 0x80
 8014d36:	055b      	lsls	r3, r3, #21
 8014d38:	4013      	ands	r3, r2
 8014d3a:	d109      	bne.n	8014d50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014d3c:	4b98      	ldr	r3, [pc, #608]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014d40:	4b97      	ldr	r3, [pc, #604]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014d42:	2180      	movs	r1, #128	@ 0x80
 8014d44:	0549      	lsls	r1, r1, #21
 8014d46:	430a      	orrs	r2, r1
 8014d48:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014d4a:	183b      	adds	r3, r7, r0
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d50:	4b94      	ldr	r3, [pc, #592]	@ (8014fa4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014d52:	681a      	ldr	r2, [r3, #0]
 8014d54:	2380      	movs	r3, #128	@ 0x80
 8014d56:	005b      	lsls	r3, r3, #1
 8014d58:	4013      	ands	r3, r2
 8014d5a:	d11a      	bne.n	8014d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014d5c:	4b91      	ldr	r3, [pc, #580]	@ (8014fa4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	4b90      	ldr	r3, [pc, #576]	@ (8014fa4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014d62:	2180      	movs	r1, #128	@ 0x80
 8014d64:	0049      	lsls	r1, r1, #1
 8014d66:	430a      	orrs	r2, r1
 8014d68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014d6a:	f7f9 f8d1 	bl	800df10 <HAL_GetTick>
 8014d6e:	0003      	movs	r3, r0
 8014d70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d72:	e008      	b.n	8014d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014d74:	f7f9 f8cc 	bl	800df10 <HAL_GetTick>
 8014d78:	0002      	movs	r2, r0
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	1ad3      	subs	r3, r2, r3
 8014d7e:	2b64      	cmp	r3, #100	@ 0x64
 8014d80:	d901      	bls.n	8014d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8014d82:	2303      	movs	r3, #3
 8014d84:	e107      	b.n	8014f96 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014d86:	4b87      	ldr	r3, [pc, #540]	@ (8014fa4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	2380      	movs	r3, #128	@ 0x80
 8014d8c:	005b      	lsls	r3, r3, #1
 8014d8e:	4013      	ands	r3, r2
 8014d90:	d0f0      	beq.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8014d92:	4b83      	ldr	r3, [pc, #524]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	23c0      	movs	r3, #192	@ 0xc0
 8014d98:	039b      	lsls	r3, r3, #14
 8014d9a:	4013      	ands	r3, r2
 8014d9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	685a      	ldr	r2, [r3, #4]
 8014da2:	23c0      	movs	r3, #192	@ 0xc0
 8014da4:	039b      	lsls	r3, r3, #14
 8014da6:	4013      	ands	r3, r2
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d013      	beq.n	8014dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	685a      	ldr	r2, [r3, #4]
 8014db2:	23c0      	movs	r3, #192	@ 0xc0
 8014db4:	029b      	lsls	r3, r3, #10
 8014db6:	401a      	ands	r2, r3
 8014db8:	23c0      	movs	r3, #192	@ 0xc0
 8014dba:	029b      	lsls	r3, r3, #10
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d10a      	bne.n	8014dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014dc0:	4b77      	ldr	r3, [pc, #476]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014dc2:	681a      	ldr	r2, [r3, #0]
 8014dc4:	2380      	movs	r3, #128	@ 0x80
 8014dc6:	029b      	lsls	r3, r3, #10
 8014dc8:	401a      	ands	r2, r3
 8014dca:	2380      	movs	r3, #128	@ 0x80
 8014dcc:	029b      	lsls	r3, r3, #10
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d101      	bne.n	8014dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	e0df      	b.n	8014f96 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8014dd6:	4b72      	ldr	r3, [pc, #456]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014dd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014dda:	23c0      	movs	r3, #192	@ 0xc0
 8014ddc:	029b      	lsls	r3, r3, #10
 8014dde:	4013      	ands	r3, r2
 8014de0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d03b      	beq.n	8014e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	685a      	ldr	r2, [r3, #4]
 8014dec:	23c0      	movs	r3, #192	@ 0xc0
 8014dee:	029b      	lsls	r3, r3, #10
 8014df0:	4013      	ands	r3, r2
 8014df2:	68fa      	ldr	r2, [r7, #12]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d033      	beq.n	8014e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2220      	movs	r2, #32
 8014dfe:	4013      	ands	r3, r2
 8014e00:	d02e      	beq.n	8014e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8014e02:	4b67      	ldr	r3, [pc, #412]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014e06:	4a68      	ldr	r2, [pc, #416]	@ (8014fa8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014e08:	4013      	ands	r3, r2
 8014e0a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8014e0c:	4b64      	ldr	r3, [pc, #400]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e10:	4b63      	ldr	r3, [pc, #396]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e12:	2180      	movs	r1, #128	@ 0x80
 8014e14:	0309      	lsls	r1, r1, #12
 8014e16:	430a      	orrs	r2, r1
 8014e18:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8014e1a:	4b61      	ldr	r3, [pc, #388]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e1e:	4b60      	ldr	r3, [pc, #384]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e20:	4962      	ldr	r1, [pc, #392]	@ (8014fac <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8014e22:	400a      	ands	r2, r1
 8014e24:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8014e26:	4b5e      	ldr	r3, [pc, #376]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e28:	68fa      	ldr	r2, [r7, #12]
 8014e2a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8014e2c:	68fa      	ldr	r2, [r7, #12]
 8014e2e:	2380      	movs	r3, #128	@ 0x80
 8014e30:	005b      	lsls	r3, r3, #1
 8014e32:	4013      	ands	r3, r2
 8014e34:	d014      	beq.n	8014e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014e36:	f7f9 f86b 	bl	800df10 <HAL_GetTick>
 8014e3a:	0003      	movs	r3, r0
 8014e3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014e3e:	e009      	b.n	8014e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014e40:	f7f9 f866 	bl	800df10 <HAL_GetTick>
 8014e44:	0002      	movs	r2, r0
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	4a59      	ldr	r2, [pc, #356]	@ (8014fb0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	d901      	bls.n	8014e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8014e50:	2303      	movs	r3, #3
 8014e52:	e0a0      	b.n	8014f96 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014e54:	4b52      	ldr	r3, [pc, #328]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e58:	2380      	movs	r3, #128	@ 0x80
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	4013      	ands	r3, r2
 8014e5e:	d0ef      	beq.n	8014e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2220      	movs	r2, #32
 8014e66:	4013      	ands	r3, r2
 8014e68:	d01f      	beq.n	8014eaa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	685a      	ldr	r2, [r3, #4]
 8014e6e:	23c0      	movs	r3, #192	@ 0xc0
 8014e70:	029b      	lsls	r3, r3, #10
 8014e72:	401a      	ands	r2, r3
 8014e74:	23c0      	movs	r3, #192	@ 0xc0
 8014e76:	029b      	lsls	r3, r3, #10
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d10c      	bne.n	8014e96 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8014e7c:	4b48      	ldr	r3, [pc, #288]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4a4c      	ldr	r2, [pc, #304]	@ (8014fb4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8014e82:	4013      	ands	r3, r2
 8014e84:	0019      	movs	r1, r3
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	685a      	ldr	r2, [r3, #4]
 8014e8a:	23c0      	movs	r3, #192	@ 0xc0
 8014e8c:	039b      	lsls	r3, r3, #14
 8014e8e:	401a      	ands	r2, r3
 8014e90:	4b43      	ldr	r3, [pc, #268]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e92:	430a      	orrs	r2, r1
 8014e94:	601a      	str	r2, [r3, #0]
 8014e96:	4b42      	ldr	r3, [pc, #264]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014e98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	685a      	ldr	r2, [r3, #4]
 8014e9e:	23c0      	movs	r3, #192	@ 0xc0
 8014ea0:	029b      	lsls	r3, r3, #10
 8014ea2:	401a      	ands	r2, r3
 8014ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ea6:	430a      	orrs	r2, r1
 8014ea8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014eaa:	2317      	movs	r3, #23
 8014eac:	18fb      	adds	r3, r7, r3
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d105      	bne.n	8014ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014eb4:	4b3a      	ldr	r3, [pc, #232]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014eb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014eb8:	4b39      	ldr	r3, [pc, #228]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014eba:	493f      	ldr	r1, [pc, #252]	@ (8014fb8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8014ebc:	400a      	ands	r2, r1
 8014ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	4013      	ands	r3, r2
 8014ec8:	d009      	beq.n	8014ede <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014eca:	4b35      	ldr	r3, [pc, #212]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ece:	2203      	movs	r2, #3
 8014ed0:	4393      	bics	r3, r2
 8014ed2:	0019      	movs	r1, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	689a      	ldr	r2, [r3, #8]
 8014ed8:	4b31      	ldr	r3, [pc, #196]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014eda:	430a      	orrs	r2, r1
 8014edc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	2202      	movs	r2, #2
 8014ee4:	4013      	ands	r3, r2
 8014ee6:	d009      	beq.n	8014efc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014eec:	220c      	movs	r2, #12
 8014eee:	4393      	bics	r3, r2
 8014ef0:	0019      	movs	r1, r3
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	68da      	ldr	r2, [r3, #12]
 8014ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ef8:	430a      	orrs	r2, r1
 8014efa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2204      	movs	r2, #4
 8014f02:	4013      	ands	r3, r2
 8014f04:	d009      	beq.n	8014f1a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014f06:	4b26      	ldr	r3, [pc, #152]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8014fbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8014f0c:	4013      	ands	r3, r2
 8014f0e:	0019      	movs	r1, r3
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	691a      	ldr	r2, [r3, #16]
 8014f14:	4b22      	ldr	r3, [pc, #136]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f16:	430a      	orrs	r2, r1
 8014f18:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2208      	movs	r2, #8
 8014f20:	4013      	ands	r3, r2
 8014f22:	d009      	beq.n	8014f38 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8014f24:	4b1e      	ldr	r3, [pc, #120]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f28:	4a25      	ldr	r2, [pc, #148]	@ (8014fc0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8014f2a:	4013      	ands	r3, r2
 8014f2c:	0019      	movs	r1, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	695a      	ldr	r2, [r3, #20]
 8014f32:	4b1b      	ldr	r3, [pc, #108]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f34:	430a      	orrs	r2, r1
 8014f36:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681a      	ldr	r2, [r3, #0]
 8014f3c:	2380      	movs	r3, #128	@ 0x80
 8014f3e:	005b      	lsls	r3, r3, #1
 8014f40:	4013      	ands	r3, r2
 8014f42:	d009      	beq.n	8014f58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014f44:	4b16      	ldr	r3, [pc, #88]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f48:	4a17      	ldr	r2, [pc, #92]	@ (8014fa8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014f4a:	4013      	ands	r3, r2
 8014f4c:	0019      	movs	r1, r3
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	699a      	ldr	r2, [r3, #24]
 8014f52:	4b13      	ldr	r3, [pc, #76]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f54:	430a      	orrs	r2, r1
 8014f56:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2240      	movs	r2, #64	@ 0x40
 8014f5e:	4013      	ands	r3, r2
 8014f60:	d009      	beq.n	8014f76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014f62:	4b0f      	ldr	r3, [pc, #60]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f66:	4a17      	ldr	r2, [pc, #92]	@ (8014fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8014f68:	4013      	ands	r3, r2
 8014f6a:	0019      	movs	r1, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6a1a      	ldr	r2, [r3, #32]
 8014f70:	4b0b      	ldr	r3, [pc, #44]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f72:	430a      	orrs	r2, r1
 8014f74:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	2280      	movs	r2, #128	@ 0x80
 8014f7c:	4013      	ands	r3, r2
 8014f7e:	d009      	beq.n	8014f94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8014f80:	4b07      	ldr	r3, [pc, #28]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014f84:	4a10      	ldr	r2, [pc, #64]	@ (8014fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8014f86:	4013      	ands	r3, r2
 8014f88:	0019      	movs	r1, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	69da      	ldr	r2, [r3, #28]
 8014f8e:	4b04      	ldr	r3, [pc, #16]	@ (8014fa0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f90:	430a      	orrs	r2, r1
 8014f92:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8014f94:	2300      	movs	r3, #0
}
 8014f96:	0018      	movs	r0, r3
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	b006      	add	sp, #24
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	46c0      	nop			@ (mov r8, r8)
 8014fa0:	40021000 	.word	0x40021000
 8014fa4:	40007000 	.word	0x40007000
 8014fa8:	fffcffff 	.word	0xfffcffff
 8014fac:	fff7ffff 	.word	0xfff7ffff
 8014fb0:	00001388 	.word	0x00001388
 8014fb4:	ffcfffff 	.word	0xffcfffff
 8014fb8:	efffffff 	.word	0xefffffff
 8014fbc:	fffff3ff 	.word	0xfffff3ff
 8014fc0:	ffffcfff 	.word	0xffffcfff
 8014fc4:	fbffffff 	.word	0xfbffffff
 8014fc8:	fff3ffff 	.word	0xfff3ffff

08014fcc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8014fcc:	b5b0      	push	{r4, r5, r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014fd4:	230f      	movs	r3, #15
 8014fd6:	18fb      	adds	r3, r7, r3
 8014fd8:	2201      	movs	r2, #1
 8014fda:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d101      	bne.n	8014fe6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	e088      	b.n	80150f8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2221      	movs	r2, #33	@ 0x21
 8014fea:	5c9b      	ldrb	r3, [r3, r2]
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d107      	bne.n	8015002 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2220      	movs	r2, #32
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	0018      	movs	r0, r3
 8014ffe:	f7f3 fd97 	bl	8008b30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	2221      	movs	r2, #33	@ 0x21
 8015006:	2102      	movs	r1, #2
 8015008:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	68db      	ldr	r3, [r3, #12]
 8015010:	2210      	movs	r2, #16
 8015012:	4013      	ands	r3, r2
 8015014:	2b10      	cmp	r3, #16
 8015016:	d05f      	beq.n	80150d8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	22ca      	movs	r2, #202	@ 0xca
 801501e:	625a      	str	r2, [r3, #36]	@ 0x24
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2253      	movs	r2, #83	@ 0x53
 8015026:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015028:	250f      	movs	r5, #15
 801502a:	197c      	adds	r4, r7, r5
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	0018      	movs	r0, r3
 8015030:	f000 fa7c 	bl	801552c <RTC_EnterInitMode>
 8015034:	0003      	movs	r3, r0
 8015036:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015038:	0028      	movs	r0, r5
 801503a:	183b      	adds	r3, r7, r0
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d12c      	bne.n	801509c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	689a      	ldr	r2, [r3, #8]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	492c      	ldr	r1, [pc, #176]	@ (8015100 <HAL_RTC_Init+0x134>)
 801504e:	400a      	ands	r2, r1
 8015050:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	6899      	ldr	r1, [r3, #8]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	685a      	ldr	r2, [r3, #4]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	691b      	ldr	r3, [r3, #16]
 8015060:	431a      	orrs	r2, r3
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	699b      	ldr	r3, [r3, #24]
 8015066:	431a      	orrs	r2, r3
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	430a      	orrs	r2, r1
 801506e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	68d2      	ldr	r2, [r2, #12]
 8015078:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	6919      	ldr	r1, [r3, #16]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	689b      	ldr	r3, [r3, #8]
 8015084:	041a      	lsls	r2, r3, #16
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	430a      	orrs	r2, r1
 801508c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801508e:	183c      	adds	r4, r7, r0
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	0018      	movs	r0, r3
 8015094:	f000 fa8e 	bl	80155b4 <RTC_ExitInitMode>
 8015098:	0003      	movs	r3, r0
 801509a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801509c:	230f      	movs	r3, #15
 801509e:	18fb      	adds	r3, r7, r3
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d113      	bne.n	80150ce <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	2103      	movs	r1, #3
 80150b2:	438a      	bics	r2, r1
 80150b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	69da      	ldr	r2, [r3, #28]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	695b      	ldr	r3, [r3, #20]
 80150c4:	431a      	orrs	r2, r3
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	430a      	orrs	r2, r1
 80150cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	22ff      	movs	r2, #255	@ 0xff
 80150d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80150d6:	e003      	b.n	80150e0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80150d8:	230f      	movs	r3, #15
 80150da:	18fb      	adds	r3, r7, r3
 80150dc:	2200      	movs	r2, #0
 80150de:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80150e0:	230f      	movs	r3, #15
 80150e2:	18fb      	adds	r3, r7, r3
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d103      	bne.n	80150f2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2221      	movs	r2, #33	@ 0x21
 80150ee:	2101      	movs	r1, #1
 80150f0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80150f2:	230f      	movs	r3, #15
 80150f4:	18fb      	adds	r3, r7, r3
 80150f6:	781b      	ldrb	r3, [r3, #0]
}
 80150f8:	0018      	movs	r0, r3
 80150fa:	46bd      	mov	sp, r7
 80150fc:	b004      	add	sp, #16
 80150fe:	bdb0      	pop	{r4, r5, r7, pc}
 8015100:	ff8fffbf 	.word	0xff8fffbf

08015104 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015104:	b5b0      	push	{r4, r5, r7, lr}
 8015106:	b086      	sub	sp, #24
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015110:	2300      	movs	r3, #0
 8015112:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2220      	movs	r2, #32
 8015118:	5c9b      	ldrb	r3, [r3, r2]
 801511a:	2b01      	cmp	r3, #1
 801511c:	d101      	bne.n	8015122 <HAL_RTC_SetTime+0x1e>
 801511e:	2302      	movs	r3, #2
 8015120:	e092      	b.n	8015248 <HAL_RTC_SetTime+0x144>
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	2220      	movs	r2, #32
 8015126:	2101      	movs	r1, #1
 8015128:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2221      	movs	r2, #33	@ 0x21
 801512e:	2102      	movs	r1, #2
 8015130:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d125      	bne.n	8015184 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	689b      	ldr	r3, [r3, #8]
 801513e:	2240      	movs	r2, #64	@ 0x40
 8015140:	4013      	ands	r3, r2
 8015142:	d102      	bne.n	801514a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	2200      	movs	r2, #0
 8015148:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	0018      	movs	r0, r3
 8015150:	f000 fa5a 	bl	8015608 <RTC_ByteToBcd2>
 8015154:	0003      	movs	r3, r0
 8015156:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	785b      	ldrb	r3, [r3, #1]
 801515c:	0018      	movs	r0, r3
 801515e:	f000 fa53 	bl	8015608 <RTC_ByteToBcd2>
 8015162:	0003      	movs	r3, r0
 8015164:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015166:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015168:	68bb      	ldr	r3, [r7, #8]
 801516a:	789b      	ldrb	r3, [r3, #2]
 801516c:	0018      	movs	r0, r3
 801516e:	f000 fa4b 	bl	8015608 <RTC_ByteToBcd2>
 8015172:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015174:	0022      	movs	r2, r4
 8015176:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	78db      	ldrb	r3, [r3, #3]
 801517c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801517e:	4313      	orrs	r3, r2
 8015180:	617b      	str	r3, [r7, #20]
 8015182:	e017      	b.n	80151b4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	689b      	ldr	r3, [r3, #8]
 801518a:	2240      	movs	r2, #64	@ 0x40
 801518c:	4013      	ands	r3, r2
 801518e:	d102      	bne.n	8015196 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	2200      	movs	r2, #0
 8015194:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	785b      	ldrb	r3, [r3, #1]
 80151a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80151a2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80151a4:	68ba      	ldr	r2, [r7, #8]
 80151a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80151a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	78db      	ldrb	r3, [r3, #3]
 80151ae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80151b0:	4313      	orrs	r3, r2
 80151b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	22ca      	movs	r2, #202	@ 0xca
 80151ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2253      	movs	r2, #83	@ 0x53
 80151c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80151c4:	2513      	movs	r5, #19
 80151c6:	197c      	adds	r4, r7, r5
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	0018      	movs	r0, r3
 80151cc:	f000 f9ae 	bl	801552c <RTC_EnterInitMode>
 80151d0:	0003      	movs	r3, r0
 80151d2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80151d4:	0028      	movs	r0, r5
 80151d6:	183b      	adds	r3, r7, r0
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d120      	bne.n	8015220 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	697a      	ldr	r2, [r7, #20]
 80151e4:	491a      	ldr	r1, [pc, #104]	@ (8015250 <HAL_RTC_SetTime+0x14c>)
 80151e6:	400a      	ands	r2, r1
 80151e8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	689a      	ldr	r2, [r3, #8]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4917      	ldr	r1, [pc, #92]	@ (8015254 <HAL_RTC_SetTime+0x150>)
 80151f6:	400a      	ands	r2, r1
 80151f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	6899      	ldr	r1, [r3, #8]
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	68da      	ldr	r2, [r3, #12]
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	691b      	ldr	r3, [r3, #16]
 8015208:	431a      	orrs	r2, r3
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	430a      	orrs	r2, r1
 8015210:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015212:	183c      	adds	r4, r7, r0
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	0018      	movs	r0, r3
 8015218:	f000 f9cc 	bl	80155b4 <RTC_ExitInitMode>
 801521c:	0003      	movs	r3, r0
 801521e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015220:	2313      	movs	r3, #19
 8015222:	18fb      	adds	r3, r7, r3
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d103      	bne.n	8015232 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2221      	movs	r2, #33	@ 0x21
 801522e:	2101      	movs	r1, #1
 8015230:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	22ff      	movs	r2, #255	@ 0xff
 8015238:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	2220      	movs	r2, #32
 801523e:	2100      	movs	r1, #0
 8015240:	5499      	strb	r1, [r3, r2]

  return status;
 8015242:	2313      	movs	r3, #19
 8015244:	18fb      	adds	r3, r7, r3
 8015246:	781b      	ldrb	r3, [r3, #0]
}
 8015248:	0018      	movs	r0, r3
 801524a:	46bd      	mov	sp, r7
 801524c:	b006      	add	sp, #24
 801524e:	bdb0      	pop	{r4, r5, r7, pc}
 8015250:	007f7f7f 	.word	0x007f7f7f
 8015254:	fffbffff 	.word	0xfffbffff

08015258 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b086      	sub	sp, #24
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015264:	2300      	movs	r3, #0
 8015266:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	691b      	ldr	r3, [r3, #16]
 8015278:	045b      	lsls	r3, r3, #17
 801527a:	0c5a      	lsrs	r2, r3, #17
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	4a22      	ldr	r2, [pc, #136]	@ (8015310 <HAL_RTC_GetTime+0xb8>)
 8015288:	4013      	ands	r3, r2
 801528a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	0c1b      	lsrs	r3, r3, #16
 8015290:	b2db      	uxtb	r3, r3
 8015292:	223f      	movs	r2, #63	@ 0x3f
 8015294:	4013      	ands	r3, r2
 8015296:	b2da      	uxtb	r2, r3
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	0a1b      	lsrs	r3, r3, #8
 80152a0:	b2db      	uxtb	r3, r3
 80152a2:	227f      	movs	r2, #127	@ 0x7f
 80152a4:	4013      	ands	r3, r2
 80152a6:	b2da      	uxtb	r2, r3
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	b2db      	uxtb	r3, r3
 80152b0:	227f      	movs	r2, #127	@ 0x7f
 80152b2:	4013      	ands	r3, r2
 80152b4:	b2da      	uxtb	r2, r3
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	0d9b      	lsrs	r3, r3, #22
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	2201      	movs	r2, #1
 80152c2:	4013      	ands	r3, r2
 80152c4:	b2da      	uxtb	r2, r3
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d11a      	bne.n	8015306 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	0018      	movs	r0, r3
 80152d6:	f000 f9b8 	bl	801564a <RTC_Bcd2ToByte>
 80152da:	0003      	movs	r3, r0
 80152dc:	001a      	movs	r2, r3
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80152e2:	68bb      	ldr	r3, [r7, #8]
 80152e4:	785b      	ldrb	r3, [r3, #1]
 80152e6:	0018      	movs	r0, r3
 80152e8:	f000 f9af 	bl	801564a <RTC_Bcd2ToByte>
 80152ec:	0003      	movs	r3, r0
 80152ee:	001a      	movs	r2, r3
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	789b      	ldrb	r3, [r3, #2]
 80152f8:	0018      	movs	r0, r3
 80152fa:	f000 f9a6 	bl	801564a <RTC_Bcd2ToByte>
 80152fe:	0003      	movs	r3, r0
 8015300:	001a      	movs	r2, r3
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8015306:	2300      	movs	r3, #0
}
 8015308:	0018      	movs	r0, r3
 801530a:	46bd      	mov	sp, r7
 801530c:	b006      	add	sp, #24
 801530e:	bd80      	pop	{r7, pc}
 8015310:	007f7f7f 	.word	0x007f7f7f

08015314 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015314:	b5b0      	push	{r4, r5, r7, lr}
 8015316:	b086      	sub	sp, #24
 8015318:	af00      	add	r7, sp, #0
 801531a:	60f8      	str	r0, [r7, #12]
 801531c:	60b9      	str	r1, [r7, #8]
 801531e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015320:	2300      	movs	r3, #0
 8015322:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2220      	movs	r2, #32
 8015328:	5c9b      	ldrb	r3, [r3, r2]
 801532a:	2b01      	cmp	r3, #1
 801532c:	d101      	bne.n	8015332 <HAL_RTC_SetDate+0x1e>
 801532e:	2302      	movs	r3, #2
 8015330:	e07e      	b.n	8015430 <HAL_RTC_SetDate+0x11c>
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2220      	movs	r2, #32
 8015336:	2101      	movs	r1, #1
 8015338:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	2221      	movs	r2, #33	@ 0x21
 801533e:	2102      	movs	r1, #2
 8015340:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d10e      	bne.n	8015366 <HAL_RTC_SetDate+0x52>
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	785b      	ldrb	r3, [r3, #1]
 801534c:	001a      	movs	r2, r3
 801534e:	2310      	movs	r3, #16
 8015350:	4013      	ands	r3, r2
 8015352:	d008      	beq.n	8015366 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	785b      	ldrb	r3, [r3, #1]
 8015358:	2210      	movs	r2, #16
 801535a:	4393      	bics	r3, r2
 801535c:	b2db      	uxtb	r3, r3
 801535e:	330a      	adds	r3, #10
 8015360:	b2da      	uxtb	r2, r3
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d11c      	bne.n	80153a6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	78db      	ldrb	r3, [r3, #3]
 8015370:	0018      	movs	r0, r3
 8015372:	f000 f949 	bl	8015608 <RTC_ByteToBcd2>
 8015376:	0003      	movs	r3, r0
 8015378:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	785b      	ldrb	r3, [r3, #1]
 801537e:	0018      	movs	r0, r3
 8015380:	f000 f942 	bl	8015608 <RTC_ByteToBcd2>
 8015384:	0003      	movs	r3, r0
 8015386:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015388:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	789b      	ldrb	r3, [r3, #2]
 801538e:	0018      	movs	r0, r3
 8015390:	f000 f93a 	bl	8015608 <RTC_ByteToBcd2>
 8015394:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015396:	0022      	movs	r2, r4
 8015398:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80153a0:	4313      	orrs	r3, r2
 80153a2:	617b      	str	r3, [r7, #20]
 80153a4:	e00e      	b.n	80153c4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	78db      	ldrb	r3, [r3, #3]
 80153aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	785b      	ldrb	r3, [r3, #1]
 80153b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80153b2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80153b4:	68ba      	ldr	r2, [r7, #8]
 80153b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80153b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80153c0:	4313      	orrs	r3, r2
 80153c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	22ca      	movs	r2, #202	@ 0xca
 80153ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	2253      	movs	r2, #83	@ 0x53
 80153d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80153d4:	2513      	movs	r5, #19
 80153d6:	197c      	adds	r4, r7, r5
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	0018      	movs	r0, r3
 80153dc:	f000 f8a6 	bl	801552c <RTC_EnterInitMode>
 80153e0:	0003      	movs	r3, r0
 80153e2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80153e4:	0028      	movs	r0, r5
 80153e6:	183b      	adds	r3, r7, r0
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d10c      	bne.n	8015408 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	697a      	ldr	r2, [r7, #20]
 80153f4:	4910      	ldr	r1, [pc, #64]	@ (8015438 <HAL_RTC_SetDate+0x124>)
 80153f6:	400a      	ands	r2, r1
 80153f8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80153fa:	183c      	adds	r4, r7, r0
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	0018      	movs	r0, r3
 8015400:	f000 f8d8 	bl	80155b4 <RTC_ExitInitMode>
 8015404:	0003      	movs	r3, r0
 8015406:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015408:	2313      	movs	r3, #19
 801540a:	18fb      	adds	r3, r7, r3
 801540c:	781b      	ldrb	r3, [r3, #0]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d103      	bne.n	801541a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	2221      	movs	r2, #33	@ 0x21
 8015416:	2101      	movs	r1, #1
 8015418:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	22ff      	movs	r2, #255	@ 0xff
 8015420:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	2220      	movs	r2, #32
 8015426:	2100      	movs	r1, #0
 8015428:	5499      	strb	r1, [r3, r2]

  return status;
 801542a:	2313      	movs	r3, #19
 801542c:	18fb      	adds	r3, r7, r3
 801542e:	781b      	ldrb	r3, [r3, #0]
}
 8015430:	0018      	movs	r0, r3
 8015432:	46bd      	mov	sp, r7
 8015434:	b006      	add	sp, #24
 8015436:	bdb0      	pop	{r4, r5, r7, pc}
 8015438:	00ffff3f 	.word	0x00ffff3f

0801543c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015448:	2300      	movs	r3, #0
 801544a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	4a21      	ldr	r2, [pc, #132]	@ (80154d8 <HAL_RTC_GetDate+0x9c>)
 8015454:	4013      	ands	r3, r2
 8015456:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	0c1b      	lsrs	r3, r3, #16
 801545c:	b2da      	uxtb	r2, r3
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	0a1b      	lsrs	r3, r3, #8
 8015466:	b2db      	uxtb	r3, r3
 8015468:	221f      	movs	r2, #31
 801546a:	4013      	ands	r3, r2
 801546c:	b2da      	uxtb	r2, r3
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	b2db      	uxtb	r3, r3
 8015476:	223f      	movs	r2, #63	@ 0x3f
 8015478:	4013      	ands	r3, r2
 801547a:	b2da      	uxtb	r2, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	0b5b      	lsrs	r3, r3, #13
 8015484:	b2db      	uxtb	r3, r3
 8015486:	2207      	movs	r2, #7
 8015488:	4013      	ands	r3, r2
 801548a:	b2da      	uxtb	r2, r3
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d11a      	bne.n	80154cc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	78db      	ldrb	r3, [r3, #3]
 801549a:	0018      	movs	r0, r3
 801549c:	f000 f8d5 	bl	801564a <RTC_Bcd2ToByte>
 80154a0:	0003      	movs	r3, r0
 80154a2:	001a      	movs	r2, r3
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	785b      	ldrb	r3, [r3, #1]
 80154ac:	0018      	movs	r0, r3
 80154ae:	f000 f8cc 	bl	801564a <RTC_Bcd2ToByte>
 80154b2:	0003      	movs	r3, r0
 80154b4:	001a      	movs	r2, r3
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	789b      	ldrb	r3, [r3, #2]
 80154be:	0018      	movs	r0, r3
 80154c0:	f000 f8c3 	bl	801564a <RTC_Bcd2ToByte>
 80154c4:	0003      	movs	r3, r0
 80154c6:	001a      	movs	r2, r3
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80154cc:	2300      	movs	r3, #0
}
 80154ce:	0018      	movs	r0, r3
 80154d0:	46bd      	mov	sp, r7
 80154d2:	b006      	add	sp, #24
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	46c0      	nop			@ (mov r8, r8)
 80154d8:	00ffff3f 	.word	0x00ffff3f

080154dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b084      	sub	sp, #16
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80154e4:	2300      	movs	r3, #0
 80154e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	4a0e      	ldr	r2, [pc, #56]	@ (8015528 <HAL_RTC_WaitForSynchro+0x4c>)
 80154ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80154f0:	f7f8 fd0e 	bl	800df10 <HAL_GetTick>
 80154f4:	0003      	movs	r3, r0
 80154f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80154f8:	e00a      	b.n	8015510 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80154fa:	f7f8 fd09 	bl	800df10 <HAL_GetTick>
 80154fe:	0002      	movs	r2, r0
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	1ad2      	subs	r2, r2, r3
 8015504:	23fa      	movs	r3, #250	@ 0xfa
 8015506:	009b      	lsls	r3, r3, #2
 8015508:	429a      	cmp	r2, r3
 801550a:	d901      	bls.n	8015510 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801550c:	2303      	movs	r3, #3
 801550e:	e006      	b.n	801551e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	68db      	ldr	r3, [r3, #12]
 8015516:	2220      	movs	r2, #32
 8015518:	4013      	ands	r3, r2
 801551a:	d0ee      	beq.n	80154fa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801551c:	2300      	movs	r3, #0
}
 801551e:	0018      	movs	r0, r3
 8015520:	46bd      	mov	sp, r7
 8015522:	b004      	add	sp, #16
 8015524:	bd80      	pop	{r7, pc}
 8015526:	46c0      	nop			@ (mov r8, r8)
 8015528:	0001ff5f 	.word	0x0001ff5f

0801552c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b084      	sub	sp, #16
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015534:	2300      	movs	r3, #0
 8015536:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8015538:	230f      	movs	r3, #15
 801553a:	18fb      	adds	r3, r7, r3
 801553c:	2200      	movs	r2, #0
 801553e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	2240      	movs	r2, #64	@ 0x40
 8015548:	4013      	ands	r3, r2
 801554a:	d12c      	bne.n	80155a6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	68da      	ldr	r2, [r3, #12]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	2180      	movs	r1, #128	@ 0x80
 8015558:	430a      	orrs	r2, r1
 801555a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801555c:	f7f8 fcd8 	bl	800df10 <HAL_GetTick>
 8015560:	0003      	movs	r3, r0
 8015562:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015564:	e014      	b.n	8015590 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015566:	f7f8 fcd3 	bl	800df10 <HAL_GetTick>
 801556a:	0002      	movs	r2, r0
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	1ad2      	subs	r2, r2, r3
 8015570:	200f      	movs	r0, #15
 8015572:	183b      	adds	r3, r7, r0
 8015574:	1839      	adds	r1, r7, r0
 8015576:	7809      	ldrb	r1, [r1, #0]
 8015578:	7019      	strb	r1, [r3, #0]
 801557a:	23fa      	movs	r3, #250	@ 0xfa
 801557c:	009b      	lsls	r3, r3, #2
 801557e:	429a      	cmp	r2, r3
 8015580:	d906      	bls.n	8015590 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	2221      	movs	r2, #33	@ 0x21
 8015586:	2104      	movs	r1, #4
 8015588:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801558a:	183b      	adds	r3, r7, r0
 801558c:	2201      	movs	r2, #1
 801558e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	68db      	ldr	r3, [r3, #12]
 8015596:	2240      	movs	r2, #64	@ 0x40
 8015598:	4013      	ands	r3, r2
 801559a:	d104      	bne.n	80155a6 <RTC_EnterInitMode+0x7a>
 801559c:	230f      	movs	r3, #15
 801559e:	18fb      	adds	r3, r7, r3
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	d1df      	bne.n	8015566 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80155a6:	230f      	movs	r3, #15
 80155a8:	18fb      	adds	r3, r7, r3
 80155aa:	781b      	ldrb	r3, [r3, #0]
}
 80155ac:	0018      	movs	r0, r3
 80155ae:	46bd      	mov	sp, r7
 80155b0:	b004      	add	sp, #16
 80155b2:	bd80      	pop	{r7, pc}

080155b4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80155b4:	b590      	push	{r4, r7, lr}
 80155b6:	b085      	sub	sp, #20
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80155bc:	240f      	movs	r4, #15
 80155be:	193b      	adds	r3, r7, r4
 80155c0:	2200      	movs	r2, #0
 80155c2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	68da      	ldr	r2, [r3, #12]
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	2180      	movs	r1, #128	@ 0x80
 80155d0:	438a      	bics	r2, r1
 80155d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	689b      	ldr	r3, [r3, #8]
 80155da:	2220      	movs	r2, #32
 80155dc:	4013      	ands	r3, r2
 80155de:	d10c      	bne.n	80155fa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	0018      	movs	r0, r3
 80155e4:	f7ff ff7a 	bl	80154dc <HAL_RTC_WaitForSynchro>
 80155e8:	1e03      	subs	r3, r0, #0
 80155ea:	d006      	beq.n	80155fa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2221      	movs	r2, #33	@ 0x21
 80155f0:	2104      	movs	r1, #4
 80155f2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80155f4:	193b      	adds	r3, r7, r4
 80155f6:	2201      	movs	r2, #1
 80155f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80155fa:	230f      	movs	r3, #15
 80155fc:	18fb      	adds	r3, r7, r3
 80155fe:	781b      	ldrb	r3, [r3, #0]
}
 8015600:	0018      	movs	r0, r3
 8015602:	46bd      	mov	sp, r7
 8015604:	b005      	add	sp, #20
 8015606:	bd90      	pop	{r4, r7, pc}

08015608 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b084      	sub	sp, #16
 801560c:	af00      	add	r7, sp, #0
 801560e:	0002      	movs	r2, r0
 8015610:	1dfb      	adds	r3, r7, #7
 8015612:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015614:	2300      	movs	r3, #0
 8015616:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8015618:	e007      	b.n	801562a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	3301      	adds	r3, #1
 801561e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8015620:	1dfb      	adds	r3, r7, #7
 8015622:	1dfa      	adds	r2, r7, #7
 8015624:	7812      	ldrb	r2, [r2, #0]
 8015626:	3a0a      	subs	r2, #10
 8015628:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801562a:	1dfb      	adds	r3, r7, #7
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	2b09      	cmp	r3, #9
 8015630:	d8f3      	bhi.n	801561a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	b2db      	uxtb	r3, r3
 8015636:	011b      	lsls	r3, r3, #4
 8015638:	b2da      	uxtb	r2, r3
 801563a:	1dfb      	adds	r3, r7, #7
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	4313      	orrs	r3, r2
 8015640:	b2db      	uxtb	r3, r3
}
 8015642:	0018      	movs	r0, r3
 8015644:	46bd      	mov	sp, r7
 8015646:	b004      	add	sp, #16
 8015648:	bd80      	pop	{r7, pc}

0801564a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b084      	sub	sp, #16
 801564e:	af00      	add	r7, sp, #0
 8015650:	0002      	movs	r2, r0
 8015652:	1dfb      	adds	r3, r7, #7
 8015654:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8015656:	2300      	movs	r3, #0
 8015658:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801565a:	1dfb      	adds	r3, r7, #7
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	091b      	lsrs	r3, r3, #4
 8015660:	b2db      	uxtb	r3, r3
 8015662:	001a      	movs	r2, r3
 8015664:	0013      	movs	r3, r2
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	189b      	adds	r3, r3, r2
 801566a:	005b      	lsls	r3, r3, #1
 801566c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	b2da      	uxtb	r2, r3
 8015672:	1dfb      	adds	r3, r7, #7
 8015674:	781b      	ldrb	r3, [r3, #0]
 8015676:	210f      	movs	r1, #15
 8015678:	400b      	ands	r3, r1
 801567a:	b2db      	uxtb	r3, r3
 801567c:	18d3      	adds	r3, r2, r3
 801567e:	b2db      	uxtb	r3, r3
}
 8015680:	0018      	movs	r0, r3
 8015682:	46bd      	mov	sp, r7
 8015684:	b004      	add	sp, #16
 8015686:	bd80      	pop	{r7, pc}

08015688 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b086      	sub	sp, #24
 801568c:	af00      	add	r7, sp, #0
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015694:	4b64      	ldr	r3, [pc, #400]	@ (8015828 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	22fa      	movs	r2, #250	@ 0xfa
 801569a:	01d1      	lsls	r1, r2, #7
 801569c:	0018      	movs	r0, r3
 801569e:	f7ea fd81 	bl	80001a4 <__udivsi3>
 80156a2:	0003      	movs	r3, r0
 80156a4:	001a      	movs	r2, r3
 80156a6:	0013      	movs	r3, r2
 80156a8:	015b      	lsls	r3, r3, #5
 80156aa:	1a9b      	subs	r3, r3, r2
 80156ac:	009b      	lsls	r3, r3, #2
 80156ae:	189b      	adds	r3, r3, r2
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	2220      	movs	r2, #32
 80156b8:	5c9b      	ldrb	r3, [r3, r2]
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	d101      	bne.n	80156c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80156be:	2302      	movs	r3, #2
 80156c0:	e0ad      	b.n	801581e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2220      	movs	r2, #32
 80156c6:	2101      	movs	r1, #1
 80156c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	2221      	movs	r2, #33	@ 0x21
 80156ce:	2102      	movs	r1, #2
 80156d0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	22ca      	movs	r2, #202	@ 0xca
 80156d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	2253      	movs	r2, #83	@ 0x53
 80156e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	689a      	ldr	r2, [r3, #8]
 80156e8:	2380      	movs	r3, #128	@ 0x80
 80156ea:	00db      	lsls	r3, r3, #3
 80156ec:	4013      	ands	r3, r2
 80156ee:	d019      	beq.n	8015724 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	3b01      	subs	r3, #1
 80156f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d10d      	bne.n	8015718 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	22ff      	movs	r2, #255	@ 0xff
 8015702:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2221      	movs	r2, #33	@ 0x21
 8015708:	2103      	movs	r1, #3
 801570a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2220      	movs	r2, #32
 8015710:	2100      	movs	r1, #0
 8015712:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015714:	2303      	movs	r3, #3
 8015716:	e082      	b.n	801581e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	68db      	ldr	r3, [r3, #12]
 801571e:	2204      	movs	r2, #4
 8015720:	4013      	ands	r3, r2
 8015722:	d1e5      	bne.n	80156f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	689a      	ldr	r2, [r3, #8]
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	493f      	ldr	r1, [pc, #252]	@ (801582c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8015730:	400a      	ands	r2, r1
 8015732:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	68db      	ldr	r3, [r3, #12]
 801573a:	22ff      	movs	r2, #255	@ 0xff
 801573c:	401a      	ands	r2, r3
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	493b      	ldr	r1, [pc, #236]	@ (8015830 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8015744:	430a      	orrs	r2, r1
 8015746:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015748:	4b37      	ldr	r3, [pc, #220]	@ (8015828 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	22fa      	movs	r2, #250	@ 0xfa
 801574e:	01d1      	lsls	r1, r2, #7
 8015750:	0018      	movs	r0, r3
 8015752:	f7ea fd27 	bl	80001a4 <__udivsi3>
 8015756:	0003      	movs	r3, r0
 8015758:	001a      	movs	r2, r3
 801575a:	0013      	movs	r3, r2
 801575c:	015b      	lsls	r3, r3, #5
 801575e:	1a9b      	subs	r3, r3, r2
 8015760:	009b      	lsls	r3, r3, #2
 8015762:	189b      	adds	r3, r3, r2
 8015764:	00db      	lsls	r3, r3, #3
 8015766:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	3b01      	subs	r3, #1
 801576c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	2b00      	cmp	r3, #0
 8015772:	d10d      	bne.n	8015790 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	22ff      	movs	r2, #255	@ 0xff
 801577a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	2221      	movs	r2, #33	@ 0x21
 8015780:	2103      	movs	r1, #3
 8015782:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	2220      	movs	r2, #32
 8015788:	2100      	movs	r1, #0
 801578a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801578c:	2303      	movs	r3, #3
 801578e:	e046      	b.n	801581e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	68db      	ldr	r3, [r3, #12]
 8015796:	2204      	movs	r2, #4
 8015798:	4013      	ands	r3, r2
 801579a:	d0e5      	beq.n	8015768 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	689a      	ldr	r2, [r3, #8]
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	2107      	movs	r1, #7
 80157a8:	438a      	bics	r2, r1
 80157aa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	6899      	ldr	r1, [r3, #8]
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	430a      	orrs	r2, r1
 80157ba:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	68ba      	ldr	r2, [r7, #8]
 80157c2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80157c4:	4b1b      	ldr	r3, [pc, #108]	@ (8015834 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80157c6:	681a      	ldr	r2, [r3, #0]
 80157c8:	4b1a      	ldr	r3, [pc, #104]	@ (8015834 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80157ca:	2180      	movs	r1, #128	@ 0x80
 80157cc:	0349      	lsls	r1, r1, #13
 80157ce:	430a      	orrs	r2, r1
 80157d0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80157d2:	4b18      	ldr	r3, [pc, #96]	@ (8015834 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80157d4:	689a      	ldr	r2, [r3, #8]
 80157d6:	4b17      	ldr	r3, [pc, #92]	@ (8015834 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80157d8:	2180      	movs	r1, #128	@ 0x80
 80157da:	0349      	lsls	r1, r1, #13
 80157dc:	430a      	orrs	r2, r1
 80157de:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	689a      	ldr	r2, [r3, #8]
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2180      	movs	r1, #128	@ 0x80
 80157ec:	01c9      	lsls	r1, r1, #7
 80157ee:	430a      	orrs	r2, r1
 80157f0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	689a      	ldr	r2, [r3, #8]
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2180      	movs	r1, #128	@ 0x80
 80157fe:	00c9      	lsls	r1, r1, #3
 8015800:	430a      	orrs	r2, r1
 8015802:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	22ff      	movs	r2, #255	@ 0xff
 801580a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	2221      	movs	r2, #33	@ 0x21
 8015810:	2101      	movs	r1, #1
 8015812:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2220      	movs	r2, #32
 8015818:	2100      	movs	r1, #0
 801581a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801581c:	2300      	movs	r3, #0
}
 801581e:	0018      	movs	r0, r3
 8015820:	46bd      	mov	sp, r7
 8015822:	b006      	add	sp, #24
 8015824:	bd80      	pop	{r7, pc}
 8015826:	46c0      	nop			@ (mov r8, r8)
 8015828:	200000c8 	.word	0x200000c8
 801582c:	fffffbff 	.word	0xfffffbff
 8015830:	fffffb7f 	.word	0xfffffb7f
 8015834:	40010400 	.word	0x40010400

08015838 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015838:	b580      	push	{r7, lr}
 801583a:	b084      	sub	sp, #16
 801583c:	af00      	add	r7, sp, #0
 801583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015840:	2300      	movs	r3, #0
 8015842:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2220      	movs	r2, #32
 8015848:	5c9b      	ldrb	r3, [r3, r2]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d101      	bne.n	8015852 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801584e:	2302      	movs	r3, #2
 8015850:	e04e      	b.n	80158f0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2220      	movs	r2, #32
 8015856:	2101      	movs	r1, #1
 8015858:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2221      	movs	r2, #33	@ 0x21
 801585e:	2102      	movs	r1, #2
 8015860:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	22ca      	movs	r2, #202	@ 0xca
 8015868:	625a      	str	r2, [r3, #36]	@ 0x24
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	2253      	movs	r2, #83	@ 0x53
 8015870:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	689a      	ldr	r2, [r3, #8]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	491e      	ldr	r1, [pc, #120]	@ (80158f8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801587e:	400a      	ands	r2, r1
 8015880:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	689a      	ldr	r2, [r3, #8]
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	491b      	ldr	r1, [pc, #108]	@ (80158fc <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801588e:	400a      	ands	r2, r1
 8015890:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015892:	f7f8 fb3d 	bl	800df10 <HAL_GetTick>
 8015896:	0003      	movs	r3, r0
 8015898:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801589a:	e016      	b.n	80158ca <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801589c:	f7f8 fb38 	bl	800df10 <HAL_GetTick>
 80158a0:	0002      	movs	r2, r0
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	1ad2      	subs	r2, r2, r3
 80158a6:	23fa      	movs	r3, #250	@ 0xfa
 80158a8:	009b      	lsls	r3, r3, #2
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d90d      	bls.n	80158ca <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	22ff      	movs	r2, #255	@ 0xff
 80158b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2221      	movs	r2, #33	@ 0x21
 80158ba:	2103      	movs	r1, #3
 80158bc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2220      	movs	r2, #32
 80158c2:	2100      	movs	r1, #0
 80158c4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80158c6:	2303      	movs	r3, #3
 80158c8:	e012      	b.n	80158f0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	68db      	ldr	r3, [r3, #12]
 80158d0:	2204      	movs	r2, #4
 80158d2:	4013      	ands	r3, r2
 80158d4:	d0e2      	beq.n	801589c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	22ff      	movs	r2, #255	@ 0xff
 80158dc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	2221      	movs	r2, #33	@ 0x21
 80158e2:	2101      	movs	r1, #1
 80158e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2220      	movs	r2, #32
 80158ea:	2100      	movs	r1, #0
 80158ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80158ee:	2300      	movs	r3, #0
}
 80158f0:	0018      	movs	r0, r3
 80158f2:	46bd      	mov	sp, r7
 80158f4:	b004      	add	sp, #16
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	fffffbff 	.word	0xfffffbff
 80158fc:	ffffbfff 	.word	0xffffbfff

08015900 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015908:	4b13      	ldr	r3, [pc, #76]	@ (8015958 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801590a:	2280      	movs	r2, #128	@ 0x80
 801590c:	0352      	lsls	r2, r2, #13
 801590e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	689a      	ldr	r2, [r3, #8]
 8015916:	2380      	movs	r3, #128	@ 0x80
 8015918:	01db      	lsls	r3, r3, #7
 801591a:	4013      	ands	r3, r2
 801591c:	d014      	beq.n	8015948 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	68da      	ldr	r2, [r3, #12]
 8015924:	2380      	movs	r3, #128	@ 0x80
 8015926:	00db      	lsls	r3, r3, #3
 8015928:	4013      	ands	r3, r2
 801592a:	d00d      	beq.n	8015948 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	68db      	ldr	r3, [r3, #12]
 8015932:	22ff      	movs	r2, #255	@ 0xff
 8015934:	401a      	ands	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	4908      	ldr	r1, [pc, #32]	@ (801595c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801593c:	430a      	orrs	r2, r1
 801593e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	0018      	movs	r0, r3
 8015944:	f000 f80c 	bl	8015960 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2221      	movs	r2, #33	@ 0x21
 801594c:	2101      	movs	r1, #1
 801594e:	5499      	strb	r1, [r3, r2]
}
 8015950:	46c0      	nop			@ (mov r8, r8)
 8015952:	46bd      	mov	sp, r7
 8015954:	b002      	add	sp, #8
 8015956:	bd80      	pop	{r7, pc}
 8015958:	40010400 	.word	0x40010400
 801595c:	fffffb7f 	.word	0xfffffb7f

08015960 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b082      	sub	sp, #8
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015968:	46c0      	nop			@ (mov r8, r8)
 801596a:	46bd      	mov	sp, r7
 801596c:	b002      	add	sp, #8
 801596e:	bd80      	pop	{r7, pc}

08015970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d101      	bne.n	8015982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801597e:	2301      	movs	r3, #1
 8015980:	e032      	b.n	80159e8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	2239      	movs	r2, #57	@ 0x39
 8015986:	5c9b      	ldrb	r3, [r3, r2]
 8015988:	b2db      	uxtb	r3, r3
 801598a:	2b00      	cmp	r3, #0
 801598c:	d107      	bne.n	801599e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2238      	movs	r2, #56	@ 0x38
 8015992:	2100      	movs	r1, #0
 8015994:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	0018      	movs	r0, r3
 801599a:	f7f7 fc73 	bl	800d284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	2239      	movs	r2, #57	@ 0x39
 80159a2:	2102      	movs	r1, #2
 80159a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	3304      	adds	r3, #4
 80159ae:	0019      	movs	r1, r3
 80159b0:	0010      	movs	r0, r2
 80159b2:	f000 fa1d 	bl	8015df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	223e      	movs	r2, #62	@ 0x3e
 80159ba:	2101      	movs	r1, #1
 80159bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	223a      	movs	r2, #58	@ 0x3a
 80159c2:	2101      	movs	r1, #1
 80159c4:	5499      	strb	r1, [r3, r2]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	223b      	movs	r2, #59	@ 0x3b
 80159ca:	2101      	movs	r1, #1
 80159cc:	5499      	strb	r1, [r3, r2]
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	223c      	movs	r2, #60	@ 0x3c
 80159d2:	2101      	movs	r1, #1
 80159d4:	5499      	strb	r1, [r3, r2]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	223d      	movs	r2, #61	@ 0x3d
 80159da:	2101      	movs	r1, #1
 80159dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2239      	movs	r2, #57	@ 0x39
 80159e2:	2101      	movs	r1, #1
 80159e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80159e6:	2300      	movs	r3, #0
}
 80159e8:	0018      	movs	r0, r3
 80159ea:	46bd      	mov	sp, r7
 80159ec:	b002      	add	sp, #8
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b084      	sub	sp, #16
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2239      	movs	r2, #57	@ 0x39
 80159fc:	5c9b      	ldrb	r3, [r3, r2]
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d001      	beq.n	8015a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015a04:	2301      	movs	r3, #1
 8015a06:	e033      	b.n	8015a70 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2239      	movs	r2, #57	@ 0x39
 8015a0c:	2102      	movs	r1, #2
 8015a0e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681a      	ldr	r2, [r3, #0]
 8015a14:	2380      	movs	r3, #128	@ 0x80
 8015a16:	05db      	lsls	r3, r3, #23
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d00e      	beq.n	8015a3a <HAL_TIM_Base_Start+0x4a>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	4a15      	ldr	r2, [pc, #84]	@ (8015a78 <HAL_TIM_Base_Start+0x88>)
 8015a22:	4293      	cmp	r3, r2
 8015a24:	d009      	beq.n	8015a3a <HAL_TIM_Base_Start+0x4a>
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	4a14      	ldr	r2, [pc, #80]	@ (8015a7c <HAL_TIM_Base_Start+0x8c>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d004      	beq.n	8015a3a <HAL_TIM_Base_Start+0x4a>
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	4a12      	ldr	r2, [pc, #72]	@ (8015a80 <HAL_TIM_Base_Start+0x90>)
 8015a36:	4293      	cmp	r3, r2
 8015a38:	d111      	bne.n	8015a5e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	689b      	ldr	r3, [r3, #8]
 8015a40:	2207      	movs	r2, #7
 8015a42:	4013      	ands	r3, r2
 8015a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2b06      	cmp	r3, #6
 8015a4a:	d010      	beq.n	8015a6e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	2101      	movs	r1, #1
 8015a58:	430a      	orrs	r2, r1
 8015a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015a5c:	e007      	b.n	8015a6e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	2101      	movs	r1, #1
 8015a6a:	430a      	orrs	r2, r1
 8015a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015a6e:	2300      	movs	r3, #0
}
 8015a70:	0018      	movs	r0, r3
 8015a72:	46bd      	mov	sp, r7
 8015a74:	b004      	add	sp, #16
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	40000400 	.word	0x40000400
 8015a7c:	40010800 	.word	0x40010800
 8015a80:	40011400 	.word	0x40011400

08015a84 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	6a1b      	ldr	r3, [r3, #32]
 8015a92:	4a0a      	ldr	r2, [pc, #40]	@ (8015abc <HAL_TIM_Base_Stop+0x38>)
 8015a94:	4013      	ands	r3, r2
 8015a96:	d107      	bne.n	8015aa8 <HAL_TIM_Base_Stop+0x24>
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2101      	movs	r1, #1
 8015aa4:	438a      	bics	r2, r1
 8015aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2239      	movs	r2, #57	@ 0x39
 8015aac:	2101      	movs	r1, #1
 8015aae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015ab0:	2300      	movs	r3, #0
}
 8015ab2:	0018      	movs	r0, r3
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	b002      	add	sp, #8
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	46c0      	nop			@ (mov r8, r8)
 8015abc:	00001111 	.word	0x00001111

08015ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d101      	bne.n	8015ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015ace:	2301      	movs	r3, #1
 8015ad0:	e032      	b.n	8015b38 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2239      	movs	r2, #57	@ 0x39
 8015ad6:	5c9b      	ldrb	r3, [r3, r2]
 8015ad8:	b2db      	uxtb	r3, r3
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d107      	bne.n	8015aee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	2238      	movs	r2, #56	@ 0x38
 8015ae2:	2100      	movs	r1, #0
 8015ae4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	0018      	movs	r0, r3
 8015aea:	f7f7 fba7 	bl	800d23c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2239      	movs	r2, #57	@ 0x39
 8015af2:	2102      	movs	r1, #2
 8015af4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	681a      	ldr	r2, [r3, #0]
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	3304      	adds	r3, #4
 8015afe:	0019      	movs	r1, r3
 8015b00:	0010      	movs	r0, r2
 8015b02:	f000 f975 	bl	8015df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	223e      	movs	r2, #62	@ 0x3e
 8015b0a:	2101      	movs	r1, #1
 8015b0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	223a      	movs	r2, #58	@ 0x3a
 8015b12:	2101      	movs	r1, #1
 8015b14:	5499      	strb	r1, [r3, r2]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	223b      	movs	r2, #59	@ 0x3b
 8015b1a:	2101      	movs	r1, #1
 8015b1c:	5499      	strb	r1, [r3, r2]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	223c      	movs	r2, #60	@ 0x3c
 8015b22:	2101      	movs	r1, #1
 8015b24:	5499      	strb	r1, [r3, r2]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	223d      	movs	r2, #61	@ 0x3d
 8015b2a:	2101      	movs	r1, #1
 8015b2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2239      	movs	r2, #57	@ 0x39
 8015b32:	2101      	movs	r1, #1
 8015b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015b36:	2300      	movs	r3, #0
}
 8015b38:	0018      	movs	r0, r3
 8015b3a:	46bd      	mov	sp, r7
 8015b3c:	b002      	add	sp, #8
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
 8015b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d108      	bne.n	8015b62 <HAL_TIM_PWM_Start+0x22>
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	223a      	movs	r2, #58	@ 0x3a
 8015b54:	5c9b      	ldrb	r3, [r3, r2]
 8015b56:	b2db      	uxtb	r3, r3
 8015b58:	3b01      	subs	r3, #1
 8015b5a:	1e5a      	subs	r2, r3, #1
 8015b5c:	4193      	sbcs	r3, r2
 8015b5e:	b2db      	uxtb	r3, r3
 8015b60:	e01f      	b.n	8015ba2 <HAL_TIM_PWM_Start+0x62>
 8015b62:	683b      	ldr	r3, [r7, #0]
 8015b64:	2b04      	cmp	r3, #4
 8015b66:	d108      	bne.n	8015b7a <HAL_TIM_PWM_Start+0x3a>
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	223b      	movs	r2, #59	@ 0x3b
 8015b6c:	5c9b      	ldrb	r3, [r3, r2]
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	3b01      	subs	r3, #1
 8015b72:	1e5a      	subs	r2, r3, #1
 8015b74:	4193      	sbcs	r3, r2
 8015b76:	b2db      	uxtb	r3, r3
 8015b78:	e013      	b.n	8015ba2 <HAL_TIM_PWM_Start+0x62>
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	2b08      	cmp	r3, #8
 8015b7e:	d108      	bne.n	8015b92 <HAL_TIM_PWM_Start+0x52>
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	223c      	movs	r2, #60	@ 0x3c
 8015b84:	5c9b      	ldrb	r3, [r3, r2]
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	3b01      	subs	r3, #1
 8015b8a:	1e5a      	subs	r2, r3, #1
 8015b8c:	4193      	sbcs	r3, r2
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	e007      	b.n	8015ba2 <HAL_TIM_PWM_Start+0x62>
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	223d      	movs	r2, #61	@ 0x3d
 8015b96:	5c9b      	ldrb	r3, [r3, r2]
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	3b01      	subs	r3, #1
 8015b9c:	1e5a      	subs	r2, r3, #1
 8015b9e:	4193      	sbcs	r3, r2
 8015ba0:	b2db      	uxtb	r3, r3
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d001      	beq.n	8015baa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8015ba6:	2301      	movs	r3, #1
 8015ba8:	e052      	b.n	8015c50 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d104      	bne.n	8015bba <HAL_TIM_PWM_Start+0x7a>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	223a      	movs	r2, #58	@ 0x3a
 8015bb4:	2102      	movs	r1, #2
 8015bb6:	5499      	strb	r1, [r3, r2]
 8015bb8:	e013      	b.n	8015be2 <HAL_TIM_PWM_Start+0xa2>
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	2b04      	cmp	r3, #4
 8015bbe:	d104      	bne.n	8015bca <HAL_TIM_PWM_Start+0x8a>
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	223b      	movs	r2, #59	@ 0x3b
 8015bc4:	2102      	movs	r1, #2
 8015bc6:	5499      	strb	r1, [r3, r2]
 8015bc8:	e00b      	b.n	8015be2 <HAL_TIM_PWM_Start+0xa2>
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	2b08      	cmp	r3, #8
 8015bce:	d104      	bne.n	8015bda <HAL_TIM_PWM_Start+0x9a>
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	223c      	movs	r2, #60	@ 0x3c
 8015bd4:	2102      	movs	r1, #2
 8015bd6:	5499      	strb	r1, [r3, r2]
 8015bd8:	e003      	b.n	8015be2 <HAL_TIM_PWM_Start+0xa2>
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	223d      	movs	r2, #61	@ 0x3d
 8015bde:	2102      	movs	r1, #2
 8015be0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	6839      	ldr	r1, [r7, #0]
 8015be8:	2201      	movs	r2, #1
 8015bea:	0018      	movs	r0, r3
 8015bec:	f000 fa62 	bl	80160b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	2380      	movs	r3, #128	@ 0x80
 8015bf6:	05db      	lsls	r3, r3, #23
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	d00e      	beq.n	8015c1a <HAL_TIM_PWM_Start+0xda>
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	4a15      	ldr	r2, [pc, #84]	@ (8015c58 <HAL_TIM_PWM_Start+0x118>)
 8015c02:	4293      	cmp	r3, r2
 8015c04:	d009      	beq.n	8015c1a <HAL_TIM_PWM_Start+0xda>
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a14      	ldr	r2, [pc, #80]	@ (8015c5c <HAL_TIM_PWM_Start+0x11c>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d004      	beq.n	8015c1a <HAL_TIM_PWM_Start+0xda>
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	4a12      	ldr	r2, [pc, #72]	@ (8015c60 <HAL_TIM_PWM_Start+0x120>)
 8015c16:	4293      	cmp	r3, r2
 8015c18:	d111      	bne.n	8015c3e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	689b      	ldr	r3, [r3, #8]
 8015c20:	2207      	movs	r2, #7
 8015c22:	4013      	ands	r3, r2
 8015c24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	2b06      	cmp	r3, #6
 8015c2a:	d010      	beq.n	8015c4e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2101      	movs	r1, #1
 8015c38:	430a      	orrs	r2, r1
 8015c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c3c:	e007      	b.n	8015c4e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2101      	movs	r1, #1
 8015c4a:	430a      	orrs	r2, r1
 8015c4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015c4e:	2300      	movs	r3, #0
}
 8015c50:	0018      	movs	r0, r3
 8015c52:	46bd      	mov	sp, r7
 8015c54:	b004      	add	sp, #16
 8015c56:	bd80      	pop	{r7, pc}
 8015c58:	40000400 	.word	0x40000400
 8015c5c:	40010800 	.word	0x40010800
 8015c60:	40011400 	.word	0x40011400

08015c64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b086      	sub	sp, #24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	60f8      	str	r0, [r7, #12]
 8015c6c:	60b9      	str	r1, [r7, #8]
 8015c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015c70:	2317      	movs	r3, #23
 8015c72:	18fb      	adds	r3, r7, r3
 8015c74:	2200      	movs	r2, #0
 8015c76:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2238      	movs	r2, #56	@ 0x38
 8015c7c:	5c9b      	ldrb	r3, [r3, r2]
 8015c7e:	2b01      	cmp	r3, #1
 8015c80:	d101      	bne.n	8015c86 <HAL_TIM_PWM_ConfigChannel+0x22>
 8015c82:	2302      	movs	r3, #2
 8015c84:	e0ad      	b.n	8015de2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2238      	movs	r2, #56	@ 0x38
 8015c8a:	2101      	movs	r1, #1
 8015c8c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2b0c      	cmp	r3, #12
 8015c92:	d100      	bne.n	8015c96 <HAL_TIM_PWM_ConfigChannel+0x32>
 8015c94:	e076      	b.n	8015d84 <HAL_TIM_PWM_ConfigChannel+0x120>
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2b0c      	cmp	r3, #12
 8015c9a:	d900      	bls.n	8015c9e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8015c9c:	e095      	b.n	8015dca <HAL_TIM_PWM_ConfigChannel+0x166>
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2b08      	cmp	r3, #8
 8015ca2:	d04e      	beq.n	8015d42 <HAL_TIM_PWM_ConfigChannel+0xde>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2b08      	cmp	r3, #8
 8015ca8:	d900      	bls.n	8015cac <HAL_TIM_PWM_ConfigChannel+0x48>
 8015caa:	e08e      	b.n	8015dca <HAL_TIM_PWM_ConfigChannel+0x166>
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d003      	beq.n	8015cba <HAL_TIM_PWM_ConfigChannel+0x56>
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2b04      	cmp	r3, #4
 8015cb6:	d021      	beq.n	8015cfc <HAL_TIM_PWM_ConfigChannel+0x98>
 8015cb8:	e087      	b.n	8015dca <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	68ba      	ldr	r2, [r7, #8]
 8015cc0:	0011      	movs	r1, r2
 8015cc2:	0018      	movs	r0, r3
 8015cc4:	f000 f8f2 	bl	8015eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	699a      	ldr	r2, [r3, #24]
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	2108      	movs	r1, #8
 8015cd4:	430a      	orrs	r2, r1
 8015cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	699a      	ldr	r2, [r3, #24]
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	2104      	movs	r1, #4
 8015ce4:	438a      	bics	r2, r1
 8015ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	6999      	ldr	r1, [r3, #24]
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	68da      	ldr	r2, [r3, #12]
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	430a      	orrs	r2, r1
 8015cf8:	619a      	str	r2, [r3, #24]
      break;
 8015cfa:	e06b      	b.n	8015dd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	68ba      	ldr	r2, [r7, #8]
 8015d02:	0011      	movs	r1, r2
 8015d04:	0018      	movs	r0, r3
 8015d06:	f000 f90d 	bl	8015f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	699a      	ldr	r2, [r3, #24]
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	2180      	movs	r1, #128	@ 0x80
 8015d16:	0109      	lsls	r1, r1, #4
 8015d18:	430a      	orrs	r2, r1
 8015d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	699a      	ldr	r2, [r3, #24]
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	4931      	ldr	r1, [pc, #196]	@ (8015dec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015d28:	400a      	ands	r2, r1
 8015d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	6999      	ldr	r1, [r3, #24]
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	68db      	ldr	r3, [r3, #12]
 8015d36:	021a      	lsls	r2, r3, #8
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	430a      	orrs	r2, r1
 8015d3e:	619a      	str	r2, [r3, #24]
      break;
 8015d40:	e048      	b.n	8015dd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	68ba      	ldr	r2, [r7, #8]
 8015d48:	0011      	movs	r1, r2
 8015d4a:	0018      	movs	r0, r3
 8015d4c:	f000 f92c 	bl	8015fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	69da      	ldr	r2, [r3, #28]
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2108      	movs	r1, #8
 8015d5c:	430a      	orrs	r2, r1
 8015d5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	69da      	ldr	r2, [r3, #28]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	2104      	movs	r1, #4
 8015d6c:	438a      	bics	r2, r1
 8015d6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	69d9      	ldr	r1, [r3, #28]
 8015d76:	68bb      	ldr	r3, [r7, #8]
 8015d78:	68da      	ldr	r2, [r3, #12]
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	430a      	orrs	r2, r1
 8015d80:	61da      	str	r2, [r3, #28]
      break;
 8015d82:	e027      	b.n	8015dd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	68ba      	ldr	r2, [r7, #8]
 8015d8a:	0011      	movs	r1, r2
 8015d8c:	0018      	movs	r0, r3
 8015d8e:	f000 f94b 	bl	8016028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	69da      	ldr	r2, [r3, #28]
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	2180      	movs	r1, #128	@ 0x80
 8015d9e:	0109      	lsls	r1, r1, #4
 8015da0:	430a      	orrs	r2, r1
 8015da2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	69da      	ldr	r2, [r3, #28]
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	490f      	ldr	r1, [pc, #60]	@ (8015dec <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015db0:	400a      	ands	r2, r1
 8015db2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	69d9      	ldr	r1, [r3, #28]
 8015dba:	68bb      	ldr	r3, [r7, #8]
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	021a      	lsls	r2, r3, #8
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	430a      	orrs	r2, r1
 8015dc6:	61da      	str	r2, [r3, #28]
      break;
 8015dc8:	e004      	b.n	8015dd4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8015dca:	2317      	movs	r3, #23
 8015dcc:	18fb      	adds	r3, r7, r3
 8015dce:	2201      	movs	r2, #1
 8015dd0:	701a      	strb	r2, [r3, #0]
      break;
 8015dd2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	2238      	movs	r2, #56	@ 0x38
 8015dd8:	2100      	movs	r1, #0
 8015dda:	5499      	strb	r1, [r3, r2]

  return status;
 8015ddc:	2317      	movs	r3, #23
 8015dde:	18fb      	adds	r3, r7, r3
 8015de0:	781b      	ldrb	r3, [r3, #0]
}
 8015de2:	0018      	movs	r0, r3
 8015de4:	46bd      	mov	sp, r7
 8015de6:	b006      	add	sp, #24
 8015de8:	bd80      	pop	{r7, pc}
 8015dea:	46c0      	nop			@ (mov r8, r8)
 8015dec:	fffffbff 	.word	0xfffffbff

08015df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b084      	sub	sp, #16
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	6078      	str	r0, [r7, #4]
 8015df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	2380      	movs	r3, #128	@ 0x80
 8015e04:	05db      	lsls	r3, r3, #23
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d00b      	beq.n	8015e22 <TIM_Base_SetConfig+0x32>
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	4a23      	ldr	r2, [pc, #140]	@ (8015e9c <TIM_Base_SetConfig+0xac>)
 8015e0e:	4293      	cmp	r3, r2
 8015e10:	d007      	beq.n	8015e22 <TIM_Base_SetConfig+0x32>
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	4a22      	ldr	r2, [pc, #136]	@ (8015ea0 <TIM_Base_SetConfig+0xb0>)
 8015e16:	4293      	cmp	r3, r2
 8015e18:	d003      	beq.n	8015e22 <TIM_Base_SetConfig+0x32>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	4a21      	ldr	r2, [pc, #132]	@ (8015ea4 <TIM_Base_SetConfig+0xb4>)
 8015e1e:	4293      	cmp	r3, r2
 8015e20:	d108      	bne.n	8015e34 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	2270      	movs	r2, #112	@ 0x70
 8015e26:	4393      	bics	r3, r2
 8015e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	68fa      	ldr	r2, [r7, #12]
 8015e30:	4313      	orrs	r3, r2
 8015e32:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	2380      	movs	r3, #128	@ 0x80
 8015e38:	05db      	lsls	r3, r3, #23
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	d00b      	beq.n	8015e56 <TIM_Base_SetConfig+0x66>
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	4a16      	ldr	r2, [pc, #88]	@ (8015e9c <TIM_Base_SetConfig+0xac>)
 8015e42:	4293      	cmp	r3, r2
 8015e44:	d007      	beq.n	8015e56 <TIM_Base_SetConfig+0x66>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	4a15      	ldr	r2, [pc, #84]	@ (8015ea0 <TIM_Base_SetConfig+0xb0>)
 8015e4a:	4293      	cmp	r3, r2
 8015e4c:	d003      	beq.n	8015e56 <TIM_Base_SetConfig+0x66>
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	4a14      	ldr	r2, [pc, #80]	@ (8015ea4 <TIM_Base_SetConfig+0xb4>)
 8015e52:	4293      	cmp	r3, r2
 8015e54:	d108      	bne.n	8015e68 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	4a13      	ldr	r2, [pc, #76]	@ (8015ea8 <TIM_Base_SetConfig+0xb8>)
 8015e5a:	4013      	ands	r3, r2
 8015e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	68db      	ldr	r3, [r3, #12]
 8015e62:	68fa      	ldr	r2, [r7, #12]
 8015e64:	4313      	orrs	r3, r2
 8015e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	2280      	movs	r2, #128	@ 0x80
 8015e6c:	4393      	bics	r3, r2
 8015e6e:	001a      	movs	r2, r3
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	691b      	ldr	r3, [r3, #16]
 8015e74:	4313      	orrs	r3, r2
 8015e76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	68fa      	ldr	r2, [r7, #12]
 8015e7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	689a      	ldr	r2, [r3, #8]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	681a      	ldr	r2, [r3, #0]
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2201      	movs	r2, #1
 8015e92:	615a      	str	r2, [r3, #20]
}
 8015e94:	46c0      	nop			@ (mov r8, r8)
 8015e96:	46bd      	mov	sp, r7
 8015e98:	b004      	add	sp, #16
 8015e9a:	bd80      	pop	{r7, pc}
 8015e9c:	40000400 	.word	0x40000400
 8015ea0:	40010800 	.word	0x40010800
 8015ea4:	40011400 	.word	0x40011400
 8015ea8:	fffffcff 	.word	0xfffffcff

08015eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b086      	sub	sp, #24
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
 8015eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6a1b      	ldr	r3, [r3, #32]
 8015eba:	2201      	movs	r2, #1
 8015ebc:	4393      	bics	r3, r2
 8015ebe:	001a      	movs	r2, r3
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6a1b      	ldr	r3, [r3, #32]
 8015ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	699b      	ldr	r3, [r3, #24]
 8015ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2270      	movs	r2, #112	@ 0x70
 8015eda:	4393      	bics	r3, r2
 8015edc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	2203      	movs	r2, #3
 8015ee2:	4393      	bics	r3, r2
 8015ee4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	68fa      	ldr	r2, [r7, #12]
 8015eec:	4313      	orrs	r3, r2
 8015eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015ef0:	697b      	ldr	r3, [r7, #20]
 8015ef2:	2202      	movs	r2, #2
 8015ef4:	4393      	bics	r3, r2
 8015ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	689b      	ldr	r3, [r3, #8]
 8015efc:	697a      	ldr	r2, [r7, #20]
 8015efe:	4313      	orrs	r3, r2
 8015f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	693a      	ldr	r2, [r7, #16]
 8015f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	68fa      	ldr	r2, [r7, #12]
 8015f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	685a      	ldr	r2, [r3, #4]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	697a      	ldr	r2, [r7, #20]
 8015f1a:	621a      	str	r2, [r3, #32]
}
 8015f1c:	46c0      	nop			@ (mov r8, r8)
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	b006      	add	sp, #24
 8015f22:	bd80      	pop	{r7, pc}

08015f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b086      	sub	sp, #24
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	6a1b      	ldr	r3, [r3, #32]
 8015f32:	2210      	movs	r2, #16
 8015f34:	4393      	bics	r3, r2
 8015f36:	001a      	movs	r2, r3
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6a1b      	ldr	r3, [r3, #32]
 8015f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	699b      	ldr	r3, [r3, #24]
 8015f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	4a13      	ldr	r2, [pc, #76]	@ (8015fa0 <TIM_OC2_SetConfig+0x7c>)
 8015f52:	4013      	ands	r3, r2
 8015f54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	4a12      	ldr	r2, [pc, #72]	@ (8015fa4 <TIM_OC2_SetConfig+0x80>)
 8015f5a:	4013      	ands	r3, r2
 8015f5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	021b      	lsls	r3, r3, #8
 8015f64:	68fa      	ldr	r2, [r7, #12]
 8015f66:	4313      	orrs	r3, r2
 8015f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	2220      	movs	r2, #32
 8015f6e:	4393      	bics	r3, r2
 8015f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	689b      	ldr	r3, [r3, #8]
 8015f76:	011b      	lsls	r3, r3, #4
 8015f78:	697a      	ldr	r2, [r7, #20]
 8015f7a:	4313      	orrs	r3, r2
 8015f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	693a      	ldr	r2, [r7, #16]
 8015f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	68fa      	ldr	r2, [r7, #12]
 8015f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015f8a:	683b      	ldr	r3, [r7, #0]
 8015f8c:	685a      	ldr	r2, [r3, #4]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	697a      	ldr	r2, [r7, #20]
 8015f96:	621a      	str	r2, [r3, #32]
}
 8015f98:	46c0      	nop			@ (mov r8, r8)
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	b006      	add	sp, #24
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	ffff8fff 	.word	0xffff8fff
 8015fa4:	fffffcff 	.word	0xfffffcff

08015fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b086      	sub	sp, #24
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6a1b      	ldr	r3, [r3, #32]
 8015fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8016020 <TIM_OC3_SetConfig+0x78>)
 8015fb8:	401a      	ands	r2, r3
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	6a1b      	ldr	r3, [r3, #32]
 8015fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	685b      	ldr	r3, [r3, #4]
 8015fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	69db      	ldr	r3, [r3, #28]
 8015fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2270      	movs	r2, #112	@ 0x70
 8015fd4:	4393      	bics	r3, r2
 8015fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2203      	movs	r2, #3
 8015fdc:	4393      	bics	r3, r2
 8015fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	68fa      	ldr	r2, [r7, #12]
 8015fe6:	4313      	orrs	r3, r2
 8015fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	4a0d      	ldr	r2, [pc, #52]	@ (8016024 <TIM_OC3_SetConfig+0x7c>)
 8015fee:	4013      	ands	r3, r2
 8015ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	689b      	ldr	r3, [r3, #8]
 8015ff6:	021b      	lsls	r3, r3, #8
 8015ff8:	697a      	ldr	r2, [r7, #20]
 8015ffa:	4313      	orrs	r3, r2
 8015ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	693a      	ldr	r2, [r7, #16]
 8016002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	68fa      	ldr	r2, [r7, #12]
 8016008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	685a      	ldr	r2, [r3, #4]
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	697a      	ldr	r2, [r7, #20]
 8016016:	621a      	str	r2, [r3, #32]
}
 8016018:	46c0      	nop			@ (mov r8, r8)
 801601a:	46bd      	mov	sp, r7
 801601c:	b006      	add	sp, #24
 801601e:	bd80      	pop	{r7, pc}
 8016020:	fffffeff 	.word	0xfffffeff
 8016024:	fffffdff 	.word	0xfffffdff

08016028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b086      	sub	sp, #24
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
 8016030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6a1b      	ldr	r3, [r3, #32]
 8016036:	4a1b      	ldr	r2, [pc, #108]	@ (80160a4 <TIM_OC4_SetConfig+0x7c>)
 8016038:	401a      	ands	r2, r3
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	6a1b      	ldr	r3, [r3, #32]
 8016042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	685b      	ldr	r3, [r3, #4]
 8016048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	69db      	ldr	r3, [r3, #28]
 801604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	4a15      	ldr	r2, [pc, #84]	@ (80160a8 <TIM_OC4_SetConfig+0x80>)
 8016054:	4013      	ands	r3, r2
 8016056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	4a14      	ldr	r2, [pc, #80]	@ (80160ac <TIM_OC4_SetConfig+0x84>)
 801605c:	4013      	ands	r3, r2
 801605e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	021b      	lsls	r3, r3, #8
 8016066:	68fa      	ldr	r2, [r7, #12]
 8016068:	4313      	orrs	r3, r2
 801606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	4a10      	ldr	r2, [pc, #64]	@ (80160b0 <TIM_OC4_SetConfig+0x88>)
 8016070:	4013      	ands	r3, r2
 8016072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	689b      	ldr	r3, [r3, #8]
 8016078:	031b      	lsls	r3, r3, #12
 801607a:	697a      	ldr	r2, [r7, #20]
 801607c:	4313      	orrs	r3, r2
 801607e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	693a      	ldr	r2, [r7, #16]
 8016084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	68fa      	ldr	r2, [r7, #12]
 801608a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	685a      	ldr	r2, [r3, #4]
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	697a      	ldr	r2, [r7, #20]
 8016098:	621a      	str	r2, [r3, #32]
}
 801609a:	46c0      	nop			@ (mov r8, r8)
 801609c:	46bd      	mov	sp, r7
 801609e:	b006      	add	sp, #24
 80160a0:	bd80      	pop	{r7, pc}
 80160a2:	46c0      	nop			@ (mov r8, r8)
 80160a4:	ffffefff 	.word	0xffffefff
 80160a8:	ffff8fff 	.word	0xffff8fff
 80160ac:	fffffcff 	.word	0xfffffcff
 80160b0:	ffffdfff 	.word	0xffffdfff

080160b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b086      	sub	sp, #24
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	60f8      	str	r0, [r7, #12]
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	221f      	movs	r2, #31
 80160c4:	4013      	ands	r3, r2
 80160c6:	2201      	movs	r2, #1
 80160c8:	409a      	lsls	r2, r3
 80160ca:	0013      	movs	r3, r2
 80160cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	6a1b      	ldr	r3, [r3, #32]
 80160d2:	697a      	ldr	r2, [r7, #20]
 80160d4:	43d2      	mvns	r2, r2
 80160d6:	401a      	ands	r2, r3
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	6a1a      	ldr	r2, [r3, #32]
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	211f      	movs	r1, #31
 80160e4:	400b      	ands	r3, r1
 80160e6:	6879      	ldr	r1, [r7, #4]
 80160e8:	4099      	lsls	r1, r3
 80160ea:	000b      	movs	r3, r1
 80160ec:	431a      	orrs	r2, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	621a      	str	r2, [r3, #32]
}
 80160f2:	46c0      	nop			@ (mov r8, r8)
 80160f4:	46bd      	mov	sp, r7
 80160f6:	b006      	add	sp, #24
 80160f8:	bd80      	pop	{r7, pc}
	...

080160fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b084      	sub	sp, #16
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
 8016104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2238      	movs	r2, #56	@ 0x38
 801610a:	5c9b      	ldrb	r3, [r3, r2]
 801610c:	2b01      	cmp	r3, #1
 801610e:	d101      	bne.n	8016114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016110:	2302      	movs	r3, #2
 8016112:	e047      	b.n	80161a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2238      	movs	r2, #56	@ 0x38
 8016118:	2101      	movs	r1, #1
 801611a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2239      	movs	r2, #57	@ 0x39
 8016120:	2102      	movs	r1, #2
 8016122:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	689b      	ldr	r3, [r3, #8]
 8016132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	2270      	movs	r2, #112	@ 0x70
 8016138:	4393      	bics	r3, r2
 801613a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	68fa      	ldr	r2, [r7, #12]
 8016142:	4313      	orrs	r3, r2
 8016144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	68fa      	ldr	r2, [r7, #12]
 801614c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681a      	ldr	r2, [r3, #0]
 8016152:	2380      	movs	r3, #128	@ 0x80
 8016154:	05db      	lsls	r3, r3, #23
 8016156:	429a      	cmp	r2, r3
 8016158:	d00e      	beq.n	8016178 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	4a13      	ldr	r2, [pc, #76]	@ (80161ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016160:	4293      	cmp	r3, r2
 8016162:	d009      	beq.n	8016178 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	4a11      	ldr	r2, [pc, #68]	@ (80161b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801616a:	4293      	cmp	r3, r2
 801616c:	d004      	beq.n	8016178 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	4a10      	ldr	r2, [pc, #64]	@ (80161b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8016174:	4293      	cmp	r3, r2
 8016176:	d10c      	bne.n	8016192 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	2280      	movs	r2, #128	@ 0x80
 801617c:	4393      	bics	r3, r2
 801617e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	685b      	ldr	r3, [r3, #4]
 8016184:	68ba      	ldr	r2, [r7, #8]
 8016186:	4313      	orrs	r3, r2
 8016188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	68ba      	ldr	r2, [r7, #8]
 8016190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	2239      	movs	r2, #57	@ 0x39
 8016196:	2101      	movs	r1, #1
 8016198:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2238      	movs	r2, #56	@ 0x38
 801619e:	2100      	movs	r1, #0
 80161a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80161a2:	2300      	movs	r3, #0
}
 80161a4:	0018      	movs	r0, r3
 80161a6:	46bd      	mov	sp, r7
 80161a8:	b004      	add	sp, #16
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	40000400 	.word	0x40000400
 80161b0:	40010800 	.word	0x40010800
 80161b4:	40011400 	.word	0x40011400

080161b8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	2238      	movs	r2, #56	@ 0x38
 80161c6:	5c9b      	ldrb	r3, [r3, r2]
 80161c8:	2b01      	cmp	r3, #1
 80161ca:	d101      	bne.n	80161d0 <HAL_TIMEx_RemapConfig+0x18>
 80161cc:	2302      	movs	r3, #2
 80161ce:	e00c      	b.n	80161ea <HAL_TIMEx_RemapConfig+0x32>
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2238      	movs	r2, #56	@ 0x38
 80161d4:	2101      	movs	r1, #1
 80161d6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	683a      	ldr	r2, [r7, #0]
 80161de:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2238      	movs	r2, #56	@ 0x38
 80161e4:	2100      	movs	r1, #0
 80161e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80161e8:	2300      	movs	r3, #0
}
 80161ea:	0018      	movs	r0, r3
 80161ec:	46bd      	mov	sp, r7
 80161ee:	b002      	add	sp, #8
 80161f0:	bd80      	pop	{r7, pc}
	...

080161f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d101      	bne.n	8016206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016202:	2301      	movs	r3, #1
 8016204:	e053      	b.n	80162ae <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801620a:	2b00      	cmp	r3, #0
 801620c:	d116      	bne.n	801623c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2278      	movs	r2, #120	@ 0x78
 8016212:	2100      	movs	r1, #0
 8016214:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	0018      	movs	r0, r3
 801621a:	f000 fd65 	bl	8016ce8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	22b0      	movs	r2, #176	@ 0xb0
 8016222:	589b      	ldr	r3, [r3, r2]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d103      	bne.n	8016230 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	21b0      	movs	r1, #176	@ 0xb0
 801622c:	4a22      	ldr	r2, [pc, #136]	@ (80162b8 <HAL_UART_Init+0xc4>)
 801622e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	22b0      	movs	r2, #176	@ 0xb0
 8016234:	589b      	ldr	r3, [r3, r2]
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	0010      	movs	r0, r2
 801623a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2224      	movs	r2, #36	@ 0x24
 8016240:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	681a      	ldr	r2, [r3, #0]
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	2101      	movs	r1, #1
 801624e:	438a      	bics	r2, r1
 8016250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	0018      	movs	r0, r3
 8016256:	f000 fd8b 	bl	8016d70 <UART_SetConfig>
 801625a:	0003      	movs	r3, r0
 801625c:	2b01      	cmp	r3, #1
 801625e:	d101      	bne.n	8016264 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8016260:	2301      	movs	r3, #1
 8016262:	e024      	b.n	80162ae <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016268:	2b00      	cmp	r3, #0
 801626a:	d003      	beq.n	8016274 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	0018      	movs	r0, r3
 8016270:	f001 f81c 	bl	80172ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	685a      	ldr	r2, [r3, #4]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	490f      	ldr	r1, [pc, #60]	@ (80162bc <HAL_UART_Init+0xc8>)
 8016280:	400a      	ands	r2, r1
 8016282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	689a      	ldr	r2, [r3, #8]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	212a      	movs	r1, #42	@ 0x2a
 8016290:	438a      	bics	r2, r1
 8016292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	681a      	ldr	r2, [r3, #0]
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	2101      	movs	r1, #1
 80162a0:	430a      	orrs	r2, r1
 80162a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	0018      	movs	r0, r3
 80162a8:	f001 f8b4 	bl	8017414 <UART_CheckIdleState>
 80162ac:	0003      	movs	r3, r0
}
 80162ae:	0018      	movs	r0, r3
 80162b0:	46bd      	mov	sp, r7
 80162b2:	b002      	add	sp, #8
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	46c0      	nop			@ (mov r8, r8)
 80162b8:	0800d4b9 	.word	0x0800d4b9
 80162bc:	ffffb7ff 	.word	0xffffb7ff

080162c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b08a      	sub	sp, #40	@ 0x28
 80162c4:	af02      	add	r7, sp, #8
 80162c6:	60f8      	str	r0, [r7, #12]
 80162c8:	60b9      	str	r1, [r7, #8]
 80162ca:	603b      	str	r3, [r7, #0]
 80162cc:	1dbb      	adds	r3, r7, #6
 80162ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80162d4:	2b20      	cmp	r3, #32
 80162d6:	d000      	beq.n	80162da <HAL_UART_Transmit+0x1a>
 80162d8:	e08c      	b.n	80163f4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d003      	beq.n	80162e8 <HAL_UART_Transmit+0x28>
 80162e0:	1dbb      	adds	r3, r7, #6
 80162e2:	881b      	ldrh	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d101      	bne.n	80162ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80162e8:	2301      	movs	r3, #1
 80162ea:	e084      	b.n	80163f6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	689a      	ldr	r2, [r3, #8]
 80162f0:	2380      	movs	r3, #128	@ 0x80
 80162f2:	015b      	lsls	r3, r3, #5
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d109      	bne.n	801630c <HAL_UART_Transmit+0x4c>
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	691b      	ldr	r3, [r3, #16]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d105      	bne.n	801630c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	2201      	movs	r2, #1
 8016304:	4013      	ands	r3, r2
 8016306:	d001      	beq.n	801630c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8016308:	2301      	movs	r3, #1
 801630a:	e074      	b.n	80163f6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	2284      	movs	r2, #132	@ 0x84
 8016310:	2100      	movs	r1, #0
 8016312:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2221      	movs	r2, #33	@ 0x21
 8016318:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801631a:	f7f7 fdf9 	bl	800df10 <HAL_GetTick>
 801631e:	0003      	movs	r3, r0
 8016320:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	1dba      	adds	r2, r7, #6
 8016326:	2150      	movs	r1, #80	@ 0x50
 8016328:	8812      	ldrh	r2, [r2, #0]
 801632a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	1dba      	adds	r2, r7, #6
 8016330:	2152      	movs	r1, #82	@ 0x52
 8016332:	8812      	ldrh	r2, [r2, #0]
 8016334:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	689a      	ldr	r2, [r3, #8]
 801633a:	2380      	movs	r3, #128	@ 0x80
 801633c:	015b      	lsls	r3, r3, #5
 801633e:	429a      	cmp	r2, r3
 8016340:	d108      	bne.n	8016354 <HAL_UART_Transmit+0x94>
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	691b      	ldr	r3, [r3, #16]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d104      	bne.n	8016354 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801634a:	2300      	movs	r3, #0
 801634c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801634e:	68bb      	ldr	r3, [r7, #8]
 8016350:	61bb      	str	r3, [r7, #24]
 8016352:	e003      	b.n	801635c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016358:	2300      	movs	r3, #0
 801635a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801635c:	e02f      	b.n	80163be <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801635e:	697a      	ldr	r2, [r7, #20]
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	683b      	ldr	r3, [r7, #0]
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	0013      	movs	r3, r2
 8016368:	2200      	movs	r2, #0
 801636a:	2180      	movs	r1, #128	@ 0x80
 801636c:	f001 f8fa 	bl	8017564 <UART_WaitOnFlagUntilTimeout>
 8016370:	1e03      	subs	r3, r0, #0
 8016372:	d004      	beq.n	801637e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2220      	movs	r2, #32
 8016378:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801637a:	2303      	movs	r3, #3
 801637c:	e03b      	b.n	80163f6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801637e:	69fb      	ldr	r3, [r7, #28]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d10b      	bne.n	801639c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016384:	69bb      	ldr	r3, [r7, #24]
 8016386:	881b      	ldrh	r3, [r3, #0]
 8016388:	001a      	movs	r2, r3
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	05d2      	lsls	r2, r2, #23
 8016390:	0dd2      	lsrs	r2, r2, #23
 8016392:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016394:	69bb      	ldr	r3, [r7, #24]
 8016396:	3302      	adds	r3, #2
 8016398:	61bb      	str	r3, [r7, #24]
 801639a:	e007      	b.n	80163ac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	781a      	ldrb	r2, [r3, #0]
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	3301      	adds	r3, #1
 80163aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	2252      	movs	r2, #82	@ 0x52
 80163b0:	5a9b      	ldrh	r3, [r3, r2]
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	3b01      	subs	r3, #1
 80163b6:	b299      	uxth	r1, r3
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	2252      	movs	r2, #82	@ 0x52
 80163bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	2252      	movs	r2, #82	@ 0x52
 80163c2:	5a9b      	ldrh	r3, [r3, r2]
 80163c4:	b29b      	uxth	r3, r3
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d1c9      	bne.n	801635e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80163ca:	697a      	ldr	r2, [r7, #20]
 80163cc:	68f8      	ldr	r0, [r7, #12]
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	9300      	str	r3, [sp, #0]
 80163d2:	0013      	movs	r3, r2
 80163d4:	2200      	movs	r2, #0
 80163d6:	2140      	movs	r1, #64	@ 0x40
 80163d8:	f001 f8c4 	bl	8017564 <UART_WaitOnFlagUntilTimeout>
 80163dc:	1e03      	subs	r3, r0, #0
 80163de:	d004      	beq.n	80163ea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	2220      	movs	r2, #32
 80163e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80163e6:	2303      	movs	r3, #3
 80163e8:	e005      	b.n	80163f6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2220      	movs	r2, #32
 80163ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80163f0:	2300      	movs	r3, #0
 80163f2:	e000      	b.n	80163f6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80163f4:	2302      	movs	r3, #2
  }
}
 80163f6:	0018      	movs	r0, r3
 80163f8:	46bd      	mov	sp, r7
 80163fa:	b008      	add	sp, #32
 80163fc:	bd80      	pop	{r7, pc}
	...

08016400 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b088      	sub	sp, #32
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	1dbb      	adds	r3, r7, #6
 801640c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2280      	movs	r2, #128	@ 0x80
 8016412:	589b      	ldr	r3, [r3, r2]
 8016414:	2b20      	cmp	r3, #32
 8016416:	d14a      	bne.n	80164ae <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d003      	beq.n	8016426 <HAL_UART_Receive_IT+0x26>
 801641e:	1dbb      	adds	r3, r7, #6
 8016420:	881b      	ldrh	r3, [r3, #0]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d101      	bne.n	801642a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8016426:	2301      	movs	r3, #1
 8016428:	e042      	b.n	80164b0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	689a      	ldr	r2, [r3, #8]
 801642e:	2380      	movs	r3, #128	@ 0x80
 8016430:	015b      	lsls	r3, r3, #5
 8016432:	429a      	cmp	r2, r3
 8016434:	d109      	bne.n	801644a <HAL_UART_Receive_IT+0x4a>
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	691b      	ldr	r3, [r3, #16]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d105      	bne.n	801644a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801643e:	68bb      	ldr	r3, [r7, #8]
 8016440:	2201      	movs	r2, #1
 8016442:	4013      	ands	r3, r2
 8016444:	d001      	beq.n	801644a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8016446:	2301      	movs	r3, #1
 8016448:	e032      	b.n	80164b0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	2200      	movs	r2, #0
 801644e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4a18      	ldr	r2, [pc, #96]	@ (80164b8 <HAL_UART_Receive_IT+0xb8>)
 8016456:	4293      	cmp	r3, r2
 8016458:	d020      	beq.n	801649c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	685a      	ldr	r2, [r3, #4]
 8016460:	2380      	movs	r3, #128	@ 0x80
 8016462:	041b      	lsls	r3, r3, #16
 8016464:	4013      	ands	r3, r2
 8016466:	d019      	beq.n	801649c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016468:	f3ef 8310 	mrs	r3, PRIMASK
 801646c:	613b      	str	r3, [r7, #16]
  return(result);
 801646e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016470:	61fb      	str	r3, [r7, #28]
 8016472:	2301      	movs	r3, #1
 8016474:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	f383 8810 	msr	PRIMASK, r3
}
 801647c:	46c0      	nop			@ (mov r8, r8)
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	681a      	ldr	r2, [r3, #0]
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	2180      	movs	r1, #128	@ 0x80
 801648a:	04c9      	lsls	r1, r1, #19
 801648c:	430a      	orrs	r2, r1
 801648e:	601a      	str	r2, [r3, #0]
 8016490:	69fb      	ldr	r3, [r7, #28]
 8016492:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016494:	69bb      	ldr	r3, [r7, #24]
 8016496:	f383 8810 	msr	PRIMASK, r3
}
 801649a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801649c:	1dbb      	adds	r3, r7, #6
 801649e:	881a      	ldrh	r2, [r3, #0]
 80164a0:	68b9      	ldr	r1, [r7, #8]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	0018      	movs	r0, r3
 80164a6:	f001 f8c7 	bl	8017638 <UART_Start_Receive_IT>
 80164aa:	0003      	movs	r3, r0
 80164ac:	e000      	b.n	80164b0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80164ae:	2302      	movs	r3, #2
  }
}
 80164b0:	0018      	movs	r0, r3
 80164b2:	46bd      	mov	sp, r7
 80164b4:	b008      	add	sp, #32
 80164b6:	bd80      	pop	{r7, pc}
 80164b8:	40004800 	.word	0x40004800

080164bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b088      	sub	sp, #32
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60f8      	str	r0, [r7, #12]
 80164c4:	60b9      	str	r1, [r7, #8]
 80164c6:	1dbb      	adds	r3, r7, #6
 80164c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80164ce:	2b20      	cmp	r3, #32
 80164d0:	d000      	beq.n	80164d4 <HAL_UART_Transmit_DMA+0x18>
 80164d2:	e077      	b.n	80165c4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d003      	beq.n	80164e2 <HAL_UART_Transmit_DMA+0x26>
 80164da:	1dbb      	adds	r3, r7, #6
 80164dc:	881b      	ldrh	r3, [r3, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d101      	bne.n	80164e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80164e2:	2301      	movs	r3, #1
 80164e4:	e06f      	b.n	80165c6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	689a      	ldr	r2, [r3, #8]
 80164ea:	2380      	movs	r3, #128	@ 0x80
 80164ec:	015b      	lsls	r3, r3, #5
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d109      	bne.n	8016506 <HAL_UART_Transmit_DMA+0x4a>
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	691b      	ldr	r3, [r3, #16]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d105      	bne.n	8016506 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	2201      	movs	r2, #1
 80164fe:	4013      	ands	r3, r2
 8016500:	d001      	beq.n	8016506 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016502:	2301      	movs	r3, #1
 8016504:	e05f      	b.n	80165c6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	68ba      	ldr	r2, [r7, #8]
 801650a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	1dba      	adds	r2, r7, #6
 8016510:	2150      	movs	r1, #80	@ 0x50
 8016512:	8812      	ldrh	r2, [r2, #0]
 8016514:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	1dba      	adds	r2, r7, #6
 801651a:	2152      	movs	r1, #82	@ 0x52
 801651c:	8812      	ldrh	r2, [r2, #0]
 801651e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	2284      	movs	r2, #132	@ 0x84
 8016524:	2100      	movs	r1, #0
 8016526:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2221      	movs	r2, #33	@ 0x21
 801652c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016532:	2b00      	cmp	r3, #0
 8016534:	d027      	beq.n	8016586 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801653a:	4a25      	ldr	r2, [pc, #148]	@ (80165d0 <HAL_UART_Transmit_DMA+0x114>)
 801653c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016542:	4a24      	ldr	r2, [pc, #144]	@ (80165d4 <HAL_UART_Transmit_DMA+0x118>)
 8016544:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801654a:	4a23      	ldr	r2, [pc, #140]	@ (80165d8 <HAL_UART_Transmit_DMA+0x11c>)
 801654c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016552:	2200      	movs	r2, #0
 8016554:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801655e:	0019      	movs	r1, r3
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	3328      	adds	r3, #40	@ 0x28
 8016566:	001a      	movs	r2, r3
 8016568:	1dbb      	adds	r3, r7, #6
 801656a:	881b      	ldrh	r3, [r3, #0]
 801656c:	f7f8 fa0c 	bl	800e988 <HAL_DMA_Start_IT>
 8016570:	1e03      	subs	r3, r0, #0
 8016572:	d008      	beq.n	8016586 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2284      	movs	r2, #132	@ 0x84
 8016578:	2110      	movs	r1, #16
 801657a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2220      	movs	r2, #32
 8016580:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8016582:	2301      	movs	r3, #1
 8016584:	e01f      	b.n	80165c6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2240      	movs	r2, #64	@ 0x40
 801658c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801658e:	f3ef 8310 	mrs	r3, PRIMASK
 8016592:	613b      	str	r3, [r7, #16]
  return(result);
 8016594:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016596:	61fb      	str	r3, [r7, #28]
 8016598:	2301      	movs	r3, #1
 801659a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	f383 8810 	msr	PRIMASK, r3
}
 80165a2:	46c0      	nop			@ (mov r8, r8)
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	689a      	ldr	r2, [r3, #8]
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	2180      	movs	r1, #128	@ 0x80
 80165b0:	430a      	orrs	r2, r1
 80165b2:	609a      	str	r2, [r3, #8]
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	f383 8810 	msr	PRIMASK, r3
}
 80165be:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80165c0:	2300      	movs	r3, #0
 80165c2:	e000      	b.n	80165c6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80165c4:	2302      	movs	r3, #2
  }
}
 80165c6:	0018      	movs	r0, r3
 80165c8:	46bd      	mov	sp, r7
 80165ca:	b008      	add	sp, #32
 80165cc:	bd80      	pop	{r7, pc}
 80165ce:	46c0      	nop			@ (mov r8, r8)
 80165d0:	08017a1d 	.word	0x08017a1d
 80165d4:	08017ab9 	.word	0x08017ab9
 80165d8:	08017c59 	.word	0x08017c59

080165dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b088      	sub	sp, #32
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	60f8      	str	r0, [r7, #12]
 80165e4:	60b9      	str	r1, [r7, #8]
 80165e6:	1dbb      	adds	r3, r7, #6
 80165e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2280      	movs	r2, #128	@ 0x80
 80165ee:	589b      	ldr	r3, [r3, r2]
 80165f0:	2b20      	cmp	r3, #32
 80165f2:	d14a      	bne.n	801668a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80165f4:	68bb      	ldr	r3, [r7, #8]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d003      	beq.n	8016602 <HAL_UART_Receive_DMA+0x26>
 80165fa:	1dbb      	adds	r3, r7, #6
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d101      	bne.n	8016606 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016602:	2301      	movs	r3, #1
 8016604:	e042      	b.n	801668c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	689a      	ldr	r2, [r3, #8]
 801660a:	2380      	movs	r3, #128	@ 0x80
 801660c:	015b      	lsls	r3, r3, #5
 801660e:	429a      	cmp	r2, r3
 8016610:	d109      	bne.n	8016626 <HAL_UART_Receive_DMA+0x4a>
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	691b      	ldr	r3, [r3, #16]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d105      	bne.n	8016626 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	2201      	movs	r2, #1
 801661e:	4013      	ands	r3, r2
 8016620:	d001      	beq.n	8016626 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016622:	2301      	movs	r3, #1
 8016624:	e032      	b.n	801668c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	2200      	movs	r2, #0
 801662a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4a18      	ldr	r2, [pc, #96]	@ (8016694 <HAL_UART_Receive_DMA+0xb8>)
 8016632:	4293      	cmp	r3, r2
 8016634:	d020      	beq.n	8016678 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	685a      	ldr	r2, [r3, #4]
 801663c:	2380      	movs	r3, #128	@ 0x80
 801663e:	041b      	lsls	r3, r3, #16
 8016640:	4013      	ands	r3, r2
 8016642:	d019      	beq.n	8016678 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016644:	f3ef 8310 	mrs	r3, PRIMASK
 8016648:	613b      	str	r3, [r7, #16]
  return(result);
 801664a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801664c:	61fb      	str	r3, [r7, #28]
 801664e:	2301      	movs	r3, #1
 8016650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	f383 8810 	msr	PRIMASK, r3
}
 8016658:	46c0      	nop			@ (mov r8, r8)
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	681a      	ldr	r2, [r3, #0]
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	2180      	movs	r1, #128	@ 0x80
 8016666:	04c9      	lsls	r1, r1, #19
 8016668:	430a      	orrs	r2, r1
 801666a:	601a      	str	r2, [r3, #0]
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	f383 8810 	msr	PRIMASK, r3
}
 8016676:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016678:	1dbb      	adds	r3, r7, #6
 801667a:	881a      	ldrh	r2, [r3, #0]
 801667c:	68b9      	ldr	r1, [r7, #8]
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	0018      	movs	r0, r3
 8016682:	f001 f8a3 	bl	80177cc <UART_Start_Receive_DMA>
 8016686:	0003      	movs	r3, r0
 8016688:	e000      	b.n	801668c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801668a:	2302      	movs	r3, #2
  }
}
 801668c:	0018      	movs	r0, r3
 801668e:	46bd      	mov	sp, r7
 8016690:	b008      	add	sp, #32
 8016692:	bd80      	pop	{r7, pc}
 8016694:	40004800 	.word	0x40004800

08016698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016698:	b590      	push	{r4, r7, lr}
 801669a:	b0ab      	sub	sp, #172	@ 0xac
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	69db      	ldr	r3, [r3, #28]
 80166a6:	22a4      	movs	r2, #164	@ 0xa4
 80166a8:	18b9      	adds	r1, r7, r2
 80166aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	20a0      	movs	r0, #160	@ 0xa0
 80166b4:	1839      	adds	r1, r7, r0
 80166b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	689b      	ldr	r3, [r3, #8]
 80166be:	219c      	movs	r1, #156	@ 0x9c
 80166c0:	1879      	adds	r1, r7, r1
 80166c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80166c4:	0011      	movs	r1, r2
 80166c6:	18bb      	adds	r3, r7, r2
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	4a9c      	ldr	r2, [pc, #624]	@ (801693c <HAL_UART_IRQHandler+0x2a4>)
 80166cc:	4013      	ands	r3, r2
 80166ce:	2298      	movs	r2, #152	@ 0x98
 80166d0:	18bc      	adds	r4, r7, r2
 80166d2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80166d4:	18bb      	adds	r3, r7, r2
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d114      	bne.n	8016706 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80166dc:	187b      	adds	r3, r7, r1
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2220      	movs	r2, #32
 80166e2:	4013      	ands	r3, r2
 80166e4:	d00f      	beq.n	8016706 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80166e6:	183b      	adds	r3, r7, r0
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	2220      	movs	r2, #32
 80166ec:	4013      	ands	r3, r2
 80166ee:	d00a      	beq.n	8016706 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d100      	bne.n	80166fa <HAL_UART_IRQHandler+0x62>
 80166f8:	e2aa      	b.n	8016c50 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80166fe:	687a      	ldr	r2, [r7, #4]
 8016700:	0010      	movs	r0, r2
 8016702:	4798      	blx	r3
      }
      return;
 8016704:	e2a4      	b.n	8016c50 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016706:	2398      	movs	r3, #152	@ 0x98
 8016708:	18fb      	adds	r3, r7, r3
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d100      	bne.n	8016712 <HAL_UART_IRQHandler+0x7a>
 8016710:	e11a      	b.n	8016948 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016712:	239c      	movs	r3, #156	@ 0x9c
 8016714:	18fb      	adds	r3, r7, r3
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	2201      	movs	r2, #1
 801671a:	4013      	ands	r3, r2
 801671c:	d106      	bne.n	801672c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801671e:	23a0      	movs	r3, #160	@ 0xa0
 8016720:	18fb      	adds	r3, r7, r3
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	4a86      	ldr	r2, [pc, #536]	@ (8016940 <HAL_UART_IRQHandler+0x2a8>)
 8016726:	4013      	ands	r3, r2
 8016728:	d100      	bne.n	801672c <HAL_UART_IRQHandler+0x94>
 801672a:	e10d      	b.n	8016948 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801672c:	23a4      	movs	r3, #164	@ 0xa4
 801672e:	18fb      	adds	r3, r7, r3
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	2201      	movs	r2, #1
 8016734:	4013      	ands	r3, r2
 8016736:	d012      	beq.n	801675e <HAL_UART_IRQHandler+0xc6>
 8016738:	23a0      	movs	r3, #160	@ 0xa0
 801673a:	18fb      	adds	r3, r7, r3
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	2380      	movs	r3, #128	@ 0x80
 8016740:	005b      	lsls	r3, r3, #1
 8016742:	4013      	ands	r3, r2
 8016744:	d00b      	beq.n	801675e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	2201      	movs	r2, #1
 801674c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	2284      	movs	r2, #132	@ 0x84
 8016752:	589b      	ldr	r3, [r3, r2]
 8016754:	2201      	movs	r2, #1
 8016756:	431a      	orrs	r2, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2184      	movs	r1, #132	@ 0x84
 801675c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801675e:	23a4      	movs	r3, #164	@ 0xa4
 8016760:	18fb      	adds	r3, r7, r3
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	2202      	movs	r2, #2
 8016766:	4013      	ands	r3, r2
 8016768:	d011      	beq.n	801678e <HAL_UART_IRQHandler+0xf6>
 801676a:	239c      	movs	r3, #156	@ 0x9c
 801676c:	18fb      	adds	r3, r7, r3
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	2201      	movs	r2, #1
 8016772:	4013      	ands	r3, r2
 8016774:	d00b      	beq.n	801678e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	2202      	movs	r2, #2
 801677c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	2284      	movs	r2, #132	@ 0x84
 8016782:	589b      	ldr	r3, [r3, r2]
 8016784:	2204      	movs	r2, #4
 8016786:	431a      	orrs	r2, r3
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2184      	movs	r1, #132	@ 0x84
 801678c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801678e:	23a4      	movs	r3, #164	@ 0xa4
 8016790:	18fb      	adds	r3, r7, r3
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	2204      	movs	r2, #4
 8016796:	4013      	ands	r3, r2
 8016798:	d011      	beq.n	80167be <HAL_UART_IRQHandler+0x126>
 801679a:	239c      	movs	r3, #156	@ 0x9c
 801679c:	18fb      	adds	r3, r7, r3
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	2201      	movs	r2, #1
 80167a2:	4013      	ands	r3, r2
 80167a4:	d00b      	beq.n	80167be <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	2204      	movs	r2, #4
 80167ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	2284      	movs	r2, #132	@ 0x84
 80167b2:	589b      	ldr	r3, [r3, r2]
 80167b4:	2202      	movs	r2, #2
 80167b6:	431a      	orrs	r2, r3
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	2184      	movs	r1, #132	@ 0x84
 80167bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80167be:	23a4      	movs	r3, #164	@ 0xa4
 80167c0:	18fb      	adds	r3, r7, r3
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	2208      	movs	r2, #8
 80167c6:	4013      	ands	r3, r2
 80167c8:	d017      	beq.n	80167fa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80167ca:	23a0      	movs	r3, #160	@ 0xa0
 80167cc:	18fb      	adds	r3, r7, r3
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	2220      	movs	r2, #32
 80167d2:	4013      	ands	r3, r2
 80167d4:	d105      	bne.n	80167e2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80167d6:	239c      	movs	r3, #156	@ 0x9c
 80167d8:	18fb      	adds	r3, r7, r3
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	2201      	movs	r2, #1
 80167de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80167e0:	d00b      	beq.n	80167fa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2208      	movs	r2, #8
 80167e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2284      	movs	r2, #132	@ 0x84
 80167ee:	589b      	ldr	r3, [r3, r2]
 80167f0:	2208      	movs	r2, #8
 80167f2:	431a      	orrs	r2, r3
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	2184      	movs	r1, #132	@ 0x84
 80167f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80167fa:	23a4      	movs	r3, #164	@ 0xa4
 80167fc:	18fb      	adds	r3, r7, r3
 80167fe:	681a      	ldr	r2, [r3, #0]
 8016800:	2380      	movs	r3, #128	@ 0x80
 8016802:	011b      	lsls	r3, r3, #4
 8016804:	4013      	ands	r3, r2
 8016806:	d013      	beq.n	8016830 <HAL_UART_IRQHandler+0x198>
 8016808:	23a0      	movs	r3, #160	@ 0xa0
 801680a:	18fb      	adds	r3, r7, r3
 801680c:	681a      	ldr	r2, [r3, #0]
 801680e:	2380      	movs	r3, #128	@ 0x80
 8016810:	04db      	lsls	r3, r3, #19
 8016812:	4013      	ands	r3, r2
 8016814:	d00c      	beq.n	8016830 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	2280      	movs	r2, #128	@ 0x80
 801681c:	0112      	lsls	r2, r2, #4
 801681e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2284      	movs	r2, #132	@ 0x84
 8016824:	589b      	ldr	r3, [r3, r2]
 8016826:	2220      	movs	r2, #32
 8016828:	431a      	orrs	r2, r3
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2184      	movs	r1, #132	@ 0x84
 801682e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2284      	movs	r2, #132	@ 0x84
 8016834:	589b      	ldr	r3, [r3, r2]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d100      	bne.n	801683c <HAL_UART_IRQHandler+0x1a4>
 801683a:	e20b      	b.n	8016c54 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801683c:	23a4      	movs	r3, #164	@ 0xa4
 801683e:	18fb      	adds	r3, r7, r3
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2220      	movs	r2, #32
 8016844:	4013      	ands	r3, r2
 8016846:	d00e      	beq.n	8016866 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016848:	23a0      	movs	r3, #160	@ 0xa0
 801684a:	18fb      	adds	r3, r7, r3
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	2220      	movs	r2, #32
 8016850:	4013      	ands	r3, r2
 8016852:	d008      	beq.n	8016866 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016858:	2b00      	cmp	r3, #0
 801685a:	d004      	beq.n	8016866 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016860:	687a      	ldr	r2, [r7, #4]
 8016862:	0010      	movs	r0, r2
 8016864:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2284      	movs	r2, #132	@ 0x84
 801686a:	589b      	ldr	r3, [r3, r2]
 801686c:	2194      	movs	r1, #148	@ 0x94
 801686e:	187a      	adds	r2, r7, r1
 8016870:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	689b      	ldr	r3, [r3, #8]
 8016878:	2240      	movs	r2, #64	@ 0x40
 801687a:	4013      	ands	r3, r2
 801687c:	2b40      	cmp	r3, #64	@ 0x40
 801687e:	d004      	beq.n	801688a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016880:	187b      	adds	r3, r7, r1
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	2228      	movs	r2, #40	@ 0x28
 8016886:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016888:	d04b      	beq.n	8016922 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	0018      	movs	r0, r3
 801688e:	f001 f861 	bl	8017954 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	689b      	ldr	r3, [r3, #8]
 8016898:	2240      	movs	r2, #64	@ 0x40
 801689a:	4013      	ands	r3, r2
 801689c:	2b40      	cmp	r3, #64	@ 0x40
 801689e:	d139      	bne.n	8016914 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168a0:	f3ef 8310 	mrs	r3, PRIMASK
 80168a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80168a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80168a8:	2090      	movs	r0, #144	@ 0x90
 80168aa:	183a      	adds	r2, r7, r0
 80168ac:	6013      	str	r3, [r2, #0]
 80168ae:	2301      	movs	r3, #1
 80168b0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80168b4:	f383 8810 	msr	PRIMASK, r3
}
 80168b8:	46c0      	nop			@ (mov r8, r8)
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	689a      	ldr	r2, [r3, #8]
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	2140      	movs	r1, #64	@ 0x40
 80168c6:	438a      	bics	r2, r1
 80168c8:	609a      	str	r2, [r3, #8]
 80168ca:	183b      	adds	r3, r7, r0
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80168d2:	f383 8810 	msr	PRIMASK, r3
}
 80168d6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d012      	beq.n	8016906 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80168e4:	4a17      	ldr	r2, [pc, #92]	@ (8016944 <HAL_UART_IRQHandler+0x2ac>)
 80168e6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80168ec:	0018      	movs	r0, r3
 80168ee:	f7f8 f8f1 	bl	800ead4 <HAL_DMA_Abort_IT>
 80168f2:	1e03      	subs	r3, r0, #0
 80168f4:	d020      	beq.n	8016938 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80168fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016900:	0018      	movs	r0, r3
 8016902:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016904:	e018      	b.n	8016938 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2298      	movs	r2, #152	@ 0x98
 801690a:	589b      	ldr	r3, [r3, r2]
 801690c:	687a      	ldr	r2, [r7, #4]
 801690e:	0010      	movs	r0, r2
 8016910:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016912:	e011      	b.n	8016938 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	2298      	movs	r2, #152	@ 0x98
 8016918:	589b      	ldr	r3, [r3, r2]
 801691a:	687a      	ldr	r2, [r7, #4]
 801691c:	0010      	movs	r0, r2
 801691e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016920:	e00a      	b.n	8016938 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	2298      	movs	r2, #152	@ 0x98
 8016926:	589b      	ldr	r3, [r3, r2]
 8016928:	687a      	ldr	r2, [r7, #4]
 801692a:	0010      	movs	r0, r2
 801692c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2284      	movs	r2, #132	@ 0x84
 8016932:	2100      	movs	r1, #0
 8016934:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8016936:	e18d      	b.n	8016c54 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016938:	46c0      	nop			@ (mov r8, r8)
    return;
 801693a:	e18b      	b.n	8016c54 <HAL_UART_IRQHandler+0x5bc>
 801693c:	0000080f 	.word	0x0000080f
 8016940:	04000120 	.word	0x04000120
 8016944:	08017ce1 	.word	0x08017ce1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801694c:	2b01      	cmp	r3, #1
 801694e:	d000      	beq.n	8016952 <HAL_UART_IRQHandler+0x2ba>
 8016950:	e13d      	b.n	8016bce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016952:	23a4      	movs	r3, #164	@ 0xa4
 8016954:	18fb      	adds	r3, r7, r3
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2210      	movs	r2, #16
 801695a:	4013      	ands	r3, r2
 801695c:	d100      	bne.n	8016960 <HAL_UART_IRQHandler+0x2c8>
 801695e:	e136      	b.n	8016bce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016960:	23a0      	movs	r3, #160	@ 0xa0
 8016962:	18fb      	adds	r3, r7, r3
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	2210      	movs	r2, #16
 8016968:	4013      	ands	r3, r2
 801696a:	d100      	bne.n	801696e <HAL_UART_IRQHandler+0x2d6>
 801696c:	e12f      	b.n	8016bce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	2210      	movs	r2, #16
 8016974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	689b      	ldr	r3, [r3, #8]
 801697c:	2240      	movs	r2, #64	@ 0x40
 801697e:	4013      	ands	r3, r2
 8016980:	2b40      	cmp	r3, #64	@ 0x40
 8016982:	d000      	beq.n	8016986 <HAL_UART_IRQHandler+0x2ee>
 8016984:	e0a2      	b.n	8016acc <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	685a      	ldr	r2, [r3, #4]
 801698e:	217e      	movs	r1, #126	@ 0x7e
 8016990:	187b      	adds	r3, r7, r1
 8016992:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8016994:	187b      	adds	r3, r7, r1
 8016996:	881b      	ldrh	r3, [r3, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d100      	bne.n	801699e <HAL_UART_IRQHandler+0x306>
 801699c:	e15c      	b.n	8016c58 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2258      	movs	r2, #88	@ 0x58
 80169a2:	5a9b      	ldrh	r3, [r3, r2]
 80169a4:	187a      	adds	r2, r7, r1
 80169a6:	8812      	ldrh	r2, [r2, #0]
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d300      	bcc.n	80169ae <HAL_UART_IRQHandler+0x316>
 80169ac:	e154      	b.n	8016c58 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	187a      	adds	r2, r7, r1
 80169b2:	215a      	movs	r1, #90	@ 0x5a
 80169b4:	8812      	ldrh	r2, [r2, #0]
 80169b6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2220      	movs	r2, #32
 80169c2:	4013      	ands	r3, r2
 80169c4:	d16f      	bne.n	8016aa6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169c6:	f3ef 8310 	mrs	r3, PRIMASK
 80169ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80169cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80169ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80169d0:	2301      	movs	r3, #1
 80169d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80169d6:	f383 8810 	msr	PRIMASK, r3
}
 80169da:	46c0      	nop			@ (mov r8, r8)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	49a0      	ldr	r1, [pc, #640]	@ (8016c68 <HAL_UART_IRQHandler+0x5d0>)
 80169e8:	400a      	ands	r2, r1
 80169ea:	601a      	str	r2, [r3, #0]
 80169ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80169ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169f2:	f383 8810 	msr	PRIMASK, r3
}
 80169f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169f8:	f3ef 8310 	mrs	r3, PRIMASK
 80169fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80169fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016a00:	677b      	str	r3, [r7, #116]	@ 0x74
 8016a02:	2301      	movs	r3, #1
 8016a04:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a08:	f383 8810 	msr	PRIMASK, r3
}
 8016a0c:	46c0      	nop			@ (mov r8, r8)
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	689a      	ldr	r2, [r3, #8]
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	2101      	movs	r1, #1
 8016a1a:	438a      	bics	r2, r1
 8016a1c:	609a      	str	r2, [r3, #8]
 8016a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016a20:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a24:	f383 8810 	msr	PRIMASK, r3
}
 8016a28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8016a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8016a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016a32:	673b      	str	r3, [r7, #112]	@ 0x70
 8016a34:	2301      	movs	r3, #1
 8016a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016a3a:	f383 8810 	msr	PRIMASK, r3
}
 8016a3e:	46c0      	nop			@ (mov r8, r8)
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	689a      	ldr	r2, [r3, #8]
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2140      	movs	r1, #64	@ 0x40
 8016a4c:	438a      	bics	r2, r1
 8016a4e:	609a      	str	r2, [r3, #8]
 8016a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016a52:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016a56:	f383 8810 	msr	PRIMASK, r3
}
 8016a5a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2280      	movs	r2, #128	@ 0x80
 8016a60:	2120      	movs	r1, #32
 8016a62:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2200      	movs	r2, #0
 8016a68:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8016a6e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016a74:	2301      	movs	r3, #1
 8016a76:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a7a:	f383 8810 	msr	PRIMASK, r3
}
 8016a7e:	46c0      	nop			@ (mov r8, r8)
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	681a      	ldr	r2, [r3, #0]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	2110      	movs	r1, #16
 8016a8c:	438a      	bics	r2, r1
 8016a8e:	601a      	str	r2, [r3, #0]
 8016a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016a96:	f383 8810 	msr	PRIMASK, r3
}
 8016a9a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016aa0:	0018      	movs	r0, r3
 8016aa2:	f7f7 ffd7 	bl	800ea54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2202      	movs	r2, #2
 8016aaa:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	22ac      	movs	r2, #172	@ 0xac
 8016ab0:	589b      	ldr	r3, [r3, r2]
 8016ab2:	687a      	ldr	r2, [r7, #4]
 8016ab4:	2158      	movs	r1, #88	@ 0x58
 8016ab6:	5a51      	ldrh	r1, [r2, r1]
 8016ab8:	687a      	ldr	r2, [r7, #4]
 8016aba:	205a      	movs	r0, #90	@ 0x5a
 8016abc:	5a12      	ldrh	r2, [r2, r0]
 8016abe:	b292      	uxth	r2, r2
 8016ac0:	1a8a      	subs	r2, r1, r2
 8016ac2:	b291      	uxth	r1, r2
 8016ac4:	687a      	ldr	r2, [r7, #4]
 8016ac6:	0010      	movs	r0, r2
 8016ac8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016aca:	e0c5      	b.n	8016c58 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2258      	movs	r2, #88	@ 0x58
 8016ad0:	5a99      	ldrh	r1, [r3, r2]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	225a      	movs	r2, #90	@ 0x5a
 8016ad6:	5a9b      	ldrh	r3, [r3, r2]
 8016ad8:	b29a      	uxth	r2, r3
 8016ada:	208e      	movs	r0, #142	@ 0x8e
 8016adc:	183b      	adds	r3, r7, r0
 8016ade:	1a8a      	subs	r2, r1, r2
 8016ae0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	225a      	movs	r2, #90	@ 0x5a
 8016ae6:	5a9b      	ldrh	r3, [r3, r2]
 8016ae8:	b29b      	uxth	r3, r3
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d100      	bne.n	8016af0 <HAL_UART_IRQHandler+0x458>
 8016aee:	e0b5      	b.n	8016c5c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8016af0:	183b      	adds	r3, r7, r0
 8016af2:	881b      	ldrh	r3, [r3, #0]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d100      	bne.n	8016afa <HAL_UART_IRQHandler+0x462>
 8016af8:	e0b0      	b.n	8016c5c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016afa:	f3ef 8310 	mrs	r3, PRIMASK
 8016afe:	60fb      	str	r3, [r7, #12]
  return(result);
 8016b00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016b02:	2488      	movs	r4, #136	@ 0x88
 8016b04:	193a      	adds	r2, r7, r4
 8016b06:	6013      	str	r3, [r2, #0]
 8016b08:	2301      	movs	r3, #1
 8016b0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	f383 8810 	msr	PRIMASK, r3
}
 8016b12:	46c0      	nop			@ (mov r8, r8)
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	4953      	ldr	r1, [pc, #332]	@ (8016c6c <HAL_UART_IRQHandler+0x5d4>)
 8016b20:	400a      	ands	r2, r1
 8016b22:	601a      	str	r2, [r3, #0]
 8016b24:	193b      	adds	r3, r7, r4
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	f383 8810 	msr	PRIMASK, r3
}
 8016b30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b32:	f3ef 8310 	mrs	r3, PRIMASK
 8016b36:	61bb      	str	r3, [r7, #24]
  return(result);
 8016b38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b3a:	2484      	movs	r4, #132	@ 0x84
 8016b3c:	193a      	adds	r2, r7, r4
 8016b3e:	6013      	str	r3, [r2, #0]
 8016b40:	2301      	movs	r3, #1
 8016b42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b44:	69fb      	ldr	r3, [r7, #28]
 8016b46:	f383 8810 	msr	PRIMASK, r3
}
 8016b4a:	46c0      	nop			@ (mov r8, r8)
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	689a      	ldr	r2, [r3, #8]
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	2101      	movs	r1, #1
 8016b58:	438a      	bics	r2, r1
 8016b5a:	609a      	str	r2, [r3, #8]
 8016b5c:	193b      	adds	r3, r7, r4
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b62:	6a3b      	ldr	r3, [r7, #32]
 8016b64:	f383 8810 	msr	PRIMASK, r3
}
 8016b68:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	2280      	movs	r2, #128	@ 0x80
 8016b6e:	2120      	movs	r1, #32
 8016b70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	2200      	movs	r2, #0
 8016b76:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8016b82:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016b86:	2480      	movs	r4, #128	@ 0x80
 8016b88:	193a      	adds	r2, r7, r4
 8016b8a:	6013      	str	r3, [r2, #0]
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b92:	f383 8810 	msr	PRIMASK, r3
}
 8016b96:	46c0      	nop			@ (mov r8, r8)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	681a      	ldr	r2, [r3, #0]
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	2110      	movs	r1, #16
 8016ba4:	438a      	bics	r2, r1
 8016ba6:	601a      	str	r2, [r3, #0]
 8016ba8:	193b      	adds	r3, r7, r4
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bb0:	f383 8810 	msr	PRIMASK, r3
}
 8016bb4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2202      	movs	r2, #2
 8016bba:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	22ac      	movs	r2, #172	@ 0xac
 8016bc0:	589b      	ldr	r3, [r3, r2]
 8016bc2:	183a      	adds	r2, r7, r0
 8016bc4:	8811      	ldrh	r1, [r2, #0]
 8016bc6:	687a      	ldr	r2, [r7, #4]
 8016bc8:	0010      	movs	r0, r2
 8016bca:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016bcc:	e046      	b.n	8016c5c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016bce:	23a4      	movs	r3, #164	@ 0xa4
 8016bd0:	18fb      	adds	r3, r7, r3
 8016bd2:	681a      	ldr	r2, [r3, #0]
 8016bd4:	2380      	movs	r3, #128	@ 0x80
 8016bd6:	035b      	lsls	r3, r3, #13
 8016bd8:	4013      	ands	r3, r2
 8016bda:	d012      	beq.n	8016c02 <HAL_UART_IRQHandler+0x56a>
 8016bdc:	239c      	movs	r3, #156	@ 0x9c
 8016bde:	18fb      	adds	r3, r7, r3
 8016be0:	681a      	ldr	r2, [r3, #0]
 8016be2:	2380      	movs	r3, #128	@ 0x80
 8016be4:	03db      	lsls	r3, r3, #15
 8016be6:	4013      	ands	r3, r2
 8016be8:	d00b      	beq.n	8016c02 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	2280      	movs	r2, #128	@ 0x80
 8016bf0:	0352      	lsls	r2, r2, #13
 8016bf2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	22a8      	movs	r2, #168	@ 0xa8
 8016bf8:	589b      	ldr	r3, [r3, r2]
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	0010      	movs	r0, r2
 8016bfe:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016c00:	e02f      	b.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8016c02:	23a4      	movs	r3, #164	@ 0xa4
 8016c04:	18fb      	adds	r3, r7, r3
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	2280      	movs	r2, #128	@ 0x80
 8016c0a:	4013      	ands	r3, r2
 8016c0c:	d00f      	beq.n	8016c2e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016c0e:	23a0      	movs	r3, #160	@ 0xa0
 8016c10:	18fb      	adds	r3, r7, r3
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	2280      	movs	r2, #128	@ 0x80
 8016c16:	4013      	ands	r3, r2
 8016c18:	d009      	beq.n	8016c2e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d01e      	beq.n	8016c60 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c26:	687a      	ldr	r2, [r7, #4]
 8016c28:	0010      	movs	r0, r2
 8016c2a:	4798      	blx	r3
    }
    return;
 8016c2c:	e018      	b.n	8016c60 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016c2e:	23a4      	movs	r3, #164	@ 0xa4
 8016c30:	18fb      	adds	r3, r7, r3
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2240      	movs	r2, #64	@ 0x40
 8016c36:	4013      	ands	r3, r2
 8016c38:	d013      	beq.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
 8016c3a:	23a0      	movs	r3, #160	@ 0xa0
 8016c3c:	18fb      	adds	r3, r7, r3
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	2240      	movs	r2, #64	@ 0x40
 8016c42:	4013      	ands	r3, r2
 8016c44:	d00d      	beq.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	0018      	movs	r0, r3
 8016c4a:	f001 f862 	bl	8017d12 <UART_EndTransmit_IT>
    return;
 8016c4e:	e008      	b.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016c50:	46c0      	nop			@ (mov r8, r8)
 8016c52:	e006      	b.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016c54:	46c0      	nop			@ (mov r8, r8)
 8016c56:	e004      	b.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016c58:	46c0      	nop			@ (mov r8, r8)
 8016c5a:	e002      	b.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016c5c:	46c0      	nop			@ (mov r8, r8)
 8016c5e:	e000      	b.n	8016c62 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016c60:	46c0      	nop			@ (mov r8, r8)
  }

}
 8016c62:	46bd      	mov	sp, r7
 8016c64:	b02b      	add	sp, #172	@ 0xac
 8016c66:	bd90      	pop	{r4, r7, pc}
 8016c68:	fffffeff 	.word	0xfffffeff
 8016c6c:	fffffedf 	.word	0xfffffedf

08016c70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016c78:	46c0      	nop			@ (mov r8, r8)
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	b002      	add	sp, #8
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8016c88:	46c0      	nop			@ (mov r8, r8)
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	b002      	add	sp, #8
 8016c8e:	bd80      	pop	{r7, pc}

08016c90 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b082      	sub	sp, #8
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8016c98:	46c0      	nop			@ (mov r8, r8)
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	b002      	add	sp, #8
 8016c9e:	bd80      	pop	{r7, pc}

08016ca0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b082      	sub	sp, #8
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016ca8:	46c0      	nop			@ (mov r8, r8)
 8016caa:	46bd      	mov	sp, r7
 8016cac:	b002      	add	sp, #8
 8016cae:	bd80      	pop	{r7, pc}

08016cb0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016cb0:	b580      	push	{r7, lr}
 8016cb2:	b082      	sub	sp, #8
 8016cb4:	af00      	add	r7, sp, #0
 8016cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016cb8:	46c0      	nop			@ (mov r8, r8)
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	b002      	add	sp, #8
 8016cbe:	bd80      	pop	{r7, pc}

08016cc0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016cc8:	46c0      	nop			@ (mov r8, r8)
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	b002      	add	sp, #8
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
 8016cd8:	000a      	movs	r2, r1
 8016cda:	1cbb      	adds	r3, r7, #2
 8016cdc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016cde:	46c0      	nop			@ (mov r8, r8)
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	b002      	add	sp, #8
 8016ce4:	bd80      	pop	{r7, pc}
	...

08016ce8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b082      	sub	sp, #8
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2188      	movs	r1, #136	@ 0x88
 8016cf4:	4a14      	ldr	r2, [pc, #80]	@ (8016d48 <UART_InitCallbacksToDefault+0x60>)
 8016cf6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	218c      	movs	r1, #140	@ 0x8c
 8016cfc:	4a13      	ldr	r2, [pc, #76]	@ (8016d4c <UART_InitCallbacksToDefault+0x64>)
 8016cfe:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2190      	movs	r1, #144	@ 0x90
 8016d04:	4a12      	ldr	r2, [pc, #72]	@ (8016d50 <UART_InitCallbacksToDefault+0x68>)
 8016d06:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2194      	movs	r1, #148	@ 0x94
 8016d0c:	4a11      	ldr	r2, [pc, #68]	@ (8016d54 <UART_InitCallbacksToDefault+0x6c>)
 8016d0e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	2198      	movs	r1, #152	@ 0x98
 8016d14:	4a10      	ldr	r2, [pc, #64]	@ (8016d58 <UART_InitCallbacksToDefault+0x70>)
 8016d16:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	219c      	movs	r1, #156	@ 0x9c
 8016d1c:	4a0f      	ldr	r2, [pc, #60]	@ (8016d5c <UART_InitCallbacksToDefault+0x74>)
 8016d1e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	21a0      	movs	r1, #160	@ 0xa0
 8016d24:	4a0e      	ldr	r2, [pc, #56]	@ (8016d60 <UART_InitCallbacksToDefault+0x78>)
 8016d26:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	21a4      	movs	r1, #164	@ 0xa4
 8016d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8016d64 <UART_InitCallbacksToDefault+0x7c>)
 8016d2e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	21a8      	movs	r1, #168	@ 0xa8
 8016d34:	4a0c      	ldr	r2, [pc, #48]	@ (8016d68 <UART_InitCallbacksToDefault+0x80>)
 8016d36:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	21ac      	movs	r1, #172	@ 0xac
 8016d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8016d6c <UART_InitCallbacksToDefault+0x84>)
 8016d3e:	505a      	str	r2, [r3, r1]

}
 8016d40:	46c0      	nop			@ (mov r8, r8)
 8016d42:	46bd      	mov	sp, r7
 8016d44:	b002      	add	sp, #8
 8016d46:	bd80      	pop	{r7, pc}
 8016d48:	08016c81 	.word	0x08016c81
 8016d4c:	08016c71 	.word	0x08016c71
 8016d50:	08016c91 	.word	0x08016c91
 8016d54:	08007d89 	.word	0x08007d89
 8016d58:	08003afd 	.word	0x08003afd
 8016d5c:	08016ca1 	.word	0x08016ca1
 8016d60:	08016cb1 	.word	0x08016cb1
 8016d64:	08016cc1 	.word	0x08016cc1
 8016d68:	08018105 	.word	0x08018105
 8016d6c:	08016cd1 	.word	0x08016cd1

08016d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016d70:	b5b0      	push	{r4, r5, r7, lr}
 8016d72:	b08e      	sub	sp, #56	@ 0x38
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016d78:	231a      	movs	r3, #26
 8016d7a:	2218      	movs	r2, #24
 8016d7c:	189b      	adds	r3, r3, r2
 8016d7e:	19db      	adds	r3, r3, r7
 8016d80:	2200      	movs	r2, #0
 8016d82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016d84:	69fb      	ldr	r3, [r7, #28]
 8016d86:	689a      	ldr	r2, [r3, #8]
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	691b      	ldr	r3, [r3, #16]
 8016d8c:	431a      	orrs	r2, r3
 8016d8e:	69fb      	ldr	r3, [r7, #28]
 8016d90:	695b      	ldr	r3, [r3, #20]
 8016d92:	431a      	orrs	r2, r3
 8016d94:	69fb      	ldr	r3, [r7, #28]
 8016d96:	69db      	ldr	r3, [r3, #28]
 8016d98:	4313      	orrs	r3, r2
 8016d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016d9c:	69fb      	ldr	r3, [r7, #28]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	4ac3      	ldr	r2, [pc, #780]	@ (80170b0 <UART_SetConfig+0x340>)
 8016da4:	4013      	ands	r3, r2
 8016da6:	0019      	movs	r1, r3
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016dae:	430a      	orrs	r2, r1
 8016db0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	4abe      	ldr	r2, [pc, #760]	@ (80170b4 <UART_SetConfig+0x344>)
 8016dba:	4013      	ands	r3, r2
 8016dbc:	0019      	movs	r1, r3
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	68da      	ldr	r2, [r3, #12]
 8016dc2:	69fb      	ldr	r3, [r7, #28]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	430a      	orrs	r2, r1
 8016dc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016dca:	69fb      	ldr	r3, [r7, #28]
 8016dcc:	699b      	ldr	r3, [r3, #24]
 8016dce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016dd0:	69fb      	ldr	r3, [r7, #28]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	4ab8      	ldr	r2, [pc, #736]	@ (80170b8 <UART_SetConfig+0x348>)
 8016dd6:	4293      	cmp	r3, r2
 8016dd8:	d004      	beq.n	8016de4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016dda:	69fb      	ldr	r3, [r7, #28]
 8016ddc:	6a1b      	ldr	r3, [r3, #32]
 8016dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016de0:	4313      	orrs	r3, r2
 8016de2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016de4:	69fb      	ldr	r3, [r7, #28]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	689b      	ldr	r3, [r3, #8]
 8016dea:	4ab4      	ldr	r2, [pc, #720]	@ (80170bc <UART_SetConfig+0x34c>)
 8016dec:	4013      	ands	r3, r2
 8016dee:	0019      	movs	r1, r3
 8016df0:	69fb      	ldr	r3, [r7, #28]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016df6:	430a      	orrs	r2, r1
 8016df8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016dfa:	69fb      	ldr	r3, [r7, #28]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	4ab0      	ldr	r2, [pc, #704]	@ (80170c0 <UART_SetConfig+0x350>)
 8016e00:	4293      	cmp	r3, r2
 8016e02:	d131      	bne.n	8016e68 <UART_SetConfig+0xf8>
 8016e04:	4baf      	ldr	r3, [pc, #700]	@ (80170c4 <UART_SetConfig+0x354>)
 8016e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016e08:	2203      	movs	r2, #3
 8016e0a:	4013      	ands	r3, r2
 8016e0c:	2b03      	cmp	r3, #3
 8016e0e:	d01d      	beq.n	8016e4c <UART_SetConfig+0xdc>
 8016e10:	d823      	bhi.n	8016e5a <UART_SetConfig+0xea>
 8016e12:	2b02      	cmp	r3, #2
 8016e14:	d00c      	beq.n	8016e30 <UART_SetConfig+0xc0>
 8016e16:	d820      	bhi.n	8016e5a <UART_SetConfig+0xea>
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d002      	beq.n	8016e22 <UART_SetConfig+0xb2>
 8016e1c:	2b01      	cmp	r3, #1
 8016e1e:	d00e      	beq.n	8016e3e <UART_SetConfig+0xce>
 8016e20:	e01b      	b.n	8016e5a <UART_SetConfig+0xea>
 8016e22:	231b      	movs	r3, #27
 8016e24:	2218      	movs	r2, #24
 8016e26:	189b      	adds	r3, r3, r2
 8016e28:	19db      	adds	r3, r3, r7
 8016e2a:	2201      	movs	r2, #1
 8016e2c:	701a      	strb	r2, [r3, #0]
 8016e2e:	e0b4      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016e30:	231b      	movs	r3, #27
 8016e32:	2218      	movs	r2, #24
 8016e34:	189b      	adds	r3, r3, r2
 8016e36:	19db      	adds	r3, r3, r7
 8016e38:	2202      	movs	r2, #2
 8016e3a:	701a      	strb	r2, [r3, #0]
 8016e3c:	e0ad      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016e3e:	231b      	movs	r3, #27
 8016e40:	2218      	movs	r2, #24
 8016e42:	189b      	adds	r3, r3, r2
 8016e44:	19db      	adds	r3, r3, r7
 8016e46:	2204      	movs	r2, #4
 8016e48:	701a      	strb	r2, [r3, #0]
 8016e4a:	e0a6      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016e4c:	231b      	movs	r3, #27
 8016e4e:	2218      	movs	r2, #24
 8016e50:	189b      	adds	r3, r3, r2
 8016e52:	19db      	adds	r3, r3, r7
 8016e54:	2208      	movs	r2, #8
 8016e56:	701a      	strb	r2, [r3, #0]
 8016e58:	e09f      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016e5a:	231b      	movs	r3, #27
 8016e5c:	2218      	movs	r2, #24
 8016e5e:	189b      	adds	r3, r3, r2
 8016e60:	19db      	adds	r3, r3, r7
 8016e62:	2210      	movs	r2, #16
 8016e64:	701a      	strb	r2, [r3, #0]
 8016e66:	e098      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016e68:	69fb      	ldr	r3, [r7, #28]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	4a96      	ldr	r2, [pc, #600]	@ (80170c8 <UART_SetConfig+0x358>)
 8016e6e:	4293      	cmp	r3, r2
 8016e70:	d131      	bne.n	8016ed6 <UART_SetConfig+0x166>
 8016e72:	4b94      	ldr	r3, [pc, #592]	@ (80170c4 <UART_SetConfig+0x354>)
 8016e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016e76:	220c      	movs	r2, #12
 8016e78:	4013      	ands	r3, r2
 8016e7a:	2b0c      	cmp	r3, #12
 8016e7c:	d01d      	beq.n	8016eba <UART_SetConfig+0x14a>
 8016e7e:	d823      	bhi.n	8016ec8 <UART_SetConfig+0x158>
 8016e80:	2b08      	cmp	r3, #8
 8016e82:	d00c      	beq.n	8016e9e <UART_SetConfig+0x12e>
 8016e84:	d820      	bhi.n	8016ec8 <UART_SetConfig+0x158>
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d002      	beq.n	8016e90 <UART_SetConfig+0x120>
 8016e8a:	2b04      	cmp	r3, #4
 8016e8c:	d00e      	beq.n	8016eac <UART_SetConfig+0x13c>
 8016e8e:	e01b      	b.n	8016ec8 <UART_SetConfig+0x158>
 8016e90:	231b      	movs	r3, #27
 8016e92:	2218      	movs	r2, #24
 8016e94:	189b      	adds	r3, r3, r2
 8016e96:	19db      	adds	r3, r3, r7
 8016e98:	2200      	movs	r2, #0
 8016e9a:	701a      	strb	r2, [r3, #0]
 8016e9c:	e07d      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016e9e:	231b      	movs	r3, #27
 8016ea0:	2218      	movs	r2, #24
 8016ea2:	189b      	adds	r3, r3, r2
 8016ea4:	19db      	adds	r3, r3, r7
 8016ea6:	2202      	movs	r2, #2
 8016ea8:	701a      	strb	r2, [r3, #0]
 8016eaa:	e076      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016eac:	231b      	movs	r3, #27
 8016eae:	2218      	movs	r2, #24
 8016eb0:	189b      	adds	r3, r3, r2
 8016eb2:	19db      	adds	r3, r3, r7
 8016eb4:	2204      	movs	r2, #4
 8016eb6:	701a      	strb	r2, [r3, #0]
 8016eb8:	e06f      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016eba:	231b      	movs	r3, #27
 8016ebc:	2218      	movs	r2, #24
 8016ebe:	189b      	adds	r3, r3, r2
 8016ec0:	19db      	adds	r3, r3, r7
 8016ec2:	2208      	movs	r2, #8
 8016ec4:	701a      	strb	r2, [r3, #0]
 8016ec6:	e068      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016ec8:	231b      	movs	r3, #27
 8016eca:	2218      	movs	r2, #24
 8016ecc:	189b      	adds	r3, r3, r2
 8016ece:	19db      	adds	r3, r3, r7
 8016ed0:	2210      	movs	r2, #16
 8016ed2:	701a      	strb	r2, [r3, #0]
 8016ed4:	e061      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016ed6:	69fb      	ldr	r3, [r7, #28]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	4a7c      	ldr	r2, [pc, #496]	@ (80170cc <UART_SetConfig+0x35c>)
 8016edc:	4293      	cmp	r3, r2
 8016ede:	d106      	bne.n	8016eee <UART_SetConfig+0x17e>
 8016ee0:	231b      	movs	r3, #27
 8016ee2:	2218      	movs	r2, #24
 8016ee4:	189b      	adds	r3, r3, r2
 8016ee6:	19db      	adds	r3, r3, r7
 8016ee8:	2200      	movs	r2, #0
 8016eea:	701a      	strb	r2, [r3, #0]
 8016eec:	e055      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016eee:	69fb      	ldr	r3, [r7, #28]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	4a77      	ldr	r2, [pc, #476]	@ (80170d0 <UART_SetConfig+0x360>)
 8016ef4:	4293      	cmp	r3, r2
 8016ef6:	d106      	bne.n	8016f06 <UART_SetConfig+0x196>
 8016ef8:	231b      	movs	r3, #27
 8016efa:	2218      	movs	r2, #24
 8016efc:	189b      	adds	r3, r3, r2
 8016efe:	19db      	adds	r3, r3, r7
 8016f00:	2200      	movs	r2, #0
 8016f02:	701a      	strb	r2, [r3, #0]
 8016f04:	e049      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016f06:	69fb      	ldr	r3, [r7, #28]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80170b8 <UART_SetConfig+0x348>)
 8016f0c:	4293      	cmp	r3, r2
 8016f0e:	d13e      	bne.n	8016f8e <UART_SetConfig+0x21e>
 8016f10:	4b6c      	ldr	r3, [pc, #432]	@ (80170c4 <UART_SetConfig+0x354>)
 8016f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016f14:	23c0      	movs	r3, #192	@ 0xc0
 8016f16:	011b      	lsls	r3, r3, #4
 8016f18:	4013      	ands	r3, r2
 8016f1a:	22c0      	movs	r2, #192	@ 0xc0
 8016f1c:	0112      	lsls	r2, r2, #4
 8016f1e:	4293      	cmp	r3, r2
 8016f20:	d027      	beq.n	8016f72 <UART_SetConfig+0x202>
 8016f22:	22c0      	movs	r2, #192	@ 0xc0
 8016f24:	0112      	lsls	r2, r2, #4
 8016f26:	4293      	cmp	r3, r2
 8016f28:	d82a      	bhi.n	8016f80 <UART_SetConfig+0x210>
 8016f2a:	2280      	movs	r2, #128	@ 0x80
 8016f2c:	0112      	lsls	r2, r2, #4
 8016f2e:	4293      	cmp	r3, r2
 8016f30:	d011      	beq.n	8016f56 <UART_SetConfig+0x1e6>
 8016f32:	2280      	movs	r2, #128	@ 0x80
 8016f34:	0112      	lsls	r2, r2, #4
 8016f36:	4293      	cmp	r3, r2
 8016f38:	d822      	bhi.n	8016f80 <UART_SetConfig+0x210>
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d004      	beq.n	8016f48 <UART_SetConfig+0x1d8>
 8016f3e:	2280      	movs	r2, #128	@ 0x80
 8016f40:	00d2      	lsls	r2, r2, #3
 8016f42:	4293      	cmp	r3, r2
 8016f44:	d00e      	beq.n	8016f64 <UART_SetConfig+0x1f4>
 8016f46:	e01b      	b.n	8016f80 <UART_SetConfig+0x210>
 8016f48:	231b      	movs	r3, #27
 8016f4a:	2218      	movs	r2, #24
 8016f4c:	189b      	adds	r3, r3, r2
 8016f4e:	19db      	adds	r3, r3, r7
 8016f50:	2200      	movs	r2, #0
 8016f52:	701a      	strb	r2, [r3, #0]
 8016f54:	e021      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016f56:	231b      	movs	r3, #27
 8016f58:	2218      	movs	r2, #24
 8016f5a:	189b      	adds	r3, r3, r2
 8016f5c:	19db      	adds	r3, r3, r7
 8016f5e:	2202      	movs	r2, #2
 8016f60:	701a      	strb	r2, [r3, #0]
 8016f62:	e01a      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016f64:	231b      	movs	r3, #27
 8016f66:	2218      	movs	r2, #24
 8016f68:	189b      	adds	r3, r3, r2
 8016f6a:	19db      	adds	r3, r3, r7
 8016f6c:	2204      	movs	r2, #4
 8016f6e:	701a      	strb	r2, [r3, #0]
 8016f70:	e013      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016f72:	231b      	movs	r3, #27
 8016f74:	2218      	movs	r2, #24
 8016f76:	189b      	adds	r3, r3, r2
 8016f78:	19db      	adds	r3, r3, r7
 8016f7a:	2208      	movs	r2, #8
 8016f7c:	701a      	strb	r2, [r3, #0]
 8016f7e:	e00c      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016f80:	231b      	movs	r3, #27
 8016f82:	2218      	movs	r2, #24
 8016f84:	189b      	adds	r3, r3, r2
 8016f86:	19db      	adds	r3, r3, r7
 8016f88:	2210      	movs	r2, #16
 8016f8a:	701a      	strb	r2, [r3, #0]
 8016f8c:	e005      	b.n	8016f9a <UART_SetConfig+0x22a>
 8016f8e:	231b      	movs	r3, #27
 8016f90:	2218      	movs	r2, #24
 8016f92:	189b      	adds	r3, r3, r2
 8016f94:	19db      	adds	r3, r3, r7
 8016f96:	2210      	movs	r2, #16
 8016f98:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016f9a:	69fb      	ldr	r3, [r7, #28]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	4a46      	ldr	r2, [pc, #280]	@ (80170b8 <UART_SetConfig+0x348>)
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	d000      	beq.n	8016fa6 <UART_SetConfig+0x236>
 8016fa4:	e09a      	b.n	80170dc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016fa6:	231b      	movs	r3, #27
 8016fa8:	2218      	movs	r2, #24
 8016faa:	189b      	adds	r3, r3, r2
 8016fac:	19db      	adds	r3, r3, r7
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	2b08      	cmp	r3, #8
 8016fb2:	d01d      	beq.n	8016ff0 <UART_SetConfig+0x280>
 8016fb4:	dc20      	bgt.n	8016ff8 <UART_SetConfig+0x288>
 8016fb6:	2b04      	cmp	r3, #4
 8016fb8:	d015      	beq.n	8016fe6 <UART_SetConfig+0x276>
 8016fba:	dc1d      	bgt.n	8016ff8 <UART_SetConfig+0x288>
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d002      	beq.n	8016fc6 <UART_SetConfig+0x256>
 8016fc0:	2b02      	cmp	r3, #2
 8016fc2:	d005      	beq.n	8016fd0 <UART_SetConfig+0x260>
 8016fc4:	e018      	b.n	8016ff8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016fc6:	f7fd fe79 	bl	8014cbc <HAL_RCC_GetPCLK1Freq>
 8016fca:	0003      	movs	r3, r0
 8016fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016fce:	e01c      	b.n	801700a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80170c4 <UART_SetConfig+0x354>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	2210      	movs	r2, #16
 8016fd6:	4013      	ands	r3, r2
 8016fd8:	d002      	beq.n	8016fe0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016fda:	4b3e      	ldr	r3, [pc, #248]	@ (80170d4 <UART_SetConfig+0x364>)
 8016fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016fde:	e014      	b.n	801700a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8016fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80170d8 <UART_SetConfig+0x368>)
 8016fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016fe4:	e011      	b.n	801700a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016fe6:	f7fd fdb9 	bl	8014b5c <HAL_RCC_GetSysClockFreq>
 8016fea:	0003      	movs	r3, r0
 8016fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016fee:	e00c      	b.n	801700a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016ff0:	2380      	movs	r3, #128	@ 0x80
 8016ff2:	021b      	lsls	r3, r3, #8
 8016ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016ff6:	e008      	b.n	801700a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016ffc:	231a      	movs	r3, #26
 8016ffe:	2218      	movs	r2, #24
 8017000:	189b      	adds	r3, r3, r2
 8017002:	19db      	adds	r3, r3, r7
 8017004:	2201      	movs	r2, #1
 8017006:	701a      	strb	r2, [r3, #0]
        break;
 8017008:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801700a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801700c:	2b00      	cmp	r3, #0
 801700e:	d100      	bne.n	8017012 <UART_SetConfig+0x2a2>
 8017010:	e133      	b.n	801727a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017012:	69fb      	ldr	r3, [r7, #28]
 8017014:	685a      	ldr	r2, [r3, #4]
 8017016:	0013      	movs	r3, r2
 8017018:	005b      	lsls	r3, r3, #1
 801701a:	189b      	adds	r3, r3, r2
 801701c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801701e:	429a      	cmp	r2, r3
 8017020:	d305      	bcc.n	801702e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017022:	69fb      	ldr	r3, [r7, #28]
 8017024:	685b      	ldr	r3, [r3, #4]
 8017026:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801702a:	429a      	cmp	r2, r3
 801702c:	d906      	bls.n	801703c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801702e:	231a      	movs	r3, #26
 8017030:	2218      	movs	r2, #24
 8017032:	189b      	adds	r3, r3, r2
 8017034:	19db      	adds	r3, r3, r7
 8017036:	2201      	movs	r2, #1
 8017038:	701a      	strb	r2, [r3, #0]
 801703a:	e11e      	b.n	801727a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801703c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801703e:	613b      	str	r3, [r7, #16]
 8017040:	2300      	movs	r3, #0
 8017042:	617b      	str	r3, [r7, #20]
 8017044:	6939      	ldr	r1, [r7, #16]
 8017046:	697a      	ldr	r2, [r7, #20]
 8017048:	000b      	movs	r3, r1
 801704a:	0e1b      	lsrs	r3, r3, #24
 801704c:	0010      	movs	r0, r2
 801704e:	0205      	lsls	r5, r0, #8
 8017050:	431d      	orrs	r5, r3
 8017052:	000b      	movs	r3, r1
 8017054:	021c      	lsls	r4, r3, #8
 8017056:	69fb      	ldr	r3, [r7, #28]
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	085b      	lsrs	r3, r3, #1
 801705c:	60bb      	str	r3, [r7, #8]
 801705e:	2300      	movs	r3, #0
 8017060:	60fb      	str	r3, [r7, #12]
 8017062:	68b8      	ldr	r0, [r7, #8]
 8017064:	68f9      	ldr	r1, [r7, #12]
 8017066:	1900      	adds	r0, r0, r4
 8017068:	4169      	adcs	r1, r5
 801706a:	69fb      	ldr	r3, [r7, #28]
 801706c:	685b      	ldr	r3, [r3, #4]
 801706e:	603b      	str	r3, [r7, #0]
 8017070:	2300      	movs	r3, #0
 8017072:	607b      	str	r3, [r7, #4]
 8017074:	683a      	ldr	r2, [r7, #0]
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f7e9 fa82 	bl	8000580 <__aeabi_uldivmod>
 801707c:	0002      	movs	r2, r0
 801707e:	000b      	movs	r3, r1
 8017080:	0013      	movs	r3, r2
 8017082:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017086:	23c0      	movs	r3, #192	@ 0xc0
 8017088:	009b      	lsls	r3, r3, #2
 801708a:	429a      	cmp	r2, r3
 801708c:	d309      	bcc.n	80170a2 <UART_SetConfig+0x332>
 801708e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017090:	2380      	movs	r3, #128	@ 0x80
 8017092:	035b      	lsls	r3, r3, #13
 8017094:	429a      	cmp	r2, r3
 8017096:	d204      	bcs.n	80170a2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017098:	69fb      	ldr	r3, [r7, #28]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801709e:	60da      	str	r2, [r3, #12]
 80170a0:	e0eb      	b.n	801727a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80170a2:	231a      	movs	r3, #26
 80170a4:	2218      	movs	r2, #24
 80170a6:	189b      	adds	r3, r3, r2
 80170a8:	19db      	adds	r3, r3, r7
 80170aa:	2201      	movs	r2, #1
 80170ac:	701a      	strb	r2, [r3, #0]
 80170ae:	e0e4      	b.n	801727a <UART_SetConfig+0x50a>
 80170b0:	efff69f3 	.word	0xefff69f3
 80170b4:	ffffcfff 	.word	0xffffcfff
 80170b8:	40004800 	.word	0x40004800
 80170bc:	fffff4ff 	.word	0xfffff4ff
 80170c0:	40013800 	.word	0x40013800
 80170c4:	40021000 	.word	0x40021000
 80170c8:	40004400 	.word	0x40004400
 80170cc:	40004c00 	.word	0x40004c00
 80170d0:	40005000 	.word	0x40005000
 80170d4:	003d0900 	.word	0x003d0900
 80170d8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80170dc:	69fb      	ldr	r3, [r7, #28]
 80170de:	69da      	ldr	r2, [r3, #28]
 80170e0:	2380      	movs	r3, #128	@ 0x80
 80170e2:	021b      	lsls	r3, r3, #8
 80170e4:	429a      	cmp	r2, r3
 80170e6:	d000      	beq.n	80170ea <UART_SetConfig+0x37a>
 80170e8:	e070      	b.n	80171cc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80170ea:	231b      	movs	r3, #27
 80170ec:	2218      	movs	r2, #24
 80170ee:	189b      	adds	r3, r3, r2
 80170f0:	19db      	adds	r3, r3, r7
 80170f2:	781b      	ldrb	r3, [r3, #0]
 80170f4:	2b08      	cmp	r3, #8
 80170f6:	d822      	bhi.n	801713e <UART_SetConfig+0x3ce>
 80170f8:	009a      	lsls	r2, r3, #2
 80170fa:	4b67      	ldr	r3, [pc, #412]	@ (8017298 <UART_SetConfig+0x528>)
 80170fc:	18d3      	adds	r3, r2, r3
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017102:	f7fd fddb 	bl	8014cbc <HAL_RCC_GetPCLK1Freq>
 8017106:	0003      	movs	r3, r0
 8017108:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801710a:	e021      	b.n	8017150 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801710c:	f7fd fdec 	bl	8014ce8 <HAL_RCC_GetPCLK2Freq>
 8017110:	0003      	movs	r3, r0
 8017112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017114:	e01c      	b.n	8017150 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017116:	4b61      	ldr	r3, [pc, #388]	@ (801729c <UART_SetConfig+0x52c>)
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	2210      	movs	r2, #16
 801711c:	4013      	ands	r3, r2
 801711e:	d002      	beq.n	8017126 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017120:	4b5f      	ldr	r3, [pc, #380]	@ (80172a0 <UART_SetConfig+0x530>)
 8017122:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017124:	e014      	b.n	8017150 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8017126:	4b5f      	ldr	r3, [pc, #380]	@ (80172a4 <UART_SetConfig+0x534>)
 8017128:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801712a:	e011      	b.n	8017150 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801712c:	f7fd fd16 	bl	8014b5c <HAL_RCC_GetSysClockFreq>
 8017130:	0003      	movs	r3, r0
 8017132:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017134:	e00c      	b.n	8017150 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017136:	2380      	movs	r3, #128	@ 0x80
 8017138:	021b      	lsls	r3, r3, #8
 801713a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801713c:	e008      	b.n	8017150 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801713e:	2300      	movs	r3, #0
 8017140:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017142:	231a      	movs	r3, #26
 8017144:	2218      	movs	r2, #24
 8017146:	189b      	adds	r3, r3, r2
 8017148:	19db      	adds	r3, r3, r7
 801714a:	2201      	movs	r2, #1
 801714c:	701a      	strb	r2, [r3, #0]
        break;
 801714e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017152:	2b00      	cmp	r3, #0
 8017154:	d100      	bne.n	8017158 <UART_SetConfig+0x3e8>
 8017156:	e090      	b.n	801727a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801715a:	005a      	lsls	r2, r3, #1
 801715c:	69fb      	ldr	r3, [r7, #28]
 801715e:	685b      	ldr	r3, [r3, #4]
 8017160:	085b      	lsrs	r3, r3, #1
 8017162:	18d2      	adds	r2, r2, r3
 8017164:	69fb      	ldr	r3, [r7, #28]
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	0019      	movs	r1, r3
 801716a:	0010      	movs	r0, r2
 801716c:	f7e9 f81a 	bl	80001a4 <__udivsi3>
 8017170:	0003      	movs	r3, r0
 8017172:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017176:	2b0f      	cmp	r3, #15
 8017178:	d921      	bls.n	80171be <UART_SetConfig+0x44e>
 801717a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801717c:	2380      	movs	r3, #128	@ 0x80
 801717e:	025b      	lsls	r3, r3, #9
 8017180:	429a      	cmp	r2, r3
 8017182:	d21c      	bcs.n	80171be <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017186:	b29a      	uxth	r2, r3
 8017188:	200e      	movs	r0, #14
 801718a:	2418      	movs	r4, #24
 801718c:	1903      	adds	r3, r0, r4
 801718e:	19db      	adds	r3, r3, r7
 8017190:	210f      	movs	r1, #15
 8017192:	438a      	bics	r2, r1
 8017194:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017198:	085b      	lsrs	r3, r3, #1
 801719a:	b29b      	uxth	r3, r3
 801719c:	2207      	movs	r2, #7
 801719e:	4013      	ands	r3, r2
 80171a0:	b299      	uxth	r1, r3
 80171a2:	1903      	adds	r3, r0, r4
 80171a4:	19db      	adds	r3, r3, r7
 80171a6:	1902      	adds	r2, r0, r4
 80171a8:	19d2      	adds	r2, r2, r7
 80171aa:	8812      	ldrh	r2, [r2, #0]
 80171ac:	430a      	orrs	r2, r1
 80171ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80171b0:	69fb      	ldr	r3, [r7, #28]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	1902      	adds	r2, r0, r4
 80171b6:	19d2      	adds	r2, r2, r7
 80171b8:	8812      	ldrh	r2, [r2, #0]
 80171ba:	60da      	str	r2, [r3, #12]
 80171bc:	e05d      	b.n	801727a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80171be:	231a      	movs	r3, #26
 80171c0:	2218      	movs	r2, #24
 80171c2:	189b      	adds	r3, r3, r2
 80171c4:	19db      	adds	r3, r3, r7
 80171c6:	2201      	movs	r2, #1
 80171c8:	701a      	strb	r2, [r3, #0]
 80171ca:	e056      	b.n	801727a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80171cc:	231b      	movs	r3, #27
 80171ce:	2218      	movs	r2, #24
 80171d0:	189b      	adds	r3, r3, r2
 80171d2:	19db      	adds	r3, r3, r7
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	2b08      	cmp	r3, #8
 80171d8:	d822      	bhi.n	8017220 <UART_SetConfig+0x4b0>
 80171da:	009a      	lsls	r2, r3, #2
 80171dc:	4b32      	ldr	r3, [pc, #200]	@ (80172a8 <UART_SetConfig+0x538>)
 80171de:	18d3      	adds	r3, r2, r3
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80171e4:	f7fd fd6a 	bl	8014cbc <HAL_RCC_GetPCLK1Freq>
 80171e8:	0003      	movs	r3, r0
 80171ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80171ec:	e021      	b.n	8017232 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80171ee:	f7fd fd7b 	bl	8014ce8 <HAL_RCC_GetPCLK2Freq>
 80171f2:	0003      	movs	r3, r0
 80171f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80171f6:	e01c      	b.n	8017232 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80171f8:	4b28      	ldr	r3, [pc, #160]	@ (801729c <UART_SetConfig+0x52c>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	2210      	movs	r2, #16
 80171fe:	4013      	ands	r3, r2
 8017200:	d002      	beq.n	8017208 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017202:	4b27      	ldr	r3, [pc, #156]	@ (80172a0 <UART_SetConfig+0x530>)
 8017204:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017206:	e014      	b.n	8017232 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8017208:	4b26      	ldr	r3, [pc, #152]	@ (80172a4 <UART_SetConfig+0x534>)
 801720a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801720c:	e011      	b.n	8017232 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801720e:	f7fd fca5 	bl	8014b5c <HAL_RCC_GetSysClockFreq>
 8017212:	0003      	movs	r3, r0
 8017214:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017216:	e00c      	b.n	8017232 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017218:	2380      	movs	r3, #128	@ 0x80
 801721a:	021b      	lsls	r3, r3, #8
 801721c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801721e:	e008      	b.n	8017232 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8017220:	2300      	movs	r3, #0
 8017222:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017224:	231a      	movs	r3, #26
 8017226:	2218      	movs	r2, #24
 8017228:	189b      	adds	r3, r3, r2
 801722a:	19db      	adds	r3, r3, r7
 801722c:	2201      	movs	r2, #1
 801722e:	701a      	strb	r2, [r3, #0]
        break;
 8017230:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8017232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017234:	2b00      	cmp	r3, #0
 8017236:	d020      	beq.n	801727a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8017238:	69fb      	ldr	r3, [r7, #28]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	085a      	lsrs	r2, r3, #1
 801723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017240:	18d2      	adds	r2, r2, r3
 8017242:	69fb      	ldr	r3, [r7, #28]
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	0019      	movs	r1, r3
 8017248:	0010      	movs	r0, r2
 801724a:	f7e8 ffab 	bl	80001a4 <__udivsi3>
 801724e:	0003      	movs	r3, r0
 8017250:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017254:	2b0f      	cmp	r3, #15
 8017256:	d90a      	bls.n	801726e <UART_SetConfig+0x4fe>
 8017258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801725a:	2380      	movs	r3, #128	@ 0x80
 801725c:	025b      	lsls	r3, r3, #9
 801725e:	429a      	cmp	r2, r3
 8017260:	d205      	bcs.n	801726e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8017262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017264:	b29a      	uxth	r2, r3
 8017266:	69fb      	ldr	r3, [r7, #28]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	60da      	str	r2, [r3, #12]
 801726c:	e005      	b.n	801727a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801726e:	231a      	movs	r3, #26
 8017270:	2218      	movs	r2, #24
 8017272:	189b      	adds	r3, r3, r2
 8017274:	19db      	adds	r3, r3, r7
 8017276:	2201      	movs	r2, #1
 8017278:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801727a:	69fb      	ldr	r3, [r7, #28]
 801727c:	2200      	movs	r2, #0
 801727e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8017280:	69fb      	ldr	r3, [r7, #28]
 8017282:	2200      	movs	r2, #0
 8017284:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8017286:	231a      	movs	r3, #26
 8017288:	2218      	movs	r2, #24
 801728a:	189b      	adds	r3, r3, r2
 801728c:	19db      	adds	r3, r3, r7
 801728e:	781b      	ldrb	r3, [r3, #0]
}
 8017290:	0018      	movs	r0, r3
 8017292:	46bd      	mov	sp, r7
 8017294:	b00e      	add	sp, #56	@ 0x38
 8017296:	bdb0      	pop	{r4, r5, r7, pc}
 8017298:	080240a8 	.word	0x080240a8
 801729c:	40021000 	.word	0x40021000
 80172a0:	003d0900 	.word	0x003d0900
 80172a4:	00f42400 	.word	0x00f42400
 80172a8:	080240cc 	.word	0x080240cc

080172ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b082      	sub	sp, #8
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172b8:	2201      	movs	r2, #1
 80172ba:	4013      	ands	r3, r2
 80172bc:	d00b      	beq.n	80172d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	685b      	ldr	r3, [r3, #4]
 80172c4:	4a4a      	ldr	r2, [pc, #296]	@ (80173f0 <UART_AdvFeatureConfig+0x144>)
 80172c6:	4013      	ands	r3, r2
 80172c8:	0019      	movs	r1, r3
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	430a      	orrs	r2, r1
 80172d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172da:	2202      	movs	r2, #2
 80172dc:	4013      	ands	r3, r2
 80172de:	d00b      	beq.n	80172f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	685b      	ldr	r3, [r3, #4]
 80172e6:	4a43      	ldr	r2, [pc, #268]	@ (80173f4 <UART_AdvFeatureConfig+0x148>)
 80172e8:	4013      	ands	r3, r2
 80172ea:	0019      	movs	r1, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	430a      	orrs	r2, r1
 80172f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172fc:	2204      	movs	r2, #4
 80172fe:	4013      	ands	r3, r2
 8017300:	d00b      	beq.n	801731a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	685b      	ldr	r3, [r3, #4]
 8017308:	4a3b      	ldr	r2, [pc, #236]	@ (80173f8 <UART_AdvFeatureConfig+0x14c>)
 801730a:	4013      	ands	r3, r2
 801730c:	0019      	movs	r1, r3
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	430a      	orrs	r2, r1
 8017318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801731e:	2208      	movs	r2, #8
 8017320:	4013      	ands	r3, r2
 8017322:	d00b      	beq.n	801733c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	685b      	ldr	r3, [r3, #4]
 801732a:	4a34      	ldr	r2, [pc, #208]	@ (80173fc <UART_AdvFeatureConfig+0x150>)
 801732c:	4013      	ands	r3, r2
 801732e:	0019      	movs	r1, r3
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	430a      	orrs	r2, r1
 801733a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017340:	2210      	movs	r2, #16
 8017342:	4013      	ands	r3, r2
 8017344:	d00b      	beq.n	801735e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	689b      	ldr	r3, [r3, #8]
 801734c:	4a2c      	ldr	r2, [pc, #176]	@ (8017400 <UART_AdvFeatureConfig+0x154>)
 801734e:	4013      	ands	r3, r2
 8017350:	0019      	movs	r1, r3
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	430a      	orrs	r2, r1
 801735c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017362:	2220      	movs	r2, #32
 8017364:	4013      	ands	r3, r2
 8017366:	d00b      	beq.n	8017380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	689b      	ldr	r3, [r3, #8]
 801736e:	4a25      	ldr	r2, [pc, #148]	@ (8017404 <UART_AdvFeatureConfig+0x158>)
 8017370:	4013      	ands	r3, r2
 8017372:	0019      	movs	r1, r3
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	430a      	orrs	r2, r1
 801737e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017384:	2240      	movs	r2, #64	@ 0x40
 8017386:	4013      	ands	r3, r2
 8017388:	d01d      	beq.n	80173c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	685b      	ldr	r3, [r3, #4]
 8017390:	4a1d      	ldr	r2, [pc, #116]	@ (8017408 <UART_AdvFeatureConfig+0x15c>)
 8017392:	4013      	ands	r3, r2
 8017394:	0019      	movs	r1, r3
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	430a      	orrs	r2, r1
 80173a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80173a6:	2380      	movs	r3, #128	@ 0x80
 80173a8:	035b      	lsls	r3, r3, #13
 80173aa:	429a      	cmp	r2, r3
 80173ac:	d10b      	bne.n	80173c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	685b      	ldr	r3, [r3, #4]
 80173b4:	4a15      	ldr	r2, [pc, #84]	@ (801740c <UART_AdvFeatureConfig+0x160>)
 80173b6:	4013      	ands	r3, r2
 80173b8:	0019      	movs	r1, r3
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	430a      	orrs	r2, r1
 80173c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173ca:	2280      	movs	r2, #128	@ 0x80
 80173cc:	4013      	ands	r3, r2
 80173ce:	d00b      	beq.n	80173e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	4a0e      	ldr	r2, [pc, #56]	@ (8017410 <UART_AdvFeatureConfig+0x164>)
 80173d8:	4013      	ands	r3, r2
 80173da:	0019      	movs	r1, r3
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	430a      	orrs	r2, r1
 80173e6:	605a      	str	r2, [r3, #4]
  }
}
 80173e8:	46c0      	nop			@ (mov r8, r8)
 80173ea:	46bd      	mov	sp, r7
 80173ec:	b002      	add	sp, #8
 80173ee:	bd80      	pop	{r7, pc}
 80173f0:	fffdffff 	.word	0xfffdffff
 80173f4:	fffeffff 	.word	0xfffeffff
 80173f8:	fffbffff 	.word	0xfffbffff
 80173fc:	ffff7fff 	.word	0xffff7fff
 8017400:	ffffefff 	.word	0xffffefff
 8017404:	ffffdfff 	.word	0xffffdfff
 8017408:	ffefffff 	.word	0xffefffff
 801740c:	ff9fffff 	.word	0xff9fffff
 8017410:	fff7ffff 	.word	0xfff7ffff

08017414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b092      	sub	sp, #72	@ 0x48
 8017418:	af02      	add	r7, sp, #8
 801741a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2284      	movs	r2, #132	@ 0x84
 8017420:	2100      	movs	r1, #0
 8017422:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017424:	f7f6 fd74 	bl	800df10 <HAL_GetTick>
 8017428:	0003      	movs	r3, r0
 801742a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	2208      	movs	r2, #8
 8017434:	4013      	ands	r3, r2
 8017436:	2b08      	cmp	r3, #8
 8017438:	d12c      	bne.n	8017494 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801743a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801743c:	2280      	movs	r2, #128	@ 0x80
 801743e:	0391      	lsls	r1, r2, #14
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	4a46      	ldr	r2, [pc, #280]	@ (801755c <UART_CheckIdleState+0x148>)
 8017444:	9200      	str	r2, [sp, #0]
 8017446:	2200      	movs	r2, #0
 8017448:	f000 f88c 	bl	8017564 <UART_WaitOnFlagUntilTimeout>
 801744c:	1e03      	subs	r3, r0, #0
 801744e:	d021      	beq.n	8017494 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017450:	f3ef 8310 	mrs	r3, PRIMASK
 8017454:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8017458:	63bb      	str	r3, [r7, #56]	@ 0x38
 801745a:	2301      	movs	r3, #1
 801745c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801745e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017460:	f383 8810 	msr	PRIMASK, r3
}
 8017464:	46c0      	nop			@ (mov r8, r8)
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	681a      	ldr	r2, [r3, #0]
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	2180      	movs	r1, #128	@ 0x80
 8017472:	438a      	bics	r2, r1
 8017474:	601a      	str	r2, [r3, #0]
 8017476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801747c:	f383 8810 	msr	PRIMASK, r3
}
 8017480:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2220      	movs	r2, #32
 8017486:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	2278      	movs	r2, #120	@ 0x78
 801748c:	2100      	movs	r1, #0
 801748e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017490:	2303      	movs	r3, #3
 8017492:	e05f      	b.n	8017554 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2204      	movs	r2, #4
 801749c:	4013      	ands	r3, r2
 801749e:	2b04      	cmp	r3, #4
 80174a0:	d146      	bne.n	8017530 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80174a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174a4:	2280      	movs	r2, #128	@ 0x80
 80174a6:	03d1      	lsls	r1, r2, #15
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	4a2c      	ldr	r2, [pc, #176]	@ (801755c <UART_CheckIdleState+0x148>)
 80174ac:	9200      	str	r2, [sp, #0]
 80174ae:	2200      	movs	r2, #0
 80174b0:	f000 f858 	bl	8017564 <UART_WaitOnFlagUntilTimeout>
 80174b4:	1e03      	subs	r3, r0, #0
 80174b6:	d03b      	beq.n	8017530 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174b8:	f3ef 8310 	mrs	r3, PRIMASK
 80174bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80174be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80174c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80174c2:	2301      	movs	r3, #1
 80174c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174c6:	693b      	ldr	r3, [r7, #16]
 80174c8:	f383 8810 	msr	PRIMASK, r3
}
 80174cc:	46c0      	nop			@ (mov r8, r8)
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	681a      	ldr	r2, [r3, #0]
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	4921      	ldr	r1, [pc, #132]	@ (8017560 <UART_CheckIdleState+0x14c>)
 80174da:	400a      	ands	r2, r1
 80174dc:	601a      	str	r2, [r3, #0]
 80174de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	f383 8810 	msr	PRIMASK, r3
}
 80174e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174ea:	f3ef 8310 	mrs	r3, PRIMASK
 80174ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80174f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80174f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80174f4:	2301      	movs	r3, #1
 80174f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174f8:	69fb      	ldr	r3, [r7, #28]
 80174fa:	f383 8810 	msr	PRIMASK, r3
}
 80174fe:	46c0      	nop			@ (mov r8, r8)
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	689a      	ldr	r2, [r3, #8]
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	2101      	movs	r1, #1
 801750c:	438a      	bics	r2, r1
 801750e:	609a      	str	r2, [r3, #8]
 8017510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017512:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017514:	6a3b      	ldr	r3, [r7, #32]
 8017516:	f383 8810 	msr	PRIMASK, r3
}
 801751a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	2280      	movs	r2, #128	@ 0x80
 8017520:	2120      	movs	r1, #32
 8017522:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2278      	movs	r2, #120	@ 0x78
 8017528:	2100      	movs	r1, #0
 801752a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801752c:	2303      	movs	r3, #3
 801752e:	e011      	b.n	8017554 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2220      	movs	r2, #32
 8017534:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	2280      	movs	r2, #128	@ 0x80
 801753a:	2120      	movs	r1, #32
 801753c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	2200      	movs	r2, #0
 8017542:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	2200      	movs	r2, #0
 8017548:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2278      	movs	r2, #120	@ 0x78
 801754e:	2100      	movs	r1, #0
 8017550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017552:	2300      	movs	r3, #0
}
 8017554:	0018      	movs	r0, r3
 8017556:	46bd      	mov	sp, r7
 8017558:	b010      	add	sp, #64	@ 0x40
 801755a:	bd80      	pop	{r7, pc}
 801755c:	01ffffff 	.word	0x01ffffff
 8017560:	fffffedf 	.word	0xfffffedf

08017564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b084      	sub	sp, #16
 8017568:	af00      	add	r7, sp, #0
 801756a:	60f8      	str	r0, [r7, #12]
 801756c:	60b9      	str	r1, [r7, #8]
 801756e:	603b      	str	r3, [r7, #0]
 8017570:	1dfb      	adds	r3, r7, #7
 8017572:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017574:	e04b      	b.n	801760e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017576:	69bb      	ldr	r3, [r7, #24]
 8017578:	3301      	adds	r3, #1
 801757a:	d048      	beq.n	801760e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801757c:	f7f6 fcc8 	bl	800df10 <HAL_GetTick>
 8017580:	0002      	movs	r2, r0
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	1ad3      	subs	r3, r2, r3
 8017586:	69ba      	ldr	r2, [r7, #24]
 8017588:	429a      	cmp	r2, r3
 801758a:	d302      	bcc.n	8017592 <UART_WaitOnFlagUntilTimeout+0x2e>
 801758c:	69bb      	ldr	r3, [r7, #24]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d101      	bne.n	8017596 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017592:	2303      	movs	r3, #3
 8017594:	e04b      	b.n	801762e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	2204      	movs	r2, #4
 801759e:	4013      	ands	r3, r2
 80175a0:	d035      	beq.n	801760e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	69db      	ldr	r3, [r3, #28]
 80175a8:	2208      	movs	r2, #8
 80175aa:	4013      	ands	r3, r2
 80175ac:	2b08      	cmp	r3, #8
 80175ae:	d111      	bne.n	80175d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	2208      	movs	r2, #8
 80175b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	0018      	movs	r0, r3
 80175bc:	f000 f9ca 	bl	8017954 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	2284      	movs	r2, #132	@ 0x84
 80175c4:	2108      	movs	r1, #8
 80175c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	2278      	movs	r2, #120	@ 0x78
 80175cc:	2100      	movs	r1, #0
 80175ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80175d0:	2301      	movs	r3, #1
 80175d2:	e02c      	b.n	801762e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	69da      	ldr	r2, [r3, #28]
 80175da:	2380      	movs	r3, #128	@ 0x80
 80175dc:	011b      	lsls	r3, r3, #4
 80175de:	401a      	ands	r2, r3
 80175e0:	2380      	movs	r3, #128	@ 0x80
 80175e2:	011b      	lsls	r3, r3, #4
 80175e4:	429a      	cmp	r2, r3
 80175e6:	d112      	bne.n	801760e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	2280      	movs	r2, #128	@ 0x80
 80175ee:	0112      	lsls	r2, r2, #4
 80175f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	0018      	movs	r0, r3
 80175f6:	f000 f9ad 	bl	8017954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	2284      	movs	r2, #132	@ 0x84
 80175fe:	2120      	movs	r1, #32
 8017600:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	2278      	movs	r2, #120	@ 0x78
 8017606:	2100      	movs	r1, #0
 8017608:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801760a:	2303      	movs	r3, #3
 801760c:	e00f      	b.n	801762e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	69db      	ldr	r3, [r3, #28]
 8017614:	68ba      	ldr	r2, [r7, #8]
 8017616:	4013      	ands	r3, r2
 8017618:	68ba      	ldr	r2, [r7, #8]
 801761a:	1ad3      	subs	r3, r2, r3
 801761c:	425a      	negs	r2, r3
 801761e:	4153      	adcs	r3, r2
 8017620:	b2db      	uxtb	r3, r3
 8017622:	001a      	movs	r2, r3
 8017624:	1dfb      	adds	r3, r7, #7
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	429a      	cmp	r2, r3
 801762a:	d0a4      	beq.n	8017576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801762c:	2300      	movs	r3, #0
}
 801762e:	0018      	movs	r0, r3
 8017630:	46bd      	mov	sp, r7
 8017632:	b004      	add	sp, #16
 8017634:	bd80      	pop	{r7, pc}
	...

08017638 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b090      	sub	sp, #64	@ 0x40
 801763c:	af00      	add	r7, sp, #0
 801763e:	60f8      	str	r0, [r7, #12]
 8017640:	60b9      	str	r1, [r7, #8]
 8017642:	1dbb      	adds	r3, r7, #6
 8017644:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	68ba      	ldr	r2, [r7, #8]
 801764a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	1dba      	adds	r2, r7, #6
 8017650:	2158      	movs	r1, #88	@ 0x58
 8017652:	8812      	ldrh	r2, [r2, #0]
 8017654:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	1dba      	adds	r2, r7, #6
 801765a:	215a      	movs	r1, #90	@ 0x5a
 801765c:	8812      	ldrh	r2, [r2, #0]
 801765e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	2200      	movs	r2, #0
 8017664:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	689a      	ldr	r2, [r3, #8]
 801766a:	2380      	movs	r3, #128	@ 0x80
 801766c:	015b      	lsls	r3, r3, #5
 801766e:	429a      	cmp	r2, r3
 8017670:	d10d      	bne.n	801768e <UART_Start_Receive_IT+0x56>
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	691b      	ldr	r3, [r3, #16]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d104      	bne.n	8017684 <UART_Start_Receive_IT+0x4c>
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	225c      	movs	r2, #92	@ 0x5c
 801767e:	4950      	ldr	r1, [pc, #320]	@ (80177c0 <UART_Start_Receive_IT+0x188>)
 8017680:	5299      	strh	r1, [r3, r2]
 8017682:	e02e      	b.n	80176e2 <UART_Start_Receive_IT+0xaa>
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	225c      	movs	r2, #92	@ 0x5c
 8017688:	21ff      	movs	r1, #255	@ 0xff
 801768a:	5299      	strh	r1, [r3, r2]
 801768c:	e029      	b.n	80176e2 <UART_Start_Receive_IT+0xaa>
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	689b      	ldr	r3, [r3, #8]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d10d      	bne.n	80176b2 <UART_Start_Receive_IT+0x7a>
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	691b      	ldr	r3, [r3, #16]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d104      	bne.n	80176a8 <UART_Start_Receive_IT+0x70>
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	225c      	movs	r2, #92	@ 0x5c
 80176a2:	21ff      	movs	r1, #255	@ 0xff
 80176a4:	5299      	strh	r1, [r3, r2]
 80176a6:	e01c      	b.n	80176e2 <UART_Start_Receive_IT+0xaa>
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	225c      	movs	r2, #92	@ 0x5c
 80176ac:	217f      	movs	r1, #127	@ 0x7f
 80176ae:	5299      	strh	r1, [r3, r2]
 80176b0:	e017      	b.n	80176e2 <UART_Start_Receive_IT+0xaa>
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	689a      	ldr	r2, [r3, #8]
 80176b6:	2380      	movs	r3, #128	@ 0x80
 80176b8:	055b      	lsls	r3, r3, #21
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d10d      	bne.n	80176da <UART_Start_Receive_IT+0xa2>
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	691b      	ldr	r3, [r3, #16]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d104      	bne.n	80176d0 <UART_Start_Receive_IT+0x98>
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	225c      	movs	r2, #92	@ 0x5c
 80176ca:	217f      	movs	r1, #127	@ 0x7f
 80176cc:	5299      	strh	r1, [r3, r2]
 80176ce:	e008      	b.n	80176e2 <UART_Start_Receive_IT+0xaa>
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	225c      	movs	r2, #92	@ 0x5c
 80176d4:	213f      	movs	r1, #63	@ 0x3f
 80176d6:	5299      	strh	r1, [r3, r2]
 80176d8:	e003      	b.n	80176e2 <UART_Start_Receive_IT+0xaa>
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	225c      	movs	r2, #92	@ 0x5c
 80176de:	2100      	movs	r1, #0
 80176e0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	2284      	movs	r2, #132	@ 0x84
 80176e6:	2100      	movs	r1, #0
 80176e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	2280      	movs	r2, #128	@ 0x80
 80176ee:	2122      	movs	r1, #34	@ 0x22
 80176f0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176f2:	f3ef 8310 	mrs	r3, PRIMASK
 80176f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80176f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80176fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80176fc:	2301      	movs	r3, #1
 80176fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017702:	f383 8810 	msr	PRIMASK, r3
}
 8017706:	46c0      	nop			@ (mov r8, r8)
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	689a      	ldr	r2, [r3, #8]
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	2101      	movs	r1, #1
 8017714:	430a      	orrs	r2, r1
 8017716:	609a      	str	r2, [r3, #8]
 8017718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801771a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801771c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801771e:	f383 8810 	msr	PRIMASK, r3
}
 8017722:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	689a      	ldr	r2, [r3, #8]
 8017728:	2380      	movs	r3, #128	@ 0x80
 801772a:	015b      	lsls	r3, r3, #5
 801772c:	429a      	cmp	r2, r3
 801772e:	d107      	bne.n	8017740 <UART_Start_Receive_IT+0x108>
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	691b      	ldr	r3, [r3, #16]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d103      	bne.n	8017740 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	4a22      	ldr	r2, [pc, #136]	@ (80177c4 <UART_Start_Receive_IT+0x18c>)
 801773c:	669a      	str	r2, [r3, #104]	@ 0x68
 801773e:	e002      	b.n	8017746 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	4a21      	ldr	r2, [pc, #132]	@ (80177c8 <UART_Start_Receive_IT+0x190>)
 8017744:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	691b      	ldr	r3, [r3, #16]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d019      	beq.n	8017782 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801774e:	f3ef 8310 	mrs	r3, PRIMASK
 8017752:	61fb      	str	r3, [r7, #28]
  return(result);
 8017754:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017756:	637b      	str	r3, [r7, #52]	@ 0x34
 8017758:	2301      	movs	r3, #1
 801775a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801775c:	6a3b      	ldr	r3, [r7, #32]
 801775e:	f383 8810 	msr	PRIMASK, r3
}
 8017762:	46c0      	nop			@ (mov r8, r8)
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	681a      	ldr	r2, [r3, #0]
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	2190      	movs	r1, #144	@ 0x90
 8017770:	0049      	lsls	r1, r1, #1
 8017772:	430a      	orrs	r2, r1
 8017774:	601a      	str	r2, [r3, #0]
 8017776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017778:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801777c:	f383 8810 	msr	PRIMASK, r3
}
 8017780:	e018      	b.n	80177b4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017782:	f3ef 8310 	mrs	r3, PRIMASK
 8017786:	613b      	str	r3, [r7, #16]
  return(result);
 8017788:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801778a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801778c:	2301      	movs	r3, #1
 801778e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017790:	697b      	ldr	r3, [r7, #20]
 8017792:	f383 8810 	msr	PRIMASK, r3
}
 8017796:	46c0      	nop			@ (mov r8, r8)
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	681a      	ldr	r2, [r3, #0]
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	2120      	movs	r1, #32
 80177a4:	430a      	orrs	r2, r1
 80177a6:	601a      	str	r2, [r3, #0]
 80177a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177ac:	69bb      	ldr	r3, [r7, #24]
 80177ae:	f383 8810 	msr	PRIMASK, r3
}
 80177b2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80177b4:	2300      	movs	r3, #0
}
 80177b6:	0018      	movs	r0, r3
 80177b8:	46bd      	mov	sp, r7
 80177ba:	b010      	add	sp, #64	@ 0x40
 80177bc:	bd80      	pop	{r7, pc}
 80177be:	46c0      	nop			@ (mov r8, r8)
 80177c0:	000001ff 	.word	0x000001ff
 80177c4:	08017f39 	.word	0x08017f39
 80177c8:	08017d6d 	.word	0x08017d6d

080177cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b090      	sub	sp, #64	@ 0x40
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	60f8      	str	r0, [r7, #12]
 80177d4:	60b9      	str	r1, [r7, #8]
 80177d6:	1dbb      	adds	r3, r7, #6
 80177d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	68ba      	ldr	r2, [r7, #8]
 80177de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	1dba      	adds	r2, r7, #6
 80177e4:	2158      	movs	r1, #88	@ 0x58
 80177e6:	8812      	ldrh	r2, [r2, #0]
 80177e8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	2284      	movs	r2, #132	@ 0x84
 80177ee:	2100      	movs	r1, #0
 80177f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	2280      	movs	r2, #128	@ 0x80
 80177f6:	2122      	movs	r1, #34	@ 0x22
 80177f8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d028      	beq.n	8017854 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017806:	4a3e      	ldr	r2, [pc, #248]	@ (8017900 <UART_Start_Receive_DMA+0x134>)
 8017808:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801780e:	4a3d      	ldr	r2, [pc, #244]	@ (8017904 <UART_Start_Receive_DMA+0x138>)
 8017810:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017816:	4a3c      	ldr	r2, [pc, #240]	@ (8017908 <UART_Start_Receive_DMA+0x13c>)
 8017818:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801781e:	2200      	movs	r2, #0
 8017820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	3324      	adds	r3, #36	@ 0x24
 801782c:	0019      	movs	r1, r3
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017832:	001a      	movs	r2, r3
 8017834:	1dbb      	adds	r3, r7, #6
 8017836:	881b      	ldrh	r3, [r3, #0]
 8017838:	f7f7 f8a6 	bl	800e988 <HAL_DMA_Start_IT>
 801783c:	1e03      	subs	r3, r0, #0
 801783e:	d009      	beq.n	8017854 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	2284      	movs	r2, #132	@ 0x84
 8017844:	2110      	movs	r1, #16
 8017846:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	2280      	movs	r2, #128	@ 0x80
 801784c:	2120      	movs	r1, #32
 801784e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8017850:	2301      	movs	r3, #1
 8017852:	e050      	b.n	80178f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	691b      	ldr	r3, [r3, #16]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d019      	beq.n	8017890 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801785c:	f3ef 8310 	mrs	r3, PRIMASK
 8017860:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017866:	2301      	movs	r3, #1
 8017868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801786c:	f383 8810 	msr	PRIMASK, r3
}
 8017870:	46c0      	nop			@ (mov r8, r8)
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	681a      	ldr	r2, [r3, #0]
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	2180      	movs	r1, #128	@ 0x80
 801787e:	0049      	lsls	r1, r1, #1
 8017880:	430a      	orrs	r2, r1
 8017882:	601a      	str	r2, [r3, #0]
 8017884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017886:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801788a:	f383 8810 	msr	PRIMASK, r3
}
 801788e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017890:	f3ef 8310 	mrs	r3, PRIMASK
 8017894:	613b      	str	r3, [r7, #16]
  return(result);
 8017896:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017898:	63bb      	str	r3, [r7, #56]	@ 0x38
 801789a:	2301      	movs	r3, #1
 801789c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	f383 8810 	msr	PRIMASK, r3
}
 80178a4:	46c0      	nop			@ (mov r8, r8)
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	689a      	ldr	r2, [r3, #8]
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	2101      	movs	r1, #1
 80178b2:	430a      	orrs	r2, r1
 80178b4:	609a      	str	r2, [r3, #8]
 80178b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178ba:	69bb      	ldr	r3, [r7, #24]
 80178bc:	f383 8810 	msr	PRIMASK, r3
}
 80178c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178c2:	f3ef 8310 	mrs	r3, PRIMASK
 80178c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80178c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80178ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80178cc:	2301      	movs	r3, #1
 80178ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178d0:	6a3b      	ldr	r3, [r7, #32]
 80178d2:	f383 8810 	msr	PRIMASK, r3
}
 80178d6:	46c0      	nop			@ (mov r8, r8)
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	689a      	ldr	r2, [r3, #8]
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	2140      	movs	r1, #64	@ 0x40
 80178e4:	430a      	orrs	r2, r1
 80178e6:	609a      	str	r2, [r3, #8]
 80178e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ee:	f383 8810 	msr	PRIMASK, r3
}
 80178f2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80178f4:	2300      	movs	r3, #0
}
 80178f6:	0018      	movs	r0, r3
 80178f8:	46bd      	mov	sp, r7
 80178fa:	b010      	add	sp, #64	@ 0x40
 80178fc:	bd80      	pop	{r7, pc}
 80178fe:	46c0      	nop			@ (mov r8, r8)
 8017900:	08017add 	.word	0x08017add
 8017904:	08017c11 	.word	0x08017c11
 8017908:	08017c59 	.word	0x08017c59

0801790c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b086      	sub	sp, #24
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017914:	f3ef 8310 	mrs	r3, PRIMASK
 8017918:	60bb      	str	r3, [r7, #8]
  return(result);
 801791a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801791c:	617b      	str	r3, [r7, #20]
 801791e:	2301      	movs	r3, #1
 8017920:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	f383 8810 	msr	PRIMASK, r3
}
 8017928:	46c0      	nop			@ (mov r8, r8)
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	681a      	ldr	r2, [r3, #0]
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	21c0      	movs	r1, #192	@ 0xc0
 8017936:	438a      	bics	r2, r1
 8017938:	601a      	str	r2, [r3, #0]
 801793a:	697b      	ldr	r3, [r7, #20]
 801793c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801793e:	693b      	ldr	r3, [r7, #16]
 8017940:	f383 8810 	msr	PRIMASK, r3
}
 8017944:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	2220      	movs	r2, #32
 801794a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801794c:	46c0      	nop			@ (mov r8, r8)
 801794e:	46bd      	mov	sp, r7
 8017950:	b006      	add	sp, #24
 8017952:	bd80      	pop	{r7, pc}

08017954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b08e      	sub	sp, #56	@ 0x38
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801795c:	f3ef 8310 	mrs	r3, PRIMASK
 8017960:	617b      	str	r3, [r7, #20]
  return(result);
 8017962:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017964:	637b      	str	r3, [r7, #52]	@ 0x34
 8017966:	2301      	movs	r3, #1
 8017968:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801796a:	69bb      	ldr	r3, [r7, #24]
 801796c:	f383 8810 	msr	PRIMASK, r3
}
 8017970:	46c0      	nop			@ (mov r8, r8)
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	681a      	ldr	r2, [r3, #0]
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	4926      	ldr	r1, [pc, #152]	@ (8017a18 <UART_EndRxTransfer+0xc4>)
 801797e:	400a      	ands	r2, r1
 8017980:	601a      	str	r2, [r3, #0]
 8017982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017986:	69fb      	ldr	r3, [r7, #28]
 8017988:	f383 8810 	msr	PRIMASK, r3
}
 801798c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801798e:	f3ef 8310 	mrs	r3, PRIMASK
 8017992:	623b      	str	r3, [r7, #32]
  return(result);
 8017994:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017996:	633b      	str	r3, [r7, #48]	@ 0x30
 8017998:	2301      	movs	r3, #1
 801799a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801799e:	f383 8810 	msr	PRIMASK, r3
}
 80179a2:	46c0      	nop			@ (mov r8, r8)
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	689a      	ldr	r2, [r3, #8]
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2101      	movs	r1, #1
 80179b0:	438a      	bics	r2, r1
 80179b2:	609a      	str	r2, [r3, #8]
 80179b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80179b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ba:	f383 8810 	msr	PRIMASK, r3
}
 80179be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80179c4:	2b01      	cmp	r3, #1
 80179c6:	d118      	bne.n	80179fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179c8:	f3ef 8310 	mrs	r3, PRIMASK
 80179cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80179ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80179d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80179d2:	2301      	movs	r3, #1
 80179d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179d6:	68fb      	ldr	r3, [r7, #12]
 80179d8:	f383 8810 	msr	PRIMASK, r3
}
 80179dc:	46c0      	nop			@ (mov r8, r8)
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	681a      	ldr	r2, [r3, #0]
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	2110      	movs	r1, #16
 80179ea:	438a      	bics	r2, r1
 80179ec:	601a      	str	r2, [r3, #0]
 80179ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179f2:	693b      	ldr	r3, [r7, #16]
 80179f4:	f383 8810 	msr	PRIMASK, r3
}
 80179f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	2280      	movs	r2, #128	@ 0x80
 80179fe:	2120      	movs	r1, #32
 8017a00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2200      	movs	r2, #0
 8017a06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017a0e:	46c0      	nop			@ (mov r8, r8)
 8017a10:	46bd      	mov	sp, r7
 8017a12:	b00e      	add	sp, #56	@ 0x38
 8017a14:	bd80      	pop	{r7, pc}
 8017a16:	46c0      	nop			@ (mov r8, r8)
 8017a18:	fffffedf 	.word	0xfffffedf

08017a1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b08c      	sub	sp, #48	@ 0x30
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a28:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2220      	movs	r2, #32
 8017a32:	4013      	ands	r3, r2
 8017a34:	d135      	bne.n	8017aa2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8017a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a38:	2252      	movs	r2, #82	@ 0x52
 8017a3a:	2100      	movs	r1, #0
 8017a3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8017a42:	60fb      	str	r3, [r7, #12]
  return(result);
 8017a44:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017a46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a48:	2301      	movs	r3, #1
 8017a4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a4c:	693b      	ldr	r3, [r7, #16]
 8017a4e:	f383 8810 	msr	PRIMASK, r3
}
 8017a52:	46c0      	nop			@ (mov r8, r8)
 8017a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	689a      	ldr	r2, [r3, #8]
 8017a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	2180      	movs	r1, #128	@ 0x80
 8017a60:	438a      	bics	r2, r1
 8017a62:	609a      	str	r2, [r3, #8]
 8017a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a68:	697b      	ldr	r3, [r7, #20]
 8017a6a:	f383 8810 	msr	PRIMASK, r3
}
 8017a6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a70:	f3ef 8310 	mrs	r3, PRIMASK
 8017a74:	61bb      	str	r3, [r7, #24]
  return(result);
 8017a76:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a7e:	69fb      	ldr	r3, [r7, #28]
 8017a80:	f383 8810 	msr	PRIMASK, r3
}
 8017a84:	46c0      	nop			@ (mov r8, r8)
 8017a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	681a      	ldr	r2, [r3, #0]
 8017a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	2140      	movs	r1, #64	@ 0x40
 8017a92:	430a      	orrs	r2, r1
 8017a94:	601a      	str	r2, [r3, #0]
 8017a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a9a:	6a3b      	ldr	r3, [r7, #32]
 8017a9c:	f383 8810 	msr	PRIMASK, r3
}
 8017aa0:	e006      	b.n	8017ab0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8017aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aa4:	228c      	movs	r2, #140	@ 0x8c
 8017aa6:	589b      	ldr	r3, [r3, r2]
 8017aa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017aaa:	0010      	movs	r0, r2
 8017aac:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017aae:	46c0      	nop			@ (mov r8, r8)
 8017ab0:	46c0      	nop			@ (mov r8, r8)
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	b00c      	add	sp, #48	@ 0x30
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b084      	sub	sp, #16
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ac4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	2288      	movs	r2, #136	@ 0x88
 8017aca:	589b      	ldr	r3, [r3, r2]
 8017acc:	68fa      	ldr	r2, [r7, #12]
 8017ace:	0010      	movs	r0, r2
 8017ad0:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017ad2:	46c0      	nop			@ (mov r8, r8)
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	b004      	add	sp, #16
 8017ad8:	bd80      	pop	{r7, pc}
	...

08017adc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b094      	sub	sp, #80	@ 0x50
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2220      	movs	r2, #32
 8017af2:	4013      	ands	r3, r2
 8017af4:	d16f      	bne.n	8017bd6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8017af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017af8:	225a      	movs	r2, #90	@ 0x5a
 8017afa:	2100      	movs	r1, #0
 8017afc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017afe:	f3ef 8310 	mrs	r3, PRIMASK
 8017b02:	61bb      	str	r3, [r7, #24]
  return(result);
 8017b04:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017b08:	2301      	movs	r3, #1
 8017b0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	f383 8810 	msr	PRIMASK, r3
}
 8017b12:	46c0      	nop			@ (mov r8, r8)
 8017b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	493b      	ldr	r1, [pc, #236]	@ (8017c0c <UART_DMAReceiveCplt+0x130>)
 8017b20:	400a      	ands	r2, r1
 8017b22:	601a      	str	r2, [r3, #0]
 8017b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017b26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b28:	6a3b      	ldr	r3, [r7, #32]
 8017b2a:	f383 8810 	msr	PRIMASK, r3
}
 8017b2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b30:	f3ef 8310 	mrs	r3, PRIMASK
 8017b34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8017b3a:	2301      	movs	r3, #1
 8017b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b40:	f383 8810 	msr	PRIMASK, r3
}
 8017b44:	46c0      	nop			@ (mov r8, r8)
 8017b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	689a      	ldr	r2, [r3, #8]
 8017b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2101      	movs	r1, #1
 8017b52:	438a      	bics	r2, r1
 8017b54:	609a      	str	r2, [r3, #8]
 8017b56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b5c:	f383 8810 	msr	PRIMASK, r3
}
 8017b60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b62:	f3ef 8310 	mrs	r3, PRIMASK
 8017b66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8017b6c:	2301      	movs	r3, #1
 8017b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b72:	f383 8810 	msr	PRIMASK, r3
}
 8017b76:	46c0      	nop			@ (mov r8, r8)
 8017b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	689a      	ldr	r2, [r3, #8]
 8017b7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	2140      	movs	r1, #64	@ 0x40
 8017b84:	438a      	bics	r2, r1
 8017b86:	609a      	str	r2, [r3, #8]
 8017b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b8e:	f383 8810 	msr	PRIMASK, r3
}
 8017b92:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b96:	2280      	movs	r2, #128	@ 0x80
 8017b98:	2120      	movs	r1, #32
 8017b9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017ba0:	2b01      	cmp	r3, #1
 8017ba2:	d118      	bne.n	8017bd6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8017ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8017baa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017bae:	2301      	movs	r3, #1
 8017bb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bb2:	693b      	ldr	r3, [r7, #16]
 8017bb4:	f383 8810 	msr	PRIMASK, r3
}
 8017bb8:	46c0      	nop			@ (mov r8, r8)
 8017bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	681a      	ldr	r2, [r3, #0]
 8017bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	2110      	movs	r1, #16
 8017bc6:	438a      	bics	r2, r1
 8017bc8:	601a      	str	r2, [r3, #0]
 8017bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	f383 8810 	msr	PRIMASK, r3
}
 8017bd4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bd8:	2200      	movs	r2, #0
 8017bda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017be0:	2b01      	cmp	r3, #1
 8017be2:	d109      	bne.n	8017bf8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8017be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017be6:	22ac      	movs	r2, #172	@ 0xac
 8017be8:	589b      	ldr	r3, [r3, r2]
 8017bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017bec:	2158      	movs	r1, #88	@ 0x58
 8017bee:	5a51      	ldrh	r1, [r2, r1]
 8017bf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017bf2:	0010      	movs	r0, r2
 8017bf4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017bf6:	e005      	b.n	8017c04 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8017bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bfa:	2294      	movs	r2, #148	@ 0x94
 8017bfc:	589b      	ldr	r3, [r3, r2]
 8017bfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017c00:	0010      	movs	r0, r2
 8017c02:	4798      	blx	r3
}
 8017c04:	46c0      	nop			@ (mov r8, r8)
 8017c06:	46bd      	mov	sp, r7
 8017c08:	b014      	add	sp, #80	@ 0x50
 8017c0a:	bd80      	pop	{r7, pc}
 8017c0c:	fffffeff 	.word	0xfffffeff

08017c10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b084      	sub	sp, #16
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	2201      	movs	r2, #1
 8017c22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017c28:	2b01      	cmp	r3, #1
 8017c2a:	d10b      	bne.n	8017c44 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	22ac      	movs	r2, #172	@ 0xac
 8017c30:	589b      	ldr	r3, [r3, r2]
 8017c32:	68fa      	ldr	r2, [r7, #12]
 8017c34:	2158      	movs	r1, #88	@ 0x58
 8017c36:	5a52      	ldrh	r2, [r2, r1]
 8017c38:	0852      	lsrs	r2, r2, #1
 8017c3a:	b291      	uxth	r1, r2
 8017c3c:	68fa      	ldr	r2, [r7, #12]
 8017c3e:	0010      	movs	r0, r2
 8017c40:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017c42:	e005      	b.n	8017c50 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	2290      	movs	r2, #144	@ 0x90
 8017c48:	589b      	ldr	r3, [r3, r2]
 8017c4a:	68fa      	ldr	r2, [r7, #12]
 8017c4c:	0010      	movs	r0, r2
 8017c4e:	4798      	blx	r3
}
 8017c50:	46c0      	nop			@ (mov r8, r8)
 8017c52:	46bd      	mov	sp, r7
 8017c54:	b004      	add	sp, #16
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b086      	sub	sp, #24
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8017c6c:	697b      	ldr	r3, [r7, #20]
 8017c6e:	2280      	movs	r2, #128	@ 0x80
 8017c70:	589b      	ldr	r3, [r3, r2]
 8017c72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	689b      	ldr	r3, [r3, #8]
 8017c7a:	2280      	movs	r2, #128	@ 0x80
 8017c7c:	4013      	ands	r3, r2
 8017c7e:	2b80      	cmp	r3, #128	@ 0x80
 8017c80:	d10a      	bne.n	8017c98 <UART_DMAError+0x40>
 8017c82:	693b      	ldr	r3, [r7, #16]
 8017c84:	2b21      	cmp	r3, #33	@ 0x21
 8017c86:	d107      	bne.n	8017c98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8017c88:	697b      	ldr	r3, [r7, #20]
 8017c8a:	2252      	movs	r2, #82	@ 0x52
 8017c8c:	2100      	movs	r1, #0
 8017c8e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017c90:	697b      	ldr	r3, [r7, #20]
 8017c92:	0018      	movs	r0, r3
 8017c94:	f7ff fe3a 	bl	801790c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	689b      	ldr	r3, [r3, #8]
 8017c9e:	2240      	movs	r2, #64	@ 0x40
 8017ca0:	4013      	ands	r3, r2
 8017ca2:	2b40      	cmp	r3, #64	@ 0x40
 8017ca4:	d10a      	bne.n	8017cbc <UART_DMAError+0x64>
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	2b22      	cmp	r3, #34	@ 0x22
 8017caa:	d107      	bne.n	8017cbc <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	225a      	movs	r2, #90	@ 0x5a
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	0018      	movs	r0, r3
 8017cb8:	f7ff fe4c 	bl	8017954 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	2284      	movs	r2, #132	@ 0x84
 8017cc0:	589b      	ldr	r3, [r3, r2]
 8017cc2:	2210      	movs	r2, #16
 8017cc4:	431a      	orrs	r2, r3
 8017cc6:	697b      	ldr	r3, [r7, #20]
 8017cc8:	2184      	movs	r1, #132	@ 0x84
 8017cca:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017ccc:	697b      	ldr	r3, [r7, #20]
 8017cce:	2298      	movs	r2, #152	@ 0x98
 8017cd0:	589b      	ldr	r3, [r3, r2]
 8017cd2:	697a      	ldr	r2, [r7, #20]
 8017cd4:	0010      	movs	r0, r2
 8017cd6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017cd8:	46c0      	nop			@ (mov r8, r8)
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	b006      	add	sp, #24
 8017cde:	bd80      	pop	{r7, pc}

08017ce0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b084      	sub	sp, #16
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	225a      	movs	r2, #90	@ 0x5a
 8017cf2:	2100      	movs	r1, #0
 8017cf4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	2252      	movs	r2, #82	@ 0x52
 8017cfa:	2100      	movs	r1, #0
 8017cfc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2298      	movs	r2, #152	@ 0x98
 8017d02:	589b      	ldr	r3, [r3, r2]
 8017d04:	68fa      	ldr	r2, [r7, #12]
 8017d06:	0010      	movs	r0, r2
 8017d08:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017d0a:	46c0      	nop			@ (mov r8, r8)
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	b004      	add	sp, #16
 8017d10:	bd80      	pop	{r7, pc}

08017d12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017d12:	b580      	push	{r7, lr}
 8017d14:	b086      	sub	sp, #24
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8017d1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017d20:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017d22:	617b      	str	r3, [r7, #20]
 8017d24:	2301      	movs	r3, #1
 8017d26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	f383 8810 	msr	PRIMASK, r3
}
 8017d2e:	46c0      	nop			@ (mov r8, r8)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	2140      	movs	r1, #64	@ 0x40
 8017d3c:	438a      	bics	r2, r1
 8017d3e:	601a      	str	r2, [r3, #0]
 8017d40:	697b      	ldr	r3, [r7, #20]
 8017d42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d44:	693b      	ldr	r3, [r7, #16]
 8017d46:	f383 8810 	msr	PRIMASK, r3
}
 8017d4a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	2220      	movs	r2, #32
 8017d50:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	2200      	movs	r2, #0
 8017d56:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	228c      	movs	r2, #140	@ 0x8c
 8017d5c:	589b      	ldr	r3, [r3, r2]
 8017d5e:	687a      	ldr	r2, [r7, #4]
 8017d60:	0010      	movs	r0, r2
 8017d62:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017d64:	46c0      	nop			@ (mov r8, r8)
 8017d66:	46bd      	mov	sp, r7
 8017d68:	b006      	add	sp, #24
 8017d6a:	bd80      	pop	{r7, pc}

08017d6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b094      	sub	sp, #80	@ 0x50
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017d74:	204e      	movs	r0, #78	@ 0x4e
 8017d76:	183b      	adds	r3, r7, r0
 8017d78:	687a      	ldr	r2, [r7, #4]
 8017d7a:	215c      	movs	r1, #92	@ 0x5c
 8017d7c:	5a52      	ldrh	r2, [r2, r1]
 8017d7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2280      	movs	r2, #128	@ 0x80
 8017d84:	589b      	ldr	r3, [r3, r2]
 8017d86:	2b22      	cmp	r3, #34	@ 0x22
 8017d88:	d000      	beq.n	8017d8c <UART_RxISR_8BIT+0x20>
 8017d8a:	e0c2      	b.n	8017f12 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017d92:	214c      	movs	r1, #76	@ 0x4c
 8017d94:	187b      	adds	r3, r7, r1
 8017d96:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017d98:	187b      	adds	r3, r7, r1
 8017d9a:	881b      	ldrh	r3, [r3, #0]
 8017d9c:	b2da      	uxtb	r2, r3
 8017d9e:	183b      	adds	r3, r7, r0
 8017da0:	881b      	ldrh	r3, [r3, #0]
 8017da2:	b2d9      	uxtb	r1, r3
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017da8:	400a      	ands	r2, r1
 8017daa:	b2d2      	uxtb	r2, r2
 8017dac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017db2:	1c5a      	adds	r2, r3, #1
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	225a      	movs	r2, #90	@ 0x5a
 8017dbc:	5a9b      	ldrh	r3, [r3, r2]
 8017dbe:	b29b      	uxth	r3, r3
 8017dc0:	3b01      	subs	r3, #1
 8017dc2:	b299      	uxth	r1, r3
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	225a      	movs	r2, #90	@ 0x5a
 8017dc8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	225a      	movs	r2, #90	@ 0x5a
 8017dce:	5a9b      	ldrh	r3, [r3, r2]
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d000      	beq.n	8017dd8 <UART_RxISR_8BIT+0x6c>
 8017dd6:	e0a4      	b.n	8017f22 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8017ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017de0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017de2:	2301      	movs	r3, #1
 8017de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017de8:	f383 8810 	msr	PRIMASK, r3
}
 8017dec:	46c0      	nop			@ (mov r8, r8)
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	681a      	ldr	r2, [r3, #0]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	494c      	ldr	r1, [pc, #304]	@ (8017f2c <UART_RxISR_8BIT+0x1c0>)
 8017dfa:	400a      	ands	r2, r1
 8017dfc:	601a      	str	r2, [r3, #0]
 8017dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e04:	f383 8810 	msr	PRIMASK, r3
}
 8017e08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8017e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8017e14:	2301      	movs	r3, #1
 8017e16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e1a:	f383 8810 	msr	PRIMASK, r3
}
 8017e1e:	46c0      	nop			@ (mov r8, r8)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	689a      	ldr	r2, [r3, #8]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2101      	movs	r1, #1
 8017e2c:	438a      	bics	r2, r1
 8017e2e:	609a      	str	r2, [r3, #8]
 8017e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017e32:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017e36:	f383 8810 	msr	PRIMASK, r3
}
 8017e3a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2280      	movs	r2, #128	@ 0x80
 8017e40:	2120      	movs	r1, #32
 8017e42:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	2200      	movs	r2, #0
 8017e48:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	4a36      	ldr	r2, [pc, #216]	@ (8017f30 <UART_RxISR_8BIT+0x1c4>)
 8017e56:	4293      	cmp	r3, r2
 8017e58:	d01f      	beq.n	8017e9a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	685a      	ldr	r2, [r3, #4]
 8017e60:	2380      	movs	r3, #128	@ 0x80
 8017e62:	041b      	lsls	r3, r3, #16
 8017e64:	4013      	ands	r3, r2
 8017e66:	d018      	beq.n	8017e9a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e68:	f3ef 8310 	mrs	r3, PRIMASK
 8017e6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8017e6e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017e70:	643b      	str	r3, [r7, #64]	@ 0x40
 8017e72:	2301      	movs	r3, #1
 8017e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	f383 8810 	msr	PRIMASK, r3
}
 8017e7c:	46c0      	nop			@ (mov r8, r8)
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	681a      	ldr	r2, [r3, #0]
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	492a      	ldr	r1, [pc, #168]	@ (8017f34 <UART_RxISR_8BIT+0x1c8>)
 8017e8a:	400a      	ands	r2, r1
 8017e8c:	601a      	str	r2, [r3, #0]
 8017e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017e90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e92:	6a3b      	ldr	r3, [r7, #32]
 8017e94:	f383 8810 	msr	PRIMASK, r3
}
 8017e98:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017e9e:	2b01      	cmp	r3, #1
 8017ea0:	d130      	bne.n	8017f04 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ea8:	f3ef 8310 	mrs	r3, PRIMASK
 8017eac:	60fb      	str	r3, [r7, #12]
  return(result);
 8017eae:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017eb6:	693b      	ldr	r3, [r7, #16]
 8017eb8:	f383 8810 	msr	PRIMASK, r3
}
 8017ebc:	46c0      	nop			@ (mov r8, r8)
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	681a      	ldr	r2, [r3, #0]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	2110      	movs	r1, #16
 8017eca:	438a      	bics	r2, r1
 8017ecc:	601a      	str	r2, [r3, #0]
 8017ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ed0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	f383 8810 	msr	PRIMASK, r3
}
 8017ed8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	69db      	ldr	r3, [r3, #28]
 8017ee0:	2210      	movs	r2, #16
 8017ee2:	4013      	ands	r3, r2
 8017ee4:	2b10      	cmp	r3, #16
 8017ee6:	d103      	bne.n	8017ef0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	2210      	movs	r2, #16
 8017eee:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	22ac      	movs	r2, #172	@ 0xac
 8017ef4:	589b      	ldr	r3, [r3, r2]
 8017ef6:	687a      	ldr	r2, [r7, #4]
 8017ef8:	2158      	movs	r1, #88	@ 0x58
 8017efa:	5a51      	ldrh	r1, [r2, r1]
 8017efc:	687a      	ldr	r2, [r7, #4]
 8017efe:	0010      	movs	r0, r2
 8017f00:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017f02:	e00e      	b.n	8017f22 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2294      	movs	r2, #148	@ 0x94
 8017f08:	589b      	ldr	r3, [r3, r2]
 8017f0a:	687a      	ldr	r2, [r7, #4]
 8017f0c:	0010      	movs	r0, r2
 8017f0e:	4798      	blx	r3
}
 8017f10:	e007      	b.n	8017f22 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	699a      	ldr	r2, [r3, #24]
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	2108      	movs	r1, #8
 8017f1e:	430a      	orrs	r2, r1
 8017f20:	619a      	str	r2, [r3, #24]
}
 8017f22:	46c0      	nop			@ (mov r8, r8)
 8017f24:	46bd      	mov	sp, r7
 8017f26:	b014      	add	sp, #80	@ 0x50
 8017f28:	bd80      	pop	{r7, pc}
 8017f2a:	46c0      	nop			@ (mov r8, r8)
 8017f2c:	fffffedf 	.word	0xfffffedf
 8017f30:	40004800 	.word	0x40004800
 8017f34:	fbffffff 	.word	0xfbffffff

08017f38 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b094      	sub	sp, #80	@ 0x50
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017f40:	204e      	movs	r0, #78	@ 0x4e
 8017f42:	183b      	adds	r3, r7, r0
 8017f44:	687a      	ldr	r2, [r7, #4]
 8017f46:	215c      	movs	r1, #92	@ 0x5c
 8017f48:	5a52      	ldrh	r2, [r2, r1]
 8017f4a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2280      	movs	r2, #128	@ 0x80
 8017f50:	589b      	ldr	r3, [r3, r2]
 8017f52:	2b22      	cmp	r3, #34	@ 0x22
 8017f54:	d000      	beq.n	8017f58 <UART_RxISR_16BIT+0x20>
 8017f56:	e0c2      	b.n	80180de <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017f5e:	214c      	movs	r1, #76	@ 0x4c
 8017f60:	187b      	adds	r3, r7, r1
 8017f62:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f68:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8017f6a:	187b      	adds	r3, r7, r1
 8017f6c:	183a      	adds	r2, r7, r0
 8017f6e:	881b      	ldrh	r3, [r3, #0]
 8017f70:	8812      	ldrh	r2, [r2, #0]
 8017f72:	4013      	ands	r3, r2
 8017f74:	b29a      	uxth	r2, r3
 8017f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f7e:	1c9a      	adds	r2, r3, #2
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	225a      	movs	r2, #90	@ 0x5a
 8017f88:	5a9b      	ldrh	r3, [r3, r2]
 8017f8a:	b29b      	uxth	r3, r3
 8017f8c:	3b01      	subs	r3, #1
 8017f8e:	b299      	uxth	r1, r3
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	225a      	movs	r2, #90	@ 0x5a
 8017f94:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	225a      	movs	r2, #90	@ 0x5a
 8017f9a:	5a9b      	ldrh	r3, [r3, r2]
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d000      	beq.n	8017fa4 <UART_RxISR_16BIT+0x6c>
 8017fa2:	e0a4      	b.n	80180ee <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8017fa8:	623b      	str	r3, [r7, #32]
  return(result);
 8017faa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8017fae:	2301      	movs	r3, #1
 8017fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fb4:	f383 8810 	msr	PRIMASK, r3
}
 8017fb8:	46c0      	nop			@ (mov r8, r8)
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	681a      	ldr	r2, [r3, #0]
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	494c      	ldr	r1, [pc, #304]	@ (80180f8 <UART_RxISR_16BIT+0x1c0>)
 8017fc6:	400a      	ands	r2, r1
 8017fc8:	601a      	str	r2, [r3, #0]
 8017fca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fd0:	f383 8810 	msr	PRIMASK, r3
}
 8017fd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8017fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8017fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fe6:	f383 8810 	msr	PRIMASK, r3
}
 8017fea:	46c0      	nop			@ (mov r8, r8)
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	689a      	ldr	r2, [r3, #8]
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	2101      	movs	r1, #1
 8017ff8:	438a      	bics	r2, r1
 8017ffa:	609a      	str	r2, [r3, #8]
 8017ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018002:	f383 8810 	msr	PRIMASK, r3
}
 8018006:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2280      	movs	r2, #128	@ 0x80
 801800c:	2120      	movs	r1, #32
 801800e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2200      	movs	r2, #0
 8018014:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2200      	movs	r2, #0
 801801a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	4a36      	ldr	r2, [pc, #216]	@ (80180fc <UART_RxISR_16BIT+0x1c4>)
 8018022:	4293      	cmp	r3, r2
 8018024:	d01f      	beq.n	8018066 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	685a      	ldr	r2, [r3, #4]
 801802c:	2380      	movs	r3, #128	@ 0x80
 801802e:	041b      	lsls	r3, r3, #16
 8018030:	4013      	ands	r3, r2
 8018032:	d018      	beq.n	8018066 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018034:	f3ef 8310 	mrs	r3, PRIMASK
 8018038:	617b      	str	r3, [r7, #20]
  return(result);
 801803a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801803c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801803e:	2301      	movs	r3, #1
 8018040:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018042:	69bb      	ldr	r3, [r7, #24]
 8018044:	f383 8810 	msr	PRIMASK, r3
}
 8018048:	46c0      	nop			@ (mov r8, r8)
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	492a      	ldr	r1, [pc, #168]	@ (8018100 <UART_RxISR_16BIT+0x1c8>)
 8018056:	400a      	ands	r2, r1
 8018058:	601a      	str	r2, [r3, #0]
 801805a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801805c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801805e:	69fb      	ldr	r3, [r7, #28]
 8018060:	f383 8810 	msr	PRIMASK, r3
}
 8018064:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801806a:	2b01      	cmp	r3, #1
 801806c:	d130      	bne.n	80180d0 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	2200      	movs	r2, #0
 8018072:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018074:	f3ef 8310 	mrs	r3, PRIMASK
 8018078:	60bb      	str	r3, [r7, #8]
  return(result);
 801807a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801807c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801807e:	2301      	movs	r3, #1
 8018080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	f383 8810 	msr	PRIMASK, r3
}
 8018088:	46c0      	nop			@ (mov r8, r8)
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	681a      	ldr	r2, [r3, #0]
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	2110      	movs	r1, #16
 8018096:	438a      	bics	r2, r1
 8018098:	601a      	str	r2, [r3, #0]
 801809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801809c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801809e:	693b      	ldr	r3, [r7, #16]
 80180a0:	f383 8810 	msr	PRIMASK, r3
}
 80180a4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	69db      	ldr	r3, [r3, #28]
 80180ac:	2210      	movs	r2, #16
 80180ae:	4013      	ands	r3, r2
 80180b0:	2b10      	cmp	r3, #16
 80180b2:	d103      	bne.n	80180bc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	2210      	movs	r2, #16
 80180ba:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	22ac      	movs	r2, #172	@ 0xac
 80180c0:	589b      	ldr	r3, [r3, r2]
 80180c2:	687a      	ldr	r2, [r7, #4]
 80180c4:	2158      	movs	r1, #88	@ 0x58
 80180c6:	5a51      	ldrh	r1, [r2, r1]
 80180c8:	687a      	ldr	r2, [r7, #4]
 80180ca:	0010      	movs	r0, r2
 80180cc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80180ce:	e00e      	b.n	80180ee <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	2294      	movs	r2, #148	@ 0x94
 80180d4:	589b      	ldr	r3, [r3, r2]
 80180d6:	687a      	ldr	r2, [r7, #4]
 80180d8:	0010      	movs	r0, r2
 80180da:	4798      	blx	r3
}
 80180dc:	e007      	b.n	80180ee <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	699a      	ldr	r2, [r3, #24]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	2108      	movs	r1, #8
 80180ea:	430a      	orrs	r2, r1
 80180ec:	619a      	str	r2, [r3, #24]
}
 80180ee:	46c0      	nop			@ (mov r8, r8)
 80180f0:	46bd      	mov	sp, r7
 80180f2:	b014      	add	sp, #80	@ 0x50
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	46c0      	nop			@ (mov r8, r8)
 80180f8:	fffffedf 	.word	0xfffffedf
 80180fc:	40004800 	.word	0x40004800
 8018100:	fbffffff 	.word	0xfbffffff

08018104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801810c:	46c0      	nop			@ (mov r8, r8)
 801810e:	46bd      	mov	sp, r7
 8018110:	b002      	add	sp, #8
 8018112:	bd80      	pop	{r7, pc}

08018114 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b084      	sub	sp, #16
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2244      	movs	r2, #68	@ 0x44
 8018120:	2100      	movs	r1, #0
 8018122:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018124:	4b05      	ldr	r3, [pc, #20]	@ (801813c <USB_EnableGlobalInt+0x28>)
 8018126:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	b299      	uxth	r1, r3
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	2240      	movs	r2, #64	@ 0x40
 8018130:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018132:	2300      	movs	r3, #0
}
 8018134:	0018      	movs	r0, r3
 8018136:	46bd      	mov	sp, r7
 8018138:	b004      	add	sp, #16
 801813a:	bd80      	pop	{r7, pc}
 801813c:	0000bf80 	.word	0x0000bf80

08018140 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018140:	b580      	push	{r7, lr}
 8018142:	b084      	sub	sp, #16
 8018144:	af00      	add	r7, sp, #0
 8018146:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018148:	4b09      	ldr	r3, [pc, #36]	@ (8018170 <USB_DisableGlobalInt+0x30>)
 801814a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	2240      	movs	r2, #64	@ 0x40
 8018150:	5a9b      	ldrh	r3, [r3, r2]
 8018152:	b29b      	uxth	r3, r3
 8018154:	68fa      	ldr	r2, [r7, #12]
 8018156:	b292      	uxth	r2, r2
 8018158:	43d2      	mvns	r2, r2
 801815a:	b292      	uxth	r2, r2
 801815c:	4013      	ands	r3, r2
 801815e:	b299      	uxth	r1, r3
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2240      	movs	r2, #64	@ 0x40
 8018164:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018166:	2300      	movs	r3, #0
}
 8018168:	0018      	movs	r0, r3
 801816a:	46bd      	mov	sp, r7
 801816c:	b004      	add	sp, #16
 801816e:	bd80      	pop	{r7, pc}
 8018170:	0000bf80 	.word	0x0000bf80

08018174 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018174:	b084      	sub	sp, #16
 8018176:	b590      	push	{r4, r7, lr}
 8018178:	b083      	sub	sp, #12
 801817a:	af00      	add	r7, sp, #0
 801817c:	6078      	str	r0, [r7, #4]
 801817e:	2004      	movs	r0, #4
 8018180:	2410      	movs	r4, #16
 8018182:	1900      	adds	r0, r0, r4
 8018184:	2408      	movs	r4, #8
 8018186:	46a4      	mov	ip, r4
 8018188:	44bc      	add	ip, r7
 801818a:	4460      	add	r0, ip
 801818c:	6001      	str	r1, [r0, #0]
 801818e:	6042      	str	r2, [r0, #4]
 8018190:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2240      	movs	r2, #64	@ 0x40
 8018196:	2101      	movs	r1, #1
 8018198:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2240      	movs	r2, #64	@ 0x40
 801819e:	2100      	movs	r1, #0
 80181a0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2244      	movs	r2, #68	@ 0x44
 80181a6:	2100      	movs	r1, #0
 80181a8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2250      	movs	r2, #80	@ 0x50
 80181ae:	2100      	movs	r1, #0
 80181b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80181b2:	2300      	movs	r3, #0
}
 80181b4:	0018      	movs	r0, r3
 80181b6:	46bd      	mov	sp, r7
 80181b8:	b003      	add	sp, #12
 80181ba:	bc90      	pop	{r4, r7}
 80181bc:	bc08      	pop	{r3}
 80181be:	b004      	add	sp, #16
 80181c0:	4718      	bx	r3
	...

080181c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b09c      	sub	sp, #112	@ 0x70
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80181ce:	236f      	movs	r3, #111	@ 0x6f
 80181d0:	18fb      	adds	r3, r7, r3
 80181d2:	2200      	movs	r2, #0
 80181d4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	781b      	ldrb	r3, [r3, #0]
 80181dc:	009b      	lsls	r3, r3, #2
 80181de:	18d3      	adds	r3, r2, r3
 80181e0:	881b      	ldrh	r3, [r3, #0]
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	236c      	movs	r3, #108	@ 0x6c
 80181e6:	18fb      	adds	r3, r7, r3
 80181e8:	49a3      	ldr	r1, [pc, #652]	@ (8018478 <USB_ActivateEndpoint+0x2b4>)
 80181ea:	400a      	ands	r2, r1
 80181ec:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80181ee:	683b      	ldr	r3, [r7, #0]
 80181f0:	78db      	ldrb	r3, [r3, #3]
 80181f2:	2b03      	cmp	r3, #3
 80181f4:	d017      	beq.n	8018226 <USB_ActivateEndpoint+0x62>
 80181f6:	dc28      	bgt.n	801824a <USB_ActivateEndpoint+0x86>
 80181f8:	2b02      	cmp	r3, #2
 80181fa:	d00e      	beq.n	801821a <USB_ActivateEndpoint+0x56>
 80181fc:	dc25      	bgt.n	801824a <USB_ActivateEndpoint+0x86>
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d002      	beq.n	8018208 <USB_ActivateEndpoint+0x44>
 8018202:	2b01      	cmp	r3, #1
 8018204:	d018      	beq.n	8018238 <USB_ActivateEndpoint+0x74>
 8018206:	e020      	b.n	801824a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8018208:	226c      	movs	r2, #108	@ 0x6c
 801820a:	18bb      	adds	r3, r7, r2
 801820c:	18ba      	adds	r2, r7, r2
 801820e:	8812      	ldrh	r2, [r2, #0]
 8018210:	2180      	movs	r1, #128	@ 0x80
 8018212:	0089      	lsls	r1, r1, #2
 8018214:	430a      	orrs	r2, r1
 8018216:	801a      	strh	r2, [r3, #0]
      break;
 8018218:	e01c      	b.n	8018254 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801821a:	226c      	movs	r2, #108	@ 0x6c
 801821c:	18bb      	adds	r3, r7, r2
 801821e:	18ba      	adds	r2, r7, r2
 8018220:	8812      	ldrh	r2, [r2, #0]
 8018222:	801a      	strh	r2, [r3, #0]
      break;
 8018224:	e016      	b.n	8018254 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8018226:	226c      	movs	r2, #108	@ 0x6c
 8018228:	18bb      	adds	r3, r7, r2
 801822a:	18ba      	adds	r2, r7, r2
 801822c:	8812      	ldrh	r2, [r2, #0]
 801822e:	21c0      	movs	r1, #192	@ 0xc0
 8018230:	00c9      	lsls	r1, r1, #3
 8018232:	430a      	orrs	r2, r1
 8018234:	801a      	strh	r2, [r3, #0]
      break;
 8018236:	e00d      	b.n	8018254 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8018238:	226c      	movs	r2, #108	@ 0x6c
 801823a:	18bb      	adds	r3, r7, r2
 801823c:	18ba      	adds	r2, r7, r2
 801823e:	8812      	ldrh	r2, [r2, #0]
 8018240:	2180      	movs	r1, #128	@ 0x80
 8018242:	00c9      	lsls	r1, r1, #3
 8018244:	430a      	orrs	r2, r1
 8018246:	801a      	strh	r2, [r3, #0]
      break;
 8018248:	e004      	b.n	8018254 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801824a:	236f      	movs	r3, #111	@ 0x6f
 801824c:	18fb      	adds	r3, r7, r3
 801824e:	2201      	movs	r2, #1
 8018250:	701a      	strb	r2, [r3, #0]
      break;
 8018252:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8018254:	687a      	ldr	r2, [r7, #4]
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	009b      	lsls	r3, r3, #2
 801825c:	18d3      	adds	r3, r2, r3
 801825e:	226c      	movs	r2, #108	@ 0x6c
 8018260:	18ba      	adds	r2, r7, r2
 8018262:	8812      	ldrh	r2, [r2, #0]
 8018264:	4985      	ldr	r1, [pc, #532]	@ (801847c <USB_ActivateEndpoint+0x2b8>)
 8018266:	430a      	orrs	r2, r1
 8018268:	b292      	uxth	r2, r2
 801826a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801826c:	687a      	ldr	r2, [r7, #4]
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	009b      	lsls	r3, r3, #2
 8018274:	18d3      	adds	r3, r2, r3
 8018276:	881b      	ldrh	r3, [r3, #0]
 8018278:	b29b      	uxth	r3, r3
 801827a:	b21b      	sxth	r3, r3
 801827c:	4a80      	ldr	r2, [pc, #512]	@ (8018480 <USB_ActivateEndpoint+0x2bc>)
 801827e:	4013      	ands	r3, r2
 8018280:	b21a      	sxth	r2, r3
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	781b      	ldrb	r3, [r3, #0]
 8018286:	b21b      	sxth	r3, r3
 8018288:	4313      	orrs	r3, r2
 801828a:	b21a      	sxth	r2, r3
 801828c:	2166      	movs	r1, #102	@ 0x66
 801828e:	187b      	adds	r3, r7, r1
 8018290:	801a      	strh	r2, [r3, #0]
 8018292:	687a      	ldr	r2, [r7, #4]
 8018294:	683b      	ldr	r3, [r7, #0]
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	009b      	lsls	r3, r3, #2
 801829a:	18d3      	adds	r3, r2, r3
 801829c:	187a      	adds	r2, r7, r1
 801829e:	8812      	ldrh	r2, [r2, #0]
 80182a0:	4976      	ldr	r1, [pc, #472]	@ (801847c <USB_ActivateEndpoint+0x2b8>)
 80182a2:	430a      	orrs	r2, r1
 80182a4:	b292      	uxth	r2, r2
 80182a6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	7b1b      	ldrb	r3, [r3, #12]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d000      	beq.n	80182b2 <USB_ActivateEndpoint+0xee>
 80182b0:	e178      	b.n	80185a4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80182b2:	683b      	ldr	r3, [r7, #0]
 80182b4:	785b      	ldrb	r3, [r3, #1]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d100      	bne.n	80182bc <USB_ActivateEndpoint+0xf8>
 80182ba:	e07a      	b.n	80183b2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	61bb      	str	r3, [r7, #24]
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2250      	movs	r2, #80	@ 0x50
 80182c4:	5a9b      	ldrh	r3, [r3, r2]
 80182c6:	b29b      	uxth	r3, r3
 80182c8:	001a      	movs	r2, r3
 80182ca:	69bb      	ldr	r3, [r7, #24]
 80182cc:	189b      	adds	r3, r3, r2
 80182ce:	61bb      	str	r3, [r7, #24]
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	781b      	ldrb	r3, [r3, #0]
 80182d4:	00da      	lsls	r2, r3, #3
 80182d6:	69bb      	ldr	r3, [r7, #24]
 80182d8:	18d3      	adds	r3, r2, r3
 80182da:	2280      	movs	r2, #128	@ 0x80
 80182dc:	00d2      	lsls	r2, r2, #3
 80182de:	4694      	mov	ip, r2
 80182e0:	4463      	add	r3, ip
 80182e2:	617b      	str	r3, [r7, #20]
 80182e4:	683b      	ldr	r3, [r7, #0]
 80182e6:	88db      	ldrh	r3, [r3, #6]
 80182e8:	085b      	lsrs	r3, r3, #1
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	18db      	adds	r3, r3, r3
 80182ee:	b29a      	uxth	r2, r3
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80182f4:	687a      	ldr	r2, [r7, #4]
 80182f6:	683b      	ldr	r3, [r7, #0]
 80182f8:	781b      	ldrb	r3, [r3, #0]
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	18d2      	adds	r2, r2, r3
 80182fe:	2112      	movs	r1, #18
 8018300:	187b      	adds	r3, r7, r1
 8018302:	8812      	ldrh	r2, [r2, #0]
 8018304:	801a      	strh	r2, [r3, #0]
 8018306:	187b      	adds	r3, r7, r1
 8018308:	881b      	ldrh	r3, [r3, #0]
 801830a:	2240      	movs	r2, #64	@ 0x40
 801830c:	4013      	ands	r3, r2
 801830e:	d016      	beq.n	801833e <USB_ActivateEndpoint+0x17a>
 8018310:	687a      	ldr	r2, [r7, #4]
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	781b      	ldrb	r3, [r3, #0]
 8018316:	009b      	lsls	r3, r3, #2
 8018318:	18d3      	adds	r3, r2, r3
 801831a:	881b      	ldrh	r3, [r3, #0]
 801831c:	b29a      	uxth	r2, r3
 801831e:	2010      	movs	r0, #16
 8018320:	183b      	adds	r3, r7, r0
 8018322:	4957      	ldr	r1, [pc, #348]	@ (8018480 <USB_ActivateEndpoint+0x2bc>)
 8018324:	400a      	ands	r2, r1
 8018326:	801a      	strh	r2, [r3, #0]
 8018328:	687a      	ldr	r2, [r7, #4]
 801832a:	683b      	ldr	r3, [r7, #0]
 801832c:	781b      	ldrb	r3, [r3, #0]
 801832e:	009b      	lsls	r3, r3, #2
 8018330:	18d3      	adds	r3, r2, r3
 8018332:	183a      	adds	r2, r7, r0
 8018334:	8812      	ldrh	r2, [r2, #0]
 8018336:	4953      	ldr	r1, [pc, #332]	@ (8018484 <USB_ActivateEndpoint+0x2c0>)
 8018338:	430a      	orrs	r2, r1
 801833a:	b292      	uxth	r2, r2
 801833c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	78db      	ldrb	r3, [r3, #3]
 8018342:	2b01      	cmp	r3, #1
 8018344:	d01d      	beq.n	8018382 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018346:	687a      	ldr	r2, [r7, #4]
 8018348:	683b      	ldr	r3, [r7, #0]
 801834a:	781b      	ldrb	r3, [r3, #0]
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	18d3      	adds	r3, r2, r3
 8018350:	881b      	ldrh	r3, [r3, #0]
 8018352:	b29a      	uxth	r2, r3
 8018354:	200c      	movs	r0, #12
 8018356:	183b      	adds	r3, r7, r0
 8018358:	494b      	ldr	r1, [pc, #300]	@ (8018488 <USB_ActivateEndpoint+0x2c4>)
 801835a:	400a      	ands	r2, r1
 801835c:	801a      	strh	r2, [r3, #0]
 801835e:	183b      	adds	r3, r7, r0
 8018360:	183a      	adds	r2, r7, r0
 8018362:	8812      	ldrh	r2, [r2, #0]
 8018364:	2120      	movs	r1, #32
 8018366:	404a      	eors	r2, r1
 8018368:	801a      	strh	r2, [r3, #0]
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	781b      	ldrb	r3, [r3, #0]
 8018370:	009b      	lsls	r3, r3, #2
 8018372:	18d3      	adds	r3, r2, r3
 8018374:	183a      	adds	r2, r7, r0
 8018376:	8812      	ldrh	r2, [r2, #0]
 8018378:	4940      	ldr	r1, [pc, #256]	@ (801847c <USB_ActivateEndpoint+0x2b8>)
 801837a:	430a      	orrs	r2, r1
 801837c:	b292      	uxth	r2, r2
 801837e:	801a      	strh	r2, [r3, #0]
 8018380:	e2b4      	b.n	80188ec <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018382:	687a      	ldr	r2, [r7, #4]
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	009b      	lsls	r3, r3, #2
 801838a:	18d3      	adds	r3, r2, r3
 801838c:	881b      	ldrh	r3, [r3, #0]
 801838e:	b29a      	uxth	r2, r3
 8018390:	200e      	movs	r0, #14
 8018392:	183b      	adds	r3, r7, r0
 8018394:	493c      	ldr	r1, [pc, #240]	@ (8018488 <USB_ActivateEndpoint+0x2c4>)
 8018396:	400a      	ands	r2, r1
 8018398:	801a      	strh	r2, [r3, #0]
 801839a:	687a      	ldr	r2, [r7, #4]
 801839c:	683b      	ldr	r3, [r7, #0]
 801839e:	781b      	ldrb	r3, [r3, #0]
 80183a0:	009b      	lsls	r3, r3, #2
 80183a2:	18d3      	adds	r3, r2, r3
 80183a4:	183a      	adds	r2, r7, r0
 80183a6:	8812      	ldrh	r2, [r2, #0]
 80183a8:	4934      	ldr	r1, [pc, #208]	@ (801847c <USB_ActivateEndpoint+0x2b8>)
 80183aa:	430a      	orrs	r2, r1
 80183ac:	b292      	uxth	r2, r2
 80183ae:	801a      	strh	r2, [r3, #0]
 80183b0:	e29c      	b.n	80188ec <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2250      	movs	r2, #80	@ 0x50
 80183ba:	5a9b      	ldrh	r3, [r3, r2]
 80183bc:	b29b      	uxth	r3, r3
 80183be:	001a      	movs	r2, r3
 80183c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183c2:	189b      	adds	r3, r3, r2
 80183c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	781b      	ldrb	r3, [r3, #0]
 80183ca:	00da      	lsls	r2, r3, #3
 80183cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183ce:	18d3      	adds	r3, r2, r3
 80183d0:	4a2e      	ldr	r2, [pc, #184]	@ (801848c <USB_ActivateEndpoint+0x2c8>)
 80183d2:	4694      	mov	ip, r2
 80183d4:	4463      	add	r3, ip
 80183d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80183d8:	683b      	ldr	r3, [r7, #0]
 80183da:	88db      	ldrh	r3, [r3, #6]
 80183dc:	085b      	lsrs	r3, r3, #1
 80183de:	b29b      	uxth	r3, r3
 80183e0:	18db      	adds	r3, r3, r3
 80183e2:	b29a      	uxth	r2, r3
 80183e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2250      	movs	r2, #80	@ 0x50
 80183f0:	5a9b      	ldrh	r3, [r3, r2]
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	001a      	movs	r2, r3
 80183f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183f8:	189b      	adds	r3, r3, r2
 80183fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80183fc:	683b      	ldr	r3, [r7, #0]
 80183fe:	781b      	ldrb	r3, [r3, #0]
 8018400:	00da      	lsls	r2, r3, #3
 8018402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018404:	18d3      	adds	r3, r2, r3
 8018406:	4a22      	ldr	r2, [pc, #136]	@ (8018490 <USB_ActivateEndpoint+0x2cc>)
 8018408:	4694      	mov	ip, r2
 801840a:	4463      	add	r3, ip
 801840c:	627b      	str	r3, [r7, #36]	@ 0x24
 801840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018410:	881b      	ldrh	r3, [r3, #0]
 8018412:	b29b      	uxth	r3, r3
 8018414:	059b      	lsls	r3, r3, #22
 8018416:	0d9b      	lsrs	r3, r3, #22
 8018418:	b29a      	uxth	r2, r3
 801841a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801841c:	801a      	strh	r2, [r3, #0]
 801841e:	683b      	ldr	r3, [r7, #0]
 8018420:	691b      	ldr	r3, [r3, #16]
 8018422:	2b3e      	cmp	r3, #62	@ 0x3e
 8018424:	d91a      	bls.n	801845c <USB_ActivateEndpoint+0x298>
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	691b      	ldr	r3, [r3, #16]
 801842a:	095b      	lsrs	r3, r3, #5
 801842c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	691b      	ldr	r3, [r3, #16]
 8018432:	221f      	movs	r2, #31
 8018434:	4013      	ands	r3, r2
 8018436:	d102      	bne.n	801843e <USB_ActivateEndpoint+0x27a>
 8018438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801843a:	3b01      	subs	r3, #1
 801843c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018440:	881b      	ldrh	r3, [r3, #0]
 8018442:	b29a      	uxth	r2, r3
 8018444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018446:	b29b      	uxth	r3, r3
 8018448:	029b      	lsls	r3, r3, #10
 801844a:	b29b      	uxth	r3, r3
 801844c:	4313      	orrs	r3, r2
 801844e:	b29b      	uxth	r3, r3
 8018450:	4a10      	ldr	r2, [pc, #64]	@ (8018494 <USB_ActivateEndpoint+0x2d0>)
 8018452:	4313      	orrs	r3, r2
 8018454:	b29a      	uxth	r2, r3
 8018456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018458:	801a      	strh	r2, [r3, #0]
 801845a:	e034      	b.n	80184c6 <USB_ActivateEndpoint+0x302>
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	691b      	ldr	r3, [r3, #16]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d119      	bne.n	8018498 <USB_ActivateEndpoint+0x2d4>
 8018464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018466:	881b      	ldrh	r3, [r3, #0]
 8018468:	b29b      	uxth	r3, r3
 801846a:	4a0a      	ldr	r2, [pc, #40]	@ (8018494 <USB_ActivateEndpoint+0x2d0>)
 801846c:	4313      	orrs	r3, r2
 801846e:	b29a      	uxth	r2, r3
 8018470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018472:	801a      	strh	r2, [r3, #0]
 8018474:	e027      	b.n	80184c6 <USB_ActivateEndpoint+0x302>
 8018476:	46c0      	nop			@ (mov r8, r8)
 8018478:	ffff898f 	.word	0xffff898f
 801847c:	ffff8080 	.word	0xffff8080
 8018480:	ffff8f8f 	.word	0xffff8f8f
 8018484:	ffff80c0 	.word	0xffff80c0
 8018488:	ffff8fbf 	.word	0xffff8fbf
 801848c:	00000404 	.word	0x00000404
 8018490:	00000406 	.word	0x00000406
 8018494:	ffff8000 	.word	0xffff8000
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	691b      	ldr	r3, [r3, #16]
 801849c:	085b      	lsrs	r3, r3, #1
 801849e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80184a0:	683b      	ldr	r3, [r7, #0]
 80184a2:	691b      	ldr	r3, [r3, #16]
 80184a4:	2201      	movs	r2, #1
 80184a6:	4013      	ands	r3, r2
 80184a8:	d002      	beq.n	80184b0 <USB_ActivateEndpoint+0x2ec>
 80184aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80184ac:	3301      	adds	r3, #1
 80184ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80184b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184b2:	881b      	ldrh	r3, [r3, #0]
 80184b4:	b29a      	uxth	r2, r3
 80184b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	029b      	lsls	r3, r3, #10
 80184bc:	b29b      	uxth	r3, r3
 80184be:	4313      	orrs	r3, r2
 80184c0:	b29a      	uxth	r2, r3
 80184c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	781b      	ldrb	r3, [r3, #0]
 80184cc:	009b      	lsls	r3, r3, #2
 80184ce:	18d2      	adds	r2, r2, r3
 80184d0:	2122      	movs	r1, #34	@ 0x22
 80184d2:	187b      	adds	r3, r7, r1
 80184d4:	8812      	ldrh	r2, [r2, #0]
 80184d6:	801a      	strh	r2, [r3, #0]
 80184d8:	187b      	adds	r3, r7, r1
 80184da:	881a      	ldrh	r2, [r3, #0]
 80184dc:	2380      	movs	r3, #128	@ 0x80
 80184de:	01db      	lsls	r3, r3, #7
 80184e0:	4013      	ands	r3, r2
 80184e2:	d016      	beq.n	8018512 <USB_ActivateEndpoint+0x34e>
 80184e4:	687a      	ldr	r2, [r7, #4]
 80184e6:	683b      	ldr	r3, [r7, #0]
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	18d3      	adds	r3, r2, r3
 80184ee:	881b      	ldrh	r3, [r3, #0]
 80184f0:	b29a      	uxth	r2, r3
 80184f2:	2020      	movs	r0, #32
 80184f4:	183b      	adds	r3, r7, r0
 80184f6:	49dd      	ldr	r1, [pc, #884]	@ (801886c <USB_ActivateEndpoint+0x6a8>)
 80184f8:	400a      	ands	r2, r1
 80184fa:	801a      	strh	r2, [r3, #0]
 80184fc:	687a      	ldr	r2, [r7, #4]
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	009b      	lsls	r3, r3, #2
 8018504:	18d3      	adds	r3, r2, r3
 8018506:	183a      	adds	r2, r7, r0
 8018508:	8812      	ldrh	r2, [r2, #0]
 801850a:	49d9      	ldr	r1, [pc, #868]	@ (8018870 <USB_ActivateEndpoint+0x6ac>)
 801850c:	430a      	orrs	r2, r1
 801850e:	b292      	uxth	r2, r2
 8018510:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	781b      	ldrb	r3, [r3, #0]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d125      	bne.n	8018566 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801851a:	687a      	ldr	r2, [r7, #4]
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	009b      	lsls	r3, r3, #2
 8018522:	18d3      	adds	r3, r2, r3
 8018524:	881b      	ldrh	r3, [r3, #0]
 8018526:	b29a      	uxth	r2, r3
 8018528:	201c      	movs	r0, #28
 801852a:	183b      	adds	r3, r7, r0
 801852c:	49d1      	ldr	r1, [pc, #836]	@ (8018874 <USB_ActivateEndpoint+0x6b0>)
 801852e:	400a      	ands	r2, r1
 8018530:	801a      	strh	r2, [r3, #0]
 8018532:	183b      	adds	r3, r7, r0
 8018534:	183a      	adds	r2, r7, r0
 8018536:	8812      	ldrh	r2, [r2, #0]
 8018538:	2180      	movs	r1, #128	@ 0x80
 801853a:	0149      	lsls	r1, r1, #5
 801853c:	404a      	eors	r2, r1
 801853e:	801a      	strh	r2, [r3, #0]
 8018540:	183b      	adds	r3, r7, r0
 8018542:	183a      	adds	r2, r7, r0
 8018544:	8812      	ldrh	r2, [r2, #0]
 8018546:	2180      	movs	r1, #128	@ 0x80
 8018548:	0189      	lsls	r1, r1, #6
 801854a:	404a      	eors	r2, r1
 801854c:	801a      	strh	r2, [r3, #0]
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	009b      	lsls	r3, r3, #2
 8018556:	18d3      	adds	r3, r2, r3
 8018558:	183a      	adds	r2, r7, r0
 801855a:	8812      	ldrh	r2, [r2, #0]
 801855c:	49c6      	ldr	r1, [pc, #792]	@ (8018878 <USB_ActivateEndpoint+0x6b4>)
 801855e:	430a      	orrs	r2, r1
 8018560:	b292      	uxth	r2, r2
 8018562:	801a      	strh	r2, [r3, #0]
 8018564:	e1c2      	b.n	80188ec <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8018566:	687a      	ldr	r2, [r7, #4]
 8018568:	683b      	ldr	r3, [r7, #0]
 801856a:	781b      	ldrb	r3, [r3, #0]
 801856c:	009b      	lsls	r3, r3, #2
 801856e:	18d3      	adds	r3, r2, r3
 8018570:	881b      	ldrh	r3, [r3, #0]
 8018572:	b29a      	uxth	r2, r3
 8018574:	201e      	movs	r0, #30
 8018576:	183b      	adds	r3, r7, r0
 8018578:	49be      	ldr	r1, [pc, #760]	@ (8018874 <USB_ActivateEndpoint+0x6b0>)
 801857a:	400a      	ands	r2, r1
 801857c:	801a      	strh	r2, [r3, #0]
 801857e:	183b      	adds	r3, r7, r0
 8018580:	183a      	adds	r2, r7, r0
 8018582:	8812      	ldrh	r2, [r2, #0]
 8018584:	2180      	movs	r1, #128	@ 0x80
 8018586:	0189      	lsls	r1, r1, #6
 8018588:	404a      	eors	r2, r1
 801858a:	801a      	strh	r2, [r3, #0]
 801858c:	687a      	ldr	r2, [r7, #4]
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	18d3      	adds	r3, r2, r3
 8018596:	183a      	adds	r2, r7, r0
 8018598:	8812      	ldrh	r2, [r2, #0]
 801859a:	49b7      	ldr	r1, [pc, #732]	@ (8018878 <USB_ActivateEndpoint+0x6b4>)
 801859c:	430a      	orrs	r2, r1
 801859e:	b292      	uxth	r2, r2
 80185a0:	801a      	strh	r2, [r3, #0]
 80185a2:	e1a3      	b.n	80188ec <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	78db      	ldrb	r3, [r3, #3]
 80185a8:	2b02      	cmp	r3, #2
 80185aa:	d117      	bne.n	80185dc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	18d3      	adds	r3, r2, r3
 80185b6:	881b      	ldrh	r3, [r3, #0]
 80185b8:	b29a      	uxth	r2, r3
 80185ba:	2062      	movs	r0, #98	@ 0x62
 80185bc:	183b      	adds	r3, r7, r0
 80185be:	49ab      	ldr	r1, [pc, #684]	@ (801886c <USB_ActivateEndpoint+0x6a8>)
 80185c0:	400a      	ands	r2, r1
 80185c2:	801a      	strh	r2, [r3, #0]
 80185c4:	687a      	ldr	r2, [r7, #4]
 80185c6:	683b      	ldr	r3, [r7, #0]
 80185c8:	781b      	ldrb	r3, [r3, #0]
 80185ca:	009b      	lsls	r3, r3, #2
 80185cc:	18d3      	adds	r3, r2, r3
 80185ce:	183a      	adds	r2, r7, r0
 80185d0:	8812      	ldrh	r2, [r2, #0]
 80185d2:	49aa      	ldr	r1, [pc, #680]	@ (801887c <USB_ActivateEndpoint+0x6b8>)
 80185d4:	430a      	orrs	r2, r1
 80185d6:	b292      	uxth	r2, r2
 80185d8:	801a      	strh	r2, [r3, #0]
 80185da:	e016      	b.n	801860a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80185dc:	687a      	ldr	r2, [r7, #4]
 80185de:	683b      	ldr	r3, [r7, #0]
 80185e0:	781b      	ldrb	r3, [r3, #0]
 80185e2:	009b      	lsls	r3, r3, #2
 80185e4:	18d3      	adds	r3, r2, r3
 80185e6:	881b      	ldrh	r3, [r3, #0]
 80185e8:	b29a      	uxth	r2, r3
 80185ea:	2064      	movs	r0, #100	@ 0x64
 80185ec:	183b      	adds	r3, r7, r0
 80185ee:	49a4      	ldr	r1, [pc, #656]	@ (8018880 <USB_ActivateEndpoint+0x6bc>)
 80185f0:	400a      	ands	r2, r1
 80185f2:	801a      	strh	r2, [r3, #0]
 80185f4:	687a      	ldr	r2, [r7, #4]
 80185f6:	683b      	ldr	r3, [r7, #0]
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	009b      	lsls	r3, r3, #2
 80185fc:	18d3      	adds	r3, r2, r3
 80185fe:	183a      	adds	r2, r7, r0
 8018600:	8812      	ldrh	r2, [r2, #0]
 8018602:	499d      	ldr	r1, [pc, #628]	@ (8018878 <USB_ActivateEndpoint+0x6b4>)
 8018604:	430a      	orrs	r2, r1
 8018606:	b292      	uxth	r2, r2
 8018608:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	2250      	movs	r2, #80	@ 0x50
 8018612:	5a9b      	ldrh	r3, [r3, r2]
 8018614:	b29b      	uxth	r3, r3
 8018616:	001a      	movs	r2, r3
 8018618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801861a:	189b      	adds	r3, r3, r2
 801861c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	00da      	lsls	r2, r3, #3
 8018624:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018626:	18d3      	adds	r3, r2, r3
 8018628:	2280      	movs	r2, #128	@ 0x80
 801862a:	00d2      	lsls	r2, r2, #3
 801862c:	4694      	mov	ip, r2
 801862e:	4463      	add	r3, ip
 8018630:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	891b      	ldrh	r3, [r3, #8]
 8018636:	085b      	lsrs	r3, r3, #1
 8018638:	b29b      	uxth	r3, r3
 801863a:	18db      	adds	r3, r3, r3
 801863c:	b29a      	uxth	r2, r3
 801863e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018640:	801a      	strh	r2, [r3, #0]
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	657b      	str	r3, [r7, #84]	@ 0x54
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	2250      	movs	r2, #80	@ 0x50
 801864a:	5a9b      	ldrh	r3, [r3, r2]
 801864c:	b29b      	uxth	r3, r3
 801864e:	001a      	movs	r2, r3
 8018650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018652:	189b      	adds	r3, r3, r2
 8018654:	657b      	str	r3, [r7, #84]	@ 0x54
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	781b      	ldrb	r3, [r3, #0]
 801865a:	00da      	lsls	r2, r3, #3
 801865c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801865e:	18d3      	adds	r3, r2, r3
 8018660:	4a88      	ldr	r2, [pc, #544]	@ (8018884 <USB_ActivateEndpoint+0x6c0>)
 8018662:	4694      	mov	ip, r2
 8018664:	4463      	add	r3, ip
 8018666:	653b      	str	r3, [r7, #80]	@ 0x50
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	895b      	ldrh	r3, [r3, #10]
 801866c:	085b      	lsrs	r3, r3, #1
 801866e:	b29b      	uxth	r3, r3
 8018670:	18db      	adds	r3, r3, r3
 8018672:	b29a      	uxth	r2, r3
 8018674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018676:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	785b      	ldrb	r3, [r3, #1]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d000      	beq.n	8018682 <USB_ActivateEndpoint+0x4be>
 8018680:	e087      	b.n	8018792 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018682:	687a      	ldr	r2, [r7, #4]
 8018684:	683b      	ldr	r3, [r7, #0]
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	009b      	lsls	r3, r3, #2
 801868a:	18d2      	adds	r2, r2, r3
 801868c:	2140      	movs	r1, #64	@ 0x40
 801868e:	187b      	adds	r3, r7, r1
 8018690:	8812      	ldrh	r2, [r2, #0]
 8018692:	801a      	strh	r2, [r3, #0]
 8018694:	187b      	adds	r3, r7, r1
 8018696:	881a      	ldrh	r2, [r3, #0]
 8018698:	2380      	movs	r3, #128	@ 0x80
 801869a:	01db      	lsls	r3, r3, #7
 801869c:	4013      	ands	r3, r2
 801869e:	d016      	beq.n	80186ce <USB_ActivateEndpoint+0x50a>
 80186a0:	687a      	ldr	r2, [r7, #4]
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	009b      	lsls	r3, r3, #2
 80186a8:	18d3      	adds	r3, r2, r3
 80186aa:	881b      	ldrh	r3, [r3, #0]
 80186ac:	b29a      	uxth	r2, r3
 80186ae:	203e      	movs	r0, #62	@ 0x3e
 80186b0:	183b      	adds	r3, r7, r0
 80186b2:	496e      	ldr	r1, [pc, #440]	@ (801886c <USB_ActivateEndpoint+0x6a8>)
 80186b4:	400a      	ands	r2, r1
 80186b6:	801a      	strh	r2, [r3, #0]
 80186b8:	687a      	ldr	r2, [r7, #4]
 80186ba:	683b      	ldr	r3, [r7, #0]
 80186bc:	781b      	ldrb	r3, [r3, #0]
 80186be:	009b      	lsls	r3, r3, #2
 80186c0:	18d3      	adds	r3, r2, r3
 80186c2:	183a      	adds	r2, r7, r0
 80186c4:	8812      	ldrh	r2, [r2, #0]
 80186c6:	496a      	ldr	r1, [pc, #424]	@ (8018870 <USB_ActivateEndpoint+0x6ac>)
 80186c8:	430a      	orrs	r2, r1
 80186ca:	b292      	uxth	r2, r2
 80186cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80186ce:	687a      	ldr	r2, [r7, #4]
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	009b      	lsls	r3, r3, #2
 80186d6:	18d2      	adds	r2, r2, r3
 80186d8:	213c      	movs	r1, #60	@ 0x3c
 80186da:	187b      	adds	r3, r7, r1
 80186dc:	8812      	ldrh	r2, [r2, #0]
 80186de:	801a      	strh	r2, [r3, #0]
 80186e0:	187b      	adds	r3, r7, r1
 80186e2:	881b      	ldrh	r3, [r3, #0]
 80186e4:	2240      	movs	r2, #64	@ 0x40
 80186e6:	4013      	ands	r3, r2
 80186e8:	d016      	beq.n	8018718 <USB_ActivateEndpoint+0x554>
 80186ea:	687a      	ldr	r2, [r7, #4]
 80186ec:	683b      	ldr	r3, [r7, #0]
 80186ee:	781b      	ldrb	r3, [r3, #0]
 80186f0:	009b      	lsls	r3, r3, #2
 80186f2:	18d3      	adds	r3, r2, r3
 80186f4:	881b      	ldrh	r3, [r3, #0]
 80186f6:	b29a      	uxth	r2, r3
 80186f8:	203a      	movs	r0, #58	@ 0x3a
 80186fa:	183b      	adds	r3, r7, r0
 80186fc:	495b      	ldr	r1, [pc, #364]	@ (801886c <USB_ActivateEndpoint+0x6a8>)
 80186fe:	400a      	ands	r2, r1
 8018700:	801a      	strh	r2, [r3, #0]
 8018702:	687a      	ldr	r2, [r7, #4]
 8018704:	683b      	ldr	r3, [r7, #0]
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	009b      	lsls	r3, r3, #2
 801870a:	18d3      	adds	r3, r2, r3
 801870c:	183a      	adds	r2, r7, r0
 801870e:	8812      	ldrh	r2, [r2, #0]
 8018710:	495d      	ldr	r1, [pc, #372]	@ (8018888 <USB_ActivateEndpoint+0x6c4>)
 8018712:	430a      	orrs	r2, r1
 8018714:	b292      	uxth	r2, r2
 8018716:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018718:	687a      	ldr	r2, [r7, #4]
 801871a:	683b      	ldr	r3, [r7, #0]
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	009b      	lsls	r3, r3, #2
 8018720:	18d3      	adds	r3, r2, r3
 8018722:	881b      	ldrh	r3, [r3, #0]
 8018724:	b29a      	uxth	r2, r3
 8018726:	2038      	movs	r0, #56	@ 0x38
 8018728:	183b      	adds	r3, r7, r0
 801872a:	4952      	ldr	r1, [pc, #328]	@ (8018874 <USB_ActivateEndpoint+0x6b0>)
 801872c:	400a      	ands	r2, r1
 801872e:	801a      	strh	r2, [r3, #0]
 8018730:	183b      	adds	r3, r7, r0
 8018732:	183a      	adds	r2, r7, r0
 8018734:	8812      	ldrh	r2, [r2, #0]
 8018736:	2180      	movs	r1, #128	@ 0x80
 8018738:	0149      	lsls	r1, r1, #5
 801873a:	404a      	eors	r2, r1
 801873c:	801a      	strh	r2, [r3, #0]
 801873e:	183b      	adds	r3, r7, r0
 8018740:	183a      	adds	r2, r7, r0
 8018742:	8812      	ldrh	r2, [r2, #0]
 8018744:	2180      	movs	r1, #128	@ 0x80
 8018746:	0189      	lsls	r1, r1, #6
 8018748:	404a      	eors	r2, r1
 801874a:	801a      	strh	r2, [r3, #0]
 801874c:	687a      	ldr	r2, [r7, #4]
 801874e:	683b      	ldr	r3, [r7, #0]
 8018750:	781b      	ldrb	r3, [r3, #0]
 8018752:	009b      	lsls	r3, r3, #2
 8018754:	18d3      	adds	r3, r2, r3
 8018756:	183a      	adds	r2, r7, r0
 8018758:	8812      	ldrh	r2, [r2, #0]
 801875a:	4947      	ldr	r1, [pc, #284]	@ (8018878 <USB_ActivateEndpoint+0x6b4>)
 801875c:	430a      	orrs	r2, r1
 801875e:	b292      	uxth	r2, r2
 8018760:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018762:	687a      	ldr	r2, [r7, #4]
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	781b      	ldrb	r3, [r3, #0]
 8018768:	009b      	lsls	r3, r3, #2
 801876a:	18d3      	adds	r3, r2, r3
 801876c:	881b      	ldrh	r3, [r3, #0]
 801876e:	b29a      	uxth	r2, r3
 8018770:	2036      	movs	r0, #54	@ 0x36
 8018772:	183b      	adds	r3, r7, r0
 8018774:	4945      	ldr	r1, [pc, #276]	@ (801888c <USB_ActivateEndpoint+0x6c8>)
 8018776:	400a      	ands	r2, r1
 8018778:	801a      	strh	r2, [r3, #0]
 801877a:	687a      	ldr	r2, [r7, #4]
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	009b      	lsls	r3, r3, #2
 8018782:	18d3      	adds	r3, r2, r3
 8018784:	183a      	adds	r2, r7, r0
 8018786:	8812      	ldrh	r2, [r2, #0]
 8018788:	493b      	ldr	r1, [pc, #236]	@ (8018878 <USB_ActivateEndpoint+0x6b4>)
 801878a:	430a      	orrs	r2, r1
 801878c:	b292      	uxth	r2, r2
 801878e:	801a      	strh	r2, [r3, #0]
 8018790:	e0ac      	b.n	80188ec <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018792:	687a      	ldr	r2, [r7, #4]
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	781b      	ldrb	r3, [r3, #0]
 8018798:	009b      	lsls	r3, r3, #2
 801879a:	18d2      	adds	r2, r2, r3
 801879c:	214e      	movs	r1, #78	@ 0x4e
 801879e:	187b      	adds	r3, r7, r1
 80187a0:	8812      	ldrh	r2, [r2, #0]
 80187a2:	801a      	strh	r2, [r3, #0]
 80187a4:	187b      	adds	r3, r7, r1
 80187a6:	881a      	ldrh	r2, [r3, #0]
 80187a8:	2380      	movs	r3, #128	@ 0x80
 80187aa:	01db      	lsls	r3, r3, #7
 80187ac:	4013      	ands	r3, r2
 80187ae:	d016      	beq.n	80187de <USB_ActivateEndpoint+0x61a>
 80187b0:	687a      	ldr	r2, [r7, #4]
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	009b      	lsls	r3, r3, #2
 80187b8:	18d3      	adds	r3, r2, r3
 80187ba:	881b      	ldrh	r3, [r3, #0]
 80187bc:	b29a      	uxth	r2, r3
 80187be:	204c      	movs	r0, #76	@ 0x4c
 80187c0:	183b      	adds	r3, r7, r0
 80187c2:	492a      	ldr	r1, [pc, #168]	@ (801886c <USB_ActivateEndpoint+0x6a8>)
 80187c4:	400a      	ands	r2, r1
 80187c6:	801a      	strh	r2, [r3, #0]
 80187c8:	687a      	ldr	r2, [r7, #4]
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	781b      	ldrb	r3, [r3, #0]
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	18d3      	adds	r3, r2, r3
 80187d2:	183a      	adds	r2, r7, r0
 80187d4:	8812      	ldrh	r2, [r2, #0]
 80187d6:	4926      	ldr	r1, [pc, #152]	@ (8018870 <USB_ActivateEndpoint+0x6ac>)
 80187d8:	430a      	orrs	r2, r1
 80187da:	b292      	uxth	r2, r2
 80187dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80187de:	687a      	ldr	r2, [r7, #4]
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	009b      	lsls	r3, r3, #2
 80187e6:	18d2      	adds	r2, r2, r3
 80187e8:	214a      	movs	r1, #74	@ 0x4a
 80187ea:	187b      	adds	r3, r7, r1
 80187ec:	8812      	ldrh	r2, [r2, #0]
 80187ee:	801a      	strh	r2, [r3, #0]
 80187f0:	187b      	adds	r3, r7, r1
 80187f2:	881b      	ldrh	r3, [r3, #0]
 80187f4:	2240      	movs	r2, #64	@ 0x40
 80187f6:	4013      	ands	r3, r2
 80187f8:	d016      	beq.n	8018828 <USB_ActivateEndpoint+0x664>
 80187fa:	687a      	ldr	r2, [r7, #4]
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	781b      	ldrb	r3, [r3, #0]
 8018800:	009b      	lsls	r3, r3, #2
 8018802:	18d3      	adds	r3, r2, r3
 8018804:	881b      	ldrh	r3, [r3, #0]
 8018806:	b29a      	uxth	r2, r3
 8018808:	2048      	movs	r0, #72	@ 0x48
 801880a:	183b      	adds	r3, r7, r0
 801880c:	4917      	ldr	r1, [pc, #92]	@ (801886c <USB_ActivateEndpoint+0x6a8>)
 801880e:	400a      	ands	r2, r1
 8018810:	801a      	strh	r2, [r3, #0]
 8018812:	687a      	ldr	r2, [r7, #4]
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	781b      	ldrb	r3, [r3, #0]
 8018818:	009b      	lsls	r3, r3, #2
 801881a:	18d3      	adds	r3, r2, r3
 801881c:	183a      	adds	r2, r7, r0
 801881e:	8812      	ldrh	r2, [r2, #0]
 8018820:	4919      	ldr	r1, [pc, #100]	@ (8018888 <USB_ActivateEndpoint+0x6c4>)
 8018822:	430a      	orrs	r2, r1
 8018824:	b292      	uxth	r2, r2
 8018826:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	78db      	ldrb	r3, [r3, #3]
 801882c:	2b01      	cmp	r3, #1
 801882e:	d02f      	beq.n	8018890 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018830:	687a      	ldr	r2, [r7, #4]
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	009b      	lsls	r3, r3, #2
 8018838:	18d3      	adds	r3, r2, r3
 801883a:	881b      	ldrh	r3, [r3, #0]
 801883c:	b29a      	uxth	r2, r3
 801883e:	2044      	movs	r0, #68	@ 0x44
 8018840:	183b      	adds	r3, r7, r0
 8018842:	4912      	ldr	r1, [pc, #72]	@ (801888c <USB_ActivateEndpoint+0x6c8>)
 8018844:	400a      	ands	r2, r1
 8018846:	801a      	strh	r2, [r3, #0]
 8018848:	183b      	adds	r3, r7, r0
 801884a:	183a      	adds	r2, r7, r0
 801884c:	8812      	ldrh	r2, [r2, #0]
 801884e:	2120      	movs	r1, #32
 8018850:	404a      	eors	r2, r1
 8018852:	801a      	strh	r2, [r3, #0]
 8018854:	687a      	ldr	r2, [r7, #4]
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	781b      	ldrb	r3, [r3, #0]
 801885a:	009b      	lsls	r3, r3, #2
 801885c:	18d3      	adds	r3, r2, r3
 801885e:	183a      	adds	r2, r7, r0
 8018860:	8812      	ldrh	r2, [r2, #0]
 8018862:	4905      	ldr	r1, [pc, #20]	@ (8018878 <USB_ActivateEndpoint+0x6b4>)
 8018864:	430a      	orrs	r2, r1
 8018866:	b292      	uxth	r2, r2
 8018868:	801a      	strh	r2, [r3, #0]
 801886a:	e028      	b.n	80188be <USB_ActivateEndpoint+0x6fa>
 801886c:	ffff8f8f 	.word	0xffff8f8f
 8018870:	ffffc080 	.word	0xffffc080
 8018874:	ffffbf8f 	.word	0xffffbf8f
 8018878:	ffff8080 	.word	0xffff8080
 801887c:	ffff8180 	.word	0xffff8180
 8018880:	ffff8e8f 	.word	0xffff8e8f
 8018884:	00000404 	.word	0x00000404
 8018888:	ffff80c0 	.word	0xffff80c0
 801888c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018890:	687a      	ldr	r2, [r7, #4]
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	009b      	lsls	r3, r3, #2
 8018898:	18d3      	adds	r3, r2, r3
 801889a:	881b      	ldrh	r3, [r3, #0]
 801889c:	b29a      	uxth	r2, r3
 801889e:	2046      	movs	r0, #70	@ 0x46
 80188a0:	183b      	adds	r3, r7, r0
 80188a2:	4916      	ldr	r1, [pc, #88]	@ (80188fc <USB_ActivateEndpoint+0x738>)
 80188a4:	400a      	ands	r2, r1
 80188a6:	801a      	strh	r2, [r3, #0]
 80188a8:	687a      	ldr	r2, [r7, #4]
 80188aa:	683b      	ldr	r3, [r7, #0]
 80188ac:	781b      	ldrb	r3, [r3, #0]
 80188ae:	009b      	lsls	r3, r3, #2
 80188b0:	18d3      	adds	r3, r2, r3
 80188b2:	183a      	adds	r2, r7, r0
 80188b4:	8812      	ldrh	r2, [r2, #0]
 80188b6:	4912      	ldr	r1, [pc, #72]	@ (8018900 <USB_ActivateEndpoint+0x73c>)
 80188b8:	430a      	orrs	r2, r1
 80188ba:	b292      	uxth	r2, r2
 80188bc:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80188be:	687a      	ldr	r2, [r7, #4]
 80188c0:	683b      	ldr	r3, [r7, #0]
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	009b      	lsls	r3, r3, #2
 80188c6:	18d3      	adds	r3, r2, r3
 80188c8:	881b      	ldrh	r3, [r3, #0]
 80188ca:	b29a      	uxth	r2, r3
 80188cc:	2042      	movs	r0, #66	@ 0x42
 80188ce:	183b      	adds	r3, r7, r0
 80188d0:	490c      	ldr	r1, [pc, #48]	@ (8018904 <USB_ActivateEndpoint+0x740>)
 80188d2:	400a      	ands	r2, r1
 80188d4:	801a      	strh	r2, [r3, #0]
 80188d6:	687a      	ldr	r2, [r7, #4]
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	009b      	lsls	r3, r3, #2
 80188de:	18d3      	adds	r3, r2, r3
 80188e0:	183a      	adds	r2, r7, r0
 80188e2:	8812      	ldrh	r2, [r2, #0]
 80188e4:	4906      	ldr	r1, [pc, #24]	@ (8018900 <USB_ActivateEndpoint+0x73c>)
 80188e6:	430a      	orrs	r2, r1
 80188e8:	b292      	uxth	r2, r2
 80188ea:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80188ec:	236f      	movs	r3, #111	@ 0x6f
 80188ee:	18fb      	adds	r3, r7, r3
 80188f0:	781b      	ldrb	r3, [r3, #0]
}
 80188f2:	0018      	movs	r0, r3
 80188f4:	46bd      	mov	sp, r7
 80188f6:	b01c      	add	sp, #112	@ 0x70
 80188f8:	bd80      	pop	{r7, pc}
 80188fa:	46c0      	nop			@ (mov r8, r8)
 80188fc:	ffff8fbf 	.word	0xffff8fbf
 8018900:	ffff8080 	.word	0xffff8080
 8018904:	ffffbf8f 	.word	0xffffbf8f

08018908 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b08c      	sub	sp, #48	@ 0x30
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
 8018910:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018912:	683b      	ldr	r3, [r7, #0]
 8018914:	7b1b      	ldrb	r3, [r3, #12]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d000      	beq.n	801891c <USB_DeactivateEndpoint+0x14>
 801891a:	e07e      	b.n	8018a1a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	785b      	ldrb	r3, [r3, #1]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d03c      	beq.n	801899e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018924:	687a      	ldr	r2, [r7, #4]
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	781b      	ldrb	r3, [r3, #0]
 801892a:	009b      	lsls	r3, r3, #2
 801892c:	18d2      	adds	r2, r2, r3
 801892e:	210c      	movs	r1, #12
 8018930:	187b      	adds	r3, r7, r1
 8018932:	8812      	ldrh	r2, [r2, #0]
 8018934:	801a      	strh	r2, [r3, #0]
 8018936:	187b      	adds	r3, r7, r1
 8018938:	881b      	ldrh	r3, [r3, #0]
 801893a:	2240      	movs	r2, #64	@ 0x40
 801893c:	4013      	ands	r3, r2
 801893e:	d016      	beq.n	801896e <USB_DeactivateEndpoint+0x66>
 8018940:	687a      	ldr	r2, [r7, #4]
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	18d3      	adds	r3, r2, r3
 801894a:	881b      	ldrh	r3, [r3, #0]
 801894c:	b29a      	uxth	r2, r3
 801894e:	200a      	movs	r0, #10
 8018950:	183b      	adds	r3, r7, r0
 8018952:	49c7      	ldr	r1, [pc, #796]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 8018954:	400a      	ands	r2, r1
 8018956:	801a      	strh	r2, [r3, #0]
 8018958:	687a      	ldr	r2, [r7, #4]
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	781b      	ldrb	r3, [r3, #0]
 801895e:	009b      	lsls	r3, r3, #2
 8018960:	18d3      	adds	r3, r2, r3
 8018962:	183a      	adds	r2, r7, r0
 8018964:	8812      	ldrh	r2, [r2, #0]
 8018966:	49c3      	ldr	r1, [pc, #780]	@ (8018c74 <USB_DeactivateEndpoint+0x36c>)
 8018968:	430a      	orrs	r2, r1
 801896a:	b292      	uxth	r2, r2
 801896c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801896e:	687a      	ldr	r2, [r7, #4]
 8018970:	683b      	ldr	r3, [r7, #0]
 8018972:	781b      	ldrb	r3, [r3, #0]
 8018974:	009b      	lsls	r3, r3, #2
 8018976:	18d3      	adds	r3, r2, r3
 8018978:	881b      	ldrh	r3, [r3, #0]
 801897a:	b29a      	uxth	r2, r3
 801897c:	2008      	movs	r0, #8
 801897e:	183b      	adds	r3, r7, r0
 8018980:	49bd      	ldr	r1, [pc, #756]	@ (8018c78 <USB_DeactivateEndpoint+0x370>)
 8018982:	400a      	ands	r2, r1
 8018984:	801a      	strh	r2, [r3, #0]
 8018986:	687a      	ldr	r2, [r7, #4]
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	781b      	ldrb	r3, [r3, #0]
 801898c:	009b      	lsls	r3, r3, #2
 801898e:	18d3      	adds	r3, r2, r3
 8018990:	183a      	adds	r2, r7, r0
 8018992:	8812      	ldrh	r2, [r2, #0]
 8018994:	49b9      	ldr	r1, [pc, #740]	@ (8018c7c <USB_DeactivateEndpoint+0x374>)
 8018996:	430a      	orrs	r2, r1
 8018998:	b292      	uxth	r2, r2
 801899a:	801a      	strh	r2, [r3, #0]
 801899c:	e163      	b.n	8018c66 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	009b      	lsls	r3, r3, #2
 80189a6:	18d2      	adds	r2, r2, r3
 80189a8:	2112      	movs	r1, #18
 80189aa:	187b      	adds	r3, r7, r1
 80189ac:	8812      	ldrh	r2, [r2, #0]
 80189ae:	801a      	strh	r2, [r3, #0]
 80189b0:	187b      	adds	r3, r7, r1
 80189b2:	881a      	ldrh	r2, [r3, #0]
 80189b4:	2380      	movs	r3, #128	@ 0x80
 80189b6:	01db      	lsls	r3, r3, #7
 80189b8:	4013      	ands	r3, r2
 80189ba:	d016      	beq.n	80189ea <USB_DeactivateEndpoint+0xe2>
 80189bc:	687a      	ldr	r2, [r7, #4]
 80189be:	683b      	ldr	r3, [r7, #0]
 80189c0:	781b      	ldrb	r3, [r3, #0]
 80189c2:	009b      	lsls	r3, r3, #2
 80189c4:	18d3      	adds	r3, r2, r3
 80189c6:	881b      	ldrh	r3, [r3, #0]
 80189c8:	b29a      	uxth	r2, r3
 80189ca:	2010      	movs	r0, #16
 80189cc:	183b      	adds	r3, r7, r0
 80189ce:	49a8      	ldr	r1, [pc, #672]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 80189d0:	400a      	ands	r2, r1
 80189d2:	801a      	strh	r2, [r3, #0]
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	683b      	ldr	r3, [r7, #0]
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	009b      	lsls	r3, r3, #2
 80189dc:	18d3      	adds	r3, r2, r3
 80189de:	183a      	adds	r2, r7, r0
 80189e0:	8812      	ldrh	r2, [r2, #0]
 80189e2:	49a7      	ldr	r1, [pc, #668]	@ (8018c80 <USB_DeactivateEndpoint+0x378>)
 80189e4:	430a      	orrs	r2, r1
 80189e6:	b292      	uxth	r2, r2
 80189e8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80189ea:	687a      	ldr	r2, [r7, #4]
 80189ec:	683b      	ldr	r3, [r7, #0]
 80189ee:	781b      	ldrb	r3, [r3, #0]
 80189f0:	009b      	lsls	r3, r3, #2
 80189f2:	18d3      	adds	r3, r2, r3
 80189f4:	881b      	ldrh	r3, [r3, #0]
 80189f6:	b29a      	uxth	r2, r3
 80189f8:	200e      	movs	r0, #14
 80189fa:	183b      	adds	r3, r7, r0
 80189fc:	49a1      	ldr	r1, [pc, #644]	@ (8018c84 <USB_DeactivateEndpoint+0x37c>)
 80189fe:	400a      	ands	r2, r1
 8018a00:	801a      	strh	r2, [r3, #0]
 8018a02:	687a      	ldr	r2, [r7, #4]
 8018a04:	683b      	ldr	r3, [r7, #0]
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	009b      	lsls	r3, r3, #2
 8018a0a:	18d3      	adds	r3, r2, r3
 8018a0c:	183a      	adds	r2, r7, r0
 8018a0e:	8812      	ldrh	r2, [r2, #0]
 8018a10:	499a      	ldr	r1, [pc, #616]	@ (8018c7c <USB_DeactivateEndpoint+0x374>)
 8018a12:	430a      	orrs	r2, r1
 8018a14:	b292      	uxth	r2, r2
 8018a16:	801a      	strh	r2, [r3, #0]
 8018a18:	e125      	b.n	8018c66 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8018a1a:	683b      	ldr	r3, [r7, #0]
 8018a1c:	785b      	ldrb	r3, [r3, #1]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d000      	beq.n	8018a24 <USB_DeactivateEndpoint+0x11c>
 8018a22:	e090      	b.n	8018b46 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018a24:	687a      	ldr	r2, [r7, #4]
 8018a26:	683b      	ldr	r3, [r7, #0]
 8018a28:	781b      	ldrb	r3, [r3, #0]
 8018a2a:	009b      	lsls	r3, r3, #2
 8018a2c:	18d2      	adds	r2, r2, r3
 8018a2e:	2120      	movs	r1, #32
 8018a30:	187b      	adds	r3, r7, r1
 8018a32:	8812      	ldrh	r2, [r2, #0]
 8018a34:	801a      	strh	r2, [r3, #0]
 8018a36:	187b      	adds	r3, r7, r1
 8018a38:	881a      	ldrh	r2, [r3, #0]
 8018a3a:	2380      	movs	r3, #128	@ 0x80
 8018a3c:	01db      	lsls	r3, r3, #7
 8018a3e:	4013      	ands	r3, r2
 8018a40:	d016      	beq.n	8018a70 <USB_DeactivateEndpoint+0x168>
 8018a42:	687a      	ldr	r2, [r7, #4]
 8018a44:	683b      	ldr	r3, [r7, #0]
 8018a46:	781b      	ldrb	r3, [r3, #0]
 8018a48:	009b      	lsls	r3, r3, #2
 8018a4a:	18d3      	adds	r3, r2, r3
 8018a4c:	881b      	ldrh	r3, [r3, #0]
 8018a4e:	b29a      	uxth	r2, r3
 8018a50:	201e      	movs	r0, #30
 8018a52:	183b      	adds	r3, r7, r0
 8018a54:	4986      	ldr	r1, [pc, #536]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 8018a56:	400a      	ands	r2, r1
 8018a58:	801a      	strh	r2, [r3, #0]
 8018a5a:	687a      	ldr	r2, [r7, #4]
 8018a5c:	683b      	ldr	r3, [r7, #0]
 8018a5e:	781b      	ldrb	r3, [r3, #0]
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	18d3      	adds	r3, r2, r3
 8018a64:	183a      	adds	r2, r7, r0
 8018a66:	8812      	ldrh	r2, [r2, #0]
 8018a68:	4985      	ldr	r1, [pc, #532]	@ (8018c80 <USB_DeactivateEndpoint+0x378>)
 8018a6a:	430a      	orrs	r2, r1
 8018a6c:	b292      	uxth	r2, r2
 8018a6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	18d2      	adds	r2, r2, r3
 8018a7a:	211c      	movs	r1, #28
 8018a7c:	187b      	adds	r3, r7, r1
 8018a7e:	8812      	ldrh	r2, [r2, #0]
 8018a80:	801a      	strh	r2, [r3, #0]
 8018a82:	187b      	adds	r3, r7, r1
 8018a84:	881b      	ldrh	r3, [r3, #0]
 8018a86:	2240      	movs	r2, #64	@ 0x40
 8018a88:	4013      	ands	r3, r2
 8018a8a:	d016      	beq.n	8018aba <USB_DeactivateEndpoint+0x1b2>
 8018a8c:	687a      	ldr	r2, [r7, #4]
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	009b      	lsls	r3, r3, #2
 8018a94:	18d3      	adds	r3, r2, r3
 8018a96:	881b      	ldrh	r3, [r3, #0]
 8018a98:	b29a      	uxth	r2, r3
 8018a9a:	201a      	movs	r0, #26
 8018a9c:	183b      	adds	r3, r7, r0
 8018a9e:	4974      	ldr	r1, [pc, #464]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 8018aa0:	400a      	ands	r2, r1
 8018aa2:	801a      	strh	r2, [r3, #0]
 8018aa4:	687a      	ldr	r2, [r7, #4]
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	18d3      	adds	r3, r2, r3
 8018aae:	183a      	adds	r2, r7, r0
 8018ab0:	8812      	ldrh	r2, [r2, #0]
 8018ab2:	4970      	ldr	r1, [pc, #448]	@ (8018c74 <USB_DeactivateEndpoint+0x36c>)
 8018ab4:	430a      	orrs	r2, r1
 8018ab6:	b292      	uxth	r2, r2
 8018ab8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	781b      	ldrb	r3, [r3, #0]
 8018ac0:	009b      	lsls	r3, r3, #2
 8018ac2:	18d3      	adds	r3, r2, r3
 8018ac4:	881b      	ldrh	r3, [r3, #0]
 8018ac6:	b29a      	uxth	r2, r3
 8018ac8:	2018      	movs	r0, #24
 8018aca:	183b      	adds	r3, r7, r0
 8018acc:	4968      	ldr	r1, [pc, #416]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 8018ace:	400a      	ands	r2, r1
 8018ad0:	801a      	strh	r2, [r3, #0]
 8018ad2:	687a      	ldr	r2, [r7, #4]
 8018ad4:	683b      	ldr	r3, [r7, #0]
 8018ad6:	781b      	ldrb	r3, [r3, #0]
 8018ad8:	009b      	lsls	r3, r3, #2
 8018ada:	18d3      	adds	r3, r2, r3
 8018adc:	183a      	adds	r2, r7, r0
 8018ade:	8812      	ldrh	r2, [r2, #0]
 8018ae0:	4964      	ldr	r1, [pc, #400]	@ (8018c74 <USB_DeactivateEndpoint+0x36c>)
 8018ae2:	430a      	orrs	r2, r1
 8018ae4:	b292      	uxth	r2, r2
 8018ae6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018ae8:	687a      	ldr	r2, [r7, #4]
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	009b      	lsls	r3, r3, #2
 8018af0:	18d3      	adds	r3, r2, r3
 8018af2:	881b      	ldrh	r3, [r3, #0]
 8018af4:	b29a      	uxth	r2, r3
 8018af6:	2016      	movs	r0, #22
 8018af8:	183b      	adds	r3, r7, r0
 8018afa:	4962      	ldr	r1, [pc, #392]	@ (8018c84 <USB_DeactivateEndpoint+0x37c>)
 8018afc:	400a      	ands	r2, r1
 8018afe:	801a      	strh	r2, [r3, #0]
 8018b00:	687a      	ldr	r2, [r7, #4]
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	781b      	ldrb	r3, [r3, #0]
 8018b06:	009b      	lsls	r3, r3, #2
 8018b08:	18d3      	adds	r3, r2, r3
 8018b0a:	183a      	adds	r2, r7, r0
 8018b0c:	8812      	ldrh	r2, [r2, #0]
 8018b0e:	495b      	ldr	r1, [pc, #364]	@ (8018c7c <USB_DeactivateEndpoint+0x374>)
 8018b10:	430a      	orrs	r2, r1
 8018b12:	b292      	uxth	r2, r2
 8018b14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	683b      	ldr	r3, [r7, #0]
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	009b      	lsls	r3, r3, #2
 8018b1e:	18d3      	adds	r3, r2, r3
 8018b20:	881b      	ldrh	r3, [r3, #0]
 8018b22:	b29a      	uxth	r2, r3
 8018b24:	2014      	movs	r0, #20
 8018b26:	183b      	adds	r3, r7, r0
 8018b28:	4953      	ldr	r1, [pc, #332]	@ (8018c78 <USB_DeactivateEndpoint+0x370>)
 8018b2a:	400a      	ands	r2, r1
 8018b2c:	801a      	strh	r2, [r3, #0]
 8018b2e:	687a      	ldr	r2, [r7, #4]
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	781b      	ldrb	r3, [r3, #0]
 8018b34:	009b      	lsls	r3, r3, #2
 8018b36:	18d3      	adds	r3, r2, r3
 8018b38:	183a      	adds	r2, r7, r0
 8018b3a:	8812      	ldrh	r2, [r2, #0]
 8018b3c:	494f      	ldr	r1, [pc, #316]	@ (8018c7c <USB_DeactivateEndpoint+0x374>)
 8018b3e:	430a      	orrs	r2, r1
 8018b40:	b292      	uxth	r2, r2
 8018b42:	801a      	strh	r2, [r3, #0]
 8018b44:	e08f      	b.n	8018c66 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018b46:	687a      	ldr	r2, [r7, #4]
 8018b48:	683b      	ldr	r3, [r7, #0]
 8018b4a:	781b      	ldrb	r3, [r3, #0]
 8018b4c:	009b      	lsls	r3, r3, #2
 8018b4e:	18d2      	adds	r2, r2, r3
 8018b50:	212e      	movs	r1, #46	@ 0x2e
 8018b52:	187b      	adds	r3, r7, r1
 8018b54:	8812      	ldrh	r2, [r2, #0]
 8018b56:	801a      	strh	r2, [r3, #0]
 8018b58:	187b      	adds	r3, r7, r1
 8018b5a:	881a      	ldrh	r2, [r3, #0]
 8018b5c:	2380      	movs	r3, #128	@ 0x80
 8018b5e:	01db      	lsls	r3, r3, #7
 8018b60:	4013      	ands	r3, r2
 8018b62:	d016      	beq.n	8018b92 <USB_DeactivateEndpoint+0x28a>
 8018b64:	687a      	ldr	r2, [r7, #4]
 8018b66:	683b      	ldr	r3, [r7, #0]
 8018b68:	781b      	ldrb	r3, [r3, #0]
 8018b6a:	009b      	lsls	r3, r3, #2
 8018b6c:	18d3      	adds	r3, r2, r3
 8018b6e:	881b      	ldrh	r3, [r3, #0]
 8018b70:	b29a      	uxth	r2, r3
 8018b72:	202c      	movs	r0, #44	@ 0x2c
 8018b74:	183b      	adds	r3, r7, r0
 8018b76:	493e      	ldr	r1, [pc, #248]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 8018b78:	400a      	ands	r2, r1
 8018b7a:	801a      	strh	r2, [r3, #0]
 8018b7c:	687a      	ldr	r2, [r7, #4]
 8018b7e:	683b      	ldr	r3, [r7, #0]
 8018b80:	781b      	ldrb	r3, [r3, #0]
 8018b82:	009b      	lsls	r3, r3, #2
 8018b84:	18d3      	adds	r3, r2, r3
 8018b86:	183a      	adds	r2, r7, r0
 8018b88:	8812      	ldrh	r2, [r2, #0]
 8018b8a:	493d      	ldr	r1, [pc, #244]	@ (8018c80 <USB_DeactivateEndpoint+0x378>)
 8018b8c:	430a      	orrs	r2, r1
 8018b8e:	b292      	uxth	r2, r2
 8018b90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018b92:	687a      	ldr	r2, [r7, #4]
 8018b94:	683b      	ldr	r3, [r7, #0]
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	009b      	lsls	r3, r3, #2
 8018b9a:	18d2      	adds	r2, r2, r3
 8018b9c:	212a      	movs	r1, #42	@ 0x2a
 8018b9e:	187b      	adds	r3, r7, r1
 8018ba0:	8812      	ldrh	r2, [r2, #0]
 8018ba2:	801a      	strh	r2, [r3, #0]
 8018ba4:	187b      	adds	r3, r7, r1
 8018ba6:	881b      	ldrh	r3, [r3, #0]
 8018ba8:	2240      	movs	r2, #64	@ 0x40
 8018baa:	4013      	ands	r3, r2
 8018bac:	d016      	beq.n	8018bdc <USB_DeactivateEndpoint+0x2d4>
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	683b      	ldr	r3, [r7, #0]
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	009b      	lsls	r3, r3, #2
 8018bb6:	18d3      	adds	r3, r2, r3
 8018bb8:	881b      	ldrh	r3, [r3, #0]
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	2028      	movs	r0, #40	@ 0x28
 8018bbe:	183b      	adds	r3, r7, r0
 8018bc0:	492b      	ldr	r1, [pc, #172]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 8018bc2:	400a      	ands	r2, r1
 8018bc4:	801a      	strh	r2, [r3, #0]
 8018bc6:	687a      	ldr	r2, [r7, #4]
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	781b      	ldrb	r3, [r3, #0]
 8018bcc:	009b      	lsls	r3, r3, #2
 8018bce:	18d3      	adds	r3, r2, r3
 8018bd0:	183a      	adds	r2, r7, r0
 8018bd2:	8812      	ldrh	r2, [r2, #0]
 8018bd4:	4927      	ldr	r1, [pc, #156]	@ (8018c74 <USB_DeactivateEndpoint+0x36c>)
 8018bd6:	430a      	orrs	r2, r1
 8018bd8:	b292      	uxth	r2, r2
 8018bda:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8018bdc:	687a      	ldr	r2, [r7, #4]
 8018bde:	683b      	ldr	r3, [r7, #0]
 8018be0:	781b      	ldrb	r3, [r3, #0]
 8018be2:	009b      	lsls	r3, r3, #2
 8018be4:	18d3      	adds	r3, r2, r3
 8018be6:	881b      	ldrh	r3, [r3, #0]
 8018be8:	b29a      	uxth	r2, r3
 8018bea:	2026      	movs	r0, #38	@ 0x26
 8018bec:	183b      	adds	r3, r7, r0
 8018bee:	4920      	ldr	r1, [pc, #128]	@ (8018c70 <USB_DeactivateEndpoint+0x368>)
 8018bf0:	400a      	ands	r2, r1
 8018bf2:	801a      	strh	r2, [r3, #0]
 8018bf4:	687a      	ldr	r2, [r7, #4]
 8018bf6:	683b      	ldr	r3, [r7, #0]
 8018bf8:	781b      	ldrb	r3, [r3, #0]
 8018bfa:	009b      	lsls	r3, r3, #2
 8018bfc:	18d3      	adds	r3, r2, r3
 8018bfe:	183a      	adds	r2, r7, r0
 8018c00:	8812      	ldrh	r2, [r2, #0]
 8018c02:	491f      	ldr	r1, [pc, #124]	@ (8018c80 <USB_DeactivateEndpoint+0x378>)
 8018c04:	430a      	orrs	r2, r1
 8018c06:	b292      	uxth	r2, r2
 8018c08:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018c0a:	687a      	ldr	r2, [r7, #4]
 8018c0c:	683b      	ldr	r3, [r7, #0]
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	009b      	lsls	r3, r3, #2
 8018c12:	18d3      	adds	r3, r2, r3
 8018c14:	881b      	ldrh	r3, [r3, #0]
 8018c16:	b29a      	uxth	r2, r3
 8018c18:	2024      	movs	r0, #36	@ 0x24
 8018c1a:	183b      	adds	r3, r7, r0
 8018c1c:	4916      	ldr	r1, [pc, #88]	@ (8018c78 <USB_DeactivateEndpoint+0x370>)
 8018c1e:	400a      	ands	r2, r1
 8018c20:	801a      	strh	r2, [r3, #0]
 8018c22:	687a      	ldr	r2, [r7, #4]
 8018c24:	683b      	ldr	r3, [r7, #0]
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	009b      	lsls	r3, r3, #2
 8018c2a:	18d3      	adds	r3, r2, r3
 8018c2c:	183a      	adds	r2, r7, r0
 8018c2e:	8812      	ldrh	r2, [r2, #0]
 8018c30:	4912      	ldr	r1, [pc, #72]	@ (8018c7c <USB_DeactivateEndpoint+0x374>)
 8018c32:	430a      	orrs	r2, r1
 8018c34:	b292      	uxth	r2, r2
 8018c36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018c38:	687a      	ldr	r2, [r7, #4]
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	781b      	ldrb	r3, [r3, #0]
 8018c3e:	009b      	lsls	r3, r3, #2
 8018c40:	18d3      	adds	r3, r2, r3
 8018c42:	881b      	ldrh	r3, [r3, #0]
 8018c44:	b29a      	uxth	r2, r3
 8018c46:	2022      	movs	r0, #34	@ 0x22
 8018c48:	183b      	adds	r3, r7, r0
 8018c4a:	490e      	ldr	r1, [pc, #56]	@ (8018c84 <USB_DeactivateEndpoint+0x37c>)
 8018c4c:	400a      	ands	r2, r1
 8018c4e:	801a      	strh	r2, [r3, #0]
 8018c50:	687a      	ldr	r2, [r7, #4]
 8018c52:	683b      	ldr	r3, [r7, #0]
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	009b      	lsls	r3, r3, #2
 8018c58:	18d3      	adds	r3, r2, r3
 8018c5a:	183a      	adds	r2, r7, r0
 8018c5c:	8812      	ldrh	r2, [r2, #0]
 8018c5e:	4907      	ldr	r1, [pc, #28]	@ (8018c7c <USB_DeactivateEndpoint+0x374>)
 8018c60:	430a      	orrs	r2, r1
 8018c62:	b292      	uxth	r2, r2
 8018c64:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8018c66:	2300      	movs	r3, #0
}
 8018c68:	0018      	movs	r0, r3
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	b00c      	add	sp, #48	@ 0x30
 8018c6e:	bd80      	pop	{r7, pc}
 8018c70:	ffff8f8f 	.word	0xffff8f8f
 8018c74:	ffff80c0 	.word	0xffff80c0
 8018c78:	ffff8fbf 	.word	0xffff8fbf
 8018c7c:	ffff8080 	.word	0xffff8080
 8018c80:	ffffc080 	.word	0xffffc080
 8018c84:	ffffbf8f 	.word	0xffffbf8f

08018c88 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018c88:	b590      	push	{r4, r7, lr}
 8018c8a:	b0c3      	sub	sp, #268	@ 0x10c
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
 8018c90:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	785b      	ldrb	r3, [r3, #1]
 8018c96:	2b01      	cmp	r3, #1
 8018c98:	d001      	beq.n	8018c9e <USB_EPStartXfer+0x16>
 8018c9a:	f000 fd2d 	bl	80196f8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8018c9e:	683b      	ldr	r3, [r7, #0]
 8018ca0:	699a      	ldr	r2, [r3, #24]
 8018ca2:	683b      	ldr	r3, [r7, #0]
 8018ca4:	691b      	ldr	r3, [r3, #16]
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d905      	bls.n	8018cb6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	691b      	ldr	r3, [r3, #16]
 8018cae:	1d7a      	adds	r2, r7, #5
 8018cb0:	32ff      	adds	r2, #255	@ 0xff
 8018cb2:	6013      	str	r3, [r2, #0]
 8018cb4:	e004      	b.n	8018cc0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	699b      	ldr	r3, [r3, #24]
 8018cba:	1d7a      	adds	r2, r7, #5
 8018cbc:	32ff      	adds	r2, #255	@ 0xff
 8018cbe:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	7b1b      	ldrb	r3, [r3, #12]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d125      	bne.n	8018d14 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	6959      	ldr	r1, [r3, #20]
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	88da      	ldrh	r2, [r3, #6]
 8018cd0:	1d7b      	adds	r3, r7, #5
 8018cd2:	33ff      	adds	r3, #255	@ 0xff
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f001 fa47 	bl	801a16c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	613b      	str	r3, [r7, #16]
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	2250      	movs	r2, #80	@ 0x50
 8018ce6:	5a9b      	ldrh	r3, [r3, r2]
 8018ce8:	b29b      	uxth	r3, r3
 8018cea:	001a      	movs	r2, r3
 8018cec:	693b      	ldr	r3, [r7, #16]
 8018cee:	189b      	adds	r3, r3, r2
 8018cf0:	613b      	str	r3, [r7, #16]
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	781b      	ldrb	r3, [r3, #0]
 8018cf6:	00da      	lsls	r2, r3, #3
 8018cf8:	693b      	ldr	r3, [r7, #16]
 8018cfa:	18d3      	adds	r3, r2, r3
 8018cfc:	4ad7      	ldr	r2, [pc, #860]	@ (801905c <USB_EPStartXfer+0x3d4>)
 8018cfe:	4694      	mov	ip, r2
 8018d00:	4463      	add	r3, ip
 8018d02:	60fb      	str	r3, [r7, #12]
 8018d04:	1d7b      	adds	r3, r7, #5
 8018d06:	33ff      	adds	r3, #255	@ 0xff
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	b29a      	uxth	r2, r3
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	801a      	strh	r2, [r3, #0]
 8018d10:	f000 fccd 	bl	80196ae <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	78db      	ldrb	r3, [r3, #3]
 8018d18:	2b02      	cmp	r3, #2
 8018d1a:	d000      	beq.n	8018d1e <USB_EPStartXfer+0x96>
 8018d1c:	e362      	b.n	80193e4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8018d1e:	683b      	ldr	r3, [r7, #0]
 8018d20:	6a1a      	ldr	r2, [r3, #32]
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	691b      	ldr	r3, [r3, #16]
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d800      	bhi.n	8018d2c <USB_EPStartXfer+0xa4>
 8018d2a:	e309      	b.n	8019340 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018d2c:	687a      	ldr	r2, [r7, #4]
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	18d3      	adds	r3, r2, r3
 8018d36:	881b      	ldrh	r3, [r3, #0]
 8018d38:	b29a      	uxth	r2, r3
 8018d3a:	2056      	movs	r0, #86	@ 0x56
 8018d3c:	183b      	adds	r3, r7, r0
 8018d3e:	49c8      	ldr	r1, [pc, #800]	@ (8019060 <USB_EPStartXfer+0x3d8>)
 8018d40:	400a      	ands	r2, r1
 8018d42:	801a      	strh	r2, [r3, #0]
 8018d44:	687a      	ldr	r2, [r7, #4]
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	009b      	lsls	r3, r3, #2
 8018d4c:	18d3      	adds	r3, r2, r3
 8018d4e:	183a      	adds	r2, r7, r0
 8018d50:	8812      	ldrh	r2, [r2, #0]
 8018d52:	49c4      	ldr	r1, [pc, #784]	@ (8019064 <USB_EPStartXfer+0x3dc>)
 8018d54:	430a      	orrs	r2, r1
 8018d56:	b292      	uxth	r2, r2
 8018d58:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8018d5a:	683b      	ldr	r3, [r7, #0]
 8018d5c:	6a1a      	ldr	r2, [r3, #32]
 8018d5e:	1d7b      	adds	r3, r7, #5
 8018d60:	33ff      	adds	r3, #255	@ 0xff
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	1ad2      	subs	r2, r2, r3
 8018d66:	683b      	ldr	r3, [r7, #0]
 8018d68:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8018d6a:	687a      	ldr	r2, [r7, #4]
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	781b      	ldrb	r3, [r3, #0]
 8018d70:	009b      	lsls	r3, r3, #2
 8018d72:	18d3      	adds	r3, r2, r3
 8018d74:	881b      	ldrh	r3, [r3, #0]
 8018d76:	b29b      	uxth	r3, r3
 8018d78:	001a      	movs	r2, r3
 8018d7a:	2340      	movs	r3, #64	@ 0x40
 8018d7c:	4013      	ands	r3, r2
 8018d7e:	d100      	bne.n	8018d82 <USB_EPStartXfer+0xfa>
 8018d80:	e176      	b.n	8019070 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	785b      	ldrb	r3, [r3, #1]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d000      	beq.n	8018d90 <USB_EPStartXfer+0x108>
 8018d8e:	e074      	b.n	8018e7a <USB_EPStartXfer+0x1f2>
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2250      	movs	r2, #80	@ 0x50
 8018d98:	5a9b      	ldrh	r3, [r3, r2]
 8018d9a:	b29b      	uxth	r3, r3
 8018d9c:	001a      	movs	r2, r3
 8018d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018da0:	189b      	adds	r3, r3, r2
 8018da2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	00da      	lsls	r2, r3, #3
 8018daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018dac:	18d3      	adds	r3, r2, r3
 8018dae:	4aae      	ldr	r2, [pc, #696]	@ (8019068 <USB_EPStartXfer+0x3e0>)
 8018db0:	4694      	mov	ip, r2
 8018db2:	4463      	add	r3, ip
 8018db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018db8:	881b      	ldrh	r3, [r3, #0]
 8018dba:	b29b      	uxth	r3, r3
 8018dbc:	059b      	lsls	r3, r3, #22
 8018dbe:	0d9b      	lsrs	r3, r3, #22
 8018dc0:	b29a      	uxth	r2, r3
 8018dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dc4:	801a      	strh	r2, [r3, #0]
 8018dc6:	1d7b      	adds	r3, r7, #5
 8018dc8:	33ff      	adds	r3, #255	@ 0xff
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8018dce:	d924      	bls.n	8018e1a <USB_EPStartXfer+0x192>
 8018dd0:	1d7b      	adds	r3, r7, #5
 8018dd2:	33ff      	adds	r3, #255	@ 0xff
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	095b      	lsrs	r3, r3, #5
 8018dd8:	1c7a      	adds	r2, r7, #1
 8018dda:	32ff      	adds	r2, #255	@ 0xff
 8018ddc:	6013      	str	r3, [r2, #0]
 8018dde:	1d7b      	adds	r3, r7, #5
 8018de0:	33ff      	adds	r3, #255	@ 0xff
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	221f      	movs	r2, #31
 8018de6:	4013      	ands	r3, r2
 8018de8:	d106      	bne.n	8018df8 <USB_EPStartXfer+0x170>
 8018dea:	1c7b      	adds	r3, r7, #1
 8018dec:	33ff      	adds	r3, #255	@ 0xff
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	3b01      	subs	r3, #1
 8018df2:	1c7a      	adds	r2, r7, #1
 8018df4:	32ff      	adds	r2, #255	@ 0xff
 8018df6:	6013      	str	r3, [r2, #0]
 8018df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dfa:	881b      	ldrh	r3, [r3, #0]
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	1c7b      	adds	r3, r7, #1
 8018e00:	33ff      	adds	r3, #255	@ 0xff
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	b29b      	uxth	r3, r3
 8018e06:	029b      	lsls	r3, r3, #10
 8018e08:	b29b      	uxth	r3, r3
 8018e0a:	4313      	orrs	r3, r2
 8018e0c:	b29b      	uxth	r3, r3
 8018e0e:	4a97      	ldr	r2, [pc, #604]	@ (801906c <USB_EPStartXfer+0x3e4>)
 8018e10:	4313      	orrs	r3, r2
 8018e12:	b29a      	uxth	r2, r3
 8018e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e16:	801a      	strh	r2, [r3, #0]
 8018e18:	e04a      	b.n	8018eb0 <USB_EPStartXfer+0x228>
 8018e1a:	1d7b      	adds	r3, r7, #5
 8018e1c:	33ff      	adds	r3, #255	@ 0xff
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d108      	bne.n	8018e36 <USB_EPStartXfer+0x1ae>
 8018e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e26:	881b      	ldrh	r3, [r3, #0]
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	4a90      	ldr	r2, [pc, #576]	@ (801906c <USB_EPStartXfer+0x3e4>)
 8018e2c:	4313      	orrs	r3, r2
 8018e2e:	b29a      	uxth	r2, r3
 8018e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e32:	801a      	strh	r2, [r3, #0]
 8018e34:	e03c      	b.n	8018eb0 <USB_EPStartXfer+0x228>
 8018e36:	1d7b      	adds	r3, r7, #5
 8018e38:	33ff      	adds	r3, #255	@ 0xff
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	085b      	lsrs	r3, r3, #1
 8018e3e:	1c7a      	adds	r2, r7, #1
 8018e40:	32ff      	adds	r2, #255	@ 0xff
 8018e42:	6013      	str	r3, [r2, #0]
 8018e44:	1d7b      	adds	r3, r7, #5
 8018e46:	33ff      	adds	r3, #255	@ 0xff
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	2201      	movs	r2, #1
 8018e4c:	4013      	ands	r3, r2
 8018e4e:	d006      	beq.n	8018e5e <USB_EPStartXfer+0x1d6>
 8018e50:	1c7b      	adds	r3, r7, #1
 8018e52:	33ff      	adds	r3, #255	@ 0xff
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	3301      	adds	r3, #1
 8018e58:	1c7a      	adds	r2, r7, #1
 8018e5a:	32ff      	adds	r2, #255	@ 0xff
 8018e5c:	6013      	str	r3, [r2, #0]
 8018e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e60:	881b      	ldrh	r3, [r3, #0]
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	1c7b      	adds	r3, r7, #1
 8018e66:	33ff      	adds	r3, #255	@ 0xff
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	b29b      	uxth	r3, r3
 8018e6c:	029b      	lsls	r3, r3, #10
 8018e6e:	b29b      	uxth	r3, r3
 8018e70:	4313      	orrs	r3, r2
 8018e72:	b29a      	uxth	r2, r3
 8018e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e76:	801a      	strh	r2, [r3, #0]
 8018e78:	e01a      	b.n	8018eb0 <USB_EPStartXfer+0x228>
 8018e7a:	683b      	ldr	r3, [r7, #0]
 8018e7c:	785b      	ldrb	r3, [r3, #1]
 8018e7e:	2b01      	cmp	r3, #1
 8018e80:	d116      	bne.n	8018eb0 <USB_EPStartXfer+0x228>
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	2250      	movs	r2, #80	@ 0x50
 8018e86:	5a9b      	ldrh	r3, [r3, r2]
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	001a      	movs	r2, r3
 8018e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e8e:	189b      	adds	r3, r3, r2
 8018e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	00da      	lsls	r2, r3, #3
 8018e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e9a:	18d3      	adds	r3, r2, r3
 8018e9c:	4a72      	ldr	r2, [pc, #456]	@ (8019068 <USB_EPStartXfer+0x3e0>)
 8018e9e:	4694      	mov	ip, r2
 8018ea0:	4463      	add	r3, ip
 8018ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ea4:	1d7b      	adds	r3, r7, #5
 8018ea6:	33ff      	adds	r3, #255	@ 0xff
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	b29a      	uxth	r2, r3
 8018eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018eae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8018eb0:	2076      	movs	r0, #118	@ 0x76
 8018eb2:	183b      	adds	r3, r7, r0
 8018eb4:	683a      	ldr	r2, [r7, #0]
 8018eb6:	8952      	ldrh	r2, [r2, #10]
 8018eb8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	6959      	ldr	r1, [r3, #20]
 8018ebe:	1d7b      	adds	r3, r7, #5
 8018ec0:	33ff      	adds	r3, #255	@ 0xff
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	b29c      	uxth	r4, r3
 8018ec6:	183b      	adds	r3, r7, r0
 8018ec8:	881a      	ldrh	r2, [r3, #0]
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	0023      	movs	r3, r4
 8018ece:	f001 f94d 	bl	801a16c <USB_WritePMA>
            ep->xfer_buff += len;
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	695a      	ldr	r2, [r3, #20]
 8018ed6:	1d7b      	adds	r3, r7, #5
 8018ed8:	33ff      	adds	r3, #255	@ 0xff
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	18d2      	adds	r2, r2, r3
 8018ede:	683b      	ldr	r3, [r7, #0]
 8018ee0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	6a1a      	ldr	r2, [r3, #32]
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	691b      	ldr	r3, [r3, #16]
 8018eea:	429a      	cmp	r2, r3
 8018eec:	d908      	bls.n	8018f00 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8018eee:	683b      	ldr	r3, [r7, #0]
 8018ef0:	6a1a      	ldr	r2, [r3, #32]
 8018ef2:	1d7b      	adds	r3, r7, #5
 8018ef4:	33ff      	adds	r3, #255	@ 0xff
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	1ad2      	subs	r2, r2, r3
 8018efa:	683b      	ldr	r3, [r7, #0]
 8018efc:	621a      	str	r2, [r3, #32]
 8018efe:	e007      	b.n	8018f10 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	6a1b      	ldr	r3, [r3, #32]
 8018f04:	1d7a      	adds	r2, r7, #5
 8018f06:	32ff      	adds	r2, #255	@ 0xff
 8018f08:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	785b      	ldrb	r3, [r3, #1]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d000      	beq.n	8018f1a <USB_EPStartXfer+0x292>
 8018f18:	e070      	b.n	8018ffc <USB_EPStartXfer+0x374>
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	61bb      	str	r3, [r7, #24]
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2250      	movs	r2, #80	@ 0x50
 8018f22:	5a9b      	ldrh	r3, [r3, r2]
 8018f24:	b29b      	uxth	r3, r3
 8018f26:	001a      	movs	r2, r3
 8018f28:	69bb      	ldr	r3, [r7, #24]
 8018f2a:	189b      	adds	r3, r3, r2
 8018f2c:	61bb      	str	r3, [r7, #24]
 8018f2e:	683b      	ldr	r3, [r7, #0]
 8018f30:	781b      	ldrb	r3, [r3, #0]
 8018f32:	00da      	lsls	r2, r3, #3
 8018f34:	69bb      	ldr	r3, [r7, #24]
 8018f36:	18d3      	adds	r3, r2, r3
 8018f38:	4a48      	ldr	r2, [pc, #288]	@ (801905c <USB_EPStartXfer+0x3d4>)
 8018f3a:	4694      	mov	ip, r2
 8018f3c:	4463      	add	r3, ip
 8018f3e:	617b      	str	r3, [r7, #20]
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	881b      	ldrh	r3, [r3, #0]
 8018f44:	b29b      	uxth	r3, r3
 8018f46:	059b      	lsls	r3, r3, #22
 8018f48:	0d9b      	lsrs	r3, r3, #22
 8018f4a:	b29a      	uxth	r2, r3
 8018f4c:	697b      	ldr	r3, [r7, #20]
 8018f4e:	801a      	strh	r2, [r3, #0]
 8018f50:	1d7b      	adds	r3, r7, #5
 8018f52:	33ff      	adds	r3, #255	@ 0xff
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	2b3e      	cmp	r3, #62	@ 0x3e
 8018f58:	d922      	bls.n	8018fa0 <USB_EPStartXfer+0x318>
 8018f5a:	1d7b      	adds	r3, r7, #5
 8018f5c:	33ff      	adds	r3, #255	@ 0xff
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	095b      	lsrs	r3, r3, #5
 8018f62:	21fc      	movs	r1, #252	@ 0xfc
 8018f64:	187a      	adds	r2, r7, r1
 8018f66:	6013      	str	r3, [r2, #0]
 8018f68:	1d7b      	adds	r3, r7, #5
 8018f6a:	33ff      	adds	r3, #255	@ 0xff
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	221f      	movs	r2, #31
 8018f70:	4013      	ands	r3, r2
 8018f72:	d104      	bne.n	8018f7e <USB_EPStartXfer+0x2f6>
 8018f74:	187b      	adds	r3, r7, r1
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	3b01      	subs	r3, #1
 8018f7a:	187a      	adds	r2, r7, r1
 8018f7c:	6013      	str	r3, [r2, #0]
 8018f7e:	697b      	ldr	r3, [r7, #20]
 8018f80:	881b      	ldrh	r3, [r3, #0]
 8018f82:	b29a      	uxth	r2, r3
 8018f84:	23fc      	movs	r3, #252	@ 0xfc
 8018f86:	18fb      	adds	r3, r7, r3
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	029b      	lsls	r3, r3, #10
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	4313      	orrs	r3, r2
 8018f92:	b29b      	uxth	r3, r3
 8018f94:	4a35      	ldr	r2, [pc, #212]	@ (801906c <USB_EPStartXfer+0x3e4>)
 8018f96:	4313      	orrs	r3, r2
 8018f98:	b29a      	uxth	r2, r3
 8018f9a:	697b      	ldr	r3, [r7, #20]
 8018f9c:	801a      	strh	r2, [r3, #0]
 8018f9e:	e04a      	b.n	8019036 <USB_EPStartXfer+0x3ae>
 8018fa0:	1d7b      	adds	r3, r7, #5
 8018fa2:	33ff      	adds	r3, #255	@ 0xff
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d108      	bne.n	8018fbc <USB_EPStartXfer+0x334>
 8018faa:	697b      	ldr	r3, [r7, #20]
 8018fac:	881b      	ldrh	r3, [r3, #0]
 8018fae:	b29b      	uxth	r3, r3
 8018fb0:	4a2e      	ldr	r2, [pc, #184]	@ (801906c <USB_EPStartXfer+0x3e4>)
 8018fb2:	4313      	orrs	r3, r2
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	697b      	ldr	r3, [r7, #20]
 8018fb8:	801a      	strh	r2, [r3, #0]
 8018fba:	e03c      	b.n	8019036 <USB_EPStartXfer+0x3ae>
 8018fbc:	1d7b      	adds	r3, r7, #5
 8018fbe:	33ff      	adds	r3, #255	@ 0xff
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	085b      	lsrs	r3, r3, #1
 8018fc4:	21fc      	movs	r1, #252	@ 0xfc
 8018fc6:	187a      	adds	r2, r7, r1
 8018fc8:	6013      	str	r3, [r2, #0]
 8018fca:	1d7b      	adds	r3, r7, #5
 8018fcc:	33ff      	adds	r3, #255	@ 0xff
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2201      	movs	r2, #1
 8018fd2:	4013      	ands	r3, r2
 8018fd4:	d004      	beq.n	8018fe0 <USB_EPStartXfer+0x358>
 8018fd6:	187b      	adds	r3, r7, r1
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	3301      	adds	r3, #1
 8018fdc:	187a      	adds	r2, r7, r1
 8018fde:	6013      	str	r3, [r2, #0]
 8018fe0:	697b      	ldr	r3, [r7, #20]
 8018fe2:	881b      	ldrh	r3, [r3, #0]
 8018fe4:	b29a      	uxth	r2, r3
 8018fe6:	23fc      	movs	r3, #252	@ 0xfc
 8018fe8:	18fb      	adds	r3, r7, r3
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	029b      	lsls	r3, r3, #10
 8018ff0:	b29b      	uxth	r3, r3
 8018ff2:	4313      	orrs	r3, r2
 8018ff4:	b29a      	uxth	r2, r3
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	801a      	strh	r2, [r3, #0]
 8018ffa:	e01c      	b.n	8019036 <USB_EPStartXfer+0x3ae>
 8018ffc:	683b      	ldr	r3, [r7, #0]
 8018ffe:	785b      	ldrb	r3, [r3, #1]
 8019000:	2b01      	cmp	r3, #1
 8019002:	d118      	bne.n	8019036 <USB_EPStartXfer+0x3ae>
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	623b      	str	r3, [r7, #32]
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	2250      	movs	r2, #80	@ 0x50
 801900c:	5a9b      	ldrh	r3, [r3, r2]
 801900e:	b29b      	uxth	r3, r3
 8019010:	001a      	movs	r2, r3
 8019012:	6a3b      	ldr	r3, [r7, #32]
 8019014:	189b      	adds	r3, r3, r2
 8019016:	623b      	str	r3, [r7, #32]
 8019018:	683b      	ldr	r3, [r7, #0]
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	00da      	lsls	r2, r3, #3
 801901e:	6a3b      	ldr	r3, [r7, #32]
 8019020:	18d3      	adds	r3, r2, r3
 8019022:	4a0e      	ldr	r2, [pc, #56]	@ (801905c <USB_EPStartXfer+0x3d4>)
 8019024:	4694      	mov	ip, r2
 8019026:	4463      	add	r3, ip
 8019028:	61fb      	str	r3, [r7, #28]
 801902a:	1d7b      	adds	r3, r7, #5
 801902c:	33ff      	adds	r3, #255	@ 0xff
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	b29a      	uxth	r2, r3
 8019032:	69fb      	ldr	r3, [r7, #28]
 8019034:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019036:	2076      	movs	r0, #118	@ 0x76
 8019038:	183b      	adds	r3, r7, r0
 801903a:	683a      	ldr	r2, [r7, #0]
 801903c:	8912      	ldrh	r2, [r2, #8]
 801903e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	6959      	ldr	r1, [r3, #20]
 8019044:	1d7b      	adds	r3, r7, #5
 8019046:	33ff      	adds	r3, #255	@ 0xff
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	b29c      	uxth	r4, r3
 801904c:	183b      	adds	r3, r7, r0
 801904e:	881a      	ldrh	r2, [r3, #0]
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	0023      	movs	r3, r4
 8019054:	f001 f88a 	bl	801a16c <USB_WritePMA>
 8019058:	e329      	b.n	80196ae <USB_EPStartXfer+0xa26>
 801905a:	46c0      	nop			@ (mov r8, r8)
 801905c:	00000402 	.word	0x00000402
 8019060:	ffff8f8f 	.word	0xffff8f8f
 8019064:	ffff8180 	.word	0xffff8180
 8019068:	00000406 	.word	0x00000406
 801906c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	785b      	ldrb	r3, [r3, #1]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d000      	beq.n	801907a <USB_EPStartXfer+0x3f2>
 8019078:	e070      	b.n	801915c <USB_EPStartXfer+0x4d4>
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	2250      	movs	r2, #80	@ 0x50
 8019082:	5a9b      	ldrh	r3, [r3, r2]
 8019084:	b29b      	uxth	r3, r3
 8019086:	001a      	movs	r2, r3
 8019088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801908a:	189b      	adds	r3, r3, r2
 801908c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	781b      	ldrb	r3, [r3, #0]
 8019092:	00da      	lsls	r2, r3, #3
 8019094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019096:	18d3      	adds	r3, r2, r3
 8019098:	4acd      	ldr	r2, [pc, #820]	@ (80193d0 <USB_EPStartXfer+0x748>)
 801909a:	4694      	mov	ip, r2
 801909c:	4463      	add	r3, ip
 801909e:	647b      	str	r3, [r7, #68]	@ 0x44
 80190a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190a2:	881b      	ldrh	r3, [r3, #0]
 80190a4:	b29b      	uxth	r3, r3
 80190a6:	059b      	lsls	r3, r3, #22
 80190a8:	0d9b      	lsrs	r3, r3, #22
 80190aa:	b29a      	uxth	r2, r3
 80190ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190ae:	801a      	strh	r2, [r3, #0]
 80190b0:	1d7b      	adds	r3, r7, #5
 80190b2:	33ff      	adds	r3, #255	@ 0xff
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80190b8:	d922      	bls.n	8019100 <USB_EPStartXfer+0x478>
 80190ba:	1d7b      	adds	r3, r7, #5
 80190bc:	33ff      	adds	r3, #255	@ 0xff
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	095b      	lsrs	r3, r3, #5
 80190c2:	21f8      	movs	r1, #248	@ 0xf8
 80190c4:	187a      	adds	r2, r7, r1
 80190c6:	6013      	str	r3, [r2, #0]
 80190c8:	1d7b      	adds	r3, r7, #5
 80190ca:	33ff      	adds	r3, #255	@ 0xff
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	221f      	movs	r2, #31
 80190d0:	4013      	ands	r3, r2
 80190d2:	d104      	bne.n	80190de <USB_EPStartXfer+0x456>
 80190d4:	187b      	adds	r3, r7, r1
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	3b01      	subs	r3, #1
 80190da:	187a      	adds	r2, r7, r1
 80190dc:	6013      	str	r3, [r2, #0]
 80190de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190e0:	881b      	ldrh	r3, [r3, #0]
 80190e2:	b29a      	uxth	r2, r3
 80190e4:	23f8      	movs	r3, #248	@ 0xf8
 80190e6:	18fb      	adds	r3, r7, r3
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	029b      	lsls	r3, r3, #10
 80190ee:	b29b      	uxth	r3, r3
 80190f0:	4313      	orrs	r3, r2
 80190f2:	b29b      	uxth	r3, r3
 80190f4:	4ab7      	ldr	r2, [pc, #732]	@ (80193d4 <USB_EPStartXfer+0x74c>)
 80190f6:	4313      	orrs	r3, r2
 80190f8:	b29a      	uxth	r2, r3
 80190fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80190fc:	801a      	strh	r2, [r3, #0]
 80190fe:	e04a      	b.n	8019196 <USB_EPStartXfer+0x50e>
 8019100:	1d7b      	adds	r3, r7, #5
 8019102:	33ff      	adds	r3, #255	@ 0xff
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d108      	bne.n	801911c <USB_EPStartXfer+0x494>
 801910a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801910c:	881b      	ldrh	r3, [r3, #0]
 801910e:	b29b      	uxth	r3, r3
 8019110:	4ab0      	ldr	r2, [pc, #704]	@ (80193d4 <USB_EPStartXfer+0x74c>)
 8019112:	4313      	orrs	r3, r2
 8019114:	b29a      	uxth	r2, r3
 8019116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019118:	801a      	strh	r2, [r3, #0]
 801911a:	e03c      	b.n	8019196 <USB_EPStartXfer+0x50e>
 801911c:	1d7b      	adds	r3, r7, #5
 801911e:	33ff      	adds	r3, #255	@ 0xff
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	085b      	lsrs	r3, r3, #1
 8019124:	21f8      	movs	r1, #248	@ 0xf8
 8019126:	187a      	adds	r2, r7, r1
 8019128:	6013      	str	r3, [r2, #0]
 801912a:	1d7b      	adds	r3, r7, #5
 801912c:	33ff      	adds	r3, #255	@ 0xff
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2201      	movs	r2, #1
 8019132:	4013      	ands	r3, r2
 8019134:	d004      	beq.n	8019140 <USB_EPStartXfer+0x4b8>
 8019136:	187b      	adds	r3, r7, r1
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	3301      	adds	r3, #1
 801913c:	187a      	adds	r2, r7, r1
 801913e:	6013      	str	r3, [r2, #0]
 8019140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019142:	881b      	ldrh	r3, [r3, #0]
 8019144:	b29a      	uxth	r2, r3
 8019146:	23f8      	movs	r3, #248	@ 0xf8
 8019148:	18fb      	adds	r3, r7, r3
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	b29b      	uxth	r3, r3
 801914e:	029b      	lsls	r3, r3, #10
 8019150:	b29b      	uxth	r3, r3
 8019152:	4313      	orrs	r3, r2
 8019154:	b29a      	uxth	r2, r3
 8019156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019158:	801a      	strh	r2, [r3, #0]
 801915a:	e01c      	b.n	8019196 <USB_EPStartXfer+0x50e>
 801915c:	683b      	ldr	r3, [r7, #0]
 801915e:	785b      	ldrb	r3, [r3, #1]
 8019160:	2b01      	cmp	r3, #1
 8019162:	d118      	bne.n	8019196 <USB_EPStartXfer+0x50e>
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	653b      	str	r3, [r7, #80]	@ 0x50
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2250      	movs	r2, #80	@ 0x50
 801916c:	5a9b      	ldrh	r3, [r3, r2]
 801916e:	b29b      	uxth	r3, r3
 8019170:	001a      	movs	r2, r3
 8019172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019174:	189b      	adds	r3, r3, r2
 8019176:	653b      	str	r3, [r7, #80]	@ 0x50
 8019178:	683b      	ldr	r3, [r7, #0]
 801917a:	781b      	ldrb	r3, [r3, #0]
 801917c:	00da      	lsls	r2, r3, #3
 801917e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019180:	18d3      	adds	r3, r2, r3
 8019182:	4a93      	ldr	r2, [pc, #588]	@ (80193d0 <USB_EPStartXfer+0x748>)
 8019184:	4694      	mov	ip, r2
 8019186:	4463      	add	r3, ip
 8019188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801918a:	1d7b      	adds	r3, r7, #5
 801918c:	33ff      	adds	r3, #255	@ 0xff
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	b29a      	uxth	r2, r3
 8019192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019194:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019196:	2076      	movs	r0, #118	@ 0x76
 8019198:	183b      	adds	r3, r7, r0
 801919a:	683a      	ldr	r2, [r7, #0]
 801919c:	8912      	ldrh	r2, [r2, #8]
 801919e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	6959      	ldr	r1, [r3, #20]
 80191a4:	1d7b      	adds	r3, r7, #5
 80191a6:	33ff      	adds	r3, #255	@ 0xff
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	b29c      	uxth	r4, r3
 80191ac:	183b      	adds	r3, r7, r0
 80191ae:	881a      	ldrh	r2, [r3, #0]
 80191b0:	6878      	ldr	r0, [r7, #4]
 80191b2:	0023      	movs	r3, r4
 80191b4:	f000 ffda 	bl	801a16c <USB_WritePMA>
            ep->xfer_buff += len;
 80191b8:	683b      	ldr	r3, [r7, #0]
 80191ba:	695a      	ldr	r2, [r3, #20]
 80191bc:	1d7b      	adds	r3, r7, #5
 80191be:	33ff      	adds	r3, #255	@ 0xff
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	18d2      	adds	r2, r2, r3
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80191c8:	683b      	ldr	r3, [r7, #0]
 80191ca:	6a1a      	ldr	r2, [r3, #32]
 80191cc:	683b      	ldr	r3, [r7, #0]
 80191ce:	691b      	ldr	r3, [r3, #16]
 80191d0:	429a      	cmp	r2, r3
 80191d2:	d908      	bls.n	80191e6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	6a1a      	ldr	r2, [r3, #32]
 80191d8:	1d7b      	adds	r3, r7, #5
 80191da:	33ff      	adds	r3, #255	@ 0xff
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	1ad2      	subs	r2, r2, r3
 80191e0:	683b      	ldr	r3, [r7, #0]
 80191e2:	621a      	str	r2, [r3, #32]
 80191e4:	e007      	b.n	80191f6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	6a1b      	ldr	r3, [r3, #32]
 80191ea:	1d7a      	adds	r2, r7, #5
 80191ec:	32ff      	adds	r2, #255	@ 0xff
 80191ee:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	2200      	movs	r2, #0
 80191f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80191fa:	683b      	ldr	r3, [r7, #0]
 80191fc:	785b      	ldrb	r3, [r3, #1]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d000      	beq.n	8019204 <USB_EPStartXfer+0x57c>
 8019202:	e070      	b.n	80192e6 <USB_EPStartXfer+0x65e>
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	2250      	movs	r2, #80	@ 0x50
 801920c:	5a9b      	ldrh	r3, [r3, r2]
 801920e:	b29b      	uxth	r3, r3
 8019210:	001a      	movs	r2, r3
 8019212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019214:	189b      	adds	r3, r3, r2
 8019216:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019218:	683b      	ldr	r3, [r7, #0]
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	00da      	lsls	r2, r3, #3
 801921e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019220:	18d3      	adds	r3, r2, r3
 8019222:	4a6d      	ldr	r2, [pc, #436]	@ (80193d8 <USB_EPStartXfer+0x750>)
 8019224:	4694      	mov	ip, r2
 8019226:	4463      	add	r3, ip
 8019228:	637b      	str	r3, [r7, #52]	@ 0x34
 801922a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801922c:	881b      	ldrh	r3, [r3, #0]
 801922e:	b29b      	uxth	r3, r3
 8019230:	059b      	lsls	r3, r3, #22
 8019232:	0d9b      	lsrs	r3, r3, #22
 8019234:	b29a      	uxth	r2, r3
 8019236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019238:	801a      	strh	r2, [r3, #0]
 801923a:	1d7b      	adds	r3, r7, #5
 801923c:	33ff      	adds	r3, #255	@ 0xff
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	2b3e      	cmp	r3, #62	@ 0x3e
 8019242:	d922      	bls.n	801928a <USB_EPStartXfer+0x602>
 8019244:	1d7b      	adds	r3, r7, #5
 8019246:	33ff      	adds	r3, #255	@ 0xff
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	095b      	lsrs	r3, r3, #5
 801924c:	21f4      	movs	r1, #244	@ 0xf4
 801924e:	187a      	adds	r2, r7, r1
 8019250:	6013      	str	r3, [r2, #0]
 8019252:	1d7b      	adds	r3, r7, #5
 8019254:	33ff      	adds	r3, #255	@ 0xff
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	221f      	movs	r2, #31
 801925a:	4013      	ands	r3, r2
 801925c:	d104      	bne.n	8019268 <USB_EPStartXfer+0x5e0>
 801925e:	187b      	adds	r3, r7, r1
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	3b01      	subs	r3, #1
 8019264:	187a      	adds	r2, r7, r1
 8019266:	6013      	str	r3, [r2, #0]
 8019268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801926a:	881b      	ldrh	r3, [r3, #0]
 801926c:	b29a      	uxth	r2, r3
 801926e:	23f4      	movs	r3, #244	@ 0xf4
 8019270:	18fb      	adds	r3, r7, r3
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	b29b      	uxth	r3, r3
 8019276:	029b      	lsls	r3, r3, #10
 8019278:	b29b      	uxth	r3, r3
 801927a:	4313      	orrs	r3, r2
 801927c:	b29b      	uxth	r3, r3
 801927e:	4a55      	ldr	r2, [pc, #340]	@ (80193d4 <USB_EPStartXfer+0x74c>)
 8019280:	4313      	orrs	r3, r2
 8019282:	b29a      	uxth	r2, r3
 8019284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019286:	801a      	strh	r2, [r3, #0]
 8019288:	e048      	b.n	801931c <USB_EPStartXfer+0x694>
 801928a:	1d7b      	adds	r3, r7, #5
 801928c:	33ff      	adds	r3, #255	@ 0xff
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d108      	bne.n	80192a6 <USB_EPStartXfer+0x61e>
 8019294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019296:	881b      	ldrh	r3, [r3, #0]
 8019298:	b29b      	uxth	r3, r3
 801929a:	4a4e      	ldr	r2, [pc, #312]	@ (80193d4 <USB_EPStartXfer+0x74c>)
 801929c:	4313      	orrs	r3, r2
 801929e:	b29a      	uxth	r2, r3
 80192a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192a2:	801a      	strh	r2, [r3, #0]
 80192a4:	e03a      	b.n	801931c <USB_EPStartXfer+0x694>
 80192a6:	1d7b      	adds	r3, r7, #5
 80192a8:	33ff      	adds	r3, #255	@ 0xff
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	085b      	lsrs	r3, r3, #1
 80192ae:	21f4      	movs	r1, #244	@ 0xf4
 80192b0:	187a      	adds	r2, r7, r1
 80192b2:	6013      	str	r3, [r2, #0]
 80192b4:	1d7b      	adds	r3, r7, #5
 80192b6:	33ff      	adds	r3, #255	@ 0xff
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	2201      	movs	r2, #1
 80192bc:	4013      	ands	r3, r2
 80192be:	d004      	beq.n	80192ca <USB_EPStartXfer+0x642>
 80192c0:	187b      	adds	r3, r7, r1
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	3301      	adds	r3, #1
 80192c6:	187a      	adds	r2, r7, r1
 80192c8:	6013      	str	r3, [r2, #0]
 80192ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192cc:	881b      	ldrh	r3, [r3, #0]
 80192ce:	b29a      	uxth	r2, r3
 80192d0:	23f4      	movs	r3, #244	@ 0xf4
 80192d2:	18fb      	adds	r3, r7, r3
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	b29b      	uxth	r3, r3
 80192d8:	029b      	lsls	r3, r3, #10
 80192da:	b29b      	uxth	r3, r3
 80192dc:	4313      	orrs	r3, r2
 80192de:	b29a      	uxth	r2, r3
 80192e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192e2:	801a      	strh	r2, [r3, #0]
 80192e4:	e01a      	b.n	801931c <USB_EPStartXfer+0x694>
 80192e6:	683b      	ldr	r3, [r7, #0]
 80192e8:	785b      	ldrb	r3, [r3, #1]
 80192ea:	2b01      	cmp	r3, #1
 80192ec:	d116      	bne.n	801931c <USB_EPStartXfer+0x694>
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	2250      	movs	r2, #80	@ 0x50
 80192f2:	5a9b      	ldrh	r3, [r3, r2]
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	001a      	movs	r2, r3
 80192f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80192fa:	189b      	adds	r3, r3, r2
 80192fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	00da      	lsls	r2, r3, #3
 8019304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019306:	18d3      	adds	r3, r2, r3
 8019308:	4a33      	ldr	r2, [pc, #204]	@ (80193d8 <USB_EPStartXfer+0x750>)
 801930a:	4694      	mov	ip, r2
 801930c:	4463      	add	r3, ip
 801930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019310:	1d7b      	adds	r3, r7, #5
 8019312:	33ff      	adds	r3, #255	@ 0xff
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	b29a      	uxth	r2, r3
 8019318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801931a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801931c:	2076      	movs	r0, #118	@ 0x76
 801931e:	183b      	adds	r3, r7, r0
 8019320:	683a      	ldr	r2, [r7, #0]
 8019322:	8952      	ldrh	r2, [r2, #10]
 8019324:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019326:	683b      	ldr	r3, [r7, #0]
 8019328:	6959      	ldr	r1, [r3, #20]
 801932a:	1d7b      	adds	r3, r7, #5
 801932c:	33ff      	adds	r3, #255	@ 0xff
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	b29c      	uxth	r4, r3
 8019332:	183b      	adds	r3, r7, r0
 8019334:	881a      	ldrh	r2, [r3, #0]
 8019336:	6878      	ldr	r0, [r7, #4]
 8019338:	0023      	movs	r3, r4
 801933a:	f000 ff17 	bl	801a16c <USB_WritePMA>
 801933e:	e1b6      	b.n	80196ae <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8019340:	683b      	ldr	r3, [r7, #0]
 8019342:	6a1b      	ldr	r3, [r3, #32]
 8019344:	1d7a      	adds	r2, r7, #5
 8019346:	32ff      	adds	r2, #255	@ 0xff
 8019348:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801934a:	687a      	ldr	r2, [r7, #4]
 801934c:	683b      	ldr	r3, [r7, #0]
 801934e:	781b      	ldrb	r3, [r3, #0]
 8019350:	009b      	lsls	r3, r3, #2
 8019352:	18d3      	adds	r3, r2, r3
 8019354:	881b      	ldrh	r3, [r3, #0]
 8019356:	b29a      	uxth	r2, r3
 8019358:	2062      	movs	r0, #98	@ 0x62
 801935a:	183b      	adds	r3, r7, r0
 801935c:	491f      	ldr	r1, [pc, #124]	@ (80193dc <USB_EPStartXfer+0x754>)
 801935e:	400a      	ands	r2, r1
 8019360:	801a      	strh	r2, [r3, #0]
 8019362:	687a      	ldr	r2, [r7, #4]
 8019364:	683b      	ldr	r3, [r7, #0]
 8019366:	781b      	ldrb	r3, [r3, #0]
 8019368:	009b      	lsls	r3, r3, #2
 801936a:	18d3      	adds	r3, r2, r3
 801936c:	183a      	adds	r2, r7, r0
 801936e:	8812      	ldrh	r2, [r2, #0]
 8019370:	491b      	ldr	r1, [pc, #108]	@ (80193e0 <USB_EPStartXfer+0x758>)
 8019372:	430a      	orrs	r2, r1
 8019374:	b292      	uxth	r2, r2
 8019376:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	2250      	movs	r2, #80	@ 0x50
 8019380:	5a9b      	ldrh	r3, [r3, r2]
 8019382:	b29b      	uxth	r3, r3
 8019384:	001a      	movs	r2, r3
 8019386:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019388:	189b      	adds	r3, r3, r2
 801938a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801938c:	683b      	ldr	r3, [r7, #0]
 801938e:	781b      	ldrb	r3, [r3, #0]
 8019390:	00da      	lsls	r2, r3, #3
 8019392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019394:	18d3      	adds	r3, r2, r3
 8019396:	4a0e      	ldr	r2, [pc, #56]	@ (80193d0 <USB_EPStartXfer+0x748>)
 8019398:	4694      	mov	ip, r2
 801939a:	4463      	add	r3, ip
 801939c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801939e:	1d7b      	adds	r3, r7, #5
 80193a0:	33ff      	adds	r3, #255	@ 0xff
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	b29a      	uxth	r2, r3
 80193a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80193aa:	2076      	movs	r0, #118	@ 0x76
 80193ac:	183b      	adds	r3, r7, r0
 80193ae:	683a      	ldr	r2, [r7, #0]
 80193b0:	8912      	ldrh	r2, [r2, #8]
 80193b2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	6959      	ldr	r1, [r3, #20]
 80193b8:	1d7b      	adds	r3, r7, #5
 80193ba:	33ff      	adds	r3, #255	@ 0xff
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	b29c      	uxth	r4, r3
 80193c0:	183b      	adds	r3, r7, r0
 80193c2:	881a      	ldrh	r2, [r3, #0]
 80193c4:	6878      	ldr	r0, [r7, #4]
 80193c6:	0023      	movs	r3, r4
 80193c8:	f000 fed0 	bl	801a16c <USB_WritePMA>
 80193cc:	e16f      	b.n	80196ae <USB_EPStartXfer+0xa26>
 80193ce:	46c0      	nop			@ (mov r8, r8)
 80193d0:	00000402 	.word	0x00000402
 80193d4:	ffff8000 	.word	0xffff8000
 80193d8:	00000406 	.word	0x00000406
 80193dc:	ffff8e8f 	.word	0xffff8e8f
 80193e0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	6a1a      	ldr	r2, [r3, #32]
 80193e8:	1d7b      	adds	r3, r7, #5
 80193ea:	33ff      	adds	r3, #255	@ 0xff
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	1ad2      	subs	r2, r2, r3
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80193f4:	687a      	ldr	r2, [r7, #4]
 80193f6:	683b      	ldr	r3, [r7, #0]
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	18d3      	adds	r3, r2, r3
 80193fe:	881b      	ldrh	r3, [r3, #0]
 8019400:	b29b      	uxth	r3, r3
 8019402:	001a      	movs	r2, r3
 8019404:	2340      	movs	r3, #64	@ 0x40
 8019406:	4013      	ands	r3, r2
 8019408:	d100      	bne.n	801940c <USB_EPStartXfer+0x784>
 801940a:	e0a4      	b.n	8019556 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	673b      	str	r3, [r7, #112]	@ 0x70
 8019410:	683b      	ldr	r3, [r7, #0]
 8019412:	785b      	ldrb	r3, [r3, #1]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d000      	beq.n	801941a <USB_EPStartXfer+0x792>
 8019418:	e070      	b.n	80194fc <USB_EPStartXfer+0x874>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	2250      	movs	r2, #80	@ 0x50
 8019422:	5a9b      	ldrh	r3, [r3, r2]
 8019424:	b29b      	uxth	r3, r3
 8019426:	001a      	movs	r2, r3
 8019428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801942a:	189b      	adds	r3, r3, r2
 801942c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801942e:	683b      	ldr	r3, [r7, #0]
 8019430:	781b      	ldrb	r3, [r3, #0]
 8019432:	00da      	lsls	r2, r3, #3
 8019434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019436:	18d3      	adds	r3, r2, r3
 8019438:	4abc      	ldr	r2, [pc, #752]	@ (801972c <USB_EPStartXfer+0xaa4>)
 801943a:	4694      	mov	ip, r2
 801943c:	4463      	add	r3, ip
 801943e:	667b      	str	r3, [r7, #100]	@ 0x64
 8019440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019442:	881b      	ldrh	r3, [r3, #0]
 8019444:	b29b      	uxth	r3, r3
 8019446:	059b      	lsls	r3, r3, #22
 8019448:	0d9b      	lsrs	r3, r3, #22
 801944a:	b29a      	uxth	r2, r3
 801944c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801944e:	801a      	strh	r2, [r3, #0]
 8019450:	1d7b      	adds	r3, r7, #5
 8019452:	33ff      	adds	r3, #255	@ 0xff
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	2b3e      	cmp	r3, #62	@ 0x3e
 8019458:	d922      	bls.n	80194a0 <USB_EPStartXfer+0x818>
 801945a:	1d7b      	adds	r3, r7, #5
 801945c:	33ff      	adds	r3, #255	@ 0xff
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	095b      	lsrs	r3, r3, #5
 8019462:	21f0      	movs	r1, #240	@ 0xf0
 8019464:	187a      	adds	r2, r7, r1
 8019466:	6013      	str	r3, [r2, #0]
 8019468:	1d7b      	adds	r3, r7, #5
 801946a:	33ff      	adds	r3, #255	@ 0xff
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	221f      	movs	r2, #31
 8019470:	4013      	ands	r3, r2
 8019472:	d104      	bne.n	801947e <USB_EPStartXfer+0x7f6>
 8019474:	187b      	adds	r3, r7, r1
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	3b01      	subs	r3, #1
 801947a:	187a      	adds	r2, r7, r1
 801947c:	6013      	str	r3, [r2, #0]
 801947e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019480:	881b      	ldrh	r3, [r3, #0]
 8019482:	b29a      	uxth	r2, r3
 8019484:	23f0      	movs	r3, #240	@ 0xf0
 8019486:	18fb      	adds	r3, r7, r3
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	b29b      	uxth	r3, r3
 801948c:	029b      	lsls	r3, r3, #10
 801948e:	b29b      	uxth	r3, r3
 8019490:	4313      	orrs	r3, r2
 8019492:	b29b      	uxth	r3, r3
 8019494:	4aa6      	ldr	r2, [pc, #664]	@ (8019730 <USB_EPStartXfer+0xaa8>)
 8019496:	4313      	orrs	r3, r2
 8019498:	b29a      	uxth	r2, r3
 801949a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801949c:	801a      	strh	r2, [r3, #0]
 801949e:	e048      	b.n	8019532 <USB_EPStartXfer+0x8aa>
 80194a0:	1d7b      	adds	r3, r7, #5
 80194a2:	33ff      	adds	r3, #255	@ 0xff
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d108      	bne.n	80194bc <USB_EPStartXfer+0x834>
 80194aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80194ac:	881b      	ldrh	r3, [r3, #0]
 80194ae:	b29b      	uxth	r3, r3
 80194b0:	4a9f      	ldr	r2, [pc, #636]	@ (8019730 <USB_EPStartXfer+0xaa8>)
 80194b2:	4313      	orrs	r3, r2
 80194b4:	b29a      	uxth	r2, r3
 80194b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80194b8:	801a      	strh	r2, [r3, #0]
 80194ba:	e03a      	b.n	8019532 <USB_EPStartXfer+0x8aa>
 80194bc:	1d7b      	adds	r3, r7, #5
 80194be:	33ff      	adds	r3, #255	@ 0xff
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	085b      	lsrs	r3, r3, #1
 80194c4:	21f0      	movs	r1, #240	@ 0xf0
 80194c6:	187a      	adds	r2, r7, r1
 80194c8:	6013      	str	r3, [r2, #0]
 80194ca:	1d7b      	adds	r3, r7, #5
 80194cc:	33ff      	adds	r3, #255	@ 0xff
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	2201      	movs	r2, #1
 80194d2:	4013      	ands	r3, r2
 80194d4:	d004      	beq.n	80194e0 <USB_EPStartXfer+0x858>
 80194d6:	187b      	adds	r3, r7, r1
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	3301      	adds	r3, #1
 80194dc:	187a      	adds	r2, r7, r1
 80194de:	6013      	str	r3, [r2, #0]
 80194e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80194e2:	881b      	ldrh	r3, [r3, #0]
 80194e4:	b29a      	uxth	r2, r3
 80194e6:	23f0      	movs	r3, #240	@ 0xf0
 80194e8:	18fb      	adds	r3, r7, r3
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	b29b      	uxth	r3, r3
 80194ee:	029b      	lsls	r3, r3, #10
 80194f0:	b29b      	uxth	r3, r3
 80194f2:	4313      	orrs	r3, r2
 80194f4:	b29a      	uxth	r2, r3
 80194f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80194f8:	801a      	strh	r2, [r3, #0]
 80194fa:	e01a      	b.n	8019532 <USB_EPStartXfer+0x8aa>
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	785b      	ldrb	r3, [r3, #1]
 8019500:	2b01      	cmp	r3, #1
 8019502:	d116      	bne.n	8019532 <USB_EPStartXfer+0x8aa>
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	2250      	movs	r2, #80	@ 0x50
 8019508:	5a9b      	ldrh	r3, [r3, r2]
 801950a:	b29b      	uxth	r3, r3
 801950c:	001a      	movs	r2, r3
 801950e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019510:	189b      	adds	r3, r3, r2
 8019512:	673b      	str	r3, [r7, #112]	@ 0x70
 8019514:	683b      	ldr	r3, [r7, #0]
 8019516:	781b      	ldrb	r3, [r3, #0]
 8019518:	00da      	lsls	r2, r3, #3
 801951a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801951c:	18d3      	adds	r3, r2, r3
 801951e:	4a83      	ldr	r2, [pc, #524]	@ (801972c <USB_EPStartXfer+0xaa4>)
 8019520:	4694      	mov	ip, r2
 8019522:	4463      	add	r3, ip
 8019524:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019526:	1d7b      	adds	r3, r7, #5
 8019528:	33ff      	adds	r3, #255	@ 0xff
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	b29a      	uxth	r2, r3
 801952e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019530:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8019532:	2076      	movs	r0, #118	@ 0x76
 8019534:	183b      	adds	r3, r7, r0
 8019536:	683a      	ldr	r2, [r7, #0]
 8019538:	8952      	ldrh	r2, [r2, #10]
 801953a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801953c:	683b      	ldr	r3, [r7, #0]
 801953e:	6959      	ldr	r1, [r3, #20]
 8019540:	1d7b      	adds	r3, r7, #5
 8019542:	33ff      	adds	r3, #255	@ 0xff
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	b29c      	uxth	r4, r3
 8019548:	183b      	adds	r3, r7, r0
 801954a:	881a      	ldrh	r2, [r3, #0]
 801954c:	6878      	ldr	r0, [r7, #4]
 801954e:	0023      	movs	r3, r4
 8019550:	f000 fe0c 	bl	801a16c <USB_WritePMA>
 8019554:	e0ab      	b.n	80196ae <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	785b      	ldrb	r3, [r3, #1]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d000      	beq.n	8019560 <USB_EPStartXfer+0x8d8>
 801955e:	e070      	b.n	8019642 <USB_EPStartXfer+0x9ba>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	2250      	movs	r2, #80	@ 0x50
 8019568:	5a9b      	ldrh	r3, [r3, r2]
 801956a:	b29b      	uxth	r3, r3
 801956c:	001a      	movs	r2, r3
 801956e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019570:	189b      	adds	r3, r3, r2
 8019572:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019574:	683b      	ldr	r3, [r7, #0]
 8019576:	781b      	ldrb	r3, [r3, #0]
 8019578:	00da      	lsls	r2, r3, #3
 801957a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801957c:	18d3      	adds	r3, r2, r3
 801957e:	4a6d      	ldr	r2, [pc, #436]	@ (8019734 <USB_EPStartXfer+0xaac>)
 8019580:	4694      	mov	ip, r2
 8019582:	4463      	add	r3, ip
 8019584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019588:	881b      	ldrh	r3, [r3, #0]
 801958a:	b29b      	uxth	r3, r3
 801958c:	059b      	lsls	r3, r3, #22
 801958e:	0d9b      	lsrs	r3, r3, #22
 8019590:	b29a      	uxth	r2, r3
 8019592:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019594:	801a      	strh	r2, [r3, #0]
 8019596:	1d7b      	adds	r3, r7, #5
 8019598:	33ff      	adds	r3, #255	@ 0xff
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	2b3e      	cmp	r3, #62	@ 0x3e
 801959e:	d922      	bls.n	80195e6 <USB_EPStartXfer+0x95e>
 80195a0:	1d7b      	adds	r3, r7, #5
 80195a2:	33ff      	adds	r3, #255	@ 0xff
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	095b      	lsrs	r3, r3, #5
 80195a8:	21ec      	movs	r1, #236	@ 0xec
 80195aa:	187a      	adds	r2, r7, r1
 80195ac:	6013      	str	r3, [r2, #0]
 80195ae:	1d7b      	adds	r3, r7, #5
 80195b0:	33ff      	adds	r3, #255	@ 0xff
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	221f      	movs	r2, #31
 80195b6:	4013      	ands	r3, r2
 80195b8:	d104      	bne.n	80195c4 <USB_EPStartXfer+0x93c>
 80195ba:	187b      	adds	r3, r7, r1
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	3b01      	subs	r3, #1
 80195c0:	187a      	adds	r2, r7, r1
 80195c2:	6013      	str	r3, [r2, #0]
 80195c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80195c6:	881b      	ldrh	r3, [r3, #0]
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	23ec      	movs	r3, #236	@ 0xec
 80195cc:	18fb      	adds	r3, r7, r3
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	b29b      	uxth	r3, r3
 80195d2:	029b      	lsls	r3, r3, #10
 80195d4:	b29b      	uxth	r3, r3
 80195d6:	4313      	orrs	r3, r2
 80195d8:	b29b      	uxth	r3, r3
 80195da:	4a55      	ldr	r2, [pc, #340]	@ (8019730 <USB_EPStartXfer+0xaa8>)
 80195dc:	4313      	orrs	r3, r2
 80195de:	b29a      	uxth	r2, r3
 80195e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80195e2:	801a      	strh	r2, [r3, #0]
 80195e4:	e052      	b.n	801968c <USB_EPStartXfer+0xa04>
 80195e6:	1d7b      	adds	r3, r7, #5
 80195e8:	33ff      	adds	r3, #255	@ 0xff
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d108      	bne.n	8019602 <USB_EPStartXfer+0x97a>
 80195f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80195f2:	881b      	ldrh	r3, [r3, #0]
 80195f4:	b29b      	uxth	r3, r3
 80195f6:	4a4e      	ldr	r2, [pc, #312]	@ (8019730 <USB_EPStartXfer+0xaa8>)
 80195f8:	4313      	orrs	r3, r2
 80195fa:	b29a      	uxth	r2, r3
 80195fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80195fe:	801a      	strh	r2, [r3, #0]
 8019600:	e044      	b.n	801968c <USB_EPStartXfer+0xa04>
 8019602:	1d7b      	adds	r3, r7, #5
 8019604:	33ff      	adds	r3, #255	@ 0xff
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	085b      	lsrs	r3, r3, #1
 801960a:	21ec      	movs	r1, #236	@ 0xec
 801960c:	187a      	adds	r2, r7, r1
 801960e:	6013      	str	r3, [r2, #0]
 8019610:	1d7b      	adds	r3, r7, #5
 8019612:	33ff      	adds	r3, #255	@ 0xff
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	2201      	movs	r2, #1
 8019618:	4013      	ands	r3, r2
 801961a:	d004      	beq.n	8019626 <USB_EPStartXfer+0x99e>
 801961c:	187b      	adds	r3, r7, r1
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	3301      	adds	r3, #1
 8019622:	187a      	adds	r2, r7, r1
 8019624:	6013      	str	r3, [r2, #0]
 8019626:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019628:	881b      	ldrh	r3, [r3, #0]
 801962a:	b29a      	uxth	r2, r3
 801962c:	23ec      	movs	r3, #236	@ 0xec
 801962e:	18fb      	adds	r3, r7, r3
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	b29b      	uxth	r3, r3
 8019634:	029b      	lsls	r3, r3, #10
 8019636:	b29b      	uxth	r3, r3
 8019638:	4313      	orrs	r3, r2
 801963a:	b29a      	uxth	r2, r3
 801963c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801963e:	801a      	strh	r2, [r3, #0]
 8019640:	e024      	b.n	801968c <USB_EPStartXfer+0xa04>
 8019642:	683b      	ldr	r3, [r7, #0]
 8019644:	785b      	ldrb	r3, [r3, #1]
 8019646:	2b01      	cmp	r3, #1
 8019648:	d120      	bne.n	801968c <USB_EPStartXfer+0xa04>
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	2184      	movs	r1, #132	@ 0x84
 801964e:	187a      	adds	r2, r7, r1
 8019650:	6013      	str	r3, [r2, #0]
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	2250      	movs	r2, #80	@ 0x50
 8019656:	5a9b      	ldrh	r3, [r3, r2]
 8019658:	b29b      	uxth	r3, r3
 801965a:	001a      	movs	r2, r3
 801965c:	187b      	adds	r3, r7, r1
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	189b      	adds	r3, r3, r2
 8019662:	187a      	adds	r2, r7, r1
 8019664:	6013      	str	r3, [r2, #0]
 8019666:	683b      	ldr	r3, [r7, #0]
 8019668:	781b      	ldrb	r3, [r3, #0]
 801966a:	00da      	lsls	r2, r3, #3
 801966c:	187b      	adds	r3, r7, r1
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	18d3      	adds	r3, r2, r3
 8019672:	4a30      	ldr	r2, [pc, #192]	@ (8019734 <USB_EPStartXfer+0xaac>)
 8019674:	4694      	mov	ip, r2
 8019676:	4463      	add	r3, ip
 8019678:	2180      	movs	r1, #128	@ 0x80
 801967a:	187a      	adds	r2, r7, r1
 801967c:	6013      	str	r3, [r2, #0]
 801967e:	1d7b      	adds	r3, r7, #5
 8019680:	33ff      	adds	r3, #255	@ 0xff
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	b29a      	uxth	r2, r3
 8019686:	187b      	adds	r3, r7, r1
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801968c:	2076      	movs	r0, #118	@ 0x76
 801968e:	183b      	adds	r3, r7, r0
 8019690:	683a      	ldr	r2, [r7, #0]
 8019692:	8912      	ldrh	r2, [r2, #8]
 8019694:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019696:	683b      	ldr	r3, [r7, #0]
 8019698:	6959      	ldr	r1, [r3, #20]
 801969a:	1d7b      	adds	r3, r7, #5
 801969c:	33ff      	adds	r3, #255	@ 0xff
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	b29c      	uxth	r4, r3
 80196a2:	183b      	adds	r3, r7, r0
 80196a4:	881a      	ldrh	r2, [r3, #0]
 80196a6:	6878      	ldr	r0, [r7, #4]
 80196a8:	0023      	movs	r3, r4
 80196aa:	f000 fd5f 	bl	801a16c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80196ae:	687a      	ldr	r2, [r7, #4]
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	781b      	ldrb	r3, [r3, #0]
 80196b4:	009b      	lsls	r3, r3, #2
 80196b6:	18d3      	adds	r3, r2, r3
 80196b8:	881b      	ldrh	r3, [r3, #0]
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	200a      	movs	r0, #10
 80196be:	183b      	adds	r3, r7, r0
 80196c0:	491d      	ldr	r1, [pc, #116]	@ (8019738 <USB_EPStartXfer+0xab0>)
 80196c2:	400a      	ands	r2, r1
 80196c4:	801a      	strh	r2, [r3, #0]
 80196c6:	183b      	adds	r3, r7, r0
 80196c8:	183a      	adds	r2, r7, r0
 80196ca:	8812      	ldrh	r2, [r2, #0]
 80196cc:	2110      	movs	r1, #16
 80196ce:	404a      	eors	r2, r1
 80196d0:	801a      	strh	r2, [r3, #0]
 80196d2:	183b      	adds	r3, r7, r0
 80196d4:	183a      	adds	r2, r7, r0
 80196d6:	8812      	ldrh	r2, [r2, #0]
 80196d8:	2120      	movs	r1, #32
 80196da:	404a      	eors	r2, r1
 80196dc:	801a      	strh	r2, [r3, #0]
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	683b      	ldr	r3, [r7, #0]
 80196e2:	781b      	ldrb	r3, [r3, #0]
 80196e4:	009b      	lsls	r3, r3, #2
 80196e6:	18d3      	adds	r3, r2, r3
 80196e8:	183a      	adds	r2, r7, r0
 80196ea:	8812      	ldrh	r2, [r2, #0]
 80196ec:	4913      	ldr	r1, [pc, #76]	@ (801973c <USB_EPStartXfer+0xab4>)
 80196ee:	430a      	orrs	r2, r1
 80196f0:	b292      	uxth	r2, r2
 80196f2:	801a      	strh	r2, [r3, #0]
 80196f4:	f000 fbf4 	bl	8019ee0 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	7b1b      	ldrb	r3, [r3, #12]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d000      	beq.n	8019702 <USB_EPStartXfer+0xa7a>
 8019700:	e0a9      	b.n	8019856 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019702:	683b      	ldr	r3, [r7, #0]
 8019704:	699a      	ldr	r2, [r3, #24]
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	691b      	ldr	r3, [r3, #16]
 801970a:	429a      	cmp	r2, r3
 801970c:	d918      	bls.n	8019740 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	691b      	ldr	r3, [r3, #16]
 8019712:	1d7a      	adds	r2, r7, #5
 8019714:	32ff      	adds	r2, #255	@ 0xff
 8019716:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019718:	683b      	ldr	r3, [r7, #0]
 801971a:	699a      	ldr	r2, [r3, #24]
 801971c:	1d7b      	adds	r3, r7, #5
 801971e:	33ff      	adds	r3, #255	@ 0xff
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	1ad2      	subs	r2, r2, r3
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	619a      	str	r2, [r3, #24]
 8019728:	e012      	b.n	8019750 <USB_EPStartXfer+0xac8>
 801972a:	46c0      	nop			@ (mov r8, r8)
 801972c:	00000406 	.word	0x00000406
 8019730:	ffff8000 	.word	0xffff8000
 8019734:	00000402 	.word	0x00000402
 8019738:	ffff8fbf 	.word	0xffff8fbf
 801973c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	699b      	ldr	r3, [r3, #24]
 8019744:	1d7a      	adds	r2, r7, #5
 8019746:	32ff      	adds	r2, #255	@ 0xff
 8019748:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801974a:	683b      	ldr	r3, [r7, #0]
 801974c:	2200      	movs	r2, #0
 801974e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	2190      	movs	r1, #144	@ 0x90
 8019754:	187a      	adds	r2, r7, r1
 8019756:	6013      	str	r3, [r2, #0]
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	2250      	movs	r2, #80	@ 0x50
 801975c:	5a9b      	ldrh	r3, [r3, r2]
 801975e:	b29b      	uxth	r3, r3
 8019760:	001a      	movs	r2, r3
 8019762:	187b      	adds	r3, r7, r1
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	189b      	adds	r3, r3, r2
 8019768:	187a      	adds	r2, r7, r1
 801976a:	6013      	str	r3, [r2, #0]
 801976c:	683b      	ldr	r3, [r7, #0]
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	00da      	lsls	r2, r3, #3
 8019772:	187b      	adds	r3, r7, r1
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	18d3      	adds	r3, r2, r3
 8019778:	4acf      	ldr	r2, [pc, #828]	@ (8019ab8 <USB_EPStartXfer+0xe30>)
 801977a:	4694      	mov	ip, r2
 801977c:	4463      	add	r3, ip
 801977e:	218c      	movs	r1, #140	@ 0x8c
 8019780:	187a      	adds	r2, r7, r1
 8019782:	6013      	str	r3, [r2, #0]
 8019784:	187b      	adds	r3, r7, r1
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	881b      	ldrh	r3, [r3, #0]
 801978a:	b29b      	uxth	r3, r3
 801978c:	059b      	lsls	r3, r3, #22
 801978e:	0d9b      	lsrs	r3, r3, #22
 8019790:	b29a      	uxth	r2, r3
 8019792:	187b      	adds	r3, r7, r1
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	801a      	strh	r2, [r3, #0]
 8019798:	1d7b      	adds	r3, r7, #5
 801979a:	33ff      	adds	r3, #255	@ 0xff
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	2b3e      	cmp	r3, #62	@ 0x3e
 80197a0:	d925      	bls.n	80197ee <USB_EPStartXfer+0xb66>
 80197a2:	1d7b      	adds	r3, r7, #5
 80197a4:	33ff      	adds	r3, #255	@ 0xff
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	095b      	lsrs	r3, r3, #5
 80197aa:	21e8      	movs	r1, #232	@ 0xe8
 80197ac:	187a      	adds	r2, r7, r1
 80197ae:	6013      	str	r3, [r2, #0]
 80197b0:	1d7b      	adds	r3, r7, #5
 80197b2:	33ff      	adds	r3, #255	@ 0xff
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	221f      	movs	r2, #31
 80197b8:	4013      	ands	r3, r2
 80197ba:	d104      	bne.n	80197c6 <USB_EPStartXfer+0xb3e>
 80197bc:	187b      	adds	r3, r7, r1
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	3b01      	subs	r3, #1
 80197c2:	187a      	adds	r2, r7, r1
 80197c4:	6013      	str	r3, [r2, #0]
 80197c6:	218c      	movs	r1, #140	@ 0x8c
 80197c8:	187b      	adds	r3, r7, r1
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	881b      	ldrh	r3, [r3, #0]
 80197ce:	b29a      	uxth	r2, r3
 80197d0:	23e8      	movs	r3, #232	@ 0xe8
 80197d2:	18fb      	adds	r3, r7, r3
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	b29b      	uxth	r3, r3
 80197d8:	029b      	lsls	r3, r3, #10
 80197da:	b29b      	uxth	r3, r3
 80197dc:	4313      	orrs	r3, r2
 80197de:	b29b      	uxth	r3, r3
 80197e0:	4ab6      	ldr	r2, [pc, #728]	@ (8019abc <USB_EPStartXfer+0xe34>)
 80197e2:	4313      	orrs	r3, r2
 80197e4:	b29a      	uxth	r2, r3
 80197e6:	187b      	adds	r3, r7, r1
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	801a      	strh	r2, [r3, #0]
 80197ec:	e353      	b.n	8019e96 <USB_EPStartXfer+0x120e>
 80197ee:	1d7b      	adds	r3, r7, #5
 80197f0:	33ff      	adds	r3, #255	@ 0xff
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d10b      	bne.n	8019810 <USB_EPStartXfer+0xb88>
 80197f8:	218c      	movs	r1, #140	@ 0x8c
 80197fa:	187b      	adds	r3, r7, r1
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	881b      	ldrh	r3, [r3, #0]
 8019800:	b29b      	uxth	r3, r3
 8019802:	4aae      	ldr	r2, [pc, #696]	@ (8019abc <USB_EPStartXfer+0xe34>)
 8019804:	4313      	orrs	r3, r2
 8019806:	b29a      	uxth	r2, r3
 8019808:	187b      	adds	r3, r7, r1
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	801a      	strh	r2, [r3, #0]
 801980e:	e342      	b.n	8019e96 <USB_EPStartXfer+0x120e>
 8019810:	1d7b      	adds	r3, r7, #5
 8019812:	33ff      	adds	r3, #255	@ 0xff
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	085b      	lsrs	r3, r3, #1
 8019818:	21e8      	movs	r1, #232	@ 0xe8
 801981a:	187a      	adds	r2, r7, r1
 801981c:	6013      	str	r3, [r2, #0]
 801981e:	1d7b      	adds	r3, r7, #5
 8019820:	33ff      	adds	r3, #255	@ 0xff
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	2201      	movs	r2, #1
 8019826:	4013      	ands	r3, r2
 8019828:	d004      	beq.n	8019834 <USB_EPStartXfer+0xbac>
 801982a:	187b      	adds	r3, r7, r1
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	3301      	adds	r3, #1
 8019830:	187a      	adds	r2, r7, r1
 8019832:	6013      	str	r3, [r2, #0]
 8019834:	218c      	movs	r1, #140	@ 0x8c
 8019836:	187b      	adds	r3, r7, r1
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	881b      	ldrh	r3, [r3, #0]
 801983c:	b29a      	uxth	r2, r3
 801983e:	23e8      	movs	r3, #232	@ 0xe8
 8019840:	18fb      	adds	r3, r7, r3
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	b29b      	uxth	r3, r3
 8019846:	029b      	lsls	r3, r3, #10
 8019848:	b29b      	uxth	r3, r3
 801984a:	4313      	orrs	r3, r2
 801984c:	b29a      	uxth	r2, r3
 801984e:	187b      	adds	r3, r7, r1
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	801a      	strh	r2, [r3, #0]
 8019854:	e31f      	b.n	8019e96 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8019856:	683b      	ldr	r3, [r7, #0]
 8019858:	78db      	ldrb	r3, [r3, #3]
 801985a:	2b02      	cmp	r3, #2
 801985c:	d000      	beq.n	8019860 <USB_EPStartXfer+0xbd8>
 801985e:	e191      	b.n	8019b84 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	785b      	ldrb	r3, [r3, #1]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d000      	beq.n	801986a <USB_EPStartXfer+0xbe2>
 8019868:	e07c      	b.n	8019964 <USB_EPStartXfer+0xcdc>
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	21ac      	movs	r1, #172	@ 0xac
 801986e:	187a      	adds	r2, r7, r1
 8019870:	6013      	str	r3, [r2, #0]
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	2250      	movs	r2, #80	@ 0x50
 8019876:	5a9b      	ldrh	r3, [r3, r2]
 8019878:	b29b      	uxth	r3, r3
 801987a:	001a      	movs	r2, r3
 801987c:	187b      	adds	r3, r7, r1
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	189b      	adds	r3, r3, r2
 8019882:	187a      	adds	r2, r7, r1
 8019884:	6013      	str	r3, [r2, #0]
 8019886:	683b      	ldr	r3, [r7, #0]
 8019888:	781b      	ldrb	r3, [r3, #0]
 801988a:	00da      	lsls	r2, r3, #3
 801988c:	187b      	adds	r3, r7, r1
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	18d3      	adds	r3, r2, r3
 8019892:	4a8b      	ldr	r2, [pc, #556]	@ (8019ac0 <USB_EPStartXfer+0xe38>)
 8019894:	4694      	mov	ip, r2
 8019896:	4463      	add	r3, ip
 8019898:	21a8      	movs	r1, #168	@ 0xa8
 801989a:	187a      	adds	r2, r7, r1
 801989c:	6013      	str	r3, [r2, #0]
 801989e:	187b      	adds	r3, r7, r1
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	881b      	ldrh	r3, [r3, #0]
 80198a4:	b29b      	uxth	r3, r3
 80198a6:	059b      	lsls	r3, r3, #22
 80198a8:	0d9b      	lsrs	r3, r3, #22
 80198aa:	b29a      	uxth	r2, r3
 80198ac:	187b      	adds	r3, r7, r1
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	801a      	strh	r2, [r3, #0]
 80198b2:	683b      	ldr	r3, [r7, #0]
 80198b4:	691b      	ldr	r3, [r3, #16]
 80198b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80198b8:	d923      	bls.n	8019902 <USB_EPStartXfer+0xc7a>
 80198ba:	683b      	ldr	r3, [r7, #0]
 80198bc:	691b      	ldr	r3, [r3, #16]
 80198be:	095b      	lsrs	r3, r3, #5
 80198c0:	21e4      	movs	r1, #228	@ 0xe4
 80198c2:	187a      	adds	r2, r7, r1
 80198c4:	6013      	str	r3, [r2, #0]
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	691b      	ldr	r3, [r3, #16]
 80198ca:	221f      	movs	r2, #31
 80198cc:	4013      	ands	r3, r2
 80198ce:	d104      	bne.n	80198da <USB_EPStartXfer+0xc52>
 80198d0:	187b      	adds	r3, r7, r1
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	3b01      	subs	r3, #1
 80198d6:	187a      	adds	r2, r7, r1
 80198d8:	6013      	str	r3, [r2, #0]
 80198da:	21a8      	movs	r1, #168	@ 0xa8
 80198dc:	187b      	adds	r3, r7, r1
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	881b      	ldrh	r3, [r3, #0]
 80198e2:	b29a      	uxth	r2, r3
 80198e4:	23e4      	movs	r3, #228	@ 0xe4
 80198e6:	18fb      	adds	r3, r7, r3
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	029b      	lsls	r3, r3, #10
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	4313      	orrs	r3, r2
 80198f2:	b29b      	uxth	r3, r3
 80198f4:	4a71      	ldr	r2, [pc, #452]	@ (8019abc <USB_EPStartXfer+0xe34>)
 80198f6:	4313      	orrs	r3, r2
 80198f8:	b29a      	uxth	r2, r3
 80198fa:	187b      	adds	r3, r7, r1
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	801a      	strh	r2, [r3, #0]
 8019900:	e054      	b.n	80199ac <USB_EPStartXfer+0xd24>
 8019902:	683b      	ldr	r3, [r7, #0]
 8019904:	691b      	ldr	r3, [r3, #16]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d10b      	bne.n	8019922 <USB_EPStartXfer+0xc9a>
 801990a:	21a8      	movs	r1, #168	@ 0xa8
 801990c:	187b      	adds	r3, r7, r1
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	881b      	ldrh	r3, [r3, #0]
 8019912:	b29b      	uxth	r3, r3
 8019914:	4a69      	ldr	r2, [pc, #420]	@ (8019abc <USB_EPStartXfer+0xe34>)
 8019916:	4313      	orrs	r3, r2
 8019918:	b29a      	uxth	r2, r3
 801991a:	187b      	adds	r3, r7, r1
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	801a      	strh	r2, [r3, #0]
 8019920:	e044      	b.n	80199ac <USB_EPStartXfer+0xd24>
 8019922:	683b      	ldr	r3, [r7, #0]
 8019924:	691b      	ldr	r3, [r3, #16]
 8019926:	085b      	lsrs	r3, r3, #1
 8019928:	21e4      	movs	r1, #228	@ 0xe4
 801992a:	187a      	adds	r2, r7, r1
 801992c:	6013      	str	r3, [r2, #0]
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	691b      	ldr	r3, [r3, #16]
 8019932:	2201      	movs	r2, #1
 8019934:	4013      	ands	r3, r2
 8019936:	d004      	beq.n	8019942 <USB_EPStartXfer+0xcba>
 8019938:	187b      	adds	r3, r7, r1
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	3301      	adds	r3, #1
 801993e:	187a      	adds	r2, r7, r1
 8019940:	6013      	str	r3, [r2, #0]
 8019942:	21a8      	movs	r1, #168	@ 0xa8
 8019944:	187b      	adds	r3, r7, r1
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	881b      	ldrh	r3, [r3, #0]
 801994a:	b29a      	uxth	r2, r3
 801994c:	23e4      	movs	r3, #228	@ 0xe4
 801994e:	18fb      	adds	r3, r7, r3
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	b29b      	uxth	r3, r3
 8019954:	029b      	lsls	r3, r3, #10
 8019956:	b29b      	uxth	r3, r3
 8019958:	4313      	orrs	r3, r2
 801995a:	b29a      	uxth	r2, r3
 801995c:	187b      	adds	r3, r7, r1
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	801a      	strh	r2, [r3, #0]
 8019962:	e023      	b.n	80199ac <USB_EPStartXfer+0xd24>
 8019964:	683b      	ldr	r3, [r7, #0]
 8019966:	785b      	ldrb	r3, [r3, #1]
 8019968:	2b01      	cmp	r3, #1
 801996a:	d11f      	bne.n	80199ac <USB_EPStartXfer+0xd24>
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	21b4      	movs	r1, #180	@ 0xb4
 8019970:	187a      	adds	r2, r7, r1
 8019972:	6013      	str	r3, [r2, #0]
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2250      	movs	r2, #80	@ 0x50
 8019978:	5a9b      	ldrh	r3, [r3, r2]
 801997a:	b29b      	uxth	r3, r3
 801997c:	001a      	movs	r2, r3
 801997e:	187b      	adds	r3, r7, r1
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	189b      	adds	r3, r3, r2
 8019984:	187a      	adds	r2, r7, r1
 8019986:	6013      	str	r3, [r2, #0]
 8019988:	683b      	ldr	r3, [r7, #0]
 801998a:	781b      	ldrb	r3, [r3, #0]
 801998c:	00da      	lsls	r2, r3, #3
 801998e:	187b      	adds	r3, r7, r1
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	18d3      	adds	r3, r2, r3
 8019994:	4a4a      	ldr	r2, [pc, #296]	@ (8019ac0 <USB_EPStartXfer+0xe38>)
 8019996:	4694      	mov	ip, r2
 8019998:	4463      	add	r3, ip
 801999a:	21b0      	movs	r1, #176	@ 0xb0
 801999c:	187a      	adds	r2, r7, r1
 801999e:	6013      	str	r3, [r2, #0]
 80199a0:	683b      	ldr	r3, [r7, #0]
 80199a2:	691b      	ldr	r3, [r3, #16]
 80199a4:	b29a      	uxth	r2, r3
 80199a6:	187b      	adds	r3, r7, r1
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	801a      	strh	r2, [r3, #0]
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	22a4      	movs	r2, #164	@ 0xa4
 80199b0:	18ba      	adds	r2, r7, r2
 80199b2:	6013      	str	r3, [r2, #0]
 80199b4:	683b      	ldr	r3, [r7, #0]
 80199b6:	785b      	ldrb	r3, [r3, #1]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d000      	beq.n	80199be <USB_EPStartXfer+0xd36>
 80199bc:	e082      	b.n	8019ac4 <USB_EPStartXfer+0xe3c>
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	219c      	movs	r1, #156	@ 0x9c
 80199c2:	187a      	adds	r2, r7, r1
 80199c4:	6013      	str	r3, [r2, #0]
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	2250      	movs	r2, #80	@ 0x50
 80199ca:	5a9b      	ldrh	r3, [r3, r2]
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	001a      	movs	r2, r3
 80199d0:	187b      	adds	r3, r7, r1
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	189b      	adds	r3, r3, r2
 80199d6:	187a      	adds	r2, r7, r1
 80199d8:	6013      	str	r3, [r2, #0]
 80199da:	683b      	ldr	r3, [r7, #0]
 80199dc:	781b      	ldrb	r3, [r3, #0]
 80199de:	00da      	lsls	r2, r3, #3
 80199e0:	187b      	adds	r3, r7, r1
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	18d3      	adds	r3, r2, r3
 80199e6:	4a34      	ldr	r2, [pc, #208]	@ (8019ab8 <USB_EPStartXfer+0xe30>)
 80199e8:	4694      	mov	ip, r2
 80199ea:	4463      	add	r3, ip
 80199ec:	2198      	movs	r1, #152	@ 0x98
 80199ee:	187a      	adds	r2, r7, r1
 80199f0:	6013      	str	r3, [r2, #0]
 80199f2:	187b      	adds	r3, r7, r1
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	881b      	ldrh	r3, [r3, #0]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	059b      	lsls	r3, r3, #22
 80199fc:	0d9b      	lsrs	r3, r3, #22
 80199fe:	b29a      	uxth	r2, r3
 8019a00:	187b      	adds	r3, r7, r1
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	801a      	strh	r2, [r3, #0]
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	691b      	ldr	r3, [r3, #16]
 8019a0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019a0c:	d923      	bls.n	8019a56 <USB_EPStartXfer+0xdce>
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	691b      	ldr	r3, [r3, #16]
 8019a12:	095b      	lsrs	r3, r3, #5
 8019a14:	21e0      	movs	r1, #224	@ 0xe0
 8019a16:	187a      	adds	r2, r7, r1
 8019a18:	6013      	str	r3, [r2, #0]
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	691b      	ldr	r3, [r3, #16]
 8019a1e:	221f      	movs	r2, #31
 8019a20:	4013      	ands	r3, r2
 8019a22:	d104      	bne.n	8019a2e <USB_EPStartXfer+0xda6>
 8019a24:	187b      	adds	r3, r7, r1
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	3b01      	subs	r3, #1
 8019a2a:	187a      	adds	r2, r7, r1
 8019a2c:	6013      	str	r3, [r2, #0]
 8019a2e:	2198      	movs	r1, #152	@ 0x98
 8019a30:	187b      	adds	r3, r7, r1
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	881b      	ldrh	r3, [r3, #0]
 8019a36:	b29a      	uxth	r2, r3
 8019a38:	23e0      	movs	r3, #224	@ 0xe0
 8019a3a:	18fb      	adds	r3, r7, r3
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	b29b      	uxth	r3, r3
 8019a40:	029b      	lsls	r3, r3, #10
 8019a42:	b29b      	uxth	r3, r3
 8019a44:	4313      	orrs	r3, r2
 8019a46:	b29b      	uxth	r3, r3
 8019a48:	4a1c      	ldr	r2, [pc, #112]	@ (8019abc <USB_EPStartXfer+0xe34>)
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	b29a      	uxth	r2, r3
 8019a4e:	187b      	adds	r3, r7, r1
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	801a      	strh	r2, [r3, #0]
 8019a54:	e057      	b.n	8019b06 <USB_EPStartXfer+0xe7e>
 8019a56:	683b      	ldr	r3, [r7, #0]
 8019a58:	691b      	ldr	r3, [r3, #16]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d10b      	bne.n	8019a76 <USB_EPStartXfer+0xdee>
 8019a5e:	2198      	movs	r1, #152	@ 0x98
 8019a60:	187b      	adds	r3, r7, r1
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	881b      	ldrh	r3, [r3, #0]
 8019a66:	b29b      	uxth	r3, r3
 8019a68:	4a14      	ldr	r2, [pc, #80]	@ (8019abc <USB_EPStartXfer+0xe34>)
 8019a6a:	4313      	orrs	r3, r2
 8019a6c:	b29a      	uxth	r2, r3
 8019a6e:	187b      	adds	r3, r7, r1
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	801a      	strh	r2, [r3, #0]
 8019a74:	e047      	b.n	8019b06 <USB_EPStartXfer+0xe7e>
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	691b      	ldr	r3, [r3, #16]
 8019a7a:	085b      	lsrs	r3, r3, #1
 8019a7c:	21e0      	movs	r1, #224	@ 0xe0
 8019a7e:	187a      	adds	r2, r7, r1
 8019a80:	6013      	str	r3, [r2, #0]
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	691b      	ldr	r3, [r3, #16]
 8019a86:	2201      	movs	r2, #1
 8019a88:	4013      	ands	r3, r2
 8019a8a:	d004      	beq.n	8019a96 <USB_EPStartXfer+0xe0e>
 8019a8c:	187b      	adds	r3, r7, r1
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	3301      	adds	r3, #1
 8019a92:	187a      	adds	r2, r7, r1
 8019a94:	6013      	str	r3, [r2, #0]
 8019a96:	2198      	movs	r1, #152	@ 0x98
 8019a98:	187b      	adds	r3, r7, r1
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	881b      	ldrh	r3, [r3, #0]
 8019a9e:	b29a      	uxth	r2, r3
 8019aa0:	23e0      	movs	r3, #224	@ 0xe0
 8019aa2:	18fb      	adds	r3, r7, r3
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	b29b      	uxth	r3, r3
 8019aa8:	029b      	lsls	r3, r3, #10
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	4313      	orrs	r3, r2
 8019aae:	b29a      	uxth	r2, r3
 8019ab0:	187b      	adds	r3, r7, r1
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	801a      	strh	r2, [r3, #0]
 8019ab6:	e026      	b.n	8019b06 <USB_EPStartXfer+0xe7e>
 8019ab8:	00000406 	.word	0x00000406
 8019abc:	ffff8000 	.word	0xffff8000
 8019ac0:	00000402 	.word	0x00000402
 8019ac4:	683b      	ldr	r3, [r7, #0]
 8019ac6:	785b      	ldrb	r3, [r3, #1]
 8019ac8:	2b01      	cmp	r3, #1
 8019aca:	d11c      	bne.n	8019b06 <USB_EPStartXfer+0xe7e>
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	2250      	movs	r2, #80	@ 0x50
 8019ad0:	5a9b      	ldrh	r3, [r3, r2]
 8019ad2:	b29b      	uxth	r3, r3
 8019ad4:	001a      	movs	r2, r3
 8019ad6:	21a4      	movs	r1, #164	@ 0xa4
 8019ad8:	187b      	adds	r3, r7, r1
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	189b      	adds	r3, r3, r2
 8019ade:	187a      	adds	r2, r7, r1
 8019ae0:	6013      	str	r3, [r2, #0]
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	00da      	lsls	r2, r3, #3
 8019ae8:	187b      	adds	r3, r7, r1
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	18d3      	adds	r3, r2, r3
 8019aee:	4ad2      	ldr	r2, [pc, #840]	@ (8019e38 <USB_EPStartXfer+0x11b0>)
 8019af0:	4694      	mov	ip, r2
 8019af2:	4463      	add	r3, ip
 8019af4:	21a0      	movs	r1, #160	@ 0xa0
 8019af6:	187a      	adds	r2, r7, r1
 8019af8:	6013      	str	r3, [r2, #0]
 8019afa:	683b      	ldr	r3, [r7, #0]
 8019afc:	691b      	ldr	r3, [r3, #16]
 8019afe:	b29a      	uxth	r2, r3
 8019b00:	187b      	adds	r3, r7, r1
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	69db      	ldr	r3, [r3, #28]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d100      	bne.n	8019b10 <USB_EPStartXfer+0xe88>
 8019b0e:	e1c2      	b.n	8019e96 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8019b10:	687a      	ldr	r2, [r7, #4]
 8019b12:	683b      	ldr	r3, [r7, #0]
 8019b14:	781b      	ldrb	r3, [r3, #0]
 8019b16:	009b      	lsls	r3, r3, #2
 8019b18:	18d2      	adds	r2, r2, r3
 8019b1a:	2196      	movs	r1, #150	@ 0x96
 8019b1c:	187b      	adds	r3, r7, r1
 8019b1e:	8812      	ldrh	r2, [r2, #0]
 8019b20:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019b22:	187b      	adds	r3, r7, r1
 8019b24:	881a      	ldrh	r2, [r3, #0]
 8019b26:	2380      	movs	r3, #128	@ 0x80
 8019b28:	01db      	lsls	r3, r3, #7
 8019b2a:	4013      	ands	r3, r2
 8019b2c:	d004      	beq.n	8019b38 <USB_EPStartXfer+0xeb0>
 8019b2e:	187b      	adds	r3, r7, r1
 8019b30:	881b      	ldrh	r3, [r3, #0]
 8019b32:	2240      	movs	r2, #64	@ 0x40
 8019b34:	4013      	ands	r3, r2
 8019b36:	d10d      	bne.n	8019b54 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019b38:	2196      	movs	r1, #150	@ 0x96
 8019b3a:	187b      	adds	r3, r7, r1
 8019b3c:	881a      	ldrh	r2, [r3, #0]
 8019b3e:	2380      	movs	r3, #128	@ 0x80
 8019b40:	01db      	lsls	r3, r3, #7
 8019b42:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019b44:	d000      	beq.n	8019b48 <USB_EPStartXfer+0xec0>
 8019b46:	e1a6      	b.n	8019e96 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019b48:	187b      	adds	r3, r7, r1
 8019b4a:	881b      	ldrh	r3, [r3, #0]
 8019b4c:	2240      	movs	r2, #64	@ 0x40
 8019b4e:	4013      	ands	r3, r2
 8019b50:	d000      	beq.n	8019b54 <USB_EPStartXfer+0xecc>
 8019b52:	e1a0      	b.n	8019e96 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8019b54:	687a      	ldr	r2, [r7, #4]
 8019b56:	683b      	ldr	r3, [r7, #0]
 8019b58:	781b      	ldrb	r3, [r3, #0]
 8019b5a:	009b      	lsls	r3, r3, #2
 8019b5c:	18d3      	adds	r3, r2, r3
 8019b5e:	881b      	ldrh	r3, [r3, #0]
 8019b60:	b29a      	uxth	r2, r3
 8019b62:	2094      	movs	r0, #148	@ 0x94
 8019b64:	183b      	adds	r3, r7, r0
 8019b66:	49b5      	ldr	r1, [pc, #724]	@ (8019e3c <USB_EPStartXfer+0x11b4>)
 8019b68:	400a      	ands	r2, r1
 8019b6a:	801a      	strh	r2, [r3, #0]
 8019b6c:	687a      	ldr	r2, [r7, #4]
 8019b6e:	683b      	ldr	r3, [r7, #0]
 8019b70:	781b      	ldrb	r3, [r3, #0]
 8019b72:	009b      	lsls	r3, r3, #2
 8019b74:	18d3      	adds	r3, r2, r3
 8019b76:	183a      	adds	r2, r7, r0
 8019b78:	8812      	ldrh	r2, [r2, #0]
 8019b7a:	49b1      	ldr	r1, [pc, #708]	@ (8019e40 <USB_EPStartXfer+0x11b8>)
 8019b7c:	430a      	orrs	r2, r1
 8019b7e:	b292      	uxth	r2, r2
 8019b80:	801a      	strh	r2, [r3, #0]
 8019b82:	e188      	b.n	8019e96 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	78db      	ldrb	r3, [r3, #3]
 8019b88:	2b01      	cmp	r3, #1
 8019b8a:	d000      	beq.n	8019b8e <USB_EPStartXfer+0xf06>
 8019b8c:	e181      	b.n	8019e92 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	699a      	ldr	r2, [r3, #24]
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	691b      	ldr	r3, [r3, #16]
 8019b96:	429a      	cmp	r2, r3
 8019b98:	d90d      	bls.n	8019bb6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	691b      	ldr	r3, [r3, #16]
 8019b9e:	1d7a      	adds	r2, r7, #5
 8019ba0:	32ff      	adds	r2, #255	@ 0xff
 8019ba2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	699a      	ldr	r2, [r3, #24]
 8019ba8:	1d7b      	adds	r3, r7, #5
 8019baa:	33ff      	adds	r3, #255	@ 0xff
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	1ad2      	subs	r2, r2, r3
 8019bb0:	683b      	ldr	r3, [r7, #0]
 8019bb2:	619a      	str	r2, [r3, #24]
 8019bb4:	e007      	b.n	8019bc6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8019bb6:	683b      	ldr	r3, [r7, #0]
 8019bb8:	699b      	ldr	r3, [r3, #24]
 8019bba:	1d7a      	adds	r2, r7, #5
 8019bbc:	32ff      	adds	r2, #255	@ 0xff
 8019bbe:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8019bc0:	683b      	ldr	r3, [r7, #0]
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8019bc6:	683b      	ldr	r3, [r7, #0]
 8019bc8:	785b      	ldrb	r3, [r3, #1]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d000      	beq.n	8019bd0 <USB_EPStartXfer+0xf48>
 8019bce:	e082      	b.n	8019cd6 <USB_EPStartXfer+0x104e>
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	21cc      	movs	r1, #204	@ 0xcc
 8019bd4:	187a      	adds	r2, r7, r1
 8019bd6:	6013      	str	r3, [r2, #0]
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	2250      	movs	r2, #80	@ 0x50
 8019bdc:	5a9b      	ldrh	r3, [r3, r2]
 8019bde:	b29b      	uxth	r3, r3
 8019be0:	001a      	movs	r2, r3
 8019be2:	187b      	adds	r3, r7, r1
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	189b      	adds	r3, r3, r2
 8019be8:	187a      	adds	r2, r7, r1
 8019bea:	6013      	str	r3, [r2, #0]
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	00da      	lsls	r2, r3, #3
 8019bf2:	187b      	adds	r3, r7, r1
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	18d3      	adds	r3, r2, r3
 8019bf8:	4a92      	ldr	r2, [pc, #584]	@ (8019e44 <USB_EPStartXfer+0x11bc>)
 8019bfa:	4694      	mov	ip, r2
 8019bfc:	4463      	add	r3, ip
 8019bfe:	21c8      	movs	r1, #200	@ 0xc8
 8019c00:	187a      	adds	r2, r7, r1
 8019c02:	6013      	str	r3, [r2, #0]
 8019c04:	187b      	adds	r3, r7, r1
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	881b      	ldrh	r3, [r3, #0]
 8019c0a:	b29b      	uxth	r3, r3
 8019c0c:	059b      	lsls	r3, r3, #22
 8019c0e:	0d9b      	lsrs	r3, r3, #22
 8019c10:	b29a      	uxth	r2, r3
 8019c12:	187b      	adds	r3, r7, r1
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	801a      	strh	r2, [r3, #0]
 8019c18:	1d7b      	adds	r3, r7, #5
 8019c1a:	33ff      	adds	r3, #255	@ 0xff
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c20:	d925      	bls.n	8019c6e <USB_EPStartXfer+0xfe6>
 8019c22:	1d7b      	adds	r3, r7, #5
 8019c24:	33ff      	adds	r3, #255	@ 0xff
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	095b      	lsrs	r3, r3, #5
 8019c2a:	21dc      	movs	r1, #220	@ 0xdc
 8019c2c:	187a      	adds	r2, r7, r1
 8019c2e:	6013      	str	r3, [r2, #0]
 8019c30:	1d7b      	adds	r3, r7, #5
 8019c32:	33ff      	adds	r3, #255	@ 0xff
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	221f      	movs	r2, #31
 8019c38:	4013      	ands	r3, r2
 8019c3a:	d104      	bne.n	8019c46 <USB_EPStartXfer+0xfbe>
 8019c3c:	187b      	adds	r3, r7, r1
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	3b01      	subs	r3, #1
 8019c42:	187a      	adds	r2, r7, r1
 8019c44:	6013      	str	r3, [r2, #0]
 8019c46:	21c8      	movs	r1, #200	@ 0xc8
 8019c48:	187b      	adds	r3, r7, r1
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	881b      	ldrh	r3, [r3, #0]
 8019c4e:	b29a      	uxth	r2, r3
 8019c50:	23dc      	movs	r3, #220	@ 0xdc
 8019c52:	18fb      	adds	r3, r7, r3
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	b29b      	uxth	r3, r3
 8019c58:	029b      	lsls	r3, r3, #10
 8019c5a:	b29b      	uxth	r3, r3
 8019c5c:	4313      	orrs	r3, r2
 8019c5e:	b29b      	uxth	r3, r3
 8019c60:	4a79      	ldr	r2, [pc, #484]	@ (8019e48 <USB_EPStartXfer+0x11c0>)
 8019c62:	4313      	orrs	r3, r2
 8019c64:	b29a      	uxth	r2, r3
 8019c66:	187b      	adds	r3, r7, r1
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	801a      	strh	r2, [r3, #0]
 8019c6c:	e058      	b.n	8019d20 <USB_EPStartXfer+0x1098>
 8019c6e:	1d7b      	adds	r3, r7, #5
 8019c70:	33ff      	adds	r3, #255	@ 0xff
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d10b      	bne.n	8019c90 <USB_EPStartXfer+0x1008>
 8019c78:	21c8      	movs	r1, #200	@ 0xc8
 8019c7a:	187b      	adds	r3, r7, r1
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	881b      	ldrh	r3, [r3, #0]
 8019c80:	b29b      	uxth	r3, r3
 8019c82:	4a71      	ldr	r2, [pc, #452]	@ (8019e48 <USB_EPStartXfer+0x11c0>)
 8019c84:	4313      	orrs	r3, r2
 8019c86:	b29a      	uxth	r2, r3
 8019c88:	187b      	adds	r3, r7, r1
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	801a      	strh	r2, [r3, #0]
 8019c8e:	e047      	b.n	8019d20 <USB_EPStartXfer+0x1098>
 8019c90:	1d7b      	adds	r3, r7, #5
 8019c92:	33ff      	adds	r3, #255	@ 0xff
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	085b      	lsrs	r3, r3, #1
 8019c98:	21dc      	movs	r1, #220	@ 0xdc
 8019c9a:	187a      	adds	r2, r7, r1
 8019c9c:	6013      	str	r3, [r2, #0]
 8019c9e:	1d7b      	adds	r3, r7, #5
 8019ca0:	33ff      	adds	r3, #255	@ 0xff
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	2201      	movs	r2, #1
 8019ca6:	4013      	ands	r3, r2
 8019ca8:	d004      	beq.n	8019cb4 <USB_EPStartXfer+0x102c>
 8019caa:	187b      	adds	r3, r7, r1
 8019cac:	681b      	ldr	r3, [r3, #0]
 8019cae:	3301      	adds	r3, #1
 8019cb0:	187a      	adds	r2, r7, r1
 8019cb2:	6013      	str	r3, [r2, #0]
 8019cb4:	21c8      	movs	r1, #200	@ 0xc8
 8019cb6:	187b      	adds	r3, r7, r1
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	881b      	ldrh	r3, [r3, #0]
 8019cbc:	b29a      	uxth	r2, r3
 8019cbe:	23dc      	movs	r3, #220	@ 0xdc
 8019cc0:	18fb      	adds	r3, r7, r3
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	b29b      	uxth	r3, r3
 8019cc6:	029b      	lsls	r3, r3, #10
 8019cc8:	b29b      	uxth	r3, r3
 8019cca:	4313      	orrs	r3, r2
 8019ccc:	b29a      	uxth	r2, r3
 8019cce:	187b      	adds	r3, r7, r1
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	801a      	strh	r2, [r3, #0]
 8019cd4:	e024      	b.n	8019d20 <USB_EPStartXfer+0x1098>
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	785b      	ldrb	r3, [r3, #1]
 8019cda:	2b01      	cmp	r3, #1
 8019cdc:	d120      	bne.n	8019d20 <USB_EPStartXfer+0x1098>
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	21d4      	movs	r1, #212	@ 0xd4
 8019ce2:	187a      	adds	r2, r7, r1
 8019ce4:	6013      	str	r3, [r2, #0]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	2250      	movs	r2, #80	@ 0x50
 8019cea:	5a9b      	ldrh	r3, [r3, r2]
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	001a      	movs	r2, r3
 8019cf0:	187b      	adds	r3, r7, r1
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	189b      	adds	r3, r3, r2
 8019cf6:	187a      	adds	r2, r7, r1
 8019cf8:	6013      	str	r3, [r2, #0]
 8019cfa:	683b      	ldr	r3, [r7, #0]
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	00da      	lsls	r2, r3, #3
 8019d00:	187b      	adds	r3, r7, r1
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	18d3      	adds	r3, r2, r3
 8019d06:	4a4f      	ldr	r2, [pc, #316]	@ (8019e44 <USB_EPStartXfer+0x11bc>)
 8019d08:	4694      	mov	ip, r2
 8019d0a:	4463      	add	r3, ip
 8019d0c:	21d0      	movs	r1, #208	@ 0xd0
 8019d0e:	187a      	adds	r2, r7, r1
 8019d10:	6013      	str	r3, [r2, #0]
 8019d12:	1d7b      	adds	r3, r7, #5
 8019d14:	33ff      	adds	r3, #255	@ 0xff
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	b29a      	uxth	r2, r3
 8019d1a:	187b      	adds	r3, r7, r1
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	801a      	strh	r2, [r3, #0]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	22c4      	movs	r2, #196	@ 0xc4
 8019d24:	18ba      	adds	r2, r7, r2
 8019d26:	6013      	str	r3, [r2, #0]
 8019d28:	683b      	ldr	r3, [r7, #0]
 8019d2a:	785b      	ldrb	r3, [r3, #1]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d000      	beq.n	8019d32 <USB_EPStartXfer+0x10aa>
 8019d30:	e08c      	b.n	8019e4c <USB_EPStartXfer+0x11c4>
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	21bc      	movs	r1, #188	@ 0xbc
 8019d36:	187a      	adds	r2, r7, r1
 8019d38:	6013      	str	r3, [r2, #0]
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	2250      	movs	r2, #80	@ 0x50
 8019d3e:	5a9b      	ldrh	r3, [r3, r2]
 8019d40:	b29b      	uxth	r3, r3
 8019d42:	001a      	movs	r2, r3
 8019d44:	187b      	adds	r3, r7, r1
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	189b      	adds	r3, r3, r2
 8019d4a:	187a      	adds	r2, r7, r1
 8019d4c:	6013      	str	r3, [r2, #0]
 8019d4e:	683b      	ldr	r3, [r7, #0]
 8019d50:	781b      	ldrb	r3, [r3, #0]
 8019d52:	00da      	lsls	r2, r3, #3
 8019d54:	187b      	adds	r3, r7, r1
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	18d3      	adds	r3, r2, r3
 8019d5a:	4a37      	ldr	r2, [pc, #220]	@ (8019e38 <USB_EPStartXfer+0x11b0>)
 8019d5c:	4694      	mov	ip, r2
 8019d5e:	4463      	add	r3, ip
 8019d60:	21b8      	movs	r1, #184	@ 0xb8
 8019d62:	187a      	adds	r2, r7, r1
 8019d64:	6013      	str	r3, [r2, #0]
 8019d66:	187b      	adds	r3, r7, r1
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	881b      	ldrh	r3, [r3, #0]
 8019d6c:	b29b      	uxth	r3, r3
 8019d6e:	059b      	lsls	r3, r3, #22
 8019d70:	0d9b      	lsrs	r3, r3, #22
 8019d72:	b29a      	uxth	r2, r3
 8019d74:	187b      	adds	r3, r7, r1
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	801a      	strh	r2, [r3, #0]
 8019d7a:	1d7b      	adds	r3, r7, #5
 8019d7c:	33ff      	adds	r3, #255	@ 0xff
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d82:	d925      	bls.n	8019dd0 <USB_EPStartXfer+0x1148>
 8019d84:	1d7b      	adds	r3, r7, #5
 8019d86:	33ff      	adds	r3, #255	@ 0xff
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	095b      	lsrs	r3, r3, #5
 8019d8c:	21d8      	movs	r1, #216	@ 0xd8
 8019d8e:	187a      	adds	r2, r7, r1
 8019d90:	6013      	str	r3, [r2, #0]
 8019d92:	1d7b      	adds	r3, r7, #5
 8019d94:	33ff      	adds	r3, #255	@ 0xff
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	221f      	movs	r2, #31
 8019d9a:	4013      	ands	r3, r2
 8019d9c:	d104      	bne.n	8019da8 <USB_EPStartXfer+0x1120>
 8019d9e:	187b      	adds	r3, r7, r1
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	3b01      	subs	r3, #1
 8019da4:	187a      	adds	r2, r7, r1
 8019da6:	6013      	str	r3, [r2, #0]
 8019da8:	21b8      	movs	r1, #184	@ 0xb8
 8019daa:	187b      	adds	r3, r7, r1
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	881b      	ldrh	r3, [r3, #0]
 8019db0:	b29a      	uxth	r2, r3
 8019db2:	23d8      	movs	r3, #216	@ 0xd8
 8019db4:	18fb      	adds	r3, r7, r3
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	029b      	lsls	r3, r3, #10
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	4313      	orrs	r3, r2
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	4a21      	ldr	r2, [pc, #132]	@ (8019e48 <USB_EPStartXfer+0x11c0>)
 8019dc4:	4313      	orrs	r3, r2
 8019dc6:	b29a      	uxth	r2, r3
 8019dc8:	187b      	adds	r3, r7, r1
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	801a      	strh	r2, [r3, #0]
 8019dce:	e062      	b.n	8019e96 <USB_EPStartXfer+0x120e>
 8019dd0:	1d7b      	adds	r3, r7, #5
 8019dd2:	33ff      	adds	r3, #255	@ 0xff
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d10b      	bne.n	8019df2 <USB_EPStartXfer+0x116a>
 8019dda:	21b8      	movs	r1, #184	@ 0xb8
 8019ddc:	187b      	adds	r3, r7, r1
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	881b      	ldrh	r3, [r3, #0]
 8019de2:	b29b      	uxth	r3, r3
 8019de4:	4a18      	ldr	r2, [pc, #96]	@ (8019e48 <USB_EPStartXfer+0x11c0>)
 8019de6:	4313      	orrs	r3, r2
 8019de8:	b29a      	uxth	r2, r3
 8019dea:	187b      	adds	r3, r7, r1
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	801a      	strh	r2, [r3, #0]
 8019df0:	e051      	b.n	8019e96 <USB_EPStartXfer+0x120e>
 8019df2:	1d7b      	adds	r3, r7, #5
 8019df4:	33ff      	adds	r3, #255	@ 0xff
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	085b      	lsrs	r3, r3, #1
 8019dfa:	21d8      	movs	r1, #216	@ 0xd8
 8019dfc:	187a      	adds	r2, r7, r1
 8019dfe:	6013      	str	r3, [r2, #0]
 8019e00:	1d7b      	adds	r3, r7, #5
 8019e02:	33ff      	adds	r3, #255	@ 0xff
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	2201      	movs	r2, #1
 8019e08:	4013      	ands	r3, r2
 8019e0a:	d004      	beq.n	8019e16 <USB_EPStartXfer+0x118e>
 8019e0c:	187b      	adds	r3, r7, r1
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	3301      	adds	r3, #1
 8019e12:	187a      	adds	r2, r7, r1
 8019e14:	6013      	str	r3, [r2, #0]
 8019e16:	21b8      	movs	r1, #184	@ 0xb8
 8019e18:	187b      	adds	r3, r7, r1
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	881b      	ldrh	r3, [r3, #0]
 8019e1e:	b29a      	uxth	r2, r3
 8019e20:	23d8      	movs	r3, #216	@ 0xd8
 8019e22:	18fb      	adds	r3, r7, r3
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	b29b      	uxth	r3, r3
 8019e28:	029b      	lsls	r3, r3, #10
 8019e2a:	b29b      	uxth	r3, r3
 8019e2c:	4313      	orrs	r3, r2
 8019e2e:	b29a      	uxth	r2, r3
 8019e30:	187b      	adds	r3, r7, r1
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	801a      	strh	r2, [r3, #0]
 8019e36:	e02e      	b.n	8019e96 <USB_EPStartXfer+0x120e>
 8019e38:	00000406 	.word	0x00000406
 8019e3c:	ffff8f8f 	.word	0xffff8f8f
 8019e40:	ffff80c0 	.word	0xffff80c0
 8019e44:	00000402 	.word	0x00000402
 8019e48:	ffff8000 	.word	0xffff8000
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	785b      	ldrb	r3, [r3, #1]
 8019e50:	2b01      	cmp	r3, #1
 8019e52:	d120      	bne.n	8019e96 <USB_EPStartXfer+0x120e>
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2250      	movs	r2, #80	@ 0x50
 8019e58:	5a9b      	ldrh	r3, [r3, r2]
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	001a      	movs	r2, r3
 8019e5e:	21c4      	movs	r1, #196	@ 0xc4
 8019e60:	187b      	adds	r3, r7, r1
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	189b      	adds	r3, r3, r2
 8019e66:	187a      	adds	r2, r7, r1
 8019e68:	6013      	str	r3, [r2, #0]
 8019e6a:	683b      	ldr	r3, [r7, #0]
 8019e6c:	781b      	ldrb	r3, [r3, #0]
 8019e6e:	00da      	lsls	r2, r3, #3
 8019e70:	187b      	adds	r3, r7, r1
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	18d3      	adds	r3, r2, r3
 8019e76:	4a1d      	ldr	r2, [pc, #116]	@ (8019eec <USB_EPStartXfer+0x1264>)
 8019e78:	4694      	mov	ip, r2
 8019e7a:	4463      	add	r3, ip
 8019e7c:	21c0      	movs	r1, #192	@ 0xc0
 8019e7e:	187a      	adds	r2, r7, r1
 8019e80:	6013      	str	r3, [r2, #0]
 8019e82:	1d7b      	adds	r3, r7, #5
 8019e84:	33ff      	adds	r3, #255	@ 0xff
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	b29a      	uxth	r2, r3
 8019e8a:	187b      	adds	r3, r7, r1
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	801a      	strh	r2, [r3, #0]
 8019e90:	e001      	b.n	8019e96 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8019e92:	2301      	movs	r3, #1
 8019e94:	e025      	b.n	8019ee2 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019e96:	687a      	ldr	r2, [r7, #4]
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	781b      	ldrb	r3, [r3, #0]
 8019e9c:	009b      	lsls	r3, r3, #2
 8019e9e:	18d3      	adds	r3, r2, r3
 8019ea0:	881b      	ldrh	r3, [r3, #0]
 8019ea2:	b29a      	uxth	r2, r3
 8019ea4:	208a      	movs	r0, #138	@ 0x8a
 8019ea6:	183b      	adds	r3, r7, r0
 8019ea8:	4911      	ldr	r1, [pc, #68]	@ (8019ef0 <USB_EPStartXfer+0x1268>)
 8019eaa:	400a      	ands	r2, r1
 8019eac:	801a      	strh	r2, [r3, #0]
 8019eae:	183b      	adds	r3, r7, r0
 8019eb0:	183a      	adds	r2, r7, r0
 8019eb2:	8812      	ldrh	r2, [r2, #0]
 8019eb4:	2180      	movs	r1, #128	@ 0x80
 8019eb6:	0149      	lsls	r1, r1, #5
 8019eb8:	404a      	eors	r2, r1
 8019eba:	801a      	strh	r2, [r3, #0]
 8019ebc:	183b      	adds	r3, r7, r0
 8019ebe:	183a      	adds	r2, r7, r0
 8019ec0:	8812      	ldrh	r2, [r2, #0]
 8019ec2:	2180      	movs	r1, #128	@ 0x80
 8019ec4:	0189      	lsls	r1, r1, #6
 8019ec6:	404a      	eors	r2, r1
 8019ec8:	801a      	strh	r2, [r3, #0]
 8019eca:	687a      	ldr	r2, [r7, #4]
 8019ecc:	683b      	ldr	r3, [r7, #0]
 8019ece:	781b      	ldrb	r3, [r3, #0]
 8019ed0:	009b      	lsls	r3, r3, #2
 8019ed2:	18d3      	adds	r3, r2, r3
 8019ed4:	183a      	adds	r2, r7, r0
 8019ed6:	8812      	ldrh	r2, [r2, #0]
 8019ed8:	4906      	ldr	r1, [pc, #24]	@ (8019ef4 <USB_EPStartXfer+0x126c>)
 8019eda:	430a      	orrs	r2, r1
 8019edc:	b292      	uxth	r2, r2
 8019ede:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019ee0:	2300      	movs	r3, #0
}
 8019ee2:	0018      	movs	r0, r3
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	b043      	add	sp, #268	@ 0x10c
 8019ee8:	bd90      	pop	{r4, r7, pc}
 8019eea:	46c0      	nop			@ (mov r8, r8)
 8019eec:	00000406 	.word	0x00000406
 8019ef0:	ffffbf8f 	.word	0xffffbf8f
 8019ef4:	ffff8080 	.word	0xffff8080

08019ef8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019ef8:	b580      	push	{r7, lr}
 8019efa:	b084      	sub	sp, #16
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	6078      	str	r0, [r7, #4]
 8019f00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	785b      	ldrb	r3, [r3, #1]
 8019f06:	2b00      	cmp	r3, #0
 8019f08:	d01d      	beq.n	8019f46 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8019f0a:	687a      	ldr	r2, [r7, #4]
 8019f0c:	683b      	ldr	r3, [r7, #0]
 8019f0e:	781b      	ldrb	r3, [r3, #0]
 8019f10:	009b      	lsls	r3, r3, #2
 8019f12:	18d3      	adds	r3, r2, r3
 8019f14:	881b      	ldrh	r3, [r3, #0]
 8019f16:	b29a      	uxth	r2, r3
 8019f18:	200c      	movs	r0, #12
 8019f1a:	183b      	adds	r3, r7, r0
 8019f1c:	491b      	ldr	r1, [pc, #108]	@ (8019f8c <USB_EPSetStall+0x94>)
 8019f1e:	400a      	ands	r2, r1
 8019f20:	801a      	strh	r2, [r3, #0]
 8019f22:	183b      	adds	r3, r7, r0
 8019f24:	183a      	adds	r2, r7, r0
 8019f26:	8812      	ldrh	r2, [r2, #0]
 8019f28:	2110      	movs	r1, #16
 8019f2a:	404a      	eors	r2, r1
 8019f2c:	801a      	strh	r2, [r3, #0]
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	781b      	ldrb	r3, [r3, #0]
 8019f34:	009b      	lsls	r3, r3, #2
 8019f36:	18d3      	adds	r3, r2, r3
 8019f38:	183a      	adds	r2, r7, r0
 8019f3a:	8812      	ldrh	r2, [r2, #0]
 8019f3c:	4914      	ldr	r1, [pc, #80]	@ (8019f90 <USB_EPSetStall+0x98>)
 8019f3e:	430a      	orrs	r2, r1
 8019f40:	b292      	uxth	r2, r2
 8019f42:	801a      	strh	r2, [r3, #0]
 8019f44:	e01d      	b.n	8019f82 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8019f46:	687a      	ldr	r2, [r7, #4]
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	781b      	ldrb	r3, [r3, #0]
 8019f4c:	009b      	lsls	r3, r3, #2
 8019f4e:	18d3      	adds	r3, r2, r3
 8019f50:	881b      	ldrh	r3, [r3, #0]
 8019f52:	b29a      	uxth	r2, r3
 8019f54:	200e      	movs	r0, #14
 8019f56:	183b      	adds	r3, r7, r0
 8019f58:	490e      	ldr	r1, [pc, #56]	@ (8019f94 <USB_EPSetStall+0x9c>)
 8019f5a:	400a      	ands	r2, r1
 8019f5c:	801a      	strh	r2, [r3, #0]
 8019f5e:	183b      	adds	r3, r7, r0
 8019f60:	183a      	adds	r2, r7, r0
 8019f62:	8812      	ldrh	r2, [r2, #0]
 8019f64:	2180      	movs	r1, #128	@ 0x80
 8019f66:	0149      	lsls	r1, r1, #5
 8019f68:	404a      	eors	r2, r1
 8019f6a:	801a      	strh	r2, [r3, #0]
 8019f6c:	687a      	ldr	r2, [r7, #4]
 8019f6e:	683b      	ldr	r3, [r7, #0]
 8019f70:	781b      	ldrb	r3, [r3, #0]
 8019f72:	009b      	lsls	r3, r3, #2
 8019f74:	18d3      	adds	r3, r2, r3
 8019f76:	183a      	adds	r2, r7, r0
 8019f78:	8812      	ldrh	r2, [r2, #0]
 8019f7a:	4905      	ldr	r1, [pc, #20]	@ (8019f90 <USB_EPSetStall+0x98>)
 8019f7c:	430a      	orrs	r2, r1
 8019f7e:	b292      	uxth	r2, r2
 8019f80:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019f82:	2300      	movs	r3, #0
}
 8019f84:	0018      	movs	r0, r3
 8019f86:	46bd      	mov	sp, r7
 8019f88:	b004      	add	sp, #16
 8019f8a:	bd80      	pop	{r7, pc}
 8019f8c:	ffff8fbf 	.word	0xffff8fbf
 8019f90:	ffff8080 	.word	0xffff8080
 8019f94:	ffffbf8f 	.word	0xffffbf8f

08019f98 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019f98:	b580      	push	{r7, lr}
 8019f9a:	b086      	sub	sp, #24
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
 8019fa0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019fa2:	683b      	ldr	r3, [r7, #0]
 8019fa4:	7b1b      	ldrb	r3, [r3, #12]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d000      	beq.n	8019fac <USB_EPClearStall+0x14>
 8019faa:	e095      	b.n	801a0d8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8019fac:	683b      	ldr	r3, [r7, #0]
 8019fae:	785b      	ldrb	r3, [r3, #1]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d046      	beq.n	801a042 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019fb4:	687a      	ldr	r2, [r7, #4]
 8019fb6:	683b      	ldr	r3, [r7, #0]
 8019fb8:	781b      	ldrb	r3, [r3, #0]
 8019fba:	009b      	lsls	r3, r3, #2
 8019fbc:	18d2      	adds	r2, r2, r3
 8019fbe:	2110      	movs	r1, #16
 8019fc0:	187b      	adds	r3, r7, r1
 8019fc2:	8812      	ldrh	r2, [r2, #0]
 8019fc4:	801a      	strh	r2, [r3, #0]
 8019fc6:	187b      	adds	r3, r7, r1
 8019fc8:	881b      	ldrh	r3, [r3, #0]
 8019fca:	2240      	movs	r2, #64	@ 0x40
 8019fcc:	4013      	ands	r3, r2
 8019fce:	d016      	beq.n	8019ffe <USB_EPClearStall+0x66>
 8019fd0:	687a      	ldr	r2, [r7, #4]
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	781b      	ldrb	r3, [r3, #0]
 8019fd6:	009b      	lsls	r3, r3, #2
 8019fd8:	18d3      	adds	r3, r2, r3
 8019fda:	881b      	ldrh	r3, [r3, #0]
 8019fdc:	b29a      	uxth	r2, r3
 8019fde:	200e      	movs	r0, #14
 8019fe0:	183b      	adds	r3, r7, r0
 8019fe2:	4940      	ldr	r1, [pc, #256]	@ (801a0e4 <USB_EPClearStall+0x14c>)
 8019fe4:	400a      	ands	r2, r1
 8019fe6:	801a      	strh	r2, [r3, #0]
 8019fe8:	687a      	ldr	r2, [r7, #4]
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	781b      	ldrb	r3, [r3, #0]
 8019fee:	009b      	lsls	r3, r3, #2
 8019ff0:	18d3      	adds	r3, r2, r3
 8019ff2:	183a      	adds	r2, r7, r0
 8019ff4:	8812      	ldrh	r2, [r2, #0]
 8019ff6:	493c      	ldr	r1, [pc, #240]	@ (801a0e8 <USB_EPClearStall+0x150>)
 8019ff8:	430a      	orrs	r2, r1
 8019ffa:	b292      	uxth	r2, r2
 8019ffc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	78db      	ldrb	r3, [r3, #3]
 801a002:	2b01      	cmp	r3, #1
 801a004:	d068      	beq.n	801a0d8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a006:	687a      	ldr	r2, [r7, #4]
 801a008:	683b      	ldr	r3, [r7, #0]
 801a00a:	781b      	ldrb	r3, [r3, #0]
 801a00c:	009b      	lsls	r3, r3, #2
 801a00e:	18d3      	adds	r3, r2, r3
 801a010:	881b      	ldrh	r3, [r3, #0]
 801a012:	b29a      	uxth	r2, r3
 801a014:	200c      	movs	r0, #12
 801a016:	183b      	adds	r3, r7, r0
 801a018:	4934      	ldr	r1, [pc, #208]	@ (801a0ec <USB_EPClearStall+0x154>)
 801a01a:	400a      	ands	r2, r1
 801a01c:	801a      	strh	r2, [r3, #0]
 801a01e:	183b      	adds	r3, r7, r0
 801a020:	183a      	adds	r2, r7, r0
 801a022:	8812      	ldrh	r2, [r2, #0]
 801a024:	2120      	movs	r1, #32
 801a026:	404a      	eors	r2, r1
 801a028:	801a      	strh	r2, [r3, #0]
 801a02a:	687a      	ldr	r2, [r7, #4]
 801a02c:	683b      	ldr	r3, [r7, #0]
 801a02e:	781b      	ldrb	r3, [r3, #0]
 801a030:	009b      	lsls	r3, r3, #2
 801a032:	18d3      	adds	r3, r2, r3
 801a034:	183a      	adds	r2, r7, r0
 801a036:	8812      	ldrh	r2, [r2, #0]
 801a038:	492d      	ldr	r1, [pc, #180]	@ (801a0f0 <USB_EPClearStall+0x158>)
 801a03a:	430a      	orrs	r2, r1
 801a03c:	b292      	uxth	r2, r2
 801a03e:	801a      	strh	r2, [r3, #0]
 801a040:	e04a      	b.n	801a0d8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a042:	687a      	ldr	r2, [r7, #4]
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	781b      	ldrb	r3, [r3, #0]
 801a048:	009b      	lsls	r3, r3, #2
 801a04a:	18d2      	adds	r2, r2, r3
 801a04c:	2116      	movs	r1, #22
 801a04e:	187b      	adds	r3, r7, r1
 801a050:	8812      	ldrh	r2, [r2, #0]
 801a052:	801a      	strh	r2, [r3, #0]
 801a054:	187b      	adds	r3, r7, r1
 801a056:	881a      	ldrh	r2, [r3, #0]
 801a058:	2380      	movs	r3, #128	@ 0x80
 801a05a:	01db      	lsls	r3, r3, #7
 801a05c:	4013      	ands	r3, r2
 801a05e:	d016      	beq.n	801a08e <USB_EPClearStall+0xf6>
 801a060:	687a      	ldr	r2, [r7, #4]
 801a062:	683b      	ldr	r3, [r7, #0]
 801a064:	781b      	ldrb	r3, [r3, #0]
 801a066:	009b      	lsls	r3, r3, #2
 801a068:	18d3      	adds	r3, r2, r3
 801a06a:	881b      	ldrh	r3, [r3, #0]
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	2014      	movs	r0, #20
 801a070:	183b      	adds	r3, r7, r0
 801a072:	491c      	ldr	r1, [pc, #112]	@ (801a0e4 <USB_EPClearStall+0x14c>)
 801a074:	400a      	ands	r2, r1
 801a076:	801a      	strh	r2, [r3, #0]
 801a078:	687a      	ldr	r2, [r7, #4]
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	781b      	ldrb	r3, [r3, #0]
 801a07e:	009b      	lsls	r3, r3, #2
 801a080:	18d3      	adds	r3, r2, r3
 801a082:	183a      	adds	r2, r7, r0
 801a084:	8812      	ldrh	r2, [r2, #0]
 801a086:	491b      	ldr	r1, [pc, #108]	@ (801a0f4 <USB_EPClearStall+0x15c>)
 801a088:	430a      	orrs	r2, r1
 801a08a:	b292      	uxth	r2, r2
 801a08c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a08e:	687a      	ldr	r2, [r7, #4]
 801a090:	683b      	ldr	r3, [r7, #0]
 801a092:	781b      	ldrb	r3, [r3, #0]
 801a094:	009b      	lsls	r3, r3, #2
 801a096:	18d3      	adds	r3, r2, r3
 801a098:	881b      	ldrh	r3, [r3, #0]
 801a09a:	b29a      	uxth	r2, r3
 801a09c:	2012      	movs	r0, #18
 801a09e:	183b      	adds	r3, r7, r0
 801a0a0:	4915      	ldr	r1, [pc, #84]	@ (801a0f8 <USB_EPClearStall+0x160>)
 801a0a2:	400a      	ands	r2, r1
 801a0a4:	801a      	strh	r2, [r3, #0]
 801a0a6:	183b      	adds	r3, r7, r0
 801a0a8:	183a      	adds	r2, r7, r0
 801a0aa:	8812      	ldrh	r2, [r2, #0]
 801a0ac:	2180      	movs	r1, #128	@ 0x80
 801a0ae:	0149      	lsls	r1, r1, #5
 801a0b0:	404a      	eors	r2, r1
 801a0b2:	801a      	strh	r2, [r3, #0]
 801a0b4:	183b      	adds	r3, r7, r0
 801a0b6:	183a      	adds	r2, r7, r0
 801a0b8:	8812      	ldrh	r2, [r2, #0]
 801a0ba:	2180      	movs	r1, #128	@ 0x80
 801a0bc:	0189      	lsls	r1, r1, #6
 801a0be:	404a      	eors	r2, r1
 801a0c0:	801a      	strh	r2, [r3, #0]
 801a0c2:	687a      	ldr	r2, [r7, #4]
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	781b      	ldrb	r3, [r3, #0]
 801a0c8:	009b      	lsls	r3, r3, #2
 801a0ca:	18d3      	adds	r3, r2, r3
 801a0cc:	183a      	adds	r2, r7, r0
 801a0ce:	8812      	ldrh	r2, [r2, #0]
 801a0d0:	4907      	ldr	r1, [pc, #28]	@ (801a0f0 <USB_EPClearStall+0x158>)
 801a0d2:	430a      	orrs	r2, r1
 801a0d4:	b292      	uxth	r2, r2
 801a0d6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a0d8:	2300      	movs	r3, #0
}
 801a0da:	0018      	movs	r0, r3
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	b006      	add	sp, #24
 801a0e0:	bd80      	pop	{r7, pc}
 801a0e2:	46c0      	nop			@ (mov r8, r8)
 801a0e4:	ffff8f8f 	.word	0xffff8f8f
 801a0e8:	ffff80c0 	.word	0xffff80c0
 801a0ec:	ffff8fbf 	.word	0xffff8fbf
 801a0f0:	ffff8080 	.word	0xffff8080
 801a0f4:	ffffc080 	.word	0xffffc080
 801a0f8:	ffffbf8f 	.word	0xffffbf8f

0801a0fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b082      	sub	sp, #8
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
 801a104:	000a      	movs	r2, r1
 801a106:	1cfb      	adds	r3, r7, #3
 801a108:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a10a:	1cfb      	adds	r3, r7, #3
 801a10c:	781b      	ldrb	r3, [r3, #0]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d103      	bne.n	801a11a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	224c      	movs	r2, #76	@ 0x4c
 801a116:	2180      	movs	r1, #128	@ 0x80
 801a118:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a11a:	2300      	movs	r3, #0
}
 801a11c:	0018      	movs	r0, r3
 801a11e:	46bd      	mov	sp, r7
 801a120:	b002      	add	sp, #8
 801a122:	bd80      	pop	{r7, pc}

0801a124 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b082      	sub	sp, #8
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	2258      	movs	r2, #88	@ 0x58
 801a130:	5a9b      	ldrh	r3, [r3, r2]
 801a132:	b29b      	uxth	r3, r3
 801a134:	4a05      	ldr	r2, [pc, #20]	@ (801a14c <USB_DevConnect+0x28>)
 801a136:	4313      	orrs	r3, r2
 801a138:	b299      	uxth	r1, r3
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	2258      	movs	r2, #88	@ 0x58
 801a13e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a140:	2300      	movs	r3, #0
}
 801a142:	0018      	movs	r0, r3
 801a144:	46bd      	mov	sp, r7
 801a146:	b002      	add	sp, #8
 801a148:	bd80      	pop	{r7, pc}
 801a14a:	46c0      	nop			@ (mov r8, r8)
 801a14c:	ffff8000 	.word	0xffff8000

0801a150 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b084      	sub	sp, #16
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	2244      	movs	r2, #68	@ 0x44
 801a15c:	5a9b      	ldrh	r3, [r3, r2]
 801a15e:	b29b      	uxth	r3, r3
 801a160:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a162:	68fb      	ldr	r3, [r7, #12]
}
 801a164:	0018      	movs	r0, r3
 801a166:	46bd      	mov	sp, r7
 801a168:	b004      	add	sp, #16
 801a16a:	bd80      	pop	{r7, pc}

0801a16c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b08a      	sub	sp, #40	@ 0x28
 801a170:	af00      	add	r7, sp, #0
 801a172:	60f8      	str	r0, [r7, #12]
 801a174:	60b9      	str	r1, [r7, #8]
 801a176:	0019      	movs	r1, r3
 801a178:	1dbb      	adds	r3, r7, #6
 801a17a:	801a      	strh	r2, [r3, #0]
 801a17c:	1d3b      	adds	r3, r7, #4
 801a17e:	1c0a      	adds	r2, r1, #0
 801a180:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a182:	1d3b      	adds	r3, r7, #4
 801a184:	881b      	ldrh	r3, [r3, #0]
 801a186:	3301      	adds	r3, #1
 801a188:	085b      	lsrs	r3, r3, #1
 801a18a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a190:	68bb      	ldr	r3, [r7, #8]
 801a192:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a194:	1dbb      	adds	r3, r7, #6
 801a196:	881a      	ldrh	r2, [r3, #0]
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	18d3      	adds	r3, r2, r3
 801a19c:	2280      	movs	r2, #128	@ 0x80
 801a19e:	00d2      	lsls	r2, r2, #3
 801a1a0:	4694      	mov	ip, r2
 801a1a2:	4463      	add	r3, ip
 801a1a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a1a6:	69bb      	ldr	r3, [r7, #24]
 801a1a8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a1aa:	e020      	b.n	801a1ee <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a1ac:	69fb      	ldr	r3, [r7, #28]
 801a1ae:	781a      	ldrb	r2, [r3, #0]
 801a1b0:	2112      	movs	r1, #18
 801a1b2:	187b      	adds	r3, r7, r1
 801a1b4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a1b6:	69fb      	ldr	r3, [r7, #28]
 801a1b8:	3301      	adds	r3, #1
 801a1ba:	781b      	ldrb	r3, [r3, #0]
 801a1bc:	021b      	lsls	r3, r3, #8
 801a1be:	b21a      	sxth	r2, r3
 801a1c0:	187b      	adds	r3, r7, r1
 801a1c2:	2000      	movs	r0, #0
 801a1c4:	5e1b      	ldrsh	r3, [r3, r0]
 801a1c6:	4313      	orrs	r3, r2
 801a1c8:	b21a      	sxth	r2, r3
 801a1ca:	187b      	adds	r3, r7, r1
 801a1cc:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a1ce:	6a3b      	ldr	r3, [r7, #32]
 801a1d0:	187a      	adds	r2, r7, r1
 801a1d2:	8812      	ldrh	r2, [r2, #0]
 801a1d4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a1d6:	6a3b      	ldr	r3, [r7, #32]
 801a1d8:	3302      	adds	r3, #2
 801a1da:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801a1dc:	69fb      	ldr	r3, [r7, #28]
 801a1de:	3301      	adds	r3, #1
 801a1e0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801a1e2:	69fb      	ldr	r3, [r7, #28]
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1ea:	3b01      	subs	r3, #1
 801a1ec:	627b      	str	r3, [r7, #36]	@ 0x24
 801a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d1db      	bne.n	801a1ac <USB_WritePMA+0x40>
  }
}
 801a1f4:	46c0      	nop			@ (mov r8, r8)
 801a1f6:	46c0      	nop			@ (mov r8, r8)
 801a1f8:	46bd      	mov	sp, r7
 801a1fa:	b00a      	add	sp, #40	@ 0x28
 801a1fc:	bd80      	pop	{r7, pc}

0801a1fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a1fe:	b580      	push	{r7, lr}
 801a200:	b08a      	sub	sp, #40	@ 0x28
 801a202:	af00      	add	r7, sp, #0
 801a204:	60f8      	str	r0, [r7, #12]
 801a206:	60b9      	str	r1, [r7, #8]
 801a208:	0019      	movs	r1, r3
 801a20a:	1dbb      	adds	r3, r7, #6
 801a20c:	801a      	strh	r2, [r3, #0]
 801a20e:	1d3b      	adds	r3, r7, #4
 801a210:	1c0a      	adds	r2, r1, #0
 801a212:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801a214:	1d3b      	adds	r3, r7, #4
 801a216:	881b      	ldrh	r3, [r3, #0]
 801a218:	085b      	lsrs	r3, r3, #1
 801a21a:	b29b      	uxth	r3, r3
 801a21c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a21e:	68fb      	ldr	r3, [r7, #12]
 801a220:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a226:	1dbb      	adds	r3, r7, #6
 801a228:	881a      	ldrh	r2, [r3, #0]
 801a22a:	697b      	ldr	r3, [r7, #20]
 801a22c:	18d3      	adds	r3, r2, r3
 801a22e:	2280      	movs	r2, #128	@ 0x80
 801a230:	00d2      	lsls	r2, r2, #3
 801a232:	4694      	mov	ip, r2
 801a234:	4463      	add	r3, ip
 801a236:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a238:	69bb      	ldr	r3, [r7, #24]
 801a23a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a23c:	e018      	b.n	801a270 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801a23e:	6a3b      	ldr	r3, [r7, #32]
 801a240:	881b      	ldrh	r3, [r3, #0]
 801a242:	b29b      	uxth	r3, r3
 801a244:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801a246:	6a3b      	ldr	r3, [r7, #32]
 801a248:	3302      	adds	r3, #2
 801a24a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a24c:	693b      	ldr	r3, [r7, #16]
 801a24e:	b2da      	uxtb	r2, r3
 801a250:	69fb      	ldr	r3, [r7, #28]
 801a252:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a254:	69fb      	ldr	r3, [r7, #28]
 801a256:	3301      	adds	r3, #1
 801a258:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801a25a:	693b      	ldr	r3, [r7, #16]
 801a25c:	0a1b      	lsrs	r3, r3, #8
 801a25e:	b2da      	uxtb	r2, r3
 801a260:	69fb      	ldr	r3, [r7, #28]
 801a262:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a264:	69fb      	ldr	r3, [r7, #28]
 801a266:	3301      	adds	r3, #1
 801a268:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a26c:	3b01      	subs	r3, #1
 801a26e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a272:	2b00      	cmp	r3, #0
 801a274:	d1e3      	bne.n	801a23e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801a276:	1d3b      	adds	r3, r7, #4
 801a278:	881b      	ldrh	r3, [r3, #0]
 801a27a:	2201      	movs	r2, #1
 801a27c:	4013      	ands	r3, r2
 801a27e:	b29b      	uxth	r3, r3
 801a280:	2b00      	cmp	r3, #0
 801a282:	d007      	beq.n	801a294 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801a284:	6a3b      	ldr	r3, [r7, #32]
 801a286:	881b      	ldrh	r3, [r3, #0]
 801a288:	b29b      	uxth	r3, r3
 801a28a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a28c:	693b      	ldr	r3, [r7, #16]
 801a28e:	b2da      	uxtb	r2, r3
 801a290:	69fb      	ldr	r3, [r7, #28]
 801a292:	701a      	strb	r2, [r3, #0]
  }
}
 801a294:	46c0      	nop			@ (mov r8, r8)
 801a296:	46bd      	mov	sp, r7
 801a298:	b00a      	add	sp, #40	@ 0x28
 801a29a:	bd80      	pop	{r7, pc}

0801a29c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b084      	sub	sp, #16
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
 801a2a4:	000a      	movs	r2, r1
 801a2a6:	1cfb      	adds	r3, r7, #3
 801a2a8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a2aa:	230f      	movs	r3, #15
 801a2ac:	18fb      	adds	r3, r7, r3
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	7c1b      	ldrb	r3, [r3, #16]
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	d116      	bne.n	801a2e8 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a2ba:	2380      	movs	r3, #128	@ 0x80
 801a2bc:	009b      	lsls	r3, r3, #2
 801a2be:	6878      	ldr	r0, [r7, #4]
 801a2c0:	2202      	movs	r2, #2
 801a2c2:	2181      	movs	r1, #129	@ 0x81
 801a2c4:	f002 f8eb 	bl	801c49e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	2201      	movs	r2, #1
 801a2cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a2ce:	2380      	movs	r3, #128	@ 0x80
 801a2d0:	009b      	lsls	r3, r3, #2
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	2202      	movs	r2, #2
 801a2d6:	2101      	movs	r1, #1
 801a2d8:	f002 f8e1 	bl	801c49e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a2dc:	687a      	ldr	r2, [r7, #4]
 801a2de:	23b6      	movs	r3, #182	@ 0xb6
 801a2e0:	005b      	lsls	r3, r3, #1
 801a2e2:	2101      	movs	r1, #1
 801a2e4:	50d1      	str	r1, [r2, r3]
 801a2e6:	e013      	b.n	801a310 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a2e8:	6878      	ldr	r0, [r7, #4]
 801a2ea:	2340      	movs	r3, #64	@ 0x40
 801a2ec:	2202      	movs	r2, #2
 801a2ee:	2181      	movs	r1, #129	@ 0x81
 801a2f0:	f002 f8d5 	bl	801c49e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	2201      	movs	r2, #1
 801a2f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a2fa:	6878      	ldr	r0, [r7, #4]
 801a2fc:	2340      	movs	r3, #64	@ 0x40
 801a2fe:	2202      	movs	r2, #2
 801a300:	2101      	movs	r1, #1
 801a302:	f002 f8cc 	bl	801c49e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a306:	687a      	ldr	r2, [r7, #4]
 801a308:	23b6      	movs	r3, #182	@ 0xb6
 801a30a:	005b      	lsls	r3, r3, #1
 801a30c:	2101      	movs	r1, #1
 801a30e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a310:	6878      	ldr	r0, [r7, #4]
 801a312:	2308      	movs	r3, #8
 801a314:	2203      	movs	r2, #3
 801a316:	2182      	movs	r1, #130	@ 0x82
 801a318:	f002 f8c1 	bl	801c49e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	2201      	movs	r2, #1
 801a320:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a322:	2387      	movs	r3, #135	@ 0x87
 801a324:	009b      	lsls	r3, r3, #2
 801a326:	0018      	movs	r0, r3
 801a328:	f002 fa52 	bl	801c7d0 <USBD_static_malloc>
 801a32c:	0001      	movs	r1, r0
 801a32e:	687a      	ldr	r2, [r7, #4]
 801a330:	23ae      	movs	r3, #174	@ 0xae
 801a332:	009b      	lsls	r3, r3, #2
 801a334:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801a336:	687a      	ldr	r2, [r7, #4]
 801a338:	23ae      	movs	r3, #174	@ 0xae
 801a33a:	009b      	lsls	r3, r3, #2
 801a33c:	58d3      	ldr	r3, [r2, r3]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d104      	bne.n	801a34c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801a342:	230f      	movs	r3, #15
 801a344:	18fb      	adds	r3, r7, r3
 801a346:	2201      	movs	r2, #1
 801a348:	701a      	strb	r2, [r3, #0]
 801a34a:	e02c      	b.n	801a3a6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a34c:	687a      	ldr	r2, [r7, #4]
 801a34e:	23ae      	movs	r3, #174	@ 0xae
 801a350:	009b      	lsls	r3, r3, #2
 801a352:	58d3      	ldr	r3, [r2, r3]
 801a354:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a356:	687a      	ldr	r2, [r7, #4]
 801a358:	23af      	movs	r3, #175	@ 0xaf
 801a35a:	009b      	lsls	r3, r3, #2
 801a35c:	58d3      	ldr	r3, [r2, r3]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801a362:	68ba      	ldr	r2, [r7, #8]
 801a364:	2385      	movs	r3, #133	@ 0x85
 801a366:	009b      	lsls	r3, r3, #2
 801a368:	2100      	movs	r1, #0
 801a36a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801a36c:	68ba      	ldr	r2, [r7, #8]
 801a36e:	2386      	movs	r3, #134	@ 0x86
 801a370:	009b      	lsls	r3, r3, #2
 801a372:	2100      	movs	r1, #0
 801a374:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	7c1b      	ldrb	r3, [r3, #16]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d10a      	bne.n	801a394 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a37e:	68ba      	ldr	r2, [r7, #8]
 801a380:	2381      	movs	r3, #129	@ 0x81
 801a382:	009b      	lsls	r3, r3, #2
 801a384:	58d2      	ldr	r2, [r2, r3]
 801a386:	2380      	movs	r3, #128	@ 0x80
 801a388:	009b      	lsls	r3, r3, #2
 801a38a:	6878      	ldr	r0, [r7, #4]
 801a38c:	2101      	movs	r1, #1
 801a38e:	f002 f9d1 	bl	801c734 <USBD_LL_PrepareReceive>
 801a392:	e008      	b.n	801a3a6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a394:	68ba      	ldr	r2, [r7, #8]
 801a396:	2381      	movs	r3, #129	@ 0x81
 801a398:	009b      	lsls	r3, r3, #2
 801a39a:	58d2      	ldr	r2, [r2, r3]
 801a39c:	6878      	ldr	r0, [r7, #4]
 801a39e:	2340      	movs	r3, #64	@ 0x40
 801a3a0:	2101      	movs	r1, #1
 801a3a2:	f002 f9c7 	bl	801c734 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a3a6:	230f      	movs	r3, #15
 801a3a8:	18fb      	adds	r3, r7, r3
 801a3aa:	781b      	ldrb	r3, [r3, #0]
}
 801a3ac:	0018      	movs	r0, r3
 801a3ae:	46bd      	mov	sp, r7
 801a3b0:	b004      	add	sp, #16
 801a3b2:	bd80      	pop	{r7, pc}

0801a3b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a3b4:	b580      	push	{r7, lr}
 801a3b6:	b084      	sub	sp, #16
 801a3b8:	af00      	add	r7, sp, #0
 801a3ba:	6078      	str	r0, [r7, #4]
 801a3bc:	000a      	movs	r2, r1
 801a3be:	1cfb      	adds	r3, r7, #3
 801a3c0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a3c2:	230f      	movs	r3, #15
 801a3c4:	18fb      	adds	r3, r7, r3
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2181      	movs	r1, #129	@ 0x81
 801a3ce:	0018      	movs	r0, r3
 801a3d0:	f002 f89c 	bl	801c50c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	2101      	movs	r1, #1
 801a3de:	0018      	movs	r0, r3
 801a3e0:	f002 f894 	bl	801c50c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a3e4:	687a      	ldr	r2, [r7, #4]
 801a3e6:	23b6      	movs	r3, #182	@ 0xb6
 801a3e8:	005b      	lsls	r3, r3, #1
 801a3ea:	2100      	movs	r1, #0
 801a3ec:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	2182      	movs	r1, #130	@ 0x82
 801a3f2:	0018      	movs	r0, r3
 801a3f4:	f002 f88a 	bl	801c50c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a3fe:	687a      	ldr	r2, [r7, #4]
 801a400:	23ae      	movs	r3, #174	@ 0xae
 801a402:	009b      	lsls	r3, r3, #2
 801a404:	58d3      	ldr	r3, [r2, r3]
 801a406:	2b00      	cmp	r3, #0
 801a408:	d011      	beq.n	801a42e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a40a:	687a      	ldr	r2, [r7, #4]
 801a40c:	23af      	movs	r3, #175	@ 0xaf
 801a40e:	009b      	lsls	r3, r3, #2
 801a410:	58d3      	ldr	r3, [r2, r3]
 801a412:	685b      	ldr	r3, [r3, #4]
 801a414:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a416:	687a      	ldr	r2, [r7, #4]
 801a418:	23ae      	movs	r3, #174	@ 0xae
 801a41a:	009b      	lsls	r3, r3, #2
 801a41c:	58d3      	ldr	r3, [r2, r3]
 801a41e:	0018      	movs	r0, r3
 801a420:	f002 f9e2 	bl	801c7e8 <USBD_static_free>
    pdev->pClassData = NULL;
 801a424:	687a      	ldr	r2, [r7, #4]
 801a426:	23ae      	movs	r3, #174	@ 0xae
 801a428:	009b      	lsls	r3, r3, #2
 801a42a:	2100      	movs	r1, #0
 801a42c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801a42e:	230f      	movs	r3, #15
 801a430:	18fb      	adds	r3, r7, r3
 801a432:	781b      	ldrb	r3, [r3, #0]
}
 801a434:	0018      	movs	r0, r3
 801a436:	46bd      	mov	sp, r7
 801a438:	b004      	add	sp, #16
 801a43a:	bd80      	pop	{r7, pc}

0801a43c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b086      	sub	sp, #24
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
 801a444:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a446:	687a      	ldr	r2, [r7, #4]
 801a448:	23ae      	movs	r3, #174	@ 0xae
 801a44a:	009b      	lsls	r3, r3, #2
 801a44c:	58d3      	ldr	r3, [r2, r3]
 801a44e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801a450:	230f      	movs	r3, #15
 801a452:	18fb      	adds	r3, r7, r3
 801a454:	2200      	movs	r2, #0
 801a456:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a458:	230c      	movs	r3, #12
 801a45a:	18fb      	adds	r3, r7, r3
 801a45c:	2200      	movs	r2, #0
 801a45e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a460:	2317      	movs	r3, #23
 801a462:	18fb      	adds	r3, r7, r3
 801a464:	2200      	movs	r2, #0
 801a466:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a468:	683b      	ldr	r3, [r7, #0]
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	001a      	movs	r2, r3
 801a46e:	2360      	movs	r3, #96	@ 0x60
 801a470:	4013      	ands	r3, r2
 801a472:	d03d      	beq.n	801a4f0 <USBD_CDC_Setup+0xb4>
 801a474:	2b20      	cmp	r3, #32
 801a476:	d000      	beq.n	801a47a <USBD_CDC_Setup+0x3e>
 801a478:	e094      	b.n	801a5a4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	88db      	ldrh	r3, [r3, #6]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d02b      	beq.n	801a4da <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a482:	683b      	ldr	r3, [r7, #0]
 801a484:	781b      	ldrb	r3, [r3, #0]
 801a486:	b25b      	sxtb	r3, r3
 801a488:	2b00      	cmp	r3, #0
 801a48a:	da12      	bge.n	801a4b2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a48c:	687a      	ldr	r2, [r7, #4]
 801a48e:	23af      	movs	r3, #175	@ 0xaf
 801a490:	009b      	lsls	r3, r3, #2
 801a492:	58d3      	ldr	r3, [r2, r3]
 801a494:	689b      	ldr	r3, [r3, #8]
 801a496:	683a      	ldr	r2, [r7, #0]
 801a498:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a49a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a49c:	683a      	ldr	r2, [r7, #0]
 801a49e:	88d2      	ldrh	r2, [r2, #6]
 801a4a0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a4a2:	6939      	ldr	r1, [r7, #16]
 801a4a4:	683b      	ldr	r3, [r7, #0]
 801a4a6:	88da      	ldrh	r2, [r3, #6]
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	0018      	movs	r0, r3
 801a4ac:	f001 fbaf 	bl	801bc0e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a4b0:	e083      	b.n	801a5ba <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a4b2:	683b      	ldr	r3, [r7, #0]
 801a4b4:	7859      	ldrb	r1, [r3, #1]
 801a4b6:	693a      	ldr	r2, [r7, #16]
 801a4b8:	2380      	movs	r3, #128	@ 0x80
 801a4ba:	009b      	lsls	r3, r3, #2
 801a4bc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a4be:	683b      	ldr	r3, [r7, #0]
 801a4c0:	88db      	ldrh	r3, [r3, #6]
 801a4c2:	b2d9      	uxtb	r1, r3
 801a4c4:	693b      	ldr	r3, [r7, #16]
 801a4c6:	4a40      	ldr	r2, [pc, #256]	@ (801a5c8 <USBD_CDC_Setup+0x18c>)
 801a4c8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a4ca:	6939      	ldr	r1, [r7, #16]
 801a4cc:	683b      	ldr	r3, [r7, #0]
 801a4ce:	88da      	ldrh	r2, [r3, #6]
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	0018      	movs	r0, r3
 801a4d4:	f001 fbce 	bl	801bc74 <USBD_CtlPrepareRx>
      break;
 801a4d8:	e06f      	b.n	801a5ba <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a4da:	687a      	ldr	r2, [r7, #4]
 801a4dc:	23af      	movs	r3, #175	@ 0xaf
 801a4de:	009b      	lsls	r3, r3, #2
 801a4e0:	58d3      	ldr	r3, [r2, r3]
 801a4e2:	689b      	ldr	r3, [r3, #8]
 801a4e4:	683a      	ldr	r2, [r7, #0]
 801a4e6:	7850      	ldrb	r0, [r2, #1]
 801a4e8:	6839      	ldr	r1, [r7, #0]
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	4798      	blx	r3
      break;
 801a4ee:	e064      	b.n	801a5ba <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a4f0:	683b      	ldr	r3, [r7, #0]
 801a4f2:	785b      	ldrb	r3, [r3, #1]
 801a4f4:	2b0b      	cmp	r3, #11
 801a4f6:	d037      	beq.n	801a568 <USBD_CDC_Setup+0x12c>
 801a4f8:	dc47      	bgt.n	801a58a <USBD_CDC_Setup+0x14e>
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d002      	beq.n	801a504 <USBD_CDC_Setup+0xc8>
 801a4fe:	2b0a      	cmp	r3, #10
 801a500:	d019      	beq.n	801a536 <USBD_CDC_Setup+0xfa>
 801a502:	e042      	b.n	801a58a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a504:	687a      	ldr	r2, [r7, #4]
 801a506:	23a7      	movs	r3, #167	@ 0xa7
 801a508:	009b      	lsls	r3, r3, #2
 801a50a:	5cd3      	ldrb	r3, [r2, r3]
 801a50c:	2b03      	cmp	r3, #3
 801a50e:	d107      	bne.n	801a520 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801a510:	230c      	movs	r3, #12
 801a512:	18f9      	adds	r1, r7, r3
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	2202      	movs	r2, #2
 801a518:	0018      	movs	r0, r3
 801a51a:	f001 fb78 	bl	801bc0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a51e:	e040      	b.n	801a5a2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a520:	683a      	ldr	r2, [r7, #0]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	0011      	movs	r1, r2
 801a526:	0018      	movs	r0, r3
 801a528:	f001 faf3 	bl	801bb12 <USBD_CtlError>
            ret = USBD_FAIL;
 801a52c:	2317      	movs	r3, #23
 801a52e:	18fb      	adds	r3, r7, r3
 801a530:	2202      	movs	r2, #2
 801a532:	701a      	strb	r2, [r3, #0]
          break;
 801a534:	e035      	b.n	801a5a2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a536:	687a      	ldr	r2, [r7, #4]
 801a538:	23a7      	movs	r3, #167	@ 0xa7
 801a53a:	009b      	lsls	r3, r3, #2
 801a53c:	5cd3      	ldrb	r3, [r2, r3]
 801a53e:	2b03      	cmp	r3, #3
 801a540:	d107      	bne.n	801a552 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801a542:	230f      	movs	r3, #15
 801a544:	18f9      	adds	r1, r7, r3
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	2201      	movs	r2, #1
 801a54a:	0018      	movs	r0, r3
 801a54c:	f001 fb5f 	bl	801bc0e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a550:	e027      	b.n	801a5a2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a552:	683a      	ldr	r2, [r7, #0]
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	0011      	movs	r1, r2
 801a558:	0018      	movs	r0, r3
 801a55a:	f001 fada 	bl	801bb12 <USBD_CtlError>
            ret = USBD_FAIL;
 801a55e:	2317      	movs	r3, #23
 801a560:	18fb      	adds	r3, r7, r3
 801a562:	2202      	movs	r2, #2
 801a564:	701a      	strb	r2, [r3, #0]
          break;
 801a566:	e01c      	b.n	801a5a2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a568:	687a      	ldr	r2, [r7, #4]
 801a56a:	23a7      	movs	r3, #167	@ 0xa7
 801a56c:	009b      	lsls	r3, r3, #2
 801a56e:	5cd3      	ldrb	r3, [r2, r3]
 801a570:	2b03      	cmp	r3, #3
 801a572:	d015      	beq.n	801a5a0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801a574:	683a      	ldr	r2, [r7, #0]
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	0011      	movs	r1, r2
 801a57a:	0018      	movs	r0, r3
 801a57c:	f001 fac9 	bl	801bb12 <USBD_CtlError>
            ret = USBD_FAIL;
 801a580:	2317      	movs	r3, #23
 801a582:	18fb      	adds	r3, r7, r3
 801a584:	2202      	movs	r2, #2
 801a586:	701a      	strb	r2, [r3, #0]
          }
          break;
 801a588:	e00a      	b.n	801a5a0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801a58a:	683a      	ldr	r2, [r7, #0]
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	0011      	movs	r1, r2
 801a590:	0018      	movs	r0, r3
 801a592:	f001 fabe 	bl	801bb12 <USBD_CtlError>
          ret = USBD_FAIL;
 801a596:	2317      	movs	r3, #23
 801a598:	18fb      	adds	r3, r7, r3
 801a59a:	2202      	movs	r2, #2
 801a59c:	701a      	strb	r2, [r3, #0]
          break;
 801a59e:	e000      	b.n	801a5a2 <USBD_CDC_Setup+0x166>
          break;
 801a5a0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a5a2:	e00a      	b.n	801a5ba <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801a5a4:	683a      	ldr	r2, [r7, #0]
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	0011      	movs	r1, r2
 801a5aa:	0018      	movs	r0, r3
 801a5ac:	f001 fab1 	bl	801bb12 <USBD_CtlError>
      ret = USBD_FAIL;
 801a5b0:	2317      	movs	r3, #23
 801a5b2:	18fb      	adds	r3, r7, r3
 801a5b4:	2202      	movs	r2, #2
 801a5b6:	701a      	strb	r2, [r3, #0]
      break;
 801a5b8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a5ba:	2317      	movs	r3, #23
 801a5bc:	18fb      	adds	r3, r7, r3
 801a5be:	781b      	ldrb	r3, [r3, #0]
}
 801a5c0:	0018      	movs	r0, r3
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	b006      	add	sp, #24
 801a5c6:	bd80      	pop	{r7, pc}
 801a5c8:	00000201 	.word	0x00000201

0801a5cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b084      	sub	sp, #16
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	000a      	movs	r2, r1
 801a5d6:	1cfb      	adds	r3, r7, #3
 801a5d8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	23ae      	movs	r3, #174	@ 0xae
 801a5de:	009b      	lsls	r3, r3, #2
 801a5e0:	58d3      	ldr	r3, [r2, r3]
 801a5e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801a5e4:	687a      	ldr	r2, [r7, #4]
 801a5e6:	23b0      	movs	r3, #176	@ 0xb0
 801a5e8:	009b      	lsls	r3, r3, #2
 801a5ea:	58d3      	ldr	r3, [r2, r3]
 801a5ec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801a5ee:	687a      	ldr	r2, [r7, #4]
 801a5f0:	23ae      	movs	r3, #174	@ 0xae
 801a5f2:	009b      	lsls	r3, r3, #2
 801a5f4:	58d3      	ldr	r3, [r2, r3]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d03e      	beq.n	801a678 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801a5fa:	1cfb      	adds	r3, r7, #3
 801a5fc:	781a      	ldrb	r2, [r3, #0]
 801a5fe:	6879      	ldr	r1, [r7, #4]
 801a600:	0013      	movs	r3, r2
 801a602:	009b      	lsls	r3, r3, #2
 801a604:	189b      	adds	r3, r3, r2
 801a606:	009b      	lsls	r3, r3, #2
 801a608:	18cb      	adds	r3, r1, r3
 801a60a:	331c      	adds	r3, #28
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d02b      	beq.n	801a66a <USBD_CDC_DataIn+0x9e>
 801a612:	1cfb      	adds	r3, r7, #3
 801a614:	781a      	ldrb	r2, [r3, #0]
 801a616:	6879      	ldr	r1, [r7, #4]
 801a618:	0013      	movs	r3, r2
 801a61a:	009b      	lsls	r3, r3, #2
 801a61c:	189b      	adds	r3, r3, r2
 801a61e:	009b      	lsls	r3, r3, #2
 801a620:	18cb      	adds	r3, r1, r3
 801a622:	331c      	adds	r3, #28
 801a624:	6818      	ldr	r0, [r3, #0]
 801a626:	1cfb      	adds	r3, r7, #3
 801a628:	781a      	ldrb	r2, [r3, #0]
 801a62a:	68b9      	ldr	r1, [r7, #8]
 801a62c:	0013      	movs	r3, r2
 801a62e:	009b      	lsls	r3, r3, #2
 801a630:	189b      	adds	r3, r3, r2
 801a632:	00db      	lsls	r3, r3, #3
 801a634:	18cb      	adds	r3, r1, r3
 801a636:	3338      	adds	r3, #56	@ 0x38
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	0019      	movs	r1, r3
 801a63c:	f7e5 fe38 	bl	80002b0 <__aeabi_uidivmod>
 801a640:	1e0b      	subs	r3, r1, #0
 801a642:	d112      	bne.n	801a66a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801a644:	1cfb      	adds	r3, r7, #3
 801a646:	781a      	ldrb	r2, [r3, #0]
 801a648:	6879      	ldr	r1, [r7, #4]
 801a64a:	0013      	movs	r3, r2
 801a64c:	009b      	lsls	r3, r3, #2
 801a64e:	189b      	adds	r3, r3, r2
 801a650:	009b      	lsls	r3, r3, #2
 801a652:	18cb      	adds	r3, r1, r3
 801a654:	331c      	adds	r3, #28
 801a656:	2200      	movs	r2, #0
 801a658:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a65a:	1cfb      	adds	r3, r7, #3
 801a65c:	7819      	ldrb	r1, [r3, #0]
 801a65e:	6878      	ldr	r0, [r7, #4]
 801a660:	2300      	movs	r3, #0
 801a662:	2200      	movs	r2, #0
 801a664:	f002 f82f 	bl	801c6c6 <USBD_LL_Transmit>
 801a668:	e004      	b.n	801a674 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801a66a:	68fa      	ldr	r2, [r7, #12]
 801a66c:	2385      	movs	r3, #133	@ 0x85
 801a66e:	009b      	lsls	r3, r3, #2
 801a670:	2100      	movs	r1, #0
 801a672:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801a674:	2300      	movs	r3, #0
 801a676:	e000      	b.n	801a67a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801a678:	2302      	movs	r3, #2
  }
}
 801a67a:	0018      	movs	r0, r3
 801a67c:	46bd      	mov	sp, r7
 801a67e:	b004      	add	sp, #16
 801a680:	bd80      	pop	{r7, pc}

0801a682 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a682:	b580      	push	{r7, lr}
 801a684:	b084      	sub	sp, #16
 801a686:	af00      	add	r7, sp, #0
 801a688:	6078      	str	r0, [r7, #4]
 801a68a:	000a      	movs	r2, r1
 801a68c:	1cfb      	adds	r3, r7, #3
 801a68e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a690:	687a      	ldr	r2, [r7, #4]
 801a692:	23ae      	movs	r3, #174	@ 0xae
 801a694:	009b      	lsls	r3, r3, #2
 801a696:	58d3      	ldr	r3, [r2, r3]
 801a698:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a69a:	1cfb      	adds	r3, r7, #3
 801a69c:	781a      	ldrb	r2, [r3, #0]
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	0011      	movs	r1, r2
 801a6a2:	0018      	movs	r0, r3
 801a6a4:	f002 f87d 	bl	801c7a2 <USBD_LL_GetRxDataSize>
 801a6a8:	0001      	movs	r1, r0
 801a6aa:	68fa      	ldr	r2, [r7, #12]
 801a6ac:	2383      	movs	r3, #131	@ 0x83
 801a6ae:	009b      	lsls	r3, r3, #2
 801a6b0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801a6b2:	687a      	ldr	r2, [r7, #4]
 801a6b4:	23ae      	movs	r3, #174	@ 0xae
 801a6b6:	009b      	lsls	r3, r3, #2
 801a6b8:	58d3      	ldr	r3, [r2, r3]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d011      	beq.n	801a6e2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a6be:	687a      	ldr	r2, [r7, #4]
 801a6c0:	23af      	movs	r3, #175	@ 0xaf
 801a6c2:	009b      	lsls	r3, r3, #2
 801a6c4:	58d3      	ldr	r3, [r2, r3]
 801a6c6:	68da      	ldr	r2, [r3, #12]
 801a6c8:	68f9      	ldr	r1, [r7, #12]
 801a6ca:	2381      	movs	r3, #129	@ 0x81
 801a6cc:	009b      	lsls	r3, r3, #2
 801a6ce:	58c8      	ldr	r0, [r1, r3]
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	2183      	movs	r1, #131	@ 0x83
 801a6d4:	0089      	lsls	r1, r1, #2
 801a6d6:	468c      	mov	ip, r1
 801a6d8:	4463      	add	r3, ip
 801a6da:	0019      	movs	r1, r3
 801a6dc:	4790      	blx	r2

    return USBD_OK;
 801a6de:	2300      	movs	r3, #0
 801a6e0:	e000      	b.n	801a6e4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801a6e2:	2302      	movs	r3, #2
  }
}
 801a6e4:	0018      	movs	r0, r3
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	b004      	add	sp, #16
 801a6ea:	bd80      	pop	{r7, pc}

0801a6ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a6ec:	b590      	push	{r4, r7, lr}
 801a6ee:	b085      	sub	sp, #20
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a6f4:	687a      	ldr	r2, [r7, #4]
 801a6f6:	23ae      	movs	r3, #174	@ 0xae
 801a6f8:	009b      	lsls	r3, r3, #2
 801a6fa:	58d3      	ldr	r3, [r2, r3]
 801a6fc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a6fe:	687a      	ldr	r2, [r7, #4]
 801a700:	23af      	movs	r3, #175	@ 0xaf
 801a702:	009b      	lsls	r3, r3, #2
 801a704:	58d3      	ldr	r3, [r2, r3]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d018      	beq.n	801a73c <USBD_CDC_EP0_RxReady+0x50>
 801a70a:	68fa      	ldr	r2, [r7, #12]
 801a70c:	2380      	movs	r3, #128	@ 0x80
 801a70e:	009b      	lsls	r3, r3, #2
 801a710:	5cd3      	ldrb	r3, [r2, r3]
 801a712:	2bff      	cmp	r3, #255	@ 0xff
 801a714:	d012      	beq.n	801a73c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	23af      	movs	r3, #175	@ 0xaf
 801a71a:	009b      	lsls	r3, r3, #2
 801a71c:	58d3      	ldr	r3, [r2, r3]
 801a71e:	689b      	ldr	r3, [r3, #8]
 801a720:	68f9      	ldr	r1, [r7, #12]
 801a722:	2280      	movs	r2, #128	@ 0x80
 801a724:	0092      	lsls	r2, r2, #2
 801a726:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801a728:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801a72a:	68fa      	ldr	r2, [r7, #12]
 801a72c:	4c06      	ldr	r4, [pc, #24]	@ (801a748 <USBD_CDC_EP0_RxReady+0x5c>)
 801a72e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a730:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a732:	68fa      	ldr	r2, [r7, #12]
 801a734:	2380      	movs	r3, #128	@ 0x80
 801a736:	009b      	lsls	r3, r3, #2
 801a738:	21ff      	movs	r1, #255	@ 0xff
 801a73a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801a73c:	2300      	movs	r3, #0
}
 801a73e:	0018      	movs	r0, r3
 801a740:	46bd      	mov	sp, r7
 801a742:	b005      	add	sp, #20
 801a744:	bd90      	pop	{r4, r7, pc}
 801a746:	46c0      	nop			@ (mov r8, r8)
 801a748:	00000201 	.word	0x00000201

0801a74c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b082      	sub	sp, #8
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	2243      	movs	r2, #67	@ 0x43
 801a758:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801a75a:	4b02      	ldr	r3, [pc, #8]	@ (801a764 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801a75c:	0018      	movs	r0, r3
 801a75e:	46bd      	mov	sp, r7
 801a760:	b002      	add	sp, #8
 801a762:	bd80      	pop	{r7, pc}
 801a764:	20000168 	.word	0x20000168

0801a768 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801a768:	b580      	push	{r7, lr}
 801a76a:	b082      	sub	sp, #8
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	2243      	movs	r2, #67	@ 0x43
 801a774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801a776:	4b02      	ldr	r3, [pc, #8]	@ (801a780 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801a778:	0018      	movs	r0, r3
 801a77a:	46bd      	mov	sp, r7
 801a77c:	b002      	add	sp, #8
 801a77e:	bd80      	pop	{r7, pc}
 801a780:	20000124 	.word	0x20000124

0801a784 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b082      	sub	sp, #8
 801a788:	af00      	add	r7, sp, #0
 801a78a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2243      	movs	r2, #67	@ 0x43
 801a790:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801a792:	4b02      	ldr	r3, [pc, #8]	@ (801a79c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801a794:	0018      	movs	r0, r3
 801a796:	46bd      	mov	sp, r7
 801a798:	b002      	add	sp, #8
 801a79a:	bd80      	pop	{r7, pc}
 801a79c:	200001ac 	.word	0x200001ac

0801a7a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b082      	sub	sp, #8
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	220a      	movs	r2, #10
 801a7ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801a7ae:	4b02      	ldr	r3, [pc, #8]	@ (801a7b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801a7b0:	0018      	movs	r0, r3
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	b002      	add	sp, #8
 801a7b6:	bd80      	pop	{r7, pc}
 801a7b8:	200000e0 	.word	0x200000e0

0801a7bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b084      	sub	sp, #16
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
 801a7c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801a7c6:	200f      	movs	r0, #15
 801a7c8:	183b      	adds	r3, r7, r0
 801a7ca:	2202      	movs	r2, #2
 801a7cc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d007      	beq.n	801a7e4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801a7d4:	687a      	ldr	r2, [r7, #4]
 801a7d6:	23af      	movs	r3, #175	@ 0xaf
 801a7d8:	009b      	lsls	r3, r3, #2
 801a7da:	6839      	ldr	r1, [r7, #0]
 801a7dc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801a7de:	183b      	adds	r3, r7, r0
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801a7e4:	230f      	movs	r3, #15
 801a7e6:	18fb      	adds	r3, r7, r3
 801a7e8:	781b      	ldrb	r3, [r3, #0]
}
 801a7ea:	0018      	movs	r0, r3
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	b004      	add	sp, #16
 801a7f0:	bd80      	pop	{r7, pc}

0801a7f2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801a7f2:	b580      	push	{r7, lr}
 801a7f4:	b086      	sub	sp, #24
 801a7f6:	af00      	add	r7, sp, #0
 801a7f8:	60f8      	str	r0, [r7, #12]
 801a7fa:	60b9      	str	r1, [r7, #8]
 801a7fc:	1dbb      	adds	r3, r7, #6
 801a7fe:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a800:	68fa      	ldr	r2, [r7, #12]
 801a802:	23ae      	movs	r3, #174	@ 0xae
 801a804:	009b      	lsls	r3, r3, #2
 801a806:	58d3      	ldr	r3, [r2, r3]
 801a808:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801a80a:	697a      	ldr	r2, [r7, #20]
 801a80c:	2382      	movs	r3, #130	@ 0x82
 801a80e:	009b      	lsls	r3, r3, #2
 801a810:	68b9      	ldr	r1, [r7, #8]
 801a812:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801a814:	1dbb      	adds	r3, r7, #6
 801a816:	8819      	ldrh	r1, [r3, #0]
 801a818:	697a      	ldr	r2, [r7, #20]
 801a81a:	2384      	movs	r3, #132	@ 0x84
 801a81c:	009b      	lsls	r3, r3, #2
 801a81e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a820:	2300      	movs	r3, #0
}
 801a822:	0018      	movs	r0, r3
 801a824:	46bd      	mov	sp, r7
 801a826:	b006      	add	sp, #24
 801a828:	bd80      	pop	{r7, pc}

0801a82a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801a82a:	b580      	push	{r7, lr}
 801a82c:	b084      	sub	sp, #16
 801a82e:	af00      	add	r7, sp, #0
 801a830:	6078      	str	r0, [r7, #4]
 801a832:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a834:	687a      	ldr	r2, [r7, #4]
 801a836:	23ae      	movs	r3, #174	@ 0xae
 801a838:	009b      	lsls	r3, r3, #2
 801a83a:	58d3      	ldr	r3, [r2, r3]
 801a83c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801a83e:	68fa      	ldr	r2, [r7, #12]
 801a840:	2381      	movs	r3, #129	@ 0x81
 801a842:	009b      	lsls	r3, r3, #2
 801a844:	6839      	ldr	r1, [r7, #0]
 801a846:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a848:	2300      	movs	r3, #0
}
 801a84a:	0018      	movs	r0, r3
 801a84c:	46bd      	mov	sp, r7
 801a84e:	b004      	add	sp, #16
 801a850:	bd80      	pop	{r7, pc}

0801a852 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801a852:	b580      	push	{r7, lr}
 801a854:	b084      	sub	sp, #16
 801a856:	af00      	add	r7, sp, #0
 801a858:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a85a:	687a      	ldr	r2, [r7, #4]
 801a85c:	23ae      	movs	r3, #174	@ 0xae
 801a85e:	009b      	lsls	r3, r3, #2
 801a860:	58d3      	ldr	r3, [r2, r3]
 801a862:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801a864:	687a      	ldr	r2, [r7, #4]
 801a866:	23ae      	movs	r3, #174	@ 0xae
 801a868:	009b      	lsls	r3, r3, #2
 801a86a:	58d3      	ldr	r3, [r2, r3]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d022      	beq.n	801a8b6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801a870:	68fa      	ldr	r2, [r7, #12]
 801a872:	2385      	movs	r3, #133	@ 0x85
 801a874:	009b      	lsls	r3, r3, #2
 801a876:	58d3      	ldr	r3, [r2, r3]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	d11a      	bne.n	801a8b2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801a87c:	68fa      	ldr	r2, [r7, #12]
 801a87e:	2385      	movs	r3, #133	@ 0x85
 801a880:	009b      	lsls	r3, r3, #2
 801a882:	2101      	movs	r1, #1
 801a884:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801a886:	68fa      	ldr	r2, [r7, #12]
 801a888:	2384      	movs	r3, #132	@ 0x84
 801a88a:	009b      	lsls	r3, r3, #2
 801a88c:	58d2      	ldr	r2, [r2, r3]
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801a892:	68fa      	ldr	r2, [r7, #12]
 801a894:	2382      	movs	r3, #130	@ 0x82
 801a896:	009b      	lsls	r3, r3, #2
 801a898:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801a89a:	68fa      	ldr	r2, [r7, #12]
 801a89c:	2384      	movs	r3, #132	@ 0x84
 801a89e:	009b      	lsls	r3, r3, #2
 801a8a0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801a8a2:	b29b      	uxth	r3, r3
 801a8a4:	6878      	ldr	r0, [r7, #4]
 801a8a6:	000a      	movs	r2, r1
 801a8a8:	2181      	movs	r1, #129	@ 0x81
 801a8aa:	f001 ff0c 	bl	801c6c6 <USBD_LL_Transmit>

      return USBD_OK;
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	e002      	b.n	801a8b8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801a8b2:	2301      	movs	r3, #1
 801a8b4:	e000      	b.n	801a8b8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801a8b6:	2302      	movs	r3, #2
  }
}
 801a8b8:	0018      	movs	r0, r3
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	b004      	add	sp, #16
 801a8be:	bd80      	pop	{r7, pc}

0801a8c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b084      	sub	sp, #16
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a8c8:	687a      	ldr	r2, [r7, #4]
 801a8ca:	23ae      	movs	r3, #174	@ 0xae
 801a8cc:	009b      	lsls	r3, r3, #2
 801a8ce:	58d3      	ldr	r3, [r2, r3]
 801a8d0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801a8d2:	687a      	ldr	r2, [r7, #4]
 801a8d4:	23ae      	movs	r3, #174	@ 0xae
 801a8d6:	009b      	lsls	r3, r3, #2
 801a8d8:	58d3      	ldr	r3, [r2, r3]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d019      	beq.n	801a912 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	7c1b      	ldrb	r3, [r3, #16]
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d10a      	bne.n	801a8fc <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801a8e6:	68fa      	ldr	r2, [r7, #12]
 801a8e8:	2381      	movs	r3, #129	@ 0x81
 801a8ea:	009b      	lsls	r3, r3, #2
 801a8ec:	58d2      	ldr	r2, [r2, r3]
 801a8ee:	2380      	movs	r3, #128	@ 0x80
 801a8f0:	009b      	lsls	r3, r3, #2
 801a8f2:	6878      	ldr	r0, [r7, #4]
 801a8f4:	2101      	movs	r1, #1
 801a8f6:	f001 ff1d 	bl	801c734 <USBD_LL_PrepareReceive>
 801a8fa:	e008      	b.n	801a90e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801a8fc:	68fa      	ldr	r2, [r7, #12]
 801a8fe:	2381      	movs	r3, #129	@ 0x81
 801a900:	009b      	lsls	r3, r3, #2
 801a902:	58d2      	ldr	r2, [r2, r3]
 801a904:	6878      	ldr	r0, [r7, #4]
 801a906:	2340      	movs	r3, #64	@ 0x40
 801a908:	2101      	movs	r1, #1
 801a90a:	f001 ff13 	bl	801c734 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801a90e:	2300      	movs	r3, #0
 801a910:	e000      	b.n	801a914 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801a912:	2302      	movs	r3, #2
  }
}
 801a914:	0018      	movs	r0, r3
 801a916:	46bd      	mov	sp, r7
 801a918:	b004      	add	sp, #16
 801a91a:	bd80      	pop	{r7, pc}

0801a91c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b084      	sub	sp, #16
 801a920:	af00      	add	r7, sp, #0
 801a922:	60f8      	str	r0, [r7, #12]
 801a924:	60b9      	str	r1, [r7, #8]
 801a926:	1dfb      	adds	r3, r7, #7
 801a928:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d101      	bne.n	801a934 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801a930:	2302      	movs	r3, #2
 801a932:	e020      	b.n	801a976 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801a934:	68fa      	ldr	r2, [r7, #12]
 801a936:	23ad      	movs	r3, #173	@ 0xad
 801a938:	009b      	lsls	r3, r3, #2
 801a93a:	58d3      	ldr	r3, [r2, r3]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d004      	beq.n	801a94a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801a940:	68fa      	ldr	r2, [r7, #12]
 801a942:	23ad      	movs	r3, #173	@ 0xad
 801a944:	009b      	lsls	r3, r3, #2
 801a946:	2100      	movs	r1, #0
 801a948:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801a94a:	68bb      	ldr	r3, [r7, #8]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d004      	beq.n	801a95a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801a950:	68fa      	ldr	r2, [r7, #12]
 801a952:	23ac      	movs	r3, #172	@ 0xac
 801a954:	009b      	lsls	r3, r3, #2
 801a956:	68b9      	ldr	r1, [r7, #8]
 801a958:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a95a:	68fa      	ldr	r2, [r7, #12]
 801a95c:	23a7      	movs	r3, #167	@ 0xa7
 801a95e:	009b      	lsls	r3, r3, #2
 801a960:	2101      	movs	r1, #1
 801a962:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	1dfa      	adds	r2, r7, #7
 801a968:	7812      	ldrb	r2, [r2, #0]
 801a96a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	0018      	movs	r0, r3
 801a970:	f001 fd0c 	bl	801c38c <USBD_LL_Init>

  return USBD_OK;
 801a974:	2300      	movs	r3, #0
}
 801a976:	0018      	movs	r0, r3
 801a978:	46bd      	mov	sp, r7
 801a97a:	b004      	add	sp, #16
 801a97c:	bd80      	pop	{r7, pc}

0801a97e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801a97e:	b580      	push	{r7, lr}
 801a980:	b084      	sub	sp, #16
 801a982:	af00      	add	r7, sp, #0
 801a984:	6078      	str	r0, [r7, #4]
 801a986:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801a988:	200f      	movs	r0, #15
 801a98a:	183b      	adds	r3, r7, r0
 801a98c:	2200      	movs	r2, #0
 801a98e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801a990:	683b      	ldr	r3, [r7, #0]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d008      	beq.n	801a9a8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801a996:	687a      	ldr	r2, [r7, #4]
 801a998:	23ad      	movs	r3, #173	@ 0xad
 801a99a:	009b      	lsls	r3, r3, #2
 801a99c:	6839      	ldr	r1, [r7, #0]
 801a99e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801a9a0:	183b      	adds	r3, r7, r0
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	701a      	strb	r2, [r3, #0]
 801a9a6:	e003      	b.n	801a9b0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801a9a8:	230f      	movs	r3, #15
 801a9aa:	18fb      	adds	r3, r7, r3
 801a9ac:	2202      	movs	r2, #2
 801a9ae:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801a9b0:	230f      	movs	r3, #15
 801a9b2:	18fb      	adds	r3, r7, r3
 801a9b4:	781b      	ldrb	r3, [r3, #0]
}
 801a9b6:	0018      	movs	r0, r3
 801a9b8:	46bd      	mov	sp, r7
 801a9ba:	b004      	add	sp, #16
 801a9bc:	bd80      	pop	{r7, pc}

0801a9be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801a9be:	b580      	push	{r7, lr}
 801a9c0:	b082      	sub	sp, #8
 801a9c2:	af00      	add	r7, sp, #0
 801a9c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	0018      	movs	r0, r3
 801a9ca:	f001 fd43 	bl	801c454 <USBD_LL_Start>

  return USBD_OK;
 801a9ce:	2300      	movs	r3, #0
}
 801a9d0:	0018      	movs	r0, r3
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	b002      	add	sp, #8
 801a9d6:	bd80      	pop	{r7, pc}

0801a9d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b082      	sub	sp, #8
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a9e0:	2300      	movs	r3, #0
}
 801a9e2:	0018      	movs	r0, r3
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	b002      	add	sp, #8
 801a9e8:	bd80      	pop	{r7, pc}

0801a9ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801a9ea:	b590      	push	{r4, r7, lr}
 801a9ec:	b085      	sub	sp, #20
 801a9ee:	af00      	add	r7, sp, #0
 801a9f0:	6078      	str	r0, [r7, #4]
 801a9f2:	000a      	movs	r2, r1
 801a9f4:	1cfb      	adds	r3, r7, #3
 801a9f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801a9f8:	240f      	movs	r4, #15
 801a9fa:	193b      	adds	r3, r7, r4
 801a9fc:	2202      	movs	r2, #2
 801a9fe:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801aa00:	687a      	ldr	r2, [r7, #4]
 801aa02:	23ad      	movs	r3, #173	@ 0xad
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	58d3      	ldr	r3, [r2, r3]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d00e      	beq.n	801aa2a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801aa0c:	687a      	ldr	r2, [r7, #4]
 801aa0e:	23ad      	movs	r3, #173	@ 0xad
 801aa10:	009b      	lsls	r3, r3, #2
 801aa12:	58d3      	ldr	r3, [r2, r3]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	1cfa      	adds	r2, r7, #3
 801aa18:	7811      	ldrb	r1, [r2, #0]
 801aa1a:	687a      	ldr	r2, [r7, #4]
 801aa1c:	0010      	movs	r0, r2
 801aa1e:	4798      	blx	r3
 801aa20:	1e03      	subs	r3, r0, #0
 801aa22:	d102      	bne.n	801aa2a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801aa24:	193b      	adds	r3, r7, r4
 801aa26:	2200      	movs	r2, #0
 801aa28:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801aa2a:	230f      	movs	r3, #15
 801aa2c:	18fb      	adds	r3, r7, r3
 801aa2e:	781b      	ldrb	r3, [r3, #0]
}
 801aa30:	0018      	movs	r0, r3
 801aa32:	46bd      	mov	sp, r7
 801aa34:	b005      	add	sp, #20
 801aa36:	bd90      	pop	{r4, r7, pc}

0801aa38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b082      	sub	sp, #8
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	6078      	str	r0, [r7, #4]
 801aa40:	000a      	movs	r2, r1
 801aa42:	1cfb      	adds	r3, r7, #3
 801aa44:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801aa46:	687a      	ldr	r2, [r7, #4]
 801aa48:	23ad      	movs	r3, #173	@ 0xad
 801aa4a:	009b      	lsls	r3, r3, #2
 801aa4c:	58d3      	ldr	r3, [r2, r3]
 801aa4e:	685b      	ldr	r3, [r3, #4]
 801aa50:	1cfa      	adds	r2, r7, #3
 801aa52:	7811      	ldrb	r1, [r2, #0]
 801aa54:	687a      	ldr	r2, [r7, #4]
 801aa56:	0010      	movs	r0, r2
 801aa58:	4798      	blx	r3

  return USBD_OK;
 801aa5a:	2300      	movs	r3, #0
}
 801aa5c:	0018      	movs	r0, r3
 801aa5e:	46bd      	mov	sp, r7
 801aa60:	b002      	add	sp, #8
 801aa62:	bd80      	pop	{r7, pc}

0801aa64 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b082      	sub	sp, #8
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
 801aa6c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	22aa      	movs	r2, #170	@ 0xaa
 801aa72:	0092      	lsls	r2, r2, #2
 801aa74:	4694      	mov	ip, r2
 801aa76:	4463      	add	r3, ip
 801aa78:	683a      	ldr	r2, [r7, #0]
 801aa7a:	0011      	movs	r1, r2
 801aa7c:	0018      	movs	r0, r3
 801aa7e:	f001 f810 	bl	801baa2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801aa82:	687a      	ldr	r2, [r7, #4]
 801aa84:	23a5      	movs	r3, #165	@ 0xa5
 801aa86:	009b      	lsls	r3, r3, #2
 801aa88:	2101      	movs	r1, #1
 801aa8a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	4a23      	ldr	r2, [pc, #140]	@ (801ab1c <USBD_LL_SetupStage+0xb8>)
 801aa90:	5a9b      	ldrh	r3, [r3, r2]
 801aa92:	0019      	movs	r1, r3
 801aa94:	687a      	ldr	r2, [r7, #4]
 801aa96:	23a6      	movs	r3, #166	@ 0xa6
 801aa98:	009b      	lsls	r3, r3, #2
 801aa9a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801aa9c:	687a      	ldr	r2, [r7, #4]
 801aa9e:	23aa      	movs	r3, #170	@ 0xaa
 801aaa0:	009b      	lsls	r3, r3, #2
 801aaa2:	5cd3      	ldrb	r3, [r2, r3]
 801aaa4:	001a      	movs	r2, r3
 801aaa6:	231f      	movs	r3, #31
 801aaa8:	4013      	ands	r3, r2
 801aaaa:	2b02      	cmp	r3, #2
 801aaac:	d019      	beq.n	801aae2 <USBD_LL_SetupStage+0x7e>
 801aaae:	d822      	bhi.n	801aaf6 <USBD_LL_SetupStage+0x92>
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d002      	beq.n	801aaba <USBD_LL_SetupStage+0x56>
 801aab4:	2b01      	cmp	r3, #1
 801aab6:	d00a      	beq.n	801aace <USBD_LL_SetupStage+0x6a>
 801aab8:	e01d      	b.n	801aaf6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	22aa      	movs	r2, #170	@ 0xaa
 801aabe:	0092      	lsls	r2, r2, #2
 801aac0:	189a      	adds	r2, r3, r2
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	0011      	movs	r1, r2
 801aac6:	0018      	movs	r0, r3
 801aac8:	f000 fa10 	bl	801aeec <USBD_StdDevReq>
      break;
 801aacc:	e020      	b.n	801ab10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	22aa      	movs	r2, #170	@ 0xaa
 801aad2:	0092      	lsls	r2, r2, #2
 801aad4:	189a      	adds	r2, r3, r2
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	0011      	movs	r1, r2
 801aada:	0018      	movs	r0, r3
 801aadc:	f000 fa78 	bl	801afd0 <USBD_StdItfReq>
      break;
 801aae0:	e016      	b.n	801ab10 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	22aa      	movs	r2, #170	@ 0xaa
 801aae6:	0092      	lsls	r2, r2, #2
 801aae8:	189a      	adds	r2, r3, r2
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	0011      	movs	r1, r2
 801aaee:	0018      	movs	r0, r3
 801aaf0:	f000 fac5 	bl	801b07e <USBD_StdEPReq>
      break;
 801aaf4:	e00c      	b.n	801ab10 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801aaf6:	687a      	ldr	r2, [r7, #4]
 801aaf8:	23aa      	movs	r3, #170	@ 0xaa
 801aafa:	009b      	lsls	r3, r3, #2
 801aafc:	5cd3      	ldrb	r3, [r2, r3]
 801aafe:	227f      	movs	r2, #127	@ 0x7f
 801ab00:	4393      	bics	r3, r2
 801ab02:	b2da      	uxtb	r2, r3
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	0011      	movs	r1, r2
 801ab08:	0018      	movs	r0, r3
 801ab0a:	f001 fd2a 	bl	801c562 <USBD_LL_StallEP>
      break;
 801ab0e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801ab10:	2300      	movs	r3, #0
}
 801ab12:	0018      	movs	r0, r3
 801ab14:	46bd      	mov	sp, r7
 801ab16:	b002      	add	sp, #8
 801ab18:	bd80      	pop	{r7, pc}
 801ab1a:	46c0      	nop			@ (mov r8, r8)
 801ab1c:	000002ae 	.word	0x000002ae

0801ab20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	b086      	sub	sp, #24
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	60f8      	str	r0, [r7, #12]
 801ab28:	607a      	str	r2, [r7, #4]
 801ab2a:	200b      	movs	r0, #11
 801ab2c:	183b      	adds	r3, r7, r0
 801ab2e:	1c0a      	adds	r2, r1, #0
 801ab30:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ab32:	183b      	adds	r3, r7, r0
 801ab34:	781b      	ldrb	r3, [r3, #0]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d154      	bne.n	801abe4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	3355      	adds	r3, #85	@ 0x55
 801ab3e:	33ff      	adds	r3, #255	@ 0xff
 801ab40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801ab42:	68fa      	ldr	r2, [r7, #12]
 801ab44:	23a5      	movs	r3, #165	@ 0xa5
 801ab46:	009b      	lsls	r3, r3, #2
 801ab48:	58d3      	ldr	r3, [r2, r3]
 801ab4a:	2b03      	cmp	r3, #3
 801ab4c:	d139      	bne.n	801abc2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801ab4e:	697b      	ldr	r3, [r7, #20]
 801ab50:	68da      	ldr	r2, [r3, #12]
 801ab52:	697b      	ldr	r3, [r7, #20]
 801ab54:	691b      	ldr	r3, [r3, #16]
 801ab56:	429a      	cmp	r2, r3
 801ab58:	d919      	bls.n	801ab8e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801ab5a:	697b      	ldr	r3, [r7, #20]
 801ab5c:	68da      	ldr	r2, [r3, #12]
 801ab5e:	697b      	ldr	r3, [r7, #20]
 801ab60:	691b      	ldr	r3, [r3, #16]
 801ab62:	1ad2      	subs	r2, r2, r3
 801ab64:	697b      	ldr	r3, [r7, #20]
 801ab66:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ab68:	697b      	ldr	r3, [r7, #20]
 801ab6a:	68da      	ldr	r2, [r3, #12]
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801ab70:	429a      	cmp	r2, r3
 801ab72:	d203      	bcs.n	801ab7c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ab74:	697b      	ldr	r3, [r7, #20]
 801ab76:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801ab78:	b29b      	uxth	r3, r3
 801ab7a:	e002      	b.n	801ab82 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ab7c:	697b      	ldr	r3, [r7, #20]
 801ab7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801ab80:	b29b      	uxth	r3, r3
 801ab82:	6879      	ldr	r1, [r7, #4]
 801ab84:	68f8      	ldr	r0, [r7, #12]
 801ab86:	001a      	movs	r2, r3
 801ab88:	f001 f898 	bl	801bcbc <USBD_CtlContinueRx>
 801ab8c:	e045      	b.n	801ac1a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ab8e:	68fa      	ldr	r2, [r7, #12]
 801ab90:	23ad      	movs	r3, #173	@ 0xad
 801ab92:	009b      	lsls	r3, r3, #2
 801ab94:	58d3      	ldr	r3, [r2, r3]
 801ab96:	691b      	ldr	r3, [r3, #16]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d00d      	beq.n	801abb8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ab9c:	68fa      	ldr	r2, [r7, #12]
 801ab9e:	23a7      	movs	r3, #167	@ 0xa7
 801aba0:	009b      	lsls	r3, r3, #2
 801aba2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801aba4:	2b03      	cmp	r3, #3
 801aba6:	d107      	bne.n	801abb8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801aba8:	68fa      	ldr	r2, [r7, #12]
 801abaa:	23ad      	movs	r3, #173	@ 0xad
 801abac:	009b      	lsls	r3, r3, #2
 801abae:	58d3      	ldr	r3, [r2, r3]
 801abb0:	691b      	ldr	r3, [r3, #16]
 801abb2:	68fa      	ldr	r2, [r7, #12]
 801abb4:	0010      	movs	r0, r2
 801abb6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	0018      	movs	r0, r3
 801abbc:	f001 f891 	bl	801bce2 <USBD_CtlSendStatus>
 801abc0:	e02b      	b.n	801ac1a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801abc2:	68fa      	ldr	r2, [r7, #12]
 801abc4:	23a5      	movs	r3, #165	@ 0xa5
 801abc6:	009b      	lsls	r3, r3, #2
 801abc8:	58d3      	ldr	r3, [r2, r3]
 801abca:	2b05      	cmp	r3, #5
 801abcc:	d125      	bne.n	801ac1a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801abce:	68fa      	ldr	r2, [r7, #12]
 801abd0:	23a5      	movs	r3, #165	@ 0xa5
 801abd2:	009b      	lsls	r3, r3, #2
 801abd4:	2100      	movs	r1, #0
 801abd6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	2100      	movs	r1, #0
 801abdc:	0018      	movs	r0, r3
 801abde:	f001 fcc0 	bl	801c562 <USBD_LL_StallEP>
 801abe2:	e01a      	b.n	801ac1a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801abe4:	68fa      	ldr	r2, [r7, #12]
 801abe6:	23ad      	movs	r3, #173	@ 0xad
 801abe8:	009b      	lsls	r3, r3, #2
 801abea:	58d3      	ldr	r3, [r2, r3]
 801abec:	699b      	ldr	r3, [r3, #24]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d011      	beq.n	801ac16 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801abf2:	68fa      	ldr	r2, [r7, #12]
 801abf4:	23a7      	movs	r3, #167	@ 0xa7
 801abf6:	009b      	lsls	r3, r3, #2
 801abf8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801abfa:	2b03      	cmp	r3, #3
 801abfc:	d10b      	bne.n	801ac16 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801abfe:	68fa      	ldr	r2, [r7, #12]
 801ac00:	23ad      	movs	r3, #173	@ 0xad
 801ac02:	009b      	lsls	r3, r3, #2
 801ac04:	58d3      	ldr	r3, [r2, r3]
 801ac06:	699b      	ldr	r3, [r3, #24]
 801ac08:	220b      	movs	r2, #11
 801ac0a:	18ba      	adds	r2, r7, r2
 801ac0c:	7811      	ldrb	r1, [r2, #0]
 801ac0e:	68fa      	ldr	r2, [r7, #12]
 801ac10:	0010      	movs	r0, r2
 801ac12:	4798      	blx	r3
 801ac14:	e001      	b.n	801ac1a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ac16:	2302      	movs	r3, #2
 801ac18:	e000      	b.n	801ac1c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801ac1a:	2300      	movs	r3, #0
}
 801ac1c:	0018      	movs	r0, r3
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	b006      	add	sp, #24
 801ac22:	bd80      	pop	{r7, pc}

0801ac24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	b086      	sub	sp, #24
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	60f8      	str	r0, [r7, #12]
 801ac2c:	607a      	str	r2, [r7, #4]
 801ac2e:	200b      	movs	r0, #11
 801ac30:	183b      	adds	r3, r7, r0
 801ac32:	1c0a      	adds	r2, r1, #0
 801ac34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ac36:	183b      	adds	r3, r7, r0
 801ac38:	781b      	ldrb	r3, [r3, #0]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d000      	beq.n	801ac40 <USBD_LL_DataInStage+0x1c>
 801ac3e:	e08e      	b.n	801ad5e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	3314      	adds	r3, #20
 801ac44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801ac46:	68fa      	ldr	r2, [r7, #12]
 801ac48:	23a5      	movs	r3, #165	@ 0xa5
 801ac4a:	009b      	lsls	r3, r3, #2
 801ac4c:	58d3      	ldr	r3, [r2, r3]
 801ac4e:	2b02      	cmp	r3, #2
 801ac50:	d164      	bne.n	801ad1c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	68da      	ldr	r2, [r3, #12]
 801ac56:	697b      	ldr	r3, [r7, #20]
 801ac58:	691b      	ldr	r3, [r3, #16]
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d915      	bls.n	801ac8a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801ac5e:	697b      	ldr	r3, [r7, #20]
 801ac60:	68da      	ldr	r2, [r3, #12]
 801ac62:	697b      	ldr	r3, [r7, #20]
 801ac64:	691b      	ldr	r3, [r3, #16]
 801ac66:	1ad2      	subs	r2, r2, r3
 801ac68:	697b      	ldr	r3, [r7, #20]
 801ac6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801ac6c:	697b      	ldr	r3, [r7, #20]
 801ac6e:	68db      	ldr	r3, [r3, #12]
 801ac70:	b29a      	uxth	r2, r3
 801ac72:	6879      	ldr	r1, [r7, #4]
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	0018      	movs	r0, r3
 801ac78:	f000 ffe9 	bl	801bc4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ac7c:	68f8      	ldr	r0, [r7, #12]
 801ac7e:	2300      	movs	r3, #0
 801ac80:	2200      	movs	r2, #0
 801ac82:	2100      	movs	r1, #0
 801ac84:	f001 fd56 	bl	801c734 <USBD_LL_PrepareReceive>
 801ac88:	e059      	b.n	801ad3e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801ac8a:	697b      	ldr	r3, [r7, #20]
 801ac8c:	689a      	ldr	r2, [r3, #8]
 801ac8e:	697b      	ldr	r3, [r7, #20]
 801ac90:	691b      	ldr	r3, [r3, #16]
 801ac92:	0019      	movs	r1, r3
 801ac94:	0010      	movs	r0, r2
 801ac96:	f7e5 fb0b 	bl	80002b0 <__aeabi_uidivmod>
 801ac9a:	1e0b      	subs	r3, r1, #0
 801ac9c:	d11f      	bne.n	801acde <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801ac9e:	697b      	ldr	r3, [r7, #20]
 801aca0:	689a      	ldr	r2, [r3, #8]
 801aca2:	697b      	ldr	r3, [r7, #20]
 801aca4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801aca6:	429a      	cmp	r2, r3
 801aca8:	d319      	bcc.n	801acde <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801acaa:	697b      	ldr	r3, [r7, #20]
 801acac:	689a      	ldr	r2, [r3, #8]
 801acae:	68f9      	ldr	r1, [r7, #12]
 801acb0:	23a6      	movs	r3, #166	@ 0xa6
 801acb2:	009b      	lsls	r3, r3, #2
 801acb4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801acb6:	429a      	cmp	r2, r3
 801acb8:	d211      	bcs.n	801acde <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	2200      	movs	r2, #0
 801acbe:	2100      	movs	r1, #0
 801acc0:	0018      	movs	r0, r3
 801acc2:	f000 ffc4 	bl	801bc4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801acc6:	68fa      	ldr	r2, [r7, #12]
 801acc8:	23a6      	movs	r3, #166	@ 0xa6
 801acca:	009b      	lsls	r3, r3, #2
 801accc:	2100      	movs	r1, #0
 801acce:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801acd0:	68f8      	ldr	r0, [r7, #12]
 801acd2:	2300      	movs	r3, #0
 801acd4:	2200      	movs	r2, #0
 801acd6:	2100      	movs	r1, #0
 801acd8:	f001 fd2c 	bl	801c734 <USBD_LL_PrepareReceive>
 801acdc:	e02f      	b.n	801ad3e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801acde:	68fa      	ldr	r2, [r7, #12]
 801ace0:	23ad      	movs	r3, #173	@ 0xad
 801ace2:	009b      	lsls	r3, r3, #2
 801ace4:	58d3      	ldr	r3, [r2, r3]
 801ace6:	68db      	ldr	r3, [r3, #12]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d00d      	beq.n	801ad08 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801acec:	68fa      	ldr	r2, [r7, #12]
 801acee:	23a7      	movs	r3, #167	@ 0xa7
 801acf0:	009b      	lsls	r3, r3, #2
 801acf2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801acf4:	2b03      	cmp	r3, #3
 801acf6:	d107      	bne.n	801ad08 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801acf8:	68fa      	ldr	r2, [r7, #12]
 801acfa:	23ad      	movs	r3, #173	@ 0xad
 801acfc:	009b      	lsls	r3, r3, #2
 801acfe:	58d3      	ldr	r3, [r2, r3]
 801ad00:	68db      	ldr	r3, [r3, #12]
 801ad02:	68fa      	ldr	r2, [r7, #12]
 801ad04:	0010      	movs	r0, r2
 801ad06:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	2180      	movs	r1, #128	@ 0x80
 801ad0c:	0018      	movs	r0, r3
 801ad0e:	f001 fc28 	bl	801c562 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	0018      	movs	r0, r3
 801ad16:	f000 fff8 	bl	801bd0a <USBD_CtlReceiveStatus>
 801ad1a:	e010      	b.n	801ad3e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801ad1c:	68fa      	ldr	r2, [r7, #12]
 801ad1e:	23a5      	movs	r3, #165	@ 0xa5
 801ad20:	009b      	lsls	r3, r3, #2
 801ad22:	58d3      	ldr	r3, [r2, r3]
 801ad24:	2b04      	cmp	r3, #4
 801ad26:	d005      	beq.n	801ad34 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801ad28:	68fa      	ldr	r2, [r7, #12]
 801ad2a:	23a5      	movs	r3, #165	@ 0xa5
 801ad2c:	009b      	lsls	r3, r3, #2
 801ad2e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d104      	bne.n	801ad3e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	2180      	movs	r1, #128	@ 0x80
 801ad38:	0018      	movs	r0, r3
 801ad3a:	f001 fc12 	bl	801c562 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801ad3e:	68fa      	ldr	r2, [r7, #12]
 801ad40:	23a8      	movs	r3, #168	@ 0xa8
 801ad42:	009b      	lsls	r3, r3, #2
 801ad44:	5cd3      	ldrb	r3, [r2, r3]
 801ad46:	2b01      	cmp	r3, #1
 801ad48:	d124      	bne.n	801ad94 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	0018      	movs	r0, r3
 801ad4e:	f7ff fe43 	bl	801a9d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801ad52:	68fa      	ldr	r2, [r7, #12]
 801ad54:	23a8      	movs	r3, #168	@ 0xa8
 801ad56:	009b      	lsls	r3, r3, #2
 801ad58:	2100      	movs	r1, #0
 801ad5a:	54d1      	strb	r1, [r2, r3]
 801ad5c:	e01a      	b.n	801ad94 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801ad5e:	68fa      	ldr	r2, [r7, #12]
 801ad60:	23ad      	movs	r3, #173	@ 0xad
 801ad62:	009b      	lsls	r3, r3, #2
 801ad64:	58d3      	ldr	r3, [r2, r3]
 801ad66:	695b      	ldr	r3, [r3, #20]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d011      	beq.n	801ad90 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ad6c:	68fa      	ldr	r2, [r7, #12]
 801ad6e:	23a7      	movs	r3, #167	@ 0xa7
 801ad70:	009b      	lsls	r3, r3, #2
 801ad72:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801ad74:	2b03      	cmp	r3, #3
 801ad76:	d10b      	bne.n	801ad90 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801ad78:	68fa      	ldr	r2, [r7, #12]
 801ad7a:	23ad      	movs	r3, #173	@ 0xad
 801ad7c:	009b      	lsls	r3, r3, #2
 801ad7e:	58d3      	ldr	r3, [r2, r3]
 801ad80:	695b      	ldr	r3, [r3, #20]
 801ad82:	220b      	movs	r2, #11
 801ad84:	18ba      	adds	r2, r7, r2
 801ad86:	7811      	ldrb	r1, [r2, #0]
 801ad88:	68fa      	ldr	r2, [r7, #12]
 801ad8a:	0010      	movs	r0, r2
 801ad8c:	4798      	blx	r3
 801ad8e:	e001      	b.n	801ad94 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ad90:	2302      	movs	r3, #2
 801ad92:	e000      	b.n	801ad96 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801ad94:	2300      	movs	r3, #0
}
 801ad96:	0018      	movs	r0, r3
 801ad98:	46bd      	mov	sp, r7
 801ad9a:	b006      	add	sp, #24
 801ad9c:	bd80      	pop	{r7, pc}

0801ad9e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801ad9e:	b580      	push	{r7, lr}
 801ada0:	b082      	sub	sp, #8
 801ada2:	af00      	add	r7, sp, #0
 801ada4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801ada6:	6878      	ldr	r0, [r7, #4]
 801ada8:	2340      	movs	r3, #64	@ 0x40
 801adaa:	2200      	movs	r2, #0
 801adac:	2100      	movs	r1, #0
 801adae:	f001 fb76 	bl	801c49e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801adb2:	687a      	ldr	r2, [r7, #4]
 801adb4:	23ac      	movs	r3, #172	@ 0xac
 801adb6:	005b      	lsls	r3, r3, #1
 801adb8:	2101      	movs	r1, #1
 801adba:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801adbc:	687a      	ldr	r2, [r7, #4]
 801adbe:	23b2      	movs	r3, #178	@ 0xb2
 801adc0:	005b      	lsls	r3, r3, #1
 801adc2:	2140      	movs	r1, #64	@ 0x40
 801adc4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801adc6:	6878      	ldr	r0, [r7, #4]
 801adc8:	2340      	movs	r3, #64	@ 0x40
 801adca:	2200      	movs	r2, #0
 801adcc:	2180      	movs	r1, #128	@ 0x80
 801adce:	f001 fb66 	bl	801c49e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2201      	movs	r2, #1
 801add6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2240      	movs	r2, #64	@ 0x40
 801addc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801adde:	687a      	ldr	r2, [r7, #4]
 801ade0:	23a7      	movs	r3, #167	@ 0xa7
 801ade2:	009b      	lsls	r3, r3, #2
 801ade4:	2101      	movs	r1, #1
 801ade6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801ade8:	687a      	ldr	r2, [r7, #4]
 801adea:	23a5      	movs	r3, #165	@ 0xa5
 801adec:	009b      	lsls	r3, r3, #2
 801adee:	2100      	movs	r1, #0
 801adf0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	2200      	movs	r2, #0
 801adf6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801adf8:	687a      	ldr	r2, [r7, #4]
 801adfa:	23a9      	movs	r3, #169	@ 0xa9
 801adfc:	009b      	lsls	r3, r3, #2
 801adfe:	2100      	movs	r1, #0
 801ae00:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801ae02:	687a      	ldr	r2, [r7, #4]
 801ae04:	23ae      	movs	r3, #174	@ 0xae
 801ae06:	009b      	lsls	r3, r3, #2
 801ae08:	58d3      	ldr	r3, [r2, r3]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d00a      	beq.n	801ae24 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801ae0e:	687a      	ldr	r2, [r7, #4]
 801ae10:	23ad      	movs	r3, #173	@ 0xad
 801ae12:	009b      	lsls	r3, r3, #2
 801ae14:	58d3      	ldr	r3, [r2, r3]
 801ae16:	685a      	ldr	r2, [r3, #4]
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	685b      	ldr	r3, [r3, #4]
 801ae1c:	b2d9      	uxtb	r1, r3
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	0018      	movs	r0, r3
 801ae22:	4790      	blx	r2
  }

  return USBD_OK;
 801ae24:	2300      	movs	r3, #0
}
 801ae26:	0018      	movs	r0, r3
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	b002      	add	sp, #8
 801ae2c:	bd80      	pop	{r7, pc}

0801ae2e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801ae2e:	b580      	push	{r7, lr}
 801ae30:	b082      	sub	sp, #8
 801ae32:	af00      	add	r7, sp, #0
 801ae34:	6078      	str	r0, [r7, #4]
 801ae36:	000a      	movs	r2, r1
 801ae38:	1cfb      	adds	r3, r7, #3
 801ae3a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	1cfa      	adds	r2, r7, #3
 801ae40:	7812      	ldrb	r2, [r2, #0]
 801ae42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801ae44:	2300      	movs	r3, #0
}
 801ae46:	0018      	movs	r0, r3
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	b002      	add	sp, #8
 801ae4c:	bd80      	pop	{r7, pc}
	...

0801ae50 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b082      	sub	sp, #8
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801ae58:	687a      	ldr	r2, [r7, #4]
 801ae5a:	23a7      	movs	r3, #167	@ 0xa7
 801ae5c:	009b      	lsls	r3, r3, #2
 801ae5e:	5cd1      	ldrb	r1, [r2, r3]
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	4a06      	ldr	r2, [pc, #24]	@ (801ae7c <USBD_LL_Suspend+0x2c>)
 801ae64:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801ae66:	687a      	ldr	r2, [r7, #4]
 801ae68:	23a7      	movs	r3, #167	@ 0xa7
 801ae6a:	009b      	lsls	r3, r3, #2
 801ae6c:	2104      	movs	r1, #4
 801ae6e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801ae70:	2300      	movs	r3, #0
}
 801ae72:	0018      	movs	r0, r3
 801ae74:	46bd      	mov	sp, r7
 801ae76:	b002      	add	sp, #8
 801ae78:	bd80      	pop	{r7, pc}
 801ae7a:	46c0      	nop			@ (mov r8, r8)
 801ae7c:	0000029d 	.word	0x0000029d

0801ae80 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b082      	sub	sp, #8
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801ae88:	687a      	ldr	r2, [r7, #4]
 801ae8a:	23a7      	movs	r3, #167	@ 0xa7
 801ae8c:	009b      	lsls	r3, r3, #2
 801ae8e:	5cd3      	ldrb	r3, [r2, r3]
 801ae90:	2b04      	cmp	r3, #4
 801ae92:	d106      	bne.n	801aea2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	4a05      	ldr	r2, [pc, #20]	@ (801aeac <USBD_LL_Resume+0x2c>)
 801ae98:	5c99      	ldrb	r1, [r3, r2]
 801ae9a:	687a      	ldr	r2, [r7, #4]
 801ae9c:	23a7      	movs	r3, #167	@ 0xa7
 801ae9e:	009b      	lsls	r3, r3, #2
 801aea0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801aea2:	2300      	movs	r3, #0
}
 801aea4:	0018      	movs	r0, r3
 801aea6:	46bd      	mov	sp, r7
 801aea8:	b002      	add	sp, #8
 801aeaa:	bd80      	pop	{r7, pc}
 801aeac:	0000029d 	.word	0x0000029d

0801aeb0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b082      	sub	sp, #8
 801aeb4:	af00      	add	r7, sp, #0
 801aeb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aeb8:	687a      	ldr	r2, [r7, #4]
 801aeba:	23a7      	movs	r3, #167	@ 0xa7
 801aebc:	009b      	lsls	r3, r3, #2
 801aebe:	5cd3      	ldrb	r3, [r2, r3]
 801aec0:	2b03      	cmp	r3, #3
 801aec2:	d10e      	bne.n	801aee2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801aec4:	687a      	ldr	r2, [r7, #4]
 801aec6:	23ad      	movs	r3, #173	@ 0xad
 801aec8:	009b      	lsls	r3, r3, #2
 801aeca:	58d3      	ldr	r3, [r2, r3]
 801aecc:	69db      	ldr	r3, [r3, #28]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d007      	beq.n	801aee2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801aed2:	687a      	ldr	r2, [r7, #4]
 801aed4:	23ad      	movs	r3, #173	@ 0xad
 801aed6:	009b      	lsls	r3, r3, #2
 801aed8:	58d3      	ldr	r3, [r2, r3]
 801aeda:	69db      	ldr	r3, [r3, #28]
 801aedc:	687a      	ldr	r2, [r7, #4]
 801aede:	0010      	movs	r0, r2
 801aee0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801aee2:	2300      	movs	r3, #0
}
 801aee4:	0018      	movs	r0, r3
 801aee6:	46bd      	mov	sp, r7
 801aee8:	b002      	add	sp, #8
 801aeea:	bd80      	pop	{r7, pc}

0801aeec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b084      	sub	sp, #16
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
 801aef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801aef6:	230f      	movs	r3, #15
 801aef8:	18fb      	adds	r3, r7, r3
 801aefa:	2200      	movs	r2, #0
 801aefc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801aefe:	683b      	ldr	r3, [r7, #0]
 801af00:	781b      	ldrb	r3, [r3, #0]
 801af02:	001a      	movs	r2, r3
 801af04:	2360      	movs	r3, #96	@ 0x60
 801af06:	4013      	ands	r3, r2
 801af08:	2b40      	cmp	r3, #64	@ 0x40
 801af0a:	d004      	beq.n	801af16 <USBD_StdDevReq+0x2a>
 801af0c:	d84f      	bhi.n	801afae <USBD_StdDevReq+0xc2>
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d00b      	beq.n	801af2a <USBD_StdDevReq+0x3e>
 801af12:	2b20      	cmp	r3, #32
 801af14:	d14b      	bne.n	801afae <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801af16:	687a      	ldr	r2, [r7, #4]
 801af18:	23ad      	movs	r3, #173	@ 0xad
 801af1a:	009b      	lsls	r3, r3, #2
 801af1c:	58d3      	ldr	r3, [r2, r3]
 801af1e:	689b      	ldr	r3, [r3, #8]
 801af20:	6839      	ldr	r1, [r7, #0]
 801af22:	687a      	ldr	r2, [r7, #4]
 801af24:	0010      	movs	r0, r2
 801af26:	4798      	blx	r3
      break;
 801af28:	e048      	b.n	801afbc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801af2a:	683b      	ldr	r3, [r7, #0]
 801af2c:	785b      	ldrb	r3, [r3, #1]
 801af2e:	2b09      	cmp	r3, #9
 801af30:	d835      	bhi.n	801af9e <USBD_StdDevReq+0xb2>
 801af32:	009a      	lsls	r2, r3, #2
 801af34:	4b25      	ldr	r3, [pc, #148]	@ (801afcc <USBD_StdDevReq+0xe0>)
 801af36:	18d3      	adds	r3, r2, r3
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801af3c:	683a      	ldr	r2, [r7, #0]
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	0011      	movs	r1, r2
 801af42:	0018      	movs	r0, r3
 801af44:	f000 fa52 	bl	801b3ec <USBD_GetDescriptor>
          break;
 801af48:	e030      	b.n	801afac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801af4a:	683a      	ldr	r2, [r7, #0]
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	0011      	movs	r1, r2
 801af50:	0018      	movs	r0, r3
 801af52:	f000 fbfd 	bl	801b750 <USBD_SetAddress>
          break;
 801af56:	e029      	b.n	801afac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801af58:	683a      	ldr	r2, [r7, #0]
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	0011      	movs	r1, r2
 801af5e:	0018      	movs	r0, r3
 801af60:	f000 fc4a 	bl	801b7f8 <USBD_SetConfig>
          break;
 801af64:	e022      	b.n	801afac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801af66:	683a      	ldr	r2, [r7, #0]
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	0011      	movs	r1, r2
 801af6c:	0018      	movs	r0, r3
 801af6e:	f000 fce7 	bl	801b940 <USBD_GetConfig>
          break;
 801af72:	e01b      	b.n	801afac <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801af74:	683a      	ldr	r2, [r7, #0]
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	0011      	movs	r1, r2
 801af7a:	0018      	movs	r0, r3
 801af7c:	f000 fd1b 	bl	801b9b6 <USBD_GetStatus>
          break;
 801af80:	e014      	b.n	801afac <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801af82:	683a      	ldr	r2, [r7, #0]
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	0011      	movs	r1, r2
 801af88:	0018      	movs	r0, r3
 801af8a:	f000 fd4e 	bl	801ba2a <USBD_SetFeature>
          break;
 801af8e:	e00d      	b.n	801afac <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801af90:	683a      	ldr	r2, [r7, #0]
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	0011      	movs	r1, r2
 801af96:	0018      	movs	r0, r3
 801af98:	f000 fd5d 	bl	801ba56 <USBD_ClrFeature>
          break;
 801af9c:	e006      	b.n	801afac <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801af9e:	683a      	ldr	r2, [r7, #0]
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	0011      	movs	r1, r2
 801afa4:	0018      	movs	r0, r3
 801afa6:	f000 fdb4 	bl	801bb12 <USBD_CtlError>
          break;
 801afaa:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801afac:	e006      	b.n	801afbc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801afae:	683a      	ldr	r2, [r7, #0]
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	0011      	movs	r1, r2
 801afb4:	0018      	movs	r0, r3
 801afb6:	f000 fdac 	bl	801bb12 <USBD_CtlError>
      break;
 801afba:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801afbc:	230f      	movs	r3, #15
 801afbe:	18fb      	adds	r3, r7, r3
 801afc0:	781b      	ldrb	r3, [r3, #0]
}
 801afc2:	0018      	movs	r0, r3
 801afc4:	46bd      	mov	sp, r7
 801afc6:	b004      	add	sp, #16
 801afc8:	bd80      	pop	{r7, pc}
 801afca:	46c0      	nop			@ (mov r8, r8)
 801afcc:	080240f0 	.word	0x080240f0

0801afd0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801afd0:	b5b0      	push	{r4, r5, r7, lr}
 801afd2:	b084      	sub	sp, #16
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
 801afd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801afda:	230f      	movs	r3, #15
 801afdc:	18fb      	adds	r3, r7, r3
 801afde:	2200      	movs	r2, #0
 801afe0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801afe2:	683b      	ldr	r3, [r7, #0]
 801afe4:	781b      	ldrb	r3, [r3, #0]
 801afe6:	001a      	movs	r2, r3
 801afe8:	2360      	movs	r3, #96	@ 0x60
 801afea:	4013      	ands	r3, r2
 801afec:	2b40      	cmp	r3, #64	@ 0x40
 801afee:	d004      	beq.n	801affa <USBD_StdItfReq+0x2a>
 801aff0:	d839      	bhi.n	801b066 <USBD_StdItfReq+0x96>
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d001      	beq.n	801affa <USBD_StdItfReq+0x2a>
 801aff6:	2b20      	cmp	r3, #32
 801aff8:	d135      	bne.n	801b066 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801affa:	687a      	ldr	r2, [r7, #4]
 801affc:	23a7      	movs	r3, #167	@ 0xa7
 801affe:	009b      	lsls	r3, r3, #2
 801b000:	5cd3      	ldrb	r3, [r2, r3]
 801b002:	3b01      	subs	r3, #1
 801b004:	2b02      	cmp	r3, #2
 801b006:	d825      	bhi.n	801b054 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	889b      	ldrh	r3, [r3, #4]
 801b00c:	b2db      	uxtb	r3, r3
 801b00e:	2b01      	cmp	r3, #1
 801b010:	d819      	bhi.n	801b046 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b012:	687a      	ldr	r2, [r7, #4]
 801b014:	23ad      	movs	r3, #173	@ 0xad
 801b016:	009b      	lsls	r3, r3, #2
 801b018:	58d3      	ldr	r3, [r2, r3]
 801b01a:	689b      	ldr	r3, [r3, #8]
 801b01c:	250f      	movs	r5, #15
 801b01e:	197c      	adds	r4, r7, r5
 801b020:	6839      	ldr	r1, [r7, #0]
 801b022:	687a      	ldr	r2, [r7, #4]
 801b024:	0010      	movs	r0, r2
 801b026:	4798      	blx	r3
 801b028:	0003      	movs	r3, r0
 801b02a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b02c:	683b      	ldr	r3, [r7, #0]
 801b02e:	88db      	ldrh	r3, [r3, #6]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d116      	bne.n	801b062 <USBD_StdItfReq+0x92>
 801b034:	197b      	adds	r3, r7, r5
 801b036:	781b      	ldrb	r3, [r3, #0]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d112      	bne.n	801b062 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	0018      	movs	r0, r3
 801b040:	f000 fe4f 	bl	801bce2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b044:	e00d      	b.n	801b062 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b046:	683a      	ldr	r2, [r7, #0]
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	0011      	movs	r1, r2
 801b04c:	0018      	movs	r0, r3
 801b04e:	f000 fd60 	bl	801bb12 <USBD_CtlError>
          break;
 801b052:	e006      	b.n	801b062 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b054:	683a      	ldr	r2, [r7, #0]
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	0011      	movs	r1, r2
 801b05a:	0018      	movs	r0, r3
 801b05c:	f000 fd59 	bl	801bb12 <USBD_CtlError>
          break;
 801b060:	e000      	b.n	801b064 <USBD_StdItfReq+0x94>
          break;
 801b062:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b064:	e006      	b.n	801b074 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b066:	683a      	ldr	r2, [r7, #0]
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	0011      	movs	r1, r2
 801b06c:	0018      	movs	r0, r3
 801b06e:	f000 fd50 	bl	801bb12 <USBD_CtlError>
      break;
 801b072:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b074:	2300      	movs	r3, #0
}
 801b076:	0018      	movs	r0, r3
 801b078:	46bd      	mov	sp, r7
 801b07a:	b004      	add	sp, #16
 801b07c:	bdb0      	pop	{r4, r5, r7, pc}

0801b07e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b07e:	b5b0      	push	{r4, r5, r7, lr}
 801b080:	b084      	sub	sp, #16
 801b082:	af00      	add	r7, sp, #0
 801b084:	6078      	str	r0, [r7, #4]
 801b086:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b088:	230f      	movs	r3, #15
 801b08a:	18fb      	adds	r3, r7, r3
 801b08c:	2200      	movs	r2, #0
 801b08e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b090:	683b      	ldr	r3, [r7, #0]
 801b092:	889a      	ldrh	r2, [r3, #4]
 801b094:	230e      	movs	r3, #14
 801b096:	18fb      	adds	r3, r7, r3
 801b098:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b09a:	683b      	ldr	r3, [r7, #0]
 801b09c:	781b      	ldrb	r3, [r3, #0]
 801b09e:	001a      	movs	r2, r3
 801b0a0:	2360      	movs	r3, #96	@ 0x60
 801b0a2:	4013      	ands	r3, r2
 801b0a4:	2b40      	cmp	r3, #64	@ 0x40
 801b0a6:	d006      	beq.n	801b0b6 <USBD_StdEPReq+0x38>
 801b0a8:	d900      	bls.n	801b0ac <USBD_StdEPReq+0x2e>
 801b0aa:	e190      	b.n	801b3ce <USBD_StdEPReq+0x350>
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d00c      	beq.n	801b0ca <USBD_StdEPReq+0x4c>
 801b0b0:	2b20      	cmp	r3, #32
 801b0b2:	d000      	beq.n	801b0b6 <USBD_StdEPReq+0x38>
 801b0b4:	e18b      	b.n	801b3ce <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b0b6:	687a      	ldr	r2, [r7, #4]
 801b0b8:	23ad      	movs	r3, #173	@ 0xad
 801b0ba:	009b      	lsls	r3, r3, #2
 801b0bc:	58d3      	ldr	r3, [r2, r3]
 801b0be:	689b      	ldr	r3, [r3, #8]
 801b0c0:	6839      	ldr	r1, [r7, #0]
 801b0c2:	687a      	ldr	r2, [r7, #4]
 801b0c4:	0010      	movs	r0, r2
 801b0c6:	4798      	blx	r3
      break;
 801b0c8:	e188      	b.n	801b3dc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b0ca:	683b      	ldr	r3, [r7, #0]
 801b0cc:	781b      	ldrb	r3, [r3, #0]
 801b0ce:	001a      	movs	r2, r3
 801b0d0:	2360      	movs	r3, #96	@ 0x60
 801b0d2:	4013      	ands	r3, r2
 801b0d4:	2b20      	cmp	r3, #32
 801b0d6:	d10f      	bne.n	801b0f8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b0d8:	687a      	ldr	r2, [r7, #4]
 801b0da:	23ad      	movs	r3, #173	@ 0xad
 801b0dc:	009b      	lsls	r3, r3, #2
 801b0de:	58d3      	ldr	r3, [r2, r3]
 801b0e0:	689b      	ldr	r3, [r3, #8]
 801b0e2:	250f      	movs	r5, #15
 801b0e4:	197c      	adds	r4, r7, r5
 801b0e6:	6839      	ldr	r1, [r7, #0]
 801b0e8:	687a      	ldr	r2, [r7, #4]
 801b0ea:	0010      	movs	r0, r2
 801b0ec:	4798      	blx	r3
 801b0ee:	0003      	movs	r3, r0
 801b0f0:	7023      	strb	r3, [r4, #0]

        return ret;
 801b0f2:	197b      	adds	r3, r7, r5
 801b0f4:	781b      	ldrb	r3, [r3, #0]
 801b0f6:	e174      	b.n	801b3e2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b0f8:	683b      	ldr	r3, [r7, #0]
 801b0fa:	785b      	ldrb	r3, [r3, #1]
 801b0fc:	2b03      	cmp	r3, #3
 801b0fe:	d007      	beq.n	801b110 <USBD_StdEPReq+0x92>
 801b100:	dd00      	ble.n	801b104 <USBD_StdEPReq+0x86>
 801b102:	e15c      	b.n	801b3be <USBD_StdEPReq+0x340>
 801b104:	2b00      	cmp	r3, #0
 801b106:	d100      	bne.n	801b10a <USBD_StdEPReq+0x8c>
 801b108:	e092      	b.n	801b230 <USBD_StdEPReq+0x1b2>
 801b10a:	2b01      	cmp	r3, #1
 801b10c:	d04b      	beq.n	801b1a6 <USBD_StdEPReq+0x128>
 801b10e:	e156      	b.n	801b3be <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b110:	687a      	ldr	r2, [r7, #4]
 801b112:	23a7      	movs	r3, #167	@ 0xa7
 801b114:	009b      	lsls	r3, r3, #2
 801b116:	5cd3      	ldrb	r3, [r2, r3]
 801b118:	2b02      	cmp	r3, #2
 801b11a:	d002      	beq.n	801b122 <USBD_StdEPReq+0xa4>
 801b11c:	2b03      	cmp	r3, #3
 801b11e:	d01d      	beq.n	801b15c <USBD_StdEPReq+0xde>
 801b120:	e039      	b.n	801b196 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b122:	220e      	movs	r2, #14
 801b124:	18bb      	adds	r3, r7, r2
 801b126:	781b      	ldrb	r3, [r3, #0]
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d010      	beq.n	801b14e <USBD_StdEPReq+0xd0>
 801b12c:	18bb      	adds	r3, r7, r2
 801b12e:	781b      	ldrb	r3, [r3, #0]
 801b130:	2b80      	cmp	r3, #128	@ 0x80
 801b132:	d00c      	beq.n	801b14e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b134:	18bb      	adds	r3, r7, r2
 801b136:	781a      	ldrb	r2, [r3, #0]
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	0011      	movs	r1, r2
 801b13c:	0018      	movs	r0, r3
 801b13e:	f001 fa10 	bl	801c562 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	2180      	movs	r1, #128	@ 0x80
 801b146:	0018      	movs	r0, r3
 801b148:	f001 fa0b 	bl	801c562 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b14c:	e02a      	b.n	801b1a4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b14e:	683a      	ldr	r2, [r7, #0]
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	0011      	movs	r1, r2
 801b154:	0018      	movs	r0, r3
 801b156:	f000 fcdc 	bl	801bb12 <USBD_CtlError>
              break;
 801b15a:	e023      	b.n	801b1a4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b15c:	683b      	ldr	r3, [r7, #0]
 801b15e:	885b      	ldrh	r3, [r3, #2]
 801b160:	2b00      	cmp	r3, #0
 801b162:	d113      	bne.n	801b18c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b164:	220e      	movs	r2, #14
 801b166:	18bb      	adds	r3, r7, r2
 801b168:	781b      	ldrb	r3, [r3, #0]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d00e      	beq.n	801b18c <USBD_StdEPReq+0x10e>
 801b16e:	18bb      	adds	r3, r7, r2
 801b170:	781b      	ldrb	r3, [r3, #0]
 801b172:	2b80      	cmp	r3, #128	@ 0x80
 801b174:	d00a      	beq.n	801b18c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b176:	683b      	ldr	r3, [r7, #0]
 801b178:	88db      	ldrh	r3, [r3, #6]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d106      	bne.n	801b18c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b17e:	18bb      	adds	r3, r7, r2
 801b180:	781a      	ldrb	r2, [r3, #0]
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	0011      	movs	r1, r2
 801b186:	0018      	movs	r0, r3
 801b188:	f001 f9eb 	bl	801c562 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	0018      	movs	r0, r3
 801b190:	f000 fda7 	bl	801bce2 <USBD_CtlSendStatus>

              break;
 801b194:	e006      	b.n	801b1a4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b196:	683a      	ldr	r2, [r7, #0]
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	0011      	movs	r1, r2
 801b19c:	0018      	movs	r0, r3
 801b19e:	f000 fcb8 	bl	801bb12 <USBD_CtlError>
              break;
 801b1a2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b1a4:	e112      	b.n	801b3cc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b1a6:	687a      	ldr	r2, [r7, #4]
 801b1a8:	23a7      	movs	r3, #167	@ 0xa7
 801b1aa:	009b      	lsls	r3, r3, #2
 801b1ac:	5cd3      	ldrb	r3, [r2, r3]
 801b1ae:	2b02      	cmp	r3, #2
 801b1b0:	d002      	beq.n	801b1b8 <USBD_StdEPReq+0x13a>
 801b1b2:	2b03      	cmp	r3, #3
 801b1b4:	d01d      	beq.n	801b1f2 <USBD_StdEPReq+0x174>
 801b1b6:	e032      	b.n	801b21e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b1b8:	220e      	movs	r2, #14
 801b1ba:	18bb      	adds	r3, r7, r2
 801b1bc:	781b      	ldrb	r3, [r3, #0]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d010      	beq.n	801b1e4 <USBD_StdEPReq+0x166>
 801b1c2:	18bb      	adds	r3, r7, r2
 801b1c4:	781b      	ldrb	r3, [r3, #0]
 801b1c6:	2b80      	cmp	r3, #128	@ 0x80
 801b1c8:	d00c      	beq.n	801b1e4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b1ca:	18bb      	adds	r3, r7, r2
 801b1cc:	781a      	ldrb	r2, [r3, #0]
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	0011      	movs	r1, r2
 801b1d2:	0018      	movs	r0, r3
 801b1d4:	f001 f9c5 	bl	801c562 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	2180      	movs	r1, #128	@ 0x80
 801b1dc:	0018      	movs	r0, r3
 801b1de:	f001 f9c0 	bl	801c562 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b1e2:	e024      	b.n	801b22e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801b1e4:	683a      	ldr	r2, [r7, #0]
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	0011      	movs	r1, r2
 801b1ea:	0018      	movs	r0, r3
 801b1ec:	f000 fc91 	bl	801bb12 <USBD_CtlError>
              break;
 801b1f0:	e01d      	b.n	801b22e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	885b      	ldrh	r3, [r3, #2]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d118      	bne.n	801b22c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b1fa:	210e      	movs	r1, #14
 801b1fc:	187b      	adds	r3, r7, r1
 801b1fe:	781b      	ldrb	r3, [r3, #0]
 801b200:	227f      	movs	r2, #127	@ 0x7f
 801b202:	4013      	ands	r3, r2
 801b204:	d006      	beq.n	801b214 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801b206:	187b      	adds	r3, r7, r1
 801b208:	781a      	ldrb	r2, [r3, #0]
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	0011      	movs	r1, r2
 801b20e:	0018      	movs	r0, r3
 801b210:	f001 f9d2 	bl	801c5b8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	0018      	movs	r0, r3
 801b218:	f000 fd63 	bl	801bce2 <USBD_CtlSendStatus>
              }
              break;
 801b21c:	e006      	b.n	801b22c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801b21e:	683a      	ldr	r2, [r7, #0]
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	0011      	movs	r1, r2
 801b224:	0018      	movs	r0, r3
 801b226:	f000 fc74 	bl	801bb12 <USBD_CtlError>
              break;
 801b22a:	e000      	b.n	801b22e <USBD_StdEPReq+0x1b0>
              break;
 801b22c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b22e:	e0cd      	b.n	801b3cc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b230:	687a      	ldr	r2, [r7, #4]
 801b232:	23a7      	movs	r3, #167	@ 0xa7
 801b234:	009b      	lsls	r3, r3, #2
 801b236:	5cd3      	ldrb	r3, [r2, r3]
 801b238:	2b02      	cmp	r3, #2
 801b23a:	d002      	beq.n	801b242 <USBD_StdEPReq+0x1c4>
 801b23c:	2b03      	cmp	r3, #3
 801b23e:	d03c      	beq.n	801b2ba <USBD_StdEPReq+0x23c>
 801b240:	e0b5      	b.n	801b3ae <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b242:	220e      	movs	r2, #14
 801b244:	18bb      	adds	r3, r7, r2
 801b246:	781b      	ldrb	r3, [r3, #0]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	d00a      	beq.n	801b262 <USBD_StdEPReq+0x1e4>
 801b24c:	18bb      	adds	r3, r7, r2
 801b24e:	781b      	ldrb	r3, [r3, #0]
 801b250:	2b80      	cmp	r3, #128	@ 0x80
 801b252:	d006      	beq.n	801b262 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801b254:	683a      	ldr	r2, [r7, #0]
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	0011      	movs	r1, r2
 801b25a:	0018      	movs	r0, r3
 801b25c:	f000 fc59 	bl	801bb12 <USBD_CtlError>
                break;
 801b260:	e0ac      	b.n	801b3bc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b262:	220e      	movs	r2, #14
 801b264:	18bb      	adds	r3, r7, r2
 801b266:	781b      	ldrb	r3, [r3, #0]
 801b268:	b25b      	sxtb	r3, r3
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	da0c      	bge.n	801b288 <USBD_StdEPReq+0x20a>
 801b26e:	18bb      	adds	r3, r7, r2
 801b270:	781b      	ldrb	r3, [r3, #0]
 801b272:	227f      	movs	r2, #127	@ 0x7f
 801b274:	401a      	ands	r2, r3
 801b276:	0013      	movs	r3, r2
 801b278:	009b      	lsls	r3, r3, #2
 801b27a:	189b      	adds	r3, r3, r2
 801b27c:	009b      	lsls	r3, r3, #2
 801b27e:	3310      	adds	r3, #16
 801b280:	687a      	ldr	r2, [r7, #4]
 801b282:	18d3      	adds	r3, r2, r3
 801b284:	3304      	adds	r3, #4
 801b286:	e00d      	b.n	801b2a4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b288:	230e      	movs	r3, #14
 801b28a:	18fb      	adds	r3, r7, r3
 801b28c:	781b      	ldrb	r3, [r3, #0]
 801b28e:	227f      	movs	r2, #127	@ 0x7f
 801b290:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b292:	0013      	movs	r3, r2
 801b294:	009b      	lsls	r3, r3, #2
 801b296:	189b      	adds	r3, r3, r2
 801b298:	009b      	lsls	r3, r3, #2
 801b29a:	3351      	adds	r3, #81	@ 0x51
 801b29c:	33ff      	adds	r3, #255	@ 0xff
 801b29e:	687a      	ldr	r2, [r7, #4]
 801b2a0:	18d3      	adds	r3, r2, r3
 801b2a2:	3304      	adds	r3, #4
 801b2a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b2a6:	68bb      	ldr	r3, [r7, #8]
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b2ac:	68b9      	ldr	r1, [r7, #8]
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2202      	movs	r2, #2
 801b2b2:	0018      	movs	r0, r3
 801b2b4:	f000 fcab 	bl	801bc0e <USBD_CtlSendData>
              break;
 801b2b8:	e080      	b.n	801b3bc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b2ba:	220e      	movs	r2, #14
 801b2bc:	18bb      	adds	r3, r7, r2
 801b2be:	781b      	ldrb	r3, [r3, #0]
 801b2c0:	b25b      	sxtb	r3, r3
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	da14      	bge.n	801b2f0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b2c6:	18bb      	adds	r3, r7, r2
 801b2c8:	781b      	ldrb	r3, [r3, #0]
 801b2ca:	220f      	movs	r2, #15
 801b2cc:	401a      	ands	r2, r3
 801b2ce:	6879      	ldr	r1, [r7, #4]
 801b2d0:	0013      	movs	r3, r2
 801b2d2:	009b      	lsls	r3, r3, #2
 801b2d4:	189b      	adds	r3, r3, r2
 801b2d6:	009b      	lsls	r3, r3, #2
 801b2d8:	18cb      	adds	r3, r1, r3
 801b2da:	3318      	adds	r3, #24
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d11e      	bne.n	801b320 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b2e2:	683a      	ldr	r2, [r7, #0]
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	0011      	movs	r1, r2
 801b2e8:	0018      	movs	r0, r3
 801b2ea:	f000 fc12 	bl	801bb12 <USBD_CtlError>
                  break;
 801b2ee:	e065      	b.n	801b3bc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b2f0:	230e      	movs	r3, #14
 801b2f2:	18fb      	adds	r3, r7, r3
 801b2f4:	781b      	ldrb	r3, [r3, #0]
 801b2f6:	220f      	movs	r2, #15
 801b2f8:	401a      	ands	r2, r3
 801b2fa:	6878      	ldr	r0, [r7, #4]
 801b2fc:	23ac      	movs	r3, #172	@ 0xac
 801b2fe:	0059      	lsls	r1, r3, #1
 801b300:	0013      	movs	r3, r2
 801b302:	009b      	lsls	r3, r3, #2
 801b304:	189b      	adds	r3, r3, r2
 801b306:	009b      	lsls	r3, r3, #2
 801b308:	18c3      	adds	r3, r0, r3
 801b30a:	185b      	adds	r3, r3, r1
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d106      	bne.n	801b320 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b312:	683a      	ldr	r2, [r7, #0]
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	0011      	movs	r1, r2
 801b318:	0018      	movs	r0, r3
 801b31a:	f000 fbfa 	bl	801bb12 <USBD_CtlError>
                  break;
 801b31e:	e04d      	b.n	801b3bc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b320:	220e      	movs	r2, #14
 801b322:	18bb      	adds	r3, r7, r2
 801b324:	781b      	ldrb	r3, [r3, #0]
 801b326:	b25b      	sxtb	r3, r3
 801b328:	2b00      	cmp	r3, #0
 801b32a:	da0c      	bge.n	801b346 <USBD_StdEPReq+0x2c8>
 801b32c:	18bb      	adds	r3, r7, r2
 801b32e:	781b      	ldrb	r3, [r3, #0]
 801b330:	227f      	movs	r2, #127	@ 0x7f
 801b332:	401a      	ands	r2, r3
 801b334:	0013      	movs	r3, r2
 801b336:	009b      	lsls	r3, r3, #2
 801b338:	189b      	adds	r3, r3, r2
 801b33a:	009b      	lsls	r3, r3, #2
 801b33c:	3310      	adds	r3, #16
 801b33e:	687a      	ldr	r2, [r7, #4]
 801b340:	18d3      	adds	r3, r2, r3
 801b342:	3304      	adds	r3, #4
 801b344:	e00d      	b.n	801b362 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b346:	230e      	movs	r3, #14
 801b348:	18fb      	adds	r3, r7, r3
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	227f      	movs	r2, #127	@ 0x7f
 801b34e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b350:	0013      	movs	r3, r2
 801b352:	009b      	lsls	r3, r3, #2
 801b354:	189b      	adds	r3, r3, r2
 801b356:	009b      	lsls	r3, r3, #2
 801b358:	3351      	adds	r3, #81	@ 0x51
 801b35a:	33ff      	adds	r3, #255	@ 0xff
 801b35c:	687a      	ldr	r2, [r7, #4]
 801b35e:	18d3      	adds	r3, r2, r3
 801b360:	3304      	adds	r3, #4
 801b362:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b364:	220e      	movs	r2, #14
 801b366:	18bb      	adds	r3, r7, r2
 801b368:	781b      	ldrb	r3, [r3, #0]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d003      	beq.n	801b376 <USBD_StdEPReq+0x2f8>
 801b36e:	18bb      	adds	r3, r7, r2
 801b370:	781b      	ldrb	r3, [r3, #0]
 801b372:	2b80      	cmp	r3, #128	@ 0x80
 801b374:	d103      	bne.n	801b37e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801b376:	68bb      	ldr	r3, [r7, #8]
 801b378:	2200      	movs	r2, #0
 801b37a:	601a      	str	r2, [r3, #0]
 801b37c:	e010      	b.n	801b3a0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b37e:	230e      	movs	r3, #14
 801b380:	18fb      	adds	r3, r7, r3
 801b382:	781a      	ldrb	r2, [r3, #0]
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	0011      	movs	r1, r2
 801b388:	0018      	movs	r0, r3
 801b38a:	f001 f940 	bl	801c60e <USBD_LL_IsStallEP>
 801b38e:	1e03      	subs	r3, r0, #0
 801b390:	d003      	beq.n	801b39a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b392:	68bb      	ldr	r3, [r7, #8]
 801b394:	2201      	movs	r2, #1
 801b396:	601a      	str	r2, [r3, #0]
 801b398:	e002      	b.n	801b3a0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	2200      	movs	r2, #0
 801b39e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b3a0:	68b9      	ldr	r1, [r7, #8]
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	2202      	movs	r2, #2
 801b3a6:	0018      	movs	r0, r3
 801b3a8:	f000 fc31 	bl	801bc0e <USBD_CtlSendData>
              break;
 801b3ac:	e006      	b.n	801b3bc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b3ae:	683a      	ldr	r2, [r7, #0]
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	0011      	movs	r1, r2
 801b3b4:	0018      	movs	r0, r3
 801b3b6:	f000 fbac 	bl	801bb12 <USBD_CtlError>
              break;
 801b3ba:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b3bc:	e006      	b.n	801b3cc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b3be:	683a      	ldr	r2, [r7, #0]
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	0011      	movs	r1, r2
 801b3c4:	0018      	movs	r0, r3
 801b3c6:	f000 fba4 	bl	801bb12 <USBD_CtlError>
          break;
 801b3ca:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b3cc:	e006      	b.n	801b3dc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b3ce:	683a      	ldr	r2, [r7, #0]
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	0011      	movs	r1, r2
 801b3d4:	0018      	movs	r0, r3
 801b3d6:	f000 fb9c 	bl	801bb12 <USBD_CtlError>
      break;
 801b3da:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b3dc:	230f      	movs	r3, #15
 801b3de:	18fb      	adds	r3, r7, r3
 801b3e0:	781b      	ldrb	r3, [r3, #0]
}
 801b3e2:	0018      	movs	r0, r3
 801b3e4:	46bd      	mov	sp, r7
 801b3e6:	b004      	add	sp, #16
 801b3e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b3ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b084      	sub	sp, #16
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
 801b3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b3f6:	2308      	movs	r3, #8
 801b3f8:	18fb      	adds	r3, r7, r3
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b3fe:	2300      	movs	r3, #0
 801b400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b402:	230b      	movs	r3, #11
 801b404:	18fb      	adds	r3, r7, r3
 801b406:	2200      	movs	r2, #0
 801b408:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b40a:	683b      	ldr	r3, [r7, #0]
 801b40c:	885b      	ldrh	r3, [r3, #2]
 801b40e:	0a1b      	lsrs	r3, r3, #8
 801b410:	b29b      	uxth	r3, r3
 801b412:	2b07      	cmp	r3, #7
 801b414:	d900      	bls.n	801b418 <USBD_GetDescriptor+0x2c>
 801b416:	e159      	b.n	801b6cc <USBD_GetDescriptor+0x2e0>
 801b418:	009a      	lsls	r2, r3, #2
 801b41a:	4bcb      	ldr	r3, [pc, #812]	@ (801b748 <USBD_GetDescriptor+0x35c>)
 801b41c:	18d3      	adds	r3, r2, r3
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b422:	687a      	ldr	r2, [r7, #4]
 801b424:	23ac      	movs	r3, #172	@ 0xac
 801b426:	009b      	lsls	r3, r3, #2
 801b428:	58d3      	ldr	r3, [r2, r3]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	687a      	ldr	r2, [r7, #4]
 801b42e:	7c12      	ldrb	r2, [r2, #16]
 801b430:	2108      	movs	r1, #8
 801b432:	1879      	adds	r1, r7, r1
 801b434:	0010      	movs	r0, r2
 801b436:	4798      	blx	r3
 801b438:	0003      	movs	r3, r0
 801b43a:	60fb      	str	r3, [r7, #12]
      break;
 801b43c:	e153      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	7c1b      	ldrb	r3, [r3, #16]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d10f      	bne.n	801b466 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b446:	687a      	ldr	r2, [r7, #4]
 801b448:	23ad      	movs	r3, #173	@ 0xad
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	58d3      	ldr	r3, [r2, r3]
 801b44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b450:	2208      	movs	r2, #8
 801b452:	18ba      	adds	r2, r7, r2
 801b454:	0010      	movs	r0, r2
 801b456:	4798      	blx	r3
 801b458:	0003      	movs	r3, r0
 801b45a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	3301      	adds	r3, #1
 801b460:	2202      	movs	r2, #2
 801b462:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b464:	e13f      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b466:	687a      	ldr	r2, [r7, #4]
 801b468:	23ad      	movs	r3, #173	@ 0xad
 801b46a:	009b      	lsls	r3, r3, #2
 801b46c:	58d3      	ldr	r3, [r2, r3]
 801b46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b470:	2208      	movs	r2, #8
 801b472:	18ba      	adds	r2, r7, r2
 801b474:	0010      	movs	r0, r2
 801b476:	4798      	blx	r3
 801b478:	0003      	movs	r3, r0
 801b47a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	3301      	adds	r3, #1
 801b480:	2202      	movs	r2, #2
 801b482:	701a      	strb	r2, [r3, #0]
      break;
 801b484:	e12f      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b486:	683b      	ldr	r3, [r7, #0]
 801b488:	885b      	ldrh	r3, [r3, #2]
 801b48a:	b2db      	uxtb	r3, r3
 801b48c:	2b05      	cmp	r3, #5
 801b48e:	d900      	bls.n	801b492 <USBD_GetDescriptor+0xa6>
 801b490:	e0d0      	b.n	801b634 <USBD_GetDescriptor+0x248>
 801b492:	009a      	lsls	r2, r3, #2
 801b494:	4bad      	ldr	r3, [pc, #692]	@ (801b74c <USBD_GetDescriptor+0x360>)
 801b496:	18d3      	adds	r3, r2, r3
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b49c:	687a      	ldr	r2, [r7, #4]
 801b49e:	23ac      	movs	r3, #172	@ 0xac
 801b4a0:	009b      	lsls	r3, r3, #2
 801b4a2:	58d3      	ldr	r3, [r2, r3]
 801b4a4:	685b      	ldr	r3, [r3, #4]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d00d      	beq.n	801b4c6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b4aa:	687a      	ldr	r2, [r7, #4]
 801b4ac:	23ac      	movs	r3, #172	@ 0xac
 801b4ae:	009b      	lsls	r3, r3, #2
 801b4b0:	58d3      	ldr	r3, [r2, r3]
 801b4b2:	685b      	ldr	r3, [r3, #4]
 801b4b4:	687a      	ldr	r2, [r7, #4]
 801b4b6:	7c12      	ldrb	r2, [r2, #16]
 801b4b8:	2108      	movs	r1, #8
 801b4ba:	1879      	adds	r1, r7, r1
 801b4bc:	0010      	movs	r0, r2
 801b4be:	4798      	blx	r3
 801b4c0:	0003      	movs	r3, r0
 801b4c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b4c4:	e0c3      	b.n	801b64e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b4c6:	683a      	ldr	r2, [r7, #0]
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	0011      	movs	r1, r2
 801b4cc:	0018      	movs	r0, r3
 801b4ce:	f000 fb20 	bl	801bb12 <USBD_CtlError>
            err++;
 801b4d2:	210b      	movs	r1, #11
 801b4d4:	187b      	adds	r3, r7, r1
 801b4d6:	781a      	ldrb	r2, [r3, #0]
 801b4d8:	187b      	adds	r3, r7, r1
 801b4da:	3201      	adds	r2, #1
 801b4dc:	701a      	strb	r2, [r3, #0]
          break;
 801b4de:	e0b6      	b.n	801b64e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b4e0:	687a      	ldr	r2, [r7, #4]
 801b4e2:	23ac      	movs	r3, #172	@ 0xac
 801b4e4:	009b      	lsls	r3, r3, #2
 801b4e6:	58d3      	ldr	r3, [r2, r3]
 801b4e8:	689b      	ldr	r3, [r3, #8]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d00d      	beq.n	801b50a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b4ee:	687a      	ldr	r2, [r7, #4]
 801b4f0:	23ac      	movs	r3, #172	@ 0xac
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	58d3      	ldr	r3, [r2, r3]
 801b4f6:	689b      	ldr	r3, [r3, #8]
 801b4f8:	687a      	ldr	r2, [r7, #4]
 801b4fa:	7c12      	ldrb	r2, [r2, #16]
 801b4fc:	2108      	movs	r1, #8
 801b4fe:	1879      	adds	r1, r7, r1
 801b500:	0010      	movs	r0, r2
 801b502:	4798      	blx	r3
 801b504:	0003      	movs	r3, r0
 801b506:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b508:	e0a1      	b.n	801b64e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b50a:	683a      	ldr	r2, [r7, #0]
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	0011      	movs	r1, r2
 801b510:	0018      	movs	r0, r3
 801b512:	f000 fafe 	bl	801bb12 <USBD_CtlError>
            err++;
 801b516:	210b      	movs	r1, #11
 801b518:	187b      	adds	r3, r7, r1
 801b51a:	781a      	ldrb	r2, [r3, #0]
 801b51c:	187b      	adds	r3, r7, r1
 801b51e:	3201      	adds	r2, #1
 801b520:	701a      	strb	r2, [r3, #0]
          break;
 801b522:	e094      	b.n	801b64e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b524:	687a      	ldr	r2, [r7, #4]
 801b526:	23ac      	movs	r3, #172	@ 0xac
 801b528:	009b      	lsls	r3, r3, #2
 801b52a:	58d3      	ldr	r3, [r2, r3]
 801b52c:	68db      	ldr	r3, [r3, #12]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d00d      	beq.n	801b54e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b532:	687a      	ldr	r2, [r7, #4]
 801b534:	23ac      	movs	r3, #172	@ 0xac
 801b536:	009b      	lsls	r3, r3, #2
 801b538:	58d3      	ldr	r3, [r2, r3]
 801b53a:	68db      	ldr	r3, [r3, #12]
 801b53c:	687a      	ldr	r2, [r7, #4]
 801b53e:	7c12      	ldrb	r2, [r2, #16]
 801b540:	2108      	movs	r1, #8
 801b542:	1879      	adds	r1, r7, r1
 801b544:	0010      	movs	r0, r2
 801b546:	4798      	blx	r3
 801b548:	0003      	movs	r3, r0
 801b54a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b54c:	e07f      	b.n	801b64e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b54e:	683a      	ldr	r2, [r7, #0]
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	0011      	movs	r1, r2
 801b554:	0018      	movs	r0, r3
 801b556:	f000 fadc 	bl	801bb12 <USBD_CtlError>
            err++;
 801b55a:	210b      	movs	r1, #11
 801b55c:	187b      	adds	r3, r7, r1
 801b55e:	781a      	ldrb	r2, [r3, #0]
 801b560:	187b      	adds	r3, r7, r1
 801b562:	3201      	adds	r2, #1
 801b564:	701a      	strb	r2, [r3, #0]
          break;
 801b566:	e072      	b.n	801b64e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b568:	687a      	ldr	r2, [r7, #4]
 801b56a:	23ac      	movs	r3, #172	@ 0xac
 801b56c:	009b      	lsls	r3, r3, #2
 801b56e:	58d3      	ldr	r3, [r2, r3]
 801b570:	691b      	ldr	r3, [r3, #16]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d00d      	beq.n	801b592 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b576:	687a      	ldr	r2, [r7, #4]
 801b578:	23ac      	movs	r3, #172	@ 0xac
 801b57a:	009b      	lsls	r3, r3, #2
 801b57c:	58d3      	ldr	r3, [r2, r3]
 801b57e:	691b      	ldr	r3, [r3, #16]
 801b580:	687a      	ldr	r2, [r7, #4]
 801b582:	7c12      	ldrb	r2, [r2, #16]
 801b584:	2108      	movs	r1, #8
 801b586:	1879      	adds	r1, r7, r1
 801b588:	0010      	movs	r0, r2
 801b58a:	4798      	blx	r3
 801b58c:	0003      	movs	r3, r0
 801b58e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b590:	e05d      	b.n	801b64e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b592:	683a      	ldr	r2, [r7, #0]
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	0011      	movs	r1, r2
 801b598:	0018      	movs	r0, r3
 801b59a:	f000 faba 	bl	801bb12 <USBD_CtlError>
            err++;
 801b59e:	210b      	movs	r1, #11
 801b5a0:	187b      	adds	r3, r7, r1
 801b5a2:	781a      	ldrb	r2, [r3, #0]
 801b5a4:	187b      	adds	r3, r7, r1
 801b5a6:	3201      	adds	r2, #1
 801b5a8:	701a      	strb	r2, [r3, #0]
          break;
 801b5aa:	e050      	b.n	801b64e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801b5ac:	687a      	ldr	r2, [r7, #4]
 801b5ae:	23ac      	movs	r3, #172	@ 0xac
 801b5b0:	009b      	lsls	r3, r3, #2
 801b5b2:	58d3      	ldr	r3, [r2, r3]
 801b5b4:	695b      	ldr	r3, [r3, #20]
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d00d      	beq.n	801b5d6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801b5ba:	687a      	ldr	r2, [r7, #4]
 801b5bc:	23ac      	movs	r3, #172	@ 0xac
 801b5be:	009b      	lsls	r3, r3, #2
 801b5c0:	58d3      	ldr	r3, [r2, r3]
 801b5c2:	695b      	ldr	r3, [r3, #20]
 801b5c4:	687a      	ldr	r2, [r7, #4]
 801b5c6:	7c12      	ldrb	r2, [r2, #16]
 801b5c8:	2108      	movs	r1, #8
 801b5ca:	1879      	adds	r1, r7, r1
 801b5cc:	0010      	movs	r0, r2
 801b5ce:	4798      	blx	r3
 801b5d0:	0003      	movs	r3, r0
 801b5d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b5d4:	e03b      	b.n	801b64e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b5d6:	683a      	ldr	r2, [r7, #0]
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	0011      	movs	r1, r2
 801b5dc:	0018      	movs	r0, r3
 801b5de:	f000 fa98 	bl	801bb12 <USBD_CtlError>
            err++;
 801b5e2:	210b      	movs	r1, #11
 801b5e4:	187b      	adds	r3, r7, r1
 801b5e6:	781a      	ldrb	r2, [r3, #0]
 801b5e8:	187b      	adds	r3, r7, r1
 801b5ea:	3201      	adds	r2, #1
 801b5ec:	701a      	strb	r2, [r3, #0]
          break;
 801b5ee:	e02e      	b.n	801b64e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801b5f0:	687a      	ldr	r2, [r7, #4]
 801b5f2:	23ac      	movs	r3, #172	@ 0xac
 801b5f4:	009b      	lsls	r3, r3, #2
 801b5f6:	58d3      	ldr	r3, [r2, r3]
 801b5f8:	699b      	ldr	r3, [r3, #24]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d00d      	beq.n	801b61a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801b5fe:	687a      	ldr	r2, [r7, #4]
 801b600:	23ac      	movs	r3, #172	@ 0xac
 801b602:	009b      	lsls	r3, r3, #2
 801b604:	58d3      	ldr	r3, [r2, r3]
 801b606:	699b      	ldr	r3, [r3, #24]
 801b608:	687a      	ldr	r2, [r7, #4]
 801b60a:	7c12      	ldrb	r2, [r2, #16]
 801b60c:	2108      	movs	r1, #8
 801b60e:	1879      	adds	r1, r7, r1
 801b610:	0010      	movs	r0, r2
 801b612:	4798      	blx	r3
 801b614:	0003      	movs	r3, r0
 801b616:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b618:	e019      	b.n	801b64e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b61a:	683a      	ldr	r2, [r7, #0]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	0011      	movs	r1, r2
 801b620:	0018      	movs	r0, r3
 801b622:	f000 fa76 	bl	801bb12 <USBD_CtlError>
            err++;
 801b626:	210b      	movs	r1, #11
 801b628:	187b      	adds	r3, r7, r1
 801b62a:	781a      	ldrb	r2, [r3, #0]
 801b62c:	187b      	adds	r3, r7, r1
 801b62e:	3201      	adds	r2, #1
 801b630:	701a      	strb	r2, [r3, #0]
          break;
 801b632:	e00c      	b.n	801b64e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801b634:	683a      	ldr	r2, [r7, #0]
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	0011      	movs	r1, r2
 801b63a:	0018      	movs	r0, r3
 801b63c:	f000 fa69 	bl	801bb12 <USBD_CtlError>
          err++;
 801b640:	210b      	movs	r1, #11
 801b642:	187b      	adds	r3, r7, r1
 801b644:	781a      	ldrb	r2, [r3, #0]
 801b646:	187b      	adds	r3, r7, r1
 801b648:	3201      	adds	r2, #1
 801b64a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801b64c:	e04b      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>
 801b64e:	e04a      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	7c1b      	ldrb	r3, [r3, #16]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d10b      	bne.n	801b670 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801b658:	687a      	ldr	r2, [r7, #4]
 801b65a:	23ad      	movs	r3, #173	@ 0xad
 801b65c:	009b      	lsls	r3, r3, #2
 801b65e:	58d3      	ldr	r3, [r2, r3]
 801b660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b662:	2208      	movs	r2, #8
 801b664:	18ba      	adds	r2, r7, r2
 801b666:	0010      	movs	r0, r2
 801b668:	4798      	blx	r3
 801b66a:	0003      	movs	r3, r0
 801b66c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b66e:	e03a      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b670:	683a      	ldr	r2, [r7, #0]
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	0011      	movs	r1, r2
 801b676:	0018      	movs	r0, r3
 801b678:	f000 fa4b 	bl	801bb12 <USBD_CtlError>
        err++;
 801b67c:	210b      	movs	r1, #11
 801b67e:	187b      	adds	r3, r7, r1
 801b680:	781a      	ldrb	r2, [r3, #0]
 801b682:	187b      	adds	r3, r7, r1
 801b684:	3201      	adds	r2, #1
 801b686:	701a      	strb	r2, [r3, #0]
      break;
 801b688:	e02d      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	7c1b      	ldrb	r3, [r3, #16]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d10f      	bne.n	801b6b2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801b692:	687a      	ldr	r2, [r7, #4]
 801b694:	23ad      	movs	r3, #173	@ 0xad
 801b696:	009b      	lsls	r3, r3, #2
 801b698:	58d3      	ldr	r3, [r2, r3]
 801b69a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b69c:	2208      	movs	r2, #8
 801b69e:	18ba      	adds	r2, r7, r2
 801b6a0:	0010      	movs	r0, r2
 801b6a2:	4798      	blx	r3
 801b6a4:	0003      	movs	r3, r0
 801b6a6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	3301      	adds	r3, #1
 801b6ac:	2207      	movs	r2, #7
 801b6ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b6b0:	e019      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b6b2:	683a      	ldr	r2, [r7, #0]
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	0011      	movs	r1, r2
 801b6b8:	0018      	movs	r0, r3
 801b6ba:	f000 fa2a 	bl	801bb12 <USBD_CtlError>
        err++;
 801b6be:	210b      	movs	r1, #11
 801b6c0:	187b      	adds	r3, r7, r1
 801b6c2:	781a      	ldrb	r2, [r3, #0]
 801b6c4:	187b      	adds	r3, r7, r1
 801b6c6:	3201      	adds	r2, #1
 801b6c8:	701a      	strb	r2, [r3, #0]
      break;
 801b6ca:	e00c      	b.n	801b6e6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801b6cc:	683a      	ldr	r2, [r7, #0]
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	0011      	movs	r1, r2
 801b6d2:	0018      	movs	r0, r3
 801b6d4:	f000 fa1d 	bl	801bb12 <USBD_CtlError>
      err++;
 801b6d8:	210b      	movs	r1, #11
 801b6da:	187b      	adds	r3, r7, r1
 801b6dc:	781a      	ldrb	r2, [r3, #0]
 801b6de:	187b      	adds	r3, r7, r1
 801b6e0:	3201      	adds	r2, #1
 801b6e2:	701a      	strb	r2, [r3, #0]
      break;
 801b6e4:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801b6e6:	230b      	movs	r3, #11
 801b6e8:	18fb      	adds	r3, r7, r3
 801b6ea:	781b      	ldrb	r3, [r3, #0]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	d127      	bne.n	801b740 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801b6f0:	2108      	movs	r1, #8
 801b6f2:	187b      	adds	r3, r7, r1
 801b6f4:	881b      	ldrh	r3, [r3, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d019      	beq.n	801b72e <USBD_GetDescriptor+0x342>
 801b6fa:	683b      	ldr	r3, [r7, #0]
 801b6fc:	88db      	ldrh	r3, [r3, #6]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d015      	beq.n	801b72e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801b702:	683b      	ldr	r3, [r7, #0]
 801b704:	88da      	ldrh	r2, [r3, #6]
 801b706:	187b      	adds	r3, r7, r1
 801b708:	881b      	ldrh	r3, [r3, #0]
 801b70a:	1c18      	adds	r0, r3, #0
 801b70c:	1c11      	adds	r1, r2, #0
 801b70e:	b28a      	uxth	r2, r1
 801b710:	b283      	uxth	r3, r0
 801b712:	429a      	cmp	r2, r3
 801b714:	d900      	bls.n	801b718 <USBD_GetDescriptor+0x32c>
 801b716:	1c01      	adds	r1, r0, #0
 801b718:	b28a      	uxth	r2, r1
 801b71a:	2108      	movs	r1, #8
 801b71c:	187b      	adds	r3, r7, r1
 801b71e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801b720:	187b      	adds	r3, r7, r1
 801b722:	881a      	ldrh	r2, [r3, #0]
 801b724:	68f9      	ldr	r1, [r7, #12]
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	0018      	movs	r0, r3
 801b72a:	f000 fa70 	bl	801bc0e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801b72e:	683b      	ldr	r3, [r7, #0]
 801b730:	88db      	ldrh	r3, [r3, #6]
 801b732:	2b00      	cmp	r3, #0
 801b734:	d105      	bne.n	801b742 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	0018      	movs	r0, r3
 801b73a:	f000 fad2 	bl	801bce2 <USBD_CtlSendStatus>
 801b73e:	e000      	b.n	801b742 <USBD_GetDescriptor+0x356>
    return;
 801b740:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b742:	46bd      	mov	sp, r7
 801b744:	b004      	add	sp, #16
 801b746:	bd80      	pop	{r7, pc}
 801b748:	08024118 	.word	0x08024118
 801b74c:	08024138 	.word	0x08024138

0801b750 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b750:	b590      	push	{r4, r7, lr}
 801b752:	b085      	sub	sp, #20
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
 801b758:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801b75a:	683b      	ldr	r3, [r7, #0]
 801b75c:	889b      	ldrh	r3, [r3, #4]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d13d      	bne.n	801b7de <USBD_SetAddress+0x8e>
 801b762:	683b      	ldr	r3, [r7, #0]
 801b764:	88db      	ldrh	r3, [r3, #6]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d139      	bne.n	801b7de <USBD_SetAddress+0x8e>
 801b76a:	683b      	ldr	r3, [r7, #0]
 801b76c:	885b      	ldrh	r3, [r3, #2]
 801b76e:	2b7f      	cmp	r3, #127	@ 0x7f
 801b770:	d835      	bhi.n	801b7de <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801b772:	683b      	ldr	r3, [r7, #0]
 801b774:	885b      	ldrh	r3, [r3, #2]
 801b776:	b2da      	uxtb	r2, r3
 801b778:	230f      	movs	r3, #15
 801b77a:	18fb      	adds	r3, r7, r3
 801b77c:	217f      	movs	r1, #127	@ 0x7f
 801b77e:	400a      	ands	r2, r1
 801b780:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b782:	687a      	ldr	r2, [r7, #4]
 801b784:	23a7      	movs	r3, #167	@ 0xa7
 801b786:	009b      	lsls	r3, r3, #2
 801b788:	5cd3      	ldrb	r3, [r2, r3]
 801b78a:	2b03      	cmp	r3, #3
 801b78c:	d106      	bne.n	801b79c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801b78e:	683a      	ldr	r2, [r7, #0]
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	0011      	movs	r1, r2
 801b794:	0018      	movs	r0, r3
 801b796:	f000 f9bc 	bl	801bb12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b79a:	e027      	b.n	801b7ec <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	240f      	movs	r4, #15
 801b7a0:	193a      	adds	r2, r7, r4
 801b7a2:	4914      	ldr	r1, [pc, #80]	@ (801b7f4 <USBD_SetAddress+0xa4>)
 801b7a4:	7812      	ldrb	r2, [r2, #0]
 801b7a6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801b7a8:	193b      	adds	r3, r7, r4
 801b7aa:	781a      	ldrb	r2, [r3, #0]
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	0011      	movs	r1, r2
 801b7b0:	0018      	movs	r0, r3
 801b7b2:	f000 ff5d 	bl	801c670 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	0018      	movs	r0, r3
 801b7ba:	f000 fa92 	bl	801bce2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801b7be:	193b      	adds	r3, r7, r4
 801b7c0:	781b      	ldrb	r3, [r3, #0]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d005      	beq.n	801b7d2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801b7c6:	687a      	ldr	r2, [r7, #4]
 801b7c8:	23a7      	movs	r3, #167	@ 0xa7
 801b7ca:	009b      	lsls	r3, r3, #2
 801b7cc:	2102      	movs	r1, #2
 801b7ce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b7d0:	e00c      	b.n	801b7ec <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801b7d2:	687a      	ldr	r2, [r7, #4]
 801b7d4:	23a7      	movs	r3, #167	@ 0xa7
 801b7d6:	009b      	lsls	r3, r3, #2
 801b7d8:	2101      	movs	r1, #1
 801b7da:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b7dc:	e006      	b.n	801b7ec <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801b7de:	683a      	ldr	r2, [r7, #0]
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	0011      	movs	r1, r2
 801b7e4:	0018      	movs	r0, r3
 801b7e6:	f000 f994 	bl	801bb12 <USBD_CtlError>
  }
}
 801b7ea:	46c0      	nop			@ (mov r8, r8)
 801b7ec:	46c0      	nop			@ (mov r8, r8)
 801b7ee:	46bd      	mov	sp, r7
 801b7f0:	b005      	add	sp, #20
 801b7f2:	bd90      	pop	{r4, r7, pc}
 801b7f4:	0000029e 	.word	0x0000029e

0801b7f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b7f8:	b580      	push	{r7, lr}
 801b7fa:	b082      	sub	sp, #8
 801b7fc:	af00      	add	r7, sp, #0
 801b7fe:	6078      	str	r0, [r7, #4]
 801b800:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801b802:	683b      	ldr	r3, [r7, #0]
 801b804:	885b      	ldrh	r3, [r3, #2]
 801b806:	b2da      	uxtb	r2, r3
 801b808:	4b4c      	ldr	r3, [pc, #304]	@ (801b93c <USBD_SetConfig+0x144>)
 801b80a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801b80c:	4b4b      	ldr	r3, [pc, #300]	@ (801b93c <USBD_SetConfig+0x144>)
 801b80e:	781b      	ldrb	r3, [r3, #0]
 801b810:	2b01      	cmp	r3, #1
 801b812:	d906      	bls.n	801b822 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801b814:	683a      	ldr	r2, [r7, #0]
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	0011      	movs	r1, r2
 801b81a:	0018      	movs	r0, r3
 801b81c:	f000 f979 	bl	801bb12 <USBD_CtlError>
 801b820:	e088      	b.n	801b934 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801b822:	687a      	ldr	r2, [r7, #4]
 801b824:	23a7      	movs	r3, #167	@ 0xa7
 801b826:	009b      	lsls	r3, r3, #2
 801b828:	5cd3      	ldrb	r3, [r2, r3]
 801b82a:	2b02      	cmp	r3, #2
 801b82c:	d002      	beq.n	801b834 <USBD_SetConfig+0x3c>
 801b82e:	2b03      	cmp	r3, #3
 801b830:	d029      	beq.n	801b886 <USBD_SetConfig+0x8e>
 801b832:	e071      	b.n	801b918 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801b834:	4b41      	ldr	r3, [pc, #260]	@ (801b93c <USBD_SetConfig+0x144>)
 801b836:	781b      	ldrb	r3, [r3, #0]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d01f      	beq.n	801b87c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801b83c:	4b3f      	ldr	r3, [pc, #252]	@ (801b93c <USBD_SetConfig+0x144>)
 801b83e:	781b      	ldrb	r3, [r3, #0]
 801b840:	001a      	movs	r2, r3
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801b846:	687a      	ldr	r2, [r7, #4]
 801b848:	23a7      	movs	r3, #167	@ 0xa7
 801b84a:	009b      	lsls	r3, r3, #2
 801b84c:	2103      	movs	r1, #3
 801b84e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801b850:	4b3a      	ldr	r3, [pc, #232]	@ (801b93c <USBD_SetConfig+0x144>)
 801b852:	781a      	ldrb	r2, [r3, #0]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	0011      	movs	r1, r2
 801b858:	0018      	movs	r0, r3
 801b85a:	f7ff f8c6 	bl	801a9ea <USBD_SetClassConfig>
 801b85e:	0003      	movs	r3, r0
 801b860:	2b02      	cmp	r3, #2
 801b862:	d106      	bne.n	801b872 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801b864:	683a      	ldr	r2, [r7, #0]
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	0011      	movs	r1, r2
 801b86a:	0018      	movs	r0, r3
 801b86c:	f000 f951 	bl	801bb12 <USBD_CtlError>
            return;
 801b870:	e060      	b.n	801b934 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	0018      	movs	r0, r3
 801b876:	f000 fa34 	bl	801bce2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801b87a:	e05b      	b.n	801b934 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	0018      	movs	r0, r3
 801b880:	f000 fa2f 	bl	801bce2 <USBD_CtlSendStatus>
        break;
 801b884:	e056      	b.n	801b934 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801b886:	4b2d      	ldr	r3, [pc, #180]	@ (801b93c <USBD_SetConfig+0x144>)
 801b888:	781b      	ldrb	r3, [r3, #0]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d115      	bne.n	801b8ba <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801b88e:	687a      	ldr	r2, [r7, #4]
 801b890:	23a7      	movs	r3, #167	@ 0xa7
 801b892:	009b      	lsls	r3, r3, #2
 801b894:	2102      	movs	r1, #2
 801b896:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801b898:	4b28      	ldr	r3, [pc, #160]	@ (801b93c <USBD_SetConfig+0x144>)
 801b89a:	781b      	ldrb	r3, [r3, #0]
 801b89c:	001a      	movs	r2, r3
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801b8a2:	4b26      	ldr	r3, [pc, #152]	@ (801b93c <USBD_SetConfig+0x144>)
 801b8a4:	781a      	ldrb	r2, [r3, #0]
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	0011      	movs	r1, r2
 801b8aa:	0018      	movs	r0, r3
 801b8ac:	f7ff f8c4 	bl	801aa38 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	0018      	movs	r0, r3
 801b8b4:	f000 fa15 	bl	801bce2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801b8b8:	e03c      	b.n	801b934 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801b8ba:	4b20      	ldr	r3, [pc, #128]	@ (801b93c <USBD_SetConfig+0x144>)
 801b8bc:	781b      	ldrb	r3, [r3, #0]
 801b8be:	001a      	movs	r2, r3
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	685b      	ldr	r3, [r3, #4]
 801b8c4:	429a      	cmp	r2, r3
 801b8c6:	d022      	beq.n	801b90e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	685b      	ldr	r3, [r3, #4]
 801b8cc:	b2da      	uxtb	r2, r3
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	0011      	movs	r1, r2
 801b8d2:	0018      	movs	r0, r3
 801b8d4:	f7ff f8b0 	bl	801aa38 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801b8d8:	4b18      	ldr	r3, [pc, #96]	@ (801b93c <USBD_SetConfig+0x144>)
 801b8da:	781b      	ldrb	r3, [r3, #0]
 801b8dc:	001a      	movs	r2, r3
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801b8e2:	4b16      	ldr	r3, [pc, #88]	@ (801b93c <USBD_SetConfig+0x144>)
 801b8e4:	781a      	ldrb	r2, [r3, #0]
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	0011      	movs	r1, r2
 801b8ea:	0018      	movs	r0, r3
 801b8ec:	f7ff f87d 	bl	801a9ea <USBD_SetClassConfig>
 801b8f0:	0003      	movs	r3, r0
 801b8f2:	2b02      	cmp	r3, #2
 801b8f4:	d106      	bne.n	801b904 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801b8f6:	683a      	ldr	r2, [r7, #0]
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	0011      	movs	r1, r2
 801b8fc:	0018      	movs	r0, r3
 801b8fe:	f000 f908 	bl	801bb12 <USBD_CtlError>
            return;
 801b902:	e017      	b.n	801b934 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	0018      	movs	r0, r3
 801b908:	f000 f9eb 	bl	801bce2 <USBD_CtlSendStatus>
        break;
 801b90c:	e012      	b.n	801b934 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	0018      	movs	r0, r3
 801b912:	f000 f9e6 	bl	801bce2 <USBD_CtlSendStatus>
        break;
 801b916:	e00d      	b.n	801b934 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801b918:	683a      	ldr	r2, [r7, #0]
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	0011      	movs	r1, r2
 801b91e:	0018      	movs	r0, r3
 801b920:	f000 f8f7 	bl	801bb12 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801b924:	4b05      	ldr	r3, [pc, #20]	@ (801b93c <USBD_SetConfig+0x144>)
 801b926:	781a      	ldrb	r2, [r3, #0]
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	0011      	movs	r1, r2
 801b92c:	0018      	movs	r0, r3
 801b92e:	f7ff f883 	bl	801aa38 <USBD_ClrClassConfig>
        break;
 801b932:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b934:	46bd      	mov	sp, r7
 801b936:	b002      	add	sp, #8
 801b938:	bd80      	pop	{r7, pc}
 801b93a:	46c0      	nop			@ (mov r8, r8)
 801b93c:	20002534 	.word	0x20002534

0801b940 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b082      	sub	sp, #8
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
 801b948:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801b94a:	683b      	ldr	r3, [r7, #0]
 801b94c:	88db      	ldrh	r3, [r3, #6]
 801b94e:	2b01      	cmp	r3, #1
 801b950:	d006      	beq.n	801b960 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801b952:	683a      	ldr	r2, [r7, #0]
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	0011      	movs	r1, r2
 801b958:	0018      	movs	r0, r3
 801b95a:	f000 f8da 	bl	801bb12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801b95e:	e026      	b.n	801b9ae <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801b960:	687a      	ldr	r2, [r7, #4]
 801b962:	23a7      	movs	r3, #167	@ 0xa7
 801b964:	009b      	lsls	r3, r3, #2
 801b966:	5cd3      	ldrb	r3, [r2, r3]
 801b968:	2b02      	cmp	r3, #2
 801b96a:	dc02      	bgt.n	801b972 <USBD_GetConfig+0x32>
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	dc03      	bgt.n	801b978 <USBD_GetConfig+0x38>
 801b970:	e016      	b.n	801b9a0 <USBD_GetConfig+0x60>
 801b972:	2b03      	cmp	r3, #3
 801b974:	d00c      	beq.n	801b990 <USBD_GetConfig+0x50>
 801b976:	e013      	b.n	801b9a0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	2200      	movs	r2, #0
 801b97c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	3308      	adds	r3, #8
 801b982:	0019      	movs	r1, r3
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	2201      	movs	r2, #1
 801b988:	0018      	movs	r0, r3
 801b98a:	f000 f940 	bl	801bc0e <USBD_CtlSendData>
        break;
 801b98e:	e00e      	b.n	801b9ae <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	1d19      	adds	r1, r3, #4
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	2201      	movs	r2, #1
 801b998:	0018      	movs	r0, r3
 801b99a:	f000 f938 	bl	801bc0e <USBD_CtlSendData>
        break;
 801b99e:	e006      	b.n	801b9ae <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801b9a0:	683a      	ldr	r2, [r7, #0]
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	0011      	movs	r1, r2
 801b9a6:	0018      	movs	r0, r3
 801b9a8:	f000 f8b3 	bl	801bb12 <USBD_CtlError>
        break;
 801b9ac:	46c0      	nop			@ (mov r8, r8)
}
 801b9ae:	46c0      	nop			@ (mov r8, r8)
 801b9b0:	46bd      	mov	sp, r7
 801b9b2:	b002      	add	sp, #8
 801b9b4:	bd80      	pop	{r7, pc}

0801b9b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b9b6:	b580      	push	{r7, lr}
 801b9b8:	b082      	sub	sp, #8
 801b9ba:	af00      	add	r7, sp, #0
 801b9bc:	6078      	str	r0, [r7, #4]
 801b9be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b9c0:	687a      	ldr	r2, [r7, #4]
 801b9c2:	23a7      	movs	r3, #167	@ 0xa7
 801b9c4:	009b      	lsls	r3, r3, #2
 801b9c6:	5cd3      	ldrb	r3, [r2, r3]
 801b9c8:	3b01      	subs	r3, #1
 801b9ca:	2b02      	cmp	r3, #2
 801b9cc:	d822      	bhi.n	801ba14 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801b9ce:	683b      	ldr	r3, [r7, #0]
 801b9d0:	88db      	ldrh	r3, [r3, #6]
 801b9d2:	2b02      	cmp	r3, #2
 801b9d4:	d006      	beq.n	801b9e4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801b9d6:	683a      	ldr	r2, [r7, #0]
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	0011      	movs	r1, r2
 801b9dc:	0018      	movs	r0, r3
 801b9de:	f000 f898 	bl	801bb12 <USBD_CtlError>
        break;
 801b9e2:	e01e      	b.n	801ba22 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	2201      	movs	r2, #1
 801b9e8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801b9ea:	687a      	ldr	r2, [r7, #4]
 801b9ec:	23a9      	movs	r3, #169	@ 0xa9
 801b9ee:	009b      	lsls	r3, r3, #2
 801b9f0:	58d3      	ldr	r3, [r2, r3]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d005      	beq.n	801ba02 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	68db      	ldr	r3, [r3, #12]
 801b9fa:	2202      	movs	r2, #2
 801b9fc:	431a      	orrs	r2, r3
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	330c      	adds	r3, #12
 801ba06:	0019      	movs	r1, r3
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	2202      	movs	r2, #2
 801ba0c:	0018      	movs	r0, r3
 801ba0e:	f000 f8fe 	bl	801bc0e <USBD_CtlSendData>
      break;
 801ba12:	e006      	b.n	801ba22 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801ba14:	683a      	ldr	r2, [r7, #0]
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	0011      	movs	r1, r2
 801ba1a:	0018      	movs	r0, r3
 801ba1c:	f000 f879 	bl	801bb12 <USBD_CtlError>
      break;
 801ba20:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ba22:	46c0      	nop			@ (mov r8, r8)
 801ba24:	46bd      	mov	sp, r7
 801ba26:	b002      	add	sp, #8
 801ba28:	bd80      	pop	{r7, pc}

0801ba2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ba2a:	b580      	push	{r7, lr}
 801ba2c:	b082      	sub	sp, #8
 801ba2e:	af00      	add	r7, sp, #0
 801ba30:	6078      	str	r0, [r7, #4]
 801ba32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	885b      	ldrh	r3, [r3, #2]
 801ba38:	2b01      	cmp	r3, #1
 801ba3a:	d108      	bne.n	801ba4e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801ba3c:	687a      	ldr	r2, [r7, #4]
 801ba3e:	23a9      	movs	r3, #169	@ 0xa9
 801ba40:	009b      	lsls	r3, r3, #2
 801ba42:	2101      	movs	r1, #1
 801ba44:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801ba46:	687b      	ldr	r3, [r7, #4]
 801ba48:	0018      	movs	r0, r3
 801ba4a:	f000 f94a 	bl	801bce2 <USBD_CtlSendStatus>
  }
}
 801ba4e:	46c0      	nop			@ (mov r8, r8)
 801ba50:	46bd      	mov	sp, r7
 801ba52:	b002      	add	sp, #8
 801ba54:	bd80      	pop	{r7, pc}

0801ba56 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ba56:	b580      	push	{r7, lr}
 801ba58:	b082      	sub	sp, #8
 801ba5a:	af00      	add	r7, sp, #0
 801ba5c:	6078      	str	r0, [r7, #4]
 801ba5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ba60:	687a      	ldr	r2, [r7, #4]
 801ba62:	23a7      	movs	r3, #167	@ 0xa7
 801ba64:	009b      	lsls	r3, r3, #2
 801ba66:	5cd3      	ldrb	r3, [r2, r3]
 801ba68:	3b01      	subs	r3, #1
 801ba6a:	2b02      	cmp	r3, #2
 801ba6c:	d80d      	bhi.n	801ba8a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ba6e:	683b      	ldr	r3, [r7, #0]
 801ba70:	885b      	ldrh	r3, [r3, #2]
 801ba72:	2b01      	cmp	r3, #1
 801ba74:	d110      	bne.n	801ba98 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801ba76:	687a      	ldr	r2, [r7, #4]
 801ba78:	23a9      	movs	r3, #169	@ 0xa9
 801ba7a:	009b      	lsls	r3, r3, #2
 801ba7c:	2100      	movs	r1, #0
 801ba7e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	0018      	movs	r0, r3
 801ba84:	f000 f92d 	bl	801bce2 <USBD_CtlSendStatus>
      }
      break;
 801ba88:	e006      	b.n	801ba98 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801ba8a:	683a      	ldr	r2, [r7, #0]
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	0011      	movs	r1, r2
 801ba90:	0018      	movs	r0, r3
 801ba92:	f000 f83e 	bl	801bb12 <USBD_CtlError>
      break;
 801ba96:	e000      	b.n	801ba9a <USBD_ClrFeature+0x44>
      break;
 801ba98:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ba9a:	46c0      	nop			@ (mov r8, r8)
 801ba9c:	46bd      	mov	sp, r7
 801ba9e:	b002      	add	sp, #8
 801baa0:	bd80      	pop	{r7, pc}

0801baa2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801baa2:	b580      	push	{r7, lr}
 801baa4:	b082      	sub	sp, #8
 801baa6:	af00      	add	r7, sp, #0
 801baa8:	6078      	str	r0, [r7, #4]
 801baaa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801baac:	683b      	ldr	r3, [r7, #0]
 801baae:	781a      	ldrb	r2, [r3, #0]
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801bab4:	683b      	ldr	r3, [r7, #0]
 801bab6:	785a      	ldrb	r2, [r3, #1]
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801babc:	683b      	ldr	r3, [r7, #0]
 801babe:	3302      	adds	r3, #2
 801bac0:	781b      	ldrb	r3, [r3, #0]
 801bac2:	001a      	movs	r2, r3
 801bac4:	683b      	ldr	r3, [r7, #0]
 801bac6:	3303      	adds	r3, #3
 801bac8:	781b      	ldrb	r3, [r3, #0]
 801baca:	021b      	lsls	r3, r3, #8
 801bacc:	b29b      	uxth	r3, r3
 801bace:	18d3      	adds	r3, r2, r3
 801bad0:	b29a      	uxth	r2, r3
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801bad6:	683b      	ldr	r3, [r7, #0]
 801bad8:	3304      	adds	r3, #4
 801bada:	781b      	ldrb	r3, [r3, #0]
 801badc:	001a      	movs	r2, r3
 801bade:	683b      	ldr	r3, [r7, #0]
 801bae0:	3305      	adds	r3, #5
 801bae2:	781b      	ldrb	r3, [r3, #0]
 801bae4:	021b      	lsls	r3, r3, #8
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	18d3      	adds	r3, r2, r3
 801baea:	b29a      	uxth	r2, r3
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801baf0:	683b      	ldr	r3, [r7, #0]
 801baf2:	3306      	adds	r3, #6
 801baf4:	781b      	ldrb	r3, [r3, #0]
 801baf6:	001a      	movs	r2, r3
 801baf8:	683b      	ldr	r3, [r7, #0]
 801bafa:	3307      	adds	r3, #7
 801bafc:	781b      	ldrb	r3, [r3, #0]
 801bafe:	021b      	lsls	r3, r3, #8
 801bb00:	b29b      	uxth	r3, r3
 801bb02:	18d3      	adds	r3, r2, r3
 801bb04:	b29a      	uxth	r2, r3
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	80da      	strh	r2, [r3, #6]

}
 801bb0a:	46c0      	nop			@ (mov r8, r8)
 801bb0c:	46bd      	mov	sp, r7
 801bb0e:	b002      	add	sp, #8
 801bb10:	bd80      	pop	{r7, pc}

0801bb12 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801bb12:	b580      	push	{r7, lr}
 801bb14:	b082      	sub	sp, #8
 801bb16:	af00      	add	r7, sp, #0
 801bb18:	6078      	str	r0, [r7, #4]
 801bb1a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	2180      	movs	r1, #128	@ 0x80
 801bb20:	0018      	movs	r0, r3
 801bb22:	f000 fd1e 	bl	801c562 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	2100      	movs	r1, #0
 801bb2a:	0018      	movs	r0, r3
 801bb2c:	f000 fd19 	bl	801c562 <USBD_LL_StallEP>
}
 801bb30:	46c0      	nop			@ (mov r8, r8)
 801bb32:	46bd      	mov	sp, r7
 801bb34:	b002      	add	sp, #8
 801bb36:	bd80      	pop	{r7, pc}

0801bb38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801bb38:	b590      	push	{r4, r7, lr}
 801bb3a:	b087      	sub	sp, #28
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	60f8      	str	r0, [r7, #12]
 801bb40:	60b9      	str	r1, [r7, #8]
 801bb42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801bb44:	2417      	movs	r4, #23
 801bb46:	193b      	adds	r3, r7, r4
 801bb48:	2200      	movs	r2, #0
 801bb4a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d03c      	beq.n	801bbcc <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801bb52:	68fb      	ldr	r3, [r7, #12]
 801bb54:	0018      	movs	r0, r3
 801bb56:	f000 f83d 	bl	801bbd4 <USBD_GetLen>
 801bb5a:	0003      	movs	r3, r0
 801bb5c:	3301      	adds	r3, #1
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	18db      	adds	r3, r3, r3
 801bb62:	b29a      	uxth	r2, r3
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801bb68:	193b      	adds	r3, r7, r4
 801bb6a:	781b      	ldrb	r3, [r3, #0]
 801bb6c:	193a      	adds	r2, r7, r4
 801bb6e:	1c59      	adds	r1, r3, #1
 801bb70:	7011      	strb	r1, [r2, #0]
 801bb72:	001a      	movs	r2, r3
 801bb74:	68bb      	ldr	r3, [r7, #8]
 801bb76:	189b      	adds	r3, r3, r2
 801bb78:	687a      	ldr	r2, [r7, #4]
 801bb7a:	7812      	ldrb	r2, [r2, #0]
 801bb7c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801bb7e:	193b      	adds	r3, r7, r4
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	193a      	adds	r2, r7, r4
 801bb84:	1c59      	adds	r1, r3, #1
 801bb86:	7011      	strb	r1, [r2, #0]
 801bb88:	001a      	movs	r2, r3
 801bb8a:	68bb      	ldr	r3, [r7, #8]
 801bb8c:	189b      	adds	r3, r3, r2
 801bb8e:	2203      	movs	r2, #3
 801bb90:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801bb92:	e017      	b.n	801bbc4 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	1c5a      	adds	r2, r3, #1
 801bb98:	60fa      	str	r2, [r7, #12]
 801bb9a:	2417      	movs	r4, #23
 801bb9c:	193a      	adds	r2, r7, r4
 801bb9e:	7812      	ldrb	r2, [r2, #0]
 801bba0:	1939      	adds	r1, r7, r4
 801bba2:	1c50      	adds	r0, r2, #1
 801bba4:	7008      	strb	r0, [r1, #0]
 801bba6:	0011      	movs	r1, r2
 801bba8:	68ba      	ldr	r2, [r7, #8]
 801bbaa:	1852      	adds	r2, r2, r1
 801bbac:	781b      	ldrb	r3, [r3, #0]
 801bbae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801bbb0:	193b      	adds	r3, r7, r4
 801bbb2:	781b      	ldrb	r3, [r3, #0]
 801bbb4:	193a      	adds	r2, r7, r4
 801bbb6:	1c59      	adds	r1, r3, #1
 801bbb8:	7011      	strb	r1, [r2, #0]
 801bbba:	001a      	movs	r2, r3
 801bbbc:	68bb      	ldr	r3, [r7, #8]
 801bbbe:	189b      	adds	r3, r3, r2
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	781b      	ldrb	r3, [r3, #0]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d1e3      	bne.n	801bb94 <USBD_GetString+0x5c>
    }
  }
}
 801bbcc:	46c0      	nop			@ (mov r8, r8)
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	b007      	add	sp, #28
 801bbd2:	bd90      	pop	{r4, r7, pc}

0801bbd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b084      	sub	sp, #16
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801bbdc:	230f      	movs	r3, #15
 801bbde:	18fb      	adds	r3, r7, r3
 801bbe0:	2200      	movs	r2, #0
 801bbe2:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801bbe4:	e008      	b.n	801bbf8 <USBD_GetLen+0x24>
  {
    len++;
 801bbe6:	210f      	movs	r1, #15
 801bbe8:	187b      	adds	r3, r7, r1
 801bbea:	781a      	ldrb	r2, [r3, #0]
 801bbec:	187b      	adds	r3, r7, r1
 801bbee:	3201      	adds	r2, #1
 801bbf0:	701a      	strb	r2, [r3, #0]
    buf++;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	3301      	adds	r3, #1
 801bbf6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	781b      	ldrb	r3, [r3, #0]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d1f2      	bne.n	801bbe6 <USBD_GetLen+0x12>
  }

  return len;
 801bc00:	230f      	movs	r3, #15
 801bc02:	18fb      	adds	r3, r7, r3
 801bc04:	781b      	ldrb	r3, [r3, #0]
}
 801bc06:	0018      	movs	r0, r3
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	b004      	add	sp, #16
 801bc0c:	bd80      	pop	{r7, pc}

0801bc0e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801bc0e:	b580      	push	{r7, lr}
 801bc10:	b084      	sub	sp, #16
 801bc12:	af00      	add	r7, sp, #0
 801bc14:	60f8      	str	r0, [r7, #12]
 801bc16:	60b9      	str	r1, [r7, #8]
 801bc18:	1dbb      	adds	r3, r7, #6
 801bc1a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801bc1c:	68fa      	ldr	r2, [r7, #12]
 801bc1e:	23a5      	movs	r3, #165	@ 0xa5
 801bc20:	009b      	lsls	r3, r3, #2
 801bc22:	2102      	movs	r1, #2
 801bc24:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801bc26:	1dbb      	adds	r3, r7, #6
 801bc28:	881a      	ldrh	r2, [r3, #0]
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801bc2e:	1dbb      	adds	r3, r7, #6
 801bc30:	881a      	ldrh	r2, [r3, #0]
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801bc36:	1dbb      	adds	r3, r7, #6
 801bc38:	881b      	ldrh	r3, [r3, #0]
 801bc3a:	68ba      	ldr	r2, [r7, #8]
 801bc3c:	68f8      	ldr	r0, [r7, #12]
 801bc3e:	2100      	movs	r1, #0
 801bc40:	f000 fd41 	bl	801c6c6 <USBD_LL_Transmit>

  return USBD_OK;
 801bc44:	2300      	movs	r3, #0
}
 801bc46:	0018      	movs	r0, r3
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	b004      	add	sp, #16
 801bc4c:	bd80      	pop	{r7, pc}

0801bc4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801bc4e:	b580      	push	{r7, lr}
 801bc50:	b084      	sub	sp, #16
 801bc52:	af00      	add	r7, sp, #0
 801bc54:	60f8      	str	r0, [r7, #12]
 801bc56:	60b9      	str	r1, [r7, #8]
 801bc58:	1dbb      	adds	r3, r7, #6
 801bc5a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801bc5c:	1dbb      	adds	r3, r7, #6
 801bc5e:	881b      	ldrh	r3, [r3, #0]
 801bc60:	68ba      	ldr	r2, [r7, #8]
 801bc62:	68f8      	ldr	r0, [r7, #12]
 801bc64:	2100      	movs	r1, #0
 801bc66:	f000 fd2e 	bl	801c6c6 <USBD_LL_Transmit>

  return USBD_OK;
 801bc6a:	2300      	movs	r3, #0
}
 801bc6c:	0018      	movs	r0, r3
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	b004      	add	sp, #16
 801bc72:	bd80      	pop	{r7, pc}

0801bc74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	b084      	sub	sp, #16
 801bc78:	af00      	add	r7, sp, #0
 801bc7a:	60f8      	str	r0, [r7, #12]
 801bc7c:	60b9      	str	r1, [r7, #8]
 801bc7e:	1dbb      	adds	r3, r7, #6
 801bc80:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801bc82:	68fa      	ldr	r2, [r7, #12]
 801bc84:	23a5      	movs	r3, #165	@ 0xa5
 801bc86:	009b      	lsls	r3, r3, #2
 801bc88:	2103      	movs	r1, #3
 801bc8a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801bc8c:	1dbb      	adds	r3, r7, #6
 801bc8e:	8819      	ldrh	r1, [r3, #0]
 801bc90:	68fa      	ldr	r2, [r7, #12]
 801bc92:	23ae      	movs	r3, #174	@ 0xae
 801bc94:	005b      	lsls	r3, r3, #1
 801bc96:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801bc98:	1dbb      	adds	r3, r7, #6
 801bc9a:	8819      	ldrh	r1, [r3, #0]
 801bc9c:	68fa      	ldr	r2, [r7, #12]
 801bc9e:	23b0      	movs	r3, #176	@ 0xb0
 801bca0:	005b      	lsls	r3, r3, #1
 801bca2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801bca4:	1dbb      	adds	r3, r7, #6
 801bca6:	881b      	ldrh	r3, [r3, #0]
 801bca8:	68ba      	ldr	r2, [r7, #8]
 801bcaa:	68f8      	ldr	r0, [r7, #12]
 801bcac:	2100      	movs	r1, #0
 801bcae:	f000 fd41 	bl	801c734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801bcb2:	2300      	movs	r3, #0
}
 801bcb4:	0018      	movs	r0, r3
 801bcb6:	46bd      	mov	sp, r7
 801bcb8:	b004      	add	sp, #16
 801bcba:	bd80      	pop	{r7, pc}

0801bcbc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b084      	sub	sp, #16
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	60f8      	str	r0, [r7, #12]
 801bcc4:	60b9      	str	r1, [r7, #8]
 801bcc6:	1dbb      	adds	r3, r7, #6
 801bcc8:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801bcca:	1dbb      	adds	r3, r7, #6
 801bccc:	881b      	ldrh	r3, [r3, #0]
 801bcce:	68ba      	ldr	r2, [r7, #8]
 801bcd0:	68f8      	ldr	r0, [r7, #12]
 801bcd2:	2100      	movs	r1, #0
 801bcd4:	f000 fd2e 	bl	801c734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801bcd8:	2300      	movs	r3, #0
}
 801bcda:	0018      	movs	r0, r3
 801bcdc:	46bd      	mov	sp, r7
 801bcde:	b004      	add	sp, #16
 801bce0:	bd80      	pop	{r7, pc}

0801bce2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801bce2:	b580      	push	{r7, lr}
 801bce4:	b082      	sub	sp, #8
 801bce6:	af00      	add	r7, sp, #0
 801bce8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801bcea:	687a      	ldr	r2, [r7, #4]
 801bcec:	23a5      	movs	r3, #165	@ 0xa5
 801bcee:	009b      	lsls	r3, r3, #2
 801bcf0:	2104      	movs	r1, #4
 801bcf2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801bcf4:	6878      	ldr	r0, [r7, #4]
 801bcf6:	2300      	movs	r3, #0
 801bcf8:	2200      	movs	r2, #0
 801bcfa:	2100      	movs	r1, #0
 801bcfc:	f000 fce3 	bl	801c6c6 <USBD_LL_Transmit>

  return USBD_OK;
 801bd00:	2300      	movs	r3, #0
}
 801bd02:	0018      	movs	r0, r3
 801bd04:	46bd      	mov	sp, r7
 801bd06:	b002      	add	sp, #8
 801bd08:	bd80      	pop	{r7, pc}

0801bd0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801bd0a:	b580      	push	{r7, lr}
 801bd0c:	b082      	sub	sp, #8
 801bd0e:	af00      	add	r7, sp, #0
 801bd10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801bd12:	687a      	ldr	r2, [r7, #4]
 801bd14:	23a5      	movs	r3, #165	@ 0xa5
 801bd16:	009b      	lsls	r3, r3, #2
 801bd18:	2105      	movs	r1, #5
 801bd1a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bd1c:	6878      	ldr	r0, [r7, #4]
 801bd1e:	2300      	movs	r3, #0
 801bd20:	2200      	movs	r2, #0
 801bd22:	2100      	movs	r1, #0
 801bd24:	f000 fd06 	bl	801c734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801bd28:	2300      	movs	r3, #0
}
 801bd2a:	0018      	movs	r0, r3
 801bd2c:	46bd      	mov	sp, r7
 801bd2e:	b002      	add	sp, #8
 801bd30:	bd80      	pop	{r7, pc}
	...

0801bd34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801bd38:	4914      	ldr	r1, [pc, #80]	@ (801bd8c <MX_USB_DEVICE_Init+0x58>)
 801bd3a:	4b15      	ldr	r3, [pc, #84]	@ (801bd90 <MX_USB_DEVICE_Init+0x5c>)
 801bd3c:	2200      	movs	r2, #0
 801bd3e:	0018      	movs	r0, r3
 801bd40:	f7fe fdec 	bl	801a91c <USBD_Init>
 801bd44:	1e03      	subs	r3, r0, #0
 801bd46:	d001      	beq.n	801bd4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801bd48:	f7ec f8c6 	bl	8007ed8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801bd4c:	4a11      	ldr	r2, [pc, #68]	@ (801bd94 <MX_USB_DEVICE_Init+0x60>)
 801bd4e:	4b10      	ldr	r3, [pc, #64]	@ (801bd90 <MX_USB_DEVICE_Init+0x5c>)
 801bd50:	0011      	movs	r1, r2
 801bd52:	0018      	movs	r0, r3
 801bd54:	f7fe fe13 	bl	801a97e <USBD_RegisterClass>
 801bd58:	1e03      	subs	r3, r0, #0
 801bd5a:	d001      	beq.n	801bd60 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801bd5c:	f7ec f8bc 	bl	8007ed8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801bd60:	4a0d      	ldr	r2, [pc, #52]	@ (801bd98 <MX_USB_DEVICE_Init+0x64>)
 801bd62:	4b0b      	ldr	r3, [pc, #44]	@ (801bd90 <MX_USB_DEVICE_Init+0x5c>)
 801bd64:	0011      	movs	r1, r2
 801bd66:	0018      	movs	r0, r3
 801bd68:	f7fe fd28 	bl	801a7bc <USBD_CDC_RegisterInterface>
 801bd6c:	1e03      	subs	r3, r0, #0
 801bd6e:	d001      	beq.n	801bd74 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801bd70:	f7ec f8b2 	bl	8007ed8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801bd74:	4b06      	ldr	r3, [pc, #24]	@ (801bd90 <MX_USB_DEVICE_Init+0x5c>)
 801bd76:	0018      	movs	r0, r3
 801bd78:	f7fe fe21 	bl	801a9be <USBD_Start>
 801bd7c:	1e03      	subs	r3, r0, #0
 801bd7e:	d001      	beq.n	801bd84 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801bd80:	f7ec f8aa 	bl	8007ed8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801bd84:	46c0      	nop			@ (mov r8, r8)
 801bd86:	46bd      	mov	sp, r7
 801bd88:	bd80      	pop	{r7, pc}
 801bd8a:	46c0      	nop			@ (mov r8, r8)
 801bd8c:	20000200 	.word	0x20000200
 801bd90:	20002538 	.word	0x20002538
 801bd94:	200000ec 	.word	0x200000ec
 801bd98:	200001f0 	.word	0x200001f0

0801bd9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801bda0:	4907      	ldr	r1, [pc, #28]	@ (801bdc0 <CDC_Init_FS+0x24>)
 801bda2:	4b08      	ldr	r3, [pc, #32]	@ (801bdc4 <CDC_Init_FS+0x28>)
 801bda4:	2200      	movs	r2, #0
 801bda6:	0018      	movs	r0, r3
 801bda8:	f7fe fd23 	bl	801a7f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801bdac:	4a06      	ldr	r2, [pc, #24]	@ (801bdc8 <CDC_Init_FS+0x2c>)
 801bdae:	4b05      	ldr	r3, [pc, #20]	@ (801bdc4 <CDC_Init_FS+0x28>)
 801bdb0:	0011      	movs	r1, r2
 801bdb2:	0018      	movs	r0, r3
 801bdb4:	f7fe fd39 	bl	801a82a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801bdb8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801bdba:	0018      	movs	r0, r3
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	20002cbc 	.word	0x20002cbc
 801bdc4:	20002538 	.word	0x20002538
 801bdc8:	200028bc 	.word	0x200028bc

0801bdcc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801bdd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801bdd2:	0018      	movs	r0, r3
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	bd80      	pop	{r7, pc}

0801bdd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801bdd8:	b580      	push	{r7, lr}
 801bdda:	b082      	sub	sp, #8
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6039      	str	r1, [r7, #0]
 801bde0:	0011      	movs	r1, r2
 801bde2:	1dfb      	adds	r3, r7, #7
 801bde4:	1c02      	adds	r2, r0, #0
 801bde6:	701a      	strb	r2, [r3, #0]
 801bde8:	1d3b      	adds	r3, r7, #4
 801bdea:	1c0a      	adds	r2, r1, #0
 801bdec:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801bdee:	1dfb      	adds	r3, r7, #7
 801bdf0:	781b      	ldrb	r3, [r3, #0]
 801bdf2:	2b23      	cmp	r3, #35	@ 0x23
 801bdf4:	d804      	bhi.n	801be00 <CDC_Control_FS+0x28>
 801bdf6:	009a      	lsls	r2, r3, #2
 801bdf8:	4b04      	ldr	r3, [pc, #16]	@ (801be0c <CDC_Control_FS+0x34>)
 801bdfa:	18d3      	adds	r3, r2, r3
 801bdfc:	681b      	ldr	r3, [r3, #0]
 801bdfe:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801be00:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801be02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801be04:	0018      	movs	r0, r3
 801be06:	46bd      	mov	sp, r7
 801be08:	b002      	add	sp, #8
 801be0a:	bd80      	pop	{r7, pc}
 801be0c:	08024150 	.word	0x08024150

0801be10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b082      	sub	sp, #8
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
 801be18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801be1a:	4b12      	ldr	r3, [pc, #72]	@ (801be64 <CDC_Receive_FS+0x54>)
 801be1c:	781b      	ldrb	r3, [r3, #0]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d013      	beq.n	801be4a <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	b29a      	uxth	r2, r3
 801be28:	2301      	movs	r3, #1
 801be2a:	425b      	negs	r3, r3
 801be2c:	6879      	ldr	r1, [r7, #4]
 801be2e:	480e      	ldr	r0, [pc, #56]	@ (801be68 <CDC_Receive_FS+0x58>)
 801be30:	f7fa fa46 	bl	80162c0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801be34:	687a      	ldr	r2, [r7, #4]
 801be36:	4b0d      	ldr	r3, [pc, #52]	@ (801be6c <CDC_Receive_FS+0x5c>)
 801be38:	0011      	movs	r1, r2
 801be3a:	0018      	movs	r0, r3
 801be3c:	f7fe fcf5 	bl	801a82a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801be40:	4b0a      	ldr	r3, [pc, #40]	@ (801be6c <CDC_Receive_FS+0x5c>)
 801be42:	0018      	movs	r0, r3
 801be44:	f7fe fd3c 	bl	801a8c0 <USBD_CDC_ReceivePacket>
 801be48:	e006      	b.n	801be58 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801be4a:	683b      	ldr	r3, [r7, #0]
 801be4c:	681a      	ldr	r2, [r3, #0]
 801be4e:	4b08      	ldr	r3, [pc, #32]	@ (801be70 <CDC_Receive_FS+0x60>)
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	18d2      	adds	r2, r2, r3
 801be54:	4b06      	ldr	r3, [pc, #24]	@ (801be70 <CDC_Receive_FS+0x60>)
 801be56:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801be58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801be5a:	0018      	movs	r0, r3
 801be5c:	46bd      	mov	sp, r7
 801be5e:	b002      	add	sp, #8
 801be60:	bd80      	pop	{r7, pc}
 801be62:	46c0      	nop			@ (mov r8, r8)
 801be64:	200027fc 	.word	0x200027fc
 801be68:	20002800 	.word	0x20002800
 801be6c:	20002538 	.word	0x20002538
 801be70:	200028b8 	.word	0x200028b8

0801be74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801be74:	b5b0      	push	{r4, r5, r7, lr}
 801be76:	b084      	sub	sp, #16
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
 801be7c:	000a      	movs	r2, r1
 801be7e:	1cbb      	adds	r3, r7, #2
 801be80:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801be82:	230f      	movs	r3, #15
 801be84:	18fb      	adds	r3, r7, r3
 801be86:	2200      	movs	r2, #0
 801be88:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801be8a:	4a11      	ldr	r2, [pc, #68]	@ (801bed0 <CDC_Transmit_FS+0x5c>)
 801be8c:	23ae      	movs	r3, #174	@ 0xae
 801be8e:	009b      	lsls	r3, r3, #2
 801be90:	58d3      	ldr	r3, [r2, r3]
 801be92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801be94:	68ba      	ldr	r2, [r7, #8]
 801be96:	2385      	movs	r3, #133	@ 0x85
 801be98:	009b      	lsls	r3, r3, #2
 801be9a:	58d3      	ldr	r3, [r2, r3]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d001      	beq.n	801bea4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801bea0:	2301      	movs	r3, #1
 801bea2:	e010      	b.n	801bec6 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801bea4:	1cbb      	adds	r3, r7, #2
 801bea6:	881a      	ldrh	r2, [r3, #0]
 801bea8:	6879      	ldr	r1, [r7, #4]
 801beaa:	4b09      	ldr	r3, [pc, #36]	@ (801bed0 <CDC_Transmit_FS+0x5c>)
 801beac:	0018      	movs	r0, r3
 801beae:	f7fe fca0 	bl	801a7f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801beb2:	250f      	movs	r5, #15
 801beb4:	197c      	adds	r4, r7, r5
 801beb6:	4b06      	ldr	r3, [pc, #24]	@ (801bed0 <CDC_Transmit_FS+0x5c>)
 801beb8:	0018      	movs	r0, r3
 801beba:	f7fe fcca 	bl	801a852 <USBD_CDC_TransmitPacket>
 801bebe:	0003      	movs	r3, r0
 801bec0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801bec2:	197b      	adds	r3, r7, r5
 801bec4:	781b      	ldrb	r3, [r3, #0]
}
 801bec6:	0018      	movs	r0, r3
 801bec8:	46bd      	mov	sp, r7
 801beca:	b004      	add	sp, #16
 801becc:	bdb0      	pop	{r4, r5, r7, pc}
 801bece:	46c0      	nop			@ (mov r8, r8)
 801bed0:	20002538 	.word	0x20002538

0801bed4 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801bed4:	b580      	push	{r7, lr}
 801bed6:	af00      	add	r7, sp, #0
  ESPProg = true;
 801bed8:	4b02      	ldr	r3, [pc, #8]	@ (801bee4 <EnableESPProg+0x10>)
 801beda:	2201      	movs	r2, #1
 801bedc:	701a      	strb	r2, [r3, #0]
}
 801bede:	46c0      	nop			@ (mov r8, r8)
 801bee0:	46bd      	mov	sp, r7
 801bee2:	bd80      	pop	{r7, pc}
 801bee4:	200027fc 	.word	0x200027fc

0801bee8 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801beec:	4b01      	ldr	r3, [pc, #4]	@ (801bef4 <GetUsbRxPointer+0xc>)
}
 801beee:	0018      	movs	r0, r3
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}
 801bef4:	200028bc 	.word	0x200028bc

0801bef8 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801befc:	4b07      	ldr	r3, [pc, #28]	@ (801bf1c <ResetUsbRxDataSize+0x24>)
 801befe:	2200      	movs	r2, #0
 801bf00:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801bf02:	4a07      	ldr	r2, [pc, #28]	@ (801bf20 <ResetUsbRxDataSize+0x28>)
 801bf04:	4b07      	ldr	r3, [pc, #28]	@ (801bf24 <ResetUsbRxDataSize+0x2c>)
 801bf06:	0011      	movs	r1, r2
 801bf08:	0018      	movs	r0, r3
 801bf0a:	f7fe fc8e 	bl	801a82a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bf0e:	4b05      	ldr	r3, [pc, #20]	@ (801bf24 <ResetUsbRxDataSize+0x2c>)
 801bf10:	0018      	movs	r0, r3
 801bf12:	f7fe fcd5 	bl	801a8c0 <USBD_CDC_ReceivePacket>
}
 801bf16:	46c0      	nop			@ (mov r8, r8)
 801bf18:	46bd      	mov	sp, r7
 801bf1a:	bd80      	pop	{r7, pc}
 801bf1c:	200028b8 	.word	0x200028b8
 801bf20:	200028bc 	.word	0x200028bc
 801bf24:	20002538 	.word	0x20002538

0801bf28 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801bf2c:	4b02      	ldr	r3, [pc, #8]	@ (801bf38 <GetUsbRxDataSize+0x10>)
 801bf2e:	681b      	ldr	r3, [r3, #0]
}
 801bf30:	0018      	movs	r0, r3
 801bf32:	46bd      	mov	sp, r7
 801bf34:	bd80      	pop	{r7, pc}
 801bf36:	46c0      	nop			@ (mov r8, r8)
 801bf38:	200028b8 	.word	0x200028b8

0801bf3c <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801bf3c:	b580      	push	{r7, lr}
 801bf3e:	b082      	sub	sp, #8
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801bf44:	687a      	ldr	r2, [r7, #4]
 801bf46:	4b07      	ldr	r3, [pc, #28]	@ (801bf64 <GetUsbRxNextChunk+0x28>)
 801bf48:	18d2      	adds	r2, r2, r3
 801bf4a:	4b07      	ldr	r3, [pc, #28]	@ (801bf68 <GetUsbRxNextChunk+0x2c>)
 801bf4c:	0011      	movs	r1, r2
 801bf4e:	0018      	movs	r0, r3
 801bf50:	f7fe fc6b 	bl	801a82a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bf54:	4b04      	ldr	r3, [pc, #16]	@ (801bf68 <GetUsbRxNextChunk+0x2c>)
 801bf56:	0018      	movs	r0, r3
 801bf58:	f7fe fcb2 	bl	801a8c0 <USBD_CDC_ReceivePacket>
}
 801bf5c:	46c0      	nop			@ (mov r8, r8)
 801bf5e:	46bd      	mov	sp, r7
 801bf60:	b002      	add	sp, #8
 801bf62:	bd80      	pop	{r7, pc}
 801bf64:	200028bc 	.word	0x200028bc
 801bf68:	20002538 	.word	0x20002538

0801bf6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bf6c:	b580      	push	{r7, lr}
 801bf6e:	b082      	sub	sp, #8
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	0002      	movs	r2, r0
 801bf74:	6039      	str	r1, [r7, #0]
 801bf76:	1dfb      	adds	r3, r7, #7
 801bf78:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801bf7a:	683b      	ldr	r3, [r7, #0]
 801bf7c:	2212      	movs	r2, #18
 801bf7e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801bf80:	4b02      	ldr	r3, [pc, #8]	@ (801bf8c <USBD_FS_DeviceDescriptor+0x20>)
}
 801bf82:	0018      	movs	r0, r3
 801bf84:	46bd      	mov	sp, r7
 801bf86:	b002      	add	sp, #8
 801bf88:	bd80      	pop	{r7, pc}
 801bf8a:	46c0      	nop			@ (mov r8, r8)
 801bf8c:	2000021c 	.word	0x2000021c

0801bf90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b082      	sub	sp, #8
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	0002      	movs	r2, r0
 801bf98:	6039      	str	r1, [r7, #0]
 801bf9a:	1dfb      	adds	r3, r7, #7
 801bf9c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801bf9e:	683b      	ldr	r3, [r7, #0]
 801bfa0:	2204      	movs	r2, #4
 801bfa2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801bfa4:	4b02      	ldr	r3, [pc, #8]	@ (801bfb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801bfa6:	0018      	movs	r0, r3
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	b002      	add	sp, #8
 801bfac:	bd80      	pop	{r7, pc}
 801bfae:	46c0      	nop			@ (mov r8, r8)
 801bfb0:	20000230 	.word	0x20000230

0801bfb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b082      	sub	sp, #8
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	0002      	movs	r2, r0
 801bfbc:	6039      	str	r1, [r7, #0]
 801bfbe:	1dfb      	adds	r3, r7, #7
 801bfc0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801bfc2:	1dfb      	adds	r3, r7, #7
 801bfc4:	781b      	ldrb	r3, [r3, #0]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d106      	bne.n	801bfd8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bfca:	683a      	ldr	r2, [r7, #0]
 801bfcc:	4908      	ldr	r1, [pc, #32]	@ (801bff0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801bfce:	4b09      	ldr	r3, [pc, #36]	@ (801bff4 <USBD_FS_ProductStrDescriptor+0x40>)
 801bfd0:	0018      	movs	r0, r3
 801bfd2:	f7ff fdb1 	bl	801bb38 <USBD_GetString>
 801bfd6:	e005      	b.n	801bfe4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bfd8:	683a      	ldr	r2, [r7, #0]
 801bfda:	4905      	ldr	r1, [pc, #20]	@ (801bff0 <USBD_FS_ProductStrDescriptor+0x3c>)
 801bfdc:	4b05      	ldr	r3, [pc, #20]	@ (801bff4 <USBD_FS_ProductStrDescriptor+0x40>)
 801bfde:	0018      	movs	r0, r3
 801bfe0:	f7ff fdaa 	bl	801bb38 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bfe4:	4b02      	ldr	r3, [pc, #8]	@ (801bff0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801bfe6:	0018      	movs	r0, r3
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	b002      	add	sp, #8
 801bfec:	bd80      	pop	{r7, pc}
 801bfee:	46c0      	nop			@ (mov r8, r8)
 801bff0:	200030bc 	.word	0x200030bc
 801bff4:	08023bfc 	.word	0x08023bfc

0801bff8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b082      	sub	sp, #8
 801bffc:	af00      	add	r7, sp, #0
 801bffe:	0002      	movs	r2, r0
 801c000:	6039      	str	r1, [r7, #0]
 801c002:	1dfb      	adds	r3, r7, #7
 801c004:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c006:	683a      	ldr	r2, [r7, #0]
 801c008:	4904      	ldr	r1, [pc, #16]	@ (801c01c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c00a:	4b05      	ldr	r3, [pc, #20]	@ (801c020 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c00c:	0018      	movs	r0, r3
 801c00e:	f7ff fd93 	bl	801bb38 <USBD_GetString>
  return USBD_StrDesc;
 801c012:	4b02      	ldr	r3, [pc, #8]	@ (801c01c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c014:	0018      	movs	r0, r3
 801c016:	46bd      	mov	sp, r7
 801c018:	b002      	add	sp, #8
 801c01a:	bd80      	pop	{r7, pc}
 801c01c:	200030bc 	.word	0x200030bc
 801c020:	08023c14 	.word	0x08023c14

0801c024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c024:	b580      	push	{r7, lr}
 801c026:	b082      	sub	sp, #8
 801c028:	af00      	add	r7, sp, #0
 801c02a:	0002      	movs	r2, r0
 801c02c:	6039      	str	r1, [r7, #0]
 801c02e:	1dfb      	adds	r3, r7, #7
 801c030:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c032:	683b      	ldr	r3, [r7, #0]
 801c034:	221a      	movs	r2, #26
 801c036:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c038:	f000 f84c 	bl	801c0d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c03c:	4b02      	ldr	r3, [pc, #8]	@ (801c048 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c03e:	0018      	movs	r0, r3
 801c040:	46bd      	mov	sp, r7
 801c042:	b002      	add	sp, #8
 801c044:	bd80      	pop	{r7, pc}
 801c046:	46c0      	nop			@ (mov r8, r8)
 801c048:	20000234 	.word	0x20000234

0801c04c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b082      	sub	sp, #8
 801c050:	af00      	add	r7, sp, #0
 801c052:	0002      	movs	r2, r0
 801c054:	6039      	str	r1, [r7, #0]
 801c056:	1dfb      	adds	r3, r7, #7
 801c058:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c05a:	1dfb      	adds	r3, r7, #7
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d106      	bne.n	801c070 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c062:	683a      	ldr	r2, [r7, #0]
 801c064:	4908      	ldr	r1, [pc, #32]	@ (801c088 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c066:	4b09      	ldr	r3, [pc, #36]	@ (801c08c <USBD_FS_ConfigStrDescriptor+0x40>)
 801c068:	0018      	movs	r0, r3
 801c06a:	f7ff fd65 	bl	801bb38 <USBD_GetString>
 801c06e:	e005      	b.n	801c07c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c070:	683a      	ldr	r2, [r7, #0]
 801c072:	4905      	ldr	r1, [pc, #20]	@ (801c088 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c074:	4b05      	ldr	r3, [pc, #20]	@ (801c08c <USBD_FS_ConfigStrDescriptor+0x40>)
 801c076:	0018      	movs	r0, r3
 801c078:	f7ff fd5e 	bl	801bb38 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c07c:	4b02      	ldr	r3, [pc, #8]	@ (801c088 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c07e:	0018      	movs	r0, r3
 801c080:	46bd      	mov	sp, r7
 801c082:	b002      	add	sp, #8
 801c084:	bd80      	pop	{r7, pc}
 801c086:	46c0      	nop			@ (mov r8, r8)
 801c088:	200030bc 	.word	0x200030bc
 801c08c:	08023c28 	.word	0x08023c28

0801c090 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c090:	b580      	push	{r7, lr}
 801c092:	b082      	sub	sp, #8
 801c094:	af00      	add	r7, sp, #0
 801c096:	0002      	movs	r2, r0
 801c098:	6039      	str	r1, [r7, #0]
 801c09a:	1dfb      	adds	r3, r7, #7
 801c09c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c09e:	1dfb      	adds	r3, r7, #7
 801c0a0:	781b      	ldrb	r3, [r3, #0]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d106      	bne.n	801c0b4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c0a6:	683a      	ldr	r2, [r7, #0]
 801c0a8:	4908      	ldr	r1, [pc, #32]	@ (801c0cc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c0aa:	4b09      	ldr	r3, [pc, #36]	@ (801c0d0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c0ac:	0018      	movs	r0, r3
 801c0ae:	f7ff fd43 	bl	801bb38 <USBD_GetString>
 801c0b2:	e005      	b.n	801c0c0 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c0b4:	683a      	ldr	r2, [r7, #0]
 801c0b6:	4905      	ldr	r1, [pc, #20]	@ (801c0cc <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c0b8:	4b05      	ldr	r3, [pc, #20]	@ (801c0d0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c0ba:	0018      	movs	r0, r3
 801c0bc:	f7ff fd3c 	bl	801bb38 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c0c0:	4b02      	ldr	r3, [pc, #8]	@ (801c0cc <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c0c2:	0018      	movs	r0, r3
 801c0c4:	46bd      	mov	sp, r7
 801c0c6:	b002      	add	sp, #8
 801c0c8:	bd80      	pop	{r7, pc}
 801c0ca:	46c0      	nop			@ (mov r8, r8)
 801c0cc:	200030bc 	.word	0x200030bc
 801c0d0:	08023c34 	.word	0x08023c34

0801c0d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c0d4:	b580      	push	{r7, lr}
 801c0d6:	b084      	sub	sp, #16
 801c0d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c0da:	4b10      	ldr	r3, [pc, #64]	@ (801c11c <Get_SerialNum+0x48>)
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c0e0:	4b0f      	ldr	r3, [pc, #60]	@ (801c120 <Get_SerialNum+0x4c>)
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c0e6:	4b0f      	ldr	r3, [pc, #60]	@ (801c124 <Get_SerialNum+0x50>)
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c0ec:	68fa      	ldr	r2, [r7, #12]
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	18d3      	adds	r3, r2, r3
 801c0f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d00b      	beq.n	801c112 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c0fa:	490b      	ldr	r1, [pc, #44]	@ (801c128 <Get_SerialNum+0x54>)
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	2208      	movs	r2, #8
 801c100:	0018      	movs	r0, r3
 801c102:	f000 f815 	bl	801c130 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c106:	4909      	ldr	r1, [pc, #36]	@ (801c12c <Get_SerialNum+0x58>)
 801c108:	68bb      	ldr	r3, [r7, #8]
 801c10a:	2204      	movs	r2, #4
 801c10c:	0018      	movs	r0, r3
 801c10e:	f000 f80f 	bl	801c130 <IntToUnicode>
  }
}
 801c112:	46c0      	nop			@ (mov r8, r8)
 801c114:	46bd      	mov	sp, r7
 801c116:	b004      	add	sp, #16
 801c118:	bd80      	pop	{r7, pc}
 801c11a:	46c0      	nop			@ (mov r8, r8)
 801c11c:	1ff80050 	.word	0x1ff80050
 801c120:	1ff80054 	.word	0x1ff80054
 801c124:	1ff80058 	.word	0x1ff80058
 801c128:	20000236 	.word	0x20000236
 801c12c:	20000246 	.word	0x20000246

0801c130 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c130:	b580      	push	{r7, lr}
 801c132:	b086      	sub	sp, #24
 801c134:	af00      	add	r7, sp, #0
 801c136:	60f8      	str	r0, [r7, #12]
 801c138:	60b9      	str	r1, [r7, #8]
 801c13a:	1dfb      	adds	r3, r7, #7
 801c13c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c13e:	2117      	movs	r1, #23
 801c140:	187b      	adds	r3, r7, r1
 801c142:	2200      	movs	r2, #0
 801c144:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c146:	187b      	adds	r3, r7, r1
 801c148:	2200      	movs	r2, #0
 801c14a:	701a      	strb	r2, [r3, #0]
 801c14c:	e02f      	b.n	801c1ae <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	0f1b      	lsrs	r3, r3, #28
 801c152:	2b09      	cmp	r3, #9
 801c154:	d80d      	bhi.n	801c172 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c156:	68fb      	ldr	r3, [r7, #12]
 801c158:	0f1b      	lsrs	r3, r3, #28
 801c15a:	b2da      	uxtb	r2, r3
 801c15c:	2317      	movs	r3, #23
 801c15e:	18fb      	adds	r3, r7, r3
 801c160:	781b      	ldrb	r3, [r3, #0]
 801c162:	005b      	lsls	r3, r3, #1
 801c164:	0019      	movs	r1, r3
 801c166:	68bb      	ldr	r3, [r7, #8]
 801c168:	185b      	adds	r3, r3, r1
 801c16a:	3230      	adds	r2, #48	@ 0x30
 801c16c:	b2d2      	uxtb	r2, r2
 801c16e:	701a      	strb	r2, [r3, #0]
 801c170:	e00c      	b.n	801c18c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c172:	68fb      	ldr	r3, [r7, #12]
 801c174:	0f1b      	lsrs	r3, r3, #28
 801c176:	b2da      	uxtb	r2, r3
 801c178:	2317      	movs	r3, #23
 801c17a:	18fb      	adds	r3, r7, r3
 801c17c:	781b      	ldrb	r3, [r3, #0]
 801c17e:	005b      	lsls	r3, r3, #1
 801c180:	0019      	movs	r1, r3
 801c182:	68bb      	ldr	r3, [r7, #8]
 801c184:	185b      	adds	r3, r3, r1
 801c186:	3237      	adds	r2, #55	@ 0x37
 801c188:	b2d2      	uxtb	r2, r2
 801c18a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c18c:	68fb      	ldr	r3, [r7, #12]
 801c18e:	011b      	lsls	r3, r3, #4
 801c190:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c192:	2117      	movs	r1, #23
 801c194:	187b      	adds	r3, r7, r1
 801c196:	781b      	ldrb	r3, [r3, #0]
 801c198:	005b      	lsls	r3, r3, #1
 801c19a:	3301      	adds	r3, #1
 801c19c:	68ba      	ldr	r2, [r7, #8]
 801c19e:	18d3      	adds	r3, r2, r3
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c1a4:	187b      	adds	r3, r7, r1
 801c1a6:	781a      	ldrb	r2, [r3, #0]
 801c1a8:	187b      	adds	r3, r7, r1
 801c1aa:	3201      	adds	r2, #1
 801c1ac:	701a      	strb	r2, [r3, #0]
 801c1ae:	2317      	movs	r3, #23
 801c1b0:	18fa      	adds	r2, r7, r3
 801c1b2:	1dfb      	adds	r3, r7, #7
 801c1b4:	7812      	ldrb	r2, [r2, #0]
 801c1b6:	781b      	ldrb	r3, [r3, #0]
 801c1b8:	429a      	cmp	r2, r3
 801c1ba:	d3c8      	bcc.n	801c14e <IntToUnicode+0x1e>
  }
}
 801c1bc:	46c0      	nop			@ (mov r8, r8)
 801c1be:	46c0      	nop			@ (mov r8, r8)
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	b006      	add	sp, #24
 801c1c4:	bd80      	pop	{r7, pc}
	...

0801c1c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b082      	sub	sp, #8
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	4a0a      	ldr	r2, [pc, #40]	@ (801c200 <HAL_PCD_MspInit+0x38>)
 801c1d6:	4293      	cmp	r3, r2
 801c1d8:	d10e      	bne.n	801c1f8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801c1da:	4b0a      	ldr	r3, [pc, #40]	@ (801c204 <HAL_PCD_MspInit+0x3c>)
 801c1dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c1de:	4b09      	ldr	r3, [pc, #36]	@ (801c204 <HAL_PCD_MspInit+0x3c>)
 801c1e0:	2180      	movs	r1, #128	@ 0x80
 801c1e2:	0409      	lsls	r1, r1, #16
 801c1e4:	430a      	orrs	r2, r1
 801c1e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801c1e8:	2200      	movs	r2, #0
 801c1ea:	2100      	movs	r1, #0
 801c1ec:	201f      	movs	r0, #31
 801c1ee:	f7f2 fb21 	bl	800e834 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801c1f2:	201f      	movs	r0, #31
 801c1f4:	f7f2 fb33 	bl	800e85e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801c1f8:	46c0      	nop			@ (mov r8, r8)
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	b002      	add	sp, #8
 801c1fe:	bd80      	pop	{r7, pc}
 801c200:	40005c00 	.word	0x40005c00
 801c204:	40021000 	.word	0x40021000

0801c208 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c208:	b580      	push	{r7, lr}
 801c20a:	b082      	sub	sp, #8
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c210:	687a      	ldr	r2, [r7, #4]
 801c212:	23bc      	movs	r3, #188	@ 0xbc
 801c214:	009b      	lsls	r3, r3, #2
 801c216:	58d2      	ldr	r2, [r2, r3]
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	21ac      	movs	r1, #172	@ 0xac
 801c21c:	0089      	lsls	r1, r1, #2
 801c21e:	468c      	mov	ip, r1
 801c220:	4463      	add	r3, ip
 801c222:	0019      	movs	r1, r3
 801c224:	0010      	movs	r0, r2
 801c226:	f7fe fc1d 	bl	801aa64 <USBD_LL_SetupStage>
}
 801c22a:	46c0      	nop			@ (mov r8, r8)
 801c22c:	46bd      	mov	sp, r7
 801c22e:	b002      	add	sp, #8
 801c230:	bd80      	pop	{r7, pc}

0801c232 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c232:	b590      	push	{r4, r7, lr}
 801c234:	b083      	sub	sp, #12
 801c236:	af00      	add	r7, sp, #0
 801c238:	6078      	str	r0, [r7, #4]
 801c23a:	000a      	movs	r2, r1
 801c23c:	1cfb      	adds	r3, r7, #3
 801c23e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c240:	687a      	ldr	r2, [r7, #4]
 801c242:	23bc      	movs	r3, #188	@ 0xbc
 801c244:	009b      	lsls	r3, r3, #2
 801c246:	58d4      	ldr	r4, [r2, r3]
 801c248:	1cfb      	adds	r3, r7, #3
 801c24a:	781a      	ldrb	r2, [r3, #0]
 801c24c:	6878      	ldr	r0, [r7, #4]
 801c24e:	23be      	movs	r3, #190	@ 0xbe
 801c250:	0059      	lsls	r1, r3, #1
 801c252:	0013      	movs	r3, r2
 801c254:	009b      	lsls	r3, r3, #2
 801c256:	189b      	adds	r3, r3, r2
 801c258:	00db      	lsls	r3, r3, #3
 801c25a:	18c3      	adds	r3, r0, r3
 801c25c:	185b      	adds	r3, r3, r1
 801c25e:	681a      	ldr	r2, [r3, #0]
 801c260:	1cfb      	adds	r3, r7, #3
 801c262:	781b      	ldrb	r3, [r3, #0]
 801c264:	0019      	movs	r1, r3
 801c266:	0020      	movs	r0, r4
 801c268:	f7fe fc5a 	bl	801ab20 <USBD_LL_DataOutStage>
}
 801c26c:	46c0      	nop			@ (mov r8, r8)
 801c26e:	46bd      	mov	sp, r7
 801c270:	b003      	add	sp, #12
 801c272:	bd90      	pop	{r4, r7, pc}

0801c274 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c274:	b580      	push	{r7, lr}
 801c276:	b082      	sub	sp, #8
 801c278:	af00      	add	r7, sp, #0
 801c27a:	6078      	str	r0, [r7, #4]
 801c27c:	000a      	movs	r2, r1
 801c27e:	1cfb      	adds	r3, r7, #3
 801c280:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	23bc      	movs	r3, #188	@ 0xbc
 801c286:	009b      	lsls	r3, r3, #2
 801c288:	58d0      	ldr	r0, [r2, r3]
 801c28a:	1cfb      	adds	r3, r7, #3
 801c28c:	781a      	ldrb	r2, [r3, #0]
 801c28e:	6879      	ldr	r1, [r7, #4]
 801c290:	0013      	movs	r3, r2
 801c292:	009b      	lsls	r3, r3, #2
 801c294:	189b      	adds	r3, r3, r2
 801c296:	00db      	lsls	r3, r3, #3
 801c298:	18cb      	adds	r3, r1, r3
 801c29a:	333c      	adds	r3, #60	@ 0x3c
 801c29c:	681a      	ldr	r2, [r3, #0]
 801c29e:	1cfb      	adds	r3, r7, #3
 801c2a0:	781b      	ldrb	r3, [r3, #0]
 801c2a2:	0019      	movs	r1, r3
 801c2a4:	f7fe fcbe 	bl	801ac24 <USBD_LL_DataInStage>
}
 801c2a8:	46c0      	nop			@ (mov r8, r8)
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	b002      	add	sp, #8
 801c2ae:	bd80      	pop	{r7, pc}

0801c2b0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b082      	sub	sp, #8
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c2b8:	687a      	ldr	r2, [r7, #4]
 801c2ba:	23bc      	movs	r3, #188	@ 0xbc
 801c2bc:	009b      	lsls	r3, r3, #2
 801c2be:	58d3      	ldr	r3, [r2, r3]
 801c2c0:	0018      	movs	r0, r3
 801c2c2:	f7fe fdf5 	bl	801aeb0 <USBD_LL_SOF>
}
 801c2c6:	46c0      	nop			@ (mov r8, r8)
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	b002      	add	sp, #8
 801c2cc:	bd80      	pop	{r7, pc}

0801c2ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c2ce:	b580      	push	{r7, lr}
 801c2d0:	b084      	sub	sp, #16
 801c2d2:	af00      	add	r7, sp, #0
 801c2d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c2d6:	230f      	movs	r3, #15
 801c2d8:	18fb      	adds	r3, r7, r3
 801c2da:	2201      	movs	r2, #1
 801c2dc:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	689b      	ldr	r3, [r3, #8]
 801c2e2:	2b02      	cmp	r3, #2
 801c2e4:	d001      	beq.n	801c2ea <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801c2e6:	f7eb fdf7 	bl	8007ed8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c2ea:	687a      	ldr	r2, [r7, #4]
 801c2ec:	23bc      	movs	r3, #188	@ 0xbc
 801c2ee:	009b      	lsls	r3, r3, #2
 801c2f0:	58d2      	ldr	r2, [r2, r3]
 801c2f2:	230f      	movs	r3, #15
 801c2f4:	18fb      	adds	r3, r7, r3
 801c2f6:	781b      	ldrb	r3, [r3, #0]
 801c2f8:	0019      	movs	r1, r3
 801c2fa:	0010      	movs	r0, r2
 801c2fc:	f7fe fd97 	bl	801ae2e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c300:	687a      	ldr	r2, [r7, #4]
 801c302:	23bc      	movs	r3, #188	@ 0xbc
 801c304:	009b      	lsls	r3, r3, #2
 801c306:	58d3      	ldr	r3, [r2, r3]
 801c308:	0018      	movs	r0, r3
 801c30a:	f7fe fd48 	bl	801ad9e <USBD_LL_Reset>
}
 801c30e:	46c0      	nop			@ (mov r8, r8)
 801c310:	46bd      	mov	sp, r7
 801c312:	b004      	add	sp, #16
 801c314:	bd80      	pop	{r7, pc}
	...

0801c318 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	b082      	sub	sp, #8
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c320:	687a      	ldr	r2, [r7, #4]
 801c322:	23bc      	movs	r3, #188	@ 0xbc
 801c324:	009b      	lsls	r3, r3, #2
 801c326:	58d3      	ldr	r3, [r2, r3]
 801c328:	0018      	movs	r0, r3
 801c32a:	f7fe fd91 	bl	801ae50 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	699b      	ldr	r3, [r3, #24]
 801c332:	2b00      	cmp	r3, #0
 801c334:	d005      	beq.n	801c342 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c336:	4b05      	ldr	r3, [pc, #20]	@ (801c34c <HAL_PCD_SuspendCallback+0x34>)
 801c338:	691a      	ldr	r2, [r3, #16]
 801c33a:	4b04      	ldr	r3, [pc, #16]	@ (801c34c <HAL_PCD_SuspendCallback+0x34>)
 801c33c:	2106      	movs	r1, #6
 801c33e:	430a      	orrs	r2, r1
 801c340:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801c342:	46c0      	nop			@ (mov r8, r8)
 801c344:	46bd      	mov	sp, r7
 801c346:	b002      	add	sp, #8
 801c348:	bd80      	pop	{r7, pc}
 801c34a:	46c0      	nop			@ (mov r8, r8)
 801c34c:	e000ed00 	.word	0xe000ed00

0801c350 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c350:	b580      	push	{r7, lr}
 801c352:	b082      	sub	sp, #8
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	699b      	ldr	r3, [r3, #24]
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d007      	beq.n	801c370 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c360:	4b09      	ldr	r3, [pc, #36]	@ (801c388 <HAL_PCD_ResumeCallback+0x38>)
 801c362:	691a      	ldr	r2, [r3, #16]
 801c364:	4b08      	ldr	r3, [pc, #32]	@ (801c388 <HAL_PCD_ResumeCallback+0x38>)
 801c366:	2106      	movs	r1, #6
 801c368:	438a      	bics	r2, r1
 801c36a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801c36c:	f000 fa44 	bl	801c7f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c370:	687a      	ldr	r2, [r7, #4]
 801c372:	23bc      	movs	r3, #188	@ 0xbc
 801c374:	009b      	lsls	r3, r3, #2
 801c376:	58d3      	ldr	r3, [r2, r3]
 801c378:	0018      	movs	r0, r3
 801c37a:	f7fe fd81 	bl	801ae80 <USBD_LL_Resume>
}
 801c37e:	46c0      	nop			@ (mov r8, r8)
 801c380:	46bd      	mov	sp, r7
 801c382:	b002      	add	sp, #8
 801c384:	bd80      	pop	{r7, pc}
 801c386:	46c0      	nop			@ (mov r8, r8)
 801c388:	e000ed00 	.word	0xe000ed00

0801c38c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b082      	sub	sp, #8
 801c390:	af00      	add	r7, sp, #0
 801c392:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c394:	4a2d      	ldr	r2, [pc, #180]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c396:	23bc      	movs	r3, #188	@ 0xbc
 801c398:	009b      	lsls	r3, r3, #2
 801c39a:	6879      	ldr	r1, [r7, #4]
 801c39c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c39e:	687a      	ldr	r2, [r7, #4]
 801c3a0:	23b0      	movs	r3, #176	@ 0xb0
 801c3a2:	009b      	lsls	r3, r3, #2
 801c3a4:	4929      	ldr	r1, [pc, #164]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3a6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c3a8:	4b28      	ldr	r3, [pc, #160]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3aa:	4a29      	ldr	r2, [pc, #164]	@ (801c450 <USBD_LL_Init+0xc4>)
 801c3ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c3ae:	4b27      	ldr	r3, [pc, #156]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3b0:	2208      	movs	r2, #8
 801c3b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c3b4:	4b25      	ldr	r3, [pc, #148]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3b6:	2202      	movs	r2, #2
 801c3b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c3ba:	4b24      	ldr	r3, [pc, #144]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3bc:	2202      	movs	r2, #2
 801c3be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c3c0:	4b22      	ldr	r3, [pc, #136]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c3c6:	4b21      	ldr	r3, [pc, #132]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3c8:	2200      	movs	r2, #0
 801c3ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c3cc:	4b1f      	ldr	r3, [pc, #124]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c3d2:	4b1e      	ldr	r3, [pc, #120]	@ (801c44c <USBD_LL_Init+0xc0>)
 801c3d4:	0018      	movs	r0, r3
 801c3d6:	f7f5 ffd3 	bl	8012380 <HAL_PCD_Init>
 801c3da:	1e03      	subs	r3, r0, #0
 801c3dc:	d001      	beq.n	801c3e2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c3de:	f7eb fd7b 	bl	8007ed8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c3e2:	687a      	ldr	r2, [r7, #4]
 801c3e4:	23b0      	movs	r3, #176	@ 0xb0
 801c3e6:	009b      	lsls	r3, r3, #2
 801c3e8:	58d0      	ldr	r0, [r2, r3]
 801c3ea:	2318      	movs	r3, #24
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	2100      	movs	r1, #0
 801c3f0:	f7f7 fd94 	bl	8013f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c3f4:	687a      	ldr	r2, [r7, #4]
 801c3f6:	23b0      	movs	r3, #176	@ 0xb0
 801c3f8:	009b      	lsls	r3, r3, #2
 801c3fa:	58d0      	ldr	r0, [r2, r3]
 801c3fc:	2358      	movs	r3, #88	@ 0x58
 801c3fe:	2200      	movs	r2, #0
 801c400:	2180      	movs	r1, #128	@ 0x80
 801c402:	f7f7 fd8b 	bl	8013f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c406:	687a      	ldr	r2, [r7, #4]
 801c408:	23b0      	movs	r3, #176	@ 0xb0
 801c40a:	009b      	lsls	r3, r3, #2
 801c40c:	58d0      	ldr	r0, [r2, r3]
 801c40e:	23c0      	movs	r3, #192	@ 0xc0
 801c410:	2200      	movs	r2, #0
 801c412:	2181      	movs	r1, #129	@ 0x81
 801c414:	f7f7 fd82 	bl	8013f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c418:	687a      	ldr	r2, [r7, #4]
 801c41a:	23b0      	movs	r3, #176	@ 0xb0
 801c41c:	009b      	lsls	r3, r3, #2
 801c41e:	58d0      	ldr	r0, [r2, r3]
 801c420:	2388      	movs	r3, #136	@ 0x88
 801c422:	005b      	lsls	r3, r3, #1
 801c424:	2200      	movs	r2, #0
 801c426:	2101      	movs	r1, #1
 801c428:	f7f7 fd78 	bl	8013f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801c42c:	687a      	ldr	r2, [r7, #4]
 801c42e:	23b0      	movs	r3, #176	@ 0xb0
 801c430:	009b      	lsls	r3, r3, #2
 801c432:	58d0      	ldr	r0, [r2, r3]
 801c434:	2380      	movs	r3, #128	@ 0x80
 801c436:	005b      	lsls	r3, r3, #1
 801c438:	2200      	movs	r2, #0
 801c43a:	2182      	movs	r1, #130	@ 0x82
 801c43c:	f7f7 fd6e 	bl	8013f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801c440:	2300      	movs	r3, #0
}
 801c442:	0018      	movs	r0, r3
 801c444:	46bd      	mov	sp, r7
 801c446:	b002      	add	sp, #8
 801c448:	bd80      	pop	{r7, pc}
 801c44a:	46c0      	nop			@ (mov r8, r8)
 801c44c:	200032bc 	.word	0x200032bc
 801c450:	40005c00 	.word	0x40005c00

0801c454 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c454:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c456:	b085      	sub	sp, #20
 801c458:	af00      	add	r7, sp, #0
 801c45a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c45c:	210f      	movs	r1, #15
 801c45e:	187b      	adds	r3, r7, r1
 801c460:	2200      	movs	r2, #0
 801c462:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c464:	260e      	movs	r6, #14
 801c466:	19bb      	adds	r3, r7, r6
 801c468:	2200      	movs	r2, #0
 801c46a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c46c:	687a      	ldr	r2, [r7, #4]
 801c46e:	23b0      	movs	r3, #176	@ 0xb0
 801c470:	009b      	lsls	r3, r3, #2
 801c472:	58d3      	ldr	r3, [r2, r3]
 801c474:	000d      	movs	r5, r1
 801c476:	187c      	adds	r4, r7, r1
 801c478:	0018      	movs	r0, r3
 801c47a:	f7f6 f881 	bl	8012580 <HAL_PCD_Start>
 801c47e:	0003      	movs	r3, r0
 801c480:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c482:	19bc      	adds	r4, r7, r6
 801c484:	197b      	adds	r3, r7, r5
 801c486:	781b      	ldrb	r3, [r3, #0]
 801c488:	0018      	movs	r0, r3
 801c48a:	f000 f9bc 	bl	801c806 <USBD_Get_USB_Status>
 801c48e:	0003      	movs	r3, r0
 801c490:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c492:	19bb      	adds	r3, r7, r6
 801c494:	781b      	ldrb	r3, [r3, #0]
}
 801c496:	0018      	movs	r0, r3
 801c498:	46bd      	mov	sp, r7
 801c49a:	b005      	add	sp, #20
 801c49c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c49e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c49e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4a0:	b085      	sub	sp, #20
 801c4a2:	af00      	add	r7, sp, #0
 801c4a4:	6078      	str	r0, [r7, #4]
 801c4a6:	000c      	movs	r4, r1
 801c4a8:	0010      	movs	r0, r2
 801c4aa:	0019      	movs	r1, r3
 801c4ac:	1cfb      	adds	r3, r7, #3
 801c4ae:	1c22      	adds	r2, r4, #0
 801c4b0:	701a      	strb	r2, [r3, #0]
 801c4b2:	1cbb      	adds	r3, r7, #2
 801c4b4:	1c02      	adds	r2, r0, #0
 801c4b6:	701a      	strb	r2, [r3, #0]
 801c4b8:	003b      	movs	r3, r7
 801c4ba:	1c0a      	adds	r2, r1, #0
 801c4bc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c4be:	260f      	movs	r6, #15
 801c4c0:	19bb      	adds	r3, r7, r6
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c4c6:	250e      	movs	r5, #14
 801c4c8:	197b      	adds	r3, r7, r5
 801c4ca:	2200      	movs	r2, #0
 801c4cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c4ce:	687a      	ldr	r2, [r7, #4]
 801c4d0:	23b0      	movs	r3, #176	@ 0xb0
 801c4d2:	009b      	lsls	r3, r3, #2
 801c4d4:	58d0      	ldr	r0, [r2, r3]
 801c4d6:	19bc      	adds	r4, r7, r6
 801c4d8:	1cbb      	adds	r3, r7, #2
 801c4da:	781d      	ldrb	r5, [r3, #0]
 801c4dc:	003b      	movs	r3, r7
 801c4de:	881a      	ldrh	r2, [r3, #0]
 801c4e0:	1cfb      	adds	r3, r7, #3
 801c4e2:	7819      	ldrb	r1, [r3, #0]
 801c4e4:	002b      	movs	r3, r5
 801c4e6:	f7f6 f9e0 	bl	80128aa <HAL_PCD_EP_Open>
 801c4ea:	0003      	movs	r3, r0
 801c4ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c4ee:	250e      	movs	r5, #14
 801c4f0:	197c      	adds	r4, r7, r5
 801c4f2:	19bb      	adds	r3, r7, r6
 801c4f4:	781b      	ldrb	r3, [r3, #0]
 801c4f6:	0018      	movs	r0, r3
 801c4f8:	f000 f985 	bl	801c806 <USBD_Get_USB_Status>
 801c4fc:	0003      	movs	r3, r0
 801c4fe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c500:	197b      	adds	r3, r7, r5
 801c502:	781b      	ldrb	r3, [r3, #0]
}
 801c504:	0018      	movs	r0, r3
 801c506:	46bd      	mov	sp, r7
 801c508:	b005      	add	sp, #20
 801c50a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c50c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c50e:	b085      	sub	sp, #20
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
 801c514:	000a      	movs	r2, r1
 801c516:	1cfb      	adds	r3, r7, #3
 801c518:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c51a:	210f      	movs	r1, #15
 801c51c:	187b      	adds	r3, r7, r1
 801c51e:	2200      	movs	r2, #0
 801c520:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c522:	260e      	movs	r6, #14
 801c524:	19bb      	adds	r3, r7, r6
 801c526:	2200      	movs	r2, #0
 801c528:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c52a:	687a      	ldr	r2, [r7, #4]
 801c52c:	23b0      	movs	r3, #176	@ 0xb0
 801c52e:	009b      	lsls	r3, r3, #2
 801c530:	58d2      	ldr	r2, [r2, r3]
 801c532:	000d      	movs	r5, r1
 801c534:	187c      	adds	r4, r7, r1
 801c536:	1cfb      	adds	r3, r7, #3
 801c538:	781b      	ldrb	r3, [r3, #0]
 801c53a:	0019      	movs	r1, r3
 801c53c:	0010      	movs	r0, r2
 801c53e:	f7f6 fa23 	bl	8012988 <HAL_PCD_EP_Close>
 801c542:	0003      	movs	r3, r0
 801c544:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c546:	19bc      	adds	r4, r7, r6
 801c548:	197b      	adds	r3, r7, r5
 801c54a:	781b      	ldrb	r3, [r3, #0]
 801c54c:	0018      	movs	r0, r3
 801c54e:	f000 f95a 	bl	801c806 <USBD_Get_USB_Status>
 801c552:	0003      	movs	r3, r0
 801c554:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c556:	19bb      	adds	r3, r7, r6
 801c558:	781b      	ldrb	r3, [r3, #0]
}
 801c55a:	0018      	movs	r0, r3
 801c55c:	46bd      	mov	sp, r7
 801c55e:	b005      	add	sp, #20
 801c560:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c562 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c562:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c564:	b085      	sub	sp, #20
 801c566:	af00      	add	r7, sp, #0
 801c568:	6078      	str	r0, [r7, #4]
 801c56a:	000a      	movs	r2, r1
 801c56c:	1cfb      	adds	r3, r7, #3
 801c56e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c570:	210f      	movs	r1, #15
 801c572:	187b      	adds	r3, r7, r1
 801c574:	2200      	movs	r2, #0
 801c576:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c578:	260e      	movs	r6, #14
 801c57a:	19bb      	adds	r3, r7, r6
 801c57c:	2200      	movs	r2, #0
 801c57e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c580:	687a      	ldr	r2, [r7, #4]
 801c582:	23b0      	movs	r3, #176	@ 0xb0
 801c584:	009b      	lsls	r3, r3, #2
 801c586:	58d2      	ldr	r2, [r2, r3]
 801c588:	000d      	movs	r5, r1
 801c58a:	187c      	adds	r4, r7, r1
 801c58c:	1cfb      	adds	r3, r7, #3
 801c58e:	781b      	ldrb	r3, [r3, #0]
 801c590:	0019      	movs	r1, r3
 801c592:	0010      	movs	r0, r2
 801c594:	f7f6 fad5 	bl	8012b42 <HAL_PCD_EP_SetStall>
 801c598:	0003      	movs	r3, r0
 801c59a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c59c:	19bc      	adds	r4, r7, r6
 801c59e:	197b      	adds	r3, r7, r5
 801c5a0:	781b      	ldrb	r3, [r3, #0]
 801c5a2:	0018      	movs	r0, r3
 801c5a4:	f000 f92f 	bl	801c806 <USBD_Get_USB_Status>
 801c5a8:	0003      	movs	r3, r0
 801c5aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c5ac:	19bb      	adds	r3, r7, r6
 801c5ae:	781b      	ldrb	r3, [r3, #0]
}
 801c5b0:	0018      	movs	r0, r3
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	b005      	add	sp, #20
 801c5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c5b8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5ba:	b085      	sub	sp, #20
 801c5bc:	af00      	add	r7, sp, #0
 801c5be:	6078      	str	r0, [r7, #4]
 801c5c0:	000a      	movs	r2, r1
 801c5c2:	1cfb      	adds	r3, r7, #3
 801c5c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c5c6:	210f      	movs	r1, #15
 801c5c8:	187b      	adds	r3, r7, r1
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c5ce:	260e      	movs	r6, #14
 801c5d0:	19bb      	adds	r3, r7, r6
 801c5d2:	2200      	movs	r2, #0
 801c5d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c5d6:	687a      	ldr	r2, [r7, #4]
 801c5d8:	23b0      	movs	r3, #176	@ 0xb0
 801c5da:	009b      	lsls	r3, r3, #2
 801c5dc:	58d2      	ldr	r2, [r2, r3]
 801c5de:	000d      	movs	r5, r1
 801c5e0:	187c      	adds	r4, r7, r1
 801c5e2:	1cfb      	adds	r3, r7, #3
 801c5e4:	781b      	ldrb	r3, [r3, #0]
 801c5e6:	0019      	movs	r1, r3
 801c5e8:	0010      	movs	r0, r2
 801c5ea:	f7f6 fb06 	bl	8012bfa <HAL_PCD_EP_ClrStall>
 801c5ee:	0003      	movs	r3, r0
 801c5f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c5f2:	19bc      	adds	r4, r7, r6
 801c5f4:	197b      	adds	r3, r7, r5
 801c5f6:	781b      	ldrb	r3, [r3, #0]
 801c5f8:	0018      	movs	r0, r3
 801c5fa:	f000 f904 	bl	801c806 <USBD_Get_USB_Status>
 801c5fe:	0003      	movs	r3, r0
 801c600:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c602:	19bb      	adds	r3, r7, r6
 801c604:	781b      	ldrb	r3, [r3, #0]
}
 801c606:	0018      	movs	r0, r3
 801c608:	46bd      	mov	sp, r7
 801c60a:	b005      	add	sp, #20
 801c60c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c60e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c60e:	b580      	push	{r7, lr}
 801c610:	b084      	sub	sp, #16
 801c612:	af00      	add	r7, sp, #0
 801c614:	6078      	str	r0, [r7, #4]
 801c616:	000a      	movs	r2, r1
 801c618:	1cfb      	adds	r3, r7, #3
 801c61a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c61c:	687a      	ldr	r2, [r7, #4]
 801c61e:	23b0      	movs	r3, #176	@ 0xb0
 801c620:	009b      	lsls	r3, r3, #2
 801c622:	58d3      	ldr	r3, [r2, r3]
 801c624:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c626:	1cfb      	adds	r3, r7, #3
 801c628:	781b      	ldrb	r3, [r3, #0]
 801c62a:	b25b      	sxtb	r3, r3
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	da0d      	bge.n	801c64c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c630:	1cfb      	adds	r3, r7, #3
 801c632:	781b      	ldrb	r3, [r3, #0]
 801c634:	227f      	movs	r2, #127	@ 0x7f
 801c636:	4013      	ands	r3, r2
 801c638:	68f9      	ldr	r1, [r7, #12]
 801c63a:	1c5a      	adds	r2, r3, #1
 801c63c:	0013      	movs	r3, r2
 801c63e:	009b      	lsls	r3, r3, #2
 801c640:	189b      	adds	r3, r3, r2
 801c642:	00db      	lsls	r3, r3, #3
 801c644:	18cb      	adds	r3, r1, r3
 801c646:	3302      	adds	r3, #2
 801c648:	781b      	ldrb	r3, [r3, #0]
 801c64a:	e00d      	b.n	801c668 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c64c:	1cfb      	adds	r3, r7, #3
 801c64e:	781b      	ldrb	r3, [r3, #0]
 801c650:	227f      	movs	r2, #127	@ 0x7f
 801c652:	401a      	ands	r2, r3
 801c654:	68f8      	ldr	r0, [r7, #12]
 801c656:	23b5      	movs	r3, #181	@ 0xb5
 801c658:	0059      	lsls	r1, r3, #1
 801c65a:	0013      	movs	r3, r2
 801c65c:	009b      	lsls	r3, r3, #2
 801c65e:	189b      	adds	r3, r3, r2
 801c660:	00db      	lsls	r3, r3, #3
 801c662:	18c3      	adds	r3, r0, r3
 801c664:	185b      	adds	r3, r3, r1
 801c666:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c668:	0018      	movs	r0, r3
 801c66a:	46bd      	mov	sp, r7
 801c66c:	b004      	add	sp, #16
 801c66e:	bd80      	pop	{r7, pc}

0801c670 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c670:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c672:	b085      	sub	sp, #20
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	000a      	movs	r2, r1
 801c67a:	1cfb      	adds	r3, r7, #3
 801c67c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c67e:	210f      	movs	r1, #15
 801c680:	187b      	adds	r3, r7, r1
 801c682:	2200      	movs	r2, #0
 801c684:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c686:	260e      	movs	r6, #14
 801c688:	19bb      	adds	r3, r7, r6
 801c68a:	2200      	movs	r2, #0
 801c68c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c68e:	687a      	ldr	r2, [r7, #4]
 801c690:	23b0      	movs	r3, #176	@ 0xb0
 801c692:	009b      	lsls	r3, r3, #2
 801c694:	58d2      	ldr	r2, [r2, r3]
 801c696:	000d      	movs	r5, r1
 801c698:	187c      	adds	r4, r7, r1
 801c69a:	1cfb      	adds	r3, r7, #3
 801c69c:	781b      	ldrb	r3, [r3, #0]
 801c69e:	0019      	movs	r1, r3
 801c6a0:	0010      	movs	r0, r2
 801c6a2:	f7f6 f8d7 	bl	8012854 <HAL_PCD_SetAddress>
 801c6a6:	0003      	movs	r3, r0
 801c6a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c6aa:	19bc      	adds	r4, r7, r6
 801c6ac:	197b      	adds	r3, r7, r5
 801c6ae:	781b      	ldrb	r3, [r3, #0]
 801c6b0:	0018      	movs	r0, r3
 801c6b2:	f000 f8a8 	bl	801c806 <USBD_Get_USB_Status>
 801c6b6:	0003      	movs	r3, r0
 801c6b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c6ba:	19bb      	adds	r3, r7, r6
 801c6bc:	781b      	ldrb	r3, [r3, #0]
}
 801c6be:	0018      	movs	r0, r3
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	b005      	add	sp, #20
 801c6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c6c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c6c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6c8:	b087      	sub	sp, #28
 801c6ca:	af00      	add	r7, sp, #0
 801c6cc:	60f8      	str	r0, [r7, #12]
 801c6ce:	0008      	movs	r0, r1
 801c6d0:	607a      	str	r2, [r7, #4]
 801c6d2:	0019      	movs	r1, r3
 801c6d4:	230b      	movs	r3, #11
 801c6d6:	18fb      	adds	r3, r7, r3
 801c6d8:	1c02      	adds	r2, r0, #0
 801c6da:	701a      	strb	r2, [r3, #0]
 801c6dc:	2408      	movs	r4, #8
 801c6de:	193b      	adds	r3, r7, r4
 801c6e0:	1c0a      	adds	r2, r1, #0
 801c6e2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c6e4:	2117      	movs	r1, #23
 801c6e6:	187b      	adds	r3, r7, r1
 801c6e8:	2200      	movs	r2, #0
 801c6ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c6ec:	2516      	movs	r5, #22
 801c6ee:	197b      	adds	r3, r7, r5
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c6f4:	68fa      	ldr	r2, [r7, #12]
 801c6f6:	23b0      	movs	r3, #176	@ 0xb0
 801c6f8:	009b      	lsls	r3, r3, #2
 801c6fa:	58d0      	ldr	r0, [r2, r3]
 801c6fc:	193b      	adds	r3, r7, r4
 801c6fe:	881d      	ldrh	r5, [r3, #0]
 801c700:	000e      	movs	r6, r1
 801c702:	187c      	adds	r4, r7, r1
 801c704:	687a      	ldr	r2, [r7, #4]
 801c706:	230b      	movs	r3, #11
 801c708:	18fb      	adds	r3, r7, r3
 801c70a:	7819      	ldrb	r1, [r3, #0]
 801c70c:	002b      	movs	r3, r5
 801c70e:	f7f6 f9dc 	bl	8012aca <HAL_PCD_EP_Transmit>
 801c712:	0003      	movs	r3, r0
 801c714:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c716:	2516      	movs	r5, #22
 801c718:	197c      	adds	r4, r7, r5
 801c71a:	19bb      	adds	r3, r7, r6
 801c71c:	781b      	ldrb	r3, [r3, #0]
 801c71e:	0018      	movs	r0, r3
 801c720:	f000 f871 	bl	801c806 <USBD_Get_USB_Status>
 801c724:	0003      	movs	r3, r0
 801c726:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c728:	197b      	adds	r3, r7, r5
 801c72a:	781b      	ldrb	r3, [r3, #0]
}
 801c72c:	0018      	movs	r0, r3
 801c72e:	46bd      	mov	sp, r7
 801c730:	b007      	add	sp, #28
 801c732:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c734 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c734:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c736:	b087      	sub	sp, #28
 801c738:	af00      	add	r7, sp, #0
 801c73a:	60f8      	str	r0, [r7, #12]
 801c73c:	0008      	movs	r0, r1
 801c73e:	607a      	str	r2, [r7, #4]
 801c740:	0019      	movs	r1, r3
 801c742:	230b      	movs	r3, #11
 801c744:	18fb      	adds	r3, r7, r3
 801c746:	1c02      	adds	r2, r0, #0
 801c748:	701a      	strb	r2, [r3, #0]
 801c74a:	2408      	movs	r4, #8
 801c74c:	193b      	adds	r3, r7, r4
 801c74e:	1c0a      	adds	r2, r1, #0
 801c750:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c752:	2117      	movs	r1, #23
 801c754:	187b      	adds	r3, r7, r1
 801c756:	2200      	movs	r2, #0
 801c758:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c75a:	2516      	movs	r5, #22
 801c75c:	197b      	adds	r3, r7, r5
 801c75e:	2200      	movs	r2, #0
 801c760:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c762:	68fa      	ldr	r2, [r7, #12]
 801c764:	23b0      	movs	r3, #176	@ 0xb0
 801c766:	009b      	lsls	r3, r3, #2
 801c768:	58d0      	ldr	r0, [r2, r3]
 801c76a:	193b      	adds	r3, r7, r4
 801c76c:	881d      	ldrh	r5, [r3, #0]
 801c76e:	000e      	movs	r6, r1
 801c770:	187c      	adds	r4, r7, r1
 801c772:	687a      	ldr	r2, [r7, #4]
 801c774:	230b      	movs	r3, #11
 801c776:	18fb      	adds	r3, r7, r3
 801c778:	7819      	ldrb	r1, [r3, #0]
 801c77a:	002b      	movs	r3, r5
 801c77c:	f7f6 f955 	bl	8012a2a <HAL_PCD_EP_Receive>
 801c780:	0003      	movs	r3, r0
 801c782:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c784:	2516      	movs	r5, #22
 801c786:	197c      	adds	r4, r7, r5
 801c788:	19bb      	adds	r3, r7, r6
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	0018      	movs	r0, r3
 801c78e:	f000 f83a 	bl	801c806 <USBD_Get_USB_Status>
 801c792:	0003      	movs	r3, r0
 801c794:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c796:	197b      	adds	r3, r7, r5
 801c798:	781b      	ldrb	r3, [r3, #0]
}
 801c79a:	0018      	movs	r0, r3
 801c79c:	46bd      	mov	sp, r7
 801c79e:	b007      	add	sp, #28
 801c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c7a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c7a2:	b580      	push	{r7, lr}
 801c7a4:	b082      	sub	sp, #8
 801c7a6:	af00      	add	r7, sp, #0
 801c7a8:	6078      	str	r0, [r7, #4]
 801c7aa:	000a      	movs	r2, r1
 801c7ac:	1cfb      	adds	r3, r7, #3
 801c7ae:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c7b0:	687a      	ldr	r2, [r7, #4]
 801c7b2:	23b0      	movs	r3, #176	@ 0xb0
 801c7b4:	009b      	lsls	r3, r3, #2
 801c7b6:	58d2      	ldr	r2, [r2, r3]
 801c7b8:	1cfb      	adds	r3, r7, #3
 801c7ba:	781b      	ldrb	r3, [r3, #0]
 801c7bc:	0019      	movs	r1, r3
 801c7be:	0010      	movs	r0, r2
 801c7c0:	f7f6 f96a 	bl	8012a98 <HAL_PCD_EP_GetRxCount>
 801c7c4:	0003      	movs	r3, r0
}
 801c7c6:	0018      	movs	r0, r3
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	b002      	add	sp, #8
 801c7cc:	bd80      	pop	{r7, pc}
	...

0801c7d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c7d0:	b580      	push	{r7, lr}
 801c7d2:	b082      	sub	sp, #8
 801c7d4:	af00      	add	r7, sp, #0
 801c7d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c7d8:	4b02      	ldr	r3, [pc, #8]	@ (801c7e4 <USBD_static_malloc+0x14>)
}
 801c7da:	0018      	movs	r0, r3
 801c7dc:	46bd      	mov	sp, r7
 801c7de:	b002      	add	sp, #8
 801c7e0:	bd80      	pop	{r7, pc}
 801c7e2:	46c0      	nop			@ (mov r8, r8)
 801c7e4:	200035b0 	.word	0x200035b0

0801c7e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c7e8:	b580      	push	{r7, lr}
 801c7ea:	b082      	sub	sp, #8
 801c7ec:	af00      	add	r7, sp, #0
 801c7ee:	6078      	str	r0, [r7, #4]

}
 801c7f0:	46c0      	nop			@ (mov r8, r8)
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	b002      	add	sp, #8
 801c7f6:	bd80      	pop	{r7, pc}

0801c7f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801c7fc:	f7eb fa22 	bl	8007c44 <SystemClock_Config>
}
 801c800:	46c0      	nop			@ (mov r8, r8)
 801c802:	46bd      	mov	sp, r7
 801c804:	bd80      	pop	{r7, pc}

0801c806 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c806:	b580      	push	{r7, lr}
 801c808:	b084      	sub	sp, #16
 801c80a:	af00      	add	r7, sp, #0
 801c80c:	0002      	movs	r2, r0
 801c80e:	1dfb      	adds	r3, r7, #7
 801c810:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c812:	230f      	movs	r3, #15
 801c814:	18fb      	adds	r3, r7, r3
 801c816:	2200      	movs	r2, #0
 801c818:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801c81a:	1dfb      	adds	r3, r7, #7
 801c81c:	781b      	ldrb	r3, [r3, #0]
 801c81e:	2b03      	cmp	r3, #3
 801c820:	d017      	beq.n	801c852 <USBD_Get_USB_Status+0x4c>
 801c822:	dc1b      	bgt.n	801c85c <USBD_Get_USB_Status+0x56>
 801c824:	2b02      	cmp	r3, #2
 801c826:	d00f      	beq.n	801c848 <USBD_Get_USB_Status+0x42>
 801c828:	dc18      	bgt.n	801c85c <USBD_Get_USB_Status+0x56>
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d002      	beq.n	801c834 <USBD_Get_USB_Status+0x2e>
 801c82e:	2b01      	cmp	r3, #1
 801c830:	d005      	beq.n	801c83e <USBD_Get_USB_Status+0x38>
 801c832:	e013      	b.n	801c85c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c834:	230f      	movs	r3, #15
 801c836:	18fb      	adds	r3, r7, r3
 801c838:	2200      	movs	r2, #0
 801c83a:	701a      	strb	r2, [r3, #0]
    break;
 801c83c:	e013      	b.n	801c866 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c83e:	230f      	movs	r3, #15
 801c840:	18fb      	adds	r3, r7, r3
 801c842:	2202      	movs	r2, #2
 801c844:	701a      	strb	r2, [r3, #0]
    break;
 801c846:	e00e      	b.n	801c866 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c848:	230f      	movs	r3, #15
 801c84a:	18fb      	adds	r3, r7, r3
 801c84c:	2201      	movs	r2, #1
 801c84e:	701a      	strb	r2, [r3, #0]
    break;
 801c850:	e009      	b.n	801c866 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c852:	230f      	movs	r3, #15
 801c854:	18fb      	adds	r3, r7, r3
 801c856:	2202      	movs	r2, #2
 801c858:	701a      	strb	r2, [r3, #0]
    break;
 801c85a:	e004      	b.n	801c866 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801c85c:	230f      	movs	r3, #15
 801c85e:	18fb      	adds	r3, r7, r3
 801c860:	2202      	movs	r2, #2
 801c862:	701a      	strb	r2, [r3, #0]
    break;
 801c864:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801c866:	230f      	movs	r3, #15
 801c868:	18fb      	adds	r3, r7, r3
 801c86a:	781b      	ldrb	r3, [r3, #0]
}
 801c86c:	0018      	movs	r0, r3
 801c86e:	46bd      	mov	sp, r7
 801c870:	b004      	add	sp, #16
 801c872:	bd80      	pop	{r7, pc}

0801c874 <arm_cfft_radix4by2_q31>:
 801c874:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c876:	465f      	mov	r7, fp
 801c878:	4656      	mov	r6, sl
 801c87a:	464d      	mov	r5, r9
 801c87c:	4644      	mov	r4, r8
 801c87e:	000b      	movs	r3, r1
 801c880:	b4f0      	push	{r4, r5, r6, r7}
 801c882:	085b      	lsrs	r3, r3, #1
 801c884:	b08f      	sub	sp, #60	@ 0x3c
 801c886:	910a      	str	r1, [sp, #40]	@ 0x28
 801c888:	0007      	movs	r7, r0
 801c88a:	9009      	str	r0, [sp, #36]	@ 0x24
 801c88c:	0011      	movs	r1, r2
 801c88e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c890:	930c      	str	r3, [sp, #48]	@ 0x30
 801c892:	2b00      	cmp	r3, #0
 801c894:	d100      	bne.n	801c898 <arm_cfft_radix4by2_q31+0x24>
 801c896:	e0a0      	b.n	801c9da <arm_cfft_radix4by2_q31+0x166>
 801c898:	0002      	movs	r2, r0
 801c89a:	00db      	lsls	r3, r3, #3
 801c89c:	3204      	adds	r2, #4
 801c89e:	4691      	mov	r9, r2
 801c8a0:	4698      	mov	r8, r3
 801c8a2:	000a      	movs	r2, r1
 801c8a4:	464e      	mov	r6, r9
 801c8a6:	4442      	add	r2, r8
 801c8a8:	4699      	mov	r9, r3
 801c8aa:	4688      	mov	r8, r1
 801c8ac:	9208      	str	r2, [sp, #32]
 801c8ae:	900d      	str	r0, [sp, #52]	@ 0x34
 801c8b0:	4643      	mov	r3, r8
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	469b      	mov	fp, r3
 801c8b6:	4643      	mov	r3, r8
 801c8b8:	685b      	ldr	r3, [r3, #4]
 801c8ba:	469a      	mov	sl, r3
 801c8bc:	683b      	ldr	r3, [r7, #0]
 801c8be:	109c      	asrs	r4, r3, #2
 801c8c0:	464b      	mov	r3, r9
 801c8c2:	58fb      	ldr	r3, [r7, r3]
 801c8c4:	109a      	asrs	r2, r3, #2
 801c8c6:	18a3      	adds	r3, r4, r2
 801c8c8:	603b      	str	r3, [r7, #0]
 801c8ca:	6833      	ldr	r3, [r6, #0]
 801c8cc:	1aa4      	subs	r4, r4, r2
 801c8ce:	109d      	asrs	r5, r3, #2
 801c8d0:	464b      	mov	r3, r9
 801c8d2:	58f3      	ldr	r3, [r6, r3]
 801c8d4:	17e2      	asrs	r2, r4, #31
 801c8d6:	109b      	asrs	r3, r3, #2
 801c8d8:	18e9      	adds	r1, r5, r3
 801c8da:	6031      	str	r1, [r6, #0]
 801c8dc:	0011      	movs	r1, r2
 801c8de:	465a      	mov	r2, fp
 801c8e0:	17d2      	asrs	r2, r2, #31
 801c8e2:	0010      	movs	r0, r2
 801c8e4:	4652      	mov	r2, sl
 801c8e6:	1aed      	subs	r5, r5, r3
 801c8e8:	17eb      	asrs	r3, r5, #31
 801c8ea:	17d2      	asrs	r2, r2, #31
 801c8ec:	9307      	str	r3, [sp, #28]
 801c8ee:	9204      	str	r2, [sp, #16]
 801c8f0:	0003      	movs	r3, r0
 801c8f2:	465a      	mov	r2, fp
 801c8f4:	9006      	str	r0, [sp, #24]
 801c8f6:	0020      	movs	r0, r4
 801c8f8:	9105      	str	r1, [sp, #20]
 801c8fa:	f7e3 fe61 	bl	80005c0 <__aeabi_lmul>
 801c8fe:	2280      	movs	r2, #128	@ 0x80
 801c900:	2300      	movs	r3, #0
 801c902:	0612      	lsls	r2, r2, #24
 801c904:	1880      	adds	r0, r0, r2
 801c906:	4159      	adcs	r1, r3
 801c908:	2300      	movs	r3, #0
 801c90a:	9101      	str	r1, [sp, #4]
 801c90c:	9300      	str	r3, [sp, #0]
 801c90e:	4652      	mov	r2, sl
 801c910:	9b04      	ldr	r3, [sp, #16]
 801c912:	0028      	movs	r0, r5
 801c914:	17e9      	asrs	r1, r5, #31
 801c916:	f7e3 fe53 	bl	80005c0 <__aeabi_lmul>
 801c91a:	9a00      	ldr	r2, [sp, #0]
 801c91c:	9b01      	ldr	r3, [sp, #4]
 801c91e:	1880      	adds	r0, r0, r2
 801c920:	4159      	adcs	r1, r3
 801c922:	2280      	movs	r2, #128	@ 0x80
 801c924:	2300      	movs	r3, #0
 801c926:	0612      	lsls	r2, r2, #24
 801c928:	1880      	adds	r0, r0, r2
 801c92a:	4159      	adcs	r1, r3
 801c92c:	464a      	mov	r2, r9
 801c92e:	004b      	lsls	r3, r1, #1
 801c930:	50bb      	str	r3, [r7, r2]
 801c932:	4658      	mov	r0, fp
 801c934:	002a      	movs	r2, r5
 801c936:	9b07      	ldr	r3, [sp, #28]
 801c938:	9906      	ldr	r1, [sp, #24]
 801c93a:	f7e3 fe41 	bl	80005c0 <__aeabi_lmul>
 801c93e:	2280      	movs	r2, #128	@ 0x80
 801c940:	2300      	movs	r3, #0
 801c942:	0612      	lsls	r2, r2, #24
 801c944:	1880      	adds	r0, r0, r2
 801c946:	4159      	adcs	r1, r3
 801c948:	2000      	movs	r0, #0
 801c94a:	9103      	str	r1, [sp, #12]
 801c94c:	9002      	str	r0, [sp, #8]
 801c94e:	4652      	mov	r2, sl
 801c950:	9b04      	ldr	r3, [sp, #16]
 801c952:	0020      	movs	r0, r4
 801c954:	9905      	ldr	r1, [sp, #20]
 801c956:	f7e3 fe33 	bl	80005c0 <__aeabi_lmul>
 801c95a:	9a02      	ldr	r2, [sp, #8]
 801c95c:	9b03      	ldr	r3, [sp, #12]
 801c95e:	1a12      	subs	r2, r2, r0
 801c960:	418b      	sbcs	r3, r1
 801c962:	2080      	movs	r0, #128	@ 0x80
 801c964:	2100      	movs	r1, #0
 801c966:	0600      	lsls	r0, r0, #24
 801c968:	1812      	adds	r2, r2, r0
 801c96a:	414b      	adcs	r3, r1
 801c96c:	464a      	mov	r2, r9
 801c96e:	005b      	lsls	r3, r3, #1
 801c970:	50b3      	str	r3, [r6, r2]
 801c972:	2308      	movs	r3, #8
 801c974:	469c      	mov	ip, r3
 801c976:	9b08      	ldr	r3, [sp, #32]
 801c978:	44e0      	add	r8, ip
 801c97a:	3708      	adds	r7, #8
 801c97c:	3608      	adds	r6, #8
 801c97e:	4598      	cmp	r8, r3
 801c980:	d196      	bne.n	801c8b0 <arm_cfft_radix4by2_q31+0x3c>
 801c982:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c984:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c986:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c988:	2302      	movs	r3, #2
 801c98a:	003a      	movs	r2, r7
 801c98c:	0029      	movs	r1, r5
 801c98e:	0020      	movs	r0, r4
 801c990:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801c992:	f000 f957 	bl	801cc44 <arm_radix4_butterfly_q31>
 801c996:	46a4      	mov	ip, r4
 801c998:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c99a:	2302      	movs	r3, #2
 801c99c:	0088      	lsls	r0, r1, #2
 801c99e:	4460      	add	r0, ip
 801c9a0:	003a      	movs	r2, r7
 801c9a2:	0029      	movs	r1, r5
 801c9a4:	f000 f94e 	bl	801cc44 <arm_radix4_butterfly_q31>
 801c9a8:	46a4      	mov	ip, r4
 801c9aa:	0128      	lsls	r0, r5, #4
 801c9ac:	4460      	add	r0, ip
 801c9ae:	6833      	ldr	r3, [r6, #0]
 801c9b0:	005b      	lsls	r3, r3, #1
 801c9b2:	6033      	str	r3, [r6, #0]
 801c9b4:	6873      	ldr	r3, [r6, #4]
 801c9b6:	005b      	lsls	r3, r3, #1
 801c9b8:	6073      	str	r3, [r6, #4]
 801c9ba:	68b3      	ldr	r3, [r6, #8]
 801c9bc:	005b      	lsls	r3, r3, #1
 801c9be:	60b3      	str	r3, [r6, #8]
 801c9c0:	68f3      	ldr	r3, [r6, #12]
 801c9c2:	005b      	lsls	r3, r3, #1
 801c9c4:	60f3      	str	r3, [r6, #12]
 801c9c6:	3610      	adds	r6, #16
 801c9c8:	42b0      	cmp	r0, r6
 801c9ca:	d1f0      	bne.n	801c9ae <arm_cfft_radix4by2_q31+0x13a>
 801c9cc:	b00f      	add	sp, #60	@ 0x3c
 801c9ce:	bc3c      	pop	{r2, r3, r4, r5}
 801c9d0:	4690      	mov	r8, r2
 801c9d2:	4699      	mov	r9, r3
 801c9d4:	46a2      	mov	sl, r4
 801c9d6:	46ab      	mov	fp, r5
 801c9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9da:	2302      	movs	r3, #2
 801c9dc:	2100      	movs	r1, #0
 801c9de:	0015      	movs	r5, r2
 801c9e0:	f000 f930 	bl	801cc44 <arm_radix4_butterfly_q31>
 801c9e4:	46bc      	mov	ip, r7
 801c9e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c9e8:	002a      	movs	r2, r5
 801c9ea:	0098      	lsls	r0, r3, #2
 801c9ec:	4460      	add	r0, ip
 801c9ee:	2302      	movs	r3, #2
 801c9f0:	2100      	movs	r1, #0
 801c9f2:	f000 f927 	bl	801cc44 <arm_radix4_butterfly_q31>
 801c9f6:	e7e9      	b.n	801c9cc <arm_cfft_radix4by2_q31+0x158>

0801c9f8 <arm_cfft_radix4by2_inverse_q31>:
 801c9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9fa:	465f      	mov	r7, fp
 801c9fc:	4656      	mov	r6, sl
 801c9fe:	464d      	mov	r5, r9
 801ca00:	4644      	mov	r4, r8
 801ca02:	000b      	movs	r3, r1
 801ca04:	b4f0      	push	{r4, r5, r6, r7}
 801ca06:	085b      	lsrs	r3, r3, #1
 801ca08:	b08f      	sub	sp, #60	@ 0x3c
 801ca0a:	910a      	str	r1, [sp, #40]	@ 0x28
 801ca0c:	0007      	movs	r7, r0
 801ca0e:	9009      	str	r0, [sp, #36]	@ 0x24
 801ca10:	0011      	movs	r1, r2
 801ca12:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ca14:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d100      	bne.n	801ca1c <arm_cfft_radix4by2_inverse_q31+0x24>
 801ca1a:	e0a0      	b.n	801cb5e <arm_cfft_radix4by2_inverse_q31+0x166>
 801ca1c:	0002      	movs	r2, r0
 801ca1e:	00db      	lsls	r3, r3, #3
 801ca20:	3204      	adds	r2, #4
 801ca22:	4691      	mov	r9, r2
 801ca24:	4698      	mov	r8, r3
 801ca26:	000a      	movs	r2, r1
 801ca28:	464e      	mov	r6, r9
 801ca2a:	4442      	add	r2, r8
 801ca2c:	4699      	mov	r9, r3
 801ca2e:	4688      	mov	r8, r1
 801ca30:	9208      	str	r2, [sp, #32]
 801ca32:	900d      	str	r0, [sp, #52]	@ 0x34
 801ca34:	4643      	mov	r3, r8
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	469b      	mov	fp, r3
 801ca3a:	4643      	mov	r3, r8
 801ca3c:	685b      	ldr	r3, [r3, #4]
 801ca3e:	469a      	mov	sl, r3
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	109c      	asrs	r4, r3, #2
 801ca44:	464b      	mov	r3, r9
 801ca46:	58fb      	ldr	r3, [r7, r3]
 801ca48:	109a      	asrs	r2, r3, #2
 801ca4a:	18a3      	adds	r3, r4, r2
 801ca4c:	603b      	str	r3, [r7, #0]
 801ca4e:	6833      	ldr	r3, [r6, #0]
 801ca50:	1aa4      	subs	r4, r4, r2
 801ca52:	109d      	asrs	r5, r3, #2
 801ca54:	464b      	mov	r3, r9
 801ca56:	58f3      	ldr	r3, [r6, r3]
 801ca58:	17e2      	asrs	r2, r4, #31
 801ca5a:	109b      	asrs	r3, r3, #2
 801ca5c:	18e9      	adds	r1, r5, r3
 801ca5e:	6031      	str	r1, [r6, #0]
 801ca60:	0011      	movs	r1, r2
 801ca62:	465a      	mov	r2, fp
 801ca64:	17d2      	asrs	r2, r2, #31
 801ca66:	0010      	movs	r0, r2
 801ca68:	4652      	mov	r2, sl
 801ca6a:	1aed      	subs	r5, r5, r3
 801ca6c:	17eb      	asrs	r3, r5, #31
 801ca6e:	17d2      	asrs	r2, r2, #31
 801ca70:	9307      	str	r3, [sp, #28]
 801ca72:	9204      	str	r2, [sp, #16]
 801ca74:	0003      	movs	r3, r0
 801ca76:	465a      	mov	r2, fp
 801ca78:	9006      	str	r0, [sp, #24]
 801ca7a:	0020      	movs	r0, r4
 801ca7c:	9105      	str	r1, [sp, #20]
 801ca7e:	f7e3 fd9f 	bl	80005c0 <__aeabi_lmul>
 801ca82:	2280      	movs	r2, #128	@ 0x80
 801ca84:	2300      	movs	r3, #0
 801ca86:	0612      	lsls	r2, r2, #24
 801ca88:	1880      	adds	r0, r0, r2
 801ca8a:	4159      	adcs	r1, r3
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	9101      	str	r1, [sp, #4]
 801ca90:	9300      	str	r3, [sp, #0]
 801ca92:	4652      	mov	r2, sl
 801ca94:	9b04      	ldr	r3, [sp, #16]
 801ca96:	0028      	movs	r0, r5
 801ca98:	17e9      	asrs	r1, r5, #31
 801ca9a:	f7e3 fd91 	bl	80005c0 <__aeabi_lmul>
 801ca9e:	9a00      	ldr	r2, [sp, #0]
 801caa0:	9b01      	ldr	r3, [sp, #4]
 801caa2:	1a12      	subs	r2, r2, r0
 801caa4:	418b      	sbcs	r3, r1
 801caa6:	2080      	movs	r0, #128	@ 0x80
 801caa8:	2100      	movs	r1, #0
 801caaa:	0600      	lsls	r0, r0, #24
 801caac:	1812      	adds	r2, r2, r0
 801caae:	414b      	adcs	r3, r1
 801cab0:	464a      	mov	r2, r9
 801cab2:	005b      	lsls	r3, r3, #1
 801cab4:	50bb      	str	r3, [r7, r2]
 801cab6:	4658      	mov	r0, fp
 801cab8:	002a      	movs	r2, r5
 801caba:	9b07      	ldr	r3, [sp, #28]
 801cabc:	9906      	ldr	r1, [sp, #24]
 801cabe:	f7e3 fd7f 	bl	80005c0 <__aeabi_lmul>
 801cac2:	2280      	movs	r2, #128	@ 0x80
 801cac4:	2300      	movs	r3, #0
 801cac6:	0612      	lsls	r2, r2, #24
 801cac8:	1880      	adds	r0, r0, r2
 801caca:	4159      	adcs	r1, r3
 801cacc:	2000      	movs	r0, #0
 801cace:	9103      	str	r1, [sp, #12]
 801cad0:	9002      	str	r0, [sp, #8]
 801cad2:	4652      	mov	r2, sl
 801cad4:	9b04      	ldr	r3, [sp, #16]
 801cad6:	0020      	movs	r0, r4
 801cad8:	9905      	ldr	r1, [sp, #20]
 801cada:	f7e3 fd71 	bl	80005c0 <__aeabi_lmul>
 801cade:	9b02      	ldr	r3, [sp, #8]
 801cae0:	9c03      	ldr	r4, [sp, #12]
 801cae2:	18c0      	adds	r0, r0, r3
 801cae4:	4161      	adcs	r1, r4
 801cae6:	2380      	movs	r3, #128	@ 0x80
 801cae8:	2400      	movs	r4, #0
 801caea:	061b      	lsls	r3, r3, #24
 801caec:	18c0      	adds	r0, r0, r3
 801caee:	4161      	adcs	r1, r4
 801caf0:	464a      	mov	r2, r9
 801caf2:	004b      	lsls	r3, r1, #1
 801caf4:	50b3      	str	r3, [r6, r2]
 801caf6:	2308      	movs	r3, #8
 801caf8:	469c      	mov	ip, r3
 801cafa:	9b08      	ldr	r3, [sp, #32]
 801cafc:	44e0      	add	r8, ip
 801cafe:	3708      	adds	r7, #8
 801cb00:	3608      	adds	r6, #8
 801cb02:	4598      	cmp	r8, r3
 801cb04:	d196      	bne.n	801ca34 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801cb06:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cb08:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cb0a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cb0c:	2302      	movs	r3, #2
 801cb0e:	003a      	movs	r2, r7
 801cb10:	0029      	movs	r1, r5
 801cb12:	0020      	movs	r0, r4
 801cb14:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cb16:	f000 fb3b 	bl	801d190 <arm_radix4_butterfly_inverse_q31>
 801cb1a:	46a4      	mov	ip, r4
 801cb1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cb1e:	2302      	movs	r3, #2
 801cb20:	0088      	lsls	r0, r1, #2
 801cb22:	4460      	add	r0, ip
 801cb24:	003a      	movs	r2, r7
 801cb26:	0029      	movs	r1, r5
 801cb28:	f000 fb32 	bl	801d190 <arm_radix4_butterfly_inverse_q31>
 801cb2c:	46a4      	mov	ip, r4
 801cb2e:	0128      	lsls	r0, r5, #4
 801cb30:	4460      	add	r0, ip
 801cb32:	6833      	ldr	r3, [r6, #0]
 801cb34:	005b      	lsls	r3, r3, #1
 801cb36:	6033      	str	r3, [r6, #0]
 801cb38:	6873      	ldr	r3, [r6, #4]
 801cb3a:	005b      	lsls	r3, r3, #1
 801cb3c:	6073      	str	r3, [r6, #4]
 801cb3e:	68b3      	ldr	r3, [r6, #8]
 801cb40:	005b      	lsls	r3, r3, #1
 801cb42:	60b3      	str	r3, [r6, #8]
 801cb44:	68f3      	ldr	r3, [r6, #12]
 801cb46:	005b      	lsls	r3, r3, #1
 801cb48:	60f3      	str	r3, [r6, #12]
 801cb4a:	3610      	adds	r6, #16
 801cb4c:	42b0      	cmp	r0, r6
 801cb4e:	d1f0      	bne.n	801cb32 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801cb50:	b00f      	add	sp, #60	@ 0x3c
 801cb52:	bc3c      	pop	{r2, r3, r4, r5}
 801cb54:	4690      	mov	r8, r2
 801cb56:	4699      	mov	r9, r3
 801cb58:	46a2      	mov	sl, r4
 801cb5a:	46ab      	mov	fp, r5
 801cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb5e:	2302      	movs	r3, #2
 801cb60:	2100      	movs	r1, #0
 801cb62:	0015      	movs	r5, r2
 801cb64:	f000 fb14 	bl	801d190 <arm_radix4_butterfly_inverse_q31>
 801cb68:	46bc      	mov	ip, r7
 801cb6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cb6c:	002a      	movs	r2, r5
 801cb6e:	0098      	lsls	r0, r3, #2
 801cb70:	4460      	add	r0, ip
 801cb72:	2302      	movs	r3, #2
 801cb74:	2100      	movs	r1, #0
 801cb76:	f000 fb0b 	bl	801d190 <arm_radix4_butterfly_inverse_q31>
 801cb7a:	e7e9      	b.n	801cb50 <arm_cfft_radix4by2_inverse_q31+0x158>

0801cb7c <arm_cfft_q31>:
 801cb7c:	b570      	push	{r4, r5, r6, lr}
 801cb7e:	001e      	movs	r6, r3
 801cb80:	2380      	movs	r3, #128	@ 0x80
 801cb82:	000d      	movs	r5, r1
 801cb84:	0004      	movs	r4, r0
 801cb86:	8801      	ldrh	r1, [r0, #0]
 801cb88:	005b      	lsls	r3, r3, #1
 801cb8a:	2a01      	cmp	r2, #1
 801cb8c:	d028      	beq.n	801cbe0 <arm_cfft_q31+0x64>
 801cb8e:	4299      	cmp	r1, r3
 801cb90:	d020      	beq.n	801cbd4 <arm_cfft_q31+0x58>
 801cb92:	d812      	bhi.n	801cbba <arm_cfft_q31+0x3e>
 801cb94:	2920      	cmp	r1, #32
 801cb96:	d004      	beq.n	801cba2 <arm_cfft_q31+0x26>
 801cb98:	d949      	bls.n	801cc2e <arm_cfft_q31+0xb2>
 801cb9a:	2940      	cmp	r1, #64	@ 0x40
 801cb9c:	d01a      	beq.n	801cbd4 <arm_cfft_q31+0x58>
 801cb9e:	2980      	cmp	r1, #128	@ 0x80
 801cba0:	d103      	bne.n	801cbaa <arm_cfft_q31+0x2e>
 801cba2:	6862      	ldr	r2, [r4, #4]
 801cba4:	0028      	movs	r0, r5
 801cba6:	f7ff fe65 	bl	801c874 <arm_cfft_radix4by2_q31>
 801cbaa:	2e00      	cmp	r6, #0
 801cbac:	d004      	beq.n	801cbb8 <arm_cfft_q31+0x3c>
 801cbae:	68a2      	ldr	r2, [r4, #8]
 801cbb0:	89a1      	ldrh	r1, [r4, #12]
 801cbb2:	0028      	movs	r0, r5
 801cbb4:	f7e3 faa8 	bl	8000108 <arm_bitreversal_32>
 801cbb8:	bd70      	pop	{r4, r5, r6, pc}
 801cbba:	2380      	movs	r3, #128	@ 0x80
 801cbbc:	00db      	lsls	r3, r3, #3
 801cbbe:	4299      	cmp	r1, r3
 801cbc0:	d008      	beq.n	801cbd4 <arm_cfft_q31+0x58>
 801cbc2:	d92f      	bls.n	801cc24 <arm_cfft_q31+0xa8>
 801cbc4:	2380      	movs	r3, #128	@ 0x80
 801cbc6:	011b      	lsls	r3, r3, #4
 801cbc8:	4299      	cmp	r1, r3
 801cbca:	d0ea      	beq.n	801cba2 <arm_cfft_q31+0x26>
 801cbcc:	2380      	movs	r3, #128	@ 0x80
 801cbce:	015b      	lsls	r3, r3, #5
 801cbd0:	4299      	cmp	r1, r3
 801cbd2:	d1ea      	bne.n	801cbaa <arm_cfft_q31+0x2e>
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	6862      	ldr	r2, [r4, #4]
 801cbd8:	0028      	movs	r0, r5
 801cbda:	f000 f833 	bl	801cc44 <arm_radix4_butterfly_q31>
 801cbde:	e7e4      	b.n	801cbaa <arm_cfft_q31+0x2e>
 801cbe0:	4299      	cmp	r1, r3
 801cbe2:	d019      	beq.n	801cc18 <arm_cfft_q31+0x9c>
 801cbe4:	d80b      	bhi.n	801cbfe <arm_cfft_q31+0x82>
 801cbe6:	2920      	cmp	r1, #32
 801cbe8:	d004      	beq.n	801cbf4 <arm_cfft_q31+0x78>
 801cbea:	d928      	bls.n	801cc3e <arm_cfft_q31+0xc2>
 801cbec:	2940      	cmp	r1, #64	@ 0x40
 801cbee:	d013      	beq.n	801cc18 <arm_cfft_q31+0x9c>
 801cbf0:	2980      	cmp	r1, #128	@ 0x80
 801cbf2:	d1da      	bne.n	801cbaa <arm_cfft_q31+0x2e>
 801cbf4:	6862      	ldr	r2, [r4, #4]
 801cbf6:	0028      	movs	r0, r5
 801cbf8:	f7ff fefe 	bl	801c9f8 <arm_cfft_radix4by2_inverse_q31>
 801cbfc:	e7d5      	b.n	801cbaa <arm_cfft_q31+0x2e>
 801cbfe:	2380      	movs	r3, #128	@ 0x80
 801cc00:	00db      	lsls	r3, r3, #3
 801cc02:	4299      	cmp	r1, r3
 801cc04:	d008      	beq.n	801cc18 <arm_cfft_q31+0x9c>
 801cc06:	d915      	bls.n	801cc34 <arm_cfft_q31+0xb8>
 801cc08:	2380      	movs	r3, #128	@ 0x80
 801cc0a:	011b      	lsls	r3, r3, #4
 801cc0c:	4299      	cmp	r1, r3
 801cc0e:	d0f1      	beq.n	801cbf4 <arm_cfft_q31+0x78>
 801cc10:	2380      	movs	r3, #128	@ 0x80
 801cc12:	015b      	lsls	r3, r3, #5
 801cc14:	4299      	cmp	r1, r3
 801cc16:	d1c8      	bne.n	801cbaa <arm_cfft_q31+0x2e>
 801cc18:	2301      	movs	r3, #1
 801cc1a:	6862      	ldr	r2, [r4, #4]
 801cc1c:	0028      	movs	r0, r5
 801cc1e:	f000 fab7 	bl	801d190 <arm_radix4_butterfly_inverse_q31>
 801cc22:	e7c2      	b.n	801cbaa <arm_cfft_q31+0x2e>
 801cc24:	2380      	movs	r3, #128	@ 0x80
 801cc26:	009b      	lsls	r3, r3, #2
 801cc28:	4299      	cmp	r1, r3
 801cc2a:	d0ba      	beq.n	801cba2 <arm_cfft_q31+0x26>
 801cc2c:	e7bd      	b.n	801cbaa <arm_cfft_q31+0x2e>
 801cc2e:	2910      	cmp	r1, #16
 801cc30:	d1bb      	bne.n	801cbaa <arm_cfft_q31+0x2e>
 801cc32:	e7cf      	b.n	801cbd4 <arm_cfft_q31+0x58>
 801cc34:	2380      	movs	r3, #128	@ 0x80
 801cc36:	009b      	lsls	r3, r3, #2
 801cc38:	4299      	cmp	r1, r3
 801cc3a:	d0db      	beq.n	801cbf4 <arm_cfft_q31+0x78>
 801cc3c:	e7b5      	b.n	801cbaa <arm_cfft_q31+0x2e>
 801cc3e:	2910      	cmp	r1, #16
 801cc40:	d1b3      	bne.n	801cbaa <arm_cfft_q31+0x2e>
 801cc42:	e7e9      	b.n	801cc18 <arm_cfft_q31+0x9c>

0801cc44 <arm_radix4_butterfly_q31>:
 801cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc46:	464d      	mov	r5, r9
 801cc48:	4644      	mov	r4, r8
 801cc4a:	465f      	mov	r7, fp
 801cc4c:	4656      	mov	r6, sl
 801cc4e:	469c      	mov	ip, r3
 801cc50:	b4f0      	push	{r4, r5, r6, r7}
 801cc52:	b0a7      	sub	sp, #156	@ 0x9c
 801cc54:	9114      	str	r1, [sp, #80]	@ 0x50
 801cc56:	0889      	lsrs	r1, r1, #2
 801cc58:	9310      	str	r3, [sp, #64]	@ 0x40
 801cc5a:	00cb      	lsls	r3, r1, #3
 801cc5c:	0015      	movs	r5, r2
 801cc5e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801cc60:	18c2      	adds	r2, r0, r3
 801cc62:	000c      	movs	r4, r1
 801cc64:	469a      	mov	sl, r3
 801cc66:	9124      	str	r1, [sp, #144]	@ 0x90
 801cc68:	18d1      	adds	r1, r2, r3
 801cc6a:	4663      	mov	r3, ip
 801cc6c:	468b      	mov	fp, r1
 801cc6e:	0119      	lsls	r1, r3, #4
 801cc70:	910d      	str	r1, [sp, #52]	@ 0x34
 801cc72:	00d9      	lsls	r1, r3, #3
 801cc74:	005b      	lsls	r3, r3, #1
 801cc76:	4463      	add	r3, ip
 801cc78:	910e      	str	r1, [sp, #56]	@ 0x38
 801cc7a:	00d9      	lsls	r1, r3, #3
 801cc7c:	465b      	mov	r3, fp
 801cc7e:	44da      	add	sl, fp
 801cc80:	4690      	mov	r8, r2
 801cc82:	4683      	mov	fp, r0
 801cc84:	4699      	mov	r9, r3
 801cc86:	9022      	str	r0, [sp, #136]	@ 0x88
 801cc88:	9025      	str	r0, [sp, #148]	@ 0x94
 801cc8a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801cc8c:	9502      	str	r5, [sp, #8]
 801cc8e:	9500      	str	r5, [sp, #0]
 801cc90:	9501      	str	r5, [sp, #4]
 801cc92:	9407      	str	r4, [sp, #28]
 801cc94:	465b      	mov	r3, fp
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	4642      	mov	r2, r8
 801cc9a:	111c      	asrs	r4, r3, #4
 801cc9c:	464b      	mov	r3, r9
 801cc9e:	4658      	mov	r0, fp
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	6812      	ldr	r2, [r2, #0]
 801cca4:	111b      	asrs	r3, r3, #4
 801cca6:	18e7      	adds	r7, r4, r3
 801cca8:	1ae3      	subs	r3, r4, r3
 801ccaa:	1114      	asrs	r4, r2, #4
 801ccac:	4652      	mov	r2, sl
 801ccae:	6840      	ldr	r0, [r0, #4]
 801ccb0:	6812      	ldr	r2, [r2, #0]
 801ccb2:	1105      	asrs	r5, r0, #4
 801ccb4:	4648      	mov	r0, r9
 801ccb6:	9303      	str	r3, [sp, #12]
 801ccb8:	1113      	asrs	r3, r2, #4
 801ccba:	18e2      	adds	r2, r4, r3
 801ccbc:	465c      	mov	r4, fp
 801ccbe:	6840      	ldr	r0, [r0, #4]
 801ccc0:	1103      	asrs	r3, r0, #4
 801ccc2:	18ee      	adds	r6, r5, r3
 801ccc4:	1ae8      	subs	r0, r5, r3
 801ccc6:	18bb      	adds	r3, r7, r2
 801ccc8:	6023      	str	r3, [r4, #0]
 801ccca:	4644      	mov	r4, r8
 801cccc:	6864      	ldr	r4, [r4, #4]
 801ccce:	9004      	str	r0, [sp, #16]
 801ccd0:	1125      	asrs	r5, r4, #4
 801ccd2:	4654      	mov	r4, sl
 801ccd4:	6864      	ldr	r4, [r4, #4]
 801ccd6:	1123      	asrs	r3, r4, #4
 801ccd8:	465c      	mov	r4, fp
 801ccda:	18eb      	adds	r3, r5, r3
 801ccdc:	18f1      	adds	r1, r6, r3
 801ccde:	6061      	str	r1, [r4, #4]
 801cce0:	4655      	mov	r5, sl
 801cce2:	4644      	mov	r4, r8
 801cce4:	686d      	ldr	r5, [r5, #4]
 801cce6:	6864      	ldr	r4, [r4, #4]
 801cce8:	1129      	asrs	r1, r5, #4
 801ccea:	1124      	asrs	r4, r4, #4
 801ccec:	1a64      	subs	r4, r4, r1
 801ccee:	4641      	mov	r1, r8
 801ccf0:	6809      	ldr	r1, [r1, #0]
 801ccf2:	9405      	str	r4, [sp, #20]
 801ccf4:	1108      	asrs	r0, r1, #4
 801ccf6:	4651      	mov	r1, sl
 801ccf8:	6809      	ldr	r1, [r1, #0]
 801ccfa:	1abc      	subs	r4, r7, r2
 801ccfc:	1109      	asrs	r1, r1, #4
 801ccfe:	1a41      	subs	r1, r0, r1
 801cd00:	17e2      	asrs	r2, r4, #31
 801cd02:	9106      	str	r1, [sp, #24]
 801cd04:	0011      	movs	r1, r2
 801cd06:	9a01      	ldr	r2, [sp, #4]
 801cd08:	9108      	str	r1, [sp, #32]
 801cd0a:	6817      	ldr	r7, [r2, #0]
 801cd0c:	17fd      	asrs	r5, r7, #31
 801cd0e:	0028      	movs	r0, r5
 801cd10:	1af5      	subs	r5, r6, r3
 801cd12:	17ee      	asrs	r6, r5, #31
 801cd14:	960a      	str	r6, [sp, #40]	@ 0x28
 801cd16:	6856      	ldr	r6, [r2, #4]
 801cd18:	9009      	str	r0, [sp, #36]	@ 0x24
 801cd1a:	17f3      	asrs	r3, r6, #31
 801cd1c:	003a      	movs	r2, r7
 801cd1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cd20:	0003      	movs	r3, r0
 801cd22:	0020      	movs	r0, r4
 801cd24:	f7e3 fc4c 	bl	80005c0 <__aeabi_lmul>
 801cd28:	0032      	movs	r2, r6
 801cd2a:	17f3      	asrs	r3, r6, #31
 801cd2c:	910c      	str	r1, [sp, #48]	@ 0x30
 801cd2e:	0028      	movs	r0, r5
 801cd30:	17e9      	asrs	r1, r5, #31
 801cd32:	f7e3 fc45 	bl	80005c0 <__aeabi_lmul>
 801cd36:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cd38:	002a      	movs	r2, r5
 801cd3a:	4684      	mov	ip, r0
 801cd3c:	4640      	mov	r0, r8
 801cd3e:	4461      	add	r1, ip
 801cd40:	0049      	lsls	r1, r1, #1
 801cd42:	6001      	str	r1, [r0, #0]
 801cd44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cd48:	0038      	movs	r0, r7
 801cd4a:	f7e3 fc39 	bl	80005c0 <__aeabi_lmul>
 801cd4e:	0032      	movs	r2, r6
 801cd50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cd52:	000d      	movs	r5, r1
 801cd54:	0020      	movs	r0, r4
 801cd56:	9908      	ldr	r1, [sp, #32]
 801cd58:	f7e3 fc32 	bl	80005c0 <__aeabi_lmul>
 801cd5c:	4646      	mov	r6, r8
 801cd5e:	1a6d      	subs	r5, r5, r1
 801cd60:	006d      	lsls	r5, r5, #1
 801cd62:	6075      	str	r5, [r6, #4]
 801cd64:	9903      	ldr	r1, [sp, #12]
 801cd66:	9d05      	ldr	r5, [sp, #20]
 801cd68:	000c      	movs	r4, r1
 801cd6a:	46ac      	mov	ip, r5
 801cd6c:	4464      	add	r4, ip
 801cd6e:	17e6      	asrs	r6, r4, #31
 801cd70:	0031      	movs	r1, r6
 801cd72:	9b00      	ldr	r3, [sp, #0]
 801cd74:	9804      	ldr	r0, [sp, #16]
 801cd76:	681e      	ldr	r6, [r3, #0]
 801cd78:	17f7      	asrs	r7, r6, #31
 801cd7a:	9709      	str	r7, [sp, #36]	@ 0x24
 801cd7c:	9f06      	ldr	r7, [sp, #24]
 801cd7e:	0032      	movs	r2, r6
 801cd80:	1bc7      	subs	r7, r0, r7
 801cd82:	17fd      	asrs	r5, r7, #31
 801cd84:	950a      	str	r5, [sp, #40]	@ 0x28
 801cd86:	685d      	ldr	r5, [r3, #4]
 801cd88:	17f3      	asrs	r3, r6, #31
 801cd8a:	17e8      	asrs	r0, r5, #31
 801cd8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801cd8e:	0020      	movs	r0, r4
 801cd90:	9108      	str	r1, [sp, #32]
 801cd92:	f7e3 fc15 	bl	80005c0 <__aeabi_lmul>
 801cd96:	002a      	movs	r2, r5
 801cd98:	17eb      	asrs	r3, r5, #31
 801cd9a:	910c      	str	r1, [sp, #48]	@ 0x30
 801cd9c:	0038      	movs	r0, r7
 801cd9e:	17f9      	asrs	r1, r7, #31
 801cda0:	f7e3 fc0e 	bl	80005c0 <__aeabi_lmul>
 801cda4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cda6:	003a      	movs	r2, r7
 801cda8:	4684      	mov	ip, r0
 801cdaa:	4648      	mov	r0, r9
 801cdac:	4461      	add	r1, ip
 801cdae:	0049      	lsls	r1, r1, #1
 801cdb0:	6001      	str	r1, [r0, #0]
 801cdb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdb4:	0030      	movs	r0, r6
 801cdb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cdb8:	f7e3 fc02 	bl	80005c0 <__aeabi_lmul>
 801cdbc:	002a      	movs	r2, r5
 801cdbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cdc0:	000e      	movs	r6, r1
 801cdc2:	0020      	movs	r0, r4
 801cdc4:	9908      	ldr	r1, [sp, #32]
 801cdc6:	f7e3 fbfb 	bl	80005c0 <__aeabi_lmul>
 801cdca:	464c      	mov	r4, r9
 801cdcc:	9d05      	ldr	r5, [sp, #20]
 801cdce:	1a76      	subs	r6, r6, r1
 801cdd0:	9903      	ldr	r1, [sp, #12]
 801cdd2:	0076      	lsls	r6, r6, #1
 801cdd4:	6066      	str	r6, [r4, #4]
 801cdd6:	1b4c      	subs	r4, r1, r5
 801cdd8:	9e06      	ldr	r6, [sp, #24]
 801cdda:	17e1      	asrs	r1, r4, #31
 801cddc:	9103      	str	r1, [sp, #12]
 801cdde:	9902      	ldr	r1, [sp, #8]
 801cde0:	46b4      	mov	ip, r6
 801cde2:	680f      	ldr	r7, [r1, #0]
 801cde4:	9804      	ldr	r0, [sp, #16]
 801cde6:	17fd      	asrs	r5, r7, #31
 801cde8:	002b      	movs	r3, r5
 801cdea:	684e      	ldr	r6, [r1, #4]
 801cdec:	4460      	add	r0, ip
 801cdee:	0005      	movs	r5, r0
 801cdf0:	17c0      	asrs	r0, r0, #31
 801cdf2:	9005      	str	r0, [sp, #20]
 801cdf4:	17f0      	asrs	r0, r6, #31
 801cdf6:	9006      	str	r0, [sp, #24]
 801cdf8:	003a      	movs	r2, r7
 801cdfa:	0020      	movs	r0, r4
 801cdfc:	17e1      	asrs	r1, r4, #31
 801cdfe:	9304      	str	r3, [sp, #16]
 801ce00:	f7e3 fbde 	bl	80005c0 <__aeabi_lmul>
 801ce04:	0032      	movs	r2, r6
 801ce06:	9108      	str	r1, [sp, #32]
 801ce08:	17f3      	asrs	r3, r6, #31
 801ce0a:	0028      	movs	r0, r5
 801ce0c:	17e9      	asrs	r1, r5, #31
 801ce0e:	f7e3 fbd7 	bl	80005c0 <__aeabi_lmul>
 801ce12:	9808      	ldr	r0, [sp, #32]
 801ce14:	002a      	movs	r2, r5
 801ce16:	4684      	mov	ip, r0
 801ce18:	4650      	mov	r0, sl
 801ce1a:	4461      	add	r1, ip
 801ce1c:	0049      	lsls	r1, r1, #1
 801ce1e:	6001      	str	r1, [r0, #0]
 801ce20:	9b05      	ldr	r3, [sp, #20]
 801ce22:	9904      	ldr	r1, [sp, #16]
 801ce24:	0038      	movs	r0, r7
 801ce26:	f7e3 fbcb 	bl	80005c0 <__aeabi_lmul>
 801ce2a:	0020      	movs	r0, r4
 801ce2c:	2408      	movs	r4, #8
 801ce2e:	000d      	movs	r5, r1
 801ce30:	0032      	movs	r2, r6
 801ce32:	9b06      	ldr	r3, [sp, #24]
 801ce34:	9903      	ldr	r1, [sp, #12]
 801ce36:	f7e3 fbc3 	bl	80005c0 <__aeabi_lmul>
 801ce3a:	46a4      	mov	ip, r4
 801ce3c:	4650      	mov	r0, sl
 801ce3e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ce40:	44e3      	add	fp, ip
 801ce42:	44e0      	add	r8, ip
 801ce44:	44e1      	add	r9, ip
 801ce46:	44e2      	add	sl, ip
 801ce48:	46a4      	mov	ip, r4
 801ce4a:	1a6d      	subs	r5, r5, r1
 801ce4c:	006d      	lsls	r5, r5, #1
 801ce4e:	9a01      	ldr	r2, [sp, #4]
 801ce50:	6045      	str	r5, [r0, #4]
 801ce52:	9807      	ldr	r0, [sp, #28]
 801ce54:	4462      	add	r2, ip
 801ce56:	3801      	subs	r0, #1
 801ce58:	9201      	str	r2, [sp, #4]
 801ce5a:	9007      	str	r0, [sp, #28]
 801ce5c:	9b00      	ldr	r3, [sp, #0]
 801ce5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ce60:	9902      	ldr	r1, [sp, #8]
 801ce62:	4694      	mov	ip, r2
 801ce64:	4463      	add	r3, ip
 801ce66:	9300      	str	r3, [sp, #0]
 801ce68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce6a:	469c      	mov	ip, r3
 801ce6c:	4461      	add	r1, ip
 801ce6e:	9102      	str	r1, [sp, #8]
 801ce70:	2800      	cmp	r0, #0
 801ce72:	d000      	beq.n	801ce76 <arm_radix4_butterfly_q31+0x232>
 801ce74:	e70e      	b.n	801cc94 <arm_radix4_butterfly_q31+0x50>
 801ce76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce78:	009b      	lsls	r3, r3, #2
 801ce7a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ce7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce7e:	9320      	str	r3, [sp, #128]	@ 0x80
 801ce80:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ce82:	2b04      	cmp	r3, #4
 801ce84:	d800      	bhi.n	801ce88 <arm_radix4_butterfly_q31+0x244>
 801ce86:	e180      	b.n	801d18a <arm_radix4_butterfly_q31+0x546>
 801ce88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ce8a:	0893      	lsrs	r3, r2, #2
 801ce8c:	1e59      	subs	r1, r3, #1
 801ce8e:	9321      	str	r3, [sp, #132]	@ 0x84
 801ce90:	00db      	lsls	r3, r3, #3
 801ce92:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ce94:	00d3      	lsls	r3, r2, #3
 801ce96:	9300      	str	r3, [sp, #0]
 801ce98:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ce9a:	911a      	str	r1, [sp, #104]	@ 0x68
 801ce9c:	00da      	lsls	r2, r3, #3
 801ce9e:	921e      	str	r2, [sp, #120]	@ 0x78
 801cea0:	011a      	lsls	r2, r3, #4
 801cea2:	921d      	str	r2, [sp, #116]	@ 0x74
 801cea4:	001a      	movs	r2, r3
 801cea6:	4694      	mov	ip, r2
 801cea8:	005b      	lsls	r3, r3, #1
 801ceaa:	4463      	add	r3, ip
 801ceac:	00db      	lsls	r3, r3, #3
 801ceae:	931c      	str	r3, [sp, #112]	@ 0x70
 801ceb0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ceb2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ceb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ceb6:	9318      	str	r3, [sp, #96]	@ 0x60
 801ceb8:	9319      	str	r3, [sp, #100]	@ 0x64
 801ceba:	9316      	str	r3, [sp, #88]	@ 0x58
 801cebc:	2300      	movs	r3, #0
 801cebe:	9315      	str	r3, [sp, #84]	@ 0x54
 801cec0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cec2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cec4:	681a      	ldr	r2, [r3, #0]
 801cec6:	685b      	ldr	r3, [r3, #4]
 801cec8:	9205      	str	r2, [sp, #20]
 801ceca:	9306      	str	r3, [sp, #24]
 801cecc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cece:	468c      	mov	ip, r1
 801ced0:	681a      	ldr	r2, [r3, #0]
 801ced2:	685b      	ldr	r3, [r3, #4]
 801ced4:	9207      	str	r2, [sp, #28]
 801ced6:	9308      	str	r3, [sp, #32]
 801ced8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ceda:	681a      	ldr	r2, [r3, #0]
 801cedc:	685b      	ldr	r3, [r3, #4]
 801cede:	9209      	str	r2, [sp, #36]	@ 0x24
 801cee0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801cee2:	930a      	str	r3, [sp, #40]	@ 0x28
 801cee4:	0013      	movs	r3, r2
 801cee6:	4463      	add	r3, ip
 801cee8:	4698      	mov	r8, r3
 801ceea:	0013      	movs	r3, r2
 801ceec:	4442      	add	r2, r8
 801ceee:	4691      	mov	r9, r2
 801cef0:	001a      	movs	r2, r3
 801cef2:	444a      	add	r2, r9
 801cef4:	4692      	mov	sl, r2
 801cef6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cef8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cefa:	4293      	cmp	r3, r2
 801cefc:	d800      	bhi.n	801cf00 <arm_radix4_butterfly_q31+0x2bc>
 801cefe:	e0dd      	b.n	801d0bc <arm_radix4_butterfly_q31+0x478>
 801cf00:	4694      	mov	ip, r2
 801cf02:	468b      	mov	fp, r1
 801cf04:	4644      	mov	r4, r8
 801cf06:	4655      	mov	r5, sl
 801cf08:	9b07      	ldr	r3, [sp, #28]
 801cf0a:	17db      	asrs	r3, r3, #31
 801cf0c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cf0e:	9b08      	ldr	r3, [sp, #32]
 801cf10:	17db      	asrs	r3, r3, #31
 801cf12:	930d      	str	r3, [sp, #52]	@ 0x34
 801cf14:	9b05      	ldr	r3, [sp, #20]
 801cf16:	17db      	asrs	r3, r3, #31
 801cf18:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf1a:	9b06      	ldr	r3, [sp, #24]
 801cf1c:	17db      	asrs	r3, r3, #31
 801cf1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf22:	17db      	asrs	r3, r3, #31
 801cf24:	9310      	str	r3, [sp, #64]	@ 0x40
 801cf26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf28:	17db      	asrs	r3, r3, #31
 801cf2a:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cf2e:	4463      	add	r3, ip
 801cf30:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cf32:	465b      	mov	r3, fp
 801cf34:	4659      	mov	r1, fp
 801cf36:	681a      	ldr	r2, [r3, #0]
 801cf38:	464b      	mov	r3, r9
 801cf3a:	684f      	ldr	r7, [r1, #4]
 801cf3c:	4649      	mov	r1, r9
 801cf3e:	681b      	ldr	r3, [r3, #0]
 801cf40:	18d6      	adds	r6, r2, r3
 801cf42:	1ad3      	subs	r3, r2, r3
 801cf44:	9301      	str	r3, [sp, #4]
 801cf46:	684b      	ldr	r3, [r1, #4]
 801cf48:	18f8      	adds	r0, r7, r3
 801cf4a:	1af9      	subs	r1, r7, r3
 801cf4c:	6827      	ldr	r7, [r4, #0]
 801cf4e:	9102      	str	r1, [sp, #8]
 801cf50:	003a      	movs	r2, r7
 801cf52:	682f      	ldr	r7, [r5, #0]
 801cf54:	46bc      	mov	ip, r7
 801cf56:	465f      	mov	r7, fp
 801cf58:	4462      	add	r2, ip
 801cf5a:	18b3      	adds	r3, r6, r2
 801cf5c:	109b      	asrs	r3, r3, #2
 801cf5e:	603b      	str	r3, [r7, #0]
 801cf60:	6867      	ldr	r7, [r4, #4]
 801cf62:	1ab6      	subs	r6, r6, r2
 801cf64:	46b8      	mov	r8, r7
 801cf66:	686f      	ldr	r7, [r5, #4]
 801cf68:	17f2      	asrs	r2, r6, #31
 801cf6a:	46bc      	mov	ip, r7
 801cf6c:	44e0      	add	r8, ip
 801cf6e:	4643      	mov	r3, r8
 801cf70:	465f      	mov	r7, fp
 801cf72:	18c1      	adds	r1, r0, r3
 801cf74:	1089      	asrs	r1, r1, #2
 801cf76:	6079      	str	r1, [r7, #4]
 801cf78:	9900      	ldr	r1, [sp, #0]
 801cf7a:	4690      	mov	r8, r2
 801cf7c:	468c      	mov	ip, r1
 801cf7e:	6867      	ldr	r7, [r4, #4]
 801cf80:	6869      	ldr	r1, [r5, #4]
 801cf82:	44e3      	add	fp, ip
 801cf84:	1a7f      	subs	r7, r7, r1
 801cf86:	9703      	str	r7, [sp, #12]
 801cf88:	6829      	ldr	r1, [r5, #0]
 801cf8a:	6827      	ldr	r7, [r4, #0]
 801cf8c:	1a7f      	subs	r7, r7, r1
 801cf8e:	9704      	str	r7, [sp, #16]
 801cf90:	1ac7      	subs	r7, r0, r3
 801cf92:	17fa      	asrs	r2, r7, #31
 801cf94:	4692      	mov	sl, r2
 801cf96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cf98:	9a07      	ldr	r2, [sp, #28]
 801cf9a:	0030      	movs	r0, r6
 801cf9c:	4641      	mov	r1, r8
 801cf9e:	f7e3 fb0f 	bl	80005c0 <__aeabi_lmul>
 801cfa2:	9a08      	ldr	r2, [sp, #32]
 801cfa4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cfa6:	9112      	str	r1, [sp, #72]	@ 0x48
 801cfa8:	0038      	movs	r0, r7
 801cfaa:	4651      	mov	r1, sl
 801cfac:	f7e3 fb08 	bl	80005c0 <__aeabi_lmul>
 801cfb0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cfb2:	9a07      	ldr	r2, [sp, #28]
 801cfb4:	4684      	mov	ip, r0
 801cfb6:	4461      	add	r1, ip
 801cfb8:	1049      	asrs	r1, r1, #1
 801cfba:	6021      	str	r1, [r4, #0]
 801cfbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfbe:	0038      	movs	r0, r7
 801cfc0:	4651      	mov	r1, sl
 801cfc2:	f7e3 fafd 	bl	80005c0 <__aeabi_lmul>
 801cfc6:	9a08      	ldr	r2, [sp, #32]
 801cfc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cfca:	000f      	movs	r7, r1
 801cfcc:	0030      	movs	r0, r6
 801cfce:	4641      	mov	r1, r8
 801cfd0:	f7e3 faf6 	bl	80005c0 <__aeabi_lmul>
 801cfd4:	9b00      	ldr	r3, [sp, #0]
 801cfd6:	9a01      	ldr	r2, [sp, #4]
 801cfd8:	469c      	mov	ip, r3
 801cfda:	9803      	ldr	r0, [sp, #12]
 801cfdc:	1a7f      	subs	r7, r7, r1
 801cfde:	107f      	asrs	r7, r7, #1
 801cfe0:	6067      	str	r7, [r4, #4]
 801cfe2:	0016      	movs	r6, r2
 801cfe4:	4464      	add	r4, ip
 801cfe6:	4684      	mov	ip, r0
 801cfe8:	4466      	add	r6, ip
 801cfea:	17f2      	asrs	r2, r6, #31
 801cfec:	4690      	mov	r8, r2
 801cfee:	9902      	ldr	r1, [sp, #8]
 801cff0:	9f04      	ldr	r7, [sp, #16]
 801cff2:	0030      	movs	r0, r6
 801cff4:	1bcf      	subs	r7, r1, r7
 801cff6:	17fa      	asrs	r2, r7, #31
 801cff8:	4692      	mov	sl, r2
 801cffa:	4641      	mov	r1, r8
 801cffc:	9a05      	ldr	r2, [sp, #20]
 801cffe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d000:	f7e3 fade 	bl	80005c0 <__aeabi_lmul>
 801d004:	9a06      	ldr	r2, [sp, #24]
 801d006:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d008:	9112      	str	r1, [sp, #72]	@ 0x48
 801d00a:	0038      	movs	r0, r7
 801d00c:	4651      	mov	r1, sl
 801d00e:	f7e3 fad7 	bl	80005c0 <__aeabi_lmul>
 801d012:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d014:	9a05      	ldr	r2, [sp, #20]
 801d016:	4684      	mov	ip, r0
 801d018:	4648      	mov	r0, r9
 801d01a:	4461      	add	r1, ip
 801d01c:	1049      	asrs	r1, r1, #1
 801d01e:	6001      	str	r1, [r0, #0]
 801d020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d022:	0038      	movs	r0, r7
 801d024:	4651      	mov	r1, sl
 801d026:	f7e3 facb 	bl	80005c0 <__aeabi_lmul>
 801d02a:	9a06      	ldr	r2, [sp, #24]
 801d02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d02e:	000f      	movs	r7, r1
 801d030:	0030      	movs	r0, r6
 801d032:	4641      	mov	r1, r8
 801d034:	f7e3 fac4 	bl	80005c0 <__aeabi_lmul>
 801d038:	464e      	mov	r6, r9
 801d03a:	9a00      	ldr	r2, [sp, #0]
 801d03c:	9b01      	ldr	r3, [sp, #4]
 801d03e:	4694      	mov	ip, r2
 801d040:	9803      	ldr	r0, [sp, #12]
 801d042:	1a7f      	subs	r7, r7, r1
 801d044:	107f      	asrs	r7, r7, #1
 801d046:	6077      	str	r7, [r6, #4]
 801d048:	1a1e      	subs	r6, r3, r0
 801d04a:	9b04      	ldr	r3, [sp, #16]
 801d04c:	44e1      	add	r9, ip
 801d04e:	469c      	mov	ip, r3
 801d050:	17f0      	asrs	r0, r6, #31
 801d052:	4680      	mov	r8, r0
 801d054:	9902      	ldr	r1, [sp, #8]
 801d056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d058:	4461      	add	r1, ip
 801d05a:	17cb      	asrs	r3, r1, #31
 801d05c:	000f      	movs	r7, r1
 801d05e:	469a      	mov	sl, r3
 801d060:	0030      	movs	r0, r6
 801d062:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d064:	4641      	mov	r1, r8
 801d066:	f7e3 faab 	bl	80005c0 <__aeabi_lmul>
 801d06a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d06c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d06e:	9101      	str	r1, [sp, #4]
 801d070:	0038      	movs	r0, r7
 801d072:	4651      	mov	r1, sl
 801d074:	f7e3 faa4 	bl	80005c0 <__aeabi_lmul>
 801d078:	9801      	ldr	r0, [sp, #4]
 801d07a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d07c:	4684      	mov	ip, r0
 801d07e:	4461      	add	r1, ip
 801d080:	1049      	asrs	r1, r1, #1
 801d082:	6029      	str	r1, [r5, #0]
 801d084:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d086:	0038      	movs	r0, r7
 801d088:	4651      	mov	r1, sl
 801d08a:	f7e3 fa99 	bl	80005c0 <__aeabi_lmul>
 801d08e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d090:	000f      	movs	r7, r1
 801d092:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d094:	0030      	movs	r0, r6
 801d096:	4641      	mov	r1, r8
 801d098:	f7e3 fa92 	bl	80005c0 <__aeabi_lmul>
 801d09c:	1a7f      	subs	r7, r7, r1
 801d09e:	107f      	asrs	r7, r7, #1
 801d0a0:	606f      	str	r7, [r5, #4]
 801d0a2:	9a00      	ldr	r2, [sp, #0]
 801d0a4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d0a6:	4694      	mov	ip, r2
 801d0a8:	4465      	add	r5, ip
 801d0aa:	468c      	mov	ip, r1
 801d0ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d0ae:	0013      	movs	r3, r2
 801d0b0:	4462      	add	r2, ip
 801d0b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d0b4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d900      	bls.n	801d0bc <arm_radix4_butterfly_q31+0x478>
 801d0ba:	e73a      	b.n	801cf32 <arm_radix4_butterfly_q31+0x2ee>
 801d0bc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d0be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d0c0:	468c      	mov	ip, r1
 801d0c2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d0c4:	4462      	add	r2, ip
 801d0c6:	468c      	mov	ip, r1
 801d0c8:	9216      	str	r2, [sp, #88]	@ 0x58
 801d0ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d0cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d0ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d0d0:	4462      	add	r2, ip
 801d0d2:	468c      	mov	ip, r1
 801d0d4:	9219      	str	r2, [sp, #100]	@ 0x64
 801d0d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d0d8:	3301      	adds	r3, #1
 801d0da:	4462      	add	r2, ip
 801d0dc:	9218      	str	r2, [sp, #96]	@ 0x60
 801d0de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d0e0:	9315      	str	r3, [sp, #84]	@ 0x54
 801d0e2:	3208      	adds	r2, #8
 801d0e4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d0e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d0e8:	4293      	cmp	r3, r2
 801d0ea:	d800      	bhi.n	801d0ee <arm_radix4_butterfly_q31+0x4aa>
 801d0ec:	e6e8      	b.n	801cec0 <arm_radix4_butterfly_q31+0x27c>
 801d0ee:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d0f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d0f2:	009b      	lsls	r3, r3, #2
 801d0f4:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d0f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d0f8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d0fa:	089b      	lsrs	r3, r3, #2
 801d0fc:	9320      	str	r3, [sp, #128]	@ 0x80
 801d0fe:	2b04      	cmp	r3, #4
 801d100:	d900      	bls.n	801d104 <arm_radix4_butterfly_q31+0x4c0>
 801d102:	e6c1      	b.n	801ce88 <arm_radix4_butterfly_q31+0x244>
 801d104:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d106:	469a      	mov	sl, r3
 801d108:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d10a:	691c      	ldr	r4, [r3, #16]
 801d10c:	685a      	ldr	r2, [r3, #4]
 801d10e:	46a1      	mov	r9, r4
 801d110:	4690      	mov	r8, r2
 801d112:	6819      	ldr	r1, [r3, #0]
 801d114:	689a      	ldr	r2, [r3, #8]
 801d116:	699f      	ldr	r7, [r3, #24]
 801d118:	188d      	adds	r5, r1, r2
 801d11a:	444d      	add	r5, r9
 801d11c:	19ed      	adds	r5, r5, r7
 801d11e:	69de      	ldr	r6, [r3, #28]
 801d120:	601d      	str	r5, [r3, #0]
 801d122:	4645      	mov	r5, r8
 801d124:	46b4      	mov	ip, r6
 801d126:	68d8      	ldr	r0, [r3, #12]
 801d128:	695c      	ldr	r4, [r3, #20]
 801d12a:	182d      	adds	r5, r5, r0
 801d12c:	192d      	adds	r5, r5, r4
 801d12e:	4465      	add	r5, ip
 801d130:	605d      	str	r5, [r3, #4]
 801d132:	1a8d      	subs	r5, r1, r2
 801d134:	444d      	add	r5, r9
 801d136:	1bed      	subs	r5, r5, r7
 801d138:	609d      	str	r5, [r3, #8]
 801d13a:	4645      	mov	r5, r8
 801d13c:	1a2d      	subs	r5, r5, r0
 801d13e:	192d      	adds	r5, r5, r4
 801d140:	1bad      	subs	r5, r5, r6
 801d142:	464e      	mov	r6, r9
 801d144:	60dd      	str	r5, [r3, #12]
 801d146:	180d      	adds	r5, r1, r0
 801d148:	1bad      	subs	r5, r5, r6
 801d14a:	4666      	mov	r6, ip
 801d14c:	1bad      	subs	r5, r5, r6
 801d14e:	611d      	str	r5, [r3, #16]
 801d150:	4645      	mov	r5, r8
 801d152:	1aad      	subs	r5, r5, r2
 801d154:	4442      	add	r2, r8
 801d156:	1b12      	subs	r2, r2, r4
 801d158:	1bd2      	subs	r2, r2, r7
 801d15a:	1a08      	subs	r0, r1, r0
 801d15c:	61da      	str	r2, [r3, #28]
 801d15e:	4649      	mov	r1, r9
 801d160:	2201      	movs	r2, #1
 801d162:	1a41      	subs	r1, r0, r1
 801d164:	4252      	negs	r2, r2
 801d166:	4461      	add	r1, ip
 801d168:	4694      	mov	ip, r2
 801d16a:	44e2      	add	sl, ip
 801d16c:	4652      	mov	r2, sl
 801d16e:	1b2d      	subs	r5, r5, r4
 801d170:	19ed      	adds	r5, r5, r7
 801d172:	615d      	str	r5, [r3, #20]
 801d174:	6199      	str	r1, [r3, #24]
 801d176:	3320      	adds	r3, #32
 801d178:	2a00      	cmp	r2, #0
 801d17a:	d1c6      	bne.n	801d10a <arm_radix4_butterfly_q31+0x4c6>
 801d17c:	b027      	add	sp, #156	@ 0x9c
 801d17e:	bc3c      	pop	{r2, r3, r4, r5}
 801d180:	4690      	mov	r8, r2
 801d182:	4699      	mov	r9, r3
 801d184:	46a2      	mov	sl, r4
 801d186:	46ab      	mov	fp, r5
 801d188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d18a:	469a      	mov	sl, r3
 801d18c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d18e:	e7bc      	b.n	801d10a <arm_radix4_butterfly_q31+0x4c6>

0801d190 <arm_radix4_butterfly_inverse_q31>:
 801d190:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d192:	464d      	mov	r5, r9
 801d194:	4644      	mov	r4, r8
 801d196:	465f      	mov	r7, fp
 801d198:	4656      	mov	r6, sl
 801d19a:	b4f0      	push	{r4, r5, r6, r7}
 801d19c:	b0a7      	sub	sp, #156	@ 0x9c
 801d19e:	469c      	mov	ip, r3
 801d1a0:	9114      	str	r1, [sp, #80]	@ 0x50
 801d1a2:	0889      	lsrs	r1, r1, #2
 801d1a4:	9310      	str	r3, [sp, #64]	@ 0x40
 801d1a6:	00cb      	lsls	r3, r1, #3
 801d1a8:	0015      	movs	r5, r2
 801d1aa:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d1ac:	18c2      	adds	r2, r0, r3
 801d1ae:	000c      	movs	r4, r1
 801d1b0:	9124      	str	r1, [sp, #144]	@ 0x90
 801d1b2:	18d1      	adds	r1, r2, r3
 801d1b4:	468b      	mov	fp, r1
 801d1b6:	469a      	mov	sl, r3
 801d1b8:	4663      	mov	r3, ip
 801d1ba:	44da      	add	sl, fp
 801d1bc:	46d0      	mov	r8, sl
 801d1be:	4681      	mov	r9, r0
 801d1c0:	4692      	mov	sl, r2
 801d1c2:	0119      	lsls	r1, r3, #4
 801d1c4:	910d      	str	r1, [sp, #52]	@ 0x34
 801d1c6:	00d9      	lsls	r1, r3, #3
 801d1c8:	005b      	lsls	r3, r3, #1
 801d1ca:	4463      	add	r3, ip
 801d1cc:	910e      	str	r1, [sp, #56]	@ 0x38
 801d1ce:	00d9      	lsls	r1, r3, #3
 801d1d0:	9022      	str	r0, [sp, #136]	@ 0x88
 801d1d2:	9025      	str	r0, [sp, #148]	@ 0x94
 801d1d4:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d1d6:	9502      	str	r5, [sp, #8]
 801d1d8:	9500      	str	r5, [sp, #0]
 801d1da:	9501      	str	r5, [sp, #4]
 801d1dc:	9409      	str	r4, [sp, #36]	@ 0x24
 801d1de:	464b      	mov	r3, r9
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	4652      	mov	r2, sl
 801d1e4:	111c      	asrs	r4, r3, #4
 801d1e6:	465b      	mov	r3, fp
 801d1e8:	4648      	mov	r0, r9
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	6812      	ldr	r2, [r2, #0]
 801d1ee:	6840      	ldr	r0, [r0, #4]
 801d1f0:	111b      	asrs	r3, r3, #4
 801d1f2:	18e7      	adds	r7, r4, r3
 801d1f4:	1ae3      	subs	r3, r4, r3
 801d1f6:	1114      	asrs	r4, r2, #4
 801d1f8:	4642      	mov	r2, r8
 801d1fa:	1105      	asrs	r5, r0, #4
 801d1fc:	4658      	mov	r0, fp
 801d1fe:	6812      	ldr	r2, [r2, #0]
 801d200:	6840      	ldr	r0, [r0, #4]
 801d202:	9303      	str	r3, [sp, #12]
 801d204:	1113      	asrs	r3, r2, #4
 801d206:	18e2      	adds	r2, r4, r3
 801d208:	1103      	asrs	r3, r0, #4
 801d20a:	18ee      	adds	r6, r5, r3
 801d20c:	1ae8      	subs	r0, r5, r3
 801d20e:	464d      	mov	r5, r9
 801d210:	18bb      	adds	r3, r7, r2
 801d212:	602b      	str	r3, [r5, #0]
 801d214:	4641      	mov	r1, r8
 801d216:	4655      	mov	r5, sl
 801d218:	6849      	ldr	r1, [r1, #4]
 801d21a:	686d      	ldr	r5, [r5, #4]
 801d21c:	110b      	asrs	r3, r1, #4
 801d21e:	112d      	asrs	r5, r5, #4
 801d220:	18eb      	adds	r3, r5, r3
 801d222:	464d      	mov	r5, r9
 801d224:	18f1      	adds	r1, r6, r3
 801d226:	6069      	str	r1, [r5, #4]
 801d228:	4655      	mov	r5, sl
 801d22a:	686d      	ldr	r5, [r5, #4]
 801d22c:	9004      	str	r0, [sp, #16]
 801d22e:	112c      	asrs	r4, r5, #4
 801d230:	4645      	mov	r5, r8
 801d232:	686d      	ldr	r5, [r5, #4]
 801d234:	1129      	asrs	r1, r5, #4
 801d236:	1a65      	subs	r5, r4, r1
 801d238:	4651      	mov	r1, sl
 801d23a:	6809      	ldr	r1, [r1, #0]
 801d23c:	1abc      	subs	r4, r7, r2
 801d23e:	1108      	asrs	r0, r1, #4
 801d240:	4641      	mov	r1, r8
 801d242:	17e2      	asrs	r2, r4, #31
 801d244:	6809      	ldr	r1, [r1, #0]
 801d246:	9207      	str	r2, [sp, #28]
 801d248:	9a01      	ldr	r2, [sp, #4]
 801d24a:	1109      	asrs	r1, r1, #4
 801d24c:	6817      	ldr	r7, [r2, #0]
 801d24e:	1a41      	subs	r1, r0, r1
 801d250:	9106      	str	r1, [sp, #24]
 801d252:	0039      	movs	r1, r7
 801d254:	17ff      	asrs	r7, r7, #31
 801d256:	0038      	movs	r0, r7
 801d258:	9505      	str	r5, [sp, #20]
 801d25a:	1af5      	subs	r5, r6, r3
 801d25c:	17ef      	asrs	r7, r5, #31
 801d25e:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d260:	6857      	ldr	r7, [r2, #4]
 801d262:	0003      	movs	r3, r0
 801d264:	17fe      	asrs	r6, r7, #31
 801d266:	000a      	movs	r2, r1
 801d268:	9108      	str	r1, [sp, #32]
 801d26a:	900a      	str	r0, [sp, #40]	@ 0x28
 801d26c:	17e1      	asrs	r1, r4, #31
 801d26e:	0020      	movs	r0, r4
 801d270:	960c      	str	r6, [sp, #48]	@ 0x30
 801d272:	f7e3 f9a5 	bl	80005c0 <__aeabi_lmul>
 801d276:	003a      	movs	r2, r7
 801d278:	17fb      	asrs	r3, r7, #31
 801d27a:	000e      	movs	r6, r1
 801d27c:	0028      	movs	r0, r5
 801d27e:	17e9      	asrs	r1, r5, #31
 801d280:	f7e3 f99e 	bl	80005c0 <__aeabi_lmul>
 801d284:	4653      	mov	r3, sl
 801d286:	1a76      	subs	r6, r6, r1
 801d288:	0076      	lsls	r6, r6, #1
 801d28a:	601e      	str	r6, [r3, #0]
 801d28c:	002a      	movs	r2, r5
 801d28e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d290:	9808      	ldr	r0, [sp, #32]
 801d292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d294:	f7e3 f994 	bl	80005c0 <__aeabi_lmul>
 801d298:	003a      	movs	r2, r7
 801d29a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d29c:	000d      	movs	r5, r1
 801d29e:	0020      	movs	r0, r4
 801d2a0:	9907      	ldr	r1, [sp, #28]
 801d2a2:	f7e3 f98d 	bl	80005c0 <__aeabi_lmul>
 801d2a6:	4657      	mov	r7, sl
 801d2a8:	186d      	adds	r5, r5, r1
 801d2aa:	006d      	lsls	r5, r5, #1
 801d2ac:	607d      	str	r5, [r7, #4]
 801d2ae:	9b03      	ldr	r3, [sp, #12]
 801d2b0:	9e06      	ldr	r6, [sp, #24]
 801d2b2:	9d05      	ldr	r5, [sp, #20]
 801d2b4:	46b4      	mov	ip, r6
 801d2b6:	1b5d      	subs	r5, r3, r5
 801d2b8:	9b00      	ldr	r3, [sp, #0]
 801d2ba:	17ef      	asrs	r7, r5, #31
 801d2bc:	0039      	movs	r1, r7
 801d2be:	681f      	ldr	r7, [r3, #0]
 801d2c0:	17fc      	asrs	r4, r7, #31
 801d2c2:	0020      	movs	r0, r4
 801d2c4:	9c04      	ldr	r4, [sp, #16]
 801d2c6:	4464      	add	r4, ip
 801d2c8:	17e6      	asrs	r6, r4, #31
 801d2ca:	9407      	str	r4, [sp, #28]
 801d2cc:	9608      	str	r6, [sp, #32]
 801d2ce:	685e      	ldr	r6, [r3, #4]
 801d2d0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d2d2:	17f2      	asrs	r2, r6, #31
 801d2d4:	0003      	movs	r3, r0
 801d2d6:	920c      	str	r2, [sp, #48]	@ 0x30
 801d2d8:	0028      	movs	r0, r5
 801d2da:	003a      	movs	r2, r7
 801d2dc:	910a      	str	r1, [sp, #40]	@ 0x28
 801d2de:	f7e3 f96f 	bl	80005c0 <__aeabi_lmul>
 801d2e2:	0032      	movs	r2, r6
 801d2e4:	17f3      	asrs	r3, r6, #31
 801d2e6:	9807      	ldr	r0, [sp, #28]
 801d2e8:	000c      	movs	r4, r1
 801d2ea:	9908      	ldr	r1, [sp, #32]
 801d2ec:	f7e3 f968 	bl	80005c0 <__aeabi_lmul>
 801d2f0:	4658      	mov	r0, fp
 801d2f2:	1a64      	subs	r4, r4, r1
 801d2f4:	0064      	lsls	r4, r4, #1
 801d2f6:	9a07      	ldr	r2, [sp, #28]
 801d2f8:	6004      	str	r4, [r0, #0]
 801d2fa:	9b08      	ldr	r3, [sp, #32]
 801d2fc:	0038      	movs	r0, r7
 801d2fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d300:	f7e3 f95e 	bl	80005c0 <__aeabi_lmul>
 801d304:	0032      	movs	r2, r6
 801d306:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d308:	000c      	movs	r4, r1
 801d30a:	0028      	movs	r0, r5
 801d30c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d30e:	f7e3 f957 	bl	80005c0 <__aeabi_lmul>
 801d312:	9d05      	ldr	r5, [sp, #20]
 801d314:	465f      	mov	r7, fp
 801d316:	46ac      	mov	ip, r5
 801d318:	1864      	adds	r4, r4, r1
 801d31a:	9903      	ldr	r1, [sp, #12]
 801d31c:	0064      	lsls	r4, r4, #1
 801d31e:	4461      	add	r1, ip
 801d320:	607c      	str	r4, [r7, #4]
 801d322:	000c      	movs	r4, r1
 801d324:	17c9      	asrs	r1, r1, #31
 801d326:	9105      	str	r1, [sp, #20]
 801d328:	9902      	ldr	r1, [sp, #8]
 801d32a:	9804      	ldr	r0, [sp, #16]
 801d32c:	680d      	ldr	r5, [r1, #0]
 801d32e:	9e06      	ldr	r6, [sp, #24]
 801d330:	002b      	movs	r3, r5
 801d332:	17ed      	asrs	r5, r5, #31
 801d334:	684f      	ldr	r7, [r1, #4]
 801d336:	9503      	str	r5, [sp, #12]
 801d338:	1b85      	subs	r5, r0, r6
 801d33a:	17e8      	asrs	r0, r5, #31
 801d33c:	001a      	movs	r2, r3
 801d33e:	9006      	str	r0, [sp, #24]
 801d340:	17fe      	asrs	r6, r7, #31
 801d342:	9304      	str	r3, [sp, #16]
 801d344:	0020      	movs	r0, r4
 801d346:	9b03      	ldr	r3, [sp, #12]
 801d348:	17e1      	asrs	r1, r4, #31
 801d34a:	9607      	str	r6, [sp, #28]
 801d34c:	f7e3 f938 	bl	80005c0 <__aeabi_lmul>
 801d350:	003a      	movs	r2, r7
 801d352:	000e      	movs	r6, r1
 801d354:	17fb      	asrs	r3, r7, #31
 801d356:	0028      	movs	r0, r5
 801d358:	17e9      	asrs	r1, r5, #31
 801d35a:	f7e3 f931 	bl	80005c0 <__aeabi_lmul>
 801d35e:	4640      	mov	r0, r8
 801d360:	1a76      	subs	r6, r6, r1
 801d362:	0076      	lsls	r6, r6, #1
 801d364:	002a      	movs	r2, r5
 801d366:	9b06      	ldr	r3, [sp, #24]
 801d368:	6006      	str	r6, [r0, #0]
 801d36a:	9903      	ldr	r1, [sp, #12]
 801d36c:	9804      	ldr	r0, [sp, #16]
 801d36e:	f7e3 f927 	bl	80005c0 <__aeabi_lmul>
 801d372:	0020      	movs	r0, r4
 801d374:	2408      	movs	r4, #8
 801d376:	9b07      	ldr	r3, [sp, #28]
 801d378:	000d      	movs	r5, r1
 801d37a:	003a      	movs	r2, r7
 801d37c:	9905      	ldr	r1, [sp, #20]
 801d37e:	f7e3 f91f 	bl	80005c0 <__aeabi_lmul>
 801d382:	4640      	mov	r0, r8
 801d384:	46a4      	mov	ip, r4
 801d386:	186d      	adds	r5, r5, r1
 801d388:	006d      	lsls	r5, r5, #1
 801d38a:	6045      	str	r5, [r0, #4]
 801d38c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d38e:	44e1      	add	r9, ip
 801d390:	3801      	subs	r0, #1
 801d392:	9009      	str	r0, [sp, #36]	@ 0x24
 801d394:	9a01      	ldr	r2, [sp, #4]
 801d396:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d398:	44e2      	add	sl, ip
 801d39a:	44e3      	add	fp, ip
 801d39c:	44e0      	add	r8, ip
 801d39e:	46a4      	mov	ip, r4
 801d3a0:	4462      	add	r2, ip
 801d3a2:	9201      	str	r2, [sp, #4]
 801d3a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d3a6:	9b00      	ldr	r3, [sp, #0]
 801d3a8:	4694      	mov	ip, r2
 801d3aa:	4463      	add	r3, ip
 801d3ac:	9300      	str	r3, [sp, #0]
 801d3ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d3b0:	9902      	ldr	r1, [sp, #8]
 801d3b2:	469c      	mov	ip, r3
 801d3b4:	4461      	add	r1, ip
 801d3b6:	9102      	str	r1, [sp, #8]
 801d3b8:	2800      	cmp	r0, #0
 801d3ba:	d000      	beq.n	801d3be <arm_radix4_butterfly_inverse_q31+0x22e>
 801d3bc:	e70f      	b.n	801d1de <arm_radix4_butterfly_inverse_q31+0x4e>
 801d3be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d3c0:	009b      	lsls	r3, r3, #2
 801d3c2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d3c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d3c6:	9320      	str	r3, [sp, #128]	@ 0x80
 801d3c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d3ca:	2b04      	cmp	r3, #4
 801d3cc:	d800      	bhi.n	801d3d0 <arm_radix4_butterfly_inverse_q31+0x240>
 801d3ce:	e17c      	b.n	801d6ca <arm_radix4_butterfly_inverse_q31+0x53a>
 801d3d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d3d2:	0893      	lsrs	r3, r2, #2
 801d3d4:	1e59      	subs	r1, r3, #1
 801d3d6:	9321      	str	r3, [sp, #132]	@ 0x84
 801d3d8:	00db      	lsls	r3, r3, #3
 801d3da:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d3dc:	00d3      	lsls	r3, r2, #3
 801d3de:	9300      	str	r3, [sp, #0]
 801d3e0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d3e2:	911a      	str	r1, [sp, #104]	@ 0x68
 801d3e4:	00da      	lsls	r2, r3, #3
 801d3e6:	921e      	str	r2, [sp, #120]	@ 0x78
 801d3e8:	011a      	lsls	r2, r3, #4
 801d3ea:	921d      	str	r2, [sp, #116]	@ 0x74
 801d3ec:	001a      	movs	r2, r3
 801d3ee:	4694      	mov	ip, r2
 801d3f0:	005b      	lsls	r3, r3, #1
 801d3f2:	4463      	add	r3, ip
 801d3f4:	00db      	lsls	r3, r3, #3
 801d3f6:	931c      	str	r3, [sp, #112]	@ 0x70
 801d3f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d3fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d3fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d3fe:	9318      	str	r3, [sp, #96]	@ 0x60
 801d400:	9319      	str	r3, [sp, #100]	@ 0x64
 801d402:	9316      	str	r3, [sp, #88]	@ 0x58
 801d404:	2300      	movs	r3, #0
 801d406:	9315      	str	r3, [sp, #84]	@ 0x54
 801d408:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d40a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d40c:	681a      	ldr	r2, [r3, #0]
 801d40e:	685b      	ldr	r3, [r3, #4]
 801d410:	9205      	str	r2, [sp, #20]
 801d412:	9306      	str	r3, [sp, #24]
 801d414:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d416:	468c      	mov	ip, r1
 801d418:	681a      	ldr	r2, [r3, #0]
 801d41a:	685b      	ldr	r3, [r3, #4]
 801d41c:	9207      	str	r2, [sp, #28]
 801d41e:	9308      	str	r3, [sp, #32]
 801d420:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d422:	681a      	ldr	r2, [r3, #0]
 801d424:	685b      	ldr	r3, [r3, #4]
 801d426:	9209      	str	r2, [sp, #36]	@ 0x24
 801d428:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d42a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d42c:	0013      	movs	r3, r2
 801d42e:	4463      	add	r3, ip
 801d430:	4698      	mov	r8, r3
 801d432:	0013      	movs	r3, r2
 801d434:	4442      	add	r2, r8
 801d436:	4691      	mov	r9, r2
 801d438:	001a      	movs	r2, r3
 801d43a:	444a      	add	r2, r9
 801d43c:	4692      	mov	sl, r2
 801d43e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d440:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d442:	4293      	cmp	r3, r2
 801d444:	d800      	bhi.n	801d448 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801d446:	e0d9      	b.n	801d5fc <arm_radix4_butterfly_inverse_q31+0x46c>
 801d448:	4694      	mov	ip, r2
 801d44a:	4644      	mov	r4, r8
 801d44c:	4655      	mov	r5, sl
 801d44e:	4688      	mov	r8, r1
 801d450:	9b07      	ldr	r3, [sp, #28]
 801d452:	17db      	asrs	r3, r3, #31
 801d454:	930c      	str	r3, [sp, #48]	@ 0x30
 801d456:	9b08      	ldr	r3, [sp, #32]
 801d458:	17db      	asrs	r3, r3, #31
 801d45a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d45c:	9b05      	ldr	r3, [sp, #20]
 801d45e:	17db      	asrs	r3, r3, #31
 801d460:	930e      	str	r3, [sp, #56]	@ 0x38
 801d462:	9b06      	ldr	r3, [sp, #24]
 801d464:	17db      	asrs	r3, r3, #31
 801d466:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d46a:	17db      	asrs	r3, r3, #31
 801d46c:	9310      	str	r3, [sp, #64]	@ 0x40
 801d46e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d470:	17db      	asrs	r3, r3, #31
 801d472:	9311      	str	r3, [sp, #68]	@ 0x44
 801d474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d476:	4463      	add	r3, ip
 801d478:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d47a:	4643      	mov	r3, r8
 801d47c:	4641      	mov	r1, r8
 801d47e:	681a      	ldr	r2, [r3, #0]
 801d480:	464b      	mov	r3, r9
 801d482:	684f      	ldr	r7, [r1, #4]
 801d484:	4649      	mov	r1, r9
 801d486:	681b      	ldr	r3, [r3, #0]
 801d488:	18d6      	adds	r6, r2, r3
 801d48a:	1ad3      	subs	r3, r2, r3
 801d48c:	9301      	str	r3, [sp, #4]
 801d48e:	684b      	ldr	r3, [r1, #4]
 801d490:	1af9      	subs	r1, r7, r3
 801d492:	9102      	str	r1, [sp, #8]
 801d494:	6829      	ldr	r1, [r5, #0]
 801d496:	18f8      	adds	r0, r7, r3
 801d498:	468c      	mov	ip, r1
 801d49a:	6827      	ldr	r7, [r4, #0]
 801d49c:	4467      	add	r7, ip
 801d49e:	003a      	movs	r2, r7
 801d4a0:	19f3      	adds	r3, r6, r7
 801d4a2:	4647      	mov	r7, r8
 801d4a4:	109b      	asrs	r3, r3, #2
 801d4a6:	603b      	str	r3, [r7, #0]
 801d4a8:	6869      	ldr	r1, [r5, #4]
 801d4aa:	6867      	ldr	r7, [r4, #4]
 801d4ac:	468c      	mov	ip, r1
 801d4ae:	4467      	add	r7, ip
 801d4b0:	003b      	movs	r3, r7
 801d4b2:	19c1      	adds	r1, r0, r7
 801d4b4:	4647      	mov	r7, r8
 801d4b6:	1ab6      	subs	r6, r6, r2
 801d4b8:	1089      	asrs	r1, r1, #2
 801d4ba:	6079      	str	r1, [r7, #4]
 801d4bc:	17f2      	asrs	r2, r6, #31
 801d4be:	9900      	ldr	r1, [sp, #0]
 801d4c0:	4692      	mov	sl, r2
 801d4c2:	468c      	mov	ip, r1
 801d4c4:	6867      	ldr	r7, [r4, #4]
 801d4c6:	6869      	ldr	r1, [r5, #4]
 801d4c8:	44e0      	add	r8, ip
 801d4ca:	1a7f      	subs	r7, r7, r1
 801d4cc:	9703      	str	r7, [sp, #12]
 801d4ce:	6821      	ldr	r1, [r4, #0]
 801d4d0:	682f      	ldr	r7, [r5, #0]
 801d4d2:	1bc9      	subs	r1, r1, r7
 801d4d4:	1ac7      	subs	r7, r0, r3
 801d4d6:	17fa      	asrs	r2, r7, #31
 801d4d8:	4693      	mov	fp, r2
 801d4da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4dc:	9a07      	ldr	r2, [sp, #28]
 801d4de:	9104      	str	r1, [sp, #16]
 801d4e0:	0030      	movs	r0, r6
 801d4e2:	4651      	mov	r1, sl
 801d4e4:	f7e3 f86c 	bl	80005c0 <__aeabi_lmul>
 801d4e8:	9a08      	ldr	r2, [sp, #32]
 801d4ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d4ec:	9112      	str	r1, [sp, #72]	@ 0x48
 801d4ee:	0038      	movs	r0, r7
 801d4f0:	4659      	mov	r1, fp
 801d4f2:	f7e3 f865 	bl	80005c0 <__aeabi_lmul>
 801d4f6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d4f8:	9a07      	ldr	r2, [sp, #28]
 801d4fa:	1a41      	subs	r1, r0, r1
 801d4fc:	1049      	asrs	r1, r1, #1
 801d4fe:	6021      	str	r1, [r4, #0]
 801d500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d502:	0038      	movs	r0, r7
 801d504:	4659      	mov	r1, fp
 801d506:	f7e3 f85b 	bl	80005c0 <__aeabi_lmul>
 801d50a:	9a08      	ldr	r2, [sp, #32]
 801d50c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d50e:	000f      	movs	r7, r1
 801d510:	0030      	movs	r0, r6
 801d512:	4651      	mov	r1, sl
 801d514:	f7e3 f854 	bl	80005c0 <__aeabi_lmul>
 801d518:	9b00      	ldr	r3, [sp, #0]
 801d51a:	187f      	adds	r7, r7, r1
 801d51c:	469c      	mov	ip, r3
 801d51e:	107f      	asrs	r7, r7, #1
 801d520:	6067      	str	r7, [r4, #4]
 801d522:	9a01      	ldr	r2, [sp, #4]
 801d524:	9f03      	ldr	r7, [sp, #12]
 801d526:	9802      	ldr	r0, [sp, #8]
 801d528:	1bd7      	subs	r7, r2, r7
 801d52a:	17fe      	asrs	r6, r7, #31
 801d52c:	0031      	movs	r1, r6
 801d52e:	9e04      	ldr	r6, [sp, #16]
 801d530:	4682      	mov	sl, r0
 801d532:	4464      	add	r4, ip
 801d534:	46b4      	mov	ip, r6
 801d536:	44e2      	add	sl, ip
 801d538:	4652      	mov	r2, sl
 801d53a:	17d2      	asrs	r2, r2, #31
 801d53c:	4693      	mov	fp, r2
 801d53e:	0038      	movs	r0, r7
 801d540:	9a05      	ldr	r2, [sp, #20]
 801d542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d544:	9112      	str	r1, [sp, #72]	@ 0x48
 801d546:	f7e3 f83b 	bl	80005c0 <__aeabi_lmul>
 801d54a:	9a06      	ldr	r2, [sp, #24]
 801d54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d54e:	000e      	movs	r6, r1
 801d550:	4650      	mov	r0, sl
 801d552:	4659      	mov	r1, fp
 801d554:	f7e3 f834 	bl	80005c0 <__aeabi_lmul>
 801d558:	4648      	mov	r0, r9
 801d55a:	1a76      	subs	r6, r6, r1
 801d55c:	1076      	asrs	r6, r6, #1
 801d55e:	6006      	str	r6, [r0, #0]
 801d560:	9a05      	ldr	r2, [sp, #20]
 801d562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d564:	4650      	mov	r0, sl
 801d566:	4659      	mov	r1, fp
 801d568:	f7e3 f82a 	bl	80005c0 <__aeabi_lmul>
 801d56c:	9a06      	ldr	r2, [sp, #24]
 801d56e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d570:	000e      	movs	r6, r1
 801d572:	0038      	movs	r0, r7
 801d574:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d576:	f7e3 f823 	bl	80005c0 <__aeabi_lmul>
 801d57a:	9a00      	ldr	r2, [sp, #0]
 801d57c:	9f03      	ldr	r7, [sp, #12]
 801d57e:	4694      	mov	ip, r2
 801d580:	1876      	adds	r6, r6, r1
 801d582:	4649      	mov	r1, r9
 801d584:	44e1      	add	r9, ip
 801d586:	46bc      	mov	ip, r7
 801d588:	9b01      	ldr	r3, [sp, #4]
 801d58a:	1076      	asrs	r6, r6, #1
 801d58c:	4463      	add	r3, ip
 801d58e:	17df      	asrs	r7, r3, #31
 801d590:	604e      	str	r6, [r1, #4]
 801d592:	46ba      	mov	sl, r7
 801d594:	001e      	movs	r6, r3
 801d596:	9802      	ldr	r0, [sp, #8]
 801d598:	9b04      	ldr	r3, [sp, #16]
 801d59a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d59c:	1ac7      	subs	r7, r0, r3
 801d59e:	17fb      	asrs	r3, r7, #31
 801d5a0:	469b      	mov	fp, r3
 801d5a2:	0030      	movs	r0, r6
 801d5a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5a6:	4651      	mov	r1, sl
 801d5a8:	f7e3 f80a 	bl	80005c0 <__aeabi_lmul>
 801d5ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d5ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d5b0:	9101      	str	r1, [sp, #4]
 801d5b2:	0038      	movs	r0, r7
 801d5b4:	4659      	mov	r1, fp
 801d5b6:	f7e3 f803 	bl	80005c0 <__aeabi_lmul>
 801d5ba:	9801      	ldr	r0, [sp, #4]
 801d5bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d5be:	1a41      	subs	r1, r0, r1
 801d5c0:	1049      	asrs	r1, r1, #1
 801d5c2:	6029      	str	r1, [r5, #0]
 801d5c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d5c6:	0038      	movs	r0, r7
 801d5c8:	4659      	mov	r1, fp
 801d5ca:	f7e2 fff9 	bl	80005c0 <__aeabi_lmul>
 801d5ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d5d0:	000f      	movs	r7, r1
 801d5d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d5d4:	0030      	movs	r0, r6
 801d5d6:	4651      	mov	r1, sl
 801d5d8:	f7e2 fff2 	bl	80005c0 <__aeabi_lmul>
 801d5dc:	187f      	adds	r7, r7, r1
 801d5de:	107f      	asrs	r7, r7, #1
 801d5e0:	606f      	str	r7, [r5, #4]
 801d5e2:	9a00      	ldr	r2, [sp, #0]
 801d5e4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d5e6:	4694      	mov	ip, r2
 801d5e8:	4465      	add	r5, ip
 801d5ea:	468c      	mov	ip, r1
 801d5ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d5ee:	0013      	movs	r3, r2
 801d5f0:	4462      	add	r2, ip
 801d5f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d5f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d5f6:	429a      	cmp	r2, r3
 801d5f8:	d900      	bls.n	801d5fc <arm_radix4_butterfly_inverse_q31+0x46c>
 801d5fa:	e73e      	b.n	801d47a <arm_radix4_butterfly_inverse_q31+0x2ea>
 801d5fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d5fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d600:	468c      	mov	ip, r1
 801d602:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d604:	4462      	add	r2, ip
 801d606:	468c      	mov	ip, r1
 801d608:	9216      	str	r2, [sp, #88]	@ 0x58
 801d60a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d60c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d60e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d610:	4462      	add	r2, ip
 801d612:	468c      	mov	ip, r1
 801d614:	9219      	str	r2, [sp, #100]	@ 0x64
 801d616:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d618:	3301      	adds	r3, #1
 801d61a:	4462      	add	r2, ip
 801d61c:	9218      	str	r2, [sp, #96]	@ 0x60
 801d61e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d620:	9315      	str	r3, [sp, #84]	@ 0x54
 801d622:	3208      	adds	r2, #8
 801d624:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d626:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d628:	4293      	cmp	r3, r2
 801d62a:	d800      	bhi.n	801d62e <arm_radix4_butterfly_inverse_q31+0x49e>
 801d62c:	e6ec      	b.n	801d408 <arm_radix4_butterfly_inverse_q31+0x278>
 801d62e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d630:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d632:	009b      	lsls	r3, r3, #2
 801d634:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d636:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d638:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d63a:	089b      	lsrs	r3, r3, #2
 801d63c:	9320      	str	r3, [sp, #128]	@ 0x80
 801d63e:	2b04      	cmp	r3, #4
 801d640:	d900      	bls.n	801d644 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801d642:	e6c5      	b.n	801d3d0 <arm_radix4_butterfly_inverse_q31+0x240>
 801d644:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d646:	469a      	mov	sl, r3
 801d648:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d64a:	681a      	ldr	r2, [r3, #0]
 801d64c:	6918      	ldr	r0, [r3, #16]
 801d64e:	4691      	mov	r9, r2
 801d650:	464c      	mov	r4, r9
 801d652:	4680      	mov	r8, r0
 801d654:	69de      	ldr	r6, [r3, #28]
 801d656:	689d      	ldr	r5, [r3, #8]
 801d658:	46b4      	mov	ip, r6
 801d65a:	6998      	ldr	r0, [r3, #24]
 801d65c:	1964      	adds	r4, r4, r5
 801d65e:	6859      	ldr	r1, [r3, #4]
 801d660:	68da      	ldr	r2, [r3, #12]
 801d662:	4444      	add	r4, r8
 801d664:	695f      	ldr	r7, [r3, #20]
 801d666:	1824      	adds	r4, r4, r0
 801d668:	601c      	str	r4, [r3, #0]
 801d66a:	188c      	adds	r4, r1, r2
 801d66c:	19e4      	adds	r4, r4, r7
 801d66e:	4464      	add	r4, ip
 801d670:	605c      	str	r4, [r3, #4]
 801d672:	464c      	mov	r4, r9
 801d674:	1b64      	subs	r4, r4, r5
 801d676:	4444      	add	r4, r8
 801d678:	1a24      	subs	r4, r4, r0
 801d67a:	609c      	str	r4, [r3, #8]
 801d67c:	1a8c      	subs	r4, r1, r2
 801d67e:	19e4      	adds	r4, r4, r7
 801d680:	1ba4      	subs	r4, r4, r6
 801d682:	60dc      	str	r4, [r3, #12]
 801d684:	464c      	mov	r4, r9
 801d686:	4646      	mov	r6, r8
 801d688:	1aa4      	subs	r4, r4, r2
 801d68a:	1ba4      	subs	r4, r4, r6
 801d68c:	4464      	add	r4, ip
 801d68e:	611c      	str	r4, [r3, #16]
 801d690:	194c      	adds	r4, r1, r5
 801d692:	1be4      	subs	r4, r4, r7
 801d694:	1a24      	subs	r4, r4, r0
 801d696:	615c      	str	r4, [r3, #20]
 801d698:	4644      	mov	r4, r8
 801d69a:	4666      	mov	r6, ip
 801d69c:	444a      	add	r2, r9
 801d69e:	1b12      	subs	r2, r2, r4
 801d6a0:	1b92      	subs	r2, r2, r6
 801d6a2:	619a      	str	r2, [r3, #24]
 801d6a4:	1b4a      	subs	r2, r1, r5
 801d6a6:	1bd1      	subs	r1, r2, r7
 801d6a8:	2201      	movs	r2, #1
 801d6aa:	4252      	negs	r2, r2
 801d6ac:	4694      	mov	ip, r2
 801d6ae:	44e2      	add	sl, ip
 801d6b0:	4652      	mov	r2, sl
 801d6b2:	1809      	adds	r1, r1, r0
 801d6b4:	61d9      	str	r1, [r3, #28]
 801d6b6:	3320      	adds	r3, #32
 801d6b8:	2a00      	cmp	r2, #0
 801d6ba:	d1c6      	bne.n	801d64a <arm_radix4_butterfly_inverse_q31+0x4ba>
 801d6bc:	b027      	add	sp, #156	@ 0x9c
 801d6be:	bc3c      	pop	{r2, r3, r4, r5}
 801d6c0:	4690      	mov	r8, r2
 801d6c2:	4699      	mov	r9, r3
 801d6c4:	46a2      	mov	sl, r4
 801d6c6:	46ab      	mov	fp, r5
 801d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ca:	469a      	mov	sl, r3
 801d6cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d6ce:	e7bc      	b.n	801d64a <arm_radix4_butterfly_inverse_q31+0x4ba>

0801d6d0 <arm_cmplx_mag_squared_q31>:
 801d6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6d2:	464f      	mov	r7, r9
 801d6d4:	4646      	mov	r6, r8
 801d6d6:	0004      	movs	r4, r0
 801d6d8:	b4c0      	push	{r6, r7}
 801d6da:	0016      	movs	r6, r2
 801d6dc:	000f      	movs	r7, r1
 801d6de:	2a00      	cmp	r2, #0
 801d6e0:	d018      	beq.n	801d714 <arm_cmplx_mag_squared_q31+0x44>
 801d6e2:	6823      	ldr	r3, [r4, #0]
 801d6e4:	6822      	ldr	r2, [r4, #0]
 801d6e6:	17d9      	asrs	r1, r3, #31
 801d6e8:	6863      	ldr	r3, [r4, #4]
 801d6ea:	0010      	movs	r0, r2
 801d6ec:	4698      	mov	r8, r3
 801d6ee:	17db      	asrs	r3, r3, #31
 801d6f0:	4699      	mov	r9, r3
 801d6f2:	000b      	movs	r3, r1
 801d6f4:	f7e2 ff64 	bl	80005c0 <__aeabi_lmul>
 801d6f8:	4642      	mov	r2, r8
 801d6fa:	104d      	asrs	r5, r1, #1
 801d6fc:	464b      	mov	r3, r9
 801d6fe:	4640      	mov	r0, r8
 801d700:	4649      	mov	r1, r9
 801d702:	f7e2 ff5d 	bl	80005c0 <__aeabi_lmul>
 801d706:	1049      	asrs	r1, r1, #1
 801d708:	1869      	adds	r1, r5, r1
 801d70a:	3e01      	subs	r6, #1
 801d70c:	c702      	stmia	r7!, {r1}
 801d70e:	3408      	adds	r4, #8
 801d710:	2e00      	cmp	r6, #0
 801d712:	d1e6      	bne.n	801d6e2 <arm_cmplx_mag_squared_q31+0x12>
 801d714:	bc0c      	pop	{r2, r3}
 801d716:	4690      	mov	r8, r2
 801d718:	4699      	mov	r9, r3
 801d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d71c <arm_mult_q31>:
 801d71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d71e:	4646      	mov	r6, r8
 801d720:	464f      	mov	r7, r9
 801d722:	4690      	mov	r8, r2
 801d724:	b4c0      	push	{r6, r7}
 801d726:	001d      	movs	r5, r3
 801d728:	0006      	movs	r6, r0
 801d72a:	000f      	movs	r7, r1
 801d72c:	2400      	movs	r4, #0
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d020      	beq.n	801d774 <arm_mult_q31+0x58>
 801d732:	4b12      	ldr	r3, [pc, #72]	@ (801d77c <arm_mult_q31+0x60>)
 801d734:	4699      	mov	r9, r3
 801d736:	e007      	b.n	801d748 <arm_mult_q31+0x2c>
 801d738:	464b      	mov	r3, r9
 801d73a:	4059      	eors	r1, r3
 801d73c:	4643      	mov	r3, r8
 801d73e:	3d01      	subs	r5, #1
 801d740:	5119      	str	r1, [r3, r4]
 801d742:	3404      	adds	r4, #4
 801d744:	2d00      	cmp	r5, #0
 801d746:	d015      	beq.n	801d774 <arm_mult_q31+0x58>
 801d748:	5933      	ldr	r3, [r6, r4]
 801d74a:	593a      	ldr	r2, [r7, r4]
 801d74c:	17d9      	asrs	r1, r3, #31
 801d74e:	593b      	ldr	r3, [r7, r4]
 801d750:	5930      	ldr	r0, [r6, r4]
 801d752:	17db      	asrs	r3, r3, #31
 801d754:	f7e2 ff34 	bl	80005c0 <__aeabi_lmul>
 801d758:	004b      	lsls	r3, r1, #1
 801d75a:	0fc0      	lsrs	r0, r0, #31
 801d75c:	4318      	orrs	r0, r3
 801d75e:	17c9      	asrs	r1, r1, #31
 801d760:	17c3      	asrs	r3, r0, #31
 801d762:	428b      	cmp	r3, r1
 801d764:	d1e8      	bne.n	801d738 <arm_mult_q31+0x1c>
 801d766:	0001      	movs	r1, r0
 801d768:	4643      	mov	r3, r8
 801d76a:	3d01      	subs	r5, #1
 801d76c:	5119      	str	r1, [r3, r4]
 801d76e:	3404      	adds	r4, #4
 801d770:	2d00      	cmp	r5, #0
 801d772:	d1e9      	bne.n	801d748 <arm_mult_q31+0x2c>
 801d774:	bc0c      	pop	{r2, r3}
 801d776:	4690      	mov	r8, r2
 801d778:	4699      	mov	r9, r3
 801d77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d77c:	7fffffff 	.word	0x7fffffff

0801d780 <arm_add_q31>:
 801d780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d782:	465f      	mov	r7, fp
 801d784:	4656      	mov	r6, sl
 801d786:	464d      	mov	r5, r9
 801d788:	4644      	mov	r4, r8
 801d78a:	b4f0      	push	{r4, r5, r6, r7}
 801d78c:	4693      	mov	fp, r2
 801d78e:	b083      	sub	sp, #12
 801d790:	4681      	mov	r9, r0
 801d792:	468a      	mov	sl, r1
 801d794:	4698      	mov	r8, r3
 801d796:	2200      	movs	r2, #0
 801d798:	2b00      	cmp	r3, #0
 801d79a:	d020      	beq.n	801d7de <arm_add_q31+0x5e>
 801d79c:	4649      	mov	r1, r9
 801d79e:	4653      	mov	r3, sl
 801d7a0:	588e      	ldr	r6, [r1, r2]
 801d7a2:	589b      	ldr	r3, [r3, r2]
 801d7a4:	17f7      	asrs	r7, r6, #31
 801d7a6:	001c      	movs	r4, r3
 801d7a8:	0030      	movs	r0, r6
 801d7aa:	0039      	movs	r1, r7
 801d7ac:	17dd      	asrs	r5, r3, #31
 801d7ae:	46b4      	mov	ip, r6
 801d7b0:	1900      	adds	r0, r0, r4
 801d7b2:	4169      	adcs	r1, r5
 801d7b4:	4463      	add	r3, ip
 801d7b6:	9000      	str	r0, [sp, #0]
 801d7b8:	9101      	str	r1, [sp, #4]
 801d7ba:	17d9      	asrs	r1, r3, #31
 801d7bc:	468c      	mov	ip, r1
 801d7be:	9901      	ldr	r1, [sp, #4]
 801d7c0:	458c      	cmp	ip, r1
 801d7c2:	d002      	beq.n	801d7ca <arm_add_q31+0x4a>
 801d7c4:	17cb      	asrs	r3, r1, #31
 801d7c6:	4909      	ldr	r1, [pc, #36]	@ (801d7ec <arm_add_q31+0x6c>)
 801d7c8:	404b      	eors	r3, r1
 801d7ca:	4659      	mov	r1, fp
 801d7cc:	508b      	str	r3, [r1, r2]
 801d7ce:	2301      	movs	r3, #1
 801d7d0:	425b      	negs	r3, r3
 801d7d2:	469c      	mov	ip, r3
 801d7d4:	44e0      	add	r8, ip
 801d7d6:	4643      	mov	r3, r8
 801d7d8:	3204      	adds	r2, #4
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d1de      	bne.n	801d79c <arm_add_q31+0x1c>
 801d7de:	b003      	add	sp, #12
 801d7e0:	bc3c      	pop	{r2, r3, r4, r5}
 801d7e2:	4690      	mov	r8, r2
 801d7e4:	4699      	mov	r9, r3
 801d7e6:	46a2      	mov	sl, r4
 801d7e8:	46ab      	mov	fp, r5
 801d7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7ec:	7fffffff 	.word	0x7fffffff

0801d7f0 <atof>:
 801d7f0:	b510      	push	{r4, lr}
 801d7f2:	2100      	movs	r1, #0
 801d7f4:	f000 fe12 	bl	801e41c <strtod>
 801d7f8:	bd10      	pop	{r4, pc}

0801d7fa <atoi>:
 801d7fa:	b510      	push	{r4, lr}
 801d7fc:	220a      	movs	r2, #10
 801d7fe:	2100      	movs	r1, #0
 801d800:	f000 fea4 	bl	801e54c <strtol>
 801d804:	bd10      	pop	{r4, pc}
	...

0801d808 <sulp>:
 801d808:	b570      	push	{r4, r5, r6, lr}
 801d80a:	0016      	movs	r6, r2
 801d80c:	000d      	movs	r5, r1
 801d80e:	f003 fcf3 	bl	80211f8 <__ulp>
 801d812:	2e00      	cmp	r6, #0
 801d814:	d00d      	beq.n	801d832 <sulp+0x2a>
 801d816:	236b      	movs	r3, #107	@ 0x6b
 801d818:	006a      	lsls	r2, r5, #1
 801d81a:	0d52      	lsrs	r2, r2, #21
 801d81c:	1a9b      	subs	r3, r3, r2
 801d81e:	2b00      	cmp	r3, #0
 801d820:	dd07      	ble.n	801d832 <sulp+0x2a>
 801d822:	2400      	movs	r4, #0
 801d824:	4a03      	ldr	r2, [pc, #12]	@ (801d834 <sulp+0x2c>)
 801d826:	051b      	lsls	r3, r3, #20
 801d828:	189d      	adds	r5, r3, r2
 801d82a:	002b      	movs	r3, r5
 801d82c:	0022      	movs	r2, r4
 801d82e:	f7e4 ff05 	bl	800263c <__aeabi_dmul>
 801d832:	bd70      	pop	{r4, r5, r6, pc}
 801d834:	3ff00000 	.word	0x3ff00000

0801d838 <_strtod_l>:
 801d838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d83a:	b0a3      	sub	sp, #140	@ 0x8c
 801d83c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801d83e:	2200      	movs	r2, #0
 801d840:	2600      	movs	r6, #0
 801d842:	2700      	movs	r7, #0
 801d844:	9005      	str	r0, [sp, #20]
 801d846:	9109      	str	r1, [sp, #36]	@ 0x24
 801d848:	921e      	str	r2, [sp, #120]	@ 0x78
 801d84a:	911d      	str	r1, [sp, #116]	@ 0x74
 801d84c:	780a      	ldrb	r2, [r1, #0]
 801d84e:	2a2b      	cmp	r2, #43	@ 0x2b
 801d850:	d053      	beq.n	801d8fa <_strtod_l+0xc2>
 801d852:	d83f      	bhi.n	801d8d4 <_strtod_l+0x9c>
 801d854:	2a0d      	cmp	r2, #13
 801d856:	d839      	bhi.n	801d8cc <_strtod_l+0x94>
 801d858:	2a08      	cmp	r2, #8
 801d85a:	d839      	bhi.n	801d8d0 <_strtod_l+0x98>
 801d85c:	2a00      	cmp	r2, #0
 801d85e:	d042      	beq.n	801d8e6 <_strtod_l+0xae>
 801d860:	2200      	movs	r2, #0
 801d862:	9212      	str	r2, [sp, #72]	@ 0x48
 801d864:	2100      	movs	r1, #0
 801d866:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d868:	910c      	str	r1, [sp, #48]	@ 0x30
 801d86a:	782a      	ldrb	r2, [r5, #0]
 801d86c:	2a30      	cmp	r2, #48	@ 0x30
 801d86e:	d000      	beq.n	801d872 <_strtod_l+0x3a>
 801d870:	e083      	b.n	801d97a <_strtod_l+0x142>
 801d872:	786a      	ldrb	r2, [r5, #1]
 801d874:	3120      	adds	r1, #32
 801d876:	438a      	bics	r2, r1
 801d878:	2a58      	cmp	r2, #88	@ 0x58
 801d87a:	d000      	beq.n	801d87e <_strtod_l+0x46>
 801d87c:	e073      	b.n	801d966 <_strtod_l+0x12e>
 801d87e:	9302      	str	r3, [sp, #8]
 801d880:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d882:	4a95      	ldr	r2, [pc, #596]	@ (801dad8 <_strtod_l+0x2a0>)
 801d884:	9301      	str	r3, [sp, #4]
 801d886:	ab1e      	add	r3, sp, #120	@ 0x78
 801d888:	9300      	str	r3, [sp, #0]
 801d88a:	9805      	ldr	r0, [sp, #20]
 801d88c:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d88e:	a91d      	add	r1, sp, #116	@ 0x74
 801d890:	f002 fd62 	bl	8020358 <__gethex>
 801d894:	230f      	movs	r3, #15
 801d896:	0002      	movs	r2, r0
 801d898:	401a      	ands	r2, r3
 801d89a:	0004      	movs	r4, r0
 801d89c:	9206      	str	r2, [sp, #24]
 801d89e:	4218      	tst	r0, r3
 801d8a0:	d005      	beq.n	801d8ae <_strtod_l+0x76>
 801d8a2:	2a06      	cmp	r2, #6
 801d8a4:	d12b      	bne.n	801d8fe <_strtod_l+0xc6>
 801d8a6:	2300      	movs	r3, #0
 801d8a8:	3501      	adds	r5, #1
 801d8aa:	951d      	str	r5, [sp, #116]	@ 0x74
 801d8ac:	9312      	str	r3, [sp, #72]	@ 0x48
 801d8ae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d002      	beq.n	801d8ba <_strtod_l+0x82>
 801d8b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d8b6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d8b8:	6013      	str	r3, [r2, #0]
 801d8ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d019      	beq.n	801d8f4 <_strtod_l+0xbc>
 801d8c0:	2380      	movs	r3, #128	@ 0x80
 801d8c2:	0030      	movs	r0, r6
 801d8c4:	061b      	lsls	r3, r3, #24
 801d8c6:	18f9      	adds	r1, r7, r3
 801d8c8:	b023      	add	sp, #140	@ 0x8c
 801d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8cc:	2a20      	cmp	r2, #32
 801d8ce:	d1c7      	bne.n	801d860 <_strtod_l+0x28>
 801d8d0:	3101      	adds	r1, #1
 801d8d2:	e7ba      	b.n	801d84a <_strtod_l+0x12>
 801d8d4:	2a2d      	cmp	r2, #45	@ 0x2d
 801d8d6:	d1c3      	bne.n	801d860 <_strtod_l+0x28>
 801d8d8:	3a2c      	subs	r2, #44	@ 0x2c
 801d8da:	9212      	str	r2, [sp, #72]	@ 0x48
 801d8dc:	1c4a      	adds	r2, r1, #1
 801d8de:	921d      	str	r2, [sp, #116]	@ 0x74
 801d8e0:	784a      	ldrb	r2, [r1, #1]
 801d8e2:	2a00      	cmp	r2, #0
 801d8e4:	d1be      	bne.n	801d864 <_strtod_l+0x2c>
 801d8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8e8:	931d      	str	r3, [sp, #116]	@ 0x74
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	9312      	str	r3, [sp, #72]	@ 0x48
 801d8ee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d1df      	bne.n	801d8b4 <_strtod_l+0x7c>
 801d8f4:	0030      	movs	r0, r6
 801d8f6:	0039      	movs	r1, r7
 801d8f8:	e7e6      	b.n	801d8c8 <_strtod_l+0x90>
 801d8fa:	2200      	movs	r2, #0
 801d8fc:	e7ed      	b.n	801d8da <_strtod_l+0xa2>
 801d8fe:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d900:	2a00      	cmp	r2, #0
 801d902:	d007      	beq.n	801d914 <_strtod_l+0xdc>
 801d904:	2135      	movs	r1, #53	@ 0x35
 801d906:	a820      	add	r0, sp, #128	@ 0x80
 801d908:	f003 fd6c 	bl	80213e4 <__copybits>
 801d90c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d90e:	9805      	ldr	r0, [sp, #20]
 801d910:	f003 f926 	bl	8020b60 <_Bfree>
 801d914:	9806      	ldr	r0, [sp, #24]
 801d916:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d918:	3801      	subs	r0, #1
 801d91a:	2804      	cmp	r0, #4
 801d91c:	d806      	bhi.n	801d92c <_strtod_l+0xf4>
 801d91e:	f7e2 fc2d 	bl	800017c <__gnu_thumb1_case_uqi>
 801d922:	0312      	.short	0x0312
 801d924:	1e1c      	.short	0x1e1c
 801d926:	12          	.byte	0x12
 801d927:	00          	.byte	0x00
 801d928:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d92a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801d92c:	05e4      	lsls	r4, r4, #23
 801d92e:	d502      	bpl.n	801d936 <_strtod_l+0xfe>
 801d930:	2380      	movs	r3, #128	@ 0x80
 801d932:	061b      	lsls	r3, r3, #24
 801d934:	431f      	orrs	r7, r3
 801d936:	4b69      	ldr	r3, [pc, #420]	@ (801dadc <_strtod_l+0x2a4>)
 801d938:	423b      	tst	r3, r7
 801d93a:	d1b8      	bne.n	801d8ae <_strtod_l+0x76>
 801d93c:	f001 fd90 	bl	801f460 <__errno>
 801d940:	2322      	movs	r3, #34	@ 0x22
 801d942:	6003      	str	r3, [r0, #0]
 801d944:	e7b3      	b.n	801d8ae <_strtod_l+0x76>
 801d946:	4966      	ldr	r1, [pc, #408]	@ (801dae0 <_strtod_l+0x2a8>)
 801d948:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d94a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d94c:	400a      	ands	r2, r1
 801d94e:	4965      	ldr	r1, [pc, #404]	@ (801dae4 <_strtod_l+0x2ac>)
 801d950:	185b      	adds	r3, r3, r1
 801d952:	051b      	lsls	r3, r3, #20
 801d954:	431a      	orrs	r2, r3
 801d956:	0017      	movs	r7, r2
 801d958:	e7e8      	b.n	801d92c <_strtod_l+0xf4>
 801d95a:	4f60      	ldr	r7, [pc, #384]	@ (801dadc <_strtod_l+0x2a4>)
 801d95c:	e7e6      	b.n	801d92c <_strtod_l+0xf4>
 801d95e:	2601      	movs	r6, #1
 801d960:	4f61      	ldr	r7, [pc, #388]	@ (801dae8 <_strtod_l+0x2b0>)
 801d962:	4276      	negs	r6, r6
 801d964:	e7e2      	b.n	801d92c <_strtod_l+0xf4>
 801d966:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d968:	1c5a      	adds	r2, r3, #1
 801d96a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d96c:	785b      	ldrb	r3, [r3, #1]
 801d96e:	2b30      	cmp	r3, #48	@ 0x30
 801d970:	d0f9      	beq.n	801d966 <_strtod_l+0x12e>
 801d972:	2b00      	cmp	r3, #0
 801d974:	d09b      	beq.n	801d8ae <_strtod_l+0x76>
 801d976:	2301      	movs	r3, #1
 801d978:	930c      	str	r3, [sp, #48]	@ 0x30
 801d97a:	2500      	movs	r5, #0
 801d97c:	220a      	movs	r2, #10
 801d97e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d980:	950d      	str	r5, [sp, #52]	@ 0x34
 801d982:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d984:	9508      	str	r5, [sp, #32]
 801d986:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d988:	7804      	ldrb	r4, [r0, #0]
 801d98a:	0023      	movs	r3, r4
 801d98c:	3b30      	subs	r3, #48	@ 0x30
 801d98e:	b2d9      	uxtb	r1, r3
 801d990:	2909      	cmp	r1, #9
 801d992:	d927      	bls.n	801d9e4 <_strtod_l+0x1ac>
 801d994:	2201      	movs	r2, #1
 801d996:	4955      	ldr	r1, [pc, #340]	@ (801daec <_strtod_l+0x2b4>)
 801d998:	f001 fcd4 	bl	801f344 <strncmp>
 801d99c:	2800      	cmp	r0, #0
 801d99e:	d031      	beq.n	801da04 <_strtod_l+0x1cc>
 801d9a0:	2000      	movs	r0, #0
 801d9a2:	0023      	movs	r3, r4
 801d9a4:	4684      	mov	ip, r0
 801d9a6:	9a08      	ldr	r2, [sp, #32]
 801d9a8:	900e      	str	r0, [sp, #56]	@ 0x38
 801d9aa:	9206      	str	r2, [sp, #24]
 801d9ac:	2220      	movs	r2, #32
 801d9ae:	0019      	movs	r1, r3
 801d9b0:	4391      	bics	r1, r2
 801d9b2:	000a      	movs	r2, r1
 801d9b4:	2100      	movs	r1, #0
 801d9b6:	9107      	str	r1, [sp, #28]
 801d9b8:	2a45      	cmp	r2, #69	@ 0x45
 801d9ba:	d000      	beq.n	801d9be <_strtod_l+0x186>
 801d9bc:	e0c0      	b.n	801db40 <_strtod_l+0x308>
 801d9be:	9b06      	ldr	r3, [sp, #24]
 801d9c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d9c2:	4303      	orrs	r3, r0
 801d9c4:	4313      	orrs	r3, r2
 801d9c6:	428b      	cmp	r3, r1
 801d9c8:	d08d      	beq.n	801d8e6 <_strtod_l+0xae>
 801d9ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9ce:	3301      	adds	r3, #1
 801d9d0:	931d      	str	r3, [sp, #116]	@ 0x74
 801d9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9d4:	785b      	ldrb	r3, [r3, #1]
 801d9d6:	2b2b      	cmp	r3, #43	@ 0x2b
 801d9d8:	d070      	beq.n	801dabc <_strtod_l+0x284>
 801d9da:	000c      	movs	r4, r1
 801d9dc:	2b2d      	cmp	r3, #45	@ 0x2d
 801d9de:	d173      	bne.n	801dac8 <_strtod_l+0x290>
 801d9e0:	2401      	movs	r4, #1
 801d9e2:	e06c      	b.n	801dabe <_strtod_l+0x286>
 801d9e4:	9908      	ldr	r1, [sp, #32]
 801d9e6:	2908      	cmp	r1, #8
 801d9e8:	dc09      	bgt.n	801d9fe <_strtod_l+0x1c6>
 801d9ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d9ec:	4351      	muls	r1, r2
 801d9ee:	185b      	adds	r3, r3, r1
 801d9f0:	930d      	str	r3, [sp, #52]	@ 0x34
 801d9f2:	9b08      	ldr	r3, [sp, #32]
 801d9f4:	3001      	adds	r0, #1
 801d9f6:	3301      	adds	r3, #1
 801d9f8:	9308      	str	r3, [sp, #32]
 801d9fa:	901d      	str	r0, [sp, #116]	@ 0x74
 801d9fc:	e7c3      	b.n	801d986 <_strtod_l+0x14e>
 801d9fe:	4355      	muls	r5, r2
 801da00:	195d      	adds	r5, r3, r5
 801da02:	e7f6      	b.n	801d9f2 <_strtod_l+0x1ba>
 801da04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801da06:	1c5a      	adds	r2, r3, #1
 801da08:	921d      	str	r2, [sp, #116]	@ 0x74
 801da0a:	9a08      	ldr	r2, [sp, #32]
 801da0c:	785b      	ldrb	r3, [r3, #1]
 801da0e:	2a00      	cmp	r2, #0
 801da10:	d03a      	beq.n	801da88 <_strtod_l+0x250>
 801da12:	900e      	str	r0, [sp, #56]	@ 0x38
 801da14:	9206      	str	r2, [sp, #24]
 801da16:	001a      	movs	r2, r3
 801da18:	3a30      	subs	r2, #48	@ 0x30
 801da1a:	2a09      	cmp	r2, #9
 801da1c:	d912      	bls.n	801da44 <_strtod_l+0x20c>
 801da1e:	2201      	movs	r2, #1
 801da20:	4694      	mov	ip, r2
 801da22:	e7c3      	b.n	801d9ac <_strtod_l+0x174>
 801da24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801da26:	3001      	adds	r0, #1
 801da28:	1c5a      	adds	r2, r3, #1
 801da2a:	921d      	str	r2, [sp, #116]	@ 0x74
 801da2c:	785b      	ldrb	r3, [r3, #1]
 801da2e:	2b30      	cmp	r3, #48	@ 0x30
 801da30:	d0f8      	beq.n	801da24 <_strtod_l+0x1ec>
 801da32:	001a      	movs	r2, r3
 801da34:	3a31      	subs	r2, #49	@ 0x31
 801da36:	2a08      	cmp	r2, #8
 801da38:	d83b      	bhi.n	801dab2 <_strtod_l+0x27a>
 801da3a:	900e      	str	r0, [sp, #56]	@ 0x38
 801da3c:	2000      	movs	r0, #0
 801da3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801da40:	9006      	str	r0, [sp, #24]
 801da42:	9213      	str	r2, [sp, #76]	@ 0x4c
 801da44:	001a      	movs	r2, r3
 801da46:	1c41      	adds	r1, r0, #1
 801da48:	3a30      	subs	r2, #48	@ 0x30
 801da4a:	2b30      	cmp	r3, #48	@ 0x30
 801da4c:	d016      	beq.n	801da7c <_strtod_l+0x244>
 801da4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da50:	185b      	adds	r3, r3, r1
 801da52:	930e      	str	r3, [sp, #56]	@ 0x38
 801da54:	9b06      	ldr	r3, [sp, #24]
 801da56:	210a      	movs	r1, #10
 801da58:	469c      	mov	ip, r3
 801da5a:	4484      	add	ip, r0
 801da5c:	459c      	cmp	ip, r3
 801da5e:	d115      	bne.n	801da8c <_strtod_l+0x254>
 801da60:	9906      	ldr	r1, [sp, #24]
 801da62:	9b06      	ldr	r3, [sp, #24]
 801da64:	3101      	adds	r1, #1
 801da66:	1809      	adds	r1, r1, r0
 801da68:	181b      	adds	r3, r3, r0
 801da6a:	9106      	str	r1, [sp, #24]
 801da6c:	2b08      	cmp	r3, #8
 801da6e:	dc19      	bgt.n	801daa4 <_strtod_l+0x26c>
 801da70:	230a      	movs	r3, #10
 801da72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801da74:	434b      	muls	r3, r1
 801da76:	2100      	movs	r1, #0
 801da78:	18d3      	adds	r3, r2, r3
 801da7a:	930d      	str	r3, [sp, #52]	@ 0x34
 801da7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801da7e:	0008      	movs	r0, r1
 801da80:	1c5a      	adds	r2, r3, #1
 801da82:	921d      	str	r2, [sp, #116]	@ 0x74
 801da84:	785b      	ldrb	r3, [r3, #1]
 801da86:	e7c6      	b.n	801da16 <_strtod_l+0x1de>
 801da88:	9808      	ldr	r0, [sp, #32]
 801da8a:	e7d0      	b.n	801da2e <_strtod_l+0x1f6>
 801da8c:	1c5c      	adds	r4, r3, #1
 801da8e:	2b08      	cmp	r3, #8
 801da90:	dc04      	bgt.n	801da9c <_strtod_l+0x264>
 801da92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da94:	434b      	muls	r3, r1
 801da96:	930d      	str	r3, [sp, #52]	@ 0x34
 801da98:	0023      	movs	r3, r4
 801da9a:	e7df      	b.n	801da5c <_strtod_l+0x224>
 801da9c:	2c10      	cmp	r4, #16
 801da9e:	dcfb      	bgt.n	801da98 <_strtod_l+0x260>
 801daa0:	434d      	muls	r5, r1
 801daa2:	e7f9      	b.n	801da98 <_strtod_l+0x260>
 801daa4:	2100      	movs	r1, #0
 801daa6:	2b0f      	cmp	r3, #15
 801daa8:	dce8      	bgt.n	801da7c <_strtod_l+0x244>
 801daaa:	230a      	movs	r3, #10
 801daac:	435d      	muls	r5, r3
 801daae:	1955      	adds	r5, r2, r5
 801dab0:	e7e4      	b.n	801da7c <_strtod_l+0x244>
 801dab2:	2200      	movs	r2, #0
 801dab4:	920e      	str	r2, [sp, #56]	@ 0x38
 801dab6:	9206      	str	r2, [sp, #24]
 801dab8:	3201      	adds	r2, #1
 801daba:	e7b1      	b.n	801da20 <_strtod_l+0x1e8>
 801dabc:	2400      	movs	r4, #0
 801dabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dac0:	3302      	adds	r3, #2
 801dac2:	931d      	str	r3, [sp, #116]	@ 0x74
 801dac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dac6:	789b      	ldrb	r3, [r3, #2]
 801dac8:	001a      	movs	r2, r3
 801daca:	3a30      	subs	r2, #48	@ 0x30
 801dacc:	2a09      	cmp	r2, #9
 801dace:	d913      	bls.n	801daf8 <_strtod_l+0x2c0>
 801dad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dad2:	921d      	str	r2, [sp, #116]	@ 0x74
 801dad4:	2200      	movs	r2, #0
 801dad6:	e032      	b.n	801db3e <_strtod_l+0x306>
 801dad8:	080245e8 	.word	0x080245e8
 801dadc:	7ff00000 	.word	0x7ff00000
 801dae0:	ffefffff 	.word	0xffefffff
 801dae4:	00000433 	.word	0x00000433
 801dae8:	7fffffff 	.word	0x7fffffff
 801daec:	080245d0 	.word	0x080245d0
 801daf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801daf2:	1c5a      	adds	r2, r3, #1
 801daf4:	921d      	str	r2, [sp, #116]	@ 0x74
 801daf6:	785b      	ldrb	r3, [r3, #1]
 801daf8:	2b30      	cmp	r3, #48	@ 0x30
 801dafa:	d0f9      	beq.n	801daf0 <_strtod_l+0x2b8>
 801dafc:	2200      	movs	r2, #0
 801dafe:	9207      	str	r2, [sp, #28]
 801db00:	001a      	movs	r2, r3
 801db02:	3a31      	subs	r2, #49	@ 0x31
 801db04:	2a08      	cmp	r2, #8
 801db06:	d81b      	bhi.n	801db40 <_strtod_l+0x308>
 801db08:	3b30      	subs	r3, #48	@ 0x30
 801db0a:	9310      	str	r3, [sp, #64]	@ 0x40
 801db0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db0e:	9307      	str	r3, [sp, #28]
 801db10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db12:	1c59      	adds	r1, r3, #1
 801db14:	911d      	str	r1, [sp, #116]	@ 0x74
 801db16:	785b      	ldrb	r3, [r3, #1]
 801db18:	001a      	movs	r2, r3
 801db1a:	3a30      	subs	r2, #48	@ 0x30
 801db1c:	2a09      	cmp	r2, #9
 801db1e:	d93a      	bls.n	801db96 <_strtod_l+0x35e>
 801db20:	9a07      	ldr	r2, [sp, #28]
 801db22:	1a8a      	subs	r2, r1, r2
 801db24:	49b4      	ldr	r1, [pc, #720]	@ (801ddf8 <_strtod_l+0x5c0>)
 801db26:	9107      	str	r1, [sp, #28]
 801db28:	2a08      	cmp	r2, #8
 801db2a:	dc04      	bgt.n	801db36 <_strtod_l+0x2fe>
 801db2c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801db2e:	9207      	str	r2, [sp, #28]
 801db30:	428a      	cmp	r2, r1
 801db32:	dd00      	ble.n	801db36 <_strtod_l+0x2fe>
 801db34:	9107      	str	r1, [sp, #28]
 801db36:	2c00      	cmp	r4, #0
 801db38:	d002      	beq.n	801db40 <_strtod_l+0x308>
 801db3a:	9a07      	ldr	r2, [sp, #28]
 801db3c:	4252      	negs	r2, r2
 801db3e:	9207      	str	r2, [sp, #28]
 801db40:	9a06      	ldr	r2, [sp, #24]
 801db42:	2a00      	cmp	r2, #0
 801db44:	d14d      	bne.n	801dbe2 <_strtod_l+0x3aa>
 801db46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801db48:	4310      	orrs	r0, r2
 801db4a:	d000      	beq.n	801db4e <_strtod_l+0x316>
 801db4c:	e6af      	b.n	801d8ae <_strtod_l+0x76>
 801db4e:	4662      	mov	r2, ip
 801db50:	2a00      	cmp	r2, #0
 801db52:	d000      	beq.n	801db56 <_strtod_l+0x31e>
 801db54:	e6c7      	b.n	801d8e6 <_strtod_l+0xae>
 801db56:	2b69      	cmp	r3, #105	@ 0x69
 801db58:	d027      	beq.n	801dbaa <_strtod_l+0x372>
 801db5a:	dc23      	bgt.n	801dba4 <_strtod_l+0x36c>
 801db5c:	2b49      	cmp	r3, #73	@ 0x49
 801db5e:	d024      	beq.n	801dbaa <_strtod_l+0x372>
 801db60:	2b4e      	cmp	r3, #78	@ 0x4e
 801db62:	d000      	beq.n	801db66 <_strtod_l+0x32e>
 801db64:	e6bf      	b.n	801d8e6 <_strtod_l+0xae>
 801db66:	49a5      	ldr	r1, [pc, #660]	@ (801ddfc <_strtod_l+0x5c4>)
 801db68:	a81d      	add	r0, sp, #116	@ 0x74
 801db6a:	f002 fe2b 	bl	80207c4 <__match>
 801db6e:	2800      	cmp	r0, #0
 801db70:	d100      	bne.n	801db74 <_strtod_l+0x33c>
 801db72:	e6b8      	b.n	801d8e6 <_strtod_l+0xae>
 801db74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db76:	781b      	ldrb	r3, [r3, #0]
 801db78:	2b28      	cmp	r3, #40	@ 0x28
 801db7a:	d12c      	bne.n	801dbd6 <_strtod_l+0x39e>
 801db7c:	49a0      	ldr	r1, [pc, #640]	@ (801de00 <_strtod_l+0x5c8>)
 801db7e:	aa20      	add	r2, sp, #128	@ 0x80
 801db80:	a81d      	add	r0, sp, #116	@ 0x74
 801db82:	f002 fe33 	bl	80207ec <__hexnan>
 801db86:	2805      	cmp	r0, #5
 801db88:	d125      	bne.n	801dbd6 <_strtod_l+0x39e>
 801db8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801db8c:	4a9d      	ldr	r2, [pc, #628]	@ (801de04 <_strtod_l+0x5cc>)
 801db8e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801db90:	431a      	orrs	r2, r3
 801db92:	0017      	movs	r7, r2
 801db94:	e68b      	b.n	801d8ae <_strtod_l+0x76>
 801db96:	220a      	movs	r2, #10
 801db98:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801db9a:	434a      	muls	r2, r1
 801db9c:	18d2      	adds	r2, r2, r3
 801db9e:	3a30      	subs	r2, #48	@ 0x30
 801dba0:	9210      	str	r2, [sp, #64]	@ 0x40
 801dba2:	e7b5      	b.n	801db10 <_strtod_l+0x2d8>
 801dba4:	2b6e      	cmp	r3, #110	@ 0x6e
 801dba6:	d0de      	beq.n	801db66 <_strtod_l+0x32e>
 801dba8:	e69d      	b.n	801d8e6 <_strtod_l+0xae>
 801dbaa:	4997      	ldr	r1, [pc, #604]	@ (801de08 <_strtod_l+0x5d0>)
 801dbac:	a81d      	add	r0, sp, #116	@ 0x74
 801dbae:	f002 fe09 	bl	80207c4 <__match>
 801dbb2:	2800      	cmp	r0, #0
 801dbb4:	d100      	bne.n	801dbb8 <_strtod_l+0x380>
 801dbb6:	e696      	b.n	801d8e6 <_strtod_l+0xae>
 801dbb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dbba:	4994      	ldr	r1, [pc, #592]	@ (801de0c <_strtod_l+0x5d4>)
 801dbbc:	3b01      	subs	r3, #1
 801dbbe:	a81d      	add	r0, sp, #116	@ 0x74
 801dbc0:	931d      	str	r3, [sp, #116]	@ 0x74
 801dbc2:	f002 fdff 	bl	80207c4 <__match>
 801dbc6:	2800      	cmp	r0, #0
 801dbc8:	d102      	bne.n	801dbd0 <_strtod_l+0x398>
 801dbca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dbcc:	3301      	adds	r3, #1
 801dbce:	931d      	str	r3, [sp, #116]	@ 0x74
 801dbd0:	2600      	movs	r6, #0
 801dbd2:	4f8c      	ldr	r7, [pc, #560]	@ (801de04 <_strtod_l+0x5cc>)
 801dbd4:	e66b      	b.n	801d8ae <_strtod_l+0x76>
 801dbd6:	488e      	ldr	r0, [pc, #568]	@ (801de10 <_strtod_l+0x5d8>)
 801dbd8:	f001 fc84 	bl	801f4e4 <nan>
 801dbdc:	0006      	movs	r6, r0
 801dbde:	000f      	movs	r7, r1
 801dbe0:	e665      	b.n	801d8ae <_strtod_l+0x76>
 801dbe2:	9b07      	ldr	r3, [sp, #28]
 801dbe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbe6:	1a9b      	subs	r3, r3, r2
 801dbe8:	930c      	str	r3, [sp, #48]	@ 0x30
 801dbea:	9b08      	ldr	r3, [sp, #32]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d101      	bne.n	801dbf4 <_strtod_l+0x3bc>
 801dbf0:	9b06      	ldr	r3, [sp, #24]
 801dbf2:	9308      	str	r3, [sp, #32]
 801dbf4:	9c06      	ldr	r4, [sp, #24]
 801dbf6:	2c10      	cmp	r4, #16
 801dbf8:	dd00      	ble.n	801dbfc <_strtod_l+0x3c4>
 801dbfa:	2410      	movs	r4, #16
 801dbfc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801dbfe:	f7e5 fc0d 	bl	800341c <__aeabi_ui2d>
 801dc02:	9b06      	ldr	r3, [sp, #24]
 801dc04:	0006      	movs	r6, r0
 801dc06:	000f      	movs	r7, r1
 801dc08:	2b09      	cmp	r3, #9
 801dc0a:	dc13      	bgt.n	801dc34 <_strtod_l+0x3fc>
 801dc0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d100      	bne.n	801dc14 <_strtod_l+0x3dc>
 801dc12:	e64c      	b.n	801d8ae <_strtod_l+0x76>
 801dc14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	dc00      	bgt.n	801dc1c <_strtod_l+0x3e4>
 801dc1a:	e07e      	b.n	801dd1a <_strtod_l+0x4e2>
 801dc1c:	2b16      	cmp	r3, #22
 801dc1e:	dc63      	bgt.n	801dce8 <_strtod_l+0x4b0>
 801dc20:	497c      	ldr	r1, [pc, #496]	@ (801de14 <_strtod_l+0x5dc>)
 801dc22:	00db      	lsls	r3, r3, #3
 801dc24:	18c9      	adds	r1, r1, r3
 801dc26:	0032      	movs	r2, r6
 801dc28:	6808      	ldr	r0, [r1, #0]
 801dc2a:	6849      	ldr	r1, [r1, #4]
 801dc2c:	003b      	movs	r3, r7
 801dc2e:	f7e4 fd05 	bl	800263c <__aeabi_dmul>
 801dc32:	e7d3      	b.n	801dbdc <_strtod_l+0x3a4>
 801dc34:	0022      	movs	r2, r4
 801dc36:	4b77      	ldr	r3, [pc, #476]	@ (801de14 <_strtod_l+0x5dc>)
 801dc38:	3a09      	subs	r2, #9
 801dc3a:	00d2      	lsls	r2, r2, #3
 801dc3c:	189b      	adds	r3, r3, r2
 801dc3e:	681a      	ldr	r2, [r3, #0]
 801dc40:	685b      	ldr	r3, [r3, #4]
 801dc42:	f7e4 fcfb 	bl	800263c <__aeabi_dmul>
 801dc46:	0006      	movs	r6, r0
 801dc48:	0028      	movs	r0, r5
 801dc4a:	000f      	movs	r7, r1
 801dc4c:	f7e5 fbe6 	bl	800341c <__aeabi_ui2d>
 801dc50:	000b      	movs	r3, r1
 801dc52:	0002      	movs	r2, r0
 801dc54:	0039      	movs	r1, r7
 801dc56:	0030      	movs	r0, r6
 801dc58:	f7e3 fd48 	bl	80016ec <__aeabi_dadd>
 801dc5c:	9b06      	ldr	r3, [sp, #24]
 801dc5e:	0006      	movs	r6, r0
 801dc60:	000f      	movs	r7, r1
 801dc62:	2b0f      	cmp	r3, #15
 801dc64:	ddd2      	ble.n	801dc0c <_strtod_l+0x3d4>
 801dc66:	9b06      	ldr	r3, [sp, #24]
 801dc68:	1b1c      	subs	r4, r3, r4
 801dc6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc6c:	18e4      	adds	r4, r4, r3
 801dc6e:	2c00      	cmp	r4, #0
 801dc70:	dc00      	bgt.n	801dc74 <_strtod_l+0x43c>
 801dc72:	e09b      	b.n	801ddac <_strtod_l+0x574>
 801dc74:	220f      	movs	r2, #15
 801dc76:	0023      	movs	r3, r4
 801dc78:	4013      	ands	r3, r2
 801dc7a:	4214      	tst	r4, r2
 801dc7c:	d00a      	beq.n	801dc94 <_strtod_l+0x45c>
 801dc7e:	4965      	ldr	r1, [pc, #404]	@ (801de14 <_strtod_l+0x5dc>)
 801dc80:	00db      	lsls	r3, r3, #3
 801dc82:	18c9      	adds	r1, r1, r3
 801dc84:	0032      	movs	r2, r6
 801dc86:	6808      	ldr	r0, [r1, #0]
 801dc88:	6849      	ldr	r1, [r1, #4]
 801dc8a:	003b      	movs	r3, r7
 801dc8c:	f7e4 fcd6 	bl	800263c <__aeabi_dmul>
 801dc90:	0006      	movs	r6, r0
 801dc92:	000f      	movs	r7, r1
 801dc94:	230f      	movs	r3, #15
 801dc96:	439c      	bics	r4, r3
 801dc98:	d073      	beq.n	801dd82 <_strtod_l+0x54a>
 801dc9a:	3326      	adds	r3, #38	@ 0x26
 801dc9c:	33ff      	adds	r3, #255	@ 0xff
 801dc9e:	429c      	cmp	r4, r3
 801dca0:	dd4b      	ble.n	801dd3a <_strtod_l+0x502>
 801dca2:	2300      	movs	r3, #0
 801dca4:	9306      	str	r3, [sp, #24]
 801dca6:	9307      	str	r3, [sp, #28]
 801dca8:	930d      	str	r3, [sp, #52]	@ 0x34
 801dcaa:	9308      	str	r3, [sp, #32]
 801dcac:	2322      	movs	r3, #34	@ 0x22
 801dcae:	2600      	movs	r6, #0
 801dcb0:	9a05      	ldr	r2, [sp, #20]
 801dcb2:	4f54      	ldr	r7, [pc, #336]	@ (801de04 <_strtod_l+0x5cc>)
 801dcb4:	6013      	str	r3, [r2, #0]
 801dcb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dcb8:	42b3      	cmp	r3, r6
 801dcba:	d100      	bne.n	801dcbe <_strtod_l+0x486>
 801dcbc:	e5f7      	b.n	801d8ae <_strtod_l+0x76>
 801dcbe:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dcc0:	9805      	ldr	r0, [sp, #20]
 801dcc2:	f002 ff4d 	bl	8020b60 <_Bfree>
 801dcc6:	9908      	ldr	r1, [sp, #32]
 801dcc8:	9805      	ldr	r0, [sp, #20]
 801dcca:	f002 ff49 	bl	8020b60 <_Bfree>
 801dcce:	9907      	ldr	r1, [sp, #28]
 801dcd0:	9805      	ldr	r0, [sp, #20]
 801dcd2:	f002 ff45 	bl	8020b60 <_Bfree>
 801dcd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dcd8:	9805      	ldr	r0, [sp, #20]
 801dcda:	f002 ff41 	bl	8020b60 <_Bfree>
 801dcde:	9906      	ldr	r1, [sp, #24]
 801dce0:	9805      	ldr	r0, [sp, #20]
 801dce2:	f002 ff3d 	bl	8020b60 <_Bfree>
 801dce6:	e5e2      	b.n	801d8ae <_strtod_l+0x76>
 801dce8:	2325      	movs	r3, #37	@ 0x25
 801dcea:	9a06      	ldr	r2, [sp, #24]
 801dcec:	1a9b      	subs	r3, r3, r2
 801dcee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dcf0:	4293      	cmp	r3, r2
 801dcf2:	dbb8      	blt.n	801dc66 <_strtod_l+0x42e>
 801dcf4:	240f      	movs	r4, #15
 801dcf6:	9b06      	ldr	r3, [sp, #24]
 801dcf8:	4d46      	ldr	r5, [pc, #280]	@ (801de14 <_strtod_l+0x5dc>)
 801dcfa:	1ae4      	subs	r4, r4, r3
 801dcfc:	00e1      	lsls	r1, r4, #3
 801dcfe:	1869      	adds	r1, r5, r1
 801dd00:	0032      	movs	r2, r6
 801dd02:	6808      	ldr	r0, [r1, #0]
 801dd04:	6849      	ldr	r1, [r1, #4]
 801dd06:	003b      	movs	r3, r7
 801dd08:	f7e4 fc98 	bl	800263c <__aeabi_dmul>
 801dd0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd0e:	1b1c      	subs	r4, r3, r4
 801dd10:	00e4      	lsls	r4, r4, #3
 801dd12:	192d      	adds	r5, r5, r4
 801dd14:	682a      	ldr	r2, [r5, #0]
 801dd16:	686b      	ldr	r3, [r5, #4]
 801dd18:	e789      	b.n	801dc2e <_strtod_l+0x3f6>
 801dd1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd1c:	3316      	adds	r3, #22
 801dd1e:	dba2      	blt.n	801dc66 <_strtod_l+0x42e>
 801dd20:	9907      	ldr	r1, [sp, #28]
 801dd22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd24:	4b3b      	ldr	r3, [pc, #236]	@ (801de14 <_strtod_l+0x5dc>)
 801dd26:	1a52      	subs	r2, r2, r1
 801dd28:	00d2      	lsls	r2, r2, #3
 801dd2a:	189b      	adds	r3, r3, r2
 801dd2c:	0030      	movs	r0, r6
 801dd2e:	681a      	ldr	r2, [r3, #0]
 801dd30:	685b      	ldr	r3, [r3, #4]
 801dd32:	0039      	movs	r1, r7
 801dd34:	f7e4 f83e 	bl	8001db4 <__aeabi_ddiv>
 801dd38:	e750      	b.n	801dbdc <_strtod_l+0x3a4>
 801dd3a:	2300      	movs	r3, #0
 801dd3c:	0030      	movs	r0, r6
 801dd3e:	0039      	movs	r1, r7
 801dd40:	4d35      	ldr	r5, [pc, #212]	@ (801de18 <_strtod_l+0x5e0>)
 801dd42:	1124      	asrs	r4, r4, #4
 801dd44:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd46:	2c01      	cmp	r4, #1
 801dd48:	dc1e      	bgt.n	801dd88 <_strtod_l+0x550>
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d001      	beq.n	801dd52 <_strtod_l+0x51a>
 801dd4e:	0006      	movs	r6, r0
 801dd50:	000f      	movs	r7, r1
 801dd52:	4b32      	ldr	r3, [pc, #200]	@ (801de1c <_strtod_l+0x5e4>)
 801dd54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd56:	18ff      	adds	r7, r7, r3
 801dd58:	4b2f      	ldr	r3, [pc, #188]	@ (801de18 <_strtod_l+0x5e0>)
 801dd5a:	00d5      	lsls	r5, r2, #3
 801dd5c:	195d      	adds	r5, r3, r5
 801dd5e:	0032      	movs	r2, r6
 801dd60:	6828      	ldr	r0, [r5, #0]
 801dd62:	6869      	ldr	r1, [r5, #4]
 801dd64:	003b      	movs	r3, r7
 801dd66:	f7e4 fc69 	bl	800263c <__aeabi_dmul>
 801dd6a:	4b26      	ldr	r3, [pc, #152]	@ (801de04 <_strtod_l+0x5cc>)
 801dd6c:	4a2c      	ldr	r2, [pc, #176]	@ (801de20 <_strtod_l+0x5e8>)
 801dd6e:	0006      	movs	r6, r0
 801dd70:	400b      	ands	r3, r1
 801dd72:	4293      	cmp	r3, r2
 801dd74:	d895      	bhi.n	801dca2 <_strtod_l+0x46a>
 801dd76:	4a2b      	ldr	r2, [pc, #172]	@ (801de24 <_strtod_l+0x5ec>)
 801dd78:	4293      	cmp	r3, r2
 801dd7a:	d913      	bls.n	801dda4 <_strtod_l+0x56c>
 801dd7c:	2601      	movs	r6, #1
 801dd7e:	4f2a      	ldr	r7, [pc, #168]	@ (801de28 <_strtod_l+0x5f0>)
 801dd80:	4276      	negs	r6, r6
 801dd82:	2300      	movs	r3, #0
 801dd84:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd86:	e086      	b.n	801de96 <_strtod_l+0x65e>
 801dd88:	2201      	movs	r2, #1
 801dd8a:	4214      	tst	r4, r2
 801dd8c:	d004      	beq.n	801dd98 <_strtod_l+0x560>
 801dd8e:	682a      	ldr	r2, [r5, #0]
 801dd90:	686b      	ldr	r3, [r5, #4]
 801dd92:	f7e4 fc53 	bl	800263c <__aeabi_dmul>
 801dd96:	2301      	movs	r3, #1
 801dd98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd9a:	1064      	asrs	r4, r4, #1
 801dd9c:	3201      	adds	r2, #1
 801dd9e:	9209      	str	r2, [sp, #36]	@ 0x24
 801dda0:	3508      	adds	r5, #8
 801dda2:	e7d0      	b.n	801dd46 <_strtod_l+0x50e>
 801dda4:	23d4      	movs	r3, #212	@ 0xd4
 801dda6:	049b      	lsls	r3, r3, #18
 801dda8:	18cf      	adds	r7, r1, r3
 801ddaa:	e7ea      	b.n	801dd82 <_strtod_l+0x54a>
 801ddac:	2c00      	cmp	r4, #0
 801ddae:	d0e8      	beq.n	801dd82 <_strtod_l+0x54a>
 801ddb0:	4264      	negs	r4, r4
 801ddb2:	230f      	movs	r3, #15
 801ddb4:	0022      	movs	r2, r4
 801ddb6:	401a      	ands	r2, r3
 801ddb8:	421c      	tst	r4, r3
 801ddba:	d00a      	beq.n	801ddd2 <_strtod_l+0x59a>
 801ddbc:	4b15      	ldr	r3, [pc, #84]	@ (801de14 <_strtod_l+0x5dc>)
 801ddbe:	00d2      	lsls	r2, r2, #3
 801ddc0:	189b      	adds	r3, r3, r2
 801ddc2:	0030      	movs	r0, r6
 801ddc4:	681a      	ldr	r2, [r3, #0]
 801ddc6:	685b      	ldr	r3, [r3, #4]
 801ddc8:	0039      	movs	r1, r7
 801ddca:	f7e3 fff3 	bl	8001db4 <__aeabi_ddiv>
 801ddce:	0006      	movs	r6, r0
 801ddd0:	000f      	movs	r7, r1
 801ddd2:	1124      	asrs	r4, r4, #4
 801ddd4:	d0d5      	beq.n	801dd82 <_strtod_l+0x54a>
 801ddd6:	2c1f      	cmp	r4, #31
 801ddd8:	dd28      	ble.n	801de2c <_strtod_l+0x5f4>
 801ddda:	2300      	movs	r3, #0
 801dddc:	9306      	str	r3, [sp, #24]
 801ddde:	9307      	str	r3, [sp, #28]
 801dde0:	930d      	str	r3, [sp, #52]	@ 0x34
 801dde2:	9308      	str	r3, [sp, #32]
 801dde4:	2322      	movs	r3, #34	@ 0x22
 801dde6:	9a05      	ldr	r2, [sp, #20]
 801dde8:	2600      	movs	r6, #0
 801ddea:	6013      	str	r3, [r2, #0]
 801ddec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddee:	2700      	movs	r7, #0
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d000      	beq.n	801ddf6 <_strtod_l+0x5be>
 801ddf4:	e763      	b.n	801dcbe <_strtod_l+0x486>
 801ddf6:	e55a      	b.n	801d8ae <_strtod_l+0x76>
 801ddf8:	00004e1f 	.word	0x00004e1f
 801ddfc:	08024736 	.word	0x08024736
 801de00:	080245d4 	.word	0x080245d4
 801de04:	7ff00000 	.word	0x7ff00000
 801de08:	0802472e 	.word	0x0802472e
 801de0c:	08024768 	.word	0x08024768
 801de10:	080249f4 	.word	0x080249f4
 801de14:	080248e0 	.word	0x080248e0
 801de18:	080248b8 	.word	0x080248b8
 801de1c:	fcb00000 	.word	0xfcb00000
 801de20:	7ca00000 	.word	0x7ca00000
 801de24:	7c900000 	.word	0x7c900000
 801de28:	7fefffff 	.word	0x7fefffff
 801de2c:	2310      	movs	r3, #16
 801de2e:	0022      	movs	r2, r4
 801de30:	401a      	ands	r2, r3
 801de32:	9209      	str	r2, [sp, #36]	@ 0x24
 801de34:	421c      	tst	r4, r3
 801de36:	d001      	beq.n	801de3c <_strtod_l+0x604>
 801de38:	335a      	adds	r3, #90	@ 0x5a
 801de3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801de3c:	0030      	movs	r0, r6
 801de3e:	0039      	movs	r1, r7
 801de40:	2300      	movs	r3, #0
 801de42:	4dbf      	ldr	r5, [pc, #764]	@ (801e140 <_strtod_l+0x908>)
 801de44:	2201      	movs	r2, #1
 801de46:	4214      	tst	r4, r2
 801de48:	d004      	beq.n	801de54 <_strtod_l+0x61c>
 801de4a:	682a      	ldr	r2, [r5, #0]
 801de4c:	686b      	ldr	r3, [r5, #4]
 801de4e:	f7e4 fbf5 	bl	800263c <__aeabi_dmul>
 801de52:	2301      	movs	r3, #1
 801de54:	1064      	asrs	r4, r4, #1
 801de56:	3508      	adds	r5, #8
 801de58:	2c00      	cmp	r4, #0
 801de5a:	d1f3      	bne.n	801de44 <_strtod_l+0x60c>
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d001      	beq.n	801de64 <_strtod_l+0x62c>
 801de60:	0006      	movs	r6, r0
 801de62:	000f      	movs	r7, r1
 801de64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de66:	2b00      	cmp	r3, #0
 801de68:	d00d      	beq.n	801de86 <_strtod_l+0x64e>
 801de6a:	236b      	movs	r3, #107	@ 0x6b
 801de6c:	007a      	lsls	r2, r7, #1
 801de6e:	0d52      	lsrs	r2, r2, #21
 801de70:	0039      	movs	r1, r7
 801de72:	1a9b      	subs	r3, r3, r2
 801de74:	2b00      	cmp	r3, #0
 801de76:	dd06      	ble.n	801de86 <_strtod_l+0x64e>
 801de78:	2b1f      	cmp	r3, #31
 801de7a:	dd5a      	ble.n	801df32 <_strtod_l+0x6fa>
 801de7c:	2600      	movs	r6, #0
 801de7e:	2b34      	cmp	r3, #52	@ 0x34
 801de80:	dd50      	ble.n	801df24 <_strtod_l+0x6ec>
 801de82:	27dc      	movs	r7, #220	@ 0xdc
 801de84:	04bf      	lsls	r7, r7, #18
 801de86:	2200      	movs	r2, #0
 801de88:	2300      	movs	r3, #0
 801de8a:	0030      	movs	r0, r6
 801de8c:	0039      	movs	r1, r7
 801de8e:	f7e2 fb0f 	bl	80004b0 <__aeabi_dcmpeq>
 801de92:	2800      	cmp	r0, #0
 801de94:	d1a1      	bne.n	801ddda <_strtod_l+0x5a2>
 801de96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de98:	9a08      	ldr	r2, [sp, #32]
 801de9a:	9300      	str	r3, [sp, #0]
 801de9c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801de9e:	9b06      	ldr	r3, [sp, #24]
 801dea0:	9805      	ldr	r0, [sp, #20]
 801dea2:	f002 fec5 	bl	8020c30 <__s2b>
 801dea6:	900d      	str	r0, [sp, #52]	@ 0x34
 801dea8:	2800      	cmp	r0, #0
 801deaa:	d100      	bne.n	801deae <_strtod_l+0x676>
 801deac:	e6f9      	b.n	801dca2 <_strtod_l+0x46a>
 801deae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801deb0:	9907      	ldr	r1, [sp, #28]
 801deb2:	17da      	asrs	r2, r3, #31
 801deb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801deb6:	1a5b      	subs	r3, r3, r1
 801deb8:	401a      	ands	r2, r3
 801deba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801debc:	9217      	str	r2, [sp, #92]	@ 0x5c
 801debe:	43db      	mvns	r3, r3
 801dec0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dec2:	17db      	asrs	r3, r3, #31
 801dec4:	401a      	ands	r2, r3
 801dec6:	2300      	movs	r3, #0
 801dec8:	921a      	str	r2, [sp, #104]	@ 0x68
 801deca:	9306      	str	r3, [sp, #24]
 801decc:	9307      	str	r3, [sp, #28]
 801dece:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ded0:	9805      	ldr	r0, [sp, #20]
 801ded2:	6859      	ldr	r1, [r3, #4]
 801ded4:	f002 fe00 	bl	8020ad8 <_Balloc>
 801ded8:	9008      	str	r0, [sp, #32]
 801deda:	2800      	cmp	r0, #0
 801dedc:	d100      	bne.n	801dee0 <_strtod_l+0x6a8>
 801dede:	e6e5      	b.n	801dcac <_strtod_l+0x474>
 801dee0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dee2:	300c      	adds	r0, #12
 801dee4:	0019      	movs	r1, r3
 801dee6:	691a      	ldr	r2, [r3, #16]
 801dee8:	310c      	adds	r1, #12
 801deea:	3202      	adds	r2, #2
 801deec:	0092      	lsls	r2, r2, #2
 801deee:	f001 faef 	bl	801f4d0 <memcpy>
 801def2:	ab20      	add	r3, sp, #128	@ 0x80
 801def4:	9301      	str	r3, [sp, #4]
 801def6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801def8:	9300      	str	r3, [sp, #0]
 801defa:	0032      	movs	r2, r6
 801defc:	003b      	movs	r3, r7
 801defe:	9805      	ldr	r0, [sp, #20]
 801df00:	9610      	str	r6, [sp, #64]	@ 0x40
 801df02:	9711      	str	r7, [sp, #68]	@ 0x44
 801df04:	f003 f9e4 	bl	80212d0 <__d2b>
 801df08:	901e      	str	r0, [sp, #120]	@ 0x78
 801df0a:	2800      	cmp	r0, #0
 801df0c:	d100      	bne.n	801df10 <_strtod_l+0x6d8>
 801df0e:	e6cd      	b.n	801dcac <_strtod_l+0x474>
 801df10:	2101      	movs	r1, #1
 801df12:	9805      	ldr	r0, [sp, #20]
 801df14:	f002 ff28 	bl	8020d68 <__i2b>
 801df18:	9007      	str	r0, [sp, #28]
 801df1a:	2800      	cmp	r0, #0
 801df1c:	d10e      	bne.n	801df3c <_strtod_l+0x704>
 801df1e:	2300      	movs	r3, #0
 801df20:	9307      	str	r3, [sp, #28]
 801df22:	e6c3      	b.n	801dcac <_strtod_l+0x474>
 801df24:	234b      	movs	r3, #75	@ 0x4b
 801df26:	1a9a      	subs	r2, r3, r2
 801df28:	3b4c      	subs	r3, #76	@ 0x4c
 801df2a:	4093      	lsls	r3, r2
 801df2c:	4019      	ands	r1, r3
 801df2e:	000f      	movs	r7, r1
 801df30:	e7a9      	b.n	801de86 <_strtod_l+0x64e>
 801df32:	2201      	movs	r2, #1
 801df34:	4252      	negs	r2, r2
 801df36:	409a      	lsls	r2, r3
 801df38:	4016      	ands	r6, r2
 801df3a:	e7a4      	b.n	801de86 <_strtod_l+0x64e>
 801df3c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801df3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801df40:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801df42:	1ad4      	subs	r4, r2, r3
 801df44:	2b00      	cmp	r3, #0
 801df46:	db01      	blt.n	801df4c <_strtod_l+0x714>
 801df48:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801df4a:	195d      	adds	r5, r3, r5
 801df4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801df4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801df50:	1a5b      	subs	r3, r3, r1
 801df52:	2136      	movs	r1, #54	@ 0x36
 801df54:	189b      	adds	r3, r3, r2
 801df56:	1a8a      	subs	r2, r1, r2
 801df58:	497a      	ldr	r1, [pc, #488]	@ (801e144 <_strtod_l+0x90c>)
 801df5a:	2001      	movs	r0, #1
 801df5c:	468c      	mov	ip, r1
 801df5e:	2100      	movs	r1, #0
 801df60:	3b01      	subs	r3, #1
 801df62:	9116      	str	r1, [sp, #88]	@ 0x58
 801df64:	9014      	str	r0, [sp, #80]	@ 0x50
 801df66:	4563      	cmp	r3, ip
 801df68:	da06      	bge.n	801df78 <_strtod_l+0x740>
 801df6a:	4661      	mov	r1, ip
 801df6c:	1ac9      	subs	r1, r1, r3
 801df6e:	1a52      	subs	r2, r2, r1
 801df70:	291f      	cmp	r1, #31
 801df72:	dc3f      	bgt.n	801dff4 <_strtod_l+0x7bc>
 801df74:	4088      	lsls	r0, r1
 801df76:	9014      	str	r0, [sp, #80]	@ 0x50
 801df78:	18ab      	adds	r3, r5, r2
 801df7a:	930e      	str	r3, [sp, #56]	@ 0x38
 801df7c:	18a4      	adds	r4, r4, r2
 801df7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801df82:	191c      	adds	r4, r3, r4
 801df84:	002b      	movs	r3, r5
 801df86:	4295      	cmp	r5, r2
 801df88:	dd00      	ble.n	801df8c <_strtod_l+0x754>
 801df8a:	0013      	movs	r3, r2
 801df8c:	42a3      	cmp	r3, r4
 801df8e:	dd00      	ble.n	801df92 <_strtod_l+0x75a>
 801df90:	0023      	movs	r3, r4
 801df92:	2b00      	cmp	r3, #0
 801df94:	dd04      	ble.n	801dfa0 <_strtod_l+0x768>
 801df96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801df98:	1ae4      	subs	r4, r4, r3
 801df9a:	1ad2      	subs	r2, r2, r3
 801df9c:	920e      	str	r2, [sp, #56]	@ 0x38
 801df9e:	1aed      	subs	r5, r5, r3
 801dfa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	dd16      	ble.n	801dfd4 <_strtod_l+0x79c>
 801dfa6:	001a      	movs	r2, r3
 801dfa8:	9907      	ldr	r1, [sp, #28]
 801dfaa:	9805      	ldr	r0, [sp, #20]
 801dfac:	f002 ffa6 	bl	8020efc <__pow5mult>
 801dfb0:	9007      	str	r0, [sp, #28]
 801dfb2:	2800      	cmp	r0, #0
 801dfb4:	d0b3      	beq.n	801df1e <_strtod_l+0x6e6>
 801dfb6:	0001      	movs	r1, r0
 801dfb8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801dfba:	9805      	ldr	r0, [sp, #20]
 801dfbc:	f002 feec 	bl	8020d98 <__multiply>
 801dfc0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dfc2:	2800      	cmp	r0, #0
 801dfc4:	d100      	bne.n	801dfc8 <_strtod_l+0x790>
 801dfc6:	e671      	b.n	801dcac <_strtod_l+0x474>
 801dfc8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dfca:	9805      	ldr	r0, [sp, #20]
 801dfcc:	f002 fdc8 	bl	8020b60 <_Bfree>
 801dfd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dfd2:	931e      	str	r3, [sp, #120]	@ 0x78
 801dfd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	dc12      	bgt.n	801e000 <_strtod_l+0x7c8>
 801dfda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	dd18      	ble.n	801e012 <_strtod_l+0x7da>
 801dfe0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dfe2:	9908      	ldr	r1, [sp, #32]
 801dfe4:	9805      	ldr	r0, [sp, #20]
 801dfe6:	f002 ff89 	bl	8020efc <__pow5mult>
 801dfea:	9008      	str	r0, [sp, #32]
 801dfec:	2800      	cmp	r0, #0
 801dfee:	d110      	bne.n	801e012 <_strtod_l+0x7da>
 801dff0:	2300      	movs	r3, #0
 801dff2:	e65a      	b.n	801dcaa <_strtod_l+0x472>
 801dff4:	4954      	ldr	r1, [pc, #336]	@ (801e148 <_strtod_l+0x910>)
 801dff6:	1acb      	subs	r3, r1, r3
 801dff8:	0001      	movs	r1, r0
 801dffa:	4099      	lsls	r1, r3
 801dffc:	9116      	str	r1, [sp, #88]	@ 0x58
 801dffe:	e7ba      	b.n	801df76 <_strtod_l+0x73e>
 801e000:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e002:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e004:	9805      	ldr	r0, [sp, #20]
 801e006:	f002 ffd5 	bl	8020fb4 <__lshift>
 801e00a:	901e      	str	r0, [sp, #120]	@ 0x78
 801e00c:	2800      	cmp	r0, #0
 801e00e:	d1e4      	bne.n	801dfda <_strtod_l+0x7a2>
 801e010:	e64c      	b.n	801dcac <_strtod_l+0x474>
 801e012:	2c00      	cmp	r4, #0
 801e014:	dd07      	ble.n	801e026 <_strtod_l+0x7ee>
 801e016:	0022      	movs	r2, r4
 801e018:	9908      	ldr	r1, [sp, #32]
 801e01a:	9805      	ldr	r0, [sp, #20]
 801e01c:	f002 ffca 	bl	8020fb4 <__lshift>
 801e020:	9008      	str	r0, [sp, #32]
 801e022:	2800      	cmp	r0, #0
 801e024:	d0e4      	beq.n	801dff0 <_strtod_l+0x7b8>
 801e026:	2d00      	cmp	r5, #0
 801e028:	dd08      	ble.n	801e03c <_strtod_l+0x804>
 801e02a:	002a      	movs	r2, r5
 801e02c:	9907      	ldr	r1, [sp, #28]
 801e02e:	9805      	ldr	r0, [sp, #20]
 801e030:	f002 ffc0 	bl	8020fb4 <__lshift>
 801e034:	9007      	str	r0, [sp, #28]
 801e036:	2800      	cmp	r0, #0
 801e038:	d100      	bne.n	801e03c <_strtod_l+0x804>
 801e03a:	e637      	b.n	801dcac <_strtod_l+0x474>
 801e03c:	9a08      	ldr	r2, [sp, #32]
 801e03e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e040:	9805      	ldr	r0, [sp, #20]
 801e042:	f003 f83f 	bl	80210c4 <__mdiff>
 801e046:	9006      	str	r0, [sp, #24]
 801e048:	2800      	cmp	r0, #0
 801e04a:	d100      	bne.n	801e04e <_strtod_l+0x816>
 801e04c:	e62e      	b.n	801dcac <_strtod_l+0x474>
 801e04e:	68c3      	ldr	r3, [r0, #12]
 801e050:	9907      	ldr	r1, [sp, #28]
 801e052:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e054:	2300      	movs	r3, #0
 801e056:	60c3      	str	r3, [r0, #12]
 801e058:	f003 f818 	bl	802108c <__mcmp>
 801e05c:	2800      	cmp	r0, #0
 801e05e:	da3b      	bge.n	801e0d8 <_strtod_l+0x8a0>
 801e060:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e062:	4333      	orrs	r3, r6
 801e064:	d167      	bne.n	801e136 <_strtod_l+0x8fe>
 801e066:	033b      	lsls	r3, r7, #12
 801e068:	d165      	bne.n	801e136 <_strtod_l+0x8fe>
 801e06a:	22d6      	movs	r2, #214	@ 0xd6
 801e06c:	4b37      	ldr	r3, [pc, #220]	@ (801e14c <_strtod_l+0x914>)
 801e06e:	04d2      	lsls	r2, r2, #19
 801e070:	403b      	ands	r3, r7
 801e072:	4293      	cmp	r3, r2
 801e074:	d95f      	bls.n	801e136 <_strtod_l+0x8fe>
 801e076:	9b06      	ldr	r3, [sp, #24]
 801e078:	695b      	ldr	r3, [r3, #20]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d103      	bne.n	801e086 <_strtod_l+0x84e>
 801e07e:	9b06      	ldr	r3, [sp, #24]
 801e080:	691b      	ldr	r3, [r3, #16]
 801e082:	2b01      	cmp	r3, #1
 801e084:	dd57      	ble.n	801e136 <_strtod_l+0x8fe>
 801e086:	9906      	ldr	r1, [sp, #24]
 801e088:	2201      	movs	r2, #1
 801e08a:	9805      	ldr	r0, [sp, #20]
 801e08c:	f002 ff92 	bl	8020fb4 <__lshift>
 801e090:	9907      	ldr	r1, [sp, #28]
 801e092:	9006      	str	r0, [sp, #24]
 801e094:	f002 fffa 	bl	802108c <__mcmp>
 801e098:	2800      	cmp	r0, #0
 801e09a:	dd4c      	ble.n	801e136 <_strtod_l+0x8fe>
 801e09c:	4b2b      	ldr	r3, [pc, #172]	@ (801e14c <_strtod_l+0x914>)
 801e09e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0a0:	403b      	ands	r3, r7
 801e0a2:	2a00      	cmp	r2, #0
 801e0a4:	d074      	beq.n	801e190 <_strtod_l+0x958>
 801e0a6:	22d6      	movs	r2, #214	@ 0xd6
 801e0a8:	04d2      	lsls	r2, r2, #19
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	d870      	bhi.n	801e190 <_strtod_l+0x958>
 801e0ae:	22dc      	movs	r2, #220	@ 0xdc
 801e0b0:	0492      	lsls	r2, r2, #18
 801e0b2:	4293      	cmp	r3, r2
 801e0b4:	d800      	bhi.n	801e0b8 <_strtod_l+0x880>
 801e0b6:	e695      	b.n	801dde4 <_strtod_l+0x5ac>
 801e0b8:	0030      	movs	r0, r6
 801e0ba:	0039      	movs	r1, r7
 801e0bc:	4b24      	ldr	r3, [pc, #144]	@ (801e150 <_strtod_l+0x918>)
 801e0be:	2200      	movs	r2, #0
 801e0c0:	f7e4 fabc 	bl	800263c <__aeabi_dmul>
 801e0c4:	4b21      	ldr	r3, [pc, #132]	@ (801e14c <_strtod_l+0x914>)
 801e0c6:	0006      	movs	r6, r0
 801e0c8:	000f      	movs	r7, r1
 801e0ca:	420b      	tst	r3, r1
 801e0cc:	d000      	beq.n	801e0d0 <_strtod_l+0x898>
 801e0ce:	e5f6      	b.n	801dcbe <_strtod_l+0x486>
 801e0d0:	2322      	movs	r3, #34	@ 0x22
 801e0d2:	9a05      	ldr	r2, [sp, #20]
 801e0d4:	6013      	str	r3, [r2, #0]
 801e0d6:	e5f2      	b.n	801dcbe <_strtod_l+0x486>
 801e0d8:	970e      	str	r7, [sp, #56]	@ 0x38
 801e0da:	2800      	cmp	r0, #0
 801e0dc:	d175      	bne.n	801e1ca <_strtod_l+0x992>
 801e0de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e0e0:	033b      	lsls	r3, r7, #12
 801e0e2:	0b1b      	lsrs	r3, r3, #12
 801e0e4:	2a00      	cmp	r2, #0
 801e0e6:	d039      	beq.n	801e15c <_strtod_l+0x924>
 801e0e8:	4a1a      	ldr	r2, [pc, #104]	@ (801e154 <_strtod_l+0x91c>)
 801e0ea:	4293      	cmp	r3, r2
 801e0ec:	d138      	bne.n	801e160 <_strtod_l+0x928>
 801e0ee:	2101      	movs	r1, #1
 801e0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0f2:	4249      	negs	r1, r1
 801e0f4:	0032      	movs	r2, r6
 801e0f6:	0008      	movs	r0, r1
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	d00b      	beq.n	801e114 <_strtod_l+0x8dc>
 801e0fc:	24d4      	movs	r4, #212	@ 0xd4
 801e0fe:	4b13      	ldr	r3, [pc, #76]	@ (801e14c <_strtod_l+0x914>)
 801e100:	0008      	movs	r0, r1
 801e102:	403b      	ands	r3, r7
 801e104:	04e4      	lsls	r4, r4, #19
 801e106:	42a3      	cmp	r3, r4
 801e108:	d804      	bhi.n	801e114 <_strtod_l+0x8dc>
 801e10a:	306c      	adds	r0, #108	@ 0x6c
 801e10c:	0d1b      	lsrs	r3, r3, #20
 801e10e:	1ac3      	subs	r3, r0, r3
 801e110:	4099      	lsls	r1, r3
 801e112:	0008      	movs	r0, r1
 801e114:	4282      	cmp	r2, r0
 801e116:	d123      	bne.n	801e160 <_strtod_l+0x928>
 801e118:	4b0f      	ldr	r3, [pc, #60]	@ (801e158 <_strtod_l+0x920>)
 801e11a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e11c:	4299      	cmp	r1, r3
 801e11e:	d102      	bne.n	801e126 <_strtod_l+0x8ee>
 801e120:	3201      	adds	r2, #1
 801e122:	d100      	bne.n	801e126 <_strtod_l+0x8ee>
 801e124:	e5c2      	b.n	801dcac <_strtod_l+0x474>
 801e126:	4b09      	ldr	r3, [pc, #36]	@ (801e14c <_strtod_l+0x914>)
 801e128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e12a:	2600      	movs	r6, #0
 801e12c:	401a      	ands	r2, r3
 801e12e:	0013      	movs	r3, r2
 801e130:	2280      	movs	r2, #128	@ 0x80
 801e132:	0352      	lsls	r2, r2, #13
 801e134:	189f      	adds	r7, r3, r2
 801e136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e138:	2b00      	cmp	r3, #0
 801e13a:	d1bd      	bne.n	801e0b8 <_strtod_l+0x880>
 801e13c:	e5bf      	b.n	801dcbe <_strtod_l+0x486>
 801e13e:	46c0      	nop			@ (mov r8, r8)
 801e140:	08024600 	.word	0x08024600
 801e144:	fffffc02 	.word	0xfffffc02
 801e148:	fffffbe2 	.word	0xfffffbe2
 801e14c:	7ff00000 	.word	0x7ff00000
 801e150:	39500000 	.word	0x39500000
 801e154:	000fffff 	.word	0x000fffff
 801e158:	7fefffff 	.word	0x7fefffff
 801e15c:	4333      	orrs	r3, r6
 801e15e:	d09d      	beq.n	801e09c <_strtod_l+0x864>
 801e160:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e162:	2b00      	cmp	r3, #0
 801e164:	d01c      	beq.n	801e1a0 <_strtod_l+0x968>
 801e166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e168:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e16a:	4213      	tst	r3, r2
 801e16c:	d0e3      	beq.n	801e136 <_strtod_l+0x8fe>
 801e16e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e170:	0030      	movs	r0, r6
 801e172:	0039      	movs	r1, r7
 801e174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e176:	2b00      	cmp	r3, #0
 801e178:	d016      	beq.n	801e1a8 <_strtod_l+0x970>
 801e17a:	f7ff fb45 	bl	801d808 <sulp>
 801e17e:	0002      	movs	r2, r0
 801e180:	000b      	movs	r3, r1
 801e182:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e184:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e186:	f7e3 fab1 	bl	80016ec <__aeabi_dadd>
 801e18a:	0006      	movs	r6, r0
 801e18c:	000f      	movs	r7, r1
 801e18e:	e7d2      	b.n	801e136 <_strtod_l+0x8fe>
 801e190:	2601      	movs	r6, #1
 801e192:	4a92      	ldr	r2, [pc, #584]	@ (801e3dc <_strtod_l+0xba4>)
 801e194:	4276      	negs	r6, r6
 801e196:	189b      	adds	r3, r3, r2
 801e198:	4a91      	ldr	r2, [pc, #580]	@ (801e3e0 <_strtod_l+0xba8>)
 801e19a:	431a      	orrs	r2, r3
 801e19c:	0017      	movs	r7, r2
 801e19e:	e7ca      	b.n	801e136 <_strtod_l+0x8fe>
 801e1a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e1a2:	4233      	tst	r3, r6
 801e1a4:	d0c7      	beq.n	801e136 <_strtod_l+0x8fe>
 801e1a6:	e7e2      	b.n	801e16e <_strtod_l+0x936>
 801e1a8:	f7ff fb2e 	bl	801d808 <sulp>
 801e1ac:	0002      	movs	r2, r0
 801e1ae:	000b      	movs	r3, r1
 801e1b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e1b2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e1b4:	f7e4 fd0a 	bl	8002bcc <__aeabi_dsub>
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	2300      	movs	r3, #0
 801e1bc:	0006      	movs	r6, r0
 801e1be:	000f      	movs	r7, r1
 801e1c0:	f7e2 f976 	bl	80004b0 <__aeabi_dcmpeq>
 801e1c4:	2800      	cmp	r0, #0
 801e1c6:	d0b6      	beq.n	801e136 <_strtod_l+0x8fe>
 801e1c8:	e60c      	b.n	801dde4 <_strtod_l+0x5ac>
 801e1ca:	9907      	ldr	r1, [sp, #28]
 801e1cc:	9806      	ldr	r0, [sp, #24]
 801e1ce:	f003 f8df 	bl	8021390 <__ratio>
 801e1d2:	2380      	movs	r3, #128	@ 0x80
 801e1d4:	2200      	movs	r2, #0
 801e1d6:	05db      	lsls	r3, r3, #23
 801e1d8:	0004      	movs	r4, r0
 801e1da:	000d      	movs	r5, r1
 801e1dc:	f7e2 f978 	bl	80004d0 <__aeabi_dcmple>
 801e1e0:	2800      	cmp	r0, #0
 801e1e2:	d06c      	beq.n	801e2be <_strtod_l+0xa86>
 801e1e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d177      	bne.n	801e2da <_strtod_l+0xaa2>
 801e1ea:	2e00      	cmp	r6, #0
 801e1ec:	d157      	bne.n	801e29e <_strtod_l+0xa66>
 801e1ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e1f0:	031b      	lsls	r3, r3, #12
 801e1f2:	d15a      	bne.n	801e2aa <_strtod_l+0xa72>
 801e1f4:	2200      	movs	r2, #0
 801e1f6:	0020      	movs	r0, r4
 801e1f8:	0029      	movs	r1, r5
 801e1fa:	4b7a      	ldr	r3, [pc, #488]	@ (801e3e4 <_strtod_l+0xbac>)
 801e1fc:	f7e2 f95e 	bl	80004bc <__aeabi_dcmplt>
 801e200:	2800      	cmp	r0, #0
 801e202:	d159      	bne.n	801e2b8 <_strtod_l+0xa80>
 801e204:	0020      	movs	r0, r4
 801e206:	0029      	movs	r1, r5
 801e208:	2200      	movs	r2, #0
 801e20a:	4b77      	ldr	r3, [pc, #476]	@ (801e3e8 <_strtod_l+0xbb0>)
 801e20c:	f7e4 fa16 	bl	800263c <__aeabi_dmul>
 801e210:	0004      	movs	r4, r0
 801e212:	000d      	movs	r5, r1
 801e214:	2380      	movs	r3, #128	@ 0x80
 801e216:	061b      	lsls	r3, r3, #24
 801e218:	18eb      	adds	r3, r5, r3
 801e21a:	940a      	str	r4, [sp, #40]	@ 0x28
 801e21c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e21e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e222:	9214      	str	r2, [sp, #80]	@ 0x50
 801e224:	9315      	str	r3, [sp, #84]	@ 0x54
 801e226:	4a71      	ldr	r2, [pc, #452]	@ (801e3ec <_strtod_l+0xbb4>)
 801e228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e22a:	4013      	ands	r3, r2
 801e22c:	9316      	str	r3, [sp, #88]	@ 0x58
 801e22e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e230:	4b6f      	ldr	r3, [pc, #444]	@ (801e3f0 <_strtod_l+0xbb8>)
 801e232:	429a      	cmp	r2, r3
 801e234:	d000      	beq.n	801e238 <_strtod_l+0xa00>
 801e236:	e087      	b.n	801e348 <_strtod_l+0xb10>
 801e238:	4a6e      	ldr	r2, [pc, #440]	@ (801e3f4 <_strtod_l+0xbbc>)
 801e23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e23c:	4694      	mov	ip, r2
 801e23e:	4463      	add	r3, ip
 801e240:	001f      	movs	r7, r3
 801e242:	0030      	movs	r0, r6
 801e244:	0019      	movs	r1, r3
 801e246:	f002 ffd7 	bl	80211f8 <__ulp>
 801e24a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e24c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e24e:	f7e4 f9f5 	bl	800263c <__aeabi_dmul>
 801e252:	0032      	movs	r2, r6
 801e254:	003b      	movs	r3, r7
 801e256:	f7e3 fa49 	bl	80016ec <__aeabi_dadd>
 801e25a:	4a64      	ldr	r2, [pc, #400]	@ (801e3ec <_strtod_l+0xbb4>)
 801e25c:	4b66      	ldr	r3, [pc, #408]	@ (801e3f8 <_strtod_l+0xbc0>)
 801e25e:	0006      	movs	r6, r0
 801e260:	400a      	ands	r2, r1
 801e262:	429a      	cmp	r2, r3
 801e264:	d940      	bls.n	801e2e8 <_strtod_l+0xab0>
 801e266:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e268:	4a64      	ldr	r2, [pc, #400]	@ (801e3fc <_strtod_l+0xbc4>)
 801e26a:	4293      	cmp	r3, r2
 801e26c:	d103      	bne.n	801e276 <_strtod_l+0xa3e>
 801e26e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e270:	3301      	adds	r3, #1
 801e272:	d100      	bne.n	801e276 <_strtod_l+0xa3e>
 801e274:	e51a      	b.n	801dcac <_strtod_l+0x474>
 801e276:	2601      	movs	r6, #1
 801e278:	4f60      	ldr	r7, [pc, #384]	@ (801e3fc <_strtod_l+0xbc4>)
 801e27a:	4276      	negs	r6, r6
 801e27c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e27e:	9805      	ldr	r0, [sp, #20]
 801e280:	f002 fc6e 	bl	8020b60 <_Bfree>
 801e284:	9908      	ldr	r1, [sp, #32]
 801e286:	9805      	ldr	r0, [sp, #20]
 801e288:	f002 fc6a 	bl	8020b60 <_Bfree>
 801e28c:	9907      	ldr	r1, [sp, #28]
 801e28e:	9805      	ldr	r0, [sp, #20]
 801e290:	f002 fc66 	bl	8020b60 <_Bfree>
 801e294:	9906      	ldr	r1, [sp, #24]
 801e296:	9805      	ldr	r0, [sp, #20]
 801e298:	f002 fc62 	bl	8020b60 <_Bfree>
 801e29c:	e617      	b.n	801dece <_strtod_l+0x696>
 801e29e:	2e01      	cmp	r6, #1
 801e2a0:	d103      	bne.n	801e2aa <_strtod_l+0xa72>
 801e2a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d100      	bne.n	801e2aa <_strtod_l+0xa72>
 801e2a8:	e59c      	b.n	801dde4 <_strtod_l+0x5ac>
 801e2aa:	2300      	movs	r3, #0
 801e2ac:	4c54      	ldr	r4, [pc, #336]	@ (801e400 <_strtod_l+0xbc8>)
 801e2ae:	4d4d      	ldr	r5, [pc, #308]	@ (801e3e4 <_strtod_l+0xbac>)
 801e2b0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e2b4:	2400      	movs	r4, #0
 801e2b6:	e7b2      	b.n	801e21e <_strtod_l+0x9e6>
 801e2b8:	2400      	movs	r4, #0
 801e2ba:	4d4b      	ldr	r5, [pc, #300]	@ (801e3e8 <_strtod_l+0xbb0>)
 801e2bc:	e7aa      	b.n	801e214 <_strtod_l+0x9dc>
 801e2be:	0020      	movs	r0, r4
 801e2c0:	0029      	movs	r1, r5
 801e2c2:	4b49      	ldr	r3, [pc, #292]	@ (801e3e8 <_strtod_l+0xbb0>)
 801e2c4:	2200      	movs	r2, #0
 801e2c6:	f7e4 f9b9 	bl	800263c <__aeabi_dmul>
 801e2ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e2cc:	0004      	movs	r4, r0
 801e2ce:	000d      	movs	r5, r1
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d09f      	beq.n	801e214 <_strtod_l+0x9dc>
 801e2d4:	940a      	str	r4, [sp, #40]	@ 0x28
 801e2d6:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e2d8:	e7a1      	b.n	801e21e <_strtod_l+0x9e6>
 801e2da:	2300      	movs	r3, #0
 801e2dc:	4c41      	ldr	r4, [pc, #260]	@ (801e3e4 <_strtod_l+0xbac>)
 801e2de:	0025      	movs	r5, r4
 801e2e0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e2e4:	001c      	movs	r4, r3
 801e2e6:	e79a      	b.n	801e21e <_strtod_l+0x9e6>
 801e2e8:	23d4      	movs	r3, #212	@ 0xd4
 801e2ea:	049b      	lsls	r3, r3, #18
 801e2ec:	18cf      	adds	r7, r1, r3
 801e2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2f0:	9710      	str	r7, [sp, #64]	@ 0x40
 801e2f2:	2b00      	cmp	r3, #0
 801e2f4:	d1c2      	bne.n	801e27c <_strtod_l+0xa44>
 801e2f6:	4b3d      	ldr	r3, [pc, #244]	@ (801e3ec <_strtod_l+0xbb4>)
 801e2f8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e2fa:	403b      	ands	r3, r7
 801e2fc:	429a      	cmp	r2, r3
 801e2fe:	d1bd      	bne.n	801e27c <_strtod_l+0xa44>
 801e300:	0020      	movs	r0, r4
 801e302:	0029      	movs	r1, r5
 801e304:	f7e2 f9c0 	bl	8000688 <__aeabi_d2lz>
 801e308:	f7e2 f9f8 	bl	80006fc <__aeabi_l2d>
 801e30c:	0002      	movs	r2, r0
 801e30e:	000b      	movs	r3, r1
 801e310:	0020      	movs	r0, r4
 801e312:	0029      	movs	r1, r5
 801e314:	f7e4 fc5a 	bl	8002bcc <__aeabi_dsub>
 801e318:	033c      	lsls	r4, r7, #12
 801e31a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e31c:	0b24      	lsrs	r4, r4, #12
 801e31e:	4334      	orrs	r4, r6
 801e320:	900e      	str	r0, [sp, #56]	@ 0x38
 801e322:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e324:	4a37      	ldr	r2, [pc, #220]	@ (801e404 <_strtod_l+0xbcc>)
 801e326:	431c      	orrs	r4, r3
 801e328:	d052      	beq.n	801e3d0 <_strtod_l+0xb98>
 801e32a:	4b37      	ldr	r3, [pc, #220]	@ (801e408 <_strtod_l+0xbd0>)
 801e32c:	f7e2 f8c6 	bl	80004bc <__aeabi_dcmplt>
 801e330:	2800      	cmp	r0, #0
 801e332:	d000      	beq.n	801e336 <_strtod_l+0xafe>
 801e334:	e4c3      	b.n	801dcbe <_strtod_l+0x486>
 801e336:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e338:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e33a:	4a34      	ldr	r2, [pc, #208]	@ (801e40c <_strtod_l+0xbd4>)
 801e33c:	4b2a      	ldr	r3, [pc, #168]	@ (801e3e8 <_strtod_l+0xbb0>)
 801e33e:	f7e2 f8d1 	bl	80004e4 <__aeabi_dcmpgt>
 801e342:	2800      	cmp	r0, #0
 801e344:	d09a      	beq.n	801e27c <_strtod_l+0xa44>
 801e346:	e4ba      	b.n	801dcbe <_strtod_l+0x486>
 801e348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d02a      	beq.n	801e3a4 <_strtod_l+0xb6c>
 801e34e:	23d4      	movs	r3, #212	@ 0xd4
 801e350:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e352:	04db      	lsls	r3, r3, #19
 801e354:	429a      	cmp	r2, r3
 801e356:	d825      	bhi.n	801e3a4 <_strtod_l+0xb6c>
 801e358:	0020      	movs	r0, r4
 801e35a:	0029      	movs	r1, r5
 801e35c:	4a2c      	ldr	r2, [pc, #176]	@ (801e410 <_strtod_l+0xbd8>)
 801e35e:	4b2d      	ldr	r3, [pc, #180]	@ (801e414 <_strtod_l+0xbdc>)
 801e360:	f7e2 f8b6 	bl	80004d0 <__aeabi_dcmple>
 801e364:	2800      	cmp	r0, #0
 801e366:	d016      	beq.n	801e396 <_strtod_l+0xb5e>
 801e368:	0020      	movs	r0, r4
 801e36a:	0029      	movs	r1, r5
 801e36c:	f7e2 f96e 	bl	800064c <__aeabi_d2uiz>
 801e370:	2800      	cmp	r0, #0
 801e372:	d100      	bne.n	801e376 <_strtod_l+0xb3e>
 801e374:	3001      	adds	r0, #1
 801e376:	f7e5 f851 	bl	800341c <__aeabi_ui2d>
 801e37a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e37c:	0004      	movs	r4, r0
 801e37e:	000d      	movs	r5, r1
 801e380:	2b00      	cmp	r3, #0
 801e382:	d122      	bne.n	801e3ca <_strtod_l+0xb92>
 801e384:	2380      	movs	r3, #128	@ 0x80
 801e386:	061b      	lsls	r3, r3, #24
 801e388:	18cb      	adds	r3, r1, r3
 801e38a:	9018      	str	r0, [sp, #96]	@ 0x60
 801e38c:	9319      	str	r3, [sp, #100]	@ 0x64
 801e38e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e390:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e392:	9214      	str	r2, [sp, #80]	@ 0x50
 801e394:	9315      	str	r3, [sp, #84]	@ 0x54
 801e396:	22d6      	movs	r2, #214	@ 0xd6
 801e398:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e39a:	04d2      	lsls	r2, r2, #19
 801e39c:	189b      	adds	r3, r3, r2
 801e39e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e3a0:	1a9b      	subs	r3, r3, r2
 801e3a2:	9315      	str	r3, [sp, #84]	@ 0x54
 801e3a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e3a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e3a8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e3aa:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e3ac:	f002 ff24 	bl	80211f8 <__ulp>
 801e3b0:	0002      	movs	r2, r0
 801e3b2:	000b      	movs	r3, r1
 801e3b4:	0030      	movs	r0, r6
 801e3b6:	0039      	movs	r1, r7
 801e3b8:	f7e4 f940 	bl	800263c <__aeabi_dmul>
 801e3bc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e3be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e3c0:	f7e3 f994 	bl	80016ec <__aeabi_dadd>
 801e3c4:	0006      	movs	r6, r0
 801e3c6:	000f      	movs	r7, r1
 801e3c8:	e791      	b.n	801e2ee <_strtod_l+0xab6>
 801e3ca:	9418      	str	r4, [sp, #96]	@ 0x60
 801e3cc:	9519      	str	r5, [sp, #100]	@ 0x64
 801e3ce:	e7de      	b.n	801e38e <_strtod_l+0xb56>
 801e3d0:	4b11      	ldr	r3, [pc, #68]	@ (801e418 <_strtod_l+0xbe0>)
 801e3d2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e3d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e3d6:	f7e2 f871 	bl	80004bc <__aeabi_dcmplt>
 801e3da:	e7b2      	b.n	801e342 <_strtod_l+0xb0a>
 801e3dc:	fff00000 	.word	0xfff00000
 801e3e0:	000fffff 	.word	0x000fffff
 801e3e4:	3ff00000 	.word	0x3ff00000
 801e3e8:	3fe00000 	.word	0x3fe00000
 801e3ec:	7ff00000 	.word	0x7ff00000
 801e3f0:	7fe00000 	.word	0x7fe00000
 801e3f4:	fcb00000 	.word	0xfcb00000
 801e3f8:	7c9fffff 	.word	0x7c9fffff
 801e3fc:	7fefffff 	.word	0x7fefffff
 801e400:	bff00000 	.word	0xbff00000
 801e404:	94a03595 	.word	0x94a03595
 801e408:	3fdfffff 	.word	0x3fdfffff
 801e40c:	35afe535 	.word	0x35afe535
 801e410:	ffc00000 	.word	0xffc00000
 801e414:	41dfffff 	.word	0x41dfffff
 801e418:	3fcfffff 	.word	0x3fcfffff

0801e41c <strtod>:
 801e41c:	b510      	push	{r4, lr}
 801e41e:	4c04      	ldr	r4, [pc, #16]	@ (801e430 <strtod+0x14>)
 801e420:	000a      	movs	r2, r1
 801e422:	0001      	movs	r1, r0
 801e424:	4b03      	ldr	r3, [pc, #12]	@ (801e434 <strtod+0x18>)
 801e426:	6820      	ldr	r0, [r4, #0]
 801e428:	f7ff fa06 	bl	801d838 <_strtod_l>
 801e42c:	bd10      	pop	{r4, pc}
 801e42e:	46c0      	nop			@ (mov r8, r8)
 801e430:	200003c8 	.word	0x200003c8
 801e434:	2000025c 	.word	0x2000025c

0801e438 <_strtol_l.constprop.0>:
 801e438:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e43a:	b085      	sub	sp, #20
 801e43c:	0017      	movs	r7, r2
 801e43e:	001e      	movs	r6, r3
 801e440:	9003      	str	r0, [sp, #12]
 801e442:	9101      	str	r1, [sp, #4]
 801e444:	2b24      	cmp	r3, #36	@ 0x24
 801e446:	d844      	bhi.n	801e4d2 <_strtol_l.constprop.0+0x9a>
 801e448:	000c      	movs	r4, r1
 801e44a:	2b01      	cmp	r3, #1
 801e44c:	d041      	beq.n	801e4d2 <_strtol_l.constprop.0+0x9a>
 801e44e:	4b3d      	ldr	r3, [pc, #244]	@ (801e544 <_strtol_l.constprop.0+0x10c>)
 801e450:	2208      	movs	r2, #8
 801e452:	469c      	mov	ip, r3
 801e454:	0023      	movs	r3, r4
 801e456:	4661      	mov	r1, ip
 801e458:	781d      	ldrb	r5, [r3, #0]
 801e45a:	3401      	adds	r4, #1
 801e45c:	5d48      	ldrb	r0, [r1, r5]
 801e45e:	0001      	movs	r1, r0
 801e460:	4011      	ands	r1, r2
 801e462:	4210      	tst	r0, r2
 801e464:	d1f6      	bne.n	801e454 <_strtol_l.constprop.0+0x1c>
 801e466:	2d2d      	cmp	r5, #45	@ 0x2d
 801e468:	d13a      	bne.n	801e4e0 <_strtol_l.constprop.0+0xa8>
 801e46a:	7825      	ldrb	r5, [r4, #0]
 801e46c:	1c9c      	adds	r4, r3, #2
 801e46e:	2301      	movs	r3, #1
 801e470:	9300      	str	r3, [sp, #0]
 801e472:	2210      	movs	r2, #16
 801e474:	0033      	movs	r3, r6
 801e476:	4393      	bics	r3, r2
 801e478:	d109      	bne.n	801e48e <_strtol_l.constprop.0+0x56>
 801e47a:	2d30      	cmp	r5, #48	@ 0x30
 801e47c:	d136      	bne.n	801e4ec <_strtol_l.constprop.0+0xb4>
 801e47e:	2120      	movs	r1, #32
 801e480:	7823      	ldrb	r3, [r4, #0]
 801e482:	438b      	bics	r3, r1
 801e484:	2b58      	cmp	r3, #88	@ 0x58
 801e486:	d131      	bne.n	801e4ec <_strtol_l.constprop.0+0xb4>
 801e488:	0016      	movs	r6, r2
 801e48a:	7865      	ldrb	r5, [r4, #1]
 801e48c:	3402      	adds	r4, #2
 801e48e:	4a2e      	ldr	r2, [pc, #184]	@ (801e548 <_strtol_l.constprop.0+0x110>)
 801e490:	9b00      	ldr	r3, [sp, #0]
 801e492:	4694      	mov	ip, r2
 801e494:	4463      	add	r3, ip
 801e496:	0031      	movs	r1, r6
 801e498:	0018      	movs	r0, r3
 801e49a:	9302      	str	r3, [sp, #8]
 801e49c:	f7e1 ff08 	bl	80002b0 <__aeabi_uidivmod>
 801e4a0:	2200      	movs	r2, #0
 801e4a2:	4684      	mov	ip, r0
 801e4a4:	0010      	movs	r0, r2
 801e4a6:	002b      	movs	r3, r5
 801e4a8:	3b30      	subs	r3, #48	@ 0x30
 801e4aa:	2b09      	cmp	r3, #9
 801e4ac:	d825      	bhi.n	801e4fa <_strtol_l.constprop.0+0xc2>
 801e4ae:	001d      	movs	r5, r3
 801e4b0:	42ae      	cmp	r6, r5
 801e4b2:	dd31      	ble.n	801e518 <_strtol_l.constprop.0+0xe0>
 801e4b4:	1c53      	adds	r3, r2, #1
 801e4b6:	d009      	beq.n	801e4cc <_strtol_l.constprop.0+0x94>
 801e4b8:	2201      	movs	r2, #1
 801e4ba:	4252      	negs	r2, r2
 801e4bc:	4584      	cmp	ip, r0
 801e4be:	d305      	bcc.n	801e4cc <_strtol_l.constprop.0+0x94>
 801e4c0:	d101      	bne.n	801e4c6 <_strtol_l.constprop.0+0x8e>
 801e4c2:	42a9      	cmp	r1, r5
 801e4c4:	db25      	blt.n	801e512 <_strtol_l.constprop.0+0xda>
 801e4c6:	2201      	movs	r2, #1
 801e4c8:	4370      	muls	r0, r6
 801e4ca:	1828      	adds	r0, r5, r0
 801e4cc:	7825      	ldrb	r5, [r4, #0]
 801e4ce:	3401      	adds	r4, #1
 801e4d0:	e7e9      	b.n	801e4a6 <_strtol_l.constprop.0+0x6e>
 801e4d2:	f000 ffc5 	bl	801f460 <__errno>
 801e4d6:	2316      	movs	r3, #22
 801e4d8:	6003      	str	r3, [r0, #0]
 801e4da:	2000      	movs	r0, #0
 801e4dc:	b005      	add	sp, #20
 801e4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4e0:	9100      	str	r1, [sp, #0]
 801e4e2:	2d2b      	cmp	r5, #43	@ 0x2b
 801e4e4:	d1c5      	bne.n	801e472 <_strtol_l.constprop.0+0x3a>
 801e4e6:	7825      	ldrb	r5, [r4, #0]
 801e4e8:	1c9c      	adds	r4, r3, #2
 801e4ea:	e7c2      	b.n	801e472 <_strtol_l.constprop.0+0x3a>
 801e4ec:	2e00      	cmp	r6, #0
 801e4ee:	d1ce      	bne.n	801e48e <_strtol_l.constprop.0+0x56>
 801e4f0:	3608      	adds	r6, #8
 801e4f2:	2d30      	cmp	r5, #48	@ 0x30
 801e4f4:	d0cb      	beq.n	801e48e <_strtol_l.constprop.0+0x56>
 801e4f6:	3602      	adds	r6, #2
 801e4f8:	e7c9      	b.n	801e48e <_strtol_l.constprop.0+0x56>
 801e4fa:	002b      	movs	r3, r5
 801e4fc:	3b41      	subs	r3, #65	@ 0x41
 801e4fe:	2b19      	cmp	r3, #25
 801e500:	d801      	bhi.n	801e506 <_strtol_l.constprop.0+0xce>
 801e502:	3d37      	subs	r5, #55	@ 0x37
 801e504:	e7d4      	b.n	801e4b0 <_strtol_l.constprop.0+0x78>
 801e506:	002b      	movs	r3, r5
 801e508:	3b61      	subs	r3, #97	@ 0x61
 801e50a:	2b19      	cmp	r3, #25
 801e50c:	d804      	bhi.n	801e518 <_strtol_l.constprop.0+0xe0>
 801e50e:	3d57      	subs	r5, #87	@ 0x57
 801e510:	e7ce      	b.n	801e4b0 <_strtol_l.constprop.0+0x78>
 801e512:	2201      	movs	r2, #1
 801e514:	4252      	negs	r2, r2
 801e516:	e7d9      	b.n	801e4cc <_strtol_l.constprop.0+0x94>
 801e518:	1c53      	adds	r3, r2, #1
 801e51a:	d108      	bne.n	801e52e <_strtol_l.constprop.0+0xf6>
 801e51c:	2322      	movs	r3, #34	@ 0x22
 801e51e:	9a03      	ldr	r2, [sp, #12]
 801e520:	9802      	ldr	r0, [sp, #8]
 801e522:	6013      	str	r3, [r2, #0]
 801e524:	2f00      	cmp	r7, #0
 801e526:	d0d9      	beq.n	801e4dc <_strtol_l.constprop.0+0xa4>
 801e528:	1e63      	subs	r3, r4, #1
 801e52a:	9301      	str	r3, [sp, #4]
 801e52c:	e007      	b.n	801e53e <_strtol_l.constprop.0+0x106>
 801e52e:	9b00      	ldr	r3, [sp, #0]
 801e530:	2b00      	cmp	r3, #0
 801e532:	d000      	beq.n	801e536 <_strtol_l.constprop.0+0xfe>
 801e534:	4240      	negs	r0, r0
 801e536:	2f00      	cmp	r7, #0
 801e538:	d0d0      	beq.n	801e4dc <_strtol_l.constprop.0+0xa4>
 801e53a:	2a00      	cmp	r2, #0
 801e53c:	d1f4      	bne.n	801e528 <_strtol_l.constprop.0+0xf0>
 801e53e:	9b01      	ldr	r3, [sp, #4]
 801e540:	603b      	str	r3, [r7, #0]
 801e542:	e7cb      	b.n	801e4dc <_strtol_l.constprop.0+0xa4>
 801e544:	08024629 	.word	0x08024629
 801e548:	7fffffff 	.word	0x7fffffff

0801e54c <strtol>:
 801e54c:	b510      	push	{r4, lr}
 801e54e:	4c04      	ldr	r4, [pc, #16]	@ (801e560 <strtol+0x14>)
 801e550:	0013      	movs	r3, r2
 801e552:	000a      	movs	r2, r1
 801e554:	0001      	movs	r1, r0
 801e556:	6820      	ldr	r0, [r4, #0]
 801e558:	f7ff ff6e 	bl	801e438 <_strtol_l.constprop.0>
 801e55c:	bd10      	pop	{r4, pc}
 801e55e:	46c0      	nop			@ (mov r8, r8)
 801e560:	200003c8 	.word	0x200003c8

0801e564 <__cvt>:
 801e564:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e566:	001f      	movs	r7, r3
 801e568:	2300      	movs	r3, #0
 801e56a:	0016      	movs	r6, r2
 801e56c:	b08b      	sub	sp, #44	@ 0x2c
 801e56e:	429f      	cmp	r7, r3
 801e570:	da04      	bge.n	801e57c <__cvt+0x18>
 801e572:	2180      	movs	r1, #128	@ 0x80
 801e574:	0609      	lsls	r1, r1, #24
 801e576:	187b      	adds	r3, r7, r1
 801e578:	001f      	movs	r7, r3
 801e57a:	232d      	movs	r3, #45	@ 0x2d
 801e57c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e57e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e580:	7013      	strb	r3, [r2, #0]
 801e582:	2320      	movs	r3, #32
 801e584:	2203      	movs	r2, #3
 801e586:	439d      	bics	r5, r3
 801e588:	2d46      	cmp	r5, #70	@ 0x46
 801e58a:	d007      	beq.n	801e59c <__cvt+0x38>
 801e58c:	002b      	movs	r3, r5
 801e58e:	3b45      	subs	r3, #69	@ 0x45
 801e590:	4259      	negs	r1, r3
 801e592:	414b      	adcs	r3, r1
 801e594:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e596:	3a01      	subs	r2, #1
 801e598:	18cb      	adds	r3, r1, r3
 801e59a:	9310      	str	r3, [sp, #64]	@ 0x40
 801e59c:	ab09      	add	r3, sp, #36	@ 0x24
 801e59e:	9304      	str	r3, [sp, #16]
 801e5a0:	ab08      	add	r3, sp, #32
 801e5a2:	9303      	str	r3, [sp, #12]
 801e5a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5a6:	9200      	str	r2, [sp, #0]
 801e5a8:	9302      	str	r3, [sp, #8]
 801e5aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e5ac:	0032      	movs	r2, r6
 801e5ae:	9301      	str	r3, [sp, #4]
 801e5b0:	003b      	movs	r3, r7
 801e5b2:	f001 f82b 	bl	801f60c <_dtoa_r>
 801e5b6:	0004      	movs	r4, r0
 801e5b8:	2d47      	cmp	r5, #71	@ 0x47
 801e5ba:	d11b      	bne.n	801e5f4 <__cvt+0x90>
 801e5bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e5be:	07db      	lsls	r3, r3, #31
 801e5c0:	d511      	bpl.n	801e5e6 <__cvt+0x82>
 801e5c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e5c4:	18c3      	adds	r3, r0, r3
 801e5c6:	9307      	str	r3, [sp, #28]
 801e5c8:	2200      	movs	r2, #0
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	0030      	movs	r0, r6
 801e5ce:	0039      	movs	r1, r7
 801e5d0:	f7e1 ff6e 	bl	80004b0 <__aeabi_dcmpeq>
 801e5d4:	2800      	cmp	r0, #0
 801e5d6:	d001      	beq.n	801e5dc <__cvt+0x78>
 801e5d8:	9b07      	ldr	r3, [sp, #28]
 801e5da:	9309      	str	r3, [sp, #36]	@ 0x24
 801e5dc:	2230      	movs	r2, #48	@ 0x30
 801e5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5e0:	9907      	ldr	r1, [sp, #28]
 801e5e2:	428b      	cmp	r3, r1
 801e5e4:	d320      	bcc.n	801e628 <__cvt+0xc4>
 801e5e6:	0020      	movs	r0, r4
 801e5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e5ec:	1b1b      	subs	r3, r3, r4
 801e5ee:	6013      	str	r3, [r2, #0]
 801e5f0:	b00b      	add	sp, #44	@ 0x2c
 801e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e5f6:	18c3      	adds	r3, r0, r3
 801e5f8:	9307      	str	r3, [sp, #28]
 801e5fa:	2d46      	cmp	r5, #70	@ 0x46
 801e5fc:	d1e4      	bne.n	801e5c8 <__cvt+0x64>
 801e5fe:	7803      	ldrb	r3, [r0, #0]
 801e600:	2b30      	cmp	r3, #48	@ 0x30
 801e602:	d10c      	bne.n	801e61e <__cvt+0xba>
 801e604:	2200      	movs	r2, #0
 801e606:	2300      	movs	r3, #0
 801e608:	0030      	movs	r0, r6
 801e60a:	0039      	movs	r1, r7
 801e60c:	f7e1 ff50 	bl	80004b0 <__aeabi_dcmpeq>
 801e610:	2800      	cmp	r0, #0
 801e612:	d104      	bne.n	801e61e <__cvt+0xba>
 801e614:	2301      	movs	r3, #1
 801e616:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e618:	1a9b      	subs	r3, r3, r2
 801e61a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e61c:	6013      	str	r3, [r2, #0]
 801e61e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e620:	9a07      	ldr	r2, [sp, #28]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	18d3      	adds	r3, r2, r3
 801e626:	e7ce      	b.n	801e5c6 <__cvt+0x62>
 801e628:	1c59      	adds	r1, r3, #1
 801e62a:	9109      	str	r1, [sp, #36]	@ 0x24
 801e62c:	701a      	strb	r2, [r3, #0]
 801e62e:	e7d6      	b.n	801e5de <__cvt+0x7a>

0801e630 <__exponent>:
 801e630:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e632:	232b      	movs	r3, #43	@ 0x2b
 801e634:	0005      	movs	r5, r0
 801e636:	000c      	movs	r4, r1
 801e638:	b085      	sub	sp, #20
 801e63a:	7002      	strb	r2, [r0, #0]
 801e63c:	2900      	cmp	r1, #0
 801e63e:	da01      	bge.n	801e644 <__exponent+0x14>
 801e640:	424c      	negs	r4, r1
 801e642:	3302      	adds	r3, #2
 801e644:	706b      	strb	r3, [r5, #1]
 801e646:	2c09      	cmp	r4, #9
 801e648:	dd2c      	ble.n	801e6a4 <__exponent+0x74>
 801e64a:	ab02      	add	r3, sp, #8
 801e64c:	1dde      	adds	r6, r3, #7
 801e64e:	0020      	movs	r0, r4
 801e650:	210a      	movs	r1, #10
 801e652:	f7e1 ff17 	bl	8000484 <__aeabi_idivmod>
 801e656:	0037      	movs	r7, r6
 801e658:	3130      	adds	r1, #48	@ 0x30
 801e65a:	3e01      	subs	r6, #1
 801e65c:	0020      	movs	r0, r4
 801e65e:	7031      	strb	r1, [r6, #0]
 801e660:	210a      	movs	r1, #10
 801e662:	9401      	str	r4, [sp, #4]
 801e664:	f7e1 fe28 	bl	80002b8 <__divsi3>
 801e668:	9b01      	ldr	r3, [sp, #4]
 801e66a:	0004      	movs	r4, r0
 801e66c:	2b63      	cmp	r3, #99	@ 0x63
 801e66e:	dcee      	bgt.n	801e64e <__exponent+0x1e>
 801e670:	1eba      	subs	r2, r7, #2
 801e672:	1ca8      	adds	r0, r5, #2
 801e674:	0001      	movs	r1, r0
 801e676:	0013      	movs	r3, r2
 801e678:	3430      	adds	r4, #48	@ 0x30
 801e67a:	7014      	strb	r4, [r2, #0]
 801e67c:	ac02      	add	r4, sp, #8
 801e67e:	3407      	adds	r4, #7
 801e680:	429c      	cmp	r4, r3
 801e682:	d80a      	bhi.n	801e69a <__exponent+0x6a>
 801e684:	2300      	movs	r3, #0
 801e686:	42a2      	cmp	r2, r4
 801e688:	d803      	bhi.n	801e692 <__exponent+0x62>
 801e68a:	3309      	adds	r3, #9
 801e68c:	aa02      	add	r2, sp, #8
 801e68e:	189b      	adds	r3, r3, r2
 801e690:	1bdb      	subs	r3, r3, r7
 801e692:	18c0      	adds	r0, r0, r3
 801e694:	1b40      	subs	r0, r0, r5
 801e696:	b005      	add	sp, #20
 801e698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e69a:	781c      	ldrb	r4, [r3, #0]
 801e69c:	3301      	adds	r3, #1
 801e69e:	700c      	strb	r4, [r1, #0]
 801e6a0:	3101      	adds	r1, #1
 801e6a2:	e7eb      	b.n	801e67c <__exponent+0x4c>
 801e6a4:	2330      	movs	r3, #48	@ 0x30
 801e6a6:	18e4      	adds	r4, r4, r3
 801e6a8:	70ab      	strb	r3, [r5, #2]
 801e6aa:	1d28      	adds	r0, r5, #4
 801e6ac:	70ec      	strb	r4, [r5, #3]
 801e6ae:	e7f1      	b.n	801e694 <__exponent+0x64>

0801e6b0 <_printf_float>:
 801e6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6b2:	b097      	sub	sp, #92	@ 0x5c
 801e6b4:	000d      	movs	r5, r1
 801e6b6:	920a      	str	r2, [sp, #40]	@ 0x28
 801e6b8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801e6ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e6bc:	9009      	str	r0, [sp, #36]	@ 0x24
 801e6be:	f000 fe7d 	bl	801f3bc <_localeconv_r>
 801e6c2:	6803      	ldr	r3, [r0, #0]
 801e6c4:	0018      	movs	r0, r3
 801e6c6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e6c8:	f7e1 fd50 	bl	800016c <strlen>
 801e6cc:	2300      	movs	r3, #0
 801e6ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e6d0:	9314      	str	r3, [sp, #80]	@ 0x50
 801e6d2:	7e2b      	ldrb	r3, [r5, #24]
 801e6d4:	2207      	movs	r2, #7
 801e6d6:	930c      	str	r3, [sp, #48]	@ 0x30
 801e6d8:	682b      	ldr	r3, [r5, #0]
 801e6da:	930e      	str	r3, [sp, #56]	@ 0x38
 801e6dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e6de:	6823      	ldr	r3, [r4, #0]
 801e6e0:	05c9      	lsls	r1, r1, #23
 801e6e2:	d545      	bpl.n	801e770 <_printf_float+0xc0>
 801e6e4:	189b      	adds	r3, r3, r2
 801e6e6:	4393      	bics	r3, r2
 801e6e8:	001a      	movs	r2, r3
 801e6ea:	3208      	adds	r2, #8
 801e6ec:	6022      	str	r2, [r4, #0]
 801e6ee:	2201      	movs	r2, #1
 801e6f0:	681e      	ldr	r6, [r3, #0]
 801e6f2:	685f      	ldr	r7, [r3, #4]
 801e6f4:	007b      	lsls	r3, r7, #1
 801e6f6:	085b      	lsrs	r3, r3, #1
 801e6f8:	9311      	str	r3, [sp, #68]	@ 0x44
 801e6fa:	9610      	str	r6, [sp, #64]	@ 0x40
 801e6fc:	64ae      	str	r6, [r5, #72]	@ 0x48
 801e6fe:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801e700:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e702:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e704:	4ba7      	ldr	r3, [pc, #668]	@ (801e9a4 <_printf_float+0x2f4>)
 801e706:	4252      	negs	r2, r2
 801e708:	f7e4 fdfc 	bl	8003304 <__aeabi_dcmpun>
 801e70c:	2800      	cmp	r0, #0
 801e70e:	d131      	bne.n	801e774 <_printf_float+0xc4>
 801e710:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e712:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e714:	2201      	movs	r2, #1
 801e716:	4ba3      	ldr	r3, [pc, #652]	@ (801e9a4 <_printf_float+0x2f4>)
 801e718:	4252      	negs	r2, r2
 801e71a:	f7e1 fed9 	bl	80004d0 <__aeabi_dcmple>
 801e71e:	2800      	cmp	r0, #0
 801e720:	d128      	bne.n	801e774 <_printf_float+0xc4>
 801e722:	2200      	movs	r2, #0
 801e724:	2300      	movs	r3, #0
 801e726:	0030      	movs	r0, r6
 801e728:	0039      	movs	r1, r7
 801e72a:	f7e1 fec7 	bl	80004bc <__aeabi_dcmplt>
 801e72e:	2800      	cmp	r0, #0
 801e730:	d003      	beq.n	801e73a <_printf_float+0x8a>
 801e732:	002b      	movs	r3, r5
 801e734:	222d      	movs	r2, #45	@ 0x2d
 801e736:	3343      	adds	r3, #67	@ 0x43
 801e738:	701a      	strb	r2, [r3, #0]
 801e73a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e73c:	4f9a      	ldr	r7, [pc, #616]	@ (801e9a8 <_printf_float+0x2f8>)
 801e73e:	2b47      	cmp	r3, #71	@ 0x47
 801e740:	d900      	bls.n	801e744 <_printf_float+0x94>
 801e742:	4f9a      	ldr	r7, [pc, #616]	@ (801e9ac <_printf_float+0x2fc>)
 801e744:	2303      	movs	r3, #3
 801e746:	2400      	movs	r4, #0
 801e748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e74a:	612b      	str	r3, [r5, #16]
 801e74c:	3301      	adds	r3, #1
 801e74e:	439a      	bics	r2, r3
 801e750:	602a      	str	r2, [r5, #0]
 801e752:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e754:	0029      	movs	r1, r5
 801e756:	9300      	str	r3, [sp, #0]
 801e758:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e75c:	aa15      	add	r2, sp, #84	@ 0x54
 801e75e:	f000 f9e5 	bl	801eb2c <_printf_common>
 801e762:	3001      	adds	r0, #1
 801e764:	d000      	beq.n	801e768 <_printf_float+0xb8>
 801e766:	e09f      	b.n	801e8a8 <_printf_float+0x1f8>
 801e768:	2001      	movs	r0, #1
 801e76a:	4240      	negs	r0, r0
 801e76c:	b017      	add	sp, #92	@ 0x5c
 801e76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e770:	3307      	adds	r3, #7
 801e772:	e7b8      	b.n	801e6e6 <_printf_float+0x36>
 801e774:	0032      	movs	r2, r6
 801e776:	003b      	movs	r3, r7
 801e778:	0030      	movs	r0, r6
 801e77a:	0039      	movs	r1, r7
 801e77c:	f7e4 fdc2 	bl	8003304 <__aeabi_dcmpun>
 801e780:	2800      	cmp	r0, #0
 801e782:	d00b      	beq.n	801e79c <_printf_float+0xec>
 801e784:	2f00      	cmp	r7, #0
 801e786:	da03      	bge.n	801e790 <_printf_float+0xe0>
 801e788:	002b      	movs	r3, r5
 801e78a:	222d      	movs	r2, #45	@ 0x2d
 801e78c:	3343      	adds	r3, #67	@ 0x43
 801e78e:	701a      	strb	r2, [r3, #0]
 801e790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e792:	4f87      	ldr	r7, [pc, #540]	@ (801e9b0 <_printf_float+0x300>)
 801e794:	2b47      	cmp	r3, #71	@ 0x47
 801e796:	d9d5      	bls.n	801e744 <_printf_float+0x94>
 801e798:	4f86      	ldr	r7, [pc, #536]	@ (801e9b4 <_printf_float+0x304>)
 801e79a:	e7d3      	b.n	801e744 <_printf_float+0x94>
 801e79c:	2220      	movs	r2, #32
 801e79e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e7a0:	686b      	ldr	r3, [r5, #4]
 801e7a2:	4394      	bics	r4, r2
 801e7a4:	1c5a      	adds	r2, r3, #1
 801e7a6:	d146      	bne.n	801e836 <_printf_float+0x186>
 801e7a8:	3307      	adds	r3, #7
 801e7aa:	606b      	str	r3, [r5, #4]
 801e7ac:	2380      	movs	r3, #128	@ 0x80
 801e7ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e7b0:	00db      	lsls	r3, r3, #3
 801e7b2:	4313      	orrs	r3, r2
 801e7b4:	2200      	movs	r2, #0
 801e7b6:	602b      	str	r3, [r5, #0]
 801e7b8:	9206      	str	r2, [sp, #24]
 801e7ba:	aa14      	add	r2, sp, #80	@ 0x50
 801e7bc:	9205      	str	r2, [sp, #20]
 801e7be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e7c0:	a90a      	add	r1, sp, #40	@ 0x28
 801e7c2:	9204      	str	r2, [sp, #16]
 801e7c4:	aa13      	add	r2, sp, #76	@ 0x4c
 801e7c6:	9203      	str	r2, [sp, #12]
 801e7c8:	2223      	movs	r2, #35	@ 0x23
 801e7ca:	1852      	adds	r2, r2, r1
 801e7cc:	9202      	str	r2, [sp, #8]
 801e7ce:	9301      	str	r3, [sp, #4]
 801e7d0:	686b      	ldr	r3, [r5, #4]
 801e7d2:	0032      	movs	r2, r6
 801e7d4:	9300      	str	r3, [sp, #0]
 801e7d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e7d8:	003b      	movs	r3, r7
 801e7da:	f7ff fec3 	bl	801e564 <__cvt>
 801e7de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e7e0:	0007      	movs	r7, r0
 801e7e2:	2c47      	cmp	r4, #71	@ 0x47
 801e7e4:	d12d      	bne.n	801e842 <_printf_float+0x192>
 801e7e6:	1cd3      	adds	r3, r2, #3
 801e7e8:	db02      	blt.n	801e7f0 <_printf_float+0x140>
 801e7ea:	686b      	ldr	r3, [r5, #4]
 801e7ec:	429a      	cmp	r2, r3
 801e7ee:	dd48      	ble.n	801e882 <_printf_float+0x1d2>
 801e7f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e7f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e7f4:	3b02      	subs	r3, #2
 801e7f6:	b2db      	uxtb	r3, r3
 801e7f8:	930c      	str	r3, [sp, #48]	@ 0x30
 801e7fa:	0028      	movs	r0, r5
 801e7fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e7fe:	3901      	subs	r1, #1
 801e800:	3050      	adds	r0, #80	@ 0x50
 801e802:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e804:	f7ff ff14 	bl	801e630 <__exponent>
 801e808:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e80a:	0004      	movs	r4, r0
 801e80c:	1813      	adds	r3, r2, r0
 801e80e:	612b      	str	r3, [r5, #16]
 801e810:	2a01      	cmp	r2, #1
 801e812:	dc02      	bgt.n	801e81a <_printf_float+0x16a>
 801e814:	682a      	ldr	r2, [r5, #0]
 801e816:	07d2      	lsls	r2, r2, #31
 801e818:	d501      	bpl.n	801e81e <_printf_float+0x16e>
 801e81a:	3301      	adds	r3, #1
 801e81c:	612b      	str	r3, [r5, #16]
 801e81e:	2323      	movs	r3, #35	@ 0x23
 801e820:	aa0a      	add	r2, sp, #40	@ 0x28
 801e822:	189b      	adds	r3, r3, r2
 801e824:	781b      	ldrb	r3, [r3, #0]
 801e826:	2b00      	cmp	r3, #0
 801e828:	d100      	bne.n	801e82c <_printf_float+0x17c>
 801e82a:	e792      	b.n	801e752 <_printf_float+0xa2>
 801e82c:	002b      	movs	r3, r5
 801e82e:	222d      	movs	r2, #45	@ 0x2d
 801e830:	3343      	adds	r3, #67	@ 0x43
 801e832:	701a      	strb	r2, [r3, #0]
 801e834:	e78d      	b.n	801e752 <_printf_float+0xa2>
 801e836:	2c47      	cmp	r4, #71	@ 0x47
 801e838:	d1b8      	bne.n	801e7ac <_printf_float+0xfc>
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d1b6      	bne.n	801e7ac <_printf_float+0xfc>
 801e83e:	3301      	adds	r3, #1
 801e840:	e7b3      	b.n	801e7aa <_printf_float+0xfa>
 801e842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e844:	0011      	movs	r1, r2
 801e846:	2b65      	cmp	r3, #101	@ 0x65
 801e848:	d9d7      	bls.n	801e7fa <_printf_float+0x14a>
 801e84a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e84c:	2b66      	cmp	r3, #102	@ 0x66
 801e84e:	d11a      	bne.n	801e886 <_printf_float+0x1d6>
 801e850:	686b      	ldr	r3, [r5, #4]
 801e852:	2a00      	cmp	r2, #0
 801e854:	dd09      	ble.n	801e86a <_printf_float+0x1ba>
 801e856:	612a      	str	r2, [r5, #16]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d102      	bne.n	801e862 <_printf_float+0x1b2>
 801e85c:	6829      	ldr	r1, [r5, #0]
 801e85e:	07c9      	lsls	r1, r1, #31
 801e860:	d50b      	bpl.n	801e87a <_printf_float+0x1ca>
 801e862:	3301      	adds	r3, #1
 801e864:	189b      	adds	r3, r3, r2
 801e866:	612b      	str	r3, [r5, #16]
 801e868:	e007      	b.n	801e87a <_printf_float+0x1ca>
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d103      	bne.n	801e876 <_printf_float+0x1c6>
 801e86e:	2201      	movs	r2, #1
 801e870:	6829      	ldr	r1, [r5, #0]
 801e872:	4211      	tst	r1, r2
 801e874:	d000      	beq.n	801e878 <_printf_float+0x1c8>
 801e876:	1c9a      	adds	r2, r3, #2
 801e878:	612a      	str	r2, [r5, #16]
 801e87a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e87c:	2400      	movs	r4, #0
 801e87e:	65ab      	str	r3, [r5, #88]	@ 0x58
 801e880:	e7cd      	b.n	801e81e <_printf_float+0x16e>
 801e882:	2367      	movs	r3, #103	@ 0x67
 801e884:	930c      	str	r3, [sp, #48]	@ 0x30
 801e886:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e888:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e88a:	4299      	cmp	r1, r3
 801e88c:	db06      	blt.n	801e89c <_printf_float+0x1ec>
 801e88e:	682b      	ldr	r3, [r5, #0]
 801e890:	6129      	str	r1, [r5, #16]
 801e892:	07db      	lsls	r3, r3, #31
 801e894:	d5f1      	bpl.n	801e87a <_printf_float+0x1ca>
 801e896:	3101      	adds	r1, #1
 801e898:	6129      	str	r1, [r5, #16]
 801e89a:	e7ee      	b.n	801e87a <_printf_float+0x1ca>
 801e89c:	2201      	movs	r2, #1
 801e89e:	2900      	cmp	r1, #0
 801e8a0:	dce0      	bgt.n	801e864 <_printf_float+0x1b4>
 801e8a2:	1892      	adds	r2, r2, r2
 801e8a4:	1a52      	subs	r2, r2, r1
 801e8a6:	e7dd      	b.n	801e864 <_printf_float+0x1b4>
 801e8a8:	682a      	ldr	r2, [r5, #0]
 801e8aa:	0553      	lsls	r3, r2, #21
 801e8ac:	d408      	bmi.n	801e8c0 <_printf_float+0x210>
 801e8ae:	692b      	ldr	r3, [r5, #16]
 801e8b0:	003a      	movs	r2, r7
 801e8b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e8b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e8b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e8b8:	47a0      	blx	r4
 801e8ba:	3001      	adds	r0, #1
 801e8bc:	d129      	bne.n	801e912 <_printf_float+0x262>
 801e8be:	e753      	b.n	801e768 <_printf_float+0xb8>
 801e8c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e8c2:	2b65      	cmp	r3, #101	@ 0x65
 801e8c4:	d800      	bhi.n	801e8c8 <_printf_float+0x218>
 801e8c6:	e0da      	b.n	801ea7e <_printf_float+0x3ce>
 801e8c8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801e8ca:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801e8cc:	2200      	movs	r2, #0
 801e8ce:	2300      	movs	r3, #0
 801e8d0:	f7e1 fdee 	bl	80004b0 <__aeabi_dcmpeq>
 801e8d4:	2800      	cmp	r0, #0
 801e8d6:	d033      	beq.n	801e940 <_printf_float+0x290>
 801e8d8:	2301      	movs	r3, #1
 801e8da:	4a37      	ldr	r2, [pc, #220]	@ (801e9b8 <_printf_float+0x308>)
 801e8dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e8de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e8e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e8e2:	47a0      	blx	r4
 801e8e4:	3001      	adds	r0, #1
 801e8e6:	d100      	bne.n	801e8ea <_printf_float+0x23a>
 801e8e8:	e73e      	b.n	801e768 <_printf_float+0xb8>
 801e8ea:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e8ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e8ee:	42b3      	cmp	r3, r6
 801e8f0:	db02      	blt.n	801e8f8 <_printf_float+0x248>
 801e8f2:	682b      	ldr	r3, [r5, #0]
 801e8f4:	07db      	lsls	r3, r3, #31
 801e8f6:	d50c      	bpl.n	801e912 <_printf_float+0x262>
 801e8f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e8fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e8fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e8fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e900:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e902:	47a0      	blx	r4
 801e904:	2400      	movs	r4, #0
 801e906:	3001      	adds	r0, #1
 801e908:	d100      	bne.n	801e90c <_printf_float+0x25c>
 801e90a:	e72d      	b.n	801e768 <_printf_float+0xb8>
 801e90c:	1e73      	subs	r3, r6, #1
 801e90e:	42a3      	cmp	r3, r4
 801e910:	dc0a      	bgt.n	801e928 <_printf_float+0x278>
 801e912:	682b      	ldr	r3, [r5, #0]
 801e914:	079b      	lsls	r3, r3, #30
 801e916:	d500      	bpl.n	801e91a <_printf_float+0x26a>
 801e918:	e105      	b.n	801eb26 <_printf_float+0x476>
 801e91a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e91c:	68e8      	ldr	r0, [r5, #12]
 801e91e:	4298      	cmp	r0, r3
 801e920:	db00      	blt.n	801e924 <_printf_float+0x274>
 801e922:	e723      	b.n	801e76c <_printf_float+0xbc>
 801e924:	0018      	movs	r0, r3
 801e926:	e721      	b.n	801e76c <_printf_float+0xbc>
 801e928:	002a      	movs	r2, r5
 801e92a:	2301      	movs	r3, #1
 801e92c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e930:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e932:	321a      	adds	r2, #26
 801e934:	47b8      	blx	r7
 801e936:	3001      	adds	r0, #1
 801e938:	d100      	bne.n	801e93c <_printf_float+0x28c>
 801e93a:	e715      	b.n	801e768 <_printf_float+0xb8>
 801e93c:	3401      	adds	r4, #1
 801e93e:	e7e5      	b.n	801e90c <_printf_float+0x25c>
 801e940:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e942:	2b00      	cmp	r3, #0
 801e944:	dc3a      	bgt.n	801e9bc <_printf_float+0x30c>
 801e946:	2301      	movs	r3, #1
 801e948:	4a1b      	ldr	r2, [pc, #108]	@ (801e9b8 <_printf_float+0x308>)
 801e94a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e94c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e94e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e950:	47a0      	blx	r4
 801e952:	3001      	adds	r0, #1
 801e954:	d100      	bne.n	801e958 <_printf_float+0x2a8>
 801e956:	e707      	b.n	801e768 <_printf_float+0xb8>
 801e958:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e95a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e95c:	4333      	orrs	r3, r6
 801e95e:	d102      	bne.n	801e966 <_printf_float+0x2b6>
 801e960:	682b      	ldr	r3, [r5, #0]
 801e962:	07db      	lsls	r3, r3, #31
 801e964:	d5d5      	bpl.n	801e912 <_printf_float+0x262>
 801e966:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e968:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e96a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e96c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e96e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e970:	47a0      	blx	r4
 801e972:	2300      	movs	r3, #0
 801e974:	3001      	adds	r0, #1
 801e976:	d100      	bne.n	801e97a <_printf_float+0x2ca>
 801e978:	e6f6      	b.n	801e768 <_printf_float+0xb8>
 801e97a:	930c      	str	r3, [sp, #48]	@ 0x30
 801e97c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e97e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e980:	425b      	negs	r3, r3
 801e982:	4293      	cmp	r3, r2
 801e984:	dc01      	bgt.n	801e98a <_printf_float+0x2da>
 801e986:	0033      	movs	r3, r6
 801e988:	e792      	b.n	801e8b0 <_printf_float+0x200>
 801e98a:	002a      	movs	r2, r5
 801e98c:	2301      	movs	r3, #1
 801e98e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e990:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e992:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e994:	321a      	adds	r2, #26
 801e996:	47a0      	blx	r4
 801e998:	3001      	adds	r0, #1
 801e99a:	d100      	bne.n	801e99e <_printf_float+0x2ee>
 801e99c:	e6e4      	b.n	801e768 <_printf_float+0xb8>
 801e99e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9a0:	3301      	adds	r3, #1
 801e9a2:	e7ea      	b.n	801e97a <_printf_float+0x2ca>
 801e9a4:	7fefffff 	.word	0x7fefffff
 801e9a8:	08024729 	.word	0x08024729
 801e9ac:	0802472d 	.word	0x0802472d
 801e9b0:	08024731 	.word	0x08024731
 801e9b4:	08024735 	.word	0x08024735
 801e9b8:	08024739 	.word	0x08024739
 801e9bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e9be:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801e9c0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e9c2:	429e      	cmp	r6, r3
 801e9c4:	dd00      	ble.n	801e9c8 <_printf_float+0x318>
 801e9c6:	001e      	movs	r6, r3
 801e9c8:	2e00      	cmp	r6, #0
 801e9ca:	dc31      	bgt.n	801ea30 <_printf_float+0x380>
 801e9cc:	43f3      	mvns	r3, r6
 801e9ce:	2400      	movs	r4, #0
 801e9d0:	17db      	asrs	r3, r3, #31
 801e9d2:	4033      	ands	r3, r6
 801e9d4:	930e      	str	r3, [sp, #56]	@ 0x38
 801e9d6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801e9d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9da:	1af3      	subs	r3, r6, r3
 801e9dc:	42a3      	cmp	r3, r4
 801e9de:	dc30      	bgt.n	801ea42 <_printf_float+0x392>
 801e9e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e9e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e9e4:	429a      	cmp	r2, r3
 801e9e6:	dc38      	bgt.n	801ea5a <_printf_float+0x3aa>
 801e9e8:	682b      	ldr	r3, [r5, #0]
 801e9ea:	07db      	lsls	r3, r3, #31
 801e9ec:	d435      	bmi.n	801ea5a <_printf_float+0x3aa>
 801e9ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e9f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e9f4:	1b9b      	subs	r3, r3, r6
 801e9f6:	1b14      	subs	r4, r2, r4
 801e9f8:	429c      	cmp	r4, r3
 801e9fa:	dd00      	ble.n	801e9fe <_printf_float+0x34e>
 801e9fc:	001c      	movs	r4, r3
 801e9fe:	2c00      	cmp	r4, #0
 801ea00:	dc34      	bgt.n	801ea6c <_printf_float+0x3bc>
 801ea02:	43e3      	mvns	r3, r4
 801ea04:	2600      	movs	r6, #0
 801ea06:	17db      	asrs	r3, r3, #31
 801ea08:	401c      	ands	r4, r3
 801ea0a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ea0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea0e:	1ad3      	subs	r3, r2, r3
 801ea10:	1b1b      	subs	r3, r3, r4
 801ea12:	42b3      	cmp	r3, r6
 801ea14:	dc00      	bgt.n	801ea18 <_printf_float+0x368>
 801ea16:	e77c      	b.n	801e912 <_printf_float+0x262>
 801ea18:	002a      	movs	r2, r5
 801ea1a:	2301      	movs	r3, #1
 801ea1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ea22:	321a      	adds	r2, #26
 801ea24:	47b8      	blx	r7
 801ea26:	3001      	adds	r0, #1
 801ea28:	d100      	bne.n	801ea2c <_printf_float+0x37c>
 801ea2a:	e69d      	b.n	801e768 <_printf_float+0xb8>
 801ea2c:	3601      	adds	r6, #1
 801ea2e:	e7ec      	b.n	801ea0a <_printf_float+0x35a>
 801ea30:	0033      	movs	r3, r6
 801ea32:	003a      	movs	r2, r7
 801ea34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ea3a:	47a0      	blx	r4
 801ea3c:	3001      	adds	r0, #1
 801ea3e:	d1c5      	bne.n	801e9cc <_printf_float+0x31c>
 801ea40:	e692      	b.n	801e768 <_printf_float+0xb8>
 801ea42:	002a      	movs	r2, r5
 801ea44:	2301      	movs	r3, #1
 801ea46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea4a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ea4c:	321a      	adds	r2, #26
 801ea4e:	47b0      	blx	r6
 801ea50:	3001      	adds	r0, #1
 801ea52:	d100      	bne.n	801ea56 <_printf_float+0x3a6>
 801ea54:	e688      	b.n	801e768 <_printf_float+0xb8>
 801ea56:	3401      	adds	r4, #1
 801ea58:	e7bd      	b.n	801e9d6 <_printf_float+0x326>
 801ea5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ea5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ea64:	47a0      	blx	r4
 801ea66:	3001      	adds	r0, #1
 801ea68:	d1c1      	bne.n	801e9ee <_printf_float+0x33e>
 801ea6a:	e67d      	b.n	801e768 <_printf_float+0xb8>
 801ea6c:	19ba      	adds	r2, r7, r6
 801ea6e:	0023      	movs	r3, r4
 801ea70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ea76:	47b0      	blx	r6
 801ea78:	3001      	adds	r0, #1
 801ea7a:	d1c2      	bne.n	801ea02 <_printf_float+0x352>
 801ea7c:	e674      	b.n	801e768 <_printf_float+0xb8>
 801ea7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ea80:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea82:	2b01      	cmp	r3, #1
 801ea84:	dc02      	bgt.n	801ea8c <_printf_float+0x3dc>
 801ea86:	2301      	movs	r3, #1
 801ea88:	421a      	tst	r2, r3
 801ea8a:	d039      	beq.n	801eb00 <_printf_float+0x450>
 801ea8c:	2301      	movs	r3, #1
 801ea8e:	003a      	movs	r2, r7
 801ea90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea94:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ea96:	47b0      	blx	r6
 801ea98:	3001      	adds	r0, #1
 801ea9a:	d100      	bne.n	801ea9e <_printf_float+0x3ee>
 801ea9c:	e664      	b.n	801e768 <_printf_float+0xb8>
 801ea9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eaa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eaa2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eaa4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eaa6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801eaa8:	47b0      	blx	r6
 801eaaa:	3001      	adds	r0, #1
 801eaac:	d100      	bne.n	801eab0 <_printf_float+0x400>
 801eaae:	e65b      	b.n	801e768 <_printf_float+0xb8>
 801eab0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801eab2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801eab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eab6:	2200      	movs	r2, #0
 801eab8:	3b01      	subs	r3, #1
 801eaba:	930c      	str	r3, [sp, #48]	@ 0x30
 801eabc:	2300      	movs	r3, #0
 801eabe:	f7e1 fcf7 	bl	80004b0 <__aeabi_dcmpeq>
 801eac2:	2800      	cmp	r0, #0
 801eac4:	d11a      	bne.n	801eafc <_printf_float+0x44c>
 801eac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eac8:	1c7a      	adds	r2, r7, #1
 801eaca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eacc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eace:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ead0:	47b0      	blx	r6
 801ead2:	3001      	adds	r0, #1
 801ead4:	d10e      	bne.n	801eaf4 <_printf_float+0x444>
 801ead6:	e647      	b.n	801e768 <_printf_float+0xb8>
 801ead8:	002a      	movs	r2, r5
 801eada:	2301      	movs	r3, #1
 801eadc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eae0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eae2:	321a      	adds	r2, #26
 801eae4:	47b8      	blx	r7
 801eae6:	3001      	adds	r0, #1
 801eae8:	d100      	bne.n	801eaec <_printf_float+0x43c>
 801eaea:	e63d      	b.n	801e768 <_printf_float+0xb8>
 801eaec:	3601      	adds	r6, #1
 801eaee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaf0:	429e      	cmp	r6, r3
 801eaf2:	dbf1      	blt.n	801ead8 <_printf_float+0x428>
 801eaf4:	002a      	movs	r2, r5
 801eaf6:	0023      	movs	r3, r4
 801eaf8:	3250      	adds	r2, #80	@ 0x50
 801eafa:	e6da      	b.n	801e8b2 <_printf_float+0x202>
 801eafc:	2600      	movs	r6, #0
 801eafe:	e7f6      	b.n	801eaee <_printf_float+0x43e>
 801eb00:	003a      	movs	r2, r7
 801eb02:	e7e2      	b.n	801eaca <_printf_float+0x41a>
 801eb04:	002a      	movs	r2, r5
 801eb06:	2301      	movs	r3, #1
 801eb08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801eb0e:	3219      	adds	r2, #25
 801eb10:	47b0      	blx	r6
 801eb12:	3001      	adds	r0, #1
 801eb14:	d100      	bne.n	801eb18 <_printf_float+0x468>
 801eb16:	e627      	b.n	801e768 <_printf_float+0xb8>
 801eb18:	3401      	adds	r4, #1
 801eb1a:	68eb      	ldr	r3, [r5, #12]
 801eb1c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801eb1e:	1a9b      	subs	r3, r3, r2
 801eb20:	42a3      	cmp	r3, r4
 801eb22:	dcef      	bgt.n	801eb04 <_printf_float+0x454>
 801eb24:	e6f9      	b.n	801e91a <_printf_float+0x26a>
 801eb26:	2400      	movs	r4, #0
 801eb28:	e7f7      	b.n	801eb1a <_printf_float+0x46a>
 801eb2a:	46c0      	nop			@ (mov r8, r8)

0801eb2c <_printf_common>:
 801eb2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eb2e:	0016      	movs	r6, r2
 801eb30:	9301      	str	r3, [sp, #4]
 801eb32:	688a      	ldr	r2, [r1, #8]
 801eb34:	690b      	ldr	r3, [r1, #16]
 801eb36:	000c      	movs	r4, r1
 801eb38:	9000      	str	r0, [sp, #0]
 801eb3a:	4293      	cmp	r3, r2
 801eb3c:	da00      	bge.n	801eb40 <_printf_common+0x14>
 801eb3e:	0013      	movs	r3, r2
 801eb40:	0022      	movs	r2, r4
 801eb42:	6033      	str	r3, [r6, #0]
 801eb44:	3243      	adds	r2, #67	@ 0x43
 801eb46:	7812      	ldrb	r2, [r2, #0]
 801eb48:	2a00      	cmp	r2, #0
 801eb4a:	d001      	beq.n	801eb50 <_printf_common+0x24>
 801eb4c:	3301      	adds	r3, #1
 801eb4e:	6033      	str	r3, [r6, #0]
 801eb50:	6823      	ldr	r3, [r4, #0]
 801eb52:	069b      	lsls	r3, r3, #26
 801eb54:	d502      	bpl.n	801eb5c <_printf_common+0x30>
 801eb56:	6833      	ldr	r3, [r6, #0]
 801eb58:	3302      	adds	r3, #2
 801eb5a:	6033      	str	r3, [r6, #0]
 801eb5c:	6822      	ldr	r2, [r4, #0]
 801eb5e:	2306      	movs	r3, #6
 801eb60:	0015      	movs	r5, r2
 801eb62:	401d      	ands	r5, r3
 801eb64:	421a      	tst	r2, r3
 801eb66:	d027      	beq.n	801ebb8 <_printf_common+0x8c>
 801eb68:	0023      	movs	r3, r4
 801eb6a:	3343      	adds	r3, #67	@ 0x43
 801eb6c:	781b      	ldrb	r3, [r3, #0]
 801eb6e:	1e5a      	subs	r2, r3, #1
 801eb70:	4193      	sbcs	r3, r2
 801eb72:	6822      	ldr	r2, [r4, #0]
 801eb74:	0692      	lsls	r2, r2, #26
 801eb76:	d430      	bmi.n	801ebda <_printf_common+0xae>
 801eb78:	0022      	movs	r2, r4
 801eb7a:	9901      	ldr	r1, [sp, #4]
 801eb7c:	9800      	ldr	r0, [sp, #0]
 801eb7e:	9d08      	ldr	r5, [sp, #32]
 801eb80:	3243      	adds	r2, #67	@ 0x43
 801eb82:	47a8      	blx	r5
 801eb84:	3001      	adds	r0, #1
 801eb86:	d025      	beq.n	801ebd4 <_printf_common+0xa8>
 801eb88:	2206      	movs	r2, #6
 801eb8a:	6823      	ldr	r3, [r4, #0]
 801eb8c:	2500      	movs	r5, #0
 801eb8e:	4013      	ands	r3, r2
 801eb90:	2b04      	cmp	r3, #4
 801eb92:	d105      	bne.n	801eba0 <_printf_common+0x74>
 801eb94:	6833      	ldr	r3, [r6, #0]
 801eb96:	68e5      	ldr	r5, [r4, #12]
 801eb98:	1aed      	subs	r5, r5, r3
 801eb9a:	43eb      	mvns	r3, r5
 801eb9c:	17db      	asrs	r3, r3, #31
 801eb9e:	401d      	ands	r5, r3
 801eba0:	68a3      	ldr	r3, [r4, #8]
 801eba2:	6922      	ldr	r2, [r4, #16]
 801eba4:	4293      	cmp	r3, r2
 801eba6:	dd01      	ble.n	801ebac <_printf_common+0x80>
 801eba8:	1a9b      	subs	r3, r3, r2
 801ebaa:	18ed      	adds	r5, r5, r3
 801ebac:	2600      	movs	r6, #0
 801ebae:	42b5      	cmp	r5, r6
 801ebb0:	d120      	bne.n	801ebf4 <_printf_common+0xc8>
 801ebb2:	2000      	movs	r0, #0
 801ebb4:	e010      	b.n	801ebd8 <_printf_common+0xac>
 801ebb6:	3501      	adds	r5, #1
 801ebb8:	68e3      	ldr	r3, [r4, #12]
 801ebba:	6832      	ldr	r2, [r6, #0]
 801ebbc:	1a9b      	subs	r3, r3, r2
 801ebbe:	42ab      	cmp	r3, r5
 801ebc0:	ddd2      	ble.n	801eb68 <_printf_common+0x3c>
 801ebc2:	0022      	movs	r2, r4
 801ebc4:	2301      	movs	r3, #1
 801ebc6:	9901      	ldr	r1, [sp, #4]
 801ebc8:	9800      	ldr	r0, [sp, #0]
 801ebca:	9f08      	ldr	r7, [sp, #32]
 801ebcc:	3219      	adds	r2, #25
 801ebce:	47b8      	blx	r7
 801ebd0:	3001      	adds	r0, #1
 801ebd2:	d1f0      	bne.n	801ebb6 <_printf_common+0x8a>
 801ebd4:	2001      	movs	r0, #1
 801ebd6:	4240      	negs	r0, r0
 801ebd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ebda:	2030      	movs	r0, #48	@ 0x30
 801ebdc:	18e1      	adds	r1, r4, r3
 801ebde:	3143      	adds	r1, #67	@ 0x43
 801ebe0:	7008      	strb	r0, [r1, #0]
 801ebe2:	0021      	movs	r1, r4
 801ebe4:	1c5a      	adds	r2, r3, #1
 801ebe6:	3145      	adds	r1, #69	@ 0x45
 801ebe8:	7809      	ldrb	r1, [r1, #0]
 801ebea:	18a2      	adds	r2, r4, r2
 801ebec:	3243      	adds	r2, #67	@ 0x43
 801ebee:	3302      	adds	r3, #2
 801ebf0:	7011      	strb	r1, [r2, #0]
 801ebf2:	e7c1      	b.n	801eb78 <_printf_common+0x4c>
 801ebf4:	0022      	movs	r2, r4
 801ebf6:	2301      	movs	r3, #1
 801ebf8:	9901      	ldr	r1, [sp, #4]
 801ebfa:	9800      	ldr	r0, [sp, #0]
 801ebfc:	9f08      	ldr	r7, [sp, #32]
 801ebfe:	321a      	adds	r2, #26
 801ec00:	47b8      	blx	r7
 801ec02:	3001      	adds	r0, #1
 801ec04:	d0e6      	beq.n	801ebd4 <_printf_common+0xa8>
 801ec06:	3601      	adds	r6, #1
 801ec08:	e7d1      	b.n	801ebae <_printf_common+0x82>
	...

0801ec0c <_printf_i>:
 801ec0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec0e:	b08b      	sub	sp, #44	@ 0x2c
 801ec10:	9206      	str	r2, [sp, #24]
 801ec12:	000a      	movs	r2, r1
 801ec14:	3243      	adds	r2, #67	@ 0x43
 801ec16:	9307      	str	r3, [sp, #28]
 801ec18:	9005      	str	r0, [sp, #20]
 801ec1a:	9203      	str	r2, [sp, #12]
 801ec1c:	7e0a      	ldrb	r2, [r1, #24]
 801ec1e:	000c      	movs	r4, r1
 801ec20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ec22:	2a78      	cmp	r2, #120	@ 0x78
 801ec24:	d809      	bhi.n	801ec3a <_printf_i+0x2e>
 801ec26:	2a62      	cmp	r2, #98	@ 0x62
 801ec28:	d80b      	bhi.n	801ec42 <_printf_i+0x36>
 801ec2a:	2a00      	cmp	r2, #0
 801ec2c:	d100      	bne.n	801ec30 <_printf_i+0x24>
 801ec2e:	e0bc      	b.n	801edaa <_printf_i+0x19e>
 801ec30:	497b      	ldr	r1, [pc, #492]	@ (801ee20 <_printf_i+0x214>)
 801ec32:	9104      	str	r1, [sp, #16]
 801ec34:	2a58      	cmp	r2, #88	@ 0x58
 801ec36:	d100      	bne.n	801ec3a <_printf_i+0x2e>
 801ec38:	e090      	b.n	801ed5c <_printf_i+0x150>
 801ec3a:	0025      	movs	r5, r4
 801ec3c:	3542      	adds	r5, #66	@ 0x42
 801ec3e:	702a      	strb	r2, [r5, #0]
 801ec40:	e022      	b.n	801ec88 <_printf_i+0x7c>
 801ec42:	0010      	movs	r0, r2
 801ec44:	3863      	subs	r0, #99	@ 0x63
 801ec46:	2815      	cmp	r0, #21
 801ec48:	d8f7      	bhi.n	801ec3a <_printf_i+0x2e>
 801ec4a:	f7e1 faa1 	bl	8000190 <__gnu_thumb1_case_shi>
 801ec4e:	0016      	.short	0x0016
 801ec50:	fff6001f 	.word	0xfff6001f
 801ec54:	fff6fff6 	.word	0xfff6fff6
 801ec58:	001ffff6 	.word	0x001ffff6
 801ec5c:	fff6fff6 	.word	0xfff6fff6
 801ec60:	fff6fff6 	.word	0xfff6fff6
 801ec64:	003600a1 	.word	0x003600a1
 801ec68:	fff60080 	.word	0xfff60080
 801ec6c:	00b2fff6 	.word	0x00b2fff6
 801ec70:	0036fff6 	.word	0x0036fff6
 801ec74:	fff6fff6 	.word	0xfff6fff6
 801ec78:	0084      	.short	0x0084
 801ec7a:	0025      	movs	r5, r4
 801ec7c:	681a      	ldr	r2, [r3, #0]
 801ec7e:	3542      	adds	r5, #66	@ 0x42
 801ec80:	1d11      	adds	r1, r2, #4
 801ec82:	6019      	str	r1, [r3, #0]
 801ec84:	6813      	ldr	r3, [r2, #0]
 801ec86:	702b      	strb	r3, [r5, #0]
 801ec88:	2301      	movs	r3, #1
 801ec8a:	e0a0      	b.n	801edce <_printf_i+0x1c2>
 801ec8c:	6818      	ldr	r0, [r3, #0]
 801ec8e:	6809      	ldr	r1, [r1, #0]
 801ec90:	1d02      	adds	r2, r0, #4
 801ec92:	060d      	lsls	r5, r1, #24
 801ec94:	d50b      	bpl.n	801ecae <_printf_i+0xa2>
 801ec96:	6806      	ldr	r6, [r0, #0]
 801ec98:	601a      	str	r2, [r3, #0]
 801ec9a:	2e00      	cmp	r6, #0
 801ec9c:	da03      	bge.n	801eca6 <_printf_i+0x9a>
 801ec9e:	232d      	movs	r3, #45	@ 0x2d
 801eca0:	9a03      	ldr	r2, [sp, #12]
 801eca2:	4276      	negs	r6, r6
 801eca4:	7013      	strb	r3, [r2, #0]
 801eca6:	4b5e      	ldr	r3, [pc, #376]	@ (801ee20 <_printf_i+0x214>)
 801eca8:	270a      	movs	r7, #10
 801ecaa:	9304      	str	r3, [sp, #16]
 801ecac:	e018      	b.n	801ece0 <_printf_i+0xd4>
 801ecae:	6806      	ldr	r6, [r0, #0]
 801ecb0:	601a      	str	r2, [r3, #0]
 801ecb2:	0649      	lsls	r1, r1, #25
 801ecb4:	d5f1      	bpl.n	801ec9a <_printf_i+0x8e>
 801ecb6:	b236      	sxth	r6, r6
 801ecb8:	e7ef      	b.n	801ec9a <_printf_i+0x8e>
 801ecba:	6808      	ldr	r0, [r1, #0]
 801ecbc:	6819      	ldr	r1, [r3, #0]
 801ecbe:	c940      	ldmia	r1!, {r6}
 801ecc0:	0605      	lsls	r5, r0, #24
 801ecc2:	d402      	bmi.n	801ecca <_printf_i+0xbe>
 801ecc4:	0640      	lsls	r0, r0, #25
 801ecc6:	d500      	bpl.n	801ecca <_printf_i+0xbe>
 801ecc8:	b2b6      	uxth	r6, r6
 801ecca:	6019      	str	r1, [r3, #0]
 801eccc:	4b54      	ldr	r3, [pc, #336]	@ (801ee20 <_printf_i+0x214>)
 801ecce:	270a      	movs	r7, #10
 801ecd0:	9304      	str	r3, [sp, #16]
 801ecd2:	2a6f      	cmp	r2, #111	@ 0x6f
 801ecd4:	d100      	bne.n	801ecd8 <_printf_i+0xcc>
 801ecd6:	3f02      	subs	r7, #2
 801ecd8:	0023      	movs	r3, r4
 801ecda:	2200      	movs	r2, #0
 801ecdc:	3343      	adds	r3, #67	@ 0x43
 801ecde:	701a      	strb	r2, [r3, #0]
 801ece0:	6863      	ldr	r3, [r4, #4]
 801ece2:	60a3      	str	r3, [r4, #8]
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	db03      	blt.n	801ecf0 <_printf_i+0xe4>
 801ece8:	2104      	movs	r1, #4
 801ecea:	6822      	ldr	r2, [r4, #0]
 801ecec:	438a      	bics	r2, r1
 801ecee:	6022      	str	r2, [r4, #0]
 801ecf0:	2e00      	cmp	r6, #0
 801ecf2:	d102      	bne.n	801ecfa <_printf_i+0xee>
 801ecf4:	9d03      	ldr	r5, [sp, #12]
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d00c      	beq.n	801ed14 <_printf_i+0x108>
 801ecfa:	9d03      	ldr	r5, [sp, #12]
 801ecfc:	0030      	movs	r0, r6
 801ecfe:	0039      	movs	r1, r7
 801ed00:	f7e1 fad6 	bl	80002b0 <__aeabi_uidivmod>
 801ed04:	9b04      	ldr	r3, [sp, #16]
 801ed06:	3d01      	subs	r5, #1
 801ed08:	5c5b      	ldrb	r3, [r3, r1]
 801ed0a:	702b      	strb	r3, [r5, #0]
 801ed0c:	0033      	movs	r3, r6
 801ed0e:	0006      	movs	r6, r0
 801ed10:	429f      	cmp	r7, r3
 801ed12:	d9f3      	bls.n	801ecfc <_printf_i+0xf0>
 801ed14:	2f08      	cmp	r7, #8
 801ed16:	d109      	bne.n	801ed2c <_printf_i+0x120>
 801ed18:	6823      	ldr	r3, [r4, #0]
 801ed1a:	07db      	lsls	r3, r3, #31
 801ed1c:	d506      	bpl.n	801ed2c <_printf_i+0x120>
 801ed1e:	6862      	ldr	r2, [r4, #4]
 801ed20:	6923      	ldr	r3, [r4, #16]
 801ed22:	429a      	cmp	r2, r3
 801ed24:	dc02      	bgt.n	801ed2c <_printf_i+0x120>
 801ed26:	2330      	movs	r3, #48	@ 0x30
 801ed28:	3d01      	subs	r5, #1
 801ed2a:	702b      	strb	r3, [r5, #0]
 801ed2c:	9b03      	ldr	r3, [sp, #12]
 801ed2e:	1b5b      	subs	r3, r3, r5
 801ed30:	6123      	str	r3, [r4, #16]
 801ed32:	9b07      	ldr	r3, [sp, #28]
 801ed34:	0021      	movs	r1, r4
 801ed36:	9300      	str	r3, [sp, #0]
 801ed38:	9805      	ldr	r0, [sp, #20]
 801ed3a:	9b06      	ldr	r3, [sp, #24]
 801ed3c:	aa09      	add	r2, sp, #36	@ 0x24
 801ed3e:	f7ff fef5 	bl	801eb2c <_printf_common>
 801ed42:	3001      	adds	r0, #1
 801ed44:	d148      	bne.n	801edd8 <_printf_i+0x1cc>
 801ed46:	2001      	movs	r0, #1
 801ed48:	4240      	negs	r0, r0
 801ed4a:	b00b      	add	sp, #44	@ 0x2c
 801ed4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed4e:	2220      	movs	r2, #32
 801ed50:	6809      	ldr	r1, [r1, #0]
 801ed52:	430a      	orrs	r2, r1
 801ed54:	6022      	str	r2, [r4, #0]
 801ed56:	2278      	movs	r2, #120	@ 0x78
 801ed58:	4932      	ldr	r1, [pc, #200]	@ (801ee24 <_printf_i+0x218>)
 801ed5a:	9104      	str	r1, [sp, #16]
 801ed5c:	0021      	movs	r1, r4
 801ed5e:	3145      	adds	r1, #69	@ 0x45
 801ed60:	700a      	strb	r2, [r1, #0]
 801ed62:	6819      	ldr	r1, [r3, #0]
 801ed64:	6822      	ldr	r2, [r4, #0]
 801ed66:	c940      	ldmia	r1!, {r6}
 801ed68:	0610      	lsls	r0, r2, #24
 801ed6a:	d402      	bmi.n	801ed72 <_printf_i+0x166>
 801ed6c:	0650      	lsls	r0, r2, #25
 801ed6e:	d500      	bpl.n	801ed72 <_printf_i+0x166>
 801ed70:	b2b6      	uxth	r6, r6
 801ed72:	6019      	str	r1, [r3, #0]
 801ed74:	07d3      	lsls	r3, r2, #31
 801ed76:	d502      	bpl.n	801ed7e <_printf_i+0x172>
 801ed78:	2320      	movs	r3, #32
 801ed7a:	4313      	orrs	r3, r2
 801ed7c:	6023      	str	r3, [r4, #0]
 801ed7e:	2e00      	cmp	r6, #0
 801ed80:	d001      	beq.n	801ed86 <_printf_i+0x17a>
 801ed82:	2710      	movs	r7, #16
 801ed84:	e7a8      	b.n	801ecd8 <_printf_i+0xcc>
 801ed86:	2220      	movs	r2, #32
 801ed88:	6823      	ldr	r3, [r4, #0]
 801ed8a:	4393      	bics	r3, r2
 801ed8c:	6023      	str	r3, [r4, #0]
 801ed8e:	e7f8      	b.n	801ed82 <_printf_i+0x176>
 801ed90:	681a      	ldr	r2, [r3, #0]
 801ed92:	680d      	ldr	r5, [r1, #0]
 801ed94:	1d10      	adds	r0, r2, #4
 801ed96:	6949      	ldr	r1, [r1, #20]
 801ed98:	6018      	str	r0, [r3, #0]
 801ed9a:	6813      	ldr	r3, [r2, #0]
 801ed9c:	062e      	lsls	r6, r5, #24
 801ed9e:	d501      	bpl.n	801eda4 <_printf_i+0x198>
 801eda0:	6019      	str	r1, [r3, #0]
 801eda2:	e002      	b.n	801edaa <_printf_i+0x19e>
 801eda4:	066d      	lsls	r5, r5, #25
 801eda6:	d5fb      	bpl.n	801eda0 <_printf_i+0x194>
 801eda8:	8019      	strh	r1, [r3, #0]
 801edaa:	2300      	movs	r3, #0
 801edac:	9d03      	ldr	r5, [sp, #12]
 801edae:	6123      	str	r3, [r4, #16]
 801edb0:	e7bf      	b.n	801ed32 <_printf_i+0x126>
 801edb2:	681a      	ldr	r2, [r3, #0]
 801edb4:	1d11      	adds	r1, r2, #4
 801edb6:	6019      	str	r1, [r3, #0]
 801edb8:	6815      	ldr	r5, [r2, #0]
 801edba:	2100      	movs	r1, #0
 801edbc:	0028      	movs	r0, r5
 801edbe:	6862      	ldr	r2, [r4, #4]
 801edc0:	f000 fb7b 	bl	801f4ba <memchr>
 801edc4:	2800      	cmp	r0, #0
 801edc6:	d001      	beq.n	801edcc <_printf_i+0x1c0>
 801edc8:	1b40      	subs	r0, r0, r5
 801edca:	6060      	str	r0, [r4, #4]
 801edcc:	6863      	ldr	r3, [r4, #4]
 801edce:	6123      	str	r3, [r4, #16]
 801edd0:	2300      	movs	r3, #0
 801edd2:	9a03      	ldr	r2, [sp, #12]
 801edd4:	7013      	strb	r3, [r2, #0]
 801edd6:	e7ac      	b.n	801ed32 <_printf_i+0x126>
 801edd8:	002a      	movs	r2, r5
 801edda:	6923      	ldr	r3, [r4, #16]
 801eddc:	9906      	ldr	r1, [sp, #24]
 801edde:	9805      	ldr	r0, [sp, #20]
 801ede0:	9d07      	ldr	r5, [sp, #28]
 801ede2:	47a8      	blx	r5
 801ede4:	3001      	adds	r0, #1
 801ede6:	d0ae      	beq.n	801ed46 <_printf_i+0x13a>
 801ede8:	6823      	ldr	r3, [r4, #0]
 801edea:	079b      	lsls	r3, r3, #30
 801edec:	d415      	bmi.n	801ee1a <_printf_i+0x20e>
 801edee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edf0:	68e0      	ldr	r0, [r4, #12]
 801edf2:	4298      	cmp	r0, r3
 801edf4:	daa9      	bge.n	801ed4a <_printf_i+0x13e>
 801edf6:	0018      	movs	r0, r3
 801edf8:	e7a7      	b.n	801ed4a <_printf_i+0x13e>
 801edfa:	0022      	movs	r2, r4
 801edfc:	2301      	movs	r3, #1
 801edfe:	9906      	ldr	r1, [sp, #24]
 801ee00:	9805      	ldr	r0, [sp, #20]
 801ee02:	9e07      	ldr	r6, [sp, #28]
 801ee04:	3219      	adds	r2, #25
 801ee06:	47b0      	blx	r6
 801ee08:	3001      	adds	r0, #1
 801ee0a:	d09c      	beq.n	801ed46 <_printf_i+0x13a>
 801ee0c:	3501      	adds	r5, #1
 801ee0e:	68e3      	ldr	r3, [r4, #12]
 801ee10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee12:	1a9b      	subs	r3, r3, r2
 801ee14:	42ab      	cmp	r3, r5
 801ee16:	dcf0      	bgt.n	801edfa <_printf_i+0x1ee>
 801ee18:	e7e9      	b.n	801edee <_printf_i+0x1e2>
 801ee1a:	2500      	movs	r5, #0
 801ee1c:	e7f7      	b.n	801ee0e <_printf_i+0x202>
 801ee1e:	46c0      	nop			@ (mov r8, r8)
 801ee20:	0802473b 	.word	0x0802473b
 801ee24:	0802474c 	.word	0x0802474c

0801ee28 <std>:
 801ee28:	2300      	movs	r3, #0
 801ee2a:	b510      	push	{r4, lr}
 801ee2c:	0004      	movs	r4, r0
 801ee2e:	6003      	str	r3, [r0, #0]
 801ee30:	6043      	str	r3, [r0, #4]
 801ee32:	6083      	str	r3, [r0, #8]
 801ee34:	8181      	strh	r1, [r0, #12]
 801ee36:	6643      	str	r3, [r0, #100]	@ 0x64
 801ee38:	81c2      	strh	r2, [r0, #14]
 801ee3a:	6103      	str	r3, [r0, #16]
 801ee3c:	6143      	str	r3, [r0, #20]
 801ee3e:	6183      	str	r3, [r0, #24]
 801ee40:	0019      	movs	r1, r3
 801ee42:	2208      	movs	r2, #8
 801ee44:	305c      	adds	r0, #92	@ 0x5c
 801ee46:	f000 fa67 	bl	801f318 <memset>
 801ee4a:	4b0b      	ldr	r3, [pc, #44]	@ (801ee78 <std+0x50>)
 801ee4c:	6224      	str	r4, [r4, #32]
 801ee4e:	6263      	str	r3, [r4, #36]	@ 0x24
 801ee50:	4b0a      	ldr	r3, [pc, #40]	@ (801ee7c <std+0x54>)
 801ee52:	62a3      	str	r3, [r4, #40]	@ 0x28
 801ee54:	4b0a      	ldr	r3, [pc, #40]	@ (801ee80 <std+0x58>)
 801ee56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ee58:	4b0a      	ldr	r3, [pc, #40]	@ (801ee84 <std+0x5c>)
 801ee5a:	6323      	str	r3, [r4, #48]	@ 0x30
 801ee5c:	4b0a      	ldr	r3, [pc, #40]	@ (801ee88 <std+0x60>)
 801ee5e:	429c      	cmp	r4, r3
 801ee60:	d005      	beq.n	801ee6e <std+0x46>
 801ee62:	4b0a      	ldr	r3, [pc, #40]	@ (801ee8c <std+0x64>)
 801ee64:	429c      	cmp	r4, r3
 801ee66:	d002      	beq.n	801ee6e <std+0x46>
 801ee68:	4b09      	ldr	r3, [pc, #36]	@ (801ee90 <std+0x68>)
 801ee6a:	429c      	cmp	r4, r3
 801ee6c:	d103      	bne.n	801ee76 <std+0x4e>
 801ee6e:	0020      	movs	r0, r4
 801ee70:	3058      	adds	r0, #88	@ 0x58
 801ee72:	f000 fb1f 	bl	801f4b4 <__retarget_lock_init_recursive>
 801ee76:	bd10      	pop	{r4, pc}
 801ee78:	0801f0d1 	.word	0x0801f0d1
 801ee7c:	0801f0f9 	.word	0x0801f0f9
 801ee80:	0801f131 	.word	0x0801f131
 801ee84:	0801f15d 	.word	0x0801f15d
 801ee88:	200037d0 	.word	0x200037d0
 801ee8c:	20003838 	.word	0x20003838
 801ee90:	200038a0 	.word	0x200038a0

0801ee94 <stdio_exit_handler>:
 801ee94:	b510      	push	{r4, lr}
 801ee96:	4a03      	ldr	r2, [pc, #12]	@ (801eea4 <stdio_exit_handler+0x10>)
 801ee98:	4903      	ldr	r1, [pc, #12]	@ (801eea8 <stdio_exit_handler+0x14>)
 801ee9a:	4804      	ldr	r0, [pc, #16]	@ (801eeac <stdio_exit_handler+0x18>)
 801ee9c:	f000 f86c 	bl	801ef78 <_fwalk_sglue>
 801eea0:	bd10      	pop	{r4, pc}
 801eea2:	46c0      	nop			@ (mov r8, r8)
 801eea4:	20000250 	.word	0x20000250
 801eea8:	08021ad9 	.word	0x08021ad9
 801eeac:	200003cc 	.word	0x200003cc

0801eeb0 <cleanup_stdio>:
 801eeb0:	6841      	ldr	r1, [r0, #4]
 801eeb2:	4b0b      	ldr	r3, [pc, #44]	@ (801eee0 <cleanup_stdio+0x30>)
 801eeb4:	b510      	push	{r4, lr}
 801eeb6:	0004      	movs	r4, r0
 801eeb8:	4299      	cmp	r1, r3
 801eeba:	d001      	beq.n	801eec0 <cleanup_stdio+0x10>
 801eebc:	f002 fe0c 	bl	8021ad8 <_fflush_r>
 801eec0:	68a1      	ldr	r1, [r4, #8]
 801eec2:	4b08      	ldr	r3, [pc, #32]	@ (801eee4 <cleanup_stdio+0x34>)
 801eec4:	4299      	cmp	r1, r3
 801eec6:	d002      	beq.n	801eece <cleanup_stdio+0x1e>
 801eec8:	0020      	movs	r0, r4
 801eeca:	f002 fe05 	bl	8021ad8 <_fflush_r>
 801eece:	68e1      	ldr	r1, [r4, #12]
 801eed0:	4b05      	ldr	r3, [pc, #20]	@ (801eee8 <cleanup_stdio+0x38>)
 801eed2:	4299      	cmp	r1, r3
 801eed4:	d002      	beq.n	801eedc <cleanup_stdio+0x2c>
 801eed6:	0020      	movs	r0, r4
 801eed8:	f002 fdfe 	bl	8021ad8 <_fflush_r>
 801eedc:	bd10      	pop	{r4, pc}
 801eede:	46c0      	nop			@ (mov r8, r8)
 801eee0:	200037d0 	.word	0x200037d0
 801eee4:	20003838 	.word	0x20003838
 801eee8:	200038a0 	.word	0x200038a0

0801eeec <global_stdio_init.part.0>:
 801eeec:	b510      	push	{r4, lr}
 801eeee:	4b09      	ldr	r3, [pc, #36]	@ (801ef14 <global_stdio_init.part.0+0x28>)
 801eef0:	4a09      	ldr	r2, [pc, #36]	@ (801ef18 <global_stdio_init.part.0+0x2c>)
 801eef2:	2104      	movs	r1, #4
 801eef4:	601a      	str	r2, [r3, #0]
 801eef6:	4809      	ldr	r0, [pc, #36]	@ (801ef1c <global_stdio_init.part.0+0x30>)
 801eef8:	2200      	movs	r2, #0
 801eefa:	f7ff ff95 	bl	801ee28 <std>
 801eefe:	2201      	movs	r2, #1
 801ef00:	2109      	movs	r1, #9
 801ef02:	4807      	ldr	r0, [pc, #28]	@ (801ef20 <global_stdio_init.part.0+0x34>)
 801ef04:	f7ff ff90 	bl	801ee28 <std>
 801ef08:	2202      	movs	r2, #2
 801ef0a:	2112      	movs	r1, #18
 801ef0c:	4805      	ldr	r0, [pc, #20]	@ (801ef24 <global_stdio_init.part.0+0x38>)
 801ef0e:	f7ff ff8b 	bl	801ee28 <std>
 801ef12:	bd10      	pop	{r4, pc}
 801ef14:	20003908 	.word	0x20003908
 801ef18:	0801ee95 	.word	0x0801ee95
 801ef1c:	200037d0 	.word	0x200037d0
 801ef20:	20003838 	.word	0x20003838
 801ef24:	200038a0 	.word	0x200038a0

0801ef28 <__sfp_lock_acquire>:
 801ef28:	b510      	push	{r4, lr}
 801ef2a:	4802      	ldr	r0, [pc, #8]	@ (801ef34 <__sfp_lock_acquire+0xc>)
 801ef2c:	f000 fac3 	bl	801f4b6 <__retarget_lock_acquire_recursive>
 801ef30:	bd10      	pop	{r4, pc}
 801ef32:	46c0      	nop			@ (mov r8, r8)
 801ef34:	20003911 	.word	0x20003911

0801ef38 <__sfp_lock_release>:
 801ef38:	b510      	push	{r4, lr}
 801ef3a:	4802      	ldr	r0, [pc, #8]	@ (801ef44 <__sfp_lock_release+0xc>)
 801ef3c:	f000 fabc 	bl	801f4b8 <__retarget_lock_release_recursive>
 801ef40:	bd10      	pop	{r4, pc}
 801ef42:	46c0      	nop			@ (mov r8, r8)
 801ef44:	20003911 	.word	0x20003911

0801ef48 <__sinit>:
 801ef48:	b510      	push	{r4, lr}
 801ef4a:	0004      	movs	r4, r0
 801ef4c:	f7ff ffec 	bl	801ef28 <__sfp_lock_acquire>
 801ef50:	6a23      	ldr	r3, [r4, #32]
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	d002      	beq.n	801ef5c <__sinit+0x14>
 801ef56:	f7ff ffef 	bl	801ef38 <__sfp_lock_release>
 801ef5a:	bd10      	pop	{r4, pc}
 801ef5c:	4b04      	ldr	r3, [pc, #16]	@ (801ef70 <__sinit+0x28>)
 801ef5e:	6223      	str	r3, [r4, #32]
 801ef60:	4b04      	ldr	r3, [pc, #16]	@ (801ef74 <__sinit+0x2c>)
 801ef62:	681b      	ldr	r3, [r3, #0]
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d1f6      	bne.n	801ef56 <__sinit+0xe>
 801ef68:	f7ff ffc0 	bl	801eeec <global_stdio_init.part.0>
 801ef6c:	e7f3      	b.n	801ef56 <__sinit+0xe>
 801ef6e:	46c0      	nop			@ (mov r8, r8)
 801ef70:	0801eeb1 	.word	0x0801eeb1
 801ef74:	20003908 	.word	0x20003908

0801ef78 <_fwalk_sglue>:
 801ef78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ef7a:	0014      	movs	r4, r2
 801ef7c:	2600      	movs	r6, #0
 801ef7e:	9000      	str	r0, [sp, #0]
 801ef80:	9101      	str	r1, [sp, #4]
 801ef82:	68a5      	ldr	r5, [r4, #8]
 801ef84:	6867      	ldr	r7, [r4, #4]
 801ef86:	3f01      	subs	r7, #1
 801ef88:	d504      	bpl.n	801ef94 <_fwalk_sglue+0x1c>
 801ef8a:	6824      	ldr	r4, [r4, #0]
 801ef8c:	2c00      	cmp	r4, #0
 801ef8e:	d1f8      	bne.n	801ef82 <_fwalk_sglue+0xa>
 801ef90:	0030      	movs	r0, r6
 801ef92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ef94:	89ab      	ldrh	r3, [r5, #12]
 801ef96:	2b01      	cmp	r3, #1
 801ef98:	d908      	bls.n	801efac <_fwalk_sglue+0x34>
 801ef9a:	220e      	movs	r2, #14
 801ef9c:	5eab      	ldrsh	r3, [r5, r2]
 801ef9e:	3301      	adds	r3, #1
 801efa0:	d004      	beq.n	801efac <_fwalk_sglue+0x34>
 801efa2:	0029      	movs	r1, r5
 801efa4:	9800      	ldr	r0, [sp, #0]
 801efa6:	9b01      	ldr	r3, [sp, #4]
 801efa8:	4798      	blx	r3
 801efaa:	4306      	orrs	r6, r0
 801efac:	3568      	adds	r5, #104	@ 0x68
 801efae:	e7ea      	b.n	801ef86 <_fwalk_sglue+0xe>

0801efb0 <iprintf>:
 801efb0:	b40f      	push	{r0, r1, r2, r3}
 801efb2:	b507      	push	{r0, r1, r2, lr}
 801efb4:	4905      	ldr	r1, [pc, #20]	@ (801efcc <iprintf+0x1c>)
 801efb6:	ab04      	add	r3, sp, #16
 801efb8:	6808      	ldr	r0, [r1, #0]
 801efba:	cb04      	ldmia	r3!, {r2}
 801efbc:	6881      	ldr	r1, [r0, #8]
 801efbe:	9301      	str	r3, [sp, #4]
 801efc0:	f002 fbe8 	bl	8021794 <_vfiprintf_r>
 801efc4:	b003      	add	sp, #12
 801efc6:	bc08      	pop	{r3}
 801efc8:	b004      	add	sp, #16
 801efca:	4718      	bx	r3
 801efcc:	200003c8 	.word	0x200003c8

0801efd0 <_puts_r>:
 801efd0:	6a03      	ldr	r3, [r0, #32]
 801efd2:	b570      	push	{r4, r5, r6, lr}
 801efd4:	0005      	movs	r5, r0
 801efd6:	000e      	movs	r6, r1
 801efd8:	6884      	ldr	r4, [r0, #8]
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d101      	bne.n	801efe2 <_puts_r+0x12>
 801efde:	f7ff ffb3 	bl	801ef48 <__sinit>
 801efe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801efe4:	07db      	lsls	r3, r3, #31
 801efe6:	d405      	bmi.n	801eff4 <_puts_r+0x24>
 801efe8:	89a3      	ldrh	r3, [r4, #12]
 801efea:	059b      	lsls	r3, r3, #22
 801efec:	d402      	bmi.n	801eff4 <_puts_r+0x24>
 801efee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eff0:	f000 fa61 	bl	801f4b6 <__retarget_lock_acquire_recursive>
 801eff4:	89a3      	ldrh	r3, [r4, #12]
 801eff6:	071b      	lsls	r3, r3, #28
 801eff8:	d502      	bpl.n	801f000 <_puts_r+0x30>
 801effa:	6923      	ldr	r3, [r4, #16]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d11f      	bne.n	801f040 <_puts_r+0x70>
 801f000:	0021      	movs	r1, r4
 801f002:	0028      	movs	r0, r5
 801f004:	f000 f92a 	bl	801f25c <__swsetup_r>
 801f008:	2800      	cmp	r0, #0
 801f00a:	d019      	beq.n	801f040 <_puts_r+0x70>
 801f00c:	2501      	movs	r5, #1
 801f00e:	426d      	negs	r5, r5
 801f010:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f012:	07db      	lsls	r3, r3, #31
 801f014:	d405      	bmi.n	801f022 <_puts_r+0x52>
 801f016:	89a3      	ldrh	r3, [r4, #12]
 801f018:	059b      	lsls	r3, r3, #22
 801f01a:	d402      	bmi.n	801f022 <_puts_r+0x52>
 801f01c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f01e:	f000 fa4b 	bl	801f4b8 <__retarget_lock_release_recursive>
 801f022:	0028      	movs	r0, r5
 801f024:	bd70      	pop	{r4, r5, r6, pc}
 801f026:	3601      	adds	r6, #1
 801f028:	60a3      	str	r3, [r4, #8]
 801f02a:	2b00      	cmp	r3, #0
 801f02c:	da04      	bge.n	801f038 <_puts_r+0x68>
 801f02e:	69a2      	ldr	r2, [r4, #24]
 801f030:	429a      	cmp	r2, r3
 801f032:	dc16      	bgt.n	801f062 <_puts_r+0x92>
 801f034:	290a      	cmp	r1, #10
 801f036:	d014      	beq.n	801f062 <_puts_r+0x92>
 801f038:	6823      	ldr	r3, [r4, #0]
 801f03a:	1c5a      	adds	r2, r3, #1
 801f03c:	6022      	str	r2, [r4, #0]
 801f03e:	7019      	strb	r1, [r3, #0]
 801f040:	68a3      	ldr	r3, [r4, #8]
 801f042:	7831      	ldrb	r1, [r6, #0]
 801f044:	3b01      	subs	r3, #1
 801f046:	2900      	cmp	r1, #0
 801f048:	d1ed      	bne.n	801f026 <_puts_r+0x56>
 801f04a:	60a3      	str	r3, [r4, #8]
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	da0f      	bge.n	801f070 <_puts_r+0xa0>
 801f050:	0022      	movs	r2, r4
 801f052:	0028      	movs	r0, r5
 801f054:	310a      	adds	r1, #10
 801f056:	f000 f8bf 	bl	801f1d8 <__swbuf_r>
 801f05a:	3001      	adds	r0, #1
 801f05c:	d0d6      	beq.n	801f00c <_puts_r+0x3c>
 801f05e:	250a      	movs	r5, #10
 801f060:	e7d6      	b.n	801f010 <_puts_r+0x40>
 801f062:	0022      	movs	r2, r4
 801f064:	0028      	movs	r0, r5
 801f066:	f000 f8b7 	bl	801f1d8 <__swbuf_r>
 801f06a:	3001      	adds	r0, #1
 801f06c:	d1e8      	bne.n	801f040 <_puts_r+0x70>
 801f06e:	e7cd      	b.n	801f00c <_puts_r+0x3c>
 801f070:	6823      	ldr	r3, [r4, #0]
 801f072:	1c5a      	adds	r2, r3, #1
 801f074:	6022      	str	r2, [r4, #0]
 801f076:	220a      	movs	r2, #10
 801f078:	701a      	strb	r2, [r3, #0]
 801f07a:	e7f0      	b.n	801f05e <_puts_r+0x8e>

0801f07c <puts>:
 801f07c:	b510      	push	{r4, lr}
 801f07e:	4b03      	ldr	r3, [pc, #12]	@ (801f08c <puts+0x10>)
 801f080:	0001      	movs	r1, r0
 801f082:	6818      	ldr	r0, [r3, #0]
 801f084:	f7ff ffa4 	bl	801efd0 <_puts_r>
 801f088:	bd10      	pop	{r4, pc}
 801f08a:	46c0      	nop			@ (mov r8, r8)
 801f08c:	200003c8 	.word	0x200003c8

0801f090 <siprintf>:
 801f090:	b40e      	push	{r1, r2, r3}
 801f092:	b500      	push	{lr}
 801f094:	490b      	ldr	r1, [pc, #44]	@ (801f0c4 <siprintf+0x34>)
 801f096:	b09c      	sub	sp, #112	@ 0x70
 801f098:	ab1d      	add	r3, sp, #116	@ 0x74
 801f09a:	9002      	str	r0, [sp, #8]
 801f09c:	9006      	str	r0, [sp, #24]
 801f09e:	9107      	str	r1, [sp, #28]
 801f0a0:	9104      	str	r1, [sp, #16]
 801f0a2:	4809      	ldr	r0, [pc, #36]	@ (801f0c8 <siprintf+0x38>)
 801f0a4:	4909      	ldr	r1, [pc, #36]	@ (801f0cc <siprintf+0x3c>)
 801f0a6:	cb04      	ldmia	r3!, {r2}
 801f0a8:	9105      	str	r1, [sp, #20]
 801f0aa:	6800      	ldr	r0, [r0, #0]
 801f0ac:	a902      	add	r1, sp, #8
 801f0ae:	9301      	str	r3, [sp, #4]
 801f0b0:	f002 fa4a 	bl	8021548 <_svfiprintf_r>
 801f0b4:	2200      	movs	r2, #0
 801f0b6:	9b02      	ldr	r3, [sp, #8]
 801f0b8:	701a      	strb	r2, [r3, #0]
 801f0ba:	b01c      	add	sp, #112	@ 0x70
 801f0bc:	bc08      	pop	{r3}
 801f0be:	b003      	add	sp, #12
 801f0c0:	4718      	bx	r3
 801f0c2:	46c0      	nop			@ (mov r8, r8)
 801f0c4:	7fffffff 	.word	0x7fffffff
 801f0c8:	200003c8 	.word	0x200003c8
 801f0cc:	ffff0208 	.word	0xffff0208

0801f0d0 <__sread>:
 801f0d0:	b570      	push	{r4, r5, r6, lr}
 801f0d2:	000c      	movs	r4, r1
 801f0d4:	250e      	movs	r5, #14
 801f0d6:	5f49      	ldrsh	r1, [r1, r5]
 801f0d8:	f000 f99a 	bl	801f410 <_read_r>
 801f0dc:	2800      	cmp	r0, #0
 801f0de:	db03      	blt.n	801f0e8 <__sread+0x18>
 801f0e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f0e2:	181b      	adds	r3, r3, r0
 801f0e4:	6563      	str	r3, [r4, #84]	@ 0x54
 801f0e6:	bd70      	pop	{r4, r5, r6, pc}
 801f0e8:	89a3      	ldrh	r3, [r4, #12]
 801f0ea:	4a02      	ldr	r2, [pc, #8]	@ (801f0f4 <__sread+0x24>)
 801f0ec:	4013      	ands	r3, r2
 801f0ee:	81a3      	strh	r3, [r4, #12]
 801f0f0:	e7f9      	b.n	801f0e6 <__sread+0x16>
 801f0f2:	46c0      	nop			@ (mov r8, r8)
 801f0f4:	ffffefff 	.word	0xffffefff

0801f0f8 <__swrite>:
 801f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0fa:	001f      	movs	r7, r3
 801f0fc:	898b      	ldrh	r3, [r1, #12]
 801f0fe:	0005      	movs	r5, r0
 801f100:	000c      	movs	r4, r1
 801f102:	0016      	movs	r6, r2
 801f104:	05db      	lsls	r3, r3, #23
 801f106:	d505      	bpl.n	801f114 <__swrite+0x1c>
 801f108:	230e      	movs	r3, #14
 801f10a:	5ec9      	ldrsh	r1, [r1, r3]
 801f10c:	2200      	movs	r2, #0
 801f10e:	2302      	movs	r3, #2
 801f110:	f000 f96a 	bl	801f3e8 <_lseek_r>
 801f114:	89a3      	ldrh	r3, [r4, #12]
 801f116:	4a05      	ldr	r2, [pc, #20]	@ (801f12c <__swrite+0x34>)
 801f118:	0028      	movs	r0, r5
 801f11a:	4013      	ands	r3, r2
 801f11c:	81a3      	strh	r3, [r4, #12]
 801f11e:	0032      	movs	r2, r6
 801f120:	230e      	movs	r3, #14
 801f122:	5ee1      	ldrsh	r1, [r4, r3]
 801f124:	003b      	movs	r3, r7
 801f126:	f000 f987 	bl	801f438 <_write_r>
 801f12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f12c:	ffffefff 	.word	0xffffefff

0801f130 <__sseek>:
 801f130:	b570      	push	{r4, r5, r6, lr}
 801f132:	000c      	movs	r4, r1
 801f134:	250e      	movs	r5, #14
 801f136:	5f49      	ldrsh	r1, [r1, r5]
 801f138:	f000 f956 	bl	801f3e8 <_lseek_r>
 801f13c:	89a3      	ldrh	r3, [r4, #12]
 801f13e:	1c42      	adds	r2, r0, #1
 801f140:	d103      	bne.n	801f14a <__sseek+0x1a>
 801f142:	4a05      	ldr	r2, [pc, #20]	@ (801f158 <__sseek+0x28>)
 801f144:	4013      	ands	r3, r2
 801f146:	81a3      	strh	r3, [r4, #12]
 801f148:	bd70      	pop	{r4, r5, r6, pc}
 801f14a:	2280      	movs	r2, #128	@ 0x80
 801f14c:	0152      	lsls	r2, r2, #5
 801f14e:	4313      	orrs	r3, r2
 801f150:	81a3      	strh	r3, [r4, #12]
 801f152:	6560      	str	r0, [r4, #84]	@ 0x54
 801f154:	e7f8      	b.n	801f148 <__sseek+0x18>
 801f156:	46c0      	nop			@ (mov r8, r8)
 801f158:	ffffefff 	.word	0xffffefff

0801f15c <__sclose>:
 801f15c:	b510      	push	{r4, lr}
 801f15e:	230e      	movs	r3, #14
 801f160:	5ec9      	ldrsh	r1, [r1, r3]
 801f162:	f000 f92f 	bl	801f3c4 <_close_r>
 801f166:	bd10      	pop	{r4, pc}

0801f168 <_vsniprintf_r>:
 801f168:	b530      	push	{r4, r5, lr}
 801f16a:	0014      	movs	r4, r2
 801f16c:	0005      	movs	r5, r0
 801f16e:	001a      	movs	r2, r3
 801f170:	b09b      	sub	sp, #108	@ 0x6c
 801f172:	2c00      	cmp	r4, #0
 801f174:	da05      	bge.n	801f182 <_vsniprintf_r+0x1a>
 801f176:	238b      	movs	r3, #139	@ 0x8b
 801f178:	6003      	str	r3, [r0, #0]
 801f17a:	2001      	movs	r0, #1
 801f17c:	4240      	negs	r0, r0
 801f17e:	b01b      	add	sp, #108	@ 0x6c
 801f180:	bd30      	pop	{r4, r5, pc}
 801f182:	2382      	movs	r3, #130	@ 0x82
 801f184:	4668      	mov	r0, sp
 801f186:	009b      	lsls	r3, r3, #2
 801f188:	8183      	strh	r3, [r0, #12]
 801f18a:	2300      	movs	r3, #0
 801f18c:	9100      	str	r1, [sp, #0]
 801f18e:	9104      	str	r1, [sp, #16]
 801f190:	429c      	cmp	r4, r3
 801f192:	d000      	beq.n	801f196 <_vsniprintf_r+0x2e>
 801f194:	1e63      	subs	r3, r4, #1
 801f196:	9302      	str	r3, [sp, #8]
 801f198:	9305      	str	r3, [sp, #20]
 801f19a:	2301      	movs	r3, #1
 801f19c:	4669      	mov	r1, sp
 801f19e:	425b      	negs	r3, r3
 801f1a0:	81cb      	strh	r3, [r1, #14]
 801f1a2:	0028      	movs	r0, r5
 801f1a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f1a6:	f002 f9cf 	bl	8021548 <_svfiprintf_r>
 801f1aa:	1c43      	adds	r3, r0, #1
 801f1ac:	da01      	bge.n	801f1b2 <_vsniprintf_r+0x4a>
 801f1ae:	238b      	movs	r3, #139	@ 0x8b
 801f1b0:	602b      	str	r3, [r5, #0]
 801f1b2:	2c00      	cmp	r4, #0
 801f1b4:	d0e3      	beq.n	801f17e <_vsniprintf_r+0x16>
 801f1b6:	2200      	movs	r2, #0
 801f1b8:	9b00      	ldr	r3, [sp, #0]
 801f1ba:	701a      	strb	r2, [r3, #0]
 801f1bc:	e7df      	b.n	801f17e <_vsniprintf_r+0x16>
	...

0801f1c0 <vsniprintf>:
 801f1c0:	b513      	push	{r0, r1, r4, lr}
 801f1c2:	4c04      	ldr	r4, [pc, #16]	@ (801f1d4 <vsniprintf+0x14>)
 801f1c4:	9300      	str	r3, [sp, #0]
 801f1c6:	0013      	movs	r3, r2
 801f1c8:	000a      	movs	r2, r1
 801f1ca:	0001      	movs	r1, r0
 801f1cc:	6820      	ldr	r0, [r4, #0]
 801f1ce:	f7ff ffcb 	bl	801f168 <_vsniprintf_r>
 801f1d2:	bd16      	pop	{r1, r2, r4, pc}
 801f1d4:	200003c8 	.word	0x200003c8

0801f1d8 <__swbuf_r>:
 801f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1da:	0006      	movs	r6, r0
 801f1dc:	000d      	movs	r5, r1
 801f1de:	0014      	movs	r4, r2
 801f1e0:	2800      	cmp	r0, #0
 801f1e2:	d004      	beq.n	801f1ee <__swbuf_r+0x16>
 801f1e4:	6a03      	ldr	r3, [r0, #32]
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d101      	bne.n	801f1ee <__swbuf_r+0x16>
 801f1ea:	f7ff fead 	bl	801ef48 <__sinit>
 801f1ee:	69a3      	ldr	r3, [r4, #24]
 801f1f0:	60a3      	str	r3, [r4, #8]
 801f1f2:	89a3      	ldrh	r3, [r4, #12]
 801f1f4:	071b      	lsls	r3, r3, #28
 801f1f6:	d502      	bpl.n	801f1fe <__swbuf_r+0x26>
 801f1f8:	6923      	ldr	r3, [r4, #16]
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d109      	bne.n	801f212 <__swbuf_r+0x3a>
 801f1fe:	0021      	movs	r1, r4
 801f200:	0030      	movs	r0, r6
 801f202:	f000 f82b 	bl	801f25c <__swsetup_r>
 801f206:	2800      	cmp	r0, #0
 801f208:	d003      	beq.n	801f212 <__swbuf_r+0x3a>
 801f20a:	2501      	movs	r5, #1
 801f20c:	426d      	negs	r5, r5
 801f20e:	0028      	movs	r0, r5
 801f210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f212:	6923      	ldr	r3, [r4, #16]
 801f214:	6820      	ldr	r0, [r4, #0]
 801f216:	b2ef      	uxtb	r7, r5
 801f218:	1ac0      	subs	r0, r0, r3
 801f21a:	6963      	ldr	r3, [r4, #20]
 801f21c:	b2ed      	uxtb	r5, r5
 801f21e:	4283      	cmp	r3, r0
 801f220:	dc05      	bgt.n	801f22e <__swbuf_r+0x56>
 801f222:	0021      	movs	r1, r4
 801f224:	0030      	movs	r0, r6
 801f226:	f002 fc57 	bl	8021ad8 <_fflush_r>
 801f22a:	2800      	cmp	r0, #0
 801f22c:	d1ed      	bne.n	801f20a <__swbuf_r+0x32>
 801f22e:	68a3      	ldr	r3, [r4, #8]
 801f230:	3001      	adds	r0, #1
 801f232:	3b01      	subs	r3, #1
 801f234:	60a3      	str	r3, [r4, #8]
 801f236:	6823      	ldr	r3, [r4, #0]
 801f238:	1c5a      	adds	r2, r3, #1
 801f23a:	6022      	str	r2, [r4, #0]
 801f23c:	701f      	strb	r7, [r3, #0]
 801f23e:	6963      	ldr	r3, [r4, #20]
 801f240:	4283      	cmp	r3, r0
 801f242:	d004      	beq.n	801f24e <__swbuf_r+0x76>
 801f244:	89a3      	ldrh	r3, [r4, #12]
 801f246:	07db      	lsls	r3, r3, #31
 801f248:	d5e1      	bpl.n	801f20e <__swbuf_r+0x36>
 801f24a:	2d0a      	cmp	r5, #10
 801f24c:	d1df      	bne.n	801f20e <__swbuf_r+0x36>
 801f24e:	0021      	movs	r1, r4
 801f250:	0030      	movs	r0, r6
 801f252:	f002 fc41 	bl	8021ad8 <_fflush_r>
 801f256:	2800      	cmp	r0, #0
 801f258:	d0d9      	beq.n	801f20e <__swbuf_r+0x36>
 801f25a:	e7d6      	b.n	801f20a <__swbuf_r+0x32>

0801f25c <__swsetup_r>:
 801f25c:	4b2d      	ldr	r3, [pc, #180]	@ (801f314 <__swsetup_r+0xb8>)
 801f25e:	b570      	push	{r4, r5, r6, lr}
 801f260:	0005      	movs	r5, r0
 801f262:	6818      	ldr	r0, [r3, #0]
 801f264:	000c      	movs	r4, r1
 801f266:	2800      	cmp	r0, #0
 801f268:	d004      	beq.n	801f274 <__swsetup_r+0x18>
 801f26a:	6a03      	ldr	r3, [r0, #32]
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d101      	bne.n	801f274 <__swsetup_r+0x18>
 801f270:	f7ff fe6a 	bl	801ef48 <__sinit>
 801f274:	230c      	movs	r3, #12
 801f276:	5ee2      	ldrsh	r2, [r4, r3]
 801f278:	0713      	lsls	r3, r2, #28
 801f27a:	d423      	bmi.n	801f2c4 <__swsetup_r+0x68>
 801f27c:	06d3      	lsls	r3, r2, #27
 801f27e:	d407      	bmi.n	801f290 <__swsetup_r+0x34>
 801f280:	2309      	movs	r3, #9
 801f282:	602b      	str	r3, [r5, #0]
 801f284:	2340      	movs	r3, #64	@ 0x40
 801f286:	2001      	movs	r0, #1
 801f288:	4313      	orrs	r3, r2
 801f28a:	81a3      	strh	r3, [r4, #12]
 801f28c:	4240      	negs	r0, r0
 801f28e:	e03a      	b.n	801f306 <__swsetup_r+0xaa>
 801f290:	0752      	lsls	r2, r2, #29
 801f292:	d513      	bpl.n	801f2bc <__swsetup_r+0x60>
 801f294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f296:	2900      	cmp	r1, #0
 801f298:	d008      	beq.n	801f2ac <__swsetup_r+0x50>
 801f29a:	0023      	movs	r3, r4
 801f29c:	3344      	adds	r3, #68	@ 0x44
 801f29e:	4299      	cmp	r1, r3
 801f2a0:	d002      	beq.n	801f2a8 <__swsetup_r+0x4c>
 801f2a2:	0028      	movs	r0, r5
 801f2a4:	f000 ffa6 	bl	80201f4 <_free_r>
 801f2a8:	2300      	movs	r3, #0
 801f2aa:	6363      	str	r3, [r4, #52]	@ 0x34
 801f2ac:	2224      	movs	r2, #36	@ 0x24
 801f2ae:	89a3      	ldrh	r3, [r4, #12]
 801f2b0:	4393      	bics	r3, r2
 801f2b2:	81a3      	strh	r3, [r4, #12]
 801f2b4:	2300      	movs	r3, #0
 801f2b6:	6063      	str	r3, [r4, #4]
 801f2b8:	6923      	ldr	r3, [r4, #16]
 801f2ba:	6023      	str	r3, [r4, #0]
 801f2bc:	2308      	movs	r3, #8
 801f2be:	89a2      	ldrh	r2, [r4, #12]
 801f2c0:	4313      	orrs	r3, r2
 801f2c2:	81a3      	strh	r3, [r4, #12]
 801f2c4:	6923      	ldr	r3, [r4, #16]
 801f2c6:	2b00      	cmp	r3, #0
 801f2c8:	d10b      	bne.n	801f2e2 <__swsetup_r+0x86>
 801f2ca:	21a0      	movs	r1, #160	@ 0xa0
 801f2cc:	2280      	movs	r2, #128	@ 0x80
 801f2ce:	89a3      	ldrh	r3, [r4, #12]
 801f2d0:	0089      	lsls	r1, r1, #2
 801f2d2:	0092      	lsls	r2, r2, #2
 801f2d4:	400b      	ands	r3, r1
 801f2d6:	4293      	cmp	r3, r2
 801f2d8:	d003      	beq.n	801f2e2 <__swsetup_r+0x86>
 801f2da:	0021      	movs	r1, r4
 801f2dc:	0028      	movs	r0, r5
 801f2de:	f002 fc51 	bl	8021b84 <__smakebuf_r>
 801f2e2:	230c      	movs	r3, #12
 801f2e4:	5ee2      	ldrsh	r2, [r4, r3]
 801f2e6:	2101      	movs	r1, #1
 801f2e8:	0013      	movs	r3, r2
 801f2ea:	400b      	ands	r3, r1
 801f2ec:	420a      	tst	r2, r1
 801f2ee:	d00b      	beq.n	801f308 <__swsetup_r+0xac>
 801f2f0:	2300      	movs	r3, #0
 801f2f2:	60a3      	str	r3, [r4, #8]
 801f2f4:	6963      	ldr	r3, [r4, #20]
 801f2f6:	425b      	negs	r3, r3
 801f2f8:	61a3      	str	r3, [r4, #24]
 801f2fa:	2000      	movs	r0, #0
 801f2fc:	6923      	ldr	r3, [r4, #16]
 801f2fe:	4283      	cmp	r3, r0
 801f300:	d101      	bne.n	801f306 <__swsetup_r+0xaa>
 801f302:	0613      	lsls	r3, r2, #24
 801f304:	d4be      	bmi.n	801f284 <__swsetup_r+0x28>
 801f306:	bd70      	pop	{r4, r5, r6, pc}
 801f308:	0791      	lsls	r1, r2, #30
 801f30a:	d400      	bmi.n	801f30e <__swsetup_r+0xb2>
 801f30c:	6963      	ldr	r3, [r4, #20]
 801f30e:	60a3      	str	r3, [r4, #8]
 801f310:	e7f3      	b.n	801f2fa <__swsetup_r+0x9e>
 801f312:	46c0      	nop			@ (mov r8, r8)
 801f314:	200003c8 	.word	0x200003c8

0801f318 <memset>:
 801f318:	0003      	movs	r3, r0
 801f31a:	1882      	adds	r2, r0, r2
 801f31c:	4293      	cmp	r3, r2
 801f31e:	d100      	bne.n	801f322 <memset+0xa>
 801f320:	4770      	bx	lr
 801f322:	7019      	strb	r1, [r3, #0]
 801f324:	3301      	adds	r3, #1
 801f326:	e7f9      	b.n	801f31c <memset+0x4>

0801f328 <strchr>:
 801f328:	b2c9      	uxtb	r1, r1
 801f32a:	7803      	ldrb	r3, [r0, #0]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d004      	beq.n	801f33a <strchr+0x12>
 801f330:	428b      	cmp	r3, r1
 801f332:	d100      	bne.n	801f336 <strchr+0xe>
 801f334:	4770      	bx	lr
 801f336:	3001      	adds	r0, #1
 801f338:	e7f7      	b.n	801f32a <strchr+0x2>
 801f33a:	424b      	negs	r3, r1
 801f33c:	4159      	adcs	r1, r3
 801f33e:	4249      	negs	r1, r1
 801f340:	4008      	ands	r0, r1
 801f342:	e7f7      	b.n	801f334 <strchr+0xc>

0801f344 <strncmp>:
 801f344:	b530      	push	{r4, r5, lr}
 801f346:	0005      	movs	r5, r0
 801f348:	1e10      	subs	r0, r2, #0
 801f34a:	d00b      	beq.n	801f364 <strncmp+0x20>
 801f34c:	2400      	movs	r4, #0
 801f34e:	3a01      	subs	r2, #1
 801f350:	5d2b      	ldrb	r3, [r5, r4]
 801f352:	5d08      	ldrb	r0, [r1, r4]
 801f354:	4283      	cmp	r3, r0
 801f356:	d104      	bne.n	801f362 <strncmp+0x1e>
 801f358:	42a2      	cmp	r2, r4
 801f35a:	d002      	beq.n	801f362 <strncmp+0x1e>
 801f35c:	3401      	adds	r4, #1
 801f35e:	2b00      	cmp	r3, #0
 801f360:	d1f6      	bne.n	801f350 <strncmp+0xc>
 801f362:	1a18      	subs	r0, r3, r0
 801f364:	bd30      	pop	{r4, r5, pc}

0801f366 <strncpy>:
 801f366:	0003      	movs	r3, r0
 801f368:	b530      	push	{r4, r5, lr}
 801f36a:	001d      	movs	r5, r3
 801f36c:	2a00      	cmp	r2, #0
 801f36e:	d006      	beq.n	801f37e <strncpy+0x18>
 801f370:	780c      	ldrb	r4, [r1, #0]
 801f372:	3a01      	subs	r2, #1
 801f374:	3301      	adds	r3, #1
 801f376:	702c      	strb	r4, [r5, #0]
 801f378:	3101      	adds	r1, #1
 801f37a:	2c00      	cmp	r4, #0
 801f37c:	d1f5      	bne.n	801f36a <strncpy+0x4>
 801f37e:	2100      	movs	r1, #0
 801f380:	189a      	adds	r2, r3, r2
 801f382:	4293      	cmp	r3, r2
 801f384:	d100      	bne.n	801f388 <strncpy+0x22>
 801f386:	bd30      	pop	{r4, r5, pc}
 801f388:	7019      	strb	r1, [r3, #0]
 801f38a:	3301      	adds	r3, #1
 801f38c:	e7f9      	b.n	801f382 <strncpy+0x1c>

0801f38e <strstr>:
 801f38e:	780a      	ldrb	r2, [r1, #0]
 801f390:	b530      	push	{r4, r5, lr}
 801f392:	2a00      	cmp	r2, #0
 801f394:	d10c      	bne.n	801f3b0 <strstr+0x22>
 801f396:	bd30      	pop	{r4, r5, pc}
 801f398:	429a      	cmp	r2, r3
 801f39a:	d108      	bne.n	801f3ae <strstr+0x20>
 801f39c:	2301      	movs	r3, #1
 801f39e:	5ccc      	ldrb	r4, [r1, r3]
 801f3a0:	2c00      	cmp	r4, #0
 801f3a2:	d0f8      	beq.n	801f396 <strstr+0x8>
 801f3a4:	5cc5      	ldrb	r5, [r0, r3]
 801f3a6:	42a5      	cmp	r5, r4
 801f3a8:	d101      	bne.n	801f3ae <strstr+0x20>
 801f3aa:	3301      	adds	r3, #1
 801f3ac:	e7f7      	b.n	801f39e <strstr+0x10>
 801f3ae:	3001      	adds	r0, #1
 801f3b0:	7803      	ldrb	r3, [r0, #0]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d1f0      	bne.n	801f398 <strstr+0xa>
 801f3b6:	0018      	movs	r0, r3
 801f3b8:	e7ed      	b.n	801f396 <strstr+0x8>
	...

0801f3bc <_localeconv_r>:
 801f3bc:	4800      	ldr	r0, [pc, #0]	@ (801f3c0 <_localeconv_r+0x4>)
 801f3be:	4770      	bx	lr
 801f3c0:	2000034c 	.word	0x2000034c

0801f3c4 <_close_r>:
 801f3c4:	2300      	movs	r3, #0
 801f3c6:	b570      	push	{r4, r5, r6, lr}
 801f3c8:	4d06      	ldr	r5, [pc, #24]	@ (801f3e4 <_close_r+0x20>)
 801f3ca:	0004      	movs	r4, r0
 801f3cc:	0008      	movs	r0, r1
 801f3ce:	602b      	str	r3, [r5, #0]
 801f3d0:	f7ed fd9e 	bl	800cf10 <_close>
 801f3d4:	1c43      	adds	r3, r0, #1
 801f3d6:	d103      	bne.n	801f3e0 <_close_r+0x1c>
 801f3d8:	682b      	ldr	r3, [r5, #0]
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d000      	beq.n	801f3e0 <_close_r+0x1c>
 801f3de:	6023      	str	r3, [r4, #0]
 801f3e0:	bd70      	pop	{r4, r5, r6, pc}
 801f3e2:	46c0      	nop			@ (mov r8, r8)
 801f3e4:	2000390c 	.word	0x2000390c

0801f3e8 <_lseek_r>:
 801f3e8:	b570      	push	{r4, r5, r6, lr}
 801f3ea:	0004      	movs	r4, r0
 801f3ec:	0008      	movs	r0, r1
 801f3ee:	0011      	movs	r1, r2
 801f3f0:	001a      	movs	r2, r3
 801f3f2:	2300      	movs	r3, #0
 801f3f4:	4d05      	ldr	r5, [pc, #20]	@ (801f40c <_lseek_r+0x24>)
 801f3f6:	602b      	str	r3, [r5, #0]
 801f3f8:	f7ed fdab 	bl	800cf52 <_lseek>
 801f3fc:	1c43      	adds	r3, r0, #1
 801f3fe:	d103      	bne.n	801f408 <_lseek_r+0x20>
 801f400:	682b      	ldr	r3, [r5, #0]
 801f402:	2b00      	cmp	r3, #0
 801f404:	d000      	beq.n	801f408 <_lseek_r+0x20>
 801f406:	6023      	str	r3, [r4, #0]
 801f408:	bd70      	pop	{r4, r5, r6, pc}
 801f40a:	46c0      	nop			@ (mov r8, r8)
 801f40c:	2000390c 	.word	0x2000390c

0801f410 <_read_r>:
 801f410:	b570      	push	{r4, r5, r6, lr}
 801f412:	0004      	movs	r4, r0
 801f414:	0008      	movs	r0, r1
 801f416:	0011      	movs	r1, r2
 801f418:	001a      	movs	r2, r3
 801f41a:	2300      	movs	r3, #0
 801f41c:	4d05      	ldr	r5, [pc, #20]	@ (801f434 <_read_r+0x24>)
 801f41e:	602b      	str	r3, [r5, #0]
 801f420:	f7ed fd59 	bl	800ced6 <_read>
 801f424:	1c43      	adds	r3, r0, #1
 801f426:	d103      	bne.n	801f430 <_read_r+0x20>
 801f428:	682b      	ldr	r3, [r5, #0]
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d000      	beq.n	801f430 <_read_r+0x20>
 801f42e:	6023      	str	r3, [r4, #0]
 801f430:	bd70      	pop	{r4, r5, r6, pc}
 801f432:	46c0      	nop			@ (mov r8, r8)
 801f434:	2000390c 	.word	0x2000390c

0801f438 <_write_r>:
 801f438:	b570      	push	{r4, r5, r6, lr}
 801f43a:	0004      	movs	r4, r0
 801f43c:	0008      	movs	r0, r1
 801f43e:	0011      	movs	r1, r2
 801f440:	001a      	movs	r2, r3
 801f442:	2300      	movs	r3, #0
 801f444:	4d05      	ldr	r5, [pc, #20]	@ (801f45c <_write_r+0x24>)
 801f446:	602b      	str	r3, [r5, #0]
 801f448:	f7ee fa1a 	bl	800d880 <_write>
 801f44c:	1c43      	adds	r3, r0, #1
 801f44e:	d103      	bne.n	801f458 <_write_r+0x20>
 801f450:	682b      	ldr	r3, [r5, #0]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d000      	beq.n	801f458 <_write_r+0x20>
 801f456:	6023      	str	r3, [r4, #0]
 801f458:	bd70      	pop	{r4, r5, r6, pc}
 801f45a:	46c0      	nop			@ (mov r8, r8)
 801f45c:	2000390c 	.word	0x2000390c

0801f460 <__errno>:
 801f460:	4b01      	ldr	r3, [pc, #4]	@ (801f468 <__errno+0x8>)
 801f462:	6818      	ldr	r0, [r3, #0]
 801f464:	4770      	bx	lr
 801f466:	46c0      	nop			@ (mov r8, r8)
 801f468:	200003c8 	.word	0x200003c8

0801f46c <__libc_init_array>:
 801f46c:	b570      	push	{r4, r5, r6, lr}
 801f46e:	2600      	movs	r6, #0
 801f470:	4c0c      	ldr	r4, [pc, #48]	@ (801f4a4 <__libc_init_array+0x38>)
 801f472:	4d0d      	ldr	r5, [pc, #52]	@ (801f4a8 <__libc_init_array+0x3c>)
 801f474:	1b64      	subs	r4, r4, r5
 801f476:	10a4      	asrs	r4, r4, #2
 801f478:	42a6      	cmp	r6, r4
 801f47a:	d109      	bne.n	801f490 <__libc_init_array+0x24>
 801f47c:	2600      	movs	r6, #0
 801f47e:	f002 fee9 	bl	8022254 <_init>
 801f482:	4c0a      	ldr	r4, [pc, #40]	@ (801f4ac <__libc_init_array+0x40>)
 801f484:	4d0a      	ldr	r5, [pc, #40]	@ (801f4b0 <__libc_init_array+0x44>)
 801f486:	1b64      	subs	r4, r4, r5
 801f488:	10a4      	asrs	r4, r4, #2
 801f48a:	42a6      	cmp	r6, r4
 801f48c:	d105      	bne.n	801f49a <__libc_init_array+0x2e>
 801f48e:	bd70      	pop	{r4, r5, r6, pc}
 801f490:	00b3      	lsls	r3, r6, #2
 801f492:	58eb      	ldr	r3, [r5, r3]
 801f494:	4798      	blx	r3
 801f496:	3601      	adds	r6, #1
 801f498:	e7ee      	b.n	801f478 <__libc_init_array+0xc>
 801f49a:	00b3      	lsls	r3, r6, #2
 801f49c:	58eb      	ldr	r3, [r5, r3]
 801f49e:	4798      	blx	r3
 801f4a0:	3601      	adds	r6, #1
 801f4a2:	e7f2      	b.n	801f48a <__libc_init_array+0x1e>
 801f4a4:	08024a18 	.word	0x08024a18
 801f4a8:	08024a18 	.word	0x08024a18
 801f4ac:	08024a1c 	.word	0x08024a1c
 801f4b0:	08024a18 	.word	0x08024a18

0801f4b4 <__retarget_lock_init_recursive>:
 801f4b4:	4770      	bx	lr

0801f4b6 <__retarget_lock_acquire_recursive>:
 801f4b6:	4770      	bx	lr

0801f4b8 <__retarget_lock_release_recursive>:
 801f4b8:	4770      	bx	lr

0801f4ba <memchr>:
 801f4ba:	b2c9      	uxtb	r1, r1
 801f4bc:	1882      	adds	r2, r0, r2
 801f4be:	4290      	cmp	r0, r2
 801f4c0:	d101      	bne.n	801f4c6 <memchr+0xc>
 801f4c2:	2000      	movs	r0, #0
 801f4c4:	4770      	bx	lr
 801f4c6:	7803      	ldrb	r3, [r0, #0]
 801f4c8:	428b      	cmp	r3, r1
 801f4ca:	d0fb      	beq.n	801f4c4 <memchr+0xa>
 801f4cc:	3001      	adds	r0, #1
 801f4ce:	e7f6      	b.n	801f4be <memchr+0x4>

0801f4d0 <memcpy>:
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	b510      	push	{r4, lr}
 801f4d4:	429a      	cmp	r2, r3
 801f4d6:	d100      	bne.n	801f4da <memcpy+0xa>
 801f4d8:	bd10      	pop	{r4, pc}
 801f4da:	5ccc      	ldrb	r4, [r1, r3]
 801f4dc:	54c4      	strb	r4, [r0, r3]
 801f4de:	3301      	adds	r3, #1
 801f4e0:	e7f8      	b.n	801f4d4 <memcpy+0x4>
	...

0801f4e4 <nan>:
 801f4e4:	2000      	movs	r0, #0
 801f4e6:	4901      	ldr	r1, [pc, #4]	@ (801f4ec <nan+0x8>)
 801f4e8:	4770      	bx	lr
 801f4ea:	46c0      	nop			@ (mov r8, r8)
 801f4ec:	7ff80000 	.word	0x7ff80000

0801f4f0 <quorem>:
 801f4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4f2:	6902      	ldr	r2, [r0, #16]
 801f4f4:	690f      	ldr	r7, [r1, #16]
 801f4f6:	b087      	sub	sp, #28
 801f4f8:	0006      	movs	r6, r0
 801f4fa:	000b      	movs	r3, r1
 801f4fc:	2000      	movs	r0, #0
 801f4fe:	9102      	str	r1, [sp, #8]
 801f500:	42ba      	cmp	r2, r7
 801f502:	db6d      	blt.n	801f5e0 <quorem+0xf0>
 801f504:	3f01      	subs	r7, #1
 801f506:	00bc      	lsls	r4, r7, #2
 801f508:	3314      	adds	r3, #20
 801f50a:	9305      	str	r3, [sp, #20]
 801f50c:	191b      	adds	r3, r3, r4
 801f50e:	9303      	str	r3, [sp, #12]
 801f510:	0033      	movs	r3, r6
 801f512:	3314      	adds	r3, #20
 801f514:	191c      	adds	r4, r3, r4
 801f516:	9301      	str	r3, [sp, #4]
 801f518:	6823      	ldr	r3, [r4, #0]
 801f51a:	9304      	str	r3, [sp, #16]
 801f51c:	9b03      	ldr	r3, [sp, #12]
 801f51e:	9804      	ldr	r0, [sp, #16]
 801f520:	681d      	ldr	r5, [r3, #0]
 801f522:	3501      	adds	r5, #1
 801f524:	0029      	movs	r1, r5
 801f526:	f7e0 fe3d 	bl	80001a4 <__udivsi3>
 801f52a:	9b04      	ldr	r3, [sp, #16]
 801f52c:	9000      	str	r0, [sp, #0]
 801f52e:	42ab      	cmp	r3, r5
 801f530:	d32b      	bcc.n	801f58a <quorem+0x9a>
 801f532:	9b05      	ldr	r3, [sp, #20]
 801f534:	9d01      	ldr	r5, [sp, #4]
 801f536:	469c      	mov	ip, r3
 801f538:	2300      	movs	r3, #0
 801f53a:	9305      	str	r3, [sp, #20]
 801f53c:	9304      	str	r3, [sp, #16]
 801f53e:	4662      	mov	r2, ip
 801f540:	ca08      	ldmia	r2!, {r3}
 801f542:	6828      	ldr	r0, [r5, #0]
 801f544:	4694      	mov	ip, r2
 801f546:	9a00      	ldr	r2, [sp, #0]
 801f548:	b299      	uxth	r1, r3
 801f54a:	4351      	muls	r1, r2
 801f54c:	9a05      	ldr	r2, [sp, #20]
 801f54e:	0c1b      	lsrs	r3, r3, #16
 801f550:	1889      	adds	r1, r1, r2
 801f552:	9a00      	ldr	r2, [sp, #0]
 801f554:	4353      	muls	r3, r2
 801f556:	0c0a      	lsrs	r2, r1, #16
 801f558:	189b      	adds	r3, r3, r2
 801f55a:	0c1a      	lsrs	r2, r3, #16
 801f55c:	b289      	uxth	r1, r1
 801f55e:	9205      	str	r2, [sp, #20]
 801f560:	b282      	uxth	r2, r0
 801f562:	1a52      	subs	r2, r2, r1
 801f564:	9904      	ldr	r1, [sp, #16]
 801f566:	0c00      	lsrs	r0, r0, #16
 801f568:	1852      	adds	r2, r2, r1
 801f56a:	b29b      	uxth	r3, r3
 801f56c:	1411      	asrs	r1, r2, #16
 801f56e:	1ac3      	subs	r3, r0, r3
 801f570:	185b      	adds	r3, r3, r1
 801f572:	1419      	asrs	r1, r3, #16
 801f574:	b292      	uxth	r2, r2
 801f576:	041b      	lsls	r3, r3, #16
 801f578:	431a      	orrs	r2, r3
 801f57a:	9b03      	ldr	r3, [sp, #12]
 801f57c:	9104      	str	r1, [sp, #16]
 801f57e:	c504      	stmia	r5!, {r2}
 801f580:	4563      	cmp	r3, ip
 801f582:	d2dc      	bcs.n	801f53e <quorem+0x4e>
 801f584:	6823      	ldr	r3, [r4, #0]
 801f586:	2b00      	cmp	r3, #0
 801f588:	d030      	beq.n	801f5ec <quorem+0xfc>
 801f58a:	0030      	movs	r0, r6
 801f58c:	9902      	ldr	r1, [sp, #8]
 801f58e:	f001 fd7d 	bl	802108c <__mcmp>
 801f592:	2800      	cmp	r0, #0
 801f594:	db23      	blt.n	801f5de <quorem+0xee>
 801f596:	0034      	movs	r4, r6
 801f598:	2500      	movs	r5, #0
 801f59a:	9902      	ldr	r1, [sp, #8]
 801f59c:	3414      	adds	r4, #20
 801f59e:	3114      	adds	r1, #20
 801f5a0:	6823      	ldr	r3, [r4, #0]
 801f5a2:	c901      	ldmia	r1!, {r0}
 801f5a4:	9302      	str	r3, [sp, #8]
 801f5a6:	466b      	mov	r3, sp
 801f5a8:	891b      	ldrh	r3, [r3, #8]
 801f5aa:	b282      	uxth	r2, r0
 801f5ac:	1a9a      	subs	r2, r3, r2
 801f5ae:	9b02      	ldr	r3, [sp, #8]
 801f5b0:	1952      	adds	r2, r2, r5
 801f5b2:	0c00      	lsrs	r0, r0, #16
 801f5b4:	0c1b      	lsrs	r3, r3, #16
 801f5b6:	1a1b      	subs	r3, r3, r0
 801f5b8:	1410      	asrs	r0, r2, #16
 801f5ba:	181b      	adds	r3, r3, r0
 801f5bc:	141d      	asrs	r5, r3, #16
 801f5be:	b292      	uxth	r2, r2
 801f5c0:	041b      	lsls	r3, r3, #16
 801f5c2:	431a      	orrs	r2, r3
 801f5c4:	9b03      	ldr	r3, [sp, #12]
 801f5c6:	c404      	stmia	r4!, {r2}
 801f5c8:	428b      	cmp	r3, r1
 801f5ca:	d2e9      	bcs.n	801f5a0 <quorem+0xb0>
 801f5cc:	9a01      	ldr	r2, [sp, #4]
 801f5ce:	00bb      	lsls	r3, r7, #2
 801f5d0:	18d3      	adds	r3, r2, r3
 801f5d2:	681a      	ldr	r2, [r3, #0]
 801f5d4:	2a00      	cmp	r2, #0
 801f5d6:	d013      	beq.n	801f600 <quorem+0x110>
 801f5d8:	9b00      	ldr	r3, [sp, #0]
 801f5da:	3301      	adds	r3, #1
 801f5dc:	9300      	str	r3, [sp, #0]
 801f5de:	9800      	ldr	r0, [sp, #0]
 801f5e0:	b007      	add	sp, #28
 801f5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f5e4:	6823      	ldr	r3, [r4, #0]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d104      	bne.n	801f5f4 <quorem+0x104>
 801f5ea:	3f01      	subs	r7, #1
 801f5ec:	9b01      	ldr	r3, [sp, #4]
 801f5ee:	3c04      	subs	r4, #4
 801f5f0:	42a3      	cmp	r3, r4
 801f5f2:	d3f7      	bcc.n	801f5e4 <quorem+0xf4>
 801f5f4:	6137      	str	r7, [r6, #16]
 801f5f6:	e7c8      	b.n	801f58a <quorem+0x9a>
 801f5f8:	681a      	ldr	r2, [r3, #0]
 801f5fa:	2a00      	cmp	r2, #0
 801f5fc:	d104      	bne.n	801f608 <quorem+0x118>
 801f5fe:	3f01      	subs	r7, #1
 801f600:	9a01      	ldr	r2, [sp, #4]
 801f602:	3b04      	subs	r3, #4
 801f604:	429a      	cmp	r2, r3
 801f606:	d3f7      	bcc.n	801f5f8 <quorem+0x108>
 801f608:	6137      	str	r7, [r6, #16]
 801f60a:	e7e5      	b.n	801f5d8 <quorem+0xe8>

0801f60c <_dtoa_r>:
 801f60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f60e:	0014      	movs	r4, r2
 801f610:	001d      	movs	r5, r3
 801f612:	69c6      	ldr	r6, [r0, #28]
 801f614:	b09d      	sub	sp, #116	@ 0x74
 801f616:	940a      	str	r4, [sp, #40]	@ 0x28
 801f618:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f61a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801f61c:	9003      	str	r0, [sp, #12]
 801f61e:	2e00      	cmp	r6, #0
 801f620:	d10f      	bne.n	801f642 <_dtoa_r+0x36>
 801f622:	2010      	movs	r0, #16
 801f624:	f001 f98a 	bl	802093c <malloc>
 801f628:	9b03      	ldr	r3, [sp, #12]
 801f62a:	1e02      	subs	r2, r0, #0
 801f62c:	61d8      	str	r0, [r3, #28]
 801f62e:	d104      	bne.n	801f63a <_dtoa_r+0x2e>
 801f630:	21ef      	movs	r1, #239	@ 0xef
 801f632:	4bc7      	ldr	r3, [pc, #796]	@ (801f950 <_dtoa_r+0x344>)
 801f634:	48c7      	ldr	r0, [pc, #796]	@ (801f954 <_dtoa_r+0x348>)
 801f636:	f002 fb2f 	bl	8021c98 <__assert_func>
 801f63a:	6046      	str	r6, [r0, #4]
 801f63c:	6086      	str	r6, [r0, #8]
 801f63e:	6006      	str	r6, [r0, #0]
 801f640:	60c6      	str	r6, [r0, #12]
 801f642:	9b03      	ldr	r3, [sp, #12]
 801f644:	69db      	ldr	r3, [r3, #28]
 801f646:	6819      	ldr	r1, [r3, #0]
 801f648:	2900      	cmp	r1, #0
 801f64a:	d00b      	beq.n	801f664 <_dtoa_r+0x58>
 801f64c:	685a      	ldr	r2, [r3, #4]
 801f64e:	2301      	movs	r3, #1
 801f650:	4093      	lsls	r3, r2
 801f652:	604a      	str	r2, [r1, #4]
 801f654:	608b      	str	r3, [r1, #8]
 801f656:	9803      	ldr	r0, [sp, #12]
 801f658:	f001 fa82 	bl	8020b60 <_Bfree>
 801f65c:	2200      	movs	r2, #0
 801f65e:	9b03      	ldr	r3, [sp, #12]
 801f660:	69db      	ldr	r3, [r3, #28]
 801f662:	601a      	str	r2, [r3, #0]
 801f664:	2d00      	cmp	r5, #0
 801f666:	da1e      	bge.n	801f6a6 <_dtoa_r+0x9a>
 801f668:	2301      	movs	r3, #1
 801f66a:	603b      	str	r3, [r7, #0]
 801f66c:	006b      	lsls	r3, r5, #1
 801f66e:	085b      	lsrs	r3, r3, #1
 801f670:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f672:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f674:	4bb8      	ldr	r3, [pc, #736]	@ (801f958 <_dtoa_r+0x34c>)
 801f676:	4ab8      	ldr	r2, [pc, #736]	@ (801f958 <_dtoa_r+0x34c>)
 801f678:	403b      	ands	r3, r7
 801f67a:	4293      	cmp	r3, r2
 801f67c:	d116      	bne.n	801f6ac <_dtoa_r+0xa0>
 801f67e:	4bb7      	ldr	r3, [pc, #732]	@ (801f95c <_dtoa_r+0x350>)
 801f680:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f682:	6013      	str	r3, [r2, #0]
 801f684:	033b      	lsls	r3, r7, #12
 801f686:	0b1b      	lsrs	r3, r3, #12
 801f688:	4323      	orrs	r3, r4
 801f68a:	d101      	bne.n	801f690 <_dtoa_r+0x84>
 801f68c:	f000 fd83 	bl	8020196 <_dtoa_r+0xb8a>
 801f690:	4bb3      	ldr	r3, [pc, #716]	@ (801f960 <_dtoa_r+0x354>)
 801f692:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f694:	9308      	str	r3, [sp, #32]
 801f696:	2a00      	cmp	r2, #0
 801f698:	d002      	beq.n	801f6a0 <_dtoa_r+0x94>
 801f69a:	4bb2      	ldr	r3, [pc, #712]	@ (801f964 <_dtoa_r+0x358>)
 801f69c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f69e:	6013      	str	r3, [r2, #0]
 801f6a0:	9808      	ldr	r0, [sp, #32]
 801f6a2:	b01d      	add	sp, #116	@ 0x74
 801f6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	603b      	str	r3, [r7, #0]
 801f6aa:	e7e2      	b.n	801f672 <_dtoa_r+0x66>
 801f6ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f6ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f6b0:	9212      	str	r2, [sp, #72]	@ 0x48
 801f6b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f6b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f6b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f6b8:	2200      	movs	r2, #0
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	f7e0 fef8 	bl	80004b0 <__aeabi_dcmpeq>
 801f6c0:	1e06      	subs	r6, r0, #0
 801f6c2:	d00b      	beq.n	801f6dc <_dtoa_r+0xd0>
 801f6c4:	2301      	movs	r3, #1
 801f6c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f6c8:	6013      	str	r3, [r2, #0]
 801f6ca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	d002      	beq.n	801f6d6 <_dtoa_r+0xca>
 801f6d0:	4ba5      	ldr	r3, [pc, #660]	@ (801f968 <_dtoa_r+0x35c>)
 801f6d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f6d4:	6013      	str	r3, [r2, #0]
 801f6d6:	4ba5      	ldr	r3, [pc, #660]	@ (801f96c <_dtoa_r+0x360>)
 801f6d8:	9308      	str	r3, [sp, #32]
 801f6da:	e7e1      	b.n	801f6a0 <_dtoa_r+0x94>
 801f6dc:	ab1a      	add	r3, sp, #104	@ 0x68
 801f6de:	9301      	str	r3, [sp, #4]
 801f6e0:	ab1b      	add	r3, sp, #108	@ 0x6c
 801f6e2:	9300      	str	r3, [sp, #0]
 801f6e4:	9803      	ldr	r0, [sp, #12]
 801f6e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f6e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6ea:	f001 fdf1 	bl	80212d0 <__d2b>
 801f6ee:	007a      	lsls	r2, r7, #1
 801f6f0:	9005      	str	r0, [sp, #20]
 801f6f2:	0d52      	lsrs	r2, r2, #21
 801f6f4:	d100      	bne.n	801f6f8 <_dtoa_r+0xec>
 801f6f6:	e07b      	b.n	801f7f0 <_dtoa_r+0x1e4>
 801f6f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6fa:	9618      	str	r6, [sp, #96]	@ 0x60
 801f6fc:	0319      	lsls	r1, r3, #12
 801f6fe:	4b9c      	ldr	r3, [pc, #624]	@ (801f970 <_dtoa_r+0x364>)
 801f700:	0b09      	lsrs	r1, r1, #12
 801f702:	430b      	orrs	r3, r1
 801f704:	499b      	ldr	r1, [pc, #620]	@ (801f974 <_dtoa_r+0x368>)
 801f706:	1857      	adds	r7, r2, r1
 801f708:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f70a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f70c:	0019      	movs	r1, r3
 801f70e:	2200      	movs	r2, #0
 801f710:	4b99      	ldr	r3, [pc, #612]	@ (801f978 <_dtoa_r+0x36c>)
 801f712:	f7e3 fa5b 	bl	8002bcc <__aeabi_dsub>
 801f716:	4a99      	ldr	r2, [pc, #612]	@ (801f97c <_dtoa_r+0x370>)
 801f718:	4b99      	ldr	r3, [pc, #612]	@ (801f980 <_dtoa_r+0x374>)
 801f71a:	f7e2 ff8f 	bl	800263c <__aeabi_dmul>
 801f71e:	4a99      	ldr	r2, [pc, #612]	@ (801f984 <_dtoa_r+0x378>)
 801f720:	4b99      	ldr	r3, [pc, #612]	@ (801f988 <_dtoa_r+0x37c>)
 801f722:	f7e1 ffe3 	bl	80016ec <__aeabi_dadd>
 801f726:	0004      	movs	r4, r0
 801f728:	0038      	movs	r0, r7
 801f72a:	000d      	movs	r5, r1
 801f72c:	f7e3 fe48 	bl	80033c0 <__aeabi_i2d>
 801f730:	4a96      	ldr	r2, [pc, #600]	@ (801f98c <_dtoa_r+0x380>)
 801f732:	4b97      	ldr	r3, [pc, #604]	@ (801f990 <_dtoa_r+0x384>)
 801f734:	f7e2 ff82 	bl	800263c <__aeabi_dmul>
 801f738:	0002      	movs	r2, r0
 801f73a:	000b      	movs	r3, r1
 801f73c:	0020      	movs	r0, r4
 801f73e:	0029      	movs	r1, r5
 801f740:	f7e1 ffd4 	bl	80016ec <__aeabi_dadd>
 801f744:	0004      	movs	r4, r0
 801f746:	000d      	movs	r5, r1
 801f748:	f7e3 fdfe 	bl	8003348 <__aeabi_d2iz>
 801f74c:	2200      	movs	r2, #0
 801f74e:	9004      	str	r0, [sp, #16]
 801f750:	2300      	movs	r3, #0
 801f752:	0020      	movs	r0, r4
 801f754:	0029      	movs	r1, r5
 801f756:	f7e0 feb1 	bl	80004bc <__aeabi_dcmplt>
 801f75a:	2800      	cmp	r0, #0
 801f75c:	d00b      	beq.n	801f776 <_dtoa_r+0x16a>
 801f75e:	9804      	ldr	r0, [sp, #16]
 801f760:	f7e3 fe2e 	bl	80033c0 <__aeabi_i2d>
 801f764:	002b      	movs	r3, r5
 801f766:	0022      	movs	r2, r4
 801f768:	f7e0 fea2 	bl	80004b0 <__aeabi_dcmpeq>
 801f76c:	4243      	negs	r3, r0
 801f76e:	4158      	adcs	r0, r3
 801f770:	9b04      	ldr	r3, [sp, #16]
 801f772:	1a1b      	subs	r3, r3, r0
 801f774:	9304      	str	r3, [sp, #16]
 801f776:	2301      	movs	r3, #1
 801f778:	9315      	str	r3, [sp, #84]	@ 0x54
 801f77a:	9b04      	ldr	r3, [sp, #16]
 801f77c:	2b16      	cmp	r3, #22
 801f77e:	d810      	bhi.n	801f7a2 <_dtoa_r+0x196>
 801f780:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f782:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f784:	9a04      	ldr	r2, [sp, #16]
 801f786:	4b83      	ldr	r3, [pc, #524]	@ (801f994 <_dtoa_r+0x388>)
 801f788:	00d2      	lsls	r2, r2, #3
 801f78a:	189b      	adds	r3, r3, r2
 801f78c:	681a      	ldr	r2, [r3, #0]
 801f78e:	685b      	ldr	r3, [r3, #4]
 801f790:	f7e0 fe94 	bl	80004bc <__aeabi_dcmplt>
 801f794:	2800      	cmp	r0, #0
 801f796:	d047      	beq.n	801f828 <_dtoa_r+0x21c>
 801f798:	9b04      	ldr	r3, [sp, #16]
 801f79a:	3b01      	subs	r3, #1
 801f79c:	9304      	str	r3, [sp, #16]
 801f79e:	2300      	movs	r3, #0
 801f7a0:	9315      	str	r3, [sp, #84]	@ 0x54
 801f7a2:	2200      	movs	r2, #0
 801f7a4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f7a6:	9206      	str	r2, [sp, #24]
 801f7a8:	1bdb      	subs	r3, r3, r7
 801f7aa:	1e5a      	subs	r2, r3, #1
 801f7ac:	d53e      	bpl.n	801f82c <_dtoa_r+0x220>
 801f7ae:	2201      	movs	r2, #1
 801f7b0:	1ad3      	subs	r3, r2, r3
 801f7b2:	9306      	str	r3, [sp, #24]
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	930d      	str	r3, [sp, #52]	@ 0x34
 801f7b8:	9b04      	ldr	r3, [sp, #16]
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	db38      	blt.n	801f830 <_dtoa_r+0x224>
 801f7be:	9a04      	ldr	r2, [sp, #16]
 801f7c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7c2:	4694      	mov	ip, r2
 801f7c4:	4463      	add	r3, ip
 801f7c6:	930d      	str	r3, [sp, #52]	@ 0x34
 801f7c8:	2300      	movs	r3, #0
 801f7ca:	9214      	str	r2, [sp, #80]	@ 0x50
 801f7cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f7ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f7d0:	2401      	movs	r4, #1
 801f7d2:	2b09      	cmp	r3, #9
 801f7d4:	d867      	bhi.n	801f8a6 <_dtoa_r+0x29a>
 801f7d6:	2b05      	cmp	r3, #5
 801f7d8:	dd02      	ble.n	801f7e0 <_dtoa_r+0x1d4>
 801f7da:	2400      	movs	r4, #0
 801f7dc:	3b04      	subs	r3, #4
 801f7de:	9322      	str	r3, [sp, #136]	@ 0x88
 801f7e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f7e2:	1e98      	subs	r0, r3, #2
 801f7e4:	2803      	cmp	r0, #3
 801f7e6:	d867      	bhi.n	801f8b8 <_dtoa_r+0x2ac>
 801f7e8:	f7e0 fcc8 	bl	800017c <__gnu_thumb1_case_uqi>
 801f7ec:	5b383a2b 	.word	0x5b383a2b
 801f7f0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f7f2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f7f4:	18f6      	adds	r6, r6, r3
 801f7f6:	4b68      	ldr	r3, [pc, #416]	@ (801f998 <_dtoa_r+0x38c>)
 801f7f8:	18f2      	adds	r2, r6, r3
 801f7fa:	2a20      	cmp	r2, #32
 801f7fc:	dd0f      	ble.n	801f81e <_dtoa_r+0x212>
 801f7fe:	2340      	movs	r3, #64	@ 0x40
 801f800:	1a9b      	subs	r3, r3, r2
 801f802:	409f      	lsls	r7, r3
 801f804:	4b65      	ldr	r3, [pc, #404]	@ (801f99c <_dtoa_r+0x390>)
 801f806:	0038      	movs	r0, r7
 801f808:	18f3      	adds	r3, r6, r3
 801f80a:	40dc      	lsrs	r4, r3
 801f80c:	4320      	orrs	r0, r4
 801f80e:	f7e3 fe05 	bl	800341c <__aeabi_ui2d>
 801f812:	2201      	movs	r2, #1
 801f814:	4b62      	ldr	r3, [pc, #392]	@ (801f9a0 <_dtoa_r+0x394>)
 801f816:	1e77      	subs	r7, r6, #1
 801f818:	18cb      	adds	r3, r1, r3
 801f81a:	9218      	str	r2, [sp, #96]	@ 0x60
 801f81c:	e776      	b.n	801f70c <_dtoa_r+0x100>
 801f81e:	2320      	movs	r3, #32
 801f820:	0020      	movs	r0, r4
 801f822:	1a9b      	subs	r3, r3, r2
 801f824:	4098      	lsls	r0, r3
 801f826:	e7f2      	b.n	801f80e <_dtoa_r+0x202>
 801f828:	9015      	str	r0, [sp, #84]	@ 0x54
 801f82a:	e7ba      	b.n	801f7a2 <_dtoa_r+0x196>
 801f82c:	920d      	str	r2, [sp, #52]	@ 0x34
 801f82e:	e7c3      	b.n	801f7b8 <_dtoa_r+0x1ac>
 801f830:	9b06      	ldr	r3, [sp, #24]
 801f832:	9a04      	ldr	r2, [sp, #16]
 801f834:	1a9b      	subs	r3, r3, r2
 801f836:	9306      	str	r3, [sp, #24]
 801f838:	4253      	negs	r3, r2
 801f83a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f83c:	2300      	movs	r3, #0
 801f83e:	9314      	str	r3, [sp, #80]	@ 0x50
 801f840:	e7c5      	b.n	801f7ce <_dtoa_r+0x1c2>
 801f842:	2300      	movs	r3, #0
 801f844:	9310      	str	r3, [sp, #64]	@ 0x40
 801f846:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f848:	930e      	str	r3, [sp, #56]	@ 0x38
 801f84a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	dc13      	bgt.n	801f878 <_dtoa_r+0x26c>
 801f850:	2301      	movs	r3, #1
 801f852:	001a      	movs	r2, r3
 801f854:	930e      	str	r3, [sp, #56]	@ 0x38
 801f856:	9309      	str	r3, [sp, #36]	@ 0x24
 801f858:	9223      	str	r2, [sp, #140]	@ 0x8c
 801f85a:	e00d      	b.n	801f878 <_dtoa_r+0x26c>
 801f85c:	2301      	movs	r3, #1
 801f85e:	e7f1      	b.n	801f844 <_dtoa_r+0x238>
 801f860:	2300      	movs	r3, #0
 801f862:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f864:	9310      	str	r3, [sp, #64]	@ 0x40
 801f866:	4694      	mov	ip, r2
 801f868:	9b04      	ldr	r3, [sp, #16]
 801f86a:	4463      	add	r3, ip
 801f86c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f86e:	3301      	adds	r3, #1
 801f870:	9309      	str	r3, [sp, #36]	@ 0x24
 801f872:	2b00      	cmp	r3, #0
 801f874:	dc00      	bgt.n	801f878 <_dtoa_r+0x26c>
 801f876:	2301      	movs	r3, #1
 801f878:	9a03      	ldr	r2, [sp, #12]
 801f87a:	2100      	movs	r1, #0
 801f87c:	69d0      	ldr	r0, [r2, #28]
 801f87e:	2204      	movs	r2, #4
 801f880:	0015      	movs	r5, r2
 801f882:	3514      	adds	r5, #20
 801f884:	429d      	cmp	r5, r3
 801f886:	d91b      	bls.n	801f8c0 <_dtoa_r+0x2b4>
 801f888:	6041      	str	r1, [r0, #4]
 801f88a:	9803      	ldr	r0, [sp, #12]
 801f88c:	f001 f924 	bl	8020ad8 <_Balloc>
 801f890:	9008      	str	r0, [sp, #32]
 801f892:	2800      	cmp	r0, #0
 801f894:	d117      	bne.n	801f8c6 <_dtoa_r+0x2ba>
 801f896:	21b0      	movs	r1, #176	@ 0xb0
 801f898:	4b42      	ldr	r3, [pc, #264]	@ (801f9a4 <_dtoa_r+0x398>)
 801f89a:	482e      	ldr	r0, [pc, #184]	@ (801f954 <_dtoa_r+0x348>)
 801f89c:	9a08      	ldr	r2, [sp, #32]
 801f89e:	31ff      	adds	r1, #255	@ 0xff
 801f8a0:	e6c9      	b.n	801f636 <_dtoa_r+0x2a>
 801f8a2:	2301      	movs	r3, #1
 801f8a4:	e7dd      	b.n	801f862 <_dtoa_r+0x256>
 801f8a6:	2300      	movs	r3, #0
 801f8a8:	9410      	str	r4, [sp, #64]	@ 0x40
 801f8aa:	9322      	str	r3, [sp, #136]	@ 0x88
 801f8ac:	3b01      	subs	r3, #1
 801f8ae:	930e      	str	r3, [sp, #56]	@ 0x38
 801f8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801f8b2:	2200      	movs	r2, #0
 801f8b4:	3313      	adds	r3, #19
 801f8b6:	e7cf      	b.n	801f858 <_dtoa_r+0x24c>
 801f8b8:	2301      	movs	r3, #1
 801f8ba:	9310      	str	r3, [sp, #64]	@ 0x40
 801f8bc:	3b02      	subs	r3, #2
 801f8be:	e7f6      	b.n	801f8ae <_dtoa_r+0x2a2>
 801f8c0:	3101      	adds	r1, #1
 801f8c2:	0052      	lsls	r2, r2, #1
 801f8c4:	e7dc      	b.n	801f880 <_dtoa_r+0x274>
 801f8c6:	9b03      	ldr	r3, [sp, #12]
 801f8c8:	9a08      	ldr	r2, [sp, #32]
 801f8ca:	69db      	ldr	r3, [r3, #28]
 801f8cc:	601a      	str	r2, [r3, #0]
 801f8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8d0:	2b0e      	cmp	r3, #14
 801f8d2:	d900      	bls.n	801f8d6 <_dtoa_r+0x2ca>
 801f8d4:	e0d9      	b.n	801fa8a <_dtoa_r+0x47e>
 801f8d6:	2c00      	cmp	r4, #0
 801f8d8:	d100      	bne.n	801f8dc <_dtoa_r+0x2d0>
 801f8da:	e0d6      	b.n	801fa8a <_dtoa_r+0x47e>
 801f8dc:	9b04      	ldr	r3, [sp, #16]
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	dd64      	ble.n	801f9ac <_dtoa_r+0x3a0>
 801f8e2:	210f      	movs	r1, #15
 801f8e4:	9a04      	ldr	r2, [sp, #16]
 801f8e6:	4b2b      	ldr	r3, [pc, #172]	@ (801f994 <_dtoa_r+0x388>)
 801f8e8:	400a      	ands	r2, r1
 801f8ea:	00d2      	lsls	r2, r2, #3
 801f8ec:	189b      	adds	r3, r3, r2
 801f8ee:	681e      	ldr	r6, [r3, #0]
 801f8f0:	685f      	ldr	r7, [r3, #4]
 801f8f2:	9b04      	ldr	r3, [sp, #16]
 801f8f4:	2402      	movs	r4, #2
 801f8f6:	111d      	asrs	r5, r3, #4
 801f8f8:	05db      	lsls	r3, r3, #23
 801f8fa:	d50a      	bpl.n	801f912 <_dtoa_r+0x306>
 801f8fc:	4b2a      	ldr	r3, [pc, #168]	@ (801f9a8 <_dtoa_r+0x39c>)
 801f8fe:	400d      	ands	r5, r1
 801f900:	6a1a      	ldr	r2, [r3, #32]
 801f902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f904:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f906:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f908:	f7e2 fa54 	bl	8001db4 <__aeabi_ddiv>
 801f90c:	900a      	str	r0, [sp, #40]	@ 0x28
 801f90e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f910:	3401      	adds	r4, #1
 801f912:	4b25      	ldr	r3, [pc, #148]	@ (801f9a8 <_dtoa_r+0x39c>)
 801f914:	930c      	str	r3, [sp, #48]	@ 0x30
 801f916:	2d00      	cmp	r5, #0
 801f918:	d108      	bne.n	801f92c <_dtoa_r+0x320>
 801f91a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f91c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f91e:	0032      	movs	r2, r6
 801f920:	003b      	movs	r3, r7
 801f922:	f7e2 fa47 	bl	8001db4 <__aeabi_ddiv>
 801f926:	900a      	str	r0, [sp, #40]	@ 0x28
 801f928:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f92a:	e05a      	b.n	801f9e2 <_dtoa_r+0x3d6>
 801f92c:	2301      	movs	r3, #1
 801f92e:	421d      	tst	r5, r3
 801f930:	d009      	beq.n	801f946 <_dtoa_r+0x33a>
 801f932:	18e4      	adds	r4, r4, r3
 801f934:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f936:	0030      	movs	r0, r6
 801f938:	681a      	ldr	r2, [r3, #0]
 801f93a:	685b      	ldr	r3, [r3, #4]
 801f93c:	0039      	movs	r1, r7
 801f93e:	f7e2 fe7d 	bl	800263c <__aeabi_dmul>
 801f942:	0006      	movs	r6, r0
 801f944:	000f      	movs	r7, r1
 801f946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f948:	106d      	asrs	r5, r5, #1
 801f94a:	3308      	adds	r3, #8
 801f94c:	e7e2      	b.n	801f914 <_dtoa_r+0x308>
 801f94e:	46c0      	nop			@ (mov r8, r8)
 801f950:	08024772 	.word	0x08024772
 801f954:	08024789 	.word	0x08024789
 801f958:	7ff00000 	.word	0x7ff00000
 801f95c:	0000270f 	.word	0x0000270f
 801f960:	0802476e 	.word	0x0802476e
 801f964:	08024771 	.word	0x08024771
 801f968:	0802473a 	.word	0x0802473a
 801f96c:	08024739 	.word	0x08024739
 801f970:	3ff00000 	.word	0x3ff00000
 801f974:	fffffc01 	.word	0xfffffc01
 801f978:	3ff80000 	.word	0x3ff80000
 801f97c:	636f4361 	.word	0x636f4361
 801f980:	3fd287a7 	.word	0x3fd287a7
 801f984:	8b60c8b3 	.word	0x8b60c8b3
 801f988:	3fc68a28 	.word	0x3fc68a28
 801f98c:	509f79fb 	.word	0x509f79fb
 801f990:	3fd34413 	.word	0x3fd34413
 801f994:	080248e0 	.word	0x080248e0
 801f998:	00000432 	.word	0x00000432
 801f99c:	00000412 	.word	0x00000412
 801f9a0:	fe100000 	.word	0xfe100000
 801f9a4:	080247e1 	.word	0x080247e1
 801f9a8:	080248b8 	.word	0x080248b8
 801f9ac:	9b04      	ldr	r3, [sp, #16]
 801f9ae:	2402      	movs	r4, #2
 801f9b0:	2b00      	cmp	r3, #0
 801f9b2:	d016      	beq.n	801f9e2 <_dtoa_r+0x3d6>
 801f9b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f9b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f9b8:	220f      	movs	r2, #15
 801f9ba:	425d      	negs	r5, r3
 801f9bc:	402a      	ands	r2, r5
 801f9be:	4bd7      	ldr	r3, [pc, #860]	@ (801fd1c <_dtoa_r+0x710>)
 801f9c0:	00d2      	lsls	r2, r2, #3
 801f9c2:	189b      	adds	r3, r3, r2
 801f9c4:	681a      	ldr	r2, [r3, #0]
 801f9c6:	685b      	ldr	r3, [r3, #4]
 801f9c8:	f7e2 fe38 	bl	800263c <__aeabi_dmul>
 801f9cc:	2701      	movs	r7, #1
 801f9ce:	2300      	movs	r3, #0
 801f9d0:	900a      	str	r0, [sp, #40]	@ 0x28
 801f9d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f9d4:	4ed2      	ldr	r6, [pc, #840]	@ (801fd20 <_dtoa_r+0x714>)
 801f9d6:	112d      	asrs	r5, r5, #4
 801f9d8:	2d00      	cmp	r5, #0
 801f9da:	d000      	beq.n	801f9de <_dtoa_r+0x3d2>
 801f9dc:	e0ba      	b.n	801fb54 <_dtoa_r+0x548>
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d1a1      	bne.n	801f926 <_dtoa_r+0x31a>
 801f9e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801f9e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f9e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f9e8:	2b00      	cmp	r3, #0
 801f9ea:	d100      	bne.n	801f9ee <_dtoa_r+0x3e2>
 801f9ec:	e0bd      	b.n	801fb6a <_dtoa_r+0x55e>
 801f9ee:	2200      	movs	r2, #0
 801f9f0:	0030      	movs	r0, r6
 801f9f2:	0039      	movs	r1, r7
 801f9f4:	4bcb      	ldr	r3, [pc, #812]	@ (801fd24 <_dtoa_r+0x718>)
 801f9f6:	f7e0 fd61 	bl	80004bc <__aeabi_dcmplt>
 801f9fa:	2800      	cmp	r0, #0
 801f9fc:	d100      	bne.n	801fa00 <_dtoa_r+0x3f4>
 801f9fe:	e0b4      	b.n	801fb6a <_dtoa_r+0x55e>
 801fa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d100      	bne.n	801fa08 <_dtoa_r+0x3fc>
 801fa06:	e0b0      	b.n	801fb6a <_dtoa_r+0x55e>
 801fa08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	dd39      	ble.n	801fa82 <_dtoa_r+0x476>
 801fa0e:	9b04      	ldr	r3, [sp, #16]
 801fa10:	2200      	movs	r2, #0
 801fa12:	3b01      	subs	r3, #1
 801fa14:	930c      	str	r3, [sp, #48]	@ 0x30
 801fa16:	0030      	movs	r0, r6
 801fa18:	4bc3      	ldr	r3, [pc, #780]	@ (801fd28 <_dtoa_r+0x71c>)
 801fa1a:	0039      	movs	r1, r7
 801fa1c:	f7e2 fe0e 	bl	800263c <__aeabi_dmul>
 801fa20:	900a      	str	r0, [sp, #40]	@ 0x28
 801fa22:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fa24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fa26:	3401      	adds	r4, #1
 801fa28:	0020      	movs	r0, r4
 801fa2a:	9311      	str	r3, [sp, #68]	@ 0x44
 801fa2c:	f7e3 fcc8 	bl	80033c0 <__aeabi_i2d>
 801fa30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fa32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa34:	f7e2 fe02 	bl	800263c <__aeabi_dmul>
 801fa38:	4bbc      	ldr	r3, [pc, #752]	@ (801fd2c <_dtoa_r+0x720>)
 801fa3a:	2200      	movs	r2, #0
 801fa3c:	f7e1 fe56 	bl	80016ec <__aeabi_dadd>
 801fa40:	4bbb      	ldr	r3, [pc, #748]	@ (801fd30 <_dtoa_r+0x724>)
 801fa42:	0006      	movs	r6, r0
 801fa44:	18cf      	adds	r7, r1, r3
 801fa46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d000      	beq.n	801fa4e <_dtoa_r+0x442>
 801fa4c:	e091      	b.n	801fb72 <_dtoa_r+0x566>
 801fa4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fa50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fa52:	2200      	movs	r2, #0
 801fa54:	4bb7      	ldr	r3, [pc, #732]	@ (801fd34 <_dtoa_r+0x728>)
 801fa56:	f7e3 f8b9 	bl	8002bcc <__aeabi_dsub>
 801fa5a:	0032      	movs	r2, r6
 801fa5c:	003b      	movs	r3, r7
 801fa5e:	0004      	movs	r4, r0
 801fa60:	000d      	movs	r5, r1
 801fa62:	f7e0 fd3f 	bl	80004e4 <__aeabi_dcmpgt>
 801fa66:	2800      	cmp	r0, #0
 801fa68:	d000      	beq.n	801fa6c <_dtoa_r+0x460>
 801fa6a:	e29d      	b.n	801ffa8 <_dtoa_r+0x99c>
 801fa6c:	2180      	movs	r1, #128	@ 0x80
 801fa6e:	0609      	lsls	r1, r1, #24
 801fa70:	187b      	adds	r3, r7, r1
 801fa72:	0032      	movs	r2, r6
 801fa74:	0020      	movs	r0, r4
 801fa76:	0029      	movs	r1, r5
 801fa78:	f7e0 fd20 	bl	80004bc <__aeabi_dcmplt>
 801fa7c:	2800      	cmp	r0, #0
 801fa7e:	d000      	beq.n	801fa82 <_dtoa_r+0x476>
 801fa80:	e130      	b.n	801fce4 <_dtoa_r+0x6d8>
 801fa82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fa84:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fa86:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa88:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fa8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	da00      	bge.n	801fa92 <_dtoa_r+0x486>
 801fa90:	e177      	b.n	801fd82 <_dtoa_r+0x776>
 801fa92:	9a04      	ldr	r2, [sp, #16]
 801fa94:	2a0e      	cmp	r2, #14
 801fa96:	dd00      	ble.n	801fa9a <_dtoa_r+0x48e>
 801fa98:	e173      	b.n	801fd82 <_dtoa_r+0x776>
 801fa9a:	4ba0      	ldr	r3, [pc, #640]	@ (801fd1c <_dtoa_r+0x710>)
 801fa9c:	00d2      	lsls	r2, r2, #3
 801fa9e:	189b      	adds	r3, r3, r2
 801faa0:	685c      	ldr	r4, [r3, #4]
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	9306      	str	r3, [sp, #24]
 801faa6:	9407      	str	r4, [sp, #28]
 801faa8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801faaa:	2b00      	cmp	r3, #0
 801faac:	da03      	bge.n	801fab6 <_dtoa_r+0x4aa>
 801faae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	dc00      	bgt.n	801fab6 <_dtoa_r+0x4aa>
 801fab4:	e106      	b.n	801fcc4 <_dtoa_r+0x6b8>
 801fab6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fab8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801faba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fabc:	9d08      	ldr	r5, [sp, #32]
 801fabe:	3b01      	subs	r3, #1
 801fac0:	195b      	adds	r3, r3, r5
 801fac2:	930a      	str	r3, [sp, #40]	@ 0x28
 801fac4:	9a06      	ldr	r2, [sp, #24]
 801fac6:	9b07      	ldr	r3, [sp, #28]
 801fac8:	0030      	movs	r0, r6
 801faca:	0039      	movs	r1, r7
 801facc:	f7e2 f972 	bl	8001db4 <__aeabi_ddiv>
 801fad0:	f7e3 fc3a 	bl	8003348 <__aeabi_d2iz>
 801fad4:	9009      	str	r0, [sp, #36]	@ 0x24
 801fad6:	f7e3 fc73 	bl	80033c0 <__aeabi_i2d>
 801fada:	9a06      	ldr	r2, [sp, #24]
 801fadc:	9b07      	ldr	r3, [sp, #28]
 801fade:	f7e2 fdad 	bl	800263c <__aeabi_dmul>
 801fae2:	0002      	movs	r2, r0
 801fae4:	000b      	movs	r3, r1
 801fae6:	0030      	movs	r0, r6
 801fae8:	0039      	movs	r1, r7
 801faea:	f7e3 f86f 	bl	8002bcc <__aeabi_dsub>
 801faee:	002b      	movs	r3, r5
 801faf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801faf2:	3501      	adds	r5, #1
 801faf4:	3230      	adds	r2, #48	@ 0x30
 801faf6:	701a      	strb	r2, [r3, #0]
 801faf8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fafa:	002c      	movs	r4, r5
 801fafc:	429a      	cmp	r2, r3
 801fafe:	d000      	beq.n	801fb02 <_dtoa_r+0x4f6>
 801fb00:	e131      	b.n	801fd66 <_dtoa_r+0x75a>
 801fb02:	0002      	movs	r2, r0
 801fb04:	000b      	movs	r3, r1
 801fb06:	f7e1 fdf1 	bl	80016ec <__aeabi_dadd>
 801fb0a:	9a06      	ldr	r2, [sp, #24]
 801fb0c:	9b07      	ldr	r3, [sp, #28]
 801fb0e:	0006      	movs	r6, r0
 801fb10:	000f      	movs	r7, r1
 801fb12:	f7e0 fce7 	bl	80004e4 <__aeabi_dcmpgt>
 801fb16:	2800      	cmp	r0, #0
 801fb18:	d000      	beq.n	801fb1c <_dtoa_r+0x510>
 801fb1a:	e10f      	b.n	801fd3c <_dtoa_r+0x730>
 801fb1c:	9a06      	ldr	r2, [sp, #24]
 801fb1e:	9b07      	ldr	r3, [sp, #28]
 801fb20:	0030      	movs	r0, r6
 801fb22:	0039      	movs	r1, r7
 801fb24:	f7e0 fcc4 	bl	80004b0 <__aeabi_dcmpeq>
 801fb28:	2800      	cmp	r0, #0
 801fb2a:	d003      	beq.n	801fb34 <_dtoa_r+0x528>
 801fb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb2e:	07dd      	lsls	r5, r3, #31
 801fb30:	d500      	bpl.n	801fb34 <_dtoa_r+0x528>
 801fb32:	e103      	b.n	801fd3c <_dtoa_r+0x730>
 801fb34:	9905      	ldr	r1, [sp, #20]
 801fb36:	9803      	ldr	r0, [sp, #12]
 801fb38:	f001 f812 	bl	8020b60 <_Bfree>
 801fb3c:	2300      	movs	r3, #0
 801fb3e:	7023      	strb	r3, [r4, #0]
 801fb40:	9b04      	ldr	r3, [sp, #16]
 801fb42:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fb44:	3301      	adds	r3, #1
 801fb46:	6013      	str	r3, [r2, #0]
 801fb48:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d100      	bne.n	801fb50 <_dtoa_r+0x544>
 801fb4e:	e5a7      	b.n	801f6a0 <_dtoa_r+0x94>
 801fb50:	601c      	str	r4, [r3, #0]
 801fb52:	e5a5      	b.n	801f6a0 <_dtoa_r+0x94>
 801fb54:	423d      	tst	r5, r7
 801fb56:	d005      	beq.n	801fb64 <_dtoa_r+0x558>
 801fb58:	6832      	ldr	r2, [r6, #0]
 801fb5a:	6873      	ldr	r3, [r6, #4]
 801fb5c:	f7e2 fd6e 	bl	800263c <__aeabi_dmul>
 801fb60:	003b      	movs	r3, r7
 801fb62:	3401      	adds	r4, #1
 801fb64:	106d      	asrs	r5, r5, #1
 801fb66:	3608      	adds	r6, #8
 801fb68:	e736      	b.n	801f9d8 <_dtoa_r+0x3cc>
 801fb6a:	9b04      	ldr	r3, [sp, #16]
 801fb6c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb70:	e75a      	b.n	801fa28 <_dtoa_r+0x41c>
 801fb72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fb74:	4b69      	ldr	r3, [pc, #420]	@ (801fd1c <_dtoa_r+0x710>)
 801fb76:	3a01      	subs	r2, #1
 801fb78:	00d2      	lsls	r2, r2, #3
 801fb7a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fb7c:	189b      	adds	r3, r3, r2
 801fb7e:	681a      	ldr	r2, [r3, #0]
 801fb80:	685b      	ldr	r3, [r3, #4]
 801fb82:	2900      	cmp	r1, #0
 801fb84:	d04c      	beq.n	801fc20 <_dtoa_r+0x614>
 801fb86:	2000      	movs	r0, #0
 801fb88:	496b      	ldr	r1, [pc, #428]	@ (801fd38 <_dtoa_r+0x72c>)
 801fb8a:	f7e2 f913 	bl	8001db4 <__aeabi_ddiv>
 801fb8e:	0032      	movs	r2, r6
 801fb90:	003b      	movs	r3, r7
 801fb92:	f7e3 f81b 	bl	8002bcc <__aeabi_dsub>
 801fb96:	9a08      	ldr	r2, [sp, #32]
 801fb98:	0006      	movs	r6, r0
 801fb9a:	4694      	mov	ip, r2
 801fb9c:	000f      	movs	r7, r1
 801fb9e:	9b08      	ldr	r3, [sp, #32]
 801fba0:	9316      	str	r3, [sp, #88]	@ 0x58
 801fba2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fba4:	4463      	add	r3, ip
 801fba6:	9311      	str	r3, [sp, #68]	@ 0x44
 801fba8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fbaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fbac:	f7e3 fbcc 	bl	8003348 <__aeabi_d2iz>
 801fbb0:	0005      	movs	r5, r0
 801fbb2:	f7e3 fc05 	bl	80033c0 <__aeabi_i2d>
 801fbb6:	0002      	movs	r2, r0
 801fbb8:	000b      	movs	r3, r1
 801fbba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fbbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fbbe:	f7e3 f805 	bl	8002bcc <__aeabi_dsub>
 801fbc2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fbc4:	3530      	adds	r5, #48	@ 0x30
 801fbc6:	1c5c      	adds	r4, r3, #1
 801fbc8:	701d      	strb	r5, [r3, #0]
 801fbca:	0032      	movs	r2, r6
 801fbcc:	003b      	movs	r3, r7
 801fbce:	900a      	str	r0, [sp, #40]	@ 0x28
 801fbd0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fbd2:	f7e0 fc73 	bl	80004bc <__aeabi_dcmplt>
 801fbd6:	2800      	cmp	r0, #0
 801fbd8:	d16a      	bne.n	801fcb0 <_dtoa_r+0x6a4>
 801fbda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fbdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbde:	2000      	movs	r0, #0
 801fbe0:	4950      	ldr	r1, [pc, #320]	@ (801fd24 <_dtoa_r+0x718>)
 801fbe2:	f7e2 fff3 	bl	8002bcc <__aeabi_dsub>
 801fbe6:	0032      	movs	r2, r6
 801fbe8:	003b      	movs	r3, r7
 801fbea:	f7e0 fc67 	bl	80004bc <__aeabi_dcmplt>
 801fbee:	2800      	cmp	r0, #0
 801fbf0:	d000      	beq.n	801fbf4 <_dtoa_r+0x5e8>
 801fbf2:	e0a5      	b.n	801fd40 <_dtoa_r+0x734>
 801fbf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fbf6:	42a3      	cmp	r3, r4
 801fbf8:	d100      	bne.n	801fbfc <_dtoa_r+0x5f0>
 801fbfa:	e742      	b.n	801fa82 <_dtoa_r+0x476>
 801fbfc:	2200      	movs	r2, #0
 801fbfe:	0030      	movs	r0, r6
 801fc00:	0039      	movs	r1, r7
 801fc02:	4b49      	ldr	r3, [pc, #292]	@ (801fd28 <_dtoa_r+0x71c>)
 801fc04:	f7e2 fd1a 	bl	800263c <__aeabi_dmul>
 801fc08:	2200      	movs	r2, #0
 801fc0a:	0006      	movs	r6, r0
 801fc0c:	000f      	movs	r7, r1
 801fc0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fc10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fc12:	4b45      	ldr	r3, [pc, #276]	@ (801fd28 <_dtoa_r+0x71c>)
 801fc14:	f7e2 fd12 	bl	800263c <__aeabi_dmul>
 801fc18:	9416      	str	r4, [sp, #88]	@ 0x58
 801fc1a:	900a      	str	r0, [sp, #40]	@ 0x28
 801fc1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fc1e:	e7c3      	b.n	801fba8 <_dtoa_r+0x59c>
 801fc20:	0030      	movs	r0, r6
 801fc22:	0039      	movs	r1, r7
 801fc24:	f7e2 fd0a 	bl	800263c <__aeabi_dmul>
 801fc28:	9d08      	ldr	r5, [sp, #32]
 801fc2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fc2c:	002b      	movs	r3, r5
 801fc2e:	4694      	mov	ip, r2
 801fc30:	9016      	str	r0, [sp, #88]	@ 0x58
 801fc32:	9117      	str	r1, [sp, #92]	@ 0x5c
 801fc34:	4463      	add	r3, ip
 801fc36:	9319      	str	r3, [sp, #100]	@ 0x64
 801fc38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fc3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fc3c:	f7e3 fb84 	bl	8003348 <__aeabi_d2iz>
 801fc40:	0004      	movs	r4, r0
 801fc42:	f7e3 fbbd 	bl	80033c0 <__aeabi_i2d>
 801fc46:	000b      	movs	r3, r1
 801fc48:	0002      	movs	r2, r0
 801fc4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fc4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fc4e:	f7e2 ffbd 	bl	8002bcc <__aeabi_dsub>
 801fc52:	3430      	adds	r4, #48	@ 0x30
 801fc54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc56:	702c      	strb	r4, [r5, #0]
 801fc58:	3501      	adds	r5, #1
 801fc5a:	0006      	movs	r6, r0
 801fc5c:	000f      	movs	r7, r1
 801fc5e:	42ab      	cmp	r3, r5
 801fc60:	d129      	bne.n	801fcb6 <_dtoa_r+0x6aa>
 801fc62:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801fc64:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801fc66:	9b08      	ldr	r3, [sp, #32]
 801fc68:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fc6a:	469c      	mov	ip, r3
 801fc6c:	2200      	movs	r2, #0
 801fc6e:	4b32      	ldr	r3, [pc, #200]	@ (801fd38 <_dtoa_r+0x72c>)
 801fc70:	4464      	add	r4, ip
 801fc72:	f7e1 fd3b 	bl	80016ec <__aeabi_dadd>
 801fc76:	0002      	movs	r2, r0
 801fc78:	000b      	movs	r3, r1
 801fc7a:	0030      	movs	r0, r6
 801fc7c:	0039      	movs	r1, r7
 801fc7e:	f7e0 fc31 	bl	80004e4 <__aeabi_dcmpgt>
 801fc82:	2800      	cmp	r0, #0
 801fc84:	d15c      	bne.n	801fd40 <_dtoa_r+0x734>
 801fc86:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fc88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fc8a:	2000      	movs	r0, #0
 801fc8c:	492a      	ldr	r1, [pc, #168]	@ (801fd38 <_dtoa_r+0x72c>)
 801fc8e:	f7e2 ff9d 	bl	8002bcc <__aeabi_dsub>
 801fc92:	0002      	movs	r2, r0
 801fc94:	000b      	movs	r3, r1
 801fc96:	0030      	movs	r0, r6
 801fc98:	0039      	movs	r1, r7
 801fc9a:	f7e0 fc0f 	bl	80004bc <__aeabi_dcmplt>
 801fc9e:	2800      	cmp	r0, #0
 801fca0:	d100      	bne.n	801fca4 <_dtoa_r+0x698>
 801fca2:	e6ee      	b.n	801fa82 <_dtoa_r+0x476>
 801fca4:	0023      	movs	r3, r4
 801fca6:	3c01      	subs	r4, #1
 801fca8:	7822      	ldrb	r2, [r4, #0]
 801fcaa:	2a30      	cmp	r2, #48	@ 0x30
 801fcac:	d0fa      	beq.n	801fca4 <_dtoa_r+0x698>
 801fcae:	001c      	movs	r4, r3
 801fcb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fcb2:	9304      	str	r3, [sp, #16]
 801fcb4:	e73e      	b.n	801fb34 <_dtoa_r+0x528>
 801fcb6:	2200      	movs	r2, #0
 801fcb8:	4b1b      	ldr	r3, [pc, #108]	@ (801fd28 <_dtoa_r+0x71c>)
 801fcba:	f7e2 fcbf 	bl	800263c <__aeabi_dmul>
 801fcbe:	900a      	str	r0, [sp, #40]	@ 0x28
 801fcc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fcc2:	e7b9      	b.n	801fc38 <_dtoa_r+0x62c>
 801fcc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d10c      	bne.n	801fce4 <_dtoa_r+0x6d8>
 801fcca:	9806      	ldr	r0, [sp, #24]
 801fccc:	9907      	ldr	r1, [sp, #28]
 801fcce:	2200      	movs	r2, #0
 801fcd0:	4b18      	ldr	r3, [pc, #96]	@ (801fd34 <_dtoa_r+0x728>)
 801fcd2:	f7e2 fcb3 	bl	800263c <__aeabi_dmul>
 801fcd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fcd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fcda:	f7e0 fc0d 	bl	80004f8 <__aeabi_dcmpge>
 801fcde:	2800      	cmp	r0, #0
 801fce0:	d100      	bne.n	801fce4 <_dtoa_r+0x6d8>
 801fce2:	e164      	b.n	801ffae <_dtoa_r+0x9a2>
 801fce4:	2600      	movs	r6, #0
 801fce6:	0037      	movs	r7, r6
 801fce8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fcea:	9c08      	ldr	r4, [sp, #32]
 801fcec:	43db      	mvns	r3, r3
 801fcee:	930c      	str	r3, [sp, #48]	@ 0x30
 801fcf0:	2300      	movs	r3, #0
 801fcf2:	9304      	str	r3, [sp, #16]
 801fcf4:	0031      	movs	r1, r6
 801fcf6:	9803      	ldr	r0, [sp, #12]
 801fcf8:	f000 ff32 	bl	8020b60 <_Bfree>
 801fcfc:	2f00      	cmp	r7, #0
 801fcfe:	d0d7      	beq.n	801fcb0 <_dtoa_r+0x6a4>
 801fd00:	9b04      	ldr	r3, [sp, #16]
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d005      	beq.n	801fd12 <_dtoa_r+0x706>
 801fd06:	42bb      	cmp	r3, r7
 801fd08:	d003      	beq.n	801fd12 <_dtoa_r+0x706>
 801fd0a:	0019      	movs	r1, r3
 801fd0c:	9803      	ldr	r0, [sp, #12]
 801fd0e:	f000 ff27 	bl	8020b60 <_Bfree>
 801fd12:	0039      	movs	r1, r7
 801fd14:	9803      	ldr	r0, [sp, #12]
 801fd16:	f000 ff23 	bl	8020b60 <_Bfree>
 801fd1a:	e7c9      	b.n	801fcb0 <_dtoa_r+0x6a4>
 801fd1c:	080248e0 	.word	0x080248e0
 801fd20:	080248b8 	.word	0x080248b8
 801fd24:	3ff00000 	.word	0x3ff00000
 801fd28:	40240000 	.word	0x40240000
 801fd2c:	401c0000 	.word	0x401c0000
 801fd30:	fcc00000 	.word	0xfcc00000
 801fd34:	40140000 	.word	0x40140000
 801fd38:	3fe00000 	.word	0x3fe00000
 801fd3c:	9b04      	ldr	r3, [sp, #16]
 801fd3e:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd40:	0023      	movs	r3, r4
 801fd42:	001c      	movs	r4, r3
 801fd44:	3b01      	subs	r3, #1
 801fd46:	781a      	ldrb	r2, [r3, #0]
 801fd48:	2a39      	cmp	r2, #57	@ 0x39
 801fd4a:	d108      	bne.n	801fd5e <_dtoa_r+0x752>
 801fd4c:	9a08      	ldr	r2, [sp, #32]
 801fd4e:	429a      	cmp	r2, r3
 801fd50:	d1f7      	bne.n	801fd42 <_dtoa_r+0x736>
 801fd52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fd54:	9908      	ldr	r1, [sp, #32]
 801fd56:	3201      	adds	r2, #1
 801fd58:	920c      	str	r2, [sp, #48]	@ 0x30
 801fd5a:	2230      	movs	r2, #48	@ 0x30
 801fd5c:	700a      	strb	r2, [r1, #0]
 801fd5e:	781a      	ldrb	r2, [r3, #0]
 801fd60:	3201      	adds	r2, #1
 801fd62:	701a      	strb	r2, [r3, #0]
 801fd64:	e7a4      	b.n	801fcb0 <_dtoa_r+0x6a4>
 801fd66:	2200      	movs	r2, #0
 801fd68:	4bc6      	ldr	r3, [pc, #792]	@ (8020084 <_dtoa_r+0xa78>)
 801fd6a:	f7e2 fc67 	bl	800263c <__aeabi_dmul>
 801fd6e:	2200      	movs	r2, #0
 801fd70:	2300      	movs	r3, #0
 801fd72:	0006      	movs	r6, r0
 801fd74:	000f      	movs	r7, r1
 801fd76:	f7e0 fb9b 	bl	80004b0 <__aeabi_dcmpeq>
 801fd7a:	2800      	cmp	r0, #0
 801fd7c:	d100      	bne.n	801fd80 <_dtoa_r+0x774>
 801fd7e:	e6a1      	b.n	801fac4 <_dtoa_r+0x4b8>
 801fd80:	e6d8      	b.n	801fb34 <_dtoa_r+0x528>
 801fd82:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801fd84:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801fd86:	9c06      	ldr	r4, [sp, #24]
 801fd88:	2f00      	cmp	r7, #0
 801fd8a:	d014      	beq.n	801fdb6 <_dtoa_r+0x7aa>
 801fd8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801fd8e:	2a01      	cmp	r2, #1
 801fd90:	dd00      	ble.n	801fd94 <_dtoa_r+0x788>
 801fd92:	e0c8      	b.n	801ff26 <_dtoa_r+0x91a>
 801fd94:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fd96:	2a00      	cmp	r2, #0
 801fd98:	d100      	bne.n	801fd9c <_dtoa_r+0x790>
 801fd9a:	e0be      	b.n	801ff1a <_dtoa_r+0x90e>
 801fd9c:	4aba      	ldr	r2, [pc, #744]	@ (8020088 <_dtoa_r+0xa7c>)
 801fd9e:	189b      	adds	r3, r3, r2
 801fda0:	9a06      	ldr	r2, [sp, #24]
 801fda2:	2101      	movs	r1, #1
 801fda4:	18d2      	adds	r2, r2, r3
 801fda6:	9206      	str	r2, [sp, #24]
 801fda8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fdaa:	9803      	ldr	r0, [sp, #12]
 801fdac:	18d3      	adds	r3, r2, r3
 801fdae:	930d      	str	r3, [sp, #52]	@ 0x34
 801fdb0:	f000 ffda 	bl	8020d68 <__i2b>
 801fdb4:	0007      	movs	r7, r0
 801fdb6:	2c00      	cmp	r4, #0
 801fdb8:	d00e      	beq.n	801fdd8 <_dtoa_r+0x7cc>
 801fdba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fdbc:	2b00      	cmp	r3, #0
 801fdbe:	dd0b      	ble.n	801fdd8 <_dtoa_r+0x7cc>
 801fdc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fdc2:	0023      	movs	r3, r4
 801fdc4:	4294      	cmp	r4, r2
 801fdc6:	dd00      	ble.n	801fdca <_dtoa_r+0x7be>
 801fdc8:	0013      	movs	r3, r2
 801fdca:	9a06      	ldr	r2, [sp, #24]
 801fdcc:	1ae4      	subs	r4, r4, r3
 801fdce:	1ad2      	subs	r2, r2, r3
 801fdd0:	9206      	str	r2, [sp, #24]
 801fdd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fdd4:	1ad3      	subs	r3, r2, r3
 801fdd6:	930d      	str	r3, [sp, #52]	@ 0x34
 801fdd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d01f      	beq.n	801fe1e <_dtoa_r+0x812>
 801fdde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d100      	bne.n	801fde6 <_dtoa_r+0x7da>
 801fde4:	e0b5      	b.n	801ff52 <_dtoa_r+0x946>
 801fde6:	2d00      	cmp	r5, #0
 801fde8:	d010      	beq.n	801fe0c <_dtoa_r+0x800>
 801fdea:	0039      	movs	r1, r7
 801fdec:	002a      	movs	r2, r5
 801fdee:	9803      	ldr	r0, [sp, #12]
 801fdf0:	f001 f884 	bl	8020efc <__pow5mult>
 801fdf4:	9a05      	ldr	r2, [sp, #20]
 801fdf6:	0001      	movs	r1, r0
 801fdf8:	0007      	movs	r7, r0
 801fdfa:	9803      	ldr	r0, [sp, #12]
 801fdfc:	f000 ffcc 	bl	8020d98 <__multiply>
 801fe00:	0006      	movs	r6, r0
 801fe02:	9905      	ldr	r1, [sp, #20]
 801fe04:	9803      	ldr	r0, [sp, #12]
 801fe06:	f000 feab 	bl	8020b60 <_Bfree>
 801fe0a:	9605      	str	r6, [sp, #20]
 801fe0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fe0e:	1b5a      	subs	r2, r3, r5
 801fe10:	42ab      	cmp	r3, r5
 801fe12:	d004      	beq.n	801fe1e <_dtoa_r+0x812>
 801fe14:	9905      	ldr	r1, [sp, #20]
 801fe16:	9803      	ldr	r0, [sp, #12]
 801fe18:	f001 f870 	bl	8020efc <__pow5mult>
 801fe1c:	9005      	str	r0, [sp, #20]
 801fe1e:	2101      	movs	r1, #1
 801fe20:	9803      	ldr	r0, [sp, #12]
 801fe22:	f000 ffa1 	bl	8020d68 <__i2b>
 801fe26:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fe28:	0006      	movs	r6, r0
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d100      	bne.n	801fe30 <_dtoa_r+0x824>
 801fe2e:	e1bc      	b.n	80201aa <_dtoa_r+0xb9e>
 801fe30:	001a      	movs	r2, r3
 801fe32:	0001      	movs	r1, r0
 801fe34:	9803      	ldr	r0, [sp, #12]
 801fe36:	f001 f861 	bl	8020efc <__pow5mult>
 801fe3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fe3c:	0006      	movs	r6, r0
 801fe3e:	2500      	movs	r5, #0
 801fe40:	2b01      	cmp	r3, #1
 801fe42:	dc16      	bgt.n	801fe72 <_dtoa_r+0x866>
 801fe44:	2500      	movs	r5, #0
 801fe46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fe48:	42ab      	cmp	r3, r5
 801fe4a:	d10e      	bne.n	801fe6a <_dtoa_r+0x85e>
 801fe4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fe4e:	031b      	lsls	r3, r3, #12
 801fe50:	42ab      	cmp	r3, r5
 801fe52:	d10a      	bne.n	801fe6a <_dtoa_r+0x85e>
 801fe54:	4b8d      	ldr	r3, [pc, #564]	@ (802008c <_dtoa_r+0xa80>)
 801fe56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fe58:	4213      	tst	r3, r2
 801fe5a:	d006      	beq.n	801fe6a <_dtoa_r+0x85e>
 801fe5c:	9b06      	ldr	r3, [sp, #24]
 801fe5e:	3501      	adds	r5, #1
 801fe60:	3301      	adds	r3, #1
 801fe62:	9306      	str	r3, [sp, #24]
 801fe64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe66:	3301      	adds	r3, #1
 801fe68:	930d      	str	r3, [sp, #52]	@ 0x34
 801fe6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fe6c:	2001      	movs	r0, #1
 801fe6e:	2b00      	cmp	r3, #0
 801fe70:	d008      	beq.n	801fe84 <_dtoa_r+0x878>
 801fe72:	6933      	ldr	r3, [r6, #16]
 801fe74:	3303      	adds	r3, #3
 801fe76:	009b      	lsls	r3, r3, #2
 801fe78:	18f3      	adds	r3, r6, r3
 801fe7a:	6858      	ldr	r0, [r3, #4]
 801fe7c:	f000 ff24 	bl	8020cc8 <__hi0bits>
 801fe80:	2320      	movs	r3, #32
 801fe82:	1a18      	subs	r0, r3, r0
 801fe84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fe86:	1818      	adds	r0, r3, r0
 801fe88:	0002      	movs	r2, r0
 801fe8a:	231f      	movs	r3, #31
 801fe8c:	401a      	ands	r2, r3
 801fe8e:	4218      	tst	r0, r3
 801fe90:	d065      	beq.n	801ff5e <_dtoa_r+0x952>
 801fe92:	3301      	adds	r3, #1
 801fe94:	1a9b      	subs	r3, r3, r2
 801fe96:	2b04      	cmp	r3, #4
 801fe98:	dd5d      	ble.n	801ff56 <_dtoa_r+0x94a>
 801fe9a:	231c      	movs	r3, #28
 801fe9c:	1a9b      	subs	r3, r3, r2
 801fe9e:	9a06      	ldr	r2, [sp, #24]
 801fea0:	18e4      	adds	r4, r4, r3
 801fea2:	18d2      	adds	r2, r2, r3
 801fea4:	9206      	str	r2, [sp, #24]
 801fea6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fea8:	18d3      	adds	r3, r2, r3
 801feaa:	930d      	str	r3, [sp, #52]	@ 0x34
 801feac:	9b06      	ldr	r3, [sp, #24]
 801feae:	2b00      	cmp	r3, #0
 801feb0:	dd05      	ble.n	801febe <_dtoa_r+0x8b2>
 801feb2:	001a      	movs	r2, r3
 801feb4:	9905      	ldr	r1, [sp, #20]
 801feb6:	9803      	ldr	r0, [sp, #12]
 801feb8:	f001 f87c 	bl	8020fb4 <__lshift>
 801febc:	9005      	str	r0, [sp, #20]
 801febe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	dd05      	ble.n	801fed0 <_dtoa_r+0x8c4>
 801fec4:	0031      	movs	r1, r6
 801fec6:	001a      	movs	r2, r3
 801fec8:	9803      	ldr	r0, [sp, #12]
 801feca:	f001 f873 	bl	8020fb4 <__lshift>
 801fece:	0006      	movs	r6, r0
 801fed0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d045      	beq.n	801ff62 <_dtoa_r+0x956>
 801fed6:	0031      	movs	r1, r6
 801fed8:	9805      	ldr	r0, [sp, #20]
 801feda:	f001 f8d7 	bl	802108c <__mcmp>
 801fede:	2800      	cmp	r0, #0
 801fee0:	da3f      	bge.n	801ff62 <_dtoa_r+0x956>
 801fee2:	9b04      	ldr	r3, [sp, #16]
 801fee4:	220a      	movs	r2, #10
 801fee6:	3b01      	subs	r3, #1
 801fee8:	930c      	str	r3, [sp, #48]	@ 0x30
 801feea:	9905      	ldr	r1, [sp, #20]
 801feec:	2300      	movs	r3, #0
 801feee:	9803      	ldr	r0, [sp, #12]
 801fef0:	f000 fe5a 	bl	8020ba8 <__multadd>
 801fef4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fef6:	9005      	str	r0, [sp, #20]
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d100      	bne.n	801fefe <_dtoa_r+0x8f2>
 801fefc:	e15c      	b.n	80201b8 <_dtoa_r+0xbac>
 801fefe:	2300      	movs	r3, #0
 801ff00:	0039      	movs	r1, r7
 801ff02:	220a      	movs	r2, #10
 801ff04:	9803      	ldr	r0, [sp, #12]
 801ff06:	f000 fe4f 	bl	8020ba8 <__multadd>
 801ff0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff0c:	0007      	movs	r7, r0
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	dc55      	bgt.n	801ffbe <_dtoa_r+0x9b2>
 801ff12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ff14:	2b02      	cmp	r3, #2
 801ff16:	dc2d      	bgt.n	801ff74 <_dtoa_r+0x968>
 801ff18:	e051      	b.n	801ffbe <_dtoa_r+0x9b2>
 801ff1a:	2336      	movs	r3, #54	@ 0x36
 801ff1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ff1e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801ff20:	9c06      	ldr	r4, [sp, #24]
 801ff22:	1a9b      	subs	r3, r3, r2
 801ff24:	e73c      	b.n	801fda0 <_dtoa_r+0x794>
 801ff26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff28:	1e5d      	subs	r5, r3, #1
 801ff2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff2c:	42ab      	cmp	r3, r5
 801ff2e:	db08      	blt.n	801ff42 <_dtoa_r+0x936>
 801ff30:	1b5d      	subs	r5, r3, r5
 801ff32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff34:	9c06      	ldr	r4, [sp, #24]
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	db00      	blt.n	801ff3c <_dtoa_r+0x930>
 801ff3a:	e731      	b.n	801fda0 <_dtoa_r+0x794>
 801ff3c:	1ae4      	subs	r4, r4, r3
 801ff3e:	2300      	movs	r3, #0
 801ff40:	e72e      	b.n	801fda0 <_dtoa_r+0x794>
 801ff42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff44:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ff46:	1aeb      	subs	r3, r5, r3
 801ff48:	18d3      	adds	r3, r2, r3
 801ff4a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801ff4c:	9314      	str	r3, [sp, #80]	@ 0x50
 801ff4e:	2500      	movs	r5, #0
 801ff50:	e7ef      	b.n	801ff32 <_dtoa_r+0x926>
 801ff52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ff54:	e75e      	b.n	801fe14 <_dtoa_r+0x808>
 801ff56:	2b04      	cmp	r3, #4
 801ff58:	d0a8      	beq.n	801feac <_dtoa_r+0x8a0>
 801ff5a:	331c      	adds	r3, #28
 801ff5c:	e79f      	b.n	801fe9e <_dtoa_r+0x892>
 801ff5e:	0013      	movs	r3, r2
 801ff60:	e7fb      	b.n	801ff5a <_dtoa_r+0x94e>
 801ff62:	9b04      	ldr	r3, [sp, #16]
 801ff64:	930c      	str	r3, [sp, #48]	@ 0x30
 801ff66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff68:	930e      	str	r3, [sp, #56]	@ 0x38
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	dc23      	bgt.n	801ffb6 <_dtoa_r+0x9aa>
 801ff6e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ff70:	2b02      	cmp	r3, #2
 801ff72:	dd20      	ble.n	801ffb6 <_dtoa_r+0x9aa>
 801ff74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d000      	beq.n	801ff7c <_dtoa_r+0x970>
 801ff7a:	e6b5      	b.n	801fce8 <_dtoa_r+0x6dc>
 801ff7c:	0031      	movs	r1, r6
 801ff7e:	2205      	movs	r2, #5
 801ff80:	9803      	ldr	r0, [sp, #12]
 801ff82:	f000 fe11 	bl	8020ba8 <__multadd>
 801ff86:	0006      	movs	r6, r0
 801ff88:	0001      	movs	r1, r0
 801ff8a:	9805      	ldr	r0, [sp, #20]
 801ff8c:	f001 f87e 	bl	802108c <__mcmp>
 801ff90:	2800      	cmp	r0, #0
 801ff92:	dc00      	bgt.n	801ff96 <_dtoa_r+0x98a>
 801ff94:	e6a8      	b.n	801fce8 <_dtoa_r+0x6dc>
 801ff96:	9b08      	ldr	r3, [sp, #32]
 801ff98:	9a08      	ldr	r2, [sp, #32]
 801ff9a:	1c5c      	adds	r4, r3, #1
 801ff9c:	2331      	movs	r3, #49	@ 0x31
 801ff9e:	7013      	strb	r3, [r2, #0]
 801ffa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ffa2:	3301      	adds	r3, #1
 801ffa4:	930c      	str	r3, [sp, #48]	@ 0x30
 801ffa6:	e6a3      	b.n	801fcf0 <_dtoa_r+0x6e4>
 801ffa8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801ffaa:	0037      	movs	r7, r6
 801ffac:	e7f3      	b.n	801ff96 <_dtoa_r+0x98a>
 801ffae:	9b04      	ldr	r3, [sp, #16]
 801ffb0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801ffb2:	930c      	str	r3, [sp, #48]	@ 0x30
 801ffb4:	e7f9      	b.n	801ffaa <_dtoa_r+0x99e>
 801ffb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d100      	bne.n	801ffbe <_dtoa_r+0x9b2>
 801ffbc:	e100      	b.n	80201c0 <_dtoa_r+0xbb4>
 801ffbe:	2c00      	cmp	r4, #0
 801ffc0:	dd05      	ble.n	801ffce <_dtoa_r+0x9c2>
 801ffc2:	0039      	movs	r1, r7
 801ffc4:	0022      	movs	r2, r4
 801ffc6:	9803      	ldr	r0, [sp, #12]
 801ffc8:	f000 fff4 	bl	8020fb4 <__lshift>
 801ffcc:	0007      	movs	r7, r0
 801ffce:	0038      	movs	r0, r7
 801ffd0:	2d00      	cmp	r5, #0
 801ffd2:	d018      	beq.n	8020006 <_dtoa_r+0x9fa>
 801ffd4:	6879      	ldr	r1, [r7, #4]
 801ffd6:	9803      	ldr	r0, [sp, #12]
 801ffd8:	f000 fd7e 	bl	8020ad8 <_Balloc>
 801ffdc:	1e04      	subs	r4, r0, #0
 801ffde:	d105      	bne.n	801ffec <_dtoa_r+0x9e0>
 801ffe0:	0022      	movs	r2, r4
 801ffe2:	4b2b      	ldr	r3, [pc, #172]	@ (8020090 <_dtoa_r+0xa84>)
 801ffe4:	482b      	ldr	r0, [pc, #172]	@ (8020094 <_dtoa_r+0xa88>)
 801ffe6:	492c      	ldr	r1, [pc, #176]	@ (8020098 <_dtoa_r+0xa8c>)
 801ffe8:	f7ff fb25 	bl	801f636 <_dtoa_r+0x2a>
 801ffec:	0039      	movs	r1, r7
 801ffee:	693a      	ldr	r2, [r7, #16]
 801fff0:	310c      	adds	r1, #12
 801fff2:	3202      	adds	r2, #2
 801fff4:	0092      	lsls	r2, r2, #2
 801fff6:	300c      	adds	r0, #12
 801fff8:	f7ff fa6a 	bl	801f4d0 <memcpy>
 801fffc:	2201      	movs	r2, #1
 801fffe:	0021      	movs	r1, r4
 8020000:	9803      	ldr	r0, [sp, #12]
 8020002:	f000 ffd7 	bl	8020fb4 <__lshift>
 8020006:	9b08      	ldr	r3, [sp, #32]
 8020008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802000a:	9306      	str	r3, [sp, #24]
 802000c:	3b01      	subs	r3, #1
 802000e:	189b      	adds	r3, r3, r2
 8020010:	2201      	movs	r2, #1
 8020012:	9704      	str	r7, [sp, #16]
 8020014:	0007      	movs	r7, r0
 8020016:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802001a:	4013      	ands	r3, r2
 802001c:	930e      	str	r3, [sp, #56]	@ 0x38
 802001e:	0031      	movs	r1, r6
 8020020:	9805      	ldr	r0, [sp, #20]
 8020022:	f7ff fa65 	bl	801f4f0 <quorem>
 8020026:	9904      	ldr	r1, [sp, #16]
 8020028:	0005      	movs	r5, r0
 802002a:	900a      	str	r0, [sp, #40]	@ 0x28
 802002c:	9805      	ldr	r0, [sp, #20]
 802002e:	f001 f82d 	bl	802108c <__mcmp>
 8020032:	003a      	movs	r2, r7
 8020034:	900d      	str	r0, [sp, #52]	@ 0x34
 8020036:	0031      	movs	r1, r6
 8020038:	9803      	ldr	r0, [sp, #12]
 802003a:	f001 f843 	bl	80210c4 <__mdiff>
 802003e:	2201      	movs	r2, #1
 8020040:	68c3      	ldr	r3, [r0, #12]
 8020042:	0004      	movs	r4, r0
 8020044:	3530      	adds	r5, #48	@ 0x30
 8020046:	9209      	str	r2, [sp, #36]	@ 0x24
 8020048:	2b00      	cmp	r3, #0
 802004a:	d104      	bne.n	8020056 <_dtoa_r+0xa4a>
 802004c:	0001      	movs	r1, r0
 802004e:	9805      	ldr	r0, [sp, #20]
 8020050:	f001 f81c 	bl	802108c <__mcmp>
 8020054:	9009      	str	r0, [sp, #36]	@ 0x24
 8020056:	0021      	movs	r1, r4
 8020058:	9803      	ldr	r0, [sp, #12]
 802005a:	f000 fd81 	bl	8020b60 <_Bfree>
 802005e:	9b06      	ldr	r3, [sp, #24]
 8020060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020062:	1c5c      	adds	r4, r3, #1
 8020064:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020066:	4313      	orrs	r3, r2
 8020068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802006a:	4313      	orrs	r3, r2
 802006c:	d116      	bne.n	802009c <_dtoa_r+0xa90>
 802006e:	2d39      	cmp	r5, #57	@ 0x39
 8020070:	d02f      	beq.n	80200d2 <_dtoa_r+0xac6>
 8020072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020074:	2b00      	cmp	r3, #0
 8020076:	dd01      	ble.n	802007c <_dtoa_r+0xa70>
 8020078:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802007a:	3531      	adds	r5, #49	@ 0x31
 802007c:	9b06      	ldr	r3, [sp, #24]
 802007e:	701d      	strb	r5, [r3, #0]
 8020080:	e638      	b.n	801fcf4 <_dtoa_r+0x6e8>
 8020082:	46c0      	nop			@ (mov r8, r8)
 8020084:	40240000 	.word	0x40240000
 8020088:	00000433 	.word	0x00000433
 802008c:	7ff00000 	.word	0x7ff00000
 8020090:	080247e1 	.word	0x080247e1
 8020094:	08024789 	.word	0x08024789
 8020098:	000002ef 	.word	0x000002ef
 802009c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802009e:	2b00      	cmp	r3, #0
 80200a0:	db04      	blt.n	80200ac <_dtoa_r+0xaa0>
 80200a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80200a4:	4313      	orrs	r3, r2
 80200a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80200a8:	4313      	orrs	r3, r2
 80200aa:	d11e      	bne.n	80200ea <_dtoa_r+0xade>
 80200ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	dde4      	ble.n	802007c <_dtoa_r+0xa70>
 80200b2:	9905      	ldr	r1, [sp, #20]
 80200b4:	2201      	movs	r2, #1
 80200b6:	9803      	ldr	r0, [sp, #12]
 80200b8:	f000 ff7c 	bl	8020fb4 <__lshift>
 80200bc:	0031      	movs	r1, r6
 80200be:	9005      	str	r0, [sp, #20]
 80200c0:	f000 ffe4 	bl	802108c <__mcmp>
 80200c4:	2800      	cmp	r0, #0
 80200c6:	dc02      	bgt.n	80200ce <_dtoa_r+0xac2>
 80200c8:	d1d8      	bne.n	802007c <_dtoa_r+0xa70>
 80200ca:	07eb      	lsls	r3, r5, #31
 80200cc:	d5d6      	bpl.n	802007c <_dtoa_r+0xa70>
 80200ce:	2d39      	cmp	r5, #57	@ 0x39
 80200d0:	d1d2      	bne.n	8020078 <_dtoa_r+0xa6c>
 80200d2:	2339      	movs	r3, #57	@ 0x39
 80200d4:	9a06      	ldr	r2, [sp, #24]
 80200d6:	7013      	strb	r3, [r2, #0]
 80200d8:	0023      	movs	r3, r4
 80200da:	001c      	movs	r4, r3
 80200dc:	3b01      	subs	r3, #1
 80200de:	781a      	ldrb	r2, [r3, #0]
 80200e0:	2a39      	cmp	r2, #57	@ 0x39
 80200e2:	d04f      	beq.n	8020184 <_dtoa_r+0xb78>
 80200e4:	3201      	adds	r2, #1
 80200e6:	701a      	strb	r2, [r3, #0]
 80200e8:	e604      	b.n	801fcf4 <_dtoa_r+0x6e8>
 80200ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	dd03      	ble.n	80200f8 <_dtoa_r+0xaec>
 80200f0:	2d39      	cmp	r5, #57	@ 0x39
 80200f2:	d0ee      	beq.n	80200d2 <_dtoa_r+0xac6>
 80200f4:	3501      	adds	r5, #1
 80200f6:	e7c1      	b.n	802007c <_dtoa_r+0xa70>
 80200f8:	9b06      	ldr	r3, [sp, #24]
 80200fa:	9a06      	ldr	r2, [sp, #24]
 80200fc:	701d      	strb	r5, [r3, #0]
 80200fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020100:	4293      	cmp	r3, r2
 8020102:	d02a      	beq.n	802015a <_dtoa_r+0xb4e>
 8020104:	2300      	movs	r3, #0
 8020106:	220a      	movs	r2, #10
 8020108:	9905      	ldr	r1, [sp, #20]
 802010a:	9803      	ldr	r0, [sp, #12]
 802010c:	f000 fd4c 	bl	8020ba8 <__multadd>
 8020110:	9b04      	ldr	r3, [sp, #16]
 8020112:	9005      	str	r0, [sp, #20]
 8020114:	42bb      	cmp	r3, r7
 8020116:	d109      	bne.n	802012c <_dtoa_r+0xb20>
 8020118:	2300      	movs	r3, #0
 802011a:	220a      	movs	r2, #10
 802011c:	9904      	ldr	r1, [sp, #16]
 802011e:	9803      	ldr	r0, [sp, #12]
 8020120:	f000 fd42 	bl	8020ba8 <__multadd>
 8020124:	9004      	str	r0, [sp, #16]
 8020126:	0007      	movs	r7, r0
 8020128:	9406      	str	r4, [sp, #24]
 802012a:	e778      	b.n	802001e <_dtoa_r+0xa12>
 802012c:	9904      	ldr	r1, [sp, #16]
 802012e:	2300      	movs	r3, #0
 8020130:	220a      	movs	r2, #10
 8020132:	9803      	ldr	r0, [sp, #12]
 8020134:	f000 fd38 	bl	8020ba8 <__multadd>
 8020138:	2300      	movs	r3, #0
 802013a:	9004      	str	r0, [sp, #16]
 802013c:	220a      	movs	r2, #10
 802013e:	0039      	movs	r1, r7
 8020140:	9803      	ldr	r0, [sp, #12]
 8020142:	f000 fd31 	bl	8020ba8 <__multadd>
 8020146:	e7ee      	b.n	8020126 <_dtoa_r+0xb1a>
 8020148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802014a:	2401      	movs	r4, #1
 802014c:	2b00      	cmp	r3, #0
 802014e:	dd00      	ble.n	8020152 <_dtoa_r+0xb46>
 8020150:	001c      	movs	r4, r3
 8020152:	9b08      	ldr	r3, [sp, #32]
 8020154:	191c      	adds	r4, r3, r4
 8020156:	2300      	movs	r3, #0
 8020158:	9304      	str	r3, [sp, #16]
 802015a:	9905      	ldr	r1, [sp, #20]
 802015c:	2201      	movs	r2, #1
 802015e:	9803      	ldr	r0, [sp, #12]
 8020160:	f000 ff28 	bl	8020fb4 <__lshift>
 8020164:	0031      	movs	r1, r6
 8020166:	9005      	str	r0, [sp, #20]
 8020168:	f000 ff90 	bl	802108c <__mcmp>
 802016c:	2800      	cmp	r0, #0
 802016e:	dcb3      	bgt.n	80200d8 <_dtoa_r+0xacc>
 8020170:	d101      	bne.n	8020176 <_dtoa_r+0xb6a>
 8020172:	07ed      	lsls	r5, r5, #31
 8020174:	d4b0      	bmi.n	80200d8 <_dtoa_r+0xacc>
 8020176:	0023      	movs	r3, r4
 8020178:	001c      	movs	r4, r3
 802017a:	3b01      	subs	r3, #1
 802017c:	781a      	ldrb	r2, [r3, #0]
 802017e:	2a30      	cmp	r2, #48	@ 0x30
 8020180:	d0fa      	beq.n	8020178 <_dtoa_r+0xb6c>
 8020182:	e5b7      	b.n	801fcf4 <_dtoa_r+0x6e8>
 8020184:	9a08      	ldr	r2, [sp, #32]
 8020186:	429a      	cmp	r2, r3
 8020188:	d1a7      	bne.n	80200da <_dtoa_r+0xace>
 802018a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802018c:	3301      	adds	r3, #1
 802018e:	930c      	str	r3, [sp, #48]	@ 0x30
 8020190:	2331      	movs	r3, #49	@ 0x31
 8020192:	7013      	strb	r3, [r2, #0]
 8020194:	e5ae      	b.n	801fcf4 <_dtoa_r+0x6e8>
 8020196:	4b15      	ldr	r3, [pc, #84]	@ (80201ec <_dtoa_r+0xbe0>)
 8020198:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802019a:	9308      	str	r3, [sp, #32]
 802019c:	4b14      	ldr	r3, [pc, #80]	@ (80201f0 <_dtoa_r+0xbe4>)
 802019e:	2a00      	cmp	r2, #0
 80201a0:	d001      	beq.n	80201a6 <_dtoa_r+0xb9a>
 80201a2:	f7ff fa7b 	bl	801f69c <_dtoa_r+0x90>
 80201a6:	f7ff fa7b 	bl	801f6a0 <_dtoa_r+0x94>
 80201aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80201ac:	2b01      	cmp	r3, #1
 80201ae:	dc00      	bgt.n	80201b2 <_dtoa_r+0xba6>
 80201b0:	e648      	b.n	801fe44 <_dtoa_r+0x838>
 80201b2:	2001      	movs	r0, #1
 80201b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80201b6:	e665      	b.n	801fe84 <_dtoa_r+0x878>
 80201b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	dc00      	bgt.n	80201c0 <_dtoa_r+0xbb4>
 80201be:	e6d6      	b.n	801ff6e <_dtoa_r+0x962>
 80201c0:	2400      	movs	r4, #0
 80201c2:	0031      	movs	r1, r6
 80201c4:	9805      	ldr	r0, [sp, #20]
 80201c6:	f7ff f993 	bl	801f4f0 <quorem>
 80201ca:	9b08      	ldr	r3, [sp, #32]
 80201cc:	3030      	adds	r0, #48	@ 0x30
 80201ce:	5518      	strb	r0, [r3, r4]
 80201d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201d2:	3401      	adds	r4, #1
 80201d4:	0005      	movs	r5, r0
 80201d6:	429c      	cmp	r4, r3
 80201d8:	dab6      	bge.n	8020148 <_dtoa_r+0xb3c>
 80201da:	2300      	movs	r3, #0
 80201dc:	220a      	movs	r2, #10
 80201de:	9905      	ldr	r1, [sp, #20]
 80201e0:	9803      	ldr	r0, [sp, #12]
 80201e2:	f000 fce1 	bl	8020ba8 <__multadd>
 80201e6:	9005      	str	r0, [sp, #20]
 80201e8:	e7eb      	b.n	80201c2 <_dtoa_r+0xbb6>
 80201ea:	46c0      	nop			@ (mov r8, r8)
 80201ec:	08024765 	.word	0x08024765
 80201f0:	0802476d 	.word	0x0802476d

080201f4 <_free_r>:
 80201f4:	b570      	push	{r4, r5, r6, lr}
 80201f6:	0005      	movs	r5, r0
 80201f8:	1e0c      	subs	r4, r1, #0
 80201fa:	d010      	beq.n	802021e <_free_r+0x2a>
 80201fc:	3c04      	subs	r4, #4
 80201fe:	6823      	ldr	r3, [r4, #0]
 8020200:	2b00      	cmp	r3, #0
 8020202:	da00      	bge.n	8020206 <_free_r+0x12>
 8020204:	18e4      	adds	r4, r4, r3
 8020206:	0028      	movs	r0, r5
 8020208:	f000 fc56 	bl	8020ab8 <__malloc_lock>
 802020c:	4a1d      	ldr	r2, [pc, #116]	@ (8020284 <_free_r+0x90>)
 802020e:	6813      	ldr	r3, [r2, #0]
 8020210:	2b00      	cmp	r3, #0
 8020212:	d105      	bne.n	8020220 <_free_r+0x2c>
 8020214:	6063      	str	r3, [r4, #4]
 8020216:	6014      	str	r4, [r2, #0]
 8020218:	0028      	movs	r0, r5
 802021a:	f000 fc55 	bl	8020ac8 <__malloc_unlock>
 802021e:	bd70      	pop	{r4, r5, r6, pc}
 8020220:	42a3      	cmp	r3, r4
 8020222:	d908      	bls.n	8020236 <_free_r+0x42>
 8020224:	6820      	ldr	r0, [r4, #0]
 8020226:	1821      	adds	r1, r4, r0
 8020228:	428b      	cmp	r3, r1
 802022a:	d1f3      	bne.n	8020214 <_free_r+0x20>
 802022c:	6819      	ldr	r1, [r3, #0]
 802022e:	685b      	ldr	r3, [r3, #4]
 8020230:	1809      	adds	r1, r1, r0
 8020232:	6021      	str	r1, [r4, #0]
 8020234:	e7ee      	b.n	8020214 <_free_r+0x20>
 8020236:	001a      	movs	r2, r3
 8020238:	685b      	ldr	r3, [r3, #4]
 802023a:	2b00      	cmp	r3, #0
 802023c:	d001      	beq.n	8020242 <_free_r+0x4e>
 802023e:	42a3      	cmp	r3, r4
 8020240:	d9f9      	bls.n	8020236 <_free_r+0x42>
 8020242:	6811      	ldr	r1, [r2, #0]
 8020244:	1850      	adds	r0, r2, r1
 8020246:	42a0      	cmp	r0, r4
 8020248:	d10b      	bne.n	8020262 <_free_r+0x6e>
 802024a:	6820      	ldr	r0, [r4, #0]
 802024c:	1809      	adds	r1, r1, r0
 802024e:	1850      	adds	r0, r2, r1
 8020250:	6011      	str	r1, [r2, #0]
 8020252:	4283      	cmp	r3, r0
 8020254:	d1e0      	bne.n	8020218 <_free_r+0x24>
 8020256:	6818      	ldr	r0, [r3, #0]
 8020258:	685b      	ldr	r3, [r3, #4]
 802025a:	1841      	adds	r1, r0, r1
 802025c:	6011      	str	r1, [r2, #0]
 802025e:	6053      	str	r3, [r2, #4]
 8020260:	e7da      	b.n	8020218 <_free_r+0x24>
 8020262:	42a0      	cmp	r0, r4
 8020264:	d902      	bls.n	802026c <_free_r+0x78>
 8020266:	230c      	movs	r3, #12
 8020268:	602b      	str	r3, [r5, #0]
 802026a:	e7d5      	b.n	8020218 <_free_r+0x24>
 802026c:	6820      	ldr	r0, [r4, #0]
 802026e:	1821      	adds	r1, r4, r0
 8020270:	428b      	cmp	r3, r1
 8020272:	d103      	bne.n	802027c <_free_r+0x88>
 8020274:	6819      	ldr	r1, [r3, #0]
 8020276:	685b      	ldr	r3, [r3, #4]
 8020278:	1809      	adds	r1, r1, r0
 802027a:	6021      	str	r1, [r4, #0]
 802027c:	6063      	str	r3, [r4, #4]
 802027e:	6054      	str	r4, [r2, #4]
 8020280:	e7ca      	b.n	8020218 <_free_r+0x24>
 8020282:	46c0      	nop			@ (mov r8, r8)
 8020284:	20003918 	.word	0x20003918

08020288 <rshift>:
 8020288:	0002      	movs	r2, r0
 802028a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802028c:	6904      	ldr	r4, [r0, #16]
 802028e:	b085      	sub	sp, #20
 8020290:	3214      	adds	r2, #20
 8020292:	114b      	asrs	r3, r1, #5
 8020294:	0016      	movs	r6, r2
 8020296:	9302      	str	r3, [sp, #8]
 8020298:	429c      	cmp	r4, r3
 802029a:	dd31      	ble.n	8020300 <rshift+0x78>
 802029c:	261f      	movs	r6, #31
 802029e:	000f      	movs	r7, r1
 80202a0:	009b      	lsls	r3, r3, #2
 80202a2:	00a5      	lsls	r5, r4, #2
 80202a4:	18d3      	adds	r3, r2, r3
 80202a6:	4037      	ands	r7, r6
 80202a8:	1955      	adds	r5, r2, r5
 80202aa:	9300      	str	r3, [sp, #0]
 80202ac:	9701      	str	r7, [sp, #4]
 80202ae:	4231      	tst	r1, r6
 80202b0:	d10d      	bne.n	80202ce <rshift+0x46>
 80202b2:	0016      	movs	r6, r2
 80202b4:	0019      	movs	r1, r3
 80202b6:	428d      	cmp	r5, r1
 80202b8:	d836      	bhi.n	8020328 <rshift+0xa0>
 80202ba:	9b00      	ldr	r3, [sp, #0]
 80202bc:	2600      	movs	r6, #0
 80202be:	3b03      	subs	r3, #3
 80202c0:	429d      	cmp	r5, r3
 80202c2:	d302      	bcc.n	80202ca <rshift+0x42>
 80202c4:	9b02      	ldr	r3, [sp, #8]
 80202c6:	1ae4      	subs	r4, r4, r3
 80202c8:	00a6      	lsls	r6, r4, #2
 80202ca:	1996      	adds	r6, r2, r6
 80202cc:	e018      	b.n	8020300 <rshift+0x78>
 80202ce:	2120      	movs	r1, #32
 80202d0:	9e01      	ldr	r6, [sp, #4]
 80202d2:	9f01      	ldr	r7, [sp, #4]
 80202d4:	1b89      	subs	r1, r1, r6
 80202d6:	9e00      	ldr	r6, [sp, #0]
 80202d8:	9103      	str	r1, [sp, #12]
 80202da:	ce02      	ldmia	r6!, {r1}
 80202dc:	4694      	mov	ip, r2
 80202de:	40f9      	lsrs	r1, r7
 80202e0:	42b5      	cmp	r5, r6
 80202e2:	d816      	bhi.n	8020312 <rshift+0x8a>
 80202e4:	9b00      	ldr	r3, [sp, #0]
 80202e6:	2600      	movs	r6, #0
 80202e8:	3301      	adds	r3, #1
 80202ea:	429d      	cmp	r5, r3
 80202ec:	d303      	bcc.n	80202f6 <rshift+0x6e>
 80202ee:	9b02      	ldr	r3, [sp, #8]
 80202f0:	1ae4      	subs	r4, r4, r3
 80202f2:	00a6      	lsls	r6, r4, #2
 80202f4:	3e04      	subs	r6, #4
 80202f6:	1996      	adds	r6, r2, r6
 80202f8:	6031      	str	r1, [r6, #0]
 80202fa:	2900      	cmp	r1, #0
 80202fc:	d000      	beq.n	8020300 <rshift+0x78>
 80202fe:	3604      	adds	r6, #4
 8020300:	1ab1      	subs	r1, r6, r2
 8020302:	1089      	asrs	r1, r1, #2
 8020304:	6101      	str	r1, [r0, #16]
 8020306:	4296      	cmp	r6, r2
 8020308:	d101      	bne.n	802030e <rshift+0x86>
 802030a:	2300      	movs	r3, #0
 802030c:	6143      	str	r3, [r0, #20]
 802030e:	b005      	add	sp, #20
 8020310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020312:	6837      	ldr	r7, [r6, #0]
 8020314:	9b03      	ldr	r3, [sp, #12]
 8020316:	409f      	lsls	r7, r3
 8020318:	430f      	orrs	r7, r1
 802031a:	4661      	mov	r1, ip
 802031c:	c180      	stmia	r1!, {r7}
 802031e:	468c      	mov	ip, r1
 8020320:	9b01      	ldr	r3, [sp, #4]
 8020322:	ce02      	ldmia	r6!, {r1}
 8020324:	40d9      	lsrs	r1, r3
 8020326:	e7db      	b.n	80202e0 <rshift+0x58>
 8020328:	c980      	ldmia	r1!, {r7}
 802032a:	c680      	stmia	r6!, {r7}
 802032c:	e7c3      	b.n	80202b6 <rshift+0x2e>

0802032e <__hexdig_fun>:
 802032e:	0002      	movs	r2, r0
 8020330:	3a30      	subs	r2, #48	@ 0x30
 8020332:	0003      	movs	r3, r0
 8020334:	2a09      	cmp	r2, #9
 8020336:	d802      	bhi.n	802033e <__hexdig_fun+0x10>
 8020338:	3b20      	subs	r3, #32
 802033a:	b2d8      	uxtb	r0, r3
 802033c:	4770      	bx	lr
 802033e:	0002      	movs	r2, r0
 8020340:	3a61      	subs	r2, #97	@ 0x61
 8020342:	2a05      	cmp	r2, #5
 8020344:	d801      	bhi.n	802034a <__hexdig_fun+0x1c>
 8020346:	3b47      	subs	r3, #71	@ 0x47
 8020348:	e7f7      	b.n	802033a <__hexdig_fun+0xc>
 802034a:	001a      	movs	r2, r3
 802034c:	3a41      	subs	r2, #65	@ 0x41
 802034e:	2000      	movs	r0, #0
 8020350:	2a05      	cmp	r2, #5
 8020352:	d8f3      	bhi.n	802033c <__hexdig_fun+0xe>
 8020354:	3b27      	subs	r3, #39	@ 0x27
 8020356:	e7f0      	b.n	802033a <__hexdig_fun+0xc>

08020358 <__gethex>:
 8020358:	b5f0      	push	{r4, r5, r6, r7, lr}
 802035a:	b089      	sub	sp, #36	@ 0x24
 802035c:	9307      	str	r3, [sp, #28]
 802035e:	680b      	ldr	r3, [r1, #0]
 8020360:	9201      	str	r2, [sp, #4]
 8020362:	9003      	str	r0, [sp, #12]
 8020364:	9106      	str	r1, [sp, #24]
 8020366:	1c9a      	adds	r2, r3, #2
 8020368:	0011      	movs	r1, r2
 802036a:	3201      	adds	r2, #1
 802036c:	1e50      	subs	r0, r2, #1
 802036e:	7800      	ldrb	r0, [r0, #0]
 8020370:	2830      	cmp	r0, #48	@ 0x30
 8020372:	d0f9      	beq.n	8020368 <__gethex+0x10>
 8020374:	1acb      	subs	r3, r1, r3
 8020376:	3b02      	subs	r3, #2
 8020378:	9305      	str	r3, [sp, #20]
 802037a:	9100      	str	r1, [sp, #0]
 802037c:	f7ff ffd7 	bl	802032e <__hexdig_fun>
 8020380:	2300      	movs	r3, #0
 8020382:	001d      	movs	r5, r3
 8020384:	9302      	str	r3, [sp, #8]
 8020386:	4298      	cmp	r0, r3
 8020388:	d11e      	bne.n	80203c8 <__gethex+0x70>
 802038a:	2201      	movs	r2, #1
 802038c:	49a6      	ldr	r1, [pc, #664]	@ (8020628 <__gethex+0x2d0>)
 802038e:	9800      	ldr	r0, [sp, #0]
 8020390:	f7fe ffd8 	bl	801f344 <strncmp>
 8020394:	0007      	movs	r7, r0
 8020396:	42a8      	cmp	r0, r5
 8020398:	d000      	beq.n	802039c <__gethex+0x44>
 802039a:	e06a      	b.n	8020472 <__gethex+0x11a>
 802039c:	9b00      	ldr	r3, [sp, #0]
 802039e:	7858      	ldrb	r0, [r3, #1]
 80203a0:	1c5c      	adds	r4, r3, #1
 80203a2:	f7ff ffc4 	bl	802032e <__hexdig_fun>
 80203a6:	2301      	movs	r3, #1
 80203a8:	9302      	str	r3, [sp, #8]
 80203aa:	42a8      	cmp	r0, r5
 80203ac:	d02f      	beq.n	802040e <__gethex+0xb6>
 80203ae:	9400      	str	r4, [sp, #0]
 80203b0:	9b00      	ldr	r3, [sp, #0]
 80203b2:	7818      	ldrb	r0, [r3, #0]
 80203b4:	2830      	cmp	r0, #48	@ 0x30
 80203b6:	d009      	beq.n	80203cc <__gethex+0x74>
 80203b8:	f7ff ffb9 	bl	802032e <__hexdig_fun>
 80203bc:	4242      	negs	r2, r0
 80203be:	4142      	adcs	r2, r0
 80203c0:	2301      	movs	r3, #1
 80203c2:	0025      	movs	r5, r4
 80203c4:	9202      	str	r2, [sp, #8]
 80203c6:	9305      	str	r3, [sp, #20]
 80203c8:	9c00      	ldr	r4, [sp, #0]
 80203ca:	e004      	b.n	80203d6 <__gethex+0x7e>
 80203cc:	9b00      	ldr	r3, [sp, #0]
 80203ce:	3301      	adds	r3, #1
 80203d0:	9300      	str	r3, [sp, #0]
 80203d2:	e7ed      	b.n	80203b0 <__gethex+0x58>
 80203d4:	3401      	adds	r4, #1
 80203d6:	7820      	ldrb	r0, [r4, #0]
 80203d8:	f7ff ffa9 	bl	802032e <__hexdig_fun>
 80203dc:	1e07      	subs	r7, r0, #0
 80203de:	d1f9      	bne.n	80203d4 <__gethex+0x7c>
 80203e0:	2201      	movs	r2, #1
 80203e2:	0020      	movs	r0, r4
 80203e4:	4990      	ldr	r1, [pc, #576]	@ (8020628 <__gethex+0x2d0>)
 80203e6:	f7fe ffad 	bl	801f344 <strncmp>
 80203ea:	2800      	cmp	r0, #0
 80203ec:	d10d      	bne.n	802040a <__gethex+0xb2>
 80203ee:	2d00      	cmp	r5, #0
 80203f0:	d106      	bne.n	8020400 <__gethex+0xa8>
 80203f2:	3401      	adds	r4, #1
 80203f4:	0025      	movs	r5, r4
 80203f6:	7820      	ldrb	r0, [r4, #0]
 80203f8:	f7ff ff99 	bl	802032e <__hexdig_fun>
 80203fc:	2800      	cmp	r0, #0
 80203fe:	d102      	bne.n	8020406 <__gethex+0xae>
 8020400:	1b2d      	subs	r5, r5, r4
 8020402:	00af      	lsls	r7, r5, #2
 8020404:	e003      	b.n	802040e <__gethex+0xb6>
 8020406:	3401      	adds	r4, #1
 8020408:	e7f5      	b.n	80203f6 <__gethex+0x9e>
 802040a:	2d00      	cmp	r5, #0
 802040c:	d1f8      	bne.n	8020400 <__gethex+0xa8>
 802040e:	2220      	movs	r2, #32
 8020410:	7823      	ldrb	r3, [r4, #0]
 8020412:	0026      	movs	r6, r4
 8020414:	4393      	bics	r3, r2
 8020416:	2b50      	cmp	r3, #80	@ 0x50
 8020418:	d11d      	bne.n	8020456 <__gethex+0xfe>
 802041a:	7863      	ldrb	r3, [r4, #1]
 802041c:	2b2b      	cmp	r3, #43	@ 0x2b
 802041e:	d02d      	beq.n	802047c <__gethex+0x124>
 8020420:	2b2d      	cmp	r3, #45	@ 0x2d
 8020422:	d02f      	beq.n	8020484 <__gethex+0x12c>
 8020424:	2300      	movs	r3, #0
 8020426:	1c66      	adds	r6, r4, #1
 8020428:	9304      	str	r3, [sp, #16]
 802042a:	7830      	ldrb	r0, [r6, #0]
 802042c:	f7ff ff7f 	bl	802032e <__hexdig_fun>
 8020430:	1e43      	subs	r3, r0, #1
 8020432:	b2db      	uxtb	r3, r3
 8020434:	0005      	movs	r5, r0
 8020436:	2b18      	cmp	r3, #24
 8020438:	d82a      	bhi.n	8020490 <__gethex+0x138>
 802043a:	7870      	ldrb	r0, [r6, #1]
 802043c:	f7ff ff77 	bl	802032e <__hexdig_fun>
 8020440:	1e43      	subs	r3, r0, #1
 8020442:	b2db      	uxtb	r3, r3
 8020444:	3601      	adds	r6, #1
 8020446:	3d10      	subs	r5, #16
 8020448:	2b18      	cmp	r3, #24
 802044a:	d91d      	bls.n	8020488 <__gethex+0x130>
 802044c:	9b04      	ldr	r3, [sp, #16]
 802044e:	2b00      	cmp	r3, #0
 8020450:	d000      	beq.n	8020454 <__gethex+0xfc>
 8020452:	426d      	negs	r5, r5
 8020454:	197f      	adds	r7, r7, r5
 8020456:	9b06      	ldr	r3, [sp, #24]
 8020458:	601e      	str	r6, [r3, #0]
 802045a:	9b02      	ldr	r3, [sp, #8]
 802045c:	2b00      	cmp	r3, #0
 802045e:	d019      	beq.n	8020494 <__gethex+0x13c>
 8020460:	9b05      	ldr	r3, [sp, #20]
 8020462:	2606      	movs	r6, #6
 8020464:	425a      	negs	r2, r3
 8020466:	4153      	adcs	r3, r2
 8020468:	425b      	negs	r3, r3
 802046a:	401e      	ands	r6, r3
 802046c:	0030      	movs	r0, r6
 802046e:	b009      	add	sp, #36	@ 0x24
 8020470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020472:	2301      	movs	r3, #1
 8020474:	2700      	movs	r7, #0
 8020476:	9c00      	ldr	r4, [sp, #0]
 8020478:	9302      	str	r3, [sp, #8]
 802047a:	e7c8      	b.n	802040e <__gethex+0xb6>
 802047c:	2300      	movs	r3, #0
 802047e:	9304      	str	r3, [sp, #16]
 8020480:	1ca6      	adds	r6, r4, #2
 8020482:	e7d2      	b.n	802042a <__gethex+0xd2>
 8020484:	2301      	movs	r3, #1
 8020486:	e7fa      	b.n	802047e <__gethex+0x126>
 8020488:	230a      	movs	r3, #10
 802048a:	435d      	muls	r5, r3
 802048c:	182d      	adds	r5, r5, r0
 802048e:	e7d4      	b.n	802043a <__gethex+0xe2>
 8020490:	0026      	movs	r6, r4
 8020492:	e7e0      	b.n	8020456 <__gethex+0xfe>
 8020494:	9b00      	ldr	r3, [sp, #0]
 8020496:	9902      	ldr	r1, [sp, #8]
 8020498:	1ae3      	subs	r3, r4, r3
 802049a:	3b01      	subs	r3, #1
 802049c:	2b07      	cmp	r3, #7
 802049e:	dc0a      	bgt.n	80204b6 <__gethex+0x15e>
 80204a0:	9803      	ldr	r0, [sp, #12]
 80204a2:	f000 fb19 	bl	8020ad8 <_Balloc>
 80204a6:	1e05      	subs	r5, r0, #0
 80204a8:	d108      	bne.n	80204bc <__gethex+0x164>
 80204aa:	002a      	movs	r2, r5
 80204ac:	21e4      	movs	r1, #228	@ 0xe4
 80204ae:	4b5f      	ldr	r3, [pc, #380]	@ (802062c <__gethex+0x2d4>)
 80204b0:	485f      	ldr	r0, [pc, #380]	@ (8020630 <__gethex+0x2d8>)
 80204b2:	f001 fbf1 	bl	8021c98 <__assert_func>
 80204b6:	3101      	adds	r1, #1
 80204b8:	105b      	asrs	r3, r3, #1
 80204ba:	e7ef      	b.n	802049c <__gethex+0x144>
 80204bc:	0003      	movs	r3, r0
 80204be:	3314      	adds	r3, #20
 80204c0:	9302      	str	r3, [sp, #8]
 80204c2:	9305      	str	r3, [sp, #20]
 80204c4:	2300      	movs	r3, #0
 80204c6:	001e      	movs	r6, r3
 80204c8:	9304      	str	r3, [sp, #16]
 80204ca:	9b00      	ldr	r3, [sp, #0]
 80204cc:	42a3      	cmp	r3, r4
 80204ce:	d338      	bcc.n	8020542 <__gethex+0x1ea>
 80204d0:	9c05      	ldr	r4, [sp, #20]
 80204d2:	9b02      	ldr	r3, [sp, #8]
 80204d4:	c440      	stmia	r4!, {r6}
 80204d6:	1ae4      	subs	r4, r4, r3
 80204d8:	10a4      	asrs	r4, r4, #2
 80204da:	0030      	movs	r0, r6
 80204dc:	612c      	str	r4, [r5, #16]
 80204de:	f000 fbf3 	bl	8020cc8 <__hi0bits>
 80204e2:	9b01      	ldr	r3, [sp, #4]
 80204e4:	0164      	lsls	r4, r4, #5
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	1a26      	subs	r6, r4, r0
 80204ea:	9300      	str	r3, [sp, #0]
 80204ec:	429e      	cmp	r6, r3
 80204ee:	dd52      	ble.n	8020596 <__gethex+0x23e>
 80204f0:	1af6      	subs	r6, r6, r3
 80204f2:	0031      	movs	r1, r6
 80204f4:	0028      	movs	r0, r5
 80204f6:	f000 ff96 	bl	8021426 <__any_on>
 80204fa:	1e04      	subs	r4, r0, #0
 80204fc:	d00f      	beq.n	802051e <__gethex+0x1c6>
 80204fe:	2401      	movs	r4, #1
 8020500:	231f      	movs	r3, #31
 8020502:	0020      	movs	r0, r4
 8020504:	1e72      	subs	r2, r6, #1
 8020506:	4013      	ands	r3, r2
 8020508:	4098      	lsls	r0, r3
 802050a:	0003      	movs	r3, r0
 802050c:	1151      	asrs	r1, r2, #5
 802050e:	9802      	ldr	r0, [sp, #8]
 8020510:	0089      	lsls	r1, r1, #2
 8020512:	5809      	ldr	r1, [r1, r0]
 8020514:	4219      	tst	r1, r3
 8020516:	d002      	beq.n	802051e <__gethex+0x1c6>
 8020518:	42a2      	cmp	r2, r4
 802051a:	dc34      	bgt.n	8020586 <__gethex+0x22e>
 802051c:	2402      	movs	r4, #2
 802051e:	0031      	movs	r1, r6
 8020520:	0028      	movs	r0, r5
 8020522:	f7ff feb1 	bl	8020288 <rshift>
 8020526:	19bf      	adds	r7, r7, r6
 8020528:	9b01      	ldr	r3, [sp, #4]
 802052a:	689b      	ldr	r3, [r3, #8]
 802052c:	42bb      	cmp	r3, r7
 802052e:	da42      	bge.n	80205b6 <__gethex+0x25e>
 8020530:	0029      	movs	r1, r5
 8020532:	9803      	ldr	r0, [sp, #12]
 8020534:	f000 fb14 	bl	8020b60 <_Bfree>
 8020538:	2300      	movs	r3, #0
 802053a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802053c:	26a3      	movs	r6, #163	@ 0xa3
 802053e:	6013      	str	r3, [r2, #0]
 8020540:	e794      	b.n	802046c <__gethex+0x114>
 8020542:	3c01      	subs	r4, #1
 8020544:	7823      	ldrb	r3, [r4, #0]
 8020546:	2b2e      	cmp	r3, #46	@ 0x2e
 8020548:	d012      	beq.n	8020570 <__gethex+0x218>
 802054a:	9b04      	ldr	r3, [sp, #16]
 802054c:	2b20      	cmp	r3, #32
 802054e:	d104      	bne.n	802055a <__gethex+0x202>
 8020550:	9b05      	ldr	r3, [sp, #20]
 8020552:	c340      	stmia	r3!, {r6}
 8020554:	2600      	movs	r6, #0
 8020556:	9305      	str	r3, [sp, #20]
 8020558:	9604      	str	r6, [sp, #16]
 802055a:	7820      	ldrb	r0, [r4, #0]
 802055c:	f7ff fee7 	bl	802032e <__hexdig_fun>
 8020560:	230f      	movs	r3, #15
 8020562:	4018      	ands	r0, r3
 8020564:	9b04      	ldr	r3, [sp, #16]
 8020566:	4098      	lsls	r0, r3
 8020568:	3304      	adds	r3, #4
 802056a:	4306      	orrs	r6, r0
 802056c:	9304      	str	r3, [sp, #16]
 802056e:	e7ac      	b.n	80204ca <__gethex+0x172>
 8020570:	9b00      	ldr	r3, [sp, #0]
 8020572:	42a3      	cmp	r3, r4
 8020574:	d8e9      	bhi.n	802054a <__gethex+0x1f2>
 8020576:	2201      	movs	r2, #1
 8020578:	0020      	movs	r0, r4
 802057a:	492b      	ldr	r1, [pc, #172]	@ (8020628 <__gethex+0x2d0>)
 802057c:	f7fe fee2 	bl	801f344 <strncmp>
 8020580:	2800      	cmp	r0, #0
 8020582:	d1e2      	bne.n	802054a <__gethex+0x1f2>
 8020584:	e7a1      	b.n	80204ca <__gethex+0x172>
 8020586:	0028      	movs	r0, r5
 8020588:	1eb1      	subs	r1, r6, #2
 802058a:	f000 ff4c 	bl	8021426 <__any_on>
 802058e:	2800      	cmp	r0, #0
 8020590:	d0c4      	beq.n	802051c <__gethex+0x1c4>
 8020592:	2403      	movs	r4, #3
 8020594:	e7c3      	b.n	802051e <__gethex+0x1c6>
 8020596:	9b00      	ldr	r3, [sp, #0]
 8020598:	2400      	movs	r4, #0
 802059a:	429e      	cmp	r6, r3
 802059c:	dac4      	bge.n	8020528 <__gethex+0x1d0>
 802059e:	1b9e      	subs	r6, r3, r6
 80205a0:	0029      	movs	r1, r5
 80205a2:	0032      	movs	r2, r6
 80205a4:	9803      	ldr	r0, [sp, #12]
 80205a6:	f000 fd05 	bl	8020fb4 <__lshift>
 80205aa:	0003      	movs	r3, r0
 80205ac:	3314      	adds	r3, #20
 80205ae:	0005      	movs	r5, r0
 80205b0:	1bbf      	subs	r7, r7, r6
 80205b2:	9302      	str	r3, [sp, #8]
 80205b4:	e7b8      	b.n	8020528 <__gethex+0x1d0>
 80205b6:	9b01      	ldr	r3, [sp, #4]
 80205b8:	685e      	ldr	r6, [r3, #4]
 80205ba:	42be      	cmp	r6, r7
 80205bc:	dd6f      	ble.n	802069e <__gethex+0x346>
 80205be:	9b00      	ldr	r3, [sp, #0]
 80205c0:	1bf6      	subs	r6, r6, r7
 80205c2:	42b3      	cmp	r3, r6
 80205c4:	dc36      	bgt.n	8020634 <__gethex+0x2dc>
 80205c6:	9b01      	ldr	r3, [sp, #4]
 80205c8:	68db      	ldr	r3, [r3, #12]
 80205ca:	2b02      	cmp	r3, #2
 80205cc:	d024      	beq.n	8020618 <__gethex+0x2c0>
 80205ce:	2b03      	cmp	r3, #3
 80205d0:	d026      	beq.n	8020620 <__gethex+0x2c8>
 80205d2:	2b01      	cmp	r3, #1
 80205d4:	d117      	bne.n	8020606 <__gethex+0x2ae>
 80205d6:	9b00      	ldr	r3, [sp, #0]
 80205d8:	42b3      	cmp	r3, r6
 80205da:	d114      	bne.n	8020606 <__gethex+0x2ae>
 80205dc:	2b01      	cmp	r3, #1
 80205de:	d10b      	bne.n	80205f8 <__gethex+0x2a0>
 80205e0:	9b01      	ldr	r3, [sp, #4]
 80205e2:	9a07      	ldr	r2, [sp, #28]
 80205e4:	685b      	ldr	r3, [r3, #4]
 80205e6:	2662      	movs	r6, #98	@ 0x62
 80205e8:	6013      	str	r3, [r2, #0]
 80205ea:	2301      	movs	r3, #1
 80205ec:	9a02      	ldr	r2, [sp, #8]
 80205ee:	612b      	str	r3, [r5, #16]
 80205f0:	6013      	str	r3, [r2, #0]
 80205f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205f4:	601d      	str	r5, [r3, #0]
 80205f6:	e739      	b.n	802046c <__gethex+0x114>
 80205f8:	9900      	ldr	r1, [sp, #0]
 80205fa:	0028      	movs	r0, r5
 80205fc:	3901      	subs	r1, #1
 80205fe:	f000 ff12 	bl	8021426 <__any_on>
 8020602:	2800      	cmp	r0, #0
 8020604:	d1ec      	bne.n	80205e0 <__gethex+0x288>
 8020606:	0029      	movs	r1, r5
 8020608:	9803      	ldr	r0, [sp, #12]
 802060a:	f000 faa9 	bl	8020b60 <_Bfree>
 802060e:	2300      	movs	r3, #0
 8020610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020612:	2650      	movs	r6, #80	@ 0x50
 8020614:	6013      	str	r3, [r2, #0]
 8020616:	e729      	b.n	802046c <__gethex+0x114>
 8020618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802061a:	2b00      	cmp	r3, #0
 802061c:	d1f3      	bne.n	8020606 <__gethex+0x2ae>
 802061e:	e7df      	b.n	80205e0 <__gethex+0x288>
 8020620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020622:	2b00      	cmp	r3, #0
 8020624:	d1dc      	bne.n	80205e0 <__gethex+0x288>
 8020626:	e7ee      	b.n	8020606 <__gethex+0x2ae>
 8020628:	080245d0 	.word	0x080245d0
 802062c:	080247e1 	.word	0x080247e1
 8020630:	080247f2 	.word	0x080247f2
 8020634:	1e77      	subs	r7, r6, #1
 8020636:	2c00      	cmp	r4, #0
 8020638:	d12f      	bne.n	802069a <__gethex+0x342>
 802063a:	2f00      	cmp	r7, #0
 802063c:	d004      	beq.n	8020648 <__gethex+0x2f0>
 802063e:	0039      	movs	r1, r7
 8020640:	0028      	movs	r0, r5
 8020642:	f000 fef0 	bl	8021426 <__any_on>
 8020646:	0004      	movs	r4, r0
 8020648:	231f      	movs	r3, #31
 802064a:	117a      	asrs	r2, r7, #5
 802064c:	401f      	ands	r7, r3
 802064e:	3b1e      	subs	r3, #30
 8020650:	40bb      	lsls	r3, r7
 8020652:	9902      	ldr	r1, [sp, #8]
 8020654:	0092      	lsls	r2, r2, #2
 8020656:	5852      	ldr	r2, [r2, r1]
 8020658:	421a      	tst	r2, r3
 802065a:	d001      	beq.n	8020660 <__gethex+0x308>
 802065c:	2302      	movs	r3, #2
 802065e:	431c      	orrs	r4, r3
 8020660:	9b00      	ldr	r3, [sp, #0]
 8020662:	0031      	movs	r1, r6
 8020664:	1b9b      	subs	r3, r3, r6
 8020666:	2602      	movs	r6, #2
 8020668:	0028      	movs	r0, r5
 802066a:	9300      	str	r3, [sp, #0]
 802066c:	f7ff fe0c 	bl	8020288 <rshift>
 8020670:	9b01      	ldr	r3, [sp, #4]
 8020672:	685f      	ldr	r7, [r3, #4]
 8020674:	2c00      	cmp	r4, #0
 8020676:	d03f      	beq.n	80206f8 <__gethex+0x3a0>
 8020678:	9b01      	ldr	r3, [sp, #4]
 802067a:	68db      	ldr	r3, [r3, #12]
 802067c:	2b02      	cmp	r3, #2
 802067e:	d010      	beq.n	80206a2 <__gethex+0x34a>
 8020680:	2b03      	cmp	r3, #3
 8020682:	d012      	beq.n	80206aa <__gethex+0x352>
 8020684:	2b01      	cmp	r3, #1
 8020686:	d106      	bne.n	8020696 <__gethex+0x33e>
 8020688:	07a2      	lsls	r2, r4, #30
 802068a:	d504      	bpl.n	8020696 <__gethex+0x33e>
 802068c:	9a02      	ldr	r2, [sp, #8]
 802068e:	6812      	ldr	r2, [r2, #0]
 8020690:	4314      	orrs	r4, r2
 8020692:	421c      	tst	r4, r3
 8020694:	d10c      	bne.n	80206b0 <__gethex+0x358>
 8020696:	2310      	movs	r3, #16
 8020698:	e02d      	b.n	80206f6 <__gethex+0x39e>
 802069a:	2401      	movs	r4, #1
 802069c:	e7d4      	b.n	8020648 <__gethex+0x2f0>
 802069e:	2601      	movs	r6, #1
 80206a0:	e7e8      	b.n	8020674 <__gethex+0x31c>
 80206a2:	2301      	movs	r3, #1
 80206a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80206a6:	1a9b      	subs	r3, r3, r2
 80206a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	d0f2      	beq.n	8020696 <__gethex+0x33e>
 80206b0:	692b      	ldr	r3, [r5, #16]
 80206b2:	2000      	movs	r0, #0
 80206b4:	9302      	str	r3, [sp, #8]
 80206b6:	009b      	lsls	r3, r3, #2
 80206b8:	9304      	str	r3, [sp, #16]
 80206ba:	002b      	movs	r3, r5
 80206bc:	9a04      	ldr	r2, [sp, #16]
 80206be:	3314      	adds	r3, #20
 80206c0:	1899      	adds	r1, r3, r2
 80206c2:	681a      	ldr	r2, [r3, #0]
 80206c4:	1c54      	adds	r4, r2, #1
 80206c6:	d01c      	beq.n	8020702 <__gethex+0x3aa>
 80206c8:	3201      	adds	r2, #1
 80206ca:	601a      	str	r2, [r3, #0]
 80206cc:	002b      	movs	r3, r5
 80206ce:	3314      	adds	r3, #20
 80206d0:	2e02      	cmp	r6, #2
 80206d2:	d13f      	bne.n	8020754 <__gethex+0x3fc>
 80206d4:	9a01      	ldr	r2, [sp, #4]
 80206d6:	9900      	ldr	r1, [sp, #0]
 80206d8:	6812      	ldr	r2, [r2, #0]
 80206da:	3a01      	subs	r2, #1
 80206dc:	428a      	cmp	r2, r1
 80206de:	d109      	bne.n	80206f4 <__gethex+0x39c>
 80206e0:	000a      	movs	r2, r1
 80206e2:	201f      	movs	r0, #31
 80206e4:	4010      	ands	r0, r2
 80206e6:	2201      	movs	r2, #1
 80206e8:	4082      	lsls	r2, r0
 80206ea:	1149      	asrs	r1, r1, #5
 80206ec:	0089      	lsls	r1, r1, #2
 80206ee:	58cb      	ldr	r3, [r1, r3]
 80206f0:	4213      	tst	r3, r2
 80206f2:	d13d      	bne.n	8020770 <__gethex+0x418>
 80206f4:	2320      	movs	r3, #32
 80206f6:	431e      	orrs	r6, r3
 80206f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80206fa:	601d      	str	r5, [r3, #0]
 80206fc:	9b07      	ldr	r3, [sp, #28]
 80206fe:	601f      	str	r7, [r3, #0]
 8020700:	e6b4      	b.n	802046c <__gethex+0x114>
 8020702:	c301      	stmia	r3!, {r0}
 8020704:	4299      	cmp	r1, r3
 8020706:	d8dc      	bhi.n	80206c2 <__gethex+0x36a>
 8020708:	68ab      	ldr	r3, [r5, #8]
 802070a:	9a02      	ldr	r2, [sp, #8]
 802070c:	429a      	cmp	r2, r3
 802070e:	db18      	blt.n	8020742 <__gethex+0x3ea>
 8020710:	6869      	ldr	r1, [r5, #4]
 8020712:	9803      	ldr	r0, [sp, #12]
 8020714:	3101      	adds	r1, #1
 8020716:	f000 f9df 	bl	8020ad8 <_Balloc>
 802071a:	1e04      	subs	r4, r0, #0
 802071c:	d104      	bne.n	8020728 <__gethex+0x3d0>
 802071e:	0022      	movs	r2, r4
 8020720:	2184      	movs	r1, #132	@ 0x84
 8020722:	4b1d      	ldr	r3, [pc, #116]	@ (8020798 <__gethex+0x440>)
 8020724:	481d      	ldr	r0, [pc, #116]	@ (802079c <__gethex+0x444>)
 8020726:	e6c4      	b.n	80204b2 <__gethex+0x15a>
 8020728:	0029      	movs	r1, r5
 802072a:	692a      	ldr	r2, [r5, #16]
 802072c:	310c      	adds	r1, #12
 802072e:	3202      	adds	r2, #2
 8020730:	0092      	lsls	r2, r2, #2
 8020732:	300c      	adds	r0, #12
 8020734:	f7fe fecc 	bl	801f4d0 <memcpy>
 8020738:	0029      	movs	r1, r5
 802073a:	9803      	ldr	r0, [sp, #12]
 802073c:	f000 fa10 	bl	8020b60 <_Bfree>
 8020740:	0025      	movs	r5, r4
 8020742:	692b      	ldr	r3, [r5, #16]
 8020744:	1c5a      	adds	r2, r3, #1
 8020746:	612a      	str	r2, [r5, #16]
 8020748:	2201      	movs	r2, #1
 802074a:	3304      	adds	r3, #4
 802074c:	009b      	lsls	r3, r3, #2
 802074e:	18eb      	adds	r3, r5, r3
 8020750:	605a      	str	r2, [r3, #4]
 8020752:	e7bb      	b.n	80206cc <__gethex+0x374>
 8020754:	692a      	ldr	r2, [r5, #16]
 8020756:	9902      	ldr	r1, [sp, #8]
 8020758:	428a      	cmp	r2, r1
 802075a:	dd0b      	ble.n	8020774 <__gethex+0x41c>
 802075c:	2101      	movs	r1, #1
 802075e:	0028      	movs	r0, r5
 8020760:	f7ff fd92 	bl	8020288 <rshift>
 8020764:	9b01      	ldr	r3, [sp, #4]
 8020766:	3701      	adds	r7, #1
 8020768:	689b      	ldr	r3, [r3, #8]
 802076a:	42bb      	cmp	r3, r7
 802076c:	da00      	bge.n	8020770 <__gethex+0x418>
 802076e:	e6df      	b.n	8020530 <__gethex+0x1d8>
 8020770:	2601      	movs	r6, #1
 8020772:	e7bf      	b.n	80206f4 <__gethex+0x39c>
 8020774:	221f      	movs	r2, #31
 8020776:	9c00      	ldr	r4, [sp, #0]
 8020778:	9900      	ldr	r1, [sp, #0]
 802077a:	4014      	ands	r4, r2
 802077c:	4211      	tst	r1, r2
 802077e:	d0f7      	beq.n	8020770 <__gethex+0x418>
 8020780:	9a04      	ldr	r2, [sp, #16]
 8020782:	189b      	adds	r3, r3, r2
 8020784:	3b04      	subs	r3, #4
 8020786:	6818      	ldr	r0, [r3, #0]
 8020788:	f000 fa9e 	bl	8020cc8 <__hi0bits>
 802078c:	2320      	movs	r3, #32
 802078e:	1b1b      	subs	r3, r3, r4
 8020790:	4298      	cmp	r0, r3
 8020792:	dbe3      	blt.n	802075c <__gethex+0x404>
 8020794:	e7ec      	b.n	8020770 <__gethex+0x418>
 8020796:	46c0      	nop			@ (mov r8, r8)
 8020798:	080247e1 	.word	0x080247e1
 802079c:	080247f2 	.word	0x080247f2

080207a0 <L_shift>:
 80207a0:	2308      	movs	r3, #8
 80207a2:	b570      	push	{r4, r5, r6, lr}
 80207a4:	2520      	movs	r5, #32
 80207a6:	1a9a      	subs	r2, r3, r2
 80207a8:	0092      	lsls	r2, r2, #2
 80207aa:	1aad      	subs	r5, r5, r2
 80207ac:	6843      	ldr	r3, [r0, #4]
 80207ae:	6804      	ldr	r4, [r0, #0]
 80207b0:	001e      	movs	r6, r3
 80207b2:	40ae      	lsls	r6, r5
 80207b4:	40d3      	lsrs	r3, r2
 80207b6:	4334      	orrs	r4, r6
 80207b8:	6004      	str	r4, [r0, #0]
 80207ba:	6043      	str	r3, [r0, #4]
 80207bc:	3004      	adds	r0, #4
 80207be:	4288      	cmp	r0, r1
 80207c0:	d3f4      	bcc.n	80207ac <L_shift+0xc>
 80207c2:	bd70      	pop	{r4, r5, r6, pc}

080207c4 <__match>:
 80207c4:	b530      	push	{r4, r5, lr}
 80207c6:	6803      	ldr	r3, [r0, #0]
 80207c8:	780c      	ldrb	r4, [r1, #0]
 80207ca:	3301      	adds	r3, #1
 80207cc:	2c00      	cmp	r4, #0
 80207ce:	d102      	bne.n	80207d6 <__match+0x12>
 80207d0:	6003      	str	r3, [r0, #0]
 80207d2:	2001      	movs	r0, #1
 80207d4:	bd30      	pop	{r4, r5, pc}
 80207d6:	781a      	ldrb	r2, [r3, #0]
 80207d8:	0015      	movs	r5, r2
 80207da:	3d41      	subs	r5, #65	@ 0x41
 80207dc:	2d19      	cmp	r5, #25
 80207de:	d800      	bhi.n	80207e2 <__match+0x1e>
 80207e0:	3220      	adds	r2, #32
 80207e2:	3101      	adds	r1, #1
 80207e4:	42a2      	cmp	r2, r4
 80207e6:	d0ef      	beq.n	80207c8 <__match+0x4>
 80207e8:	2000      	movs	r0, #0
 80207ea:	e7f3      	b.n	80207d4 <__match+0x10>

080207ec <__hexnan>:
 80207ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80207ee:	680b      	ldr	r3, [r1, #0]
 80207f0:	b08b      	sub	sp, #44	@ 0x2c
 80207f2:	9201      	str	r2, [sp, #4]
 80207f4:	9901      	ldr	r1, [sp, #4]
 80207f6:	115a      	asrs	r2, r3, #5
 80207f8:	0092      	lsls	r2, r2, #2
 80207fa:	188a      	adds	r2, r1, r2
 80207fc:	9202      	str	r2, [sp, #8]
 80207fe:	0019      	movs	r1, r3
 8020800:	221f      	movs	r2, #31
 8020802:	4011      	ands	r1, r2
 8020804:	9008      	str	r0, [sp, #32]
 8020806:	9106      	str	r1, [sp, #24]
 8020808:	4213      	tst	r3, r2
 802080a:	d002      	beq.n	8020812 <__hexnan+0x26>
 802080c:	9b02      	ldr	r3, [sp, #8]
 802080e:	3304      	adds	r3, #4
 8020810:	9302      	str	r3, [sp, #8]
 8020812:	9b02      	ldr	r3, [sp, #8]
 8020814:	2500      	movs	r5, #0
 8020816:	1f1f      	subs	r7, r3, #4
 8020818:	003e      	movs	r6, r7
 802081a:	003c      	movs	r4, r7
 802081c:	9b08      	ldr	r3, [sp, #32]
 802081e:	603d      	str	r5, [r7, #0]
 8020820:	681b      	ldr	r3, [r3, #0]
 8020822:	9507      	str	r5, [sp, #28]
 8020824:	9305      	str	r3, [sp, #20]
 8020826:	9503      	str	r5, [sp, #12]
 8020828:	9b05      	ldr	r3, [sp, #20]
 802082a:	3301      	adds	r3, #1
 802082c:	9309      	str	r3, [sp, #36]	@ 0x24
 802082e:	9b05      	ldr	r3, [sp, #20]
 8020830:	785b      	ldrb	r3, [r3, #1]
 8020832:	9304      	str	r3, [sp, #16]
 8020834:	2b00      	cmp	r3, #0
 8020836:	d028      	beq.n	802088a <__hexnan+0x9e>
 8020838:	9804      	ldr	r0, [sp, #16]
 802083a:	f7ff fd78 	bl	802032e <__hexdig_fun>
 802083e:	2800      	cmp	r0, #0
 8020840:	d155      	bne.n	80208ee <__hexnan+0x102>
 8020842:	9b04      	ldr	r3, [sp, #16]
 8020844:	2b20      	cmp	r3, #32
 8020846:	d819      	bhi.n	802087c <__hexnan+0x90>
 8020848:	9b03      	ldr	r3, [sp, #12]
 802084a:	9a07      	ldr	r2, [sp, #28]
 802084c:	4293      	cmp	r3, r2
 802084e:	dd12      	ble.n	8020876 <__hexnan+0x8a>
 8020850:	42b4      	cmp	r4, r6
 8020852:	d206      	bcs.n	8020862 <__hexnan+0x76>
 8020854:	2d07      	cmp	r5, #7
 8020856:	dc04      	bgt.n	8020862 <__hexnan+0x76>
 8020858:	002a      	movs	r2, r5
 802085a:	0031      	movs	r1, r6
 802085c:	0020      	movs	r0, r4
 802085e:	f7ff ff9f 	bl	80207a0 <L_shift>
 8020862:	9b01      	ldr	r3, [sp, #4]
 8020864:	2508      	movs	r5, #8
 8020866:	429c      	cmp	r4, r3
 8020868:	d905      	bls.n	8020876 <__hexnan+0x8a>
 802086a:	1f26      	subs	r6, r4, #4
 802086c:	2500      	movs	r5, #0
 802086e:	0034      	movs	r4, r6
 8020870:	9b03      	ldr	r3, [sp, #12]
 8020872:	6035      	str	r5, [r6, #0]
 8020874:	9307      	str	r3, [sp, #28]
 8020876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020878:	9305      	str	r3, [sp, #20]
 802087a:	e7d5      	b.n	8020828 <__hexnan+0x3c>
 802087c:	9b04      	ldr	r3, [sp, #16]
 802087e:	2b29      	cmp	r3, #41	@ 0x29
 8020880:	d15a      	bne.n	8020938 <__hexnan+0x14c>
 8020882:	9b05      	ldr	r3, [sp, #20]
 8020884:	9a08      	ldr	r2, [sp, #32]
 8020886:	3302      	adds	r3, #2
 8020888:	6013      	str	r3, [r2, #0]
 802088a:	9b03      	ldr	r3, [sp, #12]
 802088c:	2b00      	cmp	r3, #0
 802088e:	d053      	beq.n	8020938 <__hexnan+0x14c>
 8020890:	42b4      	cmp	r4, r6
 8020892:	d206      	bcs.n	80208a2 <__hexnan+0xb6>
 8020894:	2d07      	cmp	r5, #7
 8020896:	dc04      	bgt.n	80208a2 <__hexnan+0xb6>
 8020898:	002a      	movs	r2, r5
 802089a:	0031      	movs	r1, r6
 802089c:	0020      	movs	r0, r4
 802089e:	f7ff ff7f 	bl	80207a0 <L_shift>
 80208a2:	9b01      	ldr	r3, [sp, #4]
 80208a4:	429c      	cmp	r4, r3
 80208a6:	d936      	bls.n	8020916 <__hexnan+0x12a>
 80208a8:	001a      	movs	r2, r3
 80208aa:	0023      	movs	r3, r4
 80208ac:	cb02      	ldmia	r3!, {r1}
 80208ae:	c202      	stmia	r2!, {r1}
 80208b0:	429f      	cmp	r7, r3
 80208b2:	d2fb      	bcs.n	80208ac <__hexnan+0xc0>
 80208b4:	9b02      	ldr	r3, [sp, #8]
 80208b6:	1c61      	adds	r1, r4, #1
 80208b8:	1eda      	subs	r2, r3, #3
 80208ba:	2304      	movs	r3, #4
 80208bc:	4291      	cmp	r1, r2
 80208be:	d805      	bhi.n	80208cc <__hexnan+0xe0>
 80208c0:	9b02      	ldr	r3, [sp, #8]
 80208c2:	3b04      	subs	r3, #4
 80208c4:	1b1b      	subs	r3, r3, r4
 80208c6:	089b      	lsrs	r3, r3, #2
 80208c8:	3301      	adds	r3, #1
 80208ca:	009b      	lsls	r3, r3, #2
 80208cc:	9a01      	ldr	r2, [sp, #4]
 80208ce:	18d3      	adds	r3, r2, r3
 80208d0:	2200      	movs	r2, #0
 80208d2:	c304      	stmia	r3!, {r2}
 80208d4:	429f      	cmp	r7, r3
 80208d6:	d2fc      	bcs.n	80208d2 <__hexnan+0xe6>
 80208d8:	683b      	ldr	r3, [r7, #0]
 80208da:	2b00      	cmp	r3, #0
 80208dc:	d104      	bne.n	80208e8 <__hexnan+0xfc>
 80208de:	9b01      	ldr	r3, [sp, #4]
 80208e0:	429f      	cmp	r7, r3
 80208e2:	d127      	bne.n	8020934 <__hexnan+0x148>
 80208e4:	2301      	movs	r3, #1
 80208e6:	603b      	str	r3, [r7, #0]
 80208e8:	2005      	movs	r0, #5
 80208ea:	b00b      	add	sp, #44	@ 0x2c
 80208ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208ee:	9b03      	ldr	r3, [sp, #12]
 80208f0:	3501      	adds	r5, #1
 80208f2:	3301      	adds	r3, #1
 80208f4:	9303      	str	r3, [sp, #12]
 80208f6:	2d08      	cmp	r5, #8
 80208f8:	dd06      	ble.n	8020908 <__hexnan+0x11c>
 80208fa:	9b01      	ldr	r3, [sp, #4]
 80208fc:	429c      	cmp	r4, r3
 80208fe:	d9ba      	bls.n	8020876 <__hexnan+0x8a>
 8020900:	2300      	movs	r3, #0
 8020902:	2501      	movs	r5, #1
 8020904:	3c04      	subs	r4, #4
 8020906:	6023      	str	r3, [r4, #0]
 8020908:	220f      	movs	r2, #15
 802090a:	6823      	ldr	r3, [r4, #0]
 802090c:	4010      	ands	r0, r2
 802090e:	011b      	lsls	r3, r3, #4
 8020910:	4303      	orrs	r3, r0
 8020912:	6023      	str	r3, [r4, #0]
 8020914:	e7af      	b.n	8020876 <__hexnan+0x8a>
 8020916:	9b06      	ldr	r3, [sp, #24]
 8020918:	2b00      	cmp	r3, #0
 802091a:	d0dd      	beq.n	80208d8 <__hexnan+0xec>
 802091c:	2320      	movs	r3, #32
 802091e:	9a06      	ldr	r2, [sp, #24]
 8020920:	9902      	ldr	r1, [sp, #8]
 8020922:	1a9b      	subs	r3, r3, r2
 8020924:	2201      	movs	r2, #1
 8020926:	4252      	negs	r2, r2
 8020928:	40da      	lsrs	r2, r3
 802092a:	3904      	subs	r1, #4
 802092c:	680b      	ldr	r3, [r1, #0]
 802092e:	4013      	ands	r3, r2
 8020930:	600b      	str	r3, [r1, #0]
 8020932:	e7d1      	b.n	80208d8 <__hexnan+0xec>
 8020934:	3f04      	subs	r7, #4
 8020936:	e7cf      	b.n	80208d8 <__hexnan+0xec>
 8020938:	2004      	movs	r0, #4
 802093a:	e7d6      	b.n	80208ea <__hexnan+0xfe>

0802093c <malloc>:
 802093c:	b510      	push	{r4, lr}
 802093e:	4b03      	ldr	r3, [pc, #12]	@ (802094c <malloc+0x10>)
 8020940:	0001      	movs	r1, r0
 8020942:	6818      	ldr	r0, [r3, #0]
 8020944:	f000 f826 	bl	8020994 <_malloc_r>
 8020948:	bd10      	pop	{r4, pc}
 802094a:	46c0      	nop			@ (mov r8, r8)
 802094c:	200003c8 	.word	0x200003c8

08020950 <sbrk_aligned>:
 8020950:	b570      	push	{r4, r5, r6, lr}
 8020952:	4e0f      	ldr	r6, [pc, #60]	@ (8020990 <sbrk_aligned+0x40>)
 8020954:	000d      	movs	r5, r1
 8020956:	6831      	ldr	r1, [r6, #0]
 8020958:	0004      	movs	r4, r0
 802095a:	2900      	cmp	r1, #0
 802095c:	d102      	bne.n	8020964 <sbrk_aligned+0x14>
 802095e:	f001 f989 	bl	8021c74 <_sbrk_r>
 8020962:	6030      	str	r0, [r6, #0]
 8020964:	0029      	movs	r1, r5
 8020966:	0020      	movs	r0, r4
 8020968:	f001 f984 	bl	8021c74 <_sbrk_r>
 802096c:	1c43      	adds	r3, r0, #1
 802096e:	d103      	bne.n	8020978 <sbrk_aligned+0x28>
 8020970:	2501      	movs	r5, #1
 8020972:	426d      	negs	r5, r5
 8020974:	0028      	movs	r0, r5
 8020976:	bd70      	pop	{r4, r5, r6, pc}
 8020978:	2303      	movs	r3, #3
 802097a:	1cc5      	adds	r5, r0, #3
 802097c:	439d      	bics	r5, r3
 802097e:	42a8      	cmp	r0, r5
 8020980:	d0f8      	beq.n	8020974 <sbrk_aligned+0x24>
 8020982:	1a29      	subs	r1, r5, r0
 8020984:	0020      	movs	r0, r4
 8020986:	f001 f975 	bl	8021c74 <_sbrk_r>
 802098a:	3001      	adds	r0, #1
 802098c:	d1f2      	bne.n	8020974 <sbrk_aligned+0x24>
 802098e:	e7ef      	b.n	8020970 <sbrk_aligned+0x20>
 8020990:	20003914 	.word	0x20003914

08020994 <_malloc_r>:
 8020994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020996:	2203      	movs	r2, #3
 8020998:	1ccb      	adds	r3, r1, #3
 802099a:	4393      	bics	r3, r2
 802099c:	3308      	adds	r3, #8
 802099e:	0005      	movs	r5, r0
 80209a0:	001f      	movs	r7, r3
 80209a2:	2b0c      	cmp	r3, #12
 80209a4:	d234      	bcs.n	8020a10 <_malloc_r+0x7c>
 80209a6:	270c      	movs	r7, #12
 80209a8:	42b9      	cmp	r1, r7
 80209aa:	d833      	bhi.n	8020a14 <_malloc_r+0x80>
 80209ac:	0028      	movs	r0, r5
 80209ae:	f000 f883 	bl	8020ab8 <__malloc_lock>
 80209b2:	4e37      	ldr	r6, [pc, #220]	@ (8020a90 <_malloc_r+0xfc>)
 80209b4:	6833      	ldr	r3, [r6, #0]
 80209b6:	001c      	movs	r4, r3
 80209b8:	2c00      	cmp	r4, #0
 80209ba:	d12f      	bne.n	8020a1c <_malloc_r+0x88>
 80209bc:	0039      	movs	r1, r7
 80209be:	0028      	movs	r0, r5
 80209c0:	f7ff ffc6 	bl	8020950 <sbrk_aligned>
 80209c4:	0004      	movs	r4, r0
 80209c6:	1c43      	adds	r3, r0, #1
 80209c8:	d15f      	bne.n	8020a8a <_malloc_r+0xf6>
 80209ca:	6834      	ldr	r4, [r6, #0]
 80209cc:	9400      	str	r4, [sp, #0]
 80209ce:	9b00      	ldr	r3, [sp, #0]
 80209d0:	2b00      	cmp	r3, #0
 80209d2:	d14a      	bne.n	8020a6a <_malloc_r+0xd6>
 80209d4:	2c00      	cmp	r4, #0
 80209d6:	d052      	beq.n	8020a7e <_malloc_r+0xea>
 80209d8:	6823      	ldr	r3, [r4, #0]
 80209da:	0028      	movs	r0, r5
 80209dc:	18e3      	adds	r3, r4, r3
 80209de:	9900      	ldr	r1, [sp, #0]
 80209e0:	9301      	str	r3, [sp, #4]
 80209e2:	f001 f947 	bl	8021c74 <_sbrk_r>
 80209e6:	9b01      	ldr	r3, [sp, #4]
 80209e8:	4283      	cmp	r3, r0
 80209ea:	d148      	bne.n	8020a7e <_malloc_r+0xea>
 80209ec:	6823      	ldr	r3, [r4, #0]
 80209ee:	0028      	movs	r0, r5
 80209f0:	1aff      	subs	r7, r7, r3
 80209f2:	0039      	movs	r1, r7
 80209f4:	f7ff ffac 	bl	8020950 <sbrk_aligned>
 80209f8:	3001      	adds	r0, #1
 80209fa:	d040      	beq.n	8020a7e <_malloc_r+0xea>
 80209fc:	6823      	ldr	r3, [r4, #0]
 80209fe:	19db      	adds	r3, r3, r7
 8020a00:	6023      	str	r3, [r4, #0]
 8020a02:	6833      	ldr	r3, [r6, #0]
 8020a04:	685a      	ldr	r2, [r3, #4]
 8020a06:	2a00      	cmp	r2, #0
 8020a08:	d133      	bne.n	8020a72 <_malloc_r+0xde>
 8020a0a:	9b00      	ldr	r3, [sp, #0]
 8020a0c:	6033      	str	r3, [r6, #0]
 8020a0e:	e019      	b.n	8020a44 <_malloc_r+0xb0>
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	dac9      	bge.n	80209a8 <_malloc_r+0x14>
 8020a14:	230c      	movs	r3, #12
 8020a16:	602b      	str	r3, [r5, #0]
 8020a18:	2000      	movs	r0, #0
 8020a1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020a1c:	6821      	ldr	r1, [r4, #0]
 8020a1e:	1bc9      	subs	r1, r1, r7
 8020a20:	d420      	bmi.n	8020a64 <_malloc_r+0xd0>
 8020a22:	290b      	cmp	r1, #11
 8020a24:	d90a      	bls.n	8020a3c <_malloc_r+0xa8>
 8020a26:	19e2      	adds	r2, r4, r7
 8020a28:	6027      	str	r7, [r4, #0]
 8020a2a:	42a3      	cmp	r3, r4
 8020a2c:	d104      	bne.n	8020a38 <_malloc_r+0xa4>
 8020a2e:	6032      	str	r2, [r6, #0]
 8020a30:	6863      	ldr	r3, [r4, #4]
 8020a32:	6011      	str	r1, [r2, #0]
 8020a34:	6053      	str	r3, [r2, #4]
 8020a36:	e005      	b.n	8020a44 <_malloc_r+0xb0>
 8020a38:	605a      	str	r2, [r3, #4]
 8020a3a:	e7f9      	b.n	8020a30 <_malloc_r+0x9c>
 8020a3c:	6862      	ldr	r2, [r4, #4]
 8020a3e:	42a3      	cmp	r3, r4
 8020a40:	d10e      	bne.n	8020a60 <_malloc_r+0xcc>
 8020a42:	6032      	str	r2, [r6, #0]
 8020a44:	0028      	movs	r0, r5
 8020a46:	f000 f83f 	bl	8020ac8 <__malloc_unlock>
 8020a4a:	0020      	movs	r0, r4
 8020a4c:	2207      	movs	r2, #7
 8020a4e:	300b      	adds	r0, #11
 8020a50:	1d23      	adds	r3, r4, #4
 8020a52:	4390      	bics	r0, r2
 8020a54:	1ac2      	subs	r2, r0, r3
 8020a56:	4298      	cmp	r0, r3
 8020a58:	d0df      	beq.n	8020a1a <_malloc_r+0x86>
 8020a5a:	1a1b      	subs	r3, r3, r0
 8020a5c:	50a3      	str	r3, [r4, r2]
 8020a5e:	e7dc      	b.n	8020a1a <_malloc_r+0x86>
 8020a60:	605a      	str	r2, [r3, #4]
 8020a62:	e7ef      	b.n	8020a44 <_malloc_r+0xb0>
 8020a64:	0023      	movs	r3, r4
 8020a66:	6864      	ldr	r4, [r4, #4]
 8020a68:	e7a6      	b.n	80209b8 <_malloc_r+0x24>
 8020a6a:	9c00      	ldr	r4, [sp, #0]
 8020a6c:	6863      	ldr	r3, [r4, #4]
 8020a6e:	9300      	str	r3, [sp, #0]
 8020a70:	e7ad      	b.n	80209ce <_malloc_r+0x3a>
 8020a72:	001a      	movs	r2, r3
 8020a74:	685b      	ldr	r3, [r3, #4]
 8020a76:	42a3      	cmp	r3, r4
 8020a78:	d1fb      	bne.n	8020a72 <_malloc_r+0xde>
 8020a7a:	2300      	movs	r3, #0
 8020a7c:	e7da      	b.n	8020a34 <_malloc_r+0xa0>
 8020a7e:	230c      	movs	r3, #12
 8020a80:	0028      	movs	r0, r5
 8020a82:	602b      	str	r3, [r5, #0]
 8020a84:	f000 f820 	bl	8020ac8 <__malloc_unlock>
 8020a88:	e7c6      	b.n	8020a18 <_malloc_r+0x84>
 8020a8a:	6007      	str	r7, [r0, #0]
 8020a8c:	e7da      	b.n	8020a44 <_malloc_r+0xb0>
 8020a8e:	46c0      	nop			@ (mov r8, r8)
 8020a90:	20003918 	.word	0x20003918

08020a94 <__ascii_mbtowc>:
 8020a94:	b082      	sub	sp, #8
 8020a96:	2900      	cmp	r1, #0
 8020a98:	d100      	bne.n	8020a9c <__ascii_mbtowc+0x8>
 8020a9a:	a901      	add	r1, sp, #4
 8020a9c:	1e10      	subs	r0, r2, #0
 8020a9e:	d006      	beq.n	8020aae <__ascii_mbtowc+0x1a>
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	d006      	beq.n	8020ab2 <__ascii_mbtowc+0x1e>
 8020aa4:	7813      	ldrb	r3, [r2, #0]
 8020aa6:	600b      	str	r3, [r1, #0]
 8020aa8:	7810      	ldrb	r0, [r2, #0]
 8020aaa:	1e43      	subs	r3, r0, #1
 8020aac:	4198      	sbcs	r0, r3
 8020aae:	b002      	add	sp, #8
 8020ab0:	4770      	bx	lr
 8020ab2:	2002      	movs	r0, #2
 8020ab4:	4240      	negs	r0, r0
 8020ab6:	e7fa      	b.n	8020aae <__ascii_mbtowc+0x1a>

08020ab8 <__malloc_lock>:
 8020ab8:	b510      	push	{r4, lr}
 8020aba:	4802      	ldr	r0, [pc, #8]	@ (8020ac4 <__malloc_lock+0xc>)
 8020abc:	f7fe fcfb 	bl	801f4b6 <__retarget_lock_acquire_recursive>
 8020ac0:	bd10      	pop	{r4, pc}
 8020ac2:	46c0      	nop			@ (mov r8, r8)
 8020ac4:	20003910 	.word	0x20003910

08020ac8 <__malloc_unlock>:
 8020ac8:	b510      	push	{r4, lr}
 8020aca:	4802      	ldr	r0, [pc, #8]	@ (8020ad4 <__malloc_unlock+0xc>)
 8020acc:	f7fe fcf4 	bl	801f4b8 <__retarget_lock_release_recursive>
 8020ad0:	bd10      	pop	{r4, pc}
 8020ad2:	46c0      	nop			@ (mov r8, r8)
 8020ad4:	20003910 	.word	0x20003910

08020ad8 <_Balloc>:
 8020ad8:	b570      	push	{r4, r5, r6, lr}
 8020ada:	69c5      	ldr	r5, [r0, #28]
 8020adc:	0006      	movs	r6, r0
 8020ade:	000c      	movs	r4, r1
 8020ae0:	2d00      	cmp	r5, #0
 8020ae2:	d10e      	bne.n	8020b02 <_Balloc+0x2a>
 8020ae4:	2010      	movs	r0, #16
 8020ae6:	f7ff ff29 	bl	802093c <malloc>
 8020aea:	1e02      	subs	r2, r0, #0
 8020aec:	61f0      	str	r0, [r6, #28]
 8020aee:	d104      	bne.n	8020afa <_Balloc+0x22>
 8020af0:	216b      	movs	r1, #107	@ 0x6b
 8020af2:	4b19      	ldr	r3, [pc, #100]	@ (8020b58 <_Balloc+0x80>)
 8020af4:	4819      	ldr	r0, [pc, #100]	@ (8020b5c <_Balloc+0x84>)
 8020af6:	f001 f8cf 	bl	8021c98 <__assert_func>
 8020afa:	6045      	str	r5, [r0, #4]
 8020afc:	6085      	str	r5, [r0, #8]
 8020afe:	6005      	str	r5, [r0, #0]
 8020b00:	60c5      	str	r5, [r0, #12]
 8020b02:	69f5      	ldr	r5, [r6, #28]
 8020b04:	68eb      	ldr	r3, [r5, #12]
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	d013      	beq.n	8020b32 <_Balloc+0x5a>
 8020b0a:	69f3      	ldr	r3, [r6, #28]
 8020b0c:	00a2      	lsls	r2, r4, #2
 8020b0e:	68db      	ldr	r3, [r3, #12]
 8020b10:	189b      	adds	r3, r3, r2
 8020b12:	6818      	ldr	r0, [r3, #0]
 8020b14:	2800      	cmp	r0, #0
 8020b16:	d118      	bne.n	8020b4a <_Balloc+0x72>
 8020b18:	2101      	movs	r1, #1
 8020b1a:	000d      	movs	r5, r1
 8020b1c:	40a5      	lsls	r5, r4
 8020b1e:	1d6a      	adds	r2, r5, #5
 8020b20:	0030      	movs	r0, r6
 8020b22:	0092      	lsls	r2, r2, #2
 8020b24:	f001 f8d6 	bl	8021cd4 <_calloc_r>
 8020b28:	2800      	cmp	r0, #0
 8020b2a:	d00c      	beq.n	8020b46 <_Balloc+0x6e>
 8020b2c:	6044      	str	r4, [r0, #4]
 8020b2e:	6085      	str	r5, [r0, #8]
 8020b30:	e00d      	b.n	8020b4e <_Balloc+0x76>
 8020b32:	2221      	movs	r2, #33	@ 0x21
 8020b34:	2104      	movs	r1, #4
 8020b36:	0030      	movs	r0, r6
 8020b38:	f001 f8cc 	bl	8021cd4 <_calloc_r>
 8020b3c:	69f3      	ldr	r3, [r6, #28]
 8020b3e:	60e8      	str	r0, [r5, #12]
 8020b40:	68db      	ldr	r3, [r3, #12]
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d1e1      	bne.n	8020b0a <_Balloc+0x32>
 8020b46:	2000      	movs	r0, #0
 8020b48:	bd70      	pop	{r4, r5, r6, pc}
 8020b4a:	6802      	ldr	r2, [r0, #0]
 8020b4c:	601a      	str	r2, [r3, #0]
 8020b4e:	2300      	movs	r3, #0
 8020b50:	6103      	str	r3, [r0, #16]
 8020b52:	60c3      	str	r3, [r0, #12]
 8020b54:	e7f8      	b.n	8020b48 <_Balloc+0x70>
 8020b56:	46c0      	nop			@ (mov r8, r8)
 8020b58:	08024772 	.word	0x08024772
 8020b5c:	08024852 	.word	0x08024852

08020b60 <_Bfree>:
 8020b60:	b570      	push	{r4, r5, r6, lr}
 8020b62:	69c6      	ldr	r6, [r0, #28]
 8020b64:	0005      	movs	r5, r0
 8020b66:	000c      	movs	r4, r1
 8020b68:	2e00      	cmp	r6, #0
 8020b6a:	d10e      	bne.n	8020b8a <_Bfree+0x2a>
 8020b6c:	2010      	movs	r0, #16
 8020b6e:	f7ff fee5 	bl	802093c <malloc>
 8020b72:	1e02      	subs	r2, r0, #0
 8020b74:	61e8      	str	r0, [r5, #28]
 8020b76:	d104      	bne.n	8020b82 <_Bfree+0x22>
 8020b78:	218f      	movs	r1, #143	@ 0x8f
 8020b7a:	4b09      	ldr	r3, [pc, #36]	@ (8020ba0 <_Bfree+0x40>)
 8020b7c:	4809      	ldr	r0, [pc, #36]	@ (8020ba4 <_Bfree+0x44>)
 8020b7e:	f001 f88b 	bl	8021c98 <__assert_func>
 8020b82:	6046      	str	r6, [r0, #4]
 8020b84:	6086      	str	r6, [r0, #8]
 8020b86:	6006      	str	r6, [r0, #0]
 8020b88:	60c6      	str	r6, [r0, #12]
 8020b8a:	2c00      	cmp	r4, #0
 8020b8c:	d007      	beq.n	8020b9e <_Bfree+0x3e>
 8020b8e:	69eb      	ldr	r3, [r5, #28]
 8020b90:	6862      	ldr	r2, [r4, #4]
 8020b92:	68db      	ldr	r3, [r3, #12]
 8020b94:	0092      	lsls	r2, r2, #2
 8020b96:	189b      	adds	r3, r3, r2
 8020b98:	681a      	ldr	r2, [r3, #0]
 8020b9a:	6022      	str	r2, [r4, #0]
 8020b9c:	601c      	str	r4, [r3, #0]
 8020b9e:	bd70      	pop	{r4, r5, r6, pc}
 8020ba0:	08024772 	.word	0x08024772
 8020ba4:	08024852 	.word	0x08024852

08020ba8 <__multadd>:
 8020ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020baa:	000f      	movs	r7, r1
 8020bac:	9001      	str	r0, [sp, #4]
 8020bae:	000c      	movs	r4, r1
 8020bb0:	001e      	movs	r6, r3
 8020bb2:	2000      	movs	r0, #0
 8020bb4:	690d      	ldr	r5, [r1, #16]
 8020bb6:	3714      	adds	r7, #20
 8020bb8:	683b      	ldr	r3, [r7, #0]
 8020bba:	3001      	adds	r0, #1
 8020bbc:	b299      	uxth	r1, r3
 8020bbe:	4351      	muls	r1, r2
 8020bc0:	0c1b      	lsrs	r3, r3, #16
 8020bc2:	4353      	muls	r3, r2
 8020bc4:	1989      	adds	r1, r1, r6
 8020bc6:	0c0e      	lsrs	r6, r1, #16
 8020bc8:	199b      	adds	r3, r3, r6
 8020bca:	0c1e      	lsrs	r6, r3, #16
 8020bcc:	b289      	uxth	r1, r1
 8020bce:	041b      	lsls	r3, r3, #16
 8020bd0:	185b      	adds	r3, r3, r1
 8020bd2:	c708      	stmia	r7!, {r3}
 8020bd4:	4285      	cmp	r5, r0
 8020bd6:	dcef      	bgt.n	8020bb8 <__multadd+0x10>
 8020bd8:	2e00      	cmp	r6, #0
 8020bda:	d022      	beq.n	8020c22 <__multadd+0x7a>
 8020bdc:	68a3      	ldr	r3, [r4, #8]
 8020bde:	42ab      	cmp	r3, r5
 8020be0:	dc19      	bgt.n	8020c16 <__multadd+0x6e>
 8020be2:	6861      	ldr	r1, [r4, #4]
 8020be4:	9801      	ldr	r0, [sp, #4]
 8020be6:	3101      	adds	r1, #1
 8020be8:	f7ff ff76 	bl	8020ad8 <_Balloc>
 8020bec:	1e07      	subs	r7, r0, #0
 8020bee:	d105      	bne.n	8020bfc <__multadd+0x54>
 8020bf0:	003a      	movs	r2, r7
 8020bf2:	21ba      	movs	r1, #186	@ 0xba
 8020bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8020c28 <__multadd+0x80>)
 8020bf6:	480d      	ldr	r0, [pc, #52]	@ (8020c2c <__multadd+0x84>)
 8020bf8:	f001 f84e 	bl	8021c98 <__assert_func>
 8020bfc:	0021      	movs	r1, r4
 8020bfe:	6922      	ldr	r2, [r4, #16]
 8020c00:	310c      	adds	r1, #12
 8020c02:	3202      	adds	r2, #2
 8020c04:	0092      	lsls	r2, r2, #2
 8020c06:	300c      	adds	r0, #12
 8020c08:	f7fe fc62 	bl	801f4d0 <memcpy>
 8020c0c:	0021      	movs	r1, r4
 8020c0e:	9801      	ldr	r0, [sp, #4]
 8020c10:	f7ff ffa6 	bl	8020b60 <_Bfree>
 8020c14:	003c      	movs	r4, r7
 8020c16:	1d2b      	adds	r3, r5, #4
 8020c18:	009b      	lsls	r3, r3, #2
 8020c1a:	18e3      	adds	r3, r4, r3
 8020c1c:	3501      	adds	r5, #1
 8020c1e:	605e      	str	r6, [r3, #4]
 8020c20:	6125      	str	r5, [r4, #16]
 8020c22:	0020      	movs	r0, r4
 8020c24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020c26:	46c0      	nop			@ (mov r8, r8)
 8020c28:	080247e1 	.word	0x080247e1
 8020c2c:	08024852 	.word	0x08024852

08020c30 <__s2b>:
 8020c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020c32:	0007      	movs	r7, r0
 8020c34:	0018      	movs	r0, r3
 8020c36:	000c      	movs	r4, r1
 8020c38:	3008      	adds	r0, #8
 8020c3a:	2109      	movs	r1, #9
 8020c3c:	9301      	str	r3, [sp, #4]
 8020c3e:	0015      	movs	r5, r2
 8020c40:	f7df fb3a 	bl	80002b8 <__divsi3>
 8020c44:	2301      	movs	r3, #1
 8020c46:	2100      	movs	r1, #0
 8020c48:	4283      	cmp	r3, r0
 8020c4a:	db0a      	blt.n	8020c62 <__s2b+0x32>
 8020c4c:	0038      	movs	r0, r7
 8020c4e:	f7ff ff43 	bl	8020ad8 <_Balloc>
 8020c52:	1e01      	subs	r1, r0, #0
 8020c54:	d108      	bne.n	8020c68 <__s2b+0x38>
 8020c56:	000a      	movs	r2, r1
 8020c58:	4b19      	ldr	r3, [pc, #100]	@ (8020cc0 <__s2b+0x90>)
 8020c5a:	481a      	ldr	r0, [pc, #104]	@ (8020cc4 <__s2b+0x94>)
 8020c5c:	31d3      	adds	r1, #211	@ 0xd3
 8020c5e:	f001 f81b 	bl	8021c98 <__assert_func>
 8020c62:	005b      	lsls	r3, r3, #1
 8020c64:	3101      	adds	r1, #1
 8020c66:	e7ef      	b.n	8020c48 <__s2b+0x18>
 8020c68:	9b08      	ldr	r3, [sp, #32]
 8020c6a:	6143      	str	r3, [r0, #20]
 8020c6c:	2301      	movs	r3, #1
 8020c6e:	6103      	str	r3, [r0, #16]
 8020c70:	2d09      	cmp	r5, #9
 8020c72:	dd18      	ble.n	8020ca6 <__s2b+0x76>
 8020c74:	0023      	movs	r3, r4
 8020c76:	3309      	adds	r3, #9
 8020c78:	001e      	movs	r6, r3
 8020c7a:	9300      	str	r3, [sp, #0]
 8020c7c:	1964      	adds	r4, r4, r5
 8020c7e:	7833      	ldrb	r3, [r6, #0]
 8020c80:	220a      	movs	r2, #10
 8020c82:	0038      	movs	r0, r7
 8020c84:	3b30      	subs	r3, #48	@ 0x30
 8020c86:	f7ff ff8f 	bl	8020ba8 <__multadd>
 8020c8a:	3601      	adds	r6, #1
 8020c8c:	0001      	movs	r1, r0
 8020c8e:	42a6      	cmp	r6, r4
 8020c90:	d1f5      	bne.n	8020c7e <__s2b+0x4e>
 8020c92:	002c      	movs	r4, r5
 8020c94:	9b00      	ldr	r3, [sp, #0]
 8020c96:	3c08      	subs	r4, #8
 8020c98:	191c      	adds	r4, r3, r4
 8020c9a:	002e      	movs	r6, r5
 8020c9c:	9b01      	ldr	r3, [sp, #4]
 8020c9e:	429e      	cmp	r6, r3
 8020ca0:	db04      	blt.n	8020cac <__s2b+0x7c>
 8020ca2:	0008      	movs	r0, r1
 8020ca4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020ca6:	2509      	movs	r5, #9
 8020ca8:	340a      	adds	r4, #10
 8020caa:	e7f6      	b.n	8020c9a <__s2b+0x6a>
 8020cac:	1b63      	subs	r3, r4, r5
 8020cae:	5d9b      	ldrb	r3, [r3, r6]
 8020cb0:	220a      	movs	r2, #10
 8020cb2:	0038      	movs	r0, r7
 8020cb4:	3b30      	subs	r3, #48	@ 0x30
 8020cb6:	f7ff ff77 	bl	8020ba8 <__multadd>
 8020cba:	3601      	adds	r6, #1
 8020cbc:	0001      	movs	r1, r0
 8020cbe:	e7ed      	b.n	8020c9c <__s2b+0x6c>
 8020cc0:	080247e1 	.word	0x080247e1
 8020cc4:	08024852 	.word	0x08024852

08020cc8 <__hi0bits>:
 8020cc8:	2280      	movs	r2, #128	@ 0x80
 8020cca:	0003      	movs	r3, r0
 8020ccc:	0252      	lsls	r2, r2, #9
 8020cce:	2000      	movs	r0, #0
 8020cd0:	4293      	cmp	r3, r2
 8020cd2:	d201      	bcs.n	8020cd8 <__hi0bits+0x10>
 8020cd4:	041b      	lsls	r3, r3, #16
 8020cd6:	3010      	adds	r0, #16
 8020cd8:	2280      	movs	r2, #128	@ 0x80
 8020cda:	0452      	lsls	r2, r2, #17
 8020cdc:	4293      	cmp	r3, r2
 8020cde:	d201      	bcs.n	8020ce4 <__hi0bits+0x1c>
 8020ce0:	3008      	adds	r0, #8
 8020ce2:	021b      	lsls	r3, r3, #8
 8020ce4:	2280      	movs	r2, #128	@ 0x80
 8020ce6:	0552      	lsls	r2, r2, #21
 8020ce8:	4293      	cmp	r3, r2
 8020cea:	d201      	bcs.n	8020cf0 <__hi0bits+0x28>
 8020cec:	3004      	adds	r0, #4
 8020cee:	011b      	lsls	r3, r3, #4
 8020cf0:	2280      	movs	r2, #128	@ 0x80
 8020cf2:	05d2      	lsls	r2, r2, #23
 8020cf4:	4293      	cmp	r3, r2
 8020cf6:	d201      	bcs.n	8020cfc <__hi0bits+0x34>
 8020cf8:	3002      	adds	r0, #2
 8020cfa:	009b      	lsls	r3, r3, #2
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	db03      	blt.n	8020d08 <__hi0bits+0x40>
 8020d00:	3001      	adds	r0, #1
 8020d02:	4213      	tst	r3, r2
 8020d04:	d100      	bne.n	8020d08 <__hi0bits+0x40>
 8020d06:	2020      	movs	r0, #32
 8020d08:	4770      	bx	lr

08020d0a <__lo0bits>:
 8020d0a:	6803      	ldr	r3, [r0, #0]
 8020d0c:	0001      	movs	r1, r0
 8020d0e:	2207      	movs	r2, #7
 8020d10:	0018      	movs	r0, r3
 8020d12:	4010      	ands	r0, r2
 8020d14:	4213      	tst	r3, r2
 8020d16:	d00d      	beq.n	8020d34 <__lo0bits+0x2a>
 8020d18:	3a06      	subs	r2, #6
 8020d1a:	2000      	movs	r0, #0
 8020d1c:	4213      	tst	r3, r2
 8020d1e:	d105      	bne.n	8020d2c <__lo0bits+0x22>
 8020d20:	3002      	adds	r0, #2
 8020d22:	4203      	tst	r3, r0
 8020d24:	d003      	beq.n	8020d2e <__lo0bits+0x24>
 8020d26:	40d3      	lsrs	r3, r2
 8020d28:	0010      	movs	r0, r2
 8020d2a:	600b      	str	r3, [r1, #0]
 8020d2c:	4770      	bx	lr
 8020d2e:	089b      	lsrs	r3, r3, #2
 8020d30:	600b      	str	r3, [r1, #0]
 8020d32:	e7fb      	b.n	8020d2c <__lo0bits+0x22>
 8020d34:	b29a      	uxth	r2, r3
 8020d36:	2a00      	cmp	r2, #0
 8020d38:	d101      	bne.n	8020d3e <__lo0bits+0x34>
 8020d3a:	2010      	movs	r0, #16
 8020d3c:	0c1b      	lsrs	r3, r3, #16
 8020d3e:	b2da      	uxtb	r2, r3
 8020d40:	2a00      	cmp	r2, #0
 8020d42:	d101      	bne.n	8020d48 <__lo0bits+0x3e>
 8020d44:	3008      	adds	r0, #8
 8020d46:	0a1b      	lsrs	r3, r3, #8
 8020d48:	071a      	lsls	r2, r3, #28
 8020d4a:	d101      	bne.n	8020d50 <__lo0bits+0x46>
 8020d4c:	3004      	adds	r0, #4
 8020d4e:	091b      	lsrs	r3, r3, #4
 8020d50:	079a      	lsls	r2, r3, #30
 8020d52:	d101      	bne.n	8020d58 <__lo0bits+0x4e>
 8020d54:	3002      	adds	r0, #2
 8020d56:	089b      	lsrs	r3, r3, #2
 8020d58:	07da      	lsls	r2, r3, #31
 8020d5a:	d4e9      	bmi.n	8020d30 <__lo0bits+0x26>
 8020d5c:	3001      	adds	r0, #1
 8020d5e:	085b      	lsrs	r3, r3, #1
 8020d60:	d1e6      	bne.n	8020d30 <__lo0bits+0x26>
 8020d62:	2020      	movs	r0, #32
 8020d64:	e7e2      	b.n	8020d2c <__lo0bits+0x22>
	...

08020d68 <__i2b>:
 8020d68:	b510      	push	{r4, lr}
 8020d6a:	000c      	movs	r4, r1
 8020d6c:	2101      	movs	r1, #1
 8020d6e:	f7ff feb3 	bl	8020ad8 <_Balloc>
 8020d72:	2800      	cmp	r0, #0
 8020d74:	d107      	bne.n	8020d86 <__i2b+0x1e>
 8020d76:	2146      	movs	r1, #70	@ 0x46
 8020d78:	4c05      	ldr	r4, [pc, #20]	@ (8020d90 <__i2b+0x28>)
 8020d7a:	0002      	movs	r2, r0
 8020d7c:	4b05      	ldr	r3, [pc, #20]	@ (8020d94 <__i2b+0x2c>)
 8020d7e:	0020      	movs	r0, r4
 8020d80:	31ff      	adds	r1, #255	@ 0xff
 8020d82:	f000 ff89 	bl	8021c98 <__assert_func>
 8020d86:	2301      	movs	r3, #1
 8020d88:	6144      	str	r4, [r0, #20]
 8020d8a:	6103      	str	r3, [r0, #16]
 8020d8c:	bd10      	pop	{r4, pc}
 8020d8e:	46c0      	nop			@ (mov r8, r8)
 8020d90:	08024852 	.word	0x08024852
 8020d94:	080247e1 	.word	0x080247e1

08020d98 <__multiply>:
 8020d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d9a:	0014      	movs	r4, r2
 8020d9c:	690a      	ldr	r2, [r1, #16]
 8020d9e:	6923      	ldr	r3, [r4, #16]
 8020da0:	000d      	movs	r5, r1
 8020da2:	b08b      	sub	sp, #44	@ 0x2c
 8020da4:	429a      	cmp	r2, r3
 8020da6:	db02      	blt.n	8020dae <__multiply+0x16>
 8020da8:	0023      	movs	r3, r4
 8020daa:	000c      	movs	r4, r1
 8020dac:	001d      	movs	r5, r3
 8020dae:	6927      	ldr	r7, [r4, #16]
 8020db0:	692e      	ldr	r6, [r5, #16]
 8020db2:	6861      	ldr	r1, [r4, #4]
 8020db4:	19bb      	adds	r3, r7, r6
 8020db6:	9303      	str	r3, [sp, #12]
 8020db8:	68a3      	ldr	r3, [r4, #8]
 8020dba:	19ba      	adds	r2, r7, r6
 8020dbc:	4293      	cmp	r3, r2
 8020dbe:	da00      	bge.n	8020dc2 <__multiply+0x2a>
 8020dc0:	3101      	adds	r1, #1
 8020dc2:	f7ff fe89 	bl	8020ad8 <_Balloc>
 8020dc6:	9002      	str	r0, [sp, #8]
 8020dc8:	2800      	cmp	r0, #0
 8020dca:	d106      	bne.n	8020dda <__multiply+0x42>
 8020dcc:	21b1      	movs	r1, #177	@ 0xb1
 8020dce:	4b49      	ldr	r3, [pc, #292]	@ (8020ef4 <__multiply+0x15c>)
 8020dd0:	4849      	ldr	r0, [pc, #292]	@ (8020ef8 <__multiply+0x160>)
 8020dd2:	9a02      	ldr	r2, [sp, #8]
 8020dd4:	0049      	lsls	r1, r1, #1
 8020dd6:	f000 ff5f 	bl	8021c98 <__assert_func>
 8020dda:	9b02      	ldr	r3, [sp, #8]
 8020ddc:	2200      	movs	r2, #0
 8020dde:	3314      	adds	r3, #20
 8020de0:	469c      	mov	ip, r3
 8020de2:	19bb      	adds	r3, r7, r6
 8020de4:	009b      	lsls	r3, r3, #2
 8020de6:	4463      	add	r3, ip
 8020de8:	9304      	str	r3, [sp, #16]
 8020dea:	4663      	mov	r3, ip
 8020dec:	9904      	ldr	r1, [sp, #16]
 8020dee:	428b      	cmp	r3, r1
 8020df0:	d32a      	bcc.n	8020e48 <__multiply+0xb0>
 8020df2:	0023      	movs	r3, r4
 8020df4:	00bf      	lsls	r7, r7, #2
 8020df6:	3314      	adds	r3, #20
 8020df8:	3514      	adds	r5, #20
 8020dfa:	9308      	str	r3, [sp, #32]
 8020dfc:	00b6      	lsls	r6, r6, #2
 8020dfe:	19db      	adds	r3, r3, r7
 8020e00:	9305      	str	r3, [sp, #20]
 8020e02:	19ab      	adds	r3, r5, r6
 8020e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e06:	2304      	movs	r3, #4
 8020e08:	9306      	str	r3, [sp, #24]
 8020e0a:	0023      	movs	r3, r4
 8020e0c:	9a05      	ldr	r2, [sp, #20]
 8020e0e:	3315      	adds	r3, #21
 8020e10:	9501      	str	r5, [sp, #4]
 8020e12:	429a      	cmp	r2, r3
 8020e14:	d305      	bcc.n	8020e22 <__multiply+0x8a>
 8020e16:	1b13      	subs	r3, r2, r4
 8020e18:	3b15      	subs	r3, #21
 8020e1a:	089b      	lsrs	r3, r3, #2
 8020e1c:	3301      	adds	r3, #1
 8020e1e:	009b      	lsls	r3, r3, #2
 8020e20:	9306      	str	r3, [sp, #24]
 8020e22:	9b01      	ldr	r3, [sp, #4]
 8020e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e26:	4293      	cmp	r3, r2
 8020e28:	d310      	bcc.n	8020e4c <__multiply+0xb4>
 8020e2a:	9b03      	ldr	r3, [sp, #12]
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	dd05      	ble.n	8020e3c <__multiply+0xa4>
 8020e30:	9b04      	ldr	r3, [sp, #16]
 8020e32:	3b04      	subs	r3, #4
 8020e34:	9304      	str	r3, [sp, #16]
 8020e36:	681b      	ldr	r3, [r3, #0]
 8020e38:	2b00      	cmp	r3, #0
 8020e3a:	d056      	beq.n	8020eea <__multiply+0x152>
 8020e3c:	9b02      	ldr	r3, [sp, #8]
 8020e3e:	9a03      	ldr	r2, [sp, #12]
 8020e40:	0018      	movs	r0, r3
 8020e42:	611a      	str	r2, [r3, #16]
 8020e44:	b00b      	add	sp, #44	@ 0x2c
 8020e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e48:	c304      	stmia	r3!, {r2}
 8020e4a:	e7cf      	b.n	8020dec <__multiply+0x54>
 8020e4c:	9b01      	ldr	r3, [sp, #4]
 8020e4e:	6818      	ldr	r0, [r3, #0]
 8020e50:	b280      	uxth	r0, r0
 8020e52:	2800      	cmp	r0, #0
 8020e54:	d01e      	beq.n	8020e94 <__multiply+0xfc>
 8020e56:	4667      	mov	r7, ip
 8020e58:	2500      	movs	r5, #0
 8020e5a:	9e08      	ldr	r6, [sp, #32]
 8020e5c:	ce02      	ldmia	r6!, {r1}
 8020e5e:	683b      	ldr	r3, [r7, #0]
 8020e60:	9307      	str	r3, [sp, #28]
 8020e62:	b28b      	uxth	r3, r1
 8020e64:	4343      	muls	r3, r0
 8020e66:	001a      	movs	r2, r3
 8020e68:	466b      	mov	r3, sp
 8020e6a:	0c09      	lsrs	r1, r1, #16
 8020e6c:	8b9b      	ldrh	r3, [r3, #28]
 8020e6e:	4341      	muls	r1, r0
 8020e70:	18d3      	adds	r3, r2, r3
 8020e72:	9a07      	ldr	r2, [sp, #28]
 8020e74:	195b      	adds	r3, r3, r5
 8020e76:	0c12      	lsrs	r2, r2, #16
 8020e78:	1889      	adds	r1, r1, r2
 8020e7a:	0c1a      	lsrs	r2, r3, #16
 8020e7c:	188a      	adds	r2, r1, r2
 8020e7e:	b29b      	uxth	r3, r3
 8020e80:	0c15      	lsrs	r5, r2, #16
 8020e82:	0412      	lsls	r2, r2, #16
 8020e84:	431a      	orrs	r2, r3
 8020e86:	9b05      	ldr	r3, [sp, #20]
 8020e88:	c704      	stmia	r7!, {r2}
 8020e8a:	42b3      	cmp	r3, r6
 8020e8c:	d8e6      	bhi.n	8020e5c <__multiply+0xc4>
 8020e8e:	4663      	mov	r3, ip
 8020e90:	9a06      	ldr	r2, [sp, #24]
 8020e92:	509d      	str	r5, [r3, r2]
 8020e94:	9b01      	ldr	r3, [sp, #4]
 8020e96:	6818      	ldr	r0, [r3, #0]
 8020e98:	0c00      	lsrs	r0, r0, #16
 8020e9a:	d020      	beq.n	8020ede <__multiply+0x146>
 8020e9c:	4663      	mov	r3, ip
 8020e9e:	0025      	movs	r5, r4
 8020ea0:	4661      	mov	r1, ip
 8020ea2:	2700      	movs	r7, #0
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	3514      	adds	r5, #20
 8020ea8:	682a      	ldr	r2, [r5, #0]
 8020eaa:	680e      	ldr	r6, [r1, #0]
 8020eac:	b292      	uxth	r2, r2
 8020eae:	4342      	muls	r2, r0
 8020eb0:	0c36      	lsrs	r6, r6, #16
 8020eb2:	1992      	adds	r2, r2, r6
 8020eb4:	19d2      	adds	r2, r2, r7
 8020eb6:	0416      	lsls	r6, r2, #16
 8020eb8:	b29b      	uxth	r3, r3
 8020eba:	431e      	orrs	r6, r3
 8020ebc:	600e      	str	r6, [r1, #0]
 8020ebe:	cd40      	ldmia	r5!, {r6}
 8020ec0:	684b      	ldr	r3, [r1, #4]
 8020ec2:	0c36      	lsrs	r6, r6, #16
 8020ec4:	4346      	muls	r6, r0
 8020ec6:	b29b      	uxth	r3, r3
 8020ec8:	0c12      	lsrs	r2, r2, #16
 8020eca:	18f3      	adds	r3, r6, r3
 8020ecc:	189b      	adds	r3, r3, r2
 8020ece:	9a05      	ldr	r2, [sp, #20]
 8020ed0:	0c1f      	lsrs	r7, r3, #16
 8020ed2:	3104      	adds	r1, #4
 8020ed4:	42aa      	cmp	r2, r5
 8020ed6:	d8e7      	bhi.n	8020ea8 <__multiply+0x110>
 8020ed8:	4662      	mov	r2, ip
 8020eda:	9906      	ldr	r1, [sp, #24]
 8020edc:	5053      	str	r3, [r2, r1]
 8020ede:	9b01      	ldr	r3, [sp, #4]
 8020ee0:	3304      	adds	r3, #4
 8020ee2:	9301      	str	r3, [sp, #4]
 8020ee4:	2304      	movs	r3, #4
 8020ee6:	449c      	add	ip, r3
 8020ee8:	e79b      	b.n	8020e22 <__multiply+0x8a>
 8020eea:	9b03      	ldr	r3, [sp, #12]
 8020eec:	3b01      	subs	r3, #1
 8020eee:	9303      	str	r3, [sp, #12]
 8020ef0:	e79b      	b.n	8020e2a <__multiply+0x92>
 8020ef2:	46c0      	nop			@ (mov r8, r8)
 8020ef4:	080247e1 	.word	0x080247e1
 8020ef8:	08024852 	.word	0x08024852

08020efc <__pow5mult>:
 8020efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020efe:	2303      	movs	r3, #3
 8020f00:	0015      	movs	r5, r2
 8020f02:	0007      	movs	r7, r0
 8020f04:	000e      	movs	r6, r1
 8020f06:	401a      	ands	r2, r3
 8020f08:	421d      	tst	r5, r3
 8020f0a:	d008      	beq.n	8020f1e <__pow5mult+0x22>
 8020f0c:	4925      	ldr	r1, [pc, #148]	@ (8020fa4 <__pow5mult+0xa8>)
 8020f0e:	3a01      	subs	r2, #1
 8020f10:	0092      	lsls	r2, r2, #2
 8020f12:	5852      	ldr	r2, [r2, r1]
 8020f14:	2300      	movs	r3, #0
 8020f16:	0031      	movs	r1, r6
 8020f18:	f7ff fe46 	bl	8020ba8 <__multadd>
 8020f1c:	0006      	movs	r6, r0
 8020f1e:	10ad      	asrs	r5, r5, #2
 8020f20:	d03d      	beq.n	8020f9e <__pow5mult+0xa2>
 8020f22:	69fc      	ldr	r4, [r7, #28]
 8020f24:	2c00      	cmp	r4, #0
 8020f26:	d10f      	bne.n	8020f48 <__pow5mult+0x4c>
 8020f28:	2010      	movs	r0, #16
 8020f2a:	f7ff fd07 	bl	802093c <malloc>
 8020f2e:	1e02      	subs	r2, r0, #0
 8020f30:	61f8      	str	r0, [r7, #28]
 8020f32:	d105      	bne.n	8020f40 <__pow5mult+0x44>
 8020f34:	21b4      	movs	r1, #180	@ 0xb4
 8020f36:	4b1c      	ldr	r3, [pc, #112]	@ (8020fa8 <__pow5mult+0xac>)
 8020f38:	481c      	ldr	r0, [pc, #112]	@ (8020fac <__pow5mult+0xb0>)
 8020f3a:	31ff      	adds	r1, #255	@ 0xff
 8020f3c:	f000 feac 	bl	8021c98 <__assert_func>
 8020f40:	6044      	str	r4, [r0, #4]
 8020f42:	6084      	str	r4, [r0, #8]
 8020f44:	6004      	str	r4, [r0, #0]
 8020f46:	60c4      	str	r4, [r0, #12]
 8020f48:	69fb      	ldr	r3, [r7, #28]
 8020f4a:	689c      	ldr	r4, [r3, #8]
 8020f4c:	9301      	str	r3, [sp, #4]
 8020f4e:	2c00      	cmp	r4, #0
 8020f50:	d108      	bne.n	8020f64 <__pow5mult+0x68>
 8020f52:	0038      	movs	r0, r7
 8020f54:	4916      	ldr	r1, [pc, #88]	@ (8020fb0 <__pow5mult+0xb4>)
 8020f56:	f7ff ff07 	bl	8020d68 <__i2b>
 8020f5a:	9b01      	ldr	r3, [sp, #4]
 8020f5c:	0004      	movs	r4, r0
 8020f5e:	6098      	str	r0, [r3, #8]
 8020f60:	2300      	movs	r3, #0
 8020f62:	6003      	str	r3, [r0, #0]
 8020f64:	2301      	movs	r3, #1
 8020f66:	421d      	tst	r5, r3
 8020f68:	d00a      	beq.n	8020f80 <__pow5mult+0x84>
 8020f6a:	0031      	movs	r1, r6
 8020f6c:	0022      	movs	r2, r4
 8020f6e:	0038      	movs	r0, r7
 8020f70:	f7ff ff12 	bl	8020d98 <__multiply>
 8020f74:	0031      	movs	r1, r6
 8020f76:	9001      	str	r0, [sp, #4]
 8020f78:	0038      	movs	r0, r7
 8020f7a:	f7ff fdf1 	bl	8020b60 <_Bfree>
 8020f7e:	9e01      	ldr	r6, [sp, #4]
 8020f80:	106d      	asrs	r5, r5, #1
 8020f82:	d00c      	beq.n	8020f9e <__pow5mult+0xa2>
 8020f84:	6820      	ldr	r0, [r4, #0]
 8020f86:	2800      	cmp	r0, #0
 8020f88:	d107      	bne.n	8020f9a <__pow5mult+0x9e>
 8020f8a:	0022      	movs	r2, r4
 8020f8c:	0021      	movs	r1, r4
 8020f8e:	0038      	movs	r0, r7
 8020f90:	f7ff ff02 	bl	8020d98 <__multiply>
 8020f94:	2300      	movs	r3, #0
 8020f96:	6020      	str	r0, [r4, #0]
 8020f98:	6003      	str	r3, [r0, #0]
 8020f9a:	0004      	movs	r4, r0
 8020f9c:	e7e2      	b.n	8020f64 <__pow5mult+0x68>
 8020f9e:	0030      	movs	r0, r6
 8020fa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020fa2:	46c0      	nop			@ (mov r8, r8)
 8020fa4:	080248ac 	.word	0x080248ac
 8020fa8:	08024772 	.word	0x08024772
 8020fac:	08024852 	.word	0x08024852
 8020fb0:	00000271 	.word	0x00000271

08020fb4 <__lshift>:
 8020fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020fb6:	000c      	movs	r4, r1
 8020fb8:	0016      	movs	r6, r2
 8020fba:	6923      	ldr	r3, [r4, #16]
 8020fbc:	1157      	asrs	r7, r2, #5
 8020fbe:	b085      	sub	sp, #20
 8020fc0:	18fb      	adds	r3, r7, r3
 8020fc2:	9301      	str	r3, [sp, #4]
 8020fc4:	3301      	adds	r3, #1
 8020fc6:	9300      	str	r3, [sp, #0]
 8020fc8:	6849      	ldr	r1, [r1, #4]
 8020fca:	68a3      	ldr	r3, [r4, #8]
 8020fcc:	9002      	str	r0, [sp, #8]
 8020fce:	9a00      	ldr	r2, [sp, #0]
 8020fd0:	4293      	cmp	r3, r2
 8020fd2:	db10      	blt.n	8020ff6 <__lshift+0x42>
 8020fd4:	9802      	ldr	r0, [sp, #8]
 8020fd6:	f7ff fd7f 	bl	8020ad8 <_Balloc>
 8020fda:	2300      	movs	r3, #0
 8020fdc:	0001      	movs	r1, r0
 8020fde:	0005      	movs	r5, r0
 8020fe0:	001a      	movs	r2, r3
 8020fe2:	3114      	adds	r1, #20
 8020fe4:	4298      	cmp	r0, r3
 8020fe6:	d10c      	bne.n	8021002 <__lshift+0x4e>
 8020fe8:	21ef      	movs	r1, #239	@ 0xef
 8020fea:	002a      	movs	r2, r5
 8020fec:	4b25      	ldr	r3, [pc, #148]	@ (8021084 <__lshift+0xd0>)
 8020fee:	4826      	ldr	r0, [pc, #152]	@ (8021088 <__lshift+0xd4>)
 8020ff0:	0049      	lsls	r1, r1, #1
 8020ff2:	f000 fe51 	bl	8021c98 <__assert_func>
 8020ff6:	3101      	adds	r1, #1
 8020ff8:	005b      	lsls	r3, r3, #1
 8020ffa:	e7e8      	b.n	8020fce <__lshift+0x1a>
 8020ffc:	0098      	lsls	r0, r3, #2
 8020ffe:	500a      	str	r2, [r1, r0]
 8021000:	3301      	adds	r3, #1
 8021002:	42bb      	cmp	r3, r7
 8021004:	dbfa      	blt.n	8020ffc <__lshift+0x48>
 8021006:	43fb      	mvns	r3, r7
 8021008:	17db      	asrs	r3, r3, #31
 802100a:	401f      	ands	r7, r3
 802100c:	00bf      	lsls	r7, r7, #2
 802100e:	0023      	movs	r3, r4
 8021010:	201f      	movs	r0, #31
 8021012:	19c9      	adds	r1, r1, r7
 8021014:	0037      	movs	r7, r6
 8021016:	6922      	ldr	r2, [r4, #16]
 8021018:	3314      	adds	r3, #20
 802101a:	0092      	lsls	r2, r2, #2
 802101c:	189a      	adds	r2, r3, r2
 802101e:	4007      	ands	r7, r0
 8021020:	4206      	tst	r6, r0
 8021022:	d029      	beq.n	8021078 <__lshift+0xc4>
 8021024:	3001      	adds	r0, #1
 8021026:	1bc0      	subs	r0, r0, r7
 8021028:	9003      	str	r0, [sp, #12]
 802102a:	468c      	mov	ip, r1
 802102c:	2000      	movs	r0, #0
 802102e:	681e      	ldr	r6, [r3, #0]
 8021030:	40be      	lsls	r6, r7
 8021032:	4306      	orrs	r6, r0
 8021034:	4660      	mov	r0, ip
 8021036:	c040      	stmia	r0!, {r6}
 8021038:	4684      	mov	ip, r0
 802103a:	9e03      	ldr	r6, [sp, #12]
 802103c:	cb01      	ldmia	r3!, {r0}
 802103e:	40f0      	lsrs	r0, r6
 8021040:	429a      	cmp	r2, r3
 8021042:	d8f4      	bhi.n	802102e <__lshift+0x7a>
 8021044:	0026      	movs	r6, r4
 8021046:	3615      	adds	r6, #21
 8021048:	2304      	movs	r3, #4
 802104a:	42b2      	cmp	r2, r6
 802104c:	d304      	bcc.n	8021058 <__lshift+0xa4>
 802104e:	1b13      	subs	r3, r2, r4
 8021050:	3b15      	subs	r3, #21
 8021052:	089b      	lsrs	r3, r3, #2
 8021054:	3301      	adds	r3, #1
 8021056:	009b      	lsls	r3, r3, #2
 8021058:	50c8      	str	r0, [r1, r3]
 802105a:	2800      	cmp	r0, #0
 802105c:	d002      	beq.n	8021064 <__lshift+0xb0>
 802105e:	9b01      	ldr	r3, [sp, #4]
 8021060:	3302      	adds	r3, #2
 8021062:	9300      	str	r3, [sp, #0]
 8021064:	9b00      	ldr	r3, [sp, #0]
 8021066:	9802      	ldr	r0, [sp, #8]
 8021068:	3b01      	subs	r3, #1
 802106a:	0021      	movs	r1, r4
 802106c:	612b      	str	r3, [r5, #16]
 802106e:	f7ff fd77 	bl	8020b60 <_Bfree>
 8021072:	0028      	movs	r0, r5
 8021074:	b005      	add	sp, #20
 8021076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021078:	cb01      	ldmia	r3!, {r0}
 802107a:	c101      	stmia	r1!, {r0}
 802107c:	429a      	cmp	r2, r3
 802107e:	d8fb      	bhi.n	8021078 <__lshift+0xc4>
 8021080:	e7f0      	b.n	8021064 <__lshift+0xb0>
 8021082:	46c0      	nop			@ (mov r8, r8)
 8021084:	080247e1 	.word	0x080247e1
 8021088:	08024852 	.word	0x08024852

0802108c <__mcmp>:
 802108c:	b530      	push	{r4, r5, lr}
 802108e:	690b      	ldr	r3, [r1, #16]
 8021090:	6904      	ldr	r4, [r0, #16]
 8021092:	0002      	movs	r2, r0
 8021094:	1ae0      	subs	r0, r4, r3
 8021096:	429c      	cmp	r4, r3
 8021098:	d10f      	bne.n	80210ba <__mcmp+0x2e>
 802109a:	3214      	adds	r2, #20
 802109c:	009b      	lsls	r3, r3, #2
 802109e:	3114      	adds	r1, #20
 80210a0:	0014      	movs	r4, r2
 80210a2:	18c9      	adds	r1, r1, r3
 80210a4:	18d2      	adds	r2, r2, r3
 80210a6:	3a04      	subs	r2, #4
 80210a8:	3904      	subs	r1, #4
 80210aa:	6815      	ldr	r5, [r2, #0]
 80210ac:	680b      	ldr	r3, [r1, #0]
 80210ae:	429d      	cmp	r5, r3
 80210b0:	d004      	beq.n	80210bc <__mcmp+0x30>
 80210b2:	2001      	movs	r0, #1
 80210b4:	429d      	cmp	r5, r3
 80210b6:	d200      	bcs.n	80210ba <__mcmp+0x2e>
 80210b8:	3802      	subs	r0, #2
 80210ba:	bd30      	pop	{r4, r5, pc}
 80210bc:	4294      	cmp	r4, r2
 80210be:	d3f2      	bcc.n	80210a6 <__mcmp+0x1a>
 80210c0:	e7fb      	b.n	80210ba <__mcmp+0x2e>
	...

080210c4 <__mdiff>:
 80210c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210c6:	000c      	movs	r4, r1
 80210c8:	b087      	sub	sp, #28
 80210ca:	9000      	str	r0, [sp, #0]
 80210cc:	0011      	movs	r1, r2
 80210ce:	0020      	movs	r0, r4
 80210d0:	0017      	movs	r7, r2
 80210d2:	f7ff ffdb 	bl	802108c <__mcmp>
 80210d6:	1e05      	subs	r5, r0, #0
 80210d8:	d110      	bne.n	80210fc <__mdiff+0x38>
 80210da:	0001      	movs	r1, r0
 80210dc:	9800      	ldr	r0, [sp, #0]
 80210de:	f7ff fcfb 	bl	8020ad8 <_Balloc>
 80210e2:	1e02      	subs	r2, r0, #0
 80210e4:	d104      	bne.n	80210f0 <__mdiff+0x2c>
 80210e6:	4b40      	ldr	r3, [pc, #256]	@ (80211e8 <__mdiff+0x124>)
 80210e8:	4840      	ldr	r0, [pc, #256]	@ (80211ec <__mdiff+0x128>)
 80210ea:	4941      	ldr	r1, [pc, #260]	@ (80211f0 <__mdiff+0x12c>)
 80210ec:	f000 fdd4 	bl	8021c98 <__assert_func>
 80210f0:	2301      	movs	r3, #1
 80210f2:	6145      	str	r5, [r0, #20]
 80210f4:	6103      	str	r3, [r0, #16]
 80210f6:	0010      	movs	r0, r2
 80210f8:	b007      	add	sp, #28
 80210fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210fc:	2600      	movs	r6, #0
 80210fe:	42b0      	cmp	r0, r6
 8021100:	da03      	bge.n	802110a <__mdiff+0x46>
 8021102:	0023      	movs	r3, r4
 8021104:	003c      	movs	r4, r7
 8021106:	001f      	movs	r7, r3
 8021108:	3601      	adds	r6, #1
 802110a:	6861      	ldr	r1, [r4, #4]
 802110c:	9800      	ldr	r0, [sp, #0]
 802110e:	f7ff fce3 	bl	8020ad8 <_Balloc>
 8021112:	1e02      	subs	r2, r0, #0
 8021114:	d103      	bne.n	802111e <__mdiff+0x5a>
 8021116:	4b34      	ldr	r3, [pc, #208]	@ (80211e8 <__mdiff+0x124>)
 8021118:	4834      	ldr	r0, [pc, #208]	@ (80211ec <__mdiff+0x128>)
 802111a:	4936      	ldr	r1, [pc, #216]	@ (80211f4 <__mdiff+0x130>)
 802111c:	e7e6      	b.n	80210ec <__mdiff+0x28>
 802111e:	6923      	ldr	r3, [r4, #16]
 8021120:	3414      	adds	r4, #20
 8021122:	9300      	str	r3, [sp, #0]
 8021124:	009b      	lsls	r3, r3, #2
 8021126:	18e3      	adds	r3, r4, r3
 8021128:	0021      	movs	r1, r4
 802112a:	9401      	str	r4, [sp, #4]
 802112c:	003c      	movs	r4, r7
 802112e:	9302      	str	r3, [sp, #8]
 8021130:	693b      	ldr	r3, [r7, #16]
 8021132:	3414      	adds	r4, #20
 8021134:	009b      	lsls	r3, r3, #2
 8021136:	18e3      	adds	r3, r4, r3
 8021138:	9303      	str	r3, [sp, #12]
 802113a:	0003      	movs	r3, r0
 802113c:	60c6      	str	r6, [r0, #12]
 802113e:	468c      	mov	ip, r1
 8021140:	2000      	movs	r0, #0
 8021142:	3314      	adds	r3, #20
 8021144:	9304      	str	r3, [sp, #16]
 8021146:	9305      	str	r3, [sp, #20]
 8021148:	4663      	mov	r3, ip
 802114a:	cb20      	ldmia	r3!, {r5}
 802114c:	b2a9      	uxth	r1, r5
 802114e:	000e      	movs	r6, r1
 8021150:	469c      	mov	ip, r3
 8021152:	cc08      	ldmia	r4!, {r3}
 8021154:	0c2d      	lsrs	r5, r5, #16
 8021156:	b299      	uxth	r1, r3
 8021158:	1a71      	subs	r1, r6, r1
 802115a:	1809      	adds	r1, r1, r0
 802115c:	0c1b      	lsrs	r3, r3, #16
 802115e:	1408      	asrs	r0, r1, #16
 8021160:	1aeb      	subs	r3, r5, r3
 8021162:	181b      	adds	r3, r3, r0
 8021164:	1418      	asrs	r0, r3, #16
 8021166:	b289      	uxth	r1, r1
 8021168:	041b      	lsls	r3, r3, #16
 802116a:	4319      	orrs	r1, r3
 802116c:	9b05      	ldr	r3, [sp, #20]
 802116e:	c302      	stmia	r3!, {r1}
 8021170:	9305      	str	r3, [sp, #20]
 8021172:	9b03      	ldr	r3, [sp, #12]
 8021174:	42a3      	cmp	r3, r4
 8021176:	d8e7      	bhi.n	8021148 <__mdiff+0x84>
 8021178:	0039      	movs	r1, r7
 802117a:	9c03      	ldr	r4, [sp, #12]
 802117c:	3115      	adds	r1, #21
 802117e:	2304      	movs	r3, #4
 8021180:	428c      	cmp	r4, r1
 8021182:	d304      	bcc.n	802118e <__mdiff+0xca>
 8021184:	1be3      	subs	r3, r4, r7
 8021186:	3b15      	subs	r3, #21
 8021188:	089b      	lsrs	r3, r3, #2
 802118a:	3301      	adds	r3, #1
 802118c:	009b      	lsls	r3, r3, #2
 802118e:	9901      	ldr	r1, [sp, #4]
 8021190:	18cd      	adds	r5, r1, r3
 8021192:	9904      	ldr	r1, [sp, #16]
 8021194:	002e      	movs	r6, r5
 8021196:	18cb      	adds	r3, r1, r3
 8021198:	001f      	movs	r7, r3
 802119a:	9902      	ldr	r1, [sp, #8]
 802119c:	428e      	cmp	r6, r1
 802119e:	d311      	bcc.n	80211c4 <__mdiff+0x100>
 80211a0:	9c02      	ldr	r4, [sp, #8]
 80211a2:	1ee9      	subs	r1, r5, #3
 80211a4:	2000      	movs	r0, #0
 80211a6:	428c      	cmp	r4, r1
 80211a8:	d304      	bcc.n	80211b4 <__mdiff+0xf0>
 80211aa:	0021      	movs	r1, r4
 80211ac:	3103      	adds	r1, #3
 80211ae:	1b49      	subs	r1, r1, r5
 80211b0:	0889      	lsrs	r1, r1, #2
 80211b2:	0088      	lsls	r0, r1, #2
 80211b4:	181b      	adds	r3, r3, r0
 80211b6:	3b04      	subs	r3, #4
 80211b8:	6819      	ldr	r1, [r3, #0]
 80211ba:	2900      	cmp	r1, #0
 80211bc:	d010      	beq.n	80211e0 <__mdiff+0x11c>
 80211be:	9b00      	ldr	r3, [sp, #0]
 80211c0:	6113      	str	r3, [r2, #16]
 80211c2:	e798      	b.n	80210f6 <__mdiff+0x32>
 80211c4:	4684      	mov	ip, r0
 80211c6:	ce02      	ldmia	r6!, {r1}
 80211c8:	b288      	uxth	r0, r1
 80211ca:	4460      	add	r0, ip
 80211cc:	1400      	asrs	r0, r0, #16
 80211ce:	0c0c      	lsrs	r4, r1, #16
 80211d0:	1904      	adds	r4, r0, r4
 80211d2:	4461      	add	r1, ip
 80211d4:	1420      	asrs	r0, r4, #16
 80211d6:	b289      	uxth	r1, r1
 80211d8:	0424      	lsls	r4, r4, #16
 80211da:	4321      	orrs	r1, r4
 80211dc:	c702      	stmia	r7!, {r1}
 80211de:	e7dc      	b.n	802119a <__mdiff+0xd6>
 80211e0:	9900      	ldr	r1, [sp, #0]
 80211e2:	3901      	subs	r1, #1
 80211e4:	9100      	str	r1, [sp, #0]
 80211e6:	e7e6      	b.n	80211b6 <__mdiff+0xf2>
 80211e8:	080247e1 	.word	0x080247e1
 80211ec:	08024852 	.word	0x08024852
 80211f0:	00000237 	.word	0x00000237
 80211f4:	00000245 	.word	0x00000245

080211f8 <__ulp>:
 80211f8:	b510      	push	{r4, lr}
 80211fa:	2400      	movs	r4, #0
 80211fc:	4b0c      	ldr	r3, [pc, #48]	@ (8021230 <__ulp+0x38>)
 80211fe:	4a0d      	ldr	r2, [pc, #52]	@ (8021234 <__ulp+0x3c>)
 8021200:	400b      	ands	r3, r1
 8021202:	189b      	adds	r3, r3, r2
 8021204:	42a3      	cmp	r3, r4
 8021206:	dc06      	bgt.n	8021216 <__ulp+0x1e>
 8021208:	425b      	negs	r3, r3
 802120a:	151a      	asrs	r2, r3, #20
 802120c:	2a13      	cmp	r2, #19
 802120e:	dc05      	bgt.n	802121c <__ulp+0x24>
 8021210:	2380      	movs	r3, #128	@ 0x80
 8021212:	031b      	lsls	r3, r3, #12
 8021214:	4113      	asrs	r3, r2
 8021216:	0019      	movs	r1, r3
 8021218:	0020      	movs	r0, r4
 802121a:	bd10      	pop	{r4, pc}
 802121c:	3a14      	subs	r2, #20
 802121e:	2401      	movs	r4, #1
 8021220:	2a1e      	cmp	r2, #30
 8021222:	dc02      	bgt.n	802122a <__ulp+0x32>
 8021224:	2480      	movs	r4, #128	@ 0x80
 8021226:	0624      	lsls	r4, r4, #24
 8021228:	40d4      	lsrs	r4, r2
 802122a:	2300      	movs	r3, #0
 802122c:	e7f3      	b.n	8021216 <__ulp+0x1e>
 802122e:	46c0      	nop			@ (mov r8, r8)
 8021230:	7ff00000 	.word	0x7ff00000
 8021234:	fcc00000 	.word	0xfcc00000

08021238 <__b2d>:
 8021238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802123a:	0006      	movs	r6, r0
 802123c:	6903      	ldr	r3, [r0, #16]
 802123e:	3614      	adds	r6, #20
 8021240:	009b      	lsls	r3, r3, #2
 8021242:	18f3      	adds	r3, r6, r3
 8021244:	1f1d      	subs	r5, r3, #4
 8021246:	682c      	ldr	r4, [r5, #0]
 8021248:	000f      	movs	r7, r1
 802124a:	0020      	movs	r0, r4
 802124c:	9301      	str	r3, [sp, #4]
 802124e:	f7ff fd3b 	bl	8020cc8 <__hi0bits>
 8021252:	2220      	movs	r2, #32
 8021254:	1a12      	subs	r2, r2, r0
 8021256:	603a      	str	r2, [r7, #0]
 8021258:	0003      	movs	r3, r0
 802125a:	4a1c      	ldr	r2, [pc, #112]	@ (80212cc <__b2d+0x94>)
 802125c:	280a      	cmp	r0, #10
 802125e:	dc15      	bgt.n	802128c <__b2d+0x54>
 8021260:	210b      	movs	r1, #11
 8021262:	0027      	movs	r7, r4
 8021264:	1a09      	subs	r1, r1, r0
 8021266:	40cf      	lsrs	r7, r1
 8021268:	433a      	orrs	r2, r7
 802126a:	468c      	mov	ip, r1
 802126c:	0011      	movs	r1, r2
 802126e:	2200      	movs	r2, #0
 8021270:	42ae      	cmp	r6, r5
 8021272:	d202      	bcs.n	802127a <__b2d+0x42>
 8021274:	9a01      	ldr	r2, [sp, #4]
 8021276:	3a08      	subs	r2, #8
 8021278:	6812      	ldr	r2, [r2, #0]
 802127a:	3315      	adds	r3, #21
 802127c:	409c      	lsls	r4, r3
 802127e:	4663      	mov	r3, ip
 8021280:	0027      	movs	r7, r4
 8021282:	40da      	lsrs	r2, r3
 8021284:	4317      	orrs	r7, r2
 8021286:	0038      	movs	r0, r7
 8021288:	b003      	add	sp, #12
 802128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802128c:	2700      	movs	r7, #0
 802128e:	42ae      	cmp	r6, r5
 8021290:	d202      	bcs.n	8021298 <__b2d+0x60>
 8021292:	9d01      	ldr	r5, [sp, #4]
 8021294:	3d08      	subs	r5, #8
 8021296:	682f      	ldr	r7, [r5, #0]
 8021298:	210b      	movs	r1, #11
 802129a:	4249      	negs	r1, r1
 802129c:	468c      	mov	ip, r1
 802129e:	449c      	add	ip, r3
 80212a0:	2b0b      	cmp	r3, #11
 80212a2:	d010      	beq.n	80212c6 <__b2d+0x8e>
 80212a4:	4661      	mov	r1, ip
 80212a6:	2320      	movs	r3, #32
 80212a8:	408c      	lsls	r4, r1
 80212aa:	1a5b      	subs	r3, r3, r1
 80212ac:	0039      	movs	r1, r7
 80212ae:	40d9      	lsrs	r1, r3
 80212b0:	430c      	orrs	r4, r1
 80212b2:	4322      	orrs	r2, r4
 80212b4:	0011      	movs	r1, r2
 80212b6:	2200      	movs	r2, #0
 80212b8:	42b5      	cmp	r5, r6
 80212ba:	d901      	bls.n	80212c0 <__b2d+0x88>
 80212bc:	3d04      	subs	r5, #4
 80212be:	682a      	ldr	r2, [r5, #0]
 80212c0:	4664      	mov	r4, ip
 80212c2:	40a7      	lsls	r7, r4
 80212c4:	e7dd      	b.n	8021282 <__b2d+0x4a>
 80212c6:	4322      	orrs	r2, r4
 80212c8:	0011      	movs	r1, r2
 80212ca:	e7dc      	b.n	8021286 <__b2d+0x4e>
 80212cc:	3ff00000 	.word	0x3ff00000

080212d0 <__d2b>:
 80212d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80212d2:	2101      	movs	r1, #1
 80212d4:	0016      	movs	r6, r2
 80212d6:	001f      	movs	r7, r3
 80212d8:	f7ff fbfe 	bl	8020ad8 <_Balloc>
 80212dc:	1e04      	subs	r4, r0, #0
 80212de:	d105      	bne.n	80212ec <__d2b+0x1c>
 80212e0:	0022      	movs	r2, r4
 80212e2:	4b25      	ldr	r3, [pc, #148]	@ (8021378 <__d2b+0xa8>)
 80212e4:	4825      	ldr	r0, [pc, #148]	@ (802137c <__d2b+0xac>)
 80212e6:	4926      	ldr	r1, [pc, #152]	@ (8021380 <__d2b+0xb0>)
 80212e8:	f000 fcd6 	bl	8021c98 <__assert_func>
 80212ec:	033b      	lsls	r3, r7, #12
 80212ee:	007d      	lsls	r5, r7, #1
 80212f0:	0b1b      	lsrs	r3, r3, #12
 80212f2:	0d6d      	lsrs	r5, r5, #21
 80212f4:	d002      	beq.n	80212fc <__d2b+0x2c>
 80212f6:	2280      	movs	r2, #128	@ 0x80
 80212f8:	0352      	lsls	r2, r2, #13
 80212fa:	4313      	orrs	r3, r2
 80212fc:	9301      	str	r3, [sp, #4]
 80212fe:	2e00      	cmp	r6, #0
 8021300:	d025      	beq.n	802134e <__d2b+0x7e>
 8021302:	4668      	mov	r0, sp
 8021304:	9600      	str	r6, [sp, #0]
 8021306:	f7ff fd00 	bl	8020d0a <__lo0bits>
 802130a:	9b01      	ldr	r3, [sp, #4]
 802130c:	9900      	ldr	r1, [sp, #0]
 802130e:	2800      	cmp	r0, #0
 8021310:	d01b      	beq.n	802134a <__d2b+0x7a>
 8021312:	2220      	movs	r2, #32
 8021314:	001e      	movs	r6, r3
 8021316:	1a12      	subs	r2, r2, r0
 8021318:	4096      	lsls	r6, r2
 802131a:	0032      	movs	r2, r6
 802131c:	40c3      	lsrs	r3, r0
 802131e:	430a      	orrs	r2, r1
 8021320:	6162      	str	r2, [r4, #20]
 8021322:	9301      	str	r3, [sp, #4]
 8021324:	9e01      	ldr	r6, [sp, #4]
 8021326:	61a6      	str	r6, [r4, #24]
 8021328:	1e73      	subs	r3, r6, #1
 802132a:	419e      	sbcs	r6, r3
 802132c:	3601      	adds	r6, #1
 802132e:	6126      	str	r6, [r4, #16]
 8021330:	2d00      	cmp	r5, #0
 8021332:	d014      	beq.n	802135e <__d2b+0x8e>
 8021334:	2635      	movs	r6, #53	@ 0x35
 8021336:	4b13      	ldr	r3, [pc, #76]	@ (8021384 <__d2b+0xb4>)
 8021338:	18ed      	adds	r5, r5, r3
 802133a:	9b08      	ldr	r3, [sp, #32]
 802133c:	182d      	adds	r5, r5, r0
 802133e:	601d      	str	r5, [r3, #0]
 8021340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021342:	1a36      	subs	r6, r6, r0
 8021344:	601e      	str	r6, [r3, #0]
 8021346:	0020      	movs	r0, r4
 8021348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802134a:	6161      	str	r1, [r4, #20]
 802134c:	e7ea      	b.n	8021324 <__d2b+0x54>
 802134e:	a801      	add	r0, sp, #4
 8021350:	f7ff fcdb 	bl	8020d0a <__lo0bits>
 8021354:	9b01      	ldr	r3, [sp, #4]
 8021356:	2601      	movs	r6, #1
 8021358:	6163      	str	r3, [r4, #20]
 802135a:	3020      	adds	r0, #32
 802135c:	e7e7      	b.n	802132e <__d2b+0x5e>
 802135e:	4b0a      	ldr	r3, [pc, #40]	@ (8021388 <__d2b+0xb8>)
 8021360:	18c0      	adds	r0, r0, r3
 8021362:	9b08      	ldr	r3, [sp, #32]
 8021364:	6018      	str	r0, [r3, #0]
 8021366:	4b09      	ldr	r3, [pc, #36]	@ (802138c <__d2b+0xbc>)
 8021368:	18f3      	adds	r3, r6, r3
 802136a:	009b      	lsls	r3, r3, #2
 802136c:	18e3      	adds	r3, r4, r3
 802136e:	6958      	ldr	r0, [r3, #20]
 8021370:	f7ff fcaa 	bl	8020cc8 <__hi0bits>
 8021374:	0176      	lsls	r6, r6, #5
 8021376:	e7e3      	b.n	8021340 <__d2b+0x70>
 8021378:	080247e1 	.word	0x080247e1
 802137c:	08024852 	.word	0x08024852
 8021380:	0000030f 	.word	0x0000030f
 8021384:	fffffbcd 	.word	0xfffffbcd
 8021388:	fffffbce 	.word	0xfffffbce
 802138c:	3fffffff 	.word	0x3fffffff

08021390 <__ratio>:
 8021390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021392:	b087      	sub	sp, #28
 8021394:	000f      	movs	r7, r1
 8021396:	a904      	add	r1, sp, #16
 8021398:	0006      	movs	r6, r0
 802139a:	f7ff ff4d 	bl	8021238 <__b2d>
 802139e:	9000      	str	r0, [sp, #0]
 80213a0:	9101      	str	r1, [sp, #4]
 80213a2:	9b00      	ldr	r3, [sp, #0]
 80213a4:	9c01      	ldr	r4, [sp, #4]
 80213a6:	0038      	movs	r0, r7
 80213a8:	a905      	add	r1, sp, #20
 80213aa:	9302      	str	r3, [sp, #8]
 80213ac:	9403      	str	r4, [sp, #12]
 80213ae:	f7ff ff43 	bl	8021238 <__b2d>
 80213b2:	000d      	movs	r5, r1
 80213b4:	0002      	movs	r2, r0
 80213b6:	000b      	movs	r3, r1
 80213b8:	6930      	ldr	r0, [r6, #16]
 80213ba:	6939      	ldr	r1, [r7, #16]
 80213bc:	9e04      	ldr	r6, [sp, #16]
 80213be:	1a40      	subs	r0, r0, r1
 80213c0:	9905      	ldr	r1, [sp, #20]
 80213c2:	0140      	lsls	r0, r0, #5
 80213c4:	1a71      	subs	r1, r6, r1
 80213c6:	1841      	adds	r1, r0, r1
 80213c8:	0508      	lsls	r0, r1, #20
 80213ca:	2900      	cmp	r1, #0
 80213cc:	dd08      	ble.n	80213e0 <__ratio+0x50>
 80213ce:	9901      	ldr	r1, [sp, #4]
 80213d0:	1841      	adds	r1, r0, r1
 80213d2:	9103      	str	r1, [sp, #12]
 80213d4:	9802      	ldr	r0, [sp, #8]
 80213d6:	9903      	ldr	r1, [sp, #12]
 80213d8:	f7e0 fcec 	bl	8001db4 <__aeabi_ddiv>
 80213dc:	b007      	add	sp, #28
 80213de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213e0:	1a2b      	subs	r3, r5, r0
 80213e2:	e7f7      	b.n	80213d4 <__ratio+0x44>

080213e4 <__copybits>:
 80213e4:	b570      	push	{r4, r5, r6, lr}
 80213e6:	0014      	movs	r4, r2
 80213e8:	0005      	movs	r5, r0
 80213ea:	3901      	subs	r1, #1
 80213ec:	6913      	ldr	r3, [r2, #16]
 80213ee:	1149      	asrs	r1, r1, #5
 80213f0:	3101      	adds	r1, #1
 80213f2:	0089      	lsls	r1, r1, #2
 80213f4:	3414      	adds	r4, #20
 80213f6:	009b      	lsls	r3, r3, #2
 80213f8:	1841      	adds	r1, r0, r1
 80213fa:	18e3      	adds	r3, r4, r3
 80213fc:	42a3      	cmp	r3, r4
 80213fe:	d80d      	bhi.n	802141c <__copybits+0x38>
 8021400:	0014      	movs	r4, r2
 8021402:	3411      	adds	r4, #17
 8021404:	2500      	movs	r5, #0
 8021406:	429c      	cmp	r4, r3
 8021408:	d803      	bhi.n	8021412 <__copybits+0x2e>
 802140a:	1a9b      	subs	r3, r3, r2
 802140c:	3b11      	subs	r3, #17
 802140e:	089b      	lsrs	r3, r3, #2
 8021410:	009d      	lsls	r5, r3, #2
 8021412:	2300      	movs	r3, #0
 8021414:	1940      	adds	r0, r0, r5
 8021416:	4281      	cmp	r1, r0
 8021418:	d803      	bhi.n	8021422 <__copybits+0x3e>
 802141a:	bd70      	pop	{r4, r5, r6, pc}
 802141c:	cc40      	ldmia	r4!, {r6}
 802141e:	c540      	stmia	r5!, {r6}
 8021420:	e7ec      	b.n	80213fc <__copybits+0x18>
 8021422:	c008      	stmia	r0!, {r3}
 8021424:	e7f7      	b.n	8021416 <__copybits+0x32>

08021426 <__any_on>:
 8021426:	0002      	movs	r2, r0
 8021428:	6900      	ldr	r0, [r0, #16]
 802142a:	b510      	push	{r4, lr}
 802142c:	3214      	adds	r2, #20
 802142e:	114b      	asrs	r3, r1, #5
 8021430:	4298      	cmp	r0, r3
 8021432:	db13      	blt.n	802145c <__any_on+0x36>
 8021434:	dd0c      	ble.n	8021450 <__any_on+0x2a>
 8021436:	241f      	movs	r4, #31
 8021438:	0008      	movs	r0, r1
 802143a:	4020      	ands	r0, r4
 802143c:	4221      	tst	r1, r4
 802143e:	d007      	beq.n	8021450 <__any_on+0x2a>
 8021440:	0099      	lsls	r1, r3, #2
 8021442:	588c      	ldr	r4, [r1, r2]
 8021444:	0021      	movs	r1, r4
 8021446:	40c1      	lsrs	r1, r0
 8021448:	4081      	lsls	r1, r0
 802144a:	2001      	movs	r0, #1
 802144c:	428c      	cmp	r4, r1
 802144e:	d104      	bne.n	802145a <__any_on+0x34>
 8021450:	009b      	lsls	r3, r3, #2
 8021452:	18d3      	adds	r3, r2, r3
 8021454:	4293      	cmp	r3, r2
 8021456:	d803      	bhi.n	8021460 <__any_on+0x3a>
 8021458:	2000      	movs	r0, #0
 802145a:	bd10      	pop	{r4, pc}
 802145c:	0003      	movs	r3, r0
 802145e:	e7f7      	b.n	8021450 <__any_on+0x2a>
 8021460:	3b04      	subs	r3, #4
 8021462:	6819      	ldr	r1, [r3, #0]
 8021464:	2900      	cmp	r1, #0
 8021466:	d0f5      	beq.n	8021454 <__any_on+0x2e>
 8021468:	2001      	movs	r0, #1
 802146a:	e7f6      	b.n	802145a <__any_on+0x34>

0802146c <__ascii_wctomb>:
 802146c:	0003      	movs	r3, r0
 802146e:	1e08      	subs	r0, r1, #0
 8021470:	d005      	beq.n	802147e <__ascii_wctomb+0x12>
 8021472:	2aff      	cmp	r2, #255	@ 0xff
 8021474:	d904      	bls.n	8021480 <__ascii_wctomb+0x14>
 8021476:	228a      	movs	r2, #138	@ 0x8a
 8021478:	2001      	movs	r0, #1
 802147a:	601a      	str	r2, [r3, #0]
 802147c:	4240      	negs	r0, r0
 802147e:	4770      	bx	lr
 8021480:	2001      	movs	r0, #1
 8021482:	700a      	strb	r2, [r1, #0]
 8021484:	e7fb      	b.n	802147e <__ascii_wctomb+0x12>
	...

08021488 <__ssputs_r>:
 8021488:	b5f0      	push	{r4, r5, r6, r7, lr}
 802148a:	688e      	ldr	r6, [r1, #8]
 802148c:	b085      	sub	sp, #20
 802148e:	001f      	movs	r7, r3
 8021490:	000c      	movs	r4, r1
 8021492:	680b      	ldr	r3, [r1, #0]
 8021494:	9002      	str	r0, [sp, #8]
 8021496:	9203      	str	r2, [sp, #12]
 8021498:	42be      	cmp	r6, r7
 802149a:	d830      	bhi.n	80214fe <__ssputs_r+0x76>
 802149c:	210c      	movs	r1, #12
 802149e:	5e62      	ldrsh	r2, [r4, r1]
 80214a0:	2190      	movs	r1, #144	@ 0x90
 80214a2:	00c9      	lsls	r1, r1, #3
 80214a4:	420a      	tst	r2, r1
 80214a6:	d028      	beq.n	80214fa <__ssputs_r+0x72>
 80214a8:	2003      	movs	r0, #3
 80214aa:	6921      	ldr	r1, [r4, #16]
 80214ac:	1a5b      	subs	r3, r3, r1
 80214ae:	9301      	str	r3, [sp, #4]
 80214b0:	6963      	ldr	r3, [r4, #20]
 80214b2:	4343      	muls	r3, r0
 80214b4:	9801      	ldr	r0, [sp, #4]
 80214b6:	0fdd      	lsrs	r5, r3, #31
 80214b8:	18ed      	adds	r5, r5, r3
 80214ba:	1c7b      	adds	r3, r7, #1
 80214bc:	181b      	adds	r3, r3, r0
 80214be:	106d      	asrs	r5, r5, #1
 80214c0:	42ab      	cmp	r3, r5
 80214c2:	d900      	bls.n	80214c6 <__ssputs_r+0x3e>
 80214c4:	001d      	movs	r5, r3
 80214c6:	0552      	lsls	r2, r2, #21
 80214c8:	d528      	bpl.n	802151c <__ssputs_r+0x94>
 80214ca:	0029      	movs	r1, r5
 80214cc:	9802      	ldr	r0, [sp, #8]
 80214ce:	f7ff fa61 	bl	8020994 <_malloc_r>
 80214d2:	1e06      	subs	r6, r0, #0
 80214d4:	d02c      	beq.n	8021530 <__ssputs_r+0xa8>
 80214d6:	9a01      	ldr	r2, [sp, #4]
 80214d8:	6921      	ldr	r1, [r4, #16]
 80214da:	f7fd fff9 	bl	801f4d0 <memcpy>
 80214de:	89a2      	ldrh	r2, [r4, #12]
 80214e0:	4b18      	ldr	r3, [pc, #96]	@ (8021544 <__ssputs_r+0xbc>)
 80214e2:	401a      	ands	r2, r3
 80214e4:	2380      	movs	r3, #128	@ 0x80
 80214e6:	4313      	orrs	r3, r2
 80214e8:	81a3      	strh	r3, [r4, #12]
 80214ea:	9b01      	ldr	r3, [sp, #4]
 80214ec:	6126      	str	r6, [r4, #16]
 80214ee:	18f6      	adds	r6, r6, r3
 80214f0:	6026      	str	r6, [r4, #0]
 80214f2:	003e      	movs	r6, r7
 80214f4:	6165      	str	r5, [r4, #20]
 80214f6:	1aed      	subs	r5, r5, r3
 80214f8:	60a5      	str	r5, [r4, #8]
 80214fa:	42be      	cmp	r6, r7
 80214fc:	d900      	bls.n	8021500 <__ssputs_r+0x78>
 80214fe:	003e      	movs	r6, r7
 8021500:	0032      	movs	r2, r6
 8021502:	9903      	ldr	r1, [sp, #12]
 8021504:	6820      	ldr	r0, [r4, #0]
 8021506:	f000 fb7e 	bl	8021c06 <memmove>
 802150a:	2000      	movs	r0, #0
 802150c:	68a3      	ldr	r3, [r4, #8]
 802150e:	1b9b      	subs	r3, r3, r6
 8021510:	60a3      	str	r3, [r4, #8]
 8021512:	6823      	ldr	r3, [r4, #0]
 8021514:	199b      	adds	r3, r3, r6
 8021516:	6023      	str	r3, [r4, #0]
 8021518:	b005      	add	sp, #20
 802151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802151c:	002a      	movs	r2, r5
 802151e:	9802      	ldr	r0, [sp, #8]
 8021520:	f000 fc05 	bl	8021d2e <_realloc_r>
 8021524:	1e06      	subs	r6, r0, #0
 8021526:	d1e0      	bne.n	80214ea <__ssputs_r+0x62>
 8021528:	6921      	ldr	r1, [r4, #16]
 802152a:	9802      	ldr	r0, [sp, #8]
 802152c:	f7fe fe62 	bl	80201f4 <_free_r>
 8021530:	230c      	movs	r3, #12
 8021532:	2001      	movs	r0, #1
 8021534:	9a02      	ldr	r2, [sp, #8]
 8021536:	4240      	negs	r0, r0
 8021538:	6013      	str	r3, [r2, #0]
 802153a:	89a2      	ldrh	r2, [r4, #12]
 802153c:	3334      	adds	r3, #52	@ 0x34
 802153e:	4313      	orrs	r3, r2
 8021540:	81a3      	strh	r3, [r4, #12]
 8021542:	e7e9      	b.n	8021518 <__ssputs_r+0x90>
 8021544:	fffffb7f 	.word	0xfffffb7f

08021548 <_svfiprintf_r>:
 8021548:	b5f0      	push	{r4, r5, r6, r7, lr}
 802154a:	b0a1      	sub	sp, #132	@ 0x84
 802154c:	9003      	str	r0, [sp, #12]
 802154e:	001d      	movs	r5, r3
 8021550:	898b      	ldrh	r3, [r1, #12]
 8021552:	000f      	movs	r7, r1
 8021554:	0016      	movs	r6, r2
 8021556:	061b      	lsls	r3, r3, #24
 8021558:	d511      	bpl.n	802157e <_svfiprintf_r+0x36>
 802155a:	690b      	ldr	r3, [r1, #16]
 802155c:	2b00      	cmp	r3, #0
 802155e:	d10e      	bne.n	802157e <_svfiprintf_r+0x36>
 8021560:	2140      	movs	r1, #64	@ 0x40
 8021562:	f7ff fa17 	bl	8020994 <_malloc_r>
 8021566:	6038      	str	r0, [r7, #0]
 8021568:	6138      	str	r0, [r7, #16]
 802156a:	2800      	cmp	r0, #0
 802156c:	d105      	bne.n	802157a <_svfiprintf_r+0x32>
 802156e:	230c      	movs	r3, #12
 8021570:	9a03      	ldr	r2, [sp, #12]
 8021572:	6013      	str	r3, [r2, #0]
 8021574:	2001      	movs	r0, #1
 8021576:	4240      	negs	r0, r0
 8021578:	e0cf      	b.n	802171a <_svfiprintf_r+0x1d2>
 802157a:	2340      	movs	r3, #64	@ 0x40
 802157c:	617b      	str	r3, [r7, #20]
 802157e:	2300      	movs	r3, #0
 8021580:	ac08      	add	r4, sp, #32
 8021582:	6163      	str	r3, [r4, #20]
 8021584:	3320      	adds	r3, #32
 8021586:	7663      	strb	r3, [r4, #25]
 8021588:	3310      	adds	r3, #16
 802158a:	76a3      	strb	r3, [r4, #26]
 802158c:	9507      	str	r5, [sp, #28]
 802158e:	0035      	movs	r5, r6
 8021590:	782b      	ldrb	r3, [r5, #0]
 8021592:	2b00      	cmp	r3, #0
 8021594:	d001      	beq.n	802159a <_svfiprintf_r+0x52>
 8021596:	2b25      	cmp	r3, #37	@ 0x25
 8021598:	d148      	bne.n	802162c <_svfiprintf_r+0xe4>
 802159a:	1bab      	subs	r3, r5, r6
 802159c:	9305      	str	r3, [sp, #20]
 802159e:	42b5      	cmp	r5, r6
 80215a0:	d00b      	beq.n	80215ba <_svfiprintf_r+0x72>
 80215a2:	0032      	movs	r2, r6
 80215a4:	0039      	movs	r1, r7
 80215a6:	9803      	ldr	r0, [sp, #12]
 80215a8:	f7ff ff6e 	bl	8021488 <__ssputs_r>
 80215ac:	3001      	adds	r0, #1
 80215ae:	d100      	bne.n	80215b2 <_svfiprintf_r+0x6a>
 80215b0:	e0ae      	b.n	8021710 <_svfiprintf_r+0x1c8>
 80215b2:	6963      	ldr	r3, [r4, #20]
 80215b4:	9a05      	ldr	r2, [sp, #20]
 80215b6:	189b      	adds	r3, r3, r2
 80215b8:	6163      	str	r3, [r4, #20]
 80215ba:	782b      	ldrb	r3, [r5, #0]
 80215bc:	2b00      	cmp	r3, #0
 80215be:	d100      	bne.n	80215c2 <_svfiprintf_r+0x7a>
 80215c0:	e0a6      	b.n	8021710 <_svfiprintf_r+0x1c8>
 80215c2:	2201      	movs	r2, #1
 80215c4:	2300      	movs	r3, #0
 80215c6:	4252      	negs	r2, r2
 80215c8:	6062      	str	r2, [r4, #4]
 80215ca:	a904      	add	r1, sp, #16
 80215cc:	3254      	adds	r2, #84	@ 0x54
 80215ce:	1852      	adds	r2, r2, r1
 80215d0:	1c6e      	adds	r6, r5, #1
 80215d2:	6023      	str	r3, [r4, #0]
 80215d4:	60e3      	str	r3, [r4, #12]
 80215d6:	60a3      	str	r3, [r4, #8]
 80215d8:	7013      	strb	r3, [r2, #0]
 80215da:	65a3      	str	r3, [r4, #88]	@ 0x58
 80215dc:	4b54      	ldr	r3, [pc, #336]	@ (8021730 <_svfiprintf_r+0x1e8>)
 80215de:	2205      	movs	r2, #5
 80215e0:	0018      	movs	r0, r3
 80215e2:	7831      	ldrb	r1, [r6, #0]
 80215e4:	9305      	str	r3, [sp, #20]
 80215e6:	f7fd ff68 	bl	801f4ba <memchr>
 80215ea:	1c75      	adds	r5, r6, #1
 80215ec:	2800      	cmp	r0, #0
 80215ee:	d11f      	bne.n	8021630 <_svfiprintf_r+0xe8>
 80215f0:	6822      	ldr	r2, [r4, #0]
 80215f2:	06d3      	lsls	r3, r2, #27
 80215f4:	d504      	bpl.n	8021600 <_svfiprintf_r+0xb8>
 80215f6:	2353      	movs	r3, #83	@ 0x53
 80215f8:	a904      	add	r1, sp, #16
 80215fa:	185b      	adds	r3, r3, r1
 80215fc:	2120      	movs	r1, #32
 80215fe:	7019      	strb	r1, [r3, #0]
 8021600:	0713      	lsls	r3, r2, #28
 8021602:	d504      	bpl.n	802160e <_svfiprintf_r+0xc6>
 8021604:	2353      	movs	r3, #83	@ 0x53
 8021606:	a904      	add	r1, sp, #16
 8021608:	185b      	adds	r3, r3, r1
 802160a:	212b      	movs	r1, #43	@ 0x2b
 802160c:	7019      	strb	r1, [r3, #0]
 802160e:	7833      	ldrb	r3, [r6, #0]
 8021610:	2b2a      	cmp	r3, #42	@ 0x2a
 8021612:	d016      	beq.n	8021642 <_svfiprintf_r+0xfa>
 8021614:	0035      	movs	r5, r6
 8021616:	2100      	movs	r1, #0
 8021618:	200a      	movs	r0, #10
 802161a:	68e3      	ldr	r3, [r4, #12]
 802161c:	782a      	ldrb	r2, [r5, #0]
 802161e:	1c6e      	adds	r6, r5, #1
 8021620:	3a30      	subs	r2, #48	@ 0x30
 8021622:	2a09      	cmp	r2, #9
 8021624:	d950      	bls.n	80216c8 <_svfiprintf_r+0x180>
 8021626:	2900      	cmp	r1, #0
 8021628:	d111      	bne.n	802164e <_svfiprintf_r+0x106>
 802162a:	e017      	b.n	802165c <_svfiprintf_r+0x114>
 802162c:	3501      	adds	r5, #1
 802162e:	e7af      	b.n	8021590 <_svfiprintf_r+0x48>
 8021630:	9b05      	ldr	r3, [sp, #20]
 8021632:	6822      	ldr	r2, [r4, #0]
 8021634:	1ac0      	subs	r0, r0, r3
 8021636:	2301      	movs	r3, #1
 8021638:	4083      	lsls	r3, r0
 802163a:	4313      	orrs	r3, r2
 802163c:	002e      	movs	r6, r5
 802163e:	6023      	str	r3, [r4, #0]
 8021640:	e7cc      	b.n	80215dc <_svfiprintf_r+0x94>
 8021642:	9b07      	ldr	r3, [sp, #28]
 8021644:	1d19      	adds	r1, r3, #4
 8021646:	681b      	ldr	r3, [r3, #0]
 8021648:	9107      	str	r1, [sp, #28]
 802164a:	2b00      	cmp	r3, #0
 802164c:	db01      	blt.n	8021652 <_svfiprintf_r+0x10a>
 802164e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021650:	e004      	b.n	802165c <_svfiprintf_r+0x114>
 8021652:	425b      	negs	r3, r3
 8021654:	60e3      	str	r3, [r4, #12]
 8021656:	2302      	movs	r3, #2
 8021658:	4313      	orrs	r3, r2
 802165a:	6023      	str	r3, [r4, #0]
 802165c:	782b      	ldrb	r3, [r5, #0]
 802165e:	2b2e      	cmp	r3, #46	@ 0x2e
 8021660:	d10c      	bne.n	802167c <_svfiprintf_r+0x134>
 8021662:	786b      	ldrb	r3, [r5, #1]
 8021664:	2b2a      	cmp	r3, #42	@ 0x2a
 8021666:	d134      	bne.n	80216d2 <_svfiprintf_r+0x18a>
 8021668:	9b07      	ldr	r3, [sp, #28]
 802166a:	3502      	adds	r5, #2
 802166c:	1d1a      	adds	r2, r3, #4
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	9207      	str	r2, [sp, #28]
 8021672:	2b00      	cmp	r3, #0
 8021674:	da01      	bge.n	802167a <_svfiprintf_r+0x132>
 8021676:	2301      	movs	r3, #1
 8021678:	425b      	negs	r3, r3
 802167a:	9309      	str	r3, [sp, #36]	@ 0x24
 802167c:	4e2d      	ldr	r6, [pc, #180]	@ (8021734 <_svfiprintf_r+0x1ec>)
 802167e:	2203      	movs	r2, #3
 8021680:	0030      	movs	r0, r6
 8021682:	7829      	ldrb	r1, [r5, #0]
 8021684:	f7fd ff19 	bl	801f4ba <memchr>
 8021688:	2800      	cmp	r0, #0
 802168a:	d006      	beq.n	802169a <_svfiprintf_r+0x152>
 802168c:	2340      	movs	r3, #64	@ 0x40
 802168e:	1b80      	subs	r0, r0, r6
 8021690:	4083      	lsls	r3, r0
 8021692:	6822      	ldr	r2, [r4, #0]
 8021694:	3501      	adds	r5, #1
 8021696:	4313      	orrs	r3, r2
 8021698:	6023      	str	r3, [r4, #0]
 802169a:	7829      	ldrb	r1, [r5, #0]
 802169c:	2206      	movs	r2, #6
 802169e:	4826      	ldr	r0, [pc, #152]	@ (8021738 <_svfiprintf_r+0x1f0>)
 80216a0:	1c6e      	adds	r6, r5, #1
 80216a2:	7621      	strb	r1, [r4, #24]
 80216a4:	f7fd ff09 	bl	801f4ba <memchr>
 80216a8:	2800      	cmp	r0, #0
 80216aa:	d038      	beq.n	802171e <_svfiprintf_r+0x1d6>
 80216ac:	4b23      	ldr	r3, [pc, #140]	@ (802173c <_svfiprintf_r+0x1f4>)
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d122      	bne.n	80216f8 <_svfiprintf_r+0x1b0>
 80216b2:	2207      	movs	r2, #7
 80216b4:	9b07      	ldr	r3, [sp, #28]
 80216b6:	3307      	adds	r3, #7
 80216b8:	4393      	bics	r3, r2
 80216ba:	3308      	adds	r3, #8
 80216bc:	9307      	str	r3, [sp, #28]
 80216be:	6963      	ldr	r3, [r4, #20]
 80216c0:	9a04      	ldr	r2, [sp, #16]
 80216c2:	189b      	adds	r3, r3, r2
 80216c4:	6163      	str	r3, [r4, #20]
 80216c6:	e762      	b.n	802158e <_svfiprintf_r+0x46>
 80216c8:	4343      	muls	r3, r0
 80216ca:	0035      	movs	r5, r6
 80216cc:	2101      	movs	r1, #1
 80216ce:	189b      	adds	r3, r3, r2
 80216d0:	e7a4      	b.n	802161c <_svfiprintf_r+0xd4>
 80216d2:	2300      	movs	r3, #0
 80216d4:	200a      	movs	r0, #10
 80216d6:	0019      	movs	r1, r3
 80216d8:	3501      	adds	r5, #1
 80216da:	6063      	str	r3, [r4, #4]
 80216dc:	782a      	ldrb	r2, [r5, #0]
 80216de:	1c6e      	adds	r6, r5, #1
 80216e0:	3a30      	subs	r2, #48	@ 0x30
 80216e2:	2a09      	cmp	r2, #9
 80216e4:	d903      	bls.n	80216ee <_svfiprintf_r+0x1a6>
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d0c8      	beq.n	802167c <_svfiprintf_r+0x134>
 80216ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80216ec:	e7c6      	b.n	802167c <_svfiprintf_r+0x134>
 80216ee:	4341      	muls	r1, r0
 80216f0:	0035      	movs	r5, r6
 80216f2:	2301      	movs	r3, #1
 80216f4:	1889      	adds	r1, r1, r2
 80216f6:	e7f1      	b.n	80216dc <_svfiprintf_r+0x194>
 80216f8:	aa07      	add	r2, sp, #28
 80216fa:	9200      	str	r2, [sp, #0]
 80216fc:	0021      	movs	r1, r4
 80216fe:	003a      	movs	r2, r7
 8021700:	4b0f      	ldr	r3, [pc, #60]	@ (8021740 <_svfiprintf_r+0x1f8>)
 8021702:	9803      	ldr	r0, [sp, #12]
 8021704:	f7fc ffd4 	bl	801e6b0 <_printf_float>
 8021708:	9004      	str	r0, [sp, #16]
 802170a:	9b04      	ldr	r3, [sp, #16]
 802170c:	3301      	adds	r3, #1
 802170e:	d1d6      	bne.n	80216be <_svfiprintf_r+0x176>
 8021710:	89bb      	ldrh	r3, [r7, #12]
 8021712:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021714:	065b      	lsls	r3, r3, #25
 8021716:	d500      	bpl.n	802171a <_svfiprintf_r+0x1d2>
 8021718:	e72c      	b.n	8021574 <_svfiprintf_r+0x2c>
 802171a:	b021      	add	sp, #132	@ 0x84
 802171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802171e:	aa07      	add	r2, sp, #28
 8021720:	9200      	str	r2, [sp, #0]
 8021722:	0021      	movs	r1, r4
 8021724:	003a      	movs	r2, r7
 8021726:	4b06      	ldr	r3, [pc, #24]	@ (8021740 <_svfiprintf_r+0x1f8>)
 8021728:	9803      	ldr	r0, [sp, #12]
 802172a:	f7fd fa6f 	bl	801ec0c <_printf_i>
 802172e:	e7eb      	b.n	8021708 <_svfiprintf_r+0x1c0>
 8021730:	080249a8 	.word	0x080249a8
 8021734:	080249ae 	.word	0x080249ae
 8021738:	080249b2 	.word	0x080249b2
 802173c:	0801e6b1 	.word	0x0801e6b1
 8021740:	08021489 	.word	0x08021489

08021744 <__sfputc_r>:
 8021744:	6893      	ldr	r3, [r2, #8]
 8021746:	b510      	push	{r4, lr}
 8021748:	3b01      	subs	r3, #1
 802174a:	6093      	str	r3, [r2, #8]
 802174c:	2b00      	cmp	r3, #0
 802174e:	da04      	bge.n	802175a <__sfputc_r+0x16>
 8021750:	6994      	ldr	r4, [r2, #24]
 8021752:	42a3      	cmp	r3, r4
 8021754:	db07      	blt.n	8021766 <__sfputc_r+0x22>
 8021756:	290a      	cmp	r1, #10
 8021758:	d005      	beq.n	8021766 <__sfputc_r+0x22>
 802175a:	6813      	ldr	r3, [r2, #0]
 802175c:	1c58      	adds	r0, r3, #1
 802175e:	6010      	str	r0, [r2, #0]
 8021760:	7019      	strb	r1, [r3, #0]
 8021762:	0008      	movs	r0, r1
 8021764:	bd10      	pop	{r4, pc}
 8021766:	f7fd fd37 	bl	801f1d8 <__swbuf_r>
 802176a:	0001      	movs	r1, r0
 802176c:	e7f9      	b.n	8021762 <__sfputc_r+0x1e>

0802176e <__sfputs_r>:
 802176e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021770:	0006      	movs	r6, r0
 8021772:	000f      	movs	r7, r1
 8021774:	0014      	movs	r4, r2
 8021776:	18d5      	adds	r5, r2, r3
 8021778:	42ac      	cmp	r4, r5
 802177a:	d101      	bne.n	8021780 <__sfputs_r+0x12>
 802177c:	2000      	movs	r0, #0
 802177e:	e007      	b.n	8021790 <__sfputs_r+0x22>
 8021780:	7821      	ldrb	r1, [r4, #0]
 8021782:	003a      	movs	r2, r7
 8021784:	0030      	movs	r0, r6
 8021786:	f7ff ffdd 	bl	8021744 <__sfputc_r>
 802178a:	3401      	adds	r4, #1
 802178c:	1c43      	adds	r3, r0, #1
 802178e:	d1f3      	bne.n	8021778 <__sfputs_r+0xa>
 8021790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021794 <_vfiprintf_r>:
 8021794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021796:	b0a1      	sub	sp, #132	@ 0x84
 8021798:	000f      	movs	r7, r1
 802179a:	0015      	movs	r5, r2
 802179c:	001e      	movs	r6, r3
 802179e:	9003      	str	r0, [sp, #12]
 80217a0:	2800      	cmp	r0, #0
 80217a2:	d004      	beq.n	80217ae <_vfiprintf_r+0x1a>
 80217a4:	6a03      	ldr	r3, [r0, #32]
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	d101      	bne.n	80217ae <_vfiprintf_r+0x1a>
 80217aa:	f7fd fbcd 	bl	801ef48 <__sinit>
 80217ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80217b0:	07db      	lsls	r3, r3, #31
 80217b2:	d405      	bmi.n	80217c0 <_vfiprintf_r+0x2c>
 80217b4:	89bb      	ldrh	r3, [r7, #12]
 80217b6:	059b      	lsls	r3, r3, #22
 80217b8:	d402      	bmi.n	80217c0 <_vfiprintf_r+0x2c>
 80217ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80217bc:	f7fd fe7b 	bl	801f4b6 <__retarget_lock_acquire_recursive>
 80217c0:	89bb      	ldrh	r3, [r7, #12]
 80217c2:	071b      	lsls	r3, r3, #28
 80217c4:	d502      	bpl.n	80217cc <_vfiprintf_r+0x38>
 80217c6:	693b      	ldr	r3, [r7, #16]
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	d113      	bne.n	80217f4 <_vfiprintf_r+0x60>
 80217cc:	0039      	movs	r1, r7
 80217ce:	9803      	ldr	r0, [sp, #12]
 80217d0:	f7fd fd44 	bl	801f25c <__swsetup_r>
 80217d4:	2800      	cmp	r0, #0
 80217d6:	d00d      	beq.n	80217f4 <_vfiprintf_r+0x60>
 80217d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80217da:	07db      	lsls	r3, r3, #31
 80217dc:	d503      	bpl.n	80217e6 <_vfiprintf_r+0x52>
 80217de:	2001      	movs	r0, #1
 80217e0:	4240      	negs	r0, r0
 80217e2:	b021      	add	sp, #132	@ 0x84
 80217e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80217e6:	89bb      	ldrh	r3, [r7, #12]
 80217e8:	059b      	lsls	r3, r3, #22
 80217ea:	d4f8      	bmi.n	80217de <_vfiprintf_r+0x4a>
 80217ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80217ee:	f7fd fe63 	bl	801f4b8 <__retarget_lock_release_recursive>
 80217f2:	e7f4      	b.n	80217de <_vfiprintf_r+0x4a>
 80217f4:	2300      	movs	r3, #0
 80217f6:	ac08      	add	r4, sp, #32
 80217f8:	6163      	str	r3, [r4, #20]
 80217fa:	3320      	adds	r3, #32
 80217fc:	7663      	strb	r3, [r4, #25]
 80217fe:	3310      	adds	r3, #16
 8021800:	76a3      	strb	r3, [r4, #26]
 8021802:	9607      	str	r6, [sp, #28]
 8021804:	002e      	movs	r6, r5
 8021806:	7833      	ldrb	r3, [r6, #0]
 8021808:	2b00      	cmp	r3, #0
 802180a:	d001      	beq.n	8021810 <_vfiprintf_r+0x7c>
 802180c:	2b25      	cmp	r3, #37	@ 0x25
 802180e:	d148      	bne.n	80218a2 <_vfiprintf_r+0x10e>
 8021810:	1b73      	subs	r3, r6, r5
 8021812:	9305      	str	r3, [sp, #20]
 8021814:	42ae      	cmp	r6, r5
 8021816:	d00b      	beq.n	8021830 <_vfiprintf_r+0x9c>
 8021818:	002a      	movs	r2, r5
 802181a:	0039      	movs	r1, r7
 802181c:	9803      	ldr	r0, [sp, #12]
 802181e:	f7ff ffa6 	bl	802176e <__sfputs_r>
 8021822:	3001      	adds	r0, #1
 8021824:	d100      	bne.n	8021828 <_vfiprintf_r+0x94>
 8021826:	e0ae      	b.n	8021986 <_vfiprintf_r+0x1f2>
 8021828:	6963      	ldr	r3, [r4, #20]
 802182a:	9a05      	ldr	r2, [sp, #20]
 802182c:	189b      	adds	r3, r3, r2
 802182e:	6163      	str	r3, [r4, #20]
 8021830:	7833      	ldrb	r3, [r6, #0]
 8021832:	2b00      	cmp	r3, #0
 8021834:	d100      	bne.n	8021838 <_vfiprintf_r+0xa4>
 8021836:	e0a6      	b.n	8021986 <_vfiprintf_r+0x1f2>
 8021838:	2201      	movs	r2, #1
 802183a:	2300      	movs	r3, #0
 802183c:	4252      	negs	r2, r2
 802183e:	6062      	str	r2, [r4, #4]
 8021840:	a904      	add	r1, sp, #16
 8021842:	3254      	adds	r2, #84	@ 0x54
 8021844:	1852      	adds	r2, r2, r1
 8021846:	1c75      	adds	r5, r6, #1
 8021848:	6023      	str	r3, [r4, #0]
 802184a:	60e3      	str	r3, [r4, #12]
 802184c:	60a3      	str	r3, [r4, #8]
 802184e:	7013      	strb	r3, [r2, #0]
 8021850:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021852:	4b59      	ldr	r3, [pc, #356]	@ (80219b8 <_vfiprintf_r+0x224>)
 8021854:	2205      	movs	r2, #5
 8021856:	0018      	movs	r0, r3
 8021858:	7829      	ldrb	r1, [r5, #0]
 802185a:	9305      	str	r3, [sp, #20]
 802185c:	f7fd fe2d 	bl	801f4ba <memchr>
 8021860:	1c6e      	adds	r6, r5, #1
 8021862:	2800      	cmp	r0, #0
 8021864:	d11f      	bne.n	80218a6 <_vfiprintf_r+0x112>
 8021866:	6822      	ldr	r2, [r4, #0]
 8021868:	06d3      	lsls	r3, r2, #27
 802186a:	d504      	bpl.n	8021876 <_vfiprintf_r+0xe2>
 802186c:	2353      	movs	r3, #83	@ 0x53
 802186e:	a904      	add	r1, sp, #16
 8021870:	185b      	adds	r3, r3, r1
 8021872:	2120      	movs	r1, #32
 8021874:	7019      	strb	r1, [r3, #0]
 8021876:	0713      	lsls	r3, r2, #28
 8021878:	d504      	bpl.n	8021884 <_vfiprintf_r+0xf0>
 802187a:	2353      	movs	r3, #83	@ 0x53
 802187c:	a904      	add	r1, sp, #16
 802187e:	185b      	adds	r3, r3, r1
 8021880:	212b      	movs	r1, #43	@ 0x2b
 8021882:	7019      	strb	r1, [r3, #0]
 8021884:	782b      	ldrb	r3, [r5, #0]
 8021886:	2b2a      	cmp	r3, #42	@ 0x2a
 8021888:	d016      	beq.n	80218b8 <_vfiprintf_r+0x124>
 802188a:	002e      	movs	r6, r5
 802188c:	2100      	movs	r1, #0
 802188e:	200a      	movs	r0, #10
 8021890:	68e3      	ldr	r3, [r4, #12]
 8021892:	7832      	ldrb	r2, [r6, #0]
 8021894:	1c75      	adds	r5, r6, #1
 8021896:	3a30      	subs	r2, #48	@ 0x30
 8021898:	2a09      	cmp	r2, #9
 802189a:	d950      	bls.n	802193e <_vfiprintf_r+0x1aa>
 802189c:	2900      	cmp	r1, #0
 802189e:	d111      	bne.n	80218c4 <_vfiprintf_r+0x130>
 80218a0:	e017      	b.n	80218d2 <_vfiprintf_r+0x13e>
 80218a2:	3601      	adds	r6, #1
 80218a4:	e7af      	b.n	8021806 <_vfiprintf_r+0x72>
 80218a6:	9b05      	ldr	r3, [sp, #20]
 80218a8:	6822      	ldr	r2, [r4, #0]
 80218aa:	1ac0      	subs	r0, r0, r3
 80218ac:	2301      	movs	r3, #1
 80218ae:	4083      	lsls	r3, r0
 80218b0:	4313      	orrs	r3, r2
 80218b2:	0035      	movs	r5, r6
 80218b4:	6023      	str	r3, [r4, #0]
 80218b6:	e7cc      	b.n	8021852 <_vfiprintf_r+0xbe>
 80218b8:	9b07      	ldr	r3, [sp, #28]
 80218ba:	1d19      	adds	r1, r3, #4
 80218bc:	681b      	ldr	r3, [r3, #0]
 80218be:	9107      	str	r1, [sp, #28]
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	db01      	blt.n	80218c8 <_vfiprintf_r+0x134>
 80218c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80218c6:	e004      	b.n	80218d2 <_vfiprintf_r+0x13e>
 80218c8:	425b      	negs	r3, r3
 80218ca:	60e3      	str	r3, [r4, #12]
 80218cc:	2302      	movs	r3, #2
 80218ce:	4313      	orrs	r3, r2
 80218d0:	6023      	str	r3, [r4, #0]
 80218d2:	7833      	ldrb	r3, [r6, #0]
 80218d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80218d6:	d10c      	bne.n	80218f2 <_vfiprintf_r+0x15e>
 80218d8:	7873      	ldrb	r3, [r6, #1]
 80218da:	2b2a      	cmp	r3, #42	@ 0x2a
 80218dc:	d134      	bne.n	8021948 <_vfiprintf_r+0x1b4>
 80218de:	9b07      	ldr	r3, [sp, #28]
 80218e0:	3602      	adds	r6, #2
 80218e2:	1d1a      	adds	r2, r3, #4
 80218e4:	681b      	ldr	r3, [r3, #0]
 80218e6:	9207      	str	r2, [sp, #28]
 80218e8:	2b00      	cmp	r3, #0
 80218ea:	da01      	bge.n	80218f0 <_vfiprintf_r+0x15c>
 80218ec:	2301      	movs	r3, #1
 80218ee:	425b      	negs	r3, r3
 80218f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80218f2:	4d32      	ldr	r5, [pc, #200]	@ (80219bc <_vfiprintf_r+0x228>)
 80218f4:	2203      	movs	r2, #3
 80218f6:	0028      	movs	r0, r5
 80218f8:	7831      	ldrb	r1, [r6, #0]
 80218fa:	f7fd fdde 	bl	801f4ba <memchr>
 80218fe:	2800      	cmp	r0, #0
 8021900:	d006      	beq.n	8021910 <_vfiprintf_r+0x17c>
 8021902:	2340      	movs	r3, #64	@ 0x40
 8021904:	1b40      	subs	r0, r0, r5
 8021906:	4083      	lsls	r3, r0
 8021908:	6822      	ldr	r2, [r4, #0]
 802190a:	3601      	adds	r6, #1
 802190c:	4313      	orrs	r3, r2
 802190e:	6023      	str	r3, [r4, #0]
 8021910:	7831      	ldrb	r1, [r6, #0]
 8021912:	2206      	movs	r2, #6
 8021914:	482a      	ldr	r0, [pc, #168]	@ (80219c0 <_vfiprintf_r+0x22c>)
 8021916:	1c75      	adds	r5, r6, #1
 8021918:	7621      	strb	r1, [r4, #24]
 802191a:	f7fd fdce 	bl	801f4ba <memchr>
 802191e:	2800      	cmp	r0, #0
 8021920:	d040      	beq.n	80219a4 <_vfiprintf_r+0x210>
 8021922:	4b28      	ldr	r3, [pc, #160]	@ (80219c4 <_vfiprintf_r+0x230>)
 8021924:	2b00      	cmp	r3, #0
 8021926:	d122      	bne.n	802196e <_vfiprintf_r+0x1da>
 8021928:	2207      	movs	r2, #7
 802192a:	9b07      	ldr	r3, [sp, #28]
 802192c:	3307      	adds	r3, #7
 802192e:	4393      	bics	r3, r2
 8021930:	3308      	adds	r3, #8
 8021932:	9307      	str	r3, [sp, #28]
 8021934:	6963      	ldr	r3, [r4, #20]
 8021936:	9a04      	ldr	r2, [sp, #16]
 8021938:	189b      	adds	r3, r3, r2
 802193a:	6163      	str	r3, [r4, #20]
 802193c:	e762      	b.n	8021804 <_vfiprintf_r+0x70>
 802193e:	4343      	muls	r3, r0
 8021940:	002e      	movs	r6, r5
 8021942:	2101      	movs	r1, #1
 8021944:	189b      	adds	r3, r3, r2
 8021946:	e7a4      	b.n	8021892 <_vfiprintf_r+0xfe>
 8021948:	2300      	movs	r3, #0
 802194a:	200a      	movs	r0, #10
 802194c:	0019      	movs	r1, r3
 802194e:	3601      	adds	r6, #1
 8021950:	6063      	str	r3, [r4, #4]
 8021952:	7832      	ldrb	r2, [r6, #0]
 8021954:	1c75      	adds	r5, r6, #1
 8021956:	3a30      	subs	r2, #48	@ 0x30
 8021958:	2a09      	cmp	r2, #9
 802195a:	d903      	bls.n	8021964 <_vfiprintf_r+0x1d0>
 802195c:	2b00      	cmp	r3, #0
 802195e:	d0c8      	beq.n	80218f2 <_vfiprintf_r+0x15e>
 8021960:	9109      	str	r1, [sp, #36]	@ 0x24
 8021962:	e7c6      	b.n	80218f2 <_vfiprintf_r+0x15e>
 8021964:	4341      	muls	r1, r0
 8021966:	002e      	movs	r6, r5
 8021968:	2301      	movs	r3, #1
 802196a:	1889      	adds	r1, r1, r2
 802196c:	e7f1      	b.n	8021952 <_vfiprintf_r+0x1be>
 802196e:	aa07      	add	r2, sp, #28
 8021970:	9200      	str	r2, [sp, #0]
 8021972:	0021      	movs	r1, r4
 8021974:	003a      	movs	r2, r7
 8021976:	4b14      	ldr	r3, [pc, #80]	@ (80219c8 <_vfiprintf_r+0x234>)
 8021978:	9803      	ldr	r0, [sp, #12]
 802197a:	f7fc fe99 	bl	801e6b0 <_printf_float>
 802197e:	9004      	str	r0, [sp, #16]
 8021980:	9b04      	ldr	r3, [sp, #16]
 8021982:	3301      	adds	r3, #1
 8021984:	d1d6      	bne.n	8021934 <_vfiprintf_r+0x1a0>
 8021986:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021988:	07db      	lsls	r3, r3, #31
 802198a:	d405      	bmi.n	8021998 <_vfiprintf_r+0x204>
 802198c:	89bb      	ldrh	r3, [r7, #12]
 802198e:	059b      	lsls	r3, r3, #22
 8021990:	d402      	bmi.n	8021998 <_vfiprintf_r+0x204>
 8021992:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021994:	f7fd fd90 	bl	801f4b8 <__retarget_lock_release_recursive>
 8021998:	89bb      	ldrh	r3, [r7, #12]
 802199a:	065b      	lsls	r3, r3, #25
 802199c:	d500      	bpl.n	80219a0 <_vfiprintf_r+0x20c>
 802199e:	e71e      	b.n	80217de <_vfiprintf_r+0x4a>
 80219a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80219a2:	e71e      	b.n	80217e2 <_vfiprintf_r+0x4e>
 80219a4:	aa07      	add	r2, sp, #28
 80219a6:	9200      	str	r2, [sp, #0]
 80219a8:	0021      	movs	r1, r4
 80219aa:	003a      	movs	r2, r7
 80219ac:	4b06      	ldr	r3, [pc, #24]	@ (80219c8 <_vfiprintf_r+0x234>)
 80219ae:	9803      	ldr	r0, [sp, #12]
 80219b0:	f7fd f92c 	bl	801ec0c <_printf_i>
 80219b4:	e7e3      	b.n	802197e <_vfiprintf_r+0x1ea>
 80219b6:	46c0      	nop			@ (mov r8, r8)
 80219b8:	080249a8 	.word	0x080249a8
 80219bc:	080249ae 	.word	0x080249ae
 80219c0:	080249b2 	.word	0x080249b2
 80219c4:	0801e6b1 	.word	0x0801e6b1
 80219c8:	0802176f 	.word	0x0802176f

080219cc <__sflush_r>:
 80219cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219ce:	220c      	movs	r2, #12
 80219d0:	5e8b      	ldrsh	r3, [r1, r2]
 80219d2:	0005      	movs	r5, r0
 80219d4:	000c      	movs	r4, r1
 80219d6:	071a      	lsls	r2, r3, #28
 80219d8:	d456      	bmi.n	8021a88 <__sflush_r+0xbc>
 80219da:	684a      	ldr	r2, [r1, #4]
 80219dc:	2a00      	cmp	r2, #0
 80219de:	dc02      	bgt.n	80219e6 <__sflush_r+0x1a>
 80219e0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80219e2:	2a00      	cmp	r2, #0
 80219e4:	dd4e      	ble.n	8021a84 <__sflush_r+0xb8>
 80219e6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80219e8:	2f00      	cmp	r7, #0
 80219ea:	d04b      	beq.n	8021a84 <__sflush_r+0xb8>
 80219ec:	2200      	movs	r2, #0
 80219ee:	2080      	movs	r0, #128	@ 0x80
 80219f0:	682e      	ldr	r6, [r5, #0]
 80219f2:	602a      	str	r2, [r5, #0]
 80219f4:	001a      	movs	r2, r3
 80219f6:	0140      	lsls	r0, r0, #5
 80219f8:	6a21      	ldr	r1, [r4, #32]
 80219fa:	4002      	ands	r2, r0
 80219fc:	4203      	tst	r3, r0
 80219fe:	d033      	beq.n	8021a68 <__sflush_r+0x9c>
 8021a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021a02:	89a3      	ldrh	r3, [r4, #12]
 8021a04:	075b      	lsls	r3, r3, #29
 8021a06:	d506      	bpl.n	8021a16 <__sflush_r+0x4a>
 8021a08:	6863      	ldr	r3, [r4, #4]
 8021a0a:	1ad2      	subs	r2, r2, r3
 8021a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	d001      	beq.n	8021a16 <__sflush_r+0x4a>
 8021a12:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021a14:	1ad2      	subs	r2, r2, r3
 8021a16:	2300      	movs	r3, #0
 8021a18:	0028      	movs	r0, r5
 8021a1a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021a1c:	6a21      	ldr	r1, [r4, #32]
 8021a1e:	47b8      	blx	r7
 8021a20:	89a2      	ldrh	r2, [r4, #12]
 8021a22:	1c43      	adds	r3, r0, #1
 8021a24:	d106      	bne.n	8021a34 <__sflush_r+0x68>
 8021a26:	6829      	ldr	r1, [r5, #0]
 8021a28:	291d      	cmp	r1, #29
 8021a2a:	d846      	bhi.n	8021aba <__sflush_r+0xee>
 8021a2c:	4b29      	ldr	r3, [pc, #164]	@ (8021ad4 <__sflush_r+0x108>)
 8021a2e:	410b      	asrs	r3, r1
 8021a30:	07db      	lsls	r3, r3, #31
 8021a32:	d442      	bmi.n	8021aba <__sflush_r+0xee>
 8021a34:	2300      	movs	r3, #0
 8021a36:	6063      	str	r3, [r4, #4]
 8021a38:	6923      	ldr	r3, [r4, #16]
 8021a3a:	6023      	str	r3, [r4, #0]
 8021a3c:	04d2      	lsls	r2, r2, #19
 8021a3e:	d505      	bpl.n	8021a4c <__sflush_r+0x80>
 8021a40:	1c43      	adds	r3, r0, #1
 8021a42:	d102      	bne.n	8021a4a <__sflush_r+0x7e>
 8021a44:	682b      	ldr	r3, [r5, #0]
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d100      	bne.n	8021a4c <__sflush_r+0x80>
 8021a4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8021a4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021a4e:	602e      	str	r6, [r5, #0]
 8021a50:	2900      	cmp	r1, #0
 8021a52:	d017      	beq.n	8021a84 <__sflush_r+0xb8>
 8021a54:	0023      	movs	r3, r4
 8021a56:	3344      	adds	r3, #68	@ 0x44
 8021a58:	4299      	cmp	r1, r3
 8021a5a:	d002      	beq.n	8021a62 <__sflush_r+0x96>
 8021a5c:	0028      	movs	r0, r5
 8021a5e:	f7fe fbc9 	bl	80201f4 <_free_r>
 8021a62:	2300      	movs	r3, #0
 8021a64:	6363      	str	r3, [r4, #52]	@ 0x34
 8021a66:	e00d      	b.n	8021a84 <__sflush_r+0xb8>
 8021a68:	2301      	movs	r3, #1
 8021a6a:	0028      	movs	r0, r5
 8021a6c:	47b8      	blx	r7
 8021a6e:	0002      	movs	r2, r0
 8021a70:	1c43      	adds	r3, r0, #1
 8021a72:	d1c6      	bne.n	8021a02 <__sflush_r+0x36>
 8021a74:	682b      	ldr	r3, [r5, #0]
 8021a76:	2b00      	cmp	r3, #0
 8021a78:	d0c3      	beq.n	8021a02 <__sflush_r+0x36>
 8021a7a:	2b1d      	cmp	r3, #29
 8021a7c:	d001      	beq.n	8021a82 <__sflush_r+0xb6>
 8021a7e:	2b16      	cmp	r3, #22
 8021a80:	d11a      	bne.n	8021ab8 <__sflush_r+0xec>
 8021a82:	602e      	str	r6, [r5, #0]
 8021a84:	2000      	movs	r0, #0
 8021a86:	e01e      	b.n	8021ac6 <__sflush_r+0xfa>
 8021a88:	690e      	ldr	r6, [r1, #16]
 8021a8a:	2e00      	cmp	r6, #0
 8021a8c:	d0fa      	beq.n	8021a84 <__sflush_r+0xb8>
 8021a8e:	680f      	ldr	r7, [r1, #0]
 8021a90:	600e      	str	r6, [r1, #0]
 8021a92:	1bba      	subs	r2, r7, r6
 8021a94:	9201      	str	r2, [sp, #4]
 8021a96:	2200      	movs	r2, #0
 8021a98:	079b      	lsls	r3, r3, #30
 8021a9a:	d100      	bne.n	8021a9e <__sflush_r+0xd2>
 8021a9c:	694a      	ldr	r2, [r1, #20]
 8021a9e:	60a2      	str	r2, [r4, #8]
 8021aa0:	9b01      	ldr	r3, [sp, #4]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	ddee      	ble.n	8021a84 <__sflush_r+0xb8>
 8021aa6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021aa8:	0032      	movs	r2, r6
 8021aaa:	001f      	movs	r7, r3
 8021aac:	0028      	movs	r0, r5
 8021aae:	9b01      	ldr	r3, [sp, #4]
 8021ab0:	6a21      	ldr	r1, [r4, #32]
 8021ab2:	47b8      	blx	r7
 8021ab4:	2800      	cmp	r0, #0
 8021ab6:	dc07      	bgt.n	8021ac8 <__sflush_r+0xfc>
 8021ab8:	89a2      	ldrh	r2, [r4, #12]
 8021aba:	2340      	movs	r3, #64	@ 0x40
 8021abc:	2001      	movs	r0, #1
 8021abe:	4313      	orrs	r3, r2
 8021ac0:	b21b      	sxth	r3, r3
 8021ac2:	81a3      	strh	r3, [r4, #12]
 8021ac4:	4240      	negs	r0, r0
 8021ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021ac8:	9b01      	ldr	r3, [sp, #4]
 8021aca:	1836      	adds	r6, r6, r0
 8021acc:	1a1b      	subs	r3, r3, r0
 8021ace:	9301      	str	r3, [sp, #4]
 8021ad0:	e7e6      	b.n	8021aa0 <__sflush_r+0xd4>
 8021ad2:	46c0      	nop			@ (mov r8, r8)
 8021ad4:	dfbffffe 	.word	0xdfbffffe

08021ad8 <_fflush_r>:
 8021ad8:	690b      	ldr	r3, [r1, #16]
 8021ada:	b570      	push	{r4, r5, r6, lr}
 8021adc:	0005      	movs	r5, r0
 8021ade:	000c      	movs	r4, r1
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	d102      	bne.n	8021aea <_fflush_r+0x12>
 8021ae4:	2500      	movs	r5, #0
 8021ae6:	0028      	movs	r0, r5
 8021ae8:	bd70      	pop	{r4, r5, r6, pc}
 8021aea:	2800      	cmp	r0, #0
 8021aec:	d004      	beq.n	8021af8 <_fflush_r+0x20>
 8021aee:	6a03      	ldr	r3, [r0, #32]
 8021af0:	2b00      	cmp	r3, #0
 8021af2:	d101      	bne.n	8021af8 <_fflush_r+0x20>
 8021af4:	f7fd fa28 	bl	801ef48 <__sinit>
 8021af8:	220c      	movs	r2, #12
 8021afa:	5ea3      	ldrsh	r3, [r4, r2]
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d0f1      	beq.n	8021ae4 <_fflush_r+0xc>
 8021b00:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021b02:	07d2      	lsls	r2, r2, #31
 8021b04:	d404      	bmi.n	8021b10 <_fflush_r+0x38>
 8021b06:	059b      	lsls	r3, r3, #22
 8021b08:	d402      	bmi.n	8021b10 <_fflush_r+0x38>
 8021b0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021b0c:	f7fd fcd3 	bl	801f4b6 <__retarget_lock_acquire_recursive>
 8021b10:	0028      	movs	r0, r5
 8021b12:	0021      	movs	r1, r4
 8021b14:	f7ff ff5a 	bl	80219cc <__sflush_r>
 8021b18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021b1a:	0005      	movs	r5, r0
 8021b1c:	07db      	lsls	r3, r3, #31
 8021b1e:	d4e2      	bmi.n	8021ae6 <_fflush_r+0xe>
 8021b20:	89a3      	ldrh	r3, [r4, #12]
 8021b22:	059b      	lsls	r3, r3, #22
 8021b24:	d4df      	bmi.n	8021ae6 <_fflush_r+0xe>
 8021b26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021b28:	f7fd fcc6 	bl	801f4b8 <__retarget_lock_release_recursive>
 8021b2c:	e7db      	b.n	8021ae6 <_fflush_r+0xe>
	...

08021b30 <__swhatbuf_r>:
 8021b30:	b570      	push	{r4, r5, r6, lr}
 8021b32:	000e      	movs	r6, r1
 8021b34:	001d      	movs	r5, r3
 8021b36:	230e      	movs	r3, #14
 8021b38:	5ec9      	ldrsh	r1, [r1, r3]
 8021b3a:	0014      	movs	r4, r2
 8021b3c:	b096      	sub	sp, #88	@ 0x58
 8021b3e:	2900      	cmp	r1, #0
 8021b40:	da0c      	bge.n	8021b5c <__swhatbuf_r+0x2c>
 8021b42:	89b2      	ldrh	r2, [r6, #12]
 8021b44:	2380      	movs	r3, #128	@ 0x80
 8021b46:	0011      	movs	r1, r2
 8021b48:	4019      	ands	r1, r3
 8021b4a:	421a      	tst	r2, r3
 8021b4c:	d114      	bne.n	8021b78 <__swhatbuf_r+0x48>
 8021b4e:	2380      	movs	r3, #128	@ 0x80
 8021b50:	00db      	lsls	r3, r3, #3
 8021b52:	2000      	movs	r0, #0
 8021b54:	6029      	str	r1, [r5, #0]
 8021b56:	6023      	str	r3, [r4, #0]
 8021b58:	b016      	add	sp, #88	@ 0x58
 8021b5a:	bd70      	pop	{r4, r5, r6, pc}
 8021b5c:	466a      	mov	r2, sp
 8021b5e:	f000 f865 	bl	8021c2c <_fstat_r>
 8021b62:	2800      	cmp	r0, #0
 8021b64:	dbed      	blt.n	8021b42 <__swhatbuf_r+0x12>
 8021b66:	23f0      	movs	r3, #240	@ 0xf0
 8021b68:	9901      	ldr	r1, [sp, #4]
 8021b6a:	021b      	lsls	r3, r3, #8
 8021b6c:	4019      	ands	r1, r3
 8021b6e:	4b04      	ldr	r3, [pc, #16]	@ (8021b80 <__swhatbuf_r+0x50>)
 8021b70:	18c9      	adds	r1, r1, r3
 8021b72:	424b      	negs	r3, r1
 8021b74:	4159      	adcs	r1, r3
 8021b76:	e7ea      	b.n	8021b4e <__swhatbuf_r+0x1e>
 8021b78:	2100      	movs	r1, #0
 8021b7a:	2340      	movs	r3, #64	@ 0x40
 8021b7c:	e7e9      	b.n	8021b52 <__swhatbuf_r+0x22>
 8021b7e:	46c0      	nop			@ (mov r8, r8)
 8021b80:	ffffe000 	.word	0xffffe000

08021b84 <__smakebuf_r>:
 8021b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b86:	2602      	movs	r6, #2
 8021b88:	898b      	ldrh	r3, [r1, #12]
 8021b8a:	0005      	movs	r5, r0
 8021b8c:	000c      	movs	r4, r1
 8021b8e:	b085      	sub	sp, #20
 8021b90:	4233      	tst	r3, r6
 8021b92:	d007      	beq.n	8021ba4 <__smakebuf_r+0x20>
 8021b94:	0023      	movs	r3, r4
 8021b96:	3347      	adds	r3, #71	@ 0x47
 8021b98:	6023      	str	r3, [r4, #0]
 8021b9a:	6123      	str	r3, [r4, #16]
 8021b9c:	2301      	movs	r3, #1
 8021b9e:	6163      	str	r3, [r4, #20]
 8021ba0:	b005      	add	sp, #20
 8021ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ba4:	ab03      	add	r3, sp, #12
 8021ba6:	aa02      	add	r2, sp, #8
 8021ba8:	f7ff ffc2 	bl	8021b30 <__swhatbuf_r>
 8021bac:	9f02      	ldr	r7, [sp, #8]
 8021bae:	9001      	str	r0, [sp, #4]
 8021bb0:	0039      	movs	r1, r7
 8021bb2:	0028      	movs	r0, r5
 8021bb4:	f7fe feee 	bl	8020994 <_malloc_r>
 8021bb8:	2800      	cmp	r0, #0
 8021bba:	d108      	bne.n	8021bce <__smakebuf_r+0x4a>
 8021bbc:	220c      	movs	r2, #12
 8021bbe:	5ea3      	ldrsh	r3, [r4, r2]
 8021bc0:	059a      	lsls	r2, r3, #22
 8021bc2:	d4ed      	bmi.n	8021ba0 <__smakebuf_r+0x1c>
 8021bc4:	2203      	movs	r2, #3
 8021bc6:	4393      	bics	r3, r2
 8021bc8:	431e      	orrs	r6, r3
 8021bca:	81a6      	strh	r6, [r4, #12]
 8021bcc:	e7e2      	b.n	8021b94 <__smakebuf_r+0x10>
 8021bce:	2380      	movs	r3, #128	@ 0x80
 8021bd0:	89a2      	ldrh	r2, [r4, #12]
 8021bd2:	6020      	str	r0, [r4, #0]
 8021bd4:	4313      	orrs	r3, r2
 8021bd6:	81a3      	strh	r3, [r4, #12]
 8021bd8:	9b03      	ldr	r3, [sp, #12]
 8021bda:	6120      	str	r0, [r4, #16]
 8021bdc:	6167      	str	r7, [r4, #20]
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d00c      	beq.n	8021bfc <__smakebuf_r+0x78>
 8021be2:	0028      	movs	r0, r5
 8021be4:	230e      	movs	r3, #14
 8021be6:	5ee1      	ldrsh	r1, [r4, r3]
 8021be8:	f000 f832 	bl	8021c50 <_isatty_r>
 8021bec:	2800      	cmp	r0, #0
 8021bee:	d005      	beq.n	8021bfc <__smakebuf_r+0x78>
 8021bf0:	2303      	movs	r3, #3
 8021bf2:	89a2      	ldrh	r2, [r4, #12]
 8021bf4:	439a      	bics	r2, r3
 8021bf6:	3b02      	subs	r3, #2
 8021bf8:	4313      	orrs	r3, r2
 8021bfa:	81a3      	strh	r3, [r4, #12]
 8021bfc:	89a3      	ldrh	r3, [r4, #12]
 8021bfe:	9a01      	ldr	r2, [sp, #4]
 8021c00:	4313      	orrs	r3, r2
 8021c02:	81a3      	strh	r3, [r4, #12]
 8021c04:	e7cc      	b.n	8021ba0 <__smakebuf_r+0x1c>

08021c06 <memmove>:
 8021c06:	b510      	push	{r4, lr}
 8021c08:	4288      	cmp	r0, r1
 8021c0a:	d806      	bhi.n	8021c1a <memmove+0x14>
 8021c0c:	2300      	movs	r3, #0
 8021c0e:	429a      	cmp	r2, r3
 8021c10:	d008      	beq.n	8021c24 <memmove+0x1e>
 8021c12:	5ccc      	ldrb	r4, [r1, r3]
 8021c14:	54c4      	strb	r4, [r0, r3]
 8021c16:	3301      	adds	r3, #1
 8021c18:	e7f9      	b.n	8021c0e <memmove+0x8>
 8021c1a:	188b      	adds	r3, r1, r2
 8021c1c:	4298      	cmp	r0, r3
 8021c1e:	d2f5      	bcs.n	8021c0c <memmove+0x6>
 8021c20:	3a01      	subs	r2, #1
 8021c22:	d200      	bcs.n	8021c26 <memmove+0x20>
 8021c24:	bd10      	pop	{r4, pc}
 8021c26:	5c8b      	ldrb	r3, [r1, r2]
 8021c28:	5483      	strb	r3, [r0, r2]
 8021c2a:	e7f9      	b.n	8021c20 <memmove+0x1a>

08021c2c <_fstat_r>:
 8021c2c:	2300      	movs	r3, #0
 8021c2e:	b570      	push	{r4, r5, r6, lr}
 8021c30:	4d06      	ldr	r5, [pc, #24]	@ (8021c4c <_fstat_r+0x20>)
 8021c32:	0004      	movs	r4, r0
 8021c34:	0008      	movs	r0, r1
 8021c36:	0011      	movs	r1, r2
 8021c38:	602b      	str	r3, [r5, #0]
 8021c3a:	f7eb f973 	bl	800cf24 <_fstat>
 8021c3e:	1c43      	adds	r3, r0, #1
 8021c40:	d103      	bne.n	8021c4a <_fstat_r+0x1e>
 8021c42:	682b      	ldr	r3, [r5, #0]
 8021c44:	2b00      	cmp	r3, #0
 8021c46:	d000      	beq.n	8021c4a <_fstat_r+0x1e>
 8021c48:	6023      	str	r3, [r4, #0]
 8021c4a:	bd70      	pop	{r4, r5, r6, pc}
 8021c4c:	2000390c 	.word	0x2000390c

08021c50 <_isatty_r>:
 8021c50:	2300      	movs	r3, #0
 8021c52:	b570      	push	{r4, r5, r6, lr}
 8021c54:	4d06      	ldr	r5, [pc, #24]	@ (8021c70 <_isatty_r+0x20>)
 8021c56:	0004      	movs	r4, r0
 8021c58:	0008      	movs	r0, r1
 8021c5a:	602b      	str	r3, [r5, #0]
 8021c5c:	f7eb f970 	bl	800cf40 <_isatty>
 8021c60:	1c43      	adds	r3, r0, #1
 8021c62:	d103      	bne.n	8021c6c <_isatty_r+0x1c>
 8021c64:	682b      	ldr	r3, [r5, #0]
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d000      	beq.n	8021c6c <_isatty_r+0x1c>
 8021c6a:	6023      	str	r3, [r4, #0]
 8021c6c:	bd70      	pop	{r4, r5, r6, pc}
 8021c6e:	46c0      	nop			@ (mov r8, r8)
 8021c70:	2000390c 	.word	0x2000390c

08021c74 <_sbrk_r>:
 8021c74:	2300      	movs	r3, #0
 8021c76:	b570      	push	{r4, r5, r6, lr}
 8021c78:	4d06      	ldr	r5, [pc, #24]	@ (8021c94 <_sbrk_r+0x20>)
 8021c7a:	0004      	movs	r4, r0
 8021c7c:	0008      	movs	r0, r1
 8021c7e:	602b      	str	r3, [r5, #0]
 8021c80:	f7eb f972 	bl	800cf68 <_sbrk>
 8021c84:	1c43      	adds	r3, r0, #1
 8021c86:	d103      	bne.n	8021c90 <_sbrk_r+0x1c>
 8021c88:	682b      	ldr	r3, [r5, #0]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d000      	beq.n	8021c90 <_sbrk_r+0x1c>
 8021c8e:	6023      	str	r3, [r4, #0]
 8021c90:	bd70      	pop	{r4, r5, r6, pc}
 8021c92:	46c0      	nop			@ (mov r8, r8)
 8021c94:	2000390c 	.word	0x2000390c

08021c98 <__assert_func>:
 8021c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021c9a:	0014      	movs	r4, r2
 8021c9c:	001a      	movs	r2, r3
 8021c9e:	4b09      	ldr	r3, [pc, #36]	@ (8021cc4 <__assert_func+0x2c>)
 8021ca0:	0005      	movs	r5, r0
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	000e      	movs	r6, r1
 8021ca6:	68d8      	ldr	r0, [r3, #12]
 8021ca8:	4b07      	ldr	r3, [pc, #28]	@ (8021cc8 <__assert_func+0x30>)
 8021caa:	2c00      	cmp	r4, #0
 8021cac:	d101      	bne.n	8021cb2 <__assert_func+0x1a>
 8021cae:	4b07      	ldr	r3, [pc, #28]	@ (8021ccc <__assert_func+0x34>)
 8021cb0:	001c      	movs	r4, r3
 8021cb2:	4907      	ldr	r1, [pc, #28]	@ (8021cd0 <__assert_func+0x38>)
 8021cb4:	9301      	str	r3, [sp, #4]
 8021cb6:	9402      	str	r4, [sp, #8]
 8021cb8:	002b      	movs	r3, r5
 8021cba:	9600      	str	r6, [sp, #0]
 8021cbc:	f000 f866 	bl	8021d8c <fiprintf>
 8021cc0:	f000 f874 	bl	8021dac <abort>
 8021cc4:	200003c8 	.word	0x200003c8
 8021cc8:	080249b9 	.word	0x080249b9
 8021ccc:	080249f4 	.word	0x080249f4
 8021cd0:	080249c6 	.word	0x080249c6

08021cd4 <_calloc_r>:
 8021cd4:	b570      	push	{r4, r5, r6, lr}
 8021cd6:	0c0b      	lsrs	r3, r1, #16
 8021cd8:	0c15      	lsrs	r5, r2, #16
 8021cda:	2b00      	cmp	r3, #0
 8021cdc:	d11e      	bne.n	8021d1c <_calloc_r+0x48>
 8021cde:	2d00      	cmp	r5, #0
 8021ce0:	d10c      	bne.n	8021cfc <_calloc_r+0x28>
 8021ce2:	b289      	uxth	r1, r1
 8021ce4:	b294      	uxth	r4, r2
 8021ce6:	434c      	muls	r4, r1
 8021ce8:	0021      	movs	r1, r4
 8021cea:	f7fe fe53 	bl	8020994 <_malloc_r>
 8021cee:	1e05      	subs	r5, r0, #0
 8021cf0:	d01a      	beq.n	8021d28 <_calloc_r+0x54>
 8021cf2:	0022      	movs	r2, r4
 8021cf4:	2100      	movs	r1, #0
 8021cf6:	f7fd fb0f 	bl	801f318 <memset>
 8021cfa:	e016      	b.n	8021d2a <_calloc_r+0x56>
 8021cfc:	1c2b      	adds	r3, r5, #0
 8021cfe:	1c0c      	adds	r4, r1, #0
 8021d00:	b289      	uxth	r1, r1
 8021d02:	b292      	uxth	r2, r2
 8021d04:	434a      	muls	r2, r1
 8021d06:	b29b      	uxth	r3, r3
 8021d08:	b2a1      	uxth	r1, r4
 8021d0a:	4359      	muls	r1, r3
 8021d0c:	0c14      	lsrs	r4, r2, #16
 8021d0e:	190c      	adds	r4, r1, r4
 8021d10:	0c23      	lsrs	r3, r4, #16
 8021d12:	d107      	bne.n	8021d24 <_calloc_r+0x50>
 8021d14:	0424      	lsls	r4, r4, #16
 8021d16:	b292      	uxth	r2, r2
 8021d18:	4314      	orrs	r4, r2
 8021d1a:	e7e5      	b.n	8021ce8 <_calloc_r+0x14>
 8021d1c:	2d00      	cmp	r5, #0
 8021d1e:	d101      	bne.n	8021d24 <_calloc_r+0x50>
 8021d20:	1c14      	adds	r4, r2, #0
 8021d22:	e7ed      	b.n	8021d00 <_calloc_r+0x2c>
 8021d24:	230c      	movs	r3, #12
 8021d26:	6003      	str	r3, [r0, #0]
 8021d28:	2500      	movs	r5, #0
 8021d2a:	0028      	movs	r0, r5
 8021d2c:	bd70      	pop	{r4, r5, r6, pc}

08021d2e <_realloc_r>:
 8021d2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021d30:	0006      	movs	r6, r0
 8021d32:	000c      	movs	r4, r1
 8021d34:	0015      	movs	r5, r2
 8021d36:	2900      	cmp	r1, #0
 8021d38:	d105      	bne.n	8021d46 <_realloc_r+0x18>
 8021d3a:	0011      	movs	r1, r2
 8021d3c:	f7fe fe2a 	bl	8020994 <_malloc_r>
 8021d40:	0004      	movs	r4, r0
 8021d42:	0020      	movs	r0, r4
 8021d44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021d46:	2a00      	cmp	r2, #0
 8021d48:	d103      	bne.n	8021d52 <_realloc_r+0x24>
 8021d4a:	f7fe fa53 	bl	80201f4 <_free_r>
 8021d4e:	2400      	movs	r4, #0
 8021d50:	e7f7      	b.n	8021d42 <_realloc_r+0x14>
 8021d52:	f000 f832 	bl	8021dba <_malloc_usable_size_r>
 8021d56:	0007      	movs	r7, r0
 8021d58:	4285      	cmp	r5, r0
 8021d5a:	d802      	bhi.n	8021d62 <_realloc_r+0x34>
 8021d5c:	0843      	lsrs	r3, r0, #1
 8021d5e:	42ab      	cmp	r3, r5
 8021d60:	d3ef      	bcc.n	8021d42 <_realloc_r+0x14>
 8021d62:	0029      	movs	r1, r5
 8021d64:	0030      	movs	r0, r6
 8021d66:	f7fe fe15 	bl	8020994 <_malloc_r>
 8021d6a:	9001      	str	r0, [sp, #4]
 8021d6c:	2800      	cmp	r0, #0
 8021d6e:	d0ee      	beq.n	8021d4e <_realloc_r+0x20>
 8021d70:	002a      	movs	r2, r5
 8021d72:	42bd      	cmp	r5, r7
 8021d74:	d900      	bls.n	8021d78 <_realloc_r+0x4a>
 8021d76:	003a      	movs	r2, r7
 8021d78:	0021      	movs	r1, r4
 8021d7a:	9801      	ldr	r0, [sp, #4]
 8021d7c:	f7fd fba8 	bl	801f4d0 <memcpy>
 8021d80:	0021      	movs	r1, r4
 8021d82:	0030      	movs	r0, r6
 8021d84:	f7fe fa36 	bl	80201f4 <_free_r>
 8021d88:	9c01      	ldr	r4, [sp, #4]
 8021d8a:	e7da      	b.n	8021d42 <_realloc_r+0x14>

08021d8c <fiprintf>:
 8021d8c:	b40e      	push	{r1, r2, r3}
 8021d8e:	b517      	push	{r0, r1, r2, r4, lr}
 8021d90:	4c05      	ldr	r4, [pc, #20]	@ (8021da8 <fiprintf+0x1c>)
 8021d92:	ab05      	add	r3, sp, #20
 8021d94:	cb04      	ldmia	r3!, {r2}
 8021d96:	0001      	movs	r1, r0
 8021d98:	6820      	ldr	r0, [r4, #0]
 8021d9a:	9301      	str	r3, [sp, #4]
 8021d9c:	f7ff fcfa 	bl	8021794 <_vfiprintf_r>
 8021da0:	bc1e      	pop	{r1, r2, r3, r4}
 8021da2:	bc08      	pop	{r3}
 8021da4:	b003      	add	sp, #12
 8021da6:	4718      	bx	r3
 8021da8:	200003c8 	.word	0x200003c8

08021dac <abort>:
 8021dac:	2006      	movs	r0, #6
 8021dae:	b510      	push	{r4, lr}
 8021db0:	f000 f834 	bl	8021e1c <raise>
 8021db4:	2001      	movs	r0, #1
 8021db6:	f7eb f881 	bl	800cebc <_exit>

08021dba <_malloc_usable_size_r>:
 8021dba:	1f0b      	subs	r3, r1, #4
 8021dbc:	681b      	ldr	r3, [r3, #0]
 8021dbe:	1f18      	subs	r0, r3, #4
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	da01      	bge.n	8021dc8 <_malloc_usable_size_r+0xe>
 8021dc4:	580b      	ldr	r3, [r1, r0]
 8021dc6:	18c0      	adds	r0, r0, r3
 8021dc8:	4770      	bx	lr

08021dca <_raise_r>:
 8021dca:	b570      	push	{r4, r5, r6, lr}
 8021dcc:	0004      	movs	r4, r0
 8021dce:	000d      	movs	r5, r1
 8021dd0:	291f      	cmp	r1, #31
 8021dd2:	d904      	bls.n	8021dde <_raise_r+0x14>
 8021dd4:	2316      	movs	r3, #22
 8021dd6:	6003      	str	r3, [r0, #0]
 8021dd8:	2001      	movs	r0, #1
 8021dda:	4240      	negs	r0, r0
 8021ddc:	bd70      	pop	{r4, r5, r6, pc}
 8021dde:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d004      	beq.n	8021dee <_raise_r+0x24>
 8021de4:	008a      	lsls	r2, r1, #2
 8021de6:	189b      	adds	r3, r3, r2
 8021de8:	681a      	ldr	r2, [r3, #0]
 8021dea:	2a00      	cmp	r2, #0
 8021dec:	d108      	bne.n	8021e00 <_raise_r+0x36>
 8021dee:	0020      	movs	r0, r4
 8021df0:	f000 f830 	bl	8021e54 <_getpid_r>
 8021df4:	002a      	movs	r2, r5
 8021df6:	0001      	movs	r1, r0
 8021df8:	0020      	movs	r0, r4
 8021dfa:	f000 f819 	bl	8021e30 <_kill_r>
 8021dfe:	e7ed      	b.n	8021ddc <_raise_r+0x12>
 8021e00:	2a01      	cmp	r2, #1
 8021e02:	d009      	beq.n	8021e18 <_raise_r+0x4e>
 8021e04:	1c51      	adds	r1, r2, #1
 8021e06:	d103      	bne.n	8021e10 <_raise_r+0x46>
 8021e08:	2316      	movs	r3, #22
 8021e0a:	6003      	str	r3, [r0, #0]
 8021e0c:	2001      	movs	r0, #1
 8021e0e:	e7e5      	b.n	8021ddc <_raise_r+0x12>
 8021e10:	2100      	movs	r1, #0
 8021e12:	0028      	movs	r0, r5
 8021e14:	6019      	str	r1, [r3, #0]
 8021e16:	4790      	blx	r2
 8021e18:	2000      	movs	r0, #0
 8021e1a:	e7df      	b.n	8021ddc <_raise_r+0x12>

08021e1c <raise>:
 8021e1c:	b510      	push	{r4, lr}
 8021e1e:	4b03      	ldr	r3, [pc, #12]	@ (8021e2c <raise+0x10>)
 8021e20:	0001      	movs	r1, r0
 8021e22:	6818      	ldr	r0, [r3, #0]
 8021e24:	f7ff ffd1 	bl	8021dca <_raise_r>
 8021e28:	bd10      	pop	{r4, pc}
 8021e2a:	46c0      	nop			@ (mov r8, r8)
 8021e2c:	200003c8 	.word	0x200003c8

08021e30 <_kill_r>:
 8021e30:	2300      	movs	r3, #0
 8021e32:	b570      	push	{r4, r5, r6, lr}
 8021e34:	4d06      	ldr	r5, [pc, #24]	@ (8021e50 <_kill_r+0x20>)
 8021e36:	0004      	movs	r4, r0
 8021e38:	0008      	movs	r0, r1
 8021e3a:	0011      	movs	r1, r2
 8021e3c:	602b      	str	r3, [r5, #0]
 8021e3e:	f7eb f82d 	bl	800ce9c <_kill>
 8021e42:	1c43      	adds	r3, r0, #1
 8021e44:	d103      	bne.n	8021e4e <_kill_r+0x1e>
 8021e46:	682b      	ldr	r3, [r5, #0]
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d000      	beq.n	8021e4e <_kill_r+0x1e>
 8021e4c:	6023      	str	r3, [r4, #0]
 8021e4e:	bd70      	pop	{r4, r5, r6, pc}
 8021e50:	2000390c 	.word	0x2000390c

08021e54 <_getpid_r>:
 8021e54:	b510      	push	{r4, lr}
 8021e56:	f7eb f81b 	bl	800ce90 <_getpid>
 8021e5a:	bd10      	pop	{r4, pc}

08021e5c <expf>:
 8021e5c:	b570      	push	{r4, r5, r6, lr}
 8021e5e:	1c04      	adds	r4, r0, #0
 8021e60:	f000 f8e6 	bl	8022030 <__ieee754_expf>
 8021e64:	1c05      	adds	r5, r0, #0
 8021e66:	1c20      	adds	r0, r4, #0
 8021e68:	f000 f83c 	bl	8021ee4 <finitef>
 8021e6c:	2800      	cmp	r0, #0
 8021e6e:	d00b      	beq.n	8021e88 <expf+0x2c>
 8021e70:	490c      	ldr	r1, [pc, #48]	@ (8021ea4 <expf+0x48>)
 8021e72:	1c20      	adds	r0, r4, #0
 8021e74:	f7de fb70 	bl	8000558 <__aeabi_fcmpgt>
 8021e78:	2800      	cmp	r0, #0
 8021e7a:	d007      	beq.n	8021e8c <expf+0x30>
 8021e7c:	f7fd faf0 	bl	801f460 <__errno>
 8021e80:	25ff      	movs	r5, #255	@ 0xff
 8021e82:	2322      	movs	r3, #34	@ 0x22
 8021e84:	05ed      	lsls	r5, r5, #23
 8021e86:	6003      	str	r3, [r0, #0]
 8021e88:	1c28      	adds	r0, r5, #0
 8021e8a:	bd70      	pop	{r4, r5, r6, pc}
 8021e8c:	4906      	ldr	r1, [pc, #24]	@ (8021ea8 <expf+0x4c>)
 8021e8e:	1c20      	adds	r0, r4, #0
 8021e90:	f7de fb4e 	bl	8000530 <__aeabi_fcmplt>
 8021e94:	2800      	cmp	r0, #0
 8021e96:	d0f7      	beq.n	8021e88 <expf+0x2c>
 8021e98:	f7fd fae2 	bl	801f460 <__errno>
 8021e9c:	2322      	movs	r3, #34	@ 0x22
 8021e9e:	2500      	movs	r5, #0
 8021ea0:	6003      	str	r3, [r0, #0]
 8021ea2:	e7f1      	b.n	8021e88 <expf+0x2c>
 8021ea4:	42b17217 	.word	0x42b17217
 8021ea8:	c2cff1b5 	.word	0xc2cff1b5

08021eac <sqrtf>:
 8021eac:	b570      	push	{r4, r5, r6, lr}
 8021eae:	1c05      	adds	r5, r0, #0
 8021eb0:	f000 f822 	bl	8021ef8 <__ieee754_sqrtf>
 8021eb4:	1c29      	adds	r1, r5, #0
 8021eb6:	1c04      	adds	r4, r0, #0
 8021eb8:	1c28      	adds	r0, r5, #0
 8021eba:	f7df fb53 	bl	8001564 <__aeabi_fcmpun>
 8021ebe:	2800      	cmp	r0, #0
 8021ec0:	d10e      	bne.n	8021ee0 <sqrtf+0x34>
 8021ec2:	2100      	movs	r1, #0
 8021ec4:	1c28      	adds	r0, r5, #0
 8021ec6:	f7de fb33 	bl	8000530 <__aeabi_fcmplt>
 8021eca:	2800      	cmp	r0, #0
 8021ecc:	d008      	beq.n	8021ee0 <sqrtf+0x34>
 8021ece:	f7fd fac7 	bl	801f460 <__errno>
 8021ed2:	2321      	movs	r3, #33	@ 0x21
 8021ed4:	2100      	movs	r1, #0
 8021ed6:	6003      	str	r3, [r0, #0]
 8021ed8:	1c08      	adds	r0, r1, #0
 8021eda:	f7de fe7b 	bl	8000bd4 <__aeabi_fdiv>
 8021ede:	1c04      	adds	r4, r0, #0
 8021ee0:	1c20      	adds	r0, r4, #0
 8021ee2:	bd70      	pop	{r4, r5, r6, pc}

08021ee4 <finitef>:
 8021ee4:	22ff      	movs	r2, #255	@ 0xff
 8021ee6:	0043      	lsls	r3, r0, #1
 8021ee8:	085b      	lsrs	r3, r3, #1
 8021eea:	2001      	movs	r0, #1
 8021eec:	05d2      	lsls	r2, r2, #23
 8021eee:	4293      	cmp	r3, r2
 8021ef0:	db00      	blt.n	8021ef4 <finitef+0x10>
 8021ef2:	2000      	movs	r0, #0
 8021ef4:	4770      	bx	lr
	...

08021ef8 <__ieee754_sqrtf>:
 8021ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021efa:	0003      	movs	r3, r0
 8021efc:	0042      	lsls	r2, r0, #1
 8021efe:	1c04      	adds	r4, r0, #0
 8021f00:	20ff      	movs	r0, #255	@ 0xff
 8021f02:	0852      	lsrs	r2, r2, #1
 8021f04:	05c0      	lsls	r0, r0, #23
 8021f06:	4282      	cmp	r2, r0
 8021f08:	d30a      	bcc.n	8021f20 <__ieee754_sqrtf+0x28>
 8021f0a:	1c21      	adds	r1, r4, #0
 8021f0c:	1c20      	adds	r0, r4, #0
 8021f0e:	f7df f847 	bl	8000fa0 <__aeabi_fmul>
 8021f12:	1c01      	adds	r1, r0, #0
 8021f14:	1c20      	adds	r0, r4, #0
 8021f16:	f7de fcd3 	bl	80008c0 <__aeabi_fadd>
 8021f1a:	1c04      	adds	r4, r0, #0
 8021f1c:	1c20      	adds	r0, r4, #0
 8021f1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021f20:	2a00      	cmp	r2, #0
 8021f22:	d0fb      	beq.n	8021f1c <__ieee754_sqrtf+0x24>
 8021f24:	2c00      	cmp	r4, #0
 8021f26:	da07      	bge.n	8021f38 <__ieee754_sqrtf+0x40>
 8021f28:	1c21      	adds	r1, r4, #0
 8021f2a:	1c20      	adds	r0, r4, #0
 8021f2c:	f7df f976 	bl	800121c <__aeabi_fsub>
 8021f30:	1c01      	adds	r1, r0, #0
 8021f32:	f7de fe4f 	bl	8000bd4 <__aeabi_fdiv>
 8021f36:	e7f0      	b.n	8021f1a <__ieee754_sqrtf+0x22>
 8021f38:	0022      	movs	r2, r4
 8021f3a:	15e1      	asrs	r1, r4, #23
 8021f3c:	4002      	ands	r2, r0
 8021f3e:	4204      	tst	r4, r0
 8021f40:	d046      	beq.n	8021fd0 <__ieee754_sqrtf+0xd8>
 8021f42:	2280      	movs	r2, #128	@ 0x80
 8021f44:	000f      	movs	r7, r1
 8021f46:	025b      	lsls	r3, r3, #9
 8021f48:	0a5b      	lsrs	r3, r3, #9
 8021f4a:	0412      	lsls	r2, r2, #16
 8021f4c:	3f7f      	subs	r7, #127	@ 0x7f
 8021f4e:	4313      	orrs	r3, r2
 8021f50:	07c9      	lsls	r1, r1, #31
 8021f52:	d400      	bmi.n	8021f56 <__ieee754_sqrtf+0x5e>
 8021f54:	005b      	lsls	r3, r3, #1
 8021f56:	2400      	movs	r4, #0
 8021f58:	2180      	movs	r1, #128	@ 0x80
 8021f5a:	2019      	movs	r0, #25
 8021f5c:	0026      	movs	r6, r4
 8021f5e:	107f      	asrs	r7, r7, #1
 8021f60:	005b      	lsls	r3, r3, #1
 8021f62:	0449      	lsls	r1, r1, #17
 8021f64:	1875      	adds	r5, r6, r1
 8021f66:	001a      	movs	r2, r3
 8021f68:	429d      	cmp	r5, r3
 8021f6a:	dc02      	bgt.n	8021f72 <__ieee754_sqrtf+0x7a>
 8021f6c:	186e      	adds	r6, r5, r1
 8021f6e:	1b5a      	subs	r2, r3, r5
 8021f70:	1864      	adds	r4, r4, r1
 8021f72:	3801      	subs	r0, #1
 8021f74:	0053      	lsls	r3, r2, #1
 8021f76:	0849      	lsrs	r1, r1, #1
 8021f78:	2800      	cmp	r0, #0
 8021f7a:	d1f3      	bne.n	8021f64 <__ieee754_sqrtf+0x6c>
 8021f7c:	2a00      	cmp	r2, #0
 8021f7e:	d019      	beq.n	8021fb4 <__ieee754_sqrtf+0xbc>
 8021f80:	4d17      	ldr	r5, [pc, #92]	@ (8021fe0 <__ieee754_sqrtf+0xe8>)
 8021f82:	4e18      	ldr	r6, [pc, #96]	@ (8021fe4 <__ieee754_sqrtf+0xec>)
 8021f84:	6828      	ldr	r0, [r5, #0]
 8021f86:	6831      	ldr	r1, [r6, #0]
 8021f88:	682b      	ldr	r3, [r5, #0]
 8021f8a:	9301      	str	r3, [sp, #4]
 8021f8c:	f7df f946 	bl	800121c <__aeabi_fsub>
 8021f90:	1c01      	adds	r1, r0, #0
 8021f92:	9801      	ldr	r0, [sp, #4]
 8021f94:	f7de fad6 	bl	8000544 <__aeabi_fcmple>
 8021f98:	2800      	cmp	r0, #0
 8021f9a:	d00b      	beq.n	8021fb4 <__ieee754_sqrtf+0xbc>
 8021f9c:	6828      	ldr	r0, [r5, #0]
 8021f9e:	6831      	ldr	r1, [r6, #0]
 8021fa0:	f7de fc8e 	bl	80008c0 <__aeabi_fadd>
 8021fa4:	682d      	ldr	r5, [r5, #0]
 8021fa6:	1c01      	adds	r1, r0, #0
 8021fa8:	1c28      	adds	r0, r5, #0
 8021faa:	f7de fac1 	bl	8000530 <__aeabi_fcmplt>
 8021fae:	2800      	cmp	r0, #0
 8021fb0:	d011      	beq.n	8021fd6 <__ieee754_sqrtf+0xde>
 8021fb2:	3402      	adds	r4, #2
 8021fb4:	23fc      	movs	r3, #252	@ 0xfc
 8021fb6:	1064      	asrs	r4, r4, #1
 8021fb8:	059b      	lsls	r3, r3, #22
 8021fba:	18e3      	adds	r3, r4, r3
 8021fbc:	05fc      	lsls	r4, r7, #23
 8021fbe:	18e4      	adds	r4, r4, r3
 8021fc0:	e7ac      	b.n	8021f1c <__ieee754_sqrtf+0x24>
 8021fc2:	005b      	lsls	r3, r3, #1
 8021fc4:	3201      	adds	r2, #1
 8021fc6:	4203      	tst	r3, r0
 8021fc8:	d0fb      	beq.n	8021fc2 <__ieee754_sqrtf+0xca>
 8021fca:	3a01      	subs	r2, #1
 8021fcc:	1a89      	subs	r1, r1, r2
 8021fce:	e7b8      	b.n	8021f42 <__ieee754_sqrtf+0x4a>
 8021fd0:	2080      	movs	r0, #128	@ 0x80
 8021fd2:	0400      	lsls	r0, r0, #16
 8021fd4:	e7f7      	b.n	8021fc6 <__ieee754_sqrtf+0xce>
 8021fd6:	2301      	movs	r3, #1
 8021fd8:	3401      	adds	r4, #1
 8021fda:	439c      	bics	r4, r3
 8021fdc:	e7ea      	b.n	8021fb4 <__ieee754_sqrtf+0xbc>
 8021fde:	46c0      	nop			@ (mov r8, r8)
 8021fe0:	2000041c 	.word	0x2000041c
 8021fe4:	20000418 	.word	0x20000418

08021fe8 <roundf>:
 8021fe8:	0dc3      	lsrs	r3, r0, #23
 8021fea:	b2db      	uxtb	r3, r3
 8021fec:	3b7f      	subs	r3, #127	@ 0x7f
 8021fee:	0002      	movs	r2, r0
 8021ff0:	b510      	push	{r4, lr}
 8021ff2:	2b16      	cmp	r3, #22
 8021ff4:	dc13      	bgt.n	802201e <roundf+0x36>
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	da07      	bge.n	802200a <roundf+0x22>
 8021ffa:	0fc2      	lsrs	r2, r0, #31
 8021ffc:	07d0      	lsls	r0, r2, #31
 8021ffe:	3301      	adds	r3, #1
 8022000:	d102      	bne.n	8022008 <roundf+0x20>
 8022002:	23fe      	movs	r3, #254	@ 0xfe
 8022004:	059b      	lsls	r3, r3, #22
 8022006:	4318      	orrs	r0, r3
 8022008:	bd10      	pop	{r4, pc}
 802200a:	4908      	ldr	r1, [pc, #32]	@ (802202c <roundf+0x44>)
 802200c:	4119      	asrs	r1, r3
 802200e:	4208      	tst	r0, r1
 8022010:	d0fa      	beq.n	8022008 <roundf+0x20>
 8022012:	2080      	movs	r0, #128	@ 0x80
 8022014:	03c0      	lsls	r0, r0, #15
 8022016:	4118      	asrs	r0, r3
 8022018:	1880      	adds	r0, r0, r2
 802201a:	4388      	bics	r0, r1
 802201c:	e7f4      	b.n	8022008 <roundf+0x20>
 802201e:	2b80      	cmp	r3, #128	@ 0x80
 8022020:	d1f2      	bne.n	8022008 <roundf+0x20>
 8022022:	1c01      	adds	r1, r0, #0
 8022024:	f7de fc4c 	bl	80008c0 <__aeabi_fadd>
 8022028:	e7ee      	b.n	8022008 <roundf+0x20>
 802202a:	46c0      	nop			@ (mov r8, r8)
 802202c:	007fffff 	.word	0x007fffff

08022030 <__ieee754_expf>:
 8022030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022032:	21ff      	movs	r1, #255	@ 0xff
 8022034:	0043      	lsls	r3, r0, #1
 8022036:	1c04      	adds	r4, r0, #0
 8022038:	085b      	lsrs	r3, r3, #1
 802203a:	05c9      	lsls	r1, r1, #23
 802203c:	428b      	cmp	r3, r1
 802203e:	d904      	bls.n	802204a <__ieee754_expf+0x1a>
 8022040:	1c01      	adds	r1, r0, #0
 8022042:	1c20      	adds	r0, r4, #0
 8022044:	f7de fc3c 	bl	80008c0 <__aeabi_fadd>
 8022048:	e00d      	b.n	8022066 <__ieee754_expf+0x36>
 802204a:	0fc6      	lsrs	r6, r0, #31
 802204c:	428b      	cmp	r3, r1
 802204e:	d104      	bne.n	802205a <__ieee754_expf+0x2a>
 8022050:	2e00      	cmp	r6, #0
 8022052:	d000      	beq.n	8022056 <__ieee754_expf+0x26>
 8022054:	e0ba      	b.n	80221cc <__ieee754_expf+0x19c>
 8022056:	1c20      	adds	r0, r4, #0
 8022058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802205a:	495d      	ldr	r1, [pc, #372]	@ (80221d0 <__ieee754_expf+0x1a0>)
 802205c:	4288      	cmp	r0, r1
 802205e:	dd04      	ble.n	802206a <__ieee754_expf+0x3a>
 8022060:	2000      	movs	r0, #0
 8022062:	f000 f8f1 	bl	8022248 <__math_oflowf>
 8022066:	1c04      	adds	r4, r0, #0
 8022068:	e7f5      	b.n	8022056 <__ieee754_expf+0x26>
 802206a:	2800      	cmp	r0, #0
 802206c:	da06      	bge.n	802207c <__ieee754_expf+0x4c>
 802206e:	4a59      	ldr	r2, [pc, #356]	@ (80221d4 <__ieee754_expf+0x1a4>)
 8022070:	4293      	cmp	r3, r2
 8022072:	d903      	bls.n	802207c <__ieee754_expf+0x4c>
 8022074:	2000      	movs	r0, #0
 8022076:	f000 f8e1 	bl	802223c <__math_uflowf>
 802207a:	e7f4      	b.n	8022066 <__ieee754_expf+0x36>
 802207c:	4a56      	ldr	r2, [pc, #344]	@ (80221d8 <__ieee754_expf+0x1a8>)
 802207e:	4293      	cmp	r3, r2
 8022080:	d96e      	bls.n	8022160 <__ieee754_expf+0x130>
 8022082:	4a56      	ldr	r2, [pc, #344]	@ (80221dc <__ieee754_expf+0x1ac>)
 8022084:	00b5      	lsls	r5, r6, #2
 8022086:	4293      	cmp	r3, r2
 8022088:	d84e      	bhi.n	8022128 <__ieee754_expf+0xf8>
 802208a:	4b55      	ldr	r3, [pc, #340]	@ (80221e0 <__ieee754_expf+0x1b0>)
 802208c:	1c20      	adds	r0, r4, #0
 802208e:	5959      	ldr	r1, [r3, r5]
 8022090:	f7df f8c4 	bl	800121c <__aeabi_fsub>
 8022094:	4b53      	ldr	r3, [pc, #332]	@ (80221e4 <__ieee754_expf+0x1b4>)
 8022096:	1c07      	adds	r7, r0, #0
 8022098:	595b      	ldr	r3, [r3, r5]
 802209a:	2501      	movs	r5, #1
 802209c:	1bad      	subs	r5, r5, r6
 802209e:	9300      	str	r3, [sp, #0]
 80220a0:	1bad      	subs	r5, r5, r6
 80220a2:	9900      	ldr	r1, [sp, #0]
 80220a4:	1c38      	adds	r0, r7, #0
 80220a6:	f7df f8b9 	bl	800121c <__aeabi_fsub>
 80220aa:	1c04      	adds	r4, r0, #0
 80220ac:	1c21      	adds	r1, r4, #0
 80220ae:	1c20      	adds	r0, r4, #0
 80220b0:	f7de ff76 	bl	8000fa0 <__aeabi_fmul>
 80220b4:	494c      	ldr	r1, [pc, #304]	@ (80221e8 <__ieee754_expf+0x1b8>)
 80220b6:	1c06      	adds	r6, r0, #0
 80220b8:	f7de ff72 	bl	8000fa0 <__aeabi_fmul>
 80220bc:	494b      	ldr	r1, [pc, #300]	@ (80221ec <__ieee754_expf+0x1bc>)
 80220be:	f7df f8ad 	bl	800121c <__aeabi_fsub>
 80220c2:	1c31      	adds	r1, r6, #0
 80220c4:	f7de ff6c 	bl	8000fa0 <__aeabi_fmul>
 80220c8:	4949      	ldr	r1, [pc, #292]	@ (80221f0 <__ieee754_expf+0x1c0>)
 80220ca:	f7de fbf9 	bl	80008c0 <__aeabi_fadd>
 80220ce:	1c31      	adds	r1, r6, #0
 80220d0:	f7de ff66 	bl	8000fa0 <__aeabi_fmul>
 80220d4:	4947      	ldr	r1, [pc, #284]	@ (80221f4 <__ieee754_expf+0x1c4>)
 80220d6:	f7df f8a1 	bl	800121c <__aeabi_fsub>
 80220da:	1c31      	adds	r1, r6, #0
 80220dc:	f7de ff60 	bl	8000fa0 <__aeabi_fmul>
 80220e0:	4945      	ldr	r1, [pc, #276]	@ (80221f8 <__ieee754_expf+0x1c8>)
 80220e2:	f7de fbed 	bl	80008c0 <__aeabi_fadd>
 80220e6:	1c31      	adds	r1, r6, #0
 80220e8:	f7de ff5a 	bl	8000fa0 <__aeabi_fmul>
 80220ec:	1c01      	adds	r1, r0, #0
 80220ee:	1c20      	adds	r0, r4, #0
 80220f0:	f7df f894 	bl	800121c <__aeabi_fsub>
 80220f4:	1c01      	adds	r1, r0, #0
 80220f6:	1c06      	adds	r6, r0, #0
 80220f8:	1c20      	adds	r0, r4, #0
 80220fa:	f7de ff51 	bl	8000fa0 <__aeabi_fmul>
 80220fe:	9001      	str	r0, [sp, #4]
 8022100:	2d00      	cmp	r5, #0
 8022102:	d140      	bne.n	8022186 <__ieee754_expf+0x156>
 8022104:	2180      	movs	r1, #128	@ 0x80
 8022106:	1c30      	adds	r0, r6, #0
 8022108:	05c9      	lsls	r1, r1, #23
 802210a:	f7df f887 	bl	800121c <__aeabi_fsub>
 802210e:	1c01      	adds	r1, r0, #0
 8022110:	9801      	ldr	r0, [sp, #4]
 8022112:	f7de fd5f 	bl	8000bd4 <__aeabi_fdiv>
 8022116:	1c21      	adds	r1, r4, #0
 8022118:	f7df f880 	bl	800121c <__aeabi_fsub>
 802211c:	1c01      	adds	r1, r0, #0
 802211e:	20fe      	movs	r0, #254	@ 0xfe
 8022120:	0580      	lsls	r0, r0, #22
 8022122:	f7df f87b 	bl	800121c <__aeabi_fsub>
 8022126:	e79e      	b.n	8022066 <__ieee754_expf+0x36>
 8022128:	4934      	ldr	r1, [pc, #208]	@ (80221fc <__ieee754_expf+0x1cc>)
 802212a:	1c20      	adds	r0, r4, #0
 802212c:	f7de ff38 	bl	8000fa0 <__aeabi_fmul>
 8022130:	4b33      	ldr	r3, [pc, #204]	@ (8022200 <__ieee754_expf+0x1d0>)
 8022132:	5959      	ldr	r1, [r3, r5]
 8022134:	f7de fbc4 	bl	80008c0 <__aeabi_fadd>
 8022138:	f7df fa2a 	bl	8001590 <__aeabi_f2iz>
 802213c:	0005      	movs	r5, r0
 802213e:	f7df fa47 	bl	80015d0 <__aeabi_i2f>
 8022142:	4930      	ldr	r1, [pc, #192]	@ (8022204 <__ieee754_expf+0x1d4>)
 8022144:	1c06      	adds	r6, r0, #0
 8022146:	f7de ff2b 	bl	8000fa0 <__aeabi_fmul>
 802214a:	1c01      	adds	r1, r0, #0
 802214c:	1c20      	adds	r0, r4, #0
 802214e:	f7df f865 	bl	800121c <__aeabi_fsub>
 8022152:	492d      	ldr	r1, [pc, #180]	@ (8022208 <__ieee754_expf+0x1d8>)
 8022154:	1c07      	adds	r7, r0, #0
 8022156:	1c30      	adds	r0, r6, #0
 8022158:	f7de ff22 	bl	8000fa0 <__aeabi_fmul>
 802215c:	9000      	str	r0, [sp, #0]
 802215e:	e7a0      	b.n	80220a2 <__ieee754_expf+0x72>
 8022160:	22d0      	movs	r2, #208	@ 0xd0
 8022162:	0592      	lsls	r2, r2, #22
 8022164:	4293      	cmp	r3, r2
 8022166:	d20c      	bcs.n	8022182 <__ieee754_expf+0x152>
 8022168:	4928      	ldr	r1, [pc, #160]	@ (802220c <__ieee754_expf+0x1dc>)
 802216a:	1c20      	adds	r0, r4, #0
 802216c:	f7de fba8 	bl	80008c0 <__aeabi_fadd>
 8022170:	21fe      	movs	r1, #254	@ 0xfe
 8022172:	0589      	lsls	r1, r1, #22
 8022174:	f7de f9f0 	bl	8000558 <__aeabi_fcmpgt>
 8022178:	1e05      	subs	r5, r0, #0
 802217a:	d097      	beq.n	80220ac <__ieee754_expf+0x7c>
 802217c:	21fe      	movs	r1, #254	@ 0xfe
 802217e:	0589      	lsls	r1, r1, #22
 8022180:	e75f      	b.n	8022042 <__ieee754_expf+0x12>
 8022182:	2500      	movs	r5, #0
 8022184:	e792      	b.n	80220ac <__ieee754_expf+0x7c>
 8022186:	2080      	movs	r0, #128	@ 0x80
 8022188:	1c31      	adds	r1, r6, #0
 802218a:	05c0      	lsls	r0, r0, #23
 802218c:	f7df f846 	bl	800121c <__aeabi_fsub>
 8022190:	1c01      	adds	r1, r0, #0
 8022192:	9801      	ldr	r0, [sp, #4]
 8022194:	f7de fd1e 	bl	8000bd4 <__aeabi_fdiv>
 8022198:	1c01      	adds	r1, r0, #0
 802219a:	9800      	ldr	r0, [sp, #0]
 802219c:	f7df f83e 	bl	800121c <__aeabi_fsub>
 80221a0:	1c39      	adds	r1, r7, #0
 80221a2:	f7df f83b 	bl	800121c <__aeabi_fsub>
 80221a6:	1c01      	adds	r1, r0, #0
 80221a8:	20fe      	movs	r0, #254	@ 0xfe
 80221aa:	0580      	lsls	r0, r0, #22
 80221ac:	f7df f836 	bl	800121c <__aeabi_fsub>
 80221b0:	002b      	movs	r3, r5
 80221b2:	337d      	adds	r3, #125	@ 0x7d
 80221b4:	db02      	blt.n	80221bc <__ieee754_expf+0x18c>
 80221b6:	05ec      	lsls	r4, r5, #23
 80221b8:	1824      	adds	r4, r4, r0
 80221ba:	e74c      	b.n	8022056 <__ieee754_expf+0x26>
 80221bc:	21d8      	movs	r1, #216	@ 0xd8
 80221be:	3564      	adds	r5, #100	@ 0x64
 80221c0:	05ed      	lsls	r5, r5, #23
 80221c2:	1828      	adds	r0, r5, r0
 80221c4:	0509      	lsls	r1, r1, #20
 80221c6:	f7de feeb 	bl	8000fa0 <__aeabi_fmul>
 80221ca:	e74c      	b.n	8022066 <__ieee754_expf+0x36>
 80221cc:	2400      	movs	r4, #0
 80221ce:	e742      	b.n	8022056 <__ieee754_expf+0x26>
 80221d0:	42b17217 	.word	0x42b17217
 80221d4:	42cff1b5 	.word	0x42cff1b5
 80221d8:	3eb17218 	.word	0x3eb17218
 80221dc:	3f851591 	.word	0x3f851591
 80221e0:	08024a00 	.word	0x08024a00
 80221e4:	080249f8 	.word	0x080249f8
 80221e8:	3331bb4c 	.word	0x3331bb4c
 80221ec:	35ddea0e 	.word	0x35ddea0e
 80221f0:	388ab355 	.word	0x388ab355
 80221f4:	3b360b61 	.word	0x3b360b61
 80221f8:	3e2aaaab 	.word	0x3e2aaaab
 80221fc:	3fb8aa3b 	.word	0x3fb8aa3b
 8022200:	08024a08 	.word	0x08024a08
 8022204:	3f317180 	.word	0x3f317180
 8022208:	3717f7d1 	.word	0x3717f7d1
 802220c:	7149f2ca 	.word	0x7149f2ca

08022210 <with_errnof>:
 8022210:	b570      	push	{r4, r5, r6, lr}
 8022212:	000d      	movs	r5, r1
 8022214:	1c04      	adds	r4, r0, #0
 8022216:	f7fd f923 	bl	801f460 <__errno>
 802221a:	6005      	str	r5, [r0, #0]
 802221c:	1c20      	adds	r0, r4, #0
 802221e:	bd70      	pop	{r4, r5, r6, pc}

08022220 <xflowf>:
 8022220:	b510      	push	{r4, lr}
 8022222:	1c0b      	adds	r3, r1, #0
 8022224:	2800      	cmp	r0, #0
 8022226:	d002      	beq.n	802222e <xflowf+0xe>
 8022228:	2380      	movs	r3, #128	@ 0x80
 802222a:	061b      	lsls	r3, r3, #24
 802222c:	18cb      	adds	r3, r1, r3
 802222e:	1c18      	adds	r0, r3, #0
 8022230:	f7de feb6 	bl	8000fa0 <__aeabi_fmul>
 8022234:	2122      	movs	r1, #34	@ 0x22
 8022236:	f7ff ffeb 	bl	8022210 <with_errnof>
 802223a:	bd10      	pop	{r4, pc}

0802223c <__math_uflowf>:
 802223c:	2180      	movs	r1, #128	@ 0x80
 802223e:	b510      	push	{r4, lr}
 8022240:	0549      	lsls	r1, r1, #21
 8022242:	f7ff ffed 	bl	8022220 <xflowf>
 8022246:	bd10      	pop	{r4, pc}

08022248 <__math_oflowf>:
 8022248:	21e0      	movs	r1, #224	@ 0xe0
 802224a:	b510      	push	{r4, lr}
 802224c:	05c9      	lsls	r1, r1, #23
 802224e:	f7ff ffe7 	bl	8022220 <xflowf>
 8022252:	bd10      	pop	{r4, pc}

08022254 <_init>:
 8022254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022256:	46c0      	nop			@ (mov r8, r8)
 8022258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802225a:	bc08      	pop	{r3}
 802225c:	469e      	mov	lr, r3
 802225e:	4770      	bx	lr

08022260 <_fini>:
 8022260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022262:	46c0      	nop			@ (mov r8, r8)
 8022264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022266:	bc08      	pop	{r3}
 8022268:	469e      	mov	lr, r3
 802226a:	4770      	bx	lr
