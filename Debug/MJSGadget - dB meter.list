
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021d54  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002730  08021e18  08021e18  00022e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024548  08024548  00026420  2**0
                  CONTENTS
  4 .ARM          00000008  08024548  08024548  00025548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024550  08024550  00026420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024550  08024550  00025550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024554  08024554  00025554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08024558  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  20000420  08024978  00026420  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003900  08024978  00026900  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00026420  2**0
                  CONTENTS, READONLY
 12 .debug_info   000347b8  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000097b2  00000000  00000000  0005ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af8  00000000  00000000  000643b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fc5  00000000  00000000  00066eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023330  00000000  00000000  00068e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00043230  00000000  00000000  0008c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04ea  00000000  00000000  000cf3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016f8bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adf8  00000000  00000000  0016f970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017a7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017cd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08021dfc 	.word	0x08021dfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	08021dfc 	.word	0x08021dfc

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802377c 	.word	0x0802377c
 8000e0c:	080237bc 	.word	0x080237bc
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080237f8 	.word	0x080237f8
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fa64 	bl	800eb30 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b fabb 	bl	800ec00 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fa6e 	bl	800eb8c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b f9ea 	bl	800eb30 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fa19 	bl	800eba8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b f9fd 	bl	800eb8c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000994 	.word	0x20000994

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a f99a 	bl	800daf0 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000990 	.word	0x20000990

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fbcc 	bl	8005f74 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fc29 	bl	8006038 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a4 	.word	0x200009a4
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b0 	.word	0x200009b0
 8003864:	200009b4 	.word	0x200009b4

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009b8 	.word	0x200009b8
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009d8 	.word	0x200009d8
 80038d0:	200009dc 	.word	0x200009dc

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <setMeasurement+0x2c>)
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <setMeasurement+0x30>)
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <setMeasurement+0x34>)
 8003918:	1dba      	adds	r2, r7, #6
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	801a      	strh	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000564 	.word	0x20000564
 800392c:	20000568 	.word	0x20000568
 8003930:	20000574 	.word	0x20000574

08003934 <setMic>:
void setMic(float dB){
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  dBC = dB;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <setMic+0x18>)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	20000578 	.word	0x20000578

08003950 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	0002      	movs	r2, r0
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	1c0a      	adds	r2, r1, #0
 8003960:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f7fd fe32 	bl	80015d0 <__aeabi_i2f>
 800396c:	1c03      	adds	r3, r0, #0
 800396e:	490d      	ldr	r1, [pc, #52]	@ (80039a4 <setPMs+0x54>)
 8003970:	1c18      	adds	r0, r3, #0
 8003972:	f7fd f92f 	bl	8000bd4 <__aeabi_fdiv>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	1c1a      	adds	r2, r3, #0
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <setPMs+0x58>)
 800397c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f7fd fe24 	bl	80015d0 <__aeabi_i2f>
 8003988:	1c03      	adds	r3, r0, #0
 800398a:	4906      	ldr	r1, [pc, #24]	@ (80039a4 <setPMs+0x54>)
 800398c:	1c18      	adds	r0, r3, #0
 800398e:	f7fd f921 	bl	8000bd4 <__aeabi_fdiv>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c1a      	adds	r2, r3, #0
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <setPMs+0x5c>)
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	41200000 	.word	0x41200000
 80039a8:	2000057c 	.word	0x2000057c
 80039ac:	20000580 	.word	0x20000580

080039b0 <SetConfigMode>:

void SetConfigMode(){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039b4:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <SetConfigMode+0x10>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000054b 	.word	0x2000054b

080039c4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039c8:	f00a f8dc 	bl	800db84 <HAL_GetUIDw0>
 80039cc:	0002      	movs	r2, r0
 80039ce:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <ESP_GetUID+0x28>)
 80039d0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039d2:	f00a f8e1 	bl	800db98 <HAL_GetUIDw1>
 80039d6:	0002      	movs	r2, r0
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <ESP_GetUID+0x28>)
 80039da:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039dc:	f00a f8e6 	bl	800dbac <HAL_GetUIDw2>
 80039e0:	0002      	movs	r2, r0
 80039e2:	4b02      	ldr	r3, [pc, #8]	@ (80039ec <ESP_GetUID+0x28>)
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000550 	.word	0x20000550

080039f0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <ESP_Init+0x2c>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <ESP_Init+0x30>)
 8003a00:	2202      	movs	r2, #2
 8003a02:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a04:	f7ff ffde 	bl	80039c4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a08:	f7ff fef8 	bl	80037fc <checkEEprom>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <ESP_Init+0x34>)
 8003a12:	701a      	strb	r2, [r3, #0]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000440 	.word	0x20000440
 8003a20:	20000028 	.word	0x20000028
 8003a24:	2000054e 	.word	0x2000054e

08003a28 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	000a      	movs	r2, r1
 8003a32:	1cbb      	adds	r3, r7, #2
 8003a34:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <ESP_Send+0x54>)
 8003a3a:	4911      	ldr	r1, [pc, #68]	@ (8003a80 <ESP_Send+0x58>)
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f009 fcb9 	bl	800d3b4 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <ESP_Send+0x5c>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	250f      	movs	r5, #15
 8003a48:	197c      	adds	r4, r7, r5
 8003a4a:	1cbb      	adds	r3, r7, #2
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0019      	movs	r1, r3
 8003a52:	f012 fb07 	bl	8016064 <HAL_UART_Transmit_DMA>
 8003a56:	0003      	movs	r3, r0
 8003a58:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a62:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <ESP_Send+0x60>)
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <ESP_Send+0x64>)
 8003a66:	0019      	movs	r1, r3
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f009 fca3 	bl	800d3b4 <CreateLine>
    return false;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <ESP_Send+0x4c>
  }
  return true;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7c:	08021e18 	.word	0x08021e18
 8003a80:	08021e28 	.word	0x08021e28
 8003a84:	20000440 	.word	0x20000440
 8003a88:	08021e2c 	.word	0x08021e2c
 8003a8c:	08021e4c 	.word	0x08021e4c

08003a90 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	000a      	movs	r2, r1
 8003a9a:	1cbb      	adds	r3, r7, #2
 8003a9c:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <ESP_Receive+0x5c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <ESP_Receive+0x60>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	250f      	movs	r5, #15
 8003aaa:	197c      	adds	r4, r7, r5
 8003aac:	1cbb      	adds	r3, r7, #2
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	f012 fb66 	bl	8016184 <HAL_UART_Receive_DMA>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003abc:	197b      	adds	r3, r7, r5
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <ESP_Receive+0x60>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2284      	movs	r2, #132	@ 0x84
 8003aca:	589b      	ldr	r3, [r3, r2]
 8003acc:	4a09      	ldr	r2, [pc, #36]	@ (8003af4 <ESP_Receive+0x64>)
 8003ace:	490a      	ldr	r1, [pc, #40]	@ (8003af8 <ESP_Receive+0x68>)
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f009 fc6f 	bl	800d3b4 <CreateLine>
    RxComplete = true;
 8003ad6:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <ESP_Receive+0x5c>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    return false;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <ESP_Receive+0x52>
  }
  return true;
 8003ae0:	2301      	movs	r3, #1
}
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b004      	add	sp, #16
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	20000444 	.word	0x20000444
 8003af0:	20000440 	.word	0x20000440
 8003af4:	08021e50 	.word	0x08021e50
 8003af8:	08021e4c 	.word	0x08021e4c

08003afc <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <HAL_UART_ErrorCallback+0x34>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d10c      	bne.n	8003b28 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2284      	movs	r2, #132	@ 0x84
 8003b12:	589b      	ldr	r3, [r3, r2]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d007      	beq.n	8003b28 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2284      	movs	r2, #132	@ 0x84
 8003b1c:	589b      	ldr	r3, [r3, r2]
 8003b1e:	4a05      	ldr	r2, [pc, #20]	@ (8003b34 <HAL_UART_ErrorCallback+0x38>)
 8003b20:	4905      	ldr	r1, [pc, #20]	@ (8003b38 <HAL_UART_ErrorCallback+0x3c>)
 8003b22:	2003      	movs	r0, #3
 8003b24:	f009 fc46 	bl	800d3b4 <CreateLine>
    }
  }
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000440 	.word	0x20000440
 8003b34:	08021e80 	.word	0x08021e80
 8003b38:	08021e28 	.word	0x08021e28

08003b3c <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e010      	b.n	8003b6e <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	001a      	movs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1898      	adds	r0, r3, r2
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <uint8ArrayToString+0x44>)
 8003b62:	0019      	movs	r1, r3
 8003b64:	f01b f868 	bl	801ec38 <siprintf>
  for (int i = 0; i < 12; i++)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b0b      	cmp	r3, #11
 8003b72:	ddeb      	ble.n	8003b4c <uint8ArrayToString+0x10>
  }
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	08021eac 	.word	0x08021eac

08003b84 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b089      	sub	sp, #36	@ 0x24
 8003b88:	af04      	add	r7, sp, #16
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b90:	4be5      	ldr	r3, [pc, #916]	@ (8003f28 <CreateMessage+0x3a4>)
 8003b92:	48e6      	ldr	r0, [pc, #920]	@ (8003f2c <CreateMessage+0x3a8>)
 8003b94:	220c      	movs	r2, #12
 8003b96:	0019      	movs	r1, r3
 8003b98:	f7ff fdae 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b9c:	4be4      	ldr	r3, [pc, #912]	@ (8003f30 <CreateMessage+0x3ac>)
 8003b9e:	48e5      	ldr	r0, [pc, #916]	@ (8003f34 <CreateMessage+0x3b0>)
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	f7ff fda8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003ba8:	4be3      	ldr	r3, [pc, #908]	@ (8003f38 <CreateMessage+0x3b4>)
 8003baa:	48e4      	ldr	r0, [pc, #912]	@ (8003f3c <CreateMessage+0x3b8>)
 8003bac:	220c      	movs	r2, #12
 8003bae:	0019      	movs	r1, r3
 8003bb0:	f7ff fda2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003bb4:	4be2      	ldr	r3, [pc, #904]	@ (8003f40 <CreateMessage+0x3bc>)
 8003bb6:	48e3      	ldr	r0, [pc, #908]	@ (8003f44 <CreateMessage+0x3c0>)
 8003bb8:	220c      	movs	r2, #12
 8003bba:	0019      	movs	r1, r3
 8003bbc:	f7ff fd9c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003bc0:	4be1      	ldr	r3, [pc, #900]	@ (8003f48 <CreateMessage+0x3c4>)
 8003bc2:	48e2      	ldr	r0, [pc, #904]	@ (8003f4c <CreateMessage+0x3c8>)
 8003bc4:	220c      	movs	r2, #12
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	f7ff fd96 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003bcc:	4be0      	ldr	r3, [pc, #896]	@ (8003f50 <CreateMessage+0x3cc>)
 8003bce:	48e1      	ldr	r0, [pc, #900]	@ (8003f54 <CreateMessage+0x3d0>)
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	f7ff fd90 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003bd8:	4bdf      	ldr	r3, [pc, #892]	@ (8003f58 <CreateMessage+0x3d4>)
 8003bda:	48e0      	ldr	r0, [pc, #896]	@ (8003f5c <CreateMessage+0x3d8>)
 8003bdc:	220c      	movs	r2, #12
 8003bde:	0019      	movs	r1, r3
 8003be0:	f7ff fd8a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003be4:	4bde      	ldr	r3, [pc, #888]	@ (8003f60 <CreateMessage+0x3dc>)
 8003be6:	48df      	ldr	r0, [pc, #892]	@ (8003f64 <CreateMessage+0x3e0>)
 8003be8:	220c      	movs	r2, #12
 8003bea:	0019      	movs	r1, r3
 8003bec:	f7ff fd84 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003bf0:	f7ff fe3a 	bl	8003868 <checkName>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d006      	beq.n	8003c06 <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003bf8:	4bdb      	ldr	r3, [pc, #876]	@ (8003f68 <CreateMessage+0x3e4>)
 8003bfa:	48dc      	ldr	r0, [pc, #880]	@ (8003f6c <CreateMessage+0x3e8>)
 8003bfc:	221e      	movs	r2, #30
 8003bfe:	0019      	movs	r1, r3
 8003c00:	f7ff fd7a 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003c04:	e005      	b.n	8003c12 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003c06:	4bd8      	ldr	r3, [pc, #864]	@ (8003f68 <CreateMessage+0x3e4>)
 8003c08:	4ad9      	ldr	r2, [pc, #868]	@ (8003f70 <CreateMessage+0x3ec>)
 8003c0a:	6811      	ldr	r1, [r2, #0]
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	7912      	ldrb	r2, [r2, #4]
 8003c10:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003c12:	f7ff fddf 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	00da      	lsls	r2, r3, #3
 8003c1a:	4bd6      	ldr	r3, [pc, #856]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f01b f94e 	bl	801eec0 <memset>
  uint16_t index = 0;
 8003c24:	260e      	movs	r6, #14
 8003c26:	19bb      	adds	r3, r7, r6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003c2c:	19bb      	adds	r3, r7, r6
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	4bd0      	ldr	r3, [pc, #832]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	4ad0      	ldr	r2, [pc, #832]	@ (8003f78 <CreateMessage+0x3f4>)
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f01a fffd 	bl	801ec38 <siprintf>
  index = strlen(message);
 8003c3e:	4bcd      	ldr	r3, [pc, #820]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fc fa93 	bl	800016c <strlen>
 8003c46:	0002      	movs	r2, r0
 8003c48:	19bb      	adds	r3, r7, r6
 8003c4a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003c4c:	4ab6      	ldr	r2, [pc, #728]	@ (8003f28 <CreateMessage+0x3a4>)
 8003c4e:	4bcb      	ldr	r3, [pc, #812]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c50:	0011      	movs	r1, r2
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7ff ff72 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003c58:	19bb      	adds	r3, r7, r6
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	4bc5      	ldr	r3, [pc, #788]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c5e:	18d4      	adds	r4, r2, r3
 8003c60:	4bc7      	ldr	r3, [pc, #796]	@ (8003f80 <CreateMessage+0x3fc>)
 8003c62:	689d      	ldr	r5, [r3, #8]
 8003c64:	4bc7      	ldr	r3, [pc, #796]	@ (8003f84 <CreateMessage+0x400>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	1c18      	adds	r0, r3, #0
 8003c6a:	f7ff fbfb 	bl	8003464 <__aeabi_f2d>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	000b      	movs	r3, r1
 8003c72:	48bd      	ldr	r0, [pc, #756]	@ (8003f68 <CreateMessage+0x3e4>)
 8003c74:	49c4      	ldr	r1, [pc, #784]	@ (8003f88 <CreateMessage+0x404>)
 8003c76:	9202      	str	r2, [sp, #8]
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	4bc0      	ldr	r3, [pc, #768]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	0003      	movs	r3, r0
 8003c80:	002a      	movs	r2, r5
 8003c82:	0020      	movs	r0, r4
 8003c84:	f01a ffd8 	bl	801ec38 <siprintf>
  index = strlen(message);
 8003c88:	4bba      	ldr	r3, [pc, #744]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7fc fa6e 	bl	800016c <strlen>
 8003c90:	0002      	movs	r2, r0
 8003c92:	19bb      	adds	r3, r7, r6
 8003c94:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003c96:	4aa6      	ldr	r2, [pc, #664]	@ (8003f30 <CreateMessage+0x3ac>)
 8003c98:	4bb8      	ldr	r3, [pc, #736]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff ff4d 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003ca2:	19bb      	adds	r3, r7, r6
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	4bb3      	ldr	r3, [pc, #716]	@ (8003f74 <CreateMessage+0x3f0>)
 8003ca8:	18d4      	adds	r4, r2, r3
 8003caa:	4bb5      	ldr	r3, [pc, #724]	@ (8003f80 <CreateMessage+0x3fc>)
 8003cac:	689d      	ldr	r5, [r3, #8]
 8003cae:	4bb7      	ldr	r3, [pc, #732]	@ (8003f8c <CreateMessage+0x408>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1c18      	adds	r0, r3, #0
 8003cb4:	f7ff fbd6 	bl	8003464 <__aeabi_f2d>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	000b      	movs	r3, r1
 8003cbc:	48aa      	ldr	r0, [pc, #680]	@ (8003f68 <CreateMessage+0x3e4>)
 8003cbe:	49b4      	ldr	r1, [pc, #720]	@ (8003f90 <CreateMessage+0x40c>)
 8003cc0:	9202      	str	r2, [sp, #8]
 8003cc2:	9303      	str	r3, [sp, #12]
 8003cc4:	4bad      	ldr	r3, [pc, #692]	@ (8003f7c <CreateMessage+0x3f8>)
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	0003      	movs	r3, r0
 8003cca:	002a      	movs	r2, r5
 8003ccc:	0020      	movs	r0, r4
 8003cce:	f01a ffb3 	bl	801ec38 <siprintf>
  index = strlen(message);
 8003cd2:	4ba8      	ldr	r3, [pc, #672]	@ (8003f74 <CreateMessage+0x3f0>)
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fc fa49 	bl	800016c <strlen>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	19bb      	adds	r3, r7, r6
 8003cde:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ce0:	4a95      	ldr	r2, [pc, #596]	@ (8003f38 <CreateMessage+0x3b4>)
 8003ce2:	4ba6      	ldr	r3, [pc, #664]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7ff ff28 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003cec:	19bb      	adds	r3, r7, r6
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	4ba0      	ldr	r3, [pc, #640]	@ (8003f74 <CreateMessage+0x3f0>)
 8003cf2:	18d4      	adds	r4, r2, r3
 8003cf4:	4ba2      	ldr	r3, [pc, #648]	@ (8003f80 <CreateMessage+0x3fc>)
 8003cf6:	689d      	ldr	r5, [r3, #8]
 8003cf8:	4ba6      	ldr	r3, [pc, #664]	@ (8003f94 <CreateMessage+0x410>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	1c18      	adds	r0, r3, #0
 8003cfe:	f7ff fbb1 	bl	8003464 <__aeabi_f2d>
 8003d02:	0002      	movs	r2, r0
 8003d04:	000b      	movs	r3, r1
 8003d06:	4898      	ldr	r0, [pc, #608]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d08:	49a3      	ldr	r1, [pc, #652]	@ (8003f98 <CreateMessage+0x414>)
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	9303      	str	r3, [sp, #12]
 8003d0e:	4b9b      	ldr	r3, [pc, #620]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	0003      	movs	r3, r0
 8003d14:	002a      	movs	r2, r5
 8003d16:	0020      	movs	r0, r4
 8003d18:	f01a ff8e 	bl	801ec38 <siprintf>
  index = strlen(message);
 8003d1c:	4b95      	ldr	r3, [pc, #596]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7fc fa24 	bl	800016c <strlen>
 8003d24:	0002      	movs	r2, r0
 8003d26:	19bb      	adds	r3, r7, r6
 8003d28:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003d2a:	4a85      	ldr	r2, [pc, #532]	@ (8003f40 <CreateMessage+0x3bc>)
 8003d2c:	4b93      	ldr	r3, [pc, #588]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff ff03 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003d36:	19bb      	adds	r3, r7, r6
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d3c:	18d0      	adds	r0, r2, r3
 8003d3e:	4b90      	ldr	r3, [pc, #576]	@ (8003f80 <CreateMessage+0x3fc>)
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	4b96      	ldr	r3, [pc, #600]	@ (8003f9c <CreateMessage+0x418>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	4c88      	ldr	r4, [pc, #544]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d48:	4995      	ldr	r1, [pc, #596]	@ (8003fa0 <CreateMessage+0x41c>)
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	0023      	movs	r3, r4
 8003d52:	f01a ff71 	bl	801ec38 <siprintf>
  index = strlen(message);
 8003d56:	4b87      	ldr	r3, [pc, #540]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7fc fa07 	bl	800016c <strlen>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	19bb      	adds	r3, r7, r6
 8003d62:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4053      	eors	r3, r2
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d100      	bne.n	8003d74 <CreateMessage+0x1f0>
 8003d72:	e094      	b.n	8003e9e <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003d74:	4a74      	ldr	r2, [pc, #464]	@ (8003f48 <CreateMessage+0x3c4>)
 8003d76:	4b81      	ldr	r3, [pc, #516]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fede 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d80:	19bb      	adds	r3, r7, r6
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	4b7b      	ldr	r3, [pc, #492]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d86:	18d4      	adds	r4, r2, r3
 8003d88:	4b7d      	ldr	r3, [pc, #500]	@ (8003f80 <CreateMessage+0x3fc>)
 8003d8a:	689d      	ldr	r5, [r3, #8]
 8003d8c:	4b85      	ldr	r3, [pc, #532]	@ (8003fa4 <CreateMessage+0x420>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1c18      	adds	r0, r3, #0
 8003d92:	f7ff fb67 	bl	8003464 <__aeabi_f2d>
 8003d96:	0002      	movs	r2, r0
 8003d98:	000b      	movs	r3, r1
 8003d9a:	4873      	ldr	r0, [pc, #460]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d9c:	4982      	ldr	r1, [pc, #520]	@ (8003fa8 <CreateMessage+0x424>)
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	9303      	str	r3, [sp, #12]
 8003da2:	4b76      	ldr	r3, [pc, #472]	@ (8003f7c <CreateMessage+0x3f8>)
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	0003      	movs	r3, r0
 8003da8:	002a      	movs	r2, r5
 8003daa:	0020      	movs	r0, r4
 8003dac:	f01a ff44 	bl	801ec38 <siprintf>
    index = strlen(message);
 8003db0:	4b70      	ldr	r3, [pc, #448]	@ (8003f74 <CreateMessage+0x3f0>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fc f9da 	bl	800016c <strlen>
 8003db8:	0002      	movs	r2, r0
 8003dba:	19bb      	adds	r3, r7, r6
 8003dbc:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003dbe:	4a64      	ldr	r2, [pc, #400]	@ (8003f50 <CreateMessage+0x3cc>)
 8003dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8003f7c <CreateMessage+0x3f8>)
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff feb9 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003dca:	19bb      	adds	r3, r7, r6
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	4b69      	ldr	r3, [pc, #420]	@ (8003f74 <CreateMessage+0x3f0>)
 8003dd0:	18d4      	adds	r4, r2, r3
 8003dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f80 <CreateMessage+0x3fc>)
 8003dd4:	689d      	ldr	r5, [r3, #8]
 8003dd6:	4b75      	ldr	r3, [pc, #468]	@ (8003fac <CreateMessage+0x428>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1c18      	adds	r0, r3, #0
 8003ddc:	f7ff fb42 	bl	8003464 <__aeabi_f2d>
 8003de0:	0002      	movs	r2, r0
 8003de2:	000b      	movs	r3, r1
 8003de4:	4860      	ldr	r0, [pc, #384]	@ (8003f68 <CreateMessage+0x3e4>)
 8003de6:	4972      	ldr	r1, [pc, #456]	@ (8003fb0 <CreateMessage+0x42c>)
 8003de8:	9202      	str	r2, [sp, #8]
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	4b63      	ldr	r3, [pc, #396]	@ (8003f7c <CreateMessage+0x3f8>)
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	0003      	movs	r3, r0
 8003df2:	002a      	movs	r2, r5
 8003df4:	0020      	movs	r0, r4
 8003df6:	f01a ff1f 	bl	801ec38 <siprintf>
    index = strlen(message);
 8003dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <CreateMessage+0x3f0>)
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7fc f9b5 	bl	800016c <strlen>
 8003e02:	0002      	movs	r2, r0
 8003e04:	19bb      	adds	r3, r7, r6
 8003e06:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003e08:	4a53      	ldr	r2, [pc, #332]	@ (8003f58 <CreateMessage+0x3d4>)
 8003e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7ff fe94 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003e14:	19bb      	adds	r3, r7, r6
 8003e16:	881a      	ldrh	r2, [r3, #0]
 8003e18:	4b56      	ldr	r3, [pc, #344]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e1a:	18d4      	adds	r4, r2, r3
 8003e1c:	4b58      	ldr	r3, [pc, #352]	@ (8003f80 <CreateMessage+0x3fc>)
 8003e1e:	689d      	ldr	r5, [r3, #8]
 8003e20:	4b64      	ldr	r3, [pc, #400]	@ (8003fb4 <CreateMessage+0x430>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	1c18      	adds	r0, r3, #0
 8003e26:	f7ff fb1d 	bl	8003464 <__aeabi_f2d>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	000b      	movs	r3, r1
 8003e2e:	484e      	ldr	r0, [pc, #312]	@ (8003f68 <CreateMessage+0x3e4>)
 8003e30:	4961      	ldr	r1, [pc, #388]	@ (8003fb8 <CreateMessage+0x434>)
 8003e32:	9202      	str	r2, [sp, #8]
 8003e34:	9303      	str	r3, [sp, #12]
 8003e36:	4b51      	ldr	r3, [pc, #324]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	002a      	movs	r2, r5
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f01a fefa 	bl	801ec38 <siprintf>
    index = strlen(message);
 8003e44:	4b4b      	ldr	r3, [pc, #300]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7fc f990 	bl	800016c <strlen>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	19bb      	adds	r3, r7, r6
 8003e50:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003e52:	4a43      	ldr	r2, [pc, #268]	@ (8003f60 <CreateMessage+0x3dc>)
 8003e54:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fe6f 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003e5e:	19bb      	adds	r3, r7, r6
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	4b44      	ldr	r3, [pc, #272]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e64:	18d4      	adds	r4, r2, r3
 8003e66:	4b46      	ldr	r3, [pc, #280]	@ (8003f80 <CreateMessage+0x3fc>)
 8003e68:	689d      	ldr	r5, [r3, #8]
 8003e6a:	4b54      	ldr	r3, [pc, #336]	@ (8003fbc <CreateMessage+0x438>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1c18      	adds	r0, r3, #0
 8003e70:	f7ff faf8 	bl	8003464 <__aeabi_f2d>
 8003e74:	0002      	movs	r2, r0
 8003e76:	000b      	movs	r3, r1
 8003e78:	483b      	ldr	r0, [pc, #236]	@ (8003f68 <CreateMessage+0x3e4>)
 8003e7a:	4951      	ldr	r1, [pc, #324]	@ (8003fc0 <CreateMessage+0x43c>)
 8003e7c:	9202      	str	r2, [sp, #8]
 8003e7e:	9303      	str	r3, [sp, #12]
 8003e80:	4b3e      	ldr	r3, [pc, #248]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	0003      	movs	r3, r0
 8003e86:	002a      	movs	r2, r5
 8003e88:	0020      	movs	r0, r4
 8003e8a:	f01a fed5 	bl	801ec38 <siprintf>
    index = strlen(message);
 8003e8e:	4b39      	ldr	r3, [pc, #228]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fc f96b 	bl	800016c <strlen>
 8003e96:	0002      	movs	r2, r0
 8003e98:	19bb      	adds	r3, r7, r6
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e025      	b.n	8003eea <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <CreateMessage+0x3c4>)
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7ff fe49 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003eaa:	260e      	movs	r6, #14
 8003eac:	19bb      	adds	r3, r7, r6
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <CreateMessage+0x3f0>)
 8003eb2:	18d4      	adds	r4, r2, r3
 8003eb4:	4b32      	ldr	r3, [pc, #200]	@ (8003f80 <CreateMessage+0x3fc>)
 8003eb6:	689d      	ldr	r5, [r3, #8]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa4 <CreateMessage+0x420>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1c18      	adds	r0, r3, #0
 8003ebe:	f7ff fad1 	bl	8003464 <__aeabi_f2d>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	000b      	movs	r3, r1
 8003ec6:	4828      	ldr	r0, [pc, #160]	@ (8003f68 <CreateMessage+0x3e4>)
 8003ec8:	493e      	ldr	r1, [pc, #248]	@ (8003fc4 <CreateMessage+0x440>)
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9303      	str	r3, [sp, #12]
 8003ece:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	002a      	movs	r2, r5
 8003ed6:	0020      	movs	r0, r4
 8003ed8:	f01a feae 	bl	801ec38 <siprintf>
    index = strlen(message);
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <CreateMessage+0x3f0>)
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7fc f944 	bl	800016c <strlen>
 8003ee4:	0002      	movs	r2, r0
 8003ee6:	19bb      	adds	r3, r7, r6
 8003ee8:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003eea:	240e      	movs	r4, #14
 8003eec:	193b      	adds	r3, r7, r4
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	4a35      	ldr	r2, [pc, #212]	@ (8003fc8 <CreateMessage+0x444>)
 8003ef2:	4936      	ldr	r1, [pc, #216]	@ (8003fcc <CreateMessage+0x448>)
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	f009 fa5d 	bl	800d3b4 <CreateLine>
  index = sprintf(&message[index], "]");
 8003efa:	193b      	adds	r3, r7, r4
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <CreateMessage+0x3f0>)
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	4a33      	ldr	r2, [pc, #204]	@ (8003fd0 <CreateMessage+0x44c>)
 8003f04:	0011      	movs	r1, r2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f01a fe96 	bl	801ec38 <siprintf>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003f12:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <CreateMessage+0x3f0>)
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fc f929 	bl	800016c <strlen>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	b29b      	uxth	r3, r3
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b005      	add	sp, #20
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	200009e0 	.word	0x200009e0
 8003f2c:	0808000c 	.word	0x0808000c
 8003f30:	200009ec 	.word	0x200009ec
 8003f34:	08080018 	.word	0x08080018
 8003f38:	200009f8 	.word	0x200009f8
 8003f3c:	08080048 	.word	0x08080048
 8003f40:	20000a04 	.word	0x20000a04
 8003f44:	08080030 	.word	0x08080030
 8003f48:	20000a10 	.word	0x20000a10
 8003f4c:	0808006c 	.word	0x0808006c
 8003f50:	20000a1c 	.word	0x20000a1c
 8003f54:	08080078 	.word	0x08080078
 8003f58:	20000a28 	.word	0x20000a28
 8003f5c:	08080054 	.word	0x08080054
 8003f60:	20000a34 	.word	0x20000a34
 8003f64:	08080060 	.word	0x08080060
 8003f68:	20000a40 	.word	0x20000a40
 8003f6c:	08080090 	.word	0x08080090
 8003f70:	0802385c 	.word	0x0802385c
 8003f74:	20000584 	.word	0x20000584
 8003f78:	08021eb4 	.word	0x08021eb4
 8003f7c:	20000a60 	.word	0x20000a60
 8003f80:	20000550 	.word	0x20000550
 8003f84:	20000564 	.word	0x20000564
 8003f88:	08021eb8 	.word	0x08021eb8
 8003f8c:	20000568 	.word	0x20000568
 8003f90:	08021f0c 	.word	0x08021f0c
 8003f94:	20000578 	.word	0x20000578
 8003f98:	08021f64 	.word	0x08021f64
 8003f9c:	20000574 	.word	0x20000574
 8003fa0:	08021fc0 	.word	0x08021fc0
 8003fa4:	2000056c 	.word	0x2000056c
 8003fa8:	08022014 	.word	0x08022014
 8003fac:	20000570 	.word	0x20000570
 8003fb0:	08022074 	.word	0x08022074
 8003fb4:	2000057c 	.word	0x2000057c
 8003fb8:	080220d4 	.word	0x080220d4
 8003fbc:	20000580 	.word	0x20000580
 8003fc0:	08022130 	.word	0x08022130
 8003fc4:	08022188 	.word	0x08022188
 8003fc8:	080221e0 	.word	0x080221e0
 8003fcc:	08021e28 	.word	0x08021e28
 8003fd0:	080221f8 	.word	0x080221f8

08003fd4 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003fd8:	2064      	movs	r0, #100	@ 0x64
 8003fda:	f009 fd93 	bl	800db04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <StartProg+0x60>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f00a fffe 	bl	800efe6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003fea:	2064      	movs	r0, #100	@ 0x64
 8003fec:	f009 fd8a 	bl	800db04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003ff0:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <StartProg+0x60>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f00a fff5 	bl	800efe6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003ffc:	23fa      	movs	r3, #250	@ 0xfa
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	0018      	movs	r0, r3
 8004002:	f009 fd7f 	bl	800db04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <StartProg+0x60>)
 8004008:	2201      	movs	r2, #1
 800400a:	2101      	movs	r1, #1
 800400c:	0018      	movs	r0, r3
 800400e:	f00a ffea 	bl	800efe6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004012:	23fa      	movs	r3, #250	@ 0xfa
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	0018      	movs	r0, r3
 8004018:	f009 fd74 	bl	800db04 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <StartProg+0x60>)
 800401e:	2201      	movs	r2, #1
 8004020:	2102      	movs	r1, #2
 8004022:	0018      	movs	r0, r3
 8004024:	f00a ffdf 	bl	800efe6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004028:	2028      	movs	r0, #40	@ 0x28
 800402a:	f009 fd6b 	bl	800db04 <HAL_Delay>
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	50001c00 	.word	0x50001c00

08004038 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	b0d9      	sub	sp, #356	@ 0x164
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	0008      	movs	r0, r1
 8004042:	0011      	movs	r1, r2
 8004044:	4ba1      	ldr	r3, [pc, #644]	@ (80042cc <ParseBuffer+0x294>)
 8004046:	24b0      	movs	r4, #176	@ 0xb0
 8004048:	0064      	lsls	r4, r4, #1
 800404a:	191b      	adds	r3, r3, r4
 800404c:	19db      	adds	r3, r3, r7
 800404e:	1c02      	adds	r2, r0, #0
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	4b9f      	ldr	r3, [pc, #636]	@ (80042d0 <ParseBuffer+0x298>)
 8004054:	191b      	adds	r3, r3, r4
 8004056:	19db      	adds	r3, r3, r7
 8004058:	1c0a      	adds	r2, r1, #0
 800405a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	005a      	lsls	r2, r3, #1
 8004060:	2348      	movs	r3, #72	@ 0x48
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2100      	movs	r1, #0
 8004066:	0018      	movs	r0, r3
 8004068:	f01a ff2a 	bl	801eec0 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800406c:	2360      	movs	r3, #96	@ 0x60
 800406e:	33ff      	adds	r3, #255	@ 0xff
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2203      	movs	r2, #3
 8004074:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004076:	23ae      	movs	r3, #174	@ 0xae
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2200      	movs	r2, #0
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e013      	b.n	80040aa <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004082:	20ae      	movs	r0, #174	@ 0xae
 8004084:	0040      	lsls	r0, r0, #1
 8004086:	183b      	adds	r3, r7, r0
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	18d2      	adds	r2, r2, r3
 800408e:	183b      	adds	r3, r7, r0
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	7811      	ldrb	r1, [r2, #0]
 8004094:	4a8f      	ldr	r2, [pc, #572]	@ (80042d4 <ParseBuffer+0x29c>)
 8004096:	24b0      	movs	r4, #176	@ 0xb0
 8004098:	0064      	lsls	r4, r4, #1
 800409a:	1912      	adds	r2, r2, r4
 800409c:	19d2      	adds	r2, r2, r7
 800409e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	183b      	adds	r3, r7, r0
 80040a6:	3201      	adds	r2, #1
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	23ae      	movs	r3, #174	@ 0xae
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	18fa      	adds	r2, r7, r3
 80040b0:	4b86      	ldr	r3, [pc, #536]	@ (80042cc <ParseBuffer+0x294>)
 80040b2:	24b0      	movs	r4, #176	@ 0xb0
 80040b4:	0064      	lsls	r4, r4, #1
 80040b6:	191b      	adds	r3, r3, r4
 80040b8:	19db      	adds	r3, r3, r7
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3df      	bcc.n	8004082 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80040c2:	4b82      	ldr	r3, [pc, #520]	@ (80042cc <ParseBuffer+0x294>)
 80040c4:	191b      	adds	r3, r3, r4
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	4a82      	ldr	r2, [pc, #520]	@ (80042d4 <ParseBuffer+0x29c>)
 80040cc:	1912      	adds	r2, r2, r4
 80040ce:	19d2      	adds	r2, r2, r7
 80040d0:	2100      	movs	r1, #0
 80040d2:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80040d4:	2648      	movs	r6, #72	@ 0x48
 80040d6:	19bb      	adds	r3, r7, r6
 80040d8:	4a7f      	ldr	r2, [pc, #508]	@ (80042d8 <ParseBuffer+0x2a0>)
 80040da:	4980      	ldr	r1, [pc, #512]	@ (80042dc <ParseBuffer+0x2a4>)
 80040dc:	2003      	movs	r0, #3
 80040de:	f009 f969 	bl	800d3b4 <CreateLine>
#endif
  char * ParsePoint = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	22ac      	movs	r2, #172	@ 0xac
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	18b9      	adds	r1, r7, r2
 80040ea:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80040ec:	4b7c      	ldr	r3, [pc, #496]	@ (80042e0 <ParseBuffer+0x2a8>)
 80040ee:	0025      	movs	r5, r4
 80040f0:	195b      	adds	r3, r3, r5
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	4a7b      	ldr	r2, [pc, #492]	@ (80042e4 <ParseBuffer+0x2ac>)
 80040f6:	8811      	ldrh	r1, [r2, #0]
 80040f8:	8019      	strh	r1, [r3, #0]
 80040fa:	7892      	ldrb	r2, [r2, #2]
 80040fc:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80040fe:	4b7a      	ldr	r3, [pc, #488]	@ (80042e8 <ParseBuffer+0x2b0>)
 8004100:	195b      	adds	r3, r3, r5
 8004102:	19db      	adds	r3, r3, r7
 8004104:	4a79      	ldr	r2, [pc, #484]	@ (80042ec <ParseBuffer+0x2b4>)
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	6019      	str	r1, [r3, #0]
 800410a:	8892      	ldrh	r2, [r2, #4]
 800410c:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800410e:	4b78      	ldr	r3, [pc, #480]	@ (80042f0 <ParseBuffer+0x2b8>)
 8004110:	195b      	adds	r3, r3, r5
 8004112:	19db      	adds	r3, r3, r7
 8004114:	4a77      	ldr	r2, [pc, #476]	@ (80042f4 <ParseBuffer+0x2bc>)
 8004116:	6811      	ldr	r1, [r2, #0]
 8004118:	6019      	str	r1, [r3, #0]
 800411a:	7912      	ldrb	r2, [r2, #4]
 800411c:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800411e:	4b76      	ldr	r3, [pc, #472]	@ (80042f8 <ParseBuffer+0x2c0>)
 8004120:	195b      	adds	r3, r3, r5
 8004122:	19db      	adds	r3, r3, r7
 8004124:	4a75      	ldr	r2, [pc, #468]	@ (80042fc <ParseBuffer+0x2c4>)
 8004126:	6811      	ldr	r1, [r2, #0]
 8004128:	6019      	str	r1, [r3, #0]
 800412a:	8892      	ldrh	r2, [r2, #4]
 800412c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800412e:	4b74      	ldr	r3, [pc, #464]	@ (8004300 <ParseBuffer+0x2c8>)
 8004130:	195b      	adds	r3, r3, r5
 8004132:	19db      	adds	r3, r3, r7
 8004134:	223e      	movs	r2, #62	@ 0x3e
 8004136:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004138:	4b72      	ldr	r3, [pc, #456]	@ (8004304 <ParseBuffer+0x2cc>)
 800413a:	195b      	adds	r3, r3, r5
 800413c:	19db      	adds	r3, r3, r7
 800413e:	4a72      	ldr	r2, [pc, #456]	@ (8004308 <ParseBuffer+0x2d0>)
 8004140:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004142:	c313      	stmia	r3!, {r0, r1, r4}
 8004144:	8811      	ldrh	r1, [r2, #0]
 8004146:	8019      	strh	r1, [r3, #0]
 8004148:	7892      	ldrb	r2, [r2, #2]
 800414a:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800414c:	4b6f      	ldr	r3, [pc, #444]	@ (800430c <ParseBuffer+0x2d4>)
 800414e:	195b      	adds	r3, r3, r5
 8004150:	19db      	adds	r3, r3, r7
 8004152:	4a6f      	ldr	r2, [pc, #444]	@ (8004310 <ParseBuffer+0x2d8>)
 8004154:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004156:	c313      	stmia	r3!, {r0, r1, r4}
 8004158:	8812      	ldrh	r2, [r2, #0]
 800415a:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800415c:	4b5c      	ldr	r3, [pc, #368]	@ (80042d0 <ParseBuffer+0x298>)
 800415e:	195b      	adds	r3, r3, r5
 8004160:	19db      	adds	r3, r3, r7
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 8004168:	2344      	movs	r3, #68	@ 0x44
 800416a:	18fa      	adds	r2, r7, r3
 800416c:	19bb      	adds	r3, r7, r6
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f01a fee0 	bl	801ef36 <strstr>
 8004176:	0003      	movs	r3, r0
 8004178:	22ac      	movs	r2, #172	@ 0xac
 800417a:	0052      	lsls	r2, r2, #1
 800417c:	18ba      	adds	r2, r7, r2
 800417e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004180:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <ParseBuffer+0x298>)
 8004182:	22b0      	movs	r2, #176	@ 0xb0
 8004184:	0052      	lsls	r2, r2, #1
 8004186:	189b      	adds	r3, r3, r2
 8004188:	19db      	adds	r3, r3, r7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10c      	bne.n	80041aa <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004190:	232c      	movs	r3, #44	@ 0x2c
 8004192:	18fa      	adds	r2, r7, r3
 8004194:	2348      	movs	r3, #72	@ 0x48
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	0011      	movs	r1, r2
 800419a:	0018      	movs	r0, r3
 800419c:	f01a fecb 	bl	801ef36 <strstr>
 80041a0:	0003      	movs	r3, r0
 80041a2:	22ac      	movs	r2, #172	@ 0xac
 80041a4:	0052      	lsls	r2, r2, #1
 80041a6:	18ba      	adds	r2, r7, r2
 80041a8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80041aa:	4b49      	ldr	r3, [pc, #292]	@ (80042d0 <ParseBuffer+0x298>)
 80041ac:	22b0      	movs	r2, #176	@ 0xb0
 80041ae:	0052      	lsls	r2, r2, #1
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d10c      	bne.n	80041d4 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 80041ba:	2328      	movs	r3, #40	@ 0x28
 80041bc:	18fa      	adds	r2, r7, r3
 80041be:	2348      	movs	r3, #72	@ 0x48
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f01a feb6 	bl	801ef36 <strstr>
 80041ca:	0003      	movs	r3, r0
 80041cc:	22ac      	movs	r2, #172	@ 0xac
 80041ce:	0052      	lsls	r2, r2, #1
 80041d0:	18ba      	adds	r2, r7, r2
 80041d2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80041d4:	4b3e      	ldr	r3, [pc, #248]	@ (80042d0 <ParseBuffer+0x298>)
 80041d6:	22b0      	movs	r2, #176	@ 0xb0
 80041d8:	0052      	lsls	r2, r2, #1
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80041e4:	2308      	movs	r3, #8
 80041e6:	18fa      	adds	r2, r7, r3
 80041e8:	2348      	movs	r3, #72	@ 0x48
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	0011      	movs	r1, r2
 80041ee:	0018      	movs	r0, r3
 80041f0:	f01a fea1 	bl	801ef36 <strstr>
 80041f4:	0003      	movs	r3, r0
 80041f6:	22ac      	movs	r2, #172	@ 0xac
 80041f8:	0052      	lsls	r2, r2, #1
 80041fa:	18ba      	adds	r2, r7, r2
 80041fc:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80041fe:	233c      	movs	r3, #60	@ 0x3c
 8004200:	18fa      	adds	r2, r7, r3
 8004202:	2448      	movs	r4, #72	@ 0x48
 8004204:	193b      	adds	r3, r7, r4
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f01a fe94 	bl	801ef36 <strstr>
 800420e:	0003      	movs	r3, r0
 8004210:	22aa      	movs	r2, #170	@ 0xaa
 8004212:	0052      	lsls	r2, r2, #1
 8004214:	18ba      	adds	r2, r7, r2
 8004216:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004218:	2318      	movs	r3, #24
 800421a:	18fa      	adds	r2, r7, r3
 800421c:	193b      	adds	r3, r7, r4
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f01a fe88 	bl	801ef36 <strstr>
 8004226:	0003      	movs	r3, r0
 8004228:	22a8      	movs	r2, #168	@ 0xa8
 800422a:	0052      	lsls	r2, r2, #1
 800422c:	18ba      	adds	r2, r7, r2
 800422e:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004230:	4a38      	ldr	r2, [pc, #224]	@ (8004314 <ParseBuffer+0x2dc>)
 8004232:	193b      	adds	r3, r7, r4
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f01a fe7d 	bl	801ef36 <strstr>
 800423c:	0003      	movs	r3, r0
 800423e:	22a6      	movs	r2, #166	@ 0xa6
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	18ba      	adds	r2, r7, r2
 8004244:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004246:	2334      	movs	r3, #52	@ 0x34
 8004248:	18fa      	adds	r2, r7, r3
 800424a:	193b      	adds	r3, r7, r4
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f01a fe71 	bl	801ef36 <strstr>
 8004254:	0003      	movs	r3, r0
 8004256:	22a4      	movs	r2, #164	@ 0xa4
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	18ba      	adds	r2, r7, r2
 800425c:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800425e:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <ParseBuffer+0x294>)
 8004260:	21b0      	movs	r1, #176	@ 0xb0
 8004262:	0049      	lsls	r1, r1, #1
 8004264:	185b      	adds	r3, r3, r1
 8004266:	19db      	adds	r3, r3, r7
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d800      	bhi.n	8004270 <ParseBuffer+0x238>
 800426e:	e0c0      	b.n	80043f2 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004270:	22ac      	movs	r2, #172	@ 0xac
 8004272:	0052      	lsls	r2, r2, #1
 8004274:	18bb      	adds	r3, r7, r2
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d053      	beq.n	8004324 <ParseBuffer+0x2ec>
 800427c:	18bb      	adds	r3, r7, r2
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b4f      	cmp	r3, #79	@ 0x4f
 8004284:	d14e      	bne.n	8004324 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004286:	2360      	movs	r3, #96	@ 0x60
 8004288:	33ff      	adds	r3, #255	@ 0xff
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004290:	4b21      	ldr	r3, [pc, #132]	@ (8004318 <ParseBuffer+0x2e0>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b12      	cmp	r3, #18
 8004296:	d145      	bne.n	8004324 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <ParseBuffer+0x294>)
 800429a:	185b      	adds	r3, r3, r1
 800429c:	19db      	adds	r3, r3, r7
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80042a2:	d10b      	bne.n	80042bc <ParseBuffer+0x284>
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <ParseBuffer+0x29c>)
 80042a6:	185b      	adds	r3, r3, r1
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	2221      	movs	r2, #33	@ 0x21
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	2b32      	cmp	r3, #50	@ 0x32
 80042b0:	d104      	bne.n	80042bc <ParseBuffer+0x284>
          ParseTime(tempBuf);
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	0018      	movs	r0, r3
 80042b6:	f002 f889 	bl	80063cc <ParseTime>
 80042ba:	e033      	b.n	8004324 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <ParseBuffer+0x2e4>)
 80042be:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <ParseBuffer+0x2e8>)
 80042c0:	0019      	movs	r1, r3
 80042c2:	2001      	movs	r0, #1
 80042c4:	f009 f876 	bl	800d3b4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80042c8:	2306      	movs	r3, #6
 80042ca:	e096      	b.n	80043fa <ParseBuffer+0x3c2>
 80042cc:	fffffea2 	.word	0xfffffea2
 80042d0:	fffffea1 	.word	0xfffffea1
 80042d4:	fffffee8 	.word	0xfffffee8
 80042d8:	080221fc 	.word	0x080221fc
 80042dc:	08021e28 	.word	0x08021e28
 80042e0:	fffffee4 	.word	0xfffffee4
 80042e4:	08022228 	.word	0x08022228
 80042e8:	fffffedc 	.word	0xfffffedc
 80042ec:	0802222c 	.word	0x0802222c
 80042f0:	fffffed4 	.word	0xfffffed4
 80042f4:	08022234 	.word	0x08022234
 80042f8:	fffffecc 	.word	0xfffffecc
 80042fc:	0802223c 	.word	0x0802223c
 8004300:	fffffec8 	.word	0xfffffec8
 8004304:	fffffeb8 	.word	0xfffffeb8
 8004308:	08022244 	.word	0x08022244
 800430c:	fffffea8 	.word	0xfffffea8
 8004310:	08022254 	.word	0x08022254
 8004314:	08023838 	.word	0x08023838
 8004318:	2000099e 	.word	0x2000099e
 800431c:	08022214 	.word	0x08022214
 8004320:	08021e4c 	.word	0x08021e4c
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004324:	22ac      	movs	r2, #172	@ 0xac
 8004326:	0052      	lsls	r2, r2, #1
 8004328:	18bb      	adds	r3, r7, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <ParseBuffer+0x30c>
 8004330:	18bb      	adds	r3, r7, r2
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b72      	cmp	r3, #114	@ 0x72
 8004338:	d104      	bne.n	8004344 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800433a:	2360      	movs	r3, #96	@ 0x60
 800433c:	33ff      	adds	r3, #255	@ 0xff
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2202      	movs	r2, #2
 8004342:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004344:	22ac      	movs	r2, #172	@ 0xac
 8004346:	0052      	lsls	r2, r2, #1
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <ParseBuffer+0x32c>
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b3e      	cmp	r3, #62	@ 0x3e
 8004358:	d104      	bne.n	8004364 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800435a:	2360      	movs	r3, #96	@ 0x60
 800435c:	33ff      	adds	r3, #255	@ 0xff
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2205      	movs	r2, #5
 8004362:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004364:	22ac      	movs	r2, #172	@ 0xac
 8004366:	0052      	lsls	r2, r2, #1
 8004368:	18bb      	adds	r3, r7, r2
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <ParseBuffer+0x34c>
 8004370:	18bb      	adds	r3, r7, r2
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b2b      	cmp	r3, #43	@ 0x2b
 8004378:	d104      	bne.n	8004384 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800437a:	2360      	movs	r3, #96	@ 0x60
 800437c:	33ff      	adds	r3, #255	@ 0xff
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	220b      	movs	r2, #11
 8004382:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004384:	22aa      	movs	r2, #170	@ 0xaa
 8004386:	0052      	lsls	r2, r2, #1
 8004388:	18bb      	adds	r3, r7, r2
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <ParseBuffer+0x362>
 8004390:	18bb      	adds	r3, r7, r2
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b45      	cmp	r3, #69	@ 0x45
 8004398:	d00a      	beq.n	80043b0 <ParseBuffer+0x378>
 800439a:	22a4      	movs	r2, #164	@ 0xa4
 800439c:	0052      	lsls	r2, r2, #1
 800439e:	18bb      	adds	r3, r7, r2
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <ParseBuffer+0x382>
 80043a6:	18bb      	adds	r3, r7, r2
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b46      	cmp	r3, #70	@ 0x46
 80043ae:	d104      	bne.n	80043ba <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 80043b0:	2360      	movs	r3, #96	@ 0x60
 80043b2:	33ff      	adds	r3, #255	@ 0xff
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80043ba:	22a8      	movs	r2, #168	@ 0xa8
 80043bc:	0052      	lsls	r2, r2, #1
 80043be:	18bb      	adds	r3, r7, r2
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <ParseBuffer+0x39e>
 80043c6:	18bb      	adds	r3, r7, r2
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b57      	cmp	r3, #87	@ 0x57
 80043ce:	d102      	bne.n	80043d6 <ParseBuffer+0x39e>
      ConnectionMade = true;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <ParseBuffer+0x3cc>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80043d6:	22a6      	movs	r2, #166	@ 0xa6
 80043d8:	0052      	lsls	r2, r2, #1
 80043da:	18bb      	adds	r3, r7, r2
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <ParseBuffer+0x3ba>
 80043e2:	18bb      	adds	r3, r7, r2
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b32      	cmp	r3, #50	@ 0x32
 80043ea:	d102      	bne.n	80043f2 <ParseBuffer+0x3ba>
      beurs = true;
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <ParseBuffer+0x3d0>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80043f2:	2360      	movs	r3, #96	@ 0x60
 80043f4:	33ff      	adds	r3, #255	@ 0xff
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	781b      	ldrb	r3, [r3, #0]

}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b059      	add	sp, #356	@ 0x164
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	2000054c 	.word	0x2000054c
 8004408:	2000054e 	.word	0x2000054e

0800440c <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004412:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <PollAwake+0x34>)
 8004414:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f7fb fea7 	bl	800016c <strlen>
 800441e:	0003      	movs	r3, r0
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f7ff fafe 	bl	8003a28 <ESP_Send>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <PollAwake+0x28>
    return true;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <PollAwake+0x2a>
  }
  else{
    return false;
 8004434:	2300      	movs	r3, #0
  }
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	08022264 	.word	0x08022264

08004444 <RFPower>:
bool RFPower(){
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <RFPower+0x34>)
 800444c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7fb fe8b 	bl	800016c <strlen>
 8004456:	0003      	movs	r3, r0
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0011      	movs	r1, r2
 800445e:	0018      	movs	r0, r3
 8004460:	f7ff fae2 	bl	8003a28 <ESP_Send>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d001      	beq.n	800446c <RFPower+0x28>
    return true;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <RFPower+0x2a>
  }
  else{
    return false;
 800446c:	2300      	movs	r3, #0
  }
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	0802226c 	.word	0x0802226c

0800447c <CheckRFPower>:
bool CheckRFPower(){
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004482:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <CheckRFPower+0x34>)
 8004484:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7fb fe6f 	bl	800016c <strlen>
 800448e:	0003      	movs	r3, r0
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0011      	movs	r1, r2
 8004496:	0018      	movs	r0, r3
 8004498:	f7ff fac6 	bl	8003a28 <ESP_Send>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d001      	beq.n	80044a4 <CheckRFPower+0x28>
    return true;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80044a4:	2300      	movs	r3, #0
  }
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b002      	add	sp, #8
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	0802227c 	.word	0x0802227c

080044b4 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <ATRestore+0x34>)
 80044bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fb fe53 	bl	800016c <strlen>
 80044c6:	0003      	movs	r3, r0
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0011      	movs	r1, r2
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff faaa 	bl	8003a28 <ESP_Send>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <ATRestore+0x28>
    return true;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <ATRestore+0x2a>
  }
  else{
    return false;
 80044dc:	2300      	movs	r3, #0
  }
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	0802228c 	.word	0x0802228c

080044ec <CWINIT>:
bool CWINIT(){
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <CWINIT+0x34>)
 80044f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7fb fe37 	bl	800016c <strlen>
 80044fe:	0003      	movs	r3, r0
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0011      	movs	r1, r2
 8004506:	0018      	movs	r0, r3
 8004508:	f7ff fa8e 	bl	8003a28 <ESP_Send>
 800450c:	1e03      	subs	r3, r0, #0
 800450e:	d001      	beq.n	8004514 <CWINIT+0x28>
    return true;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <CWINIT+0x2a>
  }
  else{
    return false;
 8004514:	2300      	movs	r3, #0
  }
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	0802229c 	.word	0x0802229c

08004524 <CWMODE1>:
bool CWMODE1(){
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <CWMODE1+0x34>)
 800452c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f7fb fe1b 	bl	800016c <strlen>
 8004536:	0003      	movs	r3, r0
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0011      	movs	r1, r2
 800453e:	0018      	movs	r0, r3
 8004540:	f7ff fa72 	bl	8003a28 <ESP_Send>
 8004544:	1e03      	subs	r3, r0, #0
 8004546:	d001      	beq.n	800454c <CWMODE1+0x28>
    return true;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <CWMODE1+0x2a>
  }
  else{
    return false;
 800454c:	2300      	movs	r3, #0
  }
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b002      	add	sp, #8
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	080222ac 	.word	0x080222ac

0800455c <CWMODE2>:
bool CWMODE2(){
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <CWMODE2+0x34>)
 8004564:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f7fb fdff 	bl	800016c <strlen>
 800456e:	0003      	movs	r3, r0
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0011      	movs	r1, r2
 8004576:	0018      	movs	r0, r3
 8004578:	f7ff fa56 	bl	8003a28 <ESP_Send>
 800457c:	1e03      	subs	r3, r0, #0
 800457e:	d001      	beq.n	8004584 <CWMODE2+0x28>
    return true;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004584:	2300      	movs	r3, #0
  }
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b002      	add	sp, #8
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	080222bc 	.word	0x080222bc

08004594 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800459a:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <CWAUTOCONN+0x34>)
 800459c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7fb fde3 	bl	800016c <strlen>
 80045a6:	0003      	movs	r3, r0
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff fa3a 	bl	8003a28 <ESP_Send>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d001      	beq.n	80045bc <CWAUTOCONN+0x28>
    return true;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80045bc:	2300      	movs	r3, #0
  }
}
 80045be:	0018      	movs	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	080222cc 	.word	0x080222cc

080045cc <CWJAP>:
bool CWJAP(){
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	46c6      	mov	lr, r8
 80045d0:	b500      	push	{lr}
 80045d2:	b0a2      	sub	sp, #136	@ 0x88
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	466b      	mov	r3, sp
 80045d8:	4698      	mov	r8, r3
  beursTest = true;
 80045da:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <CWJAP+0xf4>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80045e0:	2618      	movs	r6, #24
 80045e2:	19bb      	adds	r3, r7, r6
 80045e4:	2264      	movs	r2, #100	@ 0x64
 80045e6:	2100      	movs	r1, #0
 80045e8:	0018      	movs	r0, r3
 80045ea:	f01a fc69 	bl	801eec0 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80045ee:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <CWJAP+0xf8>)
 80045f0:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <CWJAP+0xfc>)
 80045f2:	4936      	ldr	r1, [pc, #216]	@ (80046cc <CWJAP+0x100>)
 80045f4:	19b8      	adds	r0, r7, r6
 80045f6:	f01a fb1f 	bl	801ec38 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80045fa:	19bb      	adds	r3, r7, r6
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7fb fdb5 	bl	800016c <strlen>
 8004602:	0002      	movs	r2, r0
 8004604:	216f      	movs	r1, #111	@ 0x6f
 8004606:	0030      	movs	r0, r6
 8004608:	180b      	adds	r3, r1, r0
 800460a:	19db      	adds	r3, r3, r7
 800460c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800460e:	180b      	adds	r3, r1, r0
 8004610:	19db      	adds	r3, r3, r7
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	1879      	adds	r1, r7, r1
 800461c:	600a      	str	r2, [r1, #0]
 800461e:	001a      	movs	r2, r3
 8004620:	60ba      	str	r2, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	60fa      	str	r2, [r7, #12]
 8004626:	68b8      	ldr	r0, [r7, #8]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	0002      	movs	r2, r0
 800462c:	0f52      	lsrs	r2, r2, #29
 800462e:	000e      	movs	r6, r1
 8004630:	00f6      	lsls	r6, r6, #3
 8004632:	617e      	str	r6, [r7, #20]
 8004634:	697e      	ldr	r6, [r7, #20]
 8004636:	4316      	orrs	r6, r2
 8004638:	617e      	str	r6, [r7, #20]
 800463a:	0002      	movs	r2, r0
 800463c:	00d2      	lsls	r2, r2, #3
 800463e:	613a      	str	r2, [r7, #16]
 8004640:	001a      	movs	r2, r3
 8004642:	603a      	str	r2, [r7, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	0002      	movs	r2, r0
 800464e:	0f52      	lsrs	r2, r2, #29
 8004650:	000e      	movs	r6, r1
 8004652:	00f5      	lsls	r5, r6, #3
 8004654:	4315      	orrs	r5, r2
 8004656:	0002      	movs	r2, r0
 8004658:	00d4      	lsls	r4, r2, #3
 800465a:	3307      	adds	r3, #7
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	466a      	mov	r2, sp
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	469d      	mov	sp, r3
 8004666:	466b      	mov	r3, sp
 8004668:	3300      	adds	r3, #0
 800466a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800466c:	246f      	movs	r4, #111	@ 0x6f
 800466e:	2518      	movs	r5, #24
 8004670:	1963      	adds	r3, r4, r5
 8004672:	19db      	adds	r3, r3, r7
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	001a      	movs	r2, r3
 800467a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800467c:	2100      	movs	r1, #0
 800467e:	0018      	movs	r0, r3
 8004680:	f01a fc1e 	bl	801eec0 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004684:	1963      	adds	r3, r4, r5
 8004686:	19db      	adds	r3, r3, r7
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	1979      	adds	r1, r7, r5
 800468c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800468e:	0018      	movs	r0, r3
 8004690:	f01a fc3d 	bl	801ef0e <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004694:	1963      	adds	r3, r4, r5
 8004696:	19db      	adds	r3, r3, r7
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800469e:	0011      	movs	r1, r2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff f9c1 	bl	8003a28 <ESP_Send>
 80046a6:	1e03      	subs	r3, r0, #0
 80046a8:	d001      	beq.n	80046ae <CWJAP+0xe2>
    return true;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <CWJAP+0xe4>
  }
  else{
    return false;
 80046ae:	2300      	movs	r3, #0
 80046b0:	46c5      	mov	sp, r8
  }
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b022      	add	sp, #136	@ 0x88
 80046b8:	bc80      	pop	{r7}
 80046ba:	46b8      	mov	r8, r7
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	2000054d 	.word	0x2000054d
 80046c4:	08023844 	.word	0x08023844
 80046c8:	08023838 	.word	0x08023838
 80046cc:	080222e0 	.word	0x080222e0

080046d0 <CWMODE3>:
bool CWMODE3(){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <CWMODE3+0x34>)
 80046d8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fb fd45 	bl	800016c <strlen>
 80046e2:	0003      	movs	r3, r0
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff f99c 	bl	8003a28 <ESP_Send>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <CWMODE3+0x28>
    return true;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <CWMODE3+0x2a>
  }
  else{
    return false;
 80046f8:	2300      	movs	r3, #0
  }
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	080222f8 	.word	0x080222f8

08004708 <CWSTATE>:
bool CWSTATE(){
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <CWSTATE+0x34>)
 8004710:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f7fb fd29 	bl	800016c <strlen>
 800471a:	0003      	movs	r3, r0
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f7ff f980 	bl	8003a28 <ESP_Send>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d001      	beq.n	8004730 <CWSTATE+0x28>
    return true;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004730:	2300      	movs	r3, #0
  }
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	08022308 	.word	0x08022308

08004740 <CWSAP>:
bool CWSAP(){
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <CWSAP+0x34>)
 8004748:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd0d 	bl	800016c <strlen>
 8004752:	0003      	movs	r3, r0
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0011      	movs	r1, r2
 800475a:	0018      	movs	r0, r3
 800475c:	f7ff f964 	bl	8003a28 <ESP_Send>
 8004760:	1e03      	subs	r3, r0, #0
 8004762:	d001      	beq.n	8004768 <CWSAP+0x28>
    return true;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <CWSAP+0x2a>
  }
  else{
    return false;
 8004768:	2300      	movs	r3, #0
  }
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	08022318 	.word	0x08022318

08004778 <CIPMUX>:
bool CIPMUX(){
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <CIPMUX+0x34>)
 8004780:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f7fb fcf1 	bl	800016c <strlen>
 800478a:	0003      	movs	r3, r0
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f7ff f948 	bl	8003a28 <ESP_Send>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <CIPMUX+0x28>
    return true;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <CIPMUX+0x2a>
  }
  else{
    return false;
 80047a0:	2300      	movs	r3, #0
  }
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b002      	add	sp, #8
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	0802233c 	.word	0x0802233c

080047b0 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <WEBSERVER+0x34>)
 80047b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f7fb fcd5 	bl	800016c <strlen>
 80047c2:	0003      	movs	r3, r0
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7ff f92c 	bl	8003a28 <ESP_Send>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d001      	beq.n	80047d8 <WEBSERVER+0x28>
    return true;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <WEBSERVER+0x2a>
  }
  else{
    return false;
 80047d8:	2300      	movs	r3, #0
  }
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	0802234c 	.word	0x0802234c

080047e8 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b0c5      	sub	sp, #276	@ 0x114
 80047ec:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	2100      	movs	r1, #0
 80047f6:	0018      	movs	r0, r3
 80047f8:	f01a fb62 	bl	801eec0 <memset>
  uint16_t length = CreateMessage(beurs);
 80047fc:	4b22      	ldr	r3, [pc, #136]	@ (8004888 <HTTPCPOST+0xa0>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	1dfc      	adds	r4, r7, #7
 8004802:	34ff      	adds	r4, #255	@ 0xff
 8004804:	0018      	movs	r0, r3
 8004806:	f7ff f9bd 	bl	8003b84 <CreateMessage>
 800480a:	0003      	movs	r3, r0
 800480c:	8023      	strh	r3, [r4, #0]
  if(beurs){
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HTTPCPOST+0xa0>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	33ff      	adds	r3, #255	@ 0xff
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	@ (800488c <HTTPCPOST+0xa4>)
 800481e:	491c      	ldr	r1, [pc, #112]	@ (8004890 <HTTPCPOST+0xa8>)
 8004820:	1d38      	adds	r0, r7, #4
 8004822:	f01a fa09 	bl	801ec38 <siprintf>
 8004826:	e016      	b.n	8004856 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004828:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <HTTPCPOST+0xac>)
 800482a:	481b      	ldr	r0, [pc, #108]	@ (8004898 <HTTPCPOST+0xb0>)
 800482c:	220c      	movs	r2, #12
 800482e:	0019      	movs	r1, r3
 8004830:	f7fe ff62 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HTTPCPOST+0xac>)
 8004836:	4b19      	ldr	r3, [pc, #100]	@ (800489c <HTTPCPOST+0xb4>)
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f7ff f97e 	bl	8003b3c <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004840:	1dfb      	adds	r3, r7, #7
 8004842:	33ff      	adds	r3, #255	@ 0xff
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	4c15      	ldr	r4, [pc, #84]	@ (800489c <HTTPCPOST+0xb4>)
 8004848:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HTTPCPOST+0xb8>)
 800484a:	4916      	ldr	r1, [pc, #88]	@ (80048a4 <HTTPCPOST+0xbc>)
 800484c:	1d38      	adds	r0, r7, #4
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	0023      	movs	r3, r4
 8004852:	f01a f9f1 	bl	801ec38 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0002      	movs	r2, r0
 8004860:	1d7b      	adds	r3, r7, #5
 8004862:	33ff      	adds	r3, #255	@ 0xff
 8004864:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004866:	1d7b      	adds	r3, r7, #5
 8004868:	33ff      	adds	r3, #255	@ 0xff
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	0011      	movs	r1, r2
 8004870:	0018      	movs	r0, r3
 8004872:	f7ff f8d9 	bl	8003a28 <ESP_Send>
 8004876:	1e03      	subs	r3, r0, #0
 8004878:	d001      	beq.n	800487e <HTTPCPOST+0x96>
    return true;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HTTPCPOST+0x98>
  }
  else{
    return false;
 800487e:	2300      	movs	r3, #0
  }
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b043      	add	sp, #268	@ 0x10c
 8004886:	bd90      	pop	{r4, r7, pc}
 8004888:	2000054e 	.word	0x2000054e
 800488c:	08023864 	.word	0x08023864
 8004890:	08022364 	.word	0x08022364
 8004894:	20000a7c 	.word	0x20000a7c
 8004898:	08080000 	.word	0x08080000
 800489c:	20000a88 	.word	0x20000a88
 80048a0:	080238a0 	.word	0x080238a0
 80048a4:	0802239c 	.word	0x0802239c

080048a8 <SENDDATA>:
bool SENDDATA(){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <SENDDATA+0x34>)
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fb fc5b 	bl	800016c <strlen>
 80048b6:	0002      	movs	r2, r0
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 80048bc:	1dbb      	adds	r3, r7, #6
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <SENDDATA+0x34>)
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff f8af 	bl	8003a28 <ESP_Send>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d001      	beq.n	80048d2 <SENDDATA+0x2a>
    return true;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <SENDDATA+0x2c>
  }
  else{
    return false;
 80048d2:	2300      	movs	r3, #0
  }
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000584 	.word	0x20000584

080048e0 <SLEEP>:
bool SLEEP(){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <SLEEP+0x34>)
 80048e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7fb fc3d 	bl	800016c <strlen>
 80048f2:	0003      	movs	r3, r0
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0011      	movs	r1, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7ff f894 	bl	8003a28 <ESP_Send>
 8004900:	1e03      	subs	r3, r0, #0
 8004902:	d001      	beq.n	8004908 <SLEEP+0x28>
    return true;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <SLEEP+0x2a>
  }
  else{
    return false;
 8004908:	2300      	movs	r3, #0
  }
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	080223dc 	.word	0x080223dc

08004918 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <CIPSNTPCFG+0x3c>)
 8004920:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f7fb fc21 	bl	800016c <strlen>
 800492a:	0003      	movs	r3, r0
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0011      	movs	r1, r2
 8004932:	0018      	movs	r0, r3
 8004934:	f7ff f878 	bl	8003a28 <ESP_Send>
 8004938:	1e03      	subs	r3, r0, #0
 800493a:	d006      	beq.n	800494a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 800493c:	23fa      	movs	r3, #250	@ 0xfa
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	0018      	movs	r0, r3
 8004942:	f009 f8df 	bl	800db04 <HAL_Delay>
    return true;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800494a:	2300      	movs	r3, #0
  }
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b002      	add	sp, #8
 8004952:	bd80      	pop	{r7, pc}
 8004954:	080223ec 	.word	0x080223ec

08004958 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <CIPSNTPTIME+0x34>)
 8004960:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f7fb fc01 	bl	800016c <strlen>
 800496a:	0003      	movs	r3, r0
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f7ff f858 	bl	8003a28 <ESP_Send>
 8004978:	1e03      	subs	r3, r0, #0
 800497a:	d001      	beq.n	8004980 <CIPSNTPTIME+0x28>
    return true;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004980:	2300      	movs	r3, #0
  }
}
 8004982:	0018      	movs	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	b002      	add	sp, #8
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	0802243c 	.word	0x0802243c

08004990 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <CIPSNTPINTV+0x34>)
 8004998:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0018      	movs	r0, r3
 800499e:	f7fb fbe5 	bl	800016c <strlen>
 80049a2:	0003      	movs	r3, r0
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0011      	movs	r1, r2
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff f83c 	bl	8003a28 <ESP_Send>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d001      	beq.n	80049b8 <CIPSNTPINTV+0x28>
    return true;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 80049b8:	2300      	movs	r3, #0
  }
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b002      	add	sp, #8
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	08022450 	.word	0x08022450

080049c8 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 80049c8:	b5b0      	push	{r4, r5, r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	0002      	movs	r2, r0
 80049d0:	1dfb      	adds	r3, r7, #7
 80049d2:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80049d4:	4b73      	ldr	r3, [pc, #460]	@ (8004ba4 <DMA_ProcessBuffer+0x1dc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	200e      	movs	r0, #14
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0049      	lsls	r1, r1, #1
 80049e4:	1a8a      	subs	r2, r1, r2
 80049e6:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 80049e8:	230d      	movs	r3, #13
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	2203      	movs	r2, #3
 80049ee:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 80049f0:	183b      	adds	r3, r7, r0
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d903      	bls.n	8004a04 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 80049fc:	183b      	adds	r3, r7, r0
 80049fe:	2280      	movs	r2, #128	@ 0x80
 8004a00:	0052      	lsls	r2, r2, #1
 8004a02:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004a04:	4b68      	ldr	r3, [pc, #416]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	230e      	movs	r3, #14
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d131      	bne.n	8004a7a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004a16:	4b65      	ldr	r3, [pc, #404]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b14      	cmp	r3, #20
 8004a1c:	d91b      	bls.n	8004a56 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004a1e:	4b63      	ldr	r3, [pc, #396]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004a24:	4b62      	ldr	r3, [pc, #392]	@ (8004bb0 <DMA_ProcessBuffer+0x1e8>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <DMA_ProcessBuffer+0x74>
 8004a2c:	4b61      	ldr	r3, [pc, #388]	@ (8004bb4 <DMA_ProcessBuffer+0x1ec>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004a34:	230d      	movs	r3, #13
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2207      	movs	r2, #7
 8004a3a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb0 <DMA_ProcessBuffer+0x1e8>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d103      	bne.n	8004a4c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004a44:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb8 <DMA_ProcessBuffer+0x1f0>)
 8004a46:	220b      	movs	r2, #11
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e016      	b.n	8004a7a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004a4c:	230d      	movs	r3, #13
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2206      	movs	r2, #6
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e011      	b.n	8004a7a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004a56:	4b55      	ldr	r3, [pc, #340]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b53      	ldr	r3, [pc, #332]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a60:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004a62:	f009 f845 	bl	800daf0 <HAL_GetTick>
 8004a66:	0003      	movs	r3, r0
 8004a68:	33f5      	adds	r3, #245	@ 0xf5
 8004a6a:	33ff      	adds	r3, #255	@ 0xff
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	4b53      	ldr	r3, [pc, #332]	@ (8004bbc <DMA_ProcessBuffer+0x1f4>)
 8004a70:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004a72:	230d      	movs	r3, #13
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2204      	movs	r2, #4
 8004a78:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	001a      	movs	r2, r3
 8004a82:	210e      	movs	r1, #14
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d100      	bne.n	8004a8e <DMA_ProcessBuffer+0xc6>
 8004a8c:	e082      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004a8e:	4b47      	ldr	r3, [pc, #284]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004a94:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d109      	bne.n	8004ab8 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b45      	ldr	r3, [pc, #276]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004aac:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004aae:	230d      	movs	r3, #13
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e06d      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004ab8:	4b41      	ldr	r3, [pc, #260]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	001a      	movs	r2, r3
 8004ac0:	210e      	movs	r1, #14
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004aca:	187b      	adds	r3, r7, r1
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004ad2:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004ad4:	230d      	movs	r3, #13
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	220a      	movs	r2, #10
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e05a      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004ade:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	210e      	movs	r1, #14
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d917      	bls.n	8004b20 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004af0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	001a      	movs	r2, r3
 8004af8:	4b32      	ldr	r3, [pc, #200]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004afa:	18d0      	adds	r0, r2, r3
 8004afc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	001a      	movs	r2, r3
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	b299      	uxth	r1, r3
 8004b0c:	230d      	movs	r3, #13
 8004b0e:	18fc      	adds	r4, r7, r3
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	001a      	movs	r2, r3
 8004b16:	f7ff fa8f 	bl	8004038 <ParseBuffer>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	7023      	strb	r3, [r4, #0]
 8004b1e:	e026      	b.n	8004b6e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004b20:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	001a      	movs	r2, r3
 8004b28:	4b26      	ldr	r3, [pc, #152]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004b2a:	18d0      	adds	r0, r2, r3
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	001a      	movs	r2, r3
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	b299      	uxth	r1, r3
 8004b3c:	250d      	movs	r5, #13
 8004b3e:	197c      	adds	r4, r7, r5
 8004b40:	1dfb      	adds	r3, r7, #7
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	001a      	movs	r2, r3
 8004b46:	f7ff fa77 	bl	8004038 <ParseBuffer>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004b4e:	210e      	movs	r1, #14
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004b58:	197c      	adds	r4, r7, r5
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	8819      	ldrh	r1, [r3, #0]
 8004b62:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff fa67 	bl	8004038 <ParseBuffer>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	0018      	movs	r0, r3
 8004b76:	240e      	movs	r4, #14
 8004b78:	193b      	adds	r3, r7, r4
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	@ (8004bc8 <DMA_ProcessBuffer+0x200>)
 8004b7e:	4913      	ldr	r1, [pc, #76]	@ (8004bcc <DMA_ProcessBuffer+0x204>)
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	0003      	movs	r3, r0
 8004b84:	2003      	movs	r0, #3
 8004b86:	f008 fc15 	bl	800d3b4 <CreateLine>
          OldPos = pos;
 8004b8a:	193b      	adds	r3, r7, r4
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b92:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004b94:	230d      	movs	r3, #13
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	781b      	ldrb	r3, [r3, #0]
}
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	20002450 	.word	0x20002450
 8004ba8:	20000aa1 	.word	0x20000aa1
 8004bac:	2000099c 	.word	0x2000099c
 8004bb0:	2000099e 	.word	0x2000099e
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	20000028 	.word	0x20000028
 8004bbc:	20000990 	.word	0x20000990
 8004bc0:	20000aa2 	.word	0x20000aa2
 8004bc4:	20000448 	.word	0x20000448
 8004bc8:	08022468 	.word	0x08022468
 8004bcc:	08021e28 	.word	0x08021e28

08004bd0 <clearDMABuffer>:

void clearDMABuffer(){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	005a      	lsls	r2, r3, #1
 8004bd8:	4b03      	ldr	r3, [pc, #12]	@ (8004be8 <clearDMABuffer+0x18>)
 8004bda:	2100      	movs	r1, #0
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f01a f96f 	bl	801eec0 <memset>
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000448 	.word	0x20000448

08004bec <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	1dfb      	adds	r3, r7, #7
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	1dbb      	adds	r3, r7, #6
 8004bfa:	1c0a      	adds	r2, r1, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004bfe:	210f      	movs	r1, #15
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004c0e:	187b      	adds	r3, r7, r1
 8004c10:	1dfa      	adds	r2, r7, #7
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	4251      	negs	r1, r2
 8004c16:	414a      	adcs	r2, r1
 8004c18:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004c1a:	1dbb      	adds	r3, r7, #6
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004c22:	230f      	movs	r3, #15
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	1dfa      	adds	r2, r7, #7
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	3a02      	subs	r2, #2
 8004c2c:	4251      	negs	r1, r2
 8004c2e:	414a      	adcs	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004c32:	1dbb      	adds	r3, r7, #6
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d107      	bne.n	8004c4a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004c3a:	230f      	movs	r3, #15
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	1dfa      	adds	r2, r7, #7
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	3a05      	subs	r2, #5
 8004c44:	4251      	negs	r1, r2
 8004c46:	414a      	adcs	r2, r1
 8004c48:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004c4a:	1dbb      	adds	r3, r7, #6
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d107      	bne.n	8004c62 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004c52:	230f      	movs	r3, #15
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	1dfa      	adds	r2, r7, #7
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	3a0b      	subs	r2, #11
 8004c5c:	4251      	negs	r1, r2
 8004c5e:	414a      	adcs	r2, r1
 8004c60:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004c62:	230f      	movs	r3, #15
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	781b      	ldrb	r3, [r3, #0]
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b004      	add	sp, #16
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	0002      	movs	r2, r0
 8004c78:	1dfb      	adds	r3, r7, #7
 8004c7a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004c84:	1dfb      	adds	r3, r7, #7
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b13      	cmp	r3, #19
 8004c8a:	d900      	bls.n	8004c8e <AT_Send+0x1e>
 8004c8c:	e18a      	b.n	8004fa4 <AT_Send+0x334>
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	4bc8      	ldr	r3, [pc, #800]	@ (8004fb4 <AT_Send+0x344>)
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004c98:	4bc7      	ldr	r3, [pc, #796]	@ (8004fb8 <AT_Send+0x348>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f008 fb33 	bl	800d308 <TimestampIsReached>
 8004ca2:	1e03      	subs	r3, r0, #0
 8004ca4:	d100      	bne.n	8004ca8 <AT_Send+0x38>
 8004ca6:	e17c      	b.n	8004fa2 <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fc      	adds	r4, r7, r3
 8004cac:	f7ff fbae 	bl	800440c <PollAwake>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004cb4:	f008 ff1c 	bl	800daf0 <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	3332      	adds	r3, #50	@ 0x32
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	4bbe      	ldr	r3, [pc, #760]	@ (8004fb8 <AT_Send+0x348>)
 8004cc0:	601a      	str	r2, [r3, #0]
  }
  break;
 8004cc2:	e16e      	b.n	8004fa2 <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004cc4:	4abd      	ldr	r2, [pc, #756]	@ (8004fbc <AT_Send+0x34c>)
 8004cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8004fc0 <AT_Send+0x350>)
 8004cc8:	0019      	movs	r1, r3
 8004cca:	2003      	movs	r0, #3
 8004ccc:	f008 fb72 	bl	800d3b4 <CreateLine>
    ATCommandSend = RFPower();
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	18fc      	adds	r4, r7, r3
 8004cd4:	f7ff fbb6 	bl	8004444 <RFPower>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cdc:	f008 ff08 	bl	800daf0 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	330a      	adds	r3, #10
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	4bb4      	ldr	r3, [pc, #720]	@ (8004fb8 <AT_Send+0x348>)
 8004ce8:	601a      	str	r2, [r3, #0]
    break;
 8004cea:	e15b      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004cec:	4ab5      	ldr	r2, [pc, #724]	@ (8004fc4 <AT_Send+0x354>)
 8004cee:	4bb4      	ldr	r3, [pc, #720]	@ (8004fc0 <AT_Send+0x350>)
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	f008 fb5e 	bl	800d3b4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fc      	adds	r4, r7, r3
 8004cfc:	f7ff fbbe 	bl	800447c <CheckRFPower>
 8004d00:	0003      	movs	r3, r0
 8004d02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d04:	f008 fef4 	bl	800daf0 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	330a      	adds	r3, #10
 8004d0c:	001a      	movs	r2, r3
 8004d0e:	4baa      	ldr	r3, [pc, #680]	@ (8004fb8 <AT_Send+0x348>)
 8004d10:	601a      	str	r2, [r3, #0]
    break;
 8004d12:	e147      	b.n	8004fa4 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004d14:	4aac      	ldr	r2, [pc, #688]	@ (8004fc8 <AT_Send+0x358>)
 8004d16:	4baa      	ldr	r3, [pc, #680]	@ (8004fc0 <AT_Send+0x350>)
 8004d18:	0019      	movs	r1, r3
 8004d1a:	2003      	movs	r0, #3
 8004d1c:	f008 fb4a 	bl	800d3b4 <CreateLine>
    ATCommandSend = ATRestore();
 8004d20:	230f      	movs	r3, #15
 8004d22:	18fc      	adds	r4, r7, r3
 8004d24:	f7ff fbc6 	bl	80044b4 <ATRestore>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d2c:	f008 fee0 	bl	800daf0 <HAL_GetTick>
 8004d30:	0003      	movs	r3, r0
 8004d32:	3332      	adds	r3, #50	@ 0x32
 8004d34:	001a      	movs	r2, r3
 8004d36:	4ba0      	ldr	r3, [pc, #640]	@ (8004fb8 <AT_Send+0x348>)
 8004d38:	601a      	str	r2, [r3, #0]
    break;
 8004d3a:	e133      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004d3c:	4aa3      	ldr	r2, [pc, #652]	@ (8004fcc <AT_Send+0x35c>)
 8004d3e:	4ba0      	ldr	r3, [pc, #640]	@ (8004fc0 <AT_Send+0x350>)
 8004d40:	0019      	movs	r1, r3
 8004d42:	2003      	movs	r0, #3
 8004d44:	f008 fb36 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWINIT();
 8004d48:	230f      	movs	r3, #15
 8004d4a:	18fc      	adds	r4, r7, r3
 8004d4c:	f7ff fbce 	bl	80044ec <CWINIT>
 8004d50:	0003      	movs	r3, r0
 8004d52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d54:	f008 fecc 	bl	800daf0 <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	33f5      	adds	r3, #245	@ 0xf5
 8004d5c:	33ff      	adds	r3, #255	@ 0xff
 8004d5e:	001a      	movs	r2, r3
 8004d60:	4b95      	ldr	r3, [pc, #596]	@ (8004fb8 <AT_Send+0x348>)
 8004d62:	601a      	str	r2, [r3, #0]
    break;
 8004d64:	e11e      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004d66:	4a9a      	ldr	r2, [pc, #616]	@ (8004fd0 <AT_Send+0x360>)
 8004d68:	4b95      	ldr	r3, [pc, #596]	@ (8004fc0 <AT_Send+0x350>)
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f008 fb21 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWSTATE();
 8004d72:	230f      	movs	r3, #15
 8004d74:	18fc      	adds	r4, r7, r3
 8004d76:	f7ff fcc7 	bl	8004708 <CWSTATE>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d7e:	f008 feb7 	bl	800daf0 <HAL_GetTick>
 8004d82:	0003      	movs	r3, r0
 8004d84:	33f5      	adds	r3, #245	@ 0xf5
 8004d86:	33ff      	adds	r3, #255	@ 0xff
 8004d88:	001a      	movs	r2, r3
 8004d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8004fb8 <AT_Send+0x348>)
 8004d8c:	601a      	str	r2, [r3, #0]
    break;
 8004d8e:	e109      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004d90:	4a90      	ldr	r2, [pc, #576]	@ (8004fd4 <AT_Send+0x364>)
 8004d92:	4b8b      	ldr	r3, [pc, #556]	@ (8004fc0 <AT_Send+0x350>)
 8004d94:	0019      	movs	r1, r3
 8004d96:	2003      	movs	r0, #3
 8004d98:	f008 fb0c 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWMODE1();
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	18fc      	adds	r4, r7, r3
 8004da0:	f7ff fbc0 	bl	8004524 <CWMODE1>
 8004da4:	0003      	movs	r3, r0
 8004da6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004da8:	f008 fea2 	bl	800daf0 <HAL_GetTick>
 8004dac:	0003      	movs	r3, r0
 8004dae:	330a      	adds	r3, #10
 8004db0:	001a      	movs	r2, r3
 8004db2:	4b81      	ldr	r3, [pc, #516]	@ (8004fb8 <AT_Send+0x348>)
 8004db4:	601a      	str	r2, [r3, #0]
    break;
 8004db6:	e0f5      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004db8:	4a86      	ldr	r2, [pc, #536]	@ (8004fd4 <AT_Send+0x364>)
 8004dba:	4b81      	ldr	r3, [pc, #516]	@ (8004fc0 <AT_Send+0x350>)
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	2003      	movs	r0, #3
 8004dc0:	f008 faf8 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWMODE2();
 8004dc4:	230f      	movs	r3, #15
 8004dc6:	18fc      	adds	r4, r7, r3
 8004dc8:	f7ff fbc8 	bl	800455c <CWMODE2>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dd0:	f008 fe8e 	bl	800daf0 <HAL_GetTick>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	330a      	adds	r3, #10
 8004dd8:	001a      	movs	r2, r3
 8004dda:	4b77      	ldr	r3, [pc, #476]	@ (8004fb8 <AT_Send+0x348>)
 8004ddc:	601a      	str	r2, [r3, #0]
    break;
 8004dde:	e0e1      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004de0:	4a7d      	ldr	r2, [pc, #500]	@ (8004fd8 <AT_Send+0x368>)
 8004de2:	4b77      	ldr	r3, [pc, #476]	@ (8004fc0 <AT_Send+0x350>)
 8004de4:	0019      	movs	r1, r3
 8004de6:	2003      	movs	r0, #3
 8004de8:	f008 fae4 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004dec:	230f      	movs	r3, #15
 8004dee:	18fc      	adds	r4, r7, r3
 8004df0:	f7ff fbd0 	bl	8004594 <CWAUTOCONN>
 8004df4:	0003      	movs	r3, r0
 8004df6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004df8:	f008 fe7a 	bl	800daf0 <HAL_GetTick>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	330a      	adds	r3, #10
 8004e00:	001a      	movs	r2, r3
 8004e02:	4b6d      	ldr	r3, [pc, #436]	@ (8004fb8 <AT_Send+0x348>)
 8004e04:	601a      	str	r2, [r3, #0]
    break;
 8004e06:	e0cd      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004e08:	4a74      	ldr	r2, [pc, #464]	@ (8004fdc <AT_Send+0x36c>)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc0 <AT_Send+0x350>)
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	2003      	movs	r0, #3
 8004e10:	f008 fad0 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWJAP();
 8004e14:	230f      	movs	r3, #15
 8004e16:	18fc      	adds	r4, r7, r3
 8004e18:	f7ff fbd8 	bl	80045cc <CWJAP>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e20:	f008 fe66 	bl	800daf0 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	3332      	adds	r3, #50	@ 0x32
 8004e28:	001a      	movs	r2, r3
 8004e2a:	4b63      	ldr	r3, [pc, #396]	@ (8004fb8 <AT_Send+0x348>)
 8004e2c:	601a      	str	r2, [r3, #0]
    break;
 8004e2e:	e0b9      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004e30:	4a6b      	ldr	r2, [pc, #428]	@ (8004fe0 <AT_Send+0x370>)
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <AT_Send+0x350>)
 8004e34:	0019      	movs	r1, r3
 8004e36:	2003      	movs	r0, #3
 8004e38:	f008 fabc 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWMODE3();
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	18fc      	adds	r4, r7, r3
 8004e40:	f7ff fc46 	bl	80046d0 <CWMODE3>
 8004e44:	0003      	movs	r3, r0
 8004e46:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e48:	f008 fe52 	bl	800daf0 <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	330a      	adds	r3, #10
 8004e50:	001a      	movs	r2, r3
 8004e52:	4b59      	ldr	r3, [pc, #356]	@ (8004fb8 <AT_Send+0x348>)
 8004e54:	601a      	str	r2, [r3, #0]
    break;
 8004e56:	e0a5      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004e58:	4a62      	ldr	r2, [pc, #392]	@ (8004fe4 <AT_Send+0x374>)
 8004e5a:	4b59      	ldr	r3, [pc, #356]	@ (8004fc0 <AT_Send+0x350>)
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	2003      	movs	r0, #3
 8004e60:	f008 faa8 	bl	800d3b4 <CreateLine>
    ATCommandSend = CWSAP();
 8004e64:	230f      	movs	r3, #15
 8004e66:	18fc      	adds	r4, r7, r3
 8004e68:	f7ff fc6a 	bl	8004740 <CWSAP>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e70:	f008 fe3e 	bl	800daf0 <HAL_GetTick>
 8004e74:	0003      	movs	r3, r0
 8004e76:	330a      	adds	r3, #10
 8004e78:	001a      	movs	r2, r3
 8004e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb8 <AT_Send+0x348>)
 8004e7c:	601a      	str	r2, [r3, #0]
    break;
 8004e7e:	e091      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004e80:	230f      	movs	r3, #15
 8004e82:	18fc      	adds	r4, r7, r3
 8004e84:	f7ff fc78 	bl	8004778 <CIPMUX>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e8c:	f008 fe30 	bl	800daf0 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	330a      	adds	r3, #10
 8004e94:	001a      	movs	r2, r3
 8004e96:	4b48      	ldr	r3, [pc, #288]	@ (8004fb8 <AT_Send+0x348>)
 8004e98:	601a      	str	r2, [r3, #0]
    break;
 8004e9a:	e083      	b.n	8004fa4 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004e9c:	230f      	movs	r3, #15
 8004e9e:	18fc      	adds	r4, r7, r3
 8004ea0:	f7ff fc86 	bl	80047b0 <WEBSERVER>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ea8:	f008 fe22 	bl	800daf0 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	330a      	adds	r3, #10
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <AT_Send+0x348>)
 8004eb4:	601a      	str	r2, [r3, #0]
    break;
 8004eb6:	e075      	b.n	8004fa4 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fc      	adds	r4, r7, r3
 8004ebc:	f7ff fc94 	bl	80047e8 <HTTPCPOST>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ec4:	f008 fe14 	bl	800daf0 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	33f5      	adds	r3, #245	@ 0xf5
 8004ecc:	33ff      	adds	r3, #255	@ 0xff
 8004ece:	001a      	movs	r2, r3
 8004ed0:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <AT_Send+0x348>)
 8004ed2:	601a      	str	r2, [r3, #0]
    break;
 8004ed4:	e066      	b.n	8004fa4 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004ed6:	4a44      	ldr	r2, [pc, #272]	@ (8004fe8 <AT_Send+0x378>)
 8004ed8:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <AT_Send+0x350>)
 8004eda:	0019      	movs	r1, r3
 8004edc:	2003      	movs	r0, #3
 8004ede:	f008 fa69 	bl	800d3b4 <CreateLine>
    ATCommandSend = SENDDATA();
 8004ee2:	230f      	movs	r3, #15
 8004ee4:	18fc      	adds	r4, r7, r3
 8004ee6:	f7ff fcdf 	bl	80048a8 <SENDDATA>
 8004eea:	0003      	movs	r3, r0
 8004eec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004eee:	f008 fdff 	bl	800daf0 <HAL_GetTick>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	33f5      	adds	r3, #245	@ 0xf5
 8004ef6:	33ff      	adds	r3, #255	@ 0xff
 8004ef8:	001a      	movs	r2, r3
 8004efa:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <AT_Send+0x348>)
 8004efc:	601a      	str	r2, [r3, #0]
    break;
 8004efe:	e051      	b.n	8004fa4 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004f00:	4a3a      	ldr	r2, [pc, #232]	@ (8004fec <AT_Send+0x37c>)
 8004f02:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc0 <AT_Send+0x350>)
 8004f04:	0019      	movs	r1, r3
 8004f06:	2003      	movs	r0, #3
 8004f08:	f008 fa54 	bl	800d3b4 <CreateLine>
    ATCommandSend = SLEEP();
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fc      	adds	r4, r7, r3
 8004f10:	f7ff fce6 	bl	80048e0 <SLEEP>
 8004f14:	0003      	movs	r3, r0
 8004f16:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f18:	f008 fdea 	bl	800daf0 <HAL_GetTick>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	330a      	adds	r3, #10
 8004f20:	001a      	movs	r2, r3
 8004f22:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <AT_Send+0x348>)
 8004f24:	601a      	str	r2, [r3, #0]
    break;
 8004f26:	e03d      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004f28:	4a31      	ldr	r2, [pc, #196]	@ (8004ff0 <AT_Send+0x380>)
 8004f2a:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <AT_Send+0x350>)
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	2003      	movs	r0, #3
 8004f30:	f008 fa40 	bl	800d3b4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004f34:	230f      	movs	r3, #15
 8004f36:	18fc      	adds	r4, r7, r3
 8004f38:	f7ff fcee 	bl	8004918 <CIPSNTPCFG>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f40:	f008 fdd6 	bl	800daf0 <HAL_GetTick>
 8004f44:	0003      	movs	r3, r0
 8004f46:	330a      	adds	r3, #10
 8004f48:	001a      	movs	r2, r3
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <AT_Send+0x348>)
 8004f4c:	601a      	str	r2, [r3, #0]
    break;
 8004f4e:	e029      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004f50:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <AT_Send+0x384>)
 8004f52:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <AT_Send+0x350>)
 8004f54:	0019      	movs	r1, r3
 8004f56:	2003      	movs	r0, #3
 8004f58:	f008 fa2c 	bl	800d3b4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004f5c:	230f      	movs	r3, #15
 8004f5e:	18fc      	adds	r4, r7, r3
 8004f60:	f7ff fcfa 	bl	8004958 <CIPSNTPTIME>
 8004f64:	0003      	movs	r3, r0
 8004f66:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f68:	f008 fdc2 	bl	800daf0 <HAL_GetTick>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	33f5      	adds	r3, #245	@ 0xf5
 8004f70:	33ff      	adds	r3, #255	@ 0xff
 8004f72:	001a      	movs	r2, r3
 8004f74:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <AT_Send+0x348>)
 8004f76:	601a      	str	r2, [r3, #0]
    break;
 8004f78:	e014      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff8 <AT_Send+0x388>)
 8004f7c:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <AT_Send+0x350>)
 8004f7e:	0019      	movs	r1, r3
 8004f80:	2003      	movs	r0, #3
 8004f82:	f008 fa17 	bl	800d3b4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004f86:	230f      	movs	r3, #15
 8004f88:	18fc      	adds	r4, r7, r3
 8004f8a:	f7ff fd01 	bl	8004990 <CIPSNTPINTV>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f92:	f008 fdad 	bl	800daf0 <HAL_GetTick>
 8004f96:	0003      	movs	r3, r0
 8004f98:	330a      	adds	r3, #10
 8004f9a:	001a      	movs	r2, r3
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <AT_Send+0x348>)
 8004f9e:	601a      	str	r2, [r3, #0]
    break;
 8004fa0:	e000      	b.n	8004fa4 <AT_Send+0x334>
  break;
 8004fa2:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004fa4:	230f      	movs	r3, #15
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b005      	add	sp, #20
 8004fb0:	bd90      	pop	{r4, r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	080238c8 	.word	0x080238c8
 8004fb8:	20000990 	.word	0x20000990
 8004fbc:	08022490 	.word	0x08022490
 8004fc0:	08021e28 	.word	0x08021e28
 8004fc4:	080224a4 	.word	0x080224a4
 8004fc8:	080224b8 	.word	0x080224b8
 8004fcc:	080224c8 	.word	0x080224c8
 8004fd0:	080224dc 	.word	0x080224dc
 8004fd4:	080224f4 	.word	0x080224f4
 8004fd8:	0802250c 	.word	0x0802250c
 8004fdc:	08022524 	.word	0x08022524
 8004fe0:	08022538 	.word	0x08022538
 8004fe4:	08022554 	.word	0x08022554
 8004fe8:	08022570 	.word	0x08022570
 8004fec:	08022580 	.word	0x08022580
 8004ff0:	080225a4 	.word	0x080225a4
 8004ff4:	080225b8 	.word	0x080225b8
 8004ff8:	080225d0 	.word	0x080225d0

08004ffc <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005008:	4b7a      	ldr	r3, [pc, #488]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b05      	cmp	r3, #5
 800500e:	d900      	bls.n	8005012 <ESP_WakeTest+0x16>
 8005010:	e0d6      	b.n	80051c0 <ESP_WakeTest+0x1c4>
 8005012:	009a      	lsls	r2, r3, #2
 8005014:	4b78      	ldr	r3, [pc, #480]	@ (80051f8 <ESP_WakeTest+0x1fc>)
 8005016:	18d3      	adds	r3, r2, r3
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 800501c:	4b77      	ldr	r3, [pc, #476]	@ (80051fc <ESP_WakeTest+0x200>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	4053      	eors	r3, r2
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800502a:	2380      	movs	r3, #128	@ 0x80
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	4874      	ldr	r0, [pc, #464]	@ (8005200 <ESP_WakeTest+0x204>)
 8005030:	2200      	movs	r2, #0
 8005032:	0019      	movs	r1, r3
 8005034:	f009 ffd7 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005038:	2032      	movs	r0, #50	@ 0x32
 800503a:	f008 fd63 	bl	800db04 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	486f      	ldr	r0, [pc, #444]	@ (8005200 <ESP_WakeTest+0x204>)
 8005044:	2201      	movs	r2, #1
 8005046:	0019      	movs	r1, r3
 8005048:	f009 ffcd 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800504c:	200a      	movs	r0, #10
 800504e:	f008 fd59 	bl	800db04 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005052:	4b6c      	ldr	r3, [pc, #432]	@ (8005204 <ESP_WakeTest+0x208>)
 8005054:	2200      	movs	r2, #0
 8005056:	2101      	movs	r1, #1
 8005058:	0018      	movs	r0, r3
 800505a:	f009 ffc4 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800505e:	200a      	movs	r0, #10
 8005060:	f008 fd50 	bl	800db04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005064:	4b67      	ldr	r3, [pc, #412]	@ (8005204 <ESP_WakeTest+0x208>)
 8005066:	2201      	movs	r2, #1
 8005068:	2102      	movs	r1, #2
 800506a:	0018      	movs	r0, r3
 800506c:	f009 ffbb 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005070:	200a      	movs	r0, #10
 8005072:	f008 fd47 	bl	800db04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005076:	4b63      	ldr	r3, [pc, #396]	@ (8005204 <ESP_WakeTest+0x208>)
 8005078:	2201      	movs	r2, #1
 800507a:	2101      	movs	r1, #1
 800507c:	0018      	movs	r0, r3
 800507e:	f009 ffb2 	bl	800efe6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005082:	f008 fd35 	bl	800daf0 <HAL_GetTick>
 8005086:	0003      	movs	r3, r0
 8005088:	22af      	movs	r2, #175	@ 0xaf
 800508a:	0092      	lsls	r2, r2, #2
 800508c:	189a      	adds	r2, r3, r2
 800508e:	4b5e      	ldr	r3, [pc, #376]	@ (8005208 <ESP_WakeTest+0x20c>)
 8005090:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005092:	4b5a      	ldr	r3, [pc, #360]	@ (80051fc <ESP_WakeTest+0x200>)
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	005a      	lsls	r2, r3, #1
 800509c:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <ESP_WakeTest+0x210>)
 800509e:	0011      	movs	r1, r2
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe fcf5 	bl	8003a90 <ESP_Receive>
 80050a6:	1e03      	subs	r3, r0, #0
 80050a8:	d100      	bne.n	80050ac <ESP_WakeTest+0xb0>
 80050aa:	e099      	b.n	80051e0 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 80050ac:	4b51      	ldr	r3, [pc, #324]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80050b2:	e095      	b.n	80051e0 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80050b4:	4b54      	ldr	r3, [pc, #336]	@ (8005208 <ESP_WakeTest+0x20c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f008 f925 	bl	800d308 <TimestampIsReached>
 80050be:	1e03      	subs	r3, r0, #0
 80050c0:	d100      	bne.n	80050c4 <ESP_WakeTest+0xc8>
 80050c2:	e08f      	b.n	80051e4 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 80050c4:	4b52      	ldr	r3, [pc, #328]	@ (8005210 <ESP_WakeTest+0x214>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	1dfc      	adds	r4, r7, #7
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7ff fdd0 	bl	8004c70 <AT_Send>
 80050d0:	0003      	movs	r3, r0
 80050d2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80050d4:	1dfb      	adds	r3, r7, #7
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d100      	bne.n	80050de <ESP_WakeTest+0xe2>
 80050dc:	e082      	b.n	80051e4 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80050de:	4b45      	ldr	r3, [pc, #276]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80050e0:	2202      	movs	r2, #2
 80050e2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80050e4:	e07e      	b.n	80051e4 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80050e6:	4b48      	ldr	r3, [pc, #288]	@ (8005208 <ESP_WakeTest+0x20c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f008 f90c 	bl	800d308 <TimestampIsReached>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d100      	bne.n	80050f6 <ESP_WakeTest+0xfa>
 80050f4:	e078      	b.n	80051e8 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80050f6:	4b47      	ldr	r3, [pc, #284]	@ (8005214 <ESP_WakeTest+0x218>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fc64 	bl	80049c8 <DMA_ProcessBuffer>
 8005100:	0003      	movs	r3, r0
 8005102:	001a      	movs	r2, r3
 8005104:	4b44      	ldr	r3, [pc, #272]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005106:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005108:	4b43      	ldr	r3, [pc, #268]	@ (8005218 <ESP_WakeTest+0x21c>)
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	4b41      	ldr	r3, [pc, #260]	@ (8005214 <ESP_WakeTest+0x218>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	1dbc      	adds	r4, r7, #6
 8005112:	0019      	movs	r1, r3
 8005114:	0010      	movs	r0, r2
 8005116:	f7ff fd69 	bl	8004bec <ATCompare>
 800511a:	0003      	movs	r3, r0
 800511c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800511e:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8005126:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800512c:	4b3a      	ldr	r3, [pc, #232]	@ (8005218 <ESP_WakeTest+0x21c>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b07      	cmp	r3, #7
 8005132:	d104      	bne.n	800513e <ESP_WakeTest+0x142>
          StartProg();
 8005134:	f7fe ff4e 	bl	8003fd4 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005138:	4b2e      	ldr	r3, [pc, #184]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 800513a:	2205      	movs	r2, #5
 800513c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800513e:	4b36      	ldr	r3, [pc, #216]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d109      	bne.n	800515a <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8005146:	f008 fcd3 	bl	800daf0 <HAL_GetTick>
 800514a:	0003      	movs	r3, r0
 800514c:	3332      	adds	r3, #50	@ 0x32
 800514e:	001a      	movs	r2, r3
 8005150:	4b2d      	ldr	r3, [pc, #180]	@ (8005208 <ESP_WakeTest+0x20c>)
 8005152:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8005154:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d042      	beq.n	80051e8 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8005162:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005164:	2203      	movs	r2, #3
 8005166:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005168:	e03e      	b.n	80051e8 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800516a:	4b2c      	ldr	r3, [pc, #176]	@ (800521c <ESP_WakeTest+0x220>)
 800516c:	22fa      	movs	r2, #250	@ 0xfa
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8005172:	4b2a      	ldr	r3, [pc, #168]	@ (800521c <ESP_WakeTest+0x220>)
 8005174:	4a2a      	ldr	r2, [pc, #168]	@ (8005220 <ESP_WakeTest+0x224>)
 8005176:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005178:	4b28      	ldr	r3, [pc, #160]	@ (800521c <ESP_WakeTest+0x220>)
 800517a:	22fa      	movs	r2, #250	@ 0xfa
 800517c:	0112      	lsls	r2, r2, #4
 800517e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005180:	4b1c      	ldr	r3, [pc, #112]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005182:	2204      	movs	r2, #4
 8005184:	701a      	strb	r2, [r3, #0]

      break;
 8005186:	e030      	b.n	80051ea <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005188:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <ESP_WakeTest+0x228>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800518e:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <ESP_WakeTest+0x200>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005194:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <ESP_WakeTest+0x208>)
 8005196:	2200      	movs	r2, #0
 8005198:	2101      	movs	r1, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f009 ff23 	bl	800efe6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	4816      	ldr	r0, [pc, #88]	@ (8005200 <ESP_WakeTest+0x204>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	0019      	movs	r1, r3
 80051aa:	f009 ff1c 	bl	800efe6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80051ae:	4b15      	ldr	r3, [pc, #84]	@ (8005204 <ESP_WakeTest+0x208>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	2102      	movs	r1, #2
 80051b4:	0018      	movs	r0, r3
 80051b6:	f009 ff16 	bl	800efe6 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80051ba:	f003 f8d9 	bl	8008370 <SetESPMeasurementDone>
      break;
 80051be:	e014      	b.n	80051ea <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 80051c0:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
      break;
 80051c6:	e010      	b.n	80051ea <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <ESP_WakeTest+0x220>)
 80051ca:	22fa      	movs	r2, #250	@ 0xfa
 80051cc:	0112      	lsls	r2, r2, #4
 80051ce:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80051d0:	4b12      	ldr	r3, [pc, #72]	@ (800521c <ESP_WakeTest+0x220>)
 80051d2:	22fa      	movs	r2, #250	@ 0xfa
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80051d8:	4b10      	ldr	r3, [pc, #64]	@ (800521c <ESP_WakeTest+0x220>)
 80051da:	2200      	movs	r2, #0
 80051dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80051de:	e004      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	e002      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e4:	46c0      	nop			@ (mov r8, r8)
 80051e6:	e000      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b003      	add	sp, #12
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	200009a0 	.word	0x200009a0
 80051f8:	08023918 	.word	0x08023918
 80051fc:	20000548 	.word	0x20000548
 8005200:	50000800 	.word	0x50000800
 8005204:	50001c00 	.word	0x50001c00
 8005208:	20000990 	.word	0x20000990
 800520c:	20000448 	.word	0x20000448
 8005210:	2000099e 	.word	0x2000099e
 8005214:	2000099d 	.word	0x2000099d
 8005218:	20000029 	.word	0x20000029
 800521c:	40000400 	.word	0x40000400
 8005220:	00000bb8 	.word	0x00000bb8
 8005224:	20000000 	.word	0x20000000

08005228 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 8005234:	4bda      	ldr	r3, [pc, #872]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	4bda      	ldr	r3, [pc, #872]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d01f      	beq.n	8005280 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005240:	4bd7      	ldr	r3, [pc, #860]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	4bd7      	ldr	r3, [pc, #860]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005246:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005248:	4bd6      	ldr	r3, [pc, #856]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d103      	bne.n	8005258 <ESP_Upkeep+0x30>
 8005250:	4bd5      	ldr	r3, [pc, #852]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b0e      	cmp	r3, #14
 8005256:	d013      	beq.n	8005280 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005258:	4bd2      	ldr	r3, [pc, #840]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	001d      	movs	r5, r3
 800525e:	4bd2      	ldr	r3, [pc, #840]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	0018      	movs	r0, r3
 8005264:	4bd1      	ldr	r3, [pc, #836]	@ (80055ac <ESP_Upkeep+0x384>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	001c      	movs	r4, r3
 800526a:	4bd1      	ldr	r3, [pc, #836]	@ (80055b0 <ESP_Upkeep+0x388>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4ad1      	ldr	r2, [pc, #836]	@ (80055b4 <ESP_Upkeep+0x38c>)
 8005270:	49d1      	ldr	r1, [pc, #836]	@ (80055b8 <ESP_Upkeep+0x390>)
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	9401      	str	r4, [sp, #4]
 8005276:	9000      	str	r0, [sp, #0]
 8005278:	002b      	movs	r3, r5
 800527a:	2003      	movs	r0, #3
 800527c:	f008 f89a 	bl	800d3b4 <CreateLine>
    }
  }

  switch (EspState) {
 8005280:	4bc7      	ldr	r3, [pc, #796]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d901      	bls.n	800528c <ESP_Upkeep+0x64>
 8005288:	f000 fbc8 	bl	8005a1c <ESP_Upkeep+0x7f4>
 800528c:	009a      	lsls	r2, r3, #2
 800528e:	4bcb      	ldr	r3, [pc, #812]	@ (80055bc <ESP_Upkeep+0x394>)
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005296:	4bc2      	ldr	r3, [pc, #776]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
      break;
 800529c:	f000 fbd7 	bl	8005a4e <ESP_Upkeep+0x826>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 80052a0:	4bc7      	ldr	r3, [pc, #796]	@ (80055c0 <ESP_Upkeep+0x398>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	4053      	eors	r3, r2
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d036      	beq.n	800531c <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	48c4      	ldr	r0, [pc, #784]	@ (80055c4 <ESP_Upkeep+0x39c>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	0019      	movs	r1, r3
 80052b8:	f009 fe95 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052bc:	2001      	movs	r0, #1
 80052be:	f008 fc21 	bl	800db04 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	48bf      	ldr	r0, [pc, #764]	@ (80055c4 <ESP_Upkeep+0x39c>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	0019      	movs	r1, r3
 80052cc:	f009 fe8b 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052d0:	2001      	movs	r0, #1
 80052d2:	f008 fc17 	bl	800db04 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052d6:	4bbc      	ldr	r3, [pc, #752]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	2101      	movs	r1, #1
 80052dc:	0018      	movs	r0, r3
 80052de:	f009 fe82 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052e2:	2001      	movs	r0, #1
 80052e4:	f008 fc0e 	bl	800db04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052e8:	4bb7      	ldr	r3, [pc, #732]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	2102      	movs	r1, #2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f009 fe79 	bl	800efe6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052f4:	2001      	movs	r0, #1
 80052f6:	f008 fc05 	bl	800db04 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052fa:	4bb3      	ldr	r3, [pc, #716]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	2101      	movs	r1, #1
 8005300:	0018      	movs	r0, r3
 8005302:	f009 fe70 	bl	800efe6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005306:	f008 fbf3 	bl	800daf0 <HAL_GetTick>
 800530a:	0003      	movs	r3, r0
 800530c:	22af      	movs	r2, #175	@ 0xaf
 800530e:	0092      	lsls	r2, r2, #2
 8005310:	189a      	adds	r2, r3, r2
 8005312:	4bae      	ldr	r3, [pc, #696]	@ (80055cc <ESP_Upkeep+0x3a4>)
 8005314:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005316:	4baa      	ldr	r3, [pc, #680]	@ (80055c0 <ESP_Upkeep+0x398>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	005a      	lsls	r2, r3, #1
 8005320:	4bab      	ldr	r3, [pc, #684]	@ (80055d0 <ESP_Upkeep+0x3a8>)
 8005322:	0011      	movs	r1, r2
 8005324:	0018      	movs	r0, r3
 8005326:	f7fe fbb3 	bl	8003a90 <ESP_Receive>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d100      	bne.n	8005330 <ESP_Upkeep+0x108>
 800532e:	e381      	b.n	8005a34 <ESP_Upkeep+0x80c>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005330:	4b9b      	ldr	r3, [pc, #620]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005332:	220f      	movs	r2, #15
 8005334:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005336:	f008 fbdb 	bl	800daf0 <HAL_GetTick>
 800533a:	0003      	movs	r3, r0
 800533c:	22fa      	movs	r2, #250	@ 0xfa
 800533e:	00d2      	lsls	r2, r2, #3
 8005340:	189a      	adds	r2, r3, r2
 8005342:	4ba4      	ldr	r3, [pc, #656]	@ (80055d4 <ESP_Upkeep+0x3ac>)
 8005344:	601a      	str	r2, [r3, #0]
      }
      break;
 8005346:	e375      	b.n	8005a34 <ESP_Upkeep+0x80c>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8005348:	2001      	movs	r0, #1
 800534a:	f7ff fb3d 	bl	80049c8 <DMA_ProcessBuffer>
 800534e:	0003      	movs	r3, r0
 8005350:	001a      	movs	r2, r3
 8005352:	4ba1      	ldr	r3, [pc, #644]	@ (80055d8 <ESP_Upkeep+0x3b0>)
 8005354:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005356:	4ba0      	ldr	r3, [pc, #640]	@ (80055d8 <ESP_Upkeep+0x3b0>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	1dbc      	adds	r4, r7, #6
 800535c:	2101      	movs	r1, #1
 800535e:	0018      	movs	r0, r3
 8005360:	f7ff fc44 	bl	8004bec <ATCompare>
 8005364:	0003      	movs	r3, r0
 8005366:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005368:	1dbb      	adds	r3, r7, #6
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <ESP_Upkeep+0x158>
 8005370:	4b98      	ldr	r3, [pc, #608]	@ (80055d4 <ESP_Upkeep+0x3ac>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	0018      	movs	r0, r3
 8005376:	f007 ffc7 	bl	800d308 <TimestampIsReached>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d100      	bne.n	8005380 <ESP_Upkeep+0x158>
 800537e:	e35b      	b.n	8005a38 <ESP_Upkeep+0x810>
          EspState = ESP_STATE_MODE_SELECT;
 8005380:	4b87      	ldr	r3, [pc, #540]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005382:	220b      	movs	r2, #11
 8005384:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005386:	e357      	b.n	8005a38 <ESP_Upkeep+0x810>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005388:	4b94      	ldr	r3, [pc, #592]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800538a:	2209      	movs	r2, #9
 800538c:	2114      	movs	r1, #20
 800538e:	0018      	movs	r0, r3
 8005390:	f019 fd96 	bl	801eec0 <memset>
      if(!InitIsDone || WifiReset){
 8005394:	4b92      	ldr	r3, [pc, #584]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	4053      	eors	r3, r2
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <ESP_Upkeep+0x182>
 80053a2:	4b90      	ldr	r3, [pc, #576]	@ (80055e4 <ESP_Upkeep+0x3bc>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01a      	beq.n	80053e0 <ESP_Upkeep+0x1b8>
        memcpy(ATCommandArray, AT_INIT, 7);
 80053aa:	4b8c      	ldr	r3, [pc, #560]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80053ac:	4a8e      	ldr	r2, [pc, #568]	@ (80055e8 <ESP_Upkeep+0x3c0>)
 80053ae:	6811      	ldr	r1, [r2, #0]
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	8891      	ldrh	r1, [r2, #4]
 80053b4:	8099      	strh	r1, [r3, #4]
 80053b6:	7992      	ldrb	r2, [r2, #6]
 80053b8:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80053ba:	4b79      	ldr	r3, [pc, #484]	@ (80055a0 <ESP_Upkeep+0x378>)
 80053bc:	2204      	movs	r2, #4
 80053be:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053c0:	4b8a      	ldr	r3, [pc, #552]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80053c6:	4b79      	ldr	r3, [pc, #484]	@ (80055ac <ESP_Upkeep+0x384>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80053cc:	4b87      	ldr	r3, [pc, #540]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	001a      	movs	r2, r3
 80053d2:	4b82      	ldr	r3, [pc, #520]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80053d4:	5c9a      	ldrb	r2, [r3, r2]
 80053d6:	4b74      	ldr	r3, [pc, #464]	@ (80055a8 <ESP_Upkeep+0x380>)
 80053d8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053da:	4b75      	ldr	r3, [pc, #468]	@ (80055b0 <ESP_Upkeep+0x388>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80053e0:	4b7f      	ldr	r3, [pc, #508]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01f      	beq.n	8005428 <ESP_Upkeep+0x200>
 80053e8:	4b81      	ldr	r3, [pc, #516]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2201      	movs	r2, #1
 80053ee:	4053      	eors	r3, r2
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d018      	beq.n	8005428 <ESP_Upkeep+0x200>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80053f6:	4b79      	ldr	r3, [pc, #484]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80053f8:	4a7e      	ldr	r2, [pc, #504]	@ (80055f4 <ESP_Upkeep+0x3cc>)
 80053fa:	6811      	ldr	r1, [r2, #0]
 80053fc:	6019      	str	r1, [r3, #0]
 80053fe:	8892      	ldrh	r2, [r2, #4]
 8005400:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005402:	4b67      	ldr	r3, [pc, #412]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005404:	2204      	movs	r2, #4
 8005406:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005408:	4b78      	ldr	r3, [pc, #480]	@ (80055ec <ESP_Upkeep+0x3c4>)
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800540e:	4b67      	ldr	r3, [pc, #412]	@ (80055ac <ESP_Upkeep+0x384>)
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005414:	4b75      	ldr	r3, [pc, #468]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	001a      	movs	r2, r3
 800541a:	4b70      	ldr	r3, [pc, #448]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800541c:	5c9a      	ldrb	r2, [r3, r2]
 800541e:	4b62      	ldr	r3, [pc, #392]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005420:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005422:	4b63      	ldr	r3, [pc, #396]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005428:	4b6d      	ldr	r3, [pc, #436]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d021      	beq.n	8005474 <ESP_Upkeep+0x24c>
 8005430:	4b6f      	ldr	r3, [pc, #444]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01d      	beq.n	8005474 <ESP_Upkeep+0x24c>
 8005438:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <ESP_Upkeep+0x3d0>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4053      	eors	r3, r2
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005446:	4b6d      	ldr	r3, [pc, #436]	@ (80055fc <ESP_Upkeep+0x3d4>)
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	4b64      	ldr	r3, [pc, #400]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800544c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800544e:	4b54      	ldr	r3, [pc, #336]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005450:	2204      	movs	r2, #4
 8005452:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005454:	4b65      	ldr	r3, [pc, #404]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800545a:	4b54      	ldr	r3, [pc, #336]	@ (80055ac <ESP_Upkeep+0x384>)
 800545c:	2204      	movs	r2, #4
 800545e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005460:	4b62      	ldr	r3, [pc, #392]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	001a      	movs	r2, r3
 8005466:	4b5d      	ldr	r3, [pc, #372]	@ (80055dc <ESP_Upkeep+0x3b4>)
 8005468:	5c9a      	ldrb	r2, [r3, r2]
 800546a:	4b4f      	ldr	r3, [pc, #316]	@ (80055a8 <ESP_Upkeep+0x380>)
 800546c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800546e:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005474:	4b5a      	ldr	r3, [pc, #360]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02e      	beq.n	80054da <ESP_Upkeep+0x2b2>
 800547c:	4b5c      	ldr	r3, [pc, #368]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02a      	beq.n	80054da <ESP_Upkeep+0x2b2>
 8005484:	4b5c      	ldr	r3, [pc, #368]	@ (80055f8 <ESP_Upkeep+0x3d0>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d026      	beq.n	80054da <ESP_Upkeep+0x2b2>
 800548c:	4b5c      	ldr	r3, [pc, #368]	@ (8005600 <ESP_Upkeep+0x3d8>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2201      	movs	r2, #1
 8005492:	4053      	eors	r3, r2
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01f      	beq.n	80054da <ESP_Upkeep+0x2b2>
        memcpy(ATCommandArray, AT_SEND, 3);
 800549a:	4b50      	ldr	r3, [pc, #320]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800549c:	4a59      	ldr	r2, [pc, #356]	@ (8005604 <ESP_Upkeep+0x3dc>)
 800549e:	8811      	ldrh	r1, [r2, #0]
 80054a0:	8019      	strh	r1, [r3, #0]
 80054a2:	7892      	ldrb	r2, [r2, #2]
 80054a4:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80054a6:	4b3e      	ldr	r3, [pc, #248]	@ (80055a0 <ESP_Upkeep+0x378>)
 80054a8:	2204      	movs	r2, #4
 80054aa:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054ac:	4b4f      	ldr	r3, [pc, #316]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80054b2:	4b3e      	ldr	r3, [pc, #248]	@ (80055ac <ESP_Upkeep+0x384>)
 80054b4:	2202      	movs	r2, #2
 80054b6:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80054b8:	f008 fb1a 	bl	800daf0 <HAL_GetTick>
 80054bc:	0002      	movs	r2, r0
 80054be:	4b52      	ldr	r3, [pc, #328]	@ (8005608 <ESP_Upkeep+0x3e0>)
 80054c0:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80054c2:	f007 f8db 	bl	800c67c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80054c6:	4b49      	ldr	r3, [pc, #292]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	001a      	movs	r2, r3
 80054cc:	4b43      	ldr	r3, [pc, #268]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80054ce:	5c9a      	ldrb	r2, [r3, r2]
 80054d0:	4b35      	ldr	r3, [pc, #212]	@ (80055a8 <ESP_Upkeep+0x380>)
 80054d2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054d4:	4b36      	ldr	r3, [pc, #216]	@ (80055b0 <ESP_Upkeep+0x388>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80054da:	4b4c      	ldr	r3, [pc, #304]	@ (800560c <ESP_Upkeep+0x3e4>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01a      	beq.n	8005518 <ESP_Upkeep+0x2f0>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80054e2:	4b3e      	ldr	r3, [pc, #248]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80054e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005610 <ESP_Upkeep+0x3e8>)
 80054e6:	6811      	ldr	r1, [r2, #0]
 80054e8:	6019      	str	r1, [r3, #0]
 80054ea:	7912      	ldrb	r2, [r2, #4]
 80054ec:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054ee:	4b2c      	ldr	r3, [pc, #176]	@ (80055a0 <ESP_Upkeep+0x378>)
 80054f0:	2204      	movs	r2, #4
 80054f2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054f4:	4b3d      	ldr	r3, [pc, #244]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80054fa:	4b2c      	ldr	r3, [pc, #176]	@ (80055ac <ESP_Upkeep+0x384>)
 80054fc:	2203      	movs	r2, #3
 80054fe:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005500:	f007 f8bc 	bl	800c67c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005504:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	001a      	movs	r2, r3
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800550c:	5c9a      	ldrb	r2, [r3, r2]
 800550e:	4b26      	ldr	r3, [pc, #152]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005510:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005512:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005518:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d100      	bne.n	8005522 <ESP_Upkeep+0x2fa>
 8005520:	e28c      	b.n	8005a3c <ESP_Upkeep+0x814>
 8005522:	4b33      	ldr	r3, [pc, #204]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d100      	bne.n	800552c <ESP_Upkeep+0x304>
 800552a:	e287      	b.n	8005a3c <ESP_Upkeep+0x814>
 800552c:	4b32      	ldr	r3, [pc, #200]	@ (80055f8 <ESP_Upkeep+0x3d0>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d100      	bne.n	8005536 <ESP_Upkeep+0x30e>
 8005534:	e282      	b.n	8005a3c <ESP_Upkeep+0x814>
 8005536:	4b32      	ldr	r3, [pc, #200]	@ (8005600 <ESP_Upkeep+0x3d8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d100      	bne.n	8005540 <ESP_Upkeep+0x318>
 800553e:	e27d      	b.n	8005a3c <ESP_Upkeep+0x814>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005540:	4b34      	ldr	r3, [pc, #208]	@ (8005614 <ESP_Upkeep+0x3ec>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b25      	ldr	r3, [pc, #148]	@ (80055dc <ESP_Upkeep+0x3b4>)
 8005546:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005548:	4b15      	ldr	r3, [pc, #84]	@ (80055a0 <ESP_Upkeep+0x378>)
 800554a:	2204      	movs	r2, #4
 800554c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800554e:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005554:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <ESP_Upkeep+0x384>)
 8005556:	2205      	movs	r2, #5
 8005558:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800555a:	f008 fac9 	bl	800daf0 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	4b29      	ldr	r3, [pc, #164]	@ (8005608 <ESP_Upkeep+0x3e0>)
 8005562:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005564:	f007 f88a 	bl	800c67c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005568:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <ESP_Upkeep+0x3c4>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	001a      	movs	r2, r3
 800556e:	4b1b      	ldr	r3, [pc, #108]	@ (80055dc <ESP_Upkeep+0x3b4>)
 8005570:	5c9a      	ldrb	r2, [r3, r2]
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005574:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005576:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
      }
    break;
 800557c:	e25e      	b.n	8005a3c <ESP_Upkeep+0x814>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	1dfc      	adds	r4, r7, #7
 8005584:	0018      	movs	r0, r3
 8005586:	f7ff fb73 	bl	8004c70 <AT_Send>
 800558a:	0003      	movs	r3, r0
 800558c:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800558e:	1dfb      	adds	r3, r7, #7
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d100      	bne.n	8005598 <ESP_Upkeep+0x370>
 8005596:	e253      	b.n	8005a40 <ESP_Upkeep+0x818>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005598:	4b01      	ldr	r3, [pc, #4]	@ (80055a0 <ESP_Upkeep+0x378>)
 800559a:	2203      	movs	r2, #3
 800559c:	701a      	strb	r2, [r3, #0]
        }
    break;
 800559e:	e24f      	b.n	8005a40 <ESP_Upkeep+0x818>
 80055a0:	20000028 	.word	0x20000028
 80055a4:	20000002 	.word	0x20000002
 80055a8:	2000099e 	.word	0x2000099e
 80055ac:	2000099f 	.word	0x2000099f
 80055b0:	2000099d 	.word	0x2000099d
 80055b4:	080225f0 	.word	0x080225f0
 80055b8:	08021e28 	.word	0x08021e28
 80055bc:	08023930 	.word	0x08023930
 80055c0:	20000548 	.word	0x20000548
 80055c4:	50000800 	.word	0x50000800
 80055c8:	50001c00 	.word	0x50001c00
 80055cc:	20000990 	.word	0x20000990
 80055d0:	20000448 	.word	0x20000448
 80055d4:	20000aa4 	.word	0x20000aa4
 80055d8:	2000002a 	.word	0x2000002a
 80055dc:	20000984 	.word	0x20000984
 80055e0:	20000549 	.word	0x20000549
 80055e4:	2000054a 	.word	0x2000054a
 80055e8:	20000004 	.word	0x20000004
 80055ec:	2000098e 	.word	0x2000098e
 80055f0:	2000054c 	.word	0x2000054c
 80055f4:	20000014 	.word	0x20000014
 80055f8:	2000054d 	.word	0x2000054d
 80055fc:	20000010 	.word	0x20000010
 8005600:	20000001 	.word	0x20000001
 8005604:	2000000c 	.word	0x2000000c
 8005608:	2000055c 	.word	0x2000055c
 800560c:	2000054b 	.word	0x2000054b
 8005610:	2000001c 	.word	0x2000001c
 8005614:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005618:	4bdb      	ldr	r3, [pc, #876]	@ (8005988 <ESP_Upkeep+0x760>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	0018      	movs	r0, r3
 800561e:	f007 fe73 	bl	800d308 <TimestampIsReached>
 8005622:	1e03      	subs	r3, r0, #0
 8005624:	d100      	bne.n	8005628 <ESP_Upkeep+0x400>
 8005626:	e20d      	b.n	8005a44 <ESP_Upkeep+0x81c>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005628:	4bd8      	ldr	r3, [pc, #864]	@ (800598c <ESP_Upkeep+0x764>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	0018      	movs	r0, r3
 800562e:	f7ff f9cb 	bl	80049c8 <DMA_ProcessBuffer>
 8005632:	0003      	movs	r3, r0
 8005634:	001a      	movs	r2, r3
 8005636:	4bd6      	ldr	r3, [pc, #856]	@ (8005990 <ESP_Upkeep+0x768>)
 8005638:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800563a:	4bd5      	ldr	r3, [pc, #852]	@ (8005990 <ESP_Upkeep+0x768>)
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	4bd3      	ldr	r3, [pc, #844]	@ (800598c <ESP_Upkeep+0x764>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	1d7c      	adds	r4, r7, #5
 8005644:	0019      	movs	r1, r3
 8005646:	0010      	movs	r0, r2
 8005648:	f7ff fad0 	bl	8004bec <ATCompare>
 800564c:	0003      	movs	r3, r0
 800564e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005650:	4bcf      	ldr	r3, [pc, #828]	@ (8005990 <ESP_Upkeep+0x768>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d139      	bne.n	80056cc <ESP_Upkeep+0x4a4>
          if(ATCommand == AT_SENDDATA){
 8005658:	4bce      	ldr	r3, [pc, #824]	@ (8005994 <ESP_Upkeep+0x76c>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d108      	bne.n	8005672 <ESP_Upkeep+0x44a>
            ATCommand = AT_HTTPCPOST;
 8005660:	4bcc      	ldr	r3, [pc, #816]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005662:	220e      	movs	r2, #14
 8005664:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005666:	4bc9      	ldr	r3, [pc, #804]	@ (800598c <ESP_Upkeep+0x764>)
 8005668:	2202      	movs	r2, #2
 800566a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800566c:	4bca      	ldr	r3, [pc, #808]	@ (8005998 <ESP_Upkeep+0x770>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005672:	4bca      	ldr	r3, [pc, #808]	@ (800599c <ESP_Upkeep+0x774>)
 8005674:	2204      	movs	r2, #4
 8005676:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005678:	4bc9      	ldr	r3, [pc, #804]	@ (80059a0 <ESP_Upkeep+0x778>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4bc7      	ldr	r3, [pc, #796]	@ (80059a0 <ESP_Upkeep+0x778>)
 8005682:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005684:	4bc6      	ldr	r3, [pc, #792]	@ (80059a0 <ESP_Upkeep+0x778>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d11f      	bne.n	80056cc <ESP_Upkeep+0x4a4>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800568c:	f008 fa30 	bl	800daf0 <HAL_GetTick>
 8005690:	0003      	movs	r3, r0
 8005692:	4ac4      	ldr	r2, [pc, #784]	@ (80059a4 <ESP_Upkeep+0x77c>)
 8005694:	189a      	adds	r2, r3, r2
 8005696:	4bbc      	ldr	r3, [pc, #752]	@ (8005988 <ESP_Upkeep+0x760>)
 8005698:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800569a:	4bc3      	ldr	r3, [pc, #780]	@ (80059a8 <ESP_Upkeep+0x780>)
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80056a0:	f007 f804 	bl	800c6ac <ResetESPIndicator>
            clearDMABuffer();
 80056a4:	f7ff fa94 	bl	8004bd0 <clearDMABuffer>
            stop = HAL_GetTick();
 80056a8:	f008 fa22 	bl	800daf0 <HAL_GetTick>
 80056ac:	0002      	movs	r2, r0
 80056ae:	4bbf      	ldr	r3, [pc, #764]	@ (80059ac <ESP_Upkeep+0x784>)
 80056b0:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80056b2:	4bbe      	ldr	r3, [pc, #760]	@ (80059ac <ESP_Upkeep+0x784>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4bbe      	ldr	r3, [pc, #760]	@ (80059b0 <ESP_Upkeep+0x788>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	4abd      	ldr	r2, [pc, #756]	@ (80059b4 <ESP_Upkeep+0x78c>)
 80056be:	49be      	ldr	r1, [pc, #760]	@ (80059b8 <ESP_Upkeep+0x790>)
 80056c0:	2003      	movs	r0, #3
 80056c2:	f007 fe77 	bl	800d3b4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80056c6:	4bb5      	ldr	r3, [pc, #724]	@ (800599c <ESP_Upkeep+0x774>)
 80056c8:	220d      	movs	r2, #13
 80056ca:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80056cc:	4bb0      	ldr	r3, [pc, #704]	@ (8005990 <ESP_Upkeep+0x768>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d106      	bne.n	80056e2 <ESP_Upkeep+0x4ba>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056d4:	f008 fa0c 	bl	800daf0 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	330a      	adds	r3, #10
 80056dc:	001a      	movs	r2, r3
 80056de:	4baa      	ldr	r3, [pc, #680]	@ (8005988 <ESP_Upkeep+0x760>)
 80056e0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80056e2:	4bab      	ldr	r3, [pc, #684]	@ (8005990 <ESP_Upkeep+0x768>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b0a      	cmp	r3, #10
 80056e8:	d106      	bne.n	80056f8 <ESP_Upkeep+0x4d0>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056ea:	f008 fa01 	bl	800daf0 <HAL_GetTick>
 80056ee:	0003      	movs	r3, r0
 80056f0:	330a      	adds	r3, #10
 80056f2:	001a      	movs	r2, r3
 80056f4:	4ba4      	ldr	r3, [pc, #656]	@ (8005988 <ESP_Upkeep+0x760>)
 80056f6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80056f8:	4ba5      	ldr	r3, [pc, #660]	@ (8005990 <ESP_Upkeep+0x768>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d116      	bne.n	800572e <ESP_Upkeep+0x506>
          if(ATCommand != AT_SENDDATA){
 8005700:	4ba4      	ldr	r3, [pc, #656]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b0f      	cmp	r3, #15
 8005706:	d003      	beq.n	8005710 <ESP_Upkeep+0x4e8>
            EspState = ESP_STATE_SEND;
 8005708:	4ba4      	ldr	r3, [pc, #656]	@ (800599c <ESP_Upkeep+0x774>)
 800570a:	2204      	movs	r2, #4
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e00e      	b.n	800572e <ESP_Upkeep+0x506>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005710:	4ba0      	ldr	r3, [pc, #640]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005712:	220e      	movs	r2, #14
 8005714:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005716:	4ba0      	ldr	r3, [pc, #640]	@ (8005998 <ESP_Upkeep+0x770>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b9e      	ldr	r3, [pc, #632]	@ (8005998 <ESP_Upkeep+0x770>)
 8005720:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005722:	4b9a      	ldr	r3, [pc, #616]	@ (800598c <ESP_Upkeep+0x764>)
 8005724:	2202      	movs	r2, #2
 8005726:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005728:	4b9c      	ldr	r3, [pc, #624]	@ (800599c <ESP_Upkeep+0x774>)
 800572a:	2204      	movs	r2, #4
 800572c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800572e:	1d7b      	adds	r3, r7, #5
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d100      	bne.n	8005738 <ESP_Upkeep+0x510>
 8005736:	e185      	b.n	8005a44 <ESP_Upkeep+0x81c>
          EspState = ESP_STATE_NEXT_AT;
 8005738:	4b98      	ldr	r3, [pc, #608]	@ (800599c <ESP_Upkeep+0x774>)
 800573a:	2205      	movs	r2, #5
 800573c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800573e:	e181      	b.n	8005a44 <ESP_Upkeep+0x81c>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005740:	4b95      	ldr	r3, [pc, #596]	@ (8005998 <ESP_Upkeep+0x770>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4b93      	ldr	r3, [pc, #588]	@ (8005998 <ESP_Upkeep+0x770>)
 800574a:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 800574c:	4b92      	ldr	r3, [pc, #584]	@ (8005998 <ESP_Upkeep+0x770>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	001a      	movs	r2, r3
 8005752:	4b9a      	ldr	r3, [pc, #616]	@ (80059bc <ESP_Upkeep+0x794>)
 8005754:	5c9a      	ldrb	r2, [r3, r2]
 8005756:	4b8f      	ldr	r3, [pc, #572]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005758:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 800575a:	4b8e      	ldr	r3, [pc, #568]	@ (8005994 <ESP_Upkeep+0x76c>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d102      	bne.n	8005768 <ESP_Upkeep+0x540>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005762:	4b8a      	ldr	r3, [pc, #552]	@ (800598c <ESP_Upkeep+0x764>)
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005768:	4b8a      	ldr	r3, [pc, #552]	@ (8005994 <ESP_Upkeep+0x76c>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b0e      	cmp	r3, #14
 800576e:	d102      	bne.n	8005776 <ESP_Upkeep+0x54e>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005770:	4b86      	ldr	r3, [pc, #536]	@ (800598c <ESP_Upkeep+0x764>)
 8005772:	2202      	movs	r2, #2
 8005774:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005776:	4b87      	ldr	r3, [pc, #540]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b0e      	cmp	r3, #14
 800577c:	d006      	beq.n	800578c <ESP_Upkeep+0x564>
 800577e:	4b85      	ldr	r3, [pc, #532]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b03      	cmp	r3, #3
 8005784:	d002      	beq.n	800578c <ESP_Upkeep+0x564>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005786:	4b81      	ldr	r3, [pc, #516]	@ (800598c <ESP_Upkeep+0x764>)
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 800578c:	4b81      	ldr	r3, [pc, #516]	@ (8005994 <ESP_Upkeep+0x76c>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b11      	cmp	r3, #17
 8005792:	d102      	bne.n	800579a <ESP_Upkeep+0x572>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005794:	4b7d      	ldr	r3, [pc, #500]	@ (800598c <ESP_Upkeep+0x764>)
 8005796:	2205      	movs	r2, #5
 8005798:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 800579a:	4b80      	ldr	r3, [pc, #512]	@ (800599c <ESP_Upkeep+0x774>)
 800579c:	2204      	movs	r2, #4
 800579e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80057a0:	4b7c      	ldr	r3, [pc, #496]	@ (8005994 <ESP_Upkeep+0x76c>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b14      	cmp	r3, #20
 80057a6:	d000      	beq.n	80057aa <ESP_Upkeep+0x582>
 80057a8:	e14e      	b.n	8005a48 <ESP_Upkeep+0x820>
        if(Mode == AT_MODE_SEND){
 80057aa:	4b85      	ldr	r3, [pc, #532]	@ (80059c0 <ESP_Upkeep+0x798>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d122      	bne.n	80057f8 <ESP_Upkeep+0x5d0>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80057b2:	f008 f99d 	bl	800daf0 <HAL_GetTick>
 80057b6:	0003      	movs	r3, r0
 80057b8:	4a7a      	ldr	r2, [pc, #488]	@ (80059a4 <ESP_Upkeep+0x77c>)
 80057ba:	189a      	adds	r2, r3, r2
 80057bc:	4b72      	ldr	r3, [pc, #456]	@ (8005988 <ESP_Upkeep+0x760>)
 80057be:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 80057c0:	f006 ff74 	bl	800c6ac <ResetESPIndicator>
          clearDMABuffer();
 80057c4:	f7ff fa04 	bl	8004bd0 <clearDMABuffer>
          stop = HAL_GetTick();
 80057c8:	f008 f992 	bl	800daf0 <HAL_GetTick>
 80057cc:	0002      	movs	r2, r0
 80057ce:	4b77      	ldr	r3, [pc, #476]	@ (80059ac <ESP_Upkeep+0x784>)
 80057d0:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 80057d2:	4b76      	ldr	r3, [pc, #472]	@ (80059ac <ESP_Upkeep+0x784>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b76      	ldr	r3, [pc, #472]	@ (80059b0 <ESP_Upkeep+0x788>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	4a79      	ldr	r2, [pc, #484]	@ (80059c4 <ESP_Upkeep+0x79c>)
 80057de:	4976      	ldr	r1, [pc, #472]	@ (80059b8 <ESP_Upkeep+0x790>)
 80057e0:	2003      	movs	r0, #3
 80057e2:	f007 fde7 	bl	800d3b4 <CreateLine>
          showTime();
 80057e6:	f000 fcbb 	bl	8006160 <showTime>
          ESPTransmitDone = true;
 80057ea:	4b6f      	ldr	r3, [pc, #444]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 80057f0:	4b6a      	ldr	r3, [pc, #424]	@ (800599c <ESP_Upkeep+0x774>)
 80057f2:	220d      	movs	r2, #13
 80057f4:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80057f6:	e127      	b.n	8005a48 <ESP_Upkeep+0x820>
        else if (Mode == AT_MODE_GETTIME) {
 80057f8:	4b71      	ldr	r3, [pc, #452]	@ (80059c0 <ESP_Upkeep+0x798>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b05      	cmp	r3, #5
 80057fe:	d12e      	bne.n	800585e <ESP_Upkeep+0x636>
            setTime = false;
 8005800:	4b71      	ldr	r3, [pc, #452]	@ (80059c8 <ESP_Upkeep+0x7a0>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 8005806:	f008 f973 	bl	800daf0 <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	4a6f      	ldr	r2, [pc, #444]	@ (80059cc <ESP_Upkeep+0x7a4>)
 800580e:	189a      	adds	r2, r3, r2
 8005810:	4b6f      	ldr	r3, [pc, #444]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005812:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005814:	4b6e      	ldr	r3, [pc, #440]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a6e      	ldr	r2, [pc, #440]	@ (80059d4 <ESP_Upkeep+0x7ac>)
 800581a:	4967      	ldr	r1, [pc, #412]	@ (80059b8 <ESP_Upkeep+0x790>)
 800581c:	2003      	movs	r0, #3
 800581e:	f007 fdc9 	bl	800d3b4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005822:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <ESP_Upkeep+0x7b0>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b58      	ldr	r3, [pc, #352]	@ (8005988 <ESP_Upkeep+0x760>)
 8005828:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 800582a:	f006 ff3f 	bl	800c6ac <ResetESPIndicator>
            clearDMABuffer();
 800582e:	f7ff f9cf 	bl	8004bd0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005832:	f008 f95d 	bl	800daf0 <HAL_GetTick>
 8005836:	0002      	movs	r2, r0
 8005838:	4b5c      	ldr	r3, [pc, #368]	@ (80059ac <ESP_Upkeep+0x784>)
 800583a:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 800583c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ac <ESP_Upkeep+0x784>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b5b      	ldr	r3, [pc, #364]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	4a65      	ldr	r2, [pc, #404]	@ (80059dc <ESP_Upkeep+0x7b4>)
 8005848:	495b      	ldr	r1, [pc, #364]	@ (80059b8 <ESP_Upkeep+0x790>)
 800584a:	2003      	movs	r0, #3
 800584c:	f007 fdb2 	bl	800d3b4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005850:	4b52      	ldr	r3, [pc, #328]	@ (800599c <ESP_Upkeep+0x774>)
 8005852:	220d      	movs	r2, #13
 8005854:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005856:	4b5a      	ldr	r3, [pc, #360]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005858:	2202      	movs	r2, #2
 800585a:	701a      	strb	r2, [r3, #0]
    break;
 800585c:	e0f4      	b.n	8005a48 <ESP_Upkeep+0x820>
          EspState = ESP_STATE_RESET;
 800585e:	4b4f      	ldr	r3, [pc, #316]	@ (800599c <ESP_Upkeep+0x774>)
 8005860:	2209      	movs	r2, #9
 8005862:	701a      	strb	r2, [r3, #0]
    break;
 8005864:	e0f0      	b.n	8005a48 <ESP_Upkeep+0x820>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005866:	4b5e      	ldr	r3, [pc, #376]	@ (80059e0 <ESP_Upkeep+0x7b8>)
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800586c:	4b5d      	ldr	r3, [pc, #372]	@ (80059e4 <ESP_Upkeep+0x7bc>)
 800586e:	2200      	movs	r2, #0
 8005870:	2101      	movs	r1, #1
 8005872:	0018      	movs	r0, r3
 8005874:	f009 fbb7 	bl	800efe6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005878:	2001      	movs	r0, #1
 800587a:	f008 f943 	bl	800db04 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	4859      	ldr	r0, [pc, #356]	@ (80059e8 <ESP_Upkeep+0x7c0>)
 8005884:	2200      	movs	r2, #0
 8005886:	0019      	movs	r1, r3
 8005888:	f009 fbad 	bl	800efe6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800588c:	2001      	movs	r0, #1
 800588e:	f008 f939 	bl	800db04 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005892:	4b54      	ldr	r3, [pc, #336]	@ (80059e4 <ESP_Upkeep+0x7bc>)
 8005894:	2200      	movs	r2, #0
 8005896:	2102      	movs	r1, #2
 8005898:	0018      	movs	r0, r3
 800589a:	f009 fba4 	bl	800efe6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 800589e:	4b3f      	ldr	r3, [pc, #252]	@ (800599c <ESP_Upkeep+0x774>)
 80058a0:	2209      	movs	r2, #9
 80058a2:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f008 f92d 	bl	800db04 <HAL_Delay>
      errorcntr = 0;
 80058aa:	4b3d      	ldr	r3, [pc, #244]	@ (80059a0 <ESP_Upkeep+0x778>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
      break;
 80058b0:	e0cd      	b.n	8005a4e <ESP_Upkeep+0x826>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80058b2:	4b35      	ldr	r3, [pc, #212]	@ (8005988 <ESP_Upkeep+0x760>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f007 fd26 	bl	800d308 <TimestampIsReached>
 80058bc:	1e03      	subs	r3, r0, #0
 80058be:	d103      	bne.n	80058c8 <ESP_Upkeep+0x6a0>
 80058c0:	4b4a      	ldr	r3, [pc, #296]	@ (80059ec <ESP_Upkeep+0x7c4>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d035      	beq.n	8005934 <ESP_Upkeep+0x70c>
        if(Mode == AT_MODE_INIT){
 80058c8:	4b3d      	ldr	r3, [pc, #244]	@ (80059c0 <ESP_Upkeep+0x798>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <ESP_Upkeep+0x6b4>
          InitIsDone = true;
 80058d0:	4b47      	ldr	r3, [pc, #284]	@ (80059f0 <ESP_Upkeep+0x7c8>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80058d6:	4b31      	ldr	r3, [pc, #196]	@ (800599c <ESP_Upkeep+0x774>)
 80058d8:	220b      	movs	r2, #11
 80058da:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80058dc:	4b38      	ldr	r3, [pc, #224]	@ (80059c0 <ESP_Upkeep+0x798>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d108      	bne.n	80058f6 <ESP_Upkeep+0x6ce>
          ConnectionMade = true;
 80058e4:	4b43      	ldr	r3, [pc, #268]	@ (80059f4 <ESP_Upkeep+0x7cc>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80058ea:	4b43      	ldr	r3, [pc, #268]	@ (80059f8 <ESP_Upkeep+0x7d0>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80058f0:	4b2a      	ldr	r3, [pc, #168]	@ (800599c <ESP_Upkeep+0x774>)
 80058f2:	220b      	movs	r2, #11
 80058f4:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80058f6:	4b32      	ldr	r3, [pc, #200]	@ (80059c0 <ESP_Upkeep+0x798>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d102      	bne.n	8005904 <ESP_Upkeep+0x6dc>
          EspState = ESP_STATE_INIT;
 80058fe:	4b27      	ldr	r3, [pc, #156]	@ (800599c <ESP_Upkeep+0x774>)
 8005900:	2202      	movs	r2, #2
 8005902:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005904:	4b2e      	ldr	r3, [pc, #184]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d108      	bne.n	800591e <ESP_Upkeep+0x6f6>
          EspState = ESP_STATE_CONFIG;
 800590c:	4b23      	ldr	r3, [pc, #140]	@ (800599c <ESP_Upkeep+0x774>)
 800590e:	220e      	movs	r2, #14
 8005910:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005912:	4a3a      	ldr	r2, [pc, #232]	@ (80059fc <ESP_Upkeep+0x7d4>)
 8005914:	4b28      	ldr	r3, [pc, #160]	@ (80059b8 <ESP_Upkeep+0x790>)
 8005916:	0019      	movs	r1, r3
 8005918:	2003      	movs	r0, #3
 800591a:	f007 fd4b 	bl	800d3b4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800591e:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b04      	cmp	r3, #4
 8005924:	d127      	bne.n	8005976 <ESP_Upkeep+0x74e>
          EspState = ESP_STATE_MODE_SELECT;
 8005926:	4b1d      	ldr	r3, [pc, #116]	@ (800599c <ESP_Upkeep+0x774>)
 8005928:	220b      	movs	r2, #11
 800592a:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 800592c:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <ESP_Upkeep+0x7d8>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005932:	e020      	b.n	8005976 <ESP_Upkeep+0x74e>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005934:	4b26      	ldr	r3, [pc, #152]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	0018      	movs	r0, r3
 800593a:	f007 fce5 	bl	800d308 <TimestampIsReached>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d100      	bne.n	8005944 <ESP_Upkeep+0x71c>
 8005942:	e083      	b.n	8005a4c <ESP_Upkeep+0x824>
        if(Mode == AT_MODE_SEND ) {
 8005944:	4b1e      	ldr	r3, [pc, #120]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d000      	beq.n	800594e <ESP_Upkeep+0x726>
 800594c:	e07e      	b.n	8005a4c <ESP_Upkeep+0x824>
            Mode = AT_MODE_GETTIME;
 800594e:	4b1c      	ldr	r3, [pc, #112]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005950:	2205      	movs	r2, #5
 8005952:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005954:	4b11      	ldr	r3, [pc, #68]	@ (800599c <ESP_Upkeep+0x774>)
 8005956:	2202      	movs	r2, #2
 8005958:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <ESP_Upkeep+0x760>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b1e      	ldr	r3, [pc, #120]	@ (80059d8 <ESP_Upkeep+0x7b0>)
 8005960:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005962:	4b19      	ldr	r3, [pc, #100]	@ (80059c8 <ESP_Upkeep+0x7a0>)
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005968:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <ESP_Upkeep+0x7dc>)
 800596a:	4b13      	ldr	r3, [pc, #76]	@ (80059b8 <ESP_Upkeep+0x790>)
 800596c:	0019      	movs	r1, r3
 800596e:	2003      	movs	r0, #3
 8005970:	f007 fd20 	bl	800d3b4 <CreateLine>
        }
      }
      break;
 8005974:	e06a      	b.n	8005a4c <ESP_Upkeep+0x824>
 8005976:	e069      	b.n	8005a4c <ESP_Upkeep+0x824>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 8005978:	f016 f88a 	bl	801ba90 <GetUsbRxPointer>
 800597c:	0003      	movs	r3, r0
 800597e:	0018      	movs	r0, r3
 8005980:	f000 f8e6 	bl	8005b50 <Process_PC_Config>
      break;
 8005984:	e063      	b.n	8005a4e <ESP_Upkeep+0x826>
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	20000990 	.word	0x20000990
 800598c:	2000099d 	.word	0x2000099d
 8005990:	2000002a 	.word	0x2000002a
 8005994:	2000099e 	.word	0x2000099e
 8005998:	2000098e 	.word	0x2000098e
 800599c:	20000028 	.word	0x20000028
 80059a0:	2000098f 	.word	0x2000098f
 80059a4:	000493e0 	.word	0x000493e0
 80059a8:	2000054f 	.word	0x2000054f
 80059ac:	20000560 	.word	0x20000560
 80059b0:	2000055c 	.word	0x2000055c
 80059b4:	0802261c 	.word	0x0802261c
 80059b8:	08021e28 	.word	0x08021e28
 80059bc:	20000984 	.word	0x20000984
 80059c0:	2000099f 	.word	0x2000099f
 80059c4:	08022650 	.word	0x08022650
 80059c8:	20000001 	.word	0x20000001
 80059cc:	002c4020 	.word	0x002c4020
 80059d0:	20000994 	.word	0x20000994
 80059d4:	08022668 	.word	0x08022668
 80059d8:	20000998 	.word	0x20000998
 80059dc:	080226ac 	.word	0x080226ac
 80059e0:	20000548 	.word	0x20000548
 80059e4:	50001c00 	.word	0x50001c00
 80059e8:	50000800 	.word	0x50000800
 80059ec:	2000054b 	.word	0x2000054b
 80059f0:	20000549 	.word	0x20000549
 80059f4:	2000054c 	.word	0x2000054c
 80059f8:	2000054e 	.word	0x2000054e
 80059fc:	080226cc 	.word	0x080226cc
 8005a00:	2000054d 	.word	0x2000054d
 8005a04:	080226e4 	.word	0x080226e4

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005a08:	4a14      	ldr	r2, [pc, #80]	@ (8005a5c <ESP_Upkeep+0x834>)
 8005a0a:	4b15      	ldr	r3, [pc, #84]	@ (8005a60 <ESP_Upkeep+0x838>)
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	2003      	movs	r0, #3
 8005a10:	f007 fcd0 	bl	800d3b4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005a14:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <ESP_Upkeep+0x83c>)
 8005a16:	2202      	movs	r2, #2
 8005a18:	701a      	strb	r2, [r3, #0]
      break;
 8005a1a:	e018      	b.n	8005a4e <ESP_Upkeep+0x826>

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 8005a1c:	4a12      	ldr	r2, [pc, #72]	@ (8005a68 <ESP_Upkeep+0x840>)
 8005a1e:	4b10      	ldr	r3, [pc, #64]	@ (8005a60 <ESP_Upkeep+0x838>)
 8005a20:	0019      	movs	r1, r3
 8005a22:	2003      	movs	r0, #3
 8005a24:	f007 fcc6 	bl	800d3b4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005a28:	4b0e      	ldr	r3, [pc, #56]	@ (8005a64 <ESP_Upkeep+0x83c>)
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	701a      	strb	r2, [r3, #0]
      break;
 8005a2e:	e00e      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a30:	46c0      	nop			@ (mov r8, r8)
 8005a32:	e00c      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a34:	46c0      	nop			@ (mov r8, r8)
 8005a36:	e00a      	b.n	8005a4e <ESP_Upkeep+0x826>
        break;
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	e008      	b.n	8005a4e <ESP_Upkeep+0x826>
    break;
 8005a3c:	46c0      	nop			@ (mov r8, r8)
 8005a3e:	e006      	b.n	8005a4e <ESP_Upkeep+0x826>
    break;
 8005a40:	46c0      	nop			@ (mov r8, r8)
 8005a42:	e004      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a44:	46c0      	nop			@ (mov r8, r8)
 8005a46:	e002      	b.n	8005a4e <ESP_Upkeep+0x826>
    break;
 8005a48:	46c0      	nop			@ (mov r8, r8)
 8005a4a:	e000      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a4c:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005a4e:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <ESP_Upkeep+0x83c>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bdb0      	pop	{r4, r5, r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	080226f4 	.word	0x080226f4
 8005a60:	08021e28 	.word	0x08021e28
 8005a64:	20000028 	.word	0x20000028
 8005a68:	08022708 	.word	0x08022708

08005a6c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005a74:	4b09      	ldr	r3, [pc, #36]	@ (8005a9c <I2CSensors_Init+0x30>)
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005a7a:	4a09      	ldr	r2, [pc, #36]	@ (8005aa0 <I2CSensors_Init+0x34>)
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <I2CSensors_Init+0x38>)
 8005a7e:	0011      	movs	r1, r2
 8005a80:	0018      	movs	r0, r3
 8005a82:	f001 fafb 	bl	800707c <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005a86:	4a06      	ldr	r2, [pc, #24]	@ (8005aa0 <I2CSensors_Init+0x34>)
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <I2CSensors_Init+0x38>)
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f001 f965 	bl	8006d5c <Gas_Init>
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b002      	add	sp, #8
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	20000aa8 	.word	0x20000aa8
 8005aa0:	08005afd 	.word	0x08005afd
 8005aa4:	08005aa9 	.word	0x08005aa9

08005aa8 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005aa8:	b5b0      	push	{r4, r5, r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6039      	str	r1, [r7, #0]
 8005ab0:	0011      	movs	r1, r2
 8005ab2:	1dfb      	adds	r3, r7, #7
 8005ab4:	1c02      	adds	r2, r0, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	1dbb      	adds	r3, r7, #6
 8005aba:	1c0a      	adds	r2, r1, #0
 8005abc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005abe:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <ReadI2C+0x50>)
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	1dfb      	adds	r3, r7, #7
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	18db      	adds	r3, r3, r3
 8005aca:	b299      	uxth	r1, r3
 8005acc:	1dbb      	adds	r3, r7, #6
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	250f      	movs	r5, #15
 8005ad4:	197c      	adds	r4, r7, r5
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	f009 fe4e 	bl	800f778 <HAL_I2C_Master_Receive_DMA>
 8005adc:	0003      	movs	r3, r0
 8005ade:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ae0:	197b      	adds	r3, r7, r5
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <ReadI2C+0x44>
        return false;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <ReadI2C+0x46>
    }
    return true;
 8005aec:	2301      	movs	r3, #1
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b004      	add	sp, #16
 8005af4:	bdb0      	pop	{r4, r5, r7, pc}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	20000aa8 	.word	0x20000aa8

08005afc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005afc:	b5b0      	push	{r4, r5, r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6039      	str	r1, [r7, #0]
 8005b04:	0011      	movs	r1, r2
 8005b06:	1dfb      	adds	r3, r7, #7
 8005b08:	1c02      	adds	r2, r0, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	1dbb      	adds	r3, r7, #6
 8005b0e:	1c0a      	adds	r2, r1, #0
 8005b10:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005b12:	4b0e      	ldr	r3, [pc, #56]	@ (8005b4c <WriteI2C+0x50>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	18db      	adds	r3, r3, r3
 8005b1e:	b299      	uxth	r1, r3
 8005b20:	1dbb      	adds	r3, r7, #6
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	250f      	movs	r5, #15
 8005b28:	197c      	adds	r4, r7, r5
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	f009 fd1e 	bl	800f56c <HAL_I2C_Master_Transmit_DMA>
 8005b30:	0003      	movs	r3, r0
 8005b32:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005b34:	197b      	adds	r3, r7, r5
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <WriteI2C+0x44>
        return false;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <WriteI2C+0x46>
    }
    return true;
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bdb0      	pop	{r4, r5, r7, pc}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	20000aa8 	.word	0x20000aa8

08005b50 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b0c3      	sub	sp, #268	@ 0x10c
 8005b54:	af3e      	add	r7, sp, #248	@ 0xf8
 8005b56:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005b58:	f015 ffba 	bl	801bad0 <GetUsbRxDataSize>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d971      	bls.n	8005c4a <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2123      	movs	r1, #35	@ 0x23
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f019 f9b0 	bl	801eed0 <strchr>
 8005b70:	0003      	movs	r3, r0
 8005b72:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d065      	beq.n	8005c46 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	785a      	ldrb	r2, [r3, #1]
 8005b7e:	4b34      	ldr	r3, [pc, #208]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b80:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	789a      	ldrb	r2, [r3, #2]
 8005b86:	4b32      	ldr	r3, [pc, #200]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b88:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005b8a:	4b31      	ldr	r3, [pc, #196]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	3305      	adds	r3, #5
 8005b90:	001a      	movs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d351      	bcc.n	8005c3c <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	1cd9      	adds	r1, r3, #3
 8005b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8005c54 <Process_PC_Config+0x104>)
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f019 fa67 	bl	801f078 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005baa:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	3303      	adds	r3, #3
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	b21a      	sxth	r2, r3
 8005bbc:	4b24      	ldr	r3, [pc, #144]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	18cb      	adds	r3, r1, r3
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	b21b      	sxth	r3, r3
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	b299      	uxth	r1, r3
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bd2:	2381      	movs	r3, #129	@ 0x81
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bda:	2381      	movs	r3, #129	@ 0x81
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	5ad4      	ldrh	r4, [r2, r3]
 8005be0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <Process_PC_Config+0x100>)
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	3303      	adds	r3, #3
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0011      	movs	r1, r2
 8005bec:	0018      	movs	r0, r3
 8005bee:	f000 f975 	bl	8005edc <CRC16_ARC>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	429c      	cmp	r4, r3
 8005bf6:	d007      	beq.n	8005c08 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005bf8:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bfa:	785a      	ldrb	r2, [r3, #1]
 8005bfc:	4b15      	ldr	r3, [pc, #84]	@ (8005c54 <Process_PC_Config+0x104>)
 8005bfe:	0019      	movs	r1, r3
 8005c00:	2001      	movs	r0, #1
 8005c02:	f000 f919 	bl	8005e38 <Create_Message>
 8005c06:	e016      	b.n	8005c36 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005c08:	4c11      	ldr	r4, [pc, #68]	@ (8005c50 <Process_PC_Config+0x100>)
 8005c0a:	466b      	mov	r3, sp
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	0023      	movs	r3, r4
 8005c10:	3310      	adds	r3, #16
 8005c12:	22f4      	movs	r2, #244	@ 0xf4
 8005c14:	0019      	movs	r1, r3
 8005c16:	f019 fa2f 	bl	801f078 <memcpy>
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	6861      	ldr	r1, [r4, #4]
 8005c1e:	68a2      	ldr	r2, [r4, #8]
 8005c20:	68e3      	ldr	r3, [r4, #12]
 8005c22:	f000 f819 	bl	8005c58 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <Process_PC_Config+0x100>)
 8005c28:	7818      	ldrb	r0, [r3, #0]
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <Process_PC_Config+0x100>)
 8005c2c:	785a      	ldrb	r2, [r3, #1]
 8005c2e:	4b09      	ldr	r3, [pc, #36]	@ (8005c54 <Process_PC_Config+0x104>)
 8005c30:	0019      	movs	r1, r3
 8005c32:	f000 f901 	bl	8005e38 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005c36:	f015 ff33 	bl	801baa0 <ResetUsbRxDataSize>
                return;
 8005c3a:	e006      	b.n	8005c4a <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f015 ff50 	bl	801bae4 <GetUsbRxNextChunk>
 8005c44:	e001      	b.n	8005c4a <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005c46:	f015 ff2b 	bl	801baa0 <ResetUsbRxDataSize>
        }
    }
}
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b005      	add	sp, #20
 8005c4e:	bd90      	pop	{r4, r7, pc}
 8005c50:	20000aac 	.word	0x20000aac
 8005c54:	20000aae 	.word	0x20000aae

08005c58 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005c58:	b084      	sub	sp, #16
 8005c5a:	b5b0      	push	{r4, r5, r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	2518      	movs	r5, #24
 8005c62:	197c      	adds	r4, r7, r5
 8005c64:	6020      	str	r0, [r4, #0]
 8005c66:	6061      	str	r1, [r4, #4]
 8005c68:	60a2      	str	r2, [r4, #8]
 8005c6a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005c6c:	197b      	adds	r3, r7, r5
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c72:	d100      	bne.n	8005c76 <ProcessCmd+0x1e>
 8005c74:	e09c      	b.n	8005db0 <ProcessCmd+0x158>
 8005c76:	dd00      	ble.n	8005c7a <ProcessCmd+0x22>
 8005c78:	e0bc      	b.n	8005df4 <ProcessCmd+0x19c>
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	dc0a      	bgt.n	8005c94 <ProcessCmd+0x3c>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da00      	bge.n	8005c84 <ProcessCmd+0x2c>
 8005c82:	e0b7      	b.n	8005df4 <ProcessCmd+0x19c>
 8005c84:	2b0c      	cmp	r3, #12
 8005c86:	d900      	bls.n	8005c8a <ProcessCmd+0x32>
 8005c88:	e0b4      	b.n	8005df4 <ProcessCmd+0x19c>
 8005c8a:	009a      	lsls	r2, r3, #2
 8005c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8005e04 <ProcessCmd+0x1ac>)
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	469f      	mov	pc, r3
 8005c94:	2bfd      	cmp	r3, #253	@ 0xfd
 8005c96:	d100      	bne.n	8005c9a <ProcessCmd+0x42>
 8005c98:	e084      	b.n	8005da4 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005c9a:	e0ab      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c9c:	2118      	movs	r1, #24
 8005c9e:	187b      	adds	r3, r7, r1
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	001a      	movs	r2, r3
 8005ca4:	187b      	adds	r3, r7, r1
 8005ca6:	1c99      	adds	r1, r3, #2
 8005ca8:	4857      	ldr	r0, [pc, #348]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005caa:	230c      	movs	r3, #12
 8005cac:	f7fd fd08 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cb0:	e0a0      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cb2:	2118      	movs	r1, #24
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	001a      	movs	r2, r3
 8005cba:	187b      	adds	r3, r7, r1
 8005cbc:	1c99      	adds	r1, r3, #2
 8005cbe:	4853      	ldr	r0, [pc, #332]	@ (8005e0c <ProcessCmd+0x1b4>)
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	f7fd fcfd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cc6:	e095      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cc8:	2118      	movs	r1, #24
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	001a      	movs	r2, r3
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	1c99      	adds	r1, r3, #2
 8005cd4:	484e      	ldr	r0, [pc, #312]	@ (8005e10 <ProcessCmd+0x1b8>)
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	f7fd fcf2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cdc:	e08a      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cde:	2118      	movs	r1, #24
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	187b      	adds	r3, r7, r1
 8005ce8:	1c99      	adds	r1, r3, #2
 8005cea:	484a      	ldr	r0, [pc, #296]	@ (8005e14 <ProcessCmd+0x1bc>)
 8005cec:	230c      	movs	r3, #12
 8005cee:	f7fd fce7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cf2:	e07f      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cf4:	2118      	movs	r1, #24
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	187b      	adds	r3, r7, r1
 8005cfe:	1c99      	adds	r1, r3, #2
 8005d00:	4845      	ldr	r0, [pc, #276]	@ (8005e18 <ProcessCmd+0x1c0>)
 8005d02:	230c      	movs	r3, #12
 8005d04:	f7fd fcdc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d08:	e074      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d0a:	2118      	movs	r1, #24
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	001a      	movs	r2, r3
 8005d12:	187b      	adds	r3, r7, r1
 8005d14:	1c99      	adds	r1, r3, #2
 8005d16:	4841      	ldr	r0, [pc, #260]	@ (8005e1c <ProcessCmd+0x1c4>)
 8005d18:	230c      	movs	r3, #12
 8005d1a:	f7fd fcd1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d1e:	e069      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d20:	2118      	movs	r1, #24
 8005d22:	187b      	adds	r3, r7, r1
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	001a      	movs	r2, r3
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	1c99      	adds	r1, r3, #2
 8005d2c:	483c      	ldr	r0, [pc, #240]	@ (8005e20 <ProcessCmd+0x1c8>)
 8005d2e:	230c      	movs	r3, #12
 8005d30:	f7fd fcc6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d34:	e05e      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005d36:	2118      	movs	r1, #24
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	1c99      	adds	r1, r3, #2
 8005d42:	4838      	ldr	r0, [pc, #224]	@ (8005e24 <ProcessCmd+0x1cc>)
 8005d44:	231e      	movs	r3, #30
 8005d46:	f7fd fcbb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d4a:	e053      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d4c:	2118      	movs	r1, #24
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	001a      	movs	r2, r3
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	1c99      	adds	r1, r3, #2
 8005d58:	4833      	ldr	r0, [pc, #204]	@ (8005e28 <ProcessCmd+0x1d0>)
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	f7fd fcb0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d60:	e048      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d62:	2118      	movs	r1, #24
 8005d64:	187b      	adds	r3, r7, r1
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	001a      	movs	r2, r3
 8005d6a:	187b      	adds	r3, r7, r1
 8005d6c:	1c99      	adds	r1, r3, #2
 8005d6e:	482f      	ldr	r0, [pc, #188]	@ (8005e2c <ProcessCmd+0x1d4>)
 8005d70:	230c      	movs	r3, #12
 8005d72:	f7fd fca5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d76:	e03d      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d78:	2118      	movs	r1, #24
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	001a      	movs	r2, r3
 8005d80:	187b      	adds	r3, r7, r1
 8005d82:	1c99      	adds	r1, r3, #2
 8005d84:	482a      	ldr	r0, [pc, #168]	@ (8005e30 <ProcessCmd+0x1d8>)
 8005d86:	230c      	movs	r3, #12
 8005d88:	f7fd fc9a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d8c:	e032      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d8e:	2118      	movs	r1, #24
 8005d90:	187b      	adds	r3, r7, r1
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	001a      	movs	r2, r3
 8005d96:	187b      	adds	r3, r7, r1
 8005d98:	1c99      	adds	r1, r3, #2
 8005d9a:	4826      	ldr	r0, [pc, #152]	@ (8005e34 <ProcessCmd+0x1dc>)
 8005d9c:	230c      	movs	r3, #12
 8005d9e:	f7fd fc8f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005da2:	e027      	b.n	8005df4 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005da4:	4b18      	ldr	r3, [pc, #96]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005da6:	21ba      	movs	r1, #186	@ 0xba
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7fd fcce 	bl	800374a <ClearEEprom>
        break;
 8005dae:	e021      	b.n	8005df4 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005db0:	2118      	movs	r1, #24
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	789b      	ldrb	r3, [r3, #2]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	187b      	adds	r3, r7, r1
 8005dbc:	78db      	ldrb	r3, [r3, #3]
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b21a      	sxth	r2, r3
 8005dc4:	1dbb      	adds	r3, r7, #6
 8005dc6:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005dc8:	1dbb      	adds	r3, r7, #6
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	23c0      	movs	r3, #192	@ 0xc0
 8005dce:	015b      	lsls	r3, r3, #5
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d207      	bcs.n	8005de4 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005dd4:	1dbb      	adds	r3, r7, #6
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005dda:	0019      	movs	r1, r3
 8005ddc:	0010      	movs	r0, r2
 8005dde:	f7fd fcb4 	bl	800374a <ClearEEprom>
            break;
 8005de2:	e006      	b.n	8005df2 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005de4:	23c0      	movs	r3, #192	@ 0xc0
 8005de6:	015b      	lsls	r3, r3, #5
 8005de8:	4a07      	ldr	r2, [pc, #28]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005dea:	0019      	movs	r1, r3
 8005dec:	0010      	movs	r0, r2
 8005dee:	f7fd fcac 	bl	800374a <ClearEEprom>
            break;
 8005df2:	46c0      	nop			@ (mov r8, r8)
}
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bcb0      	pop	{r4, r5, r7}
 8005dfc:	bc08      	pop	{r3}
 8005dfe:	b004      	add	sp, #16
 8005e00:	4718      	bx	r3
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	08023970 	.word	0x08023970
 8005e08:	08080000 	.word	0x08080000
 8005e0c:	0808000c 	.word	0x0808000c
 8005e10:	08080018 	.word	0x08080018
 8005e14:	08080024 	.word	0x08080024
 8005e18:	08080030 	.word	0x08080030
 8005e1c:	0808003c 	.word	0x0808003c
 8005e20:	08080048 	.word	0x08080048
 8005e24:	08080090 	.word	0x08080090
 8005e28:	08080078 	.word	0x08080078
 8005e2c:	0808006c 	.word	0x0808006c
 8005e30:	08080060 	.word	0x08080060
 8005e34:	08080054 	.word	0x08080054

08005e38 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6039      	str	r1, [r7, #0]
 8005e40:	0011      	movs	r1, r2
 8005e42:	1dfb      	adds	r3, r7, #7
 8005e44:	1c02      	adds	r2, r0, #0
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	1dbb      	adds	r3, r7, #6
 8005e4a:	1c0a      	adds	r2, r1, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005e4e:	2223      	movs	r2, #35	@ 0x23
 8005e50:	4b20      	ldr	r3, [pc, #128]	@ (8005ed4 <Create_Message+0x9c>)
 8005e52:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed4 <Create_Message+0x9c>)
 8005e56:	1dfa      	adds	r2, r7, #7
 8005e58:	7812      	ldrb	r2, [r2, #0]
 8005e5a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <Create_Message+0x9c>)
 8005e5e:	1dba      	adds	r2, r7, #6
 8005e60:	7812      	ldrb	r2, [r2, #0]
 8005e62:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005e64:	1dbb      	adds	r3, r7, #6
 8005e66:	781a      	ldrb	r2, [r3, #0]
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <Create_Message+0xa0>)
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f019 f903 	bl	801f078 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005e72:	1dbb      	adds	r3, r7, #6
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	250e      	movs	r5, #14
 8005e7a:	197b      	adds	r3, r7, r5
 8005e7c:	3203      	adds	r2, #3
 8005e7e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005e80:	260c      	movs	r6, #12
 8005e82:	19bc      	adds	r4, r7, r6
 8005e84:	197b      	adds	r3, r7, r5
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <Create_Message+0x9c>)
 8005e8a:	0011      	movs	r1, r2
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 f825 	bl	8005edc <CRC16_ARC>
 8005e92:	0003      	movs	r3, r0
 8005e94:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005e96:	0030      	movs	r0, r6
 8005e98:	183b      	adds	r3, r7, r0
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	197b      	adds	r3, r7, r5
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b2d1      	uxtb	r1, r2
 8005ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed4 <Create_Message+0x9c>)
 8005ea8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005eaa:	197b      	adds	r3, r7, r5
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	183a      	adds	r2, r7, r0
 8005eb2:	8812      	ldrh	r2, [r2, #0]
 8005eb4:	b2d1      	uxtb	r1, r2
 8005eb6:	4a07      	ldr	r2, [pc, #28]	@ (8005ed4 <Create_Message+0x9c>)
 8005eb8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005eba:	197b      	adds	r3, r7, r5
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	4b04      	ldr	r3, [pc, #16]	@ (8005ed4 <Create_Message+0x9c>)
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f015 fda8 	bl	801ba1c <CDC_Transmit_FS>
}
 8005ecc:	46c0      	nop			@ (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b005      	add	sp, #20
 8005ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed4:	20000bb0 	.word	0x20000bb0
 8005ed8:	20000bb3 	.word	0x20000bb3

08005edc <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	000a      	movs	r2, r1
 8005ee6:	1cbb      	adds	r3, r7, #2
 8005ee8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005eea:	2316      	movs	r3, #22
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	2200      	movs	r2, #0
 8005ef0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	e02e      	b.n	8005f56 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	18d3      	adds	r3, r2, r3
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	0019      	movs	r1, r3
 8005f02:	2216      	movs	r2, #22
 8005f04:	18bb      	adds	r3, r7, r2
 8005f06:	18ba      	adds	r2, r7, r2
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	404a      	eors	r2, r1
 8005f0c:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e01a      	b.n	8005f4a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005f14:	2116      	movs	r1, #22
 8005f16:	187b      	adds	r3, r7, r1
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005f20:	187b      	adds	r3, r7, r1
 8005f22:	187a      	adds	r2, r7, r1
 8005f24:	8812      	ldrh	r2, [r2, #0]
 8005f26:	0852      	lsrs	r2, r2, #1
 8005f28:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	187a      	adds	r2, r7, r1
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	490f      	ldr	r1, [pc, #60]	@ (8005f70 <CRC16_ARC+0x94>)
 8005f32:	404a      	eors	r2, r1
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e005      	b.n	8005f44 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005f38:	2216      	movs	r2, #22
 8005f3a:	18bb      	adds	r3, r7, r2
 8005f3c:	18ba      	adds	r2, r7, r2
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	0852      	lsrs	r2, r2, #1
 8005f42:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b07      	cmp	r3, #7
 8005f4e:	dde1      	ble.n	8005f14 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3301      	adds	r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	1cbb      	adds	r3, r7, #2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	dbcb      	blt.n	8005ef8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005f60:	2316      	movs	r3, #22
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	881b      	ldrh	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b006      	add	sp, #24
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	ffffa001 	.word	0xffffa001

08005f74 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 8005f78:	4b26      	ldr	r3, [pc, #152]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005f7a:	4a27      	ldr	r2, [pc, #156]	@ (8006018 <ReadBatteryVoltage+0xa4>)
 8005f7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005f7e:	4b25      	ldr	r3, [pc, #148]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005f80:	2280      	movs	r2, #128	@ 0x80
 8005f82:	0152      	lsls	r2, r2, #5
 8005f84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005f86:	4a23      	ldr	r2, [pc, #140]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005f88:	4b24      	ldr	r3, [pc, #144]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005f8a:	0011      	movs	r1, r2
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f008 f887 	bl	800e0a0 <HAL_ADC_ConfigChannel>
 8005f92:	1e03      	subs	r3, r0, #0
 8005f94:	d001      	beq.n	8005f9a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8005f96:	f001 fdab 	bl	8007af0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8005f9a:	4b20      	ldr	r3, [pc, #128]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f007 ff83 	bl	800dea8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8005fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f007 ffd2 	bl	800df50 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005fac:	4b1b      	ldr	r3, [pc, #108]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f008 f86a 	bl	800e088 <HAL_ADC_GetValue>
 8005fb4:	0002      	movs	r2, r0
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8006020 <ReadBatteryVoltage+0xac>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4353      	muls	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4919      	ldr	r1, [pc, #100]	@ (8006024 <ReadBatteryVoltage+0xb0>)
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f7fa f8ef 	bl	80001a4 <__udivsi3>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	001a      	movs	r2, r3
 8005fca:	4b17      	ldr	r3, [pc, #92]	@ (8006028 <ReadBatteryVoltage+0xb4>)
 8005fcc:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8005fce:	4b16      	ldr	r3, [pc, #88]	@ (8006028 <ReadBatteryVoltage+0xb4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7fb fb48 	bl	8001668 <__aeabi_ui2f>
 8005fd8:	1c03      	adds	r3, r0, #0
 8005fda:	4914      	ldr	r1, [pc, #80]	@ (800602c <ReadBatteryVoltage+0xb8>)
 8005fdc:	1c18      	adds	r0, r3, #0
 8005fde:	f7fa fdf9 	bl	8000bd4 <__aeabi_fdiv>
 8005fe2:	1c03      	adds	r3, r0, #0
 8005fe4:	1c1a      	adds	r2, r3, #0
 8005fe6:	4b12      	ldr	r3, [pc, #72]	@ (8006030 <ReadBatteryVoltage+0xbc>)
 8005fe8:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005fec:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <ReadBatteryVoltage+0xa4>)
 8005fee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8005ff0:	4b08      	ldr	r3, [pc, #32]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005ff2:	4a10      	ldr	r2, [pc, #64]	@ (8006034 <ReadBatteryVoltage+0xc0>)
 8005ff4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005ff6:	4a07      	ldr	r2, [pc, #28]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005ff8:	4b08      	ldr	r3, [pc, #32]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f008 f84f 	bl	800e0a0 <HAL_ADC_ConfigChannel>
 8006002:	1e03      	subs	r3, r0, #0
 8006004:	d001      	beq.n	800600a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006006:	f001 fd73 	bl	8007af0 <Error_Handler>
  }
  return trueValue;
 800600a:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <ReadBatteryVoltage+0xbc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 }
 800600e:	1c18      	adds	r0, r3, #0
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000cb8 	.word	0x20000cb8
 8006018:	38004000 	.word	0x38004000
 800601c:	20000ce0 	.word	0x20000ce0
 8006020:	2000002c 	.word	0x2000002c
 8006024:	00000fff 	.word	0x00000fff
 8006028:	20000cc0 	.word	0x20000cc0
 800602c:	447a0000 	.word	0x447a0000
 8006030:	20000cc4 	.word	0x20000cc4
 8006034:	00001001 	.word	0x00001001

08006038 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 800603c:	4b27      	ldr	r3, [pc, #156]	@ (80060dc <ReadSolarVoltage+0xa4>)
 800603e:	4a28      	ldr	r2, [pc, #160]	@ (80060e0 <ReadSolarVoltage+0xa8>)
 8006040:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006042:	4b26      	ldr	r3, [pc, #152]	@ (80060dc <ReadSolarVoltage+0xa4>)
 8006044:	2280      	movs	r2, #128	@ 0x80
 8006046:	0152      	lsls	r2, r2, #5
 8006048:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800604a:	4a24      	ldr	r2, [pc, #144]	@ (80060dc <ReadSolarVoltage+0xa4>)
 800604c:	4b25      	ldr	r3, [pc, #148]	@ (80060e4 <ReadSolarVoltage+0xac>)
 800604e:	0011      	movs	r1, r2
 8006050:	0018      	movs	r0, r3
 8006052:	f008 f825 	bl	800e0a0 <HAL_ADC_ConfigChannel>
 8006056:	1e03      	subs	r3, r0, #0
 8006058:	d001      	beq.n	800605e <ReadSolarVoltage+0x26>
    Error_Handler();
 800605a:	f001 fd49 	bl	8007af0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800605e:	4b21      	ldr	r3, [pc, #132]	@ (80060e4 <ReadSolarVoltage+0xac>)
 8006060:	0018      	movs	r0, r3
 8006062:	f007 ff21 	bl	800dea8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006066:	4b1f      	ldr	r3, [pc, #124]	@ (80060e4 <ReadSolarVoltage+0xac>)
 8006068:	2101      	movs	r1, #1
 800606a:	0018      	movs	r0, r3
 800606c:	f007 ff70 	bl	800df50 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006070:	4b1c      	ldr	r3, [pc, #112]	@ (80060e4 <ReadSolarVoltage+0xac>)
 8006072:	0018      	movs	r0, r3
 8006074:	f008 f808 	bl	800e088 <HAL_ADC_GetValue>
 8006078:	0002      	movs	r2, r0
 800607a:	4b1b      	ldr	r3, [pc, #108]	@ (80060e8 <ReadSolarVoltage+0xb0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	435a      	muls	r2, r3
 8006080:	0013      	movs	r3, r2
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	189b      	adds	r3, r3, r2
 8006086:	4919      	ldr	r1, [pc, #100]	@ (80060ec <ReadSolarVoltage+0xb4>)
 8006088:	0018      	movs	r0, r3
 800608a:	f7fa f88b 	bl	80001a4 <__udivsi3>
 800608e:	0003      	movs	r3, r0
 8006090:	001a      	movs	r2, r3
 8006092:	4b17      	ldr	r3, [pc, #92]	@ (80060f0 <ReadSolarVoltage+0xb8>)
 8006094:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 8006096:	4b16      	ldr	r3, [pc, #88]	@ (80060f0 <ReadSolarVoltage+0xb8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	0018      	movs	r0, r3
 800609c:	f7fb fae4 	bl	8001668 <__aeabi_ui2f>
 80060a0:	1c03      	adds	r3, r0, #0
 80060a2:	4914      	ldr	r1, [pc, #80]	@ (80060f4 <ReadSolarVoltage+0xbc>)
 80060a4:	1c18      	adds	r0, r3, #0
 80060a6:	f7fa fd95 	bl	8000bd4 <__aeabi_fdiv>
 80060aa:	1c03      	adds	r3, r0, #0
 80060ac:	1c1a      	adds	r2, r3, #0
 80060ae:	4b12      	ldr	r3, [pc, #72]	@ (80060f8 <ReadSolarVoltage+0xc0>)
 80060b0:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <ReadSolarVoltage+0xa4>)
 80060b4:	4a0a      	ldr	r2, [pc, #40]	@ (80060e0 <ReadSolarVoltage+0xa8>)
 80060b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80060b8:	4b08      	ldr	r3, [pc, #32]	@ (80060dc <ReadSolarVoltage+0xa4>)
 80060ba:	4a10      	ldr	r2, [pc, #64]	@ (80060fc <ReadSolarVoltage+0xc4>)
 80060bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80060be:	4a07      	ldr	r2, [pc, #28]	@ (80060dc <ReadSolarVoltage+0xa4>)
 80060c0:	4b08      	ldr	r3, [pc, #32]	@ (80060e4 <ReadSolarVoltage+0xac>)
 80060c2:	0011      	movs	r1, r2
 80060c4:	0018      	movs	r0, r3
 80060c6:	f007 ffeb 	bl	800e0a0 <HAL_ADC_ConfigChannel>
 80060ca:	1e03      	subs	r3, r0, #0
 80060cc:	d001      	beq.n	80060d2 <ReadSolarVoltage+0x9a>
    Error_Handler();
 80060ce:	f001 fd0f 	bl	8007af0 <Error_Handler>
  }
  return trueValue;
 80060d2:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <ReadSolarVoltage+0xc0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 }
 80060d6:	1c18      	adds	r0, r3, #0
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000cb8 	.word	0x20000cb8
 80060e0:	3c008000 	.word	0x3c008000
 80060e4:	20000ce0 	.word	0x20000ce0
 80060e8:	2000002c 	.word	0x2000002c
 80060ec:	00000fff 	.word	0x00000fff
 80060f0:	20000cc8 	.word	0x20000cc8
 80060f4:	447a0000 	.word	0x447a0000
 80060f8:	20000ccc 	.word	0x20000ccc
 80060fc:	00001001 	.word	0x00001001

08006100 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006104:	23a0      	movs	r3, #160	@ 0xa0
 8006106:	05db      	lsls	r3, r3, #23
 8006108:	2180      	movs	r1, #128	@ 0x80
 800610a:	0018      	movs	r0, r3
 800610c:	f008 ff4e 	bl	800efac <HAL_GPIO_ReadPin>
 8006110:	0003      	movs	r3, r0
 8006112:	1e5a      	subs	r2, r3, #1
 8006114:	4193      	sbcs	r3, r2
 8006116:	b2db      	uxtb	r3, r3
}
 8006118:	0018      	movs	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800611e:	b580      	push	{r7, lr}
 8006120:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006122:	2380      	movs	r3, #128	@ 0x80
 8006124:	021a      	lsls	r2, r3, #8
 8006126:	23a0      	movs	r3, #160	@ 0xa0
 8006128:	05db      	lsls	r3, r3, #23
 800612a:	0011      	movs	r1, r2
 800612c:	0018      	movs	r0, r3
 800612e:	f008 ff3d 	bl	800efac <HAL_GPIO_ReadPin>
 8006132:	0003      	movs	r3, r0
 8006134:	1e5a      	subs	r2, r3, #1
 8006136:	4193      	sbcs	r3, r2
 8006138:	b2db      	uxtb	r3, r3
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006144:	4b05      	ldr	r3, [pc, #20]	@ (800615c <UserButton_Pressed+0x1c>)
 8006146:	2104      	movs	r1, #4
 8006148:	0018      	movs	r0, r3
 800614a:	f008 ff2f 	bl	800efac <HAL_GPIO_ReadPin>
 800614e:	0003      	movs	r3, r0
 8006150:	425a      	negs	r2, r3
 8006152:	4153      	adcs	r3, r2
 8006154:	b2db      	uxtb	r3, r3
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	50000c00 	.word	0x50000c00

08006160 <showTime>:

char systemUptime[16] = {0};

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006162:	46d6      	mov	lr, sl
 8006164:	464f      	mov	r7, r9
 8006166:	4646      	mov	r6, r8
 8006168:	b5c0      	push	{r6, r7, lr}
 800616a:	b08e      	sub	sp, #56	@ 0x38
 800616c:	af08      	add	r7, sp, #32
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800616e:	003a      	movs	r2, r7
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	0011      	movs	r1, r2
 8006174:	0018      	movs	r0, r3
 8006176:	f000 f9f9 	bl	800656c <RTC_GetTime>
  UpdateSystemUptime();
 800617a:	f000 f83d 	bl	80061f8 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800617e:	003b      	movs	r3, r7
 8006180:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006182:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006184:	003b      	movs	r3, r7
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800618a:	4b18      	ldr	r3, [pc, #96]	@ (80061ec <showTime+0x8c>)
 800618c:	0092      	lsls	r2, r2, #2
 800618e:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006190:	003b      	movs	r3, r7
 8006192:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006194:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800619a:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061a0:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061a6:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061a8:	4b11      	ldr	r3, [pc, #68]	@ (80061f0 <showTime+0x90>)
 80061aa:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061ac:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061ae:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <showTime+0x90>)
 80061b0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061b2:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061b4:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <showTime+0x90>)
 80061b6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061b8:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061ba:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <showTime+0x90>)
 80061bc:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061be:	480d      	ldr	r0, [pc, #52]	@ (80061f4 <showTime+0x94>)
 80061c0:	9306      	str	r3, [sp, #24]
 80061c2:	4643      	mov	r3, r8
 80061c4:	9305      	str	r3, [sp, #20]
 80061c6:	4663      	mov	r3, ip
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9603      	str	r6, [sp, #12]
 80061cc:	9502      	str	r5, [sp, #8]
 80061ce:	9401      	str	r4, [sp, #4]
 80061d0:	9100      	str	r1, [sp, #0]
 80061d2:	4653      	mov	r3, sl
 80061d4:	4649      	mov	r1, r9
 80061d6:	f018 fcbf 	bl	801eb58 <iprintf>
}
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b006      	add	sp, #24
 80061e0:	bce0      	pop	{r5, r6, r7}
 80061e2:	46ba      	mov	sl, r7
 80061e4:	46b1      	mov	r9, r6
 80061e6:	46a8      	mov	r8, r5
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	2000004c 	.word	0x2000004c
 80061f0:	20000cd0 	.word	0x20000cd0
 80061f4:	08022784 	.word	0x08022784

080061f8 <UpdateSystemUptime>:
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}

void UpdateSystemUptime() {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80061fe:	003a      	movs	r2, r7
 8006200:	1d3b      	adds	r3, r7, #4
 8006202:	0011      	movs	r1, r2
 8006204:	0018      	movs	r0, r3
 8006206:	f000 f9b1 	bl	800656c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800620a:	1d3a      	adds	r2, r7, #4
 800620c:	003b      	movs	r3, r7
 800620e:	0011      	movs	r1, r2
 8006210:	0018      	movs	r0, r3
 8006212:	f000 fa9f 	bl	8006754 <makeTime>
 8006216:	0002      	movs	r2, r0
 8006218:	4b1e      	ldr	r3, [pc, #120]	@ (8006294 <UpdateSystemUptime+0x9c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	213c      	movs	r1, #60	@ 0x3c
 8006228:	0018      	movs	r0, r3
 800622a:	f7fa f841 	bl	80002b0 <__aeabi_uidivmod>
 800622e:	000b      	movs	r3, r1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006234:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	213c      	movs	r1, #60	@ 0x3c
 800623a:	0018      	movs	r0, r3
 800623c:	f7f9 ffb2 	bl	80001a4 <__udivsi3>
 8006240:	0003      	movs	r3, r0
 8006242:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	213c      	movs	r1, #60	@ 0x3c
 8006248:	0018      	movs	r0, r3
 800624a:	f7fa f831 	bl	80002b0 <__aeabi_uidivmod>
 800624e:	000b      	movs	r3, r1
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006254:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	213c      	movs	r1, #60	@ 0x3c
 800625a:	0018      	movs	r0, r3
 800625c:	f7f9 ffa2 	bl	80001a4 <__udivsi3>
 8006260:	0003      	movs	r3, r0
 8006262:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2118      	movs	r1, #24
 8006268:	0018      	movs	r0, r3
 800626a:	f7fa f821 	bl	80002b0 <__aeabi_uidivmod>
 800626e:	000b      	movs	r3, r1
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006274:	709a      	strb	r2, [r3, #2]
  myUpTime.Day /= 24; // now it is days
 8006276:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	2118      	movs	r1, #24
 800627c:	0018      	movs	r0, r3
 800627e:	f7f9 ff91 	bl	80001a4 <__udivsi3>
 8006282:	0003      	movs	r3, r0
 8006284:	b29a      	uxth	r2, r3
 8006286:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006288:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b008      	add	sp, #32
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			@ (mov r8, r8)
 8006294:	20000cdc 	.word	0x20000cdc
 8006298:	20000cd0 	.word	0x20000cd0

0800629c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	0008      	movs	r0, r1
 80062a6:	0011      	movs	r1, r2
 80062a8:	1cfb      	adds	r3, r7, #3
 80062aa:	1c02      	adds	r2, r0, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	1cbb      	adds	r3, r7, #2
 80062b0:	1c0a      	adds	r2, r1, #0
 80062b2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80062b4:	230e      	movs	r3, #14
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	1cfa      	adds	r2, r7, #3
 80062c2:	7812      	ldrb	r2, [r2, #0]
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e015      	b.n	80062f4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80062c8:	200f      	movs	r0, #15
 80062ca:	183b      	adds	r3, r7, r0
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	18d2      	adds	r2, r2, r3
 80062d2:	240e      	movs	r4, #14
 80062d4:	193b      	adds	r3, r7, r4
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	7811      	ldrb	r1, [r2, #0]
 80062da:	2208      	movs	r2, #8
 80062dc:	18ba      	adds	r2, r7, r2
 80062de:	54d1      	strb	r1, [r2, r3]
    pos++;
 80062e0:	193b      	adds	r3, r7, r4
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	3201      	adds	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80062ea:	183b      	adds	r3, r7, r0
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	3201      	adds	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	200f      	movs	r0, #15
 80062f6:	183a      	adds	r2, r7, r0
 80062f8:	1cbb      	adds	r3, r7, #2
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d9e2      	bls.n	80062c8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006302:	230e      	movs	r3, #14
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	18ba      	adds	r2, r7, r2
 800630c:	2100      	movs	r1, #0
 800630e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006310:	1cfb      	adds	r3, r7, #3
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b13      	cmp	r3, #19
 8006316:	d849      	bhi.n	80063ac <aBuff2int+0x110>
    if (start == 17) { //month
 8006318:	1cfb      	adds	r3, r7, #3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b11      	cmp	r3, #17
 800631e:	d122      	bne.n	8006366 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006320:	183b      	adds	r3, r7, r0
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	e018      	b.n	800635a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006328:	240f      	movs	r4, #15
 800632a:	193b      	adds	r3, r7, r4
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	4b25      	ldr	r3, [pc, #148]	@ (80063c4 <aBuff2int+0x128>)
 8006330:	0092      	lsls	r2, r2, #2
 8006332:	58d2      	ldr	r2, [r2, r3]
 8006334:	2308      	movs	r3, #8
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	0011      	movs	r1, r2
 800633a:	0018      	movs	r0, r3
 800633c:	f7f9 ff0c 	bl	8000158 <strcmp>
 8006340:	1e03      	subs	r3, r0, #0
 8006342:	d104      	bne.n	800634e <aBuff2int+0xb2>
          return i+1;
 8006344:	193b      	adds	r3, r7, r4
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e035      	b.n	80063ba <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800634e:	210f      	movs	r1, #15
 8006350:	187b      	adds	r3, r7, r1
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	187b      	adds	r3, r7, r1
 8006356:	3201      	adds	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	230f      	movs	r3, #15
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b0b      	cmp	r3, #11
 8006362:	d9e1      	bls.n	8006328 <aBuff2int+0x8c>
 8006364:	e022      	b.n	80063ac <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006366:	230f      	movs	r3, #15
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e018      	b.n	80063a2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006370:	240f      	movs	r4, #15
 8006372:	193b      	adds	r3, r7, r4
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	4b14      	ldr	r3, [pc, #80]	@ (80063c8 <aBuff2int+0x12c>)
 8006378:	0092      	lsls	r2, r2, #2
 800637a:	58d2      	ldr	r2, [r2, r3]
 800637c:	2308      	movs	r3, #8
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	0011      	movs	r1, r2
 8006382:	0018      	movs	r0, r3
 8006384:	f7f9 fee8 	bl	8000158 <strcmp>
 8006388:	1e03      	subs	r3, r0, #0
 800638a:	d104      	bne.n	8006396 <aBuff2int+0xfa>
          return i+1;
 800638c:	193b      	adds	r3, r7, r4
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e011      	b.n	80063ba <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006396:	210f      	movs	r1, #15
 8006398:	187b      	adds	r3, r7, r1
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	187b      	adds	r3, r7, r1
 800639e:	3201      	adds	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	230f      	movs	r3, #15
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b06      	cmp	r3, #6
 80063aa:	d9e1      	bls.n	8006370 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80063ac:	2308      	movs	r3, #8
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	0018      	movs	r0, r3
 80063b2:	f016 fff6 	bl	801d3a2 <atoi>
 80063b6:	0003      	movs	r3, r0
 80063b8:	b2db      	uxtb	r3, r3
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b005      	add	sp, #20
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	2000004c 	.word	0x2000004c
 80063c8:	20000030 	.word	0x20000030

080063cc <ParseTime>:

void ParseTime(char* buffer) {
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	b08b      	sub	sp, #44	@ 0x2c
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80063d4:	2508      	movs	r5, #8
 80063d6:	197a      	adds	r2, r7, r5
 80063d8:	240c      	movs	r4, #12
 80063da:	193b      	adds	r3, r7, r4
 80063dc:	0011      	movs	r1, r2
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f8c4 	bl	800656c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2219      	movs	r2, #25
 80063e8:	2118      	movs	r1, #24
 80063ea:	0018      	movs	r0, r3
 80063ec:	f7ff ff56 	bl	800629c <aBuff2int>
 80063f0:	0003      	movs	r3, r0
 80063f2:	001a      	movs	r2, r3
 80063f4:	193b      	adds	r3, r7, r4
 80063f6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	221c      	movs	r2, #28
 80063fc:	211b      	movs	r1, #27
 80063fe:	0018      	movs	r0, r3
 8006400:	f7ff ff4c 	bl	800629c <aBuff2int>
 8006404:	0003      	movs	r3, r0
 8006406:	001a      	movs	r2, r3
 8006408:	193b      	adds	r3, r7, r4
 800640a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	221f      	movs	r2, #31
 8006410:	211e      	movs	r1, #30
 8006412:	0018      	movs	r0, r3
 8006414:	f7ff ff42 	bl	800629c <aBuff2int>
 8006418:	0003      	movs	r3, r0
 800641a:	001a      	movs	r2, r3
 800641c:	193b      	adds	r3, r7, r4
 800641e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	@ 0x24
 8006424:	2123      	movs	r1, #35	@ 0x23
 8006426:	0018      	movs	r0, r3
 8006428:	f7ff ff38 	bl	800629c <aBuff2int>
 800642c:	0003      	movs	r3, r0
 800642e:	001a      	movs	r2, r3
 8006430:	002e      	movs	r6, r5
 8006432:	19bb      	adds	r3, r7, r6
 8006434:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2213      	movs	r2, #19
 800643a:	2111      	movs	r1, #17
 800643c:	0018      	movs	r0, r3
 800643e:	f7ff ff2d 	bl	800629c <aBuff2int>
 8006442:	0003      	movs	r3, r0
 8006444:	001a      	movs	r2, r3
 8006446:	19bb      	adds	r3, r7, r6
 8006448:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2216      	movs	r2, #22
 800644e:	2115      	movs	r1, #21
 8006450:	0018      	movs	r0, r3
 8006452:	f7ff ff23 	bl	800629c <aBuff2int>
 8006456:	0003      	movs	r3, r0
 8006458:	001a      	movs	r2, r3
 800645a:	19bb      	adds	r3, r7, r6
 800645c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	220f      	movs	r2, #15
 8006462:	210d      	movs	r1, #13
 8006464:	0018      	movs	r0, r3
 8006466:	f7ff ff19 	bl	800629c <aBuff2int>
 800646a:	0003      	movs	r3, r0
 800646c:	001a      	movs	r2, r3
 800646e:	19bb      	adds	r3, r7, r6
 8006470:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006472:	0025      	movs	r5, r4
 8006474:	197b      	adds	r3, r7, r5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	001c      	movs	r4, r3
 800647a:	197b      	adds	r3, r7, r5
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	0018      	movs	r0, r3
 8006480:	197b      	adds	r3, r7, r5
 8006482:	789b      	ldrb	r3, [r3, #2]
 8006484:	4a14      	ldr	r2, [pc, #80]	@ (80064d8 <ParseTime+0x10c>)
 8006486:	4915      	ldr	r1, [pc, #84]	@ (80064dc <ParseTime+0x110>)
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	9000      	str	r0, [sp, #0]
 800648c:	0023      	movs	r3, r4
 800648e:	2003      	movs	r0, #3
 8006490:	f006 ff90 	bl	800d3b4 <CreateLine>
  RTC_SetTime(&currentTime);
 8006494:	197b      	adds	r3, r7, r5
 8006496:	0018      	movs	r0, r3
 8006498:	f000 f824 	bl	80064e4 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800649c:	19bb      	adds	r3, r7, r6
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f846 	bl	8006530 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80064a4:	19bb      	adds	r3, r7, r6
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d101      	bne.n	80064b0 <ParseTime+0xe4>
    reset_fanCleaningDone();
 80064ac:	f002 fa00 	bl	80088b0 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <ParseTime+0x114>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <ParseTime+0x102>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80064b8:	230c      	movs	r3, #12
 80064ba:	18fa      	adds	r2, r7, r3
 80064bc:	2308      	movs	r3, #8
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	0011      	movs	r1, r2
 80064c2:	0018      	movs	r0, r3
 80064c4:	f000 f946 	bl	8006754 <makeTime>
 80064c8:	0002      	movs	r2, r0
 80064ca:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <ParseTime+0x114>)
 80064cc:	601a      	str	r2, [r3, #0]
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 80064ce:	46c0      	nop			@ (mov r8, r8)
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b009      	add	sp, #36	@ 0x24
 80064d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	080227dc 	.word	0x080227dc
 80064dc:	08022814 	.word	0x08022814
 80064e0:	20000cdc 	.word	0x20000cdc

080064e4 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80064fe:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <RTC_SetTime+0x40>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	0018      	movs	r0, r3
 8006508:	f00e fbd0 	bl	8014cac <HAL_RTC_SetTime>
 800650c:	1e03      	subs	r3, r0, #0
 800650e:	d005      	beq.n	800651c <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006510:	4a05      	ldr	r2, [pc, #20]	@ (8006528 <RTC_SetTime+0x44>)
 8006512:	4b06      	ldr	r3, [pc, #24]	@ (800652c <RTC_SetTime+0x48>)
 8006514:	0019      	movs	r1, r3
 8006516:	2001      	movs	r0, #1
 8006518:	f006 ff4c 	bl	800d3b4 <CreateLine>
    }
}
 800651c:	46c0      	nop			@ (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b002      	add	sp, #8
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000cd8 	.word	0x20000cd8
 8006528:	08022818 	.word	0x08022818
 800652c:	08022834 	.word	0x08022834

08006530 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006538:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <RTC_SetDate+0x30>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	0018      	movs	r0, r3
 8006542:	f00e fcbb 	bl	8014ebc <HAL_RTC_SetDate>
 8006546:	1e03      	subs	r3, r0, #0
 8006548:	d005      	beq.n	8006556 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 800654a:	4a06      	ldr	r2, [pc, #24]	@ (8006564 <RTC_SetDate+0x34>)
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <RTC_SetDate+0x38>)
 800654e:	0019      	movs	r1, r3
 8006550:	2001      	movs	r0, #1
 8006552:	f006 ff2f 	bl	800d3b4 <CreateLine>
    }
}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	46bd      	mov	sp, r7
 800655a:	b002      	add	sp, #8
 800655c:	bd80      	pop	{r7, pc}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	20000cd8 	.word	0x20000cd8
 8006564:	08022838 	.word	0x08022838
 8006568:	08022834 	.word	0x08022834

0800656c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006576:	4b11      	ldr	r3, [pc, #68]	@ (80065bc <RTC_GetTime+0x50>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	0018      	movs	r0, r3
 8006580:	f00e fc3e 	bl	8014e00 <HAL_RTC_GetTime>
 8006584:	1e03      	subs	r3, r0, #0
 8006586:	d005      	beq.n	8006594 <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 8006588:	4a0d      	ldr	r2, [pc, #52]	@ (80065c0 <RTC_GetTime+0x54>)
 800658a:	4b0e      	ldr	r3, [pc, #56]	@ (80065c4 <RTC_GetTime+0x58>)
 800658c:	0019      	movs	r1, r3
 800658e:	2001      	movs	r0, #1
 8006590:	f006 ff10 	bl	800d3b4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006594:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <RTC_GetTime+0x50>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	0018      	movs	r0, r3
 800659e:	f00e fd21 	bl	8014fe4 <HAL_RTC_GetDate>
 80065a2:	1e03      	subs	r3, r0, #0
 80065a4:	d005      	beq.n	80065b2 <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 80065a6:	4a08      	ldr	r2, [pc, #32]	@ (80065c8 <RTC_GetTime+0x5c>)
 80065a8:	4b06      	ldr	r3, [pc, #24]	@ (80065c4 <RTC_GetTime+0x58>)
 80065aa:	0019      	movs	r1, r3
 80065ac:	2001      	movs	r0, #1
 80065ae:	f006 ff01 	bl	800d3b4 <CreateLine>
    }
}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b002      	add	sp, #8
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	20000cd8 	.word	0x20000cd8
 80065c0:	08022854 	.word	0x08022854
 80065c4:	08022834 	.word	0x08022834
 80065c8:	08022870 	.word	0x08022870

080065cc <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80065d2:	003a      	movs	r2, r7
 80065d4:	1d3b      	adds	r3, r7, #4
 80065d6:	0011      	movs	r1, r2
 80065d8:	0018      	movs	r0, r3
 80065da:	f7ff ffc7 	bl	800656c <RTC_GetTime>
  return currentDate.WeekDay;
 80065de:	003b      	movs	r3, r7
 80065e0:	781b      	ldrb	r3, [r3, #0]
}
 80065e2:	0018      	movs	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	b006      	add	sp, #24
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80065f4:	4b10      	ldr	r3, [pc, #64]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f00e fef1 	bl	80153e0 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80065fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	22ff      	movs	r2, #255	@ 0xff
 8006608:	401a      	ands	r2, r3
 800660a:	4b0b      	ldr	r3, [pc, #44]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	490a      	ldr	r1, [pc, #40]	@ (800663c <RTC_SetWakeUpTimer+0x50>)
 8006612:	430a      	orrs	r2, r1
 8006614:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <RTC_SetWakeUpTimer+0x54>)
 8006618:	2280      	movs	r2, #128	@ 0x80
 800661a:	0352      	lsls	r2, r2, #13
 800661c:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800661e:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3b01      	subs	r3, #1
 8006626:	2204      	movs	r2, #4
 8006628:	0019      	movs	r1, r3
 800662a:	f00e fe01 	bl	8015230 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b002      	add	sp, #8
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	20000cd8 	.word	0x20000cd8
 800663c:	fffffb7f 	.word	0xfffffb7f
 8006640:	40010400 	.word	0x40010400

08006644 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006648:	4a0c      	ldr	r2, [pc, #48]	@ (800667c <Enter_Standby_Mode+0x38>)
 800664a:	4b0d      	ldr	r3, [pc, #52]	@ (8006680 <Enter_Standby_Mode+0x3c>)
 800664c:	0019      	movs	r1, r3
 800664e:	2003      	movs	r0, #3
 8006650:	f006 feb0 	bl	800d3b4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006654:	2064      	movs	r0, #100	@ 0x64
 8006656:	f007 fa55 	bl	800db04 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800665a:	4b0a      	ldr	r3, [pc, #40]	@ (8006684 <Enter_Standby_Mode+0x40>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	0018      	movs	r0, r3
 8006660:	f00e febe 	bl	80153e0 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006664:	f007 fa72 	bl	800db4c <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006668:	f00d fb1a 	bl	8013ca0 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 800666c:	f001 f908 	bl	8007880 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006670:	f007 fa7a 	bl	800db68 <HAL_ResumeTick>
}
 8006674:	46c0      	nop			@ (mov r8, r8)
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	080228bc 	.word	0x080228bc
 8006680:	08022814 	.word	0x08022814
 8006684:	20000cd8 	.word	0x20000cd8

08006688 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	0002      	movs	r2, r0
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	801a      	strh	r2, [r3, #0]
    // Schakel de clock voor de Power Controller in
//    __HAL_RCC_PWR_CLK_ENABLE();
  //just for sure disable the sen5x power supply
  sen5x_Power_Off();
 8006694:	f002 f8ee 	bl	8008874 <sen5x_Power_Off>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006698:	1dbb      	adds	r3, r7, #6
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	4a21      	ldr	r2, [pc, #132]	@ (8006724 <Enter_Stop_Mode+0x9c>)
 800669e:	4922      	ldr	r1, [pc, #136]	@ (8006728 <Enter_Stop_Mode+0xa0>)
 80066a0:	2003      	movs	r0, #3
 80066a2:	f006 fe87 	bl	800d3b4 <CreateLine>
  HAL_Delay(100);
 80066a6:	2064      	movs	r0, #100	@ 0x64
 80066a8:	f007 fa2c 	bl	800db04 <HAL_Delay>
  HAL_SuspendTick();
 80066ac:	f007 fa4e 	bl	800db4c <HAL_SuspendTick>
  //set wake up timer
  RTC_SetWakeUpTimer(sleepTime);
 80066b0:	1dbb      	adds	r3, r7, #6
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f7ff ff99 	bl	80065ec <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80066ba:	2101      	movs	r1, #1
 80066bc:	2001      	movs	r0, #1
 80066be:	f00d fa93 	bl	8013be8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80066c2:	f001 f8dd 	bl	8007880 <SystemClock_Config>
  if (enable_sen5x((uint32_t)sleepTime)) {
 80066c6:	1dbb      	adds	r3, r7, #6
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	0018      	movs	r0, r3
 80066cc:	f002 f86e 	bl	80087ac <enable_sen5x>
 80066d0:	1e03      	subs	r3, r0, #0
 80066d2:	d012      	beq.n	80066fa <Enter_Stop_Mode+0x72>
    showTime();
 80066d4:	f7ff fd44 	bl	8006160 <showTime>
    set_light_on_state();
 80066d8:	f002 fc8c 	bl	8008ff4 <set_light_on_state>
    RTC_SetWakeUpTimer(27); // go sleep for 27 seconds
 80066dc:	201b      	movs	r0, #27
 80066de:	f7ff ff85 	bl	80065ec <RTC_SetWakeUpTimer>
    Debug("Entering STOP mode for 27 seconds");
 80066e2:	4a12      	ldr	r2, [pc, #72]	@ (800672c <Enter_Stop_Mode+0xa4>)
 80066e4:	4b10      	ldr	r3, [pc, #64]	@ (8006728 <Enter_Stop_Mode+0xa0>)
 80066e6:	0019      	movs	r1, r3
 80066e8:	2003      	movs	r0, #3
 80066ea:	f006 fe63 	bl	800d3b4 <CreateLine>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80066ee:	2101      	movs	r1, #1
 80066f0:	2001      	movs	r0, #1
 80066f2:	f00d fa79 	bl	8013be8 <HAL_PWR_EnterSTOPMode>
    SystemClock_Config();
 80066f6:	f001 f8c3 	bl	8007880 <SystemClock_Config>
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 80066fa:	f007 fa35 	bl	800db68 <HAL_ResumeTick>
  showTime();
 80066fe:	f7ff fd2f 	bl	8006160 <showTime>
  setMeasStamp(300);
 8006702:	2396      	movs	r3, #150	@ 0x96
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	0018      	movs	r0, r3
 8006708:	f001 fa42 	bl	8007b90 <setMeasStamp>
  ESPTransmitDone = false;
 800670c:	4b08      	ldr	r3, [pc, #32]	@ (8006730 <Enter_Stop_Mode+0xa8>)
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
  setESPTimeStamp(4500);
 8006712:	4b08      	ldr	r3, [pc, #32]	@ (8006734 <Enter_Stop_Mode+0xac>)
 8006714:	0018      	movs	r0, r3
 8006716:	f7fd f84b 	bl	80037b0 <setESPTimeStamp>
}
 800671a:	46c0      	nop			@ (mov r8, r8)
 800671c:	46bd      	mov	sp, r7
 800671e:	b002      	add	sp, #8
 8006720:	bd80      	pop	{r7, pc}
 8006722:	46c0      	nop			@ (mov r8, r8)
 8006724:	080228e0 	.word	0x080228e0
 8006728:	08022814 	.word	0x08022814
 800672c:	08022904 	.word	0x08022904
 8006730:	2000054f 	.word	0x2000054f
 8006734:	00001194 	.word	0x00001194

08006738 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006740:	4b03      	ldr	r3, [pc, #12]	@ (8006750 <InitClock+0x18>)
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	601a      	str	r2, [r3, #0]
}
 8006746:	46c0      	nop			@ (mov r8, r8)
 8006748:	46bd      	mov	sp, r7
 800674a:	b002      	add	sp, #8
 800674c:	bd80      	pop	{r7, pc}
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	20000cd8 	.word	0x20000cd8

08006754 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	78db      	ldrb	r3, [r3, #3]
 8006762:	001a      	movs	r2, r3
 8006764:	0013      	movs	r3, r2
 8006766:	025b      	lsls	r3, r3, #9
 8006768:	189b      	adds	r3, r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	189b      	adds	r3, r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	189b      	adds	r3, r3, r2
 8006772:	011a      	lsls	r2, r3, #4
 8006774:	1ad2      	subs	r2, r2, r3
 8006776:	01d3      	lsls	r3, r2, #7
 8006778:	001a      	movs	r2, r3
 800677a:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	e028      	b.n	80067d4 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4a53      	ldr	r2, [pc, #332]	@ (80068d4 <makeTime+0x180>)
 8006786:	4293      	cmp	r3, r2
 8006788:	db21      	blt.n	80067ce <makeTime+0x7a>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a52      	ldr	r2, [pc, #328]	@ (80068d8 <makeTime+0x184>)
 800678e:	4694      	mov	ip, r2
 8006790:	4463      	add	r3, ip
 8006792:	001a      	movs	r2, r3
 8006794:	2303      	movs	r3, #3
 8006796:	4013      	ands	r3, r2
 8006798:	d119      	bne.n	80067ce <makeTime+0x7a>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a4e      	ldr	r2, [pc, #312]	@ (80068d8 <makeTime+0x184>)
 800679e:	4694      	mov	ip, r2
 80067a0:	4463      	add	r3, ip
 80067a2:	2164      	movs	r1, #100	@ 0x64
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7f9 fe6d 	bl	8000484 <__aeabi_idivmod>
 80067aa:	1e0b      	subs	r3, r1, #0
 80067ac:	d10a      	bne.n	80067c4 <makeTime+0x70>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a49      	ldr	r2, [pc, #292]	@ (80068d8 <makeTime+0x184>)
 80067b2:	4694      	mov	ip, r2
 80067b4:	4463      	add	r3, ip
 80067b6:	22c8      	movs	r2, #200	@ 0xc8
 80067b8:	0051      	lsls	r1, r2, #1
 80067ba:	0018      	movs	r0, r3
 80067bc:	f7f9 fe62 	bl	8000484 <__aeabi_idivmod>
 80067c0:	1e0b      	subs	r3, r1, #0
 80067c2:	d104      	bne.n	80067ce <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4a45      	ldr	r2, [pc, #276]	@ (80068dc <makeTime+0x188>)
 80067c8:	4694      	mov	ip, r2
 80067ca:	4463      	add	r3, ip
 80067cc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	78db      	ldrb	r3, [r3, #3]
 80067d8:	001a      	movs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4293      	cmp	r3, r2
 80067de:	dbd0      	blt.n	8006782 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 80067e0:	2301      	movs	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e03c      	b.n	8006860 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d125      	bne.n	8006838 <makeTime+0xe4>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	78db      	ldrb	r3, [r3, #3]
 80067f0:	4a39      	ldr	r2, [pc, #228]	@ (80068d8 <makeTime+0x184>)
 80067f2:	4694      	mov	ip, r2
 80067f4:	4463      	add	r3, ip
 80067f6:	001a      	movs	r2, r3
 80067f8:	2303      	movs	r3, #3
 80067fa:	4013      	ands	r3, r2
 80067fc:	d11c      	bne.n	8006838 <makeTime+0xe4>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	78db      	ldrb	r3, [r3, #3]
 8006802:	4a35      	ldr	r2, [pc, #212]	@ (80068d8 <makeTime+0x184>)
 8006804:	4694      	mov	ip, r2
 8006806:	4463      	add	r3, ip
 8006808:	2164      	movs	r1, #100	@ 0x64
 800680a:	0018      	movs	r0, r3
 800680c:	f7f9 fe3a 	bl	8000484 <__aeabi_idivmod>
 8006810:	1e0b      	subs	r3, r1, #0
 8006812:	d10b      	bne.n	800682c <makeTime+0xd8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	78db      	ldrb	r3, [r3, #3]
 8006818:	4a2f      	ldr	r2, [pc, #188]	@ (80068d8 <makeTime+0x184>)
 800681a:	4694      	mov	ip, r2
 800681c:	4463      	add	r3, ip
 800681e:	22c8      	movs	r2, #200	@ 0xc8
 8006820:	0051      	lsls	r1, r2, #1
 8006822:	0018      	movs	r0, r3
 8006824:	f7f9 fe2e 	bl	8000484 <__aeabi_idivmod>
 8006828:	1e0b      	subs	r3, r1, #0
 800682a:	d105      	bne.n	8006838 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4a2c      	ldr	r2, [pc, #176]	@ (80068e0 <makeTime+0x18c>)
 8006830:	4694      	mov	ip, r2
 8006832:	4463      	add	r3, ip
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	e010      	b.n	800685a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	4a29      	ldr	r2, [pc, #164]	@ (80068e4 <makeTime+0x190>)
 800683e:	5cd3      	ldrb	r3, [r2, r3]
 8006840:	001a      	movs	r2, r3
 8006842:	0013      	movs	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	189b      	adds	r3, r3, r2
 8006848:	011a      	lsls	r2, r3, #4
 800684a:	1ad2      	subs	r2, r2, r3
 800684c:	0113      	lsls	r3, r2, #4
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	01db      	lsls	r3, r3, #7
 8006852:	001a      	movs	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	189b      	adds	r3, r3, r2
 8006858:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	001a      	movs	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4293      	cmp	r3, r2
 800686a:	dbbc      	blt.n	80067e6 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	3b01      	subs	r3, #1
 8006872:	001a      	movs	r2, r3
 8006874:	0013      	movs	r3, r2
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	189b      	adds	r3, r3, r2
 800687a:	011a      	lsls	r2, r3, #4
 800687c:	1ad2      	subs	r2, r2, r3
 800687e:	0113      	lsls	r3, r2, #4
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	01db      	lsls	r3, r3, #7
 8006884:	001a      	movs	r2, r3
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	189b      	adds	r3, r3, r2
 800688a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	001a      	movs	r2, r3
 8006892:	0013      	movs	r3, r2
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	011a      	lsls	r2, r3, #4
 800689a:	1ad2      	subs	r2, r2, r3
 800689c:	0113      	lsls	r3, r2, #4
 800689e:	001a      	movs	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	001a      	movs	r2, r3
 80068ac:	0013      	movs	r3, r2
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	001a      	movs	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	189b      	adds	r3, r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	789b      	ldrb	r3, [r3, #2]
 80068c0:	001a      	movs	r2, r3
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	189b      	adds	r3, r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
  return seconds;
 80068c8:	68bb      	ldr	r3, [r7, #8]
}
 80068ca:	0018      	movs	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b004      	add	sp, #16
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	fffff84f 	.word	0xfffff84f
 80068d8:	000007b2 	.word	0x000007b2
 80068dc:	00015180 	.word	0x00015180
 80068e0:	00263b80 	.word	0x00263b80
 80068e4:	080239a4 	.word	0x080239a4

080068e8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80068ee:	003b      	movs	r3, r7
 80068f0:	0018      	movs	r0, r3
 80068f2:	2308      	movs	r3, #8
 80068f4:	001a      	movs	r2, r3
 80068f6:	2100      	movs	r1, #0
 80068f8:	f018 fae2 	bl	801eec0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80068fc:	4b30      	ldr	r3, [pc, #192]	@ (80069c0 <MX_ADC_Init+0xd8>)
 80068fe:	4a31      	ldr	r2, [pc, #196]	@ (80069c4 <MX_ADC_Init+0xdc>)
 8006900:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006902:	4b2f      	ldr	r3, [pc, #188]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006904:	2200      	movs	r2, #0
 8006906:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006908:	4b2d      	ldr	r3, [pc, #180]	@ (80069c0 <MX_ADC_Init+0xd8>)
 800690a:	22c0      	movs	r2, #192	@ 0xc0
 800690c:	0612      	lsls	r2, r2, #24
 800690e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006910:	4b2b      	ldr	r3, [pc, #172]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006916:	4b2a      	ldr	r3, [pc, #168]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006918:	2200      	movs	r2, #0
 800691a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800691c:	4b28      	ldr	r3, [pc, #160]	@ (80069c0 <MX_ADC_Init+0xd8>)
 800691e:	2201      	movs	r2, #1
 8006920:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006922:	4b27      	ldr	r3, [pc, #156]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006924:	2200      	movs	r2, #0
 8006926:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006928:	4b25      	ldr	r3, [pc, #148]	@ (80069c0 <MX_ADC_Init+0xd8>)
 800692a:	2220      	movs	r2, #32
 800692c:	2100      	movs	r1, #0
 800692e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006930:	4b23      	ldr	r3, [pc, #140]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006932:	2221      	movs	r2, #33	@ 0x21
 8006934:	2101      	movs	r1, #1
 8006936:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006938:	4b21      	ldr	r3, [pc, #132]	@ (80069c0 <MX_ADC_Init+0xd8>)
 800693a:	2200      	movs	r2, #0
 800693c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800693e:	4b20      	ldr	r3, [pc, #128]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006940:	22c2      	movs	r2, #194	@ 0xc2
 8006942:	32ff      	adds	r2, #255	@ 0xff
 8006944:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006946:	4b1e      	ldr	r3, [pc, #120]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006948:	222c      	movs	r2, #44	@ 0x2c
 800694a:	2100      	movs	r1, #0
 800694c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800694e:	4b1c      	ldr	r3, [pc, #112]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006950:	2204      	movs	r2, #4
 8006952:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006954:	4b1a      	ldr	r3, [pc, #104]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800695a:	4b19      	ldr	r3, [pc, #100]	@ (80069c0 <MX_ADC_Init+0xd8>)
 800695c:	2200      	movs	r2, #0
 800695e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006960:	4b17      	ldr	r3, [pc, #92]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006962:	2200      	movs	r2, #0
 8006964:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006966:	4b16      	ldr	r3, [pc, #88]	@ (80069c0 <MX_ADC_Init+0xd8>)
 8006968:	2200      	movs	r2, #0
 800696a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800696c:	4b14      	ldr	r3, [pc, #80]	@ (80069c0 <MX_ADC_Init+0xd8>)
 800696e:	0018      	movs	r0, r3
 8006970:	f007 f926 	bl	800dbc0 <HAL_ADC_Init>
 8006974:	1e03      	subs	r3, r0, #0
 8006976:	d001      	beq.n	800697c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006978:	f001 f8ba 	bl	8007af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800697c:	003b      	movs	r3, r7
 800697e:	4a12      	ldr	r2, [pc, #72]	@ (80069c8 <MX_ADC_Init+0xe0>)
 8006980:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006982:	003b      	movs	r3, r7
 8006984:	2280      	movs	r2, #128	@ 0x80
 8006986:	0152      	lsls	r2, r2, #5
 8006988:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800698a:	003a      	movs	r2, r7
 800698c:	4b0c      	ldr	r3, [pc, #48]	@ (80069c0 <MX_ADC_Init+0xd8>)
 800698e:	0011      	movs	r1, r2
 8006990:	0018      	movs	r0, r3
 8006992:	f007 fb85 	bl	800e0a0 <HAL_ADC_ConfigChannel>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d001      	beq.n	800699e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800699a:	f001 f8a9 	bl	8007af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800699e:	003b      	movs	r3, r7
 80069a0:	4a0a      	ldr	r2, [pc, #40]	@ (80069cc <MX_ADC_Init+0xe4>)
 80069a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80069a4:	003a      	movs	r2, r7
 80069a6:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <MX_ADC_Init+0xd8>)
 80069a8:	0011      	movs	r1, r2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f007 fb78 	bl	800e0a0 <HAL_ADC_ConfigChannel>
 80069b0:	1e03      	subs	r3, r0, #0
 80069b2:	d001      	beq.n	80069b8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80069b4:	f001 f89c 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80069b8:	46c0      	nop			@ (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000ce0 	.word	0x20000ce0
 80069c4:	40012400 	.word	0x40012400
 80069c8:	38004000 	.word	0x38004000
 80069cc:	3c008000 	.word	0x3c008000

080069d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80069d0:	b590      	push	{r4, r7, lr}
 80069d2:	b089      	sub	sp, #36	@ 0x24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069d8:	240c      	movs	r4, #12
 80069da:	193b      	adds	r3, r7, r4
 80069dc:	0018      	movs	r0, r3
 80069de:	2314      	movs	r3, #20
 80069e0:	001a      	movs	r2, r3
 80069e2:	2100      	movs	r1, #0
 80069e4:	f018 fa6c 	bl	801eec0 <memset>
  if(adcHandle->Instance==ADC1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a14      	ldr	r2, [pc, #80]	@ (8006a40 <HAL_ADC_MspInit+0x70>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d121      	bne.n	8006a36 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80069f2:	4b14      	ldr	r3, [pc, #80]	@ (8006a44 <HAL_ADC_MspInit+0x74>)
 80069f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069f6:	4b13      	ldr	r3, [pc, #76]	@ (8006a44 <HAL_ADC_MspInit+0x74>)
 80069f8:	2180      	movs	r1, #128	@ 0x80
 80069fa:	0089      	lsls	r1, r1, #2
 80069fc:	430a      	orrs	r2, r1
 80069fe:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a00:	4b10      	ldr	r3, [pc, #64]	@ (8006a44 <HAL_ADC_MspInit+0x74>)
 8006a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a04:	4b0f      	ldr	r3, [pc, #60]	@ (8006a44 <HAL_ADC_MspInit+0x74>)
 8006a06:	2104      	movs	r1, #4
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <HAL_ADC_MspInit+0x74>)
 8006a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a10:	2204      	movs	r2, #4
 8006a12:	4013      	ands	r3, r2
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006a18:	193b      	adds	r3, r7, r4
 8006a1a:	2230      	movs	r2, #48	@ 0x30
 8006a1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a1e:	193b      	adds	r3, r7, r4
 8006a20:	2203      	movs	r2, #3
 8006a22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	193b      	adds	r3, r7, r4
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a2a:	193b      	adds	r3, r7, r4
 8006a2c:	4a06      	ldr	r2, [pc, #24]	@ (8006a48 <HAL_ADC_MspInit+0x78>)
 8006a2e:	0019      	movs	r1, r3
 8006a30:	0010      	movs	r0, r2
 8006a32:	f008 f93d 	bl	800ecb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006a36:	46c0      	nop			@ (mov r8, r8)
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	b009      	add	sp, #36	@ 0x24
 8006a3c:	bd90      	pop	{r4, r7, pc}
 8006a3e:	46c0      	nop			@ (mov r8, r8)
 8006a40:	40012400 	.word	0x40012400
 8006a44:	40021000 	.word	0x40021000
 8006a48:	50000800 	.word	0x50000800

08006a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a52:	4b10      	ldr	r3, [pc, #64]	@ (8006a94 <MX_DMA_Init+0x48>)
 8006a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a56:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <MX_DMA_Init+0x48>)
 8006a58:	2101      	movs	r1, #1
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <MX_DMA_Init+0x48>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	2201      	movs	r2, #1
 8006a64:	4013      	ands	r3, r2
 8006a66:	607b      	str	r3, [r7, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	200a      	movs	r0, #10
 8006a70:	f007 fcd0 	bl	800e414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006a74:	200a      	movs	r0, #10
 8006a76:	f007 fce2 	bl	800e43e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2103      	movs	r1, #3
 8006a7e:	200b      	movs	r0, #11
 8006a80:	f007 fcc8 	bl	800e414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006a84:	200b      	movs	r0, #11
 8006a86:	f007 fcda 	bl	800e43e <HAL_NVIC_EnableIRQ>

}
 8006a8a:	46c0      	nop			@ (mov r8, r8)
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b002      	add	sp, #8
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	40021000 	.word	0x40021000

08006a98 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa8:	d901      	bls.n	8006aae <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006aaa:	237f      	movs	r3, #127	@ 0x7f
 8006aac:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006aae:	2017      	movs	r0, #23
 8006ab0:	183b      	adds	r3, r7, r0
 8006ab2:	490d      	ldr	r1, [pc, #52]	@ (8006ae8 <accessLUT10log10+0x50>)
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	188a      	adds	r2, r1, r2
 8006ab8:	7812      	ldrb	r2, [r2, #0]
 8006aba:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006abc:	0001      	movs	r1, r0
 8006abe:	187b      	adds	r3, r7, r1
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2206      	movs	r2, #6
 8006ac4:	4113      	asrs	r3, r2
 8006ac6:	001a      	movs	r2, r3
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2106      	movs	r1, #6
 8006ad6:	408b      	lsls	r3, r1
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	601a      	str	r2, [r3, #0]
}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	b006      	add	sp, #24
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	080239b0 	.word	0x080239b0

08006aec <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006aec:	b5b0      	push	{r4, r5, r7, lr}
 8006aee:	b090      	sub	sp, #64	@ 0x40
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6138      	str	r0, [r7, #16]
 8006af4:	6179      	str	r1, [r7, #20]
 8006af6:	60fa      	str	r2, [r7, #12]
 8006af8:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006afa:	2308      	movs	r3, #8
 8006afc:	001a      	movs	r2, r3
 8006afe:	3a20      	subs	r2, #32
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	db03      	blt.n	8006b0c <efficient10log10+0x20>
 8006b04:	2101      	movs	r1, #1
 8006b06:	4091      	lsls	r1, r2
 8006b08:	000d      	movs	r5, r1
 8006b0a:	e008      	b.n	8006b1e <efficient10log10+0x32>
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	2101      	movs	r1, #1
 8006b12:	40d1      	lsrs	r1, r2
 8006b14:	000a      	movs	r2, r1
 8006b16:	2100      	movs	r1, #0
 8006b18:	4099      	lsls	r1, r3
 8006b1a:	000d      	movs	r5, r1
 8006b1c:	4315      	orrs	r5, r2
 8006b1e:	2201      	movs	r2, #1
 8006b20:	409a      	lsls	r2, r3
 8006b22:	0014      	movs	r4, r2
 8006b24:	2201      	movs	r2, #1
 8006b26:	4252      	negs	r2, r2
 8006b28:	17d3      	asrs	r3, r2, #31
 8006b2a:	1912      	adds	r2, r2, r4
 8006b2c:	416b      	adcs	r3, r5
 8006b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8006b32:	2336      	movs	r3, #54	@ 0x36
 8006b34:	2208      	movs	r2, #8
 8006b36:	189b      	adds	r3, r3, r2
 8006b38:	19db      	adds	r3, r3, r7
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006b3e:	e017      	b.n	8006b70 <efficient10log10+0x84>
    {
        P = P >> 1;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	07db      	lsls	r3, r3, #31
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0852      	lsrs	r2, r2, #1
 8006b48:	603a      	str	r2, [r7, #0]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	603a      	str	r2, [r7, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	085b      	lsrs	r3, r3, #1
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	687c      	ldr	r4, [r7, #4]
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	617c      	str	r4, [r7, #20]
        bShift++;
 8006b5e:	2136      	movs	r1, #54	@ 0x36
 8006b60:	2008      	movs	r0, #8
 8006b62:	180b      	adds	r3, r1, r0
 8006b64:	19db      	adds	r3, r3, r7
 8006b66:	881a      	ldrh	r2, [r3, #0]
 8006b68:	180b      	adds	r3, r1, r0
 8006b6a:	19db      	adds	r3, r3, r7
 8006b6c:	3201      	adds	r2, #1
 8006b6e:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d8e3      	bhi.n	8006b40 <efficient10log10+0x54>
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d103      	bne.n	8006b88 <efficient10log10+0x9c>
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d8db      	bhi.n	8006b40 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	2101      	movs	r1, #1
 8006b90:	4099      	lsls	r1, r3
 8006b92:	000b      	movs	r3, r1
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8006ba0:	231c      	movs	r3, #28
 8006ba2:	2408      	movs	r4, #8
 8006ba4:	191b      	adds	r3, r3, r4
 8006ba6:	19da      	adds	r2, r3, r7
 8006ba8:	2320      	movs	r3, #32
 8006baa:	191b      	adds	r3, r3, r4
 8006bac:	19d9      	adds	r1, r3, r7
 8006bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7ff ff71 	bl	8006a98 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006bb6:	2215      	movs	r2, #21
 8006bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bba:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8006bbc:	2036      	movs	r0, #54	@ 0x36
 8006bbe:	1902      	adds	r2, r0, r4
 8006bc0:	19d2      	adds	r2, r2, r7
 8006bc2:	8812      	ldrh	r2, [r2, #0]
 8006bc4:	2103      	movs	r1, #3
 8006bc6:	434a      	muls	r2, r1
 8006bc8:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006bca:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006bcc:	0021      	movs	r1, r4
 8006bce:	1843      	adds	r3, r0, r1
 8006bd0:	19db      	adds	r3, r3, r7
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4353      	muls	r3, r2
 8006bd8:	2203      	movs	r2, #3
 8006bda:	4113      	asrs	r3, r2
 8006bdc:	001a      	movs	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8006be2:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8006be4:	2314      	movs	r3, #20
 8006be6:	185b      	adds	r3, r3, r1
 8006be8:	19da      	adds	r2, r3, r7
 8006bea:	2318      	movs	r3, #24
 8006bec:	185b      	adds	r3, r3, r1
 8006bee:	19db      	adds	r3, r3, r7
 8006bf0:	0011      	movs	r1, r2
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f000 f80a 	bl	8006c0c <correctIntFracNumber>
    integerPart[0] = intPart;
 8006bf8:	6a3a      	ldr	r2, [r7, #32]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	601a      	str	r2, [r3, #0]
}
 8006c04:	46c0      	nop			@ (mov r8, r8)
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b010      	add	sp, #64	@ 0x40
 8006c0a:	bdb0      	pop	{r4, r5, r7, pc}

08006c0c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8006c16:	e00a      	b.n	8006c2e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b0a      	subs	r3, #10
 8006c28:	001a      	movs	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b09      	cmp	r3, #9
 8006c34:	dcf0      	bgt.n	8006c18 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8006c36:	e00a      	b.n	8006c4e <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	1e5a      	subs	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	330a      	adds	r3, #10
 8006c48:	001a      	movs	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3309      	adds	r3, #9
 8006c54:	dbf0      	blt.n	8006c38 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	da0f      	bge.n	8006c7e <correctIntFracNumber+0x72>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	dd0b      	ble.n	8006c7e <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3b0a      	subs	r3, #10
 8006c76:	001a      	movs	r2, r3
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006c7c:	e012      	b.n	8006ca4 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dd0e      	ble.n	8006ca4 <correctIntFracNumber+0x98>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da0a      	bge.n	8006ca4 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	1e5a      	subs	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330a      	adds	r3, #10
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	46c0      	nop			@ (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd80      	pop	{r7, pc}

08006cac <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8006cba:	4b0c      	ldr	r3, [pc, #48]	@ (8006cec <Gadget_Init+0x40>)
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	f001 fb09 	bl	80082d4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f000 ff87 	bl	8007bdc <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7fc fe8d 	bl	80039f0 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8006cd6:	4a06      	ldr	r2, [pc, #24]	@ (8006cf0 <Gadget_Init+0x44>)
 8006cd8:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <Gadget_Init+0x48>)
 8006cda:	0019      	movs	r1, r3
 8006cdc:	2003      	movs	r0, #3
 8006cde:	f006 fb69 	bl	800d3b4 <CreateLine>
}
 8006ce2:	46c0      	nop			@ (mov r8, r8)
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	b004      	add	sp, #16
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	46c0      	nop			@ (mov r8, r8)
 8006cec:	2000007c 	.word	0x2000007c
 8006cf0:	08022928 	.word	0x08022928
 8006cf4:	0802293c 	.word	0x0802293c

08006cf8 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
  Meas_Test();
 8006cfc:	f001 f8a6 	bl	8007e4c <Meas_Test>
}
 8006d00:	46c0      	nop			@ (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <UpkeepGadget>:

bool UpkeepGadget() {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8006d0e:	f001 fa59 	bl	80081c4 <Meas_Upkeep>
 8006d12:	0003      	movs	r3, r0
 8006d14:	001a      	movs	r2, r3
 8006d16:	4b0f      	ldr	r3, [pc, #60]	@ (8006d54 <UpkeepGadget+0x4c>)
 8006d18:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8006d1a:	f001 f93b 	bl	8007f94 <Mic_Upkeep>
 8006d1e:	0003      	movs	r3, r0
 8006d20:	001a      	movs	r2, r3
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <UpkeepGadget+0x50>)
 8006d24:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8006d26:	4b0b      	ldr	r3, [pc, #44]	@ (8006d54 <UpkeepGadget+0x4c>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d103      	bne.n	8006d36 <UpkeepGadget+0x2e>
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d58 <UpkeepGadget+0x50>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d001      	beq.n	8006d3a <UpkeepGadget+0x32>
 8006d36:	2201      	movs	r2, #1
 8006d38:	e000      	b.n	8006d3c <UpkeepGadget+0x34>
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	1dfb      	adds	r3, r7, #7
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	2101      	movs	r1, #1
 8006d44:	400a      	ands	r2, r1
 8006d46:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006d48:	1dfb      	adds	r3, r7, #7
 8006d4a:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	b002      	add	sp, #8
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000d3c 	.word	0x20000d3c
 8006d58:	20000d3d 	.word	0x20000d3d

08006d5c <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	0011      	movs	r1, r2
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f003 ff05 	bl	800ab7c <SGP_Init>
}
 8006d72:	46c0      	nop			@ (mov r8, r8)
 8006d74:	46bd      	mov	sp, r7
 8006d76:	b002      	add	sp, #8
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006d7e:	f003 ff17 	bl	800abb0 <SGP_StartMeasurement>
}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f003 ff7c 	bl	800ac90 <SGP_GetMeasurementValues>
 8006d98:	0003      	movs	r3, r0
}
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b002      	add	sp, #8
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8006da2:	b580      	push	{r7, lr}
 8006da4:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8006da6:	f004 f981 	bl	800b0ac <SGP_DeviceConnected>
 8006daa:	0003      	movs	r3, r0
}
 8006dac:	0018      	movs	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006db4:	b590      	push	{r4, r7, lr}
 8006db6:	b08b      	sub	sp, #44	@ 0x2c
 8006db8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dba:	2414      	movs	r4, #20
 8006dbc:	193b      	adds	r3, r7, r4
 8006dbe:	0018      	movs	r0, r3
 8006dc0:	2314      	movs	r3, #20
 8006dc2:	001a      	movs	r2, r3
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	f018 f87b 	bl	801eec0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dca:	4b7c      	ldr	r3, [pc, #496]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dce:	4b7b      	ldr	r3, [pc, #492]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006dd0:	2104      	movs	r1, #4
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006dd6:	4b79      	ldr	r3, [pc, #484]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	2204      	movs	r2, #4
 8006ddc:	4013      	ands	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006de2:	4b76      	ldr	r3, [pc, #472]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de6:	4b75      	ldr	r3, [pc, #468]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006de8:	2180      	movs	r1, #128	@ 0x80
 8006dea:	430a      	orrs	r2, r1
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006dee:	4b73      	ldr	r3, [pc, #460]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df2:	2280      	movs	r2, #128	@ 0x80
 8006df4:	4013      	ands	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
 8006df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dfa:	4b70      	ldr	r3, [pc, #448]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e00:	2101      	movs	r1, #1
 8006e02:	430a      	orrs	r2, r1
 8006e04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e06:	4b6d      	ldr	r3, [pc, #436]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e12:	4b6a      	ldr	r3, [pc, #424]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	4b69      	ldr	r3, [pc, #420]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e18:	2102      	movs	r1, #2
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e1e:	4b67      	ldr	r3, [pc, #412]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e22:	2202      	movs	r2, #2
 8006e24:	4013      	ands	r3, r2
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e2a:	4b64      	ldr	r3, [pc, #400]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e2e:	4b63      	ldr	r3, [pc, #396]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e30:	2108      	movs	r1, #8
 8006e32:	430a      	orrs	r2, r1
 8006e34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e36:	4b61      	ldr	r3, [pc, #388]	@ (8006fbc <MX_GPIO_Init+0x208>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006e42:	4b5f      	ldr	r3, [pc, #380]	@ (8006fc0 <MX_GPIO_Init+0x20c>)
 8006e44:	2201      	movs	r2, #1
 8006e46:	2101      	movs	r1, #1
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f008 f8cc 	bl	800efe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8006fc0 <MX_GPIO_Init+0x20c>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	2102      	movs	r1, #2
 8006e54:	0018      	movs	r0, r3
 8006e56:	f008 f8c6 	bl	800efe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006e5a:	495a      	ldr	r1, [pc, #360]	@ (8006fc4 <MX_GPIO_Init+0x210>)
 8006e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8006fc8 <MX_GPIO_Init+0x214>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	0018      	movs	r0, r3
 8006e62:	f008 f8c0 	bl	800efe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006e66:	2380      	movs	r3, #128	@ 0x80
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	4858      	ldr	r0, [pc, #352]	@ (8006fcc <MX_GPIO_Init+0x218>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	0019      	movs	r1, r3
 8006e70:	f008 f8b9 	bl	800efe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006e74:	2380      	movs	r3, #128	@ 0x80
 8006e76:	015b      	lsls	r3, r3, #5
 8006e78:	4854      	ldr	r0, [pc, #336]	@ (8006fcc <MX_GPIO_Init+0x218>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	f008 f8b2 	bl	800efe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8006e82:	193b      	adds	r3, r7, r4
 8006e84:	4a52      	ldr	r2, [pc, #328]	@ (8006fd0 <MX_GPIO_Init+0x21c>)
 8006e86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e88:	193b      	adds	r3, r7, r4
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e8e:	193b      	adds	r3, r7, r4
 8006e90:	2200      	movs	r2, #0
 8006e92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e94:	193b      	adds	r3, r7, r4
 8006e96:	4a4d      	ldr	r2, [pc, #308]	@ (8006fcc <MX_GPIO_Init+0x218>)
 8006e98:	0019      	movs	r1, r3
 8006e9a:	0010      	movs	r0, r2
 8006e9c:	f007 ff08 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006ea0:	193b      	adds	r3, r7, r4
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ea6:	193b      	adds	r3, r7, r4
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eac:	193b      	adds	r3, r7, r4
 8006eae:	2200      	movs	r2, #0
 8006eb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb2:	193b      	adds	r3, r7, r4
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006eb8:	193b      	adds	r3, r7, r4
 8006eba:	4a41      	ldr	r2, [pc, #260]	@ (8006fc0 <MX_GPIO_Init+0x20c>)
 8006ebc:	0019      	movs	r1, r3
 8006ebe:	0010      	movs	r0, r2
 8006ec0:	f007 fef6 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006ec4:	193b      	adds	r3, r7, r4
 8006ec6:	2270      	movs	r2, #112	@ 0x70
 8006ec8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eca:	193b      	adds	r3, r7, r4
 8006ecc:	2203      	movs	r2, #3
 8006ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed0:	193b      	adds	r3, r7, r4
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ed6:	193a      	adds	r2, r7, r4
 8006ed8:	23a0      	movs	r3, #160	@ 0xa0
 8006eda:	05db      	lsls	r3, r3, #23
 8006edc:	0011      	movs	r1, r2
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f007 fee6 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8006ee4:	193b      	adds	r3, r7, r4
 8006ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8006fd4 <MX_GPIO_Init+0x220>)
 8006ee8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eea:	193b      	adds	r3, r7, r4
 8006eec:	2200      	movs	r2, #0
 8006eee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef0:	193b      	adds	r3, r7, r4
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef6:	193a      	adds	r2, r7, r4
 8006ef8:	23a0      	movs	r3, #160	@ 0xa0
 8006efa:	05db      	lsls	r3, r3, #23
 8006efc:	0011      	movs	r1, r2
 8006efe:	0018      	movs	r0, r3
 8006f00:	f007 fed6 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8006f04:	193b      	adds	r3, r7, r4
 8006f06:	4a2f      	ldr	r2, [pc, #188]	@ (8006fc4 <MX_GPIO_Init+0x210>)
 8006f08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f0a:	193b      	adds	r3, r7, r4
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f10:	193b      	adds	r3, r7, r4
 8006f12:	2200      	movs	r2, #0
 8006f14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f16:	193b      	adds	r3, r7, r4
 8006f18:	2200      	movs	r2, #0
 8006f1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f1c:	193b      	adds	r3, r7, r4
 8006f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc8 <MX_GPIO_Init+0x214>)
 8006f20:	0019      	movs	r1, r3
 8006f22:	0010      	movs	r0, r2
 8006f24:	f007 fec4 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8006f28:	193b      	adds	r3, r7, r4
 8006f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8006fd8 <MX_GPIO_Init+0x224>)
 8006f2c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f2e:	193b      	adds	r3, r7, r4
 8006f30:	2203      	movs	r2, #3
 8006f32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f34:	193b      	adds	r3, r7, r4
 8006f36:	2200      	movs	r2, #0
 8006f38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f3a:	193b      	adds	r3, r7, r4
 8006f3c:	4a22      	ldr	r2, [pc, #136]	@ (8006fc8 <MX_GPIO_Init+0x214>)
 8006f3e:	0019      	movs	r1, r3
 8006f40:	0010      	movs	r0, r2
 8006f42:	f007 feb5 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006f46:	0021      	movs	r1, r4
 8006f48:	187b      	adds	r3, r7, r1
 8006f4a:	2280      	movs	r2, #128	@ 0x80
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f50:	000c      	movs	r4, r1
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	2200      	movs	r2, #0
 8006f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f58:	193b      	adds	r3, r7, r4
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006f5e:	193b      	adds	r3, r7, r4
 8006f60:	4a1a      	ldr	r2, [pc, #104]	@ (8006fcc <MX_GPIO_Init+0x218>)
 8006f62:	0019      	movs	r1, r3
 8006f64:	0010      	movs	r0, r2
 8006f66:	f007 fea3 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006f6a:	0021      	movs	r1, r4
 8006f6c:	187b      	adds	r3, r7, r1
 8006f6e:	22c0      	movs	r2, #192	@ 0xc0
 8006f70:	0152      	lsls	r2, r2, #5
 8006f72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f74:	000c      	movs	r4, r1
 8006f76:	193b      	adds	r3, r7, r4
 8006f78:	2201      	movs	r2, #1
 8006f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7c:	193b      	adds	r3, r7, r4
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f82:	193b      	adds	r3, r7, r4
 8006f84:	2200      	movs	r2, #0
 8006f86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f88:	193b      	adds	r3, r7, r4
 8006f8a:	4a10      	ldr	r2, [pc, #64]	@ (8006fcc <MX_GPIO_Init+0x218>)
 8006f8c:	0019      	movs	r1, r3
 8006f8e:	0010      	movs	r0, r2
 8006f90:	f007 fe8e 	bl	800ecb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006f94:	0021      	movs	r1, r4
 8006f96:	187b      	adds	r3, r7, r1
 8006f98:	2204      	movs	r2, #4
 8006f9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f9c:	187b      	adds	r3, r7, r1
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fa2:	187b      	adds	r3, r7, r1
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006fa8:	187b      	adds	r3, r7, r1
 8006faa:	4a0c      	ldr	r2, [pc, #48]	@ (8006fdc <MX_GPIO_Init+0x228>)
 8006fac:	0019      	movs	r1, r3
 8006fae:	0010      	movs	r0, r2
 8006fb0:	f007 fe7e 	bl	800ecb0 <HAL_GPIO_Init>

}
 8006fb4:	46c0      	nop			@ (mov r8, r8)
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	b00b      	add	sp, #44	@ 0x2c
 8006fba:	bd90      	pop	{r4, r7, pc}
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	50001c00 	.word	0x50001c00
 8006fc4:	00000301 	.word	0x00000301
 8006fc8:	50000400 	.word	0x50000400
 8006fcc:	50000800 	.word	0x50000800
 8006fd0:	0000200c 	.word	0x0000200c
 8006fd4:	00008180 	.word	0x00008180
 8006fd8:	0000403e 	.word	0x0000403e
 8006fdc:	50000c00 	.word	0x50000c00

08006fe0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2100      	movs	r1, #0
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f00e fb7a 	bl	80156e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2108      	movs	r1, #8
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f00e fb75 	bl	80156e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	210c      	movs	r1, #12
 8007002:	0018      	movs	r0, r3
 8007004:	f00e fb70 	bl	80156e8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007008:	2380      	movs	r3, #128	@ 0x80
 800700a:	05db      	lsls	r3, r3, #23
 800700c:	22fa      	movs	r2, #250	@ 0xfa
 800700e:	0112      	lsls	r2, r2, #4
 8007010:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007012:	2380      	movs	r3, #128	@ 0x80
 8007014:	05db      	lsls	r3, r3, #23
 8007016:	22fa      	movs	r2, #250	@ 0xfa
 8007018:	0112      	lsls	r2, r2, #4
 800701a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	05db      	lsls	r3, r3, #23
 8007020:	22fa      	movs	r2, #250	@ 0xfa
 8007022:	0112      	lsls	r2, r2, #4
 8007024:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007026:	2380      	movs	r3, #128	@ 0x80
 8007028:	05db      	lsls	r3, r3, #23
 800702a:	22fa      	movs	r2, #250	@ 0xfa
 800702c:	0112      	lsls	r2, r2, #4
 800702e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2100      	movs	r1, #0
 8007034:	0018      	movs	r0, r3
 8007036:	f00e fb57 	bl	80156e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2104      	movs	r1, #4
 800703e:	0018      	movs	r0, r3
 8007040:	f00e fb52 	bl	80156e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2108      	movs	r1, #8
 8007048:	0018      	movs	r0, r3
 800704a:	f00e fb4d 	bl	80156e8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800704e:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <GPIO_InitPWMLEDs+0x98>)
 8007050:	22fa      	movs	r2, #250	@ 0xfa
 8007052:	0112      	lsls	r2, r2, #4
 8007054:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007056:	4b08      	ldr	r3, [pc, #32]	@ (8007078 <GPIO_InitPWMLEDs+0x98>)
 8007058:	22fa      	movs	r2, #250	@ 0xfa
 800705a:	0112      	lsls	r2, r2, #4
 800705c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800705e:	4b06      	ldr	r3, [pc, #24]	@ (8007078 <GPIO_InitPWMLEDs+0x98>)
 8007060:	22fa      	movs	r2, #250	@ 0xfa
 8007062:	0112      	lsls	r2, r2, #4
 8007064:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007066:	4b04      	ldr	r3, [pc, #16]	@ (8007078 <GPIO_InitPWMLEDs+0x98>)
 8007068:	22fa      	movs	r2, #250	@ 0xfa
 800706a:	0112      	lsls	r2, r2, #4
 800706c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800706e:	46c0      	nop			@ (mov r8, r8)
 8007070:	46bd      	mov	sp, r7
 8007072:	b002      	add	sp, #8
 8007074:	bd80      	pop	{r7, pc}
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	40000400 	.word	0x40000400

0800707c <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	0011      	movs	r1, r2
 800708c:	0018      	movs	r0, r3
 800708e:	f006 faf3 	bl	800d678 <HIDS_Init>
}
 8007092:	46c0      	nop			@ (mov r8, r8)
 8007094:	46bd      	mov	sp, r7
 8007096:	b002      	add	sp, #8
 8007098:	bd80      	pop	{r7, pc}

0800709a <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800709a:	b580      	push	{r7, lr}
 800709c:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800709e:	f006 fb0d 	bl	800d6bc <HIDS_StartMeasurement>
}
 80070a2:	46c0      	nop			@ (mov r8, r8)
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	0011      	movs	r1, r2
 80070b8:	0018      	movs	r0, r3
 80070ba:	f006 fbe5 	bl	800d888 <HIDS_GetMeasurementValues>
 80070be:	0003      	movs	r3, r0
}
 80070c0:	0018      	movs	r0, r3
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b002      	add	sp, #8
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 80070cc:	f006 fb80 	bl	800d7d0 <HIDS_DeviceConnected>
 80070d0:	0003      	movs	r3, r0
}
 80070d2:	0018      	movs	r0, r3
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80070dc:	4b1b      	ldr	r3, [pc, #108]	@ (800714c <MX_I2C1_Init+0x74>)
 80070de:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <MX_I2C1_Init+0x78>)
 80070e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80070e2:	4b1a      	ldr	r3, [pc, #104]	@ (800714c <MX_I2C1_Init+0x74>)
 80070e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007154 <MX_I2C1_Init+0x7c>)
 80070e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80070e8:	4b18      	ldr	r3, [pc, #96]	@ (800714c <MX_I2C1_Init+0x74>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80070ee:	4b17      	ldr	r3, [pc, #92]	@ (800714c <MX_I2C1_Init+0x74>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070f4:	4b15      	ldr	r3, [pc, #84]	@ (800714c <MX_I2C1_Init+0x74>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80070fa:	4b14      	ldr	r3, [pc, #80]	@ (800714c <MX_I2C1_Init+0x74>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007100:	4b12      	ldr	r3, [pc, #72]	@ (800714c <MX_I2C1_Init+0x74>)
 8007102:	2200      	movs	r2, #0
 8007104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007106:	4b11      	ldr	r3, [pc, #68]	@ (800714c <MX_I2C1_Init+0x74>)
 8007108:	2200      	movs	r2, #0
 800710a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800710c:	4b0f      	ldr	r3, [pc, #60]	@ (800714c <MX_I2C1_Init+0x74>)
 800710e:	2200      	movs	r2, #0
 8007110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007112:	4b0e      	ldr	r3, [pc, #56]	@ (800714c <MX_I2C1_Init+0x74>)
 8007114:	0018      	movs	r0, r3
 8007116:	f007 ff83 	bl	800f020 <HAL_I2C_Init>
 800711a:	1e03      	subs	r3, r0, #0
 800711c:	d001      	beq.n	8007122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800711e:	f000 fce7 	bl	8007af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007122:	4b0a      	ldr	r3, [pc, #40]	@ (800714c <MX_I2C1_Init+0x74>)
 8007124:	2100      	movs	r1, #0
 8007126:	0018      	movs	r0, r3
 8007128:	f00a fb54 	bl	80117d4 <HAL_I2CEx_ConfigAnalogFilter>
 800712c:	1e03      	subs	r3, r0, #0
 800712e:	d001      	beq.n	8007134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007130:	f000 fcde 	bl	8007af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <MX_I2C1_Init+0x74>)
 8007136:	2100      	movs	r1, #0
 8007138:	0018      	movs	r0, r3
 800713a:	f00a fb97 	bl	801186c <HAL_I2CEx_ConfigDigitalFilter>
 800713e:	1e03      	subs	r3, r0, #0
 8007140:	d001      	beq.n	8007146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007142:	f000 fcd5 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007146:	46c0      	nop			@ (mov r8, r8)
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000d40 	.word	0x20000d40
 8007150:	40005400 	.word	0x40005400
 8007154:	00503d58 	.word	0x00503d58

08007158 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800715c:	4b1b      	ldr	r3, [pc, #108]	@ (80071cc <MX_I2C2_Init+0x74>)
 800715e:	4a1c      	ldr	r2, [pc, #112]	@ (80071d0 <MX_I2C2_Init+0x78>)
 8007160:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007162:	4b1a      	ldr	r3, [pc, #104]	@ (80071cc <MX_I2C2_Init+0x74>)
 8007164:	4a1b      	ldr	r2, [pc, #108]	@ (80071d4 <MX_I2C2_Init+0x7c>)
 8007166:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007168:	4b18      	ldr	r3, [pc, #96]	@ (80071cc <MX_I2C2_Init+0x74>)
 800716a:	2200      	movs	r2, #0
 800716c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800716e:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <MX_I2C2_Init+0x74>)
 8007170:	2201      	movs	r2, #1
 8007172:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007174:	4b15      	ldr	r3, [pc, #84]	@ (80071cc <MX_I2C2_Init+0x74>)
 8007176:	2200      	movs	r2, #0
 8007178:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800717a:	4b14      	ldr	r3, [pc, #80]	@ (80071cc <MX_I2C2_Init+0x74>)
 800717c:	2200      	movs	r2, #0
 800717e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007180:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <MX_I2C2_Init+0x74>)
 8007182:	2200      	movs	r2, #0
 8007184:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007186:	4b11      	ldr	r3, [pc, #68]	@ (80071cc <MX_I2C2_Init+0x74>)
 8007188:	2200      	movs	r2, #0
 800718a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800718c:	4b0f      	ldr	r3, [pc, #60]	@ (80071cc <MX_I2C2_Init+0x74>)
 800718e:	2200      	movs	r2, #0
 8007190:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007192:	4b0e      	ldr	r3, [pc, #56]	@ (80071cc <MX_I2C2_Init+0x74>)
 8007194:	0018      	movs	r0, r3
 8007196:	f007 ff43 	bl	800f020 <HAL_I2C_Init>
 800719a:	1e03      	subs	r3, r0, #0
 800719c:	d001      	beq.n	80071a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800719e:	f000 fca7 	bl	8007af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80071a2:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <MX_I2C2_Init+0x74>)
 80071a4:	2100      	movs	r1, #0
 80071a6:	0018      	movs	r0, r3
 80071a8:	f00a fb14 	bl	80117d4 <HAL_I2CEx_ConfigAnalogFilter>
 80071ac:	1e03      	subs	r3, r0, #0
 80071ae:	d001      	beq.n	80071b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80071b0:	f000 fc9e 	bl	8007af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80071b4:	4b05      	ldr	r3, [pc, #20]	@ (80071cc <MX_I2C2_Init+0x74>)
 80071b6:	2100      	movs	r1, #0
 80071b8:	0018      	movs	r0, r3
 80071ba:	f00a fb57 	bl	801186c <HAL_I2CEx_ConfigDigitalFilter>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d001      	beq.n	80071c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80071c2:	f000 fc95 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80071c6:	46c0      	nop			@ (mov r8, r8)
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20000d94 	.word	0x20000d94
 80071d0:	40005800 	.word	0x40005800
 80071d4:	00503d58 	.word	0x00503d58

080071d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b08b      	sub	sp, #44	@ 0x2c
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e0:	2414      	movs	r4, #20
 80071e2:	193b      	adds	r3, r7, r4
 80071e4:	0018      	movs	r0, r3
 80071e6:	2314      	movs	r3, #20
 80071e8:	001a      	movs	r2, r3
 80071ea:	2100      	movs	r1, #0
 80071ec:	f017 fe68 	bl	801eec0 <memset>
  if(i2cHandle->Instance==I2C1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5d      	ldr	r2, [pc, #372]	@ (800736c <HAL_I2C_MspInit+0x194>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d000      	beq.n	80071fc <HAL_I2C_MspInit+0x24>
 80071fa:	e083      	b.n	8007304 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071fc:	4b5c      	ldr	r3, [pc, #368]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 80071fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007200:	4b5b      	ldr	r3, [pc, #364]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 8007202:	2102      	movs	r1, #2
 8007204:	430a      	orrs	r2, r1
 8007206:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007208:	4b59      	ldr	r3, [pc, #356]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	2202      	movs	r2, #2
 800720e:	4013      	ands	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
 8007212:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007214:	0021      	movs	r1, r4
 8007216:	187b      	adds	r3, r7, r1
 8007218:	22c0      	movs	r2, #192	@ 0xc0
 800721a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800721c:	187b      	adds	r3, r7, r1
 800721e:	2212      	movs	r2, #18
 8007220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007222:	187b      	adds	r3, r7, r1
 8007224:	2200      	movs	r2, #0
 8007226:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007228:	187b      	adds	r3, r7, r1
 800722a:	2203      	movs	r2, #3
 800722c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800722e:	187b      	adds	r3, r7, r1
 8007230:	2201      	movs	r2, #1
 8007232:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007234:	187b      	adds	r3, r7, r1
 8007236:	4a4f      	ldr	r2, [pc, #316]	@ (8007374 <HAL_I2C_MspInit+0x19c>)
 8007238:	0019      	movs	r1, r3
 800723a:	0010      	movs	r0, r2
 800723c:	f007 fd38 	bl	800ecb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007240:	4b4b      	ldr	r3, [pc, #300]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 8007242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007244:	4b4a      	ldr	r3, [pc, #296]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 8007246:	2180      	movs	r1, #128	@ 0x80
 8007248:	0389      	lsls	r1, r1, #14
 800724a:	430a      	orrs	r2, r1
 800724c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800724e:	4b4a      	ldr	r3, [pc, #296]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007250:	4a4a      	ldr	r2, [pc, #296]	@ (800737c <HAL_I2C_MspInit+0x1a4>)
 8007252:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007254:	4b48      	ldr	r3, [pc, #288]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007256:	2206      	movs	r2, #6
 8007258:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800725a:	4b47      	ldr	r3, [pc, #284]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 800725c:	2200      	movs	r2, #0
 800725e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007260:	4b45      	ldr	r3, [pc, #276]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007262:	2200      	movs	r2, #0
 8007264:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007266:	4b44      	ldr	r3, [pc, #272]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007268:	2280      	movs	r2, #128	@ 0x80
 800726a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800726c:	4b42      	ldr	r3, [pc, #264]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 800726e:	2200      	movs	r2, #0
 8007270:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007272:	4b41      	ldr	r3, [pc, #260]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007274:	2200      	movs	r2, #0
 8007276:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007278:	4b3f      	ldr	r3, [pc, #252]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 800727a:	2200      	movs	r2, #0
 800727c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800727e:	4b3e      	ldr	r3, [pc, #248]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007280:	2200      	movs	r2, #0
 8007282:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007284:	4b3c      	ldr	r3, [pc, #240]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007286:	0018      	movs	r0, r3
 8007288:	f007 f8f6 	bl	800e478 <HAL_DMA_Init>
 800728c:	1e03      	subs	r3, r0, #0
 800728e:	d001      	beq.n	8007294 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007290:	f000 fc2e 	bl	8007af0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a38      	ldr	r2, [pc, #224]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 8007298:	63da      	str	r2, [r3, #60]	@ 0x3c
 800729a:	4b37      	ldr	r3, [pc, #220]	@ (8007378 <HAL_I2C_MspInit+0x1a0>)
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80072a0:	4b37      	ldr	r3, [pc, #220]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072a2:	4a38      	ldr	r2, [pc, #224]	@ (8007384 <HAL_I2C_MspInit+0x1ac>)
 80072a4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80072a6:	4b36      	ldr	r3, [pc, #216]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072a8:	2206      	movs	r2, #6
 80072aa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072ac:	4b34      	ldr	r3, [pc, #208]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072ae:	2210      	movs	r2, #16
 80072b0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072b2:	4b33      	ldr	r3, [pc, #204]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80072b8:	4b31      	ldr	r3, [pc, #196]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072ba:	2280      	movs	r2, #128	@ 0x80
 80072bc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072be:	4b30      	ldr	r3, [pc, #192]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072c4:	4b2e      	ldr	r3, [pc, #184]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80072ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80072d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80072d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072d8:	0018      	movs	r0, r3
 80072da:	f007 f8cd 	bl	800e478 <HAL_DMA_Init>
 80072de:	1e03      	subs	r3, r0, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80072e2:	f000 fc05 	bl	8007af0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a25      	ldr	r2, [pc, #148]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80072ec:	4b24      	ldr	r3, [pc, #144]	@ (8007380 <HAL_I2C_MspInit+0x1a8>)
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80072f2:	2200      	movs	r2, #0
 80072f4:	2100      	movs	r1, #0
 80072f6:	2017      	movs	r0, #23
 80072f8:	f007 f88c 	bl	800e414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80072fc:	2017      	movs	r0, #23
 80072fe:	f007 f89e 	bl	800e43e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007302:	e02e      	b.n	8007362 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1f      	ldr	r2, [pc, #124]	@ (8007388 <HAL_I2C_MspInit+0x1b0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d129      	bne.n	8007362 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800730e:	4b18      	ldr	r3, [pc, #96]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 8007310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007312:	4b17      	ldr	r3, [pc, #92]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 8007314:	2102      	movs	r1, #2
 8007316:	430a      	orrs	r2, r1
 8007318:	62da      	str	r2, [r3, #44]	@ 0x2c
 800731a:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 800731c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731e:	2202      	movs	r2, #2
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007326:	2114      	movs	r1, #20
 8007328:	187b      	adds	r3, r7, r1
 800732a:	22c0      	movs	r2, #192	@ 0xc0
 800732c:	0112      	lsls	r2, r2, #4
 800732e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007330:	187b      	adds	r3, r7, r1
 8007332:	2212      	movs	r2, #18
 8007334:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007336:	187b      	adds	r3, r7, r1
 8007338:	2200      	movs	r2, #0
 800733a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800733c:	187b      	adds	r3, r7, r1
 800733e:	2203      	movs	r2, #3
 8007340:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007342:	187b      	adds	r3, r7, r1
 8007344:	2206      	movs	r2, #6
 8007346:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007348:	187b      	adds	r3, r7, r1
 800734a:	4a0a      	ldr	r2, [pc, #40]	@ (8007374 <HAL_I2C_MspInit+0x19c>)
 800734c:	0019      	movs	r1, r3
 800734e:	0010      	movs	r0, r2
 8007350:	f007 fcae 	bl	800ecb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007354:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 8007356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007358:	4b05      	ldr	r3, [pc, #20]	@ (8007370 <HAL_I2C_MspInit+0x198>)
 800735a:	2180      	movs	r1, #128	@ 0x80
 800735c:	03c9      	lsls	r1, r1, #15
 800735e:	430a      	orrs	r2, r1
 8007360:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007362:	46c0      	nop			@ (mov r8, r8)
 8007364:	46bd      	mov	sp, r7
 8007366:	b00b      	add	sp, #44	@ 0x2c
 8007368:	bd90      	pop	{r4, r7, pc}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	40005400 	.word	0x40005400
 8007370:	40021000 	.word	0x40021000
 8007374:	50000400 	.word	0x50000400
 8007378:	20000de8 	.word	0x20000de8
 800737c:	40020030 	.word	0x40020030
 8007380:	20000e30 	.word	0x20000e30
 8007384:	4002001c 	.word	0x4002001c
 8007388:	40005800 	.word	0x40005800

0800738c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007390:	4b10      	ldr	r3, [pc, #64]	@ (80073d4 <MX_I2S2_Init+0x48>)
 8007392:	4a11      	ldr	r2, [pc, #68]	@ (80073d8 <MX_I2S2_Init+0x4c>)
 8007394:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007396:	4b0f      	ldr	r3, [pc, #60]	@ (80073d4 <MX_I2S2_Init+0x48>)
 8007398:	22c0      	movs	r2, #192	@ 0xc0
 800739a:	0092      	lsls	r2, r2, #2
 800739c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800739e:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <MX_I2S2_Init+0x48>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80073a4:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <MX_I2S2_Init+0x48>)
 80073a6:	2203      	movs	r2, #3
 80073a8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80073aa:	4b0a      	ldr	r3, [pc, #40]	@ (80073d4 <MX_I2S2_Init+0x48>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80073b0:	4b08      	ldr	r3, [pc, #32]	@ (80073d4 <MX_I2S2_Init+0x48>)
 80073b2:	22fa      	movs	r2, #250	@ 0xfa
 80073b4:	0192      	lsls	r2, r2, #6
 80073b6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80073b8:	4b06      	ldr	r3, [pc, #24]	@ (80073d4 <MX_I2S2_Init+0x48>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80073be:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <MX_I2S2_Init+0x48>)
 80073c0:	0018      	movs	r0, r3
 80073c2:	f00a fa9f 	bl	8011904 <HAL_I2S_Init>
 80073c6:	1e03      	subs	r3, r0, #0
 80073c8:	d001      	beq.n	80073ce <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80073ca:	f000 fb91 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80073ce:	46c0      	nop			@ (mov r8, r8)
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000e78 	.word	0x20000e78
 80073d8:	40003800 	.word	0x40003800

080073dc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b089      	sub	sp, #36	@ 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e4:	240c      	movs	r4, #12
 80073e6:	193b      	adds	r3, r7, r4
 80073e8:	0018      	movs	r0, r3
 80073ea:	2314      	movs	r3, #20
 80073ec:	001a      	movs	r2, r3
 80073ee:	2100      	movs	r1, #0
 80073f0:	f017 fd66 	bl	801eec0 <memset>
  if(i2sHandle->Instance==SPI2)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a2d      	ldr	r2, [pc, #180]	@ (80074b0 <HAL_I2S_MspInit+0xd4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d154      	bne.n	80074a8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80073fe:	4b2d      	ldr	r3, [pc, #180]	@ (80074b4 <HAL_I2S_MspInit+0xd8>)
 8007400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007402:	4b2c      	ldr	r3, [pc, #176]	@ (80074b4 <HAL_I2S_MspInit+0xd8>)
 8007404:	2180      	movs	r1, #128	@ 0x80
 8007406:	01c9      	lsls	r1, r1, #7
 8007408:	430a      	orrs	r2, r1
 800740a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800740c:	4b29      	ldr	r3, [pc, #164]	@ (80074b4 <HAL_I2S_MspInit+0xd8>)
 800740e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007410:	4b28      	ldr	r3, [pc, #160]	@ (80074b4 <HAL_I2S_MspInit+0xd8>)
 8007412:	2102      	movs	r1, #2
 8007414:	430a      	orrs	r2, r1
 8007416:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007418:	4b26      	ldr	r3, [pc, #152]	@ (80074b4 <HAL_I2S_MspInit+0xd8>)
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	2202      	movs	r2, #2
 800741e:	4013      	ands	r3, r2
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007424:	193b      	adds	r3, r7, r4
 8007426:	22b0      	movs	r2, #176	@ 0xb0
 8007428:	0212      	lsls	r2, r2, #8
 800742a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800742c:	0021      	movs	r1, r4
 800742e:	187b      	adds	r3, r7, r1
 8007430:	2202      	movs	r2, #2
 8007432:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	187b      	adds	r3, r7, r1
 8007436:	2200      	movs	r2, #0
 8007438:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800743a:	187b      	adds	r3, r7, r1
 800743c:	2200      	movs	r2, #0
 800743e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007440:	187b      	adds	r3, r7, r1
 8007442:	2200      	movs	r2, #0
 8007444:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007446:	187b      	adds	r3, r7, r1
 8007448:	4a1b      	ldr	r2, [pc, #108]	@ (80074b8 <HAL_I2S_MspInit+0xdc>)
 800744a:	0019      	movs	r1, r3
 800744c:	0010      	movs	r0, r2
 800744e:	f007 fc2f 	bl	800ecb0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007452:	4b1a      	ldr	r3, [pc, #104]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 8007454:	4a1a      	ldr	r2, [pc, #104]	@ (80074c0 <HAL_I2S_MspInit+0xe4>)
 8007456:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007458:	4b18      	ldr	r3, [pc, #96]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 800745a:	2202      	movs	r2, #2
 800745c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800745e:	4b17      	ldr	r3, [pc, #92]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 8007460:	2200      	movs	r2, #0
 8007462:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007464:	4b15      	ldr	r3, [pc, #84]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 8007466:	2200      	movs	r2, #0
 8007468:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800746a:	4b14      	ldr	r3, [pc, #80]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 800746c:	2280      	movs	r2, #128	@ 0x80
 800746e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007470:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 8007472:	2280      	movs	r2, #128	@ 0x80
 8007474:	0052      	lsls	r2, r2, #1
 8007476:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007478:	4b10      	ldr	r3, [pc, #64]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 800747a:	2280      	movs	r2, #128	@ 0x80
 800747c:	00d2      	lsls	r2, r2, #3
 800747e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007480:	4b0e      	ldr	r3, [pc, #56]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 8007482:	2220      	movs	r2, #32
 8007484:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007486:	4b0d      	ldr	r3, [pc, #52]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 8007488:	2200      	movs	r2, #0
 800748a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800748c:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 800748e:	0018      	movs	r0, r3
 8007490:	f006 fff2 	bl	800e478 <HAL_DMA_Init>
 8007494:	1e03      	subs	r3, r0, #0
 8007496:	d001      	beq.n	800749c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007498:	f000 fb2a 	bl	8007af0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a07      	ldr	r2, [pc, #28]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 80074a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80074a2:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <HAL_I2S_MspInit+0xe0>)
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80074a8:	46c0      	nop			@ (mov r8, r8)
 80074aa:	46bd      	mov	sp, r7
 80074ac:	b009      	add	sp, #36	@ 0x24
 80074ae:	bd90      	pop	{r4, r7, pc}
 80074b0:	40003800 	.word	0x40003800
 80074b4:	40021000 	.word	0x40021000
 80074b8:	50000400 	.word	0x50000400
 80074bc:	20000eb4 	.word	0x20000eb4
 80074c0:	40020044 	.word	0x40020044

080074c4 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  testDone = true;
 80074c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007544 <SetTestDone+0x80>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 80074ce:	23fa      	movs	r3, #250	@ 0xfa
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	0018      	movs	r0, r3
 80074d4:	f006 fb16 	bl	800db04 <HAL_Delay>
  SetDBLED(false, false, true);
 80074d8:	2201      	movs	r2, #1
 80074da:	2100      	movs	r1, #0
 80074dc:	2000      	movs	r0, #0
 80074de:	f004 fff3 	bl	800c4c8 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80074e2:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <SetTestDone+0x84>)
 80074e4:	23fa      	movs	r3, #250	@ 0xfa
 80074e6:	0119      	lsls	r1, r3, #4
 80074e8:	23fa      	movs	r3, #250	@ 0xfa
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	0018      	movs	r0, r3
 80074ee:	f004 ffb7 	bl	800c460 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80074f2:	4a15      	ldr	r2, [pc, #84]	@ (8007548 <SetTestDone+0x84>)
 80074f4:	23fa      	movs	r3, #250	@ 0xfa
 80074f6:	0119      	lsls	r1, r3, #4
 80074f8:	23fa      	movs	r3, #250	@ 0xfa
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	0018      	movs	r0, r3
 80074fe:	f005 f82d 	bl	800c55c <SetVocLED>
  HAL_Delay(1000);
 8007502:	23fa      	movs	r3, #250	@ 0xfa
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	0018      	movs	r0, r3
 8007508:	f006 fafc 	bl	800db04 <HAL_Delay>
  SetDBLED(false, false, false);
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	2000      	movs	r0, #0
 8007512:	f004 ffd9 	bl	800c4c8 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007516:	23fa      	movs	r3, #250	@ 0xfa
 8007518:	011a      	lsls	r2, r3, #4
 800751a:	23fa      	movs	r3, #250	@ 0xfa
 800751c:	0119      	lsls	r1, r3, #4
 800751e:	23fa      	movs	r3, #250	@ 0xfa
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	0018      	movs	r0, r3
 8007524:	f004 ff9c 	bl	800c460 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007528:	23fa      	movs	r3, #250	@ 0xfa
 800752a:	011a      	lsls	r2, r3, #4
 800752c:	23fa      	movs	r3, #250	@ 0xfa
 800752e:	0119      	lsls	r1, r3, #4
 8007530:	23fa      	movs	r3, #250	@ 0xfa
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	0018      	movs	r0, r3
 8007536:	f005 f811 	bl	800c55c <SetVocLED>
  InitDone();
 800753a:	f004 ff3b 	bl	800c3b4 <InitDone>
}
 800753e:	46c0      	nop			@ (mov r8, r8)
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000efc 	.word	0x20000efc
 8007548:	00000bb8 	.word	0x00000bb8

0800754c <FlashLEDs>:

void FlashLEDs(){
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007552:	1dfb      	adds	r3, r7, #7
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e021      	b.n	800759e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800755a:	2201      	movs	r2, #1
 800755c:	2101      	movs	r1, #1
 800755e:	2001      	movs	r0, #1
 8007560:	f004 ffb2 	bl	800c4c8 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007564:	4a12      	ldr	r2, [pc, #72]	@ (80075b0 <FlashLEDs+0x64>)
 8007566:	23fa      	movs	r3, #250	@ 0xfa
 8007568:	0119      	lsls	r1, r3, #4
 800756a:	23fa      	movs	r3, #250	@ 0xfa
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	0018      	movs	r0, r3
 8007570:	f004 ff76 	bl	800c460 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007574:	4a0e      	ldr	r2, [pc, #56]	@ (80075b0 <FlashLEDs+0x64>)
 8007576:	23fa      	movs	r3, #250	@ 0xfa
 8007578:	0119      	lsls	r1, r3, #4
 800757a:	23fa      	movs	r3, #250	@ 0xfa
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	0018      	movs	r0, r3
 8007580:	f004 ffec 	bl	800c55c <SetVocLED>
    HAL_Delay(250);
 8007584:	20fa      	movs	r0, #250	@ 0xfa
 8007586:	f006 fabd 	bl	800db04 <HAL_Delay>
    SetLEDsOff();
 800758a:	f005 f8a5 	bl	800c6d8 <SetLEDsOff>
    HAL_Delay(250);
 800758e:	20fa      	movs	r0, #250	@ 0xfa
 8007590:	f006 fab8 	bl	800db04 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007594:	1dfb      	adds	r3, r7, #7
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	1dfb      	adds	r3, r7, #7
 800759a:	3201      	adds	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	1dfb      	adds	r3, r7, #7
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d9d9      	bls.n	800755a <FlashLEDs+0xe>
  }
}
 80075a6:	46c0      	nop			@ (mov r8, r8)
 80075a8:	46c0      	nop			@ (mov r8, r8)
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b002      	add	sp, #8
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	00000bb8 	.word	0x00000bb8

080075b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80075b8:	f006 fa34 	bl	800da24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075bc:	f000 f960 	bl	8007880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075c0:	f7ff fbf8 	bl	8006db4 <MX_GPIO_Init>
  MX_DMA_Init();
 80075c4:	f7ff fa42 	bl	8006a4c <MX_DMA_Init>
  MX_I2C1_Init();
 80075c8:	f7ff fd86 	bl	80070d8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80075cc:	f7ff fede 	bl	800738c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80075d0:	f005 fcfe 	bl	800cfd0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80075d4:	f7ff fdc0 	bl	8007158 <MX_I2C2_Init>
  MX_TIM2_Init();
 80075d8:	f005 faf2 	bl	800cbc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80075dc:	f005 fb64 	bl	800cca8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80075e0:	f005 fd2a 	bl	800d038 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80075e4:	f7ff f980 	bl	80068e8 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80075e8:	f014 f978 	bl	801b8dc <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80075ec:	f001 f83e 	bl	800866c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80075f0:	f005 fcb8 	bl	800cf64 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80075f4:	f005 fbd6 	bl	800cda4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80075f8:	4a82      	ldr	r2, [pc, #520]	@ (8007804 <main+0x250>)
 80075fa:	4b83      	ldr	r3, [pc, #524]	@ (8007808 <main+0x254>)
 80075fc:	0011      	movs	r1, r2
 80075fe:	0018      	movs	r0, r3
 8007600:	f7ff fcee 	bl	8006fe0 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007604:	f7fe fd9c 	bl	8006140 <UserButton_Pressed>
 8007608:	1e03      	subs	r3, r0, #0
 800760a:	d004      	beq.n	8007616 <main+0x62>
    EnableESPProg();
 800760c:	f014 fa36 	bl	801ba7c <EnableESPProg>
    ESP_Programming = true;
 8007610:	4b7e      	ldr	r3, [pc, #504]	@ (800780c <main+0x258>)
 8007612:	2201      	movs	r2, #1
 8007614:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007616:	2003      	movs	r0, #3
 8007618:	f005 ff36 	bl	800d488 <SetVerboseLevel>
  BinaryReleaseInfo();
 800761c:	f005 ff4c 	bl	800d4b8 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007620:	497b      	ldr	r1, [pc, #492]	@ (8007810 <main+0x25c>)
 8007622:	4b7c      	ldr	r3, [pc, #496]	@ (8007814 <main+0x260>)
 8007624:	2201      	movs	r2, #1
 8007626:	0018      	movs	r0, r3
 8007628:	f00e fcbe 	bl	8015fa8 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800762c:	4b7a      	ldr	r3, [pc, #488]	@ (8007818 <main+0x264>)
 800762e:	0018      	movs	r0, r3
 8007630:	f7ff f882 	bl	8006738 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007634:	4a79      	ldr	r2, [pc, #484]	@ (800781c <main+0x268>)
 8007636:	497a      	ldr	r1, [pc, #488]	@ (8007820 <main+0x26c>)
 8007638:	487a      	ldr	r0, [pc, #488]	@ (8007824 <main+0x270>)
 800763a:	230b      	movs	r3, #11
 800763c:	f004 f830 	bl	800b6a0 <soundInit>
 8007640:	0003      	movs	r3, r0
 8007642:	001a      	movs	r2, r3
 8007644:	2301      	movs	r3, #1
 8007646:	4053      	eors	r3, r2
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 800764e:	4a76      	ldr	r2, [pc, #472]	@ (8007828 <main+0x274>)
 8007650:	4b76      	ldr	r3, [pc, #472]	@ (800782c <main+0x278>)
 8007652:	21e5      	movs	r1, #229	@ 0xe5
 8007654:	0018      	movs	r0, r3
 8007656:	f005 ff63 	bl	800d520 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 800765a:	4b75      	ldr	r3, [pc, #468]	@ (8007830 <main+0x27c>)
 800765c:	4a75      	ldr	r2, [pc, #468]	@ (8007834 <main+0x280>)
 800765e:	4970      	ldr	r1, [pc, #448]	@ (8007820 <main+0x26c>)
 8007660:	4875      	ldr	r0, [pc, #468]	@ (8007838 <main+0x284>)
 8007662:	f7ff fb23 	bl	8006cac <Gadget_Init>
  Debug("Clock init done");
 8007666:	4a75      	ldr	r2, [pc, #468]	@ (800783c <main+0x288>)
 8007668:	4b75      	ldr	r3, [pc, #468]	@ (8007840 <main+0x28c>)
 800766a:	0019      	movs	r1, r3
 800766c:	2003      	movs	r0, #3
 800766e:	f005 fea1 	bl	800d3b4 <CreateLine>
  if (!probe_sen5x()) {
 8007672:	f001 f927 	bl	80088c4 <probe_sen5x>
 8007676:	1e03      	subs	r3, r0, #0
 8007678:	d10a      	bne.n	8007690 <main+0xdc>
    sen5x_Present = true; // not present
 800767a:	4b72      	ldr	r3, [pc, #456]	@ (8007844 <main+0x290>)
 800767c:	2201      	movs	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]
    sen5x_Power_Off();      // switch off buck converter
 8007680:	f001 f8f8 	bl	8008874 <sen5x_Power_Off>
    Debug("sen5x sensor not detected, polling disabled.");
 8007684:	4a70      	ldr	r2, [pc, #448]	@ (8007848 <main+0x294>)
 8007686:	4b6e      	ldr	r3, [pc, #440]	@ (8007840 <main+0x28c>)
 8007688:	0019      	movs	r1, r3
 800768a:	2003      	movs	r0, #3
 800768c:	f005 fe92 	bl	800d3b4 <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007690:	4b6e      	ldr	r3, [pc, #440]	@ (800784c <main+0x298>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d019      	beq.n	80076cc <main+0x118>
 8007698:	4b5c      	ldr	r3, [pc, #368]	@ (800780c <main+0x258>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2201      	movs	r2, #1
 800769e:	4053      	eors	r3, r2
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d012      	beq.n	80076cc <main+0x118>
 80076a6:	4b6a      	ldr	r3, [pc, #424]	@ (8007850 <main+0x29c>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2201      	movs	r2, #1
 80076ac:	4053      	eors	r3, r2
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <main+0x118>
      MeasurementBusy = UpkeepGadget();
 80076b4:	f7ff fb28 	bl	8006d08 <UpkeepGadget>
 80076b8:	0003      	movs	r3, r0
 80076ba:	001a      	movs	r2, r3
 80076bc:	4b65      	ldr	r3, [pc, #404]	@ (8007854 <main+0x2a0>)
 80076be:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 80076c0:	f7fd fdb2 	bl	8005228 <ESP_Upkeep>
 80076c4:	0003      	movs	r3, r0
 80076c6:	001a      	movs	r2, r3
 80076c8:	4b63      	ldr	r3, [pc, #396]	@ (8007858 <main+0x2a4>)
 80076ca:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80076cc:	4b5f      	ldr	r3, [pc, #380]	@ (800784c <main+0x298>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2201      	movs	r2, #1
 80076d2:	4053      	eors	r3, r2
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00f      	beq.n	80076fa <main+0x146>
 80076da:	4b4c      	ldr	r3, [pc, #304]	@ (800780c <main+0x258>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2201      	movs	r2, #1
 80076e0:	4053      	eors	r3, r2
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <main+0x146>
 80076e8:	4b59      	ldr	r3, [pc, #356]	@ (8007850 <main+0x29c>)
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2201      	movs	r2, #1
 80076ee:	4053      	eors	r3, r2
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <main+0x146>
      Gadget_Test();
 80076f6:	f7ff faff 	bl	8006cf8 <Gadget_Test>
    }
    Status_Upkeep();
 80076fa:	f005 f8ff 	bl	800c8fc <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 80076fe:	4b57      	ldr	r3, [pc, #348]	@ (800785c <main+0x2a8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	0018      	movs	r0, r3
 8007704:	f005 fe00 	bl	800d308 <TimestampIsReached>
 8007708:	1e03      	subs	r3, r0, #0
 800770a:	d00c      	beq.n	8007726 <main+0x172>
      charge = Battery_Upkeep();
 800770c:	f005 f8fd 	bl	800c90a <Battery_Upkeep>
 8007710:	0003      	movs	r3, r0
 8007712:	001a      	movs	r2, r3
 8007714:	4b52      	ldr	r3, [pc, #328]	@ (8007860 <main+0x2ac>)
 8007716:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 8007718:	f006 f9ea 	bl	800daf0 <HAL_GetTick>
 800771c:	0003      	movs	r3, r0
 800771e:	4a51      	ldr	r2, [pc, #324]	@ (8007864 <main+0x2b0>)
 8007720:	189a      	adds	r2, r3, r2
 8007722:	4b4e      	ldr	r3, [pc, #312]	@ (800785c <main+0x2a8>)
 8007724:	601a      	str	r2, [r3, #0]
    }

    if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && sen5x_Present) {
 8007726:	4b4e      	ldr	r3, [pc, #312]	@ (8007860 <main+0x2ac>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d803      	bhi.n	8007736 <main+0x182>
 800772e:	4b4c      	ldr	r3, [pc, #304]	@ (8007860 <main+0x2ac>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d119      	bne.n	800776a <main+0x1b6>
 8007736:	4b43      	ldr	r3, [pc, #268]	@ (8007844 <main+0x290>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d015      	beq.n	800776a <main+0x1b6>
      if  (charge > BATTERY_LOW) {
 800773e:	4b48      	ldr	r3, [pc, #288]	@ (8007860 <main+0x2ac>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d903      	bls.n	800774e <main+0x19a>
        sen5x_statemachine(0);
 8007746:	2000      	movs	r0, #0
 8007748:	f001 fc78 	bl	800903c <sen5x_statemachine>
 800774c:	e00d      	b.n	800776a <main+0x1b6>
      }
      else {
        if (charge == USB_PLUGGED_IN) {
 800774e:	4b44      	ldr	r3, [pc, #272]	@ (8007860 <main+0x2ac>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d103      	bne.n	800775e <main+0x1aa>
          sen5x_statemachine(USB_PLUGGED_IN);
 8007756:	2001      	movs	r0, #1
 8007758:	f001 fc70 	bl	800903c <sen5x_statemachine>
 800775c:	e005      	b.n	800776a <main+0x1b6>
        }
        else  {
          Info("Battery level insufficient for sen5x operation");
 800775e:	4a42      	ldr	r2, [pc, #264]	@ (8007868 <main+0x2b4>)
 8007760:	4b42      	ldr	r3, [pc, #264]	@ (800786c <main+0x2b8>)
 8007762:	0019      	movs	r1, r3
 8007764:	2002      	movs	r0, #2
 8007766:	f005 fe25 	bl	800d3b4 <CreateLine>
        }
      }
    }

    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800776a:	4b3d      	ldr	r3, [pc, #244]	@ (8007860 <main+0x2ac>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d003      	beq.n	800777a <main+0x1c6>
 8007772:	4b3b      	ldr	r3, [pc, #236]	@ (8007860 <main+0x2ac>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <main+0x1ca>
      FlashLEDs();
 800777a:	f7ff fee7 	bl	800754c <FlashLEDs>
    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 800777e:	4b38      	ldr	r3, [pc, #224]	@ (8007860 <main+0x2ac>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <main+0x1e6>
 8007786:	4b34      	ldr	r3, [pc, #208]	@ (8007858 <main+0x2a4>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b09      	cmp	r3, #9
 800778c:	d105      	bne.n	800779a <main+0x1e6>
      batteryEmpty = true;
 800778e:	4b30      	ldr	r3, [pc, #192]	@ (8007850 <main+0x29c>)
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
      Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007794:	f7fe ff56 	bl	8006644 <Enter_Standby_Mode>
 8007798:	e002      	b.n	80077a0 <main+0x1ec>
    }
    else{
      batteryEmpty = false;
 800779a:	4b2d      	ldr	r3, [pc, #180]	@ (8007850 <main+0x29c>)
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
    }
    if(charge == BATTERY_FULL && userToggle && !usbPluggedIn){
 80077a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007860 <main+0x2ac>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d10a      	bne.n	80077be <main+0x20a>
 80077a8:	4b31      	ldr	r3, [pc, #196]	@ (8007870 <main+0x2bc>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d006      	beq.n	80077be <main+0x20a>
 80077b0:	4b30      	ldr	r3, [pc, #192]	@ (8007874 <main+0x2c0>)
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2201      	movs	r2, #1
 80077b6:	4053      	eors	r3, r2
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d121      	bne.n	8007802 <main+0x24e>
// ok to operate on battery
    }
    else if (!(usbPluggedIn||userToggle) && ESPTransmitDone && !EspTurnedOn) {
 80077be:	4b2d      	ldr	r3, [pc, #180]	@ (8007874 <main+0x2c0>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	4053      	eors	r3, r2
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d100      	bne.n	80077ce <main+0x21a>
 80077cc:	e760      	b.n	8007690 <main+0xdc>
 80077ce:	4b28      	ldr	r3, [pc, #160]	@ (8007870 <main+0x2bc>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2201      	movs	r2, #1
 80077d4:	4053      	eors	r3, r2
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d100      	bne.n	80077de <main+0x22a>
 80077dc:	e758      	b.n	8007690 <main+0xdc>
 80077de:	4b26      	ldr	r3, [pc, #152]	@ (8007878 <main+0x2c4>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d100      	bne.n	80077e8 <main+0x234>
 80077e6:	e753      	b.n	8007690 <main+0xdc>
 80077e8:	4b24      	ldr	r3, [pc, #144]	@ (800787c <main+0x2c8>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2201      	movs	r2, #1
 80077ee:	4053      	eors	r3, r2
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d100      	bne.n	80077f8 <main+0x244>
 80077f6:	e74b      	b.n	8007690 <main+0xdc>
      Enter_Stop_Mode(880);
 80077f8:	23dc      	movs	r3, #220	@ 0xdc
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	0018      	movs	r0, r3
 80077fe:	f7fe ff43 	bl	8006688 <Enter_Stop_Mode>
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007802:	e745      	b.n	8007690 <main+0xdc>
 8007804:	200021a8 	.word	0x200021a8
 8007808:	20002168 	.word	0x20002168
 800780c:	20000efd 	.word	0x20000efd
 8007810:	20000f0c 	.word	0x20000f0c
 8007814:	200022e0 	.word	0x200022e0
 8007818:	200011bc 	.word	0x200011bc
 800781c:	200021e8 	.word	0x200021e8
 8007820:	20000e78 	.word	0x20000e78
 8007824:	20000eb4 	.word	0x20000eb4
 8007828:	08022940 	.word	0x08022940
 800782c:	08023a80 	.word	0x08023a80
 8007830:	20000ce0 	.word	0x20000ce0
 8007834:	20002398 	.word	0x20002398
 8007838:	20000d40 	.word	0x20000d40
 800783c:	08022954 	.word	0x08022954
 8007840:	08022964 	.word	0x08022964
 8007844:	20000f00 	.word	0x20000f00
 8007848:	08022968 	.word	0x08022968
 800784c:	20000efc 	.word	0x20000efc
 8007850:	20000efe 	.word	0x20000efe
 8007854:	20000eff 	.word	0x20000eff
 8007858:	20000f09 	.word	0x20000f09
 800785c:	20000f04 	.word	0x20000f04
 8007860:	20000f08 	.word	0x20000f08
 8007864:	0000ea60 	.word	0x0000ea60
 8007868:	08022998 	.word	0x08022998
 800786c:	080229c8 	.word	0x080229c8
 8007870:	2000215e 	.word	0x2000215e
 8007874:	2000215d 	.word	0x2000215d
 8007878:	2000054f 	.word	0x2000054f
 800787c:	20000548 	.word	0x20000548

08007880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b09d      	sub	sp, #116	@ 0x74
 8007884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007886:	2438      	movs	r4, #56	@ 0x38
 8007888:	193b      	adds	r3, r7, r4
 800788a:	0018      	movs	r0, r3
 800788c:	2338      	movs	r3, #56	@ 0x38
 800788e:	001a      	movs	r2, r3
 8007890:	2100      	movs	r1, #0
 8007892:	f017 fb15 	bl	801eec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007896:	2324      	movs	r3, #36	@ 0x24
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	0018      	movs	r0, r3
 800789c:	2314      	movs	r3, #20
 800789e:	001a      	movs	r2, r3
 80078a0:	2100      	movs	r1, #0
 80078a2:	f017 fb0d 	bl	801eec0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078a6:	003b      	movs	r3, r7
 80078a8:	0018      	movs	r0, r3
 80078aa:	2324      	movs	r3, #36	@ 0x24
 80078ac:	001a      	movs	r2, r3
 80078ae:	2100      	movs	r1, #0
 80078b0:	f017 fb06 	bl	801eec0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80078b4:	4b34      	ldr	r3, [pc, #208]	@ (8007988 <SystemClock_Config+0x108>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a34      	ldr	r2, [pc, #208]	@ (800798c <SystemClock_Config+0x10c>)
 80078ba:	401a      	ands	r2, r3
 80078bc:	4b32      	ldr	r3, [pc, #200]	@ (8007988 <SystemClock_Config+0x108>)
 80078be:	2180      	movs	r1, #128	@ 0x80
 80078c0:	0109      	lsls	r1, r1, #4
 80078c2:	430a      	orrs	r2, r1
 80078c4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80078c6:	f00c f981 	bl	8013bcc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80078ca:	4b31      	ldr	r3, [pc, #196]	@ (8007990 <SystemClock_Config+0x110>)
 80078cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ce:	4a2f      	ldr	r2, [pc, #188]	@ (800798c <SystemClock_Config+0x10c>)
 80078d0:	401a      	ands	r2, r3
 80078d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007990 <SystemClock_Config+0x110>)
 80078d4:	2180      	movs	r1, #128	@ 0x80
 80078d6:	0149      	lsls	r1, r1, #5
 80078d8:	430a      	orrs	r2, r1
 80078da:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80078dc:	193b      	adds	r3, r7, r4
 80078de:	2226      	movs	r2, #38	@ 0x26
 80078e0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80078e2:	193b      	adds	r3, r7, r4
 80078e4:	2280      	movs	r2, #128	@ 0x80
 80078e6:	0052      	lsls	r2, r2, #1
 80078e8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80078ea:	0021      	movs	r1, r4
 80078ec:	187b      	adds	r3, r7, r1
 80078ee:	2201      	movs	r2, #1
 80078f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80078f2:	187b      	adds	r3, r7, r1
 80078f4:	2210      	movs	r2, #16
 80078f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80078f8:	187b      	adds	r3, r7, r1
 80078fa:	2201      	movs	r2, #1
 80078fc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	2200      	movs	r2, #0
 8007902:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007904:	187b      	adds	r3, r7, r1
 8007906:	0018      	movs	r0, r3
 8007908:	f00c f9e0 	bl	8013ccc <HAL_RCC_OscConfig>
 800790c:	1e03      	subs	r3, r0, #0
 800790e:	d001      	beq.n	8007914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007910:	f000 f8ee 	bl	8007af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007914:	2124      	movs	r1, #36	@ 0x24
 8007916:	187b      	adds	r3, r7, r1
 8007918:	220f      	movs	r2, #15
 800791a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800791c:	187b      	adds	r3, r7, r1
 800791e:	2201      	movs	r2, #1
 8007920:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007922:	187b      	adds	r3, r7, r1
 8007924:	2200      	movs	r2, #0
 8007926:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007928:	187b      	adds	r3, r7, r1
 800792a:	2200      	movs	r2, #0
 800792c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800792e:	187b      	adds	r3, r7, r1
 8007930:	2200      	movs	r2, #0
 8007932:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007934:	187b      	adds	r3, r7, r1
 8007936:	2100      	movs	r1, #0
 8007938:	0018      	movs	r0, r3
 800793a:	f00c fd9b 	bl	8014474 <HAL_RCC_ClockConfig>
 800793e:	1e03      	subs	r3, r0, #0
 8007940:	d001      	beq.n	8007946 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007942:	f000 f8d5 	bl	8007af0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007946:	003b      	movs	r3, r7
 8007948:	226d      	movs	r2, #109	@ 0x6d
 800794a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800794c:	003b      	movs	r3, r7
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007952:	003b      	movs	r3, r7
 8007954:	2200      	movs	r2, #0
 8007956:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007958:	003b      	movs	r3, r7
 800795a:	2200      	movs	r2, #0
 800795c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800795e:	003b      	movs	r3, r7
 8007960:	2280      	movs	r2, #128	@ 0x80
 8007962:	0252      	lsls	r2, r2, #9
 8007964:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007966:	003b      	movs	r3, r7
 8007968:	2280      	movs	r2, #128	@ 0x80
 800796a:	04d2      	lsls	r2, r2, #19
 800796c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800796e:	003b      	movs	r3, r7
 8007970:	0018      	movs	r0, r3
 8007972:	f00c ffa3 	bl	80148bc <HAL_RCCEx_PeriphCLKConfig>
 8007976:	1e03      	subs	r3, r0, #0
 8007978:	d001      	beq.n	800797e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800797a:	f000 f8b9 	bl	8007af0 <Error_Handler>
  }
}
 800797e:	46c0      	nop			@ (mov r8, r8)
 8007980:	46bd      	mov	sp, r7
 8007982:	b01d      	add	sp, #116	@ 0x74
 8007984:	bd90      	pop	{r4, r7, pc}
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	40007000 	.word	0x40007000
 800798c:	ffffe7ff 	.word	0xffffe7ff
 8007990:	40021000 	.word	0x40021000

08007994 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007994:	b590      	push	{r4, r7, lr}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	000a      	movs	r2, r1
 800799e:	1cbb      	adds	r3, r7, #2
 80079a0:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 80079a2:	4c06      	ldr	r4, [pc, #24]	@ (80079bc <printString+0x28>)
 80079a4:	1cbb      	adds	r3, r7, #2
 80079a6:	881a      	ldrh	r2, [r3, #0]
 80079a8:	6879      	ldr	r1, [r7, #4]
 80079aa:	4805      	ldr	r0, [pc, #20]	@ (80079c0 <printString+0x2c>)
 80079ac:	0023      	movs	r3, r4
 80079ae:	f00e fa5b 	bl	8015e68 <HAL_UART_Transmit>
}
 80079b2:	46c0      	nop			@ (mov r8, r8)
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b003      	add	sp, #12
 80079b8:	bd90      	pop	{r4, r7, pc}
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	0000ffff 	.word	0x0000ffff
 80079c0:	200022e0 	.word	0x200022e0

080079c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80079cc:	4936      	ldr	r1, [pc, #216]	@ (8007aa8 <HAL_UART_RxCpltCallback+0xe4>)
 80079ce:	4b37      	ldr	r3, [pc, #220]	@ (8007aac <HAL_UART_RxCpltCallback+0xe8>)
 80079d0:	2201      	movs	r2, #1
 80079d2:	0018      	movs	r0, r3
 80079d4:	f00e fae8 	bl	8015fa8 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 80079d8:	4b33      	ldr	r3, [pc, #204]	@ (8007aa8 <HAL_UART_RxCpltCallback+0xe4>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	3b61      	subs	r3, #97	@ 0x61
 80079de:	2b13      	cmp	r3, #19
 80079e0:	d830      	bhi.n	8007a44 <HAL_UART_RxCpltCallback+0x80>
 80079e2:	009a      	lsls	r2, r3, #2
 80079e4:	4b32      	ldr	r3, [pc, #200]	@ (8007ab0 <HAL_UART_RxCpltCallback+0xec>)
 80079e6:	18d3      	adds	r3, r2, r3
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80079ec:	4b31      	ldr	r3, [pc, #196]	@ (8007ab4 <HAL_UART_RxCpltCallback+0xf0>)
 80079ee:	0018      	movs	r0, r3
 80079f0:	f017 f918 	bl	801ec24 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80079f4:	2003      	movs	r0, #3
 80079f6:	f005 fd47 	bl	800d488 <SetVerboseLevel>
      break;
 80079fa:	e04a      	b.n	8007a92 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80079fc:	f7fb fece 	bl	800379c <forceNTPupdate>
    break;
 8007a00:	e047      	b.n	8007a92 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8007a02:	4b2d      	ldr	r3, [pc, #180]	@ (8007ab8 <HAL_UART_RxCpltCallback+0xf4>)
 8007a04:	0018      	movs	r0, r3
 8007a06:	f017 f90d 	bl	801ec24 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8007a0a:	2002      	movs	r0, #2
 8007a0c:	f005 fd3c 	bl	800d488 <SetVerboseLevel>
      break;
 8007a10:	e03f      	b.n	8007a92 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007a12:	4b2a      	ldr	r3, [pc, #168]	@ (8007abc <HAL_UART_RxCpltCallback+0xf8>)
 8007a14:	0018      	movs	r0, r3
 8007a16:	f017 f905 	bl	801ec24 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	f005 fd34 	bl	800d488 <SetVerboseLevel>
      break;
 8007a20:	e037      	b.n	8007a92 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007a22:	4b27      	ldr	r3, [pc, #156]	@ (8007ac0 <HAL_UART_RxCpltCallback+0xfc>)
 8007a24:	0018      	movs	r0, r3
 8007a26:	f017 f8fd 	bl	801ec24 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f005 fd2c 	bl	800d488 <SetVerboseLevel>
      break;
 8007a30:	e02f      	b.n	8007a92 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007a32:	f006 f85d 	bl	800daf0 <HAL_GetTick>
 8007a36:	0002      	movs	r2, r0
 8007a38:	4b22      	ldr	r3, [pc, #136]	@ (8007ac4 <HAL_UART_RxCpltCallback+0x100>)
 8007a3a:	601a      	str	r2, [r3, #0]
      break;
 8007a3c:	e029      	b.n	8007a92 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8007a3e:	f7fe fb8f 	bl	8006160 <showTime>
      break;
 8007a42:	e026      	b.n	8007a92 <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007a44:	4a20      	ldr	r2, [pc, #128]	@ (8007ac8 <HAL_UART_RxCpltCallback+0x104>)
 8007a46:	4b21      	ldr	r3, [pc, #132]	@ (8007acc <HAL_UART_RxCpltCallback+0x108>)
 8007a48:	0019      	movs	r1, r3
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	f005 fcb2 	bl	800d3b4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8007a50:	4b1f      	ldr	r3, [pc, #124]	@ (8007ad0 <HAL_UART_RxCpltCallback+0x10c>)
 8007a52:	0018      	movs	r0, r3
 8007a54:	f017 f8e6 	bl	801ec24 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8007a58:	4b1e      	ldr	r3, [pc, #120]	@ (8007ad4 <HAL_UART_RxCpltCallback+0x110>)
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f017 f8e2 	bl	801ec24 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8007a60:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad8 <HAL_UART_RxCpltCallback+0x114>)
 8007a62:	0018      	movs	r0, r3
 8007a64:	f017 f8de 	bl	801ec24 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8007a68:	4b1c      	ldr	r3, [pc, #112]	@ (8007adc <HAL_UART_RxCpltCallback+0x118>)
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f017 f8da 	bl	801ec24 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8007a70:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <HAL_UART_RxCpltCallback+0x11c>)
 8007a72:	0018      	movs	r0, r3
 8007a74:	f017 f8d6 	bl	801ec24 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8007a78:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae4 <HAL_UART_RxCpltCallback+0x120>)
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f017 f8d2 	bl	801ec24 <puts>
      printf("s - Start particle measurement\r\n");
 8007a80:	4b19      	ldr	r3, [pc, #100]	@ (8007ae8 <HAL_UART_RxCpltCallback+0x124>)
 8007a82:	0018      	movs	r0, r3
 8007a84:	f017 f8ce 	bl	801ec24 <puts>
      printf("t - Show actual systemtime\r\n");
 8007a88:	4b18      	ldr	r3, [pc, #96]	@ (8007aec <HAL_UART_RxCpltCallback+0x128>)
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f017 f8ca 	bl	801ec24 <puts>
  break;
 8007a90:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007a92:	4905      	ldr	r1, [pc, #20]	@ (8007aa8 <HAL_UART_RxCpltCallback+0xe4>)
 8007a94:	4b05      	ldr	r3, [pc, #20]	@ (8007aac <HAL_UART_RxCpltCallback+0xe8>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f00e fa85 	bl	8015fa8 <HAL_UART_Receive_IT>
}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	b002      	add	sp, #8
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	46c0      	nop			@ (mov r8, r8)
 8007aa8:	20000f0c 	.word	0x20000f0c
 8007aac:	200022e0 	.word	0x200022e0
 8007ab0:	08023a30 	.word	0x08023a30
 8007ab4:	080229cc 	.word	0x080229cc
 8007ab8:	080229e8 	.word	0x080229e8
 8007abc:	08022a04 	.word	0x08022a04
 8007ac0:	08022a24 	.word	0x08022a24
 8007ac4:	200011e4 	.word	0x200011e4
 8007ac8:	08022a40 	.word	0x08022a40
 8007acc:	08022a70 	.word	0x08022a70
 8007ad0:	08022a74 	.word	0x08022a74
 8007ad4:	08022a8c 	.word	0x08022a8c
 8007ad8:	08022aac 	.word	0x08022aac
 8007adc:	08022ad0 	.word	0x08022ad0
 8007ae0:	08022af0 	.word	0x08022af0
 8007ae4:	08022b14 	.word	0x08022b14
 8007ae8:	08022b34 	.word	0x08022b34
 8007aec:	08022b54 	.word	0x08022b54

08007af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8007af4:	4a04      	ldr	r2, [pc, #16]	@ (8007b08 <Error_Handler+0x18>)
 8007af6:	4b05      	ldr	r3, [pc, #20]	@ (8007b0c <Error_Handler+0x1c>)
 8007af8:	0019      	movs	r1, r3
 8007afa:	2001      	movs	r0, #1
 8007afc:	f005 fc5a 	bl	800d3b4 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007b00:	b672      	cpsid	i
}
 8007b02:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8007b04:	46c0      	nop			@ (mov r8, r8)
 8007b06:	e7fd      	b.n	8007b04 <Error_Handler+0x14>
 8007b08:	08022b70 	.word	0x08022b70
 8007b0c:	08022a70 	.word	0x08022a70

08007b10 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007b14:	f7ff fac1 	bl	800709a <HT_StartMeasurement>
}
 8007b18:	46c0      	nop			@ (mov r8, r8)
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007b24:	4a04      	ldr	r2, [pc, #16]	@ (8007b38 <HT_IsMeasurementDoneWrapper+0x18>)
 8007b26:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <HT_IsMeasurementDoneWrapper+0x1c>)
 8007b28:	0011      	movs	r1, r2
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f7ff fabc 	bl	80070a8 <HT_GetMeasurementValues>
 8007b30:	0003      	movs	r3, r0
}
 8007b32:	0018      	movs	r0, r3
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20000f20 	.word	0x20000f20
 8007b3c:	20000f1c 	.word	0x20000f1c

08007b40 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007b44:	f7ff f919 	bl	8006d7a <Gas_StartMeasurement>
}
 8007b48:	46c0      	nop			@ (mov r8, r8)
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8007b54:	4b03      	ldr	r3, [pc, #12]	@ (8007b64 <VOC_IsMeasurementDoneWrapper+0x14>)
 8007b56:	0018      	movs	r0, r3
 8007b58:	f7ff f916 	bl	8006d88 <Gas_GetMeasurementValues>
 8007b5c:	0003      	movs	r3, r0
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000f24 	.word	0x20000f24

08007b68 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
}
 8007b6c:	46c0      	nop			@ (mov r8, r8)
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8007b72:	b580      	push	{r7, lr}
 8007b74:	af00      	add	r7, sp, #0
  return true;
 8007b76:	2301      	movs	r3, #1
}
 8007b78:	0018      	movs	r0, r3
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <MIC_IsTestMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
  return MIC_MeasurementDone();
}

bool MIC_IsTestMeasurementDoneWrapper(void) {
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8007b82:	f000 fd21 	bl	80085c8 <MIC_TestMeasurementDone>
 8007b86:	0003      	movs	r3, r0
}
 8007b88:	0018      	movs	r0, r3
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <setMeasStamp>:
void setMeasStamp(uint32_t nrTicks) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  MeasStamp = HAL_GetTick() + nrTicks;
 8007b98:	f005 ffaa 	bl	800daf0 <HAL_GetTick>
 8007b9c:	0002      	movs	r2, r0
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	18d2      	adds	r2, r2, r3
 8007ba2:	4b03      	ldr	r3, [pc, #12]	@ (8007bb0 <setMeasStamp+0x20>)
 8007ba4:	601a      	str	r2, [r3, #0]
}
 8007ba6:	46c0      	nop			@ (mov r8, r8)
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	b002      	add	sp, #8
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	46c0      	nop			@ (mov r8, r8)
 8007bb0:	20000f68 	.word	0x20000f68

08007bb4 <testInit>:

void testInit(){
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8007bb8:	4b07      	ldr	r3, [pc, #28]	@ (8007bd8 <testInit+0x24>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007bbe:	4b06      	ldr	r3, [pc, #24]	@ (8007bd8 <testInit+0x24>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8007bc4:	4b04      	ldr	r3, [pc, #16]	@ (8007bd8 <testInit+0x24>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8007bca:	4b03      	ldr	r3, [pc, #12]	@ (8007bd8 <testInit+0x24>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	705a      	strb	r2, [r3, #1]
}
 8007bd0:	46c0      	nop			@ (mov r8, r8)
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	46c0      	nop			@ (mov r8, r8)
 8007bd8:	20000f60 	.word	0x20000f60

08007bdc <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8007bdc:	b5b0      	push	{r4, r5, r7, lr}
 8007bde:	b092      	sub	sp, #72	@ 0x48
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 8007be8:	f7ff ffe4 	bl	8007bb4 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8007bec:	4b6e      	ldr	r3, [pc, #440]	@ (8007da8 <Meas_Init+0x1cc>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d103      	bne.n	8007bfc <Meas_Init+0x20>
 8007bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8007da8 <Meas_Init+0x1cc>)
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d068      	beq.n	8007cce <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f7fd ff34 	bl	8005a6c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8007c04:	f7ff fa60 	bl	80070c8 <HT_DeviceConnected>
 8007c08:	0003      	movs	r3, r0
 8007c0a:	001a      	movs	r2, r3
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	4053      	eors	r3, r2
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00c      	beq.n	8007c30 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 8007c16:	4a65      	ldr	r2, [pc, #404]	@ (8007dac <Meas_Init+0x1d0>)
 8007c18:	4b65      	ldr	r3, [pc, #404]	@ (8007db0 <Meas_Init+0x1d4>)
 8007c1a:	0019      	movs	r1, r3
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	f005 fbc9 	bl	800d3b4 <CreateLine>
       MeasTest.HT_Tested = false;
 8007c22:	4b64      	ldr	r3, [pc, #400]	@ (8007db4 <Meas_Init+0x1d8>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8007c28:	4b5f      	ldr	r3, [pc, #380]	@ (8007da8 <Meas_Init+0x1cc>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	e008      	b.n	8007c42 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8007c30:	4b60      	ldr	r3, [pc, #384]	@ (8007db4 <Meas_Init+0x1d8>)
 8007c32:	2201      	movs	r2, #1
 8007c34:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8007c36:	4a60      	ldr	r2, [pc, #384]	@ (8007db8 <Meas_Init+0x1dc>)
 8007c38:	4b60      	ldr	r3, [pc, #384]	@ (8007dbc <Meas_Init+0x1e0>)
 8007c3a:	0019      	movs	r1, r3
 8007c3c:	2003      	movs	r0, #3
 8007c3e:	f005 fbb9 	bl	800d3b4 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8007c42:	f7ff f8ae 	bl	8006da2 <Gas_DeviceConnected>
 8007c46:	0003      	movs	r3, r0
 8007c48:	001a      	movs	r2, r3
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4053      	eors	r3, r2
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00c      	beq.n	8007c6e <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8007c54:	4b57      	ldr	r3, [pc, #348]	@ (8007db4 <Meas_Init+0x1d8>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8007c5a:	4a59      	ldr	r2, [pc, #356]	@ (8007dc0 <Meas_Init+0x1e4>)
 8007c5c:	4b54      	ldr	r3, [pc, #336]	@ (8007db0 <Meas_Init+0x1d4>)
 8007c5e:	0019      	movs	r1, r3
 8007c60:	2001      	movs	r0, #1
 8007c62:	f005 fba7 	bl	800d3b4 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8007c66:	4b50      	ldr	r3, [pc, #320]	@ (8007da8 <Meas_Init+0x1cc>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	705a      	strb	r2, [r3, #1]
 8007c6c:	e008      	b.n	8007c80 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8007c6e:	4b51      	ldr	r3, [pc, #324]	@ (8007db4 <Meas_Init+0x1d8>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8007c74:	4a53      	ldr	r2, [pc, #332]	@ (8007dc4 <Meas_Init+0x1e8>)
 8007c76:	4b51      	ldr	r3, [pc, #324]	@ (8007dbc <Meas_Init+0x1e0>)
 8007c78:	0019      	movs	r1, r3
 8007c7a:	2003      	movs	r0, #3
 8007c7c:	f005 fb9a 	bl	800d3b4 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8007c80:	4b4c      	ldr	r3, [pc, #304]	@ (8007db4 <Meas_Init+0x1d8>)
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <Meas_Init+0xc0>
 8007c88:	4b4a      	ldr	r3, [pc, #296]	@ (8007db4 <Meas_Init+0x1d8>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8007c90:	2200      	movs	r2, #0
 8007c92:	2101      	movs	r1, #1
 8007c94:	2000      	movs	r0, #0
 8007c96:	f004 fc17 	bl	800c4c8 <SetDBLED>
 8007c9a:	e018      	b.n	8007cce <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	2001      	movs	r0, #1
 8007ca2:	f004 fc11 	bl	800c4c8 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8007ca6:	4b48      	ldr	r3, [pc, #288]	@ (8007dc8 <Meas_Init+0x1ec>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2101      	movs	r1, #1
 8007cac:	0018      	movs	r0, r3
 8007cae:	f007 f99a 	bl	800efe6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8007cb2:	2380      	movs	r3, #128	@ 0x80
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	4844      	ldr	r0, [pc, #272]	@ (8007dc8 <Meas_Init+0x1ec>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	0019      	movs	r1, r3
 8007cbc:	f007 f993 	bl	800efe6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007cc0:	2380      	movs	r3, #128	@ 0x80
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4840      	ldr	r0, [pc, #256]	@ (8007dc8 <Meas_Init+0x1ec>)
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	0019      	movs	r1, r3
 8007cca:	f007 f98c 	bl	800efe6 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8007cce:	4b36      	ldr	r3, [pc, #216]	@ (8007da8 <Meas_Init+0x1cc>)
 8007cd0:	78db      	ldrb	r3, [r3, #3]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d008      	beq.n	8007ce8 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 8007cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8007dcc <Meas_Init+0x1f0>)
 8007cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8007dd0 <Meas_Init+0x1f4>)
 8007cda:	0019      	movs	r1, r3
 8007cdc:	2002      	movs	r0, #2
 8007cde:	f005 fb69 	bl	800d3b4 <CreateLine>
          enableMicrophone(true);
 8007ce2:	2001      	movs	r0, #1
 8007ce4:	f003 fd44 	bl	800b770 <enableMicrophone>

  }
  uint8_t offset = 0;
 8007ce8:	2547      	movs	r5, #71	@ 0x47
 8007cea:	197b      	adds	r3, r7, r5
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8007cf0:	197b      	adds	r3, r7, r5
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	197a      	adds	r2, r7, r5
 8007cf6:	1c59      	adds	r1, r3, #1
 8007cf8:	7011      	strb	r1, [r2, #0]
 8007cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8007da8 <Meas_Init+0x1cc>)
 8007cfc:	7814      	ldrb	r4, [r2, #0]
 8007cfe:	4a35      	ldr	r2, [pc, #212]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d00:	0119      	lsls	r1, r3, #4
 8007d02:	4835      	ldr	r0, [pc, #212]	@ (8007dd8 <Meas_Init+0x1fc>)
 8007d04:	5088      	str	r0, [r1, r2]
 8007d06:	4933      	ldr	r1, [pc, #204]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d08:	011a      	lsls	r2, r3, #4
 8007d0a:	188a      	adds	r2, r1, r2
 8007d0c:	3204      	adds	r2, #4
 8007d0e:	4933      	ldr	r1, [pc, #204]	@ (8007ddc <Meas_Init+0x200>)
 8007d10:	6011      	str	r1, [r2, #0]
 8007d12:	4930      	ldr	r1, [pc, #192]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d14:	011a      	lsls	r2, r3, #4
 8007d16:	188a      	adds	r2, r1, r2
 8007d18:	3208      	adds	r2, #8
 8007d1a:	4931      	ldr	r1, [pc, #196]	@ (8007de0 <Meas_Init+0x204>)
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d20:	011b      	lsls	r3, r3, #4
 8007d22:	18d3      	adds	r3, r2, r3
 8007d24:	330c      	adds	r3, #12
 8007d26:	1c22      	adds	r2, r4, #0
 8007d28:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8007d2a:	197b      	adds	r3, r7, r5
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	197a      	adds	r2, r7, r5
 8007d30:	1c59      	adds	r1, r3, #1
 8007d32:	7011      	strb	r1, [r2, #0]
 8007d34:	4a1c      	ldr	r2, [pc, #112]	@ (8007da8 <Meas_Init+0x1cc>)
 8007d36:	7854      	ldrb	r4, [r2, #1]
 8007d38:	4a26      	ldr	r2, [pc, #152]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d3a:	0119      	lsls	r1, r3, #4
 8007d3c:	4829      	ldr	r0, [pc, #164]	@ (8007de4 <Meas_Init+0x208>)
 8007d3e:	5088      	str	r0, [r1, r2]
 8007d40:	4924      	ldr	r1, [pc, #144]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d42:	011a      	lsls	r2, r3, #4
 8007d44:	188a      	adds	r2, r1, r2
 8007d46:	3204      	adds	r2, #4
 8007d48:	4927      	ldr	r1, [pc, #156]	@ (8007de8 <Meas_Init+0x20c>)
 8007d4a:	6011      	str	r1, [r2, #0]
 8007d4c:	4921      	ldr	r1, [pc, #132]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d4e:	011a      	lsls	r2, r3, #4
 8007d50:	188a      	adds	r2, r1, r2
 8007d52:	3208      	adds	r2, #8
 8007d54:	4925      	ldr	r1, [pc, #148]	@ (8007dec <Meas_Init+0x210>)
 8007d56:	6011      	str	r1, [r2, #0]
 8007d58:	4a1e      	ldr	r2, [pc, #120]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	18d3      	adds	r3, r2, r3
 8007d5e:	330c      	adds	r3, #12
 8007d60:	1c22      	adds	r2, r4, #0
 8007d62:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8007d64:	197b      	adds	r3, r7, r5
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	197a      	adds	r2, r7, r5
 8007d6a:	1c59      	adds	r1, r3, #1
 8007d6c:	7011      	strb	r1, [r2, #0]
 8007d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8007da8 <Meas_Init+0x1cc>)
 8007d70:	7894      	ldrb	r4, [r2, #2]
 8007d72:	4a18      	ldr	r2, [pc, #96]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d74:	0119      	lsls	r1, r3, #4
 8007d76:	481e      	ldr	r0, [pc, #120]	@ (8007df0 <Meas_Init+0x214>)
 8007d78:	5088      	str	r0, [r1, r2]
 8007d7a:	4916      	ldr	r1, [pc, #88]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d7c:	011a      	lsls	r2, r3, #4
 8007d7e:	188a      	adds	r2, r1, r2
 8007d80:	3204      	adds	r2, #4
 8007d82:	491c      	ldr	r1, [pc, #112]	@ (8007df4 <Meas_Init+0x218>)
 8007d84:	6011      	str	r1, [r2, #0]
 8007d86:	4913      	ldr	r1, [pc, #76]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d88:	011a      	lsls	r2, r3, #4
 8007d8a:	188a      	adds	r2, r1, r2
 8007d8c:	3208      	adds	r2, #8
 8007d8e:	491a      	ldr	r1, [pc, #104]	@ (8007df8 <Meas_Init+0x21c>)
 8007d90:	6011      	str	r1, [r2, #0]
 8007d92:	4a10      	ldr	r2, [pc, #64]	@ (8007dd4 <Meas_Init+0x1f8>)
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	18d3      	adds	r3, r2, r3
 8007d98:	330c      	adds	r3, #12
 8007d9a:	1c22      	adds	r2, r4, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8007d9e:	46c0      	nop			@ (mov r8, r8)
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b012      	add	sp, #72	@ 0x48
 8007da4:	bdb0      	pop	{r4, r5, r7, pc}
 8007da6:	46c0      	nop			@ (mov r8, r8)
 8007da8:	20000f5c 	.word	0x20000f5c
 8007dac:	08022b9c 	.word	0x08022b9c
 8007db0:	08022bcc 	.word	0x08022bcc
 8007db4:	20000f60 	.word	0x20000f60
 8007db8:	08022bd0 	.word	0x08022bd0
 8007dbc:	08022bfc 	.word	0x08022bfc
 8007dc0:	08022c00 	.word	0x08022c00
 8007dc4:	08022c1c 	.word	0x08022c1c
 8007dc8:	50000400 	.word	0x50000400
 8007dcc:	08022c34 	.word	0x08022c34
 8007dd0:	08022c58 	.word	0x08022c58
 8007dd4:	20000f2c 	.word	0x20000f2c
 8007dd8:	08007b11 	.word	0x08007b11
 8007ddc:	08007b21 	.word	0x08007b21
 8007de0:	20000f28 	.word	0x20000f28
 8007de4:	08007b41 	.word	0x08007b41
 8007de8:	08007b51 	.word	0x08007b51
 8007dec:	20000f29 	.word	0x20000f29
 8007df0:	08007b69 	.word	0x08007b69
 8007df4:	08007b73 	.word	0x08007b73
 8007df8:	20000f2a 	.word	0x20000f2a

08007dfc <StartMeasurements>:

void StartMeasurements(void) {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007e00:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <StartMeasurements+0x48>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e015      	b.n	8007e34 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007e08:	4b0e      	ldr	r3, [pc, #56]	@ (8007e44 <StartMeasurements+0x48>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8007e48 <StartMeasurements+0x4c>)
 8007e0e:	011b      	lsls	r3, r3, #4
 8007e10:	18d3      	adds	r3, r2, r3
 8007e12:	330c      	adds	r3, #12
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d006      	beq.n	8007e28 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <StartMeasurements+0x48>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	001a      	movs	r2, r3
 8007e20:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <StartMeasurements+0x4c>)
 8007e22:	0112      	lsls	r2, r2, #4
 8007e24:	58d3      	ldr	r3, [r2, r3]
 8007e26:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007e28:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <StartMeasurements+0x48>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <StartMeasurements+0x48>)
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	4b03      	ldr	r3, [pc, #12]	@ (8007e44 <StartMeasurements+0x48>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d9e5      	bls.n	8007e08 <StartMeasurements+0xc>
    }
  }
}
 8007e3c:	46c0      	nop			@ (mov r8, r8)
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000f64 	.word	0x20000f64
 8007e48:	20000f2c 	.word	0x20000f2c

08007e4c <Meas_Test>:

void Meas_Test(){
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007e50:	4b23      	ldr	r3, [pc, #140]	@ (8007ee0 <Meas_Test+0x94>)
 8007e52:	78db      	ldrb	r3, [r3, #3]
 8007e54:	2201      	movs	r2, #1
 8007e56:	4053      	eors	r3, r2
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <Meas_Test+0x16>
    ESP_WakeTest();
 8007e5e:	f7fd f8cd 	bl	8004ffc <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8007e62:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee0 <Meas_Test+0x94>)
 8007e64:	789b      	ldrb	r3, [r3, #2]
 8007e66:	2201      	movs	r2, #1
 8007e68:	4053      	eors	r3, r2
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007e70:	f7ff fe85 	bl	8007b7e <MIC_IsTestMeasurementDoneWrapper>
 8007e74:	1e03      	subs	r3, r0, #0
 8007e76:	d00b      	beq.n	8007e90 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8007e78:	4b19      	ldr	r3, [pc, #100]	@ (8007ee0 <Meas_Test+0x94>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007e7e:	23fa      	movs	r3, #250	@ 0xfa
 8007e80:	011a      	lsls	r2, r3, #4
 8007e82:	4918      	ldr	r1, [pc, #96]	@ (8007ee4 <Meas_Test+0x98>)
 8007e84:	23fa      	movs	r3, #250	@ 0xfa
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f004 fae9 	bl	800c460 <SetStatusLED>
 8007e8e:	e00b      	b.n	8007ea8 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007e90:	f003 fc4a 	bl	800b728 <micSettlingComplete>
 8007e94:	1e03      	subs	r3, r0, #0
 8007e96:	d007      	beq.n	8007ea8 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007e98:	23fa      	movs	r3, #250	@ 0xfa
 8007e9a:	011a      	lsls	r2, r3, #4
 8007e9c:	23fa      	movs	r3, #250	@ 0xfa
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	4810      	ldr	r0, [pc, #64]	@ (8007ee4 <Meas_Test+0x98>)
 8007ea2:	0019      	movs	r1, r3
 8007ea4:	f004 fadc 	bl	800c460 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee0 <Meas_Test+0x94>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d013      	beq.n	8007ed8 <Meas_Test+0x8c>
 8007eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee0 <Meas_Test+0x94>)
 8007eb2:	785b      	ldrb	r3, [r3, #1]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00f      	beq.n	8007ed8 <Meas_Test+0x8c>
 8007eb8:	4b09      	ldr	r3, [pc, #36]	@ (8007ee0 <Meas_Test+0x94>)
 8007eba:	78db      	ldrb	r3, [r3, #3]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <Meas_Test+0x8c>
 8007ec0:	4b07      	ldr	r3, [pc, #28]	@ (8007ee0 <Meas_Test+0x94>)
 8007ec2:	789b      	ldrb	r3, [r3, #2]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <Meas_Test+0x8c>
    Info("Test completed");
 8007ec8:	4a07      	ldr	r2, [pc, #28]	@ (8007ee8 <Meas_Test+0x9c>)
 8007eca:	4b08      	ldr	r3, [pc, #32]	@ (8007eec <Meas_Test+0xa0>)
 8007ecc:	0019      	movs	r1, r3
 8007ece:	2002      	movs	r0, #2
 8007ed0:	f005 fa70 	bl	800d3b4 <CreateLine>
    SetTestDone();
 8007ed4:	f7ff faf6 	bl	80074c4 <SetTestDone>
  }
}
 8007ed8:	46c0      	nop			@ (mov r8, r8)
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	20000f60 	.word	0x20000f60
 8007ee4:	00000bb8 	.word	0x00000bb8
 8007ee8:	08022c5c 	.word	0x08022c5c
 8007eec:	08022c58 	.word	0x08022c58

08007ef0 <ResetMeasurements>:
void ResetMeasurements(void) {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8007ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <ResetMeasurements+0x30>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8007efa:	4b09      	ldr	r3, [pc, #36]	@ (8007f20 <ResetMeasurements+0x30>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8007f00:	4b07      	ldr	r3, [pc, #28]	@ (8007f20 <ResetMeasurements+0x30>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8007f06:	4b06      	ldr	r3, [pc, #24]	@ (8007f20 <ResetMeasurements+0x30>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8007f0c:	4b04      	ldr	r3, [pc, #16]	@ (8007f20 <ResetMeasurements+0x30>)
 8007f0e:	2200      	movs	r2, #0
 8007f10:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8007f12:	4b03      	ldr	r3, [pc, #12]	@ (8007f20 <ResetMeasurements+0x30>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	739a      	strb	r2, [r3, #14]
//  MeasurementCtx.MIC_measurementDone = false;
}
 8007f18:	46c0      	nop			@ (mov r8, r8)
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	46c0      	nop			@ (mov r8, r8)
 8007f20:	20000f1c 	.word	0x20000f1c

08007f24 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007f28:	4b18      	ldr	r3, [pc, #96]	@ (8007f8c <MeasurementsCompleted+0x68>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
 8007f2e:	e024      	b.n	8007f7a <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007f30:	4b16      	ldr	r3, [pc, #88]	@ (8007f8c <MeasurementsCompleted+0x68>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	4a16      	ldr	r2, [pc, #88]	@ (8007f90 <MeasurementsCompleted+0x6c>)
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	18d3      	adds	r3, r2, r3
 8007f3a:	330c      	adds	r3, #12
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d015      	beq.n	8007f6e <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8007f42:	4b12      	ldr	r3, [pc, #72]	@ (8007f8c <MeasurementsCompleted+0x68>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	4a12      	ldr	r2, [pc, #72]	@ (8007f90 <MeasurementsCompleted+0x6c>)
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	18d3      	adds	r3, r2, r3
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4798      	blx	r3
 8007f52:	1e03      	subs	r3, r0, #0
 8007f54:	d009      	beq.n	8007f6a <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8007f56:	4b0d      	ldr	r3, [pc, #52]	@ (8007f8c <MeasurementsCompleted+0x68>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8007f90 <MeasurementsCompleted+0x6c>)
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	18d3      	adds	r3, r2, r3
 8007f60:	3308      	adds	r3, #8
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2201      	movs	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e001      	b.n	8007f6e <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e00a      	b.n	8007f84 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007f6e:	4b07      	ldr	r3, [pc, #28]	@ (8007f8c <MeasurementsCompleted+0x68>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <MeasurementsCompleted+0x68>)
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	4b04      	ldr	r3, [pc, #16]	@ (8007f8c <MeasurementsCompleted+0x68>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d9d6      	bls.n	8007f30 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8007f82:	2301      	movs	r3, #1
}
 8007f84:	0018      	movs	r0, r3
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	20000f64 	.word	0x20000f64
 8007f90:	20000f2c 	.word	0x20000f2c

08007f94 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8007f94:	b590      	push	{r4, r7, lr}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8007f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800818c <Mic_Upkeep+0x1f8>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d100      	bne.n	8007fa4 <Mic_Upkeep+0x10>
 8007fa2:	e0c0      	b.n	8008126 <Mic_Upkeep+0x192>
 8007fa4:	dd00      	ble.n	8007fa8 <Mic_Upkeep+0x14>
 8007fa6:	e0db      	b.n	8008160 <Mic_Upkeep+0x1cc>
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d037      	beq.n	800801c <Mic_Upkeep+0x88>
 8007fac:	dd00      	ble.n	8007fb0 <Mic_Upkeep+0x1c>
 8007fae:	e0d7      	b.n	8008160 <Mic_Upkeep+0x1cc>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <Mic_Upkeep+0x26>
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d014      	beq.n	8007fe2 <Mic_Upkeep+0x4e>
 8007fb8:	e0d2      	b.n	8008160 <Mic_Upkeep+0x1cc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007fba:	2001      	movs	r0, #1
 8007fbc:	f003 fbd8 	bl	800b770 <enableMicrophone>
 8007fc0:	0003      	movs	r3, r0
 8007fc2:	001a      	movs	r2, r3
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4053      	eors	r3, r2
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8007fce:	4a70      	ldr	r2, [pc, #448]	@ (8008190 <Mic_Upkeep+0x1fc>)
 8007fd0:	4b70      	ldr	r3, [pc, #448]	@ (8008194 <Mic_Upkeep+0x200>)
 8007fd2:	21ca      	movs	r1, #202	@ 0xca
 8007fd4:	0018      	movs	r0, r3
 8007fd6:	f005 faa3 	bl	800d520 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8007fda:	4b6c      	ldr	r3, [pc, #432]	@ (800818c <Mic_Upkeep+0x1f8>)
 8007fdc:	2201      	movs	r2, #1
 8007fde:	701a      	strb	r2, [r3, #0]
    break;
 8007fe0:	e0cd      	b.n	800817e <Mic_Upkeep+0x1ea>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8007fe2:	f003 fba1 	bl	800b728 <micSettlingComplete>
 8007fe6:	1e03      	subs	r3, r0, #0
 8007fe8:	d105      	bne.n	8007ff6 <Mic_Upkeep+0x62>
 8007fea:	4b6b      	ldr	r3, [pc, #428]	@ (8008198 <Mic_Upkeep+0x204>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d100      	bne.n	8007ff6 <Mic_Upkeep+0x62>
 8007ff4:	e0be      	b.n	8008174 <Mic_Upkeep+0x1e0>
      if (!startSPLcalculation())
 8007ff6:	f003 fc25 	bl	800b844 <startSPLcalculation>
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	001a      	movs	r2, r3
 8007ffe:	2301      	movs	r3, #1
 8008000:	4053      	eors	r3, r2
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008008:	4a61      	ldr	r2, [pc, #388]	@ (8008190 <Mic_Upkeep+0x1fc>)
 800800a:	4b62      	ldr	r3, [pc, #392]	@ (8008194 <Mic_Upkeep+0x200>)
 800800c:	21d3      	movs	r1, #211	@ 0xd3
 800800e:	0018      	movs	r0, r3
 8008010:	f005 fa86 	bl	800d520 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008014:	4b5d      	ldr	r3, [pc, #372]	@ (800818c <Mic_Upkeep+0x1f8>)
 8008016:	2202      	movs	r2, #2
 8008018:	701a      	strb	r2, [r3, #0]
    }
    break;
 800801a:	e0ab      	b.n	8008174 <Mic_Upkeep+0x1e0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800801c:	4b5f      	ldr	r3, [pc, #380]	@ (800819c <Mic_Upkeep+0x208>)
 800801e:	2201      	movs	r2, #1
 8008020:	2101      	movs	r1, #1
 8008022:	0018      	movs	r0, r3
 8008024:	f003 fa62 	bl	800b4ec <getSoundData>
 8008028:	1e03      	subs	r3, r0, #0
 800802a:	d100      	bne.n	800802e <Mic_Upkeep+0x9a>
 800802c:	e0a4      	b.n	8008178 <Mic_Upkeep+0x1e4>
      clearMaximumAmplitude();
 800802e:	f003 fb5b 	bl	800b6e8 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8008032:	4b5a      	ldr	r3, [pc, #360]	@ (800819c <Mic_Upkeep+0x208>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8008038:	4b58      	ldr	r3, [pc, #352]	@ (800819c <Mic_Upkeep+0x208>)
 800803a:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800803c:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 800803e:	4b57      	ldr	r3, [pc, #348]	@ (800819c <Mic_Upkeep+0x208>)
 8008040:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8008042:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8008044:	4b55      	ldr	r3, [pc, #340]	@ (800819c <Mic_Upkeep+0x208>)
 8008046:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8008048:	4855      	ldr	r0, [pc, #340]	@ (80081a0 <Mic_Upkeep+0x20c>)
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	0023      	movs	r3, r4
 800804e:	f000 faeb 	bl	8008628 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008052:	4b52      	ldr	r3, [pc, #328]	@ (800819c <Mic_Upkeep+0x208>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	001a      	movs	r2, r3
 8008058:	4b50      	ldr	r3, [pc, #320]	@ (800819c <Mic_Upkeep+0x208>)
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	4951      	ldr	r1, [pc, #324]	@ (80081a4 <Mic_Upkeep+0x210>)
 800805e:	0038      	movs	r0, r7
 8008060:	f016 fdea 	bl	801ec38 <siprintf>

      dBValue = atof(dBbuffer);
 8008064:	003b      	movs	r3, r7
 8008066:	0018      	movs	r0, r3
 8008068:	f015 f996 	bl	801d398 <atof>
 800806c:	0002      	movs	r2, r0
 800806e:	000b      	movs	r3, r1
 8008070:	0010      	movs	r0, r2
 8008072:	0019      	movs	r1, r3
 8008074:	f7fb fa3e 	bl	80034f4 <__aeabi_d2f>
 8008078:	1c02      	adds	r2, r0, #0
 800807a:	4b4b      	ldr	r3, [pc, #300]	@ (80081a8 <Mic_Upkeep+0x214>)
 800807c:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800807e:	4b4a      	ldr	r3, [pc, #296]	@ (80081a8 <Mic_Upkeep+0x214>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	494a      	ldr	r1, [pc, #296]	@ (80081ac <Mic_Upkeep+0x218>)
 8008084:	1c18      	adds	r0, r3, #0
 8008086:	f7f8 ff8b 	bl	8000fa0 <__aeabi_fmul>
 800808a:	1c03      	adds	r3, r0, #0
 800808c:	1c18      	adds	r0, r3, #0
 800808e:	f7fb f9e9 	bl	8003464 <__aeabi_f2d>
 8008092:	2200      	movs	r2, #0
 8008094:	4b46      	ldr	r3, [pc, #280]	@ (80081b0 <Mic_Upkeep+0x21c>)
 8008096:	f7f9 fb29 	bl	80016ec <__aeabi_dadd>
 800809a:	0002      	movs	r2, r0
 800809c:	000b      	movs	r3, r1
 800809e:	0010      	movs	r0, r2
 80080a0:	0019      	movs	r1, r3
 80080a2:	f7fb f951 	bl	8003348 <__aeabi_d2iz>
 80080a6:	0003      	movs	r3, r0
 80080a8:	0018      	movs	r0, r3
 80080aa:	f7fb f989 	bl	80033c0 <__aeabi_i2d>
 80080ae:	2200      	movs	r2, #0
 80080b0:	4b40      	ldr	r3, [pc, #256]	@ (80081b4 <Mic_Upkeep+0x220>)
 80080b2:	f7f9 fe7f 	bl	8001db4 <__aeabi_ddiv>
 80080b6:	0002      	movs	r2, r0
 80080b8:	000b      	movs	r3, r1
 80080ba:	0010      	movs	r0, r2
 80080bc:	0019      	movs	r1, r3
 80080be:	f7fb fa19 	bl	80034f4 <__aeabi_d2f>
 80080c2:	1c02      	adds	r2, r0, #0
 80080c4:	4b38      	ldr	r3, [pc, #224]	@ (80081a8 <Mic_Upkeep+0x214>)
 80080c6:	601a      	str	r2, [r3, #0]
      MIC_Print();
 80080c8:	f000 f95c 	bl	8008384 <MIC_Print>
      if (!startSPLcalculation()) {
 80080cc:	f003 fbba 	bl	800b844 <startSPLcalculation>
 80080d0:	0003      	movs	r3, r0
 80080d2:	001a      	movs	r2, r3
 80080d4:	2301      	movs	r3, #1
 80080d6:	4053      	eors	r3, r2
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d005      	beq.n	80080ea <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 80080de:	4a2c      	ldr	r2, [pc, #176]	@ (8008190 <Mic_Upkeep+0x1fc>)
 80080e0:	4b2c      	ldr	r3, [pc, #176]	@ (8008194 <Mic_Upkeep+0x200>)
 80080e2:	21e6      	movs	r1, #230	@ 0xe6
 80080e4:	0018      	movs	r0, r3
 80080e6:	f005 fa1b 	bl	800d520 <errorHandler>
      }
      if (!enableMicrophone(false))
 80080ea:	2000      	movs	r0, #0
 80080ec:	f003 fb40 	bl	800b770 <enableMicrophone>
 80080f0:	0003      	movs	r3, r0
 80080f2:	001a      	movs	r2, r3
 80080f4:	2301      	movs	r3, #1
 80080f6:	4053      	eors	r3, r2
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d005      	beq.n	800810a <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80080fe:	4a24      	ldr	r2, [pc, #144]	@ (8008190 <Mic_Upkeep+0x1fc>)
 8008100:	4b24      	ldr	r3, [pc, #144]	@ (8008194 <Mic_Upkeep+0x200>)
 8008102:	21ea      	movs	r1, #234	@ 0xea
 8008104:	0018      	movs	r0, r3
 8008106:	f005 fa0b 	bl	800d520 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 800810a:	f005 fcf1 	bl	800daf0 <HAL_GetTick>
 800810e:	0003      	movs	r3, r0
 8008110:	22fa      	movs	r2, #250	@ 0xfa
 8008112:	0092      	lsls	r2, r2, #2
 8008114:	189a      	adds	r2, r3, r2
 8008116:	4b28      	ldr	r3, [pc, #160]	@ (80081b8 <Mic_Upkeep+0x224>)
 8008118:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800811a:	4b1c      	ldr	r3, [pc, #112]	@ (800818c <Mic_Upkeep+0x1f8>)
 800811c:	2203      	movs	r2, #3
 800811e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008120:	f004 fa96 	bl	800c650 <ResetMICIndicator>
    }
    break;
 8008124:	e028      	b.n	8008178 <Mic_Upkeep+0x1e4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8008126:	4b24      	ldr	r3, [pc, #144]	@ (80081b8 <Mic_Upkeep+0x224>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	0018      	movs	r0, r3
 800812c:	f005 f8ec 	bl	800d308 <TimestampIsReached>
 8008130:	1e03      	subs	r3, r0, #0
 8008132:	d023      	beq.n	800817c <Mic_Upkeep+0x1e8>
      if (!enableMicrophone(true))
 8008134:	2001      	movs	r0, #1
 8008136:	f003 fb1b 	bl	800b770 <enableMicrophone>
 800813a:	0003      	movs	r3, r0
 800813c:	001a      	movs	r2, r3
 800813e:	2301      	movs	r3, #1
 8008140:	4053      	eors	r3, r2
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <Mic_Upkeep+0x1c0>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8008148:	4a11      	ldr	r2, [pc, #68]	@ (8008190 <Mic_Upkeep+0x1fc>)
 800814a:	4b12      	ldr	r3, [pc, #72]	@ (8008194 <Mic_Upkeep+0x200>)
 800814c:	21f7      	movs	r1, #247	@ 0xf7
 800814e:	0018      	movs	r0, r3
 8008150:	f005 f9e6 	bl	800d520 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008154:	4b0d      	ldr	r3, [pc, #52]	@ (800818c <Mic_Upkeep+0x1f8>)
 8008156:	2201      	movs	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800815a:	f004 fa61 	bl	800c620 <SetMICIndicator>
    }
    break;
 800815e:	e00d      	b.n	800817c <Mic_Upkeep+0x1e8>

  default:
    Debug("Unexpected occurrence happened");
 8008160:	4a16      	ldr	r2, [pc, #88]	@ (80081bc <Mic_Upkeep+0x228>)
 8008162:	4b17      	ldr	r3, [pc, #92]	@ (80081c0 <Mic_Upkeep+0x22c>)
 8008164:	0019      	movs	r1, r3
 8008166:	2003      	movs	r0, #3
 8008168:	f005 f924 	bl	800d3b4 <CreateLine>
    MicState = MIC_STATE_INIT;
 800816c:	4b07      	ldr	r3, [pc, #28]	@ (800818c <Mic_Upkeep+0x1f8>)
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
    break;
 8008172:	e004      	b.n	800817e <Mic_Upkeep+0x1ea>
    break;
 8008174:	46c0      	nop			@ (mov r8, r8)
 8008176:	e002      	b.n	800817e <Mic_Upkeep+0x1ea>
    break;
 8008178:	46c0      	nop			@ (mov r8, r8)
 800817a:	e000      	b.n	800817e <Mic_Upkeep+0x1ea>
    break;
 800817c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800817e:	4b03      	ldr	r3, [pc, #12]	@ (800818c <Mic_Upkeep+0x1f8>)
 8008180:	781b      	ldrb	r3, [r3, #0]
}
 8008182:	0018      	movs	r0, r3
 8008184:	46bd      	mov	sp, r7
 8008186:	b003      	add	sp, #12
 8008188:	bd90      	pop	{r4, r7, pc}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	20000f82 	.word	0x20000f82
 8008190:	08022c6c 	.word	0x08022c6c
 8008194:	08023aa4 	.word	0x08023aa4
 8008198:	200012c0 	.word	0x200012c0
 800819c:	20000f70 	.word	0x20000f70
 80081a0:	08022c88 	.word	0x08022c88
 80081a4:	08022cb4 	.word	0x08022cb4
 80081a8:	20000fb4 	.word	0x20000fb4
 80081ac:	42c80000 	.word	0x42c80000
 80081b0:	3fe00000 	.word	0x3fe00000
 80081b4:	40590000 	.word	0x40590000
 80081b8:	20000f6c 	.word	0x20000f6c
 80081bc:	08022cbc 	.word	0x08022cbc
 80081c0:	08022bfc 	.word	0x08022bfc

080081c4 <Meas_Upkeep>:

MeasurementState Meas_Upkeep(void) {
 80081c4:	b5b0      	push	{r4, r5, r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 80081ca:	4b39      	ldr	r3, [pc, #228]	@ (80082b0 <Meas_Upkeep+0xec>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b06      	cmp	r3, #6
 80081d0:	d862      	bhi.n	8008298 <Meas_Upkeep+0xd4>
 80081d2:	009a      	lsls	r2, r3, #2
 80081d4:	4b37      	ldr	r3, [pc, #220]	@ (80082b4 <Meas_Upkeep+0xf0>)
 80081d6:	18d3      	adds	r3, r2, r3
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 80081dc:	4a36      	ldr	r2, [pc, #216]	@ (80082b8 <Meas_Upkeep+0xf4>)
 80081de:	4b37      	ldr	r3, [pc, #220]	@ (80082bc <Meas_Upkeep+0xf8>)
 80081e0:	0019      	movs	r1, r3
 80081e2:	2003      	movs	r0, #3
 80081e4:	f005 f8e6 	bl	800d3b4 <CreateLine>
    break;
 80081e8:	e05d      	b.n	80082a6 <Meas_Upkeep+0xe2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80081ea:	f7ff fe81 	bl	8007ef0 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80081ee:	4b30      	ldr	r3, [pc, #192]	@ (80082b0 <Meas_Upkeep+0xec>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]
    break;
 80081f4:	e057      	b.n	80082a6 <Meas_Upkeep+0xe2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80081f6:	f7ff fe01 	bl	8007dfc <StartMeasurements>
    SetMeasurementIndicator();
 80081fa:	f004 f9e3 	bl	800c5c4 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80081fe:	4b2c      	ldr	r3, [pc, #176]	@ (80082b0 <Meas_Upkeep+0xec>)
 8008200:	2202      	movs	r2, #2
 8008202:	701a      	strb	r2, [r3, #0]
   break;
 8008204:	e04f      	b.n	80082a6 <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8008206:	f7ff fe8d 	bl	8007f24 <MeasurementsCompleted>
 800820a:	1e03      	subs	r3, r0, #0
 800820c:	d048      	beq.n	80082a0 <Meas_Upkeep+0xdc>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 800820e:	4b28      	ldr	r3, [pc, #160]	@ (80082b0 <Meas_Upkeep+0xec>)
 8008210:	2203      	movs	r2, #3
 8008212:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008214:	e044      	b.n	80082a0 <Meas_Upkeep+0xdc>
  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
//    Debug("Processing results.");
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8008216:	4b2a      	ldr	r3, [pc, #168]	@ (80082c0 <Meas_Upkeep+0xfc>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	4a2a      	ldr	r2, [pc, #168]	@ (80082c4 <Meas_Upkeep+0x100>)
 800821c:	4927      	ldr	r1, [pc, #156]	@ (80082bc <Meas_Upkeep+0xf8>)
 800821e:	2003      	movs	r0, #3
 8008220:	f005 f8c8 	bl	800d3b4 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8008224:	4b26      	ldr	r3, [pc, #152]	@ (80082c0 <Meas_Upkeep+0xfc>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	1c18      	adds	r0, r3, #0
 800822a:	f7fb f91b 	bl	8003464 <__aeabi_f2d>
 800822e:	0004      	movs	r4, r0
 8008230:	000d      	movs	r5, r1
 8008232:	4b23      	ldr	r3, [pc, #140]	@ (80082c0 <Meas_Upkeep+0xfc>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	1c18      	adds	r0, r3, #0
 8008238:	f7fb f914 	bl	8003464 <__aeabi_f2d>
 800823c:	0002      	movs	r2, r0
 800823e:	000b      	movs	r3, r1
 8008240:	4821      	ldr	r0, [pc, #132]	@ (80082c8 <Meas_Upkeep+0x104>)
 8008242:	491e      	ldr	r1, [pc, #120]	@ (80082bc <Meas_Upkeep+0xf8>)
 8008244:	9202      	str	r2, [sp, #8]
 8008246:	9303      	str	r3, [sp, #12]
 8008248:	9400      	str	r4, [sp, #0]
 800824a:	9501      	str	r5, [sp, #4]
 800824c:	0002      	movs	r2, r0
 800824e:	2003      	movs	r0, #3
 8008250:	f005 f8b0 	bl	800d3b4 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8008254:	4b1a      	ldr	r3, [pc, #104]	@ (80082c0 <Meas_Upkeep+0xfc>)
 8008256:	6858      	ldr	r0, [r3, #4]
 8008258:	4b19      	ldr	r3, [pc, #100]	@ (80082c0 <Meas_Upkeep+0xfc>)
 800825a:	6819      	ldr	r1, [r3, #0]
 800825c:	4b18      	ldr	r3, [pc, #96]	@ (80082c0 <Meas_Upkeep+0xfc>)
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	b29b      	uxth	r3, r3
 8008262:	001a      	movs	r2, r3
 8008264:	f7fb fb4a 	bl	80038fc <setMeasurement>
    ResetMeasurementIndicator();
 8008268:	f004 f9c4 	bl	800c5f4 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 60000;  // once a minute
 800826c:	f005 fc40 	bl	800daf0 <HAL_GetTick>
 8008270:	0003      	movs	r3, r0
 8008272:	4a16      	ldr	r2, [pc, #88]	@ (80082cc <Meas_Upkeep+0x108>)
 8008274:	189a      	adds	r2, r3, r2
 8008276:	4b16      	ldr	r3, [pc, #88]	@ (80082d0 <Meas_Upkeep+0x10c>)
 8008278:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 800827a:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <Meas_Upkeep+0xec>)
 800827c:	2206      	movs	r2, #6
 800827e:	701a      	strb	r2, [r3, #0]
    break;
 8008280:	e011      	b.n	80082a6 <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8008282:	4b13      	ldr	r3, [pc, #76]	@ (80082d0 <Meas_Upkeep+0x10c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	0018      	movs	r0, r3
 8008288:	f005 f83e 	bl	800d308 <TimestampIsReached>
 800828c:	1e03      	subs	r3, r0, #0
 800828e:	d009      	beq.n	80082a4 <Meas_Upkeep+0xe0>
      MeasState = MEAS_STATE_INIT;
 8008290:	4b07      	ldr	r3, [pc, #28]	@ (80082b0 <Meas_Upkeep+0xec>)
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
    }

    break;
 8008296:	e005      	b.n	80082a4 <Meas_Upkeep+0xe0>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8008298:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <Meas_Upkeep+0xec>)
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
    break;
 800829e:	e002      	b.n	80082a6 <Meas_Upkeep+0xe2>
    break;
 80082a0:	46c0      	nop			@ (mov r8, r8)
 80082a2:	e000      	b.n	80082a6 <Meas_Upkeep+0xe2>
    break;
 80082a4:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 80082a6:	4b02      	ldr	r3, [pc, #8]	@ (80082b0 <Meas_Upkeep+0xec>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
}
 80082aa:	0018      	movs	r0, r3
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bdb0      	pop	{r4, r5, r7, pc}
 80082b0:	20000f83 	.word	0x20000f83
 80082b4:	08023a88 	.word	0x08023a88
 80082b8:	08022cdc 	.word	0x08022cdc
 80082bc:	08022bfc 	.word	0x08022bfc
 80082c0:	20000f1c 	.word	0x20000f1c
 80082c4:	08022cfc 	.word	0x08022cfc
 80082c8:	08022d14 	.word	0x08022d14
 80082cc:	0000ea60 	.word	0x0000ea60
 80082d0:	20000f68 	.word	0x20000f68

080082d4 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80082de:	240f      	movs	r4, #15
 80082e0:	193b      	adds	r3, r7, r4
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80082e6:	4b20      	ldr	r3, [pc, #128]	@ (8008368 <Meas_SetEnabledSensors+0x94>)
 80082e8:	1d3a      	adds	r2, r7, #4
 80082ea:	6812      	ldr	r2, [r2, #0]
 80082ec:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80082ee:	193b      	adds	r3, r7, r4
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	193a      	adds	r2, r7, r4
 80082f4:	1c59      	adds	r1, r3, #1
 80082f6:	7011      	strb	r1, [r2, #0]
 80082f8:	0018      	movs	r0, r3
 80082fa:	1d3b      	adds	r3, r7, #4
 80082fc:	7819      	ldrb	r1, [r3, #0]
 80082fe:	4a1b      	ldr	r2, [pc, #108]	@ (800836c <Meas_SetEnabledSensors+0x98>)
 8008300:	0103      	lsls	r3, r0, #4
 8008302:	18d3      	adds	r3, r2, r3
 8008304:	330c      	adds	r3, #12
 8008306:	1c0a      	adds	r2, r1, #0
 8008308:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800830a:	193b      	adds	r3, r7, r4
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	193a      	adds	r2, r7, r4
 8008310:	1c59      	adds	r1, r3, #1
 8008312:	7011      	strb	r1, [r2, #0]
 8008314:	0018      	movs	r0, r3
 8008316:	1d3b      	adds	r3, r7, #4
 8008318:	7859      	ldrb	r1, [r3, #1]
 800831a:	4a14      	ldr	r2, [pc, #80]	@ (800836c <Meas_SetEnabledSensors+0x98>)
 800831c:	0103      	lsls	r3, r0, #4
 800831e:	18d3      	adds	r3, r2, r3
 8008320:	330c      	adds	r3, #12
 8008322:	1c0a      	adds	r2, r1, #0
 8008324:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8008326:	193b      	adds	r3, r7, r4
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	193a      	adds	r2, r7, r4
 800832c:	1c59      	adds	r1, r3, #1
 800832e:	7011      	strb	r1, [r2, #0]
 8008330:	0018      	movs	r0, r3
 8008332:	1d3b      	adds	r3, r7, #4
 8008334:	7899      	ldrb	r1, [r3, #2]
 8008336:	4a0d      	ldr	r2, [pc, #52]	@ (800836c <Meas_SetEnabledSensors+0x98>)
 8008338:	0103      	lsls	r3, r0, #4
 800833a:	18d3      	adds	r3, r2, r3
 800833c:	330c      	adds	r3, #12
 800833e:	1c0a      	adds	r2, r1, #0
 8008340:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8008342:	193b      	adds	r3, r7, r4
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	193a      	adds	r2, r7, r4
 8008348:	1c59      	adds	r1, r3, #1
 800834a:	7011      	strb	r1, [r2, #0]
 800834c:	0018      	movs	r0, r3
 800834e:	1d3b      	adds	r3, r7, #4
 8008350:	78d9      	ldrb	r1, [r3, #3]
 8008352:	4a06      	ldr	r2, [pc, #24]	@ (800836c <Meas_SetEnabledSensors+0x98>)
 8008354:	0103      	lsls	r3, r0, #4
 8008356:	18d3      	adds	r3, r2, r3
 8008358:	330c      	adds	r3, #12
 800835a:	1c0a      	adds	r2, r1, #0
 800835c:	701a      	strb	r2, [r3, #0]
}
 800835e:	46c0      	nop			@ (mov r8, r8)
 8008360:	46bd      	mov	sp, r7
 8008362:	b005      	add	sp, #20
 8008364:	bd90      	pop	{r4, r7, pc}
 8008366:	46c0      	nop			@ (mov r8, r8)
 8008368:	20000f5c 	.word	0x20000f5c
 800836c:	20000f2c 	.word	0x20000f2c

08008370 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8008374:	4b02      	ldr	r3, [pc, #8]	@ (8008380 <SetESPMeasurementDone+0x10>)
 8008376:	2201      	movs	r2, #1
 8008378:	70da      	strb	r2, [r3, #3]
}
 800837a:	46c0      	nop			@ (mov r8, r8)
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20000f60 	.word	0x20000f60

08008384 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 800838a:	4b81      	ldr	r3, [pc, #516]	@ (8008590 <MIC_Print+0x20c>)
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	4b81      	ldr	r3, [pc, #516]	@ (8008594 <MIC_Print+0x210>)
 8008390:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8008392:	4b81      	ldr	r3, [pc, #516]	@ (8008598 <MIC_Print+0x214>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b09      	cmp	r3, #9
 8008398:	d80e      	bhi.n	80083b8 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 800839a:	4b7f      	ldr	r3, [pc, #508]	@ (8008598 <MIC_Print+0x214>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	001a      	movs	r2, r3
 80083a0:	4b7c      	ldr	r3, [pc, #496]	@ (8008594 <MIC_Print+0x210>)
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	4b7d      	ldr	r3, [pc, #500]	@ (800859c <MIC_Print+0x218>)
 80083a6:	0092      	lsls	r2, r2, #2
 80083a8:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80083aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008598 <MIC_Print+0x214>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	3301      	adds	r3, #1
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	4b79      	ldr	r3, [pc, #484]	@ (8008598 <MIC_Print+0x214>)
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	e013      	b.n	80083e0 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 80083b8:	4b77      	ldr	r3, [pc, #476]	@ (8008598 <MIC_Print+0x214>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 80083be:	4b76      	ldr	r3, [pc, #472]	@ (8008598 <MIC_Print+0x214>)
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	001a      	movs	r2, r3
 80083c4:	4b73      	ldr	r3, [pc, #460]	@ (8008594 <MIC_Print+0x210>)
 80083c6:	6819      	ldr	r1, [r3, #0]
 80083c8:	4b74      	ldr	r3, [pc, #464]	@ (800859c <MIC_Print+0x218>)
 80083ca:	0092      	lsls	r2, r2, #2
 80083cc:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80083ce:	4b72      	ldr	r3, [pc, #456]	@ (8008598 <MIC_Print+0x214>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	3301      	adds	r3, #1
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	4b70      	ldr	r3, [pc, #448]	@ (8008598 <MIC_Print+0x214>)
 80083d8:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 80083da:	4b71      	ldr	r3, [pc, #452]	@ (80085a0 <MIC_Print+0x21c>)
 80083dc:	2201      	movs	r2, #1
 80083de:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 80083e0:	4b6f      	ldr	r3, [pc, #444]	@ (80085a0 <MIC_Print+0x21c>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2201      	movs	r2, #1
 80083e6:	4053      	eors	r3, r2
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 80083ee:	4b69      	ldr	r3, [pc, #420]	@ (8008594 <MIC_Print+0x210>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	1c18      	adds	r0, r3, #0
 80083f4:	f7fb fa9e 	bl	8003934 <setMic>
 80083f8:	e02d      	b.n	8008456 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 80083fa:	4b6a      	ldr	r3, [pc, #424]	@ (80085a4 <MIC_Print+0x220>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8008400:	1dfb      	adds	r3, r7, #7
 8008402:	2200      	movs	r2, #0
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e013      	b.n	8008430 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8008408:	1dfb      	adds	r3, r7, #7
 800840a:	781a      	ldrb	r2, [r3, #0]
 800840c:	4b63      	ldr	r3, [pc, #396]	@ (800859c <MIC_Print+0x218>)
 800840e:	0092      	lsls	r2, r2, #2
 8008410:	58d2      	ldr	r2, [r2, r3]
 8008412:	4b64      	ldr	r3, [pc, #400]	@ (80085a4 <MIC_Print+0x220>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	1c19      	adds	r1, r3, #0
 8008418:	1c10      	adds	r0, r2, #0
 800841a:	f7f8 fa51 	bl	80008c0 <__aeabi_fadd>
 800841e:	1c03      	adds	r3, r0, #0
 8008420:	1c1a      	adds	r2, r3, #0
 8008422:	4b60      	ldr	r3, [pc, #384]	@ (80085a4 <MIC_Print+0x220>)
 8008424:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8008426:	1dfb      	adds	r3, r7, #7
 8008428:	781a      	ldrb	r2, [r3, #0]
 800842a:	1dfb      	adds	r3, r7, #7
 800842c:	3201      	adds	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	1dfb      	adds	r3, r7, #7
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b09      	cmp	r3, #9
 8008436:	d9e7      	bls.n	8008408 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8008438:	4b5a      	ldr	r3, [pc, #360]	@ (80085a4 <MIC_Print+0x220>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	495a      	ldr	r1, [pc, #360]	@ (80085a8 <MIC_Print+0x224>)
 800843e:	1c18      	adds	r0, r3, #0
 8008440:	f7f8 fbc8 	bl	8000bd4 <__aeabi_fdiv>
 8008444:	1c03      	adds	r3, r0, #0
 8008446:	1c1a      	adds	r2, r3, #0
 8008448:	4b56      	ldr	r3, [pc, #344]	@ (80085a4 <MIC_Print+0x220>)
 800844a:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 800844c:	4b55      	ldr	r3, [pc, #340]	@ (80085a4 <MIC_Print+0x220>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	1c18      	adds	r0, r3, #0
 8008452:	f7fb fa6f 	bl	8003934 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8008456:	4b4f      	ldr	r3, [pc, #316]	@ (8008594 <MIC_Print+0x210>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4954      	ldr	r1, [pc, #336]	@ (80085ac <MIC_Print+0x228>)
 800845c:	1c18      	adds	r0, r3, #0
 800845e:	f7f8 f885 	bl	800056c <__aeabi_fcmpge>
 8008462:	1e03      	subs	r3, r0, #0
 8008464:	d004      	beq.n	8008470 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8008466:	2201      	movs	r2, #1
 8008468:	2101      	movs	r1, #1
 800846a:	2001      	movs	r0, #1
 800846c:	f004 f82c 	bl	800c4c8 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8008470:	4b48      	ldr	r3, [pc, #288]	@ (8008594 <MIC_Print+0x210>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	494d      	ldr	r1, [pc, #308]	@ (80085ac <MIC_Print+0x228>)
 8008476:	1c18      	adds	r0, r3, #0
 8008478:	f7f8 f85a 	bl	8000530 <__aeabi_fcmplt>
 800847c:	1e03      	subs	r3, r0, #0
 800847e:	d00c      	beq.n	800849a <MIC_Print+0x116>
 8008480:	4b44      	ldr	r3, [pc, #272]	@ (8008594 <MIC_Print+0x210>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	494a      	ldr	r1, [pc, #296]	@ (80085b0 <MIC_Print+0x22c>)
 8008486:	1c18      	adds	r0, r3, #0
 8008488:	f7f8 f870 	bl	800056c <__aeabi_fcmpge>
 800848c:	1e03      	subs	r3, r0, #0
 800848e:	d004      	beq.n	800849a <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8008490:	2200      	movs	r2, #0
 8008492:	2100      	movs	r1, #0
 8008494:	2001      	movs	r0, #1
 8008496:	f004 f817 	bl	800c4c8 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 800849a:	4b3e      	ldr	r3, [pc, #248]	@ (8008594 <MIC_Print+0x210>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4944      	ldr	r1, [pc, #272]	@ (80085b0 <MIC_Print+0x22c>)
 80084a0:	1c18      	adds	r0, r3, #0
 80084a2:	f7f8 f845 	bl	8000530 <__aeabi_fcmplt>
 80084a6:	1e03      	subs	r3, r0, #0
 80084a8:	d00c      	beq.n	80084c4 <MIC_Print+0x140>
 80084aa:	4b3a      	ldr	r3, [pc, #232]	@ (8008594 <MIC_Print+0x210>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4941      	ldr	r1, [pc, #260]	@ (80085b4 <MIC_Print+0x230>)
 80084b0:	1c18      	adds	r0, r3, #0
 80084b2:	f7f8 f85b 	bl	800056c <__aeabi_fcmpge>
 80084b6:	1e03      	subs	r3, r0, #0
 80084b8:	d004      	beq.n	80084c4 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 80084ba:	2200      	movs	r2, #0
 80084bc:	2101      	movs	r1, #1
 80084be:	2001      	movs	r0, #1
 80084c0:	f004 f802 	bl	800c4c8 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 80084c4:	4b33      	ldr	r3, [pc, #204]	@ (8008594 <MIC_Print+0x210>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	493a      	ldr	r1, [pc, #232]	@ (80085b4 <MIC_Print+0x230>)
 80084ca:	1c18      	adds	r0, r3, #0
 80084cc:	f7f8 f830 	bl	8000530 <__aeabi_fcmplt>
 80084d0:	1e03      	subs	r3, r0, #0
 80084d2:	d00c      	beq.n	80084ee <MIC_Print+0x16a>
 80084d4:	4b2f      	ldr	r3, [pc, #188]	@ (8008594 <MIC_Print+0x210>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4937      	ldr	r1, [pc, #220]	@ (80085b8 <MIC_Print+0x234>)
 80084da:	1c18      	adds	r0, r3, #0
 80084dc:	f7f8 f846 	bl	800056c <__aeabi_fcmpge>
 80084e0:	1e03      	subs	r3, r0, #0
 80084e2:	d004      	beq.n	80084ee <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 80084e4:	2200      	movs	r2, #0
 80084e6:	2101      	movs	r1, #1
 80084e8:	2000      	movs	r0, #0
 80084ea:	f003 ffed 	bl	800c4c8 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 80084ee:	4b29      	ldr	r3, [pc, #164]	@ (8008594 <MIC_Print+0x210>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4931      	ldr	r1, [pc, #196]	@ (80085b8 <MIC_Print+0x234>)
 80084f4:	1c18      	adds	r0, r3, #0
 80084f6:	f7f8 f81b 	bl	8000530 <__aeabi_fcmplt>
 80084fa:	1e03      	subs	r3, r0, #0
 80084fc:	d00c      	beq.n	8008518 <MIC_Print+0x194>
 80084fe:	4b25      	ldr	r3, [pc, #148]	@ (8008594 <MIC_Print+0x210>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	492e      	ldr	r1, [pc, #184]	@ (80085bc <MIC_Print+0x238>)
 8008504:	1c18      	adds	r0, r3, #0
 8008506:	f7f8 f831 	bl	800056c <__aeabi_fcmpge>
 800850a:	1e03      	subs	r3, r0, #0
 800850c:	d004      	beq.n	8008518 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 800850e:	2201      	movs	r2, #1
 8008510:	2100      	movs	r1, #0
 8008512:	2000      	movs	r0, #0
 8008514:	f003 ffd8 	bl	800c4c8 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8008518:	4b1e      	ldr	r3, [pc, #120]	@ (8008594 <MIC_Print+0x210>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4927      	ldr	r1, [pc, #156]	@ (80085bc <MIC_Print+0x238>)
 800851e:	1c18      	adds	r0, r3, #0
 8008520:	f7f8 f806 	bl	8000530 <__aeabi_fcmplt>
 8008524:	1e03      	subs	r3, r0, #0
 8008526:	d00c      	beq.n	8008542 <MIC_Print+0x1be>
 8008528:	4b1a      	ldr	r3, [pc, #104]	@ (8008594 <MIC_Print+0x210>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4924      	ldr	r1, [pc, #144]	@ (80085c0 <MIC_Print+0x23c>)
 800852e:	1c18      	adds	r0, r3, #0
 8008530:	f7f8 f81c 	bl	800056c <__aeabi_fcmpge>
 8008534:	1e03      	subs	r3, r0, #0
 8008536:	d004      	beq.n	8008542 <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8008538:	2201      	movs	r2, #1
 800853a:	2101      	movs	r1, #1
 800853c:	2000      	movs	r0, #0
 800853e:	f003 ffc3 	bl	800c4c8 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 8008542:	4b14      	ldr	r3, [pc, #80]	@ (8008594 <MIC_Print+0x210>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	491e      	ldr	r1, [pc, #120]	@ (80085c0 <MIC_Print+0x23c>)
 8008548:	1c18      	adds	r0, r3, #0
 800854a:	f7f7 fff1 	bl	8000530 <__aeabi_fcmplt>
 800854e:	1e03      	subs	r3, r0, #0
 8008550:	d00c      	beq.n	800856c <MIC_Print+0x1e8>
 8008552:	4b10      	ldr	r3, [pc, #64]	@ (8008594 <MIC_Print+0x210>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	491b      	ldr	r1, [pc, #108]	@ (80085c4 <MIC_Print+0x240>)
 8008558:	1c18      	adds	r0, r3, #0
 800855a:	f7f8 f807 	bl	800056c <__aeabi_fcmpge>
 800855e:	1e03      	subs	r3, r0, #0
 8008560:	d004      	beq.n	800856c <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 8008562:	2201      	movs	r2, #1
 8008564:	2100      	movs	r1, #0
 8008566:	2001      	movs	r0, #1
 8008568:	f003 ffae 	bl	800c4c8 <SetDBLED>
  }
  if(dBc < 35){//off
 800856c:	4b09      	ldr	r3, [pc, #36]	@ (8008594 <MIC_Print+0x210>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4914      	ldr	r1, [pc, #80]	@ (80085c4 <MIC_Print+0x240>)
 8008572:	1c18      	adds	r0, r3, #0
 8008574:	f7f7 ffdc 	bl	8000530 <__aeabi_fcmplt>
 8008578:	1e03      	subs	r3, r0, #0
 800857a:	d100      	bne.n	800857e <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 800857c:	e004      	b.n	8008588 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	2000      	movs	r0, #0
 8008584:	f003 ffa0 	bl	800c4c8 <SetDBLED>
}
 8008588:	46c0      	nop			@ (mov r8, r8)
 800858a:	46bd      	mov	sp, r7
 800858c:	b002      	add	sp, #8
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000fb4 	.word	0x20000fb4
 8008594:	20000f84 	.word	0x20000f84
 8008598:	20000fb8 	.word	0x20000fb8
 800859c:	20000f88 	.word	0x20000f88
 80085a0:	20000fb9 	.word	0x20000fb9
 80085a4:	20000fb0 	.word	0x20000fb0
 80085a8:	41200000 	.word	0x41200000
 80085ac:	42b40000 	.word	0x42b40000
 80085b0:	42a00000 	.word	0x42a00000
 80085b4:	428c0000 	.word	0x428c0000
 80085b8:	42700000 	.word	0x42700000
 80085bc:	42480000 	.word	0x42480000
 80085c0:	42200000 	.word	0x42200000
 80085c4:	420c0000 	.word	0x420c0000

080085c8 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80085ce:	4b11      	ldr	r3, [pc, #68]	@ (8008614 <MIC_TestMeasurementDone+0x4c>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	4a10      	ldr	r2, [pc, #64]	@ (8008618 <MIC_TestMeasurementDone+0x50>)
 80085d6:	4911      	ldr	r1, [pc, #68]	@ (800861c <MIC_TestMeasurementDone+0x54>)
 80085d8:	2002      	movs	r0, #2
 80085da:	f004 feeb 	bl	800d3b4 <CreateLine>
  if(DataReady) {
 80085de:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <MIC_TestMeasurementDone+0x4c>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d010      	beq.n	800860a <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 80085e8:	1dfb      	adds	r3, r7, #7
 80085ea:	4a0d      	ldr	r2, [pc, #52]	@ (8008620 <MIC_TestMeasurementDone+0x58>)
 80085ec:	7812      	ldrb	r2, [r2, #0]
 80085ee:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80085f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008620 <MIC_TestMeasurementDone+0x58>)
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	4a0b      	ldr	r2, [pc, #44]	@ (8008624 <MIC_TestMeasurementDone+0x5c>)
 80085f8:	4908      	ldr	r1, [pc, #32]	@ (800861c <MIC_TestMeasurementDone+0x54>)
 80085fa:	2002      	movs	r0, #2
 80085fc:	f004 feda 	bl	800d3b4 <CreateLine>
    ResetMICIndicator();
 8008600:	f004 f826 	bl	800c650 <ResetMICIndicator>
    return Check;
 8008604:	1dfb      	adds	r3, r7, #7
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	e000      	b.n	800860c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800860a:	2300      	movs	r3, #0
}
 800860c:	0018      	movs	r0, r3
 800860e:	46bd      	mov	sp, r7
 8008610:	b002      	add	sp, #8
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200012c0 	.word	0x200012c0
 8008618:	08022d48 	.word	0x08022d48
 800861c:	08022d74 	.word	0x08022d74
 8008620:	200012c1 	.word	0x200012c1
 8008624:	08022d78 	.word	0x08022d78

08008628 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008628:	b40f      	push	{r0, r1, r2, r3}
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008630:	2314      	movs	r3, #20
 8008632:	18fb      	adds	r3, r7, r3
 8008634:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	2180      	movs	r1, #128	@ 0x80
 800863c:	0089      	lsls	r1, r1, #2
 800863e:	480a      	ldr	r0, [pc, #40]	@ (8008668 <print+0x40>)
 8008640:	f016 fb92 	bl	801ed68 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008644:	4b08      	ldr	r3, [pc, #32]	@ (8008668 <print+0x40>)
 8008646:	0018      	movs	r0, r3
 8008648:	f7f7 fd90 	bl	800016c <strlen>
 800864c:	0003      	movs	r3, r0
 800864e:	b29a      	uxth	r2, r3
 8008650:	4b05      	ldr	r3, [pc, #20]	@ (8008668 <print+0x40>)
 8008652:	0011      	movs	r1, r2
 8008654:	0018      	movs	r0, r3
 8008656:	f7ff f99d 	bl	8007994 <printString>
}
 800865a:	46c0      	nop			@ (mov r8, r8)
 800865c:	46bd      	mov	sp, r7
 800865e:	b002      	add	sp, #8
 8008660:	bc80      	pop	{r7}
 8008662:	bc08      	pop	{r3}
 8008664:	b004      	add	sp, #16
 8008666:	4718      	bx	r3
 8008668:	20000fbc 	.word	0x20000fbc

0800866c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008672:	1d3b      	adds	r3, r7, #4
 8008674:	0018      	movs	r0, r3
 8008676:	2314      	movs	r3, #20
 8008678:	001a      	movs	r2, r3
 800867a:	2100      	movs	r1, #0
 800867c:	f016 fc20 	bl	801eec0 <memset>
  RTC_DateTypeDef sDate = {0};
 8008680:	003b      	movs	r3, r7
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008686:	4b2e      	ldr	r3, [pc, #184]	@ (8008740 <MX_RTC_Init+0xd4>)
 8008688:	4a2e      	ldr	r2, [pc, #184]	@ (8008744 <MX_RTC_Init+0xd8>)
 800868a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800868c:	4b2c      	ldr	r3, [pc, #176]	@ (8008740 <MX_RTC_Init+0xd4>)
 800868e:	2200      	movs	r2, #0
 8008690:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008692:	4b2b      	ldr	r3, [pc, #172]	@ (8008740 <MX_RTC_Init+0xd4>)
 8008694:	227f      	movs	r2, #127	@ 0x7f
 8008696:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008698:	4b29      	ldr	r3, [pc, #164]	@ (8008740 <MX_RTC_Init+0xd4>)
 800869a:	22ff      	movs	r2, #255	@ 0xff
 800869c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800869e:	4b28      	ldr	r3, [pc, #160]	@ (8008740 <MX_RTC_Init+0xd4>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80086a4:	4b26      	ldr	r3, [pc, #152]	@ (8008740 <MX_RTC_Init+0xd4>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80086aa:	4b25      	ldr	r3, [pc, #148]	@ (8008740 <MX_RTC_Init+0xd4>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80086b0:	4b23      	ldr	r3, [pc, #140]	@ (8008740 <MX_RTC_Init+0xd4>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80086b6:	4b22      	ldr	r3, [pc, #136]	@ (8008740 <MX_RTC_Init+0xd4>)
 80086b8:	0018      	movs	r0, r3
 80086ba:	f00c fa5b 	bl	8014b74 <HAL_RTC_Init>
 80086be:	1e03      	subs	r3, r0, #0
 80086c0:	d001      	beq.n	80086c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80086c2:	f7ff fa15 	bl	8007af0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80086c6:	1d3b      	adds	r3, r7, #4
 80086c8:	220d      	movs	r2, #13
 80086ca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80086cc:	1d3b      	adds	r3, r7, #4
 80086ce:	2200      	movs	r2, #0
 80086d0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80086d2:	1d3b      	adds	r3, r7, #4
 80086d4:	2200      	movs	r2, #0
 80086d6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80086d8:	1d3b      	adds	r3, r7, #4
 80086da:	2200      	movs	r2, #0
 80086dc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80086de:	1d3b      	adds	r3, r7, #4
 80086e0:	2200      	movs	r2, #0
 80086e2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80086e4:	1d39      	adds	r1, r7, #4
 80086e6:	4b16      	ldr	r3, [pc, #88]	@ (8008740 <MX_RTC_Init+0xd4>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	0018      	movs	r0, r3
 80086ec:	f00c fade 	bl	8014cac <HAL_RTC_SetTime>
 80086f0:	1e03      	subs	r3, r0, #0
 80086f2:	d001      	beq.n	80086f8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80086f4:	f7ff f9fc 	bl	8007af0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80086f8:	003b      	movs	r3, r7
 80086fa:	2206      	movs	r2, #6
 80086fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80086fe:	003b      	movs	r3, r7
 8008700:	2211      	movs	r2, #17
 8008702:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008704:	003b      	movs	r3, r7
 8008706:	2217      	movs	r2, #23
 8008708:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800870a:	003b      	movs	r3, r7
 800870c:	2218      	movs	r2, #24
 800870e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008710:	0039      	movs	r1, r7
 8008712:	4b0b      	ldr	r3, [pc, #44]	@ (8008740 <MX_RTC_Init+0xd4>)
 8008714:	2200      	movs	r2, #0
 8008716:	0018      	movs	r0, r3
 8008718:	f00c fbd0 	bl	8014ebc <HAL_RTC_SetDate>
 800871c:	1e03      	subs	r3, r0, #0
 800871e:	d001      	beq.n	8008724 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008720:	f7ff f9e6 	bl	8007af0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008724:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <MX_RTC_Init+0xd4>)
 8008726:	2200      	movs	r2, #0
 8008728:	2100      	movs	r1, #0
 800872a:	0018      	movs	r0, r3
 800872c:	f00c fd80 	bl	8015230 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008730:	1e03      	subs	r3, r0, #0
 8008732:	d001      	beq.n	8008738 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008734:	f7ff f9dc 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008738:	46c0      	nop			@ (mov r8, r8)
 800873a:	46bd      	mov	sp, r7
 800873c:	b006      	add	sp, #24
 800873e:	bd80      	pop	{r7, pc}
 8008740:	200011bc 	.word	0x200011bc
 8008744:	40002800 	.word	0x40002800

08008748 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a0a      	ldr	r2, [pc, #40]	@ (8008780 <HAL_RTC_MspInit+0x38>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d10e      	bne.n	8008778 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800875a:	4b0a      	ldr	r3, [pc, #40]	@ (8008784 <HAL_RTC_MspInit+0x3c>)
 800875c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800875e:	4b09      	ldr	r3, [pc, #36]	@ (8008784 <HAL_RTC_MspInit+0x3c>)
 8008760:	2180      	movs	r1, #128	@ 0x80
 8008762:	02c9      	lsls	r1, r1, #11
 8008764:	430a      	orrs	r2, r1
 8008766:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008768:	2200      	movs	r2, #0
 800876a:	2100      	movs	r1, #0
 800876c:	2002      	movs	r0, #2
 800876e:	f005 fe51 	bl	800e414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008772:	2002      	movs	r0, #2
 8008774:	f005 fe63 	bl	800e43e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008778:	46c0      	nop			@ (mov r8, r8)
 800877a:	46bd      	mov	sp, r7
 800877c:	b002      	add	sp, #8
 800877e:	bd80      	pop	{r7, pc}
 8008780:	40002800 	.word	0x40002800
 8008784:	40021000 	.word	0x40021000

08008788 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
static sen5x_states samplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008790:	f005 f9ae 	bl	800daf0 <HAL_GetTick>
 8008794:	0002      	movs	r2, r0
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	18d2      	adds	r2, r2, r3
 800879a:	4b03      	ldr	r3, [pc, #12]	@ (80087a8 <setsen5xReadTimer+0x20>)
 800879c:	601a      	str	r2, [r3, #0]
}
 800879e:	46c0      	nop			@ (mov r8, r8)
 80087a0:	46bd      	mov	sp, r7
 80087a2:	b002      	add	sp, #8
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	46c0      	nop			@ (mov r8, r8)
 80087a8:	200011e4 	.word	0x200011e4

080087ac <enable_sen5x>:

bool enable_sen5x(uint32_t sleepTime) {
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  if (sen5x_Present) {
 80087b4:	4b19      	ldr	r3, [pc, #100]	@ (800881c <enable_sen5x+0x70>)
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d026      	beq.n	800880a <enable_sen5x+0x5e>
    sen5x_Enable = !sen5x_Enable;
 80087bc:	4b18      	ldr	r3, [pc, #96]	@ (8008820 <enable_sen5x+0x74>)
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	1e5a      	subs	r2, r3, #1
 80087c2:	4193      	sbcs	r3, r2
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2201      	movs	r2, #1
 80087c8:	4053      	eors	r3, r2
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	1c1a      	adds	r2, r3, #0
 80087ce:	2301      	movs	r3, #1
 80087d0:	4013      	ands	r3, r2
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	4b12      	ldr	r3, [pc, #72]	@ (8008820 <enable_sen5x+0x74>)
 80087d6:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 80087d8:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <enable_sen5x+0x74>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00a      	beq.n	80087f6 <enable_sen5x+0x4a>
      setsen5xReadTimer(0);
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7ff ffd1 	bl	8008788 <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 80087e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008820 <enable_sen5x+0x74>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008824 <enable_sen5x+0x78>)
 80087ec:	490e      	ldr	r1, [pc, #56]	@ (8008828 <enable_sen5x+0x7c>)
 80087ee:	2003      	movs	r0, #3
 80087f0:	f004 fde0 	bl	800d3b4 <CreateLine>
 80087f4:	e009      	b.n	800880a <enable_sen5x+0x5e>
    }
    else {
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000)));
 80087f6:	f005 f97b 	bl	800daf0 <HAL_GetTick>
 80087fa:	0002      	movs	r2, r0
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	490b      	ldr	r1, [pc, #44]	@ (800882c <enable_sen5x+0x80>)
 8008800:	434b      	muls	r3, r1
 8008802:	18d3      	adds	r3, r2, r3
 8008804:	0018      	movs	r0, r3
 8008806:	f7ff ffbf 	bl	8008788 <setsen5xReadTimer>
    }
  }
  samplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800880a:	4b09      	ldr	r3, [pc, #36]	@ (8008830 <enable_sen5x+0x84>)
 800880c:	2201      	movs	r2, #1
 800880e:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008810:	4b03      	ldr	r3, [pc, #12]	@ (8008820 <enable_sen5x+0x74>)
 8008812:	781b      	ldrb	r3, [r3, #0]
}
 8008814:	0018      	movs	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	b002      	add	sp, #8
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000f00 	.word	0x20000f00
 8008820:	200011e2 	.word	0x200011e2
 8008824:	08022d90 	.word	0x08022d90
 8008828:	08022db0 	.word	0x08022db0
 800882c:	00000bb8 	.word	0x00000bb8
 8008830:	20000080 	.word	0x20000080

08008834 <sen5x_Power_On>:
void sen5x_Power_On(void) {
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008838:	4a0a      	ldr	r2, [pc, #40]	@ (8008864 <sen5x_Power_On+0x30>)
 800883a:	4b0b      	ldr	r3, [pc, #44]	@ (8008868 <sen5x_Power_On+0x34>)
 800883c:	0019      	movs	r1, r3
 800883e:	2003      	movs	r0, #3
 8008840:	f004 fdb8 	bl	800d3b4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008844:	2380      	movs	r3, #128	@ 0x80
 8008846:	015b      	lsls	r3, r3, #5
 8008848:	4808      	ldr	r0, [pc, #32]	@ (800886c <sen5x_Power_On+0x38>)
 800884a:	2201      	movs	r2, #1
 800884c:	0019      	movs	r1, r3
 800884e:	f006 fbca 	bl	800efe6 <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008852:	4b07      	ldr	r3, [pc, #28]	@ (8008870 <sen5x_Power_On+0x3c>)
 8008854:	2201      	movs	r2, #1
 8008856:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 8008858:	20c8      	movs	r0, #200	@ 0xc8
 800885a:	f005 f953 	bl	800db04 <HAL_Delay>
  return;
 800885e:	46c0      	nop			@ (mov r8, r8)
}
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	08022db4 	.word	0x08022db4
 8008868:	08022db0 	.word	0x08022db0
 800886c:	50000800 	.word	0x50000800
 8008870:	200011e1 	.word	0x200011e1

08008874 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008878:	4a09      	ldr	r2, [pc, #36]	@ (80088a0 <sen5x_Power_Off+0x2c>)
 800887a:	4b0a      	ldr	r3, [pc, #40]	@ (80088a4 <sen5x_Power_Off+0x30>)
 800887c:	0019      	movs	r1, r3
 800887e:	2003      	movs	r0, #3
 8008880:	f004 fd98 	bl	800d3b4 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008884:	2380      	movs	r3, #128	@ 0x80
 8008886:	015b      	lsls	r3, r3, #5
 8008888:	4807      	ldr	r0, [pc, #28]	@ (80088a8 <sen5x_Power_Off+0x34>)
 800888a:	2200      	movs	r2, #0
 800888c:	0019      	movs	r1, r3
 800888e:	f006 fbaa 	bl	800efe6 <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008892:	4b06      	ldr	r3, [pc, #24]	@ (80088ac <sen5x_Power_Off+0x38>)
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
  return;
 8008898:	46c0      	nop			@ (mov r8, r8)
}
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	46c0      	nop			@ (mov r8, r8)
 80088a0:	08022dd0 	.word	0x08022dd0
 80088a4:	08022db0 	.word	0x08022db0
 80088a8:	50000800 	.word	0x50000800
 80088ac:	200011e1 	.word	0x200011e1

080088b0 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 80088b4:	4b02      	ldr	r3, [pc, #8]	@ (80088c0 <reset_fanCleaningDone+0x10>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
}
 80088ba:	46c0      	nop			@ (mov r8, r8)
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	200011e0 	.word	0x200011e0

080088c4 <probe_sen5x>:

int16_t probe_sen5x(void) {
 80088c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088c6:	b09b      	sub	sp, #108	@ 0x6c
 80088c8:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 80088ca:	2456      	movs	r4, #86	@ 0x56
 80088cc:	193b      	adds	r3, r7, r4
 80088ce:	2200      	movs	r2, #0
 80088d0:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 80088d2:	2355      	movs	r3, #85	@ 0x55
 80088d4:	18fb      	adds	r3, r7, r3
 80088d6:	2220      	movs	r2, #32
 80088d8:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 80088da:	2354      	movs	r3, #84	@ 0x54
 80088dc:	18fb      	adds	r3, r7, r3
 80088de:	2220      	movs	r2, #32
 80088e0:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 80088e2:	f7ff ffa7 	bl	8008834 <sen5x_Power_On>

  error = sen5x_device_reset();
 80088e6:	0025      	movs	r5, r4
 80088e8:	193c      	adds	r4, r7, r4
 80088ea:	f000 ffed 	bl	80098c8 <sen5x_device_reset>
 80088ee:	0003      	movs	r3, r0
 80088f0:	8023      	strh	r3, [r4, #0]
  if (error) {
 80088f2:	002c      	movs	r4, r5
 80088f4:	193b      	adds	r3, r7, r4
 80088f6:	2200      	movs	r2, #0
 80088f8:	5e9b      	ldrsh	r3, [r3, r2]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00b      	beq.n	8008916 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80088fe:	193b      	adds	r3, r7, r4
 8008900:	2200      	movs	r2, #0
 8008902:	5e9b      	ldrsh	r3, [r3, r2]
 8008904:	4a6d      	ldr	r2, [pc, #436]	@ (8008abc <probe_sen5x+0x1f8>)
 8008906:	496e      	ldr	r1, [pc, #440]	@ (8008ac0 <probe_sen5x+0x1fc>)
 8008908:	2001      	movs	r0, #1
 800890a:	f004 fd53 	bl	800d3b4 <CreateLine>
      return error;
 800890e:	193b      	adds	r3, r7, r4
 8008910:	2200      	movs	r2, #0
 8008912:	5e9b      	ldrsh	r3, [r3, r2]
 8008914:	e0ce      	b.n	8008ab4 <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008916:	2556      	movs	r5, #86	@ 0x56
 8008918:	197c      	adds	r4, r7, r5
 800891a:	2355      	movs	r3, #85	@ 0x55
 800891c:	18fb      	adds	r3, r7, r3
 800891e:	781a      	ldrb	r2, [r3, #0]
 8008920:	232c      	movs	r3, #44	@ 0x2c
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	0011      	movs	r1, r2
 8008926:	0018      	movs	r0, r3
 8008928:	f000 feba 	bl	80096a0 <sen5x_get_serial_number>
 800892c:	0003      	movs	r3, r0
 800892e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008930:	197b      	adds	r3, r7, r5
 8008932:	2200      	movs	r2, #0
 8008934:	5e9b      	ldrsh	r3, [r3, r2]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00b      	beq.n	8008952 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800893a:	197b      	adds	r3, r7, r5
 800893c:	2200      	movs	r2, #0
 800893e:	5e9a      	ldrsh	r2, [r3, r2]
 8008940:	4b60      	ldr	r3, [pc, #384]	@ (8008ac4 <probe_sen5x+0x200>)
 8008942:	0011      	movs	r1, r2
 8008944:	0018      	movs	r0, r3
 8008946:	f016 f907 	bl	801eb58 <iprintf>
      return error;
 800894a:	197b      	adds	r3, r7, r5
 800894c:	2200      	movs	r2, #0
 800894e:	5e9b      	ldrsh	r3, [r3, r2]
 8008950:	e0b0      	b.n	8008ab4 <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008952:	232c      	movs	r3, #44	@ 0x2c
 8008954:	18fa      	adds	r2, r7, r3
 8008956:	4b5c      	ldr	r3, [pc, #368]	@ (8008ac8 <probe_sen5x+0x204>)
 8008958:	0011      	movs	r1, r2
 800895a:	0018      	movs	r0, r3
 800895c:	f016 f8fc 	bl	801eb58 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008960:	2556      	movs	r5, #86	@ 0x56
 8008962:	197c      	adds	r4, r7, r5
 8008964:	2354      	movs	r3, #84	@ 0x54
 8008966:	18fb      	adds	r3, r7, r3
 8008968:	781a      	ldrb	r2, [r3, #0]
 800896a:	230c      	movs	r3, #12
 800896c:	18fb      	adds	r3, r7, r3
 800896e:	0011      	movs	r1, r2
 8008970:	0018      	movs	r0, r3
 8008972:	f000 fe3f 	bl	80095f4 <sen5x_get_product_name>
 8008976:	0003      	movs	r3, r0
 8008978:	8023      	strh	r3, [r4, #0]
  if (error) {
 800897a:	197b      	adds	r3, r7, r5
 800897c:	2200      	movs	r2, #0
 800897e:	5e9b      	ldrsh	r3, [r3, r2]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008984:	197b      	adds	r3, r7, r5
 8008986:	2200      	movs	r2, #0
 8008988:	5e9a      	ldrsh	r2, [r3, r2]
 800898a:	4b50      	ldr	r3, [pc, #320]	@ (8008acc <probe_sen5x+0x208>)
 800898c:	0011      	movs	r1, r2
 800898e:	0018      	movs	r0, r3
 8008990:	f016 f8e2 	bl	801eb58 <iprintf>
      return error;
 8008994:	197b      	adds	r3, r7, r5
 8008996:	2200      	movs	r2, #0
 8008998:	5e9b      	ldrsh	r3, [r3, r2]
 800899a:	e08b      	b.n	8008ab4 <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 800899c:	230c      	movs	r3, #12
 800899e:	18fa      	adds	r2, r7, r3
 80089a0:	4b4b      	ldr	r3, [pc, #300]	@ (8008ad0 <probe_sen5x+0x20c>)
 80089a2:	0011      	movs	r1, r2
 80089a4:	0018      	movs	r0, r3
 80089a6:	f016 f8d7 	bl	801eb58 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 80089aa:	2656      	movs	r6, #86	@ 0x56
 80089ac:	19bc      	adds	r4, r7, r6
 80089ae:	2308      	movs	r3, #8
 80089b0:	18fd      	adds	r5, r7, r3
 80089b2:	2309      	movs	r3, #9
 80089b4:	18fa      	adds	r2, r7, r3
 80089b6:	230a      	movs	r3, #10
 80089b8:	18f9      	adds	r1, r7, r3
 80089ba:	230b      	movs	r3, #11
 80089bc:	18f8      	adds	r0, r7, r3
 80089be:	1d7b      	adds	r3, r7, #5
 80089c0:	9302      	str	r3, [sp, #8]
 80089c2:	1dbb      	adds	r3, r7, #6
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	1dfb      	adds	r3, r7, #7
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	002b      	movs	r3, r5
 80089cc:	f000 febe 	bl	800974c <sen5x_get_version>
 80089d0:	0003      	movs	r3, r0
 80089d2:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 80089d4:	19bb      	adds	r3, r7, r6
 80089d6:	2200      	movs	r2, #0
 80089d8:	5e9b      	ldrsh	r3, [r3, r2]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 80089de:	19bb      	adds	r3, r7, r6
 80089e0:	2200      	movs	r2, #0
 80089e2:	5e9a      	ldrsh	r2, [r3, r2]
 80089e4:	4b3b      	ldr	r3, [pc, #236]	@ (8008ad4 <probe_sen5x+0x210>)
 80089e6:	0011      	movs	r1, r2
 80089e8:	0018      	movs	r0, r3
 80089ea:	f016 f8b5 	bl	801eb58 <iprintf>
      return error;
 80089ee:	19bb      	adds	r3, r7, r6
 80089f0:	2200      	movs	r2, #0
 80089f2:	5e9b      	ldrsh	r3, [r3, r2]
 80089f4:	e05e      	b.n	8008ab4 <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 80089f6:	230b      	movs	r3, #11
 80089f8:	18fb      	adds	r3, r7, r3
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	0019      	movs	r1, r3
 80089fe:	230a      	movs	r3, #10
 8008a00:	18fb      	adds	r3, r7, r3
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	001a      	movs	r2, r3
 8008a06:	2308      	movs	r3, #8
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	001c      	movs	r4, r3
 8008a0e:	1dfb      	adds	r3, r7, #7
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	4831      	ldr	r0, [pc, #196]	@ (8008ad8 <probe_sen5x+0x214>)
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	0023      	movs	r3, r4
 8008a18:	f016 f89e 	bl	801eb58 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008a20:	264e      	movs	r6, #78	@ 0x4e
 8008a22:	19bb      	adds	r3, r7, r6
 8008a24:	2200      	movs	r2, #0
 8008a26:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008a28:	234c      	movs	r3, #76	@ 0x4c
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008a30:	492a      	ldr	r1, [pc, #168]	@ (8008adc <probe_sen5x+0x218>)
 8008a32:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008a34:	f7f8 fab4 	bl	8000fa0 <__aeabi_fmul>
 8008a38:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008a3a:	1c18      	adds	r0, r3, #0
 8008a3c:	f7f8 fda8 	bl	8001590 <__aeabi_f2iz>
 8008a40:	0003      	movs	r3, r0
 8008a42:	b218      	sxth	r0, r3
 8008a44:	2556      	movs	r5, #86	@ 0x56
 8008a46:	197c      	adds	r4, r7, r5
 8008a48:	234c      	movs	r3, #76	@ 0x4c
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	881a      	ldrh	r2, [r3, #0]
 8008a4e:	19bb      	adds	r3, r7, r6
 8008a50:	2100      	movs	r1, #0
 8008a52:	5e5b      	ldrsh	r3, [r3, r1]
 8008a54:	0019      	movs	r1, r3
 8008a56:	f000 fd69 	bl	800952c <sen5x_set_temperature_offset_parameters>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008a5e:	197b      	adds	r3, r7, r5
 8008a60:	2200      	movs	r2, #0
 8008a62:	5e9b      	ldrsh	r3, [r3, r2]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00b      	beq.n	8008a80 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008a68:	197b      	adds	r3, r7, r5
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	5e9b      	ldrsh	r3, [r3, r2]
 8008a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae0 <probe_sen5x+0x21c>)
 8008a70:	4913      	ldr	r1, [pc, #76]	@ (8008ac0 <probe_sen5x+0x1fc>)
 8008a72:	2001      	movs	r0, #1
 8008a74:	f004 fc9e 	bl	800d3b4 <CreateLine>
      return error;
 8008a78:	197b      	adds	r3, r7, r5
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	5e9b      	ldrsh	r3, [r3, r2]
 8008a7e:	e019      	b.n	8008ab4 <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008a80:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008a82:	f7fa fcef 	bl	8003464 <__aeabi_f2d>
 8008a86:	0002      	movs	r2, r0
 8008a88:	000b      	movs	r3, r1
 8008a8a:	4816      	ldr	r0, [pc, #88]	@ (8008ae4 <probe_sen5x+0x220>)
 8008a8c:	4916      	ldr	r1, [pc, #88]	@ (8008ae8 <probe_sen5x+0x224>)
 8008a8e:	9200      	str	r2, [sp, #0]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	0002      	movs	r2, r0
 8008a94:	2002      	movs	r0, #2
 8008a96:	f004 fc8d 	bl	800d3b4 <CreateLine>
  }
  sen5x_Power_Off();
 8008a9a:	f7ff feeb 	bl	8008874 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008a9e:	f005 f827 	bl	800daf0 <HAL_GetTick>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	4a11      	ldr	r2, [pc, #68]	@ (8008aec <probe_sen5x+0x228>)
 8008aa6:	189a      	adds	r2, r3, r2
 8008aa8:	4b11      	ldr	r3, [pc, #68]	@ (8008af0 <probe_sen5x+0x22c>)
 8008aaa:	601a      	str	r2, [r3, #0]
  return error;
 8008aac:	2356      	movs	r3, #86	@ 0x56
 8008aae:	18fb      	adds	r3, r7, r3
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	b017      	add	sp, #92	@ 0x5c
 8008aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008abc:	08022dec 	.word	0x08022dec
 8008ac0:	08022e18 	.word	0x08022e18
 8008ac4:	08022e1c 	.word	0x08022e1c
 8008ac8:	08022e4c 	.word	0x08022e4c
 8008acc:	08022e60 	.word	0x08022e60
 8008ad0:	08022e90 	.word	0x08022e90
 8008ad4:	08022ea4 	.word	0x08022ea4
 8008ad8:	08022ed0 	.word	0x08022ed0
 8008adc:	43480000 	.word	0x43480000
 8008ae0:	08022ef4 	.word	0x08022ef4
 8008ae4:	08022f34 	.word	0x08022f34
 8008ae8:	08022f6c 	.word	0x08022f6c
 8008aec:	000061a8 	.word	0x000061a8
 8008af0:	200011e4 	.word	0x200011e4

08008af4 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8008afa:	1dbb      	adds	r3, r7, #6
 8008afc:	2200      	movs	r2, #0
 8008afe:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 8008b00:	1dbc      	adds	r4, r7, #6
 8008b02:	f000 fb9f 	bl	8009244 <sen5x_start_measurement>
 8008b06:	0003      	movs	r3, r0
 8008b08:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008b0a:	1dbb      	adds	r3, r7, #6
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	5e9b      	ldrsh	r3, [r3, r2]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008b14:	1dbb      	adds	r3, r7, #6
 8008b16:	2200      	movs	r2, #0
 8008b18:	5e9b      	ldrsh	r3, [r3, r2]
 8008b1a:	4a06      	ldr	r2, [pc, #24]	@ (8008b34 <sen5x_lightup_measurement+0x40>)
 8008b1c:	4906      	ldr	r1, [pc, #24]	@ (8008b38 <sen5x_lightup_measurement+0x44>)
 8008b1e:	2001      	movs	r0, #1
 8008b20:	f004 fc48 	bl	800d3b4 <CreateLine>
  }
  return error;
 8008b24:	1dbb      	adds	r3, r7, #6
 8008b26:	2200      	movs	r2, #0
 8008b28:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	b003      	add	sp, #12
 8008b30:	bd90      	pop	{r4, r7, pc}
 8008b32:	46c0      	nop			@ (mov r8, r8)
 8008b34:	08022f70 	.word	0x08022f70
 8008b38:	08022e18 	.word	0x08022e18

08008b3c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008b42:	1dbb      	adds	r3, r7, #6
 8008b44:	2200      	movs	r2, #0
 8008b46:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008b48:	1dbc      	adds	r4, r7, #6
 8008b4a:	f000 fba9 	bl	80092a0 <sen5x_stop_measurement>
 8008b4e:	0003      	movs	r3, r0
 8008b50:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008b52:	1dbb      	adds	r3, r7, #6
 8008b54:	2200      	movs	r2, #0
 8008b56:	5e9b      	ldrsh	r3, [r3, r2]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d007      	beq.n	8008b6c <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008b5c:	1dbb      	adds	r3, r7, #6
 8008b5e:	2200      	movs	r2, #0
 8008b60:	5e9b      	ldrsh	r3, [r3, r2]
 8008b62:	4a06      	ldr	r2, [pc, #24]	@ (8008b7c <sen5x_extinguish_measurement+0x40>)
 8008b64:	4906      	ldr	r1, [pc, #24]	@ (8008b80 <sen5x_extinguish_measurement+0x44>)
 8008b66:	2001      	movs	r0, #1
 8008b68:	f004 fc24 	bl	800d3b4 <CreateLine>
  }
  return error;
 8008b6c:	1dbb      	adds	r3, r7, #6
 8008b6e:	2200      	movs	r2, #0
 8008b70:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008b72:	0018      	movs	r0, r3
 8008b74:	46bd      	mov	sp, r7
 8008b76:	b003      	add	sp, #12
 8008b78:	bd90      	pop	{r4, r7, pc}
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	08022fa0 	.word	0x08022fa0
 8008b80:	08022e18 	.word	0x08022e18

08008b84 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8008b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b86:	b08d      	sub	sp, #52	@ 0x34
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8008b8c:	261e      	movs	r6, #30
 8008b8e:	19bb      	adds	r3, r7, r6
 8008b90:	2200      	movs	r2, #0
 8008b92:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8008b94:	19bc      	adds	r4, r7, r6
 8008b96:	2316      	movs	r3, #22
 8008b98:	18fd      	adds	r5, r7, r3
 8008b9a:	2318      	movs	r3, #24
 8008b9c:	18fa      	adds	r2, r7, r3
 8008b9e:	231a      	movs	r3, #26
 8008ba0:	18f9      	adds	r1, r7, r3
 8008ba2:	231c      	movs	r3, #28
 8008ba4:	18f8      	adds	r0, r7, r3
 8008ba6:	230e      	movs	r3, #14
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	2310      	movs	r3, #16
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	9302      	str	r3, [sp, #8]
 8008bb2:	2312      	movs	r3, #18
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	2314      	movs	r3, #20
 8008bba:	18fb      	adds	r3, r7, r3
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	002b      	movs	r3, r5
 8008bc0:	f000 fbf0 	bl	80093a4 <sen5x_read_measured_values>
 8008bc4:	0003      	movs	r3, r0
 8008bc6:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8008bc8:	19bb      	adds	r3, r7, r6
 8008bca:	2200      	movs	r2, #0
 8008bcc:	5e9b      	ldrsh	r3, [r3, r2]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <sen5x_read_measurement+0x56>
    return error;
 8008bd2:	19bb      	adds	r3, r7, r6
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	5e9b      	ldrsh	r3, [r3, r2]
 8008bd8:	e034      	b.n	8008c44 <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8008bda:	231c      	movs	r3, #28
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	881a      	ldrh	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8008be4:	211a      	movs	r1, #26
 8008be6:	187b      	adds	r3, r7, r1
 8008be8:	881a      	ldrh	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8008bee:	2318      	movs	r3, #24
 8008bf0:	18fb      	adds	r3, r7, r3
 8008bf2:	881a      	ldrh	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8008bf8:	2016      	movs	r0, #22
 8008bfa:	183b      	adds	r3, r7, r0
 8008bfc:	881a      	ldrh	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8008c02:	2314      	movs	r3, #20
 8008c04:	18fb      	adds	r3, r7, r3
 8008c06:	2200      	movs	r2, #0
 8008c08:	5e9a      	ldrsh	r2, [r3, r2]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8008c0e:	2312      	movs	r3, #18
 8008c10:	18fb      	adds	r3, r7, r3
 8008c12:	2200      	movs	r2, #0
 8008c14:	5e9a      	ldrsh	r2, [r3, r2]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8008c1a:	2310      	movs	r3, #16
 8008c1c:	18fb      	adds	r3, r7, r3
 8008c1e:	2200      	movs	r2, #0
 8008c20:	5e9a      	ldrsh	r2, [r3, r2]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8008c26:	230e      	movs	r3, #14
 8008c28:	18fb      	adds	r3, r7, r3
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	5e9a      	ldrsh	r2, [r3, r2]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 8008c32:	187b      	adds	r3, r7, r1
 8008c34:	881a      	ldrh	r2, [r3, #0]
 8008c36:	183b      	adds	r3, r7, r0
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	0019      	movs	r1, r3
 8008c3c:	0010      	movs	r0, r2
 8008c3e:	f7fa fe87 	bl	8003950 <setPMs>
  return 0;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	0018      	movs	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b009      	add	sp, #36	@ 0x24
 8008c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c4c <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 8008c52:	1dbb      	adds	r3, r7, #6
 8008c54:	2200      	movs	r2, #0
 8008c56:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
    if (sen5x_read_measurement(&sen5x_data)) {
 8008c58:	4b6b      	ldr	r3, [pc, #428]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	f7ff ff92 	bl	8008b84 <sen5x_read_measurement>
 8008c60:	1e03      	subs	r3, r0, #0
 8008c62:	d008      	beq.n	8008c76 <sen5x_measurement+0x2a>
      Error("Error executing sen5x_read_measured_values(): %i", error);
 8008c64:	1dbb      	adds	r3, r7, #6
 8008c66:	2200      	movs	r2, #0
 8008c68:	5e9b      	ldrsh	r3, [r3, r2]
 8008c6a:	4a68      	ldr	r2, [pc, #416]	@ (8008e0c <sen5x_measurement+0x1c0>)
 8008c6c:	4968      	ldr	r1, [pc, #416]	@ (8008e10 <sen5x_measurement+0x1c4>)
 8008c6e:	2001      	movs	r0, #1
 8008c70:	f004 fba0 	bl	800d3b4 <CreateLine>
 8008c74:	e0c1      	b.n	8008dfa <sen5x_measurement+0x1ae>
    }
    else {
      if (sen5xSamples == 0) {
 8008c76:	4b67      	ldr	r3, [pc, #412]	@ (8008e14 <sen5x_measurement+0x1c8>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <sen5x_measurement+0x36>
      return 0; // first sample reads zero's
 8008c7e:	2300      	movs	r3, #0
 8008c80:	e0be      	b.n	8008e00 <sen5x_measurement+0x1b4>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8008c82:	4b61      	ldr	r3, [pc, #388]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	0018      	movs	r0, r3
 8008c88:	f7f8 fca2 	bl	80015d0 <__aeabi_i2f>
 8008c8c:	1c03      	adds	r3, r0, #0
 8008c8e:	4962      	ldr	r1, [pc, #392]	@ (8008e18 <sen5x_measurement+0x1cc>)
 8008c90:	1c18      	adds	r0, r3, #0
 8008c92:	f7f7 ff9f 	bl	8000bd4 <__aeabi_fdiv>
 8008c96:	1c03      	adds	r3, r0, #0
 8008c98:	1c18      	adds	r0, r3, #0
 8008c9a:	f7fa fbe3 	bl	8003464 <__aeabi_f2d>
 8008c9e:	0002      	movs	r2, r0
 8008ca0:	000b      	movs	r3, r1
 8008ca2:	495e      	ldr	r1, [pc, #376]	@ (8008e1c <sen5x_measurement+0x1d0>)
 8008ca4:	0008      	movs	r0, r1
 8008ca6:	f015 ff57 	bl	801eb58 <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8008caa:	4b57      	ldr	r3, [pc, #348]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008cac:	885b      	ldrh	r3, [r3, #2]
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f7f8 fc8e 	bl	80015d0 <__aeabi_i2f>
 8008cb4:	1c03      	adds	r3, r0, #0
 8008cb6:	4958      	ldr	r1, [pc, #352]	@ (8008e18 <sen5x_measurement+0x1cc>)
 8008cb8:	1c18      	adds	r0, r3, #0
 8008cba:	f7f7 ff8b 	bl	8000bd4 <__aeabi_fdiv>
 8008cbe:	1c03      	adds	r3, r0, #0
 8008cc0:	1c18      	adds	r0, r3, #0
 8008cc2:	f7fa fbcf 	bl	8003464 <__aeabi_f2d>
 8008cc6:	0002      	movs	r2, r0
 8008cc8:	000b      	movs	r3, r1
 8008cca:	4955      	ldr	r1, [pc, #340]	@ (8008e20 <sen5x_measurement+0x1d4>)
 8008ccc:	0008      	movs	r0, r1
 8008cce:	f015 ff43 	bl	801eb58 <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8008cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008cd4:	889b      	ldrh	r3, [r3, #4]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f7f8 fc7a 	bl	80015d0 <__aeabi_i2f>
 8008cdc:	1c03      	adds	r3, r0, #0
 8008cde:	494e      	ldr	r1, [pc, #312]	@ (8008e18 <sen5x_measurement+0x1cc>)
 8008ce0:	1c18      	adds	r0, r3, #0
 8008ce2:	f7f7 ff77 	bl	8000bd4 <__aeabi_fdiv>
 8008ce6:	1c03      	adds	r3, r0, #0
 8008ce8:	1c18      	adds	r0, r3, #0
 8008cea:	f7fa fbbb 	bl	8003464 <__aeabi_f2d>
 8008cee:	0002      	movs	r2, r0
 8008cf0:	000b      	movs	r3, r1
 8008cf2:	494c      	ldr	r1, [pc, #304]	@ (8008e24 <sen5x_measurement+0x1d8>)
 8008cf4:	0008      	movs	r0, r1
 8008cf6:	f015 ff2f 	bl	801eb58 <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8008cfa:	4b43      	ldr	r3, [pc, #268]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008cfc:	88db      	ldrh	r3, [r3, #6]
 8008cfe:	0018      	movs	r0, r3
 8008d00:	f7f8 fc66 	bl	80015d0 <__aeabi_i2f>
 8008d04:	1c03      	adds	r3, r0, #0
 8008d06:	4944      	ldr	r1, [pc, #272]	@ (8008e18 <sen5x_measurement+0x1cc>)
 8008d08:	1c18      	adds	r0, r3, #0
 8008d0a:	f7f7 ff63 	bl	8000bd4 <__aeabi_fdiv>
 8008d0e:	1c03      	adds	r3, r0, #0
 8008d10:	1c18      	adds	r0, r3, #0
 8008d12:	f7fa fba7 	bl	8003464 <__aeabi_f2d>
 8008d16:	0002      	movs	r2, r0
 8008d18:	000b      	movs	r3, r1
 8008d1a:	4943      	ldr	r1, [pc, #268]	@ (8008e28 <sen5x_measurement+0x1dc>)
 8008d1c:	0008      	movs	r0, r1
 8008d1e:	f015 ff1b 	bl	801eb58 <iprintf>
    if (sen5x_data.ambient_humidity != 0x7fff) {
 8008d22:	4b39      	ldr	r3, [pc, #228]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008d24:	2208      	movs	r2, #8
 8008d26:	5e9b      	ldrsh	r3, [r3, r2]
 8008d28:	4a40      	ldr	r2, [pc, #256]	@ (8008e2c <sen5x_measurement+0x1e0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d014      	beq.n	8008d58 <sen5x_measurement+0x10c>
      printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8008d2e:	4b36      	ldr	r3, [pc, #216]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008d30:	2208      	movs	r2, #8
 8008d32:	5e9b      	ldrsh	r3, [r3, r2]
 8008d34:	0018      	movs	r0, r3
 8008d36:	f7f8 fc4b 	bl	80015d0 <__aeabi_i2f>
 8008d3a:	1c03      	adds	r3, r0, #0
 8008d3c:	493c      	ldr	r1, [pc, #240]	@ (8008e30 <sen5x_measurement+0x1e4>)
 8008d3e:	1c18      	adds	r0, r3, #0
 8008d40:	f7f7 ff48 	bl	8000bd4 <__aeabi_fdiv>
 8008d44:	1c03      	adds	r3, r0, #0
 8008d46:	1c18      	adds	r0, r3, #0
 8008d48:	f7fa fb8c 	bl	8003464 <__aeabi_f2d>
 8008d4c:	0002      	movs	r2, r0
 8008d4e:	000b      	movs	r3, r1
 8008d50:	4938      	ldr	r1, [pc, #224]	@ (8008e34 <sen5x_measurement+0x1e8>)
 8008d52:	0008      	movs	r0, r1
 8008d54:	f015 ff00 	bl	801eb58 <iprintf>
    }
    if (sen5x_data.ambient_temperature != 0x7fff) {
 8008d58:	4b2b      	ldr	r3, [pc, #172]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8008d5e:	4a33      	ldr	r2, [pc, #204]	@ (8008e2c <sen5x_measurement+0x1e0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d014      	beq.n	8008d8e <sen5x_measurement+0x142>
      printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8008d64:	4b28      	ldr	r3, [pc, #160]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008d66:	220a      	movs	r2, #10
 8008d68:	5e9b      	ldrsh	r3, [r3, r2]
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f7f8 fc30 	bl	80015d0 <__aeabi_i2f>
 8008d70:	1c03      	adds	r3, r0, #0
 8008d72:	4931      	ldr	r1, [pc, #196]	@ (8008e38 <sen5x_measurement+0x1ec>)
 8008d74:	1c18      	adds	r0, r3, #0
 8008d76:	f7f7 ff2d 	bl	8000bd4 <__aeabi_fdiv>
 8008d7a:	1c03      	adds	r3, r0, #0
 8008d7c:	1c18      	adds	r0, r3, #0
 8008d7e:	f7fa fb71 	bl	8003464 <__aeabi_f2d>
 8008d82:	0002      	movs	r2, r0
 8008d84:	000b      	movs	r3, r1
 8008d86:	492d      	ldr	r1, [pc, #180]	@ (8008e3c <sen5x_measurement+0x1f0>)
 8008d88:	0008      	movs	r0, r1
 8008d8a:	f015 fee5 	bl	801eb58 <iprintf>
    }
    if (sen5x_data.voc_index != 0x7fff) {
 8008d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008d90:	220c      	movs	r2, #12
 8008d92:	5e9b      	ldrsh	r3, [r3, r2]
 8008d94:	4a25      	ldr	r2, [pc, #148]	@ (8008e2c <sen5x_measurement+0x1e0>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d014      	beq.n	8008dc4 <sen5x_measurement+0x178>
      printf("Voc index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008d9c:	220c      	movs	r2, #12
 8008d9e:	5e9b      	ldrsh	r3, [r3, r2]
 8008da0:	0018      	movs	r0, r3
 8008da2:	f7f8 fc15 	bl	80015d0 <__aeabi_i2f>
 8008da6:	1c03      	adds	r3, r0, #0
 8008da8:	491b      	ldr	r1, [pc, #108]	@ (8008e18 <sen5x_measurement+0x1cc>)
 8008daa:	1c18      	adds	r0, r3, #0
 8008dac:	f7f7 ff12 	bl	8000bd4 <__aeabi_fdiv>
 8008db0:	1c03      	adds	r3, r0, #0
 8008db2:	1c18      	adds	r0, r3, #0
 8008db4:	f7fa fb56 	bl	8003464 <__aeabi_f2d>
 8008db8:	0002      	movs	r2, r0
 8008dba:	000b      	movs	r3, r1
 8008dbc:	4920      	ldr	r1, [pc, #128]	@ (8008e40 <sen5x_measurement+0x1f4>)
 8008dbe:	0008      	movs	r0, r1
 8008dc0:	f015 feca 	bl	801eb58 <iprintf>
    }
    if (sen5x_data.nox_index != 0x7fff) {
 8008dc4:	4b10      	ldr	r3, [pc, #64]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008dc6:	220e      	movs	r2, #14
 8008dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8008dca:	4a18      	ldr	r2, [pc, #96]	@ (8008e2c <sen5x_measurement+0x1e0>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d014      	beq.n	8008dfa <sen5x_measurement+0x1ae>
      printf("Nox index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <sen5x_measurement+0x1bc>)
 8008dd2:	220e      	movs	r2, #14
 8008dd4:	5e9b      	ldrsh	r3, [r3, r2]
 8008dd6:	0018      	movs	r0, r3
 8008dd8:	f7f8 fbfa 	bl	80015d0 <__aeabi_i2f>
 8008ddc:	1c03      	adds	r3, r0, #0
 8008dde:	490e      	ldr	r1, [pc, #56]	@ (8008e18 <sen5x_measurement+0x1cc>)
 8008de0:	1c18      	adds	r0, r3, #0
 8008de2:	f7f7 fef7 	bl	8000bd4 <__aeabi_fdiv>
 8008de6:	1c03      	adds	r3, r0, #0
 8008de8:	1c18      	adds	r0, r3, #0
 8008dea:	f7fa fb3b 	bl	8003464 <__aeabi_f2d>
 8008dee:	0002      	movs	r2, r0
 8008df0:	000b      	movs	r3, r1
 8008df2:	4914      	ldr	r1, [pc, #80]	@ (8008e44 <sen5x_measurement+0x1f8>)
 8008df4:	0008      	movs	r0, r1
 8008df6:	f015 feaf 	bl	801eb58 <iprintf>
    }
  }
  return error;
 8008dfa:	1dbb      	adds	r3, r7, #6
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008e00:	0018      	movs	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	b002      	add	sp, #8
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	200011ec 	.word	0x200011ec
 8008e0c:	08022fd0 	.word	0x08022fd0
 8008e10:	08022e18 	.word	0x08022e18
 8008e14:	200011e8 	.word	0x200011e8
 8008e18:	41200000 	.word	0x41200000
 8008e1c:	08023004 	.word	0x08023004
 8008e20:	08023030 	.word	0x08023030
 8008e24:	0802305c 	.word	0x0802305c
 8008e28:	08023088 	.word	0x08023088
 8008e2c:	00007fff 	.word	0x00007fff
 8008e30:	42c80000 	.word	0x42c80000
 8008e34:	080230b4 	.word	0x080230b4
 8008e38:	43480000 	.word	0x43480000
 8008e3c:	080230d4 	.word	0x080230d4
 8008e40:	080230f4 	.word	0x080230f4
 8008e44:	08023108 	.word	0x08023108

08008e48 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	6039      	str	r1, [r7, #0]
 8008e50:	0011      	movs	r1, r2
 8008e52:	1dfb      	adds	r3, r7, #7
 8008e54:	1c02      	adds	r2, r0, #0
 8008e56:	701a      	strb	r2, [r3, #0]
 8008e58:	1d3b      	adds	r3, r7, #4
 8008e5a:	1c0a      	adds	r2, r1, #0
 8008e5c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8008e5e:	1dfb      	adds	r3, r7, #7
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	18db      	adds	r3, r3, r3
 8008e66:	b299      	uxth	r1, r3
 8008e68:	1d3b      	adds	r3, r7, #4
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	4805      	ldr	r0, [pc, #20]	@ (8008e84 <sensirion_i2c_hal_read+0x3c>)
 8008e70:	2464      	movs	r4, #100	@ 0x64
 8008e72:	9400      	str	r4, [sp, #0]
 8008e74:	f006 fa72 	bl	800f35c <HAL_I2C_Master_Receive>
 8008e78:	0003      	movs	r3, r0
 8008e7a:	b25b      	sxtb	r3, r3
}
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b003      	add	sp, #12
 8008e82:	bd90      	pop	{r4, r7, pc}
 8008e84:	20000d94 	.word	0x20000d94

08008e88 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8008e88:	b590      	push	{r4, r7, lr}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	6039      	str	r1, [r7, #0]
 8008e90:	0011      	movs	r1, r2
 8008e92:	1dfb      	adds	r3, r7, #7
 8008e94:	1c02      	adds	r2, r0, #0
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	1d3b      	adds	r3, r7, #4
 8008e9a:	1c0a      	adds	r2, r1, #0
 8008e9c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8008e9e:	1dfb      	adds	r3, r7, #7
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	18db      	adds	r3, r3, r3
 8008ea6:	b299      	uxth	r1, r3
 8008ea8:	1d3b      	adds	r3, r7, #4
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	4805      	ldr	r0, [pc, #20]	@ (8008ec4 <sensirion_i2c_hal_write+0x3c>)
 8008eb0:	2464      	movs	r4, #100	@ 0x64
 8008eb2:	9400      	str	r4, [sp, #0]
 8008eb4:	f006 f94a 	bl	800f14c <HAL_I2C_Master_Transmit>
 8008eb8:	0003      	movs	r3, r0
 8008eba:	b25b      	sxtb	r3, r3
}
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b003      	add	sp, #12
 8008ec2:	bd90      	pop	{r4, r7, pc}
 8008ec4:	20000d94 	.word	0x20000d94

08008ec8 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	22fa      	movs	r2, #250	@ 0xfa
 8008ed4:	0091      	lsls	r1, r2, #2
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7f7 f964 	bl	80001a4 <__udivsi3>
 8008edc:	0003      	movs	r3, r0
 8008ede:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	22fa      	movs	r2, #250	@ 0xfa
 8008ee4:	0091      	lsls	r1, r2, #2
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f7f7 f9e2 	bl	80002b0 <__aeabi_uidivmod>
 8008eec:	1e0b      	subs	r3, r1, #0
 8008eee:	d002      	beq.n	8008ef6 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	0018      	movs	r0, r3
 8008efa:	f004 fe03 	bl	800db04 <HAL_Delay>
}
 8008efe:	46c0      	nop			@ (mov r8, r8)
 8008f00:	46bd      	mov	sp, r7
 8008f02:	b004      	add	sp, #16
 8008f04:	bd80      	pop	{r7, pc}
	...

08008f08 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	0018      	movs	r0, r3
 8008f16:	f000 fc85 	bl	8009824 <sen5x_read_device_status>
 8008f1a:	1e03      	subs	r3, r0, #0
 8008f1c:	d007      	beq.n	8008f2e <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8008f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8008fcc <sen5x_check_for_errors+0xc4>)
 8008f20:	4b2b      	ldr	r3, [pc, #172]	@ (8008fd0 <sen5x_check_for_errors+0xc8>)
 8008f22:	0019      	movs	r1, r3
 8008f24:	2001      	movs	r0, #1
 8008f26:	f004 fa45 	bl	800d3b4 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e049      	b.n	8008fc2 <sen5x_check_for_errors+0xba>
  }
  if (device_status == 0) {
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d107      	bne.n	8008f44 <sen5x_check_for_errors+0x3c>
    Debug("sen5x operates normal");
 8008f34:	4a27      	ldr	r2, [pc, #156]	@ (8008fd4 <sen5x_check_for_errors+0xcc>)
 8008f36:	4b28      	ldr	r3, [pc, #160]	@ (8008fd8 <sen5x_check_for_errors+0xd0>)
 8008f38:	0019      	movs	r1, r3
 8008f3a:	2003      	movs	r0, #3
 8008f3c:	f004 fa3a 	bl	800d3b4 <CreateLine>
    return 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	e03e      	b.n	8008fc2 <sen5x_check_for_errors+0xba>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	2380      	movs	r3, #128	@ 0x80
 8008f48:	039b      	lsls	r3, r3, #14
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	d005      	beq.n	8008f5a <sen5x_check_for_errors+0x52>
    Debug("sen5x Fan speed out of range");
 8008f4e:	4a23      	ldr	r2, [pc, #140]	@ (8008fdc <sen5x_check_for_errors+0xd4>)
 8008f50:	4b21      	ldr	r3, [pc, #132]	@ (8008fd8 <sen5x_check_for_errors+0xd0>)
 8008f52:	0019      	movs	r1, r3
 8008f54:	2003      	movs	r0, #3
 8008f56:	f004 fa2d 	bl	800d3b4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	2380      	movs	r3, #128	@ 0x80
 8008f5e:	031b      	lsls	r3, r3, #12
 8008f60:	4013      	ands	r3, r2
 8008f62:	d005      	beq.n	8008f70 <sen5x_check_for_errors+0x68>
    Debug("sen5x Fan cleaning active");
 8008f64:	4a1e      	ldr	r2, [pc, #120]	@ (8008fe0 <sen5x_check_for_errors+0xd8>)
 8008f66:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd8 <sen5x_check_for_errors+0xd0>)
 8008f68:	0019      	movs	r1, r3
 8008f6a:	2003      	movs	r0, #3
 8008f6c:	f004 fa22 	bl	800d3b4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2280      	movs	r2, #128	@ 0x80
 8008f74:	4013      	ands	r3, r2
 8008f76:	d005      	beq.n	8008f84 <sen5x_check_for_errors+0x7c>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8008f78:	4a1a      	ldr	r2, [pc, #104]	@ (8008fe4 <sen5x_check_for_errors+0xdc>)
 8008f7a:	4b17      	ldr	r3, [pc, #92]	@ (8008fd8 <sen5x_check_for_errors+0xd0>)
 8008f7c:	0019      	movs	r1, r3
 8008f7e:	2003      	movs	r0, #3
 8008f80:	f004 fa18 	bl	800d3b4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2240      	movs	r2, #64	@ 0x40
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d005      	beq.n	8008f98 <sen5x_check_for_errors+0x90>
    Debug("sen5x RHT communication error");
 8008f8c:	4a16      	ldr	r2, [pc, #88]	@ (8008fe8 <sen5x_check_for_errors+0xe0>)
 8008f8e:	4b12      	ldr	r3, [pc, #72]	@ (8008fd8 <sen5x_check_for_errors+0xd0>)
 8008f90:	0019      	movs	r1, r3
 8008f92:	2003      	movs	r0, #3
 8008f94:	f004 fa0e 	bl	800d3b4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	d005      	beq.n	8008fac <sen5x_check_for_errors+0xa4>
    Debug("sen5x Laser failure");
 8008fa0:	4a12      	ldr	r2, [pc, #72]	@ (8008fec <sen5x_check_for_errors+0xe4>)
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <sen5x_check_for_errors+0xd0>)
 8008fa4:	0019      	movs	r1, r3
 8008fa6:	2003      	movs	r0, #3
 8008fa8:	f004 fa04 	bl	800d3b4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2210      	movs	r2, #16
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	d005      	beq.n	8008fc0 <sen5x_check_for_errors+0xb8>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8008fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff0 <sen5x_check_for_errors+0xe8>)
 8008fb6:	4b08      	ldr	r3, [pc, #32]	@ (8008fd8 <sen5x_check_for_errors+0xd0>)
 8008fb8:	0019      	movs	r1, r3
 8008fba:	2003      	movs	r0, #3
 8008fbc:	f004 f9fa 	bl	800d3b4 <CreateLine>
  }
  return 1;
 8008fc0:	2301      	movs	r3, #1
}
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	b002      	add	sp, #8
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	46c0      	nop			@ (mov r8, r8)
 8008fcc:	0802311c 	.word	0x0802311c
 8008fd0:	08022e18 	.word	0x08022e18
 8008fd4:	08023148 	.word	0x08023148
 8008fd8:	08022db0 	.word	0x08022db0
 8008fdc:	08023160 	.word	0x08023160
 8008fe0:	08023180 	.word	0x08023180
 8008fe4:	0802319c 	.word	0x0802319c
 8008fe8:	080231c0 	.word	0x080231c0
 8008fec:	080231e0 	.word	0x080231e0
 8008ff0:	080231f4 	.word	0x080231f4

08008ff4 <set_light_on_state>:

void set_light_on_state(void) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  sen5x_Power_On();
 8008ff8:	f7ff fc1c 	bl	8008834 <sen5x_Power_On>
  Debug("sen5x powered on, warming up for 30 sec.");
 8008ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8009028 <set_light_on_state+0x34>)
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800902c <set_light_on_state+0x38>)
 8009000:	0019      	movs	r1, r3
 8009002:	2003      	movs	r0, #3
 8009004:	f004 f9d6 	bl	800d3b4 <CreateLine>
  if (sen5x_lightup_measurement()) {
 8009008:	f7ff fd74 	bl	8008af4 <sen5x_lightup_measurement>
 800900c:	1e03      	subs	r3, r0, #0
 800900e:	d005      	beq.n	800901c <set_light_on_state+0x28>
    Error("Error executing sen5x_lightup_measurement()");
 8009010:	4a07      	ldr	r2, [pc, #28]	@ (8009030 <set_light_on_state+0x3c>)
 8009012:	4b08      	ldr	r3, [pc, #32]	@ (8009034 <set_light_on_state+0x40>)
 8009014:	0019      	movs	r1, r3
 8009016:	2001      	movs	r0, #1
 8009018:	f004 f9cc 	bl	800d3b4 <CreateLine>
  }
  samplesState = CHECK_SEN5X;
 800901c:	4b06      	ldr	r3, [pc, #24]	@ (8009038 <set_light_on_state+0x44>)
 800901e:	2203      	movs	r2, #3
 8009020:	701a      	strb	r2, [r3, #0]
}
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	08023230 	.word	0x08023230
 800902c:	08022db0 	.word	0x08022db0
 8009030:	0802325c 	.word	0x0802325c
 8009034:	08022e18 	.word	0x08022e18
 8009038:	20000080 	.word	0x20000080

0800903c <sen5x_statemachine>:

void sen5x_statemachine(uint8_t delayfactor) {
 800903c:	b590      	push	{r4, r7, lr}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	0002      	movs	r2, r0
 8009044:	1dfb      	adds	r3, r7, #7
 8009046:	701a      	strb	r2, [r3, #0]
  bool data_ready = false;
 8009048:	230f      	movs	r3, #15
 800904a:	18fb      	adds	r3, r7, r3
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]
  if (delayfactor == USB_PLUGGED_IN) {
 8009050:	1dfb      	adds	r3, r7, #7
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d103      	bne.n	8009060 <sen5x_statemachine+0x24>
    delayfactor =100; // if operated on USB read about every 30 seconds
 8009058:	1dfb      	adds	r3, r7, #7
 800905a:	2264      	movs	r2, #100	@ 0x64
 800905c:	701a      	strb	r2, [r3, #0]
 800905e:	e002      	b.n	8009066 <sen5x_statemachine+0x2a>
  }
  else {
    delayfactor = 1;
 8009060:	1dfb      	adds	r3, r7, #7
 8009062:	2201      	movs	r2, #1
 8009064:	701a      	strb	r2, [r3, #0]
  }
  if (TimestampIsReached(sen5xReadTimer)) {
 8009066:	4b67      	ldr	r3, [pc, #412]	@ (8009204 <sen5x_statemachine+0x1c8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	0018      	movs	r0, r3
 800906c:	f004 f94c 	bl	800d308 <TimestampIsReached>
 8009070:	1e03      	subs	r3, r0, #0
 8009072:	d100      	bne.n	8009076 <sen5x_statemachine+0x3a>
 8009074:	e0c2      	b.n	80091fc <sen5x_statemachine+0x1c0>
    switch (samplesState) {
 8009076:	4b64      	ldr	r3, [pc, #400]	@ (8009208 <sen5x_statemachine+0x1cc>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b05      	cmp	r3, #5
 800907c:	d900      	bls.n	8009080 <sen5x_statemachine+0x44>
 800907e:	e0bd      	b.n	80091fc <sen5x_statemachine+0x1c0>
 8009080:	009a      	lsls	r2, r3, #2
 8009082:	4b62      	ldr	r3, [pc, #392]	@ (800920c <sen5x_statemachine+0x1d0>)
 8009084:	18d3      	adds	r3, r2, r3
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800908a:	4a61      	ldr	r2, [pc, #388]	@ (8009210 <sen5x_statemachine+0x1d4>)
 800908c:	4b61      	ldr	r3, [pc, #388]	@ (8009214 <sen5x_statemachine+0x1d8>)
 800908e:	0019      	movs	r1, r3
 8009090:	2001      	movs	r0, #1
 8009092:	f004 f98f 	bl	800d3b4 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8009096:	f004 fd2b 	bl	800daf0 <HAL_GetTick>
 800909a:	0004      	movs	r4, r0
 800909c:	1dfb      	adds	r3, r7, #7
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	0019      	movs	r1, r3
 80090a2:	485d      	ldr	r0, [pc, #372]	@ (8009218 <sen5x_statemachine+0x1dc>)
 80090a4:	f7f7 f908 	bl	80002b8 <__divsi3>
 80090a8:	0003      	movs	r3, r0
 80090aa:	18e2      	adds	r2, r4, r3
 80090ac:	4b55      	ldr	r3, [pc, #340]	@ (8009204 <sen5x_statemachine+0x1c8>)
 80090ae:	601a      	str	r2, [r3, #0]
      break;
 80090b0:	e0a4      	b.n	80091fc <sen5x_statemachine+0x1c0>
    case LIGHT_OUT:
//      Debug(" state is LIGHT_OUT");
      set_light_on_state();
 80090b2:	f7ff ff9f 	bl	8008ff4 <set_light_on_state>
      sen5xReadTimer = HAL_GetTick() + 28000;
 80090b6:	f004 fd1b 	bl	800daf0 <HAL_GetTick>
 80090ba:	0003      	movs	r3, r0
 80090bc:	4a57      	ldr	r2, [pc, #348]	@ (800921c <sen5x_statemachine+0x1e0>)
 80090be:	189a      	adds	r2, r3, r2
 80090c0:	4b50      	ldr	r3, [pc, #320]	@ (8009204 <sen5x_statemachine+0x1c8>)
 80090c2:	601a      	str	r2, [r3, #0]
      break;
 80090c4:	e09a      	b.n	80091fc <sen5x_statemachine+0x1c0>
    case CHECK_SEN5X:
      samplesState = LIGHT_ON;
 80090c6:	4b50      	ldr	r3, [pc, #320]	@ (8009208 <sen5x_statemachine+0x1cc>)
 80090c8:	2202      	movs	r2, #2
 80090ca:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 80090cc:	4b54      	ldr	r3, [pc, #336]	@ (8009220 <sen5x_statemachine+0x1e4>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b05      	cmp	r3, #5
 80090d2:	d905      	bls.n	80090e0 <sen5x_statemachine+0xa4>
        samplesState = S5X_DISABLED;
 80090d4:	4b4c      	ldr	r3, [pc, #304]	@ (8009208 <sen5x_statemachine+0x1cc>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 80090da:	f7ff fbcb 	bl	8008874 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 80090de:	e08c      	b.n	80091fa <sen5x_statemachine+0x1be>
        if (sen5x_check_for_errors()) {
 80090e0:	f7ff ff12 	bl	8008f08 <sen5x_check_for_errors>
 80090e4:	1e03      	subs	r3, r0, #0
 80090e6:	d100      	bne.n	80090ea <sen5x_statemachine+0xae>
 80090e8:	e087      	b.n	80091fa <sen5x_statemachine+0x1be>
          if (sen5x_device_reset()) {
 80090ea:	f000 fbed 	bl	80098c8 <sen5x_device_reset>
 80090ee:	1e03      	subs	r3, r0, #0
 80090f0:	d006      	beq.n	8009100 <sen5x_statemachine+0xc4>
            Error("Error resetting sen5x");
 80090f2:	4a4c      	ldr	r2, [pc, #304]	@ (8009224 <sen5x_statemachine+0x1e8>)
 80090f4:	4b47      	ldr	r3, [pc, #284]	@ (8009214 <sen5x_statemachine+0x1d8>)
 80090f6:	0019      	movs	r1, r3
 80090f8:	2001      	movs	r0, #1
 80090fa:	f004 f95b 	bl	800d3b4 <CreateLine>
 80090fe:	e005      	b.n	800910c <sen5x_statemachine+0xd0>
            Info("sen5x reset executed");
 8009100:	4a49      	ldr	r2, [pc, #292]	@ (8009228 <sen5x_statemachine+0x1ec>)
 8009102:	4b4a      	ldr	r3, [pc, #296]	@ (800922c <sen5x_statemachine+0x1f0>)
 8009104:	0019      	movs	r1, r3
 8009106:	2002      	movs	r0, #2
 8009108:	f004 f954 	bl	800d3b4 <CreateLine>
          sen5xErrors++;
 800910c:	4b44      	ldr	r3, [pc, #272]	@ (8009220 <sen5x_statemachine+0x1e4>)
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	b2da      	uxtb	r2, r3
 8009114:	4b42      	ldr	r3, [pc, #264]	@ (8009220 <sen5x_statemachine+0x1e4>)
 8009116:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009118:	f004 fcea 	bl	800daf0 <HAL_GetTick>
 800911c:	0003      	movs	r3, r0
 800911e:	3396      	adds	r3, #150	@ 0x96
 8009120:	001a      	movs	r2, r3
 8009122:	4b38      	ldr	r3, [pc, #224]	@ (8009204 <sen5x_statemachine+0x1c8>)
 8009124:	601a      	str	r2, [r3, #0]
      break;
 8009126:	e068      	b.n	80091fa <sen5x_statemachine+0x1be>
    case LIGHT_ON:
//      Debug(" state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 8009128:	240f      	movs	r4, #15
 800912a:	193b      	adds	r3, r7, r4
 800912c:	0018      	movs	r0, r3
 800912e:	f000 f8e7 	bl	8009300 <sen5x_read_data_ready>
      if (data_ready) {
 8009132:	193b      	adds	r3, r7, r4
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d026      	beq.n	8009188 <sen5x_statemachine+0x14c>
        if (sen5x_measurement()) {
 800913a:	f7ff fd87 	bl	8008c4c <sen5x_measurement>
 800913e:	1e03      	subs	r3, r0, #0
 8009140:	d005      	beq.n	800914e <sen5x_statemachine+0x112>
          Error("Error executing sen5x_measurement()");
 8009142:	4a3b      	ldr	r2, [pc, #236]	@ (8009230 <sen5x_statemachine+0x1f4>)
 8009144:	4b33      	ldr	r3, [pc, #204]	@ (8009214 <sen5x_statemachine+0x1d8>)
 8009146:	0019      	movs	r1, r3
 8009148:	2001      	movs	r0, #1
 800914a:	f004 f933 	bl	800d3b4 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 800914e:	4b39      	ldr	r3, [pc, #228]	@ (8009234 <sen5x_statemachine+0x1f8>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <sen5x_statemachine+0x140>
          if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009156:	f7fd fa39 	bl	80065cc <RTC_GetWeekday>
 800915a:	0003      	movs	r3, r0
 800915c:	2b01      	cmp	r3, #1
 800915e:	d10a      	bne.n	8009176 <sen5x_statemachine+0x13a>
 8009160:	4b35      	ldr	r3, [pc, #212]	@ (8009238 <sen5x_statemachine+0x1fc>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2201      	movs	r2, #1
 8009166:	4053      	eors	r3, r2
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <sen5x_statemachine+0x13a>
            samplesState = CLEAN_FAN;
 800916e:	4b26      	ldr	r3, [pc, #152]	@ (8009208 <sen5x_statemachine+0x1cc>)
 8009170:	2204      	movs	r2, #4
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	e002      	b.n	800917c <sen5x_statemachine+0x140>
          }
          else {
            samplesState = SAMPLES_TAKEN;
 8009176:	4b24      	ldr	r3, [pc, #144]	@ (8009208 <sen5x_statemachine+0x1cc>)
 8009178:	2205      	movs	r2, #5
 800917a:	701a      	strb	r2, [r3, #0]
          }
        }
        sen5xSamples++;
 800917c:	4b2d      	ldr	r3, [pc, #180]	@ (8009234 <sen5x_statemachine+0x1f8>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	4b2b      	ldr	r3, [pc, #172]	@ (8009234 <sen5x_statemachine+0x1f8>)
 8009186:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009188:	f004 fcb2 	bl	800daf0 <HAL_GetTick>
 800918c:	0003      	movs	r3, r0
 800918e:	22fa      	movs	r2, #250	@ 0xfa
 8009190:	0092      	lsls	r2, r2, #2
 8009192:	189a      	adds	r2, r3, r2
 8009194:	4b1b      	ldr	r3, [pc, #108]	@ (8009204 <sen5x_statemachine+0x1c8>)
 8009196:	601a      	str	r2, [r3, #0]
      break;
 8009198:	e030      	b.n	80091fc <sen5x_statemachine+0x1c0>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      sen5x_start_fan_cleaning();
 800919a:	f000 f997 	bl	80094cc <sen5x_start_fan_cleaning>
      sen5xReadTimer = HAL_GetTick() + 11000;
 800919e:	f004 fca7 	bl	800daf0 <HAL_GetTick>
 80091a2:	0003      	movs	r3, r0
 80091a4:	4a25      	ldr	r2, [pc, #148]	@ (800923c <sen5x_statemachine+0x200>)
 80091a6:	189a      	adds	r2, r3, r2
 80091a8:	4b16      	ldr	r3, [pc, #88]	@ (8009204 <sen5x_statemachine+0x1c8>)
 80091aa:	601a      	str	r2, [r3, #0]
      fanCleaningDone = true;
 80091ac:	4b22      	ldr	r3, [pc, #136]	@ (8009238 <sen5x_statemachine+0x1fc>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	701a      	strb	r2, [r3, #0]
      samplesState = SAMPLES_TAKEN;
 80091b2:	4b15      	ldr	r3, [pc, #84]	@ (8009208 <sen5x_statemachine+0x1cc>)
 80091b4:	2205      	movs	r2, #5
 80091b6:	701a      	strb	r2, [r3, #0]
      break;
 80091b8:	e020      	b.n	80091fc <sen5x_statemachine+0x1c0>

    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      sen5xSamples = 0;
 80091ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009234 <sen5x_statemachine+0x1f8>)
 80091bc:	2200      	movs	r2, #0
 80091be:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 80091c0:	f7ff fcbc 	bl	8008b3c <sen5x_extinguish_measurement>
 80091c4:	1e03      	subs	r3, r0, #0
 80091c6:	d005      	beq.n	80091d4 <sen5x_statemachine+0x198>
        Error("Error executing sen5x_extinguish_measurement()");
 80091c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009240 <sen5x_statemachine+0x204>)
 80091ca:	4b12      	ldr	r3, [pc, #72]	@ (8009214 <sen5x_statemachine+0x1d8>)
 80091cc:	0019      	movs	r1, r3
 80091ce:	2001      	movs	r0, #1
 80091d0:	f004 f8f0 	bl	800d3b4 <CreateLine>
      }
      sen5x_Power_Off();
 80091d4:	f7ff fb4e 	bl	8008874 <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 80091d8:	f004 fc8a 	bl	800daf0 <HAL_GetTick>
 80091dc:	0004      	movs	r4, r0
 80091de:	1dfb      	adds	r3, r7, #7
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	0019      	movs	r1, r3
 80091e4:	480c      	ldr	r0, [pc, #48]	@ (8009218 <sen5x_statemachine+0x1dc>)
 80091e6:	f7f7 f867 	bl	80002b8 <__divsi3>
 80091ea:	0003      	movs	r3, r0
 80091ec:	18e2      	adds	r2, r4, r3
 80091ee:	4b05      	ldr	r3, [pc, #20]	@ (8009204 <sen5x_statemachine+0x1c8>)
 80091f0:	601a      	str	r2, [r3, #0]
      samplesState = LIGHT_OUT;
 80091f2:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <sen5x_statemachine+0x1cc>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]
    }
  }
}
 80091f8:	e000      	b.n	80091fc <sen5x_statemachine+0x1c0>
      break;
 80091fa:	46c0      	nop			@ (mov r8, r8)
}
 80091fc:	46c0      	nop			@ (mov r8, r8)
 80091fe:	46bd      	mov	sp, r7
 8009200:	b005      	add	sp, #20
 8009202:	bd90      	pop	{r4, r7, pc}
 8009204:	200011e4 	.word	0x200011e4
 8009208:	20000080 	.word	0x20000080
 800920c:	08023ab0 	.word	0x08023ab0
 8009210:	08023288 	.word	0x08023288
 8009214:	08022e18 	.word	0x08022e18
 8009218:	002fefd8 	.word	0x002fefd8
 800921c:	00006d60 	.word	0x00006d60
 8009220:	200011e9 	.word	0x200011e9
 8009224:	080232b8 	.word	0x080232b8
 8009228:	080232d0 	.word	0x080232d0
 800922c:	08022f6c 	.word	0x08022f6c
 8009230:	080232e8 	.word	0x080232e8
 8009234:	200011e8 	.word	0x200011e8
 8009238:	200011e0 	.word	0x200011e0
 800923c:	00002af8 	.word	0x00002af8
 8009240:	0802330c 	.word	0x0802330c

08009244 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009244:	b590      	push	{r4, r7, lr}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800924a:	1dbb      	adds	r3, r7, #6
 800924c:	2200      	movs	r2, #0
 800924e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009250:	1dbc      	adds	r4, r7, #6
 8009252:	1dbb      	adds	r3, r7, #6
 8009254:	8819      	ldrh	r1, [r3, #0]
 8009256:	003b      	movs	r3, r7
 8009258:	2221      	movs	r2, #33	@ 0x21
 800925a:	0018      	movs	r0, r3
 800925c:	f001 fb26 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 8009260:	0003      	movs	r3, r0
 8009262:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009264:	1d3c      	adds	r4, r7, #4
 8009266:	1dbb      	adds	r3, r7, #6
 8009268:	881a      	ldrh	r2, [r3, #0]
 800926a:	003b      	movs	r3, r7
 800926c:	0019      	movs	r1, r3
 800926e:	2069      	movs	r0, #105	@ 0x69
 8009270:	f001 fba0 	bl	800a9b4 <sensirion_i2c_write_data>
 8009274:	0003      	movs	r3, r0
 8009276:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009278:	1d3b      	adds	r3, r7, #4
 800927a:	2200      	movs	r2, #0
 800927c:	5e9b      	ldrsh	r3, [r3, r2]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <sen5x_start_measurement+0x46>
        return error;
 8009282:	1d3b      	adds	r3, r7, #4
 8009284:	2200      	movs	r2, #0
 8009286:	5e9b      	ldrsh	r3, [r3, r2]
 8009288:	e004      	b.n	8009294 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800928a:	4b04      	ldr	r3, [pc, #16]	@ (800929c <sen5x_start_measurement+0x58>)
 800928c:	0018      	movs	r0, r3
 800928e:	f7ff fe1b 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009292:	2300      	movs	r3, #0
}
 8009294:	0018      	movs	r0, r3
 8009296:	46bd      	mov	sp, r7
 8009298:	b003      	add	sp, #12
 800929a:	bd90      	pop	{r4, r7, pc}
 800929c:	0000c350 	.word	0x0000c350

080092a0 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 80092a0:	b590      	push	{r4, r7, lr}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80092a6:	1dbb      	adds	r3, r7, #6
 80092a8:	2200      	movs	r2, #0
 80092aa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 80092ac:	1dbc      	adds	r4, r7, #6
 80092ae:	2382      	movs	r3, #130	@ 0x82
 80092b0:	005a      	lsls	r2, r3, #1
 80092b2:	1dbb      	adds	r3, r7, #6
 80092b4:	8819      	ldrh	r1, [r3, #0]
 80092b6:	003b      	movs	r3, r7
 80092b8:	0018      	movs	r0, r3
 80092ba:	f001 faf7 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 80092be:	0003      	movs	r3, r0
 80092c0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80092c2:	1d3c      	adds	r4, r7, #4
 80092c4:	1dbb      	adds	r3, r7, #6
 80092c6:	881a      	ldrh	r2, [r3, #0]
 80092c8:	003b      	movs	r3, r7
 80092ca:	0019      	movs	r1, r3
 80092cc:	2069      	movs	r0, #105	@ 0x69
 80092ce:	f001 fb71 	bl	800a9b4 <sensirion_i2c_write_data>
 80092d2:	0003      	movs	r3, r0
 80092d4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80092d6:	1d3b      	adds	r3, r7, #4
 80092d8:	2200      	movs	r2, #0
 80092da:	5e9b      	ldrsh	r3, [r3, r2]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <sen5x_stop_measurement+0x48>
        return error;
 80092e0:	1d3b      	adds	r3, r7, #4
 80092e2:	2200      	movs	r2, #0
 80092e4:	5e9b      	ldrsh	r3, [r3, r2]
 80092e6:	e004      	b.n	80092f2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 80092e8:	4b04      	ldr	r3, [pc, #16]	@ (80092fc <sen5x_stop_measurement+0x5c>)
 80092ea:	0018      	movs	r0, r3
 80092ec:	f7ff fdec 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	0018      	movs	r0, r3
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b003      	add	sp, #12
 80092f8:	bd90      	pop	{r4, r7, pc}
 80092fa:	46c0      	nop			@ (mov r8, r8)
 80092fc:	00030d40 	.word	0x00030d40

08009300 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009308:	250e      	movs	r5, #14
 800930a:	197b      	adds	r3, r7, r5
 800930c:	2200      	movs	r2, #0
 800930e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009310:	197c      	adds	r4, r7, r5
 8009312:	4a22      	ldr	r2, [pc, #136]	@ (800939c <sen5x_read_data_ready+0x9c>)
 8009314:	197b      	adds	r3, r7, r5
 8009316:	8819      	ldrh	r1, [r3, #0]
 8009318:	2308      	movs	r3, #8
 800931a:	18fb      	adds	r3, r7, r3
 800931c:	0018      	movs	r0, r3
 800931e:	f001 fac5 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 8009322:	0003      	movs	r3, r0
 8009324:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009326:	260c      	movs	r6, #12
 8009328:	19bc      	adds	r4, r7, r6
 800932a:	197b      	adds	r3, r7, r5
 800932c:	881a      	ldrh	r2, [r3, #0]
 800932e:	2308      	movs	r3, #8
 8009330:	18fb      	adds	r3, r7, r3
 8009332:	0019      	movs	r1, r3
 8009334:	2069      	movs	r0, #105	@ 0x69
 8009336:	f001 fb3d 	bl	800a9b4 <sensirion_i2c_write_data>
 800933a:	0003      	movs	r3, r0
 800933c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800933e:	19bb      	adds	r3, r7, r6
 8009340:	2200      	movs	r2, #0
 8009342:	5e9b      	ldrsh	r3, [r3, r2]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d003      	beq.n	8009350 <sen5x_read_data_ready+0x50>
        return error;
 8009348:	19bb      	adds	r3, r7, r6
 800934a:	2200      	movs	r2, #0
 800934c:	5e9b      	ldrsh	r3, [r3, r2]
 800934e:	e020      	b.n	8009392 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009350:	4b13      	ldr	r3, [pc, #76]	@ (80093a0 <sen5x_read_data_ready+0xa0>)
 8009352:	0018      	movs	r0, r3
 8009354:	f7ff fdb8 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009358:	250c      	movs	r5, #12
 800935a:	197c      	adds	r4, r7, r5
 800935c:	2308      	movs	r3, #8
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	2202      	movs	r2, #2
 8009362:	0019      	movs	r1, r3
 8009364:	2069      	movs	r0, #105	@ 0x69
 8009366:	f001 fb3d 	bl	800a9e4 <sensirion_i2c_read_data_inplace>
 800936a:	0003      	movs	r3, r0
 800936c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800936e:	197b      	adds	r3, r7, r5
 8009370:	2200      	movs	r2, #0
 8009372:	5e9b      	ldrsh	r3, [r3, r2]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <sen5x_read_data_ready+0x80>
        return error;
 8009378:	197b      	adds	r3, r7, r5
 800937a:	2200      	movs	r2, #0
 800937c:	5e9b      	ldrsh	r3, [r3, r2]
 800937e:	e008      	b.n	8009392 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009380:	2308      	movs	r3, #8
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	1e5a      	subs	r2, r3, #1
 8009388:	4193      	sbcs	r3, r2
 800938a:	b2da      	uxtb	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009390:	2300      	movs	r3, #0
}
 8009392:	0018      	movs	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	b005      	add	sp, #20
 8009398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800939a:	46c0      	nop			@ (mov r8, r8)
 800939c:	00000202 	.word	0x00000202
 80093a0:	00004e20 	.word	0x00004e20

080093a4 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 80093a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093a6:	b08d      	sub	sp, #52	@ 0x34
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 80093b2:	252e      	movs	r5, #46	@ 0x2e
 80093b4:	197b      	adds	r3, r7, r5
 80093b6:	2200      	movs	r2, #0
 80093b8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 80093ba:	197c      	adds	r4, r7, r5
 80093bc:	23f1      	movs	r3, #241	@ 0xf1
 80093be:	009a      	lsls	r2, r3, #2
 80093c0:	197b      	adds	r3, r7, r5
 80093c2:	8819      	ldrh	r1, [r3, #0]
 80093c4:	2314      	movs	r3, #20
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	0018      	movs	r0, r3
 80093ca:	f001 fa6f 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 80093ce:	0003      	movs	r3, r0
 80093d0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80093d2:	262c      	movs	r6, #44	@ 0x2c
 80093d4:	19bc      	adds	r4, r7, r6
 80093d6:	197b      	adds	r3, r7, r5
 80093d8:	881a      	ldrh	r2, [r3, #0]
 80093da:	2314      	movs	r3, #20
 80093dc:	18fb      	adds	r3, r7, r3
 80093de:	0019      	movs	r1, r3
 80093e0:	2069      	movs	r0, #105	@ 0x69
 80093e2:	f001 fae7 	bl	800a9b4 <sensirion_i2c_write_data>
 80093e6:	0003      	movs	r3, r0
 80093e8:	8023      	strh	r3, [r4, #0]
    if (error) {
 80093ea:	19bb      	adds	r3, r7, r6
 80093ec:	2200      	movs	r2, #0
 80093ee:	5e9b      	ldrsh	r3, [r3, r2]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <sen5x_read_measured_values+0x58>
        return error;
 80093f4:	19bb      	adds	r3, r7, r6
 80093f6:	2200      	movs	r2, #0
 80093f8:	5e9b      	ldrsh	r3, [r3, r2]
 80093fa:	e060      	b.n	80094be <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80093fc:	4b32      	ldr	r3, [pc, #200]	@ (80094c8 <sen5x_read_measured_values+0x124>)
 80093fe:	0018      	movs	r0, r3
 8009400:	f7ff fd62 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009404:	252c      	movs	r5, #44	@ 0x2c
 8009406:	197c      	adds	r4, r7, r5
 8009408:	2314      	movs	r3, #20
 800940a:	18fb      	adds	r3, r7, r3
 800940c:	2210      	movs	r2, #16
 800940e:	0019      	movs	r1, r3
 8009410:	2069      	movs	r0, #105	@ 0x69
 8009412:	f001 fae7 	bl	800a9e4 <sensirion_i2c_read_data_inplace>
 8009416:	0003      	movs	r3, r0
 8009418:	8023      	strh	r3, [r4, #0]
    if (error) {
 800941a:	197b      	adds	r3, r7, r5
 800941c:	2200      	movs	r2, #0
 800941e:	5e9b      	ldrsh	r3, [r3, r2]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <sen5x_read_measured_values+0x88>
        return error;
 8009424:	197b      	adds	r3, r7, r5
 8009426:	2200      	movs	r2, #0
 8009428:	5e9b      	ldrsh	r3, [r3, r2]
 800942a:	e048      	b.n	80094be <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800942c:	2414      	movs	r4, #20
 800942e:	193b      	adds	r3, r7, r4
 8009430:	0018      	movs	r0, r3
 8009432:	f000 fa79 	bl	8009928 <sensirion_common_bytes_to_uint16_t>
 8009436:	0003      	movs	r3, r0
 8009438:	001a      	movs	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800943e:	193b      	adds	r3, r7, r4
 8009440:	3302      	adds	r3, #2
 8009442:	0018      	movs	r0, r3
 8009444:	f000 fa70 	bl	8009928 <sensirion_common_bytes_to_uint16_t>
 8009448:	0003      	movs	r3, r0
 800944a:	001a      	movs	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009450:	193b      	adds	r3, r7, r4
 8009452:	3304      	adds	r3, #4
 8009454:	0018      	movs	r0, r3
 8009456:	f000 fa67 	bl	8009928 <sensirion_common_bytes_to_uint16_t>
 800945a:	0003      	movs	r3, r0
 800945c:	001a      	movs	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009462:	193b      	adds	r3, r7, r4
 8009464:	3306      	adds	r3, #6
 8009466:	0018      	movs	r0, r3
 8009468:	f000 fa5e 	bl	8009928 <sensirion_common_bytes_to_uint16_t>
 800946c:	0003      	movs	r3, r0
 800946e:	001a      	movs	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009474:	193b      	adds	r3, r7, r4
 8009476:	3308      	adds	r3, #8
 8009478:	0018      	movs	r0, r3
 800947a:	f000 fa81 	bl	8009980 <sensirion_common_bytes_to_int16_t>
 800947e:	0003      	movs	r3, r0
 8009480:	001a      	movs	r2, r3
 8009482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009484:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009486:	193b      	adds	r3, r7, r4
 8009488:	330a      	adds	r3, #10
 800948a:	0018      	movs	r0, r3
 800948c:	f000 fa78 	bl	8009980 <sensirion_common_bytes_to_int16_t>
 8009490:	0003      	movs	r3, r0
 8009492:	001a      	movs	r2, r3
 8009494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009496:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009498:	193b      	adds	r3, r7, r4
 800949a:	330c      	adds	r3, #12
 800949c:	0018      	movs	r0, r3
 800949e:	f000 fa6f 	bl	8009980 <sensirion_common_bytes_to_int16_t>
 80094a2:	0003      	movs	r3, r0
 80094a4:	001a      	movs	r2, r3
 80094a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094a8:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 80094aa:	193b      	adds	r3, r7, r4
 80094ac:	330e      	adds	r3, #14
 80094ae:	0018      	movs	r0, r3
 80094b0:	f000 fa66 	bl	8009980 <sensirion_common_bytes_to_int16_t>
 80094b4:	0003      	movs	r3, r0
 80094b6:	001a      	movs	r2, r3
 80094b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094ba:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	0018      	movs	r0, r3
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b00d      	add	sp, #52	@ 0x34
 80094c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094c6:	46c0      	nop			@ (mov r8, r8)
 80094c8:	00004e20 	.word	0x00004e20

080094cc <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80094d2:	1dbb      	adds	r3, r7, #6
 80094d4:	2200      	movs	r2, #0
 80094d6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 80094d8:	1dbc      	adds	r4, r7, #6
 80094da:	4a12      	ldr	r2, [pc, #72]	@ (8009524 <sen5x_start_fan_cleaning+0x58>)
 80094dc:	1dbb      	adds	r3, r7, #6
 80094de:	8819      	ldrh	r1, [r3, #0]
 80094e0:	003b      	movs	r3, r7
 80094e2:	0018      	movs	r0, r3
 80094e4:	f001 f9e2 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 80094e8:	0003      	movs	r3, r0
 80094ea:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80094ec:	1d3c      	adds	r4, r7, #4
 80094ee:	1dbb      	adds	r3, r7, #6
 80094f0:	881a      	ldrh	r2, [r3, #0]
 80094f2:	003b      	movs	r3, r7
 80094f4:	0019      	movs	r1, r3
 80094f6:	2069      	movs	r0, #105	@ 0x69
 80094f8:	f001 fa5c 	bl	800a9b4 <sensirion_i2c_write_data>
 80094fc:	0003      	movs	r3, r0
 80094fe:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009500:	1d3b      	adds	r3, r7, #4
 8009502:	2200      	movs	r2, #0
 8009504:	5e9b      	ldrsh	r3, [r3, r2]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <sen5x_start_fan_cleaning+0x46>
        return error;
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	2200      	movs	r2, #0
 800950e:	5e9b      	ldrsh	r3, [r3, r2]
 8009510:	e004      	b.n	800951c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009512:	4b05      	ldr	r3, [pc, #20]	@ (8009528 <sen5x_start_fan_cleaning+0x5c>)
 8009514:	0018      	movs	r0, r3
 8009516:	f7ff fcd7 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800951a:	2300      	movs	r3, #0
}
 800951c:	0018      	movs	r0, r3
 800951e:	46bd      	mov	sp, r7
 8009520:	b003      	add	sp, #12
 8009522:	bd90      	pop	{r4, r7, pc}
 8009524:	00005607 	.word	0x00005607
 8009528:	00004e20 	.word	0x00004e20

0800952c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800952c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952e:	b087      	sub	sp, #28
 8009530:	af00      	add	r7, sp, #0
 8009532:	0004      	movs	r4, r0
 8009534:	0008      	movs	r0, r1
 8009536:	0011      	movs	r1, r2
 8009538:	1dbb      	adds	r3, r7, #6
 800953a:	1c22      	adds	r2, r4, #0
 800953c:	801a      	strh	r2, [r3, #0]
 800953e:	1d3b      	adds	r3, r7, #4
 8009540:	1c02      	adds	r2, r0, #0
 8009542:	801a      	strh	r2, [r3, #0]
 8009544:	1cbb      	adds	r3, r7, #2
 8009546:	1c0a      	adds	r2, r1, #0
 8009548:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800954a:	2516      	movs	r5, #22
 800954c:	197b      	adds	r3, r7, r5
 800954e:	2200      	movs	r2, #0
 8009550:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 8009552:	197c      	adds	r4, r7, r5
 8009554:	4a25      	ldr	r2, [pc, #148]	@ (80095ec <sen5x_set_temperature_offset_parameters+0xc0>)
 8009556:	197b      	adds	r3, r7, r5
 8009558:	8819      	ldrh	r1, [r3, #0]
 800955a:	2608      	movs	r6, #8
 800955c:	19bb      	adds	r3, r7, r6
 800955e:	0018      	movs	r0, r3
 8009560:	f001 f9a4 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 8009564:	0003      	movs	r3, r0
 8009566:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009568:	197c      	adds	r4, r7, r5
 800956a:	1dbb      	adds	r3, r7, #6
 800956c:	2200      	movs	r2, #0
 800956e:	5e9a      	ldrsh	r2, [r3, r2]
 8009570:	197b      	adds	r3, r7, r5
 8009572:	8819      	ldrh	r1, [r3, #0]
 8009574:	19bb      	adds	r3, r7, r6
 8009576:	0018      	movs	r0, r3
 8009578:	f001 fa03 	bl	800a982 <sensirion_i2c_add_int16_t_to_buffer>
 800957c:	0003      	movs	r3, r0
 800957e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009580:	197c      	adds	r4, r7, r5
 8009582:	1d3b      	adds	r3, r7, #4
 8009584:	2200      	movs	r2, #0
 8009586:	5e9a      	ldrsh	r2, [r3, r2]
 8009588:	197b      	adds	r3, r7, r5
 800958a:	8819      	ldrh	r1, [r3, #0]
 800958c:	19bb      	adds	r3, r7, r6
 800958e:	0018      	movs	r0, r3
 8009590:	f001 f9f7 	bl	800a982 <sensirion_i2c_add_int16_t_to_buffer>
 8009594:	0003      	movs	r3, r0
 8009596:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009598:	197c      	adds	r4, r7, r5
 800959a:	1cbb      	adds	r3, r7, #2
 800959c:	881a      	ldrh	r2, [r3, #0]
 800959e:	197b      	adds	r3, r7, r5
 80095a0:	8819      	ldrh	r1, [r3, #0]
 80095a2:	19bb      	adds	r3, r7, r6
 80095a4:	0018      	movs	r0, r3
 80095a6:	f001 f9ad 	bl	800a904 <sensirion_i2c_add_uint16_t_to_buffer>
 80095aa:	0003      	movs	r3, r0
 80095ac:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80095ae:	2214      	movs	r2, #20
 80095b0:	18bc      	adds	r4, r7, r2
 80095b2:	197b      	adds	r3, r7, r5
 80095b4:	881a      	ldrh	r2, [r3, #0]
 80095b6:	19bb      	adds	r3, r7, r6
 80095b8:	0019      	movs	r1, r3
 80095ba:	2069      	movs	r0, #105	@ 0x69
 80095bc:	f001 f9fa 	bl	800a9b4 <sensirion_i2c_write_data>
 80095c0:	0003      	movs	r3, r0
 80095c2:	8023      	strh	r3, [r4, #0]
    if (error) {
 80095c4:	2214      	movs	r2, #20
 80095c6:	18bb      	adds	r3, r7, r2
 80095c8:	2100      	movs	r1, #0
 80095ca:	5e5b      	ldrsh	r3, [r3, r1]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d003      	beq.n	80095d8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 80095d0:	18bb      	adds	r3, r7, r2
 80095d2:	2200      	movs	r2, #0
 80095d4:	5e9b      	ldrsh	r3, [r3, r2]
 80095d6:	e004      	b.n	80095e2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80095d8:	4b05      	ldr	r3, [pc, #20]	@ (80095f0 <sen5x_set_temperature_offset_parameters+0xc4>)
 80095da:	0018      	movs	r0, r3
 80095dc:	f7ff fc74 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	0018      	movs	r0, r3
 80095e4:	46bd      	mov	sp, r7
 80095e6:	b007      	add	sp, #28
 80095e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ea:	46c0      	nop			@ (mov r8, r8)
 80095ec:	000060b2 	.word	0x000060b2
 80095f0:	00004e20 	.word	0x00004e20

080095f4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 80095f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f6:	b091      	sub	sp, #68	@ 0x44
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	000a      	movs	r2, r1
 80095fe:	1cfb      	adds	r3, r7, #3
 8009600:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009602:	253e      	movs	r5, #62	@ 0x3e
 8009604:	197b      	adds	r3, r7, r5
 8009606:	2200      	movs	r2, #0
 8009608:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800960a:	197c      	adds	r4, r7, r5
 800960c:	4a22      	ldr	r2, [pc, #136]	@ (8009698 <sen5x_get_product_name+0xa4>)
 800960e:	197b      	adds	r3, r7, r5
 8009610:	8819      	ldrh	r1, [r3, #0]
 8009612:	230c      	movs	r3, #12
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	0018      	movs	r0, r3
 8009618:	f001 f948 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 800961c:	0003      	movs	r3, r0
 800961e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009620:	263c      	movs	r6, #60	@ 0x3c
 8009622:	19bc      	adds	r4, r7, r6
 8009624:	197b      	adds	r3, r7, r5
 8009626:	881a      	ldrh	r2, [r3, #0]
 8009628:	230c      	movs	r3, #12
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	0019      	movs	r1, r3
 800962e:	2069      	movs	r0, #105	@ 0x69
 8009630:	f001 f9c0 	bl	800a9b4 <sensirion_i2c_write_data>
 8009634:	0003      	movs	r3, r0
 8009636:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009638:	19bb      	adds	r3, r7, r6
 800963a:	2200      	movs	r2, #0
 800963c:	5e9b      	ldrsh	r3, [r3, r2]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <sen5x_get_product_name+0x56>
        return error;
 8009642:	19bb      	adds	r3, r7, r6
 8009644:	2200      	movs	r2, #0
 8009646:	5e9b      	ldrsh	r3, [r3, r2]
 8009648:	e021      	b.n	800968e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800964a:	4b14      	ldr	r3, [pc, #80]	@ (800969c <sen5x_get_product_name+0xa8>)
 800964c:	0018      	movs	r0, r3
 800964e:	f7ff fc3b 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009652:	253c      	movs	r5, #60	@ 0x3c
 8009654:	197c      	adds	r4, r7, r5
 8009656:	230c      	movs	r3, #12
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	2220      	movs	r2, #32
 800965c:	0019      	movs	r1, r3
 800965e:	2069      	movs	r0, #105	@ 0x69
 8009660:	f001 f9c0 	bl	800a9e4 <sensirion_i2c_read_data_inplace>
 8009664:	0003      	movs	r3, r0
 8009666:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009668:	197b      	adds	r3, r7, r5
 800966a:	2200      	movs	r2, #0
 800966c:	5e9b      	ldrsh	r3, [r3, r2]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <sen5x_get_product_name+0x86>
        return error;
 8009672:	197b      	adds	r3, r7, r5
 8009674:	2200      	movs	r2, #0
 8009676:	5e9b      	ldrsh	r3, [r3, r2]
 8009678:	e009      	b.n	800968e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800967a:	1cfb      	adds	r3, r7, #3
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	b29a      	uxth	r2, r3
 8009680:	6879      	ldr	r1, [r7, #4]
 8009682:	230c      	movs	r3, #12
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	0018      	movs	r0, r3
 8009688:	f000 f988 	bl	800999c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800968c:	2300      	movs	r3, #0
}
 800968e:	0018      	movs	r0, r3
 8009690:	46bd      	mov	sp, r7
 8009692:	b011      	add	sp, #68	@ 0x44
 8009694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009696:	46c0      	nop			@ (mov r8, r8)
 8009698:	0000d014 	.word	0x0000d014
 800969c:	0000c350 	.word	0x0000c350

080096a0 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 80096a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a2:	b091      	sub	sp, #68	@ 0x44
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	000a      	movs	r2, r1
 80096aa:	1cfb      	adds	r3, r7, #3
 80096ac:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 80096ae:	253e      	movs	r5, #62	@ 0x3e
 80096b0:	197b      	adds	r3, r7, r5
 80096b2:	2200      	movs	r2, #0
 80096b4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 80096b6:	197c      	adds	r4, r7, r5
 80096b8:	4a22      	ldr	r2, [pc, #136]	@ (8009744 <sen5x_get_serial_number+0xa4>)
 80096ba:	197b      	adds	r3, r7, r5
 80096bc:	8819      	ldrh	r1, [r3, #0]
 80096be:	230c      	movs	r3, #12
 80096c0:	18fb      	adds	r3, r7, r3
 80096c2:	0018      	movs	r0, r3
 80096c4:	f001 f8f2 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 80096c8:	0003      	movs	r3, r0
 80096ca:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80096cc:	263c      	movs	r6, #60	@ 0x3c
 80096ce:	19bc      	adds	r4, r7, r6
 80096d0:	197b      	adds	r3, r7, r5
 80096d2:	881a      	ldrh	r2, [r3, #0]
 80096d4:	230c      	movs	r3, #12
 80096d6:	18fb      	adds	r3, r7, r3
 80096d8:	0019      	movs	r1, r3
 80096da:	2069      	movs	r0, #105	@ 0x69
 80096dc:	f001 f96a 	bl	800a9b4 <sensirion_i2c_write_data>
 80096e0:	0003      	movs	r3, r0
 80096e2:	8023      	strh	r3, [r4, #0]
    if (error) {
 80096e4:	19bb      	adds	r3, r7, r6
 80096e6:	2200      	movs	r2, #0
 80096e8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <sen5x_get_serial_number+0x56>
        return error;
 80096ee:	19bb      	adds	r3, r7, r6
 80096f0:	2200      	movs	r2, #0
 80096f2:	5e9b      	ldrsh	r3, [r3, r2]
 80096f4:	e021      	b.n	800973a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 80096f6:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <sen5x_get_serial_number+0xa8>)
 80096f8:	0018      	movs	r0, r3
 80096fa:	f7ff fbe5 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 80096fe:	253c      	movs	r5, #60	@ 0x3c
 8009700:	197c      	adds	r4, r7, r5
 8009702:	230c      	movs	r3, #12
 8009704:	18fb      	adds	r3, r7, r3
 8009706:	2220      	movs	r2, #32
 8009708:	0019      	movs	r1, r3
 800970a:	2069      	movs	r0, #105	@ 0x69
 800970c:	f001 f96a 	bl	800a9e4 <sensirion_i2c_read_data_inplace>
 8009710:	0003      	movs	r3, r0
 8009712:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009714:	197b      	adds	r3, r7, r5
 8009716:	2200      	movs	r2, #0
 8009718:	5e9b      	ldrsh	r3, [r3, r2]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <sen5x_get_serial_number+0x86>
        return error;
 800971e:	197b      	adds	r3, r7, r5
 8009720:	2200      	movs	r2, #0
 8009722:	5e9b      	ldrsh	r3, [r3, r2]
 8009724:	e009      	b.n	800973a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009726:	1cfb      	adds	r3, r7, #3
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	b29a      	uxth	r2, r3
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	230c      	movs	r3, #12
 8009730:	18fb      	adds	r3, r7, r3
 8009732:	0018      	movs	r0, r3
 8009734:	f000 f932 	bl	800999c <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009738:	2300      	movs	r3, #0
}
 800973a:	0018      	movs	r0, r3
 800973c:	46bd      	mov	sp, r7
 800973e:	b011      	add	sp, #68	@ 0x44
 8009740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009742:	46c0      	nop			@ (mov r8, r8)
 8009744:	0000d033 	.word	0x0000d033
 8009748:	0000c350 	.word	0x0000c350

0800974c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800974c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800974e:	b089      	sub	sp, #36	@ 0x24
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800975a:	251e      	movs	r5, #30
 800975c:	197b      	adds	r3, r7, r5
 800975e:	2200      	movs	r2, #0
 8009760:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009762:	197c      	adds	r4, r7, r5
 8009764:	23d1      	movs	r3, #209	@ 0xd1
 8009766:	021a      	lsls	r2, r3, #8
 8009768:	197b      	adds	r3, r7, r5
 800976a:	8819      	ldrh	r1, [r3, #0]
 800976c:	2310      	movs	r3, #16
 800976e:	18fb      	adds	r3, r7, r3
 8009770:	0018      	movs	r0, r3
 8009772:	f001 f89b 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 8009776:	0003      	movs	r3, r0
 8009778:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800977a:	261c      	movs	r6, #28
 800977c:	19bc      	adds	r4, r7, r6
 800977e:	197b      	adds	r3, r7, r5
 8009780:	881a      	ldrh	r2, [r3, #0]
 8009782:	2310      	movs	r3, #16
 8009784:	18fb      	adds	r3, r7, r3
 8009786:	0019      	movs	r1, r3
 8009788:	2069      	movs	r0, #105	@ 0x69
 800978a:	f001 f913 	bl	800a9b4 <sensirion_i2c_write_data>
 800978e:	0003      	movs	r3, r0
 8009790:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009792:	19bb      	adds	r3, r7, r6
 8009794:	2200      	movs	r2, #0
 8009796:	5e9b      	ldrsh	r3, [r3, r2]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <sen5x_get_version+0x58>
        return error;
 800979c:	19bb      	adds	r3, r7, r6
 800979e:	2200      	movs	r2, #0
 80097a0:	5e9b      	ldrsh	r3, [r3, r2]
 80097a2:	e038      	b.n	8009816 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80097a4:	4b1e      	ldr	r3, [pc, #120]	@ (8009820 <sen5x_get_version+0xd4>)
 80097a6:	0018      	movs	r0, r3
 80097a8:	f7ff fb8e 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 80097ac:	251c      	movs	r5, #28
 80097ae:	197c      	adds	r4, r7, r5
 80097b0:	2310      	movs	r3, #16
 80097b2:	18fb      	adds	r3, r7, r3
 80097b4:	2208      	movs	r2, #8
 80097b6:	0019      	movs	r1, r3
 80097b8:	2069      	movs	r0, #105	@ 0x69
 80097ba:	f001 f913 	bl	800a9e4 <sensirion_i2c_read_data_inplace>
 80097be:	0003      	movs	r3, r0
 80097c0:	8023      	strh	r3, [r4, #0]
    if (error) {
 80097c2:	197b      	adds	r3, r7, r5
 80097c4:	2200      	movs	r2, #0
 80097c6:	5e9b      	ldrsh	r3, [r3, r2]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <sen5x_get_version+0x88>
        return error;
 80097cc:	197b      	adds	r3, r7, r5
 80097ce:	2200      	movs	r2, #0
 80097d0:	5e9b      	ldrsh	r3, [r3, r2]
 80097d2:	e020      	b.n	8009816 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 80097d4:	2110      	movs	r1, #16
 80097d6:	187b      	adds	r3, r7, r1
 80097d8:	781a      	ldrb	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 80097de:	187b      	adds	r3, r7, r1
 80097e0:	785a      	ldrb	r2, [r3, #1]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 80097e6:	187b      	adds	r3, r7, r1
 80097e8:	789b      	ldrb	r3, [r3, #2]
 80097ea:	1e5a      	subs	r2, r3, #1
 80097ec:	4193      	sbcs	r3, r2
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 80097f4:	187b      	adds	r3, r7, r1
 80097f6:	78da      	ldrb	r2, [r3, #3]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 80097fc:	187b      	adds	r3, r7, r1
 80097fe:	791a      	ldrb	r2, [r3, #4]
 8009800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009802:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009804:	187b      	adds	r3, r7, r1
 8009806:	795a      	ldrb	r2, [r3, #5]
 8009808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980a:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800980c:	187b      	adds	r3, r7, r1
 800980e:	799a      	ldrb	r2, [r3, #6]
 8009810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009812:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009814:	2300      	movs	r3, #0
}
 8009816:	0018      	movs	r0, r3
 8009818:	46bd      	mov	sp, r7
 800981a:	b009      	add	sp, #36	@ 0x24
 800981c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800981e:	46c0      	nop			@ (mov r8, r8)
 8009820:	00004e20 	.word	0x00004e20

08009824 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800982c:	2516      	movs	r5, #22
 800982e:	197b      	adds	r3, r7, r5
 8009830:	2200      	movs	r2, #0
 8009832:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009834:	197c      	adds	r4, r7, r5
 8009836:	4a22      	ldr	r2, [pc, #136]	@ (80098c0 <sen5x_read_device_status+0x9c>)
 8009838:	197b      	adds	r3, r7, r5
 800983a:	8819      	ldrh	r1, [r3, #0]
 800983c:	230c      	movs	r3, #12
 800983e:	18fb      	adds	r3, r7, r3
 8009840:	0018      	movs	r0, r3
 8009842:	f001 f833 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 8009846:	0003      	movs	r3, r0
 8009848:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800984a:	2614      	movs	r6, #20
 800984c:	19bc      	adds	r4, r7, r6
 800984e:	197b      	adds	r3, r7, r5
 8009850:	881a      	ldrh	r2, [r3, #0]
 8009852:	230c      	movs	r3, #12
 8009854:	18fb      	adds	r3, r7, r3
 8009856:	0019      	movs	r1, r3
 8009858:	2069      	movs	r0, #105	@ 0x69
 800985a:	f001 f8ab 	bl	800a9b4 <sensirion_i2c_write_data>
 800985e:	0003      	movs	r3, r0
 8009860:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009862:	19bb      	adds	r3, r7, r6
 8009864:	2200      	movs	r2, #0
 8009866:	5e9b      	ldrsh	r3, [r3, r2]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <sen5x_read_device_status+0x50>
        return error;
 800986c:	19bb      	adds	r3, r7, r6
 800986e:	2200      	movs	r2, #0
 8009870:	5e9b      	ldrsh	r3, [r3, r2]
 8009872:	e020      	b.n	80098b6 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009874:	4b13      	ldr	r3, [pc, #76]	@ (80098c4 <sen5x_read_device_status+0xa0>)
 8009876:	0018      	movs	r0, r3
 8009878:	f7ff fb26 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800987c:	2514      	movs	r5, #20
 800987e:	197c      	adds	r4, r7, r5
 8009880:	230c      	movs	r3, #12
 8009882:	18fb      	adds	r3, r7, r3
 8009884:	2204      	movs	r2, #4
 8009886:	0019      	movs	r1, r3
 8009888:	2069      	movs	r0, #105	@ 0x69
 800988a:	f001 f8ab 	bl	800a9e4 <sensirion_i2c_read_data_inplace>
 800988e:	0003      	movs	r3, r0
 8009890:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009892:	197b      	adds	r3, r7, r5
 8009894:	2200      	movs	r2, #0
 8009896:	5e9b      	ldrsh	r3, [r3, r2]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <sen5x_read_device_status+0x80>
        return error;
 800989c:	197b      	adds	r3, r7, r5
 800989e:	2200      	movs	r2, #0
 80098a0:	5e9b      	ldrsh	r3, [r3, r2]
 80098a2:	e008      	b.n	80098b6 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 80098a4:	230c      	movs	r3, #12
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	0018      	movs	r0, r3
 80098aa:	f000 f850 	bl	800994e <sensirion_common_bytes_to_uint32_t>
 80098ae:	0002      	movs	r2, r0
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	0018      	movs	r0, r3
 80098b8:	46bd      	mov	sp, r7
 80098ba:	b007      	add	sp, #28
 80098bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098be:	46c0      	nop			@ (mov r8, r8)
 80098c0:	0000d206 	.word	0x0000d206
 80098c4:	00004e20 	.word	0x00004e20

080098c8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 80098c8:	b590      	push	{r4, r7, lr}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80098ce:	1dbb      	adds	r3, r7, #6
 80098d0:	2200      	movs	r2, #0
 80098d2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 80098d4:	1dbc      	adds	r4, r7, #6
 80098d6:	4a12      	ldr	r2, [pc, #72]	@ (8009920 <sen5x_device_reset+0x58>)
 80098d8:	1dbb      	adds	r3, r7, #6
 80098da:	8819      	ldrh	r1, [r3, #0]
 80098dc:	003b      	movs	r3, r7
 80098de:	0018      	movs	r0, r3
 80098e0:	f000 ffe4 	bl	800a8ac <sensirion_i2c_add_command_to_buffer>
 80098e4:	0003      	movs	r3, r0
 80098e6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80098e8:	1d3c      	adds	r4, r7, #4
 80098ea:	1dbb      	adds	r3, r7, #6
 80098ec:	881a      	ldrh	r2, [r3, #0]
 80098ee:	003b      	movs	r3, r7
 80098f0:	0019      	movs	r1, r3
 80098f2:	2069      	movs	r0, #105	@ 0x69
 80098f4:	f001 f85e 	bl	800a9b4 <sensirion_i2c_write_data>
 80098f8:	0003      	movs	r3, r0
 80098fa:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098fc:	1d3b      	adds	r3, r7, #4
 80098fe:	2200      	movs	r2, #0
 8009900:	5e9b      	ldrsh	r3, [r3, r2]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <sen5x_device_reset+0x46>
        return error;
 8009906:	1d3b      	adds	r3, r7, #4
 8009908:	2200      	movs	r2, #0
 800990a:	5e9b      	ldrsh	r3, [r3, r2]
 800990c:	e004      	b.n	8009918 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800990e:	4b05      	ldr	r3, [pc, #20]	@ (8009924 <sen5x_device_reset+0x5c>)
 8009910:	0018      	movs	r0, r3
 8009912:	f7ff fad9 	bl	8008ec8 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009916:	2300      	movs	r3, #0
}
 8009918:	0018      	movs	r0, r3
 800991a:	46bd      	mov	sp, r7
 800991c:	b003      	add	sp, #12
 800991e:	bd90      	pop	{r4, r7, pc}
 8009920:	0000d304 	.word	0x0000d304
 8009924:	00030d40 	.word	0x00030d40

08009928 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	b21a      	sxth	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3301      	adds	r3, #1
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	b21b      	sxth	r3, r3
 8009940:	4313      	orrs	r3, r2
 8009942:	b21b      	sxth	r3, r3
 8009944:	b29b      	uxth	r3, r3
}
 8009946:	0018      	movs	r0, r3
 8009948:	46bd      	mov	sp, r7
 800994a:	b002      	add	sp, #8
 800994c:	bd80      	pop	{r7, pc}

0800994e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	061a      	lsls	r2, r3, #24
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3301      	adds	r3, #1
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	041b      	lsls	r3, r3, #16
 8009964:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3302      	adds	r3, #2
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800996e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	3203      	adds	r2, #3
 8009974:	7812      	ldrb	r2, [r2, #0]
 8009976:	4313      	orrs	r3, r2
}
 8009978:	0018      	movs	r0, r3
 800997a:	46bd      	mov	sp, r7
 800997c:	b002      	add	sp, #8
 800997e:	bd80      	pop	{r7, pc}

08009980 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	0018      	movs	r0, r3
 800998c:	f7ff ffcc 	bl	8009928 <sensirion_common_bytes_to_uint16_t>
 8009990:	0003      	movs	r3, r0
 8009992:	b21b      	sxth	r3, r3
}
 8009994:	0018      	movs	r0, r3
 8009996:	46bd      	mov	sp, r7
 8009998:	b002      	add	sp, #8
 800999a:	bd80      	pop	{r7, pc}

0800999c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	1dbb      	adds	r3, r7, #6
 80099a8:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 80099aa:	2316      	movs	r3, #22
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	2200      	movs	r2, #0
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	e00f      	b.n	80099d4 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 80099b4:	2016      	movs	r0, #22
 80099b6:	183b      	adds	r3, r7, r0
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	18d2      	adds	r2, r2, r3
 80099be:	183b      	adds	r3, r7, r0
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	18cb      	adds	r3, r1, r3
 80099c6:	7812      	ldrb	r2, [r2, #0]
 80099c8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 80099ca:	183b      	adds	r3, r7, r0
 80099cc:	881a      	ldrh	r2, [r3, #0]
 80099ce:	183b      	adds	r3, r7, r0
 80099d0:	3201      	adds	r2, #1
 80099d2:	801a      	strh	r2, [r3, #0]
 80099d4:	2316      	movs	r3, #22
 80099d6:	18fa      	adds	r2, r7, r3
 80099d8:	1dbb      	adds	r3, r7, #6
 80099da:	8812      	ldrh	r2, [r2, #0]
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d3e8      	bcc.n	80099b4 <sensirion_common_copy_bytes+0x18>
    }
}
 80099e2:	46c0      	nop			@ (mov r8, r8)
 80099e4:	46c0      	nop			@ (mov r8, r8)
 80099e6:	46bd      	mov	sp, r7
 80099e8:	b006      	add	sp, #24
 80099ea:	bd80      	pop	{r7, pc}

080099ec <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d113      	bne.n	8009a32 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	22fe      	movs	r2, #254	@ 0xfe
 8009a0e:	0592      	lsls	r2, r2, #22
 8009a10:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4a1a      	ldr	r2, [pc, #104]	@ (8009a80 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009a16:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8009a84 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009a1c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4a19      	ldr	r2, [pc, #100]	@ (8009a88 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009a22:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4a19      	ldr	r2, [pc, #100]	@ (8009a8c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009a28:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4a18      	ldr	r2, [pc, #96]	@ (8009a90 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009a2e:	61da      	str	r2, [r3, #28]
 8009a30:	e011      	b.n	8009a56 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4a17      	ldr	r2, [pc, #92]	@ (8009a94 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009a36:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4a17      	ldr	r2, [pc, #92]	@ (8009a98 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009a3c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4a16      	ldr	r2, [pc, #88]	@ (8009a9c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009a42:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4a16      	ldr	r2, [pc, #88]	@ (8009aa0 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009a48:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	4a15      	ldr	r2, [pc, #84]	@ (8009aa4 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009a4e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a15      	ldr	r2, [pc, #84]	@ (8009aa8 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009a54:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4a14      	ldr	r2, [pc, #80]	@ (8009aac <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009a5a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4a14      	ldr	r2, [pc, #80]	@ (8009ab0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009a60:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4a12      	ldr	r2, [pc, #72]	@ (8009ab0 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009a66:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4a12      	ldr	r2, [pc, #72]	@ (8009ab4 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	0018      	movs	r0, r3
 8009a72:	f000 f831 	bl	8009ad8 <GasIndexAlgorithm_reset>
}
 8009a76:	46c0      	nop			@ (mov r8, r8)
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	b004      	add	sp, #16
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	46c0      	nop			@ (mov r8, r8)
 8009a80:	00002710 	.word	0x00002710
 8009a84:	44340000 	.word	0x44340000
 8009a88:	46859800 	.word	0x46859800
 8009a8c:	46a05000 	.word	0x46a05000
 8009a90:	41f00000 	.word	0x41f00000
 8009a94:	42c80000 	.word	0x42c80000
 8009a98:	00004e20 	.word	0x00004e20
 8009a9c:	43340000 	.word	0x43340000
 8009aa0:	4528c000 	.word	0x4528c000
 8009aa4:	45a32000 	.word	0x45a32000
 8009aa8:	43aa0000 	.word	0x43aa0000
 8009aac:	43660000 	.word	0x43660000
 8009ab0:	41400000 	.word	0x41400000
 8009ab4:	42480000 	.word	0x42480000

08009ab8 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009ac2:	22fe      	movs	r2, #254	@ 0xfe
 8009ac4:	0592      	lsls	r2, r2, #22
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	0018      	movs	r0, r3
 8009acc:	f7ff ff8e 	bl	80099ec <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8009ad0:	46c0      	nop			@ (mov r8, r8)
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	b002      	add	sp, #8
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	0018      	movs	r0, r3
 8009af6:	f000 f805 	bl	8009b04 <GasIndexAlgorithm__init_instances>
}
 8009afa:	46c0      	nop			@ (mov r8, r8)
 8009afc:	46bd      	mov	sp, r7
 8009afe:	b002      	add	sp, #8
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8009b04:	b590      	push	{r4, r7, lr}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	0018      	movs	r0, r3
 8009b10:	f000 f8e8 	bl	8009ce4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	0018      	movs	r0, r3
 8009b18:	f000 f9a6 	bl	8009e68 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009b1c:	1c04      	adds	r4, r0, #0
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	0018      	movs	r0, r3
 8009b22:	f000 f9ab 	bl	8009e7c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009b26:	1c02      	adds	r2, r0, #0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	1c21      	adds	r1, r4, #0
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f000 fc3b 	bl	800a3a8 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d107      	bne.n	8009b4a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009b3a:	23fe      	movs	r3, #254	@ 0xfe
 8009b3c:	059b      	lsls	r3, r3, #22
 8009b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8009b68 <GasIndexAlgorithm__init_instances+0x64>)
 8009b40:	490a      	ldr	r1, [pc, #40]	@ (8009b6c <GasIndexAlgorithm__init_instances+0x68>)
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fc86 	bl	800a454 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8009b48:	e005      	b.n	8009b56 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009b4a:	4b09      	ldr	r3, [pc, #36]	@ (8009b70 <GasIndexAlgorithm__init_instances+0x6c>)
 8009b4c:	4a09      	ldr	r2, [pc, #36]	@ (8009b74 <GasIndexAlgorithm__init_instances+0x70>)
 8009b4e:	490a      	ldr	r1, [pc, #40]	@ (8009b78 <GasIndexAlgorithm__init_instances+0x74>)
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fc7f 	bl	800a454 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	0018      	movs	r0, r3
 8009b5a:	f000 fd35 	bl	800a5c8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8009b5e:	46c0      	nop			@ (mov r8, r8)
 8009b60:	46bd      	mov	sp, r7
 8009b62:	b003      	add	sp, #12
 8009b64:	bd90      	pop	{r4, r7, pc}
 8009b66:	46c0      	nop			@ (mov r8, r8)
 8009b68:	bc257a78 	.word	0xbc257a78
 8009b6c:	44198000 	.word	0x44198000
 8009b70:	42c80000 	.word	0x42c80000
 8009b74:	bbd4fdf4 	.word	0xbbd4fdf4
 8009b78:	43550000 	.word	0x43550000

08009b7c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8c:	4952      	ldr	r1, [pc, #328]	@ (8009cd8 <GasIndexAlgorithm_process+0x15c>)
 8009b8e:	1c18      	adds	r0, r3, #0
 8009b90:	f7f6 fcd8 	bl	8000544 <__aeabi_fcmple>
 8009b94:	1e03      	subs	r3, r0, #0
 8009b96:	d00c      	beq.n	8009bb2 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	1c19      	adds	r1, r3, #0
 8009ba2:	1c10      	adds	r0, r2, #0
 8009ba4:	f7f6 fe8c 	bl	80008c0 <__aeabi_fadd>
 8009ba8:	1c03      	adds	r3, r0, #0
 8009baa:	1c1a      	adds	r2, r3, #0
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	631a      	str	r2, [r3, #48]	@ 0x30
 8009bb0:	e080      	b.n	8009cb4 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dd25      	ble.n	8009c04 <GasIndexAlgorithm_process+0x88>
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4a48      	ldr	r2, [pc, #288]	@ (8009cdc <GasIndexAlgorithm_process+0x160>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	dc21      	bgt.n	8009c04 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	dc04      	bgt.n	8009bd4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	60bb      	str	r3, [r7, #8]
 8009bd2:	e00d      	b.n	8009bf0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	4a41      	ldr	r2, [pc, #260]	@ (8009ce0 <GasIndexAlgorithm_process+0x164>)
 8009bda:	4694      	mov	ip, r2
 8009bdc:	4463      	add	r3, ip
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	dd05      	ble.n	8009bf0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	4a3d      	ldr	r2, [pc, #244]	@ (8009ce0 <GasIndexAlgorithm_process+0x164>)
 8009bea:	4694      	mov	ip, r2
 8009bec:	4463      	add	r3, ip
 8009bee:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	0018      	movs	r0, r3
 8009bfa:	f7f7 fce9 	bl	80015d0 <__aeabi_i2f>
 8009bfe:	1c02      	adds	r2, r0, #0
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	0018      	movs	r0, r3
 8009c10:	f000 f945 	bl	8009e9e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8009c14:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8009c16:	d014      	beq.n	8009c42 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	1c11      	adds	r1, r2, #0
 8009c20:	0018      	movs	r0, r3
 8009c22:	f000 fbd1 	bl	800a3c8 <GasIndexAlgorithm__mox_model__process>
 8009c26:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	1c11      	adds	r1, r2, #0
 8009c34:	0018      	movs	r0, r3
 8009c36:	f000 fc25 	bl	800a484 <GasIndexAlgorithm__sigmoid_scaled__process>
 8009c3a:	1c02      	adds	r2, r0, #0
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c40:	e003      	b.n	8009c4a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	1c11      	adds	r1, r2, #0
 8009c52:	0018      	movs	r0, r3
 8009c54:	f000 fcec 	bl	800a630 <GasIndexAlgorithm__adaptive_lowpass__process>
 8009c58:	1c02      	adds	r2, r0, #0
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c62:	21fc      	movs	r1, #252	@ 0xfc
 8009c64:	0589      	lsls	r1, r1, #22
 8009c66:	1c18      	adds	r0, r3, #0
 8009c68:	f7f6 fc62 	bl	8000530 <__aeabi_fcmplt>
 8009c6c:	1e03      	subs	r3, r0, #0
 8009c6e:	d003      	beq.n	8009c78 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	22fc      	movs	r2, #252	@ 0xfc
 8009c74:	0592      	lsls	r2, r2, #22
 8009c76:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	1c18      	adds	r0, r3, #0
 8009c80:	f7f6 fc6a 	bl	8000558 <__aeabi_fcmpgt>
 8009c84:	1e03      	subs	r3, r0, #0
 8009c86:	d015      	beq.n	8009cb4 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	1c11      	adds	r1, r2, #0
 8009c90:	0018      	movs	r0, r3
 8009c92:	f000 fa4f 	bl	800a134 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	0018      	movs	r0, r3
 8009c9a:	f000 f8e5 	bl	8009e68 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009c9e:	1c04      	adds	r4, r0, #0
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f000 f8ea 	bl	8009e7c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009ca8:	1c02      	adds	r2, r0, #0
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	1c21      	adds	r1, r4, #0
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f000 fb7a 	bl	800a3a8 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb8:	21fc      	movs	r1, #252	@ 0xfc
 8009cba:	0589      	lsls	r1, r1, #22
 8009cbc:	1c18      	adds	r0, r3, #0
 8009cbe:	f7f6 fdff 	bl	80008c0 <__aeabi_fadd>
 8009cc2:	1c03      	adds	r3, r0, #0
 8009cc4:	1c18      	adds	r0, r3, #0
 8009cc6:	f7f7 fc63 	bl	8001590 <__aeabi_f2iz>
 8009cca:	0002      	movs	r2, r0
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	601a      	str	r2, [r3, #0]
    return;
 8009cd0:	46c0      	nop			@ (mov r8, r8)
}
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	b005      	add	sp, #20
 8009cd6:	bd90      	pop	{r4, r7, pc}
 8009cd8:	42340000 	.word	0x42340000
 8009cdc:	0000fde7 	.word	0x0000fde7
 8009ce0:	00007fff 	.word	0x00007fff

08009ce4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8009ce4:	b5b0      	push	{r4, r5, r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	223c      	movs	r2, #60	@ 0x3c
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	4952      	ldr	r1, [pc, #328]	@ (8009e58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009d0e:	1c18      	adds	r0, r3, #0
 8009d10:	f7f6 ff60 	bl	8000bd4 <__aeabi_fdiv>
 8009d14:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009d16:	2188      	movs	r1, #136	@ 0x88
 8009d18:	05c9      	lsls	r1, r1, #23
 8009d1a:	1c18      	adds	r0, r3, #0
 8009d1c:	f7f7 f940 	bl	8000fa0 <__aeabi_fmul>
 8009d20:	1c03      	adds	r3, r0, #0
 8009d22:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	494a      	ldr	r1, [pc, #296]	@ (8009e58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009d2e:	1c18      	adds	r0, r3, #0
 8009d30:	f7f6 ff50 	bl	8000bd4 <__aeabi_fdiv>
 8009d34:	1c03      	adds	r3, r0, #0
 8009d36:	1c19      	adds	r1, r3, #0
 8009d38:	1c20      	adds	r0, r4, #0
 8009d3a:	f7f6 fdc1 	bl	80008c0 <__aeabi_fadd>
 8009d3e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8009d40:	1c19      	adds	r1, r3, #0
 8009d42:	1c28      	adds	r0, r5, #0
 8009d44:	f7f6 ff46 	bl	8000bd4 <__aeabi_fdiv>
 8009d48:	1c03      	adds	r3, r0, #0
 8009d4a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	4940      	ldr	r1, [pc, #256]	@ (8009e58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009d56:	1c18      	adds	r0, r3, #0
 8009d58:	f7f6 ff3c 	bl	8000bd4 <__aeabi_fdiv>
 8009d5c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009d5e:	2185      	movs	r1, #133	@ 0x85
 8009d60:	05c9      	lsls	r1, r1, #23
 8009d62:	1c18      	adds	r0, r3, #0
 8009d64:	f7f7 f91c 	bl	8000fa0 <__aeabi_fmul>
 8009d68:	1c03      	adds	r3, r0, #0
 8009d6a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	4938      	ldr	r1, [pc, #224]	@ (8009e58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009d76:	1c18      	adds	r0, r3, #0
 8009d78:	f7f6 ff2c 	bl	8000bd4 <__aeabi_fdiv>
 8009d7c:	1c03      	adds	r3, r0, #0
 8009d7e:	1c19      	adds	r1, r3, #0
 8009d80:	1c20      	adds	r0, r4, #0
 8009d82:	f7f6 fd9d 	bl	80008c0 <__aeabi_fadd>
 8009d86:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8009d88:	1c19      	adds	r1, r3, #0
 8009d8a:	1c28      	adds	r0, r5, #0
 8009d8c:	f7f6 ff22 	bl	8000bd4 <__aeabi_fdiv>
 8009d90:	1c03      	adds	r3, r0, #0
 8009d92:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d118      	bne.n	8009dd2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009da4:	2188      	movs	r1, #136	@ 0x88
 8009da6:	05c9      	lsls	r1, r1, #23
 8009da8:	1c18      	adds	r0, r3, #0
 8009daa:	f7f7 f8f9 	bl	8000fa0 <__aeabi_fmul>
 8009dae:	1c03      	adds	r3, r0, #0
 8009db0:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8009db6:	4929      	ldr	r1, [pc, #164]	@ (8009e5c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8009db8:	1c18      	adds	r0, r3, #0
 8009dba:	f7f6 fd81 	bl	80008c0 <__aeabi_fadd>
 8009dbe:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8009dc0:	1c19      	adds	r1, r3, #0
 8009dc2:	1c20      	adds	r0, r4, #0
 8009dc4:	f7f6 ff06 	bl	8000bd4 <__aeabi_fdiv>
 8009dc8:	1c03      	adds	r3, r0, #0
 8009dca:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	655a      	str	r2, [r3, #84]	@ 0x54
 8009dd0:	e017      	b.n	8009e02 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009dd6:	2188      	movs	r1, #136	@ 0x88
 8009dd8:	05c9      	lsls	r1, r1, #23
 8009dda:	1c18      	adds	r0, r3, #0
 8009ddc:	f7f7 f8e0 	bl	8000fa0 <__aeabi_fmul>
 8009de0:	1c03      	adds	r3, r0, #0
 8009de2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8009de8:	491d      	ldr	r1, [pc, #116]	@ (8009e60 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8009dea:	1c18      	adds	r0, r3, #0
 8009dec:	f7f6 fd68 	bl	80008c0 <__aeabi_fadd>
 8009df0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8009df2:	1c19      	adds	r1, r3, #0
 8009df4:	1c20      	adds	r0, r4, #0
 8009df6:	f7f6 feed 	bl	8000bd4 <__aeabi_fdiv>
 8009dfa:	1c03      	adds	r3, r0, #0
 8009dfc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009e06:	2185      	movs	r1, #133	@ 0x85
 8009e08:	05c9      	lsls	r1, r1, #23
 8009e0a:	1c18      	adds	r0, r3, #0
 8009e0c:	f7f7 f8c8 	bl	8000fa0 <__aeabi_fmul>
 8009e10:	1c03      	adds	r3, r0, #0
 8009e12:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	4912      	ldr	r1, [pc, #72]	@ (8009e64 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8009e1a:	1c18      	adds	r0, r3, #0
 8009e1c:	f7f6 fd50 	bl	80008c0 <__aeabi_fadd>
 8009e20:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8009e22:	1c19      	adds	r1, r3, #0
 8009e24:	1c20      	adds	r0, r4, #0
 8009e26:	f7f6 fed5 	bl	8000bd4 <__aeabi_fdiv>
 8009e2a:	1c03      	adds	r3, r0, #0
 8009e2c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8009e50:	46c0      	nop			@ (mov r8, r8)
 8009e52:	46bd      	mov	sp, r7
 8009e54:	b002      	add	sp, #8
 8009e56:	bdb0      	pop	{r4, r5, r7, pc}
 8009e58:	45610000 	.word	0x45610000
 8009e5c:	44960000 	.word	0x44960000
 8009e60:	41a00000 	.word	0x41a00000
 8009e64:	451c4000 	.word	0x451c4000

08009e68 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8009e74:	1c18      	adds	r0, r3, #0
 8009e76:	46bd      	mov	sp, r7
 8009e78:	b002      	add	sp, #8
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8009e8c:	1c19      	adds	r1, r3, #0
 8009e8e:	1c10      	adds	r0, r2, #0
 8009e90:	f7f6 fd16 	bl	80008c0 <__aeabi_fadd>
 8009e94:	1c03      	adds	r3, r0, #0
}
 8009e96:	1c18      	adds	r0, r3, #0
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	b002      	add	sp, #8
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	223c      	movs	r2, #60	@ 0x3c
 8009eaa:	5c9b      	ldrb	r3, [r3, r2]
}
 8009eac:	0018      	movs	r0, r3
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	b002      	add	sp, #8
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8009eb4:	b5b0      	push	{r4, r5, r7, lr}
 8009eb6:	b08c      	sub	sp, #48	@ 0x30
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8009ec0:	1c19      	adds	r1, r3, #0
 8009ec2:	4895      	ldr	r0, [pc, #596]	@ (800a118 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8009ec4:	f7f7 f9aa 	bl	800121c <__aeabi_fsub>
 8009ec8:	1c03      	adds	r3, r0, #0
 8009eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ed0:	1c19      	adds	r1, r3, #0
 8009ed2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ed4:	f7f6 fb40 	bl	8000558 <__aeabi_fcmpgt>
 8009ed8:	1e03      	subs	r3, r0, #0
 8009eda:	d00b      	beq.n	8009ef4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8009ee4:	1c19      	adds	r1, r3, #0
 8009ee6:	1c10      	adds	r0, r2, #0
 8009ee8:	f7f6 fcea 	bl	80008c0 <__aeabi_fadd>
 8009eec:	1c03      	adds	r3, r0, #0
 8009eee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ef8:	1c19      	adds	r1, r3, #0
 8009efa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009efc:	f7f6 fb2c 	bl	8000558 <__aeabi_fcmpgt>
 8009f00:	1e03      	subs	r3, r0, #0
 8009f02:	d00b      	beq.n	8009f1c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8009f0c:	1c19      	adds	r1, r3, #0
 8009f0e:	1c10      	adds	r0, r2, #0
 8009f10:	f7f6 fcd6 	bl	80008c0 <__aeabi_fadd>
 8009f14:	1c03      	adds	r3, r0, #0
 8009f16:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6959      	ldr	r1, [r3, #20]
 8009f20:	4a7e      	ldr	r2, [pc, #504]	@ (800a11c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	0018      	movs	r0, r3
 8009f26:	f000 f9f1 	bl	800a30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	1c11      	adds	r1, r2, #0
 8009f32:	0018      	movs	r0, r3
 8009f34:	f000 f9fa 	bl	800a32c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009f38:	1c03      	adds	r3, r0, #0
 8009f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009f48:	1c19      	adds	r1, r3, #0
 8009f4a:	1c10      	adds	r0, r2, #0
 8009f4c:	f7f7 f966 	bl	800121c <__aeabi_fsub>
 8009f50:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f54:	1c18      	adds	r0, r3, #0
 8009f56:	f7f7 f823 	bl	8000fa0 <__aeabi_fmul>
 8009f5a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009f5c:	1c19      	adds	r1, r3, #0
 8009f5e:	1c20      	adds	r0, r4, #0
 8009f60:	f7f6 fcae 	bl	80008c0 <__aeabi_fadd>
 8009f64:	1c03      	adds	r3, r0, #0
 8009f66:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8009f70:	1c19      	adds	r1, r3, #0
 8009f72:	486b      	ldr	r0, [pc, #428]	@ (800a120 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8009f74:	f7f7 f952 	bl	800121c <__aeabi_fsub>
 8009f78:	1c03      	adds	r3, r0, #0
 8009f7a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	1c11      	adds	r1, r2, #0
 8009f84:	0018      	movs	r0, r3
 8009f86:	f000 f9d1 	bl	800a32c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009f8a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8009f8c:	1c19      	adds	r1, r3, #0
 8009f8e:	1c28      	adds	r0, r5, #0
 8009f90:	f7f7 f806 	bl	8000fa0 <__aeabi_fmul>
 8009f94:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8009f96:	1c19      	adds	r1, r3, #0
 8009f98:	1c20      	adds	r0, r4, #0
 8009f9a:	f7f6 fc91 	bl	80008c0 <__aeabi_fadd>
 8009f9e:	1c03      	adds	r3, r0, #0
 8009fa0:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009fa2:	4a60      	ldr	r2, [pc, #384]	@ (800a124 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8009fa4:	6a39      	ldr	r1, [r7, #32]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f000 f9af 	bl	800a30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	1c11      	adds	r1, r2, #0
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f000 f9b8 	bl	800a32c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009fbc:	1c03      	adds	r3, r0, #0
 8009fbe:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8009fc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009fc2:	69f8      	ldr	r0, [r7, #28]
 8009fc4:	f7f6 ffec 	bl	8000fa0 <__aeabi_fmul>
 8009fc8:	1c03      	adds	r3, r0, #0
 8009fca:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6999      	ldr	r1, [r3, #24]
 8009fd4:	4a51      	ldr	r2, [pc, #324]	@ (800a11c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f000 f997 	bl	800a30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	1c11      	adds	r1, r2, #0
 8009fe6:	0018      	movs	r0, r3
 8009fe8:	f000 f9a0 	bl	800a32c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009fec:	1c03      	adds	r3, r0, #0
 8009fee:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8009ffc:	1c19      	adds	r1, r3, #0
 8009ffe:	1c10      	adds	r0, r2, #0
 800a000:	f7f7 f90c 	bl	800121c <__aeabi_fsub>
 800a004:	1c03      	adds	r3, r0, #0
 800a006:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a00a:	69b8      	ldr	r0, [r7, #24]
 800a00c:	f7f7 f906 	bl	800121c <__aeabi_fsub>
 800a010:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a012:	1c19      	adds	r1, r3, #0
 800a014:	1c28      	adds	r0, r5, #0
 800a016:	f7f6 ffc3 	bl	8000fa0 <__aeabi_fmul>
 800a01a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a01c:	1c19      	adds	r1, r3, #0
 800a01e:	1c20      	adds	r0, r4, #0
 800a020:	f7f6 fc4e 	bl	80008c0 <__aeabi_fadd>
 800a024:	1c03      	adds	r3, r0, #0
 800a026:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a030:	1c19      	adds	r1, r3, #0
 800a032:	483b      	ldr	r0, [pc, #236]	@ (800a120 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a034:	f7f7 f8f2 	bl	800121c <__aeabi_fsub>
 800a038:	1c03      	adds	r3, r0, #0
 800a03a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	1c11      	adds	r1, r2, #0
 800a044:	0018      	movs	r0, r3
 800a046:	f000 f971 	bl	800a32c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a04a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a04c:	1c19      	adds	r1, r3, #0
 800a04e:	1c28      	adds	r0, r5, #0
 800a050:	f7f6 ffa6 	bl	8000fa0 <__aeabi_fmul>
 800a054:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a056:	1c19      	adds	r1, r3, #0
 800a058:	1c20      	adds	r0, r4, #0
 800a05a:	f7f6 fc31 	bl	80008c0 <__aeabi_fadd>
 800a05e:	1c03      	adds	r3, r0, #0
 800a060:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a062:	4a30      	ldr	r2, [pc, #192]	@ (800a124 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a064:	6939      	ldr	r1, [r7, #16]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	0018      	movs	r0, r3
 800a06a:	f000 f94f 	bl	800a30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	1c11      	adds	r1, r2, #0
 800a076:	0018      	movs	r0, r3
 800a078:	f000 f958 	bl	800a32c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a07c:	1c03      	adds	r3, r0, #0
 800a07e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a080:	6979      	ldr	r1, [r7, #20]
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7f6 ff8c 	bl	8000fa0 <__aeabi_fmul>
 800a088:	1c03      	adds	r3, r0, #0
 800a08a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	4923      	ldr	r1, [pc, #140]	@ (800a128 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a09a:	1c18      	adds	r0, r3, #0
 800a09c:	f7f6 fd9a 	bl	8000bd4 <__aeabi_fdiv>
 800a0a0:	1c03      	adds	r3, r0, #0
 800a0a2:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a0a4:	69f9      	ldr	r1, [r7, #28]
 800a0a6:	20fe      	movs	r0, #254	@ 0xfe
 800a0a8:	0580      	lsls	r0, r0, #22
 800a0aa:	f7f7 f8b7 	bl	800121c <__aeabi_fsub>
 800a0ae:	1c03      	adds	r3, r0, #0
 800a0b0:	491e      	ldr	r1, [pc, #120]	@ (800a12c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a0b2:	1c18      	adds	r0, r3, #0
 800a0b4:	f7f6 ff74 	bl	8000fa0 <__aeabi_fmul>
 800a0b8:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a0ba:	491d      	ldr	r1, [pc, #116]	@ (800a130 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a0bc:	1c18      	adds	r0, r3, #0
 800a0be:	f7f7 f8ad 	bl	800121c <__aeabi_fsub>
 800a0c2:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a0c4:	1c19      	adds	r1, r3, #0
 800a0c6:	1c28      	adds	r0, r5, #0
 800a0c8:	f7f6 ff6a 	bl	8000fa0 <__aeabi_fmul>
 800a0cc:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a0ce:	1c19      	adds	r1, r3, #0
 800a0d0:	1c20      	adds	r0, r4, #0
 800a0d2:	f7f6 fbf5 	bl	80008c0 <__aeabi_fadd>
 800a0d6:	1c03      	adds	r3, r0, #0
 800a0d8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	1c18      	adds	r0, r3, #0
 800a0e6:	f7f6 fa23 	bl	8000530 <__aeabi_fcmplt>
 800a0ea:	1e03      	subs	r3, r0, #0
 800a0ec:	d002      	beq.n	800a0f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a0fc:	1c19      	adds	r1, r3, #0
 800a0fe:	1c10      	adds	r0, r2, #0
 800a100:	f7f6 fa2a 	bl	8000558 <__aeabi_fcmpgt>
 800a104:	1e03      	subs	r3, r0, #0
 800a106:	d100      	bne.n	800a10a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a108:	e002      	b.n	800a110 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a110:	46c0      	nop			@ (mov r8, r8)
 800a112:	46bd      	mov	sp, r7
 800a114:	b00c      	add	sp, #48	@ 0x30
 800a116:	bdb0      	pop	{r4, r5, r7, pc}
 800a118:	46fffe00 	.word	0x46fffe00
 800a11c:	3c23d70a 	.word	0x3c23d70a
 800a120:	43ff0000 	.word	0x43ff0000
 800a124:	3db851ec 	.word	0x3db851ec
 800a128:	42700000 	.word	0x42700000
 800a12c:	3fa66666 	.word	0x3fa66666
 800a130:	3e99999a 	.word	0x3e99999a

0800a134 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a136:	b087      	sub	sp, #28
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	223c      	movs	r2, #60	@ 0x3c
 800a142:	5c9b      	ldrb	r3, [r3, r2]
 800a144:	2201      	movs	r2, #1
 800a146:	4053      	eors	r3, r2
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	223c      	movs	r2, #60	@ 0x3c
 800a152:	2101      	movs	r1, #1
 800a154:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a162:	e0c8      	b.n	800a2f6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a168:	4965      	ldr	r1, [pc, #404]	@ (800a300 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a16a:	1c18      	adds	r0, r3, #0
 800a16c:	f7f6 f9fe 	bl	800056c <__aeabi_fcmpge>
 800a170:	1e03      	subs	r3, r0, #0
 800a172:	d107      	bne.n	800a184 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a178:	4962      	ldr	r1, [pc, #392]	@ (800a304 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a17a:	1c18      	adds	r0, r3, #0
 800a17c:	f7f6 f9e2 	bl	8000544 <__aeabi_fcmple>
 800a180:	1e03      	subs	r3, r0, #0
 800a182:	d00e      	beq.n	800a1a2 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a18c:	1c19      	adds	r1, r3, #0
 800a18e:	1c10      	adds	r0, r2, #0
 800a190:	f7f6 fb96 	bl	80008c0 <__aeabi_fadd>
 800a194:	1c03      	adds	r3, r0, #0
 800a196:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1a6:	1c19      	adds	r1, r3, #0
 800a1a8:	6838      	ldr	r0, [r7, #0]
 800a1aa:	f7f7 f837 	bl	800121c <__aeabi_fsub>
 800a1ae:	1c03      	adds	r3, r0, #0
 800a1b0:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	0018      	movs	r0, r3
 800a1b6:	f7ff fe7d 	bl	8009eb4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1be:	1c19      	adds	r1, r3, #0
 800a1c0:	6838      	ldr	r0, [r7, #0]
 800a1c2:	f7f7 f82b 	bl	800121c <__aeabi_fsub>
 800a1c6:	1c03      	adds	r3, r0, #0
 800a1c8:	2185      	movs	r1, #133	@ 0x85
 800a1ca:	05c9      	lsls	r1, r1, #23
 800a1cc:	1c18      	adds	r0, r3, #0
 800a1ce:	f7f6 fd01 	bl	8000bd4 <__aeabi_fdiv>
 800a1d2:	1c03      	adds	r3, r0, #0
 800a1d4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7f6 f9a9 	bl	8000530 <__aeabi_fcmplt>
 800a1de:	1e03      	subs	r3, r0, #0
 800a1e0:	d008      	beq.n	800a1f4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	1c18      	adds	r0, r3, #0
 800a1ea:	f7f7 f817 	bl	800121c <__aeabi_fsub>
 800a1ee:	1c03      	adds	r3, r0, #0
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e007      	b.n	800a204 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1f8:	1c19      	adds	r1, r3, #0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7f6 fb60 	bl	80008c0 <__aeabi_fadd>
 800a200:	1c03      	adds	r3, r0, #0
 800a202:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a204:	23fe      	movs	r3, #254	@ 0xfe
 800a206:	059b      	lsls	r3, r3, #22
 800a208:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a20a:	493f      	ldr	r1, [pc, #252]	@ (800a308 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a20c:	6978      	ldr	r0, [r7, #20]
 800a20e:	f7f6 f9a3 	bl	8000558 <__aeabi_fcmpgt>
 800a212:	1e03      	subs	r3, r0, #0
 800a214:	d010      	beq.n	800a238 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a216:	493c      	ldr	r1, [pc, #240]	@ (800a308 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a218:	6978      	ldr	r0, [r7, #20]
 800a21a:	f7f6 fcdb 	bl	8000bd4 <__aeabi_fdiv>
 800a21e:	1c03      	adds	r3, r0, #0
 800a220:	1c1c      	adds	r4, r3, #0
 800a222:	4939      	ldr	r1, [pc, #228]	@ (800a308 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a224:	6978      	ldr	r0, [r7, #20]
 800a226:	f7f6 fcd5 	bl	8000bd4 <__aeabi_fdiv>
 800a22a:	1c03      	adds	r3, r0, #0
 800a22c:	1c19      	adds	r1, r3, #0
 800a22e:	1c20      	adds	r0, r4, #0
 800a230:	f7f6 feb6 	bl	8000fa0 <__aeabi_fmul>
 800a234:	1c03      	adds	r3, r0, #0
 800a236:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a23c:	1c19      	adds	r1, r3, #0
 800a23e:	2085      	movs	r0, #133	@ 0x85
 800a240:	05c0      	lsls	r0, r0, #23
 800a242:	f7f6 ffeb 	bl	800121c <__aeabi_fsub>
 800a246:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a248:	6939      	ldr	r1, [r7, #16]
 800a24a:	1c18      	adds	r0, r3, #0
 800a24c:	f7f6 fea8 	bl	8000fa0 <__aeabi_fmul>
 800a250:	1c03      	adds	r3, r0, #0
 800a252:	1c18      	adds	r0, r3, #0
 800a254:	f017 fbfe 	bl	8021a54 <sqrtf>
 800a258:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a262:	2185      	movs	r1, #133	@ 0x85
 800a264:	05c9      	lsls	r1, r1, #23
 800a266:	6938      	ldr	r0, [r7, #16]
 800a268:	f7f6 fe9a 	bl	8000fa0 <__aeabi_fmul>
 800a26c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a26e:	1c19      	adds	r1, r3, #0
 800a270:	1c28      	adds	r0, r5, #0
 800a272:	f7f6 fcaf 	bl	8000bd4 <__aeabi_fdiv>
 800a276:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a278:	1c19      	adds	r1, r3, #0
 800a27a:	1c20      	adds	r0, r4, #0
 800a27c:	f7f6 fe90 	bl	8000fa0 <__aeabi_fmul>
 800a280:	1c03      	adds	r3, r0, #0
 800a282:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a288:	68f9      	ldr	r1, [r7, #12]
 800a28a:	1c18      	adds	r0, r3, #0
 800a28c:	f7f6 fe88 	bl	8000fa0 <__aeabi_fmul>
 800a290:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a292:	6939      	ldr	r1, [r7, #16]
 800a294:	1c18      	adds	r0, r3, #0
 800a296:	f7f6 fc9d 	bl	8000bd4 <__aeabi_fdiv>
 800a29a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a29c:	68f9      	ldr	r1, [r7, #12]
 800a29e:	1c18      	adds	r0, r3, #0
 800a2a0:	f7f6 fe7e 	bl	8000fa0 <__aeabi_fmul>
 800a2a4:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a2a6:	1c19      	adds	r1, r3, #0
 800a2a8:	1c20      	adds	r0, r4, #0
 800a2aa:	f7f6 fb09 	bl	80008c0 <__aeabi_fadd>
 800a2ae:	1c03      	adds	r3, r0, #0
 800a2b0:	1c18      	adds	r0, r3, #0
 800a2b2:	f017 fbcf 	bl	8021a54 <sqrtf>
 800a2b6:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a2b8:	1c19      	adds	r1, r3, #0
 800a2ba:	1c30      	adds	r0, r6, #0
 800a2bc:	f7f6 fe70 	bl	8000fa0 <__aeabi_fmul>
 800a2c0:	1c03      	adds	r3, r0, #0
 800a2c2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2d0:	68f9      	ldr	r1, [r7, #12]
 800a2d2:	1c18      	adds	r0, r3, #0
 800a2d4:	f7f6 fe64 	bl	8000fa0 <__aeabi_fmul>
 800a2d8:	1c03      	adds	r3, r0, #0
 800a2da:	2182      	movs	r1, #130	@ 0x82
 800a2dc:	05c9      	lsls	r1, r1, #23
 800a2de:	1c18      	adds	r0, r3, #0
 800a2e0:	f7f6 fc78 	bl	8000bd4 <__aeabi_fdiv>
 800a2e4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a2e6:	1c19      	adds	r1, r3, #0
 800a2e8:	1c20      	adds	r0, r4, #0
 800a2ea:	f7f6 fae9 	bl	80008c0 <__aeabi_fadd>
 800a2ee:	1c03      	adds	r3, r0, #0
 800a2f0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a2f6:	46c0      	nop			@ (mov r8, r8)
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	b007      	add	sp, #28
 800a2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2fe:	46c0      	nop			@ (mov r8, r8)
 800a300:	42c80000 	.word	0x42c80000
 800a304:	c2c80000 	.word	0xc2c80000
 800a308:	44b40000 	.word	0x44b40000

0800a30c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a324:	46c0      	nop			@ (mov r8, r8)
 800a326:	46bd      	mov	sp, r7
 800a328:	b004      	add	sp, #16
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a32c:	b590      	push	{r4, r7, lr}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a33e:	1c19      	adds	r1, r3, #0
 800a340:	6838      	ldr	r0, [r7, #0]
 800a342:	f7f6 ff6b 	bl	800121c <__aeabi_fsub>
 800a346:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a348:	1c19      	adds	r1, r3, #0
 800a34a:	1c20      	adds	r0, r4, #0
 800a34c:	f7f6 fe28 	bl	8000fa0 <__aeabi_fmul>
 800a350:	1c03      	adds	r3, r0, #0
 800a352:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a354:	4912      	ldr	r1, [pc, #72]	@ (800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7f6 f8ea 	bl	8000530 <__aeabi_fcmplt>
 800a35c:	1e03      	subs	r3, r0, #0
 800a35e:	d002      	beq.n	800a366 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a360:	23fe      	movs	r3, #254	@ 0xfe
 800a362:	059b      	lsls	r3, r3, #22
 800a364:	e018      	b.n	800a398 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a366:	490f      	ldr	r1, [pc, #60]	@ (800a3a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7f6 f8f5 	bl	8000558 <__aeabi_fcmpgt>
 800a36e:	1e03      	subs	r3, r0, #0
 800a370:	d001      	beq.n	800a376 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a372:	2300      	movs	r3, #0
 800a374:	e010      	b.n	800a398 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	1c18      	adds	r0, r3, #0
 800a37a:	f017 fb43 	bl	8021a04 <expf>
 800a37e:	1c03      	adds	r3, r0, #0
 800a380:	21fe      	movs	r1, #254	@ 0xfe
 800a382:	0589      	lsls	r1, r1, #22
 800a384:	1c18      	adds	r0, r3, #0
 800a386:	f7f6 fa9b 	bl	80008c0 <__aeabi_fadd>
 800a38a:	1c03      	adds	r3, r0, #0
 800a38c:	1c19      	adds	r1, r3, #0
 800a38e:	20fe      	movs	r0, #254	@ 0xfe
 800a390:	0580      	lsls	r0, r0, #22
 800a392:	f7f6 fc1f 	bl	8000bd4 <__aeabi_fdiv>
 800a396:	1c03      	adds	r3, r0, #0
    }
}
 800a398:	1c18      	adds	r0, r3, #0
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b005      	add	sp, #20
 800a39e:	bd90      	pop	{r4, r7, pc}
 800a3a0:	c2480000 	.word	0xc2480000
 800a3a4:	42480000 	.word	0x42480000

0800a3a8 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a3c0:	46c0      	nop			@ (mov r8, r8)
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	b004      	add	sp, #16
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d114      	bne.n	800a404 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3de:	1c19      	adds	r1, r3, #0
 800a3e0:	6838      	ldr	r0, [r7, #0]
 800a3e2:	f7f6 ff1b 	bl	800121c <__aeabi_fsub>
 800a3e6:	1c03      	adds	r3, r0, #0
 800a3e8:	4918      	ldr	r1, [pc, #96]	@ (800a44c <GasIndexAlgorithm__mox_model__process+0x84>)
 800a3ea:	1c18      	adds	r0, r3, #0
 800a3ec:	f7f6 fbf2 	bl	8000bd4 <__aeabi_fdiv>
 800a3f0:	1c03      	adds	r3, r0, #0
 800a3f2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a3f8:	1c19      	adds	r1, r3, #0
 800a3fa:	1c10      	adds	r0, r2, #0
 800a3fc:	f7f6 fdd0 	bl	8000fa0 <__aeabi_fmul>
 800a400:	1c03      	adds	r3, r0, #0
 800a402:	e01f      	b.n	800a444 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a408:	1c19      	adds	r1, r3, #0
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	f7f6 ff06 	bl	800121c <__aeabi_fsub>
 800a410:	1c03      	adds	r3, r0, #0
 800a412:	1c1a      	adds	r2, r3, #0
 800a414:	2380      	movs	r3, #128	@ 0x80
 800a416:	061b      	lsls	r3, r3, #24
 800a418:	4053      	eors	r3, r2
 800a41a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a420:	490b      	ldr	r1, [pc, #44]	@ (800a450 <GasIndexAlgorithm__mox_model__process+0x88>)
 800a422:	1c18      	adds	r0, r3, #0
 800a424:	f7f6 fa4c 	bl	80008c0 <__aeabi_fadd>
 800a428:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a42a:	1c19      	adds	r1, r3, #0
 800a42c:	1c20      	adds	r0, r4, #0
 800a42e:	f7f6 fbd1 	bl	8000bd4 <__aeabi_fdiv>
 800a432:	1c03      	adds	r3, r0, #0
 800a434:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a43a:	1c19      	adds	r1, r3, #0
 800a43c:	1c10      	adds	r0, r2, #0
 800a43e:	f7f6 fdaf 	bl	8000fa0 <__aeabi_fmul>
 800a442:	1c03      	adds	r3, r0, #0
    }
}
 800a444:	1c18      	adds	r0, r3, #0
 800a446:	46bd      	mov	sp, r7
 800a448:	b003      	add	sp, #12
 800a44a:	bd90      	pop	{r4, r7, pc}
 800a44c:	44fa0000 	.word	0x44fa0000
 800a450:	435c0000 	.word	0x435c0000

0800a454 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a454:	b580      	push	{r7, lr}
 800a456:	b084      	sub	sp, #16
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2180      	movs	r1, #128	@ 0x80
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2184      	movs	r1, #132	@ 0x84
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2188      	movs	r1, #136	@ 0x88
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	505a      	str	r2, [r3, r1]
}
 800a47a:	46c0      	nop			@ (mov r8, r8)
 800a47c:	46bd      	mov	sp, r7
 800a47e:	b004      	add	sp, #16
 800a480:	bd80      	pop	{r7, pc}
	...

0800a484 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2280      	movs	r2, #128	@ 0x80
 800a492:	589c      	ldr	r4, [r3, r2]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2284      	movs	r2, #132	@ 0x84
 800a498:	589b      	ldr	r3, [r3, r2]
 800a49a:	1c19      	adds	r1, r3, #0
 800a49c:	6838      	ldr	r0, [r7, #0]
 800a49e:	f7f6 febd 	bl	800121c <__aeabi_fsub>
 800a4a2:	1c03      	adds	r3, r0, #0
 800a4a4:	1c19      	adds	r1, r3, #0
 800a4a6:	1c20      	adds	r0, r4, #0
 800a4a8:	f7f6 fd7a 	bl	8000fa0 <__aeabi_fmul>
 800a4ac:	1c03      	adds	r3, r0, #0
 800a4ae:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800a4b0:	4940      	ldr	r1, [pc, #256]	@ (800a5b4 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f7f6 f83c 	bl	8000530 <__aeabi_fcmplt>
 800a4b8:	1e03      	subs	r3, r0, #0
 800a4ba:	d001      	beq.n	800a4c0 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800a4bc:	4b3e      	ldr	r3, [pc, #248]	@ (800a5b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a4be:	e075      	b.n	800a5ac <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800a4c0:	493e      	ldr	r1, [pc, #248]	@ (800a5bc <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800a4c2:	68b8      	ldr	r0, [r7, #8]
 800a4c4:	f7f6 f848 	bl	8000558 <__aeabi_fcmpgt>
 800a4c8:	1e03      	subs	r3, r0, #0
 800a4ca:	d001      	beq.n	800a4d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e06d      	b.n	800a5ac <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6838      	ldr	r0, [r7, #0]
 800a4d4:	f7f6 f84a 	bl	800056c <__aeabi_fcmpge>
 800a4d8:	1e03      	subs	r3, r0, #0
 800a4da:	d047      	beq.n	800a56c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2288      	movs	r2, #136	@ 0x88
 800a4e0:	589b      	ldr	r3, [r3, r2]
 800a4e2:	21fe      	movs	r1, #254	@ 0xfe
 800a4e4:	0589      	lsls	r1, r1, #22
 800a4e6:	1c18      	adds	r0, r3, #0
 800a4e8:	f7f6 f81c 	bl	8000524 <__aeabi_fcmpeq>
 800a4ec:	1e03      	subs	r3, r0, #0
 800a4ee:	d00e      	beq.n	800a50e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	1c19      	adds	r1, r3, #0
 800a4f6:	20fe      	movs	r0, #254	@ 0xfe
 800a4f8:	0580      	lsls	r0, r0, #22
 800a4fa:	f7f6 fe8f 	bl	800121c <__aeabi_fsub>
 800a4fe:	1c03      	adds	r3, r0, #0
 800a500:	492f      	ldr	r1, [pc, #188]	@ (800a5c0 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800a502:	1c18      	adds	r0, r3, #0
 800a504:	f7f6 fd4c 	bl	8000fa0 <__aeabi_fmul>
 800a508:	1c03      	adds	r3, r0, #0
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	e012      	b.n	800a534 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	492c      	ldr	r1, [pc, #176]	@ (800a5c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800a514:	1c18      	adds	r0, r3, #0
 800a516:	f7f6 fd43 	bl	8000fa0 <__aeabi_fmul>
 800a51a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800a51c:	1c19      	adds	r1, r3, #0
 800a51e:	4826      	ldr	r0, [pc, #152]	@ (800a5b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a520:	f7f6 fe7c 	bl	800121c <__aeabi_fsub>
 800a524:	1c03      	adds	r3, r0, #0
 800a526:	2181      	movs	r1, #129	@ 0x81
 800a528:	05c9      	lsls	r1, r1, #23
 800a52a:	1c18      	adds	r0, r3, #0
 800a52c:	f7f6 fb52 	bl	8000bd4 <__aeabi_fdiv>
 800a530:	1c03      	adds	r3, r0, #0
 800a532:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a534:	4920      	ldr	r1, [pc, #128]	@ (800a5b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7f6 f9c2 	bl	80008c0 <__aeabi_fadd>
 800a53c:	1c03      	adds	r3, r0, #0
 800a53e:	1c1c      	adds	r4, r3, #0
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	1c18      	adds	r0, r3, #0
 800a544:	f017 fa5e 	bl	8021a04 <expf>
 800a548:	1c03      	adds	r3, r0, #0
 800a54a:	21fe      	movs	r1, #254	@ 0xfe
 800a54c:	0589      	lsls	r1, r1, #22
 800a54e:	1c18      	adds	r0, r3, #0
 800a550:	f7f6 f9b6 	bl	80008c0 <__aeabi_fadd>
 800a554:	1c03      	adds	r3, r0, #0
 800a556:	1c19      	adds	r1, r3, #0
 800a558:	1c20      	adds	r0, r4, #0
 800a55a:	f7f6 fb3b 	bl	8000bd4 <__aeabi_fdiv>
 800a55e:	1c03      	adds	r3, r0, #0
 800a560:	68f9      	ldr	r1, [r7, #12]
 800a562:	1c18      	adds	r0, r3, #0
 800a564:	f7f6 fe5a 	bl	800121c <__aeabi_fsub>
 800a568:	1c03      	adds	r3, r0, #0
 800a56a:	e01f      	b.n	800a5ac <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2188      	movs	r1, #136	@ 0x88
 800a574:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800a576:	1c19      	adds	r1, r3, #0
 800a578:	1c10      	adds	r0, r2, #0
 800a57a:	f7f6 fb2b 	bl	8000bd4 <__aeabi_fdiv>
 800a57e:	1c03      	adds	r3, r0, #0
 800a580:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	1c18      	adds	r0, r3, #0
 800a586:	f017 fa3d 	bl	8021a04 <expf>
 800a58a:	1c03      	adds	r3, r0, #0
 800a58c:	21fe      	movs	r1, #254	@ 0xfe
 800a58e:	0589      	lsls	r1, r1, #22
 800a590:	1c18      	adds	r0, r3, #0
 800a592:	f7f6 f995 	bl	80008c0 <__aeabi_fadd>
 800a596:	1c03      	adds	r3, r0, #0
 800a598:	1c19      	adds	r1, r3, #0
 800a59a:	4807      	ldr	r0, [pc, #28]	@ (800a5b8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a59c:	f7f6 fb1a 	bl	8000bd4 <__aeabi_fdiv>
 800a5a0:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a5a2:	1c19      	adds	r1, r3, #0
 800a5a4:	1c20      	adds	r0, r4, #0
 800a5a6:	f7f6 fcfb 	bl	8000fa0 <__aeabi_fmul>
 800a5aa:	1c03      	adds	r3, r0, #0
        }
    }
}
 800a5ac:	1c18      	adds	r0, r3, #0
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	b005      	add	sp, #20
 800a5b2:	bd90      	pop	{r4, r7, pc}
 800a5b4:	c2480000 	.word	0xc2480000
 800a5b8:	43fa0000 	.word	0x43fa0000
 800a5bc:	42480000 	.word	0x42480000
 800a5c0:	3f8041ab 	.word	0x3f8041ab
 800a5c4:	40a00000 	.word	0x40a00000

0800a5c8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a5c8:	b590      	push	{r4, r7, lr}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4913      	ldr	r1, [pc, #76]	@ (800a628 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800a5da:	1c18      	adds	r0, r3, #0
 800a5dc:	f7f6 f970 	bl	80008c0 <__aeabi_fadd>
 800a5e0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a5e2:	1c19      	adds	r1, r3, #0
 800a5e4:	1c20      	adds	r0, r4, #0
 800a5e6:	f7f6 faf5 	bl	8000bd4 <__aeabi_fdiv>
 800a5ea:	1c03      	adds	r3, r0, #0
 800a5ec:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	228c      	movs	r2, #140	@ 0x8c
 800a5f2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	490b      	ldr	r1, [pc, #44]	@ (800a62c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800a5fe:	1c18      	adds	r0, r3, #0
 800a600:	f7f6 f95e 	bl	80008c0 <__aeabi_fadd>
 800a604:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a606:	1c19      	adds	r1, r3, #0
 800a608:	1c20      	adds	r0, r4, #0
 800a60a:	f7f6 fae3 	bl	8000bd4 <__aeabi_fdiv>
 800a60e:	1c03      	adds	r3, r0, #0
 800a610:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2290      	movs	r2, #144	@ 0x90
 800a616:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2294      	movs	r2, #148	@ 0x94
 800a61c:	2100      	movs	r1, #0
 800a61e:	5499      	strb	r1, [r3, r2]
}
 800a620:	46c0      	nop			@ (mov r8, r8)
 800a622:	46bd      	mov	sp, r7
 800a624:	b003      	add	sp, #12
 800a626:	bd90      	pop	{r4, r7, pc}
 800a628:	41a00000 	.word	0x41a00000
 800a62c:	43fa0000 	.word	0x43fa0000

0800a630 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800a630:	b590      	push	{r4, r7, lr}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2294      	movs	r2, #148	@ 0x94
 800a63e:	5c9b      	ldrb	r3, [r3, r2]
 800a640:	2201      	movs	r2, #1
 800a642:	4053      	eors	r3, r2
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00f      	beq.n	800a66a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2198      	movs	r1, #152	@ 0x98
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	219c      	movs	r1, #156	@ 0x9c
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	21a0      	movs	r1, #160	@ 0xa0
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2294      	movs	r2, #148	@ 0x94
 800a666:	2101      	movs	r1, #1
 800a668:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	228c      	movs	r2, #140	@ 0x8c
 800a66e:	589b      	ldr	r3, [r3, r2]
 800a670:	1c19      	adds	r1, r3, #0
 800a672:	20fe      	movs	r0, #254	@ 0xfe
 800a674:	0580      	lsls	r0, r0, #22
 800a676:	f7f6 fdd1 	bl	800121c <__aeabi_fsub>
 800a67a:	1c03      	adds	r3, r0, #0
 800a67c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2298      	movs	r2, #152	@ 0x98
 800a682:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a684:	1c19      	adds	r1, r3, #0
 800a686:	f7f6 fc8b 	bl	8000fa0 <__aeabi_fmul>
 800a68a:	1c03      	adds	r3, r0, #0
 800a68c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	228c      	movs	r2, #140	@ 0x8c
 800a692:	589b      	ldr	r3, [r3, r2]
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	1c18      	adds	r0, r3, #0
 800a698:	f7f6 fc82 	bl	8000fa0 <__aeabi_fmul>
 800a69c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800a69e:	1c19      	adds	r1, r3, #0
 800a6a0:	1c20      	adds	r0, r4, #0
 800a6a2:	f7f6 f90d 	bl	80008c0 <__aeabi_fadd>
 800a6a6:	1c03      	adds	r3, r0, #0
 800a6a8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2298      	movs	r2, #152	@ 0x98
 800a6ae:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2290      	movs	r2, #144	@ 0x90
 800a6b4:	589b      	ldr	r3, [r3, r2]
 800a6b6:	1c19      	adds	r1, r3, #0
 800a6b8:	20fe      	movs	r0, #254	@ 0xfe
 800a6ba:	0580      	lsls	r0, r0, #22
 800a6bc:	f7f6 fdae 	bl	800121c <__aeabi_fsub>
 800a6c0:	1c03      	adds	r3, r0, #0
 800a6c2:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	229c      	movs	r2, #156	@ 0x9c
 800a6c8:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a6ca:	1c19      	adds	r1, r3, #0
 800a6cc:	f7f6 fc68 	bl	8000fa0 <__aeabi_fmul>
 800a6d0:	1c03      	adds	r3, r0, #0
 800a6d2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2290      	movs	r2, #144	@ 0x90
 800a6d8:	589b      	ldr	r3, [r3, r2]
 800a6da:	6839      	ldr	r1, [r7, #0]
 800a6dc:	1c18      	adds	r0, r3, #0
 800a6de:	f7f6 fc5f 	bl	8000fa0 <__aeabi_fmul>
 800a6e2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800a6e4:	1c19      	adds	r1, r3, #0
 800a6e6:	1c20      	adds	r0, r4, #0
 800a6e8:	f7f6 f8ea 	bl	80008c0 <__aeabi_fadd>
 800a6ec:	1c03      	adds	r3, r0, #0
 800a6ee:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	229c      	movs	r2, #156	@ 0x9c
 800a6f4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2298      	movs	r2, #152	@ 0x98
 800a6fa:	589a      	ldr	r2, [r3, r2]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	219c      	movs	r1, #156	@ 0x9c
 800a700:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800a702:	1c19      	adds	r1, r3, #0
 800a704:	1c10      	adds	r0, r2, #0
 800a706:	f7f6 fd89 	bl	800121c <__aeabi_fsub>
 800a70a:	1c03      	adds	r3, r0, #0
 800a70c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800a70e:	2100      	movs	r1, #0
 800a710:	6978      	ldr	r0, [r7, #20]
 800a712:	f7f5 ff0d 	bl	8000530 <__aeabi_fcmplt>
 800a716:	1e03      	subs	r3, r0, #0
 800a718:	d004      	beq.n	800a724 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2280      	movs	r2, #128	@ 0x80
 800a71e:	0612      	lsls	r2, r2, #24
 800a720:	4053      	eors	r3, r2
 800a722:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800a724:	4923      	ldr	r1, [pc, #140]	@ (800a7b4 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f7f6 fc3a 	bl	8000fa0 <__aeabi_fmul>
 800a72c:	1c03      	adds	r3, r0, #0
 800a72e:	1c18      	adds	r0, r3, #0
 800a730:	f017 f968 	bl	8021a04 <expf>
 800a734:	1c03      	adds	r3, r0, #0
 800a736:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800a738:	491f      	ldr	r1, [pc, #124]	@ (800a7b8 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f7f6 fc30 	bl	8000fa0 <__aeabi_fmul>
 800a740:	1c03      	adds	r3, r0, #0
 800a742:	491e      	ldr	r1, [pc, #120]	@ (800a7bc <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800a744:	1c18      	adds	r0, r3, #0
 800a746:	f7f6 f8bb 	bl	80008c0 <__aeabi_fadd>
 800a74a:	1c03      	adds	r3, r0, #0
 800a74c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685c      	ldr	r4, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	1c18      	adds	r0, r3, #0
 800a75a:	f7f6 f8b1 	bl	80008c0 <__aeabi_fadd>
 800a75e:	1c03      	adds	r3, r0, #0
 800a760:	1c19      	adds	r1, r3, #0
 800a762:	1c20      	adds	r0, r4, #0
 800a764:	f7f6 fa36 	bl	8000bd4 <__aeabi_fdiv>
 800a768:	1c03      	adds	r3, r0, #0
 800a76a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	20fe      	movs	r0, #254	@ 0xfe
 800a770:	0580      	lsls	r0, r0, #22
 800a772:	f7f6 fd53 	bl	800121c <__aeabi_fsub>
 800a776:	1c03      	adds	r3, r0, #0
 800a778:	1c18      	adds	r0, r3, #0
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	22a0      	movs	r2, #160	@ 0xa0
 800a77e:	589b      	ldr	r3, [r3, r2]
 800a780:	1c19      	adds	r1, r3, #0
 800a782:	f7f6 fc0d 	bl	8000fa0 <__aeabi_fmul>
 800a786:	1c03      	adds	r3, r0, #0
 800a788:	1c1c      	adds	r4, r3, #0
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	68b8      	ldr	r0, [r7, #8]
 800a78e:	f7f6 fc07 	bl	8000fa0 <__aeabi_fmul>
 800a792:	1c03      	adds	r3, r0, #0
 800a794:	1c19      	adds	r1, r3, #0
 800a796:	1c20      	adds	r0, r4, #0
 800a798:	f7f6 f892 	bl	80008c0 <__aeabi_fadd>
 800a79c:	1c03      	adds	r3, r0, #0
 800a79e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	22a0      	movs	r2, #160	@ 0xa0
 800a7a4:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	22a0      	movs	r2, #160	@ 0xa0
 800a7aa:	589b      	ldr	r3, [r3, r2]
}
 800a7ac:	1c18      	adds	r0, r3, #0
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b007      	add	sp, #28
 800a7b2:	bd90      	pop	{r4, r7, pc}
 800a7b4:	be4ccccd 	.word	0xbe4ccccd
 800a7b8:	43f00000 	.word	0x43f00000
 800a7bc:	41a00000 	.word	0x41a00000

0800a7c0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	000a      	movs	r2, r1
 800a7ca:	1cbb      	adds	r3, r7, #2
 800a7cc:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800a7ce:	230d      	movs	r3, #13
 800a7d0:	18fb      	adds	r3, r7, r3
 800a7d2:	22ff      	movs	r2, #255	@ 0xff
 800a7d4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a7d6:	230e      	movs	r3, #14
 800a7d8:	18fb      	adds	r3, r7, r3
 800a7da:	2200      	movs	r2, #0
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	e037      	b.n	800a850 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800a7e0:	230e      	movs	r3, #14
 800a7e2:	18fb      	adds	r3, r7, r3
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	18d3      	adds	r3, r2, r3
 800a7ea:	7819      	ldrb	r1, [r3, #0]
 800a7ec:	220d      	movs	r2, #13
 800a7ee:	18bb      	adds	r3, r7, r2
 800a7f0:	18ba      	adds	r2, r7, r2
 800a7f2:	7812      	ldrb	r2, [r2, #0]
 800a7f4:	404a      	eors	r2, r1
 800a7f6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a7f8:	230c      	movs	r3, #12
 800a7fa:	18fb      	adds	r3, r7, r3
 800a7fc:	2208      	movs	r2, #8
 800a7fe:	701a      	strb	r2, [r3, #0]
 800a800:	e01b      	b.n	800a83a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800a802:	210d      	movs	r1, #13
 800a804:	187b      	adds	r3, r7, r1
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	da09      	bge.n	800a822 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800a80e:	187b      	adds	r3, r7, r1
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	b25b      	sxtb	r3, r3
 800a816:	2231      	movs	r2, #49	@ 0x31
 800a818:	4053      	eors	r3, r2
 800a81a:	b25a      	sxtb	r2, r3
 800a81c:	187b      	adds	r3, r7, r1
 800a81e:	701a      	strb	r2, [r3, #0]
 800a820:	e005      	b.n	800a82e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800a822:	230d      	movs	r3, #13
 800a824:	18fa      	adds	r2, r7, r3
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	18db      	adds	r3, r3, r3
 800a82c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a82e:	220c      	movs	r2, #12
 800a830:	18bb      	adds	r3, r7, r2
 800a832:	18ba      	adds	r2, r7, r2
 800a834:	7812      	ldrb	r2, [r2, #0]
 800a836:	3a01      	subs	r2, #1
 800a838:	701a      	strb	r2, [r3, #0]
 800a83a:	230c      	movs	r3, #12
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1de      	bne.n	800a802 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a844:	220e      	movs	r2, #14
 800a846:	18bb      	adds	r3, r7, r2
 800a848:	18ba      	adds	r2, r7, r2
 800a84a:	8812      	ldrh	r2, [r2, #0]
 800a84c:	3201      	adds	r2, #1
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	230e      	movs	r3, #14
 800a852:	18fa      	adds	r2, r7, r3
 800a854:	1cbb      	adds	r3, r7, #2
 800a856:	8812      	ldrh	r2, [r2, #0]
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d3c0      	bcc.n	800a7e0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800a85e:	230d      	movs	r3, #13
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	781b      	ldrb	r3, [r3, #0]
}
 800a864:	0018      	movs	r0, r3
 800a866:	46bd      	mov	sp, r7
 800a868:	b004      	add	sp, #16
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	0008      	movs	r0, r1
 800a876:	0011      	movs	r1, r2
 800a878:	1cbb      	adds	r3, r7, #2
 800a87a:	1c02      	adds	r2, r0, #0
 800a87c:	801a      	strh	r2, [r3, #0]
 800a87e:	1c7b      	adds	r3, r7, #1
 800a880:	1c0a      	adds	r2, r1, #0
 800a882:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800a884:	1cbb      	adds	r3, r7, #2
 800a886:	881a      	ldrh	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	0011      	movs	r1, r2
 800a88c:	0018      	movs	r0, r3
 800a88e:	f7ff ff97 	bl	800a7c0 <sensirion_i2c_generate_crc>
 800a892:	0003      	movs	r3, r0
 800a894:	001a      	movs	r2, r3
 800a896:	1c7b      	adds	r3, r7, #1
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d001      	beq.n	800a8a2 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e000      	b.n	800a8a4 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	b002      	add	sp, #8
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	0008      	movs	r0, r1
 800a8b6:	0011      	movs	r1, r2
 800a8b8:	1cbb      	adds	r3, r7, #2
 800a8ba:	1c02      	adds	r2, r0, #0
 800a8bc:	801a      	strh	r2, [r3, #0]
 800a8be:	003b      	movs	r3, r7
 800a8c0:	1c0a      	adds	r2, r1, #0
 800a8c2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800a8c4:	003b      	movs	r3, r7
 800a8c6:	881b      	ldrh	r3, [r3, #0]
 800a8c8:	0a1b      	lsrs	r3, r3, #8
 800a8ca:	b299      	uxth	r1, r3
 800a8cc:	1cbb      	adds	r3, r7, #2
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	1cba      	adds	r2, r7, #2
 800a8d2:	1c58      	adds	r0, r3, #1
 800a8d4:	8010      	strh	r0, [r2, #0]
 800a8d6:	001a      	movs	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	189b      	adds	r3, r3, r2
 800a8dc:	b2ca      	uxtb	r2, r1
 800a8de:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800a8e0:	1cbb      	adds	r3, r7, #2
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	1cba      	adds	r2, r7, #2
 800a8e6:	1c59      	adds	r1, r3, #1
 800a8e8:	8011      	strh	r1, [r2, #0]
 800a8ea:	001a      	movs	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	189b      	adds	r3, r3, r2
 800a8f0:	003a      	movs	r2, r7
 800a8f2:	8812      	ldrh	r2, [r2, #0]
 800a8f4:	b2d2      	uxtb	r2, r2
 800a8f6:	701a      	strb	r2, [r3, #0]
    return offset;
 800a8f8:	1cbb      	adds	r3, r7, #2
 800a8fa:	881b      	ldrh	r3, [r3, #0]
}
 800a8fc:	0018      	movs	r0, r3
 800a8fe:	46bd      	mov	sp, r7
 800a900:	b002      	add	sp, #8
 800a902:	bd80      	pop	{r7, pc}

0800a904 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	0008      	movs	r0, r1
 800a90e:	0011      	movs	r1, r2
 800a910:	1cbb      	adds	r3, r7, #2
 800a912:	1c02      	adds	r2, r0, #0
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	003b      	movs	r3, r7
 800a918:	1c0a      	adds	r2, r1, #0
 800a91a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800a91c:	003b      	movs	r3, r7
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	0a1b      	lsrs	r3, r3, #8
 800a922:	b299      	uxth	r1, r3
 800a924:	1cbb      	adds	r3, r7, #2
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	1cba      	adds	r2, r7, #2
 800a92a:	1c58      	adds	r0, r3, #1
 800a92c:	8010      	strh	r0, [r2, #0]
 800a92e:	001a      	movs	r2, r3
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	189b      	adds	r3, r3, r2
 800a934:	b2ca      	uxtb	r2, r1
 800a936:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800a938:	1cbb      	adds	r3, r7, #2
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	1cba      	adds	r2, r7, #2
 800a93e:	1c59      	adds	r1, r3, #1
 800a940:	8011      	strh	r1, [r2, #0]
 800a942:	001a      	movs	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	189b      	adds	r3, r3, r2
 800a948:	003a      	movs	r2, r7
 800a94a:	8812      	ldrh	r2, [r2, #0]
 800a94c:	b2d2      	uxtb	r2, r2
 800a94e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800a950:	1cbb      	adds	r3, r7, #2
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	3b02      	subs	r3, #2
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800a95a:	1cbb      	adds	r3, r7, #2
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	18d4      	adds	r4, r2, r3
 800a962:	2102      	movs	r1, #2
 800a964:	f7ff ff2c 	bl	800a7c0 <sensirion_i2c_generate_crc>
 800a968:	0003      	movs	r3, r0
 800a96a:	7023      	strb	r3, [r4, #0]
    offset++;
 800a96c:	1cbb      	adds	r3, r7, #2
 800a96e:	881a      	ldrh	r2, [r3, #0]
 800a970:	1cbb      	adds	r3, r7, #2
 800a972:	3201      	adds	r2, #1
 800a974:	801a      	strh	r2, [r3, #0]

    return offset;
 800a976:	1cbb      	adds	r3, r7, #2
 800a978:	881b      	ldrh	r3, [r3, #0]
}
 800a97a:	0018      	movs	r0, r3
 800a97c:	46bd      	mov	sp, r7
 800a97e:	b003      	add	sp, #12
 800a980:	bd90      	pop	{r4, r7, pc}

0800a982 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	0008      	movs	r0, r1
 800a98c:	0011      	movs	r1, r2
 800a98e:	1cbb      	adds	r3, r7, #2
 800a990:	1c02      	adds	r2, r0, #0
 800a992:	801a      	strh	r2, [r3, #0]
 800a994:	003b      	movs	r3, r7
 800a996:	1c0a      	adds	r2, r1, #0
 800a998:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800a99a:	003b      	movs	r3, r7
 800a99c:	881a      	ldrh	r2, [r3, #0]
 800a99e:	1cbb      	adds	r3, r7, #2
 800a9a0:	8819      	ldrh	r1, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	0018      	movs	r0, r3
 800a9a6:	f7ff ffad 	bl	800a904 <sensirion_i2c_add_uint16_t_to_buffer>
 800a9aa:	0003      	movs	r3, r0
}
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	b002      	add	sp, #8
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6039      	str	r1, [r7, #0]
 800a9bc:	0011      	movs	r1, r2
 800a9be:	1dfb      	adds	r3, r7, #7
 800a9c0:	1c02      	adds	r2, r0, #0
 800a9c2:	701a      	strb	r2, [r3, #0]
 800a9c4:	1d3b      	adds	r3, r7, #4
 800a9c6:	1c0a      	adds	r2, r1, #0
 800a9c8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800a9ca:	1d3b      	adds	r3, r7, #4
 800a9cc:	881a      	ldrh	r2, [r3, #0]
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	1dfb      	adds	r3, r7, #7
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f7fe fa57 	bl	8008e88 <sensirion_i2c_hal_write>
 800a9da:	0003      	movs	r3, r0
}
 800a9dc:	0018      	movs	r0, r3
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	b002      	add	sp, #8
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800a9e4:	b5b0      	push	{r4, r5, r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6039      	str	r1, [r7, #0]
 800a9ec:	0011      	movs	r1, r2
 800a9ee:	1dfb      	adds	r3, r7, #7
 800a9f0:	1c02      	adds	r2, r0, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	1d3b      	adds	r3, r7, #4
 800a9f6:	1c0a      	adds	r2, r1, #0
 800a9f8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800a9fa:	1d3b      	adds	r3, r7, #4
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	220a      	movs	r2, #10
 800aa04:	18ba      	adds	r2, r7, r2
 800aa06:	1c19      	adds	r1, r3, #0
 800aa08:	1c0b      	adds	r3, r1, #0
 800aa0a:	18db      	adds	r3, r3, r3
 800aa0c:	185b      	adds	r3, r3, r1
 800aa0e:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800aa10:	1d3b      	adds	r3, r7, #4
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	2201      	movs	r2, #1
 800aa16:	4013      	ands	r3, r2
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800aa1e:	2304      	movs	r3, #4
 800aa20:	e06b      	b.n	800aafa <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800aa22:	230a      	movs	r3, #10
 800aa24:	18fb      	adds	r3, r7, r3
 800aa26:	881a      	ldrh	r2, [r3, #0]
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	1dfb      	adds	r3, r7, #7
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f7fe fa0a 	bl	8008e48 <sensirion_i2c_hal_read>
 800aa34:	0003      	movs	r3, r0
 800aa36:	001a      	movs	r2, r3
 800aa38:	2108      	movs	r1, #8
 800aa3a:	187b      	adds	r3, r7, r1
 800aa3c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800aa3e:	000a      	movs	r2, r1
 800aa40:	18bb      	adds	r3, r7, r2
 800aa42:	2100      	movs	r1, #0
 800aa44:	5e5b      	ldrsh	r3, [r3, r1]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800aa4a:	18bb      	adds	r3, r7, r2
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	5e9b      	ldrsh	r3, [r3, r2]
 800aa50:	e053      	b.n	800aafa <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800aa52:	230e      	movs	r3, #14
 800aa54:	18fb      	adds	r3, r7, r3
 800aa56:	2200      	movs	r2, #0
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	230c      	movs	r3, #12
 800aa5c:	18fb      	adds	r3, r7, r3
 800aa5e:	2200      	movs	r2, #0
 800aa60:	801a      	strh	r2, [r3, #0]
 800aa62:	e041      	b.n	800aae8 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800aa64:	210e      	movs	r1, #14
 800aa66:	187b      	adds	r3, r7, r1
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800aa6e:	187b      	adds	r3, r7, r1
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	3302      	adds	r3, #2
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	001a      	movs	r2, r3
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	f7ff fef5 	bl	800a86c <sensirion_i2c_check_crc>
 800aa82:	0003      	movs	r3, r0
 800aa84:	001a      	movs	r2, r3
 800aa86:	2108      	movs	r1, #8
 800aa88:	187b      	adds	r3, r7, r1
 800aa8a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800aa8c:	000a      	movs	r2, r1
 800aa8e:	18bb      	adds	r3, r7, r2
 800aa90:	2100      	movs	r1, #0
 800aa92:	5e5b      	ldrsh	r3, [r3, r1]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800aa98:	18bb      	adds	r3, r7, r2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	5e9b      	ldrsh	r3, [r3, r2]
 800aa9e:	e02c      	b.n	800aafa <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800aaa0:	240e      	movs	r4, #14
 800aaa2:	193b      	adds	r3, r7, r4
 800aaa4:	881b      	ldrh	r3, [r3, #0]
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	18d2      	adds	r2, r2, r3
 800aaaa:	250c      	movs	r5, #12
 800aaac:	197b      	adds	r3, r7, r5
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	1979      	adds	r1, r7, r5
 800aab2:	1c58      	adds	r0, r3, #1
 800aab4:	8008      	strh	r0, [r1, #0]
 800aab6:	0019      	movs	r1, r3
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	185b      	adds	r3, r3, r1
 800aabc:	7812      	ldrb	r2, [r2, #0]
 800aabe:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800aac0:	193b      	adds	r3, r7, r4
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	3301      	adds	r3, #1
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	18d2      	adds	r2, r2, r3
 800aaca:	197b      	adds	r3, r7, r5
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	1979      	adds	r1, r7, r5
 800aad0:	1c58      	adds	r0, r3, #1
 800aad2:	8008      	strh	r0, [r1, #0]
 800aad4:	0019      	movs	r1, r3
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	185b      	adds	r3, r3, r1
 800aada:	7812      	ldrb	r2, [r2, #0]
 800aadc:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800aade:	193b      	adds	r3, r7, r4
 800aae0:	193a      	adds	r2, r7, r4
 800aae2:	8812      	ldrh	r2, [r2, #0]
 800aae4:	3203      	adds	r2, #3
 800aae6:	801a      	strh	r2, [r3, #0]
 800aae8:	230e      	movs	r3, #14
 800aaea:	18fa      	adds	r2, r7, r3
 800aaec:	230a      	movs	r3, #10
 800aaee:	18fb      	adds	r3, r7, r3
 800aaf0:	8812      	ldrh	r2, [r2, #0]
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d3b5      	bcc.n	800aa64 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	0018      	movs	r0, r3
 800aafc:	46bd      	mov	sp, r7
 800aafe:	b004      	add	sp, #16
 800ab00:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ab04 <ReadRegister>:

void forceVOCstart(void) {
  SGP_MeasurementDutyCycle = HAL_GetTick() + 500;
}

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ab04:	b590      	push	{r4, r7, lr}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6039      	str	r1, [r7, #0]
 800ab0c:	0011      	movs	r1, r2
 800ab0e:	1dfb      	adds	r3, r7, #7
 800ab10:	1c02      	adds	r2, r0, #0
 800ab12:	701a      	strb	r2, [r3, #0]
 800ab14:	1dbb      	adds	r3, r7, #6
 800ab16:	1c0a      	adds	r2, r1, #0
 800ab18:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800ab1a:	4b08      	ldr	r3, [pc, #32]	@ (800ab3c <ReadRegister+0x38>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d008      	beq.n	800ab34 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800ab22:	4b06      	ldr	r3, [pc, #24]	@ (800ab3c <ReadRegister+0x38>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	1dba      	adds	r2, r7, #6
 800ab28:	7814      	ldrb	r4, [r2, #0]
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	1dfa      	adds	r2, r7, #7
 800ab2e:	7810      	ldrb	r0, [r2, #0]
 800ab30:	0022      	movs	r2, r4
 800ab32:	4798      	blx	r3
  }
}
 800ab34:	46c0      	nop			@ (mov r8, r8)
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b003      	add	sp, #12
 800ab3a:	bd90      	pop	{r4, r7, pc}
 800ab3c:	200011fc 	.word	0x200011fc

0800ab40 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ab40:	b590      	push	{r4, r7, lr}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6039      	str	r1, [r7, #0]
 800ab48:	0011      	movs	r1, r2
 800ab4a:	1dfb      	adds	r3, r7, #7
 800ab4c:	1c02      	adds	r2, r0, #0
 800ab4e:	701a      	strb	r2, [r3, #0]
 800ab50:	1dbb      	adds	r3, r7, #6
 800ab52:	1c0a      	adds	r2, r1, #0
 800ab54:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ab56:	4b08      	ldr	r3, [pc, #32]	@ (800ab78 <WriteRegister+0x38>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d008      	beq.n	800ab70 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800ab5e:	4b06      	ldr	r3, [pc, #24]	@ (800ab78 <WriteRegister+0x38>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	1dba      	adds	r2, r7, #6
 800ab64:	7814      	ldrb	r4, [r2, #0]
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	1dfa      	adds	r2, r7, #7
 800ab6a:	7810      	ldrb	r0, [r2, #0]
 800ab6c:	0022      	movs	r2, r4
 800ab6e:	4798      	blx	r3
  }
}
 800ab70:	46c0      	nop			@ (mov r8, r8)
 800ab72:	46bd      	mov	sp, r7
 800ab74:	b003      	add	sp, #12
 800ab76:	bd90      	pop	{r4, r7, pc}
 800ab78:	20001200 	.word	0x20001200

0800ab7c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800ab86:	4b07      	ldr	r3, [pc, #28]	@ (800aba4 <SGP_Init+0x28>)
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800ab8c:	4b06      	ldr	r3, [pc, #24]	@ (800aba8 <SGP_Init+0x2c>)
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800ab92:	4b06      	ldr	r3, [pc, #24]	@ (800abac <SGP_Init+0x30>)
 800ab94:	2100      	movs	r1, #0
 800ab96:	0018      	movs	r0, r3
 800ab98:	f7fe ff8e 	bl	8009ab8 <GasIndexAlgorithm_init>
}
 800ab9c:	46c0      	nop			@ (mov r8, r8)
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	b002      	add	sp, #8
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	200011fc 	.word	0x200011fc
 800aba8:	20001200 	.word	0x20001200
 800abac:	20001210 	.word	0x20001210

0800abb0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800abb4:	4b13      	ldr	r3, [pc, #76]	@ (800ac04 <SGP_StartMeasurement+0x54>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00d      	beq.n	800abd8 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800abbc:	4b12      	ldr	r3, [pc, #72]	@ (800ac08 <SGP_StartMeasurement+0x58>)
 800abbe:	2208      	movs	r2, #8
 800abc0:	0019      	movs	r1, r3
 800abc2:	2059      	movs	r0, #89	@ 0x59
 800abc4:	f7ff ffbc 	bl	800ab40 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800abc8:	f002 fc6e 	bl	800d4a8 <GetCurrentHalTicks>
 800abcc:	0003      	movs	r3, r0
 800abce:	331e      	adds	r3, #30
 800abd0:	001a      	movs	r2, r3
 800abd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ac0c <SGP_StartMeasurement+0x5c>)
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e00c      	b.n	800abf2 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800abd8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac10 <SGP_StartMeasurement+0x60>)
 800abda:	2208      	movs	r2, #8
 800abdc:	0019      	movs	r1, r3
 800abde:	2059      	movs	r0, #89	@ 0x59
 800abe0:	f7ff ffae 	bl	800ab40 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800abe4:	f002 fc60 	bl	800d4a8 <GetCurrentHalTicks>
 800abe8:	0003      	movs	r3, r0
 800abea:	33aa      	adds	r3, #170	@ 0xaa
 800abec:	001a      	movs	r2, r3
 800abee:	4b09      	ldr	r3, [pc, #36]	@ (800ac14 <SGP_StartMeasurement+0x64>)
 800abf0:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800abf2:	4b09      	ldr	r3, [pc, #36]	@ (800ac18 <SGP_StartMeasurement+0x68>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800abf8:	4b08      	ldr	r3, [pc, #32]	@ (800ac1c <SGP_StartMeasurement+0x6c>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
}
 800abfe:	46c0      	nop			@ (mov r8, r8)
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	200012b8 	.word	0x200012b8
 800ac08:	20000094 	.word	0x20000094
 800ac0c:	200000a8 	.word	0x200000a8
 800ac10:	2000008c 	.word	0x2000008c
 800ac14:	200000a0 	.word	0x200000a0
 800ac18:	2000120e 	.word	0x2000120e
 800ac1c:	2000120f 	.word	0x2000120f

0800ac20 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	4b04      	ldr	r3, [pc, #16]	@ (800ac38 <SGP_HeatedUp+0x18>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	0018      	movs	r0, r3
 800ac2a:	f002 fb6d 	bl	800d308 <TimestampIsReached>
 800ac2e:	0003      	movs	r3, r0
 800ac30:	0018      	movs	r0, r3
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	46c0      	nop			@ (mov r8, r8)
 800ac38:	200000a0 	.word	0x200000a0

0800ac3c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800ac40:	4b04      	ldr	r3, [pc, #16]	@ (800ac54 <SGP_MeasurementReady+0x18>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	0018      	movs	r0, r3
 800ac46:	f002 fb5f 	bl	800d308 <TimestampIsReached>
 800ac4a:	0003      	movs	r3, r0
}
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	46c0      	nop			@ (mov r8, r8)
 800ac54:	200000a8 	.word	0x200000a8

0800ac58 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <SGP_MeasurementDone+0x18>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	0018      	movs	r0, r3
 800ac62:	f002 fb51 	bl	800d308 <TimestampIsReached>
 800ac66:	0003      	movs	r3, r0
}
 800ac68:	0018      	movs	r0, r3
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	46c0      	nop			@ (mov r8, r8)
 800ac70:	200000a4 	.word	0x200000a4

0800ac74 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800ac78:	4b04      	ldr	r3, [pc, #16]	@ (800ac8c <SGP_TurnHeaterOff+0x18>)
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	0019      	movs	r1, r3
 800ac7e:	2059      	movs	r0, #89	@ 0x59
 800ac80:	f7ff ff5e 	bl	800ab40 <WriteRegister>
}
 800ac84:	46c0      	nop			@ (mov r8, r8)
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	46c0      	nop			@ (mov r8, r8)
 800ac8c:	20000084 	.word	0x20000084

0800ac90 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800ac90:	b5b0      	push	{r4, r5, r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800ac98:	f7ff ffc2 	bl	800ac20 <SGP_HeatedUp>
 800ac9c:	1e03      	subs	r3, r0, #0
 800ac9e:	d038      	beq.n	800ad12 <SGP_GetMeasurementValues+0x82>
 800aca0:	4bd2      	ldr	r3, [pc, #840]	@ (800afec <SGP_GetMeasurementValues+0x35c>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2201      	movs	r2, #1
 800aca6:	4053      	eors	r3, r2
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d031      	beq.n	800ad12 <SGP_GetMeasurementValues+0x82>
 800acae:	4bd0      	ldr	r3, [pc, #832]	@ (800aff0 <SGP_GetMeasurementValues+0x360>)
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	2201      	movs	r2, #1
 800acb4:	4053      	eors	r3, r2
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d02a      	beq.n	800ad12 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up");
 800acbc:	4acd      	ldr	r2, [pc, #820]	@ (800aff4 <SGP_GetMeasurementValues+0x364>)
 800acbe:	4bce      	ldr	r3, [pc, #824]	@ (800aff8 <SGP_GetMeasurementValues+0x368>)
 800acc0:	0019      	movs	r1, r3
 800acc2:	2003      	movs	r0, #3
 800acc4:	f002 fb76 	bl	800d3b4 <CreateLine>
    HeatUpIsDone = true;
 800acc8:	4bc8      	ldr	r3, [pc, #800]	@ (800afec <SGP_GetMeasurementValues+0x35c>)
 800acca:	2201      	movs	r2, #1
 800accc:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800acce:	4bcb      	ldr	r3, [pc, #812]	@ (800affc <SGP_GetMeasurementValues+0x36c>)
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00d      	beq.n	800acf2 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800acd6:	4bca      	ldr	r3, [pc, #808]	@ (800b000 <SGP_GetMeasurementValues+0x370>)
 800acd8:	2208      	movs	r2, #8
 800acda:	0019      	movs	r1, r3
 800acdc:	2059      	movs	r0, #89	@ 0x59
 800acde:	f7ff ff2f 	bl	800ab40 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800ace2:	f002 fbe1 	bl	800d4a8 <GetCurrentHalTicks>
 800ace6:	0003      	movs	r3, r0
 800ace8:	331e      	adds	r3, #30
 800acea:	001a      	movs	r2, r3
 800acec:	4bc5      	ldr	r3, [pc, #788]	@ (800b004 <SGP_GetMeasurementValues+0x374>)
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e00c      	b.n	800ad0c <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800acf2:	4bc5      	ldr	r3, [pc, #788]	@ (800b008 <SGP_GetMeasurementValues+0x378>)
 800acf4:	2208      	movs	r2, #8
 800acf6:	0019      	movs	r1, r3
 800acf8:	2059      	movs	r0, #89	@ 0x59
 800acfa:	f7ff ff21 	bl	800ab40 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800acfe:	f002 fbd3 	bl	800d4a8 <GetCurrentHalTicks>
 800ad02:	0003      	movs	r3, r0
 800ad04:	331e      	adds	r3, #30
 800ad06:	001a      	movs	r2, r3
 800ad08:	4bbe      	ldr	r3, [pc, #760]	@ (800b004 <SGP_GetMeasurementValues+0x374>)
 800ad0a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800ad0c:	4bb8      	ldr	r3, [pc, #736]	@ (800aff0 <SGP_GetMeasurementValues+0x360>)
 800ad0e:	2201      	movs	r2, #1
 800ad10:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800ad12:	4bb6      	ldr	r3, [pc, #728]	@ (800afec <SGP_GetMeasurementValues+0x35c>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d100      	bne.n	800ad1c <SGP_GetMeasurementValues+0x8c>
 800ad1a:	e1a1      	b.n	800b060 <SGP_GetMeasurementValues+0x3d0>
 800ad1c:	f7ff ff8e 	bl	800ac3c <SGP_MeasurementReady>
 800ad20:	1e03      	subs	r3, r0, #0
 800ad22:	d100      	bne.n	800ad26 <SGP_GetMeasurementValues+0x96>
 800ad24:	e19c      	b.n	800b060 <SGP_GetMeasurementValues+0x3d0>
 800ad26:	4bb9      	ldr	r3, [pc, #740]	@ (800b00c <SGP_GetMeasurementValues+0x37c>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	4053      	eors	r3, r2
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d100      	bne.n	800ad36 <SGP_GetMeasurementValues+0xa6>
 800ad34:	e194      	b.n	800b060 <SGP_GetMeasurementValues+0x3d0>
    Debug("SGP sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
 800ad36:	4bb6      	ldr	r3, [pc, #728]	@ (800b010 <SGP_GetMeasurementValues+0x380>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	4ab5      	ldr	r2, [pc, #724]	@ (800b014 <SGP_GetMeasurementValues+0x384>)
 800ad3e:	49ae      	ldr	r1, [pc, #696]	@ (800aff8 <SGP_GetMeasurementValues+0x368>)
 800ad40:	2003      	movs	r0, #3
 800ad42:	f002 fb37 	bl	800d3b4 <CreateLine>
    MeasurementIsReady = true;
 800ad46:	4bb1      	ldr	r3, [pc, #708]	@ (800b00c <SGP_GetMeasurementValues+0x37c>)
 800ad48:	2201      	movs	r2, #1
 800ad4a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800ad4c:	4bb2      	ldr	r3, [pc, #712]	@ (800b018 <SGP_GetMeasurementValues+0x388>)
 800ad4e:	2203      	movs	r2, #3
 800ad50:	0019      	movs	r1, r3
 800ad52:	2059      	movs	r0, #89	@ 0x59
 800ad54:	f7ff fed6 	bl	800ab04 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800ad58:	4baf      	ldr	r3, [pc, #700]	@ (800b018 <SGP_GetMeasurementValues+0x388>)
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	2103      	movs	r1, #3
 800ad5e:	0018      	movs	r0, r3
 800ad60:	f000 f9e4 	bl	800b12c <CheckCRC>
 800ad64:	0003      	movs	r3, r0
 800ad66:	001a      	movs	r2, r3
 800ad68:	2301      	movs	r3, #1
 800ad6a:	4053      	eors	r3, r2
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d02a      	beq.n	800adc8 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800ad72:	4aaa      	ldr	r2, [pc, #680]	@ (800b01c <SGP_GetMeasurementValues+0x38c>)
 800ad74:	4baa      	ldr	r3, [pc, #680]	@ (800b020 <SGP_GetMeasurementValues+0x390>)
 800ad76:	0019      	movs	r1, r3
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f002 fb1b 	bl	800d3b4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800ad7e:	4aa9      	ldr	r2, [pc, #676]	@ (800b024 <SGP_GetMeasurementValues+0x394>)
 800ad80:	4ba9      	ldr	r3, [pc, #676]	@ (800b028 <SGP_GetMeasurementValues+0x398>)
 800ad82:	0019      	movs	r1, r3
 800ad84:	2002      	movs	r0, #2
 800ad86:	f002 fb15 	bl	800d3b4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ad8a:	230f      	movs	r3, #15
 800ad8c:	18fb      	adds	r3, r7, r3
 800ad8e:	2200      	movs	r2, #0
 800ad90:	701a      	strb	r2, [r3, #0]
 800ad92:	e012      	b.n	800adba <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ad94:	240f      	movs	r4, #15
 800ad96:	193b      	adds	r3, r7, r4
 800ad98:	7818      	ldrb	r0, [r3, #0]
 800ad9a:	193b      	adds	r3, r7, r4
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	4a9e      	ldr	r2, [pc, #632]	@ (800b018 <SGP_GetMeasurementValues+0x388>)
 800ada0:	5cd3      	ldrb	r3, [r2, r3]
 800ada2:	4aa2      	ldr	r2, [pc, #648]	@ (800b02c <SGP_GetMeasurementValues+0x39c>)
 800ada4:	4994      	ldr	r1, [pc, #592]	@ (800aff8 <SGP_GetMeasurementValues+0x368>)
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	0003      	movs	r3, r0
 800adaa:	2003      	movs	r0, #3
 800adac:	f002 fb02 	bl	800d3b4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800adb0:	193b      	adds	r3, r7, r4
 800adb2:	781a      	ldrb	r2, [r3, #0]
 800adb4:	193b      	adds	r3, r7, r4
 800adb6:	3201      	adds	r2, #1
 800adb8:	701a      	strb	r2, [r3, #0]
 800adba:	230f      	movs	r3, #15
 800adbc:	18fb      	adds	r3, r7, r3
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d9e7      	bls.n	800ad94 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800adc4:	2300      	movs	r3, #0
 800adc6:	e163      	b.n	800b090 <SGP_GetMeasurementValues+0x400>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800adc8:	f002 fb6e 	bl	800d4a8 <GetCurrentHalTicks>
 800adcc:	0003      	movs	r3, r0
 800adce:	22fa      	movs	r2, #250	@ 0xfa
 800add0:	0092      	lsls	r2, r2, #2
 800add2:	189a      	adds	r2, r3, r2
 800add4:	4b96      	ldr	r3, [pc, #600]	@ (800b030 <SGP_GetMeasurementValues+0x3a0>)
 800add6:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800add8:	f7ff ff4c 	bl	800ac74 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800addc:	4b8c      	ldr	r3, [pc, #560]	@ (800b010 <SGP_GetMeasurementValues+0x380>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	3301      	adds	r3, #1
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	4b8a      	ldr	r3, [pc, #552]	@ (800b010 <SGP_GetMeasurementValues+0x380>)
 800ade6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800ade8:	4b89      	ldr	r3, [pc, #548]	@ (800b010 <SGP_GetMeasurementValues+0x380>)
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	4b91      	ldr	r3, [pc, #580]	@ (800b034 <SGP_GetMeasurementValues+0x3a4>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d200      	bcs.n	800adf6 <SGP_GetMeasurementValues+0x166>
 800adf4:	e134      	b.n	800b060 <SGP_GetMeasurementValues+0x3d0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800adf6:	4b88      	ldr	r3, [pc, #544]	@ (800b018 <SGP_GetMeasurementValues+0x388>)
 800adf8:	785b      	ldrb	r3, [r3, #1]
 800adfa:	021b      	lsls	r3, r3, #8
 800adfc:	b21a      	sxth	r2, r3
 800adfe:	4b86      	ldr	r3, [pc, #536]	@ (800b018 <SGP_GetMeasurementValues+0x388>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	b21b      	sxth	r3, r3
 800ae04:	4313      	orrs	r3, r2
 800ae06:	b21a      	sxth	r2, r3
 800ae08:	240c      	movs	r4, #12
 800ae0a:	193b      	adds	r3, r7, r4
 800ae0c:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800ae0e:	193b      	adds	r3, r7, r4
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	4a89      	ldr	r2, [pc, #548]	@ (800b038 <SGP_GetMeasurementValues+0x3a8>)
 800ae14:	4978      	ldr	r1, [pc, #480]	@ (800aff8 <SGP_GetMeasurementValues+0x368>)
 800ae16:	2003      	movs	r0, #3
 800ae18:	f002 facc 	bl	800d3b4 <CreateLine>
      int32_t tempVocIndex = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800ae20:	193b      	adds	r3, r7, r4
 800ae22:	8819      	ldrh	r1, [r3, #0]
 800ae24:	2308      	movs	r3, #8
 800ae26:	18fa      	adds	r2, r7, r3
 800ae28:	4b84      	ldr	r3, [pc, #528]	@ (800b03c <SGP_GetMeasurementValues+0x3ac>)
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	f7fe fea6 	bl	8009b7c <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4a83      	ldr	r2, [pc, #524]	@ (800b040 <SGP_GetMeasurementValues+0x3b0>)
 800ae34:	4970      	ldr	r1, [pc, #448]	@ (800aff8 <SGP_GetMeasurementValues+0x368>)
 800ae36:	2003      	movs	r0, #3
 800ae38:	f002 fabc 	bl	800d3b4 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	dd5a      	ble.n	800af00 <SGP_GetMeasurementValues+0x270>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b64      	cmp	r3, #100	@ 0x64
 800ae50:	dc56      	bgt.n	800af00 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	0018      	movs	r0, r3
 800ae58:	f7f8 fab2 	bl	80033c0 <__aeabi_i2d>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	4b79      	ldr	r3, [pc, #484]	@ (800b044 <SGP_GetMeasurementValues+0x3b4>)
 800ae60:	f7f6 ffa8 	bl	8001db4 <__aeabi_ddiv>
 800ae64:	0002      	movs	r2, r0
 800ae66:	000b      	movs	r3, r1
 800ae68:	2000      	movs	r0, #0
 800ae6a:	4977      	ldr	r1, [pc, #476]	@ (800b048 <SGP_GetMeasurementValues+0x3b8>)
 800ae6c:	f7f7 feae 	bl	8002bcc <__aeabi_dsub>
 800ae70:	0002      	movs	r2, r0
 800ae72:	000b      	movs	r3, r1
 800ae74:	0014      	movs	r4, r2
 800ae76:	001d      	movs	r5, r3
 800ae78:	4b74      	ldr	r3, [pc, #464]	@ (800b04c <SGP_GetMeasurementValues+0x3bc>)
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	0018      	movs	r0, r3
 800ae7e:	f7f8 fa9f 	bl	80033c0 <__aeabi_i2d>
 800ae82:	0002      	movs	r2, r0
 800ae84:	000b      	movs	r3, r1
 800ae86:	0020      	movs	r0, r4
 800ae88:	0029      	movs	r1, r5
 800ae8a:	f7f7 fbd7 	bl	800263c <__aeabi_dmul>
 800ae8e:	0002      	movs	r2, r0
 800ae90:	000b      	movs	r3, r1
 800ae92:	0010      	movs	r0, r2
 800ae94:	0019      	movs	r1, r3
 800ae96:	f7f5 fbd9 	bl	800064c <__aeabi_d2uiz>
 800ae9a:	0003      	movs	r3, r0
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	4b6c      	ldr	r3, [pc, #432]	@ (800b050 <SGP_GetMeasurementValues+0x3c0>)
 800aea0:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	0018      	movs	r0, r3
 800aea8:	f7f8 fa8a 	bl	80033c0 <__aeabi_i2d>
 800aeac:	2200      	movs	r2, #0
 800aeae:	4b65      	ldr	r3, [pc, #404]	@ (800b044 <SGP_GetMeasurementValues+0x3b4>)
 800aeb0:	f7f6 ff80 	bl	8001db4 <__aeabi_ddiv>
 800aeb4:	0002      	movs	r2, r0
 800aeb6:	000b      	movs	r3, r1
 800aeb8:	0014      	movs	r4, r2
 800aeba:	001d      	movs	r5, r3
 800aebc:	4b63      	ldr	r3, [pc, #396]	@ (800b04c <SGP_GetMeasurementValues+0x3bc>)
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	0018      	movs	r0, r3
 800aec2:	f7f8 fa7d 	bl	80033c0 <__aeabi_i2d>
 800aec6:	0002      	movs	r2, r0
 800aec8:	000b      	movs	r3, r1
 800aeca:	0020      	movs	r0, r4
 800aecc:	0029      	movs	r1, r5
 800aece:	f7f7 fbb5 	bl	800263c <__aeabi_dmul>
 800aed2:	0002      	movs	r2, r0
 800aed4:	000b      	movs	r3, r1
 800aed6:	0010      	movs	r0, r2
 800aed8:	0019      	movs	r1, r3
 800aeda:	f7f5 fbb7 	bl	800064c <__aeabi_d2uiz>
 800aede:	0003      	movs	r3, r0
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	4b5c      	ldr	r3, [pc, #368]	@ (800b054 <SGP_GetMeasurementValues+0x3c4>)
 800aee4:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800aee6:	4b59      	ldr	r3, [pc, #356]	@ (800b04c <SGP_GetMeasurementValues+0x3bc>)
 800aee8:	881a      	ldrh	r2, [r3, #0]
 800aeea:	4b5b      	ldr	r3, [pc, #364]	@ (800b058 <SGP_GetMeasurementValues+0x3c8>)
 800aeec:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800aeee:	4b5a      	ldr	r3, [pc, #360]	@ (800b058 <SGP_GetMeasurementValues+0x3c8>)
 800aef0:	8818      	ldrh	r0, [r3, #0]
 800aef2:	4b57      	ldr	r3, [pc, #348]	@ (800b050 <SGP_GetMeasurementValues+0x3c0>)
 800aef4:	8819      	ldrh	r1, [r3, #0]
 800aef6:	4b57      	ldr	r3, [pc, #348]	@ (800b054 <SGP_GetMeasurementValues+0x3c4>)
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	001a      	movs	r2, r3
 800aefc:	f001 fb2e 	bl	800c55c <SetVocLED>
      }
      if(*vocIndex > 100){
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b64      	cmp	r3, #100	@ 0x64
 800af06:	dd66      	ble.n	800afd6 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	0018      	movs	r0, r3
 800af0e:	f7f8 fa57 	bl	80033c0 <__aeabi_i2d>
 800af12:	2200      	movs	r2, #0
 800af14:	4b4b      	ldr	r3, [pc, #300]	@ (800b044 <SGP_GetMeasurementValues+0x3b4>)
 800af16:	f7f7 fe59 	bl	8002bcc <__aeabi_dsub>
 800af1a:	0002      	movs	r2, r0
 800af1c:	000b      	movs	r3, r1
 800af1e:	0010      	movs	r0, r2
 800af20:	0019      	movs	r1, r3
 800af22:	2200      	movs	r2, #0
 800af24:	4b4d      	ldr	r3, [pc, #308]	@ (800b05c <SGP_GetMeasurementValues+0x3cc>)
 800af26:	f7f6 ff45 	bl	8001db4 <__aeabi_ddiv>
 800af2a:	0002      	movs	r2, r0
 800af2c:	000b      	movs	r3, r1
 800af2e:	0014      	movs	r4, r2
 800af30:	001d      	movs	r5, r3
 800af32:	4b46      	ldr	r3, [pc, #280]	@ (800b04c <SGP_GetMeasurementValues+0x3bc>)
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	0018      	movs	r0, r3
 800af38:	f7f8 fa42 	bl	80033c0 <__aeabi_i2d>
 800af3c:	0002      	movs	r2, r0
 800af3e:	000b      	movs	r3, r1
 800af40:	0020      	movs	r0, r4
 800af42:	0029      	movs	r1, r5
 800af44:	f7f7 fb7a 	bl	800263c <__aeabi_dmul>
 800af48:	0002      	movs	r2, r0
 800af4a:	000b      	movs	r3, r1
 800af4c:	0010      	movs	r0, r2
 800af4e:	0019      	movs	r1, r3
 800af50:	f7f5 fb7c 	bl	800064c <__aeabi_d2uiz>
 800af54:	0003      	movs	r3, r0
 800af56:	b29a      	uxth	r2, r3
 800af58:	4b3d      	ldr	r3, [pc, #244]	@ (800b050 <SGP_GetMeasurementValues+0x3c0>)
 800af5a:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	0018      	movs	r0, r3
 800af62:	f7f8 fa2d 	bl	80033c0 <__aeabi_i2d>
 800af66:	2200      	movs	r2, #0
 800af68:	4b36      	ldr	r3, [pc, #216]	@ (800b044 <SGP_GetMeasurementValues+0x3b4>)
 800af6a:	f7f7 fe2f 	bl	8002bcc <__aeabi_dsub>
 800af6e:	0002      	movs	r2, r0
 800af70:	000b      	movs	r3, r1
 800af72:	0010      	movs	r0, r2
 800af74:	0019      	movs	r1, r3
 800af76:	2200      	movs	r2, #0
 800af78:	4b38      	ldr	r3, [pc, #224]	@ (800b05c <SGP_GetMeasurementValues+0x3cc>)
 800af7a:	f7f6 ff1b 	bl	8001db4 <__aeabi_ddiv>
 800af7e:	0002      	movs	r2, r0
 800af80:	000b      	movs	r3, r1
 800af82:	2000      	movs	r0, #0
 800af84:	4930      	ldr	r1, [pc, #192]	@ (800b048 <SGP_GetMeasurementValues+0x3b8>)
 800af86:	f7f7 fe21 	bl	8002bcc <__aeabi_dsub>
 800af8a:	0002      	movs	r2, r0
 800af8c:	000b      	movs	r3, r1
 800af8e:	0014      	movs	r4, r2
 800af90:	001d      	movs	r5, r3
 800af92:	4b2e      	ldr	r3, [pc, #184]	@ (800b04c <SGP_GetMeasurementValues+0x3bc>)
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	0018      	movs	r0, r3
 800af98:	f7f8 fa12 	bl	80033c0 <__aeabi_i2d>
 800af9c:	0002      	movs	r2, r0
 800af9e:	000b      	movs	r3, r1
 800afa0:	0020      	movs	r0, r4
 800afa2:	0029      	movs	r1, r5
 800afa4:	f7f7 fb4a 	bl	800263c <__aeabi_dmul>
 800afa8:	0002      	movs	r2, r0
 800afaa:	000b      	movs	r3, r1
 800afac:	0010      	movs	r0, r2
 800afae:	0019      	movs	r1, r3
 800afb0:	f7f5 fb4c 	bl	800064c <__aeabi_d2uiz>
 800afb4:	0003      	movs	r3, r0
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	4b27      	ldr	r3, [pc, #156]	@ (800b058 <SGP_GetMeasurementValues+0x3c8>)
 800afba:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800afbc:	4b23      	ldr	r3, [pc, #140]	@ (800b04c <SGP_GetMeasurementValues+0x3bc>)
 800afbe:	881a      	ldrh	r2, [r3, #0]
 800afc0:	4b24      	ldr	r3, [pc, #144]	@ (800b054 <SGP_GetMeasurementValues+0x3c4>)
 800afc2:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800afc4:	4b24      	ldr	r3, [pc, #144]	@ (800b058 <SGP_GetMeasurementValues+0x3c8>)
 800afc6:	8818      	ldrh	r0, [r3, #0]
 800afc8:	4b21      	ldr	r3, [pc, #132]	@ (800b050 <SGP_GetMeasurementValues+0x3c0>)
 800afca:	8819      	ldrh	r1, [r3, #0]
 800afcc:	4b21      	ldr	r3, [pc, #132]	@ (800b054 <SGP_GetMeasurementValues+0x3c4>)
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	001a      	movs	r2, r3
 800afd2:	f001 fac3 	bl	800c55c <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800afd6:	4b0e      	ldr	r3, [pc, #56]	@ (800b010 <SGP_GetMeasurementValues+0x380>)
 800afd8:	2200      	movs	r2, #0
 800afda:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800afdc:	4b07      	ldr	r3, [pc, #28]	@ (800affc <SGP_GetMeasurementValues+0x36c>)
 800afde:	2200      	movs	r2, #0
 800afe0:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800afe2:	4b03      	ldr	r3, [pc, #12]	@ (800aff0 <SGP_GetMeasurementValues+0x360>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800afe8:	2301      	movs	r3, #1
 800afea:	e051      	b.n	800b090 <SGP_GetMeasurementValues+0x400>
 800afec:	2000120e 	.word	0x2000120e
 800aff0:	200012b9 	.word	0x200012b9
 800aff4:	0802333c 	.word	0x0802333c
 800aff8:	08023350 	.word	0x08023350
 800affc:	200012b8 	.word	0x200012b8
 800b000:	20000094 	.word	0x20000094
 800b004:	200000a8 	.word	0x200000a8
 800b008:	2000008c 	.word	0x2000008c
 800b00c:	2000120f 	.word	0x2000120f
 800b010:	2000120d 	.word	0x2000120d
 800b014:	08023354 	.word	0x08023354
 800b018:	20001204 	.word	0x20001204
 800b01c:	0802336c 	.word	0x0802336c
 800b020:	08023390 	.word	0x08023390
 800b024:	08023394 	.word	0x08023394
 800b028:	080233b4 	.word	0x080233b4
 800b02c:	080233b8 	.word	0x080233b8
 800b030:	200000a4 	.word	0x200000a4
 800b034:	2000009c 	.word	0x2000009c
 800b038:	080233d8 	.word	0x080233d8
 800b03c:	20001210 	.word	0x20001210
 800b040:	080233ec 	.word	0x080233ec
 800b044:	40590000 	.word	0x40590000
 800b048:	3ff00000 	.word	0x3ff00000
 800b04c:	200000ac 	.word	0x200000ac
 800b050:	200012be 	.word	0x200012be
 800b054:	200012bc 	.word	0x200012bc
 800b058:	200012ba 	.word	0x200012ba
 800b05c:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b060:	f7ff fdfa 	bl	800ac58 <SGP_MeasurementDone>
 800b064:	1e03      	subs	r3, r0, #0
 800b066:	d012      	beq.n	800b08e <SGP_GetMeasurementValues+0x3fe>
 800b068:	4b0b      	ldr	r3, [pc, #44]	@ (800b098 <SGP_GetMeasurementValues+0x408>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00e      	beq.n	800b08e <SGP_GetMeasurementValues+0x3fe>
 800b070:	4b0a      	ldr	r3, [pc, #40]	@ (800b09c <SGP_GetMeasurementValues+0x40c>)
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d00a      	beq.n	800b08e <SGP_GetMeasurementValues+0x3fe>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b078:	4a09      	ldr	r2, [pc, #36]	@ (800b0a0 <SGP_GetMeasurementValues+0x410>)
 800b07a:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a4 <SGP_GetMeasurementValues+0x414>)
 800b07c:	0019      	movs	r1, r3
 800b07e:	2003      	movs	r0, #3
 800b080:	f002 f998 	bl	800d3b4 <CreateLine>
    SGP_StartMeasurement();
 800b084:	f7ff fd94 	bl	800abb0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b088:	4b07      	ldr	r3, [pc, #28]	@ (800b0a8 <SGP_GetMeasurementValues+0x418>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	0018      	movs	r0, r3
 800b092:	46bd      	mov	sp, r7
 800b094:	b004      	add	sp, #16
 800b096:	bdb0      	pop	{r4, r5, r7, pc}
 800b098:	2000120e 	.word	0x2000120e
 800b09c:	2000120f 	.word	0x2000120f
 800b0a0:	08023400 	.word	0x08023400
 800b0a4:	08023350 	.word	0x08023350
 800b0a8:	200012b9 	.word	0x200012b9

0800b0ac <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b0b2:	4b1a      	ldr	r3, [pc, #104]	@ (800b11c <SGP_DeviceConnected+0x70>)
 800b0b4:	2202      	movs	r2, #2
 800b0b6:	0019      	movs	r1, r3
 800b0b8:	2059      	movs	r0, #89	@ 0x59
 800b0ba:	f7ff fd41 	bl	800ab40 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f002 fd20 	bl	800db04 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b0c4:	4b16      	ldr	r3, [pc, #88]	@ (800b120 <SGP_DeviceConnected+0x74>)
 800b0c6:	2209      	movs	r2, #9
 800b0c8:	0019      	movs	r1, r3
 800b0ca:	2059      	movs	r0, #89	@ 0x59
 800b0cc:	f7ff fd1a 	bl	800ab04 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b0d0:	1dfb      	adds	r3, r7, #7
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
 800b0d6:	e011      	b.n	800b0fc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b0d8:	1dfb      	adds	r3, r7, #7
 800b0da:	7818      	ldrb	r0, [r3, #0]
 800b0dc:	1dfb      	adds	r3, r7, #7
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	4a0f      	ldr	r2, [pc, #60]	@ (800b120 <SGP_DeviceConnected+0x74>)
 800b0e2:	5cd3      	ldrb	r3, [r2, r3]
 800b0e4:	4a0f      	ldr	r2, [pc, #60]	@ (800b124 <SGP_DeviceConnected+0x78>)
 800b0e6:	4910      	ldr	r1, [pc, #64]	@ (800b128 <SGP_DeviceConnected+0x7c>)
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	0003      	movs	r3, r0
 800b0ec:	2002      	movs	r0, #2
 800b0ee:	f002 f961 	bl	800d3b4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b0f2:	1dfb      	adds	r3, r7, #7
 800b0f4:	781a      	ldrb	r2, [r3, #0]
 800b0f6:	1dfb      	adds	r3, r7, #7
 800b0f8:	3201      	adds	r2, #1
 800b0fa:	701a      	strb	r2, [r3, #0]
 800b0fc:	1dfb      	adds	r3, r7, #7
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b08      	cmp	r3, #8
 800b102:	d9e9      	bls.n	800b0d8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b104:	4b06      	ldr	r3, [pc, #24]	@ (800b120 <SGP_DeviceConnected+0x74>)
 800b106:	2203      	movs	r2, #3
 800b108:	2109      	movs	r1, #9
 800b10a:	0018      	movs	r0, r3
 800b10c:	f000 f80e 	bl	800b12c <CheckCRC>
 800b110:	0003      	movs	r3, r0
}
 800b112:	0018      	movs	r0, r3
 800b114:	46bd      	mov	sp, r7
 800b116:	b002      	add	sp, #8
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	46c0      	nop			@ (mov r8, r8)
 800b11c:	20000088 	.word	0x20000088
 800b120:	20001204 	.word	0x20001204
 800b124:	08023420 	.word	0x08023420
 800b128:	080233b4 	.word	0x080233b4

0800b12c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b12c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12e:	b08f      	sub	sp, #60	@ 0x3c
 800b130:	af00      	add	r7, sp, #0
 800b132:	6278      	str	r0, [r7, #36]	@ 0x24
 800b134:	0008      	movs	r0, r1
 800b136:	0011      	movs	r1, r2
 800b138:	2323      	movs	r3, #35	@ 0x23
 800b13a:	18fb      	adds	r3, r7, r3
 800b13c:	1c02      	adds	r2, r0, #0
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	2322      	movs	r3, #34	@ 0x22
 800b142:	18fb      	adds	r3, r7, r3
 800b144:	1c0a      	adds	r2, r1, #0
 800b146:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b148:	2317      	movs	r3, #23
 800b14a:	2220      	movs	r2, #32
 800b14c:	189b      	adds	r3, r3, r2
 800b14e:	19db      	adds	r3, r3, r7
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]
 800b154:	e09f      	b.n	800b296 <CheckCRC+0x16a>
 800b156:	466b      	mov	r3, sp
 800b158:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b15a:	2322      	movs	r3, #34	@ 0x22
 800b15c:	18fb      	adds	r3, r7, r3
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	001a      	movs	r2, r3
 800b162:	3a01      	subs	r2, #1
 800b164:	633a      	str	r2, [r7, #48]	@ 0x30
 800b166:	60bb      	str	r3, [r7, #8]
 800b168:	2200      	movs	r2, #0
 800b16a:	60fa      	str	r2, [r7, #12]
 800b16c:	68b8      	ldr	r0, [r7, #8]
 800b16e:	68f9      	ldr	r1, [r7, #12]
 800b170:	0002      	movs	r2, r0
 800b172:	0f52      	lsrs	r2, r2, #29
 800b174:	000c      	movs	r4, r1
 800b176:	00e4      	lsls	r4, r4, #3
 800b178:	61fc      	str	r4, [r7, #28]
 800b17a:	69fc      	ldr	r4, [r7, #28]
 800b17c:	4314      	orrs	r4, r2
 800b17e:	61fc      	str	r4, [r7, #28]
 800b180:	0002      	movs	r2, r0
 800b182:	00d2      	lsls	r2, r2, #3
 800b184:	61ba      	str	r2, [r7, #24]
 800b186:	603b      	str	r3, [r7, #0]
 800b188:	2200      	movs	r2, #0
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	6838      	ldr	r0, [r7, #0]
 800b18e:	6879      	ldr	r1, [r7, #4]
 800b190:	0002      	movs	r2, r0
 800b192:	0f52      	lsrs	r2, r2, #29
 800b194:	000c      	movs	r4, r1
 800b196:	00e4      	lsls	r4, r4, #3
 800b198:	617c      	str	r4, [r7, #20]
 800b19a:	697c      	ldr	r4, [r7, #20]
 800b19c:	4314      	orrs	r4, r2
 800b19e:	617c      	str	r4, [r7, #20]
 800b1a0:	0002      	movs	r2, r0
 800b1a2:	00d2      	lsls	r2, r2, #3
 800b1a4:	613a      	str	r2, [r7, #16]
 800b1a6:	3307      	adds	r3, #7
 800b1a8:	08db      	lsrs	r3, r3, #3
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	466a      	mov	r2, sp
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	469d      	mov	sp, r3
 800b1b2:	466b      	mov	r3, sp
 800b1b4:	3300      	adds	r3, #0
 800b1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b1b8:	2316      	movs	r3, #22
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	189b      	adds	r3, r3, r2
 800b1be:	19db      	adds	r3, r3, r7
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
 800b1c4:	e01e      	b.n	800b204 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b1c6:	2317      	movs	r3, #23
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	189b      	adds	r3, r3, r2
 800b1cc:	19db      	adds	r3, r3, r7
 800b1ce:	781a      	ldrb	r2, [r3, #0]
 800b1d0:	2116      	movs	r1, #22
 800b1d2:	2320      	movs	r3, #32
 800b1d4:	18cb      	adds	r3, r1, r3
 800b1d6:	19db      	adds	r3, r3, r7
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	18d3      	adds	r3, r2, r3
 800b1dc:	001a      	movs	r2, r3
 800b1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e0:	189a      	adds	r2, r3, r2
 800b1e2:	0008      	movs	r0, r1
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	18cb      	adds	r3, r1, r3
 800b1e8:	19db      	adds	r3, r3, r7
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	7811      	ldrb	r1, [r2, #0]
 800b1ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1f0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b1f2:	2320      	movs	r3, #32
 800b1f4:	18c3      	adds	r3, r0, r3
 800b1f6:	19db      	adds	r3, r3, r7
 800b1f8:	781a      	ldrb	r2, [r3, #0]
 800b1fa:	2320      	movs	r3, #32
 800b1fc:	18c3      	adds	r3, r0, r3
 800b1fe:	19db      	adds	r3, r3, r7
 800b200:	3201      	adds	r2, #1
 800b202:	701a      	strb	r2, [r3, #0]
 800b204:	2316      	movs	r3, #22
 800b206:	2220      	movs	r2, #32
 800b208:	189b      	adds	r3, r3, r2
 800b20a:	19da      	adds	r2, r3, r7
 800b20c:	2322      	movs	r3, #34	@ 0x22
 800b20e:	18fb      	adds	r3, r7, r3
 800b210:	7812      	ldrb	r2, [r2, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	429a      	cmp	r2, r3
 800b216:	d3d6      	bcc.n	800b1c6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b218:	2417      	movs	r4, #23
 800b21a:	2320      	movs	r3, #32
 800b21c:	18e3      	adds	r3, r4, r3
 800b21e:	19db      	adds	r3, r3, r7
 800b220:	781a      	ldrb	r2, [r3, #0]
 800b222:	2322      	movs	r3, #34	@ 0x22
 800b224:	18fb      	adds	r3, r7, r3
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	18d3      	adds	r3, r2, r3
 800b22a:	3b01      	subs	r3, #1
 800b22c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b22e:	18d2      	adds	r2, r2, r3
 800b230:	250b      	movs	r5, #11
 800b232:	2320      	movs	r3, #32
 800b234:	18eb      	adds	r3, r5, r3
 800b236:	19db      	adds	r3, r3, r7
 800b238:	7812      	ldrb	r2, [r2, #0]
 800b23a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b23c:	2322      	movs	r3, #34	@ 0x22
 800b23e:	18fb      	adds	r3, r7, r3
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	3b01      	subs	r3, #1
 800b244:	b2da      	uxtb	r2, r3
 800b246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b248:	0011      	movs	r1, r2
 800b24a:	0018      	movs	r0, r3
 800b24c:	f000 f838 	bl	800b2c0 <CalculateCRC>
 800b250:	0003      	movs	r3, r0
 800b252:	001a      	movs	r2, r3
 800b254:	2320      	movs	r3, #32
 800b256:	18eb      	adds	r3, r5, r3
 800b258:	19db      	adds	r3, r3, r7
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d00c      	beq.n	800b27a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b260:	2320      	movs	r3, #32
 800b262:	18e3      	adds	r3, r4, r3
 800b264:	19db      	adds	r3, r3, r7
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	4a13      	ldr	r2, [pc, #76]	@ (800b2b8 <CheckCRC+0x18c>)
 800b26c:	4913      	ldr	r1, [pc, #76]	@ (800b2bc <CheckCRC+0x190>)
 800b26e:	2001      	movs	r0, #1
 800b270:	f002 f8a0 	bl	800d3b4 <CreateLine>
      return false;
 800b274:	2300      	movs	r3, #0
 800b276:	46b5      	mov	sp, r6
 800b278:	e019      	b.n	800b2ae <CheckCRC+0x182>
 800b27a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b27c:	2217      	movs	r2, #23
 800b27e:	2320      	movs	r3, #32
 800b280:	18d3      	adds	r3, r2, r3
 800b282:	19db      	adds	r3, r3, r7
 800b284:	2120      	movs	r1, #32
 800b286:	1852      	adds	r2, r2, r1
 800b288:	19d1      	adds	r1, r2, r7
 800b28a:	2222      	movs	r2, #34	@ 0x22
 800b28c:	18ba      	adds	r2, r7, r2
 800b28e:	7809      	ldrb	r1, [r1, #0]
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	188a      	adds	r2, r1, r2
 800b294:	701a      	strb	r2, [r3, #0]
 800b296:	2317      	movs	r3, #23
 800b298:	2220      	movs	r2, #32
 800b29a:	189b      	adds	r3, r3, r2
 800b29c:	19da      	adds	r2, r3, r7
 800b29e:	2323      	movs	r3, #35	@ 0x23
 800b2a0:	18fb      	adds	r3, r7, r3
 800b2a2:	7812      	ldrb	r2, [r2, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d200      	bcs.n	800b2ac <CheckCRC+0x180>
 800b2aa:	e754      	b.n	800b156 <CheckCRC+0x2a>
    }
  }
  return true;
 800b2ac:	2301      	movs	r3, #1
}
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	b00f      	add	sp, #60	@ 0x3c
 800b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b6:	46c0      	nop			@ (mov r8, r8)
 800b2b8:	08023440 	.word	0x08023440
 800b2bc:	08023390 	.word	0x08023390

0800b2c0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	000a      	movs	r2, r1
 800b2ca:	1cfb      	adds	r3, r7, #3
 800b2cc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b2ce:	230f      	movs	r3, #15
 800b2d0:	18fb      	adds	r3, r7, r3
 800b2d2:	22ff      	movs	r2, #255	@ 0xff
 800b2d4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b2d6:	230e      	movs	r3, #14
 800b2d8:	18fb      	adds	r3, r7, r3
 800b2da:	2200      	movs	r2, #0
 800b2dc:	701a      	strb	r2, [r3, #0]
 800b2de:	e037      	b.n	800b350 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b2e0:	230e      	movs	r3, #14
 800b2e2:	18fb      	adds	r3, r7, r3
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	18d3      	adds	r3, r2, r3
 800b2ea:	7819      	ldrb	r1, [r3, #0]
 800b2ec:	220f      	movs	r2, #15
 800b2ee:	18bb      	adds	r3, r7, r2
 800b2f0:	18ba      	adds	r2, r7, r2
 800b2f2:	7812      	ldrb	r2, [r2, #0]
 800b2f4:	404a      	eors	r2, r1
 800b2f6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b2f8:	230d      	movs	r3, #13
 800b2fa:	18fb      	adds	r3, r7, r3
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	701a      	strb	r2, [r3, #0]
 800b300:	e01b      	b.n	800b33a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b302:	210f      	movs	r1, #15
 800b304:	187b      	adds	r3, r7, r1
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	b25b      	sxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da09      	bge.n	800b322 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b30e:	187b      	adds	r3, r7, r1
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	005b      	lsls	r3, r3, #1
 800b314:	b25b      	sxtb	r3, r3
 800b316:	2231      	movs	r2, #49	@ 0x31
 800b318:	4053      	eors	r3, r2
 800b31a:	b25a      	sxtb	r2, r3
 800b31c:	187b      	adds	r3, r7, r1
 800b31e:	701a      	strb	r2, [r3, #0]
 800b320:	e005      	b.n	800b32e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b322:	230f      	movs	r3, #15
 800b324:	18fa      	adds	r2, r7, r3
 800b326:	18fb      	adds	r3, r7, r3
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	18db      	adds	r3, r3, r3
 800b32c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b32e:	210d      	movs	r1, #13
 800b330:	187b      	adds	r3, r7, r1
 800b332:	781a      	ldrb	r2, [r3, #0]
 800b334:	187b      	adds	r3, r7, r1
 800b336:	3201      	adds	r2, #1
 800b338:	701a      	strb	r2, [r3, #0]
 800b33a:	230d      	movs	r3, #13
 800b33c:	18fb      	adds	r3, r7, r3
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	2b07      	cmp	r3, #7
 800b342:	d9de      	bls.n	800b302 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b344:	210e      	movs	r1, #14
 800b346:	187b      	adds	r3, r7, r1
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	187b      	adds	r3, r7, r1
 800b34c:	3201      	adds	r2, #1
 800b34e:	701a      	strb	r2, [r3, #0]
 800b350:	230e      	movs	r3, #14
 800b352:	18fa      	adds	r2, r7, r3
 800b354:	1cfb      	adds	r3, r7, #3
 800b356:	7812      	ldrb	r2, [r2, #0]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d3c0      	bcc.n	800b2e0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b35e:	230f      	movs	r3, #15
 800b360:	18fb      	adds	r3, r7, r3
 800b362:	781b      	ldrb	r3, [r3, #0]
}
 800b364:	0018      	movs	r0, r3
 800b366:	46bd      	mov	sp, r7
 800b368:	b004      	add	sp, #16
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4936      	ldr	r1, [pc, #216]	@ (800b454 <SGP_GetHT+0xe8>)
 800b37c:	1c18      	adds	r0, r3, #0
 800b37e:	f7f5 fa9f 	bl	80008c0 <__aeabi_fadd>
 800b382:	1c03      	adds	r3, r0, #0
 800b384:	4934      	ldr	r1, [pc, #208]	@ (800b458 <SGP_GetHT+0xec>)
 800b386:	1c18      	adds	r0, r3, #0
 800b388:	f7f5 fc24 	bl	8000bd4 <__aeabi_fdiv>
 800b38c:	1c03      	adds	r3, r0, #0
 800b38e:	4933      	ldr	r1, [pc, #204]	@ (800b45c <SGP_GetHT+0xf0>)
 800b390:	1c18      	adds	r0, r3, #0
 800b392:	f7f5 fe05 	bl	8000fa0 <__aeabi_fmul>
 800b396:	1c03      	adds	r3, r0, #0
 800b398:	1c18      	adds	r0, r3, #0
 800b39a:	f7f5 f93f 	bl	800061c <__aeabi_f2uiz>
 800b39e:	0003      	movs	r3, r0
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	4b2f      	ldr	r3, [pc, #188]	@ (800b460 <SGP_GetHT+0xf4>)
 800b3a4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	492e      	ldr	r1, [pc, #184]	@ (800b464 <SGP_GetHT+0xf8>)
 800b3ac:	1c18      	adds	r0, r3, #0
 800b3ae:	f7f5 fc11 	bl	8000bd4 <__aeabi_fdiv>
 800b3b2:	1c03      	adds	r3, r0, #0
 800b3b4:	4929      	ldr	r1, [pc, #164]	@ (800b45c <SGP_GetHT+0xf0>)
 800b3b6:	1c18      	adds	r0, r3, #0
 800b3b8:	f7f5 fdf2 	bl	8000fa0 <__aeabi_fmul>
 800b3bc:	1c03      	adds	r3, r0, #0
 800b3be:	1c18      	adds	r0, r3, #0
 800b3c0:	f7f5 f92c 	bl	800061c <__aeabi_f2uiz>
 800b3c4:	0003      	movs	r3, r0
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	4b27      	ldr	r3, [pc, #156]	@ (800b468 <SGP_GetHT+0xfc>)
 800b3ca:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b3cc:	4b26      	ldr	r3, [pc, #152]	@ (800b468 <SGP_GetHT+0xfc>)
 800b3ce:	881b      	ldrh	r3, [r3, #0]
 800b3d0:	0a1b      	lsrs	r3, r3, #8
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	4b25      	ldr	r3, [pc, #148]	@ (800b46c <SGP_GetHT+0x100>)
 800b3d8:	709a      	strb	r2, [r3, #2]
 800b3da:	4b24      	ldr	r3, [pc, #144]	@ (800b46c <SGP_GetHT+0x100>)
 800b3dc:	789a      	ldrb	r2, [r3, #2]
 800b3de:	210c      	movs	r1, #12
 800b3e0:	187b      	adds	r3, r7, r1
 800b3e2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b3e4:	4b20      	ldr	r3, [pc, #128]	@ (800b468 <SGP_GetHT+0xfc>)
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	4b20      	ldr	r3, [pc, #128]	@ (800b46c <SGP_GetHT+0x100>)
 800b3ec:	70da      	strb	r2, [r3, #3]
 800b3ee:	4b1f      	ldr	r3, [pc, #124]	@ (800b46c <SGP_GetHT+0x100>)
 800b3f0:	78da      	ldrb	r2, [r3, #3]
 800b3f2:	187b      	adds	r3, r7, r1
 800b3f4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b3f6:	187b      	adds	r3, r7, r1
 800b3f8:	2102      	movs	r1, #2
 800b3fa:	0018      	movs	r0, r3
 800b3fc:	f7ff ff60 	bl	800b2c0 <CalculateCRC>
 800b400:	0003      	movs	r3, r0
 800b402:	001a      	movs	r2, r3
 800b404:	4b19      	ldr	r3, [pc, #100]	@ (800b46c <SGP_GetHT+0x100>)
 800b406:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b408:	4b15      	ldr	r3, [pc, #84]	@ (800b460 <SGP_GetHT+0xf4>)
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	0a1b      	lsrs	r3, r3, #8
 800b40e:	b29b      	uxth	r3, r3
 800b410:	b2da      	uxtb	r2, r3
 800b412:	4b16      	ldr	r3, [pc, #88]	@ (800b46c <SGP_GetHT+0x100>)
 800b414:	715a      	strb	r2, [r3, #5]
 800b416:	4b15      	ldr	r3, [pc, #84]	@ (800b46c <SGP_GetHT+0x100>)
 800b418:	795a      	ldrb	r2, [r3, #5]
 800b41a:	2108      	movs	r1, #8
 800b41c:	187b      	adds	r3, r7, r1
 800b41e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b420:	4b0f      	ldr	r3, [pc, #60]	@ (800b460 <SGP_GetHT+0xf4>)
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	b2da      	uxtb	r2, r3
 800b426:	4b11      	ldr	r3, [pc, #68]	@ (800b46c <SGP_GetHT+0x100>)
 800b428:	719a      	strb	r2, [r3, #6]
 800b42a:	4b10      	ldr	r3, [pc, #64]	@ (800b46c <SGP_GetHT+0x100>)
 800b42c:	799a      	ldrb	r2, [r3, #6]
 800b42e:	187b      	adds	r3, r7, r1
 800b430:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b432:	187b      	adds	r3, r7, r1
 800b434:	2102      	movs	r1, #2
 800b436:	0018      	movs	r0, r3
 800b438:	f7ff ff42 	bl	800b2c0 <CalculateCRC>
 800b43c:	0003      	movs	r3, r0
 800b43e:	001a      	movs	r2, r3
 800b440:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <SGP_GetHT+0x100>)
 800b442:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b444:	4b0a      	ldr	r3, [pc, #40]	@ (800b470 <SGP_GetHT+0x104>)
 800b446:	2201      	movs	r2, #1
 800b448:	701a      	strb	r2, [r3, #0]
}
 800b44a:	46c0      	nop			@ (mov r8, r8)
 800b44c:	46bd      	mov	sp, r7
 800b44e:	b004      	add	sp, #16
 800b450:	bd80      	pop	{r7, pc}
 800b452:	46c0      	nop			@ (mov r8, r8)
 800b454:	42340000 	.word	0x42340000
 800b458:	432f0000 	.word	0x432f0000
 800b45c:	477fff00 	.word	0x477fff00
 800b460:	200012b6 	.word	0x200012b6
 800b464:	42c80000 	.word	0x42c80000
 800b468:	200012b4 	.word	0x200012b4
 800b46c:	20000094 	.word	0x20000094
 800b470:	200012b8 	.word	0x200012b8

0800b474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	0002      	movs	r2, r0
 800b47c:	1dfb      	adds	r3, r7, #7
 800b47e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b480:	1dfb      	adds	r3, r7, #7
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	2b7f      	cmp	r3, #127	@ 0x7f
 800b486:	d809      	bhi.n	800b49c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b488:	1dfb      	adds	r3, r7, #7
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	001a      	movs	r2, r3
 800b48e:	231f      	movs	r3, #31
 800b490:	401a      	ands	r2, r3
 800b492:	4b04      	ldr	r3, [pc, #16]	@ (800b4a4 <__NVIC_EnableIRQ+0x30>)
 800b494:	2101      	movs	r1, #1
 800b496:	4091      	lsls	r1, r2
 800b498:	000a      	movs	r2, r1
 800b49a:	601a      	str	r2, [r3, #0]
  }
}
 800b49c:	46c0      	nop			@ (mov r8, r8)
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	b002      	add	sp, #8
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	e000e100 	.word	0xe000e100

0800b4a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	0002      	movs	r2, r0
 800b4b0:	1dfb      	adds	r3, r7, #7
 800b4b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b4b4:	1dfb      	adds	r3, r7, #7
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4ba:	d810      	bhi.n	800b4de <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4bc:	1dfb      	adds	r3, r7, #7
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	001a      	movs	r2, r3
 800b4c2:	231f      	movs	r3, #31
 800b4c4:	4013      	ands	r3, r2
 800b4c6:	4908      	ldr	r1, [pc, #32]	@ (800b4e8 <__NVIC_DisableIRQ+0x40>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	409a      	lsls	r2, r3
 800b4cc:	0013      	movs	r3, r2
 800b4ce:	2280      	movs	r2, #128	@ 0x80
 800b4d0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b4d2:	f3bf 8f4f 	dsb	sy
}
 800b4d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b4d8:	f3bf 8f6f 	isb	sy
}
 800b4dc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800b4de:	46c0      	nop			@ (mov r8, r8)
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b002      	add	sp, #8
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	46c0      	nop			@ (mov r8, r8)
 800b4e8:	e000e100 	.word	0xe000e100

0800b4ec <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800b4ec:	b5b0      	push	{r4, r5, r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	0008      	movs	r0, r1
 800b4f6:	0011      	movs	r1, r2
 800b4f8:	1cfb      	adds	r3, r7, #3
 800b4fa:	1c02      	adds	r2, r0, #0
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	1cbb      	adds	r3, r7, #2
 800b500:	1c0a      	adds	r2, r1, #0
 800b502:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800b504:	4b5b      	ldr	r3, [pc, #364]	@ (800b674 <getSoundData+0x188>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2201      	movs	r2, #1
 800b50c:	4053      	eors	r3, r2
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	d107      	bne.n	800b524 <getSoundData+0x38>
 800b514:	4b58      	ldr	r3, [pc, #352]	@ (800b678 <getSoundData+0x18c>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2201      	movs	r2, #1
 800b51c:	4053      	eors	r3, r2
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <getSoundData+0x3c>
    {
        return false;
 800b524:	2300      	movs	r3, #0
 800b526:	e0a0      	b.n	800b66a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800b528:	4b54      	ldr	r3, [pc, #336]	@ (800b67c <getSoundData+0x190>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b532:	4b53      	ldr	r3, [pc, #332]	@ (800b680 <getSoundData+0x194>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	b25b      	sxtb	r3, r3
 800b538:	0018      	movs	r0, r3
 800b53a:	f7ff ffb5 	bl	800b4a8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800b53e:	f3bf 8f4f 	dsb	sy
}
 800b542:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b544:	f3bf 8f6f 	isb	sy
}
 800b548:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800b54a:	1cfb      	adds	r3, r7, #3
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d04c      	beq.n	800b5ec <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800b552:	4b4c      	ldr	r3, [pc, #304]	@ (800b684 <getSoundData+0x198>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d11b      	bne.n	800b592 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b566:	2300      	movs	r3, #0
 800b568:	617b      	str	r3, [r7, #20]
 800b56a:	e00e      	b.n	800b58a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	18d3      	adds	r3, r2, r3
 800b572:	3302      	adds	r3, #2
 800b574:	2200      	movs	r2, #0
 800b576:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	18d3      	adds	r3, r2, r3
 800b57e:	3308      	adds	r3, #8
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	3301      	adds	r3, #1
 800b588:	617b      	str	r3, [r7, #20]
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	2b05      	cmp	r3, #5
 800b58e:	d9ed      	bls.n	800b56c <getSoundData+0x80>
 800b590:	e02c      	b.n	800b5ec <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	1c59      	adds	r1, r3, #1
 800b598:	4b3b      	ldr	r3, [pc, #236]	@ (800b688 <getSoundData+0x19c>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	4b3b      	ldr	r3, [pc, #236]	@ (800b68c <getSoundData+0x1a0>)
 800b59e:	681c      	ldr	r4, [r3, #0]
 800b5a0:	4b38      	ldr	r3, [pc, #224]	@ (800b684 <getSoundData+0x198>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	0023      	movs	r3, r4
 800b5a8:	f000 fde8 	bl	800c17c <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	613b      	str	r3, [r7, #16]
 800b5b0:	e019      	b.n	800b5e6 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	18d3      	adds	r3, r2, r3
 800b5b8:	1c98      	adds	r0, r3, #2
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	3308      	adds	r3, #8
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800b5c2:	4b33      	ldr	r3, [pc, #204]	@ (800b690 <getSoundData+0x1a4>)
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	0092      	lsls	r2, r2, #2
 800b5c8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800b5ca:	4b32      	ldr	r3, [pc, #200]	@ (800b694 <getSoundData+0x1a8>)
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	0092      	lsls	r2, r2, #2
 800b5d0:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b5d2:	4b2c      	ldr	r3, [pc, #176]	@ (800b684 <getSoundData+0x198>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	0013      	movs	r3, r2
 800b5da:	0022      	movs	r2, r4
 800b5dc:	f000 fdce 	bl	800c17c <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	613b      	str	r3, [r7, #16]
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b05      	cmp	r3, #5
 800b5ea:	d9e2      	bls.n	800b5b2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800b5ec:	1cbb      	adds	r3, r7, #2
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d028      	beq.n	800b646 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800b5f4:	240e      	movs	r4, #14
 800b5f6:	193b      	adds	r3, r7, r4
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800b5fc:	250d      	movs	r5, #13
 800b5fe:	197b      	adds	r3, r7, r5
 800b600:	2200      	movs	r2, #0
 800b602:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800b604:	4b24      	ldr	r3, [pc, #144]	@ (800b698 <getSoundData+0x1ac>)
 800b606:	6818      	ldr	r0, [r3, #0]
 800b608:	4924      	ldr	r1, [pc, #144]	@ (800b69c <getSoundData+0x1b0>)
 800b60a:	197b      	adds	r3, r7, r5
 800b60c:	193a      	adds	r2, r7, r4
 800b60e:	f000 fe59 	bl	800c2c4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800b612:	193b      	adds	r3, r7, r4
 800b614:	881a      	ldrh	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	21ff      	movs	r1, #255	@ 0xff
 800b61a:	4011      	ands	r1, r2
 800b61c:	000c      	movs	r4, r1
 800b61e:	7b99      	ldrb	r1, [r3, #14]
 800b620:	2000      	movs	r0, #0
 800b622:	4001      	ands	r1, r0
 800b624:	1c08      	adds	r0, r1, #0
 800b626:	1c21      	adds	r1, r4, #0
 800b628:	4301      	orrs	r1, r0
 800b62a:	7399      	strb	r1, [r3, #14]
 800b62c:	0a12      	lsrs	r2, r2, #8
 800b62e:	b290      	uxth	r0, r2
 800b630:	7bda      	ldrb	r2, [r3, #15]
 800b632:	2100      	movs	r1, #0
 800b634:	400a      	ands	r2, r1
 800b636:	1c11      	adds	r1, r2, #0
 800b638:	1c02      	adds	r2, r0, #0
 800b63a:	430a      	orrs	r2, r1
 800b63c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800b63e:	197b      	adds	r3, r7, r5
 800b640:	781a      	ldrb	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800b646:	f000 f86f 	bl	800b728 <micSettlingComplete>
 800b64a:	0003      	movs	r3, r0
 800b64c:	001a      	movs	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800b652:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <getSoundData+0x190>)
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b65c:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <getSoundData+0x194>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	b25b      	sxtb	r3, r3
 800b662:	0018      	movs	r0, r3
 800b664:	f7ff ff06 	bl	800b474 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800b668:	2301      	movs	r3, #1
}
 800b66a:	0018      	movs	r0, r3
 800b66c:	46bd      	mov	sp, r7
 800b66e:	b006      	add	sp, #24
 800b670:	bdb0      	pop	{r4, r5, r7, pc}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	200012c1 	.word	0x200012c1
 800b678:	200012c4 	.word	0x200012c4
 800b67c:	200012c3 	.word	0x200012c3
 800b680:	20001d14 	.word	0x20001d14
 800b684:	20001d50 	.word	0x20001d50
 800b688:	20001d18 	.word	0x20001d18
 800b68c:	20001d1c 	.word	0x20001d1c
 800b690:	20001d20 	.word	0x20001d20
 800b694:	20001d38 	.word	0x20001d38
 800b698:	200012cc 	.word	0x200012cc
 800b69c:	3b5c7333 	.word	0x3b5c7333

0800b6a0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	001a      	movs	r2, r3
 800b6ae:	1cfb      	adds	r3, r7, #3
 800b6b0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800b6b2:	4b09      	ldr	r3, [pc, #36]	@ (800b6d8 <soundInit+0x38>)
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800b6b8:	4b08      	ldr	r3, [pc, #32]	@ (800b6dc <soundInit+0x3c>)
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800b6be:	4b08      	ldr	r3, [pc, #32]	@ (800b6e0 <soundInit+0x40>)
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800b6c4:	4b07      	ldr	r3, [pc, #28]	@ (800b6e4 <soundInit+0x44>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	569a      	ldrsb	r2, [r3, r2]
 800b6ca:	4b06      	ldr	r3, [pc, #24]	@ (800b6e4 <soundInit+0x44>)
 800b6cc:	701a      	strb	r2, [r3, #0]

    return true;
 800b6ce:	2301      	movs	r3, #1
}
 800b6d0:	0018      	movs	r0, r3
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	b004      	add	sp, #16
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20001d0c 	.word	0x20001d0c
 800b6dc:	20001d08 	.word	0x20001d08
 800b6e0:	20001d10 	.word	0x20001d10
 800b6e4:	20001d14 	.word	0x20001d14

0800b6e8 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800b6ec:	4b02      	ldr	r3, [pc, #8]	@ (800b6f8 <clearMaximumAmplitude+0x10>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
}
 800b6f2:	46c0      	nop			@ (mov r8, r8)
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200012cc 	.word	0x200012cc

0800b6fc <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800b700:	4b08      	ldr	r3, [pc, #32]	@ (800b724 <startMicSettlingPeriod+0x28>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2200      	movs	r2, #0
 800b708:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800b70a:	4b06      	ldr	r3, [pc, #24]	@ (800b724 <startMicSettlingPeriod+0x28>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	0018      	movs	r0, r3
 800b710:	f009 ff42 	bl	8015598 <HAL_TIM_Base_Start>
 800b714:	1e03      	subs	r3, r0, #0
 800b716:	d001      	beq.n	800b71c <startMicSettlingPeriod+0x20>
    {
        return false;
 800b718:	2300      	movs	r3, #0
 800b71a:	e000      	b.n	800b71e <startMicSettlingPeriod+0x22>
    }
    return true;
 800b71c:	2301      	movs	r3, #1
}
 800b71e:	0018      	movs	r0, r3
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	20001d08 	.word	0x20001d08

0800b728 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800b72e:	4b0e      	ldr	r3, [pc, #56]	@ (800b768 <micSettlingComplete+0x40>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	691b      	ldr	r3, [r3, #16]
 800b736:	2201      	movs	r2, #1
 800b738:	401a      	ands	r2, r3
 800b73a:	1dfb      	adds	r3, r7, #7
 800b73c:	3a01      	subs	r2, #1
 800b73e:	4251      	negs	r1, r2
 800b740:	414a      	adcs	r2, r1
 800b742:	701a      	strb	r2, [r3, #0]
    if (complete)
 800b744:	1dfb      	adds	r3, r7, #7
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d007      	beq.n	800b75c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800b74c:	4b06      	ldr	r3, [pc, #24]	@ (800b768 <micSettlingComplete+0x40>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	0018      	movs	r0, r3
 800b752:	f009 ff6b 	bl	801562c <HAL_TIM_Base_Stop>
      DataReady = true;
 800b756:	4b05      	ldr	r3, [pc, #20]	@ (800b76c <micSettlingComplete+0x44>)
 800b758:	2201      	movs	r2, #1
 800b75a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800b75c:	1dfb      	adds	r3, r7, #7
 800b75e:	781b      	ldrb	r3, [r3, #0]
}
 800b760:	0018      	movs	r0, r3
 800b762:	46bd      	mov	sp, r7
 800b764:	b002      	add	sp, #8
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20001d08 	.word	0x20001d08
 800b76c:	200012c0 	.word	0x200012c0

0800b770 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	0002      	movs	r2, r0
 800b778:	1dfb      	adds	r3, r7, #7
 800b77a:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800b77c:	4b29      	ldr	r3, [pc, #164]	@ (800b824 <enableMicrophone+0xb4>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	1dfa      	adds	r2, r7, #7
 800b784:	7812      	ldrb	r2, [r2, #0]
 800b786:	429a      	cmp	r2, r3
 800b788:	d101      	bne.n	800b78e <enableMicrophone+0x1e>
    {
        return true;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e045      	b.n	800b81a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800b78e:	1dfb      	adds	r3, r7, #7
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d025      	beq.n	800b7e2 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800b796:	f7ff ffb1 	bl	800b6fc <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800b79a:	4b23      	ldr	r3, [pc, #140]	@ (800b828 <enableMicrophone+0xb8>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2280      	movs	r2, #128	@ 0x80
 800b7a0:	0092      	lsls	r2, r2, #2
 800b7a2:	4922      	ldr	r1, [pc, #136]	@ (800b82c <enableMicrophone+0xbc>)
 800b7a4:	0018      	movs	r0, r3
 800b7a6:	f006 f99f 	bl	8011ae8 <HAL_I2S_Receive_DMA>
 800b7aa:	1e03      	subs	r3, r0, #0
 800b7ac:	d001      	beq.n	800b7b2 <enableMicrophone+0x42>
        {
            return false;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e033      	b.n	800b81a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800b7b2:	f7ff ff99 	bl	800b6e8 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800b7b6:	4b1e      	ldr	r3, [pc, #120]	@ (800b830 <enableMicrophone+0xc0>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b834 <enableMicrophone+0xc4>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	b25b      	sxtb	r3, r3
 800b7c2:	0018      	movs	r0, r3
 800b7c4:	f7ff fe56 	bl	800b474 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800b7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b838 <enableMicrophone+0xc8>)
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800b7ce:	4b15      	ldr	r3, [pc, #84]	@ (800b824 <enableMicrophone+0xb4>)
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b7d4:	4b19      	ldr	r3, [pc, #100]	@ (800b83c <enableMicrophone+0xcc>)
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b7da:	4b19      	ldr	r3, [pc, #100]	@ (800b840 <enableMicrophone+0xd0>)
 800b7dc:	2200      	movs	r2, #0
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	e01a      	b.n	800b818 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b7e2:	4b14      	ldr	r3, [pc, #80]	@ (800b834 <enableMicrophone+0xc4>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	b25b      	sxtb	r3, r3
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f7ff fe5d 	bl	800b4a8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800b7ee:	4b12      	ldr	r3, [pc, #72]	@ (800b838 <enableMicrophone+0xc8>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b7f4:	4b11      	ldr	r3, [pc, #68]	@ (800b83c <enableMicrophone+0xcc>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b7fa:	4b11      	ldr	r3, [pc, #68]	@ (800b840 <enableMicrophone+0xd0>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800b800:	4b09      	ldr	r3, [pc, #36]	@ (800b828 <enableMicrophone+0xb8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	0018      	movs	r0, r3
 800b806:	f006 fa31 	bl	8011c6c <HAL_I2S_DMAStop>
 800b80a:	1e03      	subs	r3, r0, #0
 800b80c:	d001      	beq.n	800b812 <enableMicrophone+0xa2>
        {
            return false;
 800b80e:	2300      	movs	r3, #0
 800b810:	e003      	b.n	800b81a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800b812:	4b04      	ldr	r3, [pc, #16]	@ (800b824 <enableMicrophone+0xb4>)
 800b814:	2200      	movs	r2, #0
 800b816:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800b818:	2301      	movs	r3, #1
}
 800b81a:	0018      	movs	r0, r3
 800b81c:	46bd      	mov	sp, r7
 800b81e:	b002      	add	sp, #8
 800b820:	bd80      	pop	{r7, pc}
 800b822:	46c0      	nop			@ (mov r8, r8)
 800b824:	200012c1 	.word	0x200012c1
 800b828:	20001d0c 	.word	0x20001d0c
 800b82c:	20001308 	.word	0x20001308
 800b830:	200012c8 	.word	0x200012c8
 800b834:	20001d14 	.word	0x20001d14
 800b838:	200012c3 	.word	0x200012c3
 800b83c:	200012c2 	.word	0x200012c2
 800b840:	200012c4 	.word	0x200012c4

0800b844 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800b848:	4b0c      	ldr	r3, [pc, #48]	@ (800b87c <startSPLcalculation+0x38>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2201      	movs	r2, #1
 800b850:	4053      	eors	r3, r2
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d001      	beq.n	800b85c <startSPLcalculation+0x18>
    {
        return false;
 800b858:	2300      	movs	r3, #0
 800b85a:	e00c      	b.n	800b876 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800b85c:	4b08      	ldr	r3, [pc, #32]	@ (800b880 <startSPLcalculation+0x3c>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <startSPLcalculation+0x26>
    {
        return true;
 800b866:	2301      	movs	r3, #1
 800b868:	e005      	b.n	800b876 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800b86a:	f000 fb63 	bl	800bf34 <resetSPLstate>
    SPLcalcEnabled = true;
 800b86e:	4b04      	ldr	r3, [pc, #16]	@ (800b880 <startSPLcalculation+0x3c>)
 800b870:	2201      	movs	r2, #1
 800b872:	701a      	strb	r2, [r3, #0]
    return true;
 800b874:	2301      	movs	r3, #1
}
 800b876:	0018      	movs	r0, r3
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	200012c1 	.word	0x200012c1
 800b880:	200012c2 	.word	0x200012c2

0800b884 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b88c:	4b05      	ldr	r3, [pc, #20]	@ (800b8a4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d102      	bne.n	800b89c <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800b896:	2000      	movs	r0, #0
 800b898:	f000 f81a 	bl	800b8d0 <processHalfDMAbuffer>
  }
}
 800b89c:	46c0      	nop			@ (mov r8, r8)
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	b002      	add	sp, #8
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20001d0c 	.word	0x20001d0c

0800b8a8 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b8b0:	4b06      	ldr	r3, [pc, #24]	@ (800b8cc <HAL_I2S_RxCpltCallback+0x24>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d104      	bne.n	800b8c4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800b8ba:	2380      	movs	r3, #128	@ 0x80
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	0018      	movs	r0, r3
 800b8c0:	f000 f806 	bl	800b8d0 <processHalfDMAbuffer>
  }
}
 800b8c4:	46c0      	nop			@ (mov r8, r8)
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	b002      	add	sp, #8
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20001d0c 	.word	0x20001d0c

0800b8d0 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	005a      	lsls	r2, r3, #1
 800b8dc:	4b15      	ldr	r3, [pc, #84]	@ (800b934 <processHalfDMAbuffer+0x64>)
 800b8de:	18d3      	adds	r3, r2, r3
 800b8e0:	4a15      	ldr	r2, [pc, #84]	@ (800b938 <processHalfDMAbuffer+0x68>)
 800b8e2:	2180      	movs	r1, #128	@ 0x80
 800b8e4:	0089      	lsls	r1, r1, #2
 800b8e6:	0018      	movs	r0, r3
 800b8e8:	f000 fd35 	bl	800c356 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800b8ec:	4b13      	ldr	r3, [pc, #76]	@ (800b93c <processHalfDMAbuffer+0x6c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	425a      	negs	r2, r3
 800b8f2:	4153      	adcs	r3, r2
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	4b11      	ldr	r3, [pc, #68]	@ (800b93c <processHalfDMAbuffer+0x6c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2109      	movs	r1, #9
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	419b      	sbcs	r3, r3
 800b900:	425b      	negs	r3, r3
 800b902:	b2db      	uxtb	r3, r3
 800b904:	480c      	ldr	r0, [pc, #48]	@ (800b938 <processHalfDMAbuffer+0x68>)
 800b906:	2180      	movs	r1, #128	@ 0x80
 800b908:	f000 fb46 	bl	800bf98 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800b90c:	4b0b      	ldr	r3, [pc, #44]	@ (800b93c <processHalfDMAbuffer+0x6c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b09      	cmp	r3, #9
 800b912:	d804      	bhi.n	800b91e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800b914:	4b09      	ldr	r3, [pc, #36]	@ (800b93c <processHalfDMAbuffer+0x6c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	4b08      	ldr	r3, [pc, #32]	@ (800b93c <processHalfDMAbuffer+0x6c>)
 800b91c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800b91e:	4b08      	ldr	r3, [pc, #32]	@ (800b940 <processHalfDMAbuffer+0x70>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800b928:	f000 f826 	bl	800b978 <calculateSPLQ31>
    }
}
 800b92c:	46c0      	nop			@ (mov r8, r8)
 800b92e:	46bd      	mov	sp, r7
 800b930:	b002      	add	sp, #8
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20001308 	.word	0x20001308
 800b938:	20001b08 	.word	0x20001b08
 800b93c:	200012c8 	.word	0x200012c8
 800b940:	200012c2 	.word	0x200012c2

0800b944 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b94c:	4b07      	ldr	r3, [pc, #28]	@ (800b96c <HAL_I2S_ErrorCallback+0x28>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	429a      	cmp	r2, r3
 800b954:	d106      	bne.n	800b964 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800b956:	4a06      	ldr	r2, [pc, #24]	@ (800b970 <HAL_I2S_ErrorCallback+0x2c>)
 800b958:	239f      	movs	r3, #159	@ 0x9f
 800b95a:	0059      	lsls	r1, r3, #1
 800b95c:	4b05      	ldr	r3, [pc, #20]	@ (800b974 <HAL_I2S_ErrorCallback+0x30>)
 800b95e:	0018      	movs	r0, r3
 800b960:	f001 fdde 	bl	800d520 <errorHandler>
  }
}
 800b964:	46c0      	nop			@ (mov r8, r8)
 800b966:	46bd      	mov	sp, r7
 800b968:	b002      	add	sp, #8
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	20001d0c 	.word	0x20001d0c
 800b970:	080234e8 	.word	0x080234e8
 800b974:	08023b98 	.word	0x08023b98

0800b978 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800b978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b97a:	b0b3      	sub	sp, #204	@ 0xcc
 800b97c:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800b97e:	4ae2      	ldr	r2, [pc, #904]	@ (800bd08 <calculateSPLQ31+0x390>)
 800b980:	2338      	movs	r3, #56	@ 0x38
 800b982:	2030      	movs	r0, #48	@ 0x30
 800b984:	181b      	adds	r3, r3, r0
 800b986:	19d9      	adds	r1, r3, r7
 800b988:	2334      	movs	r3, #52	@ 0x34
 800b98a:	181b      	adds	r3, r3, r0
 800b98c:	19d8      	adds	r0, r3, r7
 800b98e:	2380      	movs	r3, #128	@ 0x80
 800b990:	f000 fc36 	bl	800c200 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800b994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b996:	2b00      	cmp	r3, #0
 800b998:	da00      	bge.n	800b99c <calculateSPLQ31+0x24>
 800b99a:	3301      	adds	r3, #1
 800b99c:	105b      	asrs	r3, r3, #1
 800b99e:	001a      	movs	r2, r3
 800b9a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	da00      	bge.n	800b9a8 <calculateSPLQ31+0x30>
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	105b      	asrs	r3, r3, #1
 800b9aa:	18d3      	adds	r3, r2, r3
 800b9ac:	2188      	movs	r1, #136	@ 0x88
 800b9ae:	187a      	adds	r2, r7, r1
 800b9b0:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800b9b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9b4:	187b      	adds	r3, r7, r1
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	1ad3      	subs	r3, r2, r3
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	2284      	movs	r2, #132	@ 0x84
 800b9be:	18b9      	adds	r1, r7, r2
 800b9c0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800b9c2:	18bb      	adds	r3, r7, r2
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4ad1      	ldr	r2, [pc, #836]	@ (800bd0c <calculateSPLQ31+0x394>)
 800b9c8:	0019      	movs	r1, r3
 800b9ca:	0010      	movs	r0, r2
 800b9cc:	f000 fc58 	bl	800c280 <getPo2factor>
 800b9d0:	0003      	movs	r3, r0
 800b9d2:	2280      	movs	r2, #128	@ 0x80
 800b9d4:	18ba      	adds	r2, r7, r2
 800b9d6:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	2284      	movs	r2, #132	@ 0x84
 800b9dc:	2130      	movs	r1, #48	@ 0x30
 800b9de:	1852      	adds	r2, r2, r1
 800b9e0:	19d2      	adds	r2, r2, r7
 800b9e2:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	2280      	movs	r2, #128	@ 0x80
 800b9e8:	1852      	adds	r2, r2, r1
 800b9ea:	19d2      	adds	r2, r2, r7
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	e032      	b.n	800ba56 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800b9f0:	4ac5      	ldr	r2, [pc, #788]	@ (800bd08 <calculateSPLQ31+0x390>)
 800b9f2:	2680      	movs	r6, #128	@ 0x80
 800b9f4:	2330      	movs	r3, #48	@ 0x30
 800b9f6:	18f1      	adds	r1, r6, r3
 800b9f8:	19cb      	adds	r3, r1, r7
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	589a      	ldr	r2, [r3, r2]
 800ba00:	2188      	movs	r1, #136	@ 0x88
 800ba02:	1879      	adds	r1, r7, r1
 800ba04:	680b      	ldr	r3, [r1, #0]
 800ba06:	1ad2      	subs	r2, r2, r3
 800ba08:	2180      	movs	r1, #128	@ 0x80
 800ba0a:	1879      	adds	r1, r7, r1
 800ba0c:	680b      	ldr	r3, [r1, #0]
 800ba0e:	409a      	lsls	r2, r3
 800ba10:	0011      	movs	r1, r2
 800ba12:	4abf      	ldr	r2, [pc, #764]	@ (800bd10 <calculateSPLQ31+0x398>)
 800ba14:	2084      	movs	r0, #132	@ 0x84
 800ba16:	2330      	movs	r3, #48	@ 0x30
 800ba18:	18c3      	adds	r3, r0, r3
 800ba1a:	19db      	adds	r3, r3, r7
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800ba22:	2230      	movs	r2, #48	@ 0x30
 800ba24:	1883      	adds	r3, r0, r2
 800ba26:	19db      	adds	r3, r3, r7
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	49b8      	ldr	r1, [pc, #736]	@ (800bd10 <calculateSPLQ31+0x398>)
 800ba2e:	009a      	lsls	r2, r3, #2
 800ba30:	2300      	movs	r3, #0
 800ba32:	5053      	str	r3, [r2, r1]
        count += 2;
 800ba34:	2230      	movs	r2, #48	@ 0x30
 800ba36:	1883      	adds	r3, r0, r2
 800ba38:	19db      	adds	r3, r3, r7
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	3302      	adds	r3, #2
 800ba3e:	0011      	movs	r1, r2
 800ba40:	1882      	adds	r2, r0, r2
 800ba42:	19d2      	adds	r2, r2, r7
 800ba44:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800ba46:	000a      	movs	r2, r1
 800ba48:	18b3      	adds	r3, r6, r2
 800ba4a:	19db      	adds	r3, r3, r7
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	18b2      	adds	r2, r6, r2
 800ba52:	19d2      	adds	r2, r2, r7
 800ba54:	6013      	str	r3, [r2, #0]
 800ba56:	2380      	movs	r3, #128	@ 0x80
 800ba58:	2630      	movs	r6, #48	@ 0x30
 800ba5a:	199b      	adds	r3, r3, r6
 800ba5c:	19db      	adds	r3, r3, r7
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba62:	d9c5      	bls.n	800b9f0 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800ba64:	4bab      	ldr	r3, [pc, #684]	@ (800bd14 <calculateSPLQ31+0x39c>)
 800ba66:	6818      	ldr	r0, [r3, #0]
 800ba68:	49a9      	ldr	r1, [pc, #676]	@ (800bd10 <calculateSPLQ31+0x398>)
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f010 fe59 	bl	801c724 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800ba72:	4aa9      	ldr	r2, [pc, #676]	@ (800bd18 <calculateSPLQ31+0x3a0>)
 800ba74:	2338      	movs	r3, #56	@ 0x38
 800ba76:	199b      	adds	r3, r3, r6
 800ba78:	19d9      	adds	r1, r3, r7
 800ba7a:	2334      	movs	r3, #52	@ 0x34
 800ba7c:	199b      	adds	r3, r3, r6
 800ba7e:	19d8      	adds	r0, r3, r7
 800ba80:	237e      	movs	r3, #126	@ 0x7e
 800ba82:	f000 fbbd 	bl	800c200 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800ba86:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba88:	2380      	movs	r3, #128	@ 0x80
 800ba8a:	061b      	lsls	r3, r3, #24
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d101      	bne.n	800ba94 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800ba90:	4b9e      	ldr	r3, [pc, #632]	@ (800bd0c <calculateSPLQ31+0x394>)
 800ba92:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800ba94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ba96:	2380      	movs	r3, #128	@ 0x80
 800ba98:	061b      	lsls	r3, r3, #24
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d101      	bne.n	800baa2 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800ba9e:	4b9b      	ldr	r3, [pc, #620]	@ (800bd0c <calculateSPLQ31+0x394>)
 800baa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800baa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baa4:	17da      	asrs	r2, r3, #31
 800baa6:	189b      	adds	r3, r3, r2
 800baa8:	4053      	eors	r3, r2
 800baaa:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800baac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800baae:	17da      	asrs	r2, r3, #31
 800bab0:	189b      	adds	r3, r3, r2
 800bab2:	4053      	eors	r3, r2
 800bab4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800bab6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800baba:	429a      	cmp	r2, r3
 800babc:	dd01      	ble.n	800bac2 <calculateSPLQ31+0x14a>
    {
        max = min;
 800babe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bac0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800bac2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bac4:	3304      	adds	r3, #4
 800bac6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800bac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800baca:	4a90      	ldr	r2, [pc, #576]	@ (800bd0c <calculateSPLQ31+0x394>)
 800bacc:	0019      	movs	r1, r3
 800bace:	0010      	movs	r0, r2
 800bad0:	f000 fbd6 	bl	800c280 <getPo2factor>
 800bad4:	0003      	movs	r3, r0
 800bad6:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800bad8:	2302      	movs	r3, #2
 800bada:	22ac      	movs	r2, #172	@ 0xac
 800badc:	18ba      	adds	r2, r7, r2
 800bade:	6013      	str	r3, [r2, #0]
 800bae0:	e012      	b.n	800bb08 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800bae2:	4a8b      	ldr	r2, [pc, #556]	@ (800bd10 <calculateSPLQ31+0x398>)
 800bae4:	20ac      	movs	r0, #172	@ 0xac
 800bae6:	183b      	adds	r3, r7, r0
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	589a      	ldr	r2, [r3, r2]
 800baee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800baf0:	409a      	lsls	r2, r3
 800baf2:	0011      	movs	r1, r2
 800baf4:	4a86      	ldr	r2, [pc, #536]	@ (800bd10 <calculateSPLQ31+0x398>)
 800baf6:	183b      	adds	r3, r7, r0
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800bafe:	183b      	adds	r3, r7, r0
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3301      	adds	r3, #1
 800bb04:	183a      	adds	r2, r7, r0
 800bb06:	6013      	str	r3, [r2, #0]
 800bb08:	23ac      	movs	r3, #172	@ 0xac
 800bb0a:	18fb      	adds	r3, r7, r3
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb10:	d9e7      	bls.n	800bae2 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800bb12:	4b7d      	ldr	r3, [pc, #500]	@ (800bd08 <calculateSPLQ31+0x390>)
 800bb14:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800bb16:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800bb18:	4b7d      	ldr	r3, [pc, #500]	@ (800bd10 <calculateSPLQ31+0x398>)
 800bb1a:	2240      	movs	r2, #64	@ 0x40
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	f011 fbab 	bl	801d278 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800bb22:	2330      	movs	r3, #48	@ 0x30
 800bb24:	18fb      	adds	r3, r7, r3
 800bb26:	0018      	movs	r0, r3
 800bb28:	2330      	movs	r3, #48	@ 0x30
 800bb2a:	001a      	movs	r2, r3
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	f013 f9c7 	bl	801eec0 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800bb32:	2200      	movs	r2, #0
 800bb34:	2300      	movs	r3, #0
 800bb36:	21a0      	movs	r1, #160	@ 0xa0
 800bb38:	1879      	adds	r1, r7, r1
 800bb3a:	600a      	str	r2, [r1, #0]
 800bb3c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800bb3e:	2301      	movs	r3, #1
 800bb40:	229c      	movs	r2, #156	@ 0x9c
 800bb42:	18ba      	adds	r2, r7, r2
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	e05b      	b.n	800bc00 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800bb48:	269c      	movs	r6, #156	@ 0x9c
 800bb4a:	19bb      	adds	r3, r7, r6
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	009a      	lsls	r2, r3, #2
 800bb50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb52:	189b      	adds	r3, r3, r2
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	613b      	str	r3, [r7, #16]
 800bb58:	17db      	asrs	r3, r3, #31
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	4b6f      	ldr	r3, [pc, #444]	@ (800bd1c <calculateSPLQ31+0x3a4>)
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	19bb      	adds	r3, r7, r6
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	18d3      	adds	r3, r2, r3
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	60bb      	str	r3, [r7, #8]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6938      	ldr	r0, [r7, #16]
 800bb76:	6979      	ldr	r1, [r7, #20]
 800bb78:	f7f4 fd22 	bl	80005c0 <__aeabi_lmul>
 800bb7c:	0002      	movs	r2, r0
 800bb7e:	000b      	movs	r3, r1
 800bb80:	0010      	movs	r0, r2
 800bb82:	0019      	movs	r1, r3
 800bb84:	23a0      	movs	r3, #160	@ 0xa0
 800bb86:	18fa      	adds	r2, r7, r3
 800bb88:	6853      	ldr	r3, [r2, #4]
 800bb8a:	6812      	ldr	r2, [r2, #0]
 800bb8c:	1812      	adds	r2, r2, r0
 800bb8e:	414b      	adcs	r3, r1
 800bb90:	21a0      	movs	r1, #160	@ 0xa0
 800bb92:	1879      	adds	r1, r7, r1
 800bb94:	600a      	str	r2, [r1, #0]
 800bb96:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800bb98:	4b61      	ldr	r3, [pc, #388]	@ (800bd20 <calculateSPLQ31+0x3a8>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	19bb      	adds	r3, r7, r6
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	18d3      	adds	r3, r2, r3
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b06      	cmp	r3, #6
 800bba6:	d025      	beq.n	800bbf4 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800bba8:	4b5d      	ldr	r3, [pc, #372]	@ (800bd20 <calculateSPLQ31+0x3a8>)
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	19bb      	adds	r3, r7, r6
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	18d3      	adds	r3, r2, r3
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2230      	movs	r2, #48	@ 0x30
 800bbb6:	18ba      	adds	r2, r7, r2
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	18d3      	adds	r3, r2, r3
 800bbbc:	6818      	ldr	r0, [r3, #0]
 800bbbe:	6859      	ldr	r1, [r3, #4]
 800bbc0:	19bb      	adds	r3, r7, r6
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	009a      	lsls	r2, r3, #2
 800bbc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbc8:	189b      	adds	r3, r3, r2
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	603b      	str	r3, [r7, #0]
 800bbce:	17db      	asrs	r3, r3, #31
 800bbd0:	607b      	str	r3, [r7, #4]
 800bbd2:	4b53      	ldr	r3, [pc, #332]	@ (800bd20 <calculateSPLQ31+0x3a8>)
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	19be      	adds	r6, r7, r6
 800bbd8:	6833      	ldr	r3, [r6, #0]
 800bbda:	18d3      	adds	r3, r2, r3
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	001e      	movs	r6, r3
 800bbe0:	683a      	ldr	r2, [r7, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	1880      	adds	r0, r0, r2
 800bbe6:	4159      	adcs	r1, r3
 800bbe8:	2330      	movs	r3, #48	@ 0x30
 800bbea:	18fa      	adds	r2, r7, r3
 800bbec:	00f3      	lsls	r3, r6, #3
 800bbee:	18d3      	adds	r3, r2, r3
 800bbf0:	6018      	str	r0, [r3, #0]
 800bbf2:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800bbf4:	229c      	movs	r2, #156	@ 0x9c
 800bbf6:	18bb      	adds	r3, r7, r2
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	18ba      	adds	r2, r7, r2
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	239c      	movs	r3, #156	@ 0x9c
 800bc02:	18fb      	adds	r3, r7, r3
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b3f      	cmp	r3, #63	@ 0x3f
 800bc08:	d99e      	bls.n	800bb48 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800bc0a:	2380      	movs	r3, #128	@ 0x80
 800bc0c:	18fb      	adds	r3, r7, r3
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	005b      	lsls	r3, r3, #1
 800bc12:	001a      	movs	r2, r3
 800bc14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	18d3      	adds	r3, r2, r3
 800bc1a:	3b22      	subs	r3, #34	@ 0x22
 800bc1c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800bc1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc20:	17da      	asrs	r2, r3, #31
 800bc22:	189b      	adds	r3, r3, r2
 800bc24:	4053      	eors	r3, r2
 800bc26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800bc28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	da62      	bge.n	800bcf4 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800bc2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc30:	3b20      	subs	r3, #32
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	db05      	blt.n	800bc42 <calculateSPLQ31+0x2ca>
 800bc36:	22a0      	movs	r2, #160	@ 0xa0
 800bc38:	18ba      	adds	r2, r7, r2
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	409a      	lsls	r2, r3
 800bc3e:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc40:	e010      	b.n	800bc64 <calculateSPLQ31+0x2ec>
 800bc42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc44:	2220      	movs	r2, #32
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	22a0      	movs	r2, #160	@ 0xa0
 800bc4a:	18ba      	adds	r2, r7, r2
 800bc4c:	6812      	ldr	r2, [r2, #0]
 800bc4e:	40da      	lsrs	r2, r3
 800bc50:	0013      	movs	r3, r2
 800bc52:	22a4      	movs	r2, #164	@ 0xa4
 800bc54:	18ba      	adds	r2, r7, r2
 800bc56:	6811      	ldr	r1, [r2, #0]
 800bc58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc5a:	4091      	lsls	r1, r2
 800bc5c:	6279      	str	r1, [r7, #36]	@ 0x24
 800bc5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc60:	431a      	orrs	r2, r3
 800bc62:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc64:	21a0      	movs	r1, #160	@ 0xa0
 800bc66:	187b      	adds	r3, r7, r1
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc6c:	409a      	lsls	r2, r3
 800bc6e:	623a      	str	r2, [r7, #32]
 800bc70:	6a3b      	ldr	r3, [r7, #32]
 800bc72:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800bc74:	187a      	adds	r2, r7, r1
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	2298      	movs	r2, #152	@ 0x98
 800bc7e:	18ba      	adds	r2, r7, r2
 800bc80:	6013      	str	r3, [r2, #0]
 800bc82:	e031      	b.n	800bce8 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800bc84:	2330      	movs	r3, #48	@ 0x30
 800bc86:	18fa      	adds	r2, r7, r3
 800bc88:	2398      	movs	r3, #152	@ 0x98
 800bc8a:	18fb      	adds	r3, r7, r3
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	00db      	lsls	r3, r3, #3
 800bc90:	18d3      	adds	r3, r2, r3
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bc98:	3920      	subs	r1, #32
 800bc9a:	2900      	cmp	r1, #0
 800bc9c:	db03      	blt.n	800bca6 <calculateSPLQ31+0x32e>
 800bc9e:	0010      	movs	r0, r2
 800bca0:	4088      	lsls	r0, r1
 800bca2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bca4:	e00c      	b.n	800bcc0 <calculateSPLQ31+0x348>
 800bca6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bca8:	2020      	movs	r0, #32
 800bcaa:	1a41      	subs	r1, r0, r1
 800bcac:	0010      	movs	r0, r2
 800bcae:	40c8      	lsrs	r0, r1
 800bcb0:	0001      	movs	r1, r0
 800bcb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bcb4:	001c      	movs	r4, r3
 800bcb6:	4084      	lsls	r4, r0
 800bcb8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800bcba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bcbc:	4308      	orrs	r0, r1
 800bcbe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bcc0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bcc2:	0013      	movs	r3, r2
 800bcc4:	408b      	lsls	r3, r1
 800bcc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcc8:	2330      	movs	r3, #48	@ 0x30
 800bcca:	18fa      	adds	r2, r7, r3
 800bccc:	2098      	movs	r0, #152	@ 0x98
 800bcce:	183b      	adds	r3, r7, r0
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	00db      	lsls	r3, r3, #3
 800bcd4:	18d3      	adds	r3, r2, r3
 800bcd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bcd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcda:	6019      	str	r1, [r3, #0]
 800bcdc:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bcde:	183b      	adds	r3, r7, r0
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3301      	adds	r3, #1
 800bce4:	183a      	adds	r2, r7, r0
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	2398      	movs	r3, #152	@ 0x98
 800bcea:	18fb      	adds	r3, r7, r3
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d9c8      	bls.n	800bc84 <calculateSPLQ31+0x30c>
 800bcf2:	e06b      	b.n	800bdcc <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800bcf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcf6:	3b20      	subs	r3, #32
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	db13      	blt.n	800bd24 <calculateSPLQ31+0x3ac>
 800bcfc:	22a4      	movs	r2, #164	@ 0xa4
 800bcfe:	18ba      	adds	r2, r7, r2
 800bd00:	6812      	ldr	r2, [r2, #0]
 800bd02:	40da      	lsrs	r2, r3
 800bd04:	61ba      	str	r2, [r7, #24]
 800bd06:	e01e      	b.n	800bd46 <calculateSPLQ31+0x3ce>
 800bd08:	20001b08 	.word	0x20001b08
 800bd0c:	7fffffff 	.word	0x7fffffff
 800bd10:	20001d54 	.word	0x20001d54
 800bd14:	200000b0 	.word	0x200000b0
 800bd18:	20001d5c 	.word	0x20001d5c
 800bd1c:	200000b4 	.word	0x200000b4
 800bd20:	200000c0 	.word	0x200000c0
 800bd24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd26:	2220      	movs	r2, #32
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	22a4      	movs	r2, #164	@ 0xa4
 800bd2c:	18ba      	adds	r2, r7, r2
 800bd2e:	6812      	ldr	r2, [r2, #0]
 800bd30:	409a      	lsls	r2, r3
 800bd32:	0013      	movs	r3, r2
 800bd34:	22a0      	movs	r2, #160	@ 0xa0
 800bd36:	18ba      	adds	r2, r7, r2
 800bd38:	6811      	ldr	r1, [r2, #0]
 800bd3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd3c:	40d1      	lsrs	r1, r2
 800bd3e:	61b9      	str	r1, [r7, #24]
 800bd40:	69ba      	ldr	r2, [r7, #24]
 800bd42:	431a      	orrs	r2, r3
 800bd44:	61ba      	str	r2, [r7, #24]
 800bd46:	23a4      	movs	r3, #164	@ 0xa4
 800bd48:	18fb      	adds	r3, r7, r3
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd4e:	40da      	lsrs	r2, r3
 800bd50:	61fa      	str	r2, [r7, #28]
 800bd52:	69ba      	ldr	r2, [r7, #24]
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	21a0      	movs	r1, #160	@ 0xa0
 800bd58:	1879      	adds	r1, r7, r1
 800bd5a:	600a      	str	r2, [r1, #0]
 800bd5c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2294      	movs	r2, #148	@ 0x94
 800bd62:	18ba      	adds	r2, r7, r2
 800bd64:	6013      	str	r3, [r2, #0]
 800bd66:	e02c      	b.n	800bdc2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800bd68:	2330      	movs	r3, #48	@ 0x30
 800bd6a:	18fa      	adds	r2, r7, r3
 800bd6c:	2394      	movs	r3, #148	@ 0x94
 800bd6e:	18fb      	adds	r3, r7, r3
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	00db      	lsls	r3, r3, #3
 800bd74:	18d3      	adds	r3, r2, r3
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd7c:	3920      	subs	r1, #32
 800bd7e:	2900      	cmp	r1, #0
 800bd80:	db03      	blt.n	800bd8a <calculateSPLQ31+0x412>
 800bd82:	0018      	movs	r0, r3
 800bd84:	40c8      	lsrs	r0, r1
 800bd86:	0004      	movs	r4, r0
 800bd88:	e00a      	b.n	800bda0 <calculateSPLQ31+0x428>
 800bd8a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd8c:	2020      	movs	r0, #32
 800bd8e:	1a41      	subs	r1, r0, r1
 800bd90:	0018      	movs	r0, r3
 800bd92:	4088      	lsls	r0, r1
 800bd94:	0001      	movs	r1, r0
 800bd96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bd98:	0016      	movs	r6, r2
 800bd9a:	40c6      	lsrs	r6, r0
 800bd9c:	0034      	movs	r4, r6
 800bd9e:	430c      	orrs	r4, r1
 800bda0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bda2:	40cb      	lsrs	r3, r1
 800bda4:	001d      	movs	r5, r3
 800bda6:	2330      	movs	r3, #48	@ 0x30
 800bda8:	18fa      	adds	r2, r7, r3
 800bdaa:	2194      	movs	r1, #148	@ 0x94
 800bdac:	187b      	adds	r3, r7, r1
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	18d3      	adds	r3, r2, r3
 800bdb4:	601c      	str	r4, [r3, #0]
 800bdb6:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bdb8:	187b      	adds	r3, r7, r1
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	187a      	adds	r2, r7, r1
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	2394      	movs	r3, #148	@ 0x94
 800bdc4:	18fb      	adds	r3, r7, r3
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b05      	cmp	r3, #5
 800bdca:	d9cd      	bls.n	800bd68 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800bdcc:	230f      	movs	r3, #15
 800bdce:	425d      	negs	r5, r3
 800bdd0:	2305      	movs	r3, #5
 800bdd2:	425e      	negs	r6, r3
 800bdd4:	4b4a      	ldr	r3, [pc, #296]	@ (800bf00 <calculateSPLQ31+0x588>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	4b4a      	ldr	r3, [pc, #296]	@ (800bf04 <calculateSPLQ31+0x58c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	21a0      	movs	r1, #160	@ 0xa0
 800bde2:	1879      	adds	r1, r7, r1
 800bde4:	6808      	ldr	r0, [r1, #0]
 800bde6:	6849      	ldr	r1, [r1, #4]
 800bde8:	4c47      	ldr	r4, [pc, #284]	@ (800bf08 <calculateSPLQ31+0x590>)
 800bdea:	9403      	str	r4, [sp, #12]
 800bdec:	4c47      	ldr	r4, [pc, #284]	@ (800bf0c <calculateSPLQ31+0x594>)
 800bdee:	9402      	str	r4, [sp, #8]
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	9200      	str	r2, [sp, #0]
 800bdf4:	0033      	movs	r3, r6
 800bdf6:	002a      	movs	r2, r5
 800bdf8:	f000 fa86 	bl	800c308 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	2290      	movs	r2, #144	@ 0x90
 800be00:	18ba      	adds	r2, r7, r2
 800be02:	6013      	str	r3, [r2, #0]
 800be04:	e026      	b.n	800be54 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800be06:	2330      	movs	r3, #48	@ 0x30
 800be08:	18fa      	adds	r2, r7, r3
 800be0a:	2490      	movs	r4, #144	@ 0x90
 800be0c:	193b      	adds	r3, r7, r4
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	18d3      	adds	r3, r2, r3
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	6859      	ldr	r1, [r3, #4]
 800be18:	230f      	movs	r3, #15
 800be1a:	425d      	negs	r5, r3
 800be1c:	2305      	movs	r3, #5
 800be1e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800be20:	193b      	adds	r3, r7, r4
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	009a      	lsls	r2, r3, #2
 800be26:	4b3a      	ldr	r3, [pc, #232]	@ (800bf10 <calculateSPLQ31+0x598>)
 800be28:	18d3      	adds	r3, r2, r3
 800be2a:	193a      	adds	r2, r7, r4
 800be2c:	6812      	ldr	r2, [r2, #0]
 800be2e:	0094      	lsls	r4, r2, #2
 800be30:	4a38      	ldr	r2, [pc, #224]	@ (800bf14 <calculateSPLQ31+0x59c>)
 800be32:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800be34:	9203      	str	r2, [sp, #12]
 800be36:	9302      	str	r3, [sp, #8]
 800be38:	2300      	movs	r3, #0
 800be3a:	9301      	str	r3, [sp, #4]
 800be3c:	2300      	movs	r3, #0
 800be3e:	9300      	str	r3, [sp, #0]
 800be40:	0033      	movs	r3, r6
 800be42:	002a      	movs	r2, r5
 800be44:	f000 fa60 	bl	800c308 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800be48:	2490      	movs	r4, #144	@ 0x90
 800be4a:	193b      	adds	r3, r7, r4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3301      	adds	r3, #1
 800be50:	193a      	adds	r2, r7, r4
 800be52:	6013      	str	r3, [r2, #0]
 800be54:	2390      	movs	r3, #144	@ 0x90
 800be56:	18fb      	adds	r3, r7, r3
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b05      	cmp	r3, #5
 800be5c:	d9d3      	bls.n	800be06 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800be5e:	4b2b      	ldr	r3, [pc, #172]	@ (800bf0c <calculateSPLQ31+0x594>)
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	4b2d      	ldr	r3, [pc, #180]	@ (800bf18 <calculateSPLQ31+0x5a0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	18d2      	adds	r2, r2, r3
 800be68:	4b2b      	ldr	r3, [pc, #172]	@ (800bf18 <calculateSPLQ31+0x5a0>)
 800be6a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800be6c:	4b26      	ldr	r3, [pc, #152]	@ (800bf08 <calculateSPLQ31+0x590>)
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	4b2a      	ldr	r3, [pc, #168]	@ (800bf1c <calculateSPLQ31+0x5a4>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	18d2      	adds	r2, r2, r3
 800be76:	4b29      	ldr	r3, [pc, #164]	@ (800bf1c <calculateSPLQ31+0x5a4>)
 800be78:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800be7a:	2300      	movs	r3, #0
 800be7c:	228c      	movs	r2, #140	@ 0x8c
 800be7e:	18ba      	adds	r2, r7, r2
 800be80:	6013      	str	r3, [r2, #0]
 800be82:	e025      	b.n	800bed0 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800be84:	4b22      	ldr	r3, [pc, #136]	@ (800bf10 <calculateSPLQ31+0x598>)
 800be86:	208c      	movs	r0, #140	@ 0x8c
 800be88:	183a      	adds	r2, r7, r0
 800be8a:	6812      	ldr	r2, [r2, #0]
 800be8c:	0092      	lsls	r2, r2, #2
 800be8e:	58d2      	ldr	r2, [r2, r3]
 800be90:	4b23      	ldr	r3, [pc, #140]	@ (800bf20 <calculateSPLQ31+0x5a8>)
 800be92:	1839      	adds	r1, r7, r0
 800be94:	6809      	ldr	r1, [r1, #0]
 800be96:	0089      	lsls	r1, r1, #2
 800be98:	58cb      	ldr	r3, [r1, r3]
 800be9a:	18d1      	adds	r1, r2, r3
 800be9c:	4b20      	ldr	r3, [pc, #128]	@ (800bf20 <calculateSPLQ31+0x5a8>)
 800be9e:	183a      	adds	r2, r7, r0
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	0092      	lsls	r2, r2, #2
 800bea4:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800bea6:	4b1b      	ldr	r3, [pc, #108]	@ (800bf14 <calculateSPLQ31+0x59c>)
 800bea8:	183a      	adds	r2, r7, r0
 800beaa:	6812      	ldr	r2, [r2, #0]
 800beac:	0092      	lsls	r2, r2, #2
 800beae:	58d2      	ldr	r2, [r2, r3]
 800beb0:	4b1c      	ldr	r3, [pc, #112]	@ (800bf24 <calculateSPLQ31+0x5ac>)
 800beb2:	1839      	adds	r1, r7, r0
 800beb4:	6809      	ldr	r1, [r1, #0]
 800beb6:	0089      	lsls	r1, r1, #2
 800beb8:	58cb      	ldr	r3, [r1, r3]
 800beba:	18d1      	adds	r1, r2, r3
 800bebc:	4b19      	ldr	r3, [pc, #100]	@ (800bf24 <calculateSPLQ31+0x5ac>)
 800bebe:	183a      	adds	r2, r7, r0
 800bec0:	6812      	ldr	r2, [r2, #0]
 800bec2:	0092      	lsls	r2, r2, #2
 800bec4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bec6:	183b      	adds	r3, r7, r0
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	3301      	adds	r3, #1
 800becc:	183a      	adds	r2, r7, r0
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	238c      	movs	r3, #140	@ 0x8c
 800bed2:	18fb      	adds	r3, r7, r3
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b05      	cmp	r3, #5
 800bed8:	d9d4      	bls.n	800be84 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800beda:	4b13      	ldr	r3, [pc, #76]	@ (800bf28 <calculateSPLQ31+0x5b0>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	1c5a      	adds	r2, r3, #1
 800bee0:	4b11      	ldr	r3, [pc, #68]	@ (800bf28 <calculateSPLQ31+0x5b0>)
 800bee2:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800bee4:	4b10      	ldr	r3, [pc, #64]	@ (800bf28 <calculateSPLQ31+0x5b0>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b0f      	cmp	r3, #15
 800beea:	d905      	bls.n	800bef8 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800beec:	4b0f      	ldr	r3, [pc, #60]	@ (800bf2c <calculateSPLQ31+0x5b4>)
 800beee:	2201      	movs	r2, #1
 800bef0:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bef2:	4b0f      	ldr	r3, [pc, #60]	@ (800bf30 <calculateSPLQ31+0x5b8>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	701a      	strb	r2, [r3, #0]
    }
}
 800bef8:	46c0      	nop			@ (mov r8, r8)
 800befa:	46bd      	mov	sp, r7
 800befc:	b02f      	add	sp, #188	@ 0xbc
 800befe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf00:	200000b8 	.word	0x200000b8
 800bf04:	200000bc 	.word	0x200000bc
 800bf08:	200012d4 	.word	0x200012d4
 800bf0c:	200012d0 	.word	0x200012d0
 800bf10:	200012d8 	.word	0x200012d8
 800bf14:	200012f0 	.word	0x200012f0
 800bf18:	20001d18 	.word	0x20001d18
 800bf1c:	20001d1c 	.word	0x20001d1c
 800bf20:	20001d20 	.word	0x20001d20
 800bf24:	20001d38 	.word	0x20001d38
 800bf28:	20001d50 	.word	0x20001d50
 800bf2c:	200012c4 	.word	0x200012c4
 800bf30:	200012c2 	.word	0x200012c2

0800bf34 <resetSPLstate>:

static void resetSPLstate(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800bf3a:	4b11      	ldr	r3, [pc, #68]	@ (800bf80 <resetSPLstate+0x4c>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800bf40:	4b10      	ldr	r3, [pc, #64]	@ (800bf84 <resetSPLstate+0x50>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800bf46:	4b10      	ldr	r3, [pc, #64]	@ (800bf88 <resetSPLstate+0x54>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	607b      	str	r3, [r7, #4]
 800bf50:	e00c      	b.n	800bf6c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800bf52:	4b0e      	ldr	r3, [pc, #56]	@ (800bf8c <resetSPLstate+0x58>)
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	0092      	lsls	r2, r2, #2
 800bf58:	2100      	movs	r1, #0
 800bf5a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800bf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf90 <resetSPLstate+0x5c>)
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	0092      	lsls	r2, r2, #2
 800bf62:	2100      	movs	r1, #0
 800bf64:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	607b      	str	r3, [r7, #4]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b05      	cmp	r3, #5
 800bf70:	d9ef      	bls.n	800bf52 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800bf72:	4b08      	ldr	r3, [pc, #32]	@ (800bf94 <resetSPLstate+0x60>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	701a      	strb	r2, [r3, #0]
}
 800bf78:	46c0      	nop			@ (mov r8, r8)
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	20001d18 	.word	0x20001d18
 800bf84:	20001d1c 	.word	0x20001d1c
 800bf88:	20001d50 	.word	0x20001d50
 800bf8c:	20001d20 	.word	0x20001d20
 800bf90:	20001d38 	.word	0x20001d38
 800bf94:	200012c4 	.word	0x200012c4

0800bf98 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800bf98:	b5b0      	push	{r4, r5, r7, lr}
 800bf9a:	b090      	sub	sp, #64	@ 0x40
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	0019      	movs	r1, r3
 800bfa4:	1dfb      	adds	r3, r7, #7
 800bfa6:	701a      	strb	r2, [r3, #0]
 800bfa8:	1dbb      	adds	r3, r7, #6
 800bfaa:	1c0a      	adds	r2, r1, #0
 800bfac:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800bfae:	1dfb      	adds	r3, r7, #7
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d005      	beq.n	800bfc2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800bfb6:	4b3b      	ldr	r3, [pc, #236]	@ (800c0a4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800bfbc:	4b3a      	ldr	r3, [pc, #232]	@ (800c0a8 <getFilteredMaxAmplitudeQ31+0x110>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800bfca:	2305      	movs	r3, #5
 800bfcc:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800bfce:	2300      	movs	r3, #0
 800bfd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfd2:	e040      	b.n	800c056 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800bfd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	18d3      	adds	r3, r2, r3
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe0:	409a      	lsls	r2, r3
 800bfe2:	0013      	movs	r3, r2
 800bfe4:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800bfe6:	4b30      	ldr	r3, [pc, #192]	@ (800c0a8 <getFilteredMaxAmplitudeQ31+0x110>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	425a      	negs	r2, r3
 800bfec:	4b2e      	ldr	r3, [pc, #184]	@ (800c0a8 <getFilteredMaxAmplitudeQ31+0x110>)
 800bfee:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800bff0:	2418      	movs	r4, #24
 800bff2:	193a      	adds	r2, r7, r4
 800bff4:	492c      	ldr	r1, [pc, #176]	@ (800c0a8 <getFilteredMaxAmplitudeQ31+0x110>)
 800bff6:	231c      	movs	r3, #28
 800bff8:	18f8      	adds	r0, r7, r3
 800bffa:	2301      	movs	r3, #1
 800bffc:	f011 f994 	bl	801d328 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c000:	2514      	movs	r5, #20
 800c002:	197a      	adds	r2, r7, r5
 800c004:	1939      	adds	r1, r7, r4
 800c006:	4829      	ldr	r0, [pc, #164]	@ (800c0ac <getFilteredMaxAmplitudeQ31+0x114>)
 800c008:	2301      	movs	r3, #1
 800c00a:	f011 f95b 	bl	801d2c4 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c00e:	2410      	movs	r4, #16
 800c010:	193a      	adds	r2, r7, r4
 800c012:	4924      	ldr	r1, [pc, #144]	@ (800c0a4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c014:	4826      	ldr	r0, [pc, #152]	@ (800c0b0 <getFilteredMaxAmplitudeQ31+0x118>)
 800c016:	2301      	movs	r3, #1
 800c018:	f011 f954 	bl	801d2c4 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c01c:	4a21      	ldr	r2, [pc, #132]	@ (800c0a4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c01e:	1939      	adds	r1, r7, r4
 800c020:	1978      	adds	r0, r7, r5
 800c022:	2301      	movs	r3, #1
 800c024:	f011 f980 	bl	801d328 <arm_add_q31>

        lastData = fx;
 800c028:	69fa      	ldr	r2, [r7, #28]
 800c02a:	4b1f      	ldr	r3, [pc, #124]	@ (800c0a8 <getFilteredMaxAmplitudeQ31+0x110>)
 800c02c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c02e:	4b1d      	ldr	r3, [pc, #116]	@ (800c0a4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c034:	429a      	cmp	r2, r3
 800c036:	da03      	bge.n	800c040 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c038:	4b1a      	ldr	r3, [pc, #104]	@ (800c0a4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c03e:	e007      	b.n	800c050 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c040:	4b18      	ldr	r3, [pc, #96]	@ (800c0a4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c046:	429a      	cmp	r2, r3
 800c048:	dd02      	ble.n	800c050 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c04a:	4b16      	ldr	r3, [pc, #88]	@ (800c0a4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c052:	3301      	adds	r3, #1
 800c054:	637b      	str	r3, [r7, #52]	@ 0x34
 800c056:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d3ba      	bcc.n	800bfd4 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c060:	17da      	asrs	r2, r3, #31
 800c062:	189b      	adds	r3, r3, r2
 800c064:	4053      	eors	r3, r2
 800c066:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c06a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c06c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	4293      	cmp	r3, r2
 800c072:	d200      	bcs.n	800c076 <getFilteredMaxAmplitudeQ31+0xde>
 800c074:	0013      	movs	r3, r2
 800c076:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	40da      	lsrs	r2, r3
 800c07e:	0013      	movs	r3, r2
 800c080:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c082:	1dbb      	adds	r3, r7, #6
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d007      	beq.n	800c09a <getFilteredMaxAmplitudeQ31+0x102>
 800c08a:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6a3a      	ldr	r2, [r7, #32]
 800c090:	429a      	cmp	r2, r3
 800c092:	d902      	bls.n	800c09a <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c094:	4b07      	ldr	r3, [pc, #28]	@ (800c0b4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c096:	6a3a      	ldr	r2, [r7, #32]
 800c098:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c09a:	6a3b      	ldr	r3, [r7, #32]
}
 800c09c:	0018      	movs	r0, r3
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	b010      	add	sp, #64	@ 0x40
 800c0a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c0a4:	20002154 	.word	0x20002154
 800c0a8:	20002158 	.word	0x20002158
 800c0ac:	08023b90 	.word	0x08023b90
 800c0b0:	08023b94 	.word	0x08023b94
 800c0b4:	200012cc 	.word	0x200012cc

0800c0b8 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c0c4:	4913      	ldr	r1, [pc, #76]	@ (800c114 <floatToIntAndFrac2dp+0x5c>)
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f7f4 ff6a 	bl	8000fa0 <__aeabi_fmul>
 800c0cc:	1c03      	adds	r3, r0, #0
 800c0ce:	1c18      	adds	r0, r3, #0
 800c0d0:	f015 fd5e 	bl	8021b90 <roundf>
 800c0d4:	1c03      	adds	r3, r0, #0
 800c0d6:	1c18      	adds	r0, r3, #0
 800c0d8:	f7f4 faa0 	bl	800061c <__aeabi_f2uiz>
 800c0dc:	0003      	movs	r3, r0
 800c0de:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2164      	movs	r1, #100	@ 0x64
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	f7f4 f85d 	bl	80001a4 <__udivsi3>
 800c0ea:	0003      	movs	r3, r0
 800c0ec:	001a      	movs	r2, r3
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2164      	movs	r1, #100	@ 0x64
 800c0fe:	434b      	muls	r3, r1
 800c100:	b2db      	uxtb	r3, r3
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	b2da      	uxtb	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	701a      	strb	r2, [r3, #0]
}
 800c10a:	46c0      	nop			@ (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b006      	add	sp, #24
 800c110:	bd80      	pop	{r7, pc}
 800c112:	46c0      	nop			@ (mov r8, r8)
 800c114:	42c80000 	.word	0x42c80000

0800c118 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c124:	4914      	ldr	r1, [pc, #80]	@ (800c178 <floatToIntAndFrac1dp+0x60>)
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	f7f4 ff3a 	bl	8000fa0 <__aeabi_fmul>
 800c12c:	1c03      	adds	r3, r0, #0
 800c12e:	1c18      	adds	r0, r3, #0
 800c130:	f015 fd2e 	bl	8021b90 <roundf>
 800c134:	1c03      	adds	r3, r0, #0
 800c136:	1c18      	adds	r0, r3, #0
 800c138:	f7f4 fa70 	bl	800061c <__aeabi_f2uiz>
 800c13c:	0003      	movs	r3, r0
 800c13e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	210a      	movs	r1, #10
 800c144:	0018      	movs	r0, r3
 800c146:	f7f4 f82d 	bl	80001a4 <__udivsi3>
 800c14a:	0003      	movs	r3, r0
 800c14c:	001a      	movs	r2, r3
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	b2da      	uxtb	r2, r3
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	1c19      	adds	r1, r3, #0
 800c15e:	0089      	lsls	r1, r1, #2
 800c160:	18cb      	adds	r3, r1, r3
 800c162:	18db      	adds	r3, r3, r3
 800c164:	b2db      	uxtb	r3, r3
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	701a      	strb	r2, [r3, #0]
}
 800c16e:	46c0      	nop			@ (mov r8, r8)
 800c170:	46bd      	mov	sp, r7
 800c172:	b006      	add	sp, #24
 800c174:	bd80      	pop	{r7, pc}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	41200000 	.word	0x41200000

0800c17c <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c17c:	b590      	push	{r4, r7, lr}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7f5 fa20 	bl	80015d0 <__aeabi_i2f>
 800c190:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c192:	6838      	ldr	r0, [r7, #0]
 800c194:	f7f5 fa1c 	bl	80015d0 <__aeabi_i2f>
 800c198:	1c03      	adds	r3, r0, #0
 800c19a:	4918      	ldr	r1, [pc, #96]	@ (800c1fc <sumToIntAverage+0x80>)
 800c19c:	1c18      	adds	r0, r3, #0
 800c19e:	f7f4 fd19 	bl	8000bd4 <__aeabi_fdiv>
 800c1a2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c1a4:	1c19      	adds	r1, r3, #0
 800c1a6:	1c20      	adds	r0, r4, #0
 800c1a8:	f7f4 fb8a 	bl	80008c0 <__aeabi_fadd>
 800c1ac:	1c03      	adds	r3, r0, #0
 800c1ae:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c1b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1b2:	f7f5 fa59 	bl	8001668 <__aeabi_ui2f>
 800c1b6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c1b8:	1c19      	adds	r1, r3, #0
 800c1ba:	1c20      	adds	r0, r4, #0
 800c1bc:	f7f4 fd0a 	bl	8000bd4 <__aeabi_fdiv>
 800c1c0:	1c03      	adds	r3, r0, #0
 800c1c2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	2310      	movs	r3, #16
 800c1cc:	18f9      	adds	r1, r7, r3
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	1c18      	adds	r0, r3, #0
 800c1d2:	f7ff ffa1 	bl	800c118 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2bff      	cmp	r3, #255	@ 0xff
 800c1da:	d906      	bls.n	800c1ea <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	22ff      	movs	r2, #255	@ 0xff
 800c1e0:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2209      	movs	r2, #9
 800c1e6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c1e8:	e003      	b.n	800c1f2 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	701a      	strb	r2, [r3, #0]
}
 800c1f2:	46c0      	nop			@ (mov r8, r8)
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	b007      	add	sp, #28
 800c1f8:	bd90      	pop	{r4, r7, pc}
 800c1fa:	46c0      	nop			@ (mov r8, r8)
 800c1fc:	41200000 	.word	0x41200000

0800c200 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2280      	movs	r2, #128	@ 0x80
 800c212:	0612      	lsls	r2, r2, #24
 800c214:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	4a18      	ldr	r2, [pc, #96]	@ (800c27c <findMinMax+0x7c>)
 800c21a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c21c:	2300      	movs	r3, #0
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	e022      	b.n	800c268 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	18d3      	adds	r3, r2, r3
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	429a      	cmp	r2, r3
 800c232:	da06      	bge.n	800c242 <findMinMax+0x42>
        {
            min[0] = array[i];
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	18d3      	adds	r3, r2, r3
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	18d3      	adds	r3, r2, r3
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	429a      	cmp	r2, r3
 800c252:	dd06      	ble.n	800c262 <findMinMax+0x62>
        {
            max[0] = array[i];
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	18d3      	adds	r3, r2, r3
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	3301      	adds	r3, #1
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d3d8      	bcc.n	800c222 <findMinMax+0x22>
        }
    }
}
 800c270:	46c0      	nop			@ (mov r8, r8)
 800c272:	46c0      	nop			@ (mov r8, r8)
 800c274:	46bd      	mov	sp, r7
 800c276:	b006      	add	sp, #24
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	46c0      	nop			@ (mov r8, r8)
 800c27c:	7fffffff 	.word	0x7fffffff

0800c280 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d302      	bcc.n	800c29c <getPo2factor+0x1c>
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d107      	bne.n	800c2ac <getPo2factor+0x2c>
    {
        return 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	e00d      	b.n	800c2bc <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	085b      	lsrs	r3, r3, #1
 800c2a4:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d2f5      	bcs.n	800c2a0 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
}
 800c2bc:	0018      	movs	r0, r3
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	b004      	add	sp, #16
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
 800c2d0:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7f5 f9c8 	bl	8001668 <__aeabi_ui2f>
 800c2d8:	1c03      	adds	r3, r0, #0
 800c2da:	1c19      	adds	r1, r3, #0
 800c2dc:	68b8      	ldr	r0, [r7, #8]
 800c2de:	f7f4 fe5f 	bl	8000fa0 <__aeabi_fmul>
 800c2e2:	1c03      	adds	r3, r0, #0
 800c2e4:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	2310      	movs	r3, #16
 800c2ee:	18f9      	adds	r1, r7, r3
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	1c18      	adds	r0, r3, #0
 800c2f4:	f7ff fee0 	bl	800c0b8 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	b29a      	uxth	r2, r3
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	801a      	strh	r2, [r3, #0]
}
 800c300:	46c0      	nop			@ (mov r8, r8)
 800c302:	46bd      	mov	sp, r7
 800c304:	b006      	add	sp, #24
 800c306:	bd80      	pop	{r7, pc}

0800c308 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60b8      	str	r0, [r7, #8]
 800c310:	60f9      	str	r1, [r7, #12]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	6a3a      	ldr	r2, [r7, #32]
 800c31a:	68b8      	ldr	r0, [r7, #8]
 800c31c:	68f9      	ldr	r1, [r7, #12]
 800c31e:	f7fa fbe5 	bl	8006aec <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	18d2      	adds	r2, r2, r3
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	18d2      	adds	r2, r2, r3
 800c32e:	6a3b      	ldr	r3, [r7, #32]
 800c330:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	18d2      	adds	r2, r2, r3
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	18d2      	adds	r2, r2, r3
 800c33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c340:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	0011      	movs	r1, r2
 800c348:	0018      	movs	r0, r3
 800c34a:	f7fa fc5f 	bl	8006c0c <correctIntFracNumber>
}
 800c34e:	46c0      	nop			@ (mov r8, r8)
 800c350:	46bd      	mov	sp, r7
 800c352:	b004      	add	sp, #16
 800c354:	bd80      	pop	{r7, pc}

0800c356 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c366:	2300      	movs	r3, #0
 800c368:	613b      	str	r3, [r7, #16]
 800c36a:	e019      	b.n	800c3a0 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	18d3      	adds	r3, r2, r3
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	3201      	adds	r2, #1
 800c37c:	0052      	lsls	r2, r2, #1
 800c37e:	68f9      	ldr	r1, [r7, #12]
 800c380:	188a      	adds	r2, r1, r2
 800c382:	8812      	ldrh	r2, [r2, #0]
 800c384:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c386:	0019      	movs	r1, r3
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c390:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c392:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	3301      	adds	r3, #1
 800c398:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	3304      	adds	r3, #4
 800c39e:	613b      	str	r3, [r7, #16]
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d3e1      	bcc.n	800c36c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c3a8:	46c0      	nop			@ (mov r8, r8)
 800c3aa:	46c0      	nop			@ (mov r8, r8)
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	b006      	add	sp, #24
 800c3b0:	bd80      	pop	{r7, pc}
	...

0800c3b4 <InitDone>:
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;
//Battery_Status powerCheck();

void InitDone(){
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
  init = false;
 800c3b8:	4b02      	ldr	r3, [pc, #8]	@ (800c3c4 <InitDone+0x10>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	701a      	strb	r2, [r3, #0]
}
 800c3be:	46c0      	nop			@ (mov r8, r8)
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	200000c4 	.word	0x200000c4

0800c3c8 <batteryChargeCheck>:
  if (powerCheck() != USB_PLUGGED_IN) {
    userToggle = false;
  }
}
*/
Battery_Status batteryChargeCheck(){
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800c3ce:	f7f9 fdd1 	bl	8005f74 <ReadBatteryVoltage>
 800c3d2:	1c03      	adds	r3, r0, #0
 800c3d4:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800c3d6:	491f      	ldr	r1, [pc, #124]	@ (800c454 <batteryChargeCheck+0x8c>)
 800c3d8:	6838      	ldr	r0, [r7, #0]
 800c3da:	f7f4 f8a9 	bl	8000530 <__aeabi_fcmplt>
 800c3de:	1e03      	subs	r3, r0, #0
 800c3e0:	d002      	beq.n	800c3e8 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800c3e2:	1dfb      	adds	r3, r7, #7
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800c3e8:	6838      	ldr	r0, [r7, #0]
 800c3ea:	f7f7 f83b 	bl	8003464 <__aeabi_f2d>
 800c3ee:	4a1a      	ldr	r2, [pc, #104]	@ (800c458 <batteryChargeCheck+0x90>)
 800c3f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c45c <batteryChargeCheck+0x94>)
 800c3f2:	f7f4 f863 	bl	80004bc <__aeabi_dcmplt>
 800c3f6:	1e03      	subs	r3, r0, #0
 800c3f8:	d008      	beq.n	800c40c <batteryChargeCheck+0x44>
 800c3fa:	4916      	ldr	r1, [pc, #88]	@ (800c454 <batteryChargeCheck+0x8c>)
 800c3fc:	6838      	ldr	r0, [r7, #0]
 800c3fe:	f7f4 f8b5 	bl	800056c <__aeabi_fcmpge>
 800c402:	1e03      	subs	r3, r0, #0
 800c404:	d002      	beq.n	800c40c <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800c406:	1dfb      	adds	r3, r7, #7
 800c408:	2202      	movs	r2, #2
 800c40a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800c40c:	2181      	movs	r1, #129	@ 0x81
 800c40e:	05c9      	lsls	r1, r1, #23
 800c410:	6838      	ldr	r0, [r7, #0]
 800c412:	f7f4 f88d 	bl	8000530 <__aeabi_fcmplt>
 800c416:	1e03      	subs	r3, r0, #0
 800c418:	d00b      	beq.n	800c432 <batteryChargeCheck+0x6a>
 800c41a:	6838      	ldr	r0, [r7, #0]
 800c41c:	f7f7 f822 	bl	8003464 <__aeabi_f2d>
 800c420:	4a0d      	ldr	r2, [pc, #52]	@ (800c458 <batteryChargeCheck+0x90>)
 800c422:	4b0e      	ldr	r3, [pc, #56]	@ (800c45c <batteryChargeCheck+0x94>)
 800c424:	f7f4 f868 	bl	80004f8 <__aeabi_dcmpge>
 800c428:	1e03      	subs	r3, r0, #0
 800c42a:	d002      	beq.n	800c432 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800c42c:	1dfb      	adds	r3, r7, #7
 800c42e:	2203      	movs	r2, #3
 800c430:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800c432:	2181      	movs	r1, #129	@ 0x81
 800c434:	05c9      	lsls	r1, r1, #23
 800c436:	6838      	ldr	r0, [r7, #0]
 800c438:	f7f4 f898 	bl	800056c <__aeabi_fcmpge>
 800c43c:	1e03      	subs	r3, r0, #0
 800c43e:	d002      	beq.n	800c446 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800c440:	1dfb      	adds	r3, r7, #7
 800c442:	2204      	movs	r2, #4
 800c444:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800c446:	1dfb      	adds	r3, r7, #7
 800c448:	781b      	ldrb	r3, [r3, #0]
}
 800c44a:	0018      	movs	r0, r3
 800c44c:	46bd      	mov	sp, r7
 800c44e:	b002      	add	sp, #8
 800c450:	bd80      	pop	{r7, pc}
 800c452:	46c0      	nop			@ (mov r8, r8)
 800c454:	40600000 	.word	0x40600000
 800c458:	9999999a 	.word	0x9999999a
 800c45c:	400d9999 	.word	0x400d9999

0800c460 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800c460:	b590      	push	{r4, r7, lr}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	0004      	movs	r4, r0
 800c468:	0008      	movs	r0, r1
 800c46a:	0011      	movs	r1, r2
 800c46c:	1dbb      	adds	r3, r7, #6
 800c46e:	1c22      	adds	r2, r4, #0
 800c470:	801a      	strh	r2, [r3, #0]
 800c472:	1d3b      	adds	r3, r7, #4
 800c474:	1c02      	adds	r2, r0, #0
 800c476:	801a      	strh	r2, [r3, #0]
 800c478:	1cbb      	adds	r3, r7, #2
 800c47a:	1c0a      	adds	r2, r1, #0
 800c47c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c47e:	4b0f      	ldr	r3, [pc, #60]	@ (800c4bc <SetStatusLED+0x5c>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d107      	bne.n	800c496 <SetStatusLED+0x36>
 800c486:	4b0e      	ldr	r3, [pc, #56]	@ (800c4c0 <SetStatusLED+0x60>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d103      	bne.n	800c496 <SetStatusLED+0x36>
 800c48e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c4 <SetStatusLED+0x64>)
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00e      	beq.n	800c4b4 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800c496:	2380      	movs	r3, #128	@ 0x80
 800c498:	05db      	lsls	r3, r3, #23
 800c49a:	1dba      	adds	r2, r7, #6
 800c49c:	8812      	ldrh	r2, [r2, #0]
 800c49e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800c4a0:	2380      	movs	r3, #128	@ 0x80
 800c4a2:	05db      	lsls	r3, r3, #23
 800c4a4:	1d3a      	adds	r2, r7, #4
 800c4a6:	8812      	ldrh	r2, [r2, #0]
 800c4a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800c4aa:	2380      	movs	r3, #128	@ 0x80
 800c4ac:	05db      	lsls	r3, r3, #23
 800c4ae:	1cba      	adds	r2, r7, #2
 800c4b0:	8812      	ldrh	r2, [r2, #0]
 800c4b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c4b4:	46c0      	nop			@ (mov r8, r8)
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	b003      	add	sp, #12
 800c4ba:	bd90      	pop	{r4, r7, pc}
 800c4bc:	2000215d 	.word	0x2000215d
 800c4c0:	200000c4 	.word	0x200000c4
 800c4c4:	2000215e 	.word	0x2000215e

0800c4c8 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800c4c8:	b590      	push	{r4, r7, lr}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	0004      	movs	r4, r0
 800c4d0:	0008      	movs	r0, r1
 800c4d2:	0011      	movs	r1, r2
 800c4d4:	1dfb      	adds	r3, r7, #7
 800c4d6:	1c22      	adds	r2, r4, #0
 800c4d8:	701a      	strb	r2, [r3, #0]
 800c4da:	1dbb      	adds	r3, r7, #6
 800c4dc:	1c02      	adds	r2, r0, #0
 800c4de:	701a      	strb	r2, [r3, #0]
 800c4e0:	1d7b      	adds	r3, r7, #5
 800c4e2:	1c0a      	adds	r2, r1, #0
 800c4e4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800c4e6:	4b19      	ldr	r3, [pc, #100]	@ (800c54c <SetDBLED+0x84>)
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d107      	bne.n	800c4fe <SetDBLED+0x36>
 800c4ee:	4b18      	ldr	r3, [pc, #96]	@ (800c550 <SetDBLED+0x88>)
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d103      	bne.n	800c4fe <SetDBLED+0x36>
 800c4f6:	4b17      	ldr	r3, [pc, #92]	@ (800c554 <SetDBLED+0x8c>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d022      	beq.n	800c544 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800c4fe:	1dfb      	adds	r3, r7, #7
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2201      	movs	r2, #1
 800c504:	4053      	eors	r3, r2
 800c506:	b2db      	uxtb	r3, r3
 800c508:	001a      	movs	r2, r3
 800c50a:	4b13      	ldr	r3, [pc, #76]	@ (800c558 <SetDBLED+0x90>)
 800c50c:	2101      	movs	r1, #1
 800c50e:	0018      	movs	r0, r3
 800c510:	f002 fd69 	bl	800efe6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800c514:	1dbb      	adds	r3, r7, #6
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	2201      	movs	r2, #1
 800c51a:	4053      	eors	r3, r2
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	001a      	movs	r2, r3
 800c520:	2380      	movs	r3, #128	@ 0x80
 800c522:	005b      	lsls	r3, r3, #1
 800c524:	480c      	ldr	r0, [pc, #48]	@ (800c558 <SetDBLED+0x90>)
 800c526:	0019      	movs	r1, r3
 800c528:	f002 fd5d 	bl	800efe6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800c52c:	1d7b      	adds	r3, r7, #5
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2201      	movs	r2, #1
 800c532:	4053      	eors	r3, r2
 800c534:	b2db      	uxtb	r3, r3
 800c536:	001a      	movs	r2, r3
 800c538:	2380      	movs	r3, #128	@ 0x80
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	4806      	ldr	r0, [pc, #24]	@ (800c558 <SetDBLED+0x90>)
 800c53e:	0019      	movs	r1, r3
 800c540:	f002 fd51 	bl	800efe6 <HAL_GPIO_WritePin>
  }
}
 800c544:	46c0      	nop			@ (mov r8, r8)
 800c546:	46bd      	mov	sp, r7
 800c548:	b003      	add	sp, #12
 800c54a:	bd90      	pop	{r4, r7, pc}
 800c54c:	2000215d 	.word	0x2000215d
 800c550:	200000c4 	.word	0x200000c4
 800c554:	2000215e 	.word	0x2000215e
 800c558:	50000400 	.word	0x50000400

0800c55c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800c55c:	b590      	push	{r4, r7, lr}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	0004      	movs	r4, r0
 800c564:	0008      	movs	r0, r1
 800c566:	0011      	movs	r1, r2
 800c568:	1dbb      	adds	r3, r7, #6
 800c56a:	1c22      	adds	r2, r4, #0
 800c56c:	801a      	strh	r2, [r3, #0]
 800c56e:	1d3b      	adds	r3, r7, #4
 800c570:	1c02      	adds	r2, r0, #0
 800c572:	801a      	strh	r2, [r3, #0]
 800c574:	1cbb      	adds	r3, r7, #2
 800c576:	1c0a      	adds	r2, r1, #0
 800c578:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c57a:	4b0e      	ldr	r3, [pc, #56]	@ (800c5b4 <SetVocLED+0x58>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d107      	bne.n	800c592 <SetVocLED+0x36>
 800c582:	4b0d      	ldr	r3, [pc, #52]	@ (800c5b8 <SetVocLED+0x5c>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d103      	bne.n	800c592 <SetVocLED+0x36>
 800c58a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5bc <SetVocLED+0x60>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00b      	beq.n	800c5aa <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800c592:	4b0b      	ldr	r3, [pc, #44]	@ (800c5c0 <SetVocLED+0x64>)
 800c594:	1dba      	adds	r2, r7, #6
 800c596:	8812      	ldrh	r2, [r2, #0]
 800c598:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800c59a:	4b09      	ldr	r3, [pc, #36]	@ (800c5c0 <SetVocLED+0x64>)
 800c59c:	1d3a      	adds	r2, r7, #4
 800c59e:	8812      	ldrh	r2, [r2, #0]
 800c5a0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800c5a2:	4b07      	ldr	r3, [pc, #28]	@ (800c5c0 <SetVocLED+0x64>)
 800c5a4:	1cba      	adds	r2, r7, #2
 800c5a6:	8812      	ldrh	r2, [r2, #0]
 800c5a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c5aa:	46c0      	nop			@ (mov r8, r8)
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	b003      	add	sp, #12
 800c5b0:	bd90      	pop	{r4, r7, pc}
 800c5b2:	46c0      	nop			@ (mov r8, r8)
 800c5b4:	2000215d 	.word	0x2000215d
 800c5b8:	200000c4 	.word	0x200000c4
 800c5bc:	2000215e 	.word	0x2000215e
 800c5c0:	40000400 	.word	0x40000400

0800c5c4 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c5c8:	4b07      	ldr	r3, [pc, #28]	@ (800c5e8 <SetMeasurementIndicator+0x24>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d103      	bne.n	800c5d8 <SetMeasurementIndicator+0x14>
 800c5d0:	4b06      	ldr	r3, [pc, #24]	@ (800c5ec <SetMeasurementIndicator+0x28>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d003      	beq.n	800c5e0 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800c5d8:	2380      	movs	r3, #128	@ 0x80
 800c5da:	05db      	lsls	r3, r3, #23
 800c5dc:	4a04      	ldr	r2, [pc, #16]	@ (800c5f0 <SetMeasurementIndicator+0x2c>)
 800c5de:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c5e0:	46c0      	nop			@ (mov r8, r8)
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	46c0      	nop			@ (mov r8, r8)
 800c5e8:	2000215d 	.word	0x2000215d
 800c5ec:	2000215e 	.word	0x2000215e
 800c5f0:	00000bb8 	.word	0x00000bb8

0800c5f4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c5f8:	4b07      	ldr	r3, [pc, #28]	@ (800c618 <ResetMeasurementIndicator+0x24>)
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d103      	bne.n	800c608 <ResetMeasurementIndicator+0x14>
 800c600:	4b06      	ldr	r3, [pc, #24]	@ (800c61c <ResetMeasurementIndicator+0x28>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800c608:	2380      	movs	r3, #128	@ 0x80
 800c60a:	05db      	lsls	r3, r3, #23
 800c60c:	22fa      	movs	r2, #250	@ 0xfa
 800c60e:	0112      	lsls	r2, r2, #4
 800c610:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c612:	46c0      	nop			@ (mov r8, r8)
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	2000215d 	.word	0x2000215d
 800c61c:	2000215e 	.word	0x2000215e

0800c620 <SetMICIndicator>:
void SetMICIndicator(){
 800c620:	b580      	push	{r7, lr}
 800c622:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c624:	4b07      	ldr	r3, [pc, #28]	@ (800c644 <SetMICIndicator+0x24>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d103      	bne.n	800c634 <SetMICIndicator+0x14>
 800c62c:	4b06      	ldr	r3, [pc, #24]	@ (800c648 <SetMICIndicator+0x28>)
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d003      	beq.n	800c63c <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800c634:	2380      	movs	r3, #128	@ 0x80
 800c636:	05db      	lsls	r3, r3, #23
 800c638:	4a04      	ldr	r2, [pc, #16]	@ (800c64c <SetMICIndicator+0x2c>)
 800c63a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c63c:	46c0      	nop			@ (mov r8, r8)
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	46c0      	nop			@ (mov r8, r8)
 800c644:	2000215d 	.word	0x2000215d
 800c648:	2000215e 	.word	0x2000215e
 800c64c:	00000bb8 	.word	0x00000bb8

0800c650 <ResetMICIndicator>:
void ResetMICIndicator(){
 800c650:	b580      	push	{r7, lr}
 800c652:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c654:	4b07      	ldr	r3, [pc, #28]	@ (800c674 <ResetMICIndicator+0x24>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d103      	bne.n	800c664 <ResetMICIndicator+0x14>
 800c65c:	4b06      	ldr	r3, [pc, #24]	@ (800c678 <ResetMICIndicator+0x28>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d004      	beq.n	800c66e <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800c664:	2380      	movs	r3, #128	@ 0x80
 800c666:	05db      	lsls	r3, r3, #23
 800c668:	22fa      	movs	r2, #250	@ 0xfa
 800c66a:	0112      	lsls	r2, r2, #4
 800c66c:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c66e:	46c0      	nop			@ (mov r8, r8)
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	2000215d 	.word	0x2000215d
 800c678:	2000215e 	.word	0x2000215e

0800c67c <SetESPIndicator>:
void SetESPIndicator(){
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c680:	4b07      	ldr	r3, [pc, #28]	@ (800c6a0 <SetESPIndicator+0x24>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <SetESPIndicator+0x14>
 800c688:	4b06      	ldr	r3, [pc, #24]	@ (800c6a4 <SetESPIndicator+0x28>)
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800c690:	2380      	movs	r3, #128	@ 0x80
 800c692:	05db      	lsls	r3, r3, #23
 800c694:	4a04      	ldr	r2, [pc, #16]	@ (800c6a8 <SetESPIndicator+0x2c>)
 800c696:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c698:	46c0      	nop			@ (mov r8, r8)
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	46c0      	nop			@ (mov r8, r8)
 800c6a0:	2000215d 	.word	0x2000215d
 800c6a4:	2000215e 	.word	0x2000215e
 800c6a8:	00000bb8 	.word	0x00000bb8

0800c6ac <ResetESPIndicator>:
void ResetESPIndicator(){
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c6b0:	4b07      	ldr	r3, [pc, #28]	@ (800c6d0 <ResetESPIndicator+0x24>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d103      	bne.n	800c6c0 <ResetESPIndicator+0x14>
 800c6b8:	4b06      	ldr	r3, [pc, #24]	@ (800c6d4 <ResetESPIndicator+0x28>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d004      	beq.n	800c6ca <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800c6c0:	2380      	movs	r3, #128	@ 0x80
 800c6c2:	05db      	lsls	r3, r3, #23
 800c6c4:	22fa      	movs	r2, #250	@ 0xfa
 800c6c6:	0112      	lsls	r2, r2, #4
 800c6c8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c6ca:	46c0      	nop			@ (mov r8, r8)
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	2000215d 	.word	0x2000215d
 800c6d4:	2000215e 	.word	0x2000215e

0800c6d8 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800c6dc:	23fa      	movs	r3, #250	@ 0xfa
 800c6de:	011a      	lsls	r2, r3, #4
 800c6e0:	23fa      	movs	r3, #250	@ 0xfa
 800c6e2:	0119      	lsls	r1, r3, #4
 800c6e4:	23fa      	movs	r3, #250	@ 0xfa
 800c6e6:	011b      	lsls	r3, r3, #4
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	f7ff feb9 	bl	800c460 <SetStatusLED>
  SetDBLED(false,false,false);
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	f7ff fee8 	bl	800c4c8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800c6f8:	23fa      	movs	r3, #250	@ 0xfa
 800c6fa:	011a      	lsls	r2, r3, #4
 800c6fc:	23fa      	movs	r3, #250	@ 0xfa
 800c6fe:	0119      	lsls	r1, r3, #4
 800c700:	23fa      	movs	r3, #250	@ 0xfa
 800c702:	011b      	lsls	r3, r3, #4
 800c704:	0018      	movs	r0, r3
 800c706:	f7ff ff29 	bl	800c55c <SetVocLED>
return;
 800c70a:	46c0      	nop			@ (mov r8, r8)
}
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <powerCheck>:

Battery_Status powerCheck(){
 800c710:	b590      	push	{r4, r7, lr}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800c716:	f7f9 fcf3 	bl	8006100 <Check_USB_PowerOn>
 800c71a:	0003      	movs	r3, r0
 800c71c:	001a      	movs	r2, r3
 800c71e:	2301      	movs	r3, #1
 800c720:	4053      	eors	r3, r2
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <powerCheck+0x24>
    status = batteryChargeCheck();
 800c728:	1dfc      	adds	r4, r7, #7
 800c72a:	f7ff fe4d 	bl	800c3c8 <batteryChargeCheck>
 800c72e:	0003      	movs	r3, r0
 800c730:	7023      	strb	r3, [r4, #0]
 800c732:	e002      	b.n	800c73a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800c734:	1dfb      	adds	r3, r7, #7
 800c736:	2201      	movs	r2, #1
 800c738:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c73a:	1dfb      	adds	r3, r7, #7
 800c73c:	781b      	ldrb	r3, [r3, #0]
}
 800c73e:	0018      	movs	r0, r3
 800c740:	46bd      	mov	sp, r7
 800c742:	b003      	add	sp, #12
 800c744:	bd90      	pop	{r4, r7, pc}
	...

0800c748 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	0002      	movs	r2, r0
 800c750:	1dfb      	adds	r3, r7, #7
 800c752:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800c754:	1dfb      	adds	r3, r7, #7
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d105      	bne.n	800c768 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800c75c:	4a18      	ldr	r2, [pc, #96]	@ (800c7c0 <powerDisplay+0x78>)
 800c75e:	4b19      	ldr	r3, [pc, #100]	@ (800c7c4 <powerDisplay+0x7c>)
 800c760:	0019      	movs	r1, r3
 800c762:	2003      	movs	r0, #3
 800c764:	f000 fe26 	bl	800d3b4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800c768:	1dfb      	adds	r3, r7, #7
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2b04      	cmp	r3, #4
 800c76e:	d105      	bne.n	800c77c <powerDisplay+0x34>
    Debug("Battery fully charged");
 800c770:	4a15      	ldr	r2, [pc, #84]	@ (800c7c8 <powerDisplay+0x80>)
 800c772:	4b14      	ldr	r3, [pc, #80]	@ (800c7c4 <powerDisplay+0x7c>)
 800c774:	0019      	movs	r1, r3
 800c776:	2003      	movs	r0, #3
 800c778:	f000 fe1c 	bl	800d3b4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800c77c:	1dfb      	adds	r3, r7, #7
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2b03      	cmp	r3, #3
 800c782:	d105      	bne.n	800c790 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800c784:	4a11      	ldr	r2, [pc, #68]	@ (800c7cc <powerDisplay+0x84>)
 800c786:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c4 <powerDisplay+0x7c>)
 800c788:	0019      	movs	r1, r3
 800c78a:	2003      	movs	r0, #3
 800c78c:	f000 fe12 	bl	800d3b4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800c790:	1dfb      	adds	r3, r7, #7
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b02      	cmp	r3, #2
 800c796:	d105      	bne.n	800c7a4 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800c798:	4a0d      	ldr	r2, [pc, #52]	@ (800c7d0 <powerDisplay+0x88>)
 800c79a:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c4 <powerDisplay+0x7c>)
 800c79c:	0019      	movs	r1, r3
 800c79e:	2003      	movs	r0, #3
 800c7a0:	f000 fe08 	bl	800d3b4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800c7a4:	1dfb      	adds	r3, r7, #7
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d105      	bne.n	800c7b8 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800c7ac:	4a09      	ldr	r2, [pc, #36]	@ (800c7d4 <powerDisplay+0x8c>)
 800c7ae:	4b05      	ldr	r3, [pc, #20]	@ (800c7c4 <powerDisplay+0x7c>)
 800c7b0:	0019      	movs	r1, r3
 800c7b2:	2003      	movs	r0, #3
 800c7b4:	f000 fdfe 	bl	800d3b4 <CreateLine>
  }
}
 800c7b8:	46c0      	nop			@ (mov r8, r8)
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	b002      	add	sp, #8
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	08023508 	.word	0x08023508
 800c7c4:	08023518 	.word	0x08023518
 800c7c8:	0802351c 	.word	0x0802351c
 800c7cc:	08023534 	.word	0x08023534
 800c7d0:	08023554 	.word	0x08023554
 800c7d4:	0802356c 	.word	0x0802356c

0800c7d8 <configCheck>:

void configCheck(){
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800c7dc:	f7f9 fc9f 	bl	800611e <BootButton_Pressed>
 800c7e0:	1e03      	subs	r3, r0, #0
 800c7e2:	d007      	beq.n	800c7f4 <configCheck+0x1c>
 800c7e4:	f7f9 fcac 	bl	8006140 <UserButton_Pressed>
 800c7e8:	1e03      	subs	r3, r0, #0
 800c7ea:	d003      	beq.n	800c7f4 <configCheck+0x1c>
    configSet = true;
 800c7ec:	4b3d      	ldr	r3, [pc, #244]	@ (800c8e4 <configCheck+0x10c>)
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	e00a      	b.n	800c80a <configCheck+0x32>
  }
  else{
    configSet = false;
 800c7f4:	4b3b      	ldr	r3, [pc, #236]	@ (800c8e4 <configCheck+0x10c>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800c7fa:	f001 f979 	bl	800daf0 <HAL_GetTick>
 800c7fe:	0003      	movs	r3, r0
 800c800:	22fa      	movs	r2, #250	@ 0xfa
 800c802:	00d2      	lsls	r2, r2, #3
 800c804:	189a      	adds	r2, r3, r2
 800c806:	4b38      	ldr	r3, [pc, #224]	@ (800c8e8 <configCheck+0x110>)
 800c808:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800c80a:	4b36      	ldr	r3, [pc, #216]	@ (800c8e4 <configCheck+0x10c>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00d      	beq.n	800c82e <configCheck+0x56>
 800c812:	4b35      	ldr	r3, [pc, #212]	@ (800c8e8 <configCheck+0x110>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	0018      	movs	r0, r3
 800c818:	f000 fd76 	bl	800d308 <TimestampIsReached>
 800c81c:	1e03      	subs	r3, r0, #0
 800c81e:	d006      	beq.n	800c82e <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800c820:	f7f7 f8c6 	bl	80039b0 <SetConfigMode>
    SetDBLED(true, true, true);
 800c824:	2201      	movs	r2, #1
 800c826:	2101      	movs	r1, #1
 800c828:	2001      	movs	r0, #1
 800c82a:	f7ff fe4d 	bl	800c4c8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800c82e:	f7f9 fc76 	bl	800611e <BootButton_Pressed>
 800c832:	0003      	movs	r3, r0
 800c834:	001a      	movs	r2, r3
 800c836:	2301      	movs	r3, #1
 800c838:	4053      	eors	r3, r2
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d01d      	beq.n	800c87c <configCheck+0xa4>
 800c840:	f7f9 fc7e 	bl	8006140 <UserButton_Pressed>
 800c844:	1e03      	subs	r3, r0, #0
 800c846:	d019      	beq.n	800c87c <configCheck+0xa4>
 800c848:	4b28      	ldr	r3, [pc, #160]	@ (800c8ec <configCheck+0x114>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2201      	movs	r2, #1
 800c84e:	4053      	eors	r3, r2
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d012      	beq.n	800c87c <configCheck+0xa4>
    SetLEDsOff();
 800c856:	f7ff ff3f 	bl	800c6d8 <SetLEDsOff>
    userToggle = !userToggle;
 800c85a:	4b25      	ldr	r3, [pc, #148]	@ (800c8f0 <configCheck+0x118>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	1e5a      	subs	r2, r3, #1
 800c860:	4193      	sbcs	r3, r2
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2201      	movs	r2, #1
 800c866:	4053      	eors	r3, r2
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	1c1a      	adds	r2, r3, #0
 800c86c:	2301      	movs	r3, #1
 800c86e:	4013      	ands	r3, r2
 800c870:	b2da      	uxtb	r2, r3
 800c872:	4b1f      	ldr	r3, [pc, #124]	@ (800c8f0 <configCheck+0x118>)
 800c874:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800c876:	4b1d      	ldr	r3, [pc, #116]	@ (800c8ec <configCheck+0x114>)
 800c878:	2201      	movs	r2, #1
 800c87a:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800c87c:	f7f9 fc4f 	bl	800611e <BootButton_Pressed>
 800c880:	0003      	movs	r3, r0
 800c882:	001a      	movs	r2, r3
 800c884:	2301      	movs	r3, #1
 800c886:	4053      	eors	r3, r2
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <configCheck+0xce>
 800c88e:	f7f9 fc57 	bl	8006140 <UserButton_Pressed>
 800c892:	0003      	movs	r3, r0
 800c894:	001a      	movs	r2, r3
 800c896:	2301      	movs	r3, #1
 800c898:	4053      	eors	r3, r2
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <configCheck+0xce>
    buttonHeld = false;
 800c8a0:	4b12      	ldr	r3, [pc, #72]	@ (800c8ec <configCheck+0x114>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800c8a6:	f7f9 fc2b 	bl	8006100 <Check_USB_PowerOn>
 800c8aa:	1e03      	subs	r3, r0, #0
 800c8ac:	d003      	beq.n	800c8b6 <configCheck+0xde>
    usbPluggedIn = true;
 800c8ae:	4b11      	ldr	r3, [pc, #68]	@ (800c8f4 <configCheck+0x11c>)
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800c8b4:	e012      	b.n	800c8dc <configCheck+0x104>
    if(!userToggle && !init){
 800c8b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f0 <configCheck+0x118>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	4053      	eors	r3, r2
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d008      	beq.n	800c8d6 <configCheck+0xfe>
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f8 <configCheck+0x120>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	4053      	eors	r3, r2
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d001      	beq.n	800c8d6 <configCheck+0xfe>
      SetLEDsOff();
 800c8d2:	f7ff ff01 	bl	800c6d8 <SetLEDsOff>
    usbPluggedIn = false;
 800c8d6:	4b07      	ldr	r3, [pc, #28]	@ (800c8f4 <configCheck+0x11c>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	701a      	strb	r2, [r3, #0]
}
 800c8dc:	46c0      	nop			@ (mov r8, r8)
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	46c0      	nop			@ (mov r8, r8)
 800c8e4:	2000215c 	.word	0x2000215c
 800c8e8:	20002160 	.word	0x20002160
 800c8ec:	2000215f 	.word	0x2000215f
 800c8f0:	2000215e 	.word	0x2000215e
 800c8f4:	2000215d 	.word	0x2000215d
 800c8f8:	200000c4 	.word	0x200000c4

0800c8fc <Status_Upkeep>:
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  SystemClock_Config();
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	af00      	add	r7, sp, #0
  configCheck();
 800c900:	f7ff ff6a 	bl	800c7d8 <configCheck>
}
 800c904:	46c0      	nop			@ (mov r8, r8)
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800c90a:	b590      	push	{r4, r7, lr}
 800c90c:	b083      	sub	sp, #12
 800c90e:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800c910:	1dfc      	adds	r4, r7, #7
 800c912:	f7ff fefd 	bl	800c710 <powerCheck>
 800c916:	0003      	movs	r3, r0
 800c918:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800c91a:	1dfb      	adds	r3, r7, #7
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	0018      	movs	r0, r3
 800c920:	f7ff ff12 	bl	800c748 <powerDisplay>
  return status;
 800c924:	1dfb      	adds	r3, r7, #7
 800c926:	781b      	ldrb	r3, [r3, #0]

}
 800c928:	0018      	movs	r0, r3
 800c92a:	46bd      	mov	sp, r7
 800c92c:	b003      	add	sp, #12
 800c92e:	bd90      	pop	{r4, r7, pc}

0800c930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c934:	4b07      	ldr	r3, [pc, #28]	@ (800c954 <HAL_MspInit+0x24>)
 800c936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c938:	4b06      	ldr	r3, [pc, #24]	@ (800c954 <HAL_MspInit+0x24>)
 800c93a:	2101      	movs	r1, #1
 800c93c:	430a      	orrs	r2, r1
 800c93e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800c940:	4b04      	ldr	r3, [pc, #16]	@ (800c954 <HAL_MspInit+0x24>)
 800c942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c944:	4b03      	ldr	r3, [pc, #12]	@ (800c954 <HAL_MspInit+0x24>)
 800c946:	2180      	movs	r1, #128	@ 0x80
 800c948:	0549      	lsls	r1, r1, #21
 800c94a:	430a      	orrs	r2, r1
 800c94c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c94e:	46c0      	nop			@ (mov r8, r8)
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	40021000 	.word	0x40021000

0800c958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c95c:	46c0      	nop			@ (mov r8, r8)
 800c95e:	e7fd      	b.n	800c95c <NMI_Handler+0x4>

0800c960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c964:	46c0      	nop			@ (mov r8, r8)
 800c966:	e7fd      	b.n	800c964 <HardFault_Handler+0x4>

0800c968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800c96c:	46c0      	nop			@ (mov r8, r8)
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c976:	46c0      	nop			@ (mov r8, r8)
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c980:	f001 f8a4 	bl	800dacc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c984:	46c0      	nop			@ (mov r8, r8)
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800c990:	4b03      	ldr	r3, [pc, #12]	@ (800c9a0 <RTC_IRQHandler+0x14>)
 800c992:	0018      	movs	r0, r3
 800c994:	f008 fd88 	bl	80154a8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800c998:	46c0      	nop			@ (mov r8, r8)
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	46c0      	nop			@ (mov r8, r8)
 800c9a0:	200011bc 	.word	0x200011bc

0800c9a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c9a8:	4b05      	ldr	r3, [pc, #20]	@ (800c9c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800c9aa:	0018      	movs	r0, r3
 800c9ac:	f001 fec9 	bl	800e742 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c9b0:	4b04      	ldr	r3, [pc, #16]	@ (800c9c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	f001 fec5 	bl	800e742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c9b8:	46c0      	nop			@ (mov r8, r8)
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	46c0      	nop			@ (mov r8, r8)
 800c9c0:	20000e30 	.word	0x20000e30
 800c9c4:	20000de8 	.word	0x20000de8

0800c9c8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800c9cc:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f001 feb7 	bl	800e742 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800c9d4:	4b06      	ldr	r3, [pc, #24]	@ (800c9f0 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800c9d6:	0018      	movs	r0, r3
 800c9d8:	f001 feb3 	bl	800e742 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800c9dc:	4b05      	ldr	r3, [pc, #20]	@ (800c9f4 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f001 feaf 	bl	800e742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800c9e4:	46c0      	nop			@ (mov r8, r8)
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	46c0      	nop			@ (mov r8, r8)
 800c9ec:	20000eb4 	.word	0x20000eb4
 800c9f0:	20002450 	.word	0x20002450
 800c9f4:	20002498 	.word	0x20002498

0800c9f8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c9fc:	4b03      	ldr	r3, [pc, #12]	@ (800ca0c <USART4_5_IRQHandler+0x14>)
 800c9fe:	0018      	movs	r0, r3
 800ca00:	f009 fc1e 	bl	8016240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800ca04:	46c0      	nop			@ (mov r8, r8)
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	46c0      	nop			@ (mov r8, r8)
 800ca0c:	20002398 	.word	0x20002398

0800ca10 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800ca14:	4b09      	ldr	r3, [pc, #36]	@ (800ca3c <I2C1_IRQHandler+0x2c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	699a      	ldr	r2, [r3, #24]
 800ca1a:	23e0      	movs	r3, #224	@ 0xe0
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	4013      	ands	r3, r2
 800ca20:	d004      	beq.n	800ca2c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800ca22:	4b06      	ldr	r3, [pc, #24]	@ (800ca3c <I2C1_IRQHandler+0x2c>)
 800ca24:	0018      	movs	r0, r3
 800ca26:	f002 ffc7 	bl	800f9b8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800ca2a:	e003      	b.n	800ca34 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800ca2c:	4b03      	ldr	r3, [pc, #12]	@ (800ca3c <I2C1_IRQHandler+0x2c>)
 800ca2e:	0018      	movs	r0, r3
 800ca30:	f002 ffa8 	bl	800f984 <HAL_I2C_EV_IRQHandler>
}
 800ca34:	46c0      	nop			@ (mov r8, r8)
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	46c0      	nop			@ (mov r8, r8)
 800ca3c:	20000d40 	.word	0x20000d40

0800ca40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ca44:	4b03      	ldr	r3, [pc, #12]	@ (800ca54 <USART1_IRQHandler+0x14>)
 800ca46:	0018      	movs	r0, r3
 800ca48:	f009 fbfa 	bl	8016240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ca4c:	46c0      	nop			@ (mov r8, r8)
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	46c0      	nop			@ (mov r8, r8)
 800ca54:	200022e0 	.word	0x200022e0

0800ca58 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800ca5c:	4b03      	ldr	r3, [pc, #12]	@ (800ca6c <USB_IRQHandler+0x14>)
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f005 fb88 	bl	8012174 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800ca64:	46c0      	nop			@ (mov r8, r8)
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	46c0      	nop			@ (mov r8, r8)
 800ca6c:	200032a0 	.word	0x200032a0

0800ca70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0
  return 1;
 800ca74:	2301      	movs	r3, #1
}
 800ca76:	0018      	movs	r0, r3
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <_kill>:

int _kill(int pid, int sig)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ca86:	f012 fabf 	bl	801f008 <__errno>
 800ca8a:	0003      	movs	r3, r0
 800ca8c:	2216      	movs	r2, #22
 800ca8e:	601a      	str	r2, [r3, #0]
  return -1;
 800ca90:	2301      	movs	r3, #1
 800ca92:	425b      	negs	r3, r3
}
 800ca94:	0018      	movs	r0, r3
 800ca96:	46bd      	mov	sp, r7
 800ca98:	b002      	add	sp, #8
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <_exit>:

void _exit (int status)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800caa4:	2301      	movs	r3, #1
 800caa6:	425a      	negs	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	0011      	movs	r1, r2
 800caac:	0018      	movs	r0, r3
 800caae:	f7ff ffe5 	bl	800ca7c <_kill>
  while (1) {}    /* Make sure we hang here */
 800cab2:	46c0      	nop			@ (mov r8, r8)
 800cab4:	e7fd      	b.n	800cab2 <_exit+0x16>

0800cab6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b086      	sub	sp, #24
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cac2:	2300      	movs	r3, #0
 800cac4:	617b      	str	r3, [r7, #20]
 800cac6:	e00a      	b.n	800cade <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cac8:	e000      	b.n	800cacc <_read+0x16>
 800caca:	bf00      	nop
 800cacc:	0001      	movs	r1, r0
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	1c5a      	adds	r2, r3, #1
 800cad2:	60ba      	str	r2, [r7, #8]
 800cad4:	b2ca      	uxtb	r2, r1
 800cad6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	3301      	adds	r3, #1
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	697a      	ldr	r2, [r7, #20]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	dbf0      	blt.n	800cac8 <_read+0x12>
  }

  return len;
 800cae6:	687b      	ldr	r3, [r7, #4]
}
 800cae8:	0018      	movs	r0, r3
 800caea:	46bd      	mov	sp, r7
 800caec:	b006      	add	sp, #24
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <_close>:
  }
  return len;
}

int _close(int file)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800caf8:	2301      	movs	r3, #1
 800cafa:	425b      	negs	r3, r3
}
 800cafc:	0018      	movs	r0, r3
 800cafe:	46bd      	mov	sp, r7
 800cb00:	b002      	add	sp, #8
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2280      	movs	r2, #128	@ 0x80
 800cb12:	0192      	lsls	r2, r2, #6
 800cb14:	605a      	str	r2, [r3, #4]
  return 0;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	0018      	movs	r0, r3
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	b002      	add	sp, #8
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <_isatty>:

int _isatty(int file)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cb28:	2301      	movs	r3, #1
}
 800cb2a:	0018      	movs	r0, r3
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	b002      	add	sp, #8
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	0018      	movs	r0, r3
 800cb42:	46bd      	mov	sp, r7
 800cb44:	b004      	add	sp, #16
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cb50:	4a14      	ldr	r2, [pc, #80]	@ (800cba4 <_sbrk+0x5c>)
 800cb52:	4b15      	ldr	r3, [pc, #84]	@ (800cba8 <_sbrk+0x60>)
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cb5c:	4b13      	ldr	r3, [pc, #76]	@ (800cbac <_sbrk+0x64>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cb64:	4b11      	ldr	r3, [pc, #68]	@ (800cbac <_sbrk+0x64>)
 800cb66:	4a12      	ldr	r2, [pc, #72]	@ (800cbb0 <_sbrk+0x68>)
 800cb68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cb6a:	4b10      	ldr	r3, [pc, #64]	@ (800cbac <_sbrk+0x64>)
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	18d3      	adds	r3, r2, r3
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d207      	bcs.n	800cb88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cb78:	f012 fa46 	bl	801f008 <__errno>
 800cb7c:	0003      	movs	r3, r0
 800cb7e:	220c      	movs	r2, #12
 800cb80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cb82:	2301      	movs	r3, #1
 800cb84:	425b      	negs	r3, r3
 800cb86:	e009      	b.n	800cb9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cb88:	4b08      	ldr	r3, [pc, #32]	@ (800cbac <_sbrk+0x64>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cb8e:	4b07      	ldr	r3, [pc, #28]	@ (800cbac <_sbrk+0x64>)
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	18d2      	adds	r2, r2, r3
 800cb96:	4b05      	ldr	r3, [pc, #20]	@ (800cbac <_sbrk+0x64>)
 800cb98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
}
 800cb9c:	0018      	movs	r0, r3
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	b006      	add	sp, #24
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20005000 	.word	0x20005000
 800cba8:	00000400 	.word	0x00000400
 800cbac:	20002164 	.word	0x20002164
 800cbb0:	20003900 	.word	0x20003900

0800cbb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800cbb8:	46c0      	nop			@ (mov r8, r8)
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cbc6:	2310      	movs	r3, #16
 800cbc8:	18fb      	adds	r3, r7, r3
 800cbca:	0018      	movs	r0, r3
 800cbcc:	2308      	movs	r3, #8
 800cbce:	001a      	movs	r2, r3
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	f012 f975 	bl	801eec0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cbd6:	003b      	movs	r3, r7
 800cbd8:	0018      	movs	r0, r3
 800cbda:	2310      	movs	r3, #16
 800cbdc:	001a      	movs	r2, r3
 800cbde:	2100      	movs	r1, #0
 800cbe0:	f012 f96e 	bl	801eec0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800cbe4:	4b2e      	ldr	r3, [pc, #184]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cbe6:	2280      	movs	r2, #128	@ 0x80
 800cbe8:	05d2      	lsls	r2, r2, #23
 800cbea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800cbec:	4b2c      	ldr	r3, [pc, #176]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cbf2:	4b2b      	ldr	r3, [pc, #172]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800cbf8:	4b29      	ldr	r3, [pc, #164]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cbfa:	4a2a      	ldr	r2, [pc, #168]	@ (800cca4 <MX_TIM2_Init+0xe4>)
 800cbfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cbfe:	4b28      	ldr	r3, [pc, #160]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cc04:	4b26      	ldr	r3, [pc, #152]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800cc0a:	4b25      	ldr	r3, [pc, #148]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc0c:	0018      	movs	r0, r3
 800cc0e:	f008 fd2b 	bl	8015668 <HAL_TIM_PWM_Init>
 800cc12:	1e03      	subs	r3, r0, #0
 800cc14:	d001      	beq.n	800cc1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800cc16:	f7fa ff6b 	bl	8007af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cc1a:	2110      	movs	r1, #16
 800cc1c:	187b      	adds	r3, r7, r1
 800cc1e:	2200      	movs	r2, #0
 800cc20:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cc22:	187b      	adds	r3, r7, r1
 800cc24:	2200      	movs	r2, #0
 800cc26:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800cc28:	187a      	adds	r2, r7, r1
 800cc2a:	4b1d      	ldr	r3, [pc, #116]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc2c:	0011      	movs	r1, r2
 800cc2e:	0018      	movs	r0, r3
 800cc30:	f009 f838 	bl	8015ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800cc34:	1e03      	subs	r3, r0, #0
 800cc36:	d001      	beq.n	800cc3c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800cc38:	f7fa ff5a 	bl	8007af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cc3c:	003b      	movs	r3, r7
 800cc3e:	2260      	movs	r2, #96	@ 0x60
 800cc40:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800cc42:	003b      	movs	r3, r7
 800cc44:	2200      	movs	r2, #0
 800cc46:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cc48:	003b      	movs	r3, r7
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cc4e:	003b      	movs	r3, r7
 800cc50:	2200      	movs	r2, #0
 800cc52:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cc54:	0039      	movs	r1, r7
 800cc56:	4b12      	ldr	r3, [pc, #72]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	f008 fdd6 	bl	801580c <HAL_TIM_PWM_ConfigChannel>
 800cc60:	1e03      	subs	r3, r0, #0
 800cc62:	d001      	beq.n	800cc68 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800cc64:	f7fa ff44 	bl	8007af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800cc68:	0039      	movs	r1, r7
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc6c:	2208      	movs	r2, #8
 800cc6e:	0018      	movs	r0, r3
 800cc70:	f008 fdcc 	bl	801580c <HAL_TIM_PWM_ConfigChannel>
 800cc74:	1e03      	subs	r3, r0, #0
 800cc76:	d001      	beq.n	800cc7c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800cc78:	f7fa ff3a 	bl	8007af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800cc7c:	0039      	movs	r1, r7
 800cc7e:	4b08      	ldr	r3, [pc, #32]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc80:	220c      	movs	r2, #12
 800cc82:	0018      	movs	r0, r3
 800cc84:	f008 fdc2 	bl	801580c <HAL_TIM_PWM_ConfigChannel>
 800cc88:	1e03      	subs	r3, r0, #0
 800cc8a:	d001      	beq.n	800cc90 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800cc8c:	f7fa ff30 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800cc90:	4b03      	ldr	r3, [pc, #12]	@ (800cca0 <MX_TIM2_Init+0xe0>)
 800cc92:	0018      	movs	r0, r3
 800cc94:	f000 f8fe 	bl	800ce94 <HAL_TIM_MspPostInit>

}
 800cc98:	46c0      	nop			@ (mov r8, r8)
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	b006      	add	sp, #24
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	20002168 	.word	0x20002168
 800cca4:	0000ffff 	.word	0x0000ffff

0800cca8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ccae:	2310      	movs	r3, #16
 800ccb0:	18fb      	adds	r3, r7, r3
 800ccb2:	0018      	movs	r0, r3
 800ccb4:	2308      	movs	r3, #8
 800ccb6:	001a      	movs	r2, r3
 800ccb8:	2100      	movs	r1, #0
 800ccba:	f012 f901 	bl	801eec0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ccbe:	003b      	movs	r3, r7
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	2310      	movs	r3, #16
 800ccc4:	001a      	movs	r2, r3
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	f012 f8fa 	bl	801eec0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800cccc:	4b32      	ldr	r3, [pc, #200]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800ccce:	4a33      	ldr	r2, [pc, #204]	@ (800cd9c <MX_TIM3_Init+0xf4>)
 800ccd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ccd2:	4b31      	ldr	r3, [pc, #196]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ccd8:	4b2f      	ldr	r3, [pc, #188]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800ccde:	4b2e      	ldr	r3, [pc, #184]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cce0:	4a2f      	ldr	r2, [pc, #188]	@ (800cda0 <MX_TIM3_Init+0xf8>)
 800cce2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cce4:	4b2c      	ldr	r3, [pc, #176]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cce6:	2200      	movs	r2, #0
 800cce8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ccea:	4b2b      	ldr	r3, [pc, #172]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800ccf0:	4b29      	ldr	r3, [pc, #164]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	f008 fcb8 	bl	8015668 <HAL_TIM_PWM_Init>
 800ccf8:	1e03      	subs	r3, r0, #0
 800ccfa:	d001      	beq.n	800cd00 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800ccfc:	f7fa fef8 	bl	8007af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cd00:	2110      	movs	r1, #16
 800cd02:	187b      	adds	r3, r7, r1
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cd08:	187b      	adds	r3, r7, r1
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800cd0e:	187a      	adds	r2, r7, r1
 800cd10:	4b21      	ldr	r3, [pc, #132]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cd12:	0011      	movs	r1, r2
 800cd14:	0018      	movs	r0, r3
 800cd16:	f008 ffc5 	bl	8015ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800cd1a:	1e03      	subs	r3, r0, #0
 800cd1c:	d001      	beq.n	800cd22 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800cd1e:	f7fa fee7 	bl	8007af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cd22:	003b      	movs	r3, r7
 800cd24:	2260      	movs	r2, #96	@ 0x60
 800cd26:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800cd28:	003b      	movs	r3, r7
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cd2e:	003b      	movs	r3, r7
 800cd30:	2200      	movs	r2, #0
 800cd32:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cd34:	003b      	movs	r3, r7
 800cd36:	2200      	movs	r2, #0
 800cd38:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cd3a:	0039      	movs	r1, r7
 800cd3c:	4b16      	ldr	r3, [pc, #88]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	0018      	movs	r0, r3
 800cd42:	f008 fd63 	bl	801580c <HAL_TIM_PWM_ConfigChannel>
 800cd46:	1e03      	subs	r3, r0, #0
 800cd48:	d001      	beq.n	800cd4e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800cd4a:	f7fa fed1 	bl	8007af0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800cd4e:	4b12      	ldr	r3, [pc, #72]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cd50:	2104      	movs	r1, #4
 800cd52:	0018      	movs	r0, r3
 800cd54:	f009 f804 	bl	8015d60 <HAL_TIMEx_RemapConfig>
 800cd58:	1e03      	subs	r3, r0, #0
 800cd5a:	d001      	beq.n	800cd60 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800cd5c:	f7fa fec8 	bl	8007af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800cd60:	0039      	movs	r1, r7
 800cd62:	4b0d      	ldr	r3, [pc, #52]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cd64:	2204      	movs	r2, #4
 800cd66:	0018      	movs	r0, r3
 800cd68:	f008 fd50 	bl	801580c <HAL_TIM_PWM_ConfigChannel>
 800cd6c:	1e03      	subs	r3, r0, #0
 800cd6e:	d001      	beq.n	800cd74 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800cd70:	f7fa febe 	bl	8007af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800cd74:	0039      	movs	r1, r7
 800cd76:	4b08      	ldr	r3, [pc, #32]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cd78:	2208      	movs	r2, #8
 800cd7a:	0018      	movs	r0, r3
 800cd7c:	f008 fd46 	bl	801580c <HAL_TIM_PWM_ConfigChannel>
 800cd80:	1e03      	subs	r3, r0, #0
 800cd82:	d001      	beq.n	800cd88 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800cd84:	f7fa feb4 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800cd88:	4b03      	ldr	r3, [pc, #12]	@ (800cd98 <MX_TIM3_Init+0xf0>)
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	f000 f882 	bl	800ce94 <HAL_TIM_MspPostInit>

}
 800cd90:	46c0      	nop			@ (mov r8, r8)
 800cd92:	46bd      	mov	sp, r7
 800cd94:	b006      	add	sp, #24
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	200021a8 	.word	0x200021a8
 800cd9c:	40000400 	.word	0x40000400
 800cda0:	0000ffff 	.word	0x0000ffff

0800cda4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cdaa:	003b      	movs	r3, r7
 800cdac:	0018      	movs	r0, r3
 800cdae:	2308      	movs	r3, #8
 800cdb0:	001a      	movs	r2, r3
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	f012 f884 	bl	801eec0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800cdb8:	4b15      	ldr	r3, [pc, #84]	@ (800ce10 <MX_TIM6_Init+0x6c>)
 800cdba:	4a16      	ldr	r2, [pc, #88]	@ (800ce14 <MX_TIM6_Init+0x70>)
 800cdbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800cdbe:	4b14      	ldr	r3, [pc, #80]	@ (800ce10 <MX_TIM6_Init+0x6c>)
 800cdc0:	220a      	movs	r2, #10
 800cdc2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cdc4:	4b12      	ldr	r3, [pc, #72]	@ (800ce10 <MX_TIM6_Init+0x6c>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800cdca:	4b11      	ldr	r3, [pc, #68]	@ (800ce10 <MX_TIM6_Init+0x6c>)
 800cdcc:	4a12      	ldr	r2, [pc, #72]	@ (800ce18 <MX_TIM6_Init+0x74>)
 800cdce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cdd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ce10 <MX_TIM6_Init+0x6c>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800cdd6:	4b0e      	ldr	r3, [pc, #56]	@ (800ce10 <MX_TIM6_Init+0x6c>)
 800cdd8:	0018      	movs	r0, r3
 800cdda:	f008 fb9d 	bl	8015518 <HAL_TIM_Base_Init>
 800cdde:	1e03      	subs	r3, r0, #0
 800cde0:	d001      	beq.n	800cde6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800cde2:	f7fa fe85 	bl	8007af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cde6:	003b      	movs	r3, r7
 800cde8:	2200      	movs	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cdec:	003b      	movs	r3, r7
 800cdee:	2200      	movs	r2, #0
 800cdf0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800cdf2:	003a      	movs	r2, r7
 800cdf4:	4b06      	ldr	r3, [pc, #24]	@ (800ce10 <MX_TIM6_Init+0x6c>)
 800cdf6:	0011      	movs	r1, r2
 800cdf8:	0018      	movs	r0, r3
 800cdfa:	f008 ff53 	bl	8015ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800cdfe:	1e03      	subs	r3, r0, #0
 800ce00:	d001      	beq.n	800ce06 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800ce02:	f7fa fe75 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ce06:	46c0      	nop			@ (mov r8, r8)
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	b002      	add	sp, #8
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	46c0      	nop			@ (mov r8, r8)
 800ce10:	200021e8 	.word	0x200021e8
 800ce14:	40001000 	.word	0x40001000
 800ce18:	0000ffff 	.word	0x0000ffff

0800ce1c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	2380      	movs	r3, #128	@ 0x80
 800ce2a:	05db      	lsls	r3, r3, #23
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d106      	bne.n	800ce3e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ce30:	4b0a      	ldr	r3, [pc, #40]	@ (800ce5c <HAL_TIM_PWM_MspInit+0x40>)
 800ce32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce34:	4b09      	ldr	r3, [pc, #36]	@ (800ce5c <HAL_TIM_PWM_MspInit+0x40>)
 800ce36:	2101      	movs	r1, #1
 800ce38:	430a      	orrs	r2, r1
 800ce3a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ce3c:	e00a      	b.n	800ce54 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a07      	ldr	r2, [pc, #28]	@ (800ce60 <HAL_TIM_PWM_MspInit+0x44>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d105      	bne.n	800ce54 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ce48:	4b04      	ldr	r3, [pc, #16]	@ (800ce5c <HAL_TIM_PWM_MspInit+0x40>)
 800ce4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce4c:	4b03      	ldr	r3, [pc, #12]	@ (800ce5c <HAL_TIM_PWM_MspInit+0x40>)
 800ce4e:	2102      	movs	r1, #2
 800ce50:	430a      	orrs	r2, r1
 800ce52:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ce54:	46c0      	nop			@ (mov r8, r8)
 800ce56:	46bd      	mov	sp, r7
 800ce58:	b002      	add	sp, #8
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	40021000 	.word	0x40021000
 800ce60:	40000400 	.word	0x40000400

0800ce64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a06      	ldr	r2, [pc, #24]	@ (800ce8c <HAL_TIM_Base_MspInit+0x28>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d105      	bne.n	800ce82 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800ce76:	4b06      	ldr	r3, [pc, #24]	@ (800ce90 <HAL_TIM_Base_MspInit+0x2c>)
 800ce78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce7a:	4b05      	ldr	r3, [pc, #20]	@ (800ce90 <HAL_TIM_Base_MspInit+0x2c>)
 800ce7c:	2110      	movs	r1, #16
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	46bd      	mov	sp, r7
 800ce86:	b002      	add	sp, #8
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
 800ce8c:	40001000 	.word	0x40001000
 800ce90:	40021000 	.word	0x40021000

0800ce94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ce94:	b590      	push	{r4, r7, lr}
 800ce96:	b08b      	sub	sp, #44	@ 0x2c
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce9c:	2414      	movs	r4, #20
 800ce9e:	193b      	adds	r3, r7, r4
 800cea0:	0018      	movs	r0, r3
 800cea2:	2314      	movs	r3, #20
 800cea4:	001a      	movs	r2, r3
 800cea6:	2100      	movs	r1, #0
 800cea8:	f012 f80a 	bl	801eec0 <memset>
  if(timHandle->Instance==TIM2)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	2380      	movs	r3, #128	@ 0x80
 800ceb2:	05db      	lsls	r3, r3, #23
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d123      	bne.n	800cf00 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceb8:	4b27      	ldr	r3, [pc, #156]	@ (800cf58 <HAL_TIM_MspPostInit+0xc4>)
 800ceba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cebc:	4b26      	ldr	r3, [pc, #152]	@ (800cf58 <HAL_TIM_MspPostInit+0xc4>)
 800cebe:	2101      	movs	r1, #1
 800cec0:	430a      	orrs	r2, r1
 800cec2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cec4:	4b24      	ldr	r3, [pc, #144]	@ (800cf58 <HAL_TIM_MspPostInit+0xc4>)
 800cec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec8:	2201      	movs	r2, #1
 800ceca:	4013      	ands	r3, r2
 800cecc:	613b      	str	r3, [r7, #16]
 800cece:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800ced0:	0021      	movs	r1, r4
 800ced2:	187b      	adds	r3, r7, r1
 800ced4:	220d      	movs	r2, #13
 800ced6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ced8:	187b      	adds	r3, r7, r1
 800ceda:	2202      	movs	r2, #2
 800cedc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cede:	187b      	adds	r3, r7, r1
 800cee0:	2200      	movs	r2, #0
 800cee2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cee4:	187b      	adds	r3, r7, r1
 800cee6:	2200      	movs	r2, #0
 800cee8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800ceea:	187b      	adds	r3, r7, r1
 800ceec:	2202      	movs	r2, #2
 800ceee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cef0:	187a      	adds	r2, r7, r1
 800cef2:	23a0      	movs	r3, #160	@ 0xa0
 800cef4:	05db      	lsls	r3, r3, #23
 800cef6:	0011      	movs	r1, r2
 800cef8:	0018      	movs	r0, r3
 800cefa:	f001 fed9 	bl	800ecb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800cefe:	e027      	b.n	800cf50 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a15      	ldr	r2, [pc, #84]	@ (800cf5c <HAL_TIM_MspPostInit+0xc8>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d122      	bne.n	800cf50 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf0a:	4b13      	ldr	r3, [pc, #76]	@ (800cf58 <HAL_TIM_MspPostInit+0xc4>)
 800cf0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf0e:	4b12      	ldr	r3, [pc, #72]	@ (800cf58 <HAL_TIM_MspPostInit+0xc4>)
 800cf10:	2104      	movs	r1, #4
 800cf12:	430a      	orrs	r2, r1
 800cf14:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cf16:	4b10      	ldr	r3, [pc, #64]	@ (800cf58 <HAL_TIM_MspPostInit+0xc4>)
 800cf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf1a:	2204      	movs	r2, #4
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800cf22:	2114      	movs	r1, #20
 800cf24:	187b      	adds	r3, r7, r1
 800cf26:	22e0      	movs	r2, #224	@ 0xe0
 800cf28:	0052      	lsls	r2, r2, #1
 800cf2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf2c:	187b      	adds	r3, r7, r1
 800cf2e:	2202      	movs	r2, #2
 800cf30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf32:	187b      	adds	r3, r7, r1
 800cf34:	2200      	movs	r2, #0
 800cf36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf38:	187b      	adds	r3, r7, r1
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800cf3e:	187b      	adds	r3, r7, r1
 800cf40:	2202      	movs	r2, #2
 800cf42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf44:	187b      	adds	r3, r7, r1
 800cf46:	4a06      	ldr	r2, [pc, #24]	@ (800cf60 <HAL_TIM_MspPostInit+0xcc>)
 800cf48:	0019      	movs	r1, r3
 800cf4a:	0010      	movs	r0, r2
 800cf4c:	f001 feb0 	bl	800ecb0 <HAL_GPIO_Init>
}
 800cf50:	46c0      	nop			@ (mov r8, r8)
 800cf52:	46bd      	mov	sp, r7
 800cf54:	b00b      	add	sp, #44	@ 0x2c
 800cf56:	bd90      	pop	{r4, r7, pc}
 800cf58:	40021000 	.word	0x40021000
 800cf5c:	40000400 	.word	0x40000400
 800cf60:	50000800 	.word	0x50000800

0800cf64 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800cf68:	4b17      	ldr	r3, [pc, #92]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf6a:	4a18      	ldr	r2, [pc, #96]	@ (800cfcc <MX_LPUART1_UART_Init+0x68>)
 800cf6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800cf6e:	4b16      	ldr	r3, [pc, #88]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf70:	22e1      	movs	r2, #225	@ 0xe1
 800cf72:	0252      	lsls	r2, r2, #9
 800cf74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cf76:	4b14      	ldr	r3, [pc, #80]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800cf7c:	4b12      	ldr	r3, [pc, #72]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800cf82:	4b11      	ldr	r3, [pc, #68]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800cf88:	4b0f      	ldr	r3, [pc, #60]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf8a:	220c      	movs	r2, #12
 800cf8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cf8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cf94:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cf9c:	2218      	movs	r2, #24
 800cf9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800cfa0:	4b09      	ldr	r3, [pc, #36]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cfa2:	2280      	movs	r2, #128	@ 0x80
 800cfa4:	0212      	lsls	r2, r2, #8
 800cfa6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800cfa8:	4b07      	ldr	r3, [pc, #28]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cfaa:	2280      	movs	r2, #128	@ 0x80
 800cfac:	0152      	lsls	r2, r2, #5
 800cfae:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800cfb0:	4b05      	ldr	r3, [pc, #20]	@ (800cfc8 <MX_LPUART1_UART_Init+0x64>)
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f008 fef2 	bl	8015d9c <HAL_UART_Init>
 800cfb8:	1e03      	subs	r3, r0, #0
 800cfba:	d001      	beq.n	800cfc0 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800cfbc:	f7fa fd98 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800cfc0:	46c0      	nop			@ (mov r8, r8)
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	46c0      	nop			@ (mov r8, r8)
 800cfc8:	20002228 	.word	0x20002228
 800cfcc:	40004800 	.word	0x40004800

0800cfd0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cfd4:	4b16      	ldr	r3, [pc, #88]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800cfd6:	4a17      	ldr	r2, [pc, #92]	@ (800d034 <MX_USART1_UART_Init+0x64>)
 800cfd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800cfda:	4b15      	ldr	r3, [pc, #84]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800cfdc:	22e1      	movs	r2, #225	@ 0xe1
 800cfde:	0252      	lsls	r2, r2, #9
 800cfe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cfe2:	4b13      	ldr	r3, [pc, #76]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cfe8:	4b11      	ldr	r3, [pc, #68]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cfee:	4b10      	ldr	r3, [pc, #64]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cff4:	4b0e      	ldr	r3, [pc, #56]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800cff6:	220c      	movs	r2, #12
 800cff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cffa:	4b0d      	ldr	r3, [pc, #52]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d000:	4b0b      	ldr	r3, [pc, #44]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800d002:	2200      	movs	r2, #0
 800d004:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d006:	4b0a      	ldr	r3, [pc, #40]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800d008:	2200      	movs	r2, #0
 800d00a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d00c:	4b08      	ldr	r3, [pc, #32]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800d00e:	2208      	movs	r2, #8
 800d010:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d012:	4b07      	ldr	r3, [pc, #28]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800d014:	2280      	movs	r2, #128	@ 0x80
 800d016:	0212      	lsls	r2, r2, #8
 800d018:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d01a:	4b05      	ldr	r3, [pc, #20]	@ (800d030 <MX_USART1_UART_Init+0x60>)
 800d01c:	0018      	movs	r0, r3
 800d01e:	f008 febd 	bl	8015d9c <HAL_UART_Init>
 800d022:	1e03      	subs	r3, r0, #0
 800d024:	d001      	beq.n	800d02a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d026:	f7fa fd63 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d02a:	46c0      	nop			@ (mov r8, r8)
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	200022e0 	.word	0x200022e0
 800d034:	40013800 	.word	0x40013800

0800d038 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d03c:	4b14      	ldr	r3, [pc, #80]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d03e:	4a15      	ldr	r2, [pc, #84]	@ (800d094 <MX_USART4_UART_Init+0x5c>)
 800d040:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d042:	4b13      	ldr	r3, [pc, #76]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d044:	22e1      	movs	r2, #225	@ 0xe1
 800d046:	0252      	lsls	r2, r2, #9
 800d048:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d04a:	4b11      	ldr	r3, [pc, #68]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d050:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d052:	2200      	movs	r2, #0
 800d054:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d056:	4b0e      	ldr	r3, [pc, #56]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d058:	2200      	movs	r2, #0
 800d05a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d05c:	4b0c      	ldr	r3, [pc, #48]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d05e:	220c      	movs	r2, #12
 800d060:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d062:	4b0b      	ldr	r3, [pc, #44]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d064:	2200      	movs	r2, #0
 800d066:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d068:	4b09      	ldr	r3, [pc, #36]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d06a:	2200      	movs	r2, #0
 800d06c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d06e:	4b08      	ldr	r3, [pc, #32]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d070:	2200      	movs	r2, #0
 800d072:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d074:	4b06      	ldr	r3, [pc, #24]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d076:	2200      	movs	r2, #0
 800d078:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d07a:	4b05      	ldr	r3, [pc, #20]	@ (800d090 <MX_USART4_UART_Init+0x58>)
 800d07c:	0018      	movs	r0, r3
 800d07e:	f008 fe8d 	bl	8015d9c <HAL_UART_Init>
 800d082:	1e03      	subs	r3, r0, #0
 800d084:	d001      	beq.n	800d08a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d086:	f7fa fd33 	bl	8007af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d08a:	46c0      	nop			@ (mov r8, r8)
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	20002398 	.word	0x20002398
 800d094:	40004c00 	.word	0x40004c00

0800d098 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d098:	b590      	push	{r4, r7, lr}
 800d09a:	b08d      	sub	sp, #52	@ 0x34
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0a0:	241c      	movs	r4, #28
 800d0a2:	193b      	adds	r3, r7, r4
 800d0a4:	0018      	movs	r0, r3
 800d0a6:	2314      	movs	r3, #20
 800d0a8:	001a      	movs	r2, r3
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	f011 ff08 	bl	801eec0 <memset>
  if(uartHandle->Instance==LPUART1)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a8b      	ldr	r2, [pc, #556]	@ (800d2e4 <HAL_UART_MspInit+0x24c>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d129      	bne.n	800d10e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d0ba:	4b8b      	ldr	r3, [pc, #556]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d0bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0be:	4b8a      	ldr	r3, [pc, #552]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d0c0:	2180      	movs	r1, #128	@ 0x80
 800d0c2:	02c9      	lsls	r1, r1, #11
 800d0c4:	430a      	orrs	r2, r1
 800d0c6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d0c8:	4b87      	ldr	r3, [pc, #540]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0cc:	4b86      	ldr	r3, [pc, #536]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d0d4:	4b84      	ldr	r3, [pc, #528]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d8:	2204      	movs	r2, #4
 800d0da:	4013      	ands	r3, r2
 800d0dc:	61bb      	str	r3, [r7, #24]
 800d0de:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d0e0:	0021      	movs	r1, r4
 800d0e2:	187b      	adds	r3, r7, r1
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0e8:	187b      	adds	r3, r7, r1
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0ee:	187b      	adds	r3, r7, r1
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0f4:	187b      	adds	r3, r7, r1
 800d0f6:	2203      	movs	r2, #3
 800d0f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d0fa:	187b      	adds	r3, r7, r1
 800d0fc:	2206      	movs	r2, #6
 800d0fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d100:	187b      	adds	r3, r7, r1
 800d102:	4a7a      	ldr	r2, [pc, #488]	@ (800d2ec <HAL_UART_MspInit+0x254>)
 800d104:	0019      	movs	r1, r3
 800d106:	0010      	movs	r0, r2
 800d108:	f001 fdd2 	bl	800ecb0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d10c:	e0e5      	b.n	800d2da <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a77      	ldr	r2, [pc, #476]	@ (800d2f0 <HAL_UART_MspInit+0x258>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d133      	bne.n	800d180 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d118:	4b73      	ldr	r3, [pc, #460]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d11a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d11c:	4b72      	ldr	r3, [pc, #456]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d11e:	2180      	movs	r1, #128	@ 0x80
 800d120:	01c9      	lsls	r1, r1, #7
 800d122:	430a      	orrs	r2, r1
 800d124:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d126:	4b70      	ldr	r3, [pc, #448]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d12a:	4b6f      	ldr	r3, [pc, #444]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d12c:	2101      	movs	r1, #1
 800d12e:	430a      	orrs	r2, r1
 800d130:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d132:	4b6d      	ldr	r3, [pc, #436]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d136:	2201      	movs	r2, #1
 800d138:	4013      	ands	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]
 800d13c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d13e:	211c      	movs	r1, #28
 800d140:	187b      	adds	r3, r7, r1
 800d142:	22c0      	movs	r2, #192	@ 0xc0
 800d144:	00d2      	lsls	r2, r2, #3
 800d146:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d148:	187b      	adds	r3, r7, r1
 800d14a:	2202      	movs	r2, #2
 800d14c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d14e:	187b      	adds	r3, r7, r1
 800d150:	2200      	movs	r2, #0
 800d152:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d154:	187b      	adds	r3, r7, r1
 800d156:	2203      	movs	r2, #3
 800d158:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d15a:	187b      	adds	r3, r7, r1
 800d15c:	2204      	movs	r2, #4
 800d15e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d160:	187a      	adds	r2, r7, r1
 800d162:	23a0      	movs	r3, #160	@ 0xa0
 800d164:	05db      	lsls	r3, r3, #23
 800d166:	0011      	movs	r1, r2
 800d168:	0018      	movs	r0, r3
 800d16a:	f001 fda1 	bl	800ecb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d16e:	2200      	movs	r2, #0
 800d170:	2100      	movs	r1, #0
 800d172:	201b      	movs	r0, #27
 800d174:	f001 f94e 	bl	800e414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d178:	201b      	movs	r0, #27
 800d17a:	f001 f960 	bl	800e43e <HAL_NVIC_EnableIRQ>
}
 800d17e:	e0ac      	b.n	800d2da <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4a5b      	ldr	r2, [pc, #364]	@ (800d2f4 <HAL_UART_MspInit+0x25c>)
 800d186:	4293      	cmp	r3, r2
 800d188:	d000      	beq.n	800d18c <HAL_UART_MspInit+0xf4>
 800d18a:	e0a6      	b.n	800d2da <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d18c:	4b56      	ldr	r3, [pc, #344]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d18e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d190:	4b55      	ldr	r3, [pc, #340]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d192:	2180      	movs	r1, #128	@ 0x80
 800d194:	0309      	lsls	r1, r1, #12
 800d196:	430a      	orrs	r2, r1
 800d198:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d19a:	4b53      	ldr	r3, [pc, #332]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d19e:	4b52      	ldr	r3, [pc, #328]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	430a      	orrs	r2, r1
 800d1a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d1a6:	4b50      	ldr	r3, [pc, #320]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	4013      	ands	r3, r2
 800d1ae:	613b      	str	r3, [r7, #16]
 800d1b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1b2:	4b4d      	ldr	r3, [pc, #308]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b6:	4b4c      	ldr	r3, [pc, #304]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d1b8:	2104      	movs	r1, #4
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d1be:	4b4a      	ldr	r3, [pc, #296]	@ (800d2e8 <HAL_UART_MspInit+0x250>)
 800d1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c2:	2204      	movs	r2, #4
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	60fb      	str	r3, [r7, #12]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d1ca:	241c      	movs	r4, #28
 800d1cc:	193b      	adds	r3, r7, r4
 800d1ce:	2202      	movs	r2, #2
 800d1d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1d2:	193b      	adds	r3, r7, r4
 800d1d4:	2202      	movs	r2, #2
 800d1d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1d8:	193b      	adds	r3, r7, r4
 800d1da:	2200      	movs	r2, #0
 800d1dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1de:	193b      	adds	r3, r7, r4
 800d1e0:	2203      	movs	r2, #3
 800d1e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d1e4:	193b      	adds	r3, r7, r4
 800d1e6:	2206      	movs	r2, #6
 800d1e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1ea:	193a      	adds	r2, r7, r4
 800d1ec:	23a0      	movs	r3, #160	@ 0xa0
 800d1ee:	05db      	lsls	r3, r3, #23
 800d1f0:	0011      	movs	r1, r2
 800d1f2:	0018      	movs	r0, r3
 800d1f4:	f001 fd5c 	bl	800ecb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d1f8:	0021      	movs	r1, r4
 800d1fa:	187b      	adds	r3, r7, r1
 800d1fc:	2280      	movs	r2, #128	@ 0x80
 800d1fe:	00d2      	lsls	r2, r2, #3
 800d200:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d202:	187b      	adds	r3, r7, r1
 800d204:	2202      	movs	r2, #2
 800d206:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d208:	187b      	adds	r3, r7, r1
 800d20a:	2200      	movs	r2, #0
 800d20c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d20e:	187b      	adds	r3, r7, r1
 800d210:	2203      	movs	r2, #3
 800d212:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d214:	187b      	adds	r3, r7, r1
 800d216:	2206      	movs	r2, #6
 800d218:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d21a:	187b      	adds	r3, r7, r1
 800d21c:	4a33      	ldr	r2, [pc, #204]	@ (800d2ec <HAL_UART_MspInit+0x254>)
 800d21e:	0019      	movs	r1, r3
 800d220:	0010      	movs	r0, r2
 800d222:	f001 fd45 	bl	800ecb0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d226:	4b34      	ldr	r3, [pc, #208]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d228:	4a34      	ldr	r2, [pc, #208]	@ (800d2fc <HAL_UART_MspInit+0x264>)
 800d22a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d22c:	4b32      	ldr	r3, [pc, #200]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d22e:	220c      	movs	r2, #12
 800d230:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d232:	4b31      	ldr	r3, [pc, #196]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d234:	2200      	movs	r2, #0
 800d236:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d238:	4b2f      	ldr	r3, [pc, #188]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d23e:	4b2e      	ldr	r3, [pc, #184]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d240:	2280      	movs	r2, #128	@ 0x80
 800d242:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d244:	4b2c      	ldr	r3, [pc, #176]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d246:	2200      	movs	r2, #0
 800d248:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d24a:	4b2b      	ldr	r3, [pc, #172]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d24c:	2200      	movs	r2, #0
 800d24e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d250:	4b29      	ldr	r3, [pc, #164]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d252:	2220      	movs	r2, #32
 800d254:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d256:	4b28      	ldr	r3, [pc, #160]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d258:	2200      	movs	r2, #0
 800d25a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d25c:	4b26      	ldr	r3, [pc, #152]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d25e:	0018      	movs	r0, r3
 800d260:	f001 f90a 	bl	800e478 <HAL_DMA_Init>
 800d264:	1e03      	subs	r3, r0, #0
 800d266:	d001      	beq.n	800d26c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d268:	f7fa fc42 	bl	8007af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a22      	ldr	r2, [pc, #136]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d270:	675a      	str	r2, [r3, #116]	@ 0x74
 800d272:	4b21      	ldr	r3, [pc, #132]	@ (800d2f8 <HAL_UART_MspInit+0x260>)
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d278:	4b21      	ldr	r3, [pc, #132]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d27a:	4a22      	ldr	r2, [pc, #136]	@ (800d304 <HAL_UART_MspInit+0x26c>)
 800d27c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d27e:	4b20      	ldr	r3, [pc, #128]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d280:	220c      	movs	r2, #12
 800d282:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d284:	4b1e      	ldr	r3, [pc, #120]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d286:	2210      	movs	r2, #16
 800d288:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d28a:	4b1d      	ldr	r3, [pc, #116]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d290:	4b1b      	ldr	r3, [pc, #108]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d292:	2280      	movs	r2, #128	@ 0x80
 800d294:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d296:	4b1a      	ldr	r3, [pc, #104]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d298:	2200      	movs	r2, #0
 800d29a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d29c:	4b18      	ldr	r3, [pc, #96]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d2a2:	4b17      	ldr	r3, [pc, #92]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d2a8:	4b15      	ldr	r3, [pc, #84]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d2ae:	4b14      	ldr	r3, [pc, #80]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d2b0:	0018      	movs	r0, r3
 800d2b2:	f001 f8e1 	bl	800e478 <HAL_DMA_Init>
 800d2b6:	1e03      	subs	r3, r0, #0
 800d2b8:	d001      	beq.n	800d2be <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d2ba:	f7fa fc19 	bl	8007af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a0f      	ldr	r2, [pc, #60]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d2c2:	671a      	str	r2, [r3, #112]	@ 0x70
 800d2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d300 <HAL_UART_MspInit+0x268>)
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	200e      	movs	r0, #14
 800d2d0:	f001 f8a0 	bl	800e414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d2d4:	200e      	movs	r0, #14
 800d2d6:	f001 f8b2 	bl	800e43e <HAL_NVIC_EnableIRQ>
}
 800d2da:	46c0      	nop			@ (mov r8, r8)
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	b00d      	add	sp, #52	@ 0x34
 800d2e0:	bd90      	pop	{r4, r7, pc}
 800d2e2:	46c0      	nop			@ (mov r8, r8)
 800d2e4:	40004800 	.word	0x40004800
 800d2e8:	40021000 	.word	0x40021000
 800d2ec:	50000800 	.word	0x50000800
 800d2f0:	40013800 	.word	0x40013800
 800d2f4:	40004c00 	.word	0x40004c00
 800d2f8:	20002450 	.word	0x20002450
 800d2fc:	4002006c 	.word	0x4002006c
 800d300:	20002498 	.word	0x20002498
 800d304:	40020080 	.word	0x40020080

0800d308 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800d310:	f000 fbee 	bl	800daf0 <HAL_GetTick>
 800d314:	0003      	movs	r3, r0
 800d316:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800d318:	4b1c      	ldr	r3, [pc, #112]	@ (800d38c <TimestampIsReached+0x84>)
 800d31a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	429a      	cmp	r2, r3
 800d322:	d307      	bcc.n	800d334 <TimestampIsReached+0x2c>
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d901      	bls.n	800d334 <TimestampIsReached+0x2c>
 800d330:	2201      	movs	r2, #1
 800d332:	e000      	b.n	800d336 <TimestampIsReached+0x2e>
 800d334:	2200      	movs	r2, #0
 800d336:	230f      	movs	r3, #15
 800d338:	18fb      	adds	r3, r7, r3
 800d33a:	701a      	strb	r2, [r3, #0]
 800d33c:	781a      	ldrb	r2, [r3, #0]
 800d33e:	2101      	movs	r1, #1
 800d340:	400a      	ands	r2, r1
 800d342:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d207      	bcs.n	800d35c <TimestampIsReached+0x54>
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	429a      	cmp	r2, r3
 800d356:	d201      	bcs.n	800d35c <TimestampIsReached+0x54>
 800d358:	2201      	movs	r2, #1
 800d35a:	e000      	b.n	800d35e <TimestampIsReached+0x56>
 800d35c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800d35e:	200e      	movs	r0, #14
 800d360:	183b      	adds	r3, r7, r0
 800d362:	701a      	strb	r2, [r3, #0]
 800d364:	781a      	ldrb	r2, [r3, #0]
 800d366:	2101      	movs	r1, #1
 800d368:	400a      	ands	r2, r1
 800d36a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800d36c:	230f      	movs	r3, #15
 800d36e:	18fb      	adds	r3, r7, r3
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d103      	bne.n	800d37e <TimestampIsReached+0x76>
 800d376:	183b      	adds	r3, r7, r0
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800d382:	2300      	movs	r3, #0
}
 800d384:	0018      	movs	r0, r3
 800d386:	46bd      	mov	sp, r7
 800d388:	b006      	add	sp, #24
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	7fffffff 	.word	0x7fffffff

0800d390 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800d398:	f000 fbaa 	bl	800daf0 <HAL_GetTick>
 800d39c:	0002      	movs	r2, r0
 800d39e:	4904      	ldr	r1, [pc, #16]	@ (800d3b0 <AddTimestamp+0x20>)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	0018      	movs	r0, r3
 800d3a4:	f011 fc48 	bl	801ec38 <siprintf>
}
 800d3a8:	46c0      	nop			@ (mov r8, r8)
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	b002      	add	sp, #8
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	080235b4 	.word	0x080235b4

0800d3b4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800d3b4:	b40c      	push	{r2, r3}
 800d3b6:	b5b0      	push	{r4, r5, r7, lr}
 800d3b8:	b0a4      	sub	sp, #144	@ 0x90
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	0002      	movs	r2, r0
 800d3be:	6039      	str	r1, [r7, #0]
 800d3c0:	1dfb      	adds	r3, r7, #7
 800d3c2:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800d3c4:	4b23      	ldr	r3, [pc, #140]	@ (800d454 <CreateLine+0xa0>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	1dfa      	adds	r2, r7, #7
 800d3ca:	7812      	ldrb	r2, [r2, #0]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d839      	bhi.n	800d444 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	4921      	ldr	r1, [pc, #132]	@ (800d458 <CreateLine+0xa4>)
 800d3d4:	240c      	movs	r4, #12
 800d3d6:	193b      	adds	r3, r7, r4
 800d3d8:	0018      	movs	r0, r3
 800d3da:	f011 fc2d 	bl	801ec38 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800d3de:	4b1d      	ldr	r3, [pc, #116]	@ (800d454 <CreateLine+0xa0>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d909      	bls.n	800d3fa <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800d3e6:	193b      	adds	r3, r7, r4
 800d3e8:	0018      	movs	r0, r3
 800d3ea:	f7f2 febf 	bl	800016c <strlen>
 800d3ee:	0002      	movs	r2, r0
 800d3f0:	193b      	adds	r3, r7, r4
 800d3f2:	189b      	adds	r3, r3, r2
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	f7ff ffcb 	bl	800d390 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800d3fa:	240c      	movs	r4, #12
 800d3fc:	193b      	adds	r3, r7, r4
 800d3fe:	0018      	movs	r0, r3
 800d400:	f7f2 feb4 	bl	800016c <strlen>
 800d404:	0003      	movs	r3, r0
 800d406:	218c      	movs	r1, #140	@ 0x8c
 800d408:	187a      	adds	r2, r7, r1
 800d40a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800d40c:	239c      	movs	r3, #156	@ 0x9c
 800d40e:	2508      	movs	r5, #8
 800d410:	195b      	adds	r3, r3, r5
 800d412:	19db      	adds	r3, r3, r7
 800d414:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800d416:	193a      	adds	r2, r7, r4
 800d418:	187b      	adds	r3, r7, r1
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	18d0      	adds	r0, r2, r3
 800d41e:	187b      	adds	r3, r7, r1
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2280      	movs	r2, #128	@ 0x80
 800d424:	1ad3      	subs	r3, r2, r3
 800d426:	0019      	movs	r1, r3
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2298      	movs	r2, #152	@ 0x98
 800d42c:	1952      	adds	r2, r2, r5
 800d42e:	19d2      	adds	r2, r2, r7
 800d430:	6812      	ldr	r2, [r2, #0]
 800d432:	f011 fc99 	bl	801ed68 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800d436:	193a      	adds	r2, r7, r4
 800d438:	4b08      	ldr	r3, [pc, #32]	@ (800d45c <CreateLine+0xa8>)
 800d43a:	0011      	movs	r1, r2
 800d43c:	0018      	movs	r0, r3
 800d43e:	f011 fb8b 	bl	801eb58 <iprintf>
 800d442:	e000      	b.n	800d446 <CreateLine+0x92>
    return;
 800d444:	46c0      	nop			@ (mov r8, r8)
}
 800d446:	46bd      	mov	sp, r7
 800d448:	b024      	add	sp, #144	@ 0x90
 800d44a:	bcb0      	pop	{r4, r5, r7}
 800d44c:	bc08      	pop	{r3}
 800d44e:	b002      	add	sp, #8
 800d450:	4718      	bx	r3
 800d452:	46c0      	nop			@ (mov r8, r8)
 800d454:	200000cc 	.word	0x200000cc
 800d458:	080235c0 	.word	0x080235c0
 800d45c:	080235c4 	.word	0x080235c4

0800d460 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	b29a      	uxth	r2, r3
 800d470:	68b9      	ldr	r1, [r7, #8]
 800d472:	4804      	ldr	r0, [pc, #16]	@ (800d484 <_write+0x24>)
 800d474:	2364      	movs	r3, #100	@ 0x64
 800d476:	f008 fcf7 	bl	8015e68 <HAL_UART_Transmit>
  return count;
 800d47a:	687b      	ldr	r3, [r7, #4]
}
 800d47c:	0018      	movs	r0, r3
 800d47e:	46bd      	mov	sp, r7
 800d480:	b004      	add	sp, #16
 800d482:	bd80      	pop	{r7, pc}
 800d484:	200022e0 	.word	0x200022e0

0800d488 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	0002      	movs	r2, r0
 800d490:	1dfb      	adds	r3, r7, #7
 800d492:	701a      	strb	r2, [r3, #0]
 800d494:	4b03      	ldr	r3, [pc, #12]	@ (800d4a4 <SetVerboseLevel+0x1c>)
 800d496:	1dfa      	adds	r2, r7, #7
 800d498:	7812      	ldrb	r2, [r2, #0]
 800d49a:	701a      	strb	r2, [r3, #0]
 800d49c:	46c0      	nop			@ (mov r8, r8)
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	b002      	add	sp, #8
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	200000cc 	.word	0x200000cc

0800d4a8 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d4ac:	f000 fb20 	bl	800daf0 <HAL_GetTick>
 800d4b0:	0003      	movs	r3, r0
}
 800d4b2:	0018      	movs	r0, r3
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800d4be:	4a0f      	ldr	r2, [pc, #60]	@ (800d4fc <BinaryReleaseInfo+0x44>)
 800d4c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d500 <BinaryReleaseInfo+0x48>)
 800d4c2:	0019      	movs	r1, r3
 800d4c4:	2002      	movs	r0, #2
 800d4c6:	f7ff ff75 	bl	800d3b4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800d4ca:	480e      	ldr	r0, [pc, #56]	@ (800d504 <BinaryReleaseInfo+0x4c>)
 800d4cc:	4a0e      	ldr	r2, [pc, #56]	@ (800d508 <BinaryReleaseInfo+0x50>)
 800d4ce:	490c      	ldr	r1, [pc, #48]	@ (800d500 <BinaryReleaseInfo+0x48>)
 800d4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800d50c <BinaryReleaseInfo+0x54>)
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	0003      	movs	r3, r0
 800d4d6:	2002      	movs	r0, #2
 800d4d8:	f7ff ff6c 	bl	800d3b4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800d4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d510 <BinaryReleaseInfo+0x58>)
 800d4de:	4a0d      	ldr	r2, [pc, #52]	@ (800d514 <BinaryReleaseInfo+0x5c>)
 800d4e0:	4907      	ldr	r1, [pc, #28]	@ (800d500 <BinaryReleaseInfo+0x48>)
 800d4e2:	2002      	movs	r0, #2
 800d4e4:	f7ff ff66 	bl	800d3b4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800d4e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d518 <BinaryReleaseInfo+0x60>)
 800d4ea:	4a0c      	ldr	r2, [pc, #48]	@ (800d51c <BinaryReleaseInfo+0x64>)
 800d4ec:	4904      	ldr	r1, [pc, #16]	@ (800d500 <BinaryReleaseInfo+0x48>)
 800d4ee:	2002      	movs	r0, #2
 800d4f0:	f7ff ff60 	bl	800d3b4 <CreateLine>
}
 800d4f4:	46c0      	nop			@ (mov r8, r8)
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	46c0      	nop			@ (mov r8, r8)
 800d4fc:	080235cc 	.word	0x080235cc
 800d500:	080235f8 	.word	0x080235f8
 800d504:	080235fc 	.word	0x080235fc
 800d508:	08023608 	.word	0x08023608
 800d50c:	0802361c 	.word	0x0802361c
 800d510:	08023628 	.word	0x08023628
 800d514:	08023630 	.word	0x08023630
 800d518:	08023638 	.word	0x08023638
 800d51c:	08023640 	.word	0x08023640

0800d520 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	68f9      	ldr	r1, [r7, #12]
 800d532:	4803      	ldr	r0, [pc, #12]	@ (800d540 <errorHandler+0x20>)
 800d534:	f011 fb10 	bl	801eb58 <iprintf>
//    while (true)
//    {
//    }
}
 800d538:	46c0      	nop			@ (mov r8, r8)
 800d53a:	46bd      	mov	sp, r7
 800d53c:	b004      	add	sp, #16
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	08023658 	.word	0x08023658

0800d544 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d544:	b590      	push	{r4, r7, lr}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6039      	str	r1, [r7, #0]
 800d54c:	0011      	movs	r1, r2
 800d54e:	1dfb      	adds	r3, r7, #7
 800d550:	1c02      	adds	r2, r0, #0
 800d552:	701a      	strb	r2, [r3, #0]
 800d554:	1dbb      	adds	r3, r7, #6
 800d556:	1c0a      	adds	r2, r1, #0
 800d558:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800d55a:	4b0a      	ldr	r3, [pc, #40]	@ (800d584 <ReadRegister+0x40>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d00a      	beq.n	800d578 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800d562:	4b08      	ldr	r3, [pc, #32]	@ (800d584 <ReadRegister+0x40>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	1dba      	adds	r2, r7, #6
 800d568:	7814      	ldrb	r4, [r2, #0]
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	1dfa      	adds	r2, r7, #7
 800d56e:	7810      	ldrb	r0, [r2, #0]
 800d570:	0022      	movs	r2, r4
 800d572:	4798      	blx	r3
 800d574:	0003      	movs	r3, r0
 800d576:	e000      	b.n	800d57a <ReadRegister+0x36>
	}
	return false;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	0018      	movs	r0, r3
 800d57c:	46bd      	mov	sp, r7
 800d57e:	b003      	add	sp, #12
 800d580:	bd90      	pop	{r4, r7, pc}
 800d582:	46c0      	nop			@ (mov r8, r8)
 800d584:	200024e0 	.word	0x200024e0

0800d588 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d588:	b590      	push	{r4, r7, lr}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6039      	str	r1, [r7, #0]
 800d590:	0011      	movs	r1, r2
 800d592:	1dfb      	adds	r3, r7, #7
 800d594:	1c02      	adds	r2, r0, #0
 800d596:	701a      	strb	r2, [r3, #0]
 800d598:	1dbb      	adds	r3, r7, #6
 800d59a:	1c0a      	adds	r2, r1, #0
 800d59c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d59e:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c8 <WriteRegister+0x40>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00a      	beq.n	800d5bc <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800d5a6:	4b08      	ldr	r3, [pc, #32]	@ (800d5c8 <WriteRegister+0x40>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	1dba      	adds	r2, r7, #6
 800d5ac:	7814      	ldrb	r4, [r2, #0]
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	1dfa      	adds	r2, r7, #7
 800d5b2:	7810      	ldrb	r0, [r2, #0]
 800d5b4:	0022      	movs	r2, r4
 800d5b6:	4798      	blx	r3
 800d5b8:	0003      	movs	r3, r0
 800d5ba:	e000      	b.n	800d5be <WriteRegister+0x36>
  }
  return false;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	0018      	movs	r0, r3
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	b003      	add	sp, #12
 800d5c4:	bd90      	pop	{r4, r7, pc}
 800d5c6:	46c0      	nop			@ (mov r8, r8)
 800d5c8:	200024e4 	.word	0x200024e4

0800d5cc <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	000a      	movs	r2, r1
 800d5d6:	1cfb      	adds	r3, r7, #3
 800d5d8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800d5da:	230f      	movs	r3, #15
 800d5dc:	18fb      	adds	r3, r7, r3
 800d5de:	22ff      	movs	r2, #255	@ 0xff
 800d5e0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800d5e2:	230e      	movs	r3, #14
 800d5e4:	18fb      	adds	r3, r7, r3
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	701a      	strb	r2, [r3, #0]
 800d5ea:	e037      	b.n	800d65c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800d5ec:	230e      	movs	r3, #14
 800d5ee:	18fb      	adds	r3, r7, r3
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	18d3      	adds	r3, r2, r3
 800d5f6:	7819      	ldrb	r1, [r3, #0]
 800d5f8:	220f      	movs	r2, #15
 800d5fa:	18bb      	adds	r3, r7, r2
 800d5fc:	18ba      	adds	r2, r7, r2
 800d5fe:	7812      	ldrb	r2, [r2, #0]
 800d600:	404a      	eors	r2, r1
 800d602:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800d604:	230d      	movs	r3, #13
 800d606:	18fb      	adds	r3, r7, r3
 800d608:	2200      	movs	r2, #0
 800d60a:	701a      	strb	r2, [r3, #0]
 800d60c:	e01b      	b.n	800d646 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800d60e:	210f      	movs	r1, #15
 800d610:	187b      	adds	r3, r7, r1
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	b25b      	sxtb	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	da09      	bge.n	800d62e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800d61a:	187b      	adds	r3, r7, r1
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	b25b      	sxtb	r3, r3
 800d622:	2231      	movs	r2, #49	@ 0x31
 800d624:	4053      	eors	r3, r2
 800d626:	b25a      	sxtb	r2, r3
 800d628:	187b      	adds	r3, r7, r1
 800d62a:	701a      	strb	r2, [r3, #0]
 800d62c:	e005      	b.n	800d63a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800d62e:	230f      	movs	r3, #15
 800d630:	18fa      	adds	r2, r7, r3
 800d632:	18fb      	adds	r3, r7, r3
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	18db      	adds	r3, r3, r3
 800d638:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800d63a:	210d      	movs	r1, #13
 800d63c:	187b      	adds	r3, r7, r1
 800d63e:	781a      	ldrb	r2, [r3, #0]
 800d640:	187b      	adds	r3, r7, r1
 800d642:	3201      	adds	r2, #1
 800d644:	701a      	strb	r2, [r3, #0]
 800d646:	230d      	movs	r3, #13
 800d648:	18fb      	adds	r3, r7, r3
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b07      	cmp	r3, #7
 800d64e:	d9de      	bls.n	800d60e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800d650:	210e      	movs	r1, #14
 800d652:	187b      	adds	r3, r7, r1
 800d654:	781a      	ldrb	r2, [r3, #0]
 800d656:	187b      	adds	r3, r7, r1
 800d658:	3201      	adds	r2, #1
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	230e      	movs	r3, #14
 800d65e:	18fa      	adds	r2, r7, r3
 800d660:	1cfb      	adds	r3, r7, #3
 800d662:	7812      	ldrb	r2, [r2, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d3c0      	bcc.n	800d5ec <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800d66a:	230f      	movs	r3, #15
 800d66c:	18fb      	adds	r3, r7, r3
 800d66e:	781b      	ldrb	r3, [r3, #0]
}
 800d670:	0018      	movs	r0, r3
 800d672:	46bd      	mov	sp, r7
 800d674:	b004      	add	sp, #16
 800d676:	bd80      	pop	{r7, pc}

0800d678 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800d682:	4b0a      	ldr	r3, [pc, #40]	@ (800d6ac <HIDS_Init+0x34>)
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800d688:	4b09      	ldr	r3, [pc, #36]	@ (800d6b0 <HIDS_Init+0x38>)
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800d68e:	4b09      	ldr	r3, [pc, #36]	@ (800d6b4 <HIDS_Init+0x3c>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	0018      	movs	r0, r3
 800d694:	f000 f8da 	bl	800d84c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800d698:	4b07      	ldr	r3, [pc, #28]	@ (800d6b8 <HIDS_Init+0x40>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	0018      	movs	r0, r3
 800d69e:	f000 f82b 	bl	800d6f8 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800d6a2:	46c0      	nop			@ (mov r8, r8)
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	b002      	add	sp, #8
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	46c0      	nop			@ (mov r8, r8)
 800d6ac:	200024e0 	.word	0x200024e0
 800d6b0:	200024e4 	.word	0x200024e4
 800d6b4:	200000ce 	.word	0x200000ce
 800d6b8:	200000cd 	.word	0x200000cd

0800d6bc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800d6c0:	f7ff fef2 	bl	800d4a8 <GetCurrentHalTicks>
 800d6c4:	0002      	movs	r2, r0
 800d6c6:	4b08      	ldr	r3, [pc, #32]	@ (800d6e8 <HIDS_StartMeasurement+0x2c>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	18d2      	adds	r2, r2, r3
 800d6cc:	4b07      	ldr	r3, [pc, #28]	@ (800d6ec <HIDS_StartMeasurement+0x30>)
 800d6ce:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800d6d0:	4b07      	ldr	r3, [pc, #28]	@ (800d6f0 <HIDS_StartMeasurement+0x34>)
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	0019      	movs	r1, r3
 800d6d6:	2044      	movs	r0, #68	@ 0x44
 800d6d8:	f7ff ff56 	bl	800d588 <WriteRegister>
  MeasurementDone = false;
 800d6dc:	4b05      	ldr	r3, [pc, #20]	@ (800d6f4 <HIDS_StartMeasurement+0x38>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
}
 800d6e2:	46c0      	nop			@ (mov r8, r8)
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	200000d4 	.word	0x200000d4
 800d6ec:	200000d0 	.word	0x200000d0
 800d6f0:	200000ce 	.word	0x200000ce
 800d6f4:	200024f6 	.word	0x200024f6

0800d6f8 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	0002      	movs	r2, r0
 800d700:	1dfb      	adds	r3, r7, #7
 800d702:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800d704:	4b03      	ldr	r3, [pc, #12]	@ (800d714 <HIDS_SetHeaterMode+0x1c>)
 800d706:	1dfa      	adds	r2, r7, #7
 800d708:	7812      	ldrb	r2, [r2, #0]
 800d70a:	701a      	strb	r2, [r3, #0]
}
 800d70c:	46c0      	nop			@ (mov r8, r8)
 800d70e:	46bd      	mov	sp, r7
 800d710:	b002      	add	sp, #8
 800d712:	bd80      	pop	{r7, pc}
 800d714:	200000cd 	.word	0x200000cd

0800d718 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800d718:	b590      	push	{r4, r7, lr}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	781a      	ldrb	r2, [r3, #0]
 800d724:	210c      	movs	r1, #12
 800d726:	187b      	adds	r3, r7, r1
 800d728:	701a      	strb	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	785a      	ldrb	r2, [r3, #1]
 800d72e:	187b      	adds	r3, r7, r1
 800d730:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800d732:	240f      	movs	r4, #15
 800d734:	193b      	adds	r3, r7, r4
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	7892      	ldrb	r2, [r2, #2]
 800d73a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800d73c:	187b      	adds	r3, r7, r1
 800d73e:	2102      	movs	r1, #2
 800d740:	0018      	movs	r0, r3
 800d742:	f7ff ff43 	bl	800d5cc <CalculateCRC>
 800d746:	0003      	movs	r3, r0
 800d748:	001a      	movs	r2, r3
 800d74a:	193b      	adds	r3, r7, r4
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	4293      	cmp	r3, r2
 800d750:	d007      	beq.n	800d762 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800d752:	4a1a      	ldr	r2, [pc, #104]	@ (800d7bc <CheckCRC+0xa4>)
 800d754:	4b1a      	ldr	r3, [pc, #104]	@ (800d7c0 <CheckCRC+0xa8>)
 800d756:	0019      	movs	r1, r3
 800d758:	2001      	movs	r0, #1
 800d75a:	f7ff fe2b 	bl	800d3b4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800d75e:	2300      	movs	r3, #0
 800d760:	e027      	b.n	800d7b2 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	78da      	ldrb	r2, [r3, #3]
 800d766:	2108      	movs	r1, #8
 800d768:	187b      	adds	r3, r7, r1
 800d76a:	701a      	strb	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	791a      	ldrb	r2, [r3, #4]
 800d770:	187b      	adds	r3, r7, r1
 800d772:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800d774:	240e      	movs	r4, #14
 800d776:	193b      	adds	r3, r7, r4
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	7952      	ldrb	r2, [r2, #5]
 800d77c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800d77e:	187b      	adds	r3, r7, r1
 800d780:	2102      	movs	r1, #2
 800d782:	0018      	movs	r0, r3
 800d784:	f7ff ff22 	bl	800d5cc <CalculateCRC>
 800d788:	0003      	movs	r3, r0
 800d78a:	001a      	movs	r2, r3
 800d78c:	193b      	adds	r3, r7, r4
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	4293      	cmp	r3, r2
 800d792:	d00d      	beq.n	800d7b0 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800d794:	4a0b      	ldr	r2, [pc, #44]	@ (800d7c4 <CheckCRC+0xac>)
 800d796:	4b0a      	ldr	r3, [pc, #40]	@ (800d7c0 <CheckCRC+0xa8>)
 800d798:	0019      	movs	r1, r3
 800d79a:	2001      	movs	r0, #1
 800d79c:	f7ff fe0a 	bl	800d3b4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800d7a0:	4a09      	ldr	r2, [pc, #36]	@ (800d7c8 <CheckCRC+0xb0>)
 800d7a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d7cc <CheckCRC+0xb4>)
 800d7a4:	2170      	movs	r1, #112	@ 0x70
 800d7a6:	0018      	movs	r0, r3
 800d7a8:	f7ff feba 	bl	800d520 <errorHandler>
		return false;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e000      	b.n	800d7b2 <CheckCRC+0x9a>
	}
	return true;
 800d7b0:	2301      	movs	r3, #1
}
 800d7b2:	0018      	movs	r0, r3
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	b005      	add	sp, #20
 800d7b8:	bd90      	pop	{r4, r7, pc}
 800d7ba:	46c0      	nop			@ (mov r8, r8)
 800d7bc:	080236a4 	.word	0x080236a4
 800d7c0:	080236cc 	.word	0x080236cc
 800d7c4:	080236d0 	.word	0x080236d0
 800d7c8:	080236fc 	.word	0x080236fc
 800d7cc:	08023bd4 	.word	0x08023bd4

0800d7d0 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800d7d6:	1dbb      	adds	r3, r7, #6
 800d7d8:	2289      	movs	r2, #137	@ 0x89
 800d7da:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800d7dc:	1dbb      	adds	r3, r7, #6
 800d7de:	2201      	movs	r2, #1
 800d7e0:	0019      	movs	r1, r3
 800d7e2:	2044      	movs	r0, #68	@ 0x44
 800d7e4:	f7ff fed0 	bl	800d588 <WriteRegister>
	HAL_Delay(30);
 800d7e8:	201e      	movs	r0, #30
 800d7ea:	f000 f98b 	bl	800db04 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800d7ee:	4b14      	ldr	r3, [pc, #80]	@ (800d840 <HIDS_DeviceConnected+0x70>)
 800d7f0:	2206      	movs	r2, #6
 800d7f2:	0019      	movs	r1, r3
 800d7f4:	2044      	movs	r0, #68	@ 0x44
 800d7f6:	f7ff fea5 	bl	800d544 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d7fa:	1dfb      	adds	r3, r7, #7
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	701a      	strb	r2, [r3, #0]
 800d800:	e011      	b.n	800d826 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800d802:	1dfb      	adds	r3, r7, #7
 800d804:	7818      	ldrb	r0, [r3, #0]
 800d806:	1dfb      	adds	r3, r7, #7
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	4a0d      	ldr	r2, [pc, #52]	@ (800d840 <HIDS_DeviceConnected+0x70>)
 800d80c:	5cd3      	ldrb	r3, [r2, r3]
 800d80e:	4a0d      	ldr	r2, [pc, #52]	@ (800d844 <HIDS_DeviceConnected+0x74>)
 800d810:	490d      	ldr	r1, [pc, #52]	@ (800d848 <HIDS_DeviceConnected+0x78>)
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	0003      	movs	r3, r0
 800d816:	2002      	movs	r0, #2
 800d818:	f7ff fdcc 	bl	800d3b4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d81c:	1dfb      	adds	r3, r7, #7
 800d81e:	781a      	ldrb	r2, [r3, #0]
 800d820:	1dfb      	adds	r3, r7, #7
 800d822:	3201      	adds	r2, #1
 800d824:	701a      	strb	r2, [r3, #0]
 800d826:	1dfb      	adds	r3, r7, #7
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b05      	cmp	r3, #5
 800d82c:	d9e9      	bls.n	800d802 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800d82e:	4b04      	ldr	r3, [pc, #16]	@ (800d840 <HIDS_DeviceConnected+0x70>)
 800d830:	0018      	movs	r0, r3
 800d832:	f7ff ff71 	bl	800d718 <CheckCRC>
 800d836:	0003      	movs	r3, r0
}
 800d838:	0018      	movs	r0, r3
 800d83a:	46bd      	mov	sp, r7
 800d83c:	b002      	add	sp, #8
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	200024e8 	.word	0x200024e8
 800d844:	08023714 	.word	0x08023714
 800d848:	080236a0 	.word	0x080236a0

0800d84c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	0002      	movs	r2, r0
 800d854:	1dfb      	adds	r3, r7, #7
 800d856:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800d858:	4b03      	ldr	r3, [pc, #12]	@ (800d868 <HIDS_SetMeasurementMode+0x1c>)
 800d85a:	1dfa      	adds	r2, r7, #7
 800d85c:	7812      	ldrb	r2, [r2, #0]
 800d85e:	701a      	strb	r2, [r3, #0]
}
 800d860:	46c0      	nop			@ (mov r8, r8)
 800d862:	46bd      	mov	sp, r7
 800d864:	b002      	add	sp, #8
 800d866:	bd80      	pop	{r7, pc}
 800d868:	200000ce 	.word	0x200000ce

0800d86c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800d870:	4b04      	ldr	r3, [pc, #16]	@ (800d884 <HIDS_MeasurementReady+0x18>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	0018      	movs	r0, r3
 800d876:	f7ff fd47 	bl	800d308 <TimestampIsReached>
 800d87a:	0003      	movs	r3, r0
}
 800d87c:	0018      	movs	r0, r3
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	46c0      	nop			@ (mov r8, r8)
 800d884:	200000d0 	.word	0x200000d0

0800d888 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800d888:	b590      	push	{r4, r7, lr}
 800d88a:	b087      	sub	sp, #28
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800d892:	4b49      	ldr	r3, [pc, #292]	@ (800d9b8 <HIDS_GetMeasurementValues+0x130>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <HIDS_GetMeasurementValues+0x16>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e087      	b.n	800d9ae <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800d89e:	f7ff ffe5 	bl	800d86c <HIDS_MeasurementReady>
 800d8a2:	0003      	movs	r3, r0
 800d8a4:	001a      	movs	r2, r3
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	4053      	eors	r3, r2
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d001      	beq.n	800d8b4 <HIDS_GetMeasurementValues+0x2c>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	e07c      	b.n	800d9ae <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800d8b4:	2316      	movs	r3, #22
 800d8b6:	18fc      	adds	r4, r7, r3
 800d8b8:	4b40      	ldr	r3, [pc, #256]	@ (800d9bc <HIDS_GetMeasurementValues+0x134>)
 800d8ba:	2206      	movs	r2, #6
 800d8bc:	0019      	movs	r1, r3
 800d8be:	2044      	movs	r0, #68	@ 0x44
 800d8c0:	f7ff fe40 	bl	800d544 <ReadRegister>
 800d8c4:	0003      	movs	r3, r0
 800d8c6:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800d8c8:	4b3c      	ldr	r3, [pc, #240]	@ (800d9bc <HIDS_GetMeasurementValues+0x134>)
 800d8ca:	0018      	movs	r0, r3
 800d8cc:	f7ff ff24 	bl	800d718 <CheckCRC>
 800d8d0:	0003      	movs	r3, r0
 800d8d2:	001a      	movs	r2, r3
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4053      	eors	r3, r2
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d011      	beq.n	800d902 <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800d8de:	2317      	movs	r3, #23
 800d8e0:	18fb      	adds	r3, r7, r3
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	701a      	strb	r2, [r3, #0]
 800d8e6:	e005      	b.n	800d8f4 <HIDS_GetMeasurementValues+0x6c>
 800d8e8:	2117      	movs	r1, #23
 800d8ea:	187b      	adds	r3, r7, r1
 800d8ec:	781a      	ldrb	r2, [r3, #0]
 800d8ee:	187b      	adds	r3, r7, r1
 800d8f0:	3201      	adds	r2, #1
 800d8f2:	701a      	strb	r2, [r3, #0]
 800d8f4:	2317      	movs	r3, #23
 800d8f6:	18fb      	adds	r3, r7, r3
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b05      	cmp	r3, #5
 800d8fc:	d9f4      	bls.n	800d8e8 <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800d8fe:	2300      	movs	r3, #0
 800d900:	e055      	b.n	800d9ae <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800d902:	4b2e      	ldr	r3, [pc, #184]	@ (800d9bc <HIDS_GetMeasurementValues+0x134>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	021b      	lsls	r3, r3, #8
 800d908:	4a2c      	ldr	r2, [pc, #176]	@ (800d9bc <HIDS_GetMeasurementValues+0x134>)
 800d90a:	7852      	ldrb	r2, [r2, #1]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	22af      	movs	r2, #175	@ 0xaf
 800d910:	4353      	muls	r3, r2
 800d912:	0018      	movs	r0, r3
 800d914:	f7f5 fd54 	bl	80033c0 <__aeabi_i2d>
 800d918:	2200      	movs	r2, #0
 800d91a:	4b29      	ldr	r3, [pc, #164]	@ (800d9c0 <HIDS_GetMeasurementValues+0x138>)
 800d91c:	f7f4 fa4a 	bl	8001db4 <__aeabi_ddiv>
 800d920:	0002      	movs	r2, r0
 800d922:	000b      	movs	r3, r1
 800d924:	0010      	movs	r0, r2
 800d926:	0019      	movs	r1, r3
 800d928:	f7f5 fde4 	bl	80034f4 <__aeabi_d2f>
 800d92c:	1c03      	adds	r3, r0, #0
 800d92e:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800d930:	4924      	ldr	r1, [pc, #144]	@ (800d9c4 <HIDS_GetMeasurementValues+0x13c>)
 800d932:	6938      	ldr	r0, [r7, #16]
 800d934:	f7f3 fc72 	bl	800121c <__aeabi_fsub>
 800d938:	1c03      	adds	r3, r0, #0
 800d93a:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800d93c:	4b1f      	ldr	r3, [pc, #124]	@ (800d9bc <HIDS_GetMeasurementValues+0x134>)
 800d93e:	78db      	ldrb	r3, [r3, #3]
 800d940:	021b      	lsls	r3, r3, #8
 800d942:	4a1e      	ldr	r2, [pc, #120]	@ (800d9bc <HIDS_GetMeasurementValues+0x134>)
 800d944:	7912      	ldrb	r2, [r2, #4]
 800d946:	431a      	orrs	r2, r3
 800d948:	0013      	movs	r3, r2
 800d94a:	015b      	lsls	r3, r3, #5
 800d94c:	1a9b      	subs	r3, r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	189b      	adds	r3, r3, r2
 800d952:	0018      	movs	r0, r3
 800d954:	f7f5 fd34 	bl	80033c0 <__aeabi_i2d>
 800d958:	2200      	movs	r2, #0
 800d95a:	4b19      	ldr	r3, [pc, #100]	@ (800d9c0 <HIDS_GetMeasurementValues+0x138>)
 800d95c:	f7f4 fa2a 	bl	8001db4 <__aeabi_ddiv>
 800d960:	0002      	movs	r2, r0
 800d962:	000b      	movs	r3, r1
 800d964:	0010      	movs	r0, r2
 800d966:	0019      	movs	r1, r3
 800d968:	f7f5 fdc4 	bl	80034f4 <__aeabi_d2f>
 800d96c:	1c03      	adds	r3, r0, #0
 800d96e:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800d970:	4915      	ldr	r1, [pc, #84]	@ (800d9c8 <HIDS_GetMeasurementValues+0x140>)
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7f3 fc52 	bl	800121c <__aeabi_fsub>
 800d978:	1c03      	adds	r3, r0, #0
 800d97a:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	0011      	movs	r1, r2
 800d98e:	0018      	movs	r0, r3
 800d990:	f7fd fcec 	bl	800b36c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	1c11      	adds	r1, r2, #0
 800d99a:	1c18      	adds	r0, r3, #0
 800d99c:	f7f5 ff9a 	bl	80038d4 <ESP_GetHT>

   measurements = 0;
 800d9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <HIDS_GetMeasurementValues+0x144>)
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800d9a6:	4b04      	ldr	r3, [pc, #16]	@ (800d9b8 <HIDS_GetMeasurementValues+0x130>)
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800d9ac:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	b007      	add	sp, #28
 800d9b4:	bd90      	pop	{r4, r7, pc}
 800d9b6:	46c0      	nop			@ (mov r8, r8)
 800d9b8:	200024f6 	.word	0x200024f6
 800d9bc:	200024f0 	.word	0x200024f0
 800d9c0:	40efffe0 	.word	0x40efffe0
 800d9c4:	42340000 	.word	0x42340000
 800d9c8:	40c00000 	.word	0x40c00000
 800d9cc:	200024f8 	.word	0x200024f8

0800d9d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800d9d0:	480d      	ldr	r0, [pc, #52]	@ (800da08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800d9d2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800d9d4:	f7ff f8ee 	bl	800cbb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d9d8:	480c      	ldr	r0, [pc, #48]	@ (800da0c <LoopForever+0x6>)
  ldr r1, =_edata
 800d9da:	490d      	ldr	r1, [pc, #52]	@ (800da10 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d9dc:	4a0d      	ldr	r2, [pc, #52]	@ (800da14 <LoopForever+0xe>)
  movs r3, #0
 800d9de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d9e0:	e002      	b.n	800d9e8 <LoopCopyDataInit>

0800d9e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d9e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d9e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d9e6:	3304      	adds	r3, #4

0800d9e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d9e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d9ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d9ec:	d3f9      	bcc.n	800d9e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d9ee:	4a0a      	ldr	r2, [pc, #40]	@ (800da18 <LoopForever+0x12>)
  ldr r4, =_ebss
 800d9f0:	4c0a      	ldr	r4, [pc, #40]	@ (800da1c <LoopForever+0x16>)
  movs r3, #0
 800d9f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d9f4:	e001      	b.n	800d9fa <LoopFillZerobss>

0800d9f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d9f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d9f8:	3204      	adds	r2, #4

0800d9fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d9fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d9fc:	d3fb      	bcc.n	800d9f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d9fe:	f011 fb09 	bl	801f014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800da02:	f7f9 fdd7 	bl	80075b4 <main>

0800da06 <LoopForever>:

LoopForever:
    b LoopForever
 800da06:	e7fe      	b.n	800da06 <LoopForever>
   ldr   r0, =_estack
 800da08:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800da0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800da10:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800da14:	08024558 	.word	0x08024558
  ldr r2, =_sbss
 800da18:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800da1c:	20003900 	.word	0x20003900

0800da20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800da20:	e7fe      	b.n	800da20 <ADC1_COMP_IRQHandler>
	...

0800da24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800da2a:	1dfb      	adds	r3, r7, #7
 800da2c:	2200      	movs	r2, #0
 800da2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800da30:	4b0b      	ldr	r3, [pc, #44]	@ (800da60 <HAL_Init+0x3c>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <HAL_Init+0x3c>)
 800da36:	2140      	movs	r1, #64	@ 0x40
 800da38:	430a      	orrs	r2, r1
 800da3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800da3c:	2003      	movs	r0, #3
 800da3e:	f000 f811 	bl	800da64 <HAL_InitTick>
 800da42:	1e03      	subs	r3, r0, #0
 800da44:	d003      	beq.n	800da4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800da46:	1dfb      	adds	r3, r7, #7
 800da48:	2201      	movs	r2, #1
 800da4a:	701a      	strb	r2, [r3, #0]
 800da4c:	e001      	b.n	800da52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800da4e:	f7fe ff6f 	bl	800c930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800da52:	1dfb      	adds	r3, r7, #7
 800da54:	781b      	ldrb	r3, [r3, #0]
}
 800da56:	0018      	movs	r0, r3
 800da58:	46bd      	mov	sp, r7
 800da5a:	b002      	add	sp, #8
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	46c0      	nop			@ (mov r8, r8)
 800da60:	40022000 	.word	0x40022000

0800da64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800da64:	b590      	push	{r4, r7, lr}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800da6c:	4b14      	ldr	r3, [pc, #80]	@ (800dac0 <HAL_InitTick+0x5c>)
 800da6e:	681c      	ldr	r4, [r3, #0]
 800da70:	4b14      	ldr	r3, [pc, #80]	@ (800dac4 <HAL_InitTick+0x60>)
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	0019      	movs	r1, r3
 800da76:	23fa      	movs	r3, #250	@ 0xfa
 800da78:	0098      	lsls	r0, r3, #2
 800da7a:	f7f2 fb93 	bl	80001a4 <__udivsi3>
 800da7e:	0003      	movs	r3, r0
 800da80:	0019      	movs	r1, r3
 800da82:	0020      	movs	r0, r4
 800da84:	f7f2 fb8e 	bl	80001a4 <__udivsi3>
 800da88:	0003      	movs	r3, r0
 800da8a:	0018      	movs	r0, r3
 800da8c:	f000 fce7 	bl	800e45e <HAL_SYSTICK_Config>
 800da90:	1e03      	subs	r3, r0, #0
 800da92:	d001      	beq.n	800da98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e00f      	b.n	800dab8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d80b      	bhi.n	800dab6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800da9e:	6879      	ldr	r1, [r7, #4]
 800daa0:	2301      	movs	r3, #1
 800daa2:	425b      	negs	r3, r3
 800daa4:	2200      	movs	r2, #0
 800daa6:	0018      	movs	r0, r3
 800daa8:	f000 fcb4 	bl	800e414 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800daac:	4b06      	ldr	r3, [pc, #24]	@ (800dac8 <HAL_InitTick+0x64>)
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	e000      	b.n	800dab8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800dab6:	2301      	movs	r3, #1
}
 800dab8:	0018      	movs	r0, r3
 800daba:	46bd      	mov	sp, r7
 800dabc:	b003      	add	sp, #12
 800dabe:	bd90      	pop	{r4, r7, pc}
 800dac0:	200000c8 	.word	0x200000c8
 800dac4:	200000dc 	.word	0x200000dc
 800dac8:	200000d8 	.word	0x200000d8

0800dacc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dad0:	4b05      	ldr	r3, [pc, #20]	@ (800dae8 <HAL_IncTick+0x1c>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	001a      	movs	r2, r3
 800dad6:	4b05      	ldr	r3, [pc, #20]	@ (800daec <HAL_IncTick+0x20>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	18d2      	adds	r2, r2, r3
 800dadc:	4b03      	ldr	r3, [pc, #12]	@ (800daec <HAL_IncTick+0x20>)
 800dade:	601a      	str	r2, [r3, #0]
}
 800dae0:	46c0      	nop			@ (mov r8, r8)
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	46c0      	nop			@ (mov r8, r8)
 800dae8:	200000dc 	.word	0x200000dc
 800daec:	200024fc 	.word	0x200024fc

0800daf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	af00      	add	r7, sp, #0
  return uwTick;
 800daf4:	4b02      	ldr	r3, [pc, #8]	@ (800db00 <HAL_GetTick+0x10>)
 800daf6:	681b      	ldr	r3, [r3, #0]
}
 800daf8:	0018      	movs	r0, r3
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	46c0      	nop			@ (mov r8, r8)
 800db00:	200024fc 	.word	0x200024fc

0800db04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800db0c:	f7ff fff0 	bl	800daf0 <HAL_GetTick>
 800db10:	0003      	movs	r3, r0
 800db12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3301      	adds	r3, #1
 800db1c:	d005      	beq.n	800db2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800db1e:	4b0a      	ldr	r3, [pc, #40]	@ (800db48 <HAL_Delay+0x44>)
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	001a      	movs	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	189b      	adds	r3, r3, r2
 800db28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800db2a:	46c0      	nop			@ (mov r8, r8)
 800db2c:	f7ff ffe0 	bl	800daf0 <HAL_GetTick>
 800db30:	0002      	movs	r2, r0
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d8f7      	bhi.n	800db2c <HAL_Delay+0x28>
  {
  }
}
 800db3c:	46c0      	nop			@ (mov r8, r8)
 800db3e:	46c0      	nop			@ (mov r8, r8)
 800db40:	46bd      	mov	sp, r7
 800db42:	b004      	add	sp, #16
 800db44:	bd80      	pop	{r7, pc}
 800db46:	46c0      	nop			@ (mov r8, r8)
 800db48:	200000dc 	.word	0x200000dc

0800db4c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800db50:	4b04      	ldr	r3, [pc, #16]	@ (800db64 <HAL_SuspendTick+0x18>)
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	4b03      	ldr	r3, [pc, #12]	@ (800db64 <HAL_SuspendTick+0x18>)
 800db56:	2102      	movs	r1, #2
 800db58:	438a      	bics	r2, r1
 800db5a:	601a      	str	r2, [r3, #0]
}
 800db5c:	46c0      	nop			@ (mov r8, r8)
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	46c0      	nop			@ (mov r8, r8)
 800db64:	e000e010 	.word	0xe000e010

0800db68 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800db6c:	4b04      	ldr	r3, [pc, #16]	@ (800db80 <HAL_ResumeTick+0x18>)
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	4b03      	ldr	r3, [pc, #12]	@ (800db80 <HAL_ResumeTick+0x18>)
 800db72:	2102      	movs	r1, #2
 800db74:	430a      	orrs	r2, r1
 800db76:	601a      	str	r2, [r3, #0]
}
 800db78:	46c0      	nop			@ (mov r8, r8)
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	46c0      	nop			@ (mov r8, r8)
 800db80:	e000e010 	.word	0xe000e010

0800db84 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800db88:	4b02      	ldr	r3, [pc, #8]	@ (800db94 <HAL_GetUIDw0+0x10>)
 800db8a:	681b      	ldr	r3, [r3, #0]
}
 800db8c:	0018      	movs	r0, r3
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	46c0      	nop			@ (mov r8, r8)
 800db94:	1ff80050 	.word	0x1ff80050

0800db98 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800db9c:	4b02      	ldr	r3, [pc, #8]	@ (800dba8 <HAL_GetUIDw1+0x10>)
 800db9e:	681b      	ldr	r3, [r3, #0]
}
 800dba0:	0018      	movs	r0, r3
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	46c0      	nop			@ (mov r8, r8)
 800dba8:	1ff80054 	.word	0x1ff80054

0800dbac <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800dbb0:	4b02      	ldr	r3, [pc, #8]	@ (800dbbc <HAL_GetUIDw2+0x10>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
}
 800dbb4:	0018      	movs	r0, r3
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	46c0      	nop			@ (mov r8, r8)
 800dbbc:	1ff80064 	.word	0x1ff80064

0800dbc0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d101      	bne.n	800dbd2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e159      	b.n	800de86 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10a      	bne.n	800dbf0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2250      	movs	r2, #80	@ 0x50
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	0018      	movs	r0, r3
 800dbec:	f7f8 fef0 	bl	80069d0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbf4:	2210      	movs	r2, #16
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	2b10      	cmp	r3, #16
 800dbfa:	d005      	beq.n	800dc08 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	2204      	movs	r2, #4
 800dc04:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800dc06:	d00b      	beq.n	800dc20 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc0c:	2210      	movs	r2, #16
 800dc0e:	431a      	orrs	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2250      	movs	r2, #80	@ 0x50
 800dc18:	2100      	movs	r1, #0
 800dc1a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	e132      	b.n	800de86 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc24:	4a9a      	ldr	r2, [pc, #616]	@ (800de90 <HAL_ADC_Init+0x2d0>)
 800dc26:	4013      	ands	r3, r2
 800dc28:	2202      	movs	r2, #2
 800dc2a:	431a      	orrs	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	2203      	movs	r2, #3
 800dc38:	4013      	ands	r3, r2
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d108      	bne.n	800dc50 <HAL_ADC_Init+0x90>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2201      	movs	r2, #1
 800dc46:	4013      	ands	r3, r2
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d101      	bne.n	800dc50 <HAL_ADC_Init+0x90>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e000      	b.n	800dc52 <HAL_ADC_Init+0x92>
 800dc50:	2300      	movs	r3, #0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d149      	bne.n	800dcea <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	23c0      	movs	r3, #192	@ 0xc0
 800dc5c:	061b      	lsls	r3, r3, #24
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d00b      	beq.n	800dc7a <HAL_ADC_Init+0xba>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	2380      	movs	r3, #128	@ 0x80
 800dc68:	05db      	lsls	r3, r3, #23
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d005      	beq.n	800dc7a <HAL_ADC_Init+0xba>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	2380      	movs	r3, #128	@ 0x80
 800dc74:	061b      	lsls	r3, r3, #24
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d111      	bne.n	800dc9e <HAL_ADC_Init+0xde>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	691a      	ldr	r2, [r3, #16]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	0092      	lsls	r2, r2, #2
 800dc86:	0892      	lsrs	r2, r2, #2
 800dc88:	611a      	str	r2, [r3, #16]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6919      	ldr	r1, [r3, #16]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	430a      	orrs	r2, r1
 800dc9a:	611a      	str	r2, [r3, #16]
 800dc9c:	e014      	b.n	800dcc8 <HAL_ADC_Init+0x108>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	691a      	ldr	r2, [r3, #16]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	0092      	lsls	r2, r2, #2
 800dcaa:	0892      	lsrs	r2, r2, #2
 800dcac:	611a      	str	r2, [r3, #16]
 800dcae:	4b79      	ldr	r3, [pc, #484]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b78      	ldr	r3, [pc, #480]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dcb4:	4978      	ldr	r1, [pc, #480]	@ (800de98 <HAL_ADC_Init+0x2d8>)
 800dcb6:	400a      	ands	r2, r1
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	4b76      	ldr	r3, [pc, #472]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dcbc:	6819      	ldr	r1, [r3, #0]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	685a      	ldr	r2, [r3, #4]
 800dcc2:	4b74      	ldr	r3, [pc, #464]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dcc4:	430a      	orrs	r2, r1
 800dcc6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2118      	movs	r1, #24
 800dcd4:	438a      	bics	r2, r1
 800dcd6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	68d9      	ldr	r1, [r3, #12]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	689a      	ldr	r2, [r3, #8]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	430a      	orrs	r2, r1
 800dce8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800dcea:	4b6a      	ldr	r3, [pc, #424]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	4b69      	ldr	r3, [pc, #420]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dcf0:	496a      	ldr	r1, [pc, #424]	@ (800de9c <HAL_ADC_Init+0x2dc>)
 800dcf2:	400a      	ands	r2, r1
 800dcf4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800dcf6:	4b67      	ldr	r3, [pc, #412]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dcf8:	6819      	ldr	r1, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcfe:	065a      	lsls	r2, r3, #25
 800dd00:	4b64      	ldr	r3, [pc, #400]	@ (800de94 <HAL_ADC_Init+0x2d4>)
 800dd02:	430a      	orrs	r2, r1
 800dd04:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	689a      	ldr	r2, [r3, #8]
 800dd0c:	2380      	movs	r3, #128	@ 0x80
 800dd0e:	055b      	lsls	r3, r3, #21
 800dd10:	4013      	ands	r3, r2
 800dd12:	d108      	bne.n	800dd26 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	689a      	ldr	r2, [r3, #8]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2180      	movs	r1, #128	@ 0x80
 800dd20:	0549      	lsls	r1, r1, #21
 800dd22:	430a      	orrs	r2, r1
 800dd24:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	495b      	ldr	r1, [pc, #364]	@ (800dea0 <HAL_ADC_Init+0x2e0>)
 800dd32:	400a      	ands	r2, r1
 800dd34:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68d9      	ldr	r1, [r3, #12]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d101      	bne.n	800dd4c <HAL_ADC_Init+0x18c>
 800dd48:	2304      	movs	r3, #4
 800dd4a:	e000      	b.n	800dd4e <HAL_ADC_Init+0x18e>
 800dd4c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800dd4e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2020      	movs	r0, #32
 800dd54:	5c1b      	ldrb	r3, [r3, r0]
 800dd56:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800dd58:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	202c      	movs	r0, #44	@ 0x2c
 800dd5e:	5c1b      	ldrb	r3, [r3, r0]
 800dd60:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800dd62:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800dd68:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	699b      	ldr	r3, [r3, #24]
 800dd6e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800dd70:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800dd78:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	430a      	orrs	r2, r1
 800dd80:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd86:	23c2      	movs	r3, #194	@ 0xc2
 800dd88:	33ff      	adds	r3, #255	@ 0xff
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d00b      	beq.n	800dda6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	68d9      	ldr	r1, [r3, #12]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800dd9c:	431a      	orrs	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	430a      	orrs	r2, r1
 800dda4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2221      	movs	r2, #33	@ 0x21
 800ddaa:	5c9b      	ldrb	r3, [r3, r2]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d11a      	bne.n	800dde6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2220      	movs	r2, #32
 800ddb4:	5c9b      	ldrb	r3, [r3, r2]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d109      	bne.n	800ddce <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68da      	ldr	r2, [r3, #12]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2180      	movs	r1, #128	@ 0x80
 800ddc6:	0249      	lsls	r1, r1, #9
 800ddc8:	430a      	orrs	r2, r1
 800ddca:	60da      	str	r2, [r3, #12]
 800ddcc:	e00b      	b.n	800dde6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddd2:	2220      	movs	r2, #32
 800ddd4:	431a      	orrs	r2, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddde:	2201      	movs	r2, #1
 800dde0:	431a      	orrs	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d11f      	bne.n	800de2e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	691a      	ldr	r2, [r3, #16]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	492a      	ldr	r1, [pc, #168]	@ (800dea4 <HAL_ADC_Init+0x2e4>)
 800ddfa:	400a      	ands	r2, r1
 800ddfc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	6919      	ldr	r1, [r3, #16]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800de0c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800de12:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	430a      	orrs	r2, r1
 800de1a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	691a      	ldr	r2, [r3, #16]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2101      	movs	r1, #1
 800de28:	430a      	orrs	r2, r1
 800de2a:	611a      	str	r2, [r3, #16]
 800de2c:	e00e      	b.n	800de4c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	2201      	movs	r2, #1
 800de36:	4013      	ands	r3, r2
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d107      	bne.n	800de4c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	691a      	ldr	r2, [r3, #16]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2101      	movs	r1, #1
 800de48:	438a      	bics	r2, r1
 800de4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	695a      	ldr	r2, [r3, #20]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2107      	movs	r1, #7
 800de58:	438a      	bics	r2, r1
 800de5a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6959      	ldr	r1, [r3, #20]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	430a      	orrs	r2, r1
 800de6c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de78:	2203      	movs	r2, #3
 800de7a:	4393      	bics	r3, r2
 800de7c:	2201      	movs	r2, #1
 800de7e:	431a      	orrs	r2, r3
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	0018      	movs	r0, r3
 800de88:	46bd      	mov	sp, r7
 800de8a:	b002      	add	sp, #8
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	46c0      	nop			@ (mov r8, r8)
 800de90:	fffffefd 	.word	0xfffffefd
 800de94:	40012708 	.word	0x40012708
 800de98:	ffc3ffff 	.word	0xffc3ffff
 800de9c:	fdffffff 	.word	0xfdffffff
 800dea0:	fffe0219 	.word	0xfffe0219
 800dea4:	fffffc03 	.word	0xfffffc03

0800dea8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800dea8:	b590      	push	{r4, r7, lr}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800deb0:	230f      	movs	r3, #15
 800deb2:	18fb      	adds	r3, r7, r3
 800deb4:	2200      	movs	r2, #0
 800deb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	2204      	movs	r2, #4
 800dec0:	4013      	ands	r3, r2
 800dec2:	d138      	bne.n	800df36 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2250      	movs	r2, #80	@ 0x50
 800dec8:	5c9b      	ldrb	r3, [r3, r2]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d101      	bne.n	800ded2 <HAL_ADC_Start+0x2a>
 800dece:	2302      	movs	r3, #2
 800ded0:	e038      	b.n	800df44 <HAL_ADC_Start+0x9c>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2250      	movs	r2, #80	@ 0x50
 800ded6:	2101      	movs	r1, #1
 800ded8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d007      	beq.n	800def2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800dee2:	230f      	movs	r3, #15
 800dee4:	18fc      	adds	r4, r7, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	0018      	movs	r0, r3
 800deea:	f000 f95f 	bl	800e1ac <ADC_Enable>
 800deee:	0003      	movs	r3, r0
 800def0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800def2:	230f      	movs	r3, #15
 800def4:	18fb      	adds	r3, r7, r3
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d120      	bne.n	800df3e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df00:	4a12      	ldr	r2, [pc, #72]	@ (800df4c <HAL_ADC_Start+0xa4>)
 800df02:	4013      	ands	r3, r2
 800df04:	2280      	movs	r2, #128	@ 0x80
 800df06:	0052      	lsls	r2, r2, #1
 800df08:	431a      	orrs	r2, r3
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2250      	movs	r2, #80	@ 0x50
 800df18:	2100      	movs	r1, #0
 800df1a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	221c      	movs	r2, #28
 800df22:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	689a      	ldr	r2, [r3, #8]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2104      	movs	r1, #4
 800df30:	430a      	orrs	r2, r1
 800df32:	609a      	str	r2, [r3, #8]
 800df34:	e003      	b.n	800df3e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800df36:	230f      	movs	r3, #15
 800df38:	18fb      	adds	r3, r7, r3
 800df3a:	2202      	movs	r2, #2
 800df3c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800df3e:	230f      	movs	r3, #15
 800df40:	18fb      	adds	r3, r7, r3
 800df42:	781b      	ldrb	r3, [r3, #0]
}
 800df44:	0018      	movs	r0, r3
 800df46:	46bd      	mov	sp, r7
 800df48:	b005      	add	sp, #20
 800df4a:	bd90      	pop	{r4, r7, pc}
 800df4c:	fffff0fe 	.word	0xfffff0fe

0800df50 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800df5e:	2300      	movs	r3, #0
 800df60:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	2b08      	cmp	r3, #8
 800df68:	d102      	bne.n	800df70 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800df6a:	2308      	movs	r3, #8
 800df6c:	60fb      	str	r3, [r7, #12]
 800df6e:	e014      	b.n	800df9a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	2201      	movs	r2, #1
 800df78:	4013      	ands	r3, r2
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d10b      	bne.n	800df96 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df82:	2220      	movs	r2, #32
 800df84:	431a      	orrs	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2250      	movs	r2, #80	@ 0x50
 800df8e:	2100      	movs	r1, #0
 800df90:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800df92:	2301      	movs	r3, #1
 800df94:	e072      	b.n	800e07c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800df96:	230c      	movs	r3, #12
 800df98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800df9a:	f7ff fda9 	bl	800daf0 <HAL_GetTick>
 800df9e:	0003      	movs	r3, r0
 800dfa0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800dfa2:	e01f      	b.n	800dfe4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	d01c      	beq.n	800dfe4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d007      	beq.n	800dfc0 <HAL_ADC_PollForConversion+0x70>
 800dfb0:	f7ff fd9e 	bl	800daf0 <HAL_GetTick>
 800dfb4:	0002      	movs	r2, r0
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d211      	bcs.n	800dfe4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	4013      	ands	r3, r2
 800dfca:	d10b      	bne.n	800dfe4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfd0:	2204      	movs	r2, #4
 800dfd2:	431a      	orrs	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2250      	movs	r2, #80	@ 0x50
 800dfdc:	2100      	movs	r1, #0
 800dfde:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	e04b      	b.n	800e07c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	4013      	ands	r3, r2
 800dfee:	d0d9      	beq.n	800dfa4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dff4:	2280      	movs	r2, #128	@ 0x80
 800dff6:	0092      	lsls	r2, r2, #2
 800dff8:	431a      	orrs	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68da      	ldr	r2, [r3, #12]
 800e004:	23c0      	movs	r3, #192	@ 0xc0
 800e006:	011b      	lsls	r3, r3, #4
 800e008:	4013      	ands	r3, r2
 800e00a:	d12e      	bne.n	800e06a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2220      	movs	r2, #32
 800e010:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e012:	2b00      	cmp	r3, #0
 800e014:	d129      	bne.n	800e06a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2208      	movs	r2, #8
 800e01e:	4013      	ands	r3, r2
 800e020:	2b08      	cmp	r3, #8
 800e022:	d122      	bne.n	800e06a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	2204      	movs	r2, #4
 800e02c:	4013      	ands	r3, r2
 800e02e:	d110      	bne.n	800e052 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	210c      	movs	r1, #12
 800e03c:	438a      	bics	r2, r1
 800e03e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e044:	4a0f      	ldr	r2, [pc, #60]	@ (800e084 <HAL_ADC_PollForConversion+0x134>)
 800e046:	4013      	ands	r3, r2
 800e048:	2201      	movs	r2, #1
 800e04a:	431a      	orrs	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	655a      	str	r2, [r3, #84]	@ 0x54
 800e050:	e00b      	b.n	800e06a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e056:	2220      	movs	r2, #32
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e062:	2201      	movs	r2, #1
 800e064:	431a      	orrs	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	699b      	ldr	r3, [r3, #24]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d103      	bne.n	800e07a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	220c      	movs	r2, #12
 800e078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	0018      	movs	r0, r3
 800e07e:	46bd      	mov	sp, r7
 800e080:	b004      	add	sp, #16
 800e082:	bd80      	pop	{r7, pc}
 800e084:	fffffefe 	.word	0xfffffefe

0800e088 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e096:	0018      	movs	r0, r3
 800e098:	46bd      	mov	sp, r7
 800e09a:	b002      	add	sp, #8
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2250      	movs	r2, #80	@ 0x50
 800e0ae:	5c9b      	ldrb	r3, [r3, r2]
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d101      	bne.n	800e0b8 <HAL_ADC_ConfigChannel+0x18>
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	e06c      	b.n	800e192 <HAL_ADC_ConfigChannel+0xf2>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2250      	movs	r2, #80	@ 0x50
 800e0bc:	2101      	movs	r1, #1
 800e0be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	2204      	movs	r2, #4
 800e0c8:	4013      	ands	r3, r2
 800e0ca:	d00b      	beq.n	800e0e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0d0:	2220      	movs	r2, #32
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2250      	movs	r2, #80	@ 0x50
 800e0dc:	2100      	movs	r1, #0
 800e0de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e056      	b.n	800e192 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	4a2c      	ldr	r2, [pc, #176]	@ (800e19c <HAL_ADC_ConfigChannel+0xfc>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d028      	beq.n	800e140 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	035b      	lsls	r3, r3, #13
 800e0fa:	0b5a      	lsrs	r2, r3, #13
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	430a      	orrs	r2, r1
 800e102:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	2380      	movs	r3, #128	@ 0x80
 800e10a:	02db      	lsls	r3, r3, #11
 800e10c:	4013      	ands	r3, r2
 800e10e:	d009      	beq.n	800e124 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e110:	4b23      	ldr	r3, [pc, #140]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	4b22      	ldr	r3, [pc, #136]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e116:	2180      	movs	r1, #128	@ 0x80
 800e118:	0409      	lsls	r1, r1, #16
 800e11a:	430a      	orrs	r2, r1
 800e11c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e11e:	200a      	movs	r0, #10
 800e120:	f000 f8ac 	bl	800e27c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	2380      	movs	r3, #128	@ 0x80
 800e12a:	029b      	lsls	r3, r3, #10
 800e12c:	4013      	ands	r3, r2
 800e12e:	d02b      	beq.n	800e188 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e130:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e136:	2180      	movs	r1, #128	@ 0x80
 800e138:	03c9      	lsls	r1, r1, #15
 800e13a:	430a      	orrs	r2, r1
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	e023      	b.n	800e188 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	035b      	lsls	r3, r3, #13
 800e14c:	0b5b      	lsrs	r3, r3, #13
 800e14e:	43d9      	mvns	r1, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	400a      	ands	r2, r1
 800e156:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	2380      	movs	r3, #128	@ 0x80
 800e15e:	02db      	lsls	r3, r3, #11
 800e160:	4013      	ands	r3, r2
 800e162:	d005      	beq.n	800e170 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e164:	4b0e      	ldr	r3, [pc, #56]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	4b0d      	ldr	r3, [pc, #52]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e16a:	490e      	ldr	r1, [pc, #56]	@ (800e1a4 <HAL_ADC_ConfigChannel+0x104>)
 800e16c:	400a      	ands	r2, r1
 800e16e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	2380      	movs	r3, #128	@ 0x80
 800e176:	029b      	lsls	r3, r3, #10
 800e178:	4013      	ands	r3, r2
 800e17a:	d005      	beq.n	800e188 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800e17c:	4b08      	ldr	r3, [pc, #32]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	4b07      	ldr	r3, [pc, #28]	@ (800e1a0 <HAL_ADC_ConfigChannel+0x100>)
 800e182:	4909      	ldr	r1, [pc, #36]	@ (800e1a8 <HAL_ADC_ConfigChannel+0x108>)
 800e184:	400a      	ands	r2, r1
 800e186:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2250      	movs	r2, #80	@ 0x50
 800e18c:	2100      	movs	r1, #0
 800e18e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	0018      	movs	r0, r3
 800e194:	46bd      	mov	sp, r7
 800e196:	b002      	add	sp, #8
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	46c0      	nop			@ (mov r8, r8)
 800e19c:	00001001 	.word	0x00001001
 800e1a0:	40012708 	.word	0x40012708
 800e1a4:	ff7fffff 	.word	0xff7fffff
 800e1a8:	ffbfffff 	.word	0xffbfffff

0800e1ac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	2203      	movs	r2, #3
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d108      	bne.n	800e1d8 <ADC_Enable+0x2c>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d101      	bne.n	800e1d8 <ADC_Enable+0x2c>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e000      	b.n	800e1da <ADC_Enable+0x2e>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d146      	bne.n	800e26c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	4a24      	ldr	r2, [pc, #144]	@ (800e278 <ADC_Enable+0xcc>)
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	d00d      	beq.n	800e206 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1ee:	2210      	movs	r2, #16
 800e1f0:	431a      	orrs	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	431a      	orrs	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800e202:	2301      	movs	r3, #1
 800e204:	e033      	b.n	800e26e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	689a      	ldr	r2, [r3, #8]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2101      	movs	r1, #1
 800e212:	430a      	orrs	r2, r1
 800e214:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800e216:	2001      	movs	r0, #1
 800e218:	f000 f830 	bl	800e27c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800e21c:	f7ff fc68 	bl	800daf0 <HAL_GetTick>
 800e220:	0003      	movs	r3, r0
 800e222:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e224:	e01b      	b.n	800e25e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e226:	f7ff fc63 	bl	800daf0 <HAL_GetTick>
 800e22a:	0002      	movs	r2, r0
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	2b0a      	cmp	r3, #10
 800e232:	d914      	bls.n	800e25e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2201      	movs	r2, #1
 800e23c:	4013      	ands	r3, r2
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d00d      	beq.n	800e25e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e246:	2210      	movs	r2, #16
 800e248:	431a      	orrs	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e252:	2201      	movs	r2, #1
 800e254:	431a      	orrs	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e007      	b.n	800e26e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2201      	movs	r2, #1
 800e266:	4013      	ands	r3, r2
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d1dc      	bne.n	800e226 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	0018      	movs	r0, r3
 800e270:	46bd      	mov	sp, r7
 800e272:	b004      	add	sp, #16
 800e274:	bd80      	pop	{r7, pc}
 800e276:	46c0      	nop			@ (mov r8, r8)
 800e278:	80000017 	.word	0x80000017

0800e27c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800e284:	4b0b      	ldr	r3, [pc, #44]	@ (800e2b4 <ADC_DelayMicroSecond+0x38>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	490b      	ldr	r1, [pc, #44]	@ (800e2b8 <ADC_DelayMicroSecond+0x3c>)
 800e28a:	0018      	movs	r0, r3
 800e28c:	f7f1 ff8a 	bl	80001a4 <__udivsi3>
 800e290:	0003      	movs	r3, r0
 800e292:	001a      	movs	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4353      	muls	r3, r2
 800e298:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800e29a:	e002      	b.n	800e2a2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1f9      	bne.n	800e29c <ADC_DelayMicroSecond+0x20>
  }
}
 800e2a8:	46c0      	nop			@ (mov r8, r8)
 800e2aa:	46c0      	nop			@ (mov r8, r8)
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	b004      	add	sp, #16
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	46c0      	nop			@ (mov r8, r8)
 800e2b4:	200000c8 	.word	0x200000c8
 800e2b8:	000f4240 	.word	0x000f4240

0800e2bc <__NVIC_EnableIRQ>:
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	0002      	movs	r2, r0
 800e2c4:	1dfb      	adds	r3, r7, #7
 800e2c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e2c8:	1dfb      	adds	r3, r7, #7
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800e2ce:	d809      	bhi.n	800e2e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e2d0:	1dfb      	adds	r3, r7, #7
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	001a      	movs	r2, r3
 800e2d6:	231f      	movs	r3, #31
 800e2d8:	401a      	ands	r2, r3
 800e2da:	4b04      	ldr	r3, [pc, #16]	@ (800e2ec <__NVIC_EnableIRQ+0x30>)
 800e2dc:	2101      	movs	r1, #1
 800e2de:	4091      	lsls	r1, r2
 800e2e0:	000a      	movs	r2, r1
 800e2e2:	601a      	str	r2, [r3, #0]
}
 800e2e4:	46c0      	nop			@ (mov r8, r8)
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	b002      	add	sp, #8
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	e000e100 	.word	0xe000e100

0800e2f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e2f0:	b590      	push	{r4, r7, lr}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	0002      	movs	r2, r0
 800e2f8:	6039      	str	r1, [r7, #0]
 800e2fa:	1dfb      	adds	r3, r7, #7
 800e2fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e2fe:	1dfb      	adds	r3, r7, #7
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b7f      	cmp	r3, #127	@ 0x7f
 800e304:	d828      	bhi.n	800e358 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e306:	4a2f      	ldr	r2, [pc, #188]	@ (800e3c4 <__NVIC_SetPriority+0xd4>)
 800e308:	1dfb      	adds	r3, r7, #7
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	b25b      	sxtb	r3, r3
 800e30e:	089b      	lsrs	r3, r3, #2
 800e310:	33c0      	adds	r3, #192	@ 0xc0
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	589b      	ldr	r3, [r3, r2]
 800e316:	1dfa      	adds	r2, r7, #7
 800e318:	7812      	ldrb	r2, [r2, #0]
 800e31a:	0011      	movs	r1, r2
 800e31c:	2203      	movs	r2, #3
 800e31e:	400a      	ands	r2, r1
 800e320:	00d2      	lsls	r2, r2, #3
 800e322:	21ff      	movs	r1, #255	@ 0xff
 800e324:	4091      	lsls	r1, r2
 800e326:	000a      	movs	r2, r1
 800e328:	43d2      	mvns	r2, r2
 800e32a:	401a      	ands	r2, r3
 800e32c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	019b      	lsls	r3, r3, #6
 800e332:	22ff      	movs	r2, #255	@ 0xff
 800e334:	401a      	ands	r2, r3
 800e336:	1dfb      	adds	r3, r7, #7
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	0018      	movs	r0, r3
 800e33c:	2303      	movs	r3, #3
 800e33e:	4003      	ands	r3, r0
 800e340:	00db      	lsls	r3, r3, #3
 800e342:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e344:	481f      	ldr	r0, [pc, #124]	@ (800e3c4 <__NVIC_SetPriority+0xd4>)
 800e346:	1dfb      	adds	r3, r7, #7
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	b25b      	sxtb	r3, r3
 800e34c:	089b      	lsrs	r3, r3, #2
 800e34e:	430a      	orrs	r2, r1
 800e350:	33c0      	adds	r3, #192	@ 0xc0
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800e356:	e031      	b.n	800e3bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e358:	4a1b      	ldr	r2, [pc, #108]	@ (800e3c8 <__NVIC_SetPriority+0xd8>)
 800e35a:	1dfb      	adds	r3, r7, #7
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	0019      	movs	r1, r3
 800e360:	230f      	movs	r3, #15
 800e362:	400b      	ands	r3, r1
 800e364:	3b08      	subs	r3, #8
 800e366:	089b      	lsrs	r3, r3, #2
 800e368:	3306      	adds	r3, #6
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	18d3      	adds	r3, r2, r3
 800e36e:	3304      	adds	r3, #4
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	1dfa      	adds	r2, r7, #7
 800e374:	7812      	ldrb	r2, [r2, #0]
 800e376:	0011      	movs	r1, r2
 800e378:	2203      	movs	r2, #3
 800e37a:	400a      	ands	r2, r1
 800e37c:	00d2      	lsls	r2, r2, #3
 800e37e:	21ff      	movs	r1, #255	@ 0xff
 800e380:	4091      	lsls	r1, r2
 800e382:	000a      	movs	r2, r1
 800e384:	43d2      	mvns	r2, r2
 800e386:	401a      	ands	r2, r3
 800e388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	019b      	lsls	r3, r3, #6
 800e38e:	22ff      	movs	r2, #255	@ 0xff
 800e390:	401a      	ands	r2, r3
 800e392:	1dfb      	adds	r3, r7, #7
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	0018      	movs	r0, r3
 800e398:	2303      	movs	r3, #3
 800e39a:	4003      	ands	r3, r0
 800e39c:	00db      	lsls	r3, r3, #3
 800e39e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e3a0:	4809      	ldr	r0, [pc, #36]	@ (800e3c8 <__NVIC_SetPriority+0xd8>)
 800e3a2:	1dfb      	adds	r3, r7, #7
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	001c      	movs	r4, r3
 800e3a8:	230f      	movs	r3, #15
 800e3aa:	4023      	ands	r3, r4
 800e3ac:	3b08      	subs	r3, #8
 800e3ae:	089b      	lsrs	r3, r3, #2
 800e3b0:	430a      	orrs	r2, r1
 800e3b2:	3306      	adds	r3, #6
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	18c3      	adds	r3, r0, r3
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	601a      	str	r2, [r3, #0]
}
 800e3bc:	46c0      	nop			@ (mov r8, r8)
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bd90      	pop	{r4, r7, pc}
 800e3c4:	e000e100 	.word	0xe000e100
 800e3c8:	e000ed00 	.word	0xe000ed00

0800e3cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	1e5a      	subs	r2, r3, #1
 800e3d8:	2380      	movs	r3, #128	@ 0x80
 800e3da:	045b      	lsls	r3, r3, #17
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d301      	bcc.n	800e3e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e010      	b.n	800e406 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e3e4:	4b0a      	ldr	r3, [pc, #40]	@ (800e410 <SysTick_Config+0x44>)
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	3a01      	subs	r2, #1
 800e3ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	425b      	negs	r3, r3
 800e3f0:	2103      	movs	r1, #3
 800e3f2:	0018      	movs	r0, r3
 800e3f4:	f7ff ff7c 	bl	800e2f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e3f8:	4b05      	ldr	r3, [pc, #20]	@ (800e410 <SysTick_Config+0x44>)
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e3fe:	4b04      	ldr	r3, [pc, #16]	@ (800e410 <SysTick_Config+0x44>)
 800e400:	2207      	movs	r2, #7
 800e402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e404:	2300      	movs	r3, #0
}
 800e406:	0018      	movs	r0, r3
 800e408:	46bd      	mov	sp, r7
 800e40a:	b002      	add	sp, #8
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	46c0      	nop			@ (mov r8, r8)
 800e410:	e000e010 	.word	0xe000e010

0800e414 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60b9      	str	r1, [r7, #8]
 800e41c:	607a      	str	r2, [r7, #4]
 800e41e:	210f      	movs	r1, #15
 800e420:	187b      	adds	r3, r7, r1
 800e422:	1c02      	adds	r2, r0, #0
 800e424:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	187b      	adds	r3, r7, r1
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	b25b      	sxtb	r3, r3
 800e42e:	0011      	movs	r1, r2
 800e430:	0018      	movs	r0, r3
 800e432:	f7ff ff5d 	bl	800e2f0 <__NVIC_SetPriority>
}
 800e436:	46c0      	nop			@ (mov r8, r8)
 800e438:	46bd      	mov	sp, r7
 800e43a:	b004      	add	sp, #16
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b082      	sub	sp, #8
 800e442:	af00      	add	r7, sp, #0
 800e444:	0002      	movs	r2, r0
 800e446:	1dfb      	adds	r3, r7, #7
 800e448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e44a:	1dfb      	adds	r3, r7, #7
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	b25b      	sxtb	r3, r3
 800e450:	0018      	movs	r0, r3
 800e452:	f7ff ff33 	bl	800e2bc <__NVIC_EnableIRQ>
}
 800e456:	46c0      	nop			@ (mov r8, r8)
 800e458:	46bd      	mov	sp, r7
 800e45a:	b002      	add	sp, #8
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e45e:	b580      	push	{r7, lr}
 800e460:	b082      	sub	sp, #8
 800e462:	af00      	add	r7, sp, #0
 800e464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	0018      	movs	r0, r3
 800e46a:	f7ff ffaf 	bl	800e3cc <SysTick_Config>
 800e46e:	0003      	movs	r3, r0
}
 800e470:	0018      	movs	r0, r3
 800e472:	46bd      	mov	sp, r7
 800e474:	b002      	add	sp, #8
 800e476:	bd80      	pop	{r7, pc}

0800e478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e061      	b.n	800e54e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a32      	ldr	r2, [pc, #200]	@ (800e558 <HAL_DMA_Init+0xe0>)
 800e490:	4694      	mov	ip, r2
 800e492:	4463      	add	r3, ip
 800e494:	2114      	movs	r1, #20
 800e496:	0018      	movs	r0, r3
 800e498:	f7f1 fe84 	bl	80001a4 <__udivsi3>
 800e49c:	0003      	movs	r3, r0
 800e49e:	009a      	lsls	r2, r3, #2
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	4a2d      	ldr	r2, [pc, #180]	@ (800e55c <HAL_DMA_Init+0xe4>)
 800e4a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2225      	movs	r2, #37	@ 0x25
 800e4ae:	2102      	movs	r1, #2
 800e4b0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	4a28      	ldr	r2, [pc, #160]	@ (800e560 <HAL_DMA_Init+0xe8>)
 800e4be:	4013      	ands	r3, r2
 800e4c0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800e4ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	691b      	ldr	r3, [r3, #16]
 800e4d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e4d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e4e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
 800e4e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	689a      	ldr	r2, [r3, #8]
 800e4fc:	2380      	movs	r3, #128	@ 0x80
 800e4fe:	01db      	lsls	r3, r3, #7
 800e500:	429a      	cmp	r2, r3
 800e502:	d018      	beq.n	800e536 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800e504:	4b17      	ldr	r3, [pc, #92]	@ (800e564 <HAL_DMA_Init+0xec>)
 800e506:	681a      	ldr	r2, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e50c:	211c      	movs	r1, #28
 800e50e:	400b      	ands	r3, r1
 800e510:	210f      	movs	r1, #15
 800e512:	4099      	lsls	r1, r3
 800e514:	000b      	movs	r3, r1
 800e516:	43d9      	mvns	r1, r3
 800e518:	4b12      	ldr	r3, [pc, #72]	@ (800e564 <HAL_DMA_Init+0xec>)
 800e51a:	400a      	ands	r2, r1
 800e51c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800e51e:	4b11      	ldr	r3, [pc, #68]	@ (800e564 <HAL_DMA_Init+0xec>)
 800e520:	6819      	ldr	r1, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	685a      	ldr	r2, [r3, #4]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e52a:	201c      	movs	r0, #28
 800e52c:	4003      	ands	r3, r0
 800e52e:	409a      	lsls	r2, r3
 800e530:	4b0c      	ldr	r3, [pc, #48]	@ (800e564 <HAL_DMA_Init+0xec>)
 800e532:	430a      	orrs	r2, r1
 800e534:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2225      	movs	r2, #37	@ 0x25
 800e540:	2101      	movs	r1, #1
 800e542:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2224      	movs	r2, #36	@ 0x24
 800e548:	2100      	movs	r1, #0
 800e54a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	0018      	movs	r0, r3
 800e550:	46bd      	mov	sp, r7
 800e552:	b004      	add	sp, #16
 800e554:	bd80      	pop	{r7, pc}
 800e556:	46c0      	nop			@ (mov r8, r8)
 800e558:	bffdfff8 	.word	0xbffdfff8
 800e55c:	40020000 	.word	0x40020000
 800e560:	ffff800f 	.word	0xffff800f
 800e564:	400200a8 	.word	0x400200a8

0800e568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
 800e574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e576:	2317      	movs	r3, #23
 800e578:	18fb      	adds	r3, r7, r3
 800e57a:	2200      	movs	r2, #0
 800e57c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2224      	movs	r2, #36	@ 0x24
 800e582:	5c9b      	ldrb	r3, [r3, r2]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d101      	bne.n	800e58c <HAL_DMA_Start_IT+0x24>
 800e588:	2302      	movs	r3, #2
 800e58a:	e04f      	b.n	800e62c <HAL_DMA_Start_IT+0xc4>
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2224      	movs	r2, #36	@ 0x24
 800e590:	2101      	movs	r1, #1
 800e592:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2225      	movs	r2, #37	@ 0x25
 800e598:	5c9b      	ldrb	r3, [r3, r2]
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b01      	cmp	r3, #1
 800e59e:	d13a      	bne.n	800e616 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2225      	movs	r2, #37	@ 0x25
 800e5a4:	2102      	movs	r1, #2
 800e5a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	438a      	bics	r2, r1
 800e5bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	68b9      	ldr	r1, [r7, #8]
 800e5c4:	68f8      	ldr	r0, [r7, #12]
 800e5c6:	f000 f976 	bl	800e8b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d008      	beq.n	800e5e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	210e      	movs	r1, #14
 800e5de:	430a      	orrs	r2, r1
 800e5e0:	601a      	str	r2, [r3, #0]
 800e5e2:	e00f      	b.n	800e604 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2104      	movs	r1, #4
 800e5f0:	438a      	bics	r2, r1
 800e5f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	210a      	movs	r1, #10
 800e600:	430a      	orrs	r2, r1
 800e602:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2101      	movs	r1, #1
 800e610:	430a      	orrs	r2, r1
 800e612:	601a      	str	r2, [r3, #0]
 800e614:	e007      	b.n	800e626 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2224      	movs	r2, #36	@ 0x24
 800e61a:	2100      	movs	r1, #0
 800e61c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800e61e:	2317      	movs	r3, #23
 800e620:	18fb      	adds	r3, r7, r3
 800e622:	2202      	movs	r2, #2
 800e624:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800e626:	2317      	movs	r3, #23
 800e628:	18fb      	adds	r3, r7, r3
 800e62a:	781b      	ldrb	r3, [r3, #0]
}
 800e62c:	0018      	movs	r0, r3
 800e62e:	46bd      	mov	sp, r7
 800e630:	b006      	add	sp, #24
 800e632:	bd80      	pop	{r7, pc}

0800e634 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e63c:	230f      	movs	r3, #15
 800e63e:	18fb      	adds	r3, r7, r3
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2225      	movs	r2, #37	@ 0x25
 800e648:	5c9b      	ldrb	r3, [r3, r2]
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d008      	beq.n	800e662 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2204      	movs	r2, #4
 800e654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2224      	movs	r2, #36	@ 0x24
 800e65a:	2100      	movs	r1, #0
 800e65c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800e65e:	2301      	movs	r3, #1
 800e660:	e024      	b.n	800e6ac <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	210e      	movs	r1, #14
 800e66e:	438a      	bics	r2, r1
 800e670:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2101      	movs	r1, #1
 800e67e:	438a      	bics	r2, r1
 800e680:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e686:	221c      	movs	r2, #28
 800e688:	401a      	ands	r2, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e68e:	2101      	movs	r1, #1
 800e690:	4091      	lsls	r1, r2
 800e692:	000a      	movs	r2, r1
 800e694:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2225      	movs	r2, #37	@ 0x25
 800e69a:	2101      	movs	r1, #1
 800e69c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2224      	movs	r2, #36	@ 0x24
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	5499      	strb	r1, [r3, r2]

    return status;
 800e6a6:	230f      	movs	r3, #15
 800e6a8:	18fb      	adds	r3, r7, r3
 800e6aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	b004      	add	sp, #16
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6bc:	210f      	movs	r1, #15
 800e6be:	187b      	adds	r3, r7, r1
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2225      	movs	r2, #37	@ 0x25
 800e6c8:	5c9b      	ldrb	r3, [r3, r2]
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b02      	cmp	r3, #2
 800e6ce:	d006      	beq.n	800e6de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2204      	movs	r2, #4
 800e6d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800e6d6:	187b      	adds	r3, r7, r1
 800e6d8:	2201      	movs	r2, #1
 800e6da:	701a      	strb	r2, [r3, #0]
 800e6dc:	e02a      	b.n	800e734 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681a      	ldr	r2, [r3, #0]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	210e      	movs	r1, #14
 800e6ea:	438a      	bics	r2, r1
 800e6ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2101      	movs	r1, #1
 800e6fa:	438a      	bics	r2, r1
 800e6fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e702:	221c      	movs	r2, #28
 800e704:	401a      	ands	r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e70a:	2101      	movs	r1, #1
 800e70c:	4091      	lsls	r1, r2
 800e70e:	000a      	movs	r2, r1
 800e710:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2225      	movs	r2, #37	@ 0x25
 800e716:	2101      	movs	r1, #1
 800e718:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2224      	movs	r2, #36	@ 0x24
 800e71e:	2100      	movs	r1, #0
 800e720:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e726:	2b00      	cmp	r3, #0
 800e728:	d004      	beq.n	800e734 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	0010      	movs	r0, r2
 800e732:	4798      	blx	r3
    }
  }
  return status;
 800e734:	230f      	movs	r3, #15
 800e736:	18fb      	adds	r3, r7, r3
 800e738:	781b      	ldrb	r3, [r3, #0]
}
 800e73a:	0018      	movs	r0, r3
 800e73c:	46bd      	mov	sp, r7
 800e73e:	b004      	add	sp, #16
 800e740:	bd80      	pop	{r7, pc}

0800e742 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e742:	b580      	push	{r7, lr}
 800e744:	b084      	sub	sp, #16
 800e746:	af00      	add	r7, sp, #0
 800e748:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e75e:	221c      	movs	r2, #28
 800e760:	4013      	ands	r3, r2
 800e762:	2204      	movs	r2, #4
 800e764:	409a      	lsls	r2, r3
 800e766:	0013      	movs	r3, r2
 800e768:	68fa      	ldr	r2, [r7, #12]
 800e76a:	4013      	ands	r3, r2
 800e76c:	d026      	beq.n	800e7bc <HAL_DMA_IRQHandler+0x7a>
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	2204      	movs	r2, #4
 800e772:	4013      	ands	r3, r2
 800e774:	d022      	beq.n	800e7bc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2220      	movs	r2, #32
 800e77e:	4013      	ands	r3, r2
 800e780:	d107      	bne.n	800e792 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2104      	movs	r1, #4
 800e78e:	438a      	bics	r2, r1
 800e790:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e796:	221c      	movs	r2, #28
 800e798:	401a      	ands	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e79e:	2104      	movs	r1, #4
 800e7a0:	4091      	lsls	r1, r2
 800e7a2:	000a      	movs	r2, r1
 800e7a4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d100      	bne.n	800e7b0 <HAL_DMA_IRQHandler+0x6e>
 800e7ae:	e071      	b.n	800e894 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	0010      	movs	r0, r2
 800e7b8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800e7ba:	e06b      	b.n	800e894 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7c0:	221c      	movs	r2, #28
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	2202      	movs	r2, #2
 800e7c6:	409a      	lsls	r2, r3
 800e7c8:	0013      	movs	r3, r2
 800e7ca:	68fa      	ldr	r2, [r7, #12]
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	d02d      	beq.n	800e82c <HAL_DMA_IRQHandler+0xea>
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	d029      	beq.n	800e82c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2220      	movs	r2, #32
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	d10b      	bne.n	800e7fc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	210a      	movs	r1, #10
 800e7f0:	438a      	bics	r2, r1
 800e7f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2225      	movs	r2, #37	@ 0x25
 800e7f8:	2101      	movs	r1, #1
 800e7fa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e800:	221c      	movs	r2, #28
 800e802:	401a      	ands	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e808:	2102      	movs	r1, #2
 800e80a:	4091      	lsls	r1, r2
 800e80c:	000a      	movs	r2, r1
 800e80e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2224      	movs	r2, #36	@ 0x24
 800e814:	2100      	movs	r1, #0
 800e816:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d039      	beq.n	800e894 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	0010      	movs	r0, r2
 800e828:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e82a:	e033      	b.n	800e894 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e830:	221c      	movs	r2, #28
 800e832:	4013      	ands	r3, r2
 800e834:	2208      	movs	r2, #8
 800e836:	409a      	lsls	r2, r3
 800e838:	0013      	movs	r3, r2
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	4013      	ands	r3, r2
 800e83e:	d02a      	beq.n	800e896 <HAL_DMA_IRQHandler+0x154>
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	2208      	movs	r2, #8
 800e844:	4013      	ands	r3, r2
 800e846:	d026      	beq.n	800e896 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	210e      	movs	r1, #14
 800e854:	438a      	bics	r2, r1
 800e856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e85c:	221c      	movs	r2, #28
 800e85e:	401a      	ands	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e864:	2101      	movs	r1, #1
 800e866:	4091      	lsls	r1, r2
 800e868:	000a      	movs	r2, r1
 800e86a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2225      	movs	r2, #37	@ 0x25
 800e876:	2101      	movs	r1, #1
 800e878:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2224      	movs	r2, #36	@ 0x24
 800e87e:	2100      	movs	r1, #0
 800e880:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e886:	2b00      	cmp	r3, #0
 800e888:	d005      	beq.n	800e896 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	0010      	movs	r0, r2
 800e892:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e894:	46c0      	nop			@ (mov r8, r8)
 800e896:	46c0      	nop			@ (mov r8, r8)
}
 800e898:	46bd      	mov	sp, r7
 800e89a:	b004      	add	sp, #16
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e89e:	b580      	push	{r7, lr}
 800e8a0:	b082      	sub	sp, #8
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2225      	movs	r2, #37	@ 0x25
 800e8aa:	5c9b      	ldrb	r3, [r3, r2]
 800e8ac:	b2db      	uxtb	r3, r3
}
 800e8ae:	0018      	movs	r0, r3
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	b002      	add	sp, #8
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	60f8      	str	r0, [r7, #12]
 800e8be:	60b9      	str	r1, [r7, #8]
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8c8:	221c      	movs	r2, #28
 800e8ca:	401a      	ands	r2, r3
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	4091      	lsls	r1, r2
 800e8d4:	000a      	movs	r2, r1
 800e8d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	683a      	ldr	r2, [r7, #0]
 800e8de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	2b10      	cmp	r3, #16
 800e8e6:	d108      	bne.n	800e8fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e8f8:	e007      	b.n	800e90a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	60da      	str	r2, [r3, #12]
}
 800e90a:	46c0      	nop			@ (mov r8, r8)
 800e90c:	46bd      	mov	sp, r7
 800e90e:	b004      	add	sp, #16
 800e910:	bd80      	pop	{r7, pc}
	...

0800e914 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800e91c:	f7ff f8e8 	bl	800daf0 <HAL_GetTick>
 800e920:	0003      	movs	r3, r0
 800e922:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e924:	e00f      	b.n	800e946 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	3301      	adds	r3, #1
 800e92a:	d00c      	beq.n	800e946 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d007      	beq.n	800e942 <FLASH_WaitForLastOperation+0x2e>
 800e932:	f7ff f8dd 	bl	800daf0 <HAL_GetTick>
 800e936:	0002      	movs	r2, r0
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d201      	bcs.n	800e946 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800e942:	2303      	movs	r3, #3
 800e944:	e052      	b.n	800e9ec <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e946:	4b2b      	ldr	r3, [pc, #172]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e948:	699b      	ldr	r3, [r3, #24]
 800e94a:	2201      	movs	r2, #1
 800e94c:	4013      	ands	r3, r2
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d0e9      	beq.n	800e926 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800e952:	4b28      	ldr	r3, [pc, #160]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	2202      	movs	r2, #2
 800e958:	4013      	ands	r3, r2
 800e95a:	2b02      	cmp	r3, #2
 800e95c:	d102      	bne.n	800e964 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e95e:	4b25      	ldr	r3, [pc, #148]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e960:	2202      	movs	r2, #2
 800e962:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e964:	4b23      	ldr	r3, [pc, #140]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e966:	699a      	ldr	r2, [r3, #24]
 800e968:	2380      	movs	r3, #128	@ 0x80
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	401a      	ands	r2, r3
 800e96e:	2380      	movs	r3, #128	@ 0x80
 800e970:	005b      	lsls	r3, r3, #1
 800e972:	429a      	cmp	r2, r3
 800e974:	d035      	beq.n	800e9e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e976:	4b1f      	ldr	r3, [pc, #124]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e978:	699a      	ldr	r2, [r3, #24]
 800e97a:	2380      	movs	r3, #128	@ 0x80
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e980:	2380      	movs	r3, #128	@ 0x80
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	429a      	cmp	r2, r3
 800e986:	d02c      	beq.n	800e9e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e988:	4b1a      	ldr	r3, [pc, #104]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e98a:	699a      	ldr	r2, [r3, #24]
 800e98c:	2380      	movs	r3, #128	@ 0x80
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e992:	2380      	movs	r3, #128	@ 0x80
 800e994:	00db      	lsls	r3, r3, #3
 800e996:	429a      	cmp	r2, r3
 800e998:	d023      	beq.n	800e9e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e99a:	4b16      	ldr	r3, [pc, #88]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	2380      	movs	r3, #128	@ 0x80
 800e9a0:	011b      	lsls	r3, r3, #4
 800e9a2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e9a4:	2380      	movs	r3, #128	@ 0x80
 800e9a6:	011b      	lsls	r3, r3, #4
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d01a      	beq.n	800e9e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e9ac:	4b11      	ldr	r3, [pc, #68]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e9ae:	699a      	ldr	r2, [r3, #24]
 800e9b0:	2380      	movs	r3, #128	@ 0x80
 800e9b2:	019b      	lsls	r3, r3, #6
 800e9b4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e9b6:	2380      	movs	r3, #128	@ 0x80
 800e9b8:	019b      	lsls	r3, r3, #6
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d011      	beq.n	800e9e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e9be:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e9c0:	699a      	ldr	r2, [r3, #24]
 800e9c2:	2380      	movs	r3, #128	@ 0x80
 800e9c4:	029b      	lsls	r3, r3, #10
 800e9c6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e9c8:	2380      	movs	r3, #128	@ 0x80
 800e9ca:	029b      	lsls	r3, r3, #10
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d008      	beq.n	800e9e2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800e9d0:	4b08      	ldr	r3, [pc, #32]	@ (800e9f4 <FLASH_WaitForLastOperation+0xe0>)
 800e9d2:	699a      	ldr	r2, [r3, #24]
 800e9d4:	2380      	movs	r3, #128	@ 0x80
 800e9d6:	025b      	lsls	r3, r3, #9
 800e9d8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e9da:	2380      	movs	r3, #128	@ 0x80
 800e9dc:	025b      	lsls	r3, r3, #9
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d103      	bne.n	800e9ea <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800e9e2:	f000 f809 	bl	800e9f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	e000      	b.n	800e9ec <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800e9ea:	2300      	movs	r3, #0
}
 800e9ec:	0018      	movs	r0, r3
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	b004      	add	sp, #16
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	40022000 	.word	0x40022000

0800e9f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800ea02:	4b49      	ldr	r3, [pc, #292]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800ea04:	699a      	ldr	r2, [r3, #24]
 800ea06:	2380      	movs	r3, #128	@ 0x80
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	401a      	ands	r2, r3
 800ea0c:	2380      	movs	r3, #128	@ 0x80
 800ea0e:	005b      	lsls	r3, r3, #1
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d10a      	bne.n	800ea2a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ea14:	4b45      	ldr	r3, [pc, #276]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea16:	695b      	ldr	r3, [r3, #20]
 800ea18:	2202      	movs	r2, #2
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	4b43      	ldr	r3, [pc, #268]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea1e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2280      	movs	r2, #128	@ 0x80
 800ea24:	0052      	lsls	r2, r2, #1
 800ea26:	4313      	orrs	r3, r2
 800ea28:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800ea2a:	4b3f      	ldr	r3, [pc, #252]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800ea2c:	699a      	ldr	r2, [r3, #24]
 800ea2e:	2380      	movs	r3, #128	@ 0x80
 800ea30:	009b      	lsls	r3, r3, #2
 800ea32:	401a      	ands	r2, r3
 800ea34:	2380      	movs	r3, #128	@ 0x80
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d10a      	bne.n	800ea52 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ea3c:	4b3b      	ldr	r3, [pc, #236]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea3e:	695b      	ldr	r3, [r3, #20]
 800ea40:	2201      	movs	r2, #1
 800ea42:	431a      	orrs	r2, r3
 800ea44:	4b39      	ldr	r3, [pc, #228]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea46:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2280      	movs	r2, #128	@ 0x80
 800ea4c:	0092      	lsls	r2, r2, #2
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ea52:	4b35      	ldr	r3, [pc, #212]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800ea54:	699a      	ldr	r2, [r3, #24]
 800ea56:	2380      	movs	r3, #128	@ 0x80
 800ea58:	00db      	lsls	r3, r3, #3
 800ea5a:	401a      	ands	r2, r3
 800ea5c:	2380      	movs	r3, #128	@ 0x80
 800ea5e:	00db      	lsls	r3, r3, #3
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d10a      	bne.n	800ea7a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ea64:	4b31      	ldr	r3, [pc, #196]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea66:	695b      	ldr	r3, [r3, #20]
 800ea68:	2208      	movs	r2, #8
 800ea6a:	431a      	orrs	r2, r3
 800ea6c:	4b2f      	ldr	r3, [pc, #188]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea6e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2280      	movs	r2, #128	@ 0x80
 800ea74:	00d2      	lsls	r2, r2, #3
 800ea76:	4313      	orrs	r3, r2
 800ea78:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ea7a:	4b2b      	ldr	r3, [pc, #172]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800ea7c:	699a      	ldr	r2, [r3, #24]
 800ea7e:	2380      	movs	r3, #128	@ 0x80
 800ea80:	011b      	lsls	r3, r3, #4
 800ea82:	401a      	ands	r2, r3
 800ea84:	2380      	movs	r3, #128	@ 0x80
 800ea86:	011b      	lsls	r3, r3, #4
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d10a      	bne.n	800eaa2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800ea8c:	4b27      	ldr	r3, [pc, #156]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea8e:	695b      	ldr	r3, [r3, #20]
 800ea90:	2204      	movs	r2, #4
 800ea92:	431a      	orrs	r2, r3
 800ea94:	4b25      	ldr	r3, [pc, #148]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800ea96:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2280      	movs	r2, #128	@ 0x80
 800ea9c:	0112      	lsls	r2, r2, #4
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800eaa2:	4b21      	ldr	r3, [pc, #132]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800eaa4:	699a      	ldr	r2, [r3, #24]
 800eaa6:	2380      	movs	r3, #128	@ 0x80
 800eaa8:	019b      	lsls	r3, r3, #6
 800eaaa:	401a      	ands	r2, r3
 800eaac:	2380      	movs	r3, #128	@ 0x80
 800eaae:	019b      	lsls	r3, r3, #6
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d10a      	bne.n	800eaca <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800eab4:	4b1d      	ldr	r3, [pc, #116]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800eab6:	695b      	ldr	r3, [r3, #20]
 800eab8:	2210      	movs	r2, #16
 800eaba:	431a      	orrs	r2, r3
 800eabc:	4b1b      	ldr	r3, [pc, #108]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800eabe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2280      	movs	r2, #128	@ 0x80
 800eac4:	0192      	lsls	r2, r2, #6
 800eac6:	4313      	orrs	r3, r2
 800eac8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800eaca:	4b17      	ldr	r3, [pc, #92]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800eacc:	699a      	ldr	r2, [r3, #24]
 800eace:	2380      	movs	r3, #128	@ 0x80
 800ead0:	029b      	lsls	r3, r3, #10
 800ead2:	401a      	ands	r2, r3
 800ead4:	2380      	movs	r3, #128	@ 0x80
 800ead6:	029b      	lsls	r3, r3, #10
 800ead8:	429a      	cmp	r2, r3
 800eada:	d109      	bne.n	800eaf0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800eadc:	4b13      	ldr	r3, [pc, #76]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800eade:	695b      	ldr	r3, [r3, #20]
 800eae0:	2220      	movs	r2, #32
 800eae2:	431a      	orrs	r2, r3
 800eae4:	4b11      	ldr	r3, [pc, #68]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800eae6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2220      	movs	r2, #32
 800eaec:	4313      	orrs	r3, r2
 800eaee:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800eaf0:	4b0d      	ldr	r3, [pc, #52]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800eaf2:	699a      	ldr	r2, [r3, #24]
 800eaf4:	2380      	movs	r3, #128	@ 0x80
 800eaf6:	025b      	lsls	r3, r3, #9
 800eaf8:	401a      	ands	r2, r3
 800eafa:	2380      	movs	r3, #128	@ 0x80
 800eafc:	025b      	lsls	r3, r3, #9
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d10a      	bne.n	800eb18 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800eb02:	4b0a      	ldr	r3, [pc, #40]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800eb04:	695b      	ldr	r3, [r3, #20]
 800eb06:	2240      	movs	r2, #64	@ 0x40
 800eb08:	431a      	orrs	r2, r3
 800eb0a:	4b08      	ldr	r3, [pc, #32]	@ (800eb2c <FLASH_SetErrorCode+0x134>)
 800eb0c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2280      	movs	r2, #128	@ 0x80
 800eb12:	0252      	lsls	r2, r2, #9
 800eb14:	4313      	orrs	r3, r2
 800eb16:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800eb18:	4b03      	ldr	r3, [pc, #12]	@ (800eb28 <FLASH_SetErrorCode+0x130>)
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	619a      	str	r2, [r3, #24]
}  
 800eb1e:	46c0      	nop			@ (mov r8, r8)
 800eb20:	46bd      	mov	sp, r7
 800eb22:	b002      	add	sp, #8
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	46c0      	nop			@ (mov r8, r8)
 800eb28:	40022000 	.word	0x40022000
 800eb2c:	20002500 	.word	0x20002500

0800eb30 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800eb36:	4b12      	ldr	r3, [pc, #72]	@ (800eb80 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	4013      	ands	r3, r2
 800eb3e:	d019      	beq.n	800eb74 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb40:	f3ef 8310 	mrs	r3, PRIMASK
 800eb44:	607b      	str	r3, [r7, #4]
  return(result);
 800eb46:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800eb48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb4a:	b672      	cpsid	i
}
 800eb4c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800eb4e:	4b0c      	ldr	r3, [pc, #48]	@ (800eb80 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800eb50:	4a0c      	ldr	r2, [pc, #48]	@ (800eb84 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800eb52:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800eb54:	4b0a      	ldr	r3, [pc, #40]	@ (800eb80 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800eb56:	4a0c      	ldr	r2, [pc, #48]	@ (800eb88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800eb58:	60da      	str	r2, [r3, #12]
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	f383 8810 	msr	PRIMASK, r3
}
 800eb64:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800eb66:	4b06      	ldr	r3, [pc, #24]	@ (800eb80 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	d001      	beq.n	800eb74 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800eb70:	2301      	movs	r3, #1
 800eb72:	e000      	b.n	800eb76 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	0018      	movs	r0, r3
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	b004      	add	sp, #16
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	46c0      	nop			@ (mov r8, r8)
 800eb80:	40022000 	.word	0x40022000
 800eb84:	89abcdef 	.word	0x89abcdef
 800eb88:	02030405 	.word	0x02030405

0800eb8c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800eb90:	4b04      	ldr	r3, [pc, #16]	@ (800eba4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	4b03      	ldr	r3, [pc, #12]	@ (800eba4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800eb96:	2101      	movs	r1, #1
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	0018      	movs	r0, r3
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	40022000 	.word	0x40022000

0800eba8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800eba8:	b5b0      	push	{r4, r5, r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebb0:	250f      	movs	r5, #15
 800ebb2:	197b      	adds	r3, r7, r5
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ebb8:	197c      	adds	r4, r7, r5
 800ebba:	4b0f      	ldr	r3, [pc, #60]	@ (800ebf8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ebbc:	0018      	movs	r0, r3
 800ebbe:	f7ff fea9 	bl	800e914 <FLASH_WaitForLastOperation>
 800ebc2:	0003      	movs	r3, r0
 800ebc4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ebc6:	0029      	movs	r1, r5
 800ebc8:	187b      	adds	r3, r7, r1
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10c      	bne.n	800ebea <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ebd0:	4b0a      	ldr	r3, [pc, #40]	@ (800ebfc <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ebdc:	187c      	adds	r4, r7, r1
 800ebde:	4b06      	ldr	r3, [pc, #24]	@ (800ebf8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ebe0:	0018      	movs	r0, r3
 800ebe2:	f7ff fe97 	bl	800e914 <FLASH_WaitForLastOperation>
 800ebe6:	0003      	movs	r3, r0
 800ebe8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800ebea:	230f      	movs	r3, #15
 800ebec:	18fb      	adds	r3, r7, r3
 800ebee:	781b      	ldrb	r3, [r3, #0]
}  
 800ebf0:	0018      	movs	r0, r3
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	b004      	add	sp, #16
 800ebf6:	bdb0      	pop	{r4, r5, r7, pc}
 800ebf8:	0000c350 	.word	0x0000c350
 800ebfc:	20002500 	.word	0x20002500

0800ec00 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800ec00:	b5b0      	push	{r4, r5, r7, lr}
 800ec02:	b086      	sub	sp, #24
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ec0c:	2317      	movs	r3, #23
 800ec0e:	18fb      	adds	r3, r7, r3
 800ec10:	2201      	movs	r2, #1
 800ec12:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ec14:	4b24      	ldr	r3, [pc, #144]	@ (800eca8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ec16:	7c1b      	ldrb	r3, [r3, #16]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d101      	bne.n	800ec20 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800ec1c:	2302      	movs	r3, #2
 800ec1e:	e03e      	b.n	800ec9e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800ec20:	4b21      	ldr	r3, [pc, #132]	@ (800eca8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ec22:	2201      	movs	r2, #1
 800ec24:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ec26:	2517      	movs	r5, #23
 800ec28:	197c      	adds	r4, r7, r5
 800ec2a:	4b20      	ldr	r3, [pc, #128]	@ (800ecac <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	f7ff fe71 	bl	800e914 <FLASH_WaitForLastOperation>
 800ec32:	0003      	movs	r3, r0
 800ec34:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ec36:	197b      	adds	r3, r7, r5
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d129      	bne.n	800ec92 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ec3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eca8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2b02      	cmp	r3, #2
 800ec48:	d103      	bne.n	800ec52 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	601a      	str	r2, [r3, #0]
 800ec50:	e013      	b.n	800ec7a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d104      	bne.n	800ec62 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	b292      	uxth	r2, r2
 800ec5e:	801a      	strh	r2, [r3, #0]
 800ec60:	e00b      	b.n	800ec7a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d104      	bne.n	800ec72 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	b2d2      	uxtb	r2, r2
 800ec6e:	701a      	strb	r2, [r3, #0]
 800ec70:	e003      	b.n	800ec7a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800ec72:	2317      	movs	r3, #23
 800ec74:	18fb      	adds	r3, r7, r3
 800ec76:	2201      	movs	r2, #1
 800ec78:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800ec7a:	2217      	movs	r2, #23
 800ec7c:	18bb      	adds	r3, r7, r2
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d106      	bne.n	800ec92 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ec84:	18bc      	adds	r4, r7, r2
 800ec86:	4b09      	ldr	r3, [pc, #36]	@ (800ecac <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800ec88:	0018      	movs	r0, r3
 800ec8a:	f7ff fe43 	bl	800e914 <FLASH_WaitForLastOperation>
 800ec8e:	0003      	movs	r3, r0
 800ec90:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ec92:	4b05      	ldr	r3, [pc, #20]	@ (800eca8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	741a      	strb	r2, [r3, #16]

  return status;
 800ec98:	2317      	movs	r3, #23
 800ec9a:	18fb      	adds	r3, r7, r3
 800ec9c:	781b      	ldrb	r3, [r3, #0]
}
 800ec9e:	0018      	movs	r0, r3
 800eca0:	46bd      	mov	sp, r7
 800eca2:	b006      	add	sp, #24
 800eca4:	bdb0      	pop	{r4, r5, r7, pc}
 800eca6:	46c0      	nop			@ (mov r8, r8)
 800eca8:	20002500 	.word	0x20002500
 800ecac:	0000c350 	.word	0x0000c350

0800ecb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800ecc6:	e155      	b.n	800ef74 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2101      	movs	r1, #1
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	4091      	lsls	r1, r2
 800ecd2:	000a      	movs	r2, r1
 800ecd4:	4013      	ands	r3, r2
 800ecd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d100      	bne.n	800ece0 <HAL_GPIO_Init+0x30>
 800ecde:	e146      	b.n	800ef6e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	2203      	movs	r2, #3
 800ece6:	4013      	ands	r3, r2
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	d005      	beq.n	800ecf8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	2203      	movs	r2, #3
 800ecf2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d130      	bne.n	800ed5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	005b      	lsls	r3, r3, #1
 800ed02:	2203      	movs	r2, #3
 800ed04:	409a      	lsls	r2, r3
 800ed06:	0013      	movs	r3, r2
 800ed08:	43da      	mvns	r2, r3
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	4013      	ands	r3, r2
 800ed0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	68da      	ldr	r2, [r3, #12]
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	409a      	lsls	r2, r3
 800ed1a:	0013      	movs	r3, r2
 800ed1c:	693a      	ldr	r2, [r7, #16]
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	693a      	ldr	r2, [r7, #16]
 800ed26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	685b      	ldr	r3, [r3, #4]
 800ed2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ed2e:	2201      	movs	r2, #1
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	409a      	lsls	r2, r3
 800ed34:	0013      	movs	r3, r2
 800ed36:	43da      	mvns	r2, r3
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	091b      	lsrs	r3, r3, #4
 800ed44:	2201      	movs	r2, #1
 800ed46:	401a      	ands	r2, r3
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	409a      	lsls	r2, r3
 800ed4c:	0013      	movs	r3, r2
 800ed4e:	693a      	ldr	r2, [r7, #16]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	2203      	movs	r2, #3
 800ed60:	4013      	ands	r3, r2
 800ed62:	2b03      	cmp	r3, #3
 800ed64:	d017      	beq.n	800ed96 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	005b      	lsls	r3, r3, #1
 800ed70:	2203      	movs	r2, #3
 800ed72:	409a      	lsls	r2, r3
 800ed74:	0013      	movs	r3, r2
 800ed76:	43da      	mvns	r2, r3
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	689a      	ldr	r2, [r3, #8]
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	005b      	lsls	r3, r3, #1
 800ed86:	409a      	lsls	r2, r3
 800ed88:	0013      	movs	r3, r2
 800ed8a:	693a      	ldr	r2, [r7, #16]
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	693a      	ldr	r2, [r7, #16]
 800ed94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	2203      	movs	r2, #3
 800ed9c:	4013      	ands	r3, r2
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d123      	bne.n	800edea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	08da      	lsrs	r2, r3, #3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	3208      	adds	r2, #8
 800edaa:	0092      	lsls	r2, r2, #2
 800edac:	58d3      	ldr	r3, [r2, r3]
 800edae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	2207      	movs	r2, #7
 800edb4:	4013      	ands	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	220f      	movs	r2, #15
 800edba:	409a      	lsls	r2, r3
 800edbc:	0013      	movs	r3, r2
 800edbe:	43da      	mvns	r2, r3
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	4013      	ands	r3, r2
 800edc4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	691a      	ldr	r2, [r3, #16]
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	2107      	movs	r1, #7
 800edce:	400b      	ands	r3, r1
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	409a      	lsls	r2, r3
 800edd4:	0013      	movs	r3, r2
 800edd6:	693a      	ldr	r2, [r7, #16]
 800edd8:	4313      	orrs	r3, r2
 800edda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	08da      	lsrs	r2, r3, #3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3208      	adds	r2, #8
 800ede4:	0092      	lsls	r2, r2, #2
 800ede6:	6939      	ldr	r1, [r7, #16]
 800ede8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	2203      	movs	r2, #3
 800edf6:	409a      	lsls	r2, r3
 800edf8:	0013      	movs	r3, r2
 800edfa:	43da      	mvns	r2, r3
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	4013      	ands	r3, r2
 800ee00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	2203      	movs	r2, #3
 800ee08:	401a      	ands	r2, r3
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	005b      	lsls	r3, r3, #1
 800ee0e:	409a      	lsls	r2, r3
 800ee10:	0013      	movs	r3, r2
 800ee12:	693a      	ldr	r2, [r7, #16]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	23c0      	movs	r3, #192	@ 0xc0
 800ee24:	029b      	lsls	r3, r3, #10
 800ee26:	4013      	ands	r3, r2
 800ee28:	d100      	bne.n	800ee2c <HAL_GPIO_Init+0x17c>
 800ee2a:	e0a0      	b.n	800ef6e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ee2c:	4b57      	ldr	r3, [pc, #348]	@ (800ef8c <HAL_GPIO_Init+0x2dc>)
 800ee2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee30:	4b56      	ldr	r3, [pc, #344]	@ (800ef8c <HAL_GPIO_Init+0x2dc>)
 800ee32:	2101      	movs	r1, #1
 800ee34:	430a      	orrs	r2, r1
 800ee36:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800ee38:	4a55      	ldr	r2, [pc, #340]	@ (800ef90 <HAL_GPIO_Init+0x2e0>)
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	089b      	lsrs	r3, r3, #2
 800ee3e:	3302      	adds	r3, #2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	589b      	ldr	r3, [r3, r2]
 800ee44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2203      	movs	r2, #3
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	220f      	movs	r2, #15
 800ee50:	409a      	lsls	r2, r3
 800ee52:	0013      	movs	r3, r2
 800ee54:	43da      	mvns	r2, r3
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	4013      	ands	r3, r2
 800ee5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	23a0      	movs	r3, #160	@ 0xa0
 800ee60:	05db      	lsls	r3, r3, #23
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d01f      	beq.n	800eea6 <HAL_GPIO_Init+0x1f6>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	4a4a      	ldr	r2, [pc, #296]	@ (800ef94 <HAL_GPIO_Init+0x2e4>)
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	d019      	beq.n	800eea2 <HAL_GPIO_Init+0x1f2>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	4a49      	ldr	r2, [pc, #292]	@ (800ef98 <HAL_GPIO_Init+0x2e8>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d013      	beq.n	800ee9e <HAL_GPIO_Init+0x1ee>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4a48      	ldr	r2, [pc, #288]	@ (800ef9c <HAL_GPIO_Init+0x2ec>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d00d      	beq.n	800ee9a <HAL_GPIO_Init+0x1ea>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4a47      	ldr	r2, [pc, #284]	@ (800efa0 <HAL_GPIO_Init+0x2f0>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d007      	beq.n	800ee96 <HAL_GPIO_Init+0x1e6>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4a46      	ldr	r2, [pc, #280]	@ (800efa4 <HAL_GPIO_Init+0x2f4>)
 800ee8a:	4293      	cmp	r3, r2
 800ee8c:	d101      	bne.n	800ee92 <HAL_GPIO_Init+0x1e2>
 800ee8e:	2305      	movs	r3, #5
 800ee90:	e00a      	b.n	800eea8 <HAL_GPIO_Init+0x1f8>
 800ee92:	2306      	movs	r3, #6
 800ee94:	e008      	b.n	800eea8 <HAL_GPIO_Init+0x1f8>
 800ee96:	2304      	movs	r3, #4
 800ee98:	e006      	b.n	800eea8 <HAL_GPIO_Init+0x1f8>
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e004      	b.n	800eea8 <HAL_GPIO_Init+0x1f8>
 800ee9e:	2302      	movs	r3, #2
 800eea0:	e002      	b.n	800eea8 <HAL_GPIO_Init+0x1f8>
 800eea2:	2301      	movs	r3, #1
 800eea4:	e000      	b.n	800eea8 <HAL_GPIO_Init+0x1f8>
 800eea6:	2300      	movs	r3, #0
 800eea8:	697a      	ldr	r2, [r7, #20]
 800eeaa:	2103      	movs	r1, #3
 800eeac:	400a      	ands	r2, r1
 800eeae:	0092      	lsls	r2, r2, #2
 800eeb0:	4093      	lsls	r3, r2
 800eeb2:	693a      	ldr	r2, [r7, #16]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800eeb8:	4935      	ldr	r1, [pc, #212]	@ (800ef90 <HAL_GPIO_Init+0x2e0>)
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	089b      	lsrs	r3, r3, #2
 800eebe:	3302      	adds	r3, #2
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	693a      	ldr	r2, [r7, #16]
 800eec4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800eec6:	4b38      	ldr	r3, [pc, #224]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	43da      	mvns	r2, r3
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	4013      	ands	r3, r2
 800eed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	685a      	ldr	r2, [r3, #4]
 800eeda:	2380      	movs	r3, #128	@ 0x80
 800eedc:	035b      	lsls	r3, r3, #13
 800eede:	4013      	ands	r3, r2
 800eee0:	d003      	beq.n	800eeea <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800eee2:	693a      	ldr	r2, [r7, #16]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800eeea:	4b2f      	ldr	r3, [pc, #188]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800eeec:	693a      	ldr	r2, [r7, #16]
 800eeee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800eef0:	4b2d      	ldr	r3, [pc, #180]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	43da      	mvns	r2, r3
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	4013      	ands	r3, r2
 800eefe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	685a      	ldr	r2, [r3, #4]
 800ef04:	2380      	movs	r3, #128	@ 0x80
 800ef06:	039b      	lsls	r3, r3, #14
 800ef08:	4013      	ands	r3, r2
 800ef0a:	d003      	beq.n	800ef14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	4313      	orrs	r3, r2
 800ef12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ef14:	4b24      	ldr	r3, [pc, #144]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800ef16:	693a      	ldr	r2, [r7, #16]
 800ef18:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800ef1a:	4b23      	ldr	r3, [pc, #140]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	43da      	mvns	r2, r3
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	4013      	ands	r3, r2
 800ef28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	685a      	ldr	r2, [r3, #4]
 800ef2e:	2380      	movs	r3, #128	@ 0x80
 800ef30:	029b      	lsls	r3, r3, #10
 800ef32:	4013      	ands	r3, r2
 800ef34:	d003      	beq.n	800ef3e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800ef36:	693a      	ldr	r2, [r7, #16]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ef3e:	4b1a      	ldr	r3, [pc, #104]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ef44:	4b18      	ldr	r3, [pc, #96]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	43da      	mvns	r2, r3
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	4013      	ands	r3, r2
 800ef52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	685a      	ldr	r2, [r3, #4]
 800ef58:	2380      	movs	r3, #128	@ 0x80
 800ef5a:	025b      	lsls	r3, r3, #9
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	d003      	beq.n	800ef68 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	4313      	orrs	r3, r2
 800ef66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ef68:	4b0f      	ldr	r3, [pc, #60]	@ (800efa8 <HAL_GPIO_Init+0x2f8>)
 800ef6a:	693a      	ldr	r2, [r7, #16]
 800ef6c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	3301      	adds	r3, #1
 800ef72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	40da      	lsrs	r2, r3
 800ef7c:	1e13      	subs	r3, r2, #0
 800ef7e:	d000      	beq.n	800ef82 <HAL_GPIO_Init+0x2d2>
 800ef80:	e6a2      	b.n	800ecc8 <HAL_GPIO_Init+0x18>
  }
}
 800ef82:	46c0      	nop			@ (mov r8, r8)
 800ef84:	46c0      	nop			@ (mov r8, r8)
 800ef86:	46bd      	mov	sp, r7
 800ef88:	b006      	add	sp, #24
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	40021000 	.word	0x40021000
 800ef90:	40010000 	.word	0x40010000
 800ef94:	50000400 	.word	0x50000400
 800ef98:	50000800 	.word	0x50000800
 800ef9c:	50000c00 	.word	0x50000c00
 800efa0:	50001000 	.word	0x50001000
 800efa4:	50001c00 	.word	0x50001c00
 800efa8:	40010400 	.word	0x40010400

0800efac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	000a      	movs	r2, r1
 800efb6:	1cbb      	adds	r3, r7, #2
 800efb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	1cba      	adds	r2, r7, #2
 800efc0:	8812      	ldrh	r2, [r2, #0]
 800efc2:	4013      	ands	r3, r2
 800efc4:	d004      	beq.n	800efd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800efc6:	230f      	movs	r3, #15
 800efc8:	18fb      	adds	r3, r7, r3
 800efca:	2201      	movs	r2, #1
 800efcc:	701a      	strb	r2, [r3, #0]
 800efce:	e003      	b.n	800efd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800efd0:	230f      	movs	r3, #15
 800efd2:	18fb      	adds	r3, r7, r3
 800efd4:	2200      	movs	r2, #0
 800efd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800efd8:	230f      	movs	r3, #15
 800efda:	18fb      	adds	r3, r7, r3
 800efdc:	781b      	ldrb	r3, [r3, #0]
}
 800efde:	0018      	movs	r0, r3
 800efe0:	46bd      	mov	sp, r7
 800efe2:	b004      	add	sp, #16
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b082      	sub	sp, #8
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	0008      	movs	r0, r1
 800eff0:	0011      	movs	r1, r2
 800eff2:	1cbb      	adds	r3, r7, #2
 800eff4:	1c02      	adds	r2, r0, #0
 800eff6:	801a      	strh	r2, [r3, #0]
 800eff8:	1c7b      	adds	r3, r7, #1
 800effa:	1c0a      	adds	r2, r1, #0
 800effc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800effe:	1c7b      	adds	r3, r7, #1
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d004      	beq.n	800f010 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f006:	1cbb      	adds	r3, r7, #2
 800f008:	881a      	ldrh	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f00e:	e003      	b.n	800f018 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f010:	1cbb      	adds	r3, r7, #2
 800f012:	881a      	ldrh	r2, [r3, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f018:	46c0      	nop			@ (mov r8, r8)
 800f01a:	46bd      	mov	sp, r7
 800f01c:	b002      	add	sp, #8
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d101      	bne.n	800f032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f02e:	2301      	movs	r3, #1
 800f030:	e082      	b.n	800f138 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2241      	movs	r2, #65	@ 0x41
 800f036:	5c9b      	ldrb	r3, [r3, r2]
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d107      	bne.n	800f04e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2240      	movs	r2, #64	@ 0x40
 800f042:	2100      	movs	r1, #0
 800f044:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	0018      	movs	r0, r3
 800f04a:	f7f8 f8c5 	bl	80071d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2241      	movs	r2, #65	@ 0x41
 800f052:	2124      	movs	r1, #36	@ 0x24
 800f054:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	2101      	movs	r1, #1
 800f062:	438a      	bics	r2, r1
 800f064:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	685a      	ldr	r2, [r3, #4]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4934      	ldr	r1, [pc, #208]	@ (800f140 <HAL_I2C_Init+0x120>)
 800f070:	400a      	ands	r2, r1
 800f072:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	689a      	ldr	r2, [r3, #8]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4931      	ldr	r1, [pc, #196]	@ (800f144 <HAL_I2C_Init+0x124>)
 800f080:	400a      	ands	r2, r1
 800f082:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d108      	bne.n	800f09e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	689a      	ldr	r2, [r3, #8]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2180      	movs	r1, #128	@ 0x80
 800f096:	0209      	lsls	r1, r1, #8
 800f098:	430a      	orrs	r2, r1
 800f09a:	609a      	str	r2, [r3, #8]
 800f09c:	e007      	b.n	800f0ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	689a      	ldr	r2, [r3, #8]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2184      	movs	r1, #132	@ 0x84
 800f0a8:	0209      	lsls	r1, r1, #8
 800f0aa:	430a      	orrs	r2, r1
 800f0ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d104      	bne.n	800f0c0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2280      	movs	r2, #128	@ 0x80
 800f0bc:	0112      	lsls	r2, r2, #4
 800f0be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	685a      	ldr	r2, [r3, #4]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	491f      	ldr	r1, [pc, #124]	@ (800f148 <HAL_I2C_Init+0x128>)
 800f0cc:	430a      	orrs	r2, r1
 800f0ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68da      	ldr	r2, [r3, #12]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	491a      	ldr	r1, [pc, #104]	@ (800f144 <HAL_I2C_Init+0x124>)
 800f0dc:	400a      	ands	r2, r1
 800f0de:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	691a      	ldr	r2, [r3, #16]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	695b      	ldr	r3, [r3, #20]
 800f0e8:	431a      	orrs	r2, r3
 800f0ea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	430a      	orrs	r2, r1
 800f0f8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	69d9      	ldr	r1, [r3, #28]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a1a      	ldr	r2, [r3, #32]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	430a      	orrs	r2, r1
 800f108:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2101      	movs	r1, #1
 800f116:	430a      	orrs	r2, r1
 800f118:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2241      	movs	r2, #65	@ 0x41
 800f124:	2120      	movs	r1, #32
 800f126:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2242      	movs	r2, #66	@ 0x42
 800f132:	2100      	movs	r1, #0
 800f134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f136:	2300      	movs	r3, #0
}
 800f138:	0018      	movs	r0, r3
 800f13a:	46bd      	mov	sp, r7
 800f13c:	b002      	add	sp, #8
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	f0ffffff 	.word	0xf0ffffff
 800f144:	ffff7fff 	.word	0xffff7fff
 800f148:	02008000 	.word	0x02008000

0800f14c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f14c:	b590      	push	{r4, r7, lr}
 800f14e:	b089      	sub	sp, #36	@ 0x24
 800f150:	af02      	add	r7, sp, #8
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	0008      	movs	r0, r1
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	0019      	movs	r1, r3
 800f15a:	230a      	movs	r3, #10
 800f15c:	18fb      	adds	r3, r7, r3
 800f15e:	1c02      	adds	r2, r0, #0
 800f160:	801a      	strh	r2, [r3, #0]
 800f162:	2308      	movs	r3, #8
 800f164:	18fb      	adds	r3, r7, r3
 800f166:	1c0a      	adds	r2, r1, #0
 800f168:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2241      	movs	r2, #65	@ 0x41
 800f16e:	5c9b      	ldrb	r3, [r3, r2]
 800f170:	b2db      	uxtb	r3, r3
 800f172:	2b20      	cmp	r3, #32
 800f174:	d000      	beq.n	800f178 <HAL_I2C_Master_Transmit+0x2c>
 800f176:	e0e7      	b.n	800f348 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2240      	movs	r2, #64	@ 0x40
 800f17c:	5c9b      	ldrb	r3, [r3, r2]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d101      	bne.n	800f186 <HAL_I2C_Master_Transmit+0x3a>
 800f182:	2302      	movs	r3, #2
 800f184:	e0e1      	b.n	800f34a <HAL_I2C_Master_Transmit+0x1fe>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2240      	movs	r2, #64	@ 0x40
 800f18a:	2101      	movs	r1, #1
 800f18c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f18e:	f7fe fcaf 	bl	800daf0 <HAL_GetTick>
 800f192:	0003      	movs	r3, r0
 800f194:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f196:	2380      	movs	r3, #128	@ 0x80
 800f198:	0219      	lsls	r1, r3, #8
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	9300      	str	r3, [sp, #0]
 800f1a0:	2319      	movs	r3, #25
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f001 ff98 	bl	80110d8 <I2C_WaitOnFlagUntilTimeout>
 800f1a8:	1e03      	subs	r3, r0, #0
 800f1aa:	d001      	beq.n	800f1b0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e0cc      	b.n	800f34a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2241      	movs	r2, #65	@ 0x41
 800f1b4:	2121      	movs	r1, #33	@ 0x21
 800f1b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2242      	movs	r2, #66	@ 0x42
 800f1bc:	2110      	movs	r1, #16
 800f1be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2208      	movs	r2, #8
 800f1d0:	18ba      	adds	r2, r7, r2
 800f1d2:	8812      	ldrh	r2, [r2, #0]
 800f1d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	2bff      	cmp	r3, #255	@ 0xff
 800f1e4:	d911      	bls.n	800f20a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	22ff      	movs	r2, #255	@ 0xff
 800f1ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	2380      	movs	r3, #128	@ 0x80
 800f1f4:	045c      	lsls	r4, r3, #17
 800f1f6:	230a      	movs	r3, #10
 800f1f8:	18fb      	adds	r3, r7, r3
 800f1fa:	8819      	ldrh	r1, [r3, #0]
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	4b55      	ldr	r3, [pc, #340]	@ (800f354 <HAL_I2C_Master_Transmit+0x208>)
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	0023      	movs	r3, r4
 800f204:	f002 f9ba 	bl	801157c <I2C_TransferConfig>
 800f208:	e075      	b.n	800f2f6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f20e:	b29a      	uxth	r2, r3
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	2380      	movs	r3, #128	@ 0x80
 800f21c:	049c      	lsls	r4, r3, #18
 800f21e:	230a      	movs	r3, #10
 800f220:	18fb      	adds	r3, r7, r3
 800f222:	8819      	ldrh	r1, [r3, #0]
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	4b4b      	ldr	r3, [pc, #300]	@ (800f354 <HAL_I2C_Master_Transmit+0x208>)
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	0023      	movs	r3, r4
 800f22c:	f002 f9a6 	bl	801157c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800f230:	e061      	b.n	800f2f6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	0018      	movs	r0, r3
 800f23a:	f001 ff9b 	bl	8011174 <I2C_WaitOnTXISFlagUntilTimeout>
 800f23e:	1e03      	subs	r3, r0, #0
 800f240:	d001      	beq.n	800f246 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800f242:	2301      	movs	r3, #1
 800f244:	e081      	b.n	800f34a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f24a:	781a      	ldrb	r2, [r3, #0]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f256:	1c5a      	adds	r2, r3, #1
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f260:	b29b      	uxth	r3, r3
 800f262:	3b01      	subs	r3, #1
 800f264:	b29a      	uxth	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f26e:	3b01      	subs	r3, #1
 800f270:	b29a      	uxth	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d03a      	beq.n	800f2f6 <HAL_I2C_Master_Transmit+0x1aa>
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f284:	2b00      	cmp	r3, #0
 800f286:	d136      	bne.n	800f2f6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	0013      	movs	r3, r2
 800f292:	2200      	movs	r2, #0
 800f294:	2180      	movs	r1, #128	@ 0x80
 800f296:	f001 ff1f 	bl	80110d8 <I2C_WaitOnFlagUntilTimeout>
 800f29a:	1e03      	subs	r3, r0, #0
 800f29c:	d001      	beq.n	800f2a2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800f29e:	2301      	movs	r3, #1
 800f2a0:	e053      	b.n	800f34a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	2bff      	cmp	r3, #255	@ 0xff
 800f2aa:	d911      	bls.n	800f2d0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	22ff      	movs	r2, #255	@ 0xff
 800f2b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2b6:	b2da      	uxtb	r2, r3
 800f2b8:	2380      	movs	r3, #128	@ 0x80
 800f2ba:	045c      	lsls	r4, r3, #17
 800f2bc:	230a      	movs	r3, #10
 800f2be:	18fb      	adds	r3, r7, r3
 800f2c0:	8819      	ldrh	r1, [r3, #0]
 800f2c2:	68f8      	ldr	r0, [r7, #12]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	0023      	movs	r3, r4
 800f2ca:	f002 f957 	bl	801157c <I2C_TransferConfig>
 800f2ce:	e012      	b.n	800f2f6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2de:	b2da      	uxtb	r2, r3
 800f2e0:	2380      	movs	r3, #128	@ 0x80
 800f2e2:	049c      	lsls	r4, r3, #18
 800f2e4:	230a      	movs	r3, #10
 800f2e6:	18fb      	adds	r3, r7, r3
 800f2e8:	8819      	ldrh	r1, [r3, #0]
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	0023      	movs	r3, r4
 800f2f2:	f002 f943 	bl	801157c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d198      	bne.n	800f232 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	0018      	movs	r0, r3
 800f308:	f001 ff7a 	bl	8011200 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f30c:	1e03      	subs	r3, r0, #0
 800f30e:	d001      	beq.n	800f314 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800f310:	2301      	movs	r3, #1
 800f312:	e01a      	b.n	800f34a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2220      	movs	r2, #32
 800f31a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	685a      	ldr	r2, [r3, #4]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	490c      	ldr	r1, [pc, #48]	@ (800f358 <HAL_I2C_Master_Transmit+0x20c>)
 800f328:	400a      	ands	r2, r1
 800f32a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2241      	movs	r2, #65	@ 0x41
 800f330:	2120      	movs	r1, #32
 800f332:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2242      	movs	r2, #66	@ 0x42
 800f338:	2100      	movs	r1, #0
 800f33a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2240      	movs	r2, #64	@ 0x40
 800f340:	2100      	movs	r1, #0
 800f342:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	e000      	b.n	800f34a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800f348:	2302      	movs	r3, #2
  }
}
 800f34a:	0018      	movs	r0, r3
 800f34c:	46bd      	mov	sp, r7
 800f34e:	b007      	add	sp, #28
 800f350:	bd90      	pop	{r4, r7, pc}
 800f352:	46c0      	nop			@ (mov r8, r8)
 800f354:	80002000 	.word	0x80002000
 800f358:	fe00e800 	.word	0xfe00e800

0800f35c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800f35c:	b590      	push	{r4, r7, lr}
 800f35e:	b089      	sub	sp, #36	@ 0x24
 800f360:	af02      	add	r7, sp, #8
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	0008      	movs	r0, r1
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	0019      	movs	r1, r3
 800f36a:	230a      	movs	r3, #10
 800f36c:	18fb      	adds	r3, r7, r3
 800f36e:	1c02      	adds	r2, r0, #0
 800f370:	801a      	strh	r2, [r3, #0]
 800f372:	2308      	movs	r3, #8
 800f374:	18fb      	adds	r3, r7, r3
 800f376:	1c0a      	adds	r2, r1, #0
 800f378:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2241      	movs	r2, #65	@ 0x41
 800f37e:	5c9b      	ldrb	r3, [r3, r2]
 800f380:	b2db      	uxtb	r3, r3
 800f382:	2b20      	cmp	r3, #32
 800f384:	d000      	beq.n	800f388 <HAL_I2C_Master_Receive+0x2c>
 800f386:	e0e8      	b.n	800f55a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2240      	movs	r2, #64	@ 0x40
 800f38c:	5c9b      	ldrb	r3, [r3, r2]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d101      	bne.n	800f396 <HAL_I2C_Master_Receive+0x3a>
 800f392:	2302      	movs	r3, #2
 800f394:	e0e2      	b.n	800f55c <HAL_I2C_Master_Receive+0x200>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2240      	movs	r2, #64	@ 0x40
 800f39a:	2101      	movs	r1, #1
 800f39c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f39e:	f7fe fba7 	bl	800daf0 <HAL_GetTick>
 800f3a2:	0003      	movs	r3, r0
 800f3a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f3a6:	2380      	movs	r3, #128	@ 0x80
 800f3a8:	0219      	lsls	r1, r3, #8
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	2319      	movs	r3, #25
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f001 fe90 	bl	80110d8 <I2C_WaitOnFlagUntilTimeout>
 800f3b8:	1e03      	subs	r3, r0, #0
 800f3ba:	d001      	beq.n	800f3c0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e0cd      	b.n	800f55c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2241      	movs	r2, #65	@ 0x41
 800f3c4:	2122      	movs	r1, #34	@ 0x22
 800f3c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2242      	movs	r2, #66	@ 0x42
 800f3cc:	2110      	movs	r1, #16
 800f3ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2208      	movs	r2, #8
 800f3e0:	18ba      	adds	r2, r7, r2
 800f3e2:	8812      	ldrh	r2, [r2, #0]
 800f3e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	2bff      	cmp	r3, #255	@ 0xff
 800f3f4:	d911      	bls.n	800f41a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	22ff      	movs	r2, #255	@ 0xff
 800f3fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f400:	b2da      	uxtb	r2, r3
 800f402:	2380      	movs	r3, #128	@ 0x80
 800f404:	045c      	lsls	r4, r3, #17
 800f406:	230a      	movs	r3, #10
 800f408:	18fb      	adds	r3, r7, r3
 800f40a:	8819      	ldrh	r1, [r3, #0]
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	4b55      	ldr	r3, [pc, #340]	@ (800f564 <HAL_I2C_Master_Receive+0x208>)
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	0023      	movs	r3, r4
 800f414:	f002 f8b2 	bl	801157c <I2C_TransferConfig>
 800f418:	e076      	b.n	800f508 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f41e:	b29a      	uxth	r2, r3
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	2380      	movs	r3, #128	@ 0x80
 800f42c:	049c      	lsls	r4, r3, #18
 800f42e:	230a      	movs	r3, #10
 800f430:	18fb      	adds	r3, r7, r3
 800f432:	8819      	ldrh	r1, [r3, #0]
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	4b4b      	ldr	r3, [pc, #300]	@ (800f564 <HAL_I2C_Master_Receive+0x208>)
 800f438:	9300      	str	r3, [sp, #0]
 800f43a:	0023      	movs	r3, r4
 800f43c:	f002 f89e 	bl	801157c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800f440:	e062      	b.n	800f508 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f442:	697a      	ldr	r2, [r7, #20]
 800f444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	0018      	movs	r0, r3
 800f44a:	f001 ff1d 	bl	8011288 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f44e:	1e03      	subs	r3, r0, #0
 800f450:	d001      	beq.n	800f456 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	e082      	b.n	800f55c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f460:	b2d2      	uxtb	r2, r2
 800f462:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f472:	3b01      	subs	r3, #1
 800f474:	b29a      	uxth	r2, r3
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f47e:	b29b      	uxth	r3, r3
 800f480:	3b01      	subs	r3, #1
 800f482:	b29a      	uxth	r2, r3
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d03a      	beq.n	800f508 <HAL_I2C_Master_Receive+0x1ac>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f496:	2b00      	cmp	r3, #0
 800f498:	d136      	bne.n	800f508 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f49a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	9300      	str	r3, [sp, #0]
 800f4a2:	0013      	movs	r3, r2
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	2180      	movs	r1, #128	@ 0x80
 800f4a8:	f001 fe16 	bl	80110d8 <I2C_WaitOnFlagUntilTimeout>
 800f4ac:	1e03      	subs	r3, r0, #0
 800f4ae:	d001      	beq.n	800f4b4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e053      	b.n	800f55c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	2bff      	cmp	r3, #255	@ 0xff
 800f4bc:	d911      	bls.n	800f4e2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	22ff      	movs	r2, #255	@ 0xff
 800f4c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4c8:	b2da      	uxtb	r2, r3
 800f4ca:	2380      	movs	r3, #128	@ 0x80
 800f4cc:	045c      	lsls	r4, r3, #17
 800f4ce:	230a      	movs	r3, #10
 800f4d0:	18fb      	adds	r3, r7, r3
 800f4d2:	8819      	ldrh	r1, [r3, #0]
 800f4d4:	68f8      	ldr	r0, [r7, #12]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	0023      	movs	r3, r4
 800f4dc:	f002 f84e 	bl	801157c <I2C_TransferConfig>
 800f4e0:	e012      	b.n	800f508 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4f0:	b2da      	uxtb	r2, r3
 800f4f2:	2380      	movs	r3, #128	@ 0x80
 800f4f4:	049c      	lsls	r4, r3, #18
 800f4f6:	230a      	movs	r3, #10
 800f4f8:	18fb      	adds	r3, r7, r3
 800f4fa:	8819      	ldrh	r1, [r3, #0]
 800f4fc:	68f8      	ldr	r0, [r7, #12]
 800f4fe:	2300      	movs	r3, #0
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	0023      	movs	r3, r4
 800f504:	f002 f83a 	bl	801157c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d197      	bne.n	800f442 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f512:	697a      	ldr	r2, [r7, #20]
 800f514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	0018      	movs	r0, r3
 800f51a:	f001 fe71 	bl	8011200 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f51e:	1e03      	subs	r3, r0, #0
 800f520:	d001      	beq.n	800f526 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800f522:	2301      	movs	r3, #1
 800f524:	e01a      	b.n	800f55c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2220      	movs	r2, #32
 800f52c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	685a      	ldr	r2, [r3, #4]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	490b      	ldr	r1, [pc, #44]	@ (800f568 <HAL_I2C_Master_Receive+0x20c>)
 800f53a:	400a      	ands	r2, r1
 800f53c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2241      	movs	r2, #65	@ 0x41
 800f542:	2120      	movs	r1, #32
 800f544:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2242      	movs	r2, #66	@ 0x42
 800f54a:	2100      	movs	r1, #0
 800f54c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2240      	movs	r2, #64	@ 0x40
 800f552:	2100      	movs	r1, #0
 800f554:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	e000      	b.n	800f55c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800f55a:	2302      	movs	r3, #2
  }
}
 800f55c:	0018      	movs	r0, r3
 800f55e:	46bd      	mov	sp, r7
 800f560:	b007      	add	sp, #28
 800f562:	bd90      	pop	{r4, r7, pc}
 800f564:	80002400 	.word	0x80002400
 800f568:	fe00e800 	.word	0xfe00e800

0800f56c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800f56c:	b5b0      	push	{r4, r5, r7, lr}
 800f56e:	b088      	sub	sp, #32
 800f570:	af02      	add	r7, sp, #8
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	0008      	movs	r0, r1
 800f576:	607a      	str	r2, [r7, #4]
 800f578:	0019      	movs	r1, r3
 800f57a:	230a      	movs	r3, #10
 800f57c:	18fb      	adds	r3, r7, r3
 800f57e:	1c02      	adds	r2, r0, #0
 800f580:	801a      	strh	r2, [r3, #0]
 800f582:	2308      	movs	r3, #8
 800f584:	18fb      	adds	r3, r7, r3
 800f586:	1c0a      	adds	r2, r1, #0
 800f588:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2241      	movs	r2, #65	@ 0x41
 800f58e:	5c9b      	ldrb	r3, [r3, r2]
 800f590:	b2db      	uxtb	r3, r3
 800f592:	2b20      	cmp	r3, #32
 800f594:	d000      	beq.n	800f598 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800f596:	e0dd      	b.n	800f754 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	699a      	ldr	r2, [r3, #24]
 800f59e:	2380      	movs	r3, #128	@ 0x80
 800f5a0:	021b      	lsls	r3, r3, #8
 800f5a2:	401a      	ands	r2, r3
 800f5a4:	2380      	movs	r3, #128	@ 0x80
 800f5a6:	021b      	lsls	r3, r3, #8
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d101      	bne.n	800f5b0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800f5ac:	2302      	movs	r3, #2
 800f5ae:	e0d2      	b.n	800f756 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2240      	movs	r2, #64	@ 0x40
 800f5b4:	5c9b      	ldrb	r3, [r3, r2]
 800f5b6:	2b01      	cmp	r3, #1
 800f5b8:	d101      	bne.n	800f5be <HAL_I2C_Master_Transmit_DMA+0x52>
 800f5ba:	2302      	movs	r3, #2
 800f5bc:	e0cb      	b.n	800f756 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2240      	movs	r2, #64	@ 0x40
 800f5c2:	2101      	movs	r1, #1
 800f5c4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2241      	movs	r2, #65	@ 0x41
 800f5ca:	2121      	movs	r1, #33	@ 0x21
 800f5cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2242      	movs	r2, #66	@ 0x42
 800f5d2:	2110      	movs	r1, #16
 800f5d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2208      	movs	r2, #8
 800f5e6:	18ba      	adds	r2, r7, r2
 800f5e8:	8812      	ldrh	r2, [r2, #0]
 800f5ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	4a5c      	ldr	r2, [pc, #368]	@ (800f760 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800f5f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	4a5b      	ldr	r2, [pc, #364]	@ (800f764 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800f5f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	2bff      	cmp	r3, #255	@ 0xff
 800f600:	d906      	bls.n	800f610 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	22ff      	movs	r2, #255	@ 0xff
 800f606:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f608:	2380      	movs	r3, #128	@ 0x80
 800f60a:	045b      	lsls	r3, r3, #17
 800f60c:	617b      	str	r3, [r7, #20]
 800f60e:	e007      	b.n	800f620 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f614:	b29a      	uxth	r2, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f61a:	2380      	movs	r3, #128	@ 0x80
 800f61c:	049b      	lsls	r3, r3, #18
 800f61e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f624:	2b00      	cmp	r3, #0
 800f626:	d100      	bne.n	800f62a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800f628:	e078      	b.n	800f71c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d023      	beq.n	800f67a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f636:	4a4c      	ldr	r2, [pc, #304]	@ (800f768 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800f638:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f63e:	4a4b      	ldr	r2, [pc, #300]	@ (800f76c <HAL_I2C_Master_Transmit_DMA+0x200>)
 800f640:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f646:	2200      	movs	r2, #0
 800f648:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f64e:	2200      	movs	r2, #0
 800f650:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f656:	6879      	ldr	r1, [r7, #4]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	3328      	adds	r3, #40	@ 0x28
 800f65e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f664:	2513      	movs	r5, #19
 800f666:	197c      	adds	r4, r7, r5
 800f668:	f7fe ff7e 	bl	800e568 <HAL_DMA_Start_IT>
 800f66c:	0003      	movs	r3, r0
 800f66e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f670:	197b      	adds	r3, r7, r5
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d13d      	bne.n	800f6f4 <HAL_I2C_Master_Transmit_DMA+0x188>
 800f678:	e013      	b.n	800f6a2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2241      	movs	r2, #65	@ 0x41
 800f67e:	2120      	movs	r1, #32
 800f680:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2242      	movs	r2, #66	@ 0x42
 800f686:	2100      	movs	r1, #0
 800f688:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f68e:	2280      	movs	r2, #128	@ 0x80
 800f690:	431a      	orrs	r2, r3
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2240      	movs	r2, #64	@ 0x40
 800f69a:	2100      	movs	r1, #0
 800f69c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e059      	b.n	800f756 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	697c      	ldr	r4, [r7, #20]
 800f6aa:	230a      	movs	r3, #10
 800f6ac:	18fb      	adds	r3, r7, r3
 800f6ae:	8819      	ldrh	r1, [r3, #0]
 800f6b0:	68f8      	ldr	r0, [r7, #12]
 800f6b2:	4b2f      	ldr	r3, [pc, #188]	@ (800f770 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	0023      	movs	r3, r4
 800f6b8:	f001 ff60 	bl	801157c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2240      	movs	r2, #64	@ 0x40
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2110      	movs	r1, #16
 800f6da:	0018      	movs	r0, r3
 800f6dc:	f001 ff88 	bl	80115f0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2180      	movs	r1, #128	@ 0x80
 800f6ec:	01c9      	lsls	r1, r1, #7
 800f6ee:	430a      	orrs	r2, r1
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	e02d      	b.n	800f750 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2241      	movs	r2, #65	@ 0x41
 800f6f8:	2120      	movs	r1, #32
 800f6fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2242      	movs	r2, #66	@ 0x42
 800f700:	2100      	movs	r1, #0
 800f702:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f708:	2210      	movs	r2, #16
 800f70a:	431a      	orrs	r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2240      	movs	r2, #64	@ 0x40
 800f714:	2100      	movs	r1, #0
 800f716:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800f718:	2301      	movs	r3, #1
 800f71a:	e01c      	b.n	800f756 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	4a15      	ldr	r2, [pc, #84]	@ (800f774 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800f720:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f726:	b2da      	uxtb	r2, r3
 800f728:	2380      	movs	r3, #128	@ 0x80
 800f72a:	049c      	lsls	r4, r3, #18
 800f72c:	230a      	movs	r3, #10
 800f72e:	18fb      	adds	r3, r7, r3
 800f730:	8819      	ldrh	r1, [r3, #0]
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	4b0e      	ldr	r3, [pc, #56]	@ (800f770 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	0023      	movs	r3, r4
 800f73a:	f001 ff1f 	bl	801157c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2240      	movs	r2, #64	@ 0x40
 800f742:	2100      	movs	r1, #0
 800f744:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2101      	movs	r1, #1
 800f74a:	0018      	movs	r0, r3
 800f74c:	f001 ff50 	bl	80115f0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800f750:	2300      	movs	r3, #0
 800f752:	e000      	b.n	800f756 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f754:	2302      	movs	r3, #2
  }
}
 800f756:	0018      	movs	r0, r3
 800f758:	46bd      	mov	sp, r7
 800f75a:	b006      	add	sp, #24
 800f75c:	bdb0      	pop	{r4, r5, r7, pc}
 800f75e:	46c0      	nop			@ (mov r8, r8)
 800f760:	ffff0000 	.word	0xffff0000
 800f764:	0800ff71 	.word	0x0800ff71
 800f768:	08010f29 	.word	0x08010f29
 800f76c:	08011069 	.word	0x08011069
 800f770:	80002000 	.word	0x80002000
 800f774:	0800fb1d 	.word	0x0800fb1d

0800f778 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800f778:	b5b0      	push	{r4, r5, r7, lr}
 800f77a:	b088      	sub	sp, #32
 800f77c:	af02      	add	r7, sp, #8
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	0008      	movs	r0, r1
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	0019      	movs	r1, r3
 800f786:	230a      	movs	r3, #10
 800f788:	18fb      	adds	r3, r7, r3
 800f78a:	1c02      	adds	r2, r0, #0
 800f78c:	801a      	strh	r2, [r3, #0]
 800f78e:	2308      	movs	r3, #8
 800f790:	18fb      	adds	r3, r7, r3
 800f792:	1c0a      	adds	r2, r1, #0
 800f794:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	2241      	movs	r2, #65	@ 0x41
 800f79a:	5c9b      	ldrb	r3, [r3, r2]
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	2b20      	cmp	r3, #32
 800f7a0:	d000      	beq.n	800f7a4 <HAL_I2C_Master_Receive_DMA+0x2c>
 800f7a2:	e0dd      	b.n	800f960 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	699a      	ldr	r2, [r3, #24]
 800f7aa:	2380      	movs	r3, #128	@ 0x80
 800f7ac:	021b      	lsls	r3, r3, #8
 800f7ae:	401a      	ands	r2, r3
 800f7b0:	2380      	movs	r3, #128	@ 0x80
 800f7b2:	021b      	lsls	r3, r3, #8
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d101      	bne.n	800f7bc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	e0d2      	b.n	800f962 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2240      	movs	r2, #64	@ 0x40
 800f7c0:	5c9b      	ldrb	r3, [r3, r2]
 800f7c2:	2b01      	cmp	r3, #1
 800f7c4:	d101      	bne.n	800f7ca <HAL_I2C_Master_Receive_DMA+0x52>
 800f7c6:	2302      	movs	r3, #2
 800f7c8:	e0cb      	b.n	800f962 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2240      	movs	r2, #64	@ 0x40
 800f7ce:	2101      	movs	r1, #1
 800f7d0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2241      	movs	r2, #65	@ 0x41
 800f7d6:	2122      	movs	r1, #34	@ 0x22
 800f7d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	2242      	movs	r2, #66	@ 0x42
 800f7de:	2110      	movs	r1, #16
 800f7e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2208      	movs	r2, #8
 800f7f2:	18ba      	adds	r2, r7, r2
 800f7f4:	8812      	ldrh	r2, [r2, #0]
 800f7f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	4a5c      	ldr	r2, [pc, #368]	@ (800f96c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800f7fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	4a5b      	ldr	r2, [pc, #364]	@ (800f970 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800f802:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f808:	b29b      	uxth	r3, r3
 800f80a:	2bff      	cmp	r3, #255	@ 0xff
 800f80c:	d906      	bls.n	800f81c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	22ff      	movs	r2, #255	@ 0xff
 800f812:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f814:	2380      	movs	r3, #128	@ 0x80
 800f816:	045b      	lsls	r3, r3, #17
 800f818:	617b      	str	r3, [r7, #20]
 800f81a:	e007      	b.n	800f82c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f820:	b29a      	uxth	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f826:	2380      	movs	r3, #128	@ 0x80
 800f828:	049b      	lsls	r3, r3, #18
 800f82a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f830:	2b00      	cmp	r3, #0
 800f832:	d100      	bne.n	800f836 <HAL_I2C_Master_Receive_DMA+0xbe>
 800f834:	e078      	b.n	800f928 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d023      	beq.n	800f886 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f842:	4a4c      	ldr	r2, [pc, #304]	@ (800f974 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800f844:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f84a:	4a4b      	ldr	r2, [pc, #300]	@ (800f978 <HAL_I2C_Master_Receive_DMA+0x200>)
 800f84c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f852:	2200      	movs	r2, #0
 800f854:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f85a:	2200      	movs	r2, #0
 800f85c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	3324      	adds	r3, #36	@ 0x24
 800f868:	0019      	movs	r1, r3
 800f86a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f870:	2513      	movs	r5, #19
 800f872:	197c      	adds	r4, r7, r5
 800f874:	f7fe fe78 	bl	800e568 <HAL_DMA_Start_IT>
 800f878:	0003      	movs	r3, r0
 800f87a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f87c:	197b      	adds	r3, r7, r5
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d13d      	bne.n	800f900 <HAL_I2C_Master_Receive_DMA+0x188>
 800f884:	e013      	b.n	800f8ae <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2241      	movs	r2, #65	@ 0x41
 800f88a:	2120      	movs	r1, #32
 800f88c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2242      	movs	r2, #66	@ 0x42
 800f892:	2100      	movs	r1, #0
 800f894:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f89a:	2280      	movs	r2, #128	@ 0x80
 800f89c:	431a      	orrs	r2, r3
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2240      	movs	r2, #64	@ 0x40
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e059      	b.n	800f962 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	697c      	ldr	r4, [r7, #20]
 800f8b6:	230a      	movs	r3, #10
 800f8b8:	18fb      	adds	r3, r7, r3
 800f8ba:	8819      	ldrh	r1, [r3, #0]
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	4b2f      	ldr	r3, [pc, #188]	@ (800f97c <HAL_I2C_Master_Receive_DMA+0x204>)
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	0023      	movs	r3, r4
 800f8c4:	f001 fe5a 	bl	801157c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2240      	movs	r2, #64	@ 0x40
 800f8de:	2100      	movs	r1, #0
 800f8e0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2110      	movs	r1, #16
 800f8e6:	0018      	movs	r0, r3
 800f8e8:	f001 fe82 	bl	80115f0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2180      	movs	r1, #128	@ 0x80
 800f8f8:	0209      	lsls	r1, r1, #8
 800f8fa:	430a      	orrs	r2, r1
 800f8fc:	601a      	str	r2, [r3, #0]
 800f8fe:	e02d      	b.n	800f95c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2241      	movs	r2, #65	@ 0x41
 800f904:	2120      	movs	r1, #32
 800f906:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2242      	movs	r2, #66	@ 0x42
 800f90c:	2100      	movs	r1, #0
 800f90e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f914:	2210      	movs	r2, #16
 800f916:	431a      	orrs	r2, r3
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2240      	movs	r2, #64	@ 0x40
 800f920:	2100      	movs	r1, #0
 800f922:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800f924:	2301      	movs	r3, #1
 800f926:	e01c      	b.n	800f962 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	4a15      	ldr	r2, [pc, #84]	@ (800f980 <HAL_I2C_Master_Receive_DMA+0x208>)
 800f92c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f932:	b2da      	uxtb	r2, r3
 800f934:	2380      	movs	r3, #128	@ 0x80
 800f936:	049c      	lsls	r4, r3, #18
 800f938:	230a      	movs	r3, #10
 800f93a:	18fb      	adds	r3, r7, r3
 800f93c:	8819      	ldrh	r1, [r3, #0]
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	4b0e      	ldr	r3, [pc, #56]	@ (800f97c <HAL_I2C_Master_Receive_DMA+0x204>)
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	0023      	movs	r3, r4
 800f946:	f001 fe19 	bl	801157c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2240      	movs	r2, #64	@ 0x40
 800f94e:	2100      	movs	r1, #0
 800f950:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2101      	movs	r1, #1
 800f956:	0018      	movs	r0, r3
 800f958:	f001 fe4a 	bl	80115f0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800f95c:	2300      	movs	r3, #0
 800f95e:	e000      	b.n	800f962 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f960:	2302      	movs	r3, #2
  }
}
 800f962:	0018      	movs	r0, r3
 800f964:	46bd      	mov	sp, r7
 800f966:	b006      	add	sp, #24
 800f968:	bdb0      	pop	{r4, r5, r7, pc}
 800f96a:	46c0      	nop			@ (mov r8, r8)
 800f96c:	ffff0000 	.word	0xffff0000
 800f970:	0800ff71 	.word	0x0800ff71
 800f974:	08010fc9 	.word	0x08010fc9
 800f978:	08011069 	.word	0x08011069
 800f97c:	80002400 	.word	0x80002400
 800f980:	0800fb1d 	.word	0x0800fb1d

0800f984 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	699b      	ldr	r3, [r3, #24]
 800f992:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d005      	beq.n	800f9b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	68f9      	ldr	r1, [r7, #12]
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	4798      	blx	r3
  }
}
 800f9b0:	46c0      	nop			@ (mov r8, r8)
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	b004      	add	sp, #16
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	699b      	ldr	r3, [r3, #24]
 800f9c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f9d0:	697a      	ldr	r2, [r7, #20]
 800f9d2:	2380      	movs	r3, #128	@ 0x80
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	4013      	ands	r3, r2
 800f9d8:	d00e      	beq.n	800f9f8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	2280      	movs	r2, #128	@ 0x80
 800f9de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f9e0:	d00a      	beq.n	800f9f8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	431a      	orrs	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2280      	movs	r2, #128	@ 0x80
 800f9f4:	0052      	lsls	r2, r2, #1
 800f9f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	2380      	movs	r3, #128	@ 0x80
 800f9fc:	00db      	lsls	r3, r3, #3
 800f9fe:	4013      	ands	r3, r2
 800fa00:	d00e      	beq.n	800fa20 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	2280      	movs	r2, #128	@ 0x80
 800fa06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fa08:	d00a      	beq.n	800fa20 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa0e:	2208      	movs	r2, #8
 800fa10:	431a      	orrs	r2, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2280      	movs	r2, #128	@ 0x80
 800fa1c:	00d2      	lsls	r2, r2, #3
 800fa1e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fa20:	697a      	ldr	r2, [r7, #20]
 800fa22:	2380      	movs	r3, #128	@ 0x80
 800fa24:	009b      	lsls	r3, r3, #2
 800fa26:	4013      	ands	r3, r2
 800fa28:	d00e      	beq.n	800fa48 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	2280      	movs	r2, #128	@ 0x80
 800fa2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fa30:	d00a      	beq.n	800fa48 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa36:	2202      	movs	r2, #2
 800fa38:	431a      	orrs	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2280      	movs	r2, #128	@ 0x80
 800fa44:	0092      	lsls	r2, r2, #2
 800fa46:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa4c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	220b      	movs	r2, #11
 800fa52:	4013      	ands	r3, r2
 800fa54:	d005      	beq.n	800fa62 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	0011      	movs	r1, r2
 800fa5c:	0018      	movs	r0, r3
 800fa5e:	f001 f915 	bl	8010c8c <I2C_ITError>
  }
}
 800fa62:	46c0      	nop			@ (mov r8, r8)
 800fa64:	46bd      	mov	sp, r7
 800fa66:	b006      	add	sp, #24
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b082      	sub	sp, #8
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800fa72:	46c0      	nop			@ (mov r8, r8)
 800fa74:	46bd      	mov	sp, r7
 800fa76:	b002      	add	sp, #8
 800fa78:	bd80      	pop	{r7, pc}

0800fa7a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa7a:	b580      	push	{r7, lr}
 800fa7c:	b082      	sub	sp, #8
 800fa7e:	af00      	add	r7, sp, #0
 800fa80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800fa82:	46c0      	nop			@ (mov r8, r8)
 800fa84:	46bd      	mov	sp, r7
 800fa86:	b002      	add	sp, #8
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b082      	sub	sp, #8
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800fa92:	46c0      	nop			@ (mov r8, r8)
 800fa94:	46bd      	mov	sp, r7
 800fa96:	b002      	add	sp, #8
 800fa98:	bd80      	pop	{r7, pc}

0800fa9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800faa2:	46c0      	nop			@ (mov r8, r8)
 800faa4:	46bd      	mov	sp, r7
 800faa6:	b002      	add	sp, #8
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b082      	sub	sp, #8
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	0008      	movs	r0, r1
 800fab4:	0011      	movs	r1, r2
 800fab6:	1cfb      	adds	r3, r7, #3
 800fab8:	1c02      	adds	r2, r0, #0
 800faba:	701a      	strb	r2, [r3, #0]
 800fabc:	003b      	movs	r3, r7
 800fabe:	1c0a      	adds	r2, r1, #0
 800fac0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800fac2:	46c0      	nop			@ (mov r8, r8)
 800fac4:	46bd      	mov	sp, r7
 800fac6:	b002      	add	sp, #8
 800fac8:	bd80      	pop	{r7, pc}

0800faca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b082      	sub	sp, #8
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800fad2:	46c0      	nop			@ (mov r8, r8)
 800fad4:	46bd      	mov	sp, r7
 800fad6:	b002      	add	sp, #8
 800fad8:	bd80      	pop	{r7, pc}

0800fada <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b082      	sub	sp, #8
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800fae2:	46c0      	nop			@ (mov r8, r8)
 800fae4:	46bd      	mov	sp, r7
 800fae6:	b002      	add	sp, #8
 800fae8:	bd80      	pop	{r7, pc}

0800faea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800faea:	b580      	push	{r7, lr}
 800faec:	b082      	sub	sp, #8
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800faf2:	46c0      	nop			@ (mov r8, r8)
 800faf4:	46bd      	mov	sp, r7
 800faf6:	b002      	add	sp, #8
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b082      	sub	sp, #8
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800fb02:	46c0      	nop			@ (mov r8, r8)
 800fb04:	46bd      	mov	sp, r7
 800fb06:	b002      	add	sp, #8
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b082      	sub	sp, #8
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800fb12:	46c0      	nop			@ (mov r8, r8)
 800fb14:	46bd      	mov	sp, r7
 800fb16:	b002      	add	sp, #8
 800fb18:	bd80      	pop	{r7, pc}
	...

0800fb1c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800fb1c:	b590      	push	{r4, r7, lr}
 800fb1e:	b089      	sub	sp, #36	@ 0x24
 800fb20:	af02      	add	r7, sp, #8
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2240      	movs	r2, #64	@ 0x40
 800fb30:	5c9b      	ldrb	r3, [r3, r2]
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d101      	bne.n	800fb3a <I2C_Master_ISR_IT+0x1e>
 800fb36:	2302      	movs	r3, #2
 800fb38:	e113      	b.n	800fd62 <I2C_Master_ISR_IT+0x246>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2240      	movs	r2, #64	@ 0x40
 800fb3e:	2101      	movs	r1, #1
 800fb40:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	2210      	movs	r2, #16
 800fb46:	4013      	ands	r3, r2
 800fb48:	d012      	beq.n	800fb70 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2210      	movs	r2, #16
 800fb4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fb50:	d00e      	beq.n	800fb70 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2210      	movs	r2, #16
 800fb58:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb5e:	2204      	movs	r2, #4
 800fb60:	431a      	orrs	r2, r3
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	0018      	movs	r0, r3
 800fb6a:	f001 f9ba 	bl	8010ee2 <I2C_Flush_TXDR>
 800fb6e:	e0e5      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	2204      	movs	r2, #4
 800fb74:	4013      	ands	r3, r2
 800fb76:	d021      	beq.n	800fbbc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2204      	movs	r2, #4
 800fb7c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fb7e:	d01d      	beq.n	800fbbc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	2204      	movs	r2, #4
 800fb84:	4393      	bics	r3, r2
 800fb86:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb92:	b2d2      	uxtb	r2, r2
 800fb94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb9a:	1c5a      	adds	r2, r3, #1
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fba4:	3b01      	subs	r3, #1
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	3b01      	subs	r3, #1
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fbba:	e0bf      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	4013      	ands	r3, r2
 800fbc2:	d01c      	beq.n	800fbfe <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2202      	movs	r2, #2
 800fbc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fbca:	d018      	beq.n	800fbfe <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd0:	781a      	ldrb	r2, [r3, #0]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbdc:	1c5a      	adds	r2, r3, #1
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	3b01      	subs	r3, #1
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fbfc:	e09e      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	2280      	movs	r2, #128	@ 0x80
 800fc02:	4013      	ands	r3, r2
 800fc04:	d100      	bne.n	800fc08 <I2C_Master_ISR_IT+0xec>
 800fc06:	e069      	b.n	800fcdc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2240      	movs	r2, #64	@ 0x40
 800fc0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800fc0e:	d065      	beq.n	800fcdc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d04a      	beq.n	800fcb0 <I2C_Master_ISR_IT+0x194>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d146      	bne.n	800fcb0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	2112      	movs	r1, #18
 800fc2c:	187b      	adds	r3, r7, r1
 800fc2e:	0592      	lsls	r2, r2, #22
 800fc30:	0d92      	lsrs	r2, r2, #22
 800fc32:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	2bff      	cmp	r3, #255	@ 0xff
 800fc3c:	d910      	bls.n	800fc60 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	22ff      	movs	r2, #255	@ 0xff
 800fc42:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc48:	b2da      	uxtb	r2, r3
 800fc4a:	2380      	movs	r3, #128	@ 0x80
 800fc4c:	045c      	lsls	r4, r3, #17
 800fc4e:	187b      	adds	r3, r7, r1
 800fc50:	8819      	ldrh	r1, [r3, #0]
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	2300      	movs	r3, #0
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	0023      	movs	r3, r4
 800fc5a:	f001 fc8f 	bl	801157c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc5e:	e03c      	b.n	800fcda <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc64:	b29a      	uxth	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc6e:	4a3f      	ldr	r2, [pc, #252]	@ (800fd6c <I2C_Master_ISR_IT+0x250>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d00e      	beq.n	800fc92 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc78:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800fc7e:	2312      	movs	r3, #18
 800fc80:	18fb      	adds	r3, r7, r3
 800fc82:	8819      	ldrh	r1, [r3, #0]
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	2300      	movs	r3, #0
 800fc88:	9300      	str	r3, [sp, #0]
 800fc8a:	0023      	movs	r3, r4
 800fc8c:	f001 fc76 	bl	801157c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc90:	e023      	b.n	800fcda <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc96:	b2da      	uxtb	r2, r3
 800fc98:	2380      	movs	r3, #128	@ 0x80
 800fc9a:	049c      	lsls	r4, r3, #18
 800fc9c:	2312      	movs	r3, #18
 800fc9e:	18fb      	adds	r3, r7, r3
 800fca0:	8819      	ldrh	r1, [r3, #0]
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	2300      	movs	r3, #0
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	0023      	movs	r3, r4
 800fcaa:	f001 fc67 	bl	801157c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fcae:	e014      	b.n	800fcda <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	685a      	ldr	r2, [r3, #4]
 800fcb6:	2380      	movs	r3, #128	@ 0x80
 800fcb8:	049b      	lsls	r3, r3, #18
 800fcba:	401a      	ands	r2, r3
 800fcbc:	2380      	movs	r3, #128	@ 0x80
 800fcbe:	049b      	lsls	r3, r3, #18
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d004      	beq.n	800fcce <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	0018      	movs	r0, r3
 800fcc8:	f000 fcf4 	bl	80106b4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fccc:	e036      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2140      	movs	r1, #64	@ 0x40
 800fcd2:	0018      	movs	r0, r3
 800fcd4:	f000 ffda 	bl	8010c8c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fcd8:	e030      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
 800fcda:	e02f      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	2240      	movs	r2, #64	@ 0x40
 800fce0:	4013      	ands	r3, r2
 800fce2:	d02b      	beq.n	800fd3c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2240      	movs	r2, #64	@ 0x40
 800fce8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800fcea:	d027      	beq.n	800fd3c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d11d      	bne.n	800fd32 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	685a      	ldr	r2, [r3, #4]
 800fcfc:	2380      	movs	r3, #128	@ 0x80
 800fcfe:	049b      	lsls	r3, r3, #18
 800fd00:	401a      	ands	r2, r3
 800fd02:	2380      	movs	r3, #128	@ 0x80
 800fd04:	049b      	lsls	r3, r3, #18
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d018      	beq.n	800fd3c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd0e:	4a17      	ldr	r2, [pc, #92]	@ (800fd6c <I2C_Master_ISR_IT+0x250>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d109      	bne.n	800fd28 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	685a      	ldr	r2, [r3, #4]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2180      	movs	r1, #128	@ 0x80
 800fd20:	01c9      	lsls	r1, r1, #7
 800fd22:	430a      	orrs	r2, r1
 800fd24:	605a      	str	r2, [r3, #4]
 800fd26:	e009      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	0018      	movs	r0, r3
 800fd2c:	f000 fcc2 	bl	80106b4 <I2C_ITMasterSeqCplt>
 800fd30:	e004      	b.n	800fd3c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2140      	movs	r1, #64	@ 0x40
 800fd36:	0018      	movs	r0, r3
 800fd38:	f000 ffa8 	bl	8010c8c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	2220      	movs	r2, #32
 800fd40:	4013      	ands	r3, r2
 800fd42:	d009      	beq.n	800fd58 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2220      	movs	r2, #32
 800fd48:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fd4a:	d005      	beq.n	800fd58 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800fd4c:	697a      	ldr	r2, [r7, #20]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	0011      	movs	r1, r2
 800fd52:	0018      	movs	r0, r3
 800fd54:	f000 fd54 	bl	8010800 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2240      	movs	r2, #64	@ 0x40
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	0018      	movs	r0, r3
 800fd64:	46bd      	mov	sp, r7
 800fd66:	b007      	add	sp, #28
 800fd68:	bd90      	pop	{r4, r7, pc}
 800fd6a:	46c0      	nop			@ (mov r8, r8)
 800fd6c:	ffff0000 	.word	0xffff0000

0800fd70 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd80:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2240      	movs	r2, #64	@ 0x40
 800fd8a:	5c9b      	ldrb	r3, [r3, r2]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d101      	bne.n	800fd94 <I2C_Slave_ISR_IT+0x24>
 800fd90:	2302      	movs	r3, #2
 800fd92:	e0e6      	b.n	800ff62 <I2C_Slave_ISR_IT+0x1f2>
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2240      	movs	r2, #64	@ 0x40
 800fd98:	2101      	movs	r1, #1
 800fd9a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	2220      	movs	r2, #32
 800fda0:	4013      	ands	r3, r2
 800fda2:	d009      	beq.n	800fdb8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2220      	movs	r2, #32
 800fda8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fdaa:	d005      	beq.n	800fdb8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800fdac:	693a      	ldr	r2, [r7, #16]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	0011      	movs	r1, r2
 800fdb2:	0018      	movs	r0, r3
 800fdb4:	f000 fdf2 	bl	801099c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	2210      	movs	r2, #16
 800fdbc:	4013      	ands	r3, r2
 800fdbe:	d052      	beq.n	800fe66 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2210      	movs	r2, #16
 800fdc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fdc6:	d04e      	beq.n	800fe66 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d12d      	bne.n	800fe2e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2241      	movs	r2, #65	@ 0x41
 800fdd6:	5c9b      	ldrb	r3, [r3, r2]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b28      	cmp	r3, #40	@ 0x28
 800fddc:	d10b      	bne.n	800fdf6 <I2C_Slave_ISR_IT+0x86>
 800fdde:	697a      	ldr	r2, [r7, #20]
 800fde0:	2380      	movs	r3, #128	@ 0x80
 800fde2:	049b      	lsls	r3, r3, #18
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d106      	bne.n	800fdf6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800fde8:	693a      	ldr	r2, [r7, #16]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	0011      	movs	r1, r2
 800fdee:	0018      	movs	r0, r3
 800fdf0:	f000 fef4 	bl	8010bdc <I2C_ITListenCplt>
 800fdf4:	e036      	b.n	800fe64 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	2241      	movs	r2, #65	@ 0x41
 800fdfa:	5c9b      	ldrb	r3, [r3, r2]
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	2b29      	cmp	r3, #41	@ 0x29
 800fe00:	d110      	bne.n	800fe24 <I2C_Slave_ISR_IT+0xb4>
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	4a59      	ldr	r2, [pc, #356]	@ (800ff6c <I2C_Slave_ISR_IT+0x1fc>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d00c      	beq.n	800fe24 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2210      	movs	r2, #16
 800fe10:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	0018      	movs	r0, r3
 800fe16:	f001 f864 	bl	8010ee2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	0018      	movs	r0, r3
 800fe1e:	f000 fc8b 	bl	8010738 <I2C_ITSlaveSeqCplt>
 800fe22:	e01f      	b.n	800fe64 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	2210      	movs	r2, #16
 800fe2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800fe2c:	e091      	b.n	800ff52 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2210      	movs	r2, #16
 800fe34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe3a:	2204      	movs	r2, #4
 800fe3c:	431a      	orrs	r2, r3
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d005      	beq.n	800fe54 <I2C_Slave_ISR_IT+0xe4>
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	2380      	movs	r3, #128	@ 0x80
 800fe4c:	045b      	lsls	r3, r3, #17
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d000      	beq.n	800fe54 <I2C_Slave_ISR_IT+0xe4>
 800fe52:	e07e      	b.n	800ff52 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	0011      	movs	r1, r2
 800fe5c:	0018      	movs	r0, r3
 800fe5e:	f000 ff15 	bl	8010c8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fe62:	e076      	b.n	800ff52 <I2C_Slave_ISR_IT+0x1e2>
 800fe64:	e075      	b.n	800ff52 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	2204      	movs	r2, #4
 800fe6a:	4013      	ands	r3, r2
 800fe6c:	d02f      	beq.n	800fece <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2204      	movs	r2, #4
 800fe72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fe74:	d02b      	beq.n	800fece <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d018      	beq.n	800feb2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe8a:	b2d2      	uxtb	r2, r2
 800fe8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe92:	1c5a      	adds	r2, r3, #1
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	3b01      	subs	r3, #1
 800feac:	b29a      	uxth	r2, r3
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d14c      	bne.n	800ff56 <I2C_Slave_ISR_IT+0x1e6>
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	4a2b      	ldr	r2, [pc, #172]	@ (800ff6c <I2C_Slave_ISR_IT+0x1fc>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d048      	beq.n	800ff56 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	0018      	movs	r0, r3
 800fec8:	f000 fc36 	bl	8010738 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fecc:	e043      	b.n	800ff56 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	2208      	movs	r2, #8
 800fed2:	4013      	ands	r3, r2
 800fed4:	d00a      	beq.n	800feec <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2208      	movs	r2, #8
 800feda:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800fedc:	d006      	beq.n	800feec <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fede:	693a      	ldr	r2, [r7, #16]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	0011      	movs	r1, r2
 800fee4:	0018      	movs	r0, r3
 800fee6:	f000 fb41 	bl	801056c <I2C_ITAddrCplt>
 800feea:	e035      	b.n	800ff58 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	2202      	movs	r2, #2
 800fef0:	4013      	ands	r3, r2
 800fef2:	d031      	beq.n	800ff58 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2202      	movs	r2, #2
 800fef8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fefa:	d02d      	beq.n	800ff58 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff00:	b29b      	uxth	r3, r3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d018      	beq.n	800ff38 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff0a:	781a      	ldrb	r2, [r3, #0]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff16:	1c5a      	adds	r2, r3, #1
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	3b01      	subs	r3, #1
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ff36:	e00f      	b.n	800ff58 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ff38:	697a      	ldr	r2, [r7, #20]
 800ff3a:	2380      	movs	r3, #128	@ 0x80
 800ff3c:	045b      	lsls	r3, r3, #17
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d002      	beq.n	800ff48 <I2C_Slave_ISR_IT+0x1d8>
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d107      	bne.n	800ff58 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	0018      	movs	r0, r3
 800ff4c:	f000 fbf4 	bl	8010738 <I2C_ITSlaveSeqCplt>
 800ff50:	e002      	b.n	800ff58 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800ff52:	46c0      	nop			@ (mov r8, r8)
 800ff54:	e000      	b.n	800ff58 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800ff56:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2240      	movs	r2, #64	@ 0x40
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ff60:	2300      	movs	r3, #0
}
 800ff62:	0018      	movs	r0, r3
 800ff64:	46bd      	mov	sp, r7
 800ff66:	b006      	add	sp, #24
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	46c0      	nop			@ (mov r8, r8)
 800ff6c:	ffff0000 	.word	0xffff0000

0800ff70 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800ff70:	b590      	push	{r4, r7, lr}
 800ff72:	b089      	sub	sp, #36	@ 0x24
 800ff74:	af02      	add	r7, sp, #8
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2240      	movs	r2, #64	@ 0x40
 800ff80:	5c9b      	ldrb	r3, [r3, r2]
 800ff82:	2b01      	cmp	r3, #1
 800ff84:	d101      	bne.n	800ff8a <I2C_Master_ISR_DMA+0x1a>
 800ff86:	2302      	movs	r3, #2
 800ff88:	e0e7      	b.n	801015a <I2C_Master_ISR_DMA+0x1ea>
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2240      	movs	r2, #64	@ 0x40
 800ff8e:	2101      	movs	r1, #1
 800ff90:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	2210      	movs	r2, #16
 800ff96:	4013      	ands	r3, r2
 800ff98:	d017      	beq.n	800ffca <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2210      	movs	r2, #16
 800ff9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800ffa0:	d013      	beq.n	800ffca <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2210      	movs	r2, #16
 800ffa8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffae:	2204      	movs	r2, #4
 800ffb0:	431a      	orrs	r2, r3
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2120      	movs	r1, #32
 800ffba:	0018      	movs	r0, r3
 800ffbc:	f001 fb18 	bl	80115f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	0018      	movs	r0, r3
 800ffc4:	f000 ff8d 	bl	8010ee2 <I2C_Flush_TXDR>
 800ffc8:	e0c2      	b.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2280      	movs	r2, #128	@ 0x80
 800ffce:	4013      	ands	r3, r2
 800ffd0:	d100      	bne.n	800ffd4 <I2C_Master_ISR_DMA+0x64>
 800ffd2:	e07c      	b.n	80100ce <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2240      	movs	r2, #64	@ 0x40
 800ffd8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ffda:	d100      	bne.n	800ffde <I2C_Master_ISR_DMA+0x6e>
 800ffdc:	e077      	b.n	80100ce <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2140      	movs	r1, #64	@ 0x40
 800ffea:	438a      	bics	r2, r1
 800ffec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d055      	beq.n	80100a4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	685b      	ldr	r3, [r3, #4]
 800fffe:	b29a      	uxth	r2, r3
 8010000:	2312      	movs	r3, #18
 8010002:	18fb      	adds	r3, r7, r3
 8010004:	0592      	lsls	r2, r2, #22
 8010006:	0d92      	lsrs	r2, r2, #22
 8010008:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801000e:	b29b      	uxth	r3, r3
 8010010:	2bff      	cmp	r3, #255	@ 0xff
 8010012:	d906      	bls.n	8010022 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	22ff      	movs	r2, #255	@ 0xff
 8010018:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801001a:	2380      	movs	r3, #128	@ 0x80
 801001c:	045b      	lsls	r3, r3, #17
 801001e:	617b      	str	r3, [r7, #20]
 8010020:	e010      	b.n	8010044 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010026:	b29a      	uxth	r2, r3
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010030:	4a4c      	ldr	r2, [pc, #304]	@ (8010164 <I2C_Master_ISR_DMA+0x1f4>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d003      	beq.n	801003e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003a:	617b      	str	r3, [r7, #20]
 801003c:	e002      	b.n	8010044 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801003e:	2380      	movs	r3, #128	@ 0x80
 8010040:	049b      	lsls	r3, r3, #18
 8010042:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010048:	b2da      	uxtb	r2, r3
 801004a:	697c      	ldr	r4, [r7, #20]
 801004c:	2312      	movs	r3, #18
 801004e:	18fb      	adds	r3, r7, r3
 8010050:	8819      	ldrh	r1, [r3, #0]
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	2300      	movs	r3, #0
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	0023      	movs	r3, r4
 801005a:	f001 fa8f 	bl	801157c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010062:	b29a      	uxth	r2, r3
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010068:	1ad3      	subs	r3, r2, r3
 801006a:	b29a      	uxth	r2, r3
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2241      	movs	r2, #65	@ 0x41
 8010074:	5c9b      	ldrb	r3, [r3, r2]
 8010076:	b2db      	uxtb	r3, r3
 8010078:	2b22      	cmp	r3, #34	@ 0x22
 801007a:	d109      	bne.n	8010090 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2180      	movs	r1, #128	@ 0x80
 8010088:	0209      	lsls	r1, r1, #8
 801008a:	430a      	orrs	r2, r1
 801008c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801008e:	e05f      	b.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	681a      	ldr	r2, [r3, #0]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	2180      	movs	r1, #128	@ 0x80
 801009c:	01c9      	lsls	r1, r1, #7
 801009e:	430a      	orrs	r2, r1
 80100a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80100a2:	e055      	b.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	685a      	ldr	r2, [r3, #4]
 80100aa:	2380      	movs	r3, #128	@ 0x80
 80100ac:	049b      	lsls	r3, r3, #18
 80100ae:	401a      	ands	r2, r3
 80100b0:	2380      	movs	r3, #128	@ 0x80
 80100b2:	049b      	lsls	r3, r3, #18
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d004      	beq.n	80100c2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	0018      	movs	r0, r3
 80100bc:	f000 fafa 	bl	80106b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80100c0:	e046      	b.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2140      	movs	r1, #64	@ 0x40
 80100c6:	0018      	movs	r0, r3
 80100c8:	f000 fde0 	bl	8010c8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80100cc:	e040      	b.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2240      	movs	r2, #64	@ 0x40
 80100d2:	4013      	ands	r3, r2
 80100d4:	d02c      	beq.n	8010130 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2240      	movs	r2, #64	@ 0x40
 80100da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80100dc:	d028      	beq.n	8010130 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d11d      	bne.n	8010124 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	2380      	movs	r3, #128	@ 0x80
 80100f0:	049b      	lsls	r3, r3, #18
 80100f2:	401a      	ands	r2, r3
 80100f4:	2380      	movs	r3, #128	@ 0x80
 80100f6:	049b      	lsls	r3, r3, #18
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d028      	beq.n	801014e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010100:	4a18      	ldr	r2, [pc, #96]	@ (8010164 <I2C_Master_ISR_DMA+0x1f4>)
 8010102:	4293      	cmp	r3, r2
 8010104:	d109      	bne.n	801011a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2180      	movs	r1, #128	@ 0x80
 8010112:	01c9      	lsls	r1, r1, #7
 8010114:	430a      	orrs	r2, r1
 8010116:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010118:	e019      	b.n	801014e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	0018      	movs	r0, r3
 801011e:	f000 fac9 	bl	80106b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8010122:	e014      	b.n	801014e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2140      	movs	r1, #64	@ 0x40
 8010128:	0018      	movs	r0, r3
 801012a:	f000 fdaf 	bl	8010c8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801012e:	e00e      	b.n	801014e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2220      	movs	r2, #32
 8010134:	4013      	ands	r3, r2
 8010136:	d00b      	beq.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2220      	movs	r2, #32
 801013c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801013e:	d007      	beq.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	0011      	movs	r1, r2
 8010146:	0018      	movs	r0, r3
 8010148:	f000 fb5a 	bl	8010800 <I2C_ITMasterCplt>
 801014c:	e000      	b.n	8010150 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801014e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2240      	movs	r2, #64	@ 0x40
 8010154:	2100      	movs	r1, #0
 8010156:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010158:	2300      	movs	r3, #0
}
 801015a:	0018      	movs	r0, r3
 801015c:	46bd      	mov	sp, r7
 801015e:	b007      	add	sp, #28
 8010160:	bd90      	pop	{r4, r7, pc}
 8010162:	46c0      	nop			@ (mov r8, r8)
 8010164:	ffff0000 	.word	0xffff0000

08010168 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8010168:	b590      	push	{r4, r7, lr}
 801016a:	b089      	sub	sp, #36	@ 0x24
 801016c:	af02      	add	r7, sp, #8
 801016e:	60f8      	str	r0, [r7, #12]
 8010170:	60b9      	str	r1, [r7, #8]
 8010172:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8010174:	4b88      	ldr	r3, [pc, #544]	@ (8010398 <I2C_Mem_ISR_DMA+0x230>)
 8010176:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2240      	movs	r2, #64	@ 0x40
 801017c:	5c9b      	ldrb	r3, [r3, r2]
 801017e:	2b01      	cmp	r3, #1
 8010180:	d101      	bne.n	8010186 <I2C_Mem_ISR_DMA+0x1e>
 8010182:	2302      	movs	r3, #2
 8010184:	e104      	b.n	8010390 <I2C_Mem_ISR_DMA+0x228>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2240      	movs	r2, #64	@ 0x40
 801018a:	2101      	movs	r1, #1
 801018c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	2210      	movs	r2, #16
 8010192:	4013      	ands	r3, r2
 8010194:	d017      	beq.n	80101c6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2210      	movs	r2, #16
 801019a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801019c:	d013      	beq.n	80101c6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	2210      	movs	r2, #16
 80101a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101aa:	2204      	movs	r2, #4
 80101ac:	431a      	orrs	r2, r3
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2120      	movs	r1, #32
 80101b6:	0018      	movs	r0, r3
 80101b8:	f001 fa1a 	bl	80115f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	0018      	movs	r0, r3
 80101c0:	f000 fe8f 	bl	8010ee2 <I2C_Flush_TXDR>
 80101c4:	e0df      	b.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80101c6:	68bb      	ldr	r3, [r7, #8]
 80101c8:	2202      	movs	r2, #2
 80101ca:	4013      	ands	r3, r2
 80101cc:	d00d      	beq.n	80101ea <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2202      	movs	r2, #2
 80101d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80101d4:	d009      	beq.n	80101ea <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80101de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2201      	movs	r2, #1
 80101e4:	4252      	negs	r2, r2
 80101e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80101e8:	e0cd      	b.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	2280      	movs	r2, #128	@ 0x80
 80101ee:	4013      	ands	r3, r2
 80101f0:	d05e      	beq.n	80102b0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2240      	movs	r2, #64	@ 0x40
 80101f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80101f8:	d05a      	beq.n	80102b0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2110      	movs	r1, #16
 80101fe:	0018      	movs	r0, r3
 8010200:	f001 f9f6 	bl	80115f0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010208:	b29b      	uxth	r3, r3
 801020a:	2b00      	cmp	r3, #0
 801020c:	d04a      	beq.n	80102a4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010212:	b29b      	uxth	r3, r3
 8010214:	2bff      	cmp	r3, #255	@ 0xff
 8010216:	d910      	bls.n	801023a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	22ff      	movs	r2, #255	@ 0xff
 801021c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010222:	b299      	uxth	r1, r3
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010228:	b2da      	uxtb	r2, r3
 801022a:	2380      	movs	r3, #128	@ 0x80
 801022c:	045b      	lsls	r3, r3, #17
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	2400      	movs	r4, #0
 8010232:	9400      	str	r4, [sp, #0]
 8010234:	f001 f9a2 	bl	801157c <I2C_TransferConfig>
 8010238:	e011      	b.n	801025e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801023e:	b29a      	uxth	r2, r3
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010248:	b299      	uxth	r1, r3
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801024e:	b2da      	uxtb	r2, r3
 8010250:	2380      	movs	r3, #128	@ 0x80
 8010252:	049b      	lsls	r3, r3, #18
 8010254:	68f8      	ldr	r0, [r7, #12]
 8010256:	2400      	movs	r4, #0
 8010258:	9400      	str	r4, [sp, #0]
 801025a:	f001 f98f 	bl	801157c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010262:	b29a      	uxth	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010268:	1ad3      	subs	r3, r2, r3
 801026a:	b29a      	uxth	r2, r3
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2241      	movs	r2, #65	@ 0x41
 8010274:	5c9b      	ldrb	r3, [r3, r2]
 8010276:	b2db      	uxtb	r3, r3
 8010278:	2b22      	cmp	r3, #34	@ 0x22
 801027a:	d109      	bne.n	8010290 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2180      	movs	r1, #128	@ 0x80
 8010288:	0209      	lsls	r1, r1, #8
 801028a:	430a      	orrs	r2, r1
 801028c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801028e:	e07a      	b.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2180      	movs	r1, #128	@ 0x80
 801029c:	01c9      	lsls	r1, r1, #7
 801029e:	430a      	orrs	r2, r1
 80102a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80102a2:	e070      	b.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	2140      	movs	r1, #64	@ 0x40
 80102a8:	0018      	movs	r0, r3
 80102aa:	f000 fcef 	bl	8010c8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80102ae:	e06a      	b.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	2240      	movs	r2, #64	@ 0x40
 80102b4:	4013      	ands	r3, r2
 80102b6:	d058      	beq.n	801036a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2240      	movs	r2, #64	@ 0x40
 80102bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80102be:	d054      	beq.n	801036a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2241      	movs	r2, #65	@ 0x41
 80102c4:	5c9b      	ldrb	r3, [r3, r2]
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	2b22      	cmp	r3, #34	@ 0x22
 80102ca:	d101      	bne.n	80102d0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80102cc:	4b33      	ldr	r3, [pc, #204]	@ (801039c <I2C_Mem_ISR_DMA+0x234>)
 80102ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	2bff      	cmp	r3, #255	@ 0xff
 80102d8:	d911      	bls.n	80102fe <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	22ff      	movs	r2, #255	@ 0xff
 80102de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80102e4:	b299      	uxth	r1, r3
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102ea:	b2da      	uxtb	r2, r3
 80102ec:	2380      	movs	r3, #128	@ 0x80
 80102ee:	045c      	lsls	r4, r3, #17
 80102f0:	68f8      	ldr	r0, [r7, #12]
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	0023      	movs	r3, r4
 80102f8:	f001 f940 	bl	801157c <I2C_TransferConfig>
 80102fc:	e012      	b.n	8010324 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010302:	b29a      	uxth	r2, r3
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801030c:	b299      	uxth	r1, r3
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010312:	b2da      	uxtb	r2, r3
 8010314:	2380      	movs	r3, #128	@ 0x80
 8010316:	049c      	lsls	r4, r3, #18
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	0023      	movs	r3, r4
 8010320:	f001 f92c 	bl	801157c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010328:	b29a      	uxth	r2, r3
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801032e:	1ad3      	subs	r3, r2, r3
 8010330:	b29a      	uxth	r2, r3
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2241      	movs	r2, #65	@ 0x41
 801033a:	5c9b      	ldrb	r3, [r3, r2]
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b22      	cmp	r3, #34	@ 0x22
 8010340:	d109      	bne.n	8010356 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	2180      	movs	r1, #128	@ 0x80
 801034e:	0209      	lsls	r1, r1, #8
 8010350:	430a      	orrs	r2, r1
 8010352:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010354:	e017      	b.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2180      	movs	r1, #128	@ 0x80
 8010362:	01c9      	lsls	r1, r1, #7
 8010364:	430a      	orrs	r2, r1
 8010366:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010368:	e00d      	b.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	2220      	movs	r2, #32
 801036e:	4013      	ands	r3, r2
 8010370:	d009      	beq.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2220      	movs	r2, #32
 8010376:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010378:	d005      	beq.n	8010386 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801037a:	68ba      	ldr	r2, [r7, #8]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	0011      	movs	r1, r2
 8010380:	0018      	movs	r0, r3
 8010382:	f000 fa3d 	bl	8010800 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2240      	movs	r2, #64	@ 0x40
 801038a:	2100      	movs	r1, #0
 801038c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	0018      	movs	r0, r3
 8010392:	46bd      	mov	sp, r7
 8010394:	b007      	add	sp, #28
 8010396:	bd90      	pop	{r4, r7, pc}
 8010398:	80002000 	.word	0x80002000
 801039c:	80002400 	.word	0x80002400

080103a0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b088      	sub	sp, #32
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	60f8      	str	r0, [r7, #12]
 80103a8:	60b9      	str	r1, [r7, #8]
 80103aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103b0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80103b2:	2300      	movs	r3, #0
 80103b4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2240      	movs	r2, #64	@ 0x40
 80103ba:	5c9b      	ldrb	r3, [r3, r2]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d101      	bne.n	80103c4 <I2C_Slave_ISR_DMA+0x24>
 80103c0:	2302      	movs	r3, #2
 80103c2:	e0cd      	b.n	8010560 <I2C_Slave_ISR_DMA+0x1c0>
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2240      	movs	r2, #64	@ 0x40
 80103c8:	2101      	movs	r1, #1
 80103ca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	2220      	movs	r2, #32
 80103d0:	4013      	ands	r3, r2
 80103d2:	d009      	beq.n	80103e8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2220      	movs	r2, #32
 80103d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80103da:	d005      	beq.n	80103e8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80103dc:	68ba      	ldr	r2, [r7, #8]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	0011      	movs	r1, r2
 80103e2:	0018      	movs	r0, r3
 80103e4:	f000 fada 	bl	801099c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	2210      	movs	r2, #16
 80103ec:	4013      	ands	r3, r2
 80103ee:	d100      	bne.n	80103f2 <I2C_Slave_ISR_DMA+0x52>
 80103f0:	e0a3      	b.n	801053a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2210      	movs	r2, #16
 80103f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80103f8:	d100      	bne.n	80103fc <I2C_Slave_ISR_DMA+0x5c>
 80103fa:	e09e      	b.n	801053a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	2380      	movs	r3, #128	@ 0x80
 8010400:	01db      	lsls	r3, r3, #7
 8010402:	4013      	ands	r3, r2
 8010404:	d105      	bne.n	8010412 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	2380      	movs	r3, #128	@ 0x80
 801040a:	021b      	lsls	r3, r3, #8
 801040c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801040e:	d100      	bne.n	8010412 <I2C_Slave_ISR_DMA+0x72>
 8010410:	e08c      	b.n	801052c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00c      	beq.n	8010434 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	2380      	movs	r3, #128	@ 0x80
 801041e:	021b      	lsls	r3, r3, #8
 8010420:	4013      	ands	r3, r2
 8010422:	d007      	beq.n	8010434 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d101      	bne.n	8010434 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010430:	2301      	movs	r3, #1
 8010432:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010438:	2b00      	cmp	r3, #0
 801043a:	d00c      	beq.n	8010456 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	2380      	movs	r3, #128	@ 0x80
 8010440:	01db      	lsls	r3, r3, #7
 8010442:	4013      	ands	r3, r2
 8010444:	d007      	beq.n	8010456 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d101      	bne.n	8010456 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010452:	2301      	movs	r3, #1
 8010454:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010456:	69fb      	ldr	r3, [r7, #28]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d12d      	bne.n	80104b8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2241      	movs	r2, #65	@ 0x41
 8010460:	5c9b      	ldrb	r3, [r3, r2]
 8010462:	b2db      	uxtb	r3, r3
 8010464:	2b28      	cmp	r3, #40	@ 0x28
 8010466:	d10b      	bne.n	8010480 <I2C_Slave_ISR_DMA+0xe0>
 8010468:	69ba      	ldr	r2, [r7, #24]
 801046a:	2380      	movs	r3, #128	@ 0x80
 801046c:	049b      	lsls	r3, r3, #18
 801046e:	429a      	cmp	r2, r3
 8010470:	d106      	bne.n	8010480 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010472:	68ba      	ldr	r2, [r7, #8]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	0011      	movs	r1, r2
 8010478:	0018      	movs	r0, r3
 801047a:	f000 fbaf 	bl	8010bdc <I2C_ITListenCplt>
 801047e:	e054      	b.n	801052a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2241      	movs	r2, #65	@ 0x41
 8010484:	5c9b      	ldrb	r3, [r3, r2]
 8010486:	b2db      	uxtb	r3, r3
 8010488:	2b29      	cmp	r3, #41	@ 0x29
 801048a:	d110      	bne.n	80104ae <I2C_Slave_ISR_DMA+0x10e>
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	4a36      	ldr	r2, [pc, #216]	@ (8010568 <I2C_Slave_ISR_DMA+0x1c8>)
 8010490:	4293      	cmp	r3, r2
 8010492:	d00c      	beq.n	80104ae <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2210      	movs	r2, #16
 801049a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	0018      	movs	r0, r3
 80104a0:	f000 fd1f 	bl	8010ee2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	0018      	movs	r0, r3
 80104a8:	f000 f946 	bl	8010738 <I2C_ITSlaveSeqCplt>
 80104ac:	e03d      	b.n	801052a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2210      	movs	r2, #16
 80104b4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80104b6:	e03e      	b.n	8010536 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2210      	movs	r2, #16
 80104be:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104c4:	2204      	movs	r2, #4
 80104c6:	431a      	orrs	r2, r3
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80104cc:	2317      	movs	r3, #23
 80104ce:	18fb      	adds	r3, r7, r3
 80104d0:	68fa      	ldr	r2, [r7, #12]
 80104d2:	2141      	movs	r1, #65	@ 0x41
 80104d4:	5c52      	ldrb	r2, [r2, r1]
 80104d6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d004      	beq.n	80104e8 <I2C_Slave_ISR_DMA+0x148>
 80104de:	69ba      	ldr	r2, [r7, #24]
 80104e0:	2380      	movs	r3, #128	@ 0x80
 80104e2:	045b      	lsls	r3, r3, #17
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d126      	bne.n	8010536 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80104e8:	2217      	movs	r2, #23
 80104ea:	18bb      	adds	r3, r7, r2
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	2b21      	cmp	r3, #33	@ 0x21
 80104f0:	d003      	beq.n	80104fa <I2C_Slave_ISR_DMA+0x15a>
 80104f2:	18bb      	adds	r3, r7, r2
 80104f4:	781b      	ldrb	r3, [r3, #0]
 80104f6:	2b29      	cmp	r3, #41	@ 0x29
 80104f8:	d103      	bne.n	8010502 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2221      	movs	r2, #33	@ 0x21
 80104fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8010500:	e00b      	b.n	801051a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010502:	2217      	movs	r2, #23
 8010504:	18bb      	adds	r3, r7, r2
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	2b22      	cmp	r3, #34	@ 0x22
 801050a:	d003      	beq.n	8010514 <I2C_Slave_ISR_DMA+0x174>
 801050c:	18bb      	adds	r3, r7, r2
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	2b2a      	cmp	r3, #42	@ 0x2a
 8010512:	d102      	bne.n	801051a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2222      	movs	r2, #34	@ 0x22
 8010518:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	0011      	movs	r1, r2
 8010522:	0018      	movs	r0, r3
 8010524:	f000 fbb2 	bl	8010c8c <I2C_ITError>
      if (treatdmanack == 1U)
 8010528:	e005      	b.n	8010536 <I2C_Slave_ISR_DMA+0x196>
 801052a:	e004      	b.n	8010536 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2210      	movs	r2, #16
 8010532:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010534:	e00f      	b.n	8010556 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010536:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010538:	e00d      	b.n	8010556 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	2208      	movs	r2, #8
 801053e:	4013      	ands	r3, r2
 8010540:	d009      	beq.n	8010556 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2208      	movs	r2, #8
 8010546:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010548:	d005      	beq.n	8010556 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801054a:	68ba      	ldr	r2, [r7, #8]
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	0011      	movs	r1, r2
 8010550:	0018      	movs	r0, r3
 8010552:	f000 f80b 	bl	801056c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2240      	movs	r2, #64	@ 0x40
 801055a:	2100      	movs	r1, #0
 801055c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	0018      	movs	r0, r3
 8010562:	46bd      	mov	sp, r7
 8010564:	b008      	add	sp, #32
 8010566:	bd80      	pop	{r7, pc}
 8010568:	ffff0000 	.word	0xffff0000

0801056c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801056c:	b5b0      	push	{r4, r5, r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
 8010574:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2241      	movs	r2, #65	@ 0x41
 801057a:	5c9b      	ldrb	r3, [r3, r2]
 801057c:	b2db      	uxtb	r3, r3
 801057e:	001a      	movs	r2, r3
 8010580:	2328      	movs	r3, #40	@ 0x28
 8010582:	4013      	ands	r3, r2
 8010584:	2b28      	cmp	r3, #40	@ 0x28
 8010586:	d000      	beq.n	801058a <I2C_ITAddrCplt+0x1e>
 8010588:	e088      	b.n	801069c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	699b      	ldr	r3, [r3, #24]
 8010590:	0c1b      	lsrs	r3, r3, #16
 8010592:	b2da      	uxtb	r2, r3
 8010594:	250f      	movs	r5, #15
 8010596:	197b      	adds	r3, r7, r5
 8010598:	2101      	movs	r1, #1
 801059a:	400a      	ands	r2, r1
 801059c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	699b      	ldr	r3, [r3, #24]
 80105a4:	0c1b      	lsrs	r3, r3, #16
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	200c      	movs	r0, #12
 80105aa:	183b      	adds	r3, r7, r0
 80105ac:	21fe      	movs	r1, #254	@ 0xfe
 80105ae:	400a      	ands	r2, r1
 80105b0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	240a      	movs	r4, #10
 80105bc:	193b      	adds	r3, r7, r4
 80105be:	0592      	lsls	r2, r2, #22
 80105c0:	0d92      	lsrs	r2, r2, #22
 80105c2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	b29a      	uxth	r2, r3
 80105cc:	2308      	movs	r3, #8
 80105ce:	18fb      	adds	r3, r7, r3
 80105d0:	21fe      	movs	r1, #254	@ 0xfe
 80105d2:	400a      	ands	r2, r1
 80105d4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	2b02      	cmp	r3, #2
 80105dc:	d148      	bne.n	8010670 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80105de:	0021      	movs	r1, r4
 80105e0:	187b      	adds	r3, r7, r1
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	09db      	lsrs	r3, r3, #7
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	183b      	adds	r3, r7, r0
 80105ea:	881b      	ldrh	r3, [r3, #0]
 80105ec:	4053      	eors	r3, r2
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	001a      	movs	r2, r3
 80105f2:	2306      	movs	r3, #6
 80105f4:	4013      	ands	r3, r2
 80105f6:	d120      	bne.n	801063a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80105f8:	183b      	adds	r3, r7, r0
 80105fa:	187a      	adds	r2, r7, r1
 80105fc:	8812      	ldrh	r2, [r2, #0]
 80105fe:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010604:	1c5a      	adds	r2, r3, #1
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801060e:	2b02      	cmp	r3, #2
 8010610:	d14c      	bne.n	80106ac <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2200      	movs	r2, #0
 8010616:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2208      	movs	r2, #8
 801061e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2240      	movs	r2, #64	@ 0x40
 8010624:	2100      	movs	r1, #0
 8010626:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010628:	183b      	adds	r3, r7, r0
 801062a:	881a      	ldrh	r2, [r3, #0]
 801062c:	197b      	adds	r3, r7, r5
 801062e:	7819      	ldrb	r1, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	0018      	movs	r0, r3
 8010634:	f7ff fa39 	bl	800faaa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010638:	e038      	b.n	80106ac <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801063a:	240c      	movs	r4, #12
 801063c:	193b      	adds	r3, r7, r4
 801063e:	2208      	movs	r2, #8
 8010640:	18ba      	adds	r2, r7, r2
 8010642:	8812      	ldrh	r2, [r2, #0]
 8010644:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010646:	2380      	movs	r3, #128	@ 0x80
 8010648:	021a      	lsls	r2, r3, #8
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	0011      	movs	r1, r2
 801064e:	0018      	movs	r0, r3
 8010650:	f001 f85c 	bl	801170c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2240      	movs	r2, #64	@ 0x40
 8010658:	2100      	movs	r1, #0
 801065a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801065c:	193b      	adds	r3, r7, r4
 801065e:	881a      	ldrh	r2, [r3, #0]
 8010660:	230f      	movs	r3, #15
 8010662:	18fb      	adds	r3, r7, r3
 8010664:	7819      	ldrb	r1, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	0018      	movs	r0, r3
 801066a:	f7ff fa1e 	bl	800faaa <HAL_I2C_AddrCallback>
}
 801066e:	e01d      	b.n	80106ac <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010670:	2380      	movs	r3, #128	@ 0x80
 8010672:	021a      	lsls	r2, r3, #8
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	0011      	movs	r1, r2
 8010678:	0018      	movs	r0, r3
 801067a:	f001 f847 	bl	801170c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2240      	movs	r2, #64	@ 0x40
 8010682:	2100      	movs	r1, #0
 8010684:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010686:	230c      	movs	r3, #12
 8010688:	18fb      	adds	r3, r7, r3
 801068a:	881a      	ldrh	r2, [r3, #0]
 801068c:	230f      	movs	r3, #15
 801068e:	18fb      	adds	r3, r7, r3
 8010690:	7819      	ldrb	r1, [r3, #0]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	0018      	movs	r0, r3
 8010696:	f7ff fa08 	bl	800faaa <HAL_I2C_AddrCallback>
}
 801069a:	e007      	b.n	80106ac <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2208      	movs	r2, #8
 80106a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2240      	movs	r2, #64	@ 0x40
 80106a8:	2100      	movs	r1, #0
 80106aa:	5499      	strb	r1, [r3, r2]
}
 80106ac:	46c0      	nop			@ (mov r8, r8)
 80106ae:	46bd      	mov	sp, r7
 80106b0:	b004      	add	sp, #16
 80106b2:	bdb0      	pop	{r4, r5, r7, pc}

080106b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2242      	movs	r2, #66	@ 0x42
 80106c0:	2100      	movs	r1, #0
 80106c2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2241      	movs	r2, #65	@ 0x41
 80106c8:	5c9b      	ldrb	r3, [r3, r2]
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	2b21      	cmp	r3, #33	@ 0x21
 80106ce:	d117      	bne.n	8010700 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2241      	movs	r2, #65	@ 0x41
 80106d4:	2120      	movs	r1, #32
 80106d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2211      	movs	r2, #17
 80106dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2101      	movs	r1, #1
 80106e8:	0018      	movs	r0, r3
 80106ea:	f001 f80f 	bl	801170c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2240      	movs	r2, #64	@ 0x40
 80106f2:	2100      	movs	r1, #0
 80106f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	0018      	movs	r0, r3
 80106fa:	f7ff f9b6 	bl	800fa6a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80106fe:	e016      	b.n	801072e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2241      	movs	r2, #65	@ 0x41
 8010704:	2120      	movs	r1, #32
 8010706:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2212      	movs	r2, #18
 801070c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2102      	movs	r1, #2
 8010718:	0018      	movs	r0, r3
 801071a:	f000 fff7 	bl	801170c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2240      	movs	r2, #64	@ 0x40
 8010722:	2100      	movs	r1, #0
 8010724:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	0018      	movs	r0, r3
 801072a:	f7ff f9a6 	bl	800fa7a <HAL_I2C_MasterRxCpltCallback>
}
 801072e:	46c0      	nop			@ (mov r8, r8)
 8010730:	46bd      	mov	sp, r7
 8010732:	b002      	add	sp, #8
 8010734:	bd80      	pop	{r7, pc}
	...

08010738 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2242      	movs	r2, #66	@ 0x42
 801074c:	2100      	movs	r1, #0
 801074e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	2380      	movs	r3, #128	@ 0x80
 8010754:	01db      	lsls	r3, r3, #7
 8010756:	4013      	ands	r3, r2
 8010758:	d008      	beq.n	801076c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	681a      	ldr	r2, [r3, #0]
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4924      	ldr	r1, [pc, #144]	@ (80107f8 <I2C_ITSlaveSeqCplt+0xc0>)
 8010766:	400a      	ands	r2, r1
 8010768:	601a      	str	r2, [r3, #0]
 801076a:	e00c      	b.n	8010786 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	2380      	movs	r3, #128	@ 0x80
 8010770:	021b      	lsls	r3, r3, #8
 8010772:	4013      	ands	r3, r2
 8010774:	d007      	beq.n	8010786 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	491e      	ldr	r1, [pc, #120]	@ (80107fc <I2C_ITSlaveSeqCplt+0xc4>)
 8010782:	400a      	ands	r2, r1
 8010784:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2241      	movs	r2, #65	@ 0x41
 801078a:	5c9b      	ldrb	r3, [r3, r2]
 801078c:	b2db      	uxtb	r3, r3
 801078e:	2b29      	cmp	r3, #41	@ 0x29
 8010790:	d114      	bne.n	80107bc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2241      	movs	r2, #65	@ 0x41
 8010796:	2128      	movs	r1, #40	@ 0x28
 8010798:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2221      	movs	r2, #33	@ 0x21
 801079e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2101      	movs	r1, #1
 80107a4:	0018      	movs	r0, r3
 80107a6:	f000 ffb1 	bl	801170c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2240      	movs	r2, #64	@ 0x40
 80107ae:	2100      	movs	r1, #0
 80107b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	0018      	movs	r0, r3
 80107b6:	f7ff f968 	bl	800fa8a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80107ba:	e019      	b.n	80107f0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2241      	movs	r2, #65	@ 0x41
 80107c0:	5c9b      	ldrb	r3, [r3, r2]
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80107c6:	d113      	bne.n	80107f0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2241      	movs	r2, #65	@ 0x41
 80107cc:	2128      	movs	r1, #40	@ 0x28
 80107ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2222      	movs	r2, #34	@ 0x22
 80107d4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2102      	movs	r1, #2
 80107da:	0018      	movs	r0, r3
 80107dc:	f000 ff96 	bl	801170c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2240      	movs	r2, #64	@ 0x40
 80107e4:	2100      	movs	r1, #0
 80107e6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	0018      	movs	r0, r3
 80107ec:	f7ff f955 	bl	800fa9a <HAL_I2C_SlaveRxCpltCallback>
}
 80107f0:	46c0      	nop			@ (mov r8, r8)
 80107f2:	46bd      	mov	sp, r7
 80107f4:	b004      	add	sp, #16
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	ffffbfff 	.word	0xffffbfff
 80107fc:	ffff7fff 	.word	0xffff7fff

08010800 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2220      	movs	r2, #32
 8010814:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2241      	movs	r2, #65	@ 0x41
 801081a:	5c9b      	ldrb	r3, [r3, r2]
 801081c:	b2db      	uxtb	r3, r3
 801081e:	2b21      	cmp	r3, #33	@ 0x21
 8010820:	d108      	bne.n	8010834 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2101      	movs	r1, #1
 8010826:	0018      	movs	r0, r3
 8010828:	f000 ff70 	bl	801170c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2211      	movs	r2, #17
 8010830:	631a      	str	r2, [r3, #48]	@ 0x30
 8010832:	e00d      	b.n	8010850 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2241      	movs	r2, #65	@ 0x41
 8010838:	5c9b      	ldrb	r3, [r3, r2]
 801083a:	b2db      	uxtb	r3, r3
 801083c:	2b22      	cmp	r3, #34	@ 0x22
 801083e:	d107      	bne.n	8010850 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2102      	movs	r1, #2
 8010844:	0018      	movs	r0, r3
 8010846:	f000 ff61 	bl	801170c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2212      	movs	r2, #18
 801084e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	685a      	ldr	r2, [r3, #4]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	494e      	ldr	r1, [pc, #312]	@ (8010994 <I2C_ITMasterCplt+0x194>)
 801085c:	400a      	ands	r2, r1
 801085e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4a4b      	ldr	r2, [pc, #300]	@ (8010998 <I2C_ITMasterCplt+0x198>)
 801086a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	2210      	movs	r2, #16
 8010870:	4013      	ands	r3, r2
 8010872:	d009      	beq.n	8010888 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2210      	movs	r2, #16
 801087a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010880:	2204      	movs	r2, #4
 8010882:	431a      	orrs	r2, r3
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2241      	movs	r2, #65	@ 0x41
 801088c:	5c9b      	ldrb	r3, [r3, r2]
 801088e:	b2db      	uxtb	r3, r3
 8010890:	2b60      	cmp	r3, #96	@ 0x60
 8010892:	d109      	bne.n	80108a8 <I2C_ITMasterCplt+0xa8>
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	2204      	movs	r2, #4
 8010898:	4013      	ands	r3, r2
 801089a:	d005      	beq.n	80108a8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80108a6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	0018      	movs	r0, r3
 80108ac:	f000 fb19 	bl	8010ee2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108b4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2241      	movs	r2, #65	@ 0x41
 80108ba:	5c9b      	ldrb	r3, [r3, r2]
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	2b60      	cmp	r3, #96	@ 0x60
 80108c0:	d002      	beq.n	80108c8 <I2C_ITMasterCplt+0xc8>
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d007      	beq.n	80108d8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	0011      	movs	r1, r2
 80108d0:	0018      	movs	r0, r3
 80108d2:	f000 f9db 	bl	8010c8c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80108d6:	e058      	b.n	801098a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2241      	movs	r2, #65	@ 0x41
 80108dc:	5c9b      	ldrb	r3, [r3, r2]
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b21      	cmp	r3, #33	@ 0x21
 80108e2:	d126      	bne.n	8010932 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2241      	movs	r2, #65	@ 0x41
 80108e8:	2120      	movs	r1, #32
 80108ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2242      	movs	r2, #66	@ 0x42
 80108f6:	5c9b      	ldrb	r3, [r3, r2]
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	2b40      	cmp	r3, #64	@ 0x40
 80108fc:	d10c      	bne.n	8010918 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2242      	movs	r2, #66	@ 0x42
 8010902:	2100      	movs	r1, #0
 8010904:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2240      	movs	r2, #64	@ 0x40
 801090a:	2100      	movs	r1, #0
 801090c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	0018      	movs	r0, r3
 8010912:	f7ff f8e2 	bl	800fada <HAL_I2C_MemTxCpltCallback>
}
 8010916:	e038      	b.n	801098a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2242      	movs	r2, #66	@ 0x42
 801091c:	2100      	movs	r1, #0
 801091e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2240      	movs	r2, #64	@ 0x40
 8010924:	2100      	movs	r1, #0
 8010926:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	0018      	movs	r0, r3
 801092c:	f7ff f89d 	bl	800fa6a <HAL_I2C_MasterTxCpltCallback>
}
 8010930:	e02b      	b.n	801098a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2241      	movs	r2, #65	@ 0x41
 8010936:	5c9b      	ldrb	r3, [r3, r2]
 8010938:	b2db      	uxtb	r3, r3
 801093a:	2b22      	cmp	r3, #34	@ 0x22
 801093c:	d125      	bne.n	801098a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2241      	movs	r2, #65	@ 0x41
 8010942:	2120      	movs	r1, #32
 8010944:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2242      	movs	r2, #66	@ 0x42
 8010950:	5c9b      	ldrb	r3, [r3, r2]
 8010952:	b2db      	uxtb	r3, r3
 8010954:	2b40      	cmp	r3, #64	@ 0x40
 8010956:	d10c      	bne.n	8010972 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2242      	movs	r2, #66	@ 0x42
 801095c:	2100      	movs	r1, #0
 801095e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2240      	movs	r2, #64	@ 0x40
 8010964:	2100      	movs	r1, #0
 8010966:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	0018      	movs	r0, r3
 801096c:	f7ff f8bd 	bl	800faea <HAL_I2C_MemRxCpltCallback>
}
 8010970:	e00b      	b.n	801098a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2242      	movs	r2, #66	@ 0x42
 8010976:	2100      	movs	r1, #0
 8010978:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2240      	movs	r2, #64	@ 0x40
 801097e:	2100      	movs	r1, #0
 8010980:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	0018      	movs	r0, r3
 8010986:	f7ff f878 	bl	800fa7a <HAL_I2C_MasterRxCpltCallback>
}
 801098a:	46c0      	nop			@ (mov r8, r8)
 801098c:	46bd      	mov	sp, r7
 801098e:	b006      	add	sp, #24
 8010990:	bd80      	pop	{r7, pc}
 8010992:	46c0      	nop			@ (mov r8, r8)
 8010994:	fe00e800 	.word	0xfe00e800
 8010998:	ffff0000 	.word	0xffff0000

0801099c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b086      	sub	sp, #24
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80109b2:	200f      	movs	r0, #15
 80109b4:	183b      	adds	r3, r7, r0
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	2141      	movs	r1, #65	@ 0x41
 80109ba:	5c52      	ldrb	r2, [r2, r1]
 80109bc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2220      	movs	r2, #32
 80109c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80109c6:	183b      	adds	r3, r7, r0
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	2b21      	cmp	r3, #33	@ 0x21
 80109cc:	d003      	beq.n	80109d6 <I2C_ITSlaveCplt+0x3a>
 80109ce:	183b      	adds	r3, r7, r0
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	2b29      	cmp	r3, #41	@ 0x29
 80109d4:	d109      	bne.n	80109ea <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80109d6:	4a7b      	ldr	r2, [pc, #492]	@ (8010bc4 <I2C_ITSlaveCplt+0x228>)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	0011      	movs	r1, r2
 80109dc:	0018      	movs	r0, r3
 80109de:	f000 fe95 	bl	801170c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2221      	movs	r2, #33	@ 0x21
 80109e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80109e8:	e011      	b.n	8010a0e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80109ea:	220f      	movs	r2, #15
 80109ec:	18bb      	adds	r3, r7, r2
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	2b22      	cmp	r3, #34	@ 0x22
 80109f2:	d003      	beq.n	80109fc <I2C_ITSlaveCplt+0x60>
 80109f4:	18bb      	adds	r3, r7, r2
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80109fa:	d108      	bne.n	8010a0e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80109fc:	4a72      	ldr	r2, [pc, #456]	@ (8010bc8 <I2C_ITSlaveCplt+0x22c>)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	0011      	movs	r1, r2
 8010a02:	0018      	movs	r0, r3
 8010a04:	f000 fe82 	bl	801170c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2222      	movs	r2, #34	@ 0x22
 8010a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2180      	movs	r1, #128	@ 0x80
 8010a1a:	0209      	lsls	r1, r1, #8
 8010a1c:	430a      	orrs	r2, r1
 8010a1e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	685a      	ldr	r2, [r3, #4]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	4968      	ldr	r1, [pc, #416]	@ (8010bcc <I2C_ITSlaveCplt+0x230>)
 8010a2c:	400a      	ands	r2, r1
 8010a2e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	0018      	movs	r0, r3
 8010a34:	f000 fa55 	bl	8010ee2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010a38:	693a      	ldr	r2, [r7, #16]
 8010a3a:	2380      	movs	r3, #128	@ 0x80
 8010a3c:	01db      	lsls	r3, r3, #7
 8010a3e:	4013      	ands	r3, r2
 8010a40:	d013      	beq.n	8010a6a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	4960      	ldr	r1, [pc, #384]	@ (8010bd0 <I2C_ITSlaveCplt+0x234>)
 8010a4e:	400a      	ands	r2, r1
 8010a50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d01f      	beq.n	8010a9a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	685b      	ldr	r3, [r3, #4]
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010a68:	e017      	b.n	8010a9a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	2380      	movs	r3, #128	@ 0x80
 8010a6e:	021b      	lsls	r3, r3, #8
 8010a70:	4013      	ands	r3, r2
 8010a72:	d012      	beq.n	8010a9a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4955      	ldr	r1, [pc, #340]	@ (8010bd4 <I2C_ITSlaveCplt+0x238>)
 8010a80:	400a      	ands	r2, r1
 8010a82:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d006      	beq.n	8010a9a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	b29a      	uxth	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	2204      	movs	r2, #4
 8010a9e:	4013      	ands	r3, r2
 8010aa0:	d020      	beq.n	8010ae4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	2204      	movs	r2, #4
 8010aa6:	4393      	bics	r3, r2
 8010aa8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ab4:	b2d2      	uxtb	r2, r2
 8010ab6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010abc:	1c5a      	adds	r2, r3, #1
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d00c      	beq.n	8010ae4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	3b01      	subs	r3, #1
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ae8:	b29b      	uxth	r3, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d005      	beq.n	8010afa <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010af2:	2204      	movs	r2, #4
 8010af4:	431a      	orrs	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2242      	movs	r2, #66	@ 0x42
 8010afe:	2100      	movs	r1, #0
 8010b00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	2200      	movs	r2, #0
 8010b06:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d013      	beq.n	8010b38 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	0011      	movs	r1, r2
 8010b18:	0018      	movs	r0, r3
 8010b1a:	f000 f8b7 	bl	8010c8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2241      	movs	r2, #65	@ 0x41
 8010b22:	5c9b      	ldrb	r3, [r3, r2]
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	2b28      	cmp	r3, #40	@ 0x28
 8010b28:	d147      	bne.n	8010bba <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010b2a:	697a      	ldr	r2, [r7, #20]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	0011      	movs	r1, r2
 8010b30:	0018      	movs	r0, r3
 8010b32:	f000 f853 	bl	8010bdc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010b36:	e040      	b.n	8010bba <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b3c:	4a26      	ldr	r2, [pc, #152]	@ (8010bd8 <I2C_ITSlaveCplt+0x23c>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d016      	beq.n	8010b70 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	0018      	movs	r0, r3
 8010b46:	f7ff fdf7 	bl	8010738 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4a22      	ldr	r2, [pc, #136]	@ (8010bd8 <I2C_ITSlaveCplt+0x23c>)
 8010b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2241      	movs	r2, #65	@ 0x41
 8010b54:	2120      	movs	r1, #32
 8010b56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2240      	movs	r2, #64	@ 0x40
 8010b62:	2100      	movs	r1, #0
 8010b64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	0018      	movs	r0, r3
 8010b6a:	f7fe ffae 	bl	800faca <HAL_I2C_ListenCpltCallback>
}
 8010b6e:	e024      	b.n	8010bba <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2241      	movs	r2, #65	@ 0x41
 8010b74:	5c9b      	ldrb	r3, [r3, r2]
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	2b22      	cmp	r3, #34	@ 0x22
 8010b7a:	d10f      	bne.n	8010b9c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2241      	movs	r2, #65	@ 0x41
 8010b80:	2120      	movs	r1, #32
 8010b82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2200      	movs	r2, #0
 8010b88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2240      	movs	r2, #64	@ 0x40
 8010b8e:	2100      	movs	r1, #0
 8010b90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	0018      	movs	r0, r3
 8010b96:	f7fe ff80 	bl	800fa9a <HAL_I2C_SlaveRxCpltCallback>
}
 8010b9a:	e00e      	b.n	8010bba <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2241      	movs	r2, #65	@ 0x41
 8010ba0:	2120      	movs	r1, #32
 8010ba2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2240      	movs	r2, #64	@ 0x40
 8010bae:	2100      	movs	r1, #0
 8010bb0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	0018      	movs	r0, r3
 8010bb6:	f7fe ff68 	bl	800fa8a <HAL_I2C_SlaveTxCpltCallback>
}
 8010bba:	46c0      	nop			@ (mov r8, r8)
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	b006      	add	sp, #24
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	46c0      	nop			@ (mov r8, r8)
 8010bc4:	00008001 	.word	0x00008001
 8010bc8:	00008002 	.word	0x00008002
 8010bcc:	fe00e800 	.word	0xfe00e800
 8010bd0:	ffffbfff 	.word	0xffffbfff
 8010bd4:	ffff7fff 	.word	0xffff7fff
 8010bd8:	ffff0000 	.word	0xffff0000

08010bdc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	4a26      	ldr	r2, [pc, #152]	@ (8010c84 <I2C_ITListenCplt+0xa8>)
 8010bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2241      	movs	r2, #65	@ 0x41
 8010bf6:	2120      	movs	r1, #32
 8010bf8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2242      	movs	r2, #66	@ 0x42
 8010bfe:	2100      	movs	r1, #0
 8010c00:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	d022      	beq.n	8010c56 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c1a:	b2d2      	uxtb	r2, r2
 8010c1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c22:	1c5a      	adds	r2, r3, #1
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d012      	beq.n	8010c56 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010c34:	3b01      	subs	r3, #1
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	3b01      	subs	r3, #1
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c4e:	2204      	movs	r2, #4
 8010c50:	431a      	orrs	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010c56:	4a0c      	ldr	r2, [pc, #48]	@ (8010c88 <I2C_ITListenCplt+0xac>)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	0011      	movs	r1, r2
 8010c5c:	0018      	movs	r0, r3
 8010c5e:	f000 fd55 	bl	801170c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2210      	movs	r2, #16
 8010c68:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2240      	movs	r2, #64	@ 0x40
 8010c6e:	2100      	movs	r1, #0
 8010c70:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	0018      	movs	r0, r3
 8010c76:	f7fe ff28 	bl	800faca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010c7a:	46c0      	nop			@ (mov r8, r8)
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	b002      	add	sp, #8
 8010c80:	bd80      	pop	{r7, pc}
 8010c82:	46c0      	nop			@ (mov r8, r8)
 8010c84:	ffff0000 	.word	0xffff0000
 8010c88:	00008003 	.word	0x00008003

08010c8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010c96:	200f      	movs	r0, #15
 8010c98:	183b      	adds	r3, r7, r0
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	2141      	movs	r1, #65	@ 0x41
 8010c9e:	5c52      	ldrb	r2, [r2, r1]
 8010ca0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2242      	movs	r2, #66	@ 0x42
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a72      	ldr	r2, [pc, #456]	@ (8010e78 <I2C_ITError+0x1ec>)
 8010cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	431a      	orrs	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010cc2:	183b      	adds	r3, r7, r0
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	2b28      	cmp	r3, #40	@ 0x28
 8010cc8:	d007      	beq.n	8010cda <I2C_ITError+0x4e>
 8010cca:	183b      	adds	r3, r7, r0
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	2b29      	cmp	r3, #41	@ 0x29
 8010cd0:	d003      	beq.n	8010cda <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010cd2:	183b      	adds	r3, r7, r0
 8010cd4:	781b      	ldrb	r3, [r3, #0]
 8010cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010cd8:	d10c      	bne.n	8010cf4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2103      	movs	r1, #3
 8010cde:	0018      	movs	r0, r3
 8010ce0:	f000 fd14 	bl	801170c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2241      	movs	r2, #65	@ 0x41
 8010ce8:	2128      	movs	r1, #40	@ 0x28
 8010cea:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4a63      	ldr	r2, [pc, #396]	@ (8010e7c <I2C_ITError+0x1f0>)
 8010cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8010cf2:	e032      	b.n	8010d5a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010cf4:	4a62      	ldr	r2, [pc, #392]	@ (8010e80 <I2C_ITError+0x1f4>)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	0011      	movs	r1, r2
 8010cfa:	0018      	movs	r0, r3
 8010cfc:	f000 fd06 	bl	801170c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	0018      	movs	r0, r3
 8010d04:	f000 f8ed 	bl	8010ee2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2241      	movs	r2, #65	@ 0x41
 8010d0c:	5c9b      	ldrb	r3, [r3, r2]
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	2b60      	cmp	r3, #96	@ 0x60
 8010d12:	d01f      	beq.n	8010d54 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2241      	movs	r2, #65	@ 0x41
 8010d18:	2120      	movs	r1, #32
 8010d1a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	699b      	ldr	r3, [r3, #24]
 8010d22:	2220      	movs	r2, #32
 8010d24:	4013      	ands	r3, r2
 8010d26:	2b20      	cmp	r3, #32
 8010d28:	d114      	bne.n	8010d54 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	699b      	ldr	r3, [r3, #24]
 8010d30:	2210      	movs	r2, #16
 8010d32:	4013      	ands	r3, r2
 8010d34:	2b10      	cmp	r3, #16
 8010d36:	d109      	bne.n	8010d4c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2210      	movs	r2, #16
 8010d3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d44:	2204      	movs	r2, #4
 8010d46:	431a      	orrs	r2, r3
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2220      	movs	r2, #32
 8010d52:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d03b      	beq.n	8010de0 <I2C_ITError+0x154>
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	2b11      	cmp	r3, #17
 8010d6c:	d002      	beq.n	8010d74 <I2C_ITError+0xe8>
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2b21      	cmp	r3, #33	@ 0x21
 8010d72:	d135      	bne.n	8010de0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	681a      	ldr	r2, [r3, #0]
 8010d7a:	2380      	movs	r3, #128	@ 0x80
 8010d7c:	01db      	lsls	r3, r3, #7
 8010d7e:	401a      	ands	r2, r3
 8010d80:	2380      	movs	r3, #128	@ 0x80
 8010d82:	01db      	lsls	r3, r3, #7
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d107      	bne.n	8010d98 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	681a      	ldr	r2, [r3, #0]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	493c      	ldr	r1, [pc, #240]	@ (8010e84 <I2C_ITError+0x1f8>)
 8010d94:	400a      	ands	r2, r1
 8010d96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d9c:	0018      	movs	r0, r3
 8010d9e:	f7fd fd7e 	bl	800e89e <HAL_DMA_GetState>
 8010da2:	0003      	movs	r3, r0
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d016      	beq.n	8010dd6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dac:	4a36      	ldr	r2, [pc, #216]	@ (8010e88 <I2C_ITError+0x1fc>)
 8010dae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2240      	movs	r2, #64	@ 0x40
 8010db4:	2100      	movs	r1, #0
 8010db6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dbc:	0018      	movs	r0, r3
 8010dbe:	f7fd fc79 	bl	800e6b4 <HAL_DMA_Abort_IT>
 8010dc2:	1e03      	subs	r3, r0, #0
 8010dc4:	d051      	beq.n	8010e6a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dd0:	0018      	movs	r0, r3
 8010dd2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010dd4:	e049      	b.n	8010e6a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	0018      	movs	r0, r3
 8010dda:	f000 f859 	bl	8010e90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010dde:	e044      	b.n	8010e6a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d03b      	beq.n	8010e60 <I2C_ITError+0x1d4>
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	2b12      	cmp	r3, #18
 8010dec:	d002      	beq.n	8010df4 <I2C_ITError+0x168>
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	2b22      	cmp	r3, #34	@ 0x22
 8010df2:	d135      	bne.n	8010e60 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	2380      	movs	r3, #128	@ 0x80
 8010dfc:	021b      	lsls	r3, r3, #8
 8010dfe:	401a      	ands	r2, r3
 8010e00:	2380      	movs	r3, #128	@ 0x80
 8010e02:	021b      	lsls	r3, r3, #8
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d107      	bne.n	8010e18 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	681a      	ldr	r2, [r3, #0]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	491e      	ldr	r1, [pc, #120]	@ (8010e8c <I2C_ITError+0x200>)
 8010e14:	400a      	ands	r2, r1
 8010e16:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e1c:	0018      	movs	r0, r3
 8010e1e:	f7fd fd3e 	bl	800e89e <HAL_DMA_GetState>
 8010e22:	0003      	movs	r3, r0
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d016      	beq.n	8010e56 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e2c:	4a16      	ldr	r2, [pc, #88]	@ (8010e88 <I2C_ITError+0x1fc>)
 8010e2e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2240      	movs	r2, #64	@ 0x40
 8010e34:	2100      	movs	r1, #0
 8010e36:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e3c:	0018      	movs	r0, r3
 8010e3e:	f7fd fc39 	bl	800e6b4 <HAL_DMA_Abort_IT>
 8010e42:	1e03      	subs	r3, r0, #0
 8010e44:	d013      	beq.n	8010e6e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e50:	0018      	movs	r0, r3
 8010e52:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010e54:	e00b      	b.n	8010e6e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	0018      	movs	r0, r3
 8010e5a:	f000 f819 	bl	8010e90 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010e5e:	e006      	b.n	8010e6e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	0018      	movs	r0, r3
 8010e64:	f000 f814 	bl	8010e90 <I2C_TreatErrorCallback>
  }
}
 8010e68:	e002      	b.n	8010e70 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010e6a:	46c0      	nop			@ (mov r8, r8)
 8010e6c:	e000      	b.n	8010e70 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010e6e:	46c0      	nop			@ (mov r8, r8)
}
 8010e70:	46c0      	nop			@ (mov r8, r8)
 8010e72:	46bd      	mov	sp, r7
 8010e74:	b004      	add	sp, #16
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	ffff0000 	.word	0xffff0000
 8010e7c:	0800fd71 	.word	0x0800fd71
 8010e80:	00008003 	.word	0x00008003
 8010e84:	ffffbfff 	.word	0xffffbfff
 8010e88:	0801109b 	.word	0x0801109b
 8010e8c:	ffff7fff 	.word	0xffff7fff

08010e90 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2241      	movs	r2, #65	@ 0x41
 8010e9c:	5c9b      	ldrb	r3, [r3, r2]
 8010e9e:	b2db      	uxtb	r3, r3
 8010ea0:	2b60      	cmp	r3, #96	@ 0x60
 8010ea2:	d10f      	bne.n	8010ec4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2241      	movs	r2, #65	@ 0x41
 8010ea8:	2120      	movs	r1, #32
 8010eaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2200      	movs	r2, #0
 8010eb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2240      	movs	r2, #64	@ 0x40
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	0018      	movs	r0, r3
 8010ebe:	f7fe fe24 	bl	800fb0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010ec2:	e00a      	b.n	8010eda <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2240      	movs	r2, #64	@ 0x40
 8010ece:	2100      	movs	r1, #0
 8010ed0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	0018      	movs	r0, r3
 8010ed6:	f7fe fe10 	bl	800fafa <HAL_I2C_ErrorCallback>
}
 8010eda:	46c0      	nop			@ (mov r8, r8)
 8010edc:	46bd      	mov	sp, r7
 8010ede:	b002      	add	sp, #8
 8010ee0:	bd80      	pop	{r7, pc}

08010ee2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	b082      	sub	sp, #8
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	699b      	ldr	r3, [r3, #24]
 8010ef0:	2202      	movs	r2, #2
 8010ef2:	4013      	ands	r3, r2
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d103      	bne.n	8010f00 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	2200      	movs	r2, #0
 8010efe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	2201      	movs	r2, #1
 8010f08:	4013      	ands	r3, r2
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d007      	beq.n	8010f1e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	699a      	ldr	r2, [r3, #24]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	2101      	movs	r1, #1
 8010f1a:	430a      	orrs	r2, r1
 8010f1c:	619a      	str	r2, [r3, #24]
  }
}
 8010f1e:	46c0      	nop			@ (mov r8, r8)
 8010f20:	46bd      	mov	sp, r7
 8010f22:	b002      	add	sp, #8
 8010f24:	bd80      	pop	{r7, pc}
	...

08010f28 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f34:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4920      	ldr	r1, [pc, #128]	@ (8010fc4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8010f42:	400a      	ands	r2, r1
 8010f44:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d105      	bne.n	8010f5c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2120      	movs	r1, #32
 8010f54:	0018      	movs	r0, r3
 8010f56:	f000 fb4b 	bl	80115f0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8010f5a:	e02e      	b.n	8010fba <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f60:	68fa      	ldr	r2, [r7, #12]
 8010f62:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010f64:	189a      	adds	r2, r3, r2
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	2bff      	cmp	r3, #255	@ 0xff
 8010f72:	d903      	bls.n	8010f7c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	22ff      	movs	r2, #255	@ 0xff
 8010f78:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010f7a:	e004      	b.n	8010f86 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f8e:	0019      	movs	r1, r3
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	3328      	adds	r3, #40	@ 0x28
 8010f96:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8010f9c:	f7fd fae4 	bl	800e568 <HAL_DMA_Start_IT>
 8010fa0:	1e03      	subs	r3, r0, #0
 8010fa2:	d005      	beq.n	8010fb0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2110      	movs	r1, #16
 8010fa8:	0018      	movs	r0, r3
 8010faa:	f7ff fe6f 	bl	8010c8c <I2C_ITError>
}
 8010fae:	e004      	b.n	8010fba <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2140      	movs	r1, #64	@ 0x40
 8010fb4:	0018      	movs	r0, r3
 8010fb6:	f000 fb1b 	bl	80115f0 <I2C_Enable_IRQ>
}
 8010fba:	46c0      	nop			@ (mov r8, r8)
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	b004      	add	sp, #16
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	46c0      	nop			@ (mov r8, r8)
 8010fc4:	ffffbfff 	.word	0xffffbfff

08010fc8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fd4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	4920      	ldr	r1, [pc, #128]	@ (8011064 <I2C_DMAMasterReceiveCplt+0x9c>)
 8010fe2:	400a      	ands	r2, r1
 8010fe4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d105      	bne.n	8010ffc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2120      	movs	r1, #32
 8010ff4:	0018      	movs	r0, r3
 8010ff6:	f000 fafb 	bl	80115f0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8010ffa:	e02e      	b.n	801105a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011004:	189a      	adds	r2, r3, r2
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801100e:	b29b      	uxth	r3, r3
 8011010:	2bff      	cmp	r3, #255	@ 0xff
 8011012:	d903      	bls.n	801101c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	22ff      	movs	r2, #255	@ 0xff
 8011018:	851a      	strh	r2, [r3, #40]	@ 0x28
 801101a:	e004      	b.n	8011026 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011020:	b29a      	uxth	r2, r3
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	3324      	adds	r3, #36	@ 0x24
 8011030:	0019      	movs	r1, r3
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011036:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801103c:	f7fd fa94 	bl	800e568 <HAL_DMA_Start_IT>
 8011040:	1e03      	subs	r3, r0, #0
 8011042:	d005      	beq.n	8011050 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2110      	movs	r1, #16
 8011048:	0018      	movs	r0, r3
 801104a:	f7ff fe1f 	bl	8010c8c <I2C_ITError>
}
 801104e:	e004      	b.n	801105a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2140      	movs	r1, #64	@ 0x40
 8011054:	0018      	movs	r0, r3
 8011056:	f000 facb 	bl	80115f0 <I2C_Enable_IRQ>
}
 801105a:	46c0      	nop			@ (mov r8, r8)
 801105c:	46bd      	mov	sp, r7
 801105e:	b004      	add	sp, #16
 8011060:	bd80      	pop	{r7, pc}
 8011062:	46c0      	nop			@ (mov r8, r8)
 8011064:	ffff7fff 	.word	0xffff7fff

08011068 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011074:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2180      	movs	r1, #128	@ 0x80
 8011082:	0209      	lsls	r1, r1, #8
 8011084:	430a      	orrs	r2, r1
 8011086:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2110      	movs	r1, #16
 801108c:	0018      	movs	r0, r3
 801108e:	f7ff fdfd 	bl	8010c8c <I2C_ITError>
}
 8011092:	46c0      	nop			@ (mov r8, r8)
 8011094:	46bd      	mov	sp, r7
 8011096:	b004      	add	sp, #16
 8011098:	bd80      	pop	{r7, pc}

0801109a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801109a:	b580      	push	{r7, lr}
 801109c:	b084      	sub	sp, #16
 801109e:	af00      	add	r7, sp, #0
 80110a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110a6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d003      	beq.n	80110b8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110b4:	2200      	movs	r2, #0
 80110b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d003      	beq.n	80110c8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110c4:	2200      	movs	r2, #0
 80110c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	0018      	movs	r0, r3
 80110cc:	f7ff fee0 	bl	8010e90 <I2C_TreatErrorCallback>
}
 80110d0:	46c0      	nop			@ (mov r8, r8)
 80110d2:	46bd      	mov	sp, r7
 80110d4:	b004      	add	sp, #16
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	60f8      	str	r0, [r7, #12]
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	603b      	str	r3, [r7, #0]
 80110e4:	1dfb      	adds	r3, r7, #7
 80110e6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80110e8:	e030      	b.n	801114c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	3301      	adds	r3, #1
 80110ee:	d02d      	beq.n	801114c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110f0:	f7fc fcfe 	bl	800daf0 <HAL_GetTick>
 80110f4:	0002      	movs	r2, r0
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d302      	bcc.n	8011106 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d122      	bne.n	801114c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	699b      	ldr	r3, [r3, #24]
 801110c:	68ba      	ldr	r2, [r7, #8]
 801110e:	4013      	ands	r3, r2
 8011110:	68ba      	ldr	r2, [r7, #8]
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	425a      	negs	r2, r3
 8011116:	4153      	adcs	r3, r2
 8011118:	b2db      	uxtb	r3, r3
 801111a:	001a      	movs	r2, r3
 801111c:	1dfb      	adds	r3, r7, #7
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	429a      	cmp	r2, r3
 8011122:	d113      	bne.n	801114c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011128:	2220      	movs	r2, #32
 801112a:	431a      	orrs	r2, r3
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2241      	movs	r2, #65	@ 0x41
 8011134:	2120      	movs	r1, #32
 8011136:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2242      	movs	r2, #66	@ 0x42
 801113c:	2100      	movs	r1, #0
 801113e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2240      	movs	r2, #64	@ 0x40
 8011144:	2100      	movs	r1, #0
 8011146:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011148:	2301      	movs	r3, #1
 801114a:	e00f      	b.n	801116c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	699b      	ldr	r3, [r3, #24]
 8011152:	68ba      	ldr	r2, [r7, #8]
 8011154:	4013      	ands	r3, r2
 8011156:	68ba      	ldr	r2, [r7, #8]
 8011158:	1ad3      	subs	r3, r2, r3
 801115a:	425a      	negs	r2, r3
 801115c:	4153      	adcs	r3, r2
 801115e:	b2db      	uxtb	r3, r3
 8011160:	001a      	movs	r2, r3
 8011162:	1dfb      	adds	r3, r7, #7
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	429a      	cmp	r2, r3
 8011168:	d0bf      	beq.n	80110ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801116a:	2300      	movs	r3, #0
}
 801116c:	0018      	movs	r0, r3
 801116e:	46bd      	mov	sp, r7
 8011170:	b004      	add	sp, #16
 8011172:	bd80      	pop	{r7, pc}

08011174 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011180:	e032      	b.n	80111e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	68b9      	ldr	r1, [r7, #8]
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	0018      	movs	r0, r3
 801118a:	f000 f8ff 	bl	801138c <I2C_IsErrorOccurred>
 801118e:	1e03      	subs	r3, r0, #0
 8011190:	d001      	beq.n	8011196 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011192:	2301      	movs	r3, #1
 8011194:	e030      	b.n	80111f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	3301      	adds	r3, #1
 801119a:	d025      	beq.n	80111e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801119c:	f7fc fca8 	bl	800daf0 <HAL_GetTick>
 80111a0:	0002      	movs	r2, r0
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	68ba      	ldr	r2, [r7, #8]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d302      	bcc.n	80111b2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d11a      	bne.n	80111e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	699b      	ldr	r3, [r3, #24]
 80111b8:	2202      	movs	r2, #2
 80111ba:	4013      	ands	r3, r2
 80111bc:	2b02      	cmp	r3, #2
 80111be:	d013      	beq.n	80111e8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111c4:	2220      	movs	r2, #32
 80111c6:	431a      	orrs	r2, r3
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2241      	movs	r2, #65	@ 0x41
 80111d0:	2120      	movs	r1, #32
 80111d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2242      	movs	r2, #66	@ 0x42
 80111d8:	2100      	movs	r1, #0
 80111da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2240      	movs	r2, #64	@ 0x40
 80111e0:	2100      	movs	r1, #0
 80111e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	e007      	b.n	80111f8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	699b      	ldr	r3, [r3, #24]
 80111ee:	2202      	movs	r2, #2
 80111f0:	4013      	ands	r3, r2
 80111f2:	2b02      	cmp	r3, #2
 80111f4:	d1c5      	bne.n	8011182 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80111f6:	2300      	movs	r3, #0
}
 80111f8:	0018      	movs	r0, r3
 80111fa:	46bd      	mov	sp, r7
 80111fc:	b004      	add	sp, #16
 80111fe:	bd80      	pop	{r7, pc}

08011200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801120c:	e02f      	b.n	801126e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	68b9      	ldr	r1, [r7, #8]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	0018      	movs	r0, r3
 8011216:	f000 f8b9 	bl	801138c <I2C_IsErrorOccurred>
 801121a:	1e03      	subs	r3, r0, #0
 801121c:	d001      	beq.n	8011222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801121e:	2301      	movs	r3, #1
 8011220:	e02d      	b.n	801127e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011222:	f7fc fc65 	bl	800daf0 <HAL_GetTick>
 8011226:	0002      	movs	r2, r0
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	1ad3      	subs	r3, r2, r3
 801122c:	68ba      	ldr	r2, [r7, #8]
 801122e:	429a      	cmp	r2, r3
 8011230:	d302      	bcc.n	8011238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d11a      	bne.n	801126e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	699b      	ldr	r3, [r3, #24]
 801123e:	2220      	movs	r2, #32
 8011240:	4013      	ands	r3, r2
 8011242:	2b20      	cmp	r3, #32
 8011244:	d013      	beq.n	801126e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801124a:	2220      	movs	r2, #32
 801124c:	431a      	orrs	r2, r3
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2241      	movs	r2, #65	@ 0x41
 8011256:	2120      	movs	r1, #32
 8011258:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2242      	movs	r2, #66	@ 0x42
 801125e:	2100      	movs	r1, #0
 8011260:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2240      	movs	r2, #64	@ 0x40
 8011266:	2100      	movs	r1, #0
 8011268:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	e007      	b.n	801127e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	699b      	ldr	r3, [r3, #24]
 8011274:	2220      	movs	r2, #32
 8011276:	4013      	ands	r3, r2
 8011278:	2b20      	cmp	r3, #32
 801127a:	d1c8      	bne.n	801120e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	0018      	movs	r0, r3
 8011280:	46bd      	mov	sp, r7
 8011282:	b004      	add	sp, #16
 8011284:	bd80      	pop	{r7, pc}
	...

08011288 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b084      	sub	sp, #16
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011294:	e06b      	b.n	801136e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011296:	687a      	ldr	r2, [r7, #4]
 8011298:	68b9      	ldr	r1, [r7, #8]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	0018      	movs	r0, r3
 801129e:	f000 f875 	bl	801138c <I2C_IsErrorOccurred>
 80112a2:	1e03      	subs	r3, r0, #0
 80112a4:	d001      	beq.n	80112aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80112a6:	2301      	movs	r3, #1
 80112a8:	e069      	b.n	801137e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	699b      	ldr	r3, [r3, #24]
 80112b0:	2220      	movs	r2, #32
 80112b2:	4013      	ands	r3, r2
 80112b4:	2b20      	cmp	r3, #32
 80112b6:	d138      	bne.n	801132a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	699b      	ldr	r3, [r3, #24]
 80112be:	2204      	movs	r2, #4
 80112c0:	4013      	ands	r3, r2
 80112c2:	2b04      	cmp	r3, #4
 80112c4:	d105      	bne.n	80112d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d001      	beq.n	80112d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	e055      	b.n	801137e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	699b      	ldr	r3, [r3, #24]
 80112d8:	2210      	movs	r2, #16
 80112da:	4013      	ands	r3, r2
 80112dc:	2b10      	cmp	r3, #16
 80112de:	d107      	bne.n	80112f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2210      	movs	r2, #16
 80112e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2204      	movs	r2, #4
 80112ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80112ee:	e002      	b.n	80112f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2200      	movs	r2, #0
 80112f4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2220      	movs	r2, #32
 80112fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	685a      	ldr	r2, [r3, #4]
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	491f      	ldr	r1, [pc, #124]	@ (8011388 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801130a:	400a      	ands	r2, r1
 801130c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	2241      	movs	r2, #65	@ 0x41
 8011312:	2120      	movs	r1, #32
 8011314:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2242      	movs	r2, #66	@ 0x42
 801131a:	2100      	movs	r1, #0
 801131c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2240      	movs	r2, #64	@ 0x40
 8011322:	2100      	movs	r1, #0
 8011324:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011326:	2301      	movs	r3, #1
 8011328:	e029      	b.n	801137e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801132a:	f7fc fbe1 	bl	800daf0 <HAL_GetTick>
 801132e:	0002      	movs	r2, r0
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	1ad3      	subs	r3, r2, r3
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	429a      	cmp	r2, r3
 8011338:	d302      	bcc.n	8011340 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d116      	bne.n	801136e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	699b      	ldr	r3, [r3, #24]
 8011346:	2204      	movs	r2, #4
 8011348:	4013      	ands	r3, r2
 801134a:	2b04      	cmp	r3, #4
 801134c:	d00f      	beq.n	801136e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011352:	2220      	movs	r2, #32
 8011354:	431a      	orrs	r2, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2241      	movs	r2, #65	@ 0x41
 801135e:	2120      	movs	r1, #32
 8011360:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2240      	movs	r2, #64	@ 0x40
 8011366:	2100      	movs	r1, #0
 8011368:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801136a:	2301      	movs	r3, #1
 801136c:	e007      	b.n	801137e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	699b      	ldr	r3, [r3, #24]
 8011374:	2204      	movs	r2, #4
 8011376:	4013      	ands	r3, r2
 8011378:	2b04      	cmp	r3, #4
 801137a:	d18c      	bne.n	8011296 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801137c:	2300      	movs	r3, #0
}
 801137e:	0018      	movs	r0, r3
 8011380:	46bd      	mov	sp, r7
 8011382:	b004      	add	sp, #16
 8011384:	bd80      	pop	{r7, pc}
 8011386:	46c0      	nop			@ (mov r8, r8)
 8011388:	fe00e800 	.word	0xfe00e800

0801138c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b08a      	sub	sp, #40	@ 0x28
 8011390:	af00      	add	r7, sp, #0
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011398:	2327      	movs	r3, #39	@ 0x27
 801139a:	18fb      	adds	r3, r7, r3
 801139c:	2200      	movs	r2, #0
 801139e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	699b      	ldr	r3, [r3, #24]
 80113a6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80113a8:	2300      	movs	r3, #0
 80113aa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	2210      	movs	r2, #16
 80113b4:	4013      	ands	r3, r2
 80113b6:	d100      	bne.n	80113ba <I2C_IsErrorOccurred+0x2e>
 80113b8:	e079      	b.n	80114ae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	2210      	movs	r2, #16
 80113c0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80113c2:	e057      	b.n	8011474 <I2C_IsErrorOccurred+0xe8>
 80113c4:	2227      	movs	r2, #39	@ 0x27
 80113c6:	18bb      	adds	r3, r7, r2
 80113c8:	18ba      	adds	r2, r7, r2
 80113ca:	7812      	ldrb	r2, [r2, #0]
 80113cc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	3301      	adds	r3, #1
 80113d2:	d04f      	beq.n	8011474 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80113d4:	f7fc fb8c 	bl	800daf0 <HAL_GetTick>
 80113d8:	0002      	movs	r2, r0
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	1ad3      	subs	r3, r2, r3
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d302      	bcc.n	80113ea <I2C_IsErrorOccurred+0x5e>
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d144      	bne.n	8011474 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	2380      	movs	r3, #128	@ 0x80
 80113f2:	01db      	lsls	r3, r3, #7
 80113f4:	4013      	ands	r3, r2
 80113f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80113f8:	2013      	movs	r0, #19
 80113fa:	183b      	adds	r3, r7, r0
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	2142      	movs	r1, #66	@ 0x42
 8011400:	5c52      	ldrb	r2, [r2, r1]
 8011402:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	699a      	ldr	r2, [r3, #24]
 801140a:	2380      	movs	r3, #128	@ 0x80
 801140c:	021b      	lsls	r3, r3, #8
 801140e:	401a      	ands	r2, r3
 8011410:	2380      	movs	r3, #128	@ 0x80
 8011412:	021b      	lsls	r3, r3, #8
 8011414:	429a      	cmp	r2, r3
 8011416:	d126      	bne.n	8011466 <I2C_IsErrorOccurred+0xda>
 8011418:	697a      	ldr	r2, [r7, #20]
 801141a:	2380      	movs	r3, #128	@ 0x80
 801141c:	01db      	lsls	r3, r3, #7
 801141e:	429a      	cmp	r2, r3
 8011420:	d021      	beq.n	8011466 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8011422:	183b      	adds	r3, r7, r0
 8011424:	781b      	ldrb	r3, [r3, #0]
 8011426:	2b20      	cmp	r3, #32
 8011428:	d01d      	beq.n	8011466 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	685a      	ldr	r2, [r3, #4]
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2180      	movs	r1, #128	@ 0x80
 8011436:	01c9      	lsls	r1, r1, #7
 8011438:	430a      	orrs	r2, r1
 801143a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801143c:	f7fc fb58 	bl	800daf0 <HAL_GetTick>
 8011440:	0003      	movs	r3, r0
 8011442:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011444:	e00f      	b.n	8011466 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011446:	f7fc fb53 	bl	800daf0 <HAL_GetTick>
 801144a:	0002      	movs	r2, r0
 801144c:	69fb      	ldr	r3, [r7, #28]
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	2b19      	cmp	r3, #25
 8011452:	d908      	bls.n	8011466 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011454:	6a3b      	ldr	r3, [r7, #32]
 8011456:	2220      	movs	r2, #32
 8011458:	4313      	orrs	r3, r2
 801145a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801145c:	2327      	movs	r3, #39	@ 0x27
 801145e:	18fb      	adds	r3, r7, r3
 8011460:	2201      	movs	r2, #1
 8011462:	701a      	strb	r2, [r3, #0]

              break;
 8011464:	e006      	b.n	8011474 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	699b      	ldr	r3, [r3, #24]
 801146c:	2220      	movs	r2, #32
 801146e:	4013      	ands	r3, r2
 8011470:	2b20      	cmp	r3, #32
 8011472:	d1e8      	bne.n	8011446 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	699b      	ldr	r3, [r3, #24]
 801147a:	2220      	movs	r2, #32
 801147c:	4013      	ands	r3, r2
 801147e:	2b20      	cmp	r3, #32
 8011480:	d004      	beq.n	801148c <I2C_IsErrorOccurred+0x100>
 8011482:	2327      	movs	r3, #39	@ 0x27
 8011484:	18fb      	adds	r3, r7, r3
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d09b      	beq.n	80113c4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801148c:	2327      	movs	r3, #39	@ 0x27
 801148e:	18fb      	adds	r3, r7, r3
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d103      	bne.n	801149e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2220      	movs	r2, #32
 801149c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801149e:	6a3b      	ldr	r3, [r7, #32]
 80114a0:	2204      	movs	r2, #4
 80114a2:	4313      	orrs	r3, r2
 80114a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80114a6:	2327      	movs	r3, #39	@ 0x27
 80114a8:	18fb      	adds	r3, r7, r3
 80114aa:	2201      	movs	r2, #1
 80114ac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	699b      	ldr	r3, [r3, #24]
 80114b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80114b6:	69ba      	ldr	r2, [r7, #24]
 80114b8:	2380      	movs	r3, #128	@ 0x80
 80114ba:	005b      	lsls	r3, r3, #1
 80114bc:	4013      	ands	r3, r2
 80114be:	d00c      	beq.n	80114da <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80114c0:	6a3b      	ldr	r3, [r7, #32]
 80114c2:	2201      	movs	r2, #1
 80114c4:	4313      	orrs	r3, r2
 80114c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2280      	movs	r2, #128	@ 0x80
 80114ce:	0052      	lsls	r2, r2, #1
 80114d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80114d2:	2327      	movs	r3, #39	@ 0x27
 80114d4:	18fb      	adds	r3, r7, r3
 80114d6:	2201      	movs	r2, #1
 80114d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80114da:	69ba      	ldr	r2, [r7, #24]
 80114dc:	2380      	movs	r3, #128	@ 0x80
 80114de:	00db      	lsls	r3, r3, #3
 80114e0:	4013      	ands	r3, r2
 80114e2:	d00c      	beq.n	80114fe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	2208      	movs	r2, #8
 80114e8:	4313      	orrs	r3, r2
 80114ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2280      	movs	r2, #128	@ 0x80
 80114f2:	00d2      	lsls	r2, r2, #3
 80114f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80114f6:	2327      	movs	r3, #39	@ 0x27
 80114f8:	18fb      	adds	r3, r7, r3
 80114fa:	2201      	movs	r2, #1
 80114fc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80114fe:	69ba      	ldr	r2, [r7, #24]
 8011500:	2380      	movs	r3, #128	@ 0x80
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	4013      	ands	r3, r2
 8011506:	d00c      	beq.n	8011522 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011508:	6a3b      	ldr	r3, [r7, #32]
 801150a:	2202      	movs	r2, #2
 801150c:	4313      	orrs	r3, r2
 801150e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2280      	movs	r2, #128	@ 0x80
 8011516:	0092      	lsls	r2, r2, #2
 8011518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801151a:	2327      	movs	r3, #39	@ 0x27
 801151c:	18fb      	adds	r3, r7, r3
 801151e:	2201      	movs	r2, #1
 8011520:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011522:	2327      	movs	r3, #39	@ 0x27
 8011524:	18fb      	adds	r3, r7, r3
 8011526:	781b      	ldrb	r3, [r3, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d01d      	beq.n	8011568 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	0018      	movs	r0, r3
 8011530:	f7ff fcd7 	bl	8010ee2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	685a      	ldr	r2, [r3, #4]
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	490e      	ldr	r1, [pc, #56]	@ (8011578 <I2C_IsErrorOccurred+0x1ec>)
 8011540:	400a      	ands	r2, r1
 8011542:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011548:	6a3b      	ldr	r3, [r7, #32]
 801154a:	431a      	orrs	r2, r3
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2241      	movs	r2, #65	@ 0x41
 8011554:	2120      	movs	r1, #32
 8011556:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2242      	movs	r2, #66	@ 0x42
 801155c:	2100      	movs	r1, #0
 801155e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2240      	movs	r2, #64	@ 0x40
 8011564:	2100      	movs	r1, #0
 8011566:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011568:	2327      	movs	r3, #39	@ 0x27
 801156a:	18fb      	adds	r3, r7, r3
 801156c:	781b      	ldrb	r3, [r3, #0]
}
 801156e:	0018      	movs	r0, r3
 8011570:	46bd      	mov	sp, r7
 8011572:	b00a      	add	sp, #40	@ 0x28
 8011574:	bd80      	pop	{r7, pc}
 8011576:	46c0      	nop			@ (mov r8, r8)
 8011578:	fe00e800 	.word	0xfe00e800

0801157c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801157c:	b590      	push	{r4, r7, lr}
 801157e:	b087      	sub	sp, #28
 8011580:	af00      	add	r7, sp, #0
 8011582:	60f8      	str	r0, [r7, #12]
 8011584:	0008      	movs	r0, r1
 8011586:	0011      	movs	r1, r2
 8011588:	607b      	str	r3, [r7, #4]
 801158a:	240a      	movs	r4, #10
 801158c:	193b      	adds	r3, r7, r4
 801158e:	1c02      	adds	r2, r0, #0
 8011590:	801a      	strh	r2, [r3, #0]
 8011592:	2009      	movs	r0, #9
 8011594:	183b      	adds	r3, r7, r0
 8011596:	1c0a      	adds	r2, r1, #0
 8011598:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801159a:	193b      	adds	r3, r7, r4
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	059b      	lsls	r3, r3, #22
 80115a0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80115a2:	183b      	adds	r3, r7, r0
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	0419      	lsls	r1, r3, #16
 80115a8:	23ff      	movs	r3, #255	@ 0xff
 80115aa:	041b      	lsls	r3, r3, #16
 80115ac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80115ae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80115b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115b6:	4313      	orrs	r3, r2
 80115b8:	005b      	lsls	r3, r3, #1
 80115ba:	085b      	lsrs	r3, r3, #1
 80115bc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80115c6:	0d51      	lsrs	r1, r2, #21
 80115c8:	2280      	movs	r2, #128	@ 0x80
 80115ca:	00d2      	lsls	r2, r2, #3
 80115cc:	400a      	ands	r2, r1
 80115ce:	4907      	ldr	r1, [pc, #28]	@ (80115ec <I2C_TransferConfig+0x70>)
 80115d0:	430a      	orrs	r2, r1
 80115d2:	43d2      	mvns	r2, r2
 80115d4:	401a      	ands	r2, r3
 80115d6:	0011      	movs	r1, r2
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	697a      	ldr	r2, [r7, #20]
 80115de:	430a      	orrs	r2, r1
 80115e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80115e2:	46c0      	nop			@ (mov r8, r8)
 80115e4:	46bd      	mov	sp, r7
 80115e6:	b007      	add	sp, #28
 80115e8:	bd90      	pop	{r4, r7, pc}
 80115ea:	46c0      	nop			@ (mov r8, r8)
 80115ec:	03ff63ff 	.word	0x03ff63ff

080115f0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b084      	sub	sp, #16
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	000a      	movs	r2, r1
 80115fa:	1cbb      	adds	r3, r7, #2
 80115fc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80115fe:	2300      	movs	r3, #0
 8011600:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011606:	4b3e      	ldr	r3, [pc, #248]	@ (8011700 <I2C_Enable_IRQ+0x110>)
 8011608:	429a      	cmp	r2, r3
 801160a:	d035      	beq.n	8011678 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011610:	4b3c      	ldr	r3, [pc, #240]	@ (8011704 <I2C_Enable_IRQ+0x114>)
 8011612:	429a      	cmp	r2, r3
 8011614:	d030      	beq.n	8011678 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801161a:	4b3b      	ldr	r3, [pc, #236]	@ (8011708 <I2C_Enable_IRQ+0x118>)
 801161c:	429a      	cmp	r2, r3
 801161e:	d02b      	beq.n	8011678 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011620:	1cbb      	adds	r3, r7, #2
 8011622:	2200      	movs	r2, #0
 8011624:	5e9b      	ldrsh	r3, [r3, r2]
 8011626:	2b00      	cmp	r3, #0
 8011628:	da03      	bge.n	8011632 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	22b8      	movs	r2, #184	@ 0xb8
 801162e:	4313      	orrs	r3, r2
 8011630:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011632:	1cbb      	adds	r3, r7, #2
 8011634:	881b      	ldrh	r3, [r3, #0]
 8011636:	2201      	movs	r2, #1
 8011638:	4013      	ands	r3, r2
 801163a:	d003      	beq.n	8011644 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	22f2      	movs	r2, #242	@ 0xf2
 8011640:	4313      	orrs	r3, r2
 8011642:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011644:	1cbb      	adds	r3, r7, #2
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	2202      	movs	r2, #2
 801164a:	4013      	ands	r3, r2
 801164c:	d003      	beq.n	8011656 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	22f4      	movs	r2, #244	@ 0xf4
 8011652:	4313      	orrs	r3, r2
 8011654:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011656:	1cbb      	adds	r3, r7, #2
 8011658:	881b      	ldrh	r3, [r3, #0]
 801165a:	2b10      	cmp	r3, #16
 801165c:	d103      	bne.n	8011666 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2290      	movs	r2, #144	@ 0x90
 8011662:	4313      	orrs	r3, r2
 8011664:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011666:	1cbb      	adds	r3, r7, #2
 8011668:	881b      	ldrh	r3, [r3, #0]
 801166a:	2b20      	cmp	r3, #32
 801166c:	d13c      	bne.n	80116e8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2220      	movs	r2, #32
 8011672:	4313      	orrs	r3, r2
 8011674:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011676:	e037      	b.n	80116e8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011678:	1cbb      	adds	r3, r7, #2
 801167a:	2200      	movs	r2, #0
 801167c:	5e9b      	ldrsh	r3, [r3, r2]
 801167e:	2b00      	cmp	r3, #0
 8011680:	da03      	bge.n	801168a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	22b8      	movs	r2, #184	@ 0xb8
 8011686:	4313      	orrs	r3, r2
 8011688:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801168a:	1cbb      	adds	r3, r7, #2
 801168c:	881b      	ldrh	r3, [r3, #0]
 801168e:	2201      	movs	r2, #1
 8011690:	4013      	ands	r3, r2
 8011692:	d003      	beq.n	801169c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	22f2      	movs	r2, #242	@ 0xf2
 8011698:	4313      	orrs	r3, r2
 801169a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801169c:	1cbb      	adds	r3, r7, #2
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	2202      	movs	r2, #2
 80116a2:	4013      	ands	r3, r2
 80116a4:	d003      	beq.n	80116ae <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	22f4      	movs	r2, #244	@ 0xf4
 80116aa:	4313      	orrs	r3, r2
 80116ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80116ae:	1cbb      	adds	r3, r7, #2
 80116b0:	881b      	ldrh	r3, [r3, #0]
 80116b2:	2b10      	cmp	r3, #16
 80116b4:	d103      	bne.n	80116be <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2290      	movs	r2, #144	@ 0x90
 80116ba:	4313      	orrs	r3, r2
 80116bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80116be:	1cbb      	adds	r3, r7, #2
 80116c0:	881b      	ldrh	r3, [r3, #0]
 80116c2:	2b20      	cmp	r3, #32
 80116c4:	d103      	bne.n	80116ce <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2260      	movs	r2, #96	@ 0x60
 80116ca:	4313      	orrs	r3, r2
 80116cc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80116d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011708 <I2C_Enable_IRQ+0x118>)
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d007      	beq.n	80116e8 <I2C_Enable_IRQ+0xf8>
 80116d8:	1cbb      	adds	r3, r7, #2
 80116da:	881b      	ldrh	r3, [r3, #0]
 80116dc:	2b40      	cmp	r3, #64	@ 0x40
 80116de:	d103      	bne.n	80116e8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2240      	movs	r2, #64	@ 0x40
 80116e4:	4313      	orrs	r3, r2
 80116e6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	6819      	ldr	r1, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	430a      	orrs	r2, r1
 80116f6:	601a      	str	r2, [r3, #0]
}
 80116f8:	46c0      	nop			@ (mov r8, r8)
 80116fa:	46bd      	mov	sp, r7
 80116fc:	b004      	add	sp, #16
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	0800ff71 	.word	0x0800ff71
 8011704:	080103a1 	.word	0x080103a1
 8011708:	08010169 	.word	0x08010169

0801170c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	000a      	movs	r2, r1
 8011716:	1cbb      	adds	r3, r7, #2
 8011718:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801171a:	2300      	movs	r3, #0
 801171c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801171e:	1cbb      	adds	r3, r7, #2
 8011720:	881b      	ldrh	r3, [r3, #0]
 8011722:	2201      	movs	r2, #1
 8011724:	4013      	ands	r3, r2
 8011726:	d010      	beq.n	801174a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2242      	movs	r2, #66	@ 0x42
 801172c:	4313      	orrs	r3, r2
 801172e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2241      	movs	r2, #65	@ 0x41
 8011734:	5c9b      	ldrb	r3, [r3, r2]
 8011736:	b2db      	uxtb	r3, r3
 8011738:	001a      	movs	r2, r3
 801173a:	2328      	movs	r3, #40	@ 0x28
 801173c:	4013      	ands	r3, r2
 801173e:	2b28      	cmp	r3, #40	@ 0x28
 8011740:	d003      	beq.n	801174a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	22b0      	movs	r2, #176	@ 0xb0
 8011746:	4313      	orrs	r3, r2
 8011748:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801174a:	1cbb      	adds	r3, r7, #2
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	2202      	movs	r2, #2
 8011750:	4013      	ands	r3, r2
 8011752:	d010      	beq.n	8011776 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2244      	movs	r2, #68	@ 0x44
 8011758:	4313      	orrs	r3, r2
 801175a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2241      	movs	r2, #65	@ 0x41
 8011760:	5c9b      	ldrb	r3, [r3, r2]
 8011762:	b2db      	uxtb	r3, r3
 8011764:	001a      	movs	r2, r3
 8011766:	2328      	movs	r3, #40	@ 0x28
 8011768:	4013      	ands	r3, r2
 801176a:	2b28      	cmp	r3, #40	@ 0x28
 801176c:	d003      	beq.n	8011776 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	22b0      	movs	r2, #176	@ 0xb0
 8011772:	4313      	orrs	r3, r2
 8011774:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011776:	1cbb      	adds	r3, r7, #2
 8011778:	2200      	movs	r2, #0
 801177a:	5e9b      	ldrsh	r3, [r3, r2]
 801177c:	2b00      	cmp	r3, #0
 801177e:	da03      	bge.n	8011788 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	22b8      	movs	r2, #184	@ 0xb8
 8011784:	4313      	orrs	r3, r2
 8011786:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011788:	1cbb      	adds	r3, r7, #2
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	2b10      	cmp	r3, #16
 801178e:	d103      	bne.n	8011798 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2290      	movs	r2, #144	@ 0x90
 8011794:	4313      	orrs	r3, r2
 8011796:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011798:	1cbb      	adds	r3, r7, #2
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	2b20      	cmp	r3, #32
 801179e:	d103      	bne.n	80117a8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2220      	movs	r2, #32
 80117a4:	4313      	orrs	r3, r2
 80117a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80117a8:	1cbb      	adds	r3, r7, #2
 80117aa:	881b      	ldrh	r3, [r3, #0]
 80117ac:	2b40      	cmp	r3, #64	@ 0x40
 80117ae:	d103      	bne.n	80117b8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2240      	movs	r2, #64	@ 0x40
 80117b4:	4313      	orrs	r3, r2
 80117b6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	43d9      	mvns	r1, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	400a      	ands	r2, r1
 80117c8:	601a      	str	r2, [r3, #0]
}
 80117ca:	46c0      	nop			@ (mov r8, r8)
 80117cc:	46bd      	mov	sp, r7
 80117ce:	b004      	add	sp, #16
 80117d0:	bd80      	pop	{r7, pc}
	...

080117d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2241      	movs	r2, #65	@ 0x41
 80117e2:	5c9b      	ldrb	r3, [r3, r2]
 80117e4:	b2db      	uxtb	r3, r3
 80117e6:	2b20      	cmp	r3, #32
 80117e8:	d138      	bne.n	801185c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	2240      	movs	r2, #64	@ 0x40
 80117ee:	5c9b      	ldrb	r3, [r3, r2]
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d101      	bne.n	80117f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80117f4:	2302      	movs	r3, #2
 80117f6:	e032      	b.n	801185e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2240      	movs	r2, #64	@ 0x40
 80117fc:	2101      	movs	r1, #1
 80117fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2241      	movs	r2, #65	@ 0x41
 8011804:	2124      	movs	r1, #36	@ 0x24
 8011806:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2101      	movs	r1, #1
 8011814:	438a      	bics	r2, r1
 8011816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	4911      	ldr	r1, [pc, #68]	@ (8011868 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8011824:	400a      	ands	r2, r1
 8011826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	6819      	ldr	r1, [r3, #0]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	683a      	ldr	r2, [r7, #0]
 8011834:	430a      	orrs	r2, r1
 8011836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	681a      	ldr	r2, [r3, #0]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	2101      	movs	r1, #1
 8011844:	430a      	orrs	r2, r1
 8011846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2241      	movs	r2, #65	@ 0x41
 801184c:	2120      	movs	r1, #32
 801184e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2240      	movs	r2, #64	@ 0x40
 8011854:	2100      	movs	r1, #0
 8011856:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011858:	2300      	movs	r3, #0
 801185a:	e000      	b.n	801185e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801185c:	2302      	movs	r3, #2
  }
}
 801185e:	0018      	movs	r0, r3
 8011860:	46bd      	mov	sp, r7
 8011862:	b002      	add	sp, #8
 8011864:	bd80      	pop	{r7, pc}
 8011866:	46c0      	nop			@ (mov r8, r8)
 8011868:	ffffefff 	.word	0xffffefff

0801186c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2241      	movs	r2, #65	@ 0x41
 801187a:	5c9b      	ldrb	r3, [r3, r2]
 801187c:	b2db      	uxtb	r3, r3
 801187e:	2b20      	cmp	r3, #32
 8011880:	d139      	bne.n	80118f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2240      	movs	r2, #64	@ 0x40
 8011886:	5c9b      	ldrb	r3, [r3, r2]
 8011888:	2b01      	cmp	r3, #1
 801188a:	d101      	bne.n	8011890 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801188c:	2302      	movs	r3, #2
 801188e:	e033      	b.n	80118f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	2240      	movs	r2, #64	@ 0x40
 8011894:	2101      	movs	r1, #1
 8011896:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2241      	movs	r2, #65	@ 0x41
 801189c:	2124      	movs	r1, #36	@ 0x24
 801189e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2101      	movs	r1, #1
 80118ac:	438a      	bics	r2, r1
 80118ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	4a11      	ldr	r2, [pc, #68]	@ (8011900 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80118bc:	4013      	ands	r3, r2
 80118be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	021b      	lsls	r3, r3, #8
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	4313      	orrs	r3, r2
 80118c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	681a      	ldr	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2101      	movs	r1, #1
 80118de:	430a      	orrs	r2, r1
 80118e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2241      	movs	r2, #65	@ 0x41
 80118e6:	2120      	movs	r1, #32
 80118e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2240      	movs	r2, #64	@ 0x40
 80118ee:	2100      	movs	r1, #0
 80118f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	e000      	b.n	80118f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80118f6:	2302      	movs	r3, #2
  }
}
 80118f8:	0018      	movs	r0, r3
 80118fa:	46bd      	mov	sp, r7
 80118fc:	b004      	add	sp, #16
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	fffff0ff 	.word	0xfffff0ff

08011904 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b088      	sub	sp, #32
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d101      	bne.n	8011916 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8011912:	2301      	movs	r3, #1
 8011914:	e0e1      	b.n	8011ada <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2235      	movs	r2, #53	@ 0x35
 801191a:	5c9b      	ldrb	r3, [r3, r2]
 801191c:	b2db      	uxtb	r3, r3
 801191e:	2b00      	cmp	r3, #0
 8011920:	d107      	bne.n	8011932 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2234      	movs	r2, #52	@ 0x34
 8011926:	2100      	movs	r1, #0
 8011928:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	0018      	movs	r0, r3
 801192e:	f7f5 fd55 	bl	80073dc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2235      	movs	r2, #53	@ 0x35
 8011936:	2102      	movs	r1, #2
 8011938:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	69da      	ldr	r2, [r3, #28]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	4967      	ldr	r1, [pc, #412]	@ (8011ae4 <HAL_I2S_Init+0x1e0>)
 8011946:	400a      	ands	r2, r1
 8011948:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2202      	movs	r2, #2
 8011950:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	695b      	ldr	r3, [r3, #20]
 8011956:	2b02      	cmp	r3, #2
 8011958:	d073      	beq.n	8011a42 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	68db      	ldr	r3, [r3, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d102      	bne.n	8011968 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011962:	2310      	movs	r3, #16
 8011964:	617b      	str	r3, [r7, #20]
 8011966:	e001      	b.n	801196c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011968:	2320      	movs	r3, #32
 801196a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	689b      	ldr	r3, [r3, #8]
 8011970:	2b20      	cmp	r3, #32
 8011972:	d802      	bhi.n	801197a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	005b      	lsls	r3, r3, #1
 8011978:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801197a:	f002 fec3 	bl	8014704 <HAL_RCC_GetSysClockFreq>
 801197e:	0003      	movs	r3, r0
 8011980:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	691a      	ldr	r2, [r3, #16]
 8011986:	2380      	movs	r3, #128	@ 0x80
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	429a      	cmp	r2, r3
 801198c:	d131      	bne.n	80119f2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d016      	beq.n	80119c4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	0019      	movs	r1, r3
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f7ee fc01 	bl	80001a4 <__udivsi3>
 80119a2:	0003      	movs	r3, r0
 80119a4:	001a      	movs	r2, r3
 80119a6:	0013      	movs	r3, r2
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	189b      	adds	r3, r3, r2
 80119ac:	005b      	lsls	r3, r3, #1
 80119ae:	001a      	movs	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	695b      	ldr	r3, [r3, #20]
 80119b4:	0019      	movs	r1, r3
 80119b6:	0010      	movs	r0, r2
 80119b8:	f7ee fbf4 	bl	80001a4 <__udivsi3>
 80119bc:	0003      	movs	r3, r0
 80119be:	3305      	adds	r3, #5
 80119c0:	613b      	str	r3, [r7, #16]
 80119c2:	e02a      	b.n	8011a1a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	00db      	lsls	r3, r3, #3
 80119c8:	0019      	movs	r1, r3
 80119ca:	68f8      	ldr	r0, [r7, #12]
 80119cc:	f7ee fbea 	bl	80001a4 <__udivsi3>
 80119d0:	0003      	movs	r3, r0
 80119d2:	001a      	movs	r2, r3
 80119d4:	0013      	movs	r3, r2
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	189b      	adds	r3, r3, r2
 80119da:	005b      	lsls	r3, r3, #1
 80119dc:	001a      	movs	r2, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	695b      	ldr	r3, [r3, #20]
 80119e2:	0019      	movs	r1, r3
 80119e4:	0010      	movs	r0, r2
 80119e6:	f7ee fbdd 	bl	80001a4 <__udivsi3>
 80119ea:	0003      	movs	r3, r0
 80119ec:	3305      	adds	r3, #5
 80119ee:	613b      	str	r3, [r7, #16]
 80119f0:	e013      	b.n	8011a1a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80119f2:	6979      	ldr	r1, [r7, #20]
 80119f4:	68f8      	ldr	r0, [r7, #12]
 80119f6:	f7ee fbd5 	bl	80001a4 <__udivsi3>
 80119fa:	0003      	movs	r3, r0
 80119fc:	001a      	movs	r2, r3
 80119fe:	0013      	movs	r3, r2
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	189b      	adds	r3, r3, r2
 8011a04:	005b      	lsls	r3, r3, #1
 8011a06:	001a      	movs	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	695b      	ldr	r3, [r3, #20]
 8011a0c:	0019      	movs	r1, r3
 8011a0e:	0010      	movs	r0, r2
 8011a10:	f7ee fbc8 	bl	80001a4 <__udivsi3>
 8011a14:	0003      	movs	r3, r0
 8011a16:	3305      	adds	r3, #5
 8011a18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	210a      	movs	r1, #10
 8011a1e:	0018      	movs	r0, r3
 8011a20:	f7ee fbc0 	bl	80001a4 <__udivsi3>
 8011a24:	0003      	movs	r3, r0
 8011a26:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	4013      	ands	r3, r2
 8011a2e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8011a30:	693a      	ldr	r2, [r7, #16]
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	085b      	lsrs	r3, r3, #1
 8011a38:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	021b      	lsls	r3, r3, #8
 8011a3e:	61bb      	str	r3, [r7, #24]
 8011a40:	e003      	b.n	8011a4a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8011a42:	2302      	movs	r3, #2
 8011a44:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011a46:	2300      	movs	r3, #0
 8011a48:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d902      	bls.n	8011a56 <HAL_I2S_Init+0x152>
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	2bff      	cmp	r3, #255	@ 0xff
 8011a54:	d907      	bls.n	8011a66 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a5a:	2210      	movs	r2, #16
 8011a5c:	431a      	orrs	r2, r3
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8011a62:	2301      	movs	r3, #1
 8011a64:	e039      	b.n	8011ada <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	691a      	ldr	r2, [r3, #16]
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	431a      	orrs	r2, r3
 8011a6e:	0011      	movs	r1, r2
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	69fa      	ldr	r2, [r7, #28]
 8011a76:	430a      	orrs	r2, r1
 8011a78:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	69db      	ldr	r3, [r3, #28]
 8011a80:	4a18      	ldr	r2, [pc, #96]	@ (8011ae4 <HAL_I2S_Init+0x1e0>)
 8011a82:	401a      	ands	r2, r3
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6859      	ldr	r1, [r3, #4]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	689b      	ldr	r3, [r3, #8]
 8011a8c:	4319      	orrs	r1, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	68db      	ldr	r3, [r3, #12]
 8011a92:	4319      	orrs	r1, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	699b      	ldr	r3, [r3, #24]
 8011a98:	430b      	orrs	r3, r1
 8011a9a:	431a      	orrs	r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2180      	movs	r1, #128	@ 0x80
 8011aa2:	0109      	lsls	r1, r1, #4
 8011aa4:	430a      	orrs	r2, r1
 8011aa6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	2b30      	cmp	r3, #48	@ 0x30
 8011aae:	d003      	beq.n	8011ab8 <HAL_I2S_Init+0x1b4>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	689b      	ldr	r3, [r3, #8]
 8011ab4:	2bb0      	cmp	r3, #176	@ 0xb0
 8011ab6:	d108      	bne.n	8011aca <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	69da      	ldr	r2, [r3, #28]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2180      	movs	r1, #128	@ 0x80
 8011ac4:	0149      	lsls	r1, r1, #5
 8011ac6:	430a      	orrs	r2, r1
 8011ac8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2200      	movs	r2, #0
 8011ace:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2235      	movs	r2, #53	@ 0x35
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011ad8:	2300      	movs	r3, #0
}
 8011ada:	0018      	movs	r0, r3
 8011adc:	46bd      	mov	sp, r7
 8011ade:	b008      	add	sp, #32
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	46c0      	nop			@ (mov r8, r8)
 8011ae4:	fffff040 	.word	0xfffff040

08011ae8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b086      	sub	sp, #24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	1dbb      	adds	r3, r7, #6
 8011af4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d003      	beq.n	8011b04 <HAL_I2S_Receive_DMA+0x1c>
 8011afc:	1dbb      	adds	r3, r7, #6
 8011afe:	881b      	ldrh	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d101      	bne.n	8011b08 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8011b04:	2301      	movs	r3, #1
 8011b06:	e0a6      	b.n	8011c56 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2234      	movs	r2, #52	@ 0x34
 8011b0c:	5c9b      	ldrb	r3, [r3, r2]
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d101      	bne.n	8011b18 <HAL_I2S_Receive_DMA+0x30>
 8011b14:	2302      	movs	r3, #2
 8011b16:	e09e      	b.n	8011c56 <HAL_I2S_Receive_DMA+0x16e>
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2234      	movs	r2, #52	@ 0x34
 8011b1c:	2101      	movs	r1, #1
 8011b1e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2235      	movs	r2, #53	@ 0x35
 8011b24:	5c9b      	ldrb	r3, [r3, r2]
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d005      	beq.n	8011b38 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2234      	movs	r2, #52	@ 0x34
 8011b30:	2100      	movs	r1, #0
 8011b32:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8011b34:	2302      	movs	r3, #2
 8011b36:	e08e      	b.n	8011c56 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2235      	movs	r2, #53	@ 0x35
 8011b3c:	2104      	movs	r1, #4
 8011b3e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2200      	movs	r2, #0
 8011b44:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	68ba      	ldr	r2, [r7, #8]
 8011b4a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	69db      	ldr	r3, [r3, #28]
 8011b52:	2207      	movs	r2, #7
 8011b54:	4013      	ands	r3, r2
 8011b56:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	2b03      	cmp	r3, #3
 8011b5c:	d002      	beq.n	8011b64 <HAL_I2S_Receive_DMA+0x7c>
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	2b05      	cmp	r3, #5
 8011b62:	d10c      	bne.n	8011b7e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8011b64:	1dbb      	adds	r3, r7, #6
 8011b66:	881b      	ldrh	r3, [r3, #0]
 8011b68:	18db      	adds	r3, r3, r3
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8011b70:	1dbb      	adds	r3, r7, #6
 8011b72:	881b      	ldrh	r3, [r3, #0]
 8011b74:	18db      	adds	r3, r3, r3
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011b7c:	e007      	b.n	8011b8e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	1dba      	adds	r2, r7, #6
 8011b82:	8812      	ldrh	r2, [r2, #0]
 8011b84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	1dba      	adds	r2, r7, #6
 8011b8a:	8812      	ldrh	r2, [r2, #0]
 8011b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b92:	4a33      	ldr	r2, [pc, #204]	@ (8011c60 <HAL_I2S_Receive_DMA+0x178>)
 8011b94:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b9a:	4a32      	ldr	r2, [pc, #200]	@ (8011c64 <HAL_I2S_Receive_DMA+0x17c>)
 8011b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ba2:	4a31      	ldr	r2, [pc, #196]	@ (8011c68 <HAL_I2S_Receive_DMA+0x180>)
 8011ba4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	69da      	ldr	r2, [r3, #28]
 8011bac:	23c0      	movs	r3, #192	@ 0xc0
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	401a      	ands	r2, r3
 8011bb2:	23c0      	movs	r3, #192	@ 0xc0
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d10a      	bne.n	8011bd0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011bba:	2300      	movs	r3, #0
 8011bbc:	613b      	str	r3, [r7, #16]
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	613b      	str	r3, [r7, #16]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	689b      	ldr	r3, [r3, #8]
 8011bcc:	613b      	str	r3, [r7, #16]
 8011bce:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	330c      	adds	r3, #12
 8011bda:	0019      	movs	r1, r3
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011be0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011be6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8011be8:	f7fc fcbe 	bl	800e568 <HAL_DMA_Start_IT>
 8011bec:	1e03      	subs	r3, r0, #0
 8011bee:	d00f      	beq.n	8011c10 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bf4:	2208      	movs	r2, #8
 8011bf6:	431a      	orrs	r2, r3
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2235      	movs	r2, #53	@ 0x35
 8011c00:	2101      	movs	r1, #1
 8011c02:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2234      	movs	r2, #52	@ 0x34
 8011c08:	2100      	movs	r1, #0
 8011c0a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	e022      	b.n	8011c56 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	69da      	ldr	r2, [r3, #28]
 8011c16:	2380      	movs	r3, #128	@ 0x80
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	4013      	ands	r3, r2
 8011c1c:	d108      	bne.n	8011c30 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	69da      	ldr	r2, [r3, #28]
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	2180      	movs	r1, #128	@ 0x80
 8011c2a:	00c9      	lsls	r1, r1, #3
 8011c2c:	430a      	orrs	r2, r1
 8011c2e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	2201      	movs	r2, #1
 8011c38:	4013      	ands	r3, r2
 8011c3a:	d107      	bne.n	8011c4c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	685a      	ldr	r2, [r3, #4]
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	2101      	movs	r1, #1
 8011c48:	430a      	orrs	r2, r1
 8011c4a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2234      	movs	r2, #52	@ 0x34
 8011c50:	2100      	movs	r1, #0
 8011c52:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8011c54:	2300      	movs	r3, #0
}
 8011c56:	0018      	movs	r0, r3
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	b006      	add	sp, #24
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	46c0      	nop			@ (mov r8, r8)
 8011c60:	08011e49 	.word	0x08011e49
 8011c64:	08011e05 	.word	0x08011e05
 8011c68:	08011e67 	.word	0x08011e67

08011c6c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011c74:	2317      	movs	r3, #23
 8011c76:	18fb      	adds	r3, r7, r3
 8011c78:	2200      	movs	r2, #0
 8011c7a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	685a      	ldr	r2, [r3, #4]
 8011c80:	2380      	movs	r3, #128	@ 0x80
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d003      	beq.n	8011c90 <HAL_I2S_DMAStop+0x24>
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d158      	bne.n	8011d42 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d010      	beq.n	8011cba <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c9c:	0018      	movs	r0, r3
 8011c9e:	f7fc fcc9 	bl	800e634 <HAL_DMA_Abort>
 8011ca2:	1e03      	subs	r3, r0, #0
 8011ca4:	d009      	beq.n	8011cba <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011caa:	2208      	movs	r2, #8
 8011cac:	431a      	orrs	r2, r3
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8011cb2:	2317      	movs	r3, #23
 8011cb4:	18fb      	adds	r3, r7, r3
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	2364      	movs	r3, #100	@ 0x64
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	2102      	movs	r1, #2
 8011cc2:	f000 f8f7 	bl	8011eb4 <I2S_WaitFlagStateUntilTimeout>
 8011cc6:	1e03      	subs	r3, r0, #0
 8011cc8:	d00d      	beq.n	8011ce6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cce:	2201      	movs	r2, #1
 8011cd0:	431a      	orrs	r2, r3
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2235      	movs	r2, #53	@ 0x35
 8011cda:	2101      	movs	r1, #1
 8011cdc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8011cde:	2317      	movs	r3, #23
 8011ce0:	18fb      	adds	r3, r7, r3
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	2364      	movs	r3, #100	@ 0x64
 8011cea:	2200      	movs	r2, #0
 8011cec:	2180      	movs	r1, #128	@ 0x80
 8011cee:	f000 f8e1 	bl	8011eb4 <I2S_WaitFlagStateUntilTimeout>
 8011cf2:	1e03      	subs	r3, r0, #0
 8011cf4:	d00d      	beq.n	8011d12 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	431a      	orrs	r2, r3
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2235      	movs	r2, #53	@ 0x35
 8011d06:	2101      	movs	r1, #1
 8011d08:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8011d0a:	2317      	movs	r3, #23
 8011d0c:	18fb      	adds	r3, r7, r3
 8011d0e:	2201      	movs	r2, #1
 8011d10:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	69da      	ldr	r2, [r3, #28]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4938      	ldr	r1, [pc, #224]	@ (8011e00 <HAL_I2S_DMAStop+0x194>)
 8011d1e:	400a      	ands	r2, r1
 8011d20:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011d22:	2300      	movs	r3, #0
 8011d24:	613b      	str	r3, [r7, #16]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	689b      	ldr	r3, [r3, #8]
 8011d2c:	613b      	str	r3, [r7, #16]
 8011d2e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	685a      	ldr	r2, [r3, #4]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	2102      	movs	r1, #2
 8011d3c:	438a      	bics	r2, r1
 8011d3e:	605a      	str	r2, [r3, #4]
 8011d40:	e053      	b.n	8011dea <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	685a      	ldr	r2, [r3, #4]
 8011d46:	23c0      	movs	r3, #192	@ 0xc0
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d005      	beq.n	8011d5a <HAL_I2S_DMAStop+0xee>
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	685a      	ldr	r2, [r3, #4]
 8011d52:	2380      	movs	r3, #128	@ 0x80
 8011d54:	005b      	lsls	r3, r3, #1
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d147      	bne.n	8011dea <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d010      	beq.n	8011d84 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d66:	0018      	movs	r0, r3
 8011d68:	f7fc fc64 	bl	800e634 <HAL_DMA_Abort>
 8011d6c:	1e03      	subs	r3, r0, #0
 8011d6e:	d009      	beq.n	8011d84 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d74:	2208      	movs	r2, #8
 8011d76:	431a      	orrs	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8011d7c:	2317      	movs	r3, #23
 8011d7e:	18fb      	adds	r3, r7, r3
 8011d80:	2201      	movs	r2, #1
 8011d82:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	69da      	ldr	r2, [r3, #28]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	491c      	ldr	r1, [pc, #112]	@ (8011e00 <HAL_I2S_DMAStop+0x194>)
 8011d90:	400a      	ands	r2, r1
 8011d92:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011d94:	2300      	movs	r3, #0
 8011d96:	60fb      	str	r3, [r7, #12]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	60fb      	str	r3, [r7, #12]
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	689b      	ldr	r3, [r3, #8]
 8011da6:	60fb      	str	r3, [r7, #12]
 8011da8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	685a      	ldr	r2, [r3, #4]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	2101      	movs	r1, #1
 8011db6:	438a      	bics	r2, r1
 8011db8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685a      	ldr	r2, [r3, #4]
 8011dbe:	2380      	movs	r3, #128	@ 0x80
 8011dc0:	005b      	lsls	r3, r3, #1
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d10e      	bne.n	8011de4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dca:	2240      	movs	r2, #64	@ 0x40
 8011dcc:	431a      	orrs	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2235      	movs	r2, #53	@ 0x35
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8011dda:	2317      	movs	r3, #23
 8011ddc:	18fb      	adds	r3, r7, r3
 8011dde:	2201      	movs	r2, #1
 8011de0:	701a      	strb	r2, [r3, #0]
 8011de2:	e002      	b.n	8011dea <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2235      	movs	r2, #53	@ 0x35
 8011dee:	2101      	movs	r1, #1
 8011df0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8011df2:	2317      	movs	r3, #23
 8011df4:	18fb      	adds	r3, r7, r3
 8011df6:	781b      	ldrb	r3, [r3, #0]
}
 8011df8:	0018      	movs	r0, r3
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	b006      	add	sp, #24
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	fffffbff 	.word	0xfffffbff

08011e04 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e10:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	69db      	ldr	r3, [r3, #28]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d10e      	bne.n	8011e38 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	685a      	ldr	r2, [r3, #4]
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2101      	movs	r1, #1
 8011e26:	438a      	bics	r2, r1
 8011e28:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2235      	movs	r2, #53	@ 0x35
 8011e34:	2101      	movs	r1, #1
 8011e36:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	0018      	movs	r0, r3
 8011e3c:	f7f9 fd34 	bl	800b8a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011e40:	46c0      	nop			@ (mov r8, r8)
 8011e42:	46bd      	mov	sp, r7
 8011e44:	b004      	add	sp, #16
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e54:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	0018      	movs	r0, r3
 8011e5a:	f7f9 fd13 	bl	800b884 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011e5e:	46c0      	nop			@ (mov r8, r8)
 8011e60:	46bd      	mov	sp, r7
 8011e62:	b004      	add	sp, #16
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b084      	sub	sp, #16
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e72:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	2103      	movs	r1, #3
 8011e80:	438a      	bics	r2, r1
 8011e82:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2200      	movs	r2, #0
 8011e88:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	2235      	movs	r2, #53	@ 0x35
 8011e94:	2101      	movs	r1, #1
 8011e96:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e9c:	2208      	movs	r2, #8
 8011e9e:	431a      	orrs	r2, r3
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	0018      	movs	r0, r3
 8011ea8:	f7f9 fd4c 	bl	800b944 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011eac:	46c0      	nop			@ (mov r8, r8)
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	b004      	add	sp, #16
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	603b      	str	r3, [r7, #0]
 8011ec0:	1dfb      	adds	r3, r7, #7
 8011ec2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8011ec4:	f7fb fe14 	bl	800daf0 <HAL_GetTick>
 8011ec8:	0003      	movs	r3, r0
 8011eca:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011ecc:	e017      	b.n	8011efe <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	d014      	beq.n	8011efe <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8011ed4:	f7fb fe0c 	bl	800daf0 <HAL_GetTick>
 8011ed8:	0002      	movs	r2, r0
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d902      	bls.n	8011eea <I2S_WaitFlagStateUntilTimeout+0x36>
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d109      	bne.n	8011efe <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2235      	movs	r2, #53	@ 0x35
 8011eee:	2101      	movs	r1, #1
 8011ef0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	2234      	movs	r2, #52	@ 0x34
 8011ef6:	2100      	movs	r1, #0
 8011ef8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011efa:	2303      	movs	r3, #3
 8011efc:	e00f      	b.n	8011f1e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	689b      	ldr	r3, [r3, #8]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	4013      	ands	r3, r2
 8011f08:	68ba      	ldr	r2, [r7, #8]
 8011f0a:	1ad3      	subs	r3, r2, r3
 8011f0c:	425a      	negs	r2, r3
 8011f0e:	4153      	adcs	r3, r2
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	001a      	movs	r2, r3
 8011f14:	1dfb      	adds	r3, r7, #7
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	d1d8      	bne.n	8011ece <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8011f1c:	2300      	movs	r3, #0
}
 8011f1e:	0018      	movs	r0, r3
 8011f20:	46bd      	mov	sp, r7
 8011f22:	b006      	add	sp, #24
 8011f24:	bd80      	pop	{r7, pc}
	...

08011f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f2a:	b08b      	sub	sp, #44	@ 0x2c
 8011f2c:	af06      	add	r7, sp, #24
 8011f2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d101      	bne.n	8011f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011f36:	2301      	movs	r3, #1
 8011f38:	e0f0      	b.n	801211c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	4a79      	ldr	r2, [pc, #484]	@ (8012124 <HAL_PCD_Init+0x1fc>)
 8011f3e:	5c9b      	ldrb	r3, [r3, r2]
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d108      	bne.n	8011f58 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	23aa      	movs	r3, #170	@ 0xaa
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	2100      	movs	r1, #0
 8011f4e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	0018      	movs	r0, r3
 8011f54:	f009 ff0c 	bl	801bd70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	4a72      	ldr	r2, [pc, #456]	@ (8012124 <HAL_PCD_Init+0x1fc>)
 8011f5c:	2103      	movs	r1, #3
 8011f5e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	0018      	movs	r0, r3
 8011f66:	f005 febf 	bl	8017ce8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011f6a:	230f      	movs	r3, #15
 8011f6c:	18fb      	adds	r3, r7, r3
 8011f6e:	2200      	movs	r2, #0
 8011f70:	701a      	strb	r2, [r3, #0]
 8011f72:	e049      	b.n	8012008 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011f74:	200f      	movs	r0, #15
 8011f76:	183b      	adds	r3, r7, r0
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	6879      	ldr	r1, [r7, #4]
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	0013      	movs	r3, r2
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	189b      	adds	r3, r3, r2
 8011f84:	00db      	lsls	r3, r3, #3
 8011f86:	18cb      	adds	r3, r1, r3
 8011f88:	3301      	adds	r3, #1
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011f8e:	183b      	adds	r3, r7, r0
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	6879      	ldr	r1, [r7, #4]
 8011f94:	1c5a      	adds	r2, r3, #1
 8011f96:	0013      	movs	r3, r2
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	189b      	adds	r3, r3, r2
 8011f9c:	00db      	lsls	r3, r3, #3
 8011f9e:	183a      	adds	r2, r7, r0
 8011fa0:	7812      	ldrb	r2, [r2, #0]
 8011fa2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011fa4:	183b      	adds	r3, r7, r0
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	6879      	ldr	r1, [r7, #4]
 8011faa:	1c5a      	adds	r2, r3, #1
 8011fac:	0013      	movs	r3, r2
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	189b      	adds	r3, r3, r2
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	18cb      	adds	r3, r1, r3
 8011fb6:	3303      	adds	r3, #3
 8011fb8:	2200      	movs	r2, #0
 8011fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011fbc:	183b      	adds	r3, r7, r0
 8011fbe:	781a      	ldrb	r2, [r3, #0]
 8011fc0:	6879      	ldr	r1, [r7, #4]
 8011fc2:	0013      	movs	r3, r2
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	189b      	adds	r3, r3, r2
 8011fc8:	00db      	lsls	r3, r3, #3
 8011fca:	18cb      	adds	r3, r1, r3
 8011fcc:	3338      	adds	r3, #56	@ 0x38
 8011fce:	2200      	movs	r2, #0
 8011fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011fd2:	183b      	adds	r3, r7, r0
 8011fd4:	781a      	ldrb	r2, [r3, #0]
 8011fd6:	6879      	ldr	r1, [r7, #4]
 8011fd8:	0013      	movs	r3, r2
 8011fda:	009b      	lsls	r3, r3, #2
 8011fdc:	189b      	adds	r3, r3, r2
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	18cb      	adds	r3, r1, r3
 8011fe2:	333c      	adds	r3, #60	@ 0x3c
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011fe8:	183b      	adds	r3, r7, r0
 8011fea:	781a      	ldrb	r2, [r3, #0]
 8011fec:	6879      	ldr	r1, [r7, #4]
 8011fee:	0013      	movs	r3, r2
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	189b      	adds	r3, r3, r2
 8011ff4:	00db      	lsls	r3, r3, #3
 8011ff6:	18cb      	adds	r3, r1, r3
 8011ff8:	3340      	adds	r3, #64	@ 0x40
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011ffe:	183b      	adds	r3, r7, r0
 8012000:	781a      	ldrb	r2, [r3, #0]
 8012002:	183b      	adds	r3, r7, r0
 8012004:	3201      	adds	r2, #1
 8012006:	701a      	strb	r2, [r3, #0]
 8012008:	210f      	movs	r1, #15
 801200a:	187b      	adds	r3, r7, r1
 801200c:	781a      	ldrb	r2, [r3, #0]
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	685b      	ldr	r3, [r3, #4]
 8012012:	429a      	cmp	r2, r3
 8012014:	d3ae      	bcc.n	8011f74 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012016:	187b      	adds	r3, r7, r1
 8012018:	2200      	movs	r2, #0
 801201a:	701a      	strb	r2, [r3, #0]
 801201c:	e056      	b.n	80120cc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801201e:	240f      	movs	r4, #15
 8012020:	193b      	adds	r3, r7, r4
 8012022:	781a      	ldrb	r2, [r3, #0]
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	236a      	movs	r3, #106	@ 0x6a
 8012028:	33ff      	adds	r3, #255	@ 0xff
 801202a:	0019      	movs	r1, r3
 801202c:	0013      	movs	r3, r2
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	189b      	adds	r3, r3, r2
 8012032:	00db      	lsls	r3, r3, #3
 8012034:	18c3      	adds	r3, r0, r3
 8012036:	185b      	adds	r3, r3, r1
 8012038:	2200      	movs	r2, #0
 801203a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801203c:	193b      	adds	r3, r7, r4
 801203e:	781a      	ldrb	r2, [r3, #0]
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	23b4      	movs	r3, #180	@ 0xb4
 8012044:	0059      	lsls	r1, r3, #1
 8012046:	0013      	movs	r3, r2
 8012048:	009b      	lsls	r3, r3, #2
 801204a:	189b      	adds	r3, r3, r2
 801204c:	00db      	lsls	r3, r3, #3
 801204e:	18c3      	adds	r3, r0, r3
 8012050:	185b      	adds	r3, r3, r1
 8012052:	193a      	adds	r2, r7, r4
 8012054:	7812      	ldrb	r2, [r2, #0]
 8012056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8012058:	193b      	adds	r3, r7, r4
 801205a:	781a      	ldrb	r2, [r3, #0]
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	236c      	movs	r3, #108	@ 0x6c
 8012060:	33ff      	adds	r3, #255	@ 0xff
 8012062:	0019      	movs	r1, r3
 8012064:	0013      	movs	r3, r2
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	189b      	adds	r3, r3, r2
 801206a:	00db      	lsls	r3, r3, #3
 801206c:	18c3      	adds	r3, r0, r3
 801206e:	185b      	adds	r3, r3, r1
 8012070:	2200      	movs	r2, #0
 8012072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8012074:	193b      	adds	r3, r7, r4
 8012076:	781a      	ldrb	r2, [r3, #0]
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	23bc      	movs	r3, #188	@ 0xbc
 801207c:	0059      	lsls	r1, r3, #1
 801207e:	0013      	movs	r3, r2
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	189b      	adds	r3, r3, r2
 8012084:	00db      	lsls	r3, r3, #3
 8012086:	18c3      	adds	r3, r0, r3
 8012088:	185b      	adds	r3, r3, r1
 801208a:	2200      	movs	r2, #0
 801208c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801208e:	193b      	adds	r3, r7, r4
 8012090:	781a      	ldrb	r2, [r3, #0]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	23be      	movs	r3, #190	@ 0xbe
 8012096:	0059      	lsls	r1, r3, #1
 8012098:	0013      	movs	r3, r2
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	189b      	adds	r3, r3, r2
 801209e:	00db      	lsls	r3, r3, #3
 80120a0:	18c3      	adds	r3, r0, r3
 80120a2:	185b      	adds	r3, r3, r1
 80120a4:	2200      	movs	r2, #0
 80120a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80120a8:	193b      	adds	r3, r7, r4
 80120aa:	781a      	ldrb	r2, [r3, #0]
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	23c0      	movs	r3, #192	@ 0xc0
 80120b0:	0059      	lsls	r1, r3, #1
 80120b2:	0013      	movs	r3, r2
 80120b4:	009b      	lsls	r3, r3, #2
 80120b6:	189b      	adds	r3, r3, r2
 80120b8:	00db      	lsls	r3, r3, #3
 80120ba:	18c3      	adds	r3, r0, r3
 80120bc:	185b      	adds	r3, r3, r1
 80120be:	2200      	movs	r2, #0
 80120c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80120c2:	193b      	adds	r3, r7, r4
 80120c4:	781a      	ldrb	r2, [r3, #0]
 80120c6:	193b      	adds	r3, r7, r4
 80120c8:	3201      	adds	r2, #1
 80120ca:	701a      	strb	r2, [r3, #0]
 80120cc:	230f      	movs	r3, #15
 80120ce:	18fb      	adds	r3, r7, r3
 80120d0:	781a      	ldrb	r2, [r3, #0]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d3a1      	bcc.n	801201e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6818      	ldr	r0, [r3, #0]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	466a      	mov	r2, sp
 80120e2:	0011      	movs	r1, r2
 80120e4:	001a      	movs	r2, r3
 80120e6:	3210      	adds	r2, #16
 80120e8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80120ea:	c170      	stmia	r1!, {r4, r5, r6}
 80120ec:	ca30      	ldmia	r2!, {r4, r5}
 80120ee:	c130      	stmia	r1!, {r4, r5}
 80120f0:	6859      	ldr	r1, [r3, #4]
 80120f2:	689a      	ldr	r2, [r3, #8]
 80120f4:	68db      	ldr	r3, [r3, #12]
 80120f6:	f005 fe11 	bl	8017d1c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2224      	movs	r2, #36	@ 0x24
 80120fe:	2100      	movs	r1, #0
 8012100:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4a07      	ldr	r2, [pc, #28]	@ (8012124 <HAL_PCD_Init+0x1fc>)
 8012106:	2101      	movs	r1, #1
 8012108:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	69db      	ldr	r3, [r3, #28]
 801210e:	2b01      	cmp	r3, #1
 8012110:	d103      	bne.n	801211a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	0018      	movs	r0, r3
 8012116:	f001 fd23 	bl	8013b60 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801211a:	2300      	movs	r3, #0
}
 801211c:	0018      	movs	r0, r3
 801211e:	46bd      	mov	sp, r7
 8012120:	b005      	add	sp, #20
 8012122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012124:	000002a9 	.word	0x000002a9

08012128 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012130:	687a      	ldr	r2, [r7, #4]
 8012132:	23aa      	movs	r3, #170	@ 0xaa
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	5cd3      	ldrb	r3, [r2, r3]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d101      	bne.n	8012140 <HAL_PCD_Start+0x18>
 801213c:	2302      	movs	r3, #2
 801213e:	e014      	b.n	801216a <HAL_PCD_Start+0x42>
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	23aa      	movs	r3, #170	@ 0xaa
 8012144:	009b      	lsls	r3, r3, #2
 8012146:	2101      	movs	r1, #1
 8012148:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	0018      	movs	r0, r3
 8012150:	f005 fdb4 	bl	8017cbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	0018      	movs	r0, r3
 801215a:	f007 fdb7 	bl	8019ccc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	23aa      	movs	r3, #170	@ 0xaa
 8012162:	009b      	lsls	r3, r3, #2
 8012164:	2100      	movs	r1, #0
 8012166:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012168:	2300      	movs	r3, #0
}
 801216a:	0018      	movs	r0, r3
 801216c:	46bd      	mov	sp, r7
 801216e:	b002      	add	sp, #8
 8012170:	bd80      	pop	{r7, pc}
	...

08012174 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	0018      	movs	r0, r3
 8012182:	f007 fdb9 	bl	8019cf8 <USB_ReadInterrupts>
 8012186:	0003      	movs	r3, r0
 8012188:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	2380      	movs	r3, #128	@ 0x80
 801218e:	021b      	lsls	r3, r3, #8
 8012190:	4013      	ands	r3, r2
 8012192:	d004      	beq.n	801219e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	0018      	movs	r0, r3
 8012198:	f000 fb62 	bl	8012860 <PCD_EP_ISR_Handler>

    return;
 801219c:	e11d      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	2380      	movs	r3, #128	@ 0x80
 80121a2:	00db      	lsls	r3, r3, #3
 80121a4:	4013      	ands	r3, r2
 80121a6:	d015      	beq.n	80121d4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	2244      	movs	r2, #68	@ 0x44
 80121ae:	5a9b      	ldrh	r3, [r3, r2]
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	498a      	ldr	r1, [pc, #552]	@ (80123e0 <HAL_PCD_IRQHandler+0x26c>)
 80121b8:	400a      	ands	r2, r1
 80121ba:	b291      	uxth	r1, r2
 80121bc:	2244      	movs	r2, #68	@ 0x44
 80121be:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	0018      	movs	r0, r3
 80121c4:	f009 fe57 	bl	801be76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2100      	movs	r1, #0
 80121cc:	0018      	movs	r0, r3
 80121ce:	f000 f915 	bl	80123fc <HAL_PCD_SetAddress>

    return;
 80121d2:	e102      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80121d4:	68fa      	ldr	r2, [r7, #12]
 80121d6:	2380      	movs	r3, #128	@ 0x80
 80121d8:	01db      	lsls	r3, r3, #7
 80121da:	4013      	ands	r3, r2
 80121dc:	d00c      	beq.n	80121f8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2244      	movs	r2, #68	@ 0x44
 80121e4:	5a9b      	ldrh	r3, [r3, r2]
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	497d      	ldr	r1, [pc, #500]	@ (80123e4 <HAL_PCD_IRQHandler+0x270>)
 80121ee:	400a      	ands	r2, r1
 80121f0:	b291      	uxth	r1, r2
 80121f2:	2244      	movs	r2, #68	@ 0x44
 80121f4:	5299      	strh	r1, [r3, r2]

    return;
 80121f6:	e0f0      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	2380      	movs	r3, #128	@ 0x80
 80121fc:	019b      	lsls	r3, r3, #6
 80121fe:	4013      	ands	r3, r2
 8012200:	d00c      	beq.n	801221c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	2244      	movs	r2, #68	@ 0x44
 8012208:	5a9b      	ldrh	r3, [r3, r2]
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	4975      	ldr	r1, [pc, #468]	@ (80123e8 <HAL_PCD_IRQHandler+0x274>)
 8012212:	400a      	ands	r2, r1
 8012214:	b291      	uxth	r1, r2
 8012216:	2244      	movs	r2, #68	@ 0x44
 8012218:	5299      	strh	r1, [r3, r2]

    return;
 801221a:	e0de      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	2380      	movs	r3, #128	@ 0x80
 8012220:	015b      	lsls	r3, r3, #5
 8012222:	4013      	ands	r3, r2
 8012224:	d038      	beq.n	8012298 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	2240      	movs	r2, #64	@ 0x40
 801222c:	5a9b      	ldrh	r3, [r3, r2]
 801222e:	b29a      	uxth	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	2104      	movs	r1, #4
 8012236:	438a      	bics	r2, r1
 8012238:	b291      	uxth	r1, r2
 801223a:	2240      	movs	r2, #64	@ 0x40
 801223c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2240      	movs	r2, #64	@ 0x40
 8012244:	5a9b      	ldrh	r3, [r3, r2]
 8012246:	b29a      	uxth	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2108      	movs	r1, #8
 801224e:	438a      	bics	r2, r1
 8012250:	b291      	uxth	r1, r2
 8012252:	2240      	movs	r2, #64	@ 0x40
 8012254:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	23b8      	movs	r3, #184	@ 0xb8
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	5cd3      	ldrb	r3, [r2, r3]
 801225e:	2b01      	cmp	r3, #1
 8012260:	d109      	bne.n	8012276 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	23b8      	movs	r3, #184	@ 0xb8
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	2100      	movs	r1, #0
 801226a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2100      	movs	r1, #0
 8012270:	0018      	movs	r0, r3
 8012272:	f001 fc9f 	bl	8013bb4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	0018      	movs	r0, r3
 801227a:	f009 fe3d 	bl	801bef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2244      	movs	r2, #68	@ 0x44
 8012284:	5a9b      	ldrh	r3, [r3, r2]
 8012286:	b29a      	uxth	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	4957      	ldr	r1, [pc, #348]	@ (80123ec <HAL_PCD_IRQHandler+0x278>)
 801228e:	400a      	ands	r2, r1
 8012290:	b291      	uxth	r1, r2
 8012292:	2244      	movs	r2, #68	@ 0x44
 8012294:	5299      	strh	r1, [r3, r2]

    return;
 8012296:	e0a0      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	2380      	movs	r3, #128	@ 0x80
 801229c:	011b      	lsls	r3, r3, #4
 801229e:	4013      	ands	r3, r2
 80122a0:	d028      	beq.n	80122f4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2240      	movs	r2, #64	@ 0x40
 80122a8:	5a9b      	ldrh	r3, [r3, r2]
 80122aa:	b29a      	uxth	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2108      	movs	r1, #8
 80122b2:	430a      	orrs	r2, r1
 80122b4:	b291      	uxth	r1, r2
 80122b6:	2240      	movs	r2, #64	@ 0x40
 80122b8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2244      	movs	r2, #68	@ 0x44
 80122c0:	5a9b      	ldrh	r3, [r3, r2]
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4949      	ldr	r1, [pc, #292]	@ (80123f0 <HAL_PCD_IRQHandler+0x27c>)
 80122ca:	400a      	ands	r2, r1
 80122cc:	b291      	uxth	r1, r2
 80122ce:	2244      	movs	r2, #68	@ 0x44
 80122d0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2240      	movs	r2, #64	@ 0x40
 80122d8:	5a9b      	ldrh	r3, [r3, r2]
 80122da:	b29a      	uxth	r2, r3
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2104      	movs	r1, #4
 80122e2:	430a      	orrs	r2, r1
 80122e4:	b291      	uxth	r1, r2
 80122e6:	2240      	movs	r2, #64	@ 0x40
 80122e8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	0018      	movs	r0, r3
 80122ee:	f009 fde7 	bl	801bec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80122f2:	e072      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2280      	movs	r2, #128	@ 0x80
 80122f8:	4013      	ands	r3, r2
 80122fa:	d046      	beq.n	801238a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2244      	movs	r2, #68	@ 0x44
 8012302:	5a9b      	ldrh	r3, [r3, r2]
 8012304:	b29a      	uxth	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	2180      	movs	r1, #128	@ 0x80
 801230c:	438a      	bics	r2, r1
 801230e:	b291      	uxth	r1, r2
 8012310:	2244      	movs	r2, #68	@ 0x44
 8012312:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8012314:	687a      	ldr	r2, [r7, #4]
 8012316:	23b8      	movs	r3, #184	@ 0xb8
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	5cd3      	ldrb	r3, [r2, r3]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d12f      	bne.n	8012380 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	2240      	movs	r2, #64	@ 0x40
 8012326:	5a9b      	ldrh	r3, [r3, r2]
 8012328:	b29a      	uxth	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2104      	movs	r1, #4
 8012330:	430a      	orrs	r2, r1
 8012332:	b291      	uxth	r1, r2
 8012334:	2240      	movs	r2, #64	@ 0x40
 8012336:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2240      	movs	r2, #64	@ 0x40
 801233e:	5a9b      	ldrh	r3, [r3, r2]
 8012340:	b29a      	uxth	r2, r3
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2108      	movs	r1, #8
 8012348:	430a      	orrs	r2, r1
 801234a:	b291      	uxth	r1, r2
 801234c:	2240      	movs	r2, #64	@ 0x40
 801234e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	23b8      	movs	r3, #184	@ 0xb8
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	2101      	movs	r1, #1
 8012358:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2254      	movs	r2, #84	@ 0x54
 8012360:	5a9b      	ldrh	r3, [r3, r2]
 8012362:	b29b      	uxth	r3, r3
 8012364:	089b      	lsrs	r3, r3, #2
 8012366:	223c      	movs	r2, #60	@ 0x3c
 8012368:	4013      	ands	r3, r2
 801236a:	0019      	movs	r1, r3
 801236c:	687a      	ldr	r2, [r7, #4]
 801236e:	23b9      	movs	r3, #185	@ 0xb9
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2101      	movs	r1, #1
 8012378:	0018      	movs	r0, r3
 801237a:	f001 fc1b 	bl	8013bb4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801237e:	e02c      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	0018      	movs	r0, r3
 8012384:	f009 fd9c 	bl	801bec0 <HAL_PCD_SuspendCallback>
    return;
 8012388:	e027      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801238a:	68fa      	ldr	r2, [r7, #12]
 801238c:	2380      	movs	r3, #128	@ 0x80
 801238e:	009b      	lsls	r3, r3, #2
 8012390:	4013      	ands	r3, r2
 8012392:	d010      	beq.n	80123b6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	2244      	movs	r2, #68	@ 0x44
 801239a:	5a9b      	ldrh	r3, [r3, r2]
 801239c:	b29a      	uxth	r2, r3
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	4914      	ldr	r1, [pc, #80]	@ (80123f4 <HAL_PCD_IRQHandler+0x280>)
 80123a4:	400a      	ands	r2, r1
 80123a6:	b291      	uxth	r1, r2
 80123a8:	2244      	movs	r2, #68	@ 0x44
 80123aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	0018      	movs	r0, r3
 80123b0:	f009 fd52 	bl	801be58 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80123b4:	e011      	b.n	80123da <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	2380      	movs	r3, #128	@ 0x80
 80123ba:	005b      	lsls	r3, r3, #1
 80123bc:	4013      	ands	r3, r2
 80123be:	d00c      	beq.n	80123da <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2244      	movs	r2, #68	@ 0x44
 80123c6:	5a9b      	ldrh	r3, [r3, r2]
 80123c8:	b29a      	uxth	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	490a      	ldr	r1, [pc, #40]	@ (80123f8 <HAL_PCD_IRQHandler+0x284>)
 80123d0:	400a      	ands	r2, r1
 80123d2:	b291      	uxth	r1, r2
 80123d4:	2244      	movs	r2, #68	@ 0x44
 80123d6:	5299      	strh	r1, [r3, r2]

    return;
 80123d8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80123da:	46bd      	mov	sp, r7
 80123dc:	b004      	add	sp, #16
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	fffffbff 	.word	0xfffffbff
 80123e4:	ffffbfff 	.word	0xffffbfff
 80123e8:	ffffdfff 	.word	0xffffdfff
 80123ec:	ffffefff 	.word	0xffffefff
 80123f0:	fffff7ff 	.word	0xfffff7ff
 80123f4:	fffffdff 	.word	0xfffffdff
 80123f8:	fffffeff 	.word	0xfffffeff

080123fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	000a      	movs	r2, r1
 8012406:	1cfb      	adds	r3, r7, #3
 8012408:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801240a:	687a      	ldr	r2, [r7, #4]
 801240c:	23aa      	movs	r3, #170	@ 0xaa
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	5cd3      	ldrb	r3, [r2, r3]
 8012412:	2b01      	cmp	r3, #1
 8012414:	d101      	bne.n	801241a <HAL_PCD_SetAddress+0x1e>
 8012416:	2302      	movs	r3, #2
 8012418:	e017      	b.n	801244a <HAL_PCD_SetAddress+0x4e>
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	23aa      	movs	r3, #170	@ 0xaa
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	2101      	movs	r1, #1
 8012422:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	1cfa      	adds	r2, r7, #3
 8012428:	2124      	movs	r1, #36	@ 0x24
 801242a:	7812      	ldrb	r2, [r2, #0]
 801242c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681a      	ldr	r2, [r3, #0]
 8012432:	1cfb      	adds	r3, r7, #3
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	0019      	movs	r1, r3
 8012438:	0010      	movs	r0, r2
 801243a:	f007 fc33 	bl	8019ca4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	23aa      	movs	r3, #170	@ 0xaa
 8012442:	009b      	lsls	r3, r3, #2
 8012444:	2100      	movs	r1, #0
 8012446:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012448:	2300      	movs	r3, #0
}
 801244a:	0018      	movs	r0, r3
 801244c:	46bd      	mov	sp, r7
 801244e:	b002      	add	sp, #8
 8012450:	bd80      	pop	{r7, pc}

08012452 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012452:	b590      	push	{r4, r7, lr}
 8012454:	b085      	sub	sp, #20
 8012456:	af00      	add	r7, sp, #0
 8012458:	6078      	str	r0, [r7, #4]
 801245a:	000c      	movs	r4, r1
 801245c:	0010      	movs	r0, r2
 801245e:	0019      	movs	r1, r3
 8012460:	1cfb      	adds	r3, r7, #3
 8012462:	1c22      	adds	r2, r4, #0
 8012464:	701a      	strb	r2, [r3, #0]
 8012466:	003b      	movs	r3, r7
 8012468:	1c02      	adds	r2, r0, #0
 801246a:	801a      	strh	r2, [r3, #0]
 801246c:	1cbb      	adds	r3, r7, #2
 801246e:	1c0a      	adds	r2, r1, #0
 8012470:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012472:	230b      	movs	r3, #11
 8012474:	18fb      	adds	r3, r7, r3
 8012476:	2200      	movs	r2, #0
 8012478:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801247a:	1cfb      	adds	r3, r7, #3
 801247c:	781b      	ldrb	r3, [r3, #0]
 801247e:	b25b      	sxtb	r3, r3
 8012480:	2b00      	cmp	r3, #0
 8012482:	da0f      	bge.n	80124a4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012484:	1cfb      	adds	r3, r7, #3
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	2207      	movs	r2, #7
 801248a:	4013      	ands	r3, r2
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	0013      	movs	r3, r2
 8012490:	009b      	lsls	r3, r3, #2
 8012492:	189b      	adds	r3, r3, r2
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	687a      	ldr	r2, [r7, #4]
 8012498:	18d3      	adds	r3, r2, r3
 801249a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	2201      	movs	r2, #1
 80124a0:	705a      	strb	r2, [r3, #1]
 80124a2:	e00f      	b.n	80124c4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80124a4:	1cfb      	adds	r3, r7, #3
 80124a6:	781b      	ldrb	r3, [r3, #0]
 80124a8:	2207      	movs	r2, #7
 80124aa:	401a      	ands	r2, r3
 80124ac:	0013      	movs	r3, r2
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	189b      	adds	r3, r3, r2
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	3369      	adds	r3, #105	@ 0x69
 80124b6:	33ff      	adds	r3, #255	@ 0xff
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	18d3      	adds	r3, r2, r3
 80124bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2200      	movs	r2, #0
 80124c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80124c4:	1cfb      	adds	r3, r7, #3
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	2207      	movs	r2, #7
 80124ca:	4013      	ands	r3, r2
 80124cc:	b2da      	uxtb	r2, r3
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80124d2:	003b      	movs	r3, r7
 80124d4:	881a      	ldrh	r2, [r3, #0]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	1cba      	adds	r2, r7, #2
 80124de:	7812      	ldrb	r2, [r2, #0]
 80124e0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80124e2:	1cbb      	adds	r3, r7, #2
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	2b02      	cmp	r3, #2
 80124e8:	d102      	bne.n	80124f0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	2200      	movs	r2, #0
 80124ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80124f0:	687a      	ldr	r2, [r7, #4]
 80124f2:	23aa      	movs	r3, #170	@ 0xaa
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	5cd3      	ldrb	r3, [r2, r3]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d101      	bne.n	8012500 <HAL_PCD_EP_Open+0xae>
 80124fc:	2302      	movs	r3, #2
 80124fe:	e013      	b.n	8012528 <HAL_PCD_EP_Open+0xd6>
 8012500:	687a      	ldr	r2, [r7, #4]
 8012502:	23aa      	movs	r3, #170	@ 0xaa
 8012504:	009b      	lsls	r3, r3, #2
 8012506:	2101      	movs	r1, #1
 8012508:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	68fa      	ldr	r2, [r7, #12]
 8012510:	0011      	movs	r1, r2
 8012512:	0018      	movs	r0, r3
 8012514:	f005 fc2a 	bl	8017d6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012518:	687a      	ldr	r2, [r7, #4]
 801251a:	23aa      	movs	r3, #170	@ 0xaa
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	2100      	movs	r1, #0
 8012520:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012522:	230b      	movs	r3, #11
 8012524:	18fb      	adds	r3, r7, r3
 8012526:	781b      	ldrb	r3, [r3, #0]
}
 8012528:	0018      	movs	r0, r3
 801252a:	46bd      	mov	sp, r7
 801252c:	b005      	add	sp, #20
 801252e:	bd90      	pop	{r4, r7, pc}

08012530 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b084      	sub	sp, #16
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	000a      	movs	r2, r1
 801253a:	1cfb      	adds	r3, r7, #3
 801253c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801253e:	1cfb      	adds	r3, r7, #3
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	b25b      	sxtb	r3, r3
 8012544:	2b00      	cmp	r3, #0
 8012546:	da0f      	bge.n	8012568 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012548:	1cfb      	adds	r3, r7, #3
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	2207      	movs	r2, #7
 801254e:	4013      	ands	r3, r2
 8012550:	1c5a      	adds	r2, r3, #1
 8012552:	0013      	movs	r3, r2
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	189b      	adds	r3, r3, r2
 8012558:	00db      	lsls	r3, r3, #3
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	18d3      	adds	r3, r2, r3
 801255e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	2201      	movs	r2, #1
 8012564:	705a      	strb	r2, [r3, #1]
 8012566:	e00f      	b.n	8012588 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012568:	1cfb      	adds	r3, r7, #3
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	2207      	movs	r2, #7
 801256e:	401a      	ands	r2, r3
 8012570:	0013      	movs	r3, r2
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	189b      	adds	r3, r3, r2
 8012576:	00db      	lsls	r3, r3, #3
 8012578:	3369      	adds	r3, #105	@ 0x69
 801257a:	33ff      	adds	r3, #255	@ 0xff
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	18d3      	adds	r3, r2, r3
 8012580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	2200      	movs	r2, #0
 8012586:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012588:	1cfb      	adds	r3, r7, #3
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	2207      	movs	r2, #7
 801258e:	4013      	ands	r3, r2
 8012590:	b2da      	uxtb	r2, r3
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	23aa      	movs	r3, #170	@ 0xaa
 801259a:	009b      	lsls	r3, r3, #2
 801259c:	5cd3      	ldrb	r3, [r2, r3]
 801259e:	2b01      	cmp	r3, #1
 80125a0:	d101      	bne.n	80125a6 <HAL_PCD_EP_Close+0x76>
 80125a2:	2302      	movs	r3, #2
 80125a4:	e011      	b.n	80125ca <HAL_PCD_EP_Close+0x9a>
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	23aa      	movs	r3, #170	@ 0xaa
 80125aa:	009b      	lsls	r3, r3, #2
 80125ac:	2101      	movs	r1, #1
 80125ae:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	68fa      	ldr	r2, [r7, #12]
 80125b6:	0011      	movs	r1, r2
 80125b8:	0018      	movs	r0, r3
 80125ba:	f005 ff79 	bl	80184b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	23aa      	movs	r3, #170	@ 0xaa
 80125c2:	009b      	lsls	r3, r3, #2
 80125c4:	2100      	movs	r1, #0
 80125c6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80125c8:	2300      	movs	r3, #0
}
 80125ca:	0018      	movs	r0, r3
 80125cc:	46bd      	mov	sp, r7
 80125ce:	b004      	add	sp, #16
 80125d0:	bd80      	pop	{r7, pc}

080125d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b086      	sub	sp, #24
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	60f8      	str	r0, [r7, #12]
 80125da:	607a      	str	r2, [r7, #4]
 80125dc:	603b      	str	r3, [r7, #0]
 80125de:	200b      	movs	r0, #11
 80125e0:	183b      	adds	r3, r7, r0
 80125e2:	1c0a      	adds	r2, r1, #0
 80125e4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80125e6:	0001      	movs	r1, r0
 80125e8:	187b      	adds	r3, r7, r1
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2207      	movs	r2, #7
 80125ee:	401a      	ands	r2, r3
 80125f0:	0013      	movs	r3, r2
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	189b      	adds	r3, r3, r2
 80125f6:	00db      	lsls	r3, r3, #3
 80125f8:	3369      	adds	r3, #105	@ 0x69
 80125fa:	33ff      	adds	r3, #255	@ 0xff
 80125fc:	68fa      	ldr	r2, [r7, #12]
 80125fe:	18d3      	adds	r3, r2, r3
 8012600:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012602:	697b      	ldr	r3, [r7, #20]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	683a      	ldr	r2, [r7, #0]
 801260c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2200      	movs	r2, #0
 8012612:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	2200      	movs	r2, #0
 8012618:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801261a:	187b      	adds	r3, r7, r1
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	2207      	movs	r2, #7
 8012620:	4013      	ands	r3, r2
 8012622:	b2da      	uxtb	r2, r3
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	697a      	ldr	r2, [r7, #20]
 801262e:	0011      	movs	r1, r2
 8012630:	0018      	movs	r0, r3
 8012632:	f006 f8fd 	bl	8018830 <USB_EPStartXfer>

  return HAL_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	0018      	movs	r0, r3
 801263a:	46bd      	mov	sp, r7
 801263c:	b006      	add	sp, #24
 801263e:	bd80      	pop	{r7, pc}

08012640 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	000a      	movs	r2, r1
 801264a:	1cfb      	adds	r3, r7, #3
 801264c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801264e:	1cfb      	adds	r3, r7, #3
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	2207      	movs	r2, #7
 8012654:	401a      	ands	r2, r3
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	23c2      	movs	r3, #194	@ 0xc2
 801265a:	0059      	lsls	r1, r3, #1
 801265c:	0013      	movs	r3, r2
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	189b      	adds	r3, r3, r2
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	18c3      	adds	r3, r0, r3
 8012666:	185b      	adds	r3, r3, r1
 8012668:	681b      	ldr	r3, [r3, #0]
}
 801266a:	0018      	movs	r0, r3
 801266c:	46bd      	mov	sp, r7
 801266e:	b002      	add	sp, #8
 8012670:	bd80      	pop	{r7, pc}

08012672 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012672:	b580      	push	{r7, lr}
 8012674:	b086      	sub	sp, #24
 8012676:	af00      	add	r7, sp, #0
 8012678:	60f8      	str	r0, [r7, #12]
 801267a:	607a      	str	r2, [r7, #4]
 801267c:	603b      	str	r3, [r7, #0]
 801267e:	200b      	movs	r0, #11
 8012680:	183b      	adds	r3, r7, r0
 8012682:	1c0a      	adds	r2, r1, #0
 8012684:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012686:	183b      	adds	r3, r7, r0
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	2207      	movs	r2, #7
 801268c:	4013      	ands	r3, r2
 801268e:	1c5a      	adds	r2, r3, #1
 8012690:	0013      	movs	r3, r2
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	189b      	adds	r3, r3, r2
 8012696:	00db      	lsls	r3, r3, #3
 8012698:	68fa      	ldr	r2, [r7, #12]
 801269a:	18d3      	adds	r3, r2, r3
 801269c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	687a      	ldr	r2, [r7, #4]
 80126a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	683a      	ldr	r2, [r7, #0]
 80126a8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	2224      	movs	r2, #36	@ 0x24
 80126ae:	2101      	movs	r1, #1
 80126b0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	683a      	ldr	r2, [r7, #0]
 80126b6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	2200      	movs	r2, #0
 80126bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	2201      	movs	r2, #1
 80126c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80126c4:	183b      	adds	r3, r7, r0
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	2207      	movs	r2, #7
 80126ca:	4013      	ands	r3, r2
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	697a      	ldr	r2, [r7, #20]
 80126d8:	0011      	movs	r1, r2
 80126da:	0018      	movs	r0, r3
 80126dc:	f006 f8a8 	bl	8018830 <USB_EPStartXfer>

  return HAL_OK;
 80126e0:	2300      	movs	r3, #0
}
 80126e2:	0018      	movs	r0, r3
 80126e4:	46bd      	mov	sp, r7
 80126e6:	b006      	add	sp, #24
 80126e8:	bd80      	pop	{r7, pc}

080126ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80126ea:	b580      	push	{r7, lr}
 80126ec:	b084      	sub	sp, #16
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	6078      	str	r0, [r7, #4]
 80126f2:	000a      	movs	r2, r1
 80126f4:	1cfb      	adds	r3, r7, #3
 80126f6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80126f8:	1cfb      	adds	r3, r7, #3
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	2207      	movs	r2, #7
 80126fe:	401a      	ands	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	429a      	cmp	r2, r3
 8012706:	d901      	bls.n	801270c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012708:	2301      	movs	r3, #1
 801270a:	e046      	b.n	801279a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801270c:	1cfb      	adds	r3, r7, #3
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	b25b      	sxtb	r3, r3
 8012712:	2b00      	cmp	r3, #0
 8012714:	da0f      	bge.n	8012736 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012716:	1cfb      	adds	r3, r7, #3
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	2207      	movs	r2, #7
 801271c:	4013      	ands	r3, r2
 801271e:	1c5a      	adds	r2, r3, #1
 8012720:	0013      	movs	r3, r2
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	189b      	adds	r3, r3, r2
 8012726:	00db      	lsls	r3, r3, #3
 8012728:	687a      	ldr	r2, [r7, #4]
 801272a:	18d3      	adds	r3, r2, r3
 801272c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2201      	movs	r2, #1
 8012732:	705a      	strb	r2, [r3, #1]
 8012734:	e00d      	b.n	8012752 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012736:	1cfb      	adds	r3, r7, #3
 8012738:	781a      	ldrb	r2, [r3, #0]
 801273a:	0013      	movs	r3, r2
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	189b      	adds	r3, r3, r2
 8012740:	00db      	lsls	r3, r3, #3
 8012742:	3369      	adds	r3, #105	@ 0x69
 8012744:	33ff      	adds	r3, #255	@ 0xff
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	18d3      	adds	r3, r2, r3
 801274a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	2200      	movs	r2, #0
 8012750:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2201      	movs	r2, #1
 8012756:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012758:	1cfb      	adds	r3, r7, #3
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	2207      	movs	r2, #7
 801275e:	4013      	ands	r3, r2
 8012760:	b2da      	uxtb	r2, r3
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	23aa      	movs	r3, #170	@ 0xaa
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	5cd3      	ldrb	r3, [r2, r3]
 801276e:	2b01      	cmp	r3, #1
 8012770:	d101      	bne.n	8012776 <HAL_PCD_EP_SetStall+0x8c>
 8012772:	2302      	movs	r3, #2
 8012774:	e011      	b.n	801279a <HAL_PCD_EP_SetStall+0xb0>
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	23aa      	movs	r3, #170	@ 0xaa
 801277a:	009b      	lsls	r3, r3, #2
 801277c:	2101      	movs	r1, #1
 801277e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	0011      	movs	r1, r2
 8012788:	0018      	movs	r0, r3
 801278a:	f007 f989 	bl	8019aa0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	23aa      	movs	r3, #170	@ 0xaa
 8012792:	009b      	lsls	r3, r3, #2
 8012794:	2100      	movs	r1, #0
 8012796:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012798:	2300      	movs	r3, #0
}
 801279a:	0018      	movs	r0, r3
 801279c:	46bd      	mov	sp, r7
 801279e:	b004      	add	sp, #16
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80127a2:	b580      	push	{r7, lr}
 80127a4:	b084      	sub	sp, #16
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
 80127aa:	000a      	movs	r2, r1
 80127ac:	1cfb      	adds	r3, r7, #3
 80127ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80127b0:	1cfb      	adds	r3, r7, #3
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	220f      	movs	r2, #15
 80127b6:	401a      	ands	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	429a      	cmp	r2, r3
 80127be:	d901      	bls.n	80127c4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80127c0:	2301      	movs	r3, #1
 80127c2:	e048      	b.n	8012856 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80127c4:	1cfb      	adds	r3, r7, #3
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	b25b      	sxtb	r3, r3
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	da0f      	bge.n	80127ee <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80127ce:	1cfb      	adds	r3, r7, #3
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	2207      	movs	r2, #7
 80127d4:	4013      	ands	r3, r2
 80127d6:	1c5a      	adds	r2, r3, #1
 80127d8:	0013      	movs	r3, r2
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	189b      	adds	r3, r3, r2
 80127de:	00db      	lsls	r3, r3, #3
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	18d3      	adds	r3, r2, r3
 80127e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2201      	movs	r2, #1
 80127ea:	705a      	strb	r2, [r3, #1]
 80127ec:	e00f      	b.n	801280e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80127ee:	1cfb      	adds	r3, r7, #3
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	2207      	movs	r2, #7
 80127f4:	401a      	ands	r2, r3
 80127f6:	0013      	movs	r3, r2
 80127f8:	009b      	lsls	r3, r3, #2
 80127fa:	189b      	adds	r3, r3, r2
 80127fc:	00db      	lsls	r3, r3, #3
 80127fe:	3369      	adds	r3, #105	@ 0x69
 8012800:	33ff      	adds	r3, #255	@ 0xff
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	18d3      	adds	r3, r2, r3
 8012806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2200      	movs	r2, #0
 801280c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	2200      	movs	r2, #0
 8012812:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012814:	1cfb      	adds	r3, r7, #3
 8012816:	781b      	ldrb	r3, [r3, #0]
 8012818:	2207      	movs	r2, #7
 801281a:	4013      	ands	r3, r2
 801281c:	b2da      	uxtb	r2, r3
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	23aa      	movs	r3, #170	@ 0xaa
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	5cd3      	ldrb	r3, [r2, r3]
 801282a:	2b01      	cmp	r3, #1
 801282c:	d101      	bne.n	8012832 <HAL_PCD_EP_ClrStall+0x90>
 801282e:	2302      	movs	r3, #2
 8012830:	e011      	b.n	8012856 <HAL_PCD_EP_ClrStall+0xb4>
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	23aa      	movs	r3, #170	@ 0xaa
 8012836:	009b      	lsls	r3, r3, #2
 8012838:	2101      	movs	r1, #1
 801283a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	68fa      	ldr	r2, [r7, #12]
 8012842:	0011      	movs	r1, r2
 8012844:	0018      	movs	r0, r3
 8012846:	f007 f97b 	bl	8019b40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	23aa      	movs	r3, #170	@ 0xaa
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	2100      	movs	r1, #0
 8012852:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012854:	2300      	movs	r3, #0
}
 8012856:	0018      	movs	r0, r3
 8012858:	46bd      	mov	sp, r7
 801285a:	b004      	add	sp, #16
 801285c:	bd80      	pop	{r7, pc}
	...

08012860 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8012860:	b5b0      	push	{r4, r5, r7, lr}
 8012862:	b096      	sub	sp, #88	@ 0x58
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012868:	f000 fbec 	bl	8013044 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681a      	ldr	r2, [r3, #0]
 8012870:	204e      	movs	r0, #78	@ 0x4e
 8012872:	183b      	adds	r3, r7, r0
 8012874:	2144      	movs	r1, #68	@ 0x44
 8012876:	5a52      	ldrh	r2, [r2, r1]
 8012878:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801287a:	183b      	adds	r3, r7, r0
 801287c:	881b      	ldrh	r3, [r3, #0]
 801287e:	b2da      	uxtb	r2, r3
 8012880:	244d      	movs	r4, #77	@ 0x4d
 8012882:	193b      	adds	r3, r7, r4
 8012884:	210f      	movs	r1, #15
 8012886:	400a      	ands	r2, r1
 8012888:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801288a:	193b      	adds	r3, r7, r4
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d000      	beq.n	8012894 <PCD_EP_ISR_Handler+0x34>
 8012892:	e18f      	b.n	8012bb4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012894:	183b      	adds	r3, r7, r0
 8012896:	881b      	ldrh	r3, [r3, #0]
 8012898:	2210      	movs	r2, #16
 801289a:	4013      	ands	r3, r2
 801289c:	d155      	bne.n	801294a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	200e      	movs	r0, #14
 80128a8:	183b      	adds	r3, r7, r0
 80128aa:	49bb      	ldr	r1, [pc, #748]	@ (8012b98 <PCD_EP_ISR_Handler+0x338>)
 80128ac:	400a      	ands	r2, r1
 80128ae:	801a      	strh	r2, [r3, #0]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	183a      	adds	r2, r7, r0
 80128b6:	8812      	ldrh	r2, [r2, #0]
 80128b8:	49b8      	ldr	r1, [pc, #736]	@ (8012b9c <PCD_EP_ISR_Handler+0x33c>)
 80128ba:	430a      	orrs	r2, r1
 80128bc:	b292      	uxth	r2, r2
 80128be:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	3328      	adds	r3, #40	@ 0x28
 80128c4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2250      	movs	r2, #80	@ 0x50
 80128cc:	5a9b      	ldrh	r3, [r3, r2]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	001a      	movs	r2, r3
 80128d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	00db      	lsls	r3, r3, #3
 80128d8:	18d2      	adds	r2, r2, r3
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	18d3      	adds	r3, r2, r3
 80128e0:	4aaf      	ldr	r2, [pc, #700]	@ (8012ba0 <PCD_EP_ISR_Handler+0x340>)
 80128e2:	4694      	mov	ip, r2
 80128e4:	4463      	add	r3, ip
 80128e6:	881b      	ldrh	r3, [r3, #0]
 80128e8:	059b      	lsls	r3, r3, #22
 80128ea:	0d9a      	lsrs	r2, r3, #22
 80128ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80128f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128f2:	695a      	ldr	r2, [r3, #20]
 80128f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128f6:	69db      	ldr	r3, [r3, #28]
 80128f8:	18d2      	adds	r2, r2, r3
 80128fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128fc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2100      	movs	r1, #0
 8012902:	0018      	movs	r0, r3
 8012904:	f009 fa8a 	bl	801be1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2224      	movs	r2, #36	@ 0x24
 801290c:	5c9b      	ldrb	r3, [r3, r2]
 801290e:	b2db      	uxtb	r3, r3
 8012910:	2b00      	cmp	r3, #0
 8012912:	d101      	bne.n	8012918 <PCD_EP_ISR_Handler+0xb8>
 8012914:	f000 fb96 	bl	8013044 <PCD_EP_ISR_Handler+0x7e4>
 8012918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801291a:	699b      	ldr	r3, [r3, #24]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <PCD_EP_ISR_Handler+0xc4>
 8012920:	f000 fb90 	bl	8013044 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2224      	movs	r2, #36	@ 0x24
 8012928:	5c9b      	ldrb	r3, [r3, r2]
 801292a:	b2db      	uxtb	r3, r3
 801292c:	2280      	movs	r2, #128	@ 0x80
 801292e:	4252      	negs	r2, r2
 8012930:	4313      	orrs	r3, r2
 8012932:	b2da      	uxtb	r2, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	0011      	movs	r1, r2
 801293a:	224c      	movs	r2, #76	@ 0x4c
 801293c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2224      	movs	r2, #36	@ 0x24
 8012942:	2100      	movs	r1, #0
 8012944:	5499      	strb	r1, [r3, r2]
 8012946:	f000 fb7d 	bl	8013044 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3369      	adds	r3, #105	@ 0x69
 801294e:	33ff      	adds	r3, #255	@ 0xff
 8012950:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	214a      	movs	r1, #74	@ 0x4a
 8012958:	187b      	adds	r3, r7, r1
 801295a:	8812      	ldrh	r2, [r2, #0]
 801295c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801295e:	187b      	adds	r3, r7, r1
 8012960:	881a      	ldrh	r2, [r3, #0]
 8012962:	2380      	movs	r3, #128	@ 0x80
 8012964:	011b      	lsls	r3, r3, #4
 8012966:	4013      	ands	r3, r2
 8012968:	d037      	beq.n	80129da <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2250      	movs	r2, #80	@ 0x50
 8012970:	5a9b      	ldrh	r3, [r3, r2]
 8012972:	b29b      	uxth	r3, r3
 8012974:	001a      	movs	r2, r3
 8012976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	00db      	lsls	r3, r3, #3
 801297c:	18d2      	adds	r2, r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	18d3      	adds	r3, r2, r3
 8012984:	4a87      	ldr	r2, [pc, #540]	@ (8012ba4 <PCD_EP_ISR_Handler+0x344>)
 8012986:	4694      	mov	ip, r2
 8012988:	4463      	add	r3, ip
 801298a:	881b      	ldrh	r3, [r3, #0]
 801298c:	059b      	lsls	r3, r3, #22
 801298e:	0d9a      	lsrs	r2, r3, #22
 8012990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012992:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6818      	ldr	r0, [r3, #0]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	22ac      	movs	r2, #172	@ 0xac
 801299c:	0092      	lsls	r2, r2, #2
 801299e:	1899      	adds	r1, r3, r2
 80129a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129a2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80129a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129a6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	f007 f9fc 	bl	8019da6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	881b      	ldrh	r3, [r3, #0]
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	2010      	movs	r0, #16
 80129b8:	183b      	adds	r3, r7, r0
 80129ba:	497b      	ldr	r1, [pc, #492]	@ (8012ba8 <PCD_EP_ISR_Handler+0x348>)
 80129bc:	400a      	ands	r2, r1
 80129be:	801a      	strh	r2, [r3, #0]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	183a      	adds	r2, r7, r0
 80129c6:	8812      	ldrh	r2, [r2, #0]
 80129c8:	2180      	movs	r1, #128	@ 0x80
 80129ca:	430a      	orrs	r2, r1
 80129cc:	b292      	uxth	r2, r2
 80129ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	0018      	movs	r0, r3
 80129d4:	f009 f9ec 	bl	801bdb0 <HAL_PCD_SetupStageCallback>
 80129d8:	e334      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80129da:	234a      	movs	r3, #74	@ 0x4a
 80129dc:	18fb      	adds	r3, r7, r3
 80129de:	2200      	movs	r2, #0
 80129e0:	5e9b      	ldrsh	r3, [r3, r2]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	db00      	blt.n	80129e8 <PCD_EP_ISR_Handler+0x188>
 80129e6:	e32d      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	881b      	ldrh	r3, [r3, #0]
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	201e      	movs	r0, #30
 80129f2:	183b      	adds	r3, r7, r0
 80129f4:	496c      	ldr	r1, [pc, #432]	@ (8012ba8 <PCD_EP_ISR_Handler+0x348>)
 80129f6:	400a      	ands	r2, r1
 80129f8:	801a      	strh	r2, [r3, #0]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	183a      	adds	r2, r7, r0
 8012a00:	8812      	ldrh	r2, [r2, #0]
 8012a02:	2180      	movs	r1, #128	@ 0x80
 8012a04:	430a      	orrs	r2, r1
 8012a06:	b292      	uxth	r2, r2
 8012a08:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	2250      	movs	r2, #80	@ 0x50
 8012a10:	5a9b      	ldrh	r3, [r3, r2]
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	001a      	movs	r2, r3
 8012a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	00db      	lsls	r3, r3, #3
 8012a1c:	18d2      	adds	r2, r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	18d3      	adds	r3, r2, r3
 8012a24:	4a5f      	ldr	r2, [pc, #380]	@ (8012ba4 <PCD_EP_ISR_Handler+0x344>)
 8012a26:	4694      	mov	ip, r2
 8012a28:	4463      	add	r3, ip
 8012a2a:	881b      	ldrh	r3, [r3, #0]
 8012a2c:	059b      	lsls	r3, r3, #22
 8012a2e:	0d9a      	lsrs	r2, r3, #22
 8012a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a32:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8012a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a36:	69db      	ldr	r3, [r3, #28]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d01a      	beq.n	8012a72 <PCD_EP_ISR_Handler+0x212>
 8012a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a3e:	695b      	ldr	r3, [r3, #20]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d016      	beq.n	8012a72 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	6818      	ldr	r0, [r3, #0]
 8012a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a4a:	6959      	ldr	r1, [r3, #20]
 8012a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a4e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8012a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a52:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	f007 f9a6 	bl	8019da6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8012a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a5c:	695a      	ldr	r2, [r3, #20]
 8012a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a60:	69db      	ldr	r3, [r3, #28]
 8012a62:	18d2      	adds	r2, r2, r3
 8012a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a66:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2100      	movs	r1, #0
 8012a6c:	0018      	movs	r0, r3
 8012a6e:	f009 f9b4 	bl	801bdda <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	214a      	movs	r1, #74	@ 0x4a
 8012a78:	187b      	adds	r3, r7, r1
 8012a7a:	8812      	ldrh	r2, [r2, #0]
 8012a7c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8012a7e:	187b      	adds	r3, r7, r1
 8012a80:	881a      	ldrh	r2, [r3, #0]
 8012a82:	2380      	movs	r3, #128	@ 0x80
 8012a84:	011b      	lsls	r3, r3, #4
 8012a86:	4013      	ands	r3, r2
 8012a88:	d000      	beq.n	8012a8c <PCD_EP_ISR_Handler+0x22c>
 8012a8a:	e2db      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
 8012a8c:	187b      	adds	r3, r7, r1
 8012a8e:	881a      	ldrh	r2, [r3, #0]
 8012a90:	23c0      	movs	r3, #192	@ 0xc0
 8012a92:	019b      	lsls	r3, r3, #6
 8012a94:	401a      	ands	r2, r3
 8012a96:	23c0      	movs	r3, #192	@ 0xc0
 8012a98:	019b      	lsls	r3, r3, #6
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d100      	bne.n	8012aa0 <PCD_EP_ISR_Handler+0x240>
 8012a9e:	e2d1      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	61bb      	str	r3, [r7, #24]
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2250      	movs	r2, #80	@ 0x50
 8012aac:	5a9b      	ldrh	r3, [r3, r2]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	001a      	movs	r2, r3
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	189b      	adds	r3, r3, r2
 8012ab6:	61bb      	str	r3, [r7, #24]
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	4a3a      	ldr	r2, [pc, #232]	@ (8012ba4 <PCD_EP_ISR_Handler+0x344>)
 8012abc:	4694      	mov	ip, r2
 8012abe:	4463      	add	r3, ip
 8012ac0:	617b      	str	r3, [r7, #20]
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	881b      	ldrh	r3, [r3, #0]
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	059b      	lsls	r3, r3, #22
 8012aca:	0d9b      	lsrs	r3, r3, #22
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	697b      	ldr	r3, [r7, #20]
 8012ad0:	801a      	strh	r2, [r3, #0]
 8012ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ad4:	691b      	ldr	r3, [r3, #16]
 8012ad6:	2b3e      	cmp	r3, #62	@ 0x3e
 8012ad8:	d91a      	bls.n	8012b10 <PCD_EP_ISR_Handler+0x2b0>
 8012ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012adc:	691b      	ldr	r3, [r3, #16]
 8012ade:	095b      	lsrs	r3, r3, #5
 8012ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ae4:	691b      	ldr	r3, [r3, #16]
 8012ae6:	221f      	movs	r2, #31
 8012ae8:	4013      	ands	r3, r2
 8012aea:	d102      	bne.n	8012af2 <PCD_EP_ISR_Handler+0x292>
 8012aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012aee:	3b01      	subs	r3, #1
 8012af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	029b      	lsls	r3, r3, #10
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	4313      	orrs	r3, r2
 8012b02:	b29b      	uxth	r3, r3
 8012b04:	4a25      	ldr	r2, [pc, #148]	@ (8012b9c <PCD_EP_ISR_Handler+0x33c>)
 8012b06:	4313      	orrs	r3, r2
 8012b08:	b29a      	uxth	r2, r3
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	801a      	strh	r2, [r3, #0]
 8012b0e:	e023      	b.n	8012b58 <PCD_EP_ISR_Handler+0x2f8>
 8012b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b12:	691b      	ldr	r3, [r3, #16]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d108      	bne.n	8012b2a <PCD_EP_ISR_Handler+0x2ca>
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	881b      	ldrh	r3, [r3, #0]
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8012b9c <PCD_EP_ISR_Handler+0x33c>)
 8012b20:	4313      	orrs	r3, r2
 8012b22:	b29a      	uxth	r2, r3
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	801a      	strh	r2, [r3, #0]
 8012b28:	e016      	b.n	8012b58 <PCD_EP_ISR_Handler+0x2f8>
 8012b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b2c:	691b      	ldr	r3, [r3, #16]
 8012b2e:	085b      	lsrs	r3, r3, #1
 8012b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b34:	691b      	ldr	r3, [r3, #16]
 8012b36:	2201      	movs	r2, #1
 8012b38:	4013      	ands	r3, r2
 8012b3a:	d002      	beq.n	8012b42 <PCD_EP_ISR_Handler+0x2e2>
 8012b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012b3e:	3301      	adds	r3, #1
 8012b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	881b      	ldrh	r3, [r3, #0]
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	029b      	lsls	r3, r3, #10
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	4313      	orrs	r3, r2
 8012b52:	b29a      	uxth	r2, r3
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	b29a      	uxth	r2, r3
 8012b60:	2012      	movs	r0, #18
 8012b62:	183b      	adds	r3, r7, r0
 8012b64:	4911      	ldr	r1, [pc, #68]	@ (8012bac <PCD_EP_ISR_Handler+0x34c>)
 8012b66:	400a      	ands	r2, r1
 8012b68:	801a      	strh	r2, [r3, #0]
 8012b6a:	183b      	adds	r3, r7, r0
 8012b6c:	183a      	adds	r2, r7, r0
 8012b6e:	8812      	ldrh	r2, [r2, #0]
 8012b70:	2180      	movs	r1, #128	@ 0x80
 8012b72:	0149      	lsls	r1, r1, #5
 8012b74:	404a      	eors	r2, r1
 8012b76:	801a      	strh	r2, [r3, #0]
 8012b78:	183b      	adds	r3, r7, r0
 8012b7a:	183a      	adds	r2, r7, r0
 8012b7c:	8812      	ldrh	r2, [r2, #0]
 8012b7e:	2180      	movs	r1, #128	@ 0x80
 8012b80:	0189      	lsls	r1, r1, #6
 8012b82:	404a      	eors	r2, r1
 8012b84:	801a      	strh	r2, [r3, #0]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	183a      	adds	r2, r7, r0
 8012b8c:	8812      	ldrh	r2, [r2, #0]
 8012b8e:	4908      	ldr	r1, [pc, #32]	@ (8012bb0 <PCD_EP_ISR_Handler+0x350>)
 8012b90:	430a      	orrs	r2, r1
 8012b92:	b292      	uxth	r2, r2
 8012b94:	801a      	strh	r2, [r3, #0]
 8012b96:	e255      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
 8012b98:	ffff8f0f 	.word	0xffff8f0f
 8012b9c:	ffff8000 	.word	0xffff8000
 8012ba0:	00000402 	.word	0x00000402
 8012ba4:	00000406 	.word	0x00000406
 8012ba8:	00000f8f 	.word	0x00000f8f
 8012bac:	ffffbf8f 	.word	0xffffbf8f
 8012bb0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	001a      	movs	r2, r3
 8012bba:	204d      	movs	r0, #77	@ 0x4d
 8012bbc:	183b      	adds	r3, r7, r0
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	18d2      	adds	r2, r2, r3
 8012bc4:	214a      	movs	r1, #74	@ 0x4a
 8012bc6:	187b      	adds	r3, r7, r1
 8012bc8:	8812      	ldrh	r2, [r2, #0]
 8012bca:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012bcc:	187b      	adds	r3, r7, r1
 8012bce:	2200      	movs	r2, #0
 8012bd0:	5e9b      	ldrsh	r3, [r3, r2]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	db00      	blt.n	8012bd8 <PCD_EP_ISR_Handler+0x378>
 8012bd6:	e0fa      	b.n	8012dce <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	001a      	movs	r2, r3
 8012bde:	183b      	adds	r3, r7, r0
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	009b      	lsls	r3, r3, #2
 8012be4:	18d3      	adds	r3, r2, r3
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	2448      	movs	r4, #72	@ 0x48
 8012bec:	193b      	adds	r3, r7, r4
 8012bee:	49d1      	ldr	r1, [pc, #836]	@ (8012f34 <PCD_EP_ISR_Handler+0x6d4>)
 8012bf0:	400a      	ands	r2, r1
 8012bf2:	801a      	strh	r2, [r3, #0]
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	001a      	movs	r2, r3
 8012bfa:	183b      	adds	r3, r7, r0
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	18d3      	adds	r3, r2, r3
 8012c02:	193a      	adds	r2, r7, r4
 8012c04:	8812      	ldrh	r2, [r2, #0]
 8012c06:	2180      	movs	r1, #128	@ 0x80
 8012c08:	430a      	orrs	r2, r1
 8012c0a:	b292      	uxth	r2, r2
 8012c0c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8012c0e:	183b      	adds	r3, r7, r0
 8012c10:	781a      	ldrb	r2, [r3, #0]
 8012c12:	0013      	movs	r3, r2
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	189b      	adds	r3, r3, r2
 8012c18:	00db      	lsls	r3, r3, #3
 8012c1a:	3369      	adds	r3, #105	@ 0x69
 8012c1c:	33ff      	adds	r3, #255	@ 0xff
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	18d3      	adds	r3, r2, r3
 8012c22:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8012c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c26:	7b1b      	ldrb	r3, [r3, #12]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d125      	bne.n	8012c78 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2250      	movs	r2, #80	@ 0x50
 8012c32:	5a9b      	ldrh	r3, [r3, r2]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	001a      	movs	r2, r3
 8012c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	00db      	lsls	r3, r3, #3
 8012c3e:	18d2      	adds	r2, r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	18d3      	adds	r3, r2, r3
 8012c46:	4abc      	ldr	r2, [pc, #752]	@ (8012f38 <PCD_EP_ISR_Handler+0x6d8>)
 8012c48:	4694      	mov	ip, r2
 8012c4a:	4463      	add	r3, ip
 8012c4c:	881a      	ldrh	r2, [r3, #0]
 8012c4e:	2450      	movs	r4, #80	@ 0x50
 8012c50:	193b      	adds	r3, r7, r4
 8012c52:	0592      	lsls	r2, r2, #22
 8012c54:	0d92      	lsrs	r2, r2, #22
 8012c56:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8012c58:	193b      	adds	r3, r7, r4
 8012c5a:	881b      	ldrh	r3, [r3, #0]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d100      	bne.n	8012c62 <PCD_EP_ISR_Handler+0x402>
 8012c60:	e08d      	b.n	8012d7e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6818      	ldr	r0, [r3, #0]
 8012c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c68:	6959      	ldr	r1, [r3, #20]
 8012c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c6c:	88da      	ldrh	r2, [r3, #6]
 8012c6e:	193b      	adds	r3, r7, r4
 8012c70:	881b      	ldrh	r3, [r3, #0]
 8012c72:	f007 f898 	bl	8019da6 <USB_ReadPMA>
 8012c76:	e082      	b.n	8012d7e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8012c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c7a:	78db      	ldrb	r3, [r3, #3]
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	d10c      	bne.n	8012c9a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8012c80:	2350      	movs	r3, #80	@ 0x50
 8012c82:	18fc      	adds	r4, r7, r3
 8012c84:	234a      	movs	r3, #74	@ 0x4a
 8012c86:	18fb      	adds	r3, r7, r3
 8012c88:	881a      	ldrh	r2, [r3, #0]
 8012c8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	0018      	movs	r0, r3
 8012c90:	f000 f9ec 	bl	801306c <HAL_PCD_EP_DB_Receive>
 8012c94:	0003      	movs	r3, r0
 8012c96:	8023      	strh	r3, [r4, #0]
 8012c98:	e071      	b.n	8012d7e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	001a      	movs	r2, r3
 8012ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	18d3      	adds	r3, r2, r3
 8012ca8:	881b      	ldrh	r3, [r3, #0]
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	2052      	movs	r0, #82	@ 0x52
 8012cae:	183b      	adds	r3, r7, r0
 8012cb0:	49a2      	ldr	r1, [pc, #648]	@ (8012f3c <PCD_EP_ISR_Handler+0x6dc>)
 8012cb2:	400a      	ands	r2, r1
 8012cb4:	801a      	strh	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	001a      	movs	r2, r3
 8012cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	009b      	lsls	r3, r3, #2
 8012cc2:	18d3      	adds	r3, r2, r3
 8012cc4:	183a      	adds	r2, r7, r0
 8012cc6:	8812      	ldrh	r2, [r2, #0]
 8012cc8:	499d      	ldr	r1, [pc, #628]	@ (8012f40 <PCD_EP_ISR_Handler+0x6e0>)
 8012cca:	430a      	orrs	r2, r1
 8012ccc:	b292      	uxth	r2, r2
 8012cce:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	001a      	movs	r2, r3
 8012cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	18d3      	adds	r3, r2, r3
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	001a      	movs	r2, r3
 8012ce4:	2380      	movs	r3, #128	@ 0x80
 8012ce6:	01db      	lsls	r3, r3, #7
 8012ce8:	4013      	ands	r3, r2
 8012cea:	d024      	beq.n	8012d36 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2250      	movs	r2, #80	@ 0x50
 8012cf2:	5a9b      	ldrh	r3, [r3, r2]
 8012cf4:	b29b      	uxth	r3, r3
 8012cf6:	001a      	movs	r2, r3
 8012cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	18d2      	adds	r2, r2, r3
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	18d3      	adds	r3, r2, r3
 8012d06:	4a8f      	ldr	r2, [pc, #572]	@ (8012f44 <PCD_EP_ISR_Handler+0x6e4>)
 8012d08:	4694      	mov	ip, r2
 8012d0a:	4463      	add	r3, ip
 8012d0c:	881a      	ldrh	r2, [r3, #0]
 8012d0e:	2450      	movs	r4, #80	@ 0x50
 8012d10:	193b      	adds	r3, r7, r4
 8012d12:	0592      	lsls	r2, r2, #22
 8012d14:	0d92      	lsrs	r2, r2, #22
 8012d16:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8012d18:	193b      	adds	r3, r7, r4
 8012d1a:	881b      	ldrh	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d02e      	beq.n	8012d7e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6818      	ldr	r0, [r3, #0]
 8012d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d26:	6959      	ldr	r1, [r3, #20]
 8012d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d2a:	891a      	ldrh	r2, [r3, #8]
 8012d2c:	193b      	adds	r3, r7, r4
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	f007 f839 	bl	8019da6 <USB_ReadPMA>
 8012d34:	e023      	b.n	8012d7e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2250      	movs	r2, #80	@ 0x50
 8012d3c:	5a9b      	ldrh	r3, [r3, r2]
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	001a      	movs	r2, r3
 8012d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	00db      	lsls	r3, r3, #3
 8012d48:	18d2      	adds	r2, r2, r3
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	18d3      	adds	r3, r2, r3
 8012d50:	4a79      	ldr	r2, [pc, #484]	@ (8012f38 <PCD_EP_ISR_Handler+0x6d8>)
 8012d52:	4694      	mov	ip, r2
 8012d54:	4463      	add	r3, ip
 8012d56:	881a      	ldrh	r2, [r3, #0]
 8012d58:	2450      	movs	r4, #80	@ 0x50
 8012d5a:	193b      	adds	r3, r7, r4
 8012d5c:	0592      	lsls	r2, r2, #22
 8012d5e:	0d92      	lsrs	r2, r2, #22
 8012d60:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8012d62:	193b      	adds	r3, r7, r4
 8012d64:	881b      	ldrh	r3, [r3, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d009      	beq.n	8012d7e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6818      	ldr	r0, [r3, #0]
 8012d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d70:	6959      	ldr	r1, [r3, #20]
 8012d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d74:	895a      	ldrh	r2, [r3, #10]
 8012d76:	193b      	adds	r3, r7, r4
 8012d78:	881b      	ldrh	r3, [r3, #0]
 8012d7a:	f007 f814 	bl	8019da6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8012d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d80:	69da      	ldr	r2, [r3, #28]
 8012d82:	2150      	movs	r1, #80	@ 0x50
 8012d84:	187b      	adds	r3, r7, r1
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	18d2      	adds	r2, r2, r3
 8012d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8012d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d90:	695a      	ldr	r2, [r3, #20]
 8012d92:	187b      	adds	r3, r7, r1
 8012d94:	881b      	ldrh	r3, [r3, #0]
 8012d96:	18d2      	adds	r2, r2, r3
 8012d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8012d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d9e:	699b      	ldr	r3, [r3, #24]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d005      	beq.n	8012db0 <PCD_EP_ISR_Handler+0x550>
 8012da4:	187b      	adds	r3, r7, r1
 8012da6:	881a      	ldrh	r2, [r3, #0]
 8012da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012daa:	691b      	ldr	r3, [r3, #16]
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d207      	bcs.n	8012dc0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8012db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012db2:	781a      	ldrb	r2, [r3, #0]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	0011      	movs	r1, r2
 8012db8:	0018      	movs	r0, r3
 8012dba:	f009 f80e 	bl	801bdda <HAL_PCD_DataOutStageCallback>
 8012dbe:	e006      	b.n	8012dce <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012dc6:	0011      	movs	r1, r2
 8012dc8:	0018      	movs	r0, r3
 8012dca:	f005 fd31 	bl	8018830 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8012dce:	244a      	movs	r4, #74	@ 0x4a
 8012dd0:	193b      	adds	r3, r7, r4
 8012dd2:	881b      	ldrh	r3, [r3, #0]
 8012dd4:	2280      	movs	r2, #128	@ 0x80
 8012dd6:	4013      	ands	r3, r2
 8012dd8:	d100      	bne.n	8012ddc <PCD_EP_ISR_Handler+0x57c>
 8012dda:	e133      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8012ddc:	204d      	movs	r0, #77	@ 0x4d
 8012dde:	183b      	adds	r3, r7, r0
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	1c5a      	adds	r2, r3, #1
 8012de4:	0013      	movs	r3, r2
 8012de6:	009b      	lsls	r3, r3, #2
 8012de8:	189b      	adds	r3, r3, r2
 8012dea:	00db      	lsls	r3, r3, #3
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	18d3      	adds	r3, r2, r3
 8012df0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	001a      	movs	r2, r3
 8012df8:	183b      	adds	r3, r7, r0
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	18d3      	adds	r3, r2, r3
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	2542      	movs	r5, #66	@ 0x42
 8012e06:	197b      	adds	r3, r7, r5
 8012e08:	494f      	ldr	r1, [pc, #316]	@ (8012f48 <PCD_EP_ISR_Handler+0x6e8>)
 8012e0a:	400a      	ands	r2, r1
 8012e0c:	801a      	strh	r2, [r3, #0]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	001a      	movs	r2, r3
 8012e14:	183b      	adds	r3, r7, r0
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	009b      	lsls	r3, r3, #2
 8012e1a:	18d3      	adds	r3, r2, r3
 8012e1c:	197a      	adds	r2, r7, r5
 8012e1e:	8812      	ldrh	r2, [r2, #0]
 8012e20:	494a      	ldr	r1, [pc, #296]	@ (8012f4c <PCD_EP_ISR_Handler+0x6ec>)
 8012e22:	430a      	orrs	r2, r1
 8012e24:	b292      	uxth	r2, r2
 8012e26:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8012e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e2a:	78db      	ldrb	r3, [r3, #3]
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d000      	beq.n	8012e32 <PCD_EP_ISR_Handler+0x5d2>
 8012e30:	e0af      	b.n	8012f92 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8012e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e34:	2200      	movs	r2, #0
 8012e36:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8012e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e3a:	7b1b      	ldrb	r3, [r3, #12]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d100      	bne.n	8012e42 <PCD_EP_ISR_Handler+0x5e2>
 8012e40:	e09f      	b.n	8012f82 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012e42:	193b      	adds	r3, r7, r4
 8012e44:	881b      	ldrh	r3, [r3, #0]
 8012e46:	2240      	movs	r2, #64	@ 0x40
 8012e48:	4013      	ands	r3, r2
 8012e4a:	d046      	beq.n	8012eda <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e4e:	785b      	ldrb	r3, [r3, #1]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d125      	bne.n	8012ea0 <PCD_EP_ISR_Handler+0x640>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2250      	movs	r2, #80	@ 0x50
 8012e60:	5a9b      	ldrh	r3, [r3, r2]
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	001a      	movs	r2, r3
 8012e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e68:	189b      	adds	r3, r3, r2
 8012e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	00da      	lsls	r2, r3, #3
 8012e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e74:	18d3      	adds	r3, r2, r3
 8012e76:	4a33      	ldr	r2, [pc, #204]	@ (8012f44 <PCD_EP_ISR_Handler+0x6e4>)
 8012e78:	4694      	mov	ip, r2
 8012e7a:	4463      	add	r3, ip
 8012e7c:	623b      	str	r3, [r7, #32]
 8012e7e:	6a3b      	ldr	r3, [r7, #32]
 8012e80:	881b      	ldrh	r3, [r3, #0]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	059b      	lsls	r3, r3, #22
 8012e86:	0d9b      	lsrs	r3, r3, #22
 8012e88:	b29a      	uxth	r2, r3
 8012e8a:	6a3b      	ldr	r3, [r7, #32]
 8012e8c:	801a      	strh	r2, [r3, #0]
 8012e8e:	6a3b      	ldr	r3, [r7, #32]
 8012e90:	881b      	ldrh	r3, [r3, #0]
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	4a2d      	ldr	r2, [pc, #180]	@ (8012f4c <PCD_EP_ISR_Handler+0x6ec>)
 8012e96:	4313      	orrs	r3, r2
 8012e98:	b29a      	uxth	r2, r3
 8012e9a:	6a3b      	ldr	r3, [r7, #32]
 8012e9c:	801a      	strh	r2, [r3, #0]
 8012e9e:	e070      	b.n	8012f82 <PCD_EP_ISR_Handler+0x722>
 8012ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ea2:	785b      	ldrb	r3, [r3, #1]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d16c      	bne.n	8012f82 <PCD_EP_ISR_Handler+0x722>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2250      	movs	r2, #80	@ 0x50
 8012eb4:	5a9b      	ldrh	r3, [r3, r2]
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	001a      	movs	r2, r3
 8012eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ebc:	189b      	adds	r3, r3, r2
 8012ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	00da      	lsls	r2, r3, #3
 8012ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec8:	18d3      	adds	r3, r2, r3
 8012eca:	4a1e      	ldr	r2, [pc, #120]	@ (8012f44 <PCD_EP_ISR_Handler+0x6e4>)
 8012ecc:	4694      	mov	ip, r2
 8012ece:	4463      	add	r3, ip
 8012ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	801a      	strh	r2, [r3, #0]
 8012ed8:	e053      	b.n	8012f82 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ee2:	785b      	ldrb	r3, [r3, #1]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d133      	bne.n	8012f50 <PCD_EP_ISR_Handler+0x6f0>
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2250      	movs	r2, #80	@ 0x50
 8012ef4:	5a9b      	ldrh	r3, [r3, r2]
 8012ef6:	b29b      	uxth	r3, r3
 8012ef8:	001a      	movs	r2, r3
 8012efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012efc:	189b      	adds	r3, r3, r2
 8012efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8012f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	00da      	lsls	r2, r3, #3
 8012f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f08:	18d3      	adds	r3, r2, r3
 8012f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8012f38 <PCD_EP_ISR_Handler+0x6d8>)
 8012f0c:	4694      	mov	ip, r2
 8012f0e:	4463      	add	r3, ip
 8012f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8012f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f14:	881b      	ldrh	r3, [r3, #0]
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	059b      	lsls	r3, r3, #22
 8012f1a:	0d9b      	lsrs	r3, r3, #22
 8012f1c:	b29a      	uxth	r2, r3
 8012f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f20:	801a      	strh	r2, [r3, #0]
 8012f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	b29b      	uxth	r3, r3
 8012f28:	4a08      	ldr	r2, [pc, #32]	@ (8012f4c <PCD_EP_ISR_Handler+0x6ec>)
 8012f2a:	4313      	orrs	r3, r2
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f30:	801a      	strh	r2, [r3, #0]
 8012f32:	e026      	b.n	8012f82 <PCD_EP_ISR_Handler+0x722>
 8012f34:	00000f8f 	.word	0x00000f8f
 8012f38:	00000406 	.word	0x00000406
 8012f3c:	ffff8f8f 	.word	0xffff8f8f
 8012f40:	ffff80c0 	.word	0xffff80c0
 8012f44:	00000402 	.word	0x00000402
 8012f48:	ffff8f0f 	.word	0xffff8f0f
 8012f4c:	ffff8000 	.word	0xffff8000
 8012f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f52:	785b      	ldrb	r3, [r3, #1]
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d114      	bne.n	8012f82 <PCD_EP_ISR_Handler+0x722>
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2250      	movs	r2, #80	@ 0x50
 8012f5e:	5a9b      	ldrh	r3, [r3, r2]
 8012f60:	b29b      	uxth	r3, r3
 8012f62:	001a      	movs	r2, r3
 8012f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f66:	189b      	adds	r3, r3, r2
 8012f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	00da      	lsls	r2, r3, #3
 8012f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f72:	18d3      	adds	r3, r2, r3
 8012f74:	4a3b      	ldr	r2, [pc, #236]	@ (8013064 <PCD_EP_ISR_Handler+0x804>)
 8012f76:	4694      	mov	ip, r2
 8012f78:	4463      	add	r3, ip
 8012f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f7e:	2200      	movs	r2, #0
 8012f80:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f84:	781a      	ldrb	r2, [r3, #0]
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	0011      	movs	r1, r2
 8012f8a:	0018      	movs	r0, r3
 8012f8c:	f008 ff46 	bl	801be1c <HAL_PCD_DataInStageCallback>
 8012f90:	e058      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8012f92:	234a      	movs	r3, #74	@ 0x4a
 8012f94:	18fb      	adds	r3, r7, r3
 8012f96:	881a      	ldrh	r2, [r3, #0]
 8012f98:	2380      	movs	r3, #128	@ 0x80
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	4013      	ands	r3, r2
 8012f9e:	d149      	bne.n	8013034 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	2250      	movs	r2, #80	@ 0x50
 8012fa6:	5a9b      	ldrh	r3, [r3, r2]
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	001a      	movs	r2, r3
 8012fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fae:	781b      	ldrb	r3, [r3, #0]
 8012fb0:	00db      	lsls	r3, r3, #3
 8012fb2:	18d2      	adds	r2, r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	18d3      	adds	r3, r2, r3
 8012fba:	4a2b      	ldr	r2, [pc, #172]	@ (8013068 <PCD_EP_ISR_Handler+0x808>)
 8012fbc:	4694      	mov	ip, r2
 8012fbe:	4463      	add	r3, ip
 8012fc0:	881a      	ldrh	r2, [r3, #0]
 8012fc2:	2140      	movs	r1, #64	@ 0x40
 8012fc4:	187b      	adds	r3, r7, r1
 8012fc6:	0592      	lsls	r2, r2, #22
 8012fc8:	0d92      	lsrs	r2, r2, #22
 8012fca:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8012fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fce:	699a      	ldr	r2, [r3, #24]
 8012fd0:	187b      	adds	r3, r7, r1
 8012fd2:	881b      	ldrh	r3, [r3, #0]
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d907      	bls.n	8012fe8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8012fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fda:	699a      	ldr	r2, [r3, #24]
 8012fdc:	187b      	adds	r3, r7, r1
 8012fde:	881b      	ldrh	r3, [r3, #0]
 8012fe0:	1ad2      	subs	r2, r2, r3
 8012fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fe4:	619a      	str	r2, [r3, #24]
 8012fe6:	e002      	b.n	8012fee <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8012fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fea:	2200      	movs	r2, #0
 8012fec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8012fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ff0:	699b      	ldr	r3, [r3, #24]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d107      	bne.n	8013006 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ff8:	781a      	ldrb	r2, [r3, #0]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	0011      	movs	r1, r2
 8012ffe:	0018      	movs	r0, r3
 8013000:	f008 ff0c 	bl	801be1c <HAL_PCD_DataInStageCallback>
 8013004:	e01e      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8013006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013008:	695a      	ldr	r2, [r3, #20]
 801300a:	2140      	movs	r1, #64	@ 0x40
 801300c:	187b      	adds	r3, r7, r1
 801300e:	881b      	ldrh	r3, [r3, #0]
 8013010:	18d2      	adds	r2, r2, r3
 8013012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013014:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8013016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013018:	69da      	ldr	r2, [r3, #28]
 801301a:	187b      	adds	r3, r7, r1
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	18d2      	adds	r2, r2, r3
 8013020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013022:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801302a:	0011      	movs	r1, r2
 801302c:	0018      	movs	r0, r3
 801302e:	f005 fbff 	bl	8018830 <USB_EPStartXfer>
 8013032:	e007      	b.n	8013044 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8013034:	234a      	movs	r3, #74	@ 0x4a
 8013036:	18fb      	adds	r3, r7, r3
 8013038:	881a      	ldrh	r2, [r3, #0]
 801303a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	0018      	movs	r0, r3
 8013040:	f000 f930 	bl	80132a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2244      	movs	r2, #68	@ 0x44
 801304a:	5a9b      	ldrh	r3, [r3, r2]
 801304c:	b29b      	uxth	r3, r3
 801304e:	b21b      	sxth	r3, r3
 8013050:	2b00      	cmp	r3, #0
 8013052:	da01      	bge.n	8013058 <PCD_EP_ISR_Handler+0x7f8>
 8013054:	f7ff fc0a 	bl	801286c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8013058:	2300      	movs	r3, #0
}
 801305a:	0018      	movs	r0, r3
 801305c:	46bd      	mov	sp, r7
 801305e:	b016      	add	sp, #88	@ 0x58
 8013060:	bdb0      	pop	{r4, r5, r7, pc}
 8013062:	46c0      	nop			@ (mov r8, r8)
 8013064:	00000406 	.word	0x00000406
 8013068:	00000402 	.word	0x00000402

0801306c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801306c:	b590      	push	{r4, r7, lr}
 801306e:	b089      	sub	sp, #36	@ 0x24
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	1dbb      	adds	r3, r7, #6
 8013078:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801307a:	1dbb      	adds	r3, r7, #6
 801307c:	881a      	ldrh	r2, [r3, #0]
 801307e:	2380      	movs	r3, #128	@ 0x80
 8013080:	01db      	lsls	r3, r3, #7
 8013082:	4013      	ands	r3, r2
 8013084:	d100      	bne.n	8013088 <HAL_PCD_EP_DB_Receive+0x1c>
 8013086:	e07d      	b.n	8013184 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	2250      	movs	r2, #80	@ 0x50
 801308e:	5a9b      	ldrh	r3, [r3, r2]
 8013090:	b29b      	uxth	r3, r3
 8013092:	001a      	movs	r2, r3
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	00db      	lsls	r3, r3, #3
 801309a:	18d2      	adds	r2, r2, r3
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	18d3      	adds	r3, r2, r3
 80130a2:	4a7a      	ldr	r2, [pc, #488]	@ (801328c <HAL_PCD_EP_DB_Receive+0x220>)
 80130a4:	4694      	mov	ip, r2
 80130a6:	4463      	add	r3, ip
 80130a8:	881a      	ldrh	r2, [r3, #0]
 80130aa:	211a      	movs	r1, #26
 80130ac:	187b      	adds	r3, r7, r1
 80130ae:	0592      	lsls	r2, r2, #22
 80130b0:	0d92      	lsrs	r2, r2, #22
 80130b2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80130b4:	68bb      	ldr	r3, [r7, #8]
 80130b6:	699a      	ldr	r2, [r3, #24]
 80130b8:	187b      	adds	r3, r7, r1
 80130ba:	881b      	ldrh	r3, [r3, #0]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d307      	bcc.n	80130d0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	699a      	ldr	r2, [r3, #24]
 80130c4:	187b      	adds	r3, r7, r1
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	1ad2      	subs	r2, r2, r3
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	619a      	str	r2, [r3, #24]
 80130ce:	e002      	b.n	80130d6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	2200      	movs	r2, #0
 80130d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	699b      	ldr	r3, [r3, #24]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d121      	bne.n	8013122 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	001a      	movs	r2, r3
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	009b      	lsls	r3, r3, #2
 80130ea:	18d3      	adds	r3, r2, r3
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	b29a      	uxth	r2, r3
 80130f0:	2018      	movs	r0, #24
 80130f2:	183b      	adds	r3, r7, r0
 80130f4:	4966      	ldr	r1, [pc, #408]	@ (8013290 <HAL_PCD_EP_DB_Receive+0x224>)
 80130f6:	400a      	ands	r2, r1
 80130f8:	801a      	strh	r2, [r3, #0]
 80130fa:	183b      	adds	r3, r7, r0
 80130fc:	183a      	adds	r2, r7, r0
 80130fe:	8812      	ldrh	r2, [r2, #0]
 8013100:	2180      	movs	r1, #128	@ 0x80
 8013102:	0189      	lsls	r1, r1, #6
 8013104:	404a      	eors	r2, r1
 8013106:	801a      	strh	r2, [r3, #0]
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	001a      	movs	r2, r3
 801310e:	68bb      	ldr	r3, [r7, #8]
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	009b      	lsls	r3, r3, #2
 8013114:	18d3      	adds	r3, r2, r3
 8013116:	183a      	adds	r2, r7, r0
 8013118:	8812      	ldrh	r2, [r2, #0]
 801311a:	495e      	ldr	r1, [pc, #376]	@ (8013294 <HAL_PCD_EP_DB_Receive+0x228>)
 801311c:	430a      	orrs	r2, r1
 801311e:	b292      	uxth	r2, r2
 8013120:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013122:	1dbb      	adds	r3, r7, #6
 8013124:	881b      	ldrh	r3, [r3, #0]
 8013126:	2240      	movs	r2, #64	@ 0x40
 8013128:	4013      	ands	r3, r2
 801312a:	d01a      	beq.n	8013162 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	001a      	movs	r2, r3
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	18d3      	adds	r3, r2, r3
 801313a:	881b      	ldrh	r3, [r3, #0]
 801313c:	b29a      	uxth	r2, r3
 801313e:	2016      	movs	r0, #22
 8013140:	183b      	adds	r3, r7, r0
 8013142:	4955      	ldr	r1, [pc, #340]	@ (8013298 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013144:	400a      	ands	r2, r1
 8013146:	801a      	strh	r2, [r3, #0]
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	001a      	movs	r2, r3
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	18d3      	adds	r3, r2, r3
 8013156:	183a      	adds	r2, r7, r0
 8013158:	8812      	ldrh	r2, [r2, #0]
 801315a:	4950      	ldr	r1, [pc, #320]	@ (801329c <HAL_PCD_EP_DB_Receive+0x230>)
 801315c:	430a      	orrs	r2, r1
 801315e:	b292      	uxth	r2, r2
 8013160:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013162:	241a      	movs	r4, #26
 8013164:	193b      	adds	r3, r7, r4
 8013166:	881b      	ldrh	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d100      	bne.n	801316e <HAL_PCD_EP_DB_Receive+0x102>
 801316c:	e086      	b.n	801327c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	6818      	ldr	r0, [r3, #0]
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	6959      	ldr	r1, [r3, #20]
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	891a      	ldrh	r2, [r3, #8]
 801317a:	193b      	adds	r3, r7, r4
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	f006 fe12 	bl	8019da6 <USB_ReadPMA>
 8013182:	e07b      	b.n	801327c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2250      	movs	r2, #80	@ 0x50
 801318a:	5a9b      	ldrh	r3, [r3, r2]
 801318c:	b29b      	uxth	r3, r3
 801318e:	001a      	movs	r2, r3
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	00db      	lsls	r3, r3, #3
 8013196:	18d2      	adds	r2, r2, r3
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	18d3      	adds	r3, r2, r3
 801319e:	4a40      	ldr	r2, [pc, #256]	@ (80132a0 <HAL_PCD_EP_DB_Receive+0x234>)
 80131a0:	4694      	mov	ip, r2
 80131a2:	4463      	add	r3, ip
 80131a4:	881a      	ldrh	r2, [r3, #0]
 80131a6:	211a      	movs	r1, #26
 80131a8:	187b      	adds	r3, r7, r1
 80131aa:	0592      	lsls	r2, r2, #22
 80131ac:	0d92      	lsrs	r2, r2, #22
 80131ae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	699a      	ldr	r2, [r3, #24]
 80131b4:	187b      	adds	r3, r7, r1
 80131b6:	881b      	ldrh	r3, [r3, #0]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d307      	bcc.n	80131cc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	699a      	ldr	r2, [r3, #24]
 80131c0:	187b      	adds	r3, r7, r1
 80131c2:	881b      	ldrh	r3, [r3, #0]
 80131c4:	1ad2      	subs	r2, r2, r3
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	619a      	str	r2, [r3, #24]
 80131ca:	e002      	b.n	80131d2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	2200      	movs	r2, #0
 80131d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	699b      	ldr	r3, [r3, #24]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d121      	bne.n	801321e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	001a      	movs	r2, r3
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	18d3      	adds	r3, r2, r3
 80131e8:	881b      	ldrh	r3, [r3, #0]
 80131ea:	b29a      	uxth	r2, r3
 80131ec:	201e      	movs	r0, #30
 80131ee:	183b      	adds	r3, r7, r0
 80131f0:	4927      	ldr	r1, [pc, #156]	@ (8013290 <HAL_PCD_EP_DB_Receive+0x224>)
 80131f2:	400a      	ands	r2, r1
 80131f4:	801a      	strh	r2, [r3, #0]
 80131f6:	183b      	adds	r3, r7, r0
 80131f8:	183a      	adds	r2, r7, r0
 80131fa:	8812      	ldrh	r2, [r2, #0]
 80131fc:	2180      	movs	r1, #128	@ 0x80
 80131fe:	0189      	lsls	r1, r1, #6
 8013200:	404a      	eors	r2, r1
 8013202:	801a      	strh	r2, [r3, #0]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	001a      	movs	r2, r3
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	009b      	lsls	r3, r3, #2
 8013210:	18d3      	adds	r3, r2, r3
 8013212:	183a      	adds	r2, r7, r0
 8013214:	8812      	ldrh	r2, [r2, #0]
 8013216:	491f      	ldr	r1, [pc, #124]	@ (8013294 <HAL_PCD_EP_DB_Receive+0x228>)
 8013218:	430a      	orrs	r2, r1
 801321a:	b292      	uxth	r2, r2
 801321c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801321e:	1dbb      	adds	r3, r7, #6
 8013220:	881b      	ldrh	r3, [r3, #0]
 8013222:	2240      	movs	r2, #64	@ 0x40
 8013224:	4013      	ands	r3, r2
 8013226:	d11a      	bne.n	801325e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	001a      	movs	r2, r3
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	18d3      	adds	r3, r2, r3
 8013236:	881b      	ldrh	r3, [r3, #0]
 8013238:	b29a      	uxth	r2, r3
 801323a:	201c      	movs	r0, #28
 801323c:	183b      	adds	r3, r7, r0
 801323e:	4916      	ldr	r1, [pc, #88]	@ (8013298 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013240:	400a      	ands	r2, r1
 8013242:	801a      	strh	r2, [r3, #0]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	001a      	movs	r2, r3
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	18d3      	adds	r3, r2, r3
 8013252:	183a      	adds	r2, r7, r0
 8013254:	8812      	ldrh	r2, [r2, #0]
 8013256:	4911      	ldr	r1, [pc, #68]	@ (801329c <HAL_PCD_EP_DB_Receive+0x230>)
 8013258:	430a      	orrs	r2, r1
 801325a:	b292      	uxth	r2, r2
 801325c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801325e:	241a      	movs	r4, #26
 8013260:	193b      	adds	r3, r7, r4
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d009      	beq.n	801327c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	6818      	ldr	r0, [r3, #0]
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	6959      	ldr	r1, [r3, #20]
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	895a      	ldrh	r2, [r3, #10]
 8013274:	193b      	adds	r3, r7, r4
 8013276:	881b      	ldrh	r3, [r3, #0]
 8013278:	f006 fd95 	bl	8019da6 <USB_ReadPMA>
    }
  }

  return count;
 801327c:	231a      	movs	r3, #26
 801327e:	18fb      	adds	r3, r7, r3
 8013280:	881b      	ldrh	r3, [r3, #0]
}
 8013282:	0018      	movs	r0, r3
 8013284:	46bd      	mov	sp, r7
 8013286:	b009      	add	sp, #36	@ 0x24
 8013288:	bd90      	pop	{r4, r7, pc}
 801328a:	46c0      	nop			@ (mov r8, r8)
 801328c:	00000402 	.word	0x00000402
 8013290:	ffffbf8f 	.word	0xffffbf8f
 8013294:	ffff8080 	.word	0xffff8080
 8013298:	ffff8f8f 	.word	0xffff8f8f
 801329c:	ffff80c0 	.word	0xffff80c0
 80132a0:	00000406 	.word	0x00000406

080132a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b0a4      	sub	sp, #144	@ 0x90
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	1dbb      	adds	r3, r7, #6
 80132b0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80132b2:	1dbb      	adds	r3, r7, #6
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	2240      	movs	r2, #64	@ 0x40
 80132b8:	4013      	ands	r3, r2
 80132ba:	d100      	bne.n	80132be <HAL_PCD_EP_DB_Transmit+0x1a>
 80132bc:	e1e4      	b.n	8013688 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2250      	movs	r2, #80	@ 0x50
 80132c4:	5a9b      	ldrh	r3, [r3, r2]
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	001a      	movs	r2, r3
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	00db      	lsls	r3, r3, #3
 80132d0:	18d2      	adds	r2, r2, r3
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	18d3      	adds	r3, r2, r3
 80132d8:	4ad0      	ldr	r2, [pc, #832]	@ (801361c <HAL_PCD_EP_DB_Transmit+0x378>)
 80132da:	4694      	mov	ip, r2
 80132dc:	4463      	add	r3, ip
 80132de:	881a      	ldrh	r2, [r3, #0]
 80132e0:	2186      	movs	r1, #134	@ 0x86
 80132e2:	187b      	adds	r3, r7, r1
 80132e4:	0592      	lsls	r2, r2, #22
 80132e6:	0d92      	lsrs	r2, r2, #22
 80132e8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	699a      	ldr	r2, [r3, #24]
 80132ee:	187b      	adds	r3, r7, r1
 80132f0:	881b      	ldrh	r3, [r3, #0]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d907      	bls.n	8013306 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	699a      	ldr	r2, [r3, #24]
 80132fa:	187b      	adds	r3, r7, r1
 80132fc:	881b      	ldrh	r3, [r3, #0]
 80132fe:	1ad2      	subs	r2, r2, r3
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	619a      	str	r2, [r3, #24]
 8013304:	e002      	b.n	801330c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	2200      	movs	r2, #0
 801330a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	699b      	ldr	r3, [r3, #24]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d000      	beq.n	8013316 <HAL_PCD_EP_DB_Transmit+0x72>
 8013314:	e0b5      	b.n	8013482 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	785b      	ldrb	r3, [r3, #1]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d125      	bne.n	801336a <HAL_PCD_EP_DB_Transmit+0xc6>
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	2250      	movs	r2, #80	@ 0x50
 801332a:	5a9b      	ldrh	r3, [r3, r2]
 801332c:	b29b      	uxth	r3, r3
 801332e:	001a      	movs	r2, r3
 8013330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013332:	189b      	adds	r3, r3, r2
 8013334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	00da      	lsls	r2, r3, #3
 801333c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801333e:	18d3      	adds	r3, r2, r3
 8013340:	4ab6      	ldr	r2, [pc, #728]	@ (801361c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013342:	4694      	mov	ip, r2
 8013344:	4463      	add	r3, ip
 8013346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801334a:	881b      	ldrh	r3, [r3, #0]
 801334c:	b29b      	uxth	r3, r3
 801334e:	059b      	lsls	r3, r3, #22
 8013350:	0d9b      	lsrs	r3, r3, #22
 8013352:	b29a      	uxth	r2, r3
 8013354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013356:	801a      	strh	r2, [r3, #0]
 8013358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801335a:	881b      	ldrh	r3, [r3, #0]
 801335c:	b29b      	uxth	r3, r3
 801335e:	4ab0      	ldr	r2, [pc, #704]	@ (8013620 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013360:	4313      	orrs	r3, r2
 8013362:	b29a      	uxth	r2, r3
 8013364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013366:	801a      	strh	r2, [r3, #0]
 8013368:	e01b      	b.n	80133a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	785b      	ldrb	r3, [r3, #1]
 801336e:	2b01      	cmp	r3, #1
 8013370:	d117      	bne.n	80133a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	637b      	str	r3, [r7, #52]	@ 0x34
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	2250      	movs	r2, #80	@ 0x50
 801337e:	5a9b      	ldrh	r3, [r3, r2]
 8013380:	b29b      	uxth	r3, r3
 8013382:	001a      	movs	r2, r3
 8013384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013386:	189b      	adds	r3, r3, r2
 8013388:	637b      	str	r3, [r7, #52]	@ 0x34
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	00da      	lsls	r2, r3, #3
 8013390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013392:	18d3      	adds	r3, r2, r3
 8013394:	4aa1      	ldr	r2, [pc, #644]	@ (801361c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013396:	4694      	mov	ip, r2
 8013398:	4463      	add	r3, ip
 801339a:	633b      	str	r3, [r7, #48]	@ 0x30
 801339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801339e:	2200      	movs	r2, #0
 80133a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	785b      	ldrb	r3, [r3, #1]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d125      	bne.n	80133fc <HAL_PCD_EP_DB_Transmit+0x158>
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	61fb      	str	r3, [r7, #28]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2250      	movs	r2, #80	@ 0x50
 80133bc:	5a9b      	ldrh	r3, [r3, r2]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	001a      	movs	r2, r3
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	189b      	adds	r3, r3, r2
 80133c6:	61fb      	str	r3, [r7, #28]
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	00da      	lsls	r2, r3, #3
 80133ce:	69fb      	ldr	r3, [r7, #28]
 80133d0:	18d3      	adds	r3, r2, r3
 80133d2:	4a94      	ldr	r2, [pc, #592]	@ (8013624 <HAL_PCD_EP_DB_Transmit+0x380>)
 80133d4:	4694      	mov	ip, r2
 80133d6:	4463      	add	r3, ip
 80133d8:	61bb      	str	r3, [r7, #24]
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	881b      	ldrh	r3, [r3, #0]
 80133de:	b29b      	uxth	r3, r3
 80133e0:	059b      	lsls	r3, r3, #22
 80133e2:	0d9b      	lsrs	r3, r3, #22
 80133e4:	b29a      	uxth	r2, r3
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	801a      	strh	r2, [r3, #0]
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	881b      	ldrh	r3, [r3, #0]
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	4a8b      	ldr	r2, [pc, #556]	@ (8013620 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80133f2:	4313      	orrs	r3, r2
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	801a      	strh	r2, [r3, #0]
 80133fa:	e018      	b.n	801342e <HAL_PCD_EP_DB_Transmit+0x18a>
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	785b      	ldrb	r3, [r3, #1]
 8013400:	2b01      	cmp	r3, #1
 8013402:	d114      	bne.n	801342e <HAL_PCD_EP_DB_Transmit+0x18a>
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2250      	movs	r2, #80	@ 0x50
 801340a:	5a9b      	ldrh	r3, [r3, r2]
 801340c:	b29b      	uxth	r3, r3
 801340e:	001a      	movs	r2, r3
 8013410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013412:	189b      	adds	r3, r3, r2
 8013414:	627b      	str	r3, [r7, #36]	@ 0x24
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	00da      	lsls	r2, r3, #3
 801341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801341e:	18d3      	adds	r3, r2, r3
 8013420:	4a80      	ldr	r2, [pc, #512]	@ (8013624 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013422:	4694      	mov	ip, r2
 8013424:	4463      	add	r3, ip
 8013426:	623b      	str	r3, [r7, #32]
 8013428:	6a3b      	ldr	r3, [r7, #32]
 801342a:	2200      	movs	r2, #0
 801342c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	781a      	ldrb	r2, [r3, #0]
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	0011      	movs	r1, r2
 8013436:	0018      	movs	r0, r3
 8013438:	f008 fcf0 	bl	801be1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801343c:	1dbb      	adds	r3, r7, #6
 801343e:	881a      	ldrh	r2, [r3, #0]
 8013440:	2380      	movs	r3, #128	@ 0x80
 8013442:	01db      	lsls	r3, r3, #7
 8013444:	4013      	ands	r3, r2
 8013446:	d100      	bne.n	801344a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013448:	e309      	b.n	8013a5e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	001a      	movs	r2, r3
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	009b      	lsls	r3, r3, #2
 8013456:	18d3      	adds	r3, r2, r3
 8013458:	881b      	ldrh	r3, [r3, #0]
 801345a:	b29a      	uxth	r2, r3
 801345c:	2016      	movs	r0, #22
 801345e:	183b      	adds	r3, r7, r0
 8013460:	4971      	ldr	r1, [pc, #452]	@ (8013628 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013462:	400a      	ands	r2, r1
 8013464:	801a      	strh	r2, [r3, #0]
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	001a      	movs	r2, r3
 801346c:	68bb      	ldr	r3, [r7, #8]
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	009b      	lsls	r3, r3, #2
 8013472:	18d3      	adds	r3, r2, r3
 8013474:	183a      	adds	r2, r7, r0
 8013476:	8812      	ldrh	r2, [r2, #0]
 8013478:	496c      	ldr	r1, [pc, #432]	@ (801362c <HAL_PCD_EP_DB_Transmit+0x388>)
 801347a:	430a      	orrs	r2, r1
 801347c:	b292      	uxth	r2, r2
 801347e:	801a      	strh	r2, [r3, #0]
 8013480:	e2ed      	b.n	8013a5e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013482:	1dbb      	adds	r3, r7, #6
 8013484:	881a      	ldrh	r2, [r3, #0]
 8013486:	2380      	movs	r3, #128	@ 0x80
 8013488:	01db      	lsls	r3, r3, #7
 801348a:	4013      	ands	r3, r2
 801348c:	d01a      	beq.n	80134c4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	001a      	movs	r2, r3
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	009b      	lsls	r3, r3, #2
 801349a:	18d3      	adds	r3, r2, r3
 801349c:	881b      	ldrh	r3, [r3, #0]
 801349e:	b29a      	uxth	r2, r3
 80134a0:	208a      	movs	r0, #138	@ 0x8a
 80134a2:	183b      	adds	r3, r7, r0
 80134a4:	4960      	ldr	r1, [pc, #384]	@ (8013628 <HAL_PCD_EP_DB_Transmit+0x384>)
 80134a6:	400a      	ands	r2, r1
 80134a8:	801a      	strh	r2, [r3, #0]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	001a      	movs	r2, r3
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	18d3      	adds	r3, r2, r3
 80134b8:	183a      	adds	r2, r7, r0
 80134ba:	8812      	ldrh	r2, [r2, #0]
 80134bc:	495b      	ldr	r1, [pc, #364]	@ (801362c <HAL_PCD_EP_DB_Transmit+0x388>)
 80134be:	430a      	orrs	r2, r1
 80134c0:	b292      	uxth	r2, r2
 80134c2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80134c4:	68bb      	ldr	r3, [r7, #8]
 80134c6:	2224      	movs	r2, #36	@ 0x24
 80134c8:	5c9b      	ldrb	r3, [r3, r2]
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d000      	beq.n	80134d0 <HAL_PCD_EP_DB_Transmit+0x22c>
 80134ce:	e2c6      	b.n	8013a5e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	695a      	ldr	r2, [r3, #20]
 80134d4:	2186      	movs	r1, #134	@ 0x86
 80134d6:	187b      	adds	r3, r7, r1
 80134d8:	881b      	ldrh	r3, [r3, #0]
 80134da:	18d2      	adds	r2, r2, r3
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	69da      	ldr	r2, [r3, #28]
 80134e4:	187b      	adds	r3, r7, r1
 80134e6:	881b      	ldrh	r3, [r3, #0]
 80134e8:	18d2      	adds	r2, r2, r3
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	6a1a      	ldr	r2, [r3, #32]
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	691b      	ldr	r3, [r3, #16]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d30c      	bcc.n	8013514 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	691b      	ldr	r3, [r3, #16]
 80134fe:	218c      	movs	r1, #140	@ 0x8c
 8013500:	187a      	adds	r2, r7, r1
 8013502:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	6a1a      	ldr	r2, [r3, #32]
 8013508:	187b      	adds	r3, r7, r1
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	1ad2      	subs	r2, r2, r3
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	621a      	str	r2, [r3, #32]
 8013512:	e01a      	b.n	801354a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	6a1b      	ldr	r3, [r3, #32]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d10a      	bne.n	8013532 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801351c:	2386      	movs	r3, #134	@ 0x86
 801351e:	18fb      	adds	r3, r7, r3
 8013520:	881b      	ldrh	r3, [r3, #0]
 8013522:	228c      	movs	r2, #140	@ 0x8c
 8013524:	18ba      	adds	r2, r7, r2
 8013526:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	2224      	movs	r2, #36	@ 0x24
 801352c:	2100      	movs	r1, #0
 801352e:	5499      	strb	r1, [r3, r2]
 8013530:	e00b      	b.n	801354a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	2224      	movs	r2, #36	@ 0x24
 8013536:	2100      	movs	r1, #0
 8013538:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	6a1b      	ldr	r3, [r3, #32]
 801353e:	228c      	movs	r2, #140	@ 0x8c
 8013540:	18ba      	adds	r2, r7, r2
 8013542:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	2200      	movs	r2, #0
 8013548:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	785b      	ldrb	r3, [r3, #1]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d000      	beq.n	8013554 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013552:	e06d      	b.n	8013630 <HAL_PCD_EP_DB_Transmit+0x38c>
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2250      	movs	r2, #80	@ 0x50
 8013560:	5a9b      	ldrh	r3, [r3, r2]
 8013562:	b29b      	uxth	r3, r3
 8013564:	001a      	movs	r2, r3
 8013566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013568:	189b      	adds	r3, r3, r2
 801356a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	00da      	lsls	r2, r3, #3
 8013572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013574:	18d3      	adds	r3, r2, r3
 8013576:	4a29      	ldr	r2, [pc, #164]	@ (801361c <HAL_PCD_EP_DB_Transmit+0x378>)
 8013578:	4694      	mov	ip, r2
 801357a:	4463      	add	r3, ip
 801357c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801357e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013580:	881b      	ldrh	r3, [r3, #0]
 8013582:	b29b      	uxth	r3, r3
 8013584:	059b      	lsls	r3, r3, #22
 8013586:	0d9b      	lsrs	r3, r3, #22
 8013588:	b29a      	uxth	r2, r3
 801358a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801358c:	801a      	strh	r2, [r3, #0]
 801358e:	228c      	movs	r2, #140	@ 0x8c
 8013590:	18bb      	adds	r3, r7, r2
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	2b3e      	cmp	r3, #62	@ 0x3e
 8013596:	d91a      	bls.n	80135ce <HAL_PCD_EP_DB_Transmit+0x32a>
 8013598:	18bb      	adds	r3, r7, r2
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	095b      	lsrs	r3, r3, #5
 801359e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80135a0:	18bb      	adds	r3, r7, r2
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	221f      	movs	r2, #31
 80135a6:	4013      	ands	r3, r2
 80135a8:	d102      	bne.n	80135b0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80135aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80135ac:	3b01      	subs	r3, #1
 80135ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80135b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b2:	881b      	ldrh	r3, [r3, #0]
 80135b4:	b29a      	uxth	r2, r3
 80135b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	029b      	lsls	r3, r3, #10
 80135bc:	b29b      	uxth	r3, r3
 80135be:	4313      	orrs	r3, r2
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	4a17      	ldr	r2, [pc, #92]	@ (8013620 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80135c4:	4313      	orrs	r3, r2
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ca:	801a      	strh	r2, [r3, #0]
 80135cc:	e04f      	b.n	801366e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80135ce:	238c      	movs	r3, #140	@ 0x8c
 80135d0:	18fb      	adds	r3, r7, r3
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d108      	bne.n	80135ea <HAL_PCD_EP_DB_Transmit+0x346>
 80135d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135da:	881b      	ldrh	r3, [r3, #0]
 80135dc:	b29b      	uxth	r3, r3
 80135de:	4a10      	ldr	r2, [pc, #64]	@ (8013620 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80135e0:	4313      	orrs	r3, r2
 80135e2:	b29a      	uxth	r2, r3
 80135e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135e6:	801a      	strh	r2, [r3, #0]
 80135e8:	e041      	b.n	801366e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80135ea:	228c      	movs	r2, #140	@ 0x8c
 80135ec:	18bb      	adds	r3, r7, r2
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	085b      	lsrs	r3, r3, #1
 80135f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80135f4:	18bb      	adds	r3, r7, r2
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2201      	movs	r2, #1
 80135fa:	4013      	ands	r3, r2
 80135fc:	d002      	beq.n	8013604 <HAL_PCD_EP_DB_Transmit+0x360>
 80135fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013600:	3301      	adds	r3, #1
 8013602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013606:	881b      	ldrh	r3, [r3, #0]
 8013608:	b29a      	uxth	r2, r3
 801360a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801360c:	b29b      	uxth	r3, r3
 801360e:	029b      	lsls	r3, r3, #10
 8013610:	b29b      	uxth	r3, r3
 8013612:	4313      	orrs	r3, r2
 8013614:	b29a      	uxth	r2, r3
 8013616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013618:	801a      	strh	r2, [r3, #0]
 801361a:	e028      	b.n	801366e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801361c:	00000402 	.word	0x00000402
 8013620:	ffff8000 	.word	0xffff8000
 8013624:	00000406 	.word	0x00000406
 8013628:	ffff8f8f 	.word	0xffff8f8f
 801362c:	ffffc080 	.word	0xffffc080
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	785b      	ldrb	r3, [r3, #1]
 8013634:	2b01      	cmp	r3, #1
 8013636:	d11a      	bne.n	801366e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	647b      	str	r3, [r7, #68]	@ 0x44
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	2250      	movs	r2, #80	@ 0x50
 8013644:	5a9b      	ldrh	r3, [r3, r2]
 8013646:	b29b      	uxth	r3, r3
 8013648:	001a      	movs	r2, r3
 801364a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801364c:	189b      	adds	r3, r3, r2
 801364e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	00da      	lsls	r2, r3, #3
 8013656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013658:	18d3      	adds	r3, r2, r3
 801365a:	4adb      	ldr	r2, [pc, #876]	@ (80139c8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801365c:	4694      	mov	ip, r2
 801365e:	4463      	add	r3, ip
 8013660:	643b      	str	r3, [r7, #64]	@ 0x40
 8013662:	238c      	movs	r3, #140	@ 0x8c
 8013664:	18fb      	adds	r3, r7, r3
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	b29a      	uxth	r2, r3
 801366a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801366c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	6818      	ldr	r0, [r3, #0]
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	6959      	ldr	r1, [r3, #20]
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	891a      	ldrh	r2, [r3, #8]
 801367a:	238c      	movs	r3, #140	@ 0x8c
 801367c:	18fb      	adds	r3, r7, r3
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	b29b      	uxth	r3, r3
 8013682:	f006 fb47 	bl	8019d14 <USB_WritePMA>
 8013686:	e1ea      	b.n	8013a5e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2250      	movs	r2, #80	@ 0x50
 801368e:	5a9b      	ldrh	r3, [r3, r2]
 8013690:	b29b      	uxth	r3, r3
 8013692:	001a      	movs	r2, r3
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	00db      	lsls	r3, r3, #3
 801369a:	18d2      	adds	r2, r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	18d3      	adds	r3, r2, r3
 80136a2:	4aca      	ldr	r2, [pc, #808]	@ (80139cc <HAL_PCD_EP_DB_Transmit+0x728>)
 80136a4:	4694      	mov	ip, r2
 80136a6:	4463      	add	r3, ip
 80136a8:	881a      	ldrh	r2, [r3, #0]
 80136aa:	2186      	movs	r1, #134	@ 0x86
 80136ac:	187b      	adds	r3, r7, r1
 80136ae:	0592      	lsls	r2, r2, #22
 80136b0:	0d92      	lsrs	r2, r2, #22
 80136b2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	699a      	ldr	r2, [r3, #24]
 80136b8:	187b      	adds	r3, r7, r1
 80136ba:	881b      	ldrh	r3, [r3, #0]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d307      	bcc.n	80136d0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	699a      	ldr	r2, [r3, #24]
 80136c4:	187b      	adds	r3, r7, r1
 80136c6:	881b      	ldrh	r3, [r3, #0]
 80136c8:	1ad2      	subs	r2, r2, r3
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	619a      	str	r2, [r3, #24]
 80136ce:	e002      	b.n	80136d6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	2200      	movs	r2, #0
 80136d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	699b      	ldr	r3, [r3, #24]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d000      	beq.n	80136e0 <HAL_PCD_EP_DB_Transmit+0x43c>
 80136de:	e0bb      	b.n	8013858 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	785b      	ldrb	r3, [r3, #1]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d125      	bne.n	8013734 <HAL_PCD_EP_DB_Transmit+0x490>
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2250      	movs	r2, #80	@ 0x50
 80136f4:	5a9b      	ldrh	r3, [r3, r2]
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	001a      	movs	r2, r3
 80136fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80136fc:	189b      	adds	r3, r3, r2
 80136fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	00da      	lsls	r2, r3, #3
 8013706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013708:	18d3      	adds	r3, r2, r3
 801370a:	4aaf      	ldr	r2, [pc, #700]	@ (80139c8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801370c:	4694      	mov	ip, r2
 801370e:	4463      	add	r3, ip
 8013710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013714:	881b      	ldrh	r3, [r3, #0]
 8013716:	b29b      	uxth	r3, r3
 8013718:	059b      	lsls	r3, r3, #22
 801371a:	0d9b      	lsrs	r3, r3, #22
 801371c:	b29a      	uxth	r2, r3
 801371e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013720:	801a      	strh	r2, [r3, #0]
 8013722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013724:	881b      	ldrh	r3, [r3, #0]
 8013726:	b29b      	uxth	r3, r3
 8013728:	4aa9      	ldr	r2, [pc, #676]	@ (80139d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801372a:	4313      	orrs	r3, r2
 801372c:	b29a      	uxth	r2, r3
 801372e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013730:	801a      	strh	r2, [r3, #0]
 8013732:	e01b      	b.n	801376c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	785b      	ldrb	r3, [r3, #1]
 8013738:	2b01      	cmp	r3, #1
 801373a:	d117      	bne.n	801376c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	667b      	str	r3, [r7, #100]	@ 0x64
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	2250      	movs	r2, #80	@ 0x50
 8013748:	5a9b      	ldrh	r3, [r3, r2]
 801374a:	b29b      	uxth	r3, r3
 801374c:	001a      	movs	r2, r3
 801374e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013750:	189b      	adds	r3, r3, r2
 8013752:	667b      	str	r3, [r7, #100]	@ 0x64
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	00da      	lsls	r2, r3, #3
 801375a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801375c:	18d3      	adds	r3, r2, r3
 801375e:	4a9a      	ldr	r2, [pc, #616]	@ (80139c8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013760:	4694      	mov	ip, r2
 8013762:	4463      	add	r3, ip
 8013764:	663b      	str	r3, [r7, #96]	@ 0x60
 8013766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013768:	2200      	movs	r2, #0
 801376a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	677b      	str	r3, [r7, #116]	@ 0x74
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	785b      	ldrb	r3, [r3, #1]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d12b      	bne.n	80137d2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	2250      	movs	r2, #80	@ 0x50
 8013786:	5a9b      	ldrh	r3, [r3, r2]
 8013788:	b29b      	uxth	r3, r3
 801378a:	001a      	movs	r2, r3
 801378c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801378e:	189b      	adds	r3, r3, r2
 8013790:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	00da      	lsls	r2, r3, #3
 8013798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801379a:	18d3      	adds	r3, r2, r3
 801379c:	4a8b      	ldr	r2, [pc, #556]	@ (80139cc <HAL_PCD_EP_DB_Transmit+0x728>)
 801379e:	4694      	mov	ip, r2
 80137a0:	4463      	add	r3, ip
 80137a2:	2180      	movs	r1, #128	@ 0x80
 80137a4:	187a      	adds	r2, r7, r1
 80137a6:	6013      	str	r3, [r2, #0]
 80137a8:	187b      	adds	r3, r7, r1
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	881b      	ldrh	r3, [r3, #0]
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	059b      	lsls	r3, r3, #22
 80137b2:	0d9b      	lsrs	r3, r3, #22
 80137b4:	b29a      	uxth	r2, r3
 80137b6:	187b      	adds	r3, r7, r1
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	801a      	strh	r2, [r3, #0]
 80137bc:	187b      	adds	r3, r7, r1
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	4a82      	ldr	r2, [pc, #520]	@ (80139d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80137c6:	4313      	orrs	r3, r2
 80137c8:	b29a      	uxth	r2, r3
 80137ca:	187b      	adds	r3, r7, r1
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	801a      	strh	r2, [r3, #0]
 80137d0:	e018      	b.n	8013804 <HAL_PCD_EP_DB_Transmit+0x560>
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	785b      	ldrb	r3, [r3, #1]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d114      	bne.n	8013804 <HAL_PCD_EP_DB_Transmit+0x560>
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2250      	movs	r2, #80	@ 0x50
 80137e0:	5a9b      	ldrh	r3, [r3, r2]
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	001a      	movs	r2, r3
 80137e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80137e8:	189b      	adds	r3, r3, r2
 80137ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	781b      	ldrb	r3, [r3, #0]
 80137f0:	00da      	lsls	r2, r3, #3
 80137f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80137f4:	18d3      	adds	r3, r2, r3
 80137f6:	4a75      	ldr	r2, [pc, #468]	@ (80139cc <HAL_PCD_EP_DB_Transmit+0x728>)
 80137f8:	4694      	mov	ip, r2
 80137fa:	4463      	add	r3, ip
 80137fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80137fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013800:	2200      	movs	r2, #0
 8013802:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	781a      	ldrb	r2, [r3, #0]
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	0011      	movs	r1, r2
 801380c:	0018      	movs	r0, r3
 801380e:	f008 fb05 	bl	801be1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013812:	1dbb      	adds	r3, r7, #6
 8013814:	881a      	ldrh	r2, [r3, #0]
 8013816:	2380      	movs	r3, #128	@ 0x80
 8013818:	01db      	lsls	r3, r3, #7
 801381a:	4013      	ands	r3, r2
 801381c:	d000      	beq.n	8013820 <HAL_PCD_EP_DB_Transmit+0x57c>
 801381e:	e11e      	b.n	8013a5e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	001a      	movs	r2, r3
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	781b      	ldrb	r3, [r3, #0]
 801382a:	009b      	lsls	r3, r3, #2
 801382c:	18d3      	adds	r3, r2, r3
 801382e:	881b      	ldrh	r3, [r3, #0]
 8013830:	b29a      	uxth	r2, r3
 8013832:	2088      	movs	r0, #136	@ 0x88
 8013834:	183b      	adds	r3, r7, r0
 8013836:	4967      	ldr	r1, [pc, #412]	@ (80139d4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8013838:	400a      	ands	r2, r1
 801383a:	801a      	strh	r2, [r3, #0]
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	001a      	movs	r2, r3
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	009b      	lsls	r3, r3, #2
 8013848:	18d3      	adds	r3, r2, r3
 801384a:	183a      	adds	r2, r7, r0
 801384c:	8812      	ldrh	r2, [r2, #0]
 801384e:	4962      	ldr	r1, [pc, #392]	@ (80139d8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013850:	430a      	orrs	r2, r1
 8013852:	b292      	uxth	r2, r2
 8013854:	801a      	strh	r2, [r3, #0]
 8013856:	e102      	b.n	8013a5e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013858:	1dbb      	adds	r3, r7, #6
 801385a:	881a      	ldrh	r2, [r3, #0]
 801385c:	2380      	movs	r3, #128	@ 0x80
 801385e:	01db      	lsls	r3, r3, #7
 8013860:	4013      	ands	r3, r2
 8013862:	d11a      	bne.n	801389a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	001a      	movs	r2, r3
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	18d3      	adds	r3, r2, r3
 8013872:	881b      	ldrh	r3, [r3, #0]
 8013874:	b29a      	uxth	r2, r3
 8013876:	204e      	movs	r0, #78	@ 0x4e
 8013878:	183b      	adds	r3, r7, r0
 801387a:	4956      	ldr	r1, [pc, #344]	@ (80139d4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801387c:	400a      	ands	r2, r1
 801387e:	801a      	strh	r2, [r3, #0]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	001a      	movs	r2, r3
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	18d3      	adds	r3, r2, r3
 801388e:	183a      	adds	r2, r7, r0
 8013890:	8812      	ldrh	r2, [r2, #0]
 8013892:	4951      	ldr	r1, [pc, #324]	@ (80139d8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013894:	430a      	orrs	r2, r1
 8013896:	b292      	uxth	r2, r2
 8013898:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	2224      	movs	r2, #36	@ 0x24
 801389e:	5c9b      	ldrb	r3, [r3, r2]
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d000      	beq.n	80138a6 <HAL_PCD_EP_DB_Transmit+0x602>
 80138a4:	e0db      	b.n	8013a5e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	695a      	ldr	r2, [r3, #20]
 80138aa:	2186      	movs	r1, #134	@ 0x86
 80138ac:	187b      	adds	r3, r7, r1
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	18d2      	adds	r2, r2, r3
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	69da      	ldr	r2, [r3, #28]
 80138ba:	187b      	adds	r3, r7, r1
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	18d2      	adds	r2, r2, r3
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	6a1a      	ldr	r2, [r3, #32]
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	691b      	ldr	r3, [r3, #16]
 80138cc:	429a      	cmp	r2, r3
 80138ce:	d30c      	bcc.n	80138ea <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	691b      	ldr	r3, [r3, #16]
 80138d4:	218c      	movs	r1, #140	@ 0x8c
 80138d6:	187a      	adds	r2, r7, r1
 80138d8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80138da:	68bb      	ldr	r3, [r7, #8]
 80138dc:	6a1a      	ldr	r2, [r3, #32]
 80138de:	187b      	adds	r3, r7, r1
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	1ad2      	subs	r2, r2, r3
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	621a      	str	r2, [r3, #32]
 80138e8:	e01a      	b.n	8013920 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	6a1b      	ldr	r3, [r3, #32]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d10a      	bne.n	8013908 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80138f2:	2386      	movs	r3, #134	@ 0x86
 80138f4:	18fb      	adds	r3, r7, r3
 80138f6:	881b      	ldrh	r3, [r3, #0]
 80138f8:	228c      	movs	r2, #140	@ 0x8c
 80138fa:	18ba      	adds	r2, r7, r2
 80138fc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	2224      	movs	r2, #36	@ 0x24
 8013902:	2100      	movs	r1, #0
 8013904:	5499      	strb	r1, [r3, r2]
 8013906:	e00b      	b.n	8013920 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	6a1b      	ldr	r3, [r3, #32]
 801390c:	228c      	movs	r2, #140	@ 0x8c
 801390e:	18ba      	adds	r2, r7, r2
 8013910:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	2200      	movs	r2, #0
 8013916:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	2224      	movs	r2, #36	@ 0x24
 801391c:	2100      	movs	r1, #0
 801391e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	657b      	str	r3, [r7, #84]	@ 0x54
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	785b      	ldrb	r3, [r3, #1]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d000      	beq.n	8013930 <HAL_PCD_EP_DB_Transmit+0x68c>
 801392e:	e06e      	b.n	8013a0e <HAL_PCD_EP_DB_Transmit+0x76a>
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	2250      	movs	r2, #80	@ 0x50
 801393c:	5a9b      	ldrh	r3, [r3, r2]
 801393e:	b29b      	uxth	r3, r3
 8013940:	001a      	movs	r2, r3
 8013942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013944:	189b      	adds	r3, r3, r2
 8013946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	00da      	lsls	r2, r3, #3
 801394e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013950:	18d3      	adds	r3, r2, r3
 8013952:	4a1e      	ldr	r2, [pc, #120]	@ (80139cc <HAL_PCD_EP_DB_Transmit+0x728>)
 8013954:	4694      	mov	ip, r2
 8013956:	4463      	add	r3, ip
 8013958:	65bb      	str	r3, [r7, #88]	@ 0x58
 801395a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801395c:	881b      	ldrh	r3, [r3, #0]
 801395e:	b29b      	uxth	r3, r3
 8013960:	059b      	lsls	r3, r3, #22
 8013962:	0d9b      	lsrs	r3, r3, #22
 8013964:	b29a      	uxth	r2, r3
 8013966:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013968:	801a      	strh	r2, [r3, #0]
 801396a:	228c      	movs	r2, #140	@ 0x8c
 801396c:	18bb      	adds	r3, r7, r2
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2b3e      	cmp	r3, #62	@ 0x3e
 8013972:	d91a      	bls.n	80139aa <HAL_PCD_EP_DB_Transmit+0x706>
 8013974:	18bb      	adds	r3, r7, r2
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	095b      	lsrs	r3, r3, #5
 801397a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801397c:	18bb      	adds	r3, r7, r2
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	221f      	movs	r2, #31
 8013982:	4013      	ands	r3, r2
 8013984:	d102      	bne.n	801398c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8013986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013988:	3b01      	subs	r3, #1
 801398a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801398c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801398e:	881b      	ldrh	r3, [r3, #0]
 8013990:	b29a      	uxth	r2, r3
 8013992:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013994:	b29b      	uxth	r3, r3
 8013996:	029b      	lsls	r3, r3, #10
 8013998:	b29b      	uxth	r3, r3
 801399a:	4313      	orrs	r3, r2
 801399c:	b29b      	uxth	r3, r3
 801399e:	4a0c      	ldr	r2, [pc, #48]	@ (80139d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80139a0:	4313      	orrs	r3, r2
 80139a2:	b29a      	uxth	r2, r3
 80139a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139a6:	801a      	strh	r2, [r3, #0]
 80139a8:	e04d      	b.n	8013a46 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80139aa:	238c      	movs	r3, #140	@ 0x8c
 80139ac:	18fb      	adds	r3, r7, r3
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d113      	bne.n	80139dc <HAL_PCD_EP_DB_Transmit+0x738>
 80139b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139b6:	881b      	ldrh	r3, [r3, #0]
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	4a05      	ldr	r2, [pc, #20]	@ (80139d0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80139bc:	4313      	orrs	r3, r2
 80139be:	b29a      	uxth	r2, r3
 80139c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139c2:	801a      	strh	r2, [r3, #0]
 80139c4:	e03f      	b.n	8013a46 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80139c6:	46c0      	nop			@ (mov r8, r8)
 80139c8:	00000402 	.word	0x00000402
 80139cc:	00000406 	.word	0x00000406
 80139d0:	ffff8000 	.word	0xffff8000
 80139d4:	ffff8f8f 	.word	0xffff8f8f
 80139d8:	ffffc080 	.word	0xffffc080
 80139dc:	228c      	movs	r2, #140	@ 0x8c
 80139de:	18bb      	adds	r3, r7, r2
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	085b      	lsrs	r3, r3, #1
 80139e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80139e6:	18bb      	adds	r3, r7, r2
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	2201      	movs	r2, #1
 80139ec:	4013      	ands	r3, r2
 80139ee:	d002      	beq.n	80139f6 <HAL_PCD_EP_DB_Transmit+0x752>
 80139f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80139f2:	3301      	adds	r3, #1
 80139f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80139f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139f8:	881b      	ldrh	r3, [r3, #0]
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	029b      	lsls	r3, r3, #10
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	4313      	orrs	r3, r2
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a0a:	801a      	strh	r2, [r3, #0]
 8013a0c:	e01b      	b.n	8013a46 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	785b      	ldrb	r3, [r3, #1]
 8013a12:	2b01      	cmp	r3, #1
 8013a14:	d117      	bne.n	8013a46 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2250      	movs	r2, #80	@ 0x50
 8013a1c:	5a9b      	ldrh	r3, [r3, r2]
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	001a      	movs	r2, r3
 8013a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a24:	189b      	adds	r3, r3, r2
 8013a26:	657b      	str	r3, [r7, #84]	@ 0x54
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	00da      	lsls	r2, r3, #3
 8013a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a30:	18d3      	adds	r3, r2, r3
 8013a32:	4a21      	ldr	r2, [pc, #132]	@ (8013ab8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8013a34:	4694      	mov	ip, r2
 8013a36:	4463      	add	r3, ip
 8013a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a3a:	238c      	movs	r3, #140	@ 0x8c
 8013a3c:	18fb      	adds	r3, r7, r3
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	b29a      	uxth	r2, r3
 8013a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a44:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	6818      	ldr	r0, [r3, #0]
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	6959      	ldr	r1, [r3, #20]
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	895a      	ldrh	r2, [r3, #10]
 8013a52:	238c      	movs	r3, #140	@ 0x8c
 8013a54:	18fb      	adds	r3, r7, r3
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	f006 f95b 	bl	8019d14 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	001a      	movs	r2, r3
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	18d3      	adds	r3, r2, r3
 8013a6c:	881b      	ldrh	r3, [r3, #0]
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	2014      	movs	r0, #20
 8013a72:	183b      	adds	r3, r7, r0
 8013a74:	4911      	ldr	r1, [pc, #68]	@ (8013abc <HAL_PCD_EP_DB_Transmit+0x818>)
 8013a76:	400a      	ands	r2, r1
 8013a78:	801a      	strh	r2, [r3, #0]
 8013a7a:	183b      	adds	r3, r7, r0
 8013a7c:	183a      	adds	r2, r7, r0
 8013a7e:	8812      	ldrh	r2, [r2, #0]
 8013a80:	2110      	movs	r1, #16
 8013a82:	404a      	eors	r2, r1
 8013a84:	801a      	strh	r2, [r3, #0]
 8013a86:	183b      	adds	r3, r7, r0
 8013a88:	183a      	adds	r2, r7, r0
 8013a8a:	8812      	ldrh	r2, [r2, #0]
 8013a8c:	2120      	movs	r1, #32
 8013a8e:	404a      	eors	r2, r1
 8013a90:	801a      	strh	r2, [r3, #0]
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	001a      	movs	r2, r3
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	18d3      	adds	r3, r2, r3
 8013aa0:	183a      	adds	r2, r7, r0
 8013aa2:	8812      	ldrh	r2, [r2, #0]
 8013aa4:	4906      	ldr	r1, [pc, #24]	@ (8013ac0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8013aa6:	430a      	orrs	r2, r1
 8013aa8:	b292      	uxth	r2, r2
 8013aaa:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8013aac:	2300      	movs	r3, #0
}
 8013aae:	0018      	movs	r0, r3
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	b024      	add	sp, #144	@ 0x90
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	46c0      	nop			@ (mov r8, r8)
 8013ab8:	00000406 	.word	0x00000406
 8013abc:	ffff8fbf 	.word	0xffff8fbf
 8013ac0:	ffff8080 	.word	0xffff8080

08013ac4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8013ac4:	b590      	push	{r4, r7, lr}
 8013ac6:	b087      	sub	sp, #28
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	0008      	movs	r0, r1
 8013ace:	0011      	movs	r1, r2
 8013ad0:	607b      	str	r3, [r7, #4]
 8013ad2:	240a      	movs	r4, #10
 8013ad4:	193b      	adds	r3, r7, r4
 8013ad6:	1c02      	adds	r2, r0, #0
 8013ad8:	801a      	strh	r2, [r3, #0]
 8013ada:	2308      	movs	r3, #8
 8013adc:	18fb      	adds	r3, r7, r3
 8013ade:	1c0a      	adds	r2, r1, #0
 8013ae0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8013ae2:	0021      	movs	r1, r4
 8013ae4:	187b      	adds	r3, r7, r1
 8013ae6:	881b      	ldrh	r3, [r3, #0]
 8013ae8:	2280      	movs	r2, #128	@ 0x80
 8013aea:	4013      	ands	r3, r2
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00c      	beq.n	8013b0c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013af2:	187b      	adds	r3, r7, r1
 8013af4:	881b      	ldrh	r3, [r3, #0]
 8013af6:	2207      	movs	r2, #7
 8013af8:	4013      	ands	r3, r2
 8013afa:	1c5a      	adds	r2, r3, #1
 8013afc:	0013      	movs	r3, r2
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	189b      	adds	r3, r3, r2
 8013b02:	00db      	lsls	r3, r3, #3
 8013b04:	68fa      	ldr	r2, [r7, #12]
 8013b06:	18d3      	adds	r3, r2, r3
 8013b08:	617b      	str	r3, [r7, #20]
 8013b0a:	e00b      	b.n	8013b24 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013b0c:	230a      	movs	r3, #10
 8013b0e:	18fb      	adds	r3, r7, r3
 8013b10:	881a      	ldrh	r2, [r3, #0]
 8013b12:	0013      	movs	r3, r2
 8013b14:	009b      	lsls	r3, r3, #2
 8013b16:	189b      	adds	r3, r3, r2
 8013b18:	00db      	lsls	r3, r3, #3
 8013b1a:	3369      	adds	r3, #105	@ 0x69
 8013b1c:	33ff      	adds	r3, #255	@ 0xff
 8013b1e:	68fa      	ldr	r2, [r7, #12]
 8013b20:	18d3      	adds	r3, r2, r3
 8013b22:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8013b24:	2308      	movs	r3, #8
 8013b26:	18fb      	adds	r3, r7, r3
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d107      	bne.n	8013b3e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	2200      	movs	r2, #0
 8013b32:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	b29a      	uxth	r2, r3
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	80da      	strh	r2, [r3, #6]
 8013b3c:	e00b      	b.n	8013b56 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	2201      	movs	r2, #1
 8013b42:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	b29a      	uxth	r2, r3
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	0c1b      	lsrs	r3, r3, #16
 8013b50:	b29a      	uxth	r2, r3
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013b56:	2300      	movs	r3, #0
}
 8013b58:	0018      	movs	r0, r3
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	b007      	add	sp, #28
 8013b5e:	bd90      	pop	{r4, r7, pc}

08013b60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	23ba      	movs	r3, #186	@ 0xba
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	2101      	movs	r1, #1
 8013b76:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8013b78:	687a      	ldr	r2, [r7, #4]
 8013b7a:	23b8      	movs	r3, #184	@ 0xb8
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	2100      	movs	r1, #0
 8013b80:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2254      	movs	r2, #84	@ 0x54
 8013b86:	5a9b      	ldrh	r3, [r3, r2]
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	4313      	orrs	r3, r2
 8013b8e:	b299      	uxth	r1, r3
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2254      	movs	r2, #84	@ 0x54
 8013b94:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2254      	movs	r2, #84	@ 0x54
 8013b9a:	5a9b      	ldrh	r3, [r3, r2]
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	2202      	movs	r2, #2
 8013ba0:	4313      	orrs	r3, r2
 8013ba2:	b299      	uxth	r1, r3
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	2254      	movs	r2, #84	@ 0x54
 8013ba8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013baa:	2300      	movs	r3, #0
}
 8013bac:	0018      	movs	r0, r3
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	b004      	add	sp, #16
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	000a      	movs	r2, r1
 8013bbe:	1cfb      	adds	r3, r7, #3
 8013bc0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8013bc2:	46c0      	nop			@ (mov r8, r8)
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	b002      	add	sp, #8
 8013bc8:	bd80      	pop	{r7, pc}
	...

08013bcc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8013bd0:	4b04      	ldr	r3, [pc, #16]	@ (8013be4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	4b03      	ldr	r3, [pc, #12]	@ (8013be4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8013bd6:	2180      	movs	r1, #128	@ 0x80
 8013bd8:	0049      	lsls	r1, r1, #1
 8013bda:	430a      	orrs	r2, r1
 8013bdc:	601a      	str	r2, [r3, #0]
}
 8013bde:	46c0      	nop			@ (mov r8, r8)
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}
 8013be4:	40007000 	.word	0x40007000

08013be8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b086      	sub	sp, #24
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	000a      	movs	r2, r1
 8013bf2:	1cfb      	adds	r3, r7, #3
 8013bf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8013bfa:	4b25      	ldr	r3, [pc, #148]	@ (8013c90 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	2380      	movs	r3, #128	@ 0x80
 8013c00:	009b      	lsls	r3, r3, #2
 8013c02:	4013      	ands	r3, r2
 8013c04:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8013c06:	4b23      	ldr	r3, [pc, #140]	@ (8013c94 <HAL_PWR_EnterSTOPMode+0xac>)
 8013c08:	6a1b      	ldr	r3, [r3, #32]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	4013      	ands	r3, r2
 8013c0e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d008      	beq.n	8013c28 <HAL_PWR_EnterSTOPMode+0x40>
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d005      	beq.n	8013c28 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8013c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8013c90 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013c1e:	681a      	ldr	r2, [r3, #0]
 8013c20:	4b1b      	ldr	r3, [pc, #108]	@ (8013c90 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013c22:	491d      	ldr	r1, [pc, #116]	@ (8013c98 <HAL_PWR_EnterSTOPMode+0xb0>)
 8013c24:	400a      	ands	r2, r1
 8013c26:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8013c28:	4b19      	ldr	r3, [pc, #100]	@ (8013c90 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	2203      	movs	r2, #3
 8013c32:	4393      	bics	r3, r2
 8013c34:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8013c36:	697a      	ldr	r2, [r7, #20]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8013c3e:	4b14      	ldr	r3, [pc, #80]	@ (8013c90 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8013c44:	4b15      	ldr	r3, [pc, #84]	@ (8013c9c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013c46:	691a      	ldr	r2, [r3, #16]
 8013c48:	4b14      	ldr	r3, [pc, #80]	@ (8013c9c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013c4a:	2104      	movs	r1, #4
 8013c4c:	430a      	orrs	r2, r1
 8013c4e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8013c50:	1cfb      	adds	r3, r7, #3
 8013c52:	781b      	ldrb	r3, [r3, #0]
 8013c54:	2b01      	cmp	r3, #1
 8013c56:	d101      	bne.n	8013c5c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8013c58:	bf30      	wfi
 8013c5a:	e002      	b.n	8013c62 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8013c5c:	bf40      	sev
    __WFE();
 8013c5e:	bf20      	wfe
    __WFE();
 8013c60:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8013c62:	4b0e      	ldr	r3, [pc, #56]	@ (8013c9c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013c64:	691a      	ldr	r2, [r3, #16]
 8013c66:	4b0d      	ldr	r3, [pc, #52]	@ (8013c9c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013c68:	2104      	movs	r1, #4
 8013c6a:	438a      	bics	r2, r1
 8013c6c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d009      	beq.n	8013c88 <HAL_PWR_EnterSTOPMode+0xa0>
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d006      	beq.n	8013c88 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8013c7a:	4b05      	ldr	r3, [pc, #20]	@ (8013c90 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	4b04      	ldr	r3, [pc, #16]	@ (8013c90 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013c80:	2180      	movs	r1, #128	@ 0x80
 8013c82:	0089      	lsls	r1, r1, #2
 8013c84:	430a      	orrs	r2, r1
 8013c86:	601a      	str	r2, [r3, #0]
  }
}
 8013c88:	46c0      	nop			@ (mov r8, r8)
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	b006      	add	sp, #24
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	40007000 	.word	0x40007000
 8013c94:	40010000 	.word	0x40010000
 8013c98:	fffffdff 	.word	0xfffffdff
 8013c9c:	e000ed00 	.word	0xe000ed00

08013ca0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8013ca4:	4b07      	ldr	r3, [pc, #28]	@ (8013cc4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	4b06      	ldr	r3, [pc, #24]	@ (8013cc4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8013caa:	2102      	movs	r1, #2
 8013cac:	430a      	orrs	r2, r1
 8013cae:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8013cb0:	4b05      	ldr	r3, [pc, #20]	@ (8013cc8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8013cb2:	691a      	ldr	r2, [r3, #16]
 8013cb4:	4b04      	ldr	r3, [pc, #16]	@ (8013cc8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8013cb6:	2104      	movs	r1, #4
 8013cb8:	430a      	orrs	r2, r1
 8013cba:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8013cbc:	bf30      	wfi
}
 8013cbe:	46c0      	nop			@ (mov r8, r8)
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	40007000 	.word	0x40007000
 8013cc8:	e000ed00 	.word	0xe000ed00

08013ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013ccc:	b5b0      	push	{r4, r5, r7, lr}
 8013cce:	b08a      	sub	sp, #40	@ 0x28
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d102      	bne.n	8013ce0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8013cda:	2301      	movs	r3, #1
 8013cdc:	f000 fbbf 	bl	801445e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013ce0:	4bc9      	ldr	r3, [pc, #804]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	220c      	movs	r2, #12
 8013ce6:	4013      	ands	r3, r2
 8013ce8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013cea:	4bc7      	ldr	r3, [pc, #796]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013cec:	68da      	ldr	r2, [r3, #12]
 8013cee:	2380      	movs	r3, #128	@ 0x80
 8013cf0:	025b      	lsls	r3, r3, #9
 8013cf2:	4013      	ands	r3, r2
 8013cf4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2201      	movs	r2, #1
 8013cfc:	4013      	ands	r3, r2
 8013cfe:	d100      	bne.n	8013d02 <HAL_RCC_OscConfig+0x36>
 8013d00:	e07e      	b.n	8013e00 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	2b08      	cmp	r3, #8
 8013d06:	d007      	beq.n	8013d18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	2b0c      	cmp	r3, #12
 8013d0c:	d112      	bne.n	8013d34 <HAL_RCC_OscConfig+0x68>
 8013d0e:	69ba      	ldr	r2, [r7, #24]
 8013d10:	2380      	movs	r3, #128	@ 0x80
 8013d12:	025b      	lsls	r3, r3, #9
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d10d      	bne.n	8013d34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013d18:	4bbb      	ldr	r3, [pc, #748]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	2380      	movs	r3, #128	@ 0x80
 8013d1e:	029b      	lsls	r3, r3, #10
 8013d20:	4013      	ands	r3, r2
 8013d22:	d100      	bne.n	8013d26 <HAL_RCC_OscConfig+0x5a>
 8013d24:	e06b      	b.n	8013dfe <HAL_RCC_OscConfig+0x132>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d167      	bne.n	8013dfe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8013d2e:	2301      	movs	r3, #1
 8013d30:	f000 fb95 	bl	801445e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	685a      	ldr	r2, [r3, #4]
 8013d38:	2380      	movs	r3, #128	@ 0x80
 8013d3a:	025b      	lsls	r3, r3, #9
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d107      	bne.n	8013d50 <HAL_RCC_OscConfig+0x84>
 8013d40:	4bb1      	ldr	r3, [pc, #708]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	4bb0      	ldr	r3, [pc, #704]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d46:	2180      	movs	r1, #128	@ 0x80
 8013d48:	0249      	lsls	r1, r1, #9
 8013d4a:	430a      	orrs	r2, r1
 8013d4c:	601a      	str	r2, [r3, #0]
 8013d4e:	e027      	b.n	8013da0 <HAL_RCC_OscConfig+0xd4>
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	685a      	ldr	r2, [r3, #4]
 8013d54:	23a0      	movs	r3, #160	@ 0xa0
 8013d56:	02db      	lsls	r3, r3, #11
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d10e      	bne.n	8013d7a <HAL_RCC_OscConfig+0xae>
 8013d5c:	4baa      	ldr	r3, [pc, #680]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	4ba9      	ldr	r3, [pc, #676]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d62:	2180      	movs	r1, #128	@ 0x80
 8013d64:	02c9      	lsls	r1, r1, #11
 8013d66:	430a      	orrs	r2, r1
 8013d68:	601a      	str	r2, [r3, #0]
 8013d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d6c:	681a      	ldr	r2, [r3, #0]
 8013d6e:	4ba6      	ldr	r3, [pc, #664]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d70:	2180      	movs	r1, #128	@ 0x80
 8013d72:	0249      	lsls	r1, r1, #9
 8013d74:	430a      	orrs	r2, r1
 8013d76:	601a      	str	r2, [r3, #0]
 8013d78:	e012      	b.n	8013da0 <HAL_RCC_OscConfig+0xd4>
 8013d7a:	4ba3      	ldr	r3, [pc, #652]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	4ba2      	ldr	r3, [pc, #648]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d80:	49a2      	ldr	r1, [pc, #648]	@ (801400c <HAL_RCC_OscConfig+0x340>)
 8013d82:	400a      	ands	r2, r1
 8013d84:	601a      	str	r2, [r3, #0]
 8013d86:	4ba0      	ldr	r3, [pc, #640]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	2380      	movs	r3, #128	@ 0x80
 8013d8c:	025b      	lsls	r3, r3, #9
 8013d8e:	4013      	ands	r3, r2
 8013d90:	60fb      	str	r3, [r7, #12]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	4b9c      	ldr	r3, [pc, #624]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d96:	681a      	ldr	r2, [r3, #0]
 8013d98:	4b9b      	ldr	r3, [pc, #620]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013d9a:	499d      	ldr	r1, [pc, #628]	@ (8014010 <HAL_RCC_OscConfig+0x344>)
 8013d9c:	400a      	ands	r2, r1
 8013d9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d015      	beq.n	8013dd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013da8:	f7f9 fea2 	bl	800daf0 <HAL_GetTick>
 8013dac:	0003      	movs	r3, r0
 8013dae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013db0:	e009      	b.n	8013dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013db2:	f7f9 fe9d 	bl	800daf0 <HAL_GetTick>
 8013db6:	0002      	movs	r2, r0
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	1ad3      	subs	r3, r2, r3
 8013dbc:	2b64      	cmp	r3, #100	@ 0x64
 8013dbe:	d902      	bls.n	8013dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013dc0:	2303      	movs	r3, #3
 8013dc2:	f000 fb4c 	bl	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013dc6:	4b90      	ldr	r3, [pc, #576]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013dc8:	681a      	ldr	r2, [r3, #0]
 8013dca:	2380      	movs	r3, #128	@ 0x80
 8013dcc:	029b      	lsls	r3, r3, #10
 8013dce:	4013      	ands	r3, r2
 8013dd0:	d0ef      	beq.n	8013db2 <HAL_RCC_OscConfig+0xe6>
 8013dd2:	e015      	b.n	8013e00 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013dd4:	f7f9 fe8c 	bl	800daf0 <HAL_GetTick>
 8013dd8:	0003      	movs	r3, r0
 8013dda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013ddc:	e008      	b.n	8013df0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013dde:	f7f9 fe87 	bl	800daf0 <HAL_GetTick>
 8013de2:	0002      	movs	r2, r0
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	2b64      	cmp	r3, #100	@ 0x64
 8013dea:	d901      	bls.n	8013df0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8013dec:	2303      	movs	r3, #3
 8013dee:	e336      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013df0:	4b85      	ldr	r3, [pc, #532]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	2380      	movs	r3, #128	@ 0x80
 8013df6:	029b      	lsls	r3, r3, #10
 8013df8:	4013      	ands	r3, r2
 8013dfa:	d1f0      	bne.n	8013dde <HAL_RCC_OscConfig+0x112>
 8013dfc:	e000      	b.n	8013e00 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013dfe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	2202      	movs	r2, #2
 8013e06:	4013      	ands	r3, r2
 8013e08:	d100      	bne.n	8013e0c <HAL_RCC_OscConfig+0x140>
 8013e0a:	e099      	b.n	8013f40 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8013e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e14:	2220      	movs	r2, #32
 8013e16:	4013      	ands	r3, r2
 8013e18:	d009      	beq.n	8013e2e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8013e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e1c:	681a      	ldr	r2, [r3, #0]
 8013e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e20:	2120      	movs	r1, #32
 8013e22:	430a      	orrs	r2, r1
 8013e24:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8013e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e28:	2220      	movs	r2, #32
 8013e2a:	4393      	bics	r3, r2
 8013e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	2b04      	cmp	r3, #4
 8013e32:	d005      	beq.n	8013e40 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8013e34:	69fb      	ldr	r3, [r7, #28]
 8013e36:	2b0c      	cmp	r3, #12
 8013e38:	d13e      	bne.n	8013eb8 <HAL_RCC_OscConfig+0x1ec>
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d13b      	bne.n	8013eb8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8013e40:	4b71      	ldr	r3, [pc, #452]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	2204      	movs	r2, #4
 8013e46:	4013      	ands	r3, r2
 8013e48:	d004      	beq.n	8013e54 <HAL_RCC_OscConfig+0x188>
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d101      	bne.n	8013e54 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8013e50:	2301      	movs	r3, #1
 8013e52:	e304      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013e54:	4b6c      	ldr	r3, [pc, #432]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e56:	685b      	ldr	r3, [r3, #4]
 8013e58:	4a6e      	ldr	r2, [pc, #440]	@ (8014014 <HAL_RCC_OscConfig+0x348>)
 8013e5a:	4013      	ands	r3, r2
 8013e5c:	0019      	movs	r1, r3
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	691b      	ldr	r3, [r3, #16]
 8013e62:	021a      	lsls	r2, r3, #8
 8013e64:	4b68      	ldr	r3, [pc, #416]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e66:	430a      	orrs	r2, r1
 8013e68:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8013e6a:	4b67      	ldr	r3, [pc, #412]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	2209      	movs	r2, #9
 8013e70:	4393      	bics	r3, r2
 8013e72:	0019      	movs	r1, r3
 8013e74:	4b64      	ldr	r3, [pc, #400]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e78:	430a      	orrs	r2, r1
 8013e7a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013e7c:	f000 fc42 	bl	8014704 <HAL_RCC_GetSysClockFreq>
 8013e80:	0001      	movs	r1, r0
 8013e82:	4b61      	ldr	r3, [pc, #388]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013e84:	68db      	ldr	r3, [r3, #12]
 8013e86:	091b      	lsrs	r3, r3, #4
 8013e88:	220f      	movs	r2, #15
 8013e8a:	4013      	ands	r3, r2
 8013e8c:	4a62      	ldr	r2, [pc, #392]	@ (8014018 <HAL_RCC_OscConfig+0x34c>)
 8013e8e:	5cd3      	ldrb	r3, [r2, r3]
 8013e90:	000a      	movs	r2, r1
 8013e92:	40da      	lsrs	r2, r3
 8013e94:	4b61      	ldr	r3, [pc, #388]	@ (801401c <HAL_RCC_OscConfig+0x350>)
 8013e96:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8013e98:	4b61      	ldr	r3, [pc, #388]	@ (8014020 <HAL_RCC_OscConfig+0x354>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	2513      	movs	r5, #19
 8013e9e:	197c      	adds	r4, r7, r5
 8013ea0:	0018      	movs	r0, r3
 8013ea2:	f7f9 fddf 	bl	800da64 <HAL_InitTick>
 8013ea6:	0003      	movs	r3, r0
 8013ea8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8013eaa:	197b      	adds	r3, r7, r5
 8013eac:	781b      	ldrb	r3, [r3, #0]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d046      	beq.n	8013f40 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8013eb2:	197b      	adds	r3, r7, r5
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	e2d2      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d027      	beq.n	8013f0e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8013ebe:	4b52      	ldr	r3, [pc, #328]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2209      	movs	r2, #9
 8013ec4:	4393      	bics	r3, r2
 8013ec6:	0019      	movs	r1, r3
 8013ec8:	4b4f      	ldr	r3, [pc, #316]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ecc:	430a      	orrs	r2, r1
 8013ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ed0:	f7f9 fe0e 	bl	800daf0 <HAL_GetTick>
 8013ed4:	0003      	movs	r3, r0
 8013ed6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013ed8:	e008      	b.n	8013eec <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013eda:	f7f9 fe09 	bl	800daf0 <HAL_GetTick>
 8013ede:	0002      	movs	r2, r0
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	1ad3      	subs	r3, r2, r3
 8013ee4:	2b02      	cmp	r3, #2
 8013ee6:	d901      	bls.n	8013eec <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8013ee8:	2303      	movs	r3, #3
 8013eea:	e2b8      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013eec:	4b46      	ldr	r3, [pc, #280]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2204      	movs	r2, #4
 8013ef2:	4013      	ands	r3, r2
 8013ef4:	d0f1      	beq.n	8013eda <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013ef6:	4b44      	ldr	r3, [pc, #272]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	4a46      	ldr	r2, [pc, #280]	@ (8014014 <HAL_RCC_OscConfig+0x348>)
 8013efc:	4013      	ands	r3, r2
 8013efe:	0019      	movs	r1, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	691b      	ldr	r3, [r3, #16]
 8013f04:	021a      	lsls	r2, r3, #8
 8013f06:	4b40      	ldr	r3, [pc, #256]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f08:	430a      	orrs	r2, r1
 8013f0a:	605a      	str	r2, [r3, #4]
 8013f0c:	e018      	b.n	8013f40 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f10:	681a      	ldr	r2, [r3, #0]
 8013f12:	4b3d      	ldr	r3, [pc, #244]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f14:	2101      	movs	r1, #1
 8013f16:	438a      	bics	r2, r1
 8013f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013f1a:	f7f9 fde9 	bl	800daf0 <HAL_GetTick>
 8013f1e:	0003      	movs	r3, r0
 8013f20:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013f22:	e008      	b.n	8013f36 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013f24:	f7f9 fde4 	bl	800daf0 <HAL_GetTick>
 8013f28:	0002      	movs	r2, r0
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	1ad3      	subs	r3, r2, r3
 8013f2e:	2b02      	cmp	r3, #2
 8013f30:	d901      	bls.n	8013f36 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8013f32:	2303      	movs	r3, #3
 8013f34:	e293      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013f36:	4b34      	ldr	r3, [pc, #208]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	2204      	movs	r2, #4
 8013f3c:	4013      	ands	r3, r2
 8013f3e:	d1f1      	bne.n	8013f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	2210      	movs	r2, #16
 8013f46:	4013      	ands	r3, r2
 8013f48:	d100      	bne.n	8013f4c <HAL_RCC_OscConfig+0x280>
 8013f4a:	e0a2      	b.n	8014092 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d140      	bne.n	8013fd4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8013f52:	4b2d      	ldr	r3, [pc, #180]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	2380      	movs	r3, #128	@ 0x80
 8013f58:	009b      	lsls	r3, r3, #2
 8013f5a:	4013      	ands	r3, r2
 8013f5c:	d005      	beq.n	8013f6a <HAL_RCC_OscConfig+0x29e>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	69db      	ldr	r3, [r3, #28]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d101      	bne.n	8013f6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8013f66:	2301      	movs	r3, #1
 8013f68:	e279      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013f6a:	4b27      	ldr	r3, [pc, #156]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f6c:	685b      	ldr	r3, [r3, #4]
 8013f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8014024 <HAL_RCC_OscConfig+0x358>)
 8013f70:	4013      	ands	r3, r2
 8013f72:	0019      	movs	r1, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f78:	4b23      	ldr	r3, [pc, #140]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f7a:	430a      	orrs	r2, r1
 8013f7c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013f7e:	4b22      	ldr	r3, [pc, #136]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	021b      	lsls	r3, r3, #8
 8013f84:	0a19      	lsrs	r1, r3, #8
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	6a1b      	ldr	r3, [r3, #32]
 8013f8a:	061a      	lsls	r2, r3, #24
 8013f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013f8e:	430a      	orrs	r2, r1
 8013f90:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f96:	0b5b      	lsrs	r3, r3, #13
 8013f98:	3301      	adds	r3, #1
 8013f9a:	2280      	movs	r2, #128	@ 0x80
 8013f9c:	0212      	lsls	r2, r2, #8
 8013f9e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8013fa0:	4b19      	ldr	r3, [pc, #100]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	091b      	lsrs	r3, r3, #4
 8013fa6:	210f      	movs	r1, #15
 8013fa8:	400b      	ands	r3, r1
 8013faa:	491b      	ldr	r1, [pc, #108]	@ (8014018 <HAL_RCC_OscConfig+0x34c>)
 8013fac:	5ccb      	ldrb	r3, [r1, r3]
 8013fae:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8013fb0:	4b1a      	ldr	r3, [pc, #104]	@ (801401c <HAL_RCC_OscConfig+0x350>)
 8013fb2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8013fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8014020 <HAL_RCC_OscConfig+0x354>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2513      	movs	r5, #19
 8013fba:	197c      	adds	r4, r7, r5
 8013fbc:	0018      	movs	r0, r3
 8013fbe:	f7f9 fd51 	bl	800da64 <HAL_InitTick>
 8013fc2:	0003      	movs	r3, r0
 8013fc4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8013fc6:	197b      	adds	r3, r7, r5
 8013fc8:	781b      	ldrb	r3, [r3, #0]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d061      	beq.n	8014092 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8013fce:	197b      	adds	r3, r7, r5
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	e244      	b.n	801445e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	69db      	ldr	r3, [r3, #28]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d040      	beq.n	801405e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8013fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	4b09      	ldr	r3, [pc, #36]	@ (8014008 <HAL_RCC_OscConfig+0x33c>)
 8013fe2:	2180      	movs	r1, #128	@ 0x80
 8013fe4:	0049      	lsls	r1, r1, #1
 8013fe6:	430a      	orrs	r2, r1
 8013fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013fea:	f7f9 fd81 	bl	800daf0 <HAL_GetTick>
 8013fee:	0003      	movs	r3, r0
 8013ff0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8013ff2:	e019      	b.n	8014028 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013ff4:	f7f9 fd7c 	bl	800daf0 <HAL_GetTick>
 8013ff8:	0002      	movs	r2, r0
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	1ad3      	subs	r3, r2, r3
 8013ffe:	2b02      	cmp	r3, #2
 8014000:	d912      	bls.n	8014028 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8014002:	2303      	movs	r3, #3
 8014004:	e22b      	b.n	801445e <HAL_RCC_OscConfig+0x792>
 8014006:	46c0      	nop			@ (mov r8, r8)
 8014008:	40021000 	.word	0x40021000
 801400c:	fffeffff 	.word	0xfffeffff
 8014010:	fffbffff 	.word	0xfffbffff
 8014014:	ffffe0ff 	.word	0xffffe0ff
 8014018:	08023bb0 	.word	0x08023bb0
 801401c:	200000c8 	.word	0x200000c8
 8014020:	200000d8 	.word	0x200000d8
 8014024:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014028:	4bca      	ldr	r3, [pc, #808]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	2380      	movs	r3, #128	@ 0x80
 801402e:	009b      	lsls	r3, r3, #2
 8014030:	4013      	ands	r3, r2
 8014032:	d0df      	beq.n	8013ff4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014034:	4bc7      	ldr	r3, [pc, #796]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014036:	685b      	ldr	r3, [r3, #4]
 8014038:	4ac7      	ldr	r2, [pc, #796]	@ (8014358 <HAL_RCC_OscConfig+0x68c>)
 801403a:	4013      	ands	r3, r2
 801403c:	0019      	movs	r1, r3
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014042:	4bc4      	ldr	r3, [pc, #784]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014044:	430a      	orrs	r2, r1
 8014046:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014048:	4bc2      	ldr	r3, [pc, #776]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	021b      	lsls	r3, r3, #8
 801404e:	0a19      	lsrs	r1, r3, #8
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6a1b      	ldr	r3, [r3, #32]
 8014054:	061a      	lsls	r2, r3, #24
 8014056:	4bbf      	ldr	r3, [pc, #764]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014058:	430a      	orrs	r2, r1
 801405a:	605a      	str	r2, [r3, #4]
 801405c:	e019      	b.n	8014092 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801405e:	4bbd      	ldr	r3, [pc, #756]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	4bbc      	ldr	r3, [pc, #752]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014064:	49bd      	ldr	r1, [pc, #756]	@ (801435c <HAL_RCC_OscConfig+0x690>)
 8014066:	400a      	ands	r2, r1
 8014068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801406a:	f7f9 fd41 	bl	800daf0 <HAL_GetTick>
 801406e:	0003      	movs	r3, r0
 8014070:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014072:	e008      	b.n	8014086 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014074:	f7f9 fd3c 	bl	800daf0 <HAL_GetTick>
 8014078:	0002      	movs	r2, r0
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	1ad3      	subs	r3, r2, r3
 801407e:	2b02      	cmp	r3, #2
 8014080:	d901      	bls.n	8014086 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8014082:	2303      	movs	r3, #3
 8014084:	e1eb      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014086:	4bb3      	ldr	r3, [pc, #716]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	2380      	movs	r3, #128	@ 0x80
 801408c:	009b      	lsls	r3, r3, #2
 801408e:	4013      	ands	r3, r2
 8014090:	d1f0      	bne.n	8014074 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2208      	movs	r2, #8
 8014098:	4013      	ands	r3, r2
 801409a:	d036      	beq.n	801410a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	695b      	ldr	r3, [r3, #20]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d019      	beq.n	80140d8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80140a4:	4bab      	ldr	r3, [pc, #684]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80140a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80140a8:	4baa      	ldr	r3, [pc, #680]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80140aa:	2101      	movs	r1, #1
 80140ac:	430a      	orrs	r2, r1
 80140ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80140b0:	f7f9 fd1e 	bl	800daf0 <HAL_GetTick>
 80140b4:	0003      	movs	r3, r0
 80140b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80140b8:	e008      	b.n	80140cc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80140ba:	f7f9 fd19 	bl	800daf0 <HAL_GetTick>
 80140be:	0002      	movs	r2, r0
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	1ad3      	subs	r3, r2, r3
 80140c4:	2b02      	cmp	r3, #2
 80140c6:	d901      	bls.n	80140cc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80140c8:	2303      	movs	r3, #3
 80140ca:	e1c8      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80140cc:	4ba1      	ldr	r3, [pc, #644]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80140ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80140d0:	2202      	movs	r2, #2
 80140d2:	4013      	ands	r3, r2
 80140d4:	d0f1      	beq.n	80140ba <HAL_RCC_OscConfig+0x3ee>
 80140d6:	e018      	b.n	801410a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80140d8:	4b9e      	ldr	r3, [pc, #632]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80140da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80140dc:	4b9d      	ldr	r3, [pc, #628]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80140de:	2101      	movs	r1, #1
 80140e0:	438a      	bics	r2, r1
 80140e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80140e4:	f7f9 fd04 	bl	800daf0 <HAL_GetTick>
 80140e8:	0003      	movs	r3, r0
 80140ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80140ec:	e008      	b.n	8014100 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80140ee:	f7f9 fcff 	bl	800daf0 <HAL_GetTick>
 80140f2:	0002      	movs	r2, r0
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	1ad3      	subs	r3, r2, r3
 80140f8:	2b02      	cmp	r3, #2
 80140fa:	d901      	bls.n	8014100 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80140fc:	2303      	movs	r3, #3
 80140fe:	e1ae      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014100:	4b94      	ldr	r3, [pc, #592]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014104:	2202      	movs	r2, #2
 8014106:	4013      	ands	r3, r2
 8014108:	d1f1      	bne.n	80140ee <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	2204      	movs	r2, #4
 8014110:	4013      	ands	r3, r2
 8014112:	d100      	bne.n	8014116 <HAL_RCC_OscConfig+0x44a>
 8014114:	e0ae      	b.n	8014274 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014116:	2023      	movs	r0, #35	@ 0x23
 8014118:	183b      	adds	r3, r7, r0
 801411a:	2200      	movs	r2, #0
 801411c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801411e:	4b8d      	ldr	r3, [pc, #564]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014122:	2380      	movs	r3, #128	@ 0x80
 8014124:	055b      	lsls	r3, r3, #21
 8014126:	4013      	ands	r3, r2
 8014128:	d109      	bne.n	801413e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801412a:	4b8a      	ldr	r3, [pc, #552]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801412c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801412e:	4b89      	ldr	r3, [pc, #548]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014130:	2180      	movs	r1, #128	@ 0x80
 8014132:	0549      	lsls	r1, r1, #21
 8014134:	430a      	orrs	r2, r1
 8014136:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014138:	183b      	adds	r3, r7, r0
 801413a:	2201      	movs	r2, #1
 801413c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801413e:	4b88      	ldr	r3, [pc, #544]	@ (8014360 <HAL_RCC_OscConfig+0x694>)
 8014140:	681a      	ldr	r2, [r3, #0]
 8014142:	2380      	movs	r3, #128	@ 0x80
 8014144:	005b      	lsls	r3, r3, #1
 8014146:	4013      	ands	r3, r2
 8014148:	d11a      	bne.n	8014180 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801414a:	4b85      	ldr	r3, [pc, #532]	@ (8014360 <HAL_RCC_OscConfig+0x694>)
 801414c:	681a      	ldr	r2, [r3, #0]
 801414e:	4b84      	ldr	r3, [pc, #528]	@ (8014360 <HAL_RCC_OscConfig+0x694>)
 8014150:	2180      	movs	r1, #128	@ 0x80
 8014152:	0049      	lsls	r1, r1, #1
 8014154:	430a      	orrs	r2, r1
 8014156:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014158:	f7f9 fcca 	bl	800daf0 <HAL_GetTick>
 801415c:	0003      	movs	r3, r0
 801415e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014160:	e008      	b.n	8014174 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014162:	f7f9 fcc5 	bl	800daf0 <HAL_GetTick>
 8014166:	0002      	movs	r2, r0
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	1ad3      	subs	r3, r2, r3
 801416c:	2b64      	cmp	r3, #100	@ 0x64
 801416e:	d901      	bls.n	8014174 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8014170:	2303      	movs	r3, #3
 8014172:	e174      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014174:	4b7a      	ldr	r3, [pc, #488]	@ (8014360 <HAL_RCC_OscConfig+0x694>)
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	2380      	movs	r3, #128	@ 0x80
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	4013      	ands	r3, r2
 801417e:	d0f0      	beq.n	8014162 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	689a      	ldr	r2, [r3, #8]
 8014184:	2380      	movs	r3, #128	@ 0x80
 8014186:	005b      	lsls	r3, r3, #1
 8014188:	429a      	cmp	r2, r3
 801418a:	d107      	bne.n	801419c <HAL_RCC_OscConfig+0x4d0>
 801418c:	4b71      	ldr	r3, [pc, #452]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801418e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014190:	4b70      	ldr	r3, [pc, #448]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014192:	2180      	movs	r1, #128	@ 0x80
 8014194:	0049      	lsls	r1, r1, #1
 8014196:	430a      	orrs	r2, r1
 8014198:	651a      	str	r2, [r3, #80]	@ 0x50
 801419a:	e031      	b.n	8014200 <HAL_RCC_OscConfig+0x534>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10c      	bne.n	80141be <HAL_RCC_OscConfig+0x4f2>
 80141a4:	4b6b      	ldr	r3, [pc, #428]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141a8:	4b6a      	ldr	r3, [pc, #424]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141aa:	496c      	ldr	r1, [pc, #432]	@ (801435c <HAL_RCC_OscConfig+0x690>)
 80141ac:	400a      	ands	r2, r1
 80141ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80141b0:	4b68      	ldr	r3, [pc, #416]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141b4:	4b67      	ldr	r3, [pc, #412]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141b6:	496b      	ldr	r1, [pc, #428]	@ (8014364 <HAL_RCC_OscConfig+0x698>)
 80141b8:	400a      	ands	r2, r1
 80141ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80141bc:	e020      	b.n	8014200 <HAL_RCC_OscConfig+0x534>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	689a      	ldr	r2, [r3, #8]
 80141c2:	23a0      	movs	r3, #160	@ 0xa0
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d10e      	bne.n	80141e8 <HAL_RCC_OscConfig+0x51c>
 80141ca:	4b62      	ldr	r3, [pc, #392]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141ce:	4b61      	ldr	r3, [pc, #388]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141d0:	2180      	movs	r1, #128	@ 0x80
 80141d2:	00c9      	lsls	r1, r1, #3
 80141d4:	430a      	orrs	r2, r1
 80141d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80141d8:	4b5e      	ldr	r3, [pc, #376]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141dc:	4b5d      	ldr	r3, [pc, #372]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141de:	2180      	movs	r1, #128	@ 0x80
 80141e0:	0049      	lsls	r1, r1, #1
 80141e2:	430a      	orrs	r2, r1
 80141e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80141e6:	e00b      	b.n	8014200 <HAL_RCC_OscConfig+0x534>
 80141e8:	4b5a      	ldr	r3, [pc, #360]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141ec:	4b59      	ldr	r3, [pc, #356]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141ee:	495b      	ldr	r1, [pc, #364]	@ (801435c <HAL_RCC_OscConfig+0x690>)
 80141f0:	400a      	ands	r2, r1
 80141f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80141f4:	4b57      	ldr	r3, [pc, #348]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141f8:	4b56      	ldr	r3, [pc, #344]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80141fa:	495a      	ldr	r1, [pc, #360]	@ (8014364 <HAL_RCC_OscConfig+0x698>)
 80141fc:	400a      	ands	r2, r1
 80141fe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	689b      	ldr	r3, [r3, #8]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d015      	beq.n	8014234 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014208:	f7f9 fc72 	bl	800daf0 <HAL_GetTick>
 801420c:	0003      	movs	r3, r0
 801420e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014210:	e009      	b.n	8014226 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014212:	f7f9 fc6d 	bl	800daf0 <HAL_GetTick>
 8014216:	0002      	movs	r2, r0
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	1ad3      	subs	r3, r2, r3
 801421c:	4a52      	ldr	r2, [pc, #328]	@ (8014368 <HAL_RCC_OscConfig+0x69c>)
 801421e:	4293      	cmp	r3, r2
 8014220:	d901      	bls.n	8014226 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8014222:	2303      	movs	r3, #3
 8014224:	e11b      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014226:	4b4b      	ldr	r3, [pc, #300]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014228:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801422a:	2380      	movs	r3, #128	@ 0x80
 801422c:	009b      	lsls	r3, r3, #2
 801422e:	4013      	ands	r3, r2
 8014230:	d0ef      	beq.n	8014212 <HAL_RCC_OscConfig+0x546>
 8014232:	e014      	b.n	801425e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014234:	f7f9 fc5c 	bl	800daf0 <HAL_GetTick>
 8014238:	0003      	movs	r3, r0
 801423a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801423c:	e009      	b.n	8014252 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801423e:	f7f9 fc57 	bl	800daf0 <HAL_GetTick>
 8014242:	0002      	movs	r2, r0
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	1ad3      	subs	r3, r2, r3
 8014248:	4a47      	ldr	r2, [pc, #284]	@ (8014368 <HAL_RCC_OscConfig+0x69c>)
 801424a:	4293      	cmp	r3, r2
 801424c:	d901      	bls.n	8014252 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801424e:	2303      	movs	r3, #3
 8014250:	e105      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014252:	4b40      	ldr	r3, [pc, #256]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014254:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014256:	2380      	movs	r3, #128	@ 0x80
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	4013      	ands	r3, r2
 801425c:	d1ef      	bne.n	801423e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801425e:	2323      	movs	r3, #35	@ 0x23
 8014260:	18fb      	adds	r3, r7, r3
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	2b01      	cmp	r3, #1
 8014266:	d105      	bne.n	8014274 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014268:	4b3a      	ldr	r3, [pc, #232]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801426a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801426c:	4b39      	ldr	r3, [pc, #228]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801426e:	493f      	ldr	r1, [pc, #252]	@ (801436c <HAL_RCC_OscConfig+0x6a0>)
 8014270:	400a      	ands	r2, r1
 8014272:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	2220      	movs	r2, #32
 801427a:	4013      	ands	r3, r2
 801427c:	d049      	beq.n	8014312 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	699b      	ldr	r3, [r3, #24]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d026      	beq.n	80142d4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8014286:	4b33      	ldr	r3, [pc, #204]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014288:	689a      	ldr	r2, [r3, #8]
 801428a:	4b32      	ldr	r3, [pc, #200]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801428c:	2101      	movs	r1, #1
 801428e:	430a      	orrs	r2, r1
 8014290:	609a      	str	r2, [r3, #8]
 8014292:	4b30      	ldr	r3, [pc, #192]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014296:	4b2f      	ldr	r3, [pc, #188]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014298:	2101      	movs	r1, #1
 801429a:	430a      	orrs	r2, r1
 801429c:	635a      	str	r2, [r3, #52]	@ 0x34
 801429e:	4b34      	ldr	r3, [pc, #208]	@ (8014370 <HAL_RCC_OscConfig+0x6a4>)
 80142a0:	6a1a      	ldr	r2, [r3, #32]
 80142a2:	4b33      	ldr	r3, [pc, #204]	@ (8014370 <HAL_RCC_OscConfig+0x6a4>)
 80142a4:	2180      	movs	r1, #128	@ 0x80
 80142a6:	0189      	lsls	r1, r1, #6
 80142a8:	430a      	orrs	r2, r1
 80142aa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80142ac:	f7f9 fc20 	bl	800daf0 <HAL_GetTick>
 80142b0:	0003      	movs	r3, r0
 80142b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80142b4:	e008      	b.n	80142c8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80142b6:	f7f9 fc1b 	bl	800daf0 <HAL_GetTick>
 80142ba:	0002      	movs	r2, r0
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	1ad3      	subs	r3, r2, r3
 80142c0:	2b02      	cmp	r3, #2
 80142c2:	d901      	bls.n	80142c8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80142c4:	2303      	movs	r3, #3
 80142c6:	e0ca      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80142c8:	4b22      	ldr	r3, [pc, #136]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80142ca:	689b      	ldr	r3, [r3, #8]
 80142cc:	2202      	movs	r2, #2
 80142ce:	4013      	ands	r3, r2
 80142d0:	d0f1      	beq.n	80142b6 <HAL_RCC_OscConfig+0x5ea>
 80142d2:	e01e      	b.n	8014312 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80142d4:	4b1f      	ldr	r3, [pc, #124]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80142d6:	689a      	ldr	r2, [r3, #8]
 80142d8:	4b1e      	ldr	r3, [pc, #120]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 80142da:	2101      	movs	r1, #1
 80142dc:	438a      	bics	r2, r1
 80142de:	609a      	str	r2, [r3, #8]
 80142e0:	4b23      	ldr	r3, [pc, #140]	@ (8014370 <HAL_RCC_OscConfig+0x6a4>)
 80142e2:	6a1a      	ldr	r2, [r3, #32]
 80142e4:	4b22      	ldr	r3, [pc, #136]	@ (8014370 <HAL_RCC_OscConfig+0x6a4>)
 80142e6:	4923      	ldr	r1, [pc, #140]	@ (8014374 <HAL_RCC_OscConfig+0x6a8>)
 80142e8:	400a      	ands	r2, r1
 80142ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80142ec:	f7f9 fc00 	bl	800daf0 <HAL_GetTick>
 80142f0:	0003      	movs	r3, r0
 80142f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80142f4:	e008      	b.n	8014308 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80142f6:	f7f9 fbfb 	bl	800daf0 <HAL_GetTick>
 80142fa:	0002      	movs	r2, r0
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	1ad3      	subs	r3, r2, r3
 8014300:	2b02      	cmp	r3, #2
 8014302:	d901      	bls.n	8014308 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8014304:	2303      	movs	r3, #3
 8014306:	e0aa      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014308:	4b12      	ldr	r3, [pc, #72]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801430a:	689b      	ldr	r3, [r3, #8]
 801430c:	2202      	movs	r2, #2
 801430e:	4013      	ands	r3, r2
 8014310:	d1f1      	bne.n	80142f6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014316:	2b00      	cmp	r3, #0
 8014318:	d100      	bne.n	801431c <HAL_RCC_OscConfig+0x650>
 801431a:	e09f      	b.n	801445c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	2b0c      	cmp	r3, #12
 8014320:	d100      	bne.n	8014324 <HAL_RCC_OscConfig+0x658>
 8014322:	e078      	b.n	8014416 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014328:	2b02      	cmp	r3, #2
 801432a:	d159      	bne.n	80143e0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801432c:	4b09      	ldr	r3, [pc, #36]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	4b08      	ldr	r3, [pc, #32]	@ (8014354 <HAL_RCC_OscConfig+0x688>)
 8014332:	4911      	ldr	r1, [pc, #68]	@ (8014378 <HAL_RCC_OscConfig+0x6ac>)
 8014334:	400a      	ands	r2, r1
 8014336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014338:	f7f9 fbda 	bl	800daf0 <HAL_GetTick>
 801433c:	0003      	movs	r3, r0
 801433e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014340:	e01c      	b.n	801437c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014342:	f7f9 fbd5 	bl	800daf0 <HAL_GetTick>
 8014346:	0002      	movs	r2, r0
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	2b02      	cmp	r3, #2
 801434e:	d915      	bls.n	801437c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014350:	2303      	movs	r3, #3
 8014352:	e084      	b.n	801445e <HAL_RCC_OscConfig+0x792>
 8014354:	40021000 	.word	0x40021000
 8014358:	ffff1fff 	.word	0xffff1fff
 801435c:	fffffeff 	.word	0xfffffeff
 8014360:	40007000 	.word	0x40007000
 8014364:	fffffbff 	.word	0xfffffbff
 8014368:	00001388 	.word	0x00001388
 801436c:	efffffff 	.word	0xefffffff
 8014370:	40010000 	.word	0x40010000
 8014374:	ffffdfff 	.word	0xffffdfff
 8014378:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801437c:	4b3a      	ldr	r3, [pc, #232]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 801437e:	681a      	ldr	r2, [r3, #0]
 8014380:	2380      	movs	r3, #128	@ 0x80
 8014382:	049b      	lsls	r3, r3, #18
 8014384:	4013      	ands	r3, r2
 8014386:	d1dc      	bne.n	8014342 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014388:	4b37      	ldr	r3, [pc, #220]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	4a37      	ldr	r2, [pc, #220]	@ (801446c <HAL_RCC_OscConfig+0x7a0>)
 801438e:	4013      	ands	r3, r2
 8014390:	0019      	movs	r1, r3
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801439a:	431a      	orrs	r2, r3
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80143a0:	431a      	orrs	r2, r3
 80143a2:	4b31      	ldr	r3, [pc, #196]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 80143a4:	430a      	orrs	r2, r1
 80143a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80143a8:	4b2f      	ldr	r3, [pc, #188]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 80143aa:	681a      	ldr	r2, [r3, #0]
 80143ac:	4b2e      	ldr	r3, [pc, #184]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 80143ae:	2180      	movs	r1, #128	@ 0x80
 80143b0:	0449      	lsls	r1, r1, #17
 80143b2:	430a      	orrs	r2, r1
 80143b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80143b6:	f7f9 fb9b 	bl	800daf0 <HAL_GetTick>
 80143ba:	0003      	movs	r3, r0
 80143bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80143be:	e008      	b.n	80143d2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80143c0:	f7f9 fb96 	bl	800daf0 <HAL_GetTick>
 80143c4:	0002      	movs	r2, r0
 80143c6:	697b      	ldr	r3, [r7, #20]
 80143c8:	1ad3      	subs	r3, r2, r3
 80143ca:	2b02      	cmp	r3, #2
 80143cc:	d901      	bls.n	80143d2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80143ce:	2303      	movs	r3, #3
 80143d0:	e045      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80143d2:	4b25      	ldr	r3, [pc, #148]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 80143d4:	681a      	ldr	r2, [r3, #0]
 80143d6:	2380      	movs	r3, #128	@ 0x80
 80143d8:	049b      	lsls	r3, r3, #18
 80143da:	4013      	ands	r3, r2
 80143dc:	d0f0      	beq.n	80143c0 <HAL_RCC_OscConfig+0x6f4>
 80143de:	e03d      	b.n	801445c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80143e0:	4b21      	ldr	r3, [pc, #132]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	4b20      	ldr	r3, [pc, #128]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 80143e6:	4922      	ldr	r1, [pc, #136]	@ (8014470 <HAL_RCC_OscConfig+0x7a4>)
 80143e8:	400a      	ands	r2, r1
 80143ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80143ec:	f7f9 fb80 	bl	800daf0 <HAL_GetTick>
 80143f0:	0003      	movs	r3, r0
 80143f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80143f4:	e008      	b.n	8014408 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80143f6:	f7f9 fb7b 	bl	800daf0 <HAL_GetTick>
 80143fa:	0002      	movs	r2, r0
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	1ad3      	subs	r3, r2, r3
 8014400:	2b02      	cmp	r3, #2
 8014402:	d901      	bls.n	8014408 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8014404:	2303      	movs	r3, #3
 8014406:	e02a      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014408:	4b17      	ldr	r3, [pc, #92]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	2380      	movs	r3, #128	@ 0x80
 801440e:	049b      	lsls	r3, r3, #18
 8014410:	4013      	ands	r3, r2
 8014412:	d1f0      	bne.n	80143f6 <HAL_RCC_OscConfig+0x72a>
 8014414:	e022      	b.n	801445c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801441a:	2b01      	cmp	r3, #1
 801441c:	d101      	bne.n	8014422 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801441e:	2301      	movs	r3, #1
 8014420:	e01d      	b.n	801445e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8014422:	4b11      	ldr	r3, [pc, #68]	@ (8014468 <HAL_RCC_OscConfig+0x79c>)
 8014424:	68db      	ldr	r3, [r3, #12]
 8014426:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014428:	69ba      	ldr	r2, [r7, #24]
 801442a:	2380      	movs	r3, #128	@ 0x80
 801442c:	025b      	lsls	r3, r3, #9
 801442e:	401a      	ands	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014434:	429a      	cmp	r2, r3
 8014436:	d10f      	bne.n	8014458 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014438:	69ba      	ldr	r2, [r7, #24]
 801443a:	23f0      	movs	r3, #240	@ 0xf0
 801443c:	039b      	lsls	r3, r3, #14
 801443e:	401a      	ands	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014444:	429a      	cmp	r2, r3
 8014446:	d107      	bne.n	8014458 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014448:	69ba      	ldr	r2, [r7, #24]
 801444a:	23c0      	movs	r3, #192	@ 0xc0
 801444c:	041b      	lsls	r3, r3, #16
 801444e:	401a      	ands	r2, r3
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014454:	429a      	cmp	r2, r3
 8014456:	d001      	beq.n	801445c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014458:	2301      	movs	r3, #1
 801445a:	e000      	b.n	801445e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801445c:	2300      	movs	r3, #0
}
 801445e:	0018      	movs	r0, r3
 8014460:	46bd      	mov	sp, r7
 8014462:	b00a      	add	sp, #40	@ 0x28
 8014464:	bdb0      	pop	{r4, r5, r7, pc}
 8014466:	46c0      	nop			@ (mov r8, r8)
 8014468:	40021000 	.word	0x40021000
 801446c:	ff02ffff 	.word	0xff02ffff
 8014470:	feffffff 	.word	0xfeffffff

08014474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014474:	b5b0      	push	{r4, r5, r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d101      	bne.n	8014488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014484:	2301      	movs	r3, #1
 8014486:	e128      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014488:	4b96      	ldr	r3, [pc, #600]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2201      	movs	r2, #1
 801448e:	4013      	ands	r3, r2
 8014490:	683a      	ldr	r2, [r7, #0]
 8014492:	429a      	cmp	r2, r3
 8014494:	d91e      	bls.n	80144d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014496:	4b93      	ldr	r3, [pc, #588]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2201      	movs	r2, #1
 801449c:	4393      	bics	r3, r2
 801449e:	0019      	movs	r1, r3
 80144a0:	4b90      	ldr	r3, [pc, #576]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 80144a2:	683a      	ldr	r2, [r7, #0]
 80144a4:	430a      	orrs	r2, r1
 80144a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80144a8:	f7f9 fb22 	bl	800daf0 <HAL_GetTick>
 80144ac:	0003      	movs	r3, r0
 80144ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80144b0:	e009      	b.n	80144c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80144b2:	f7f9 fb1d 	bl	800daf0 <HAL_GetTick>
 80144b6:	0002      	movs	r2, r0
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	1ad3      	subs	r3, r2, r3
 80144bc:	4a8a      	ldr	r2, [pc, #552]	@ (80146e8 <HAL_RCC_ClockConfig+0x274>)
 80144be:	4293      	cmp	r3, r2
 80144c0:	d901      	bls.n	80144c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80144c2:	2303      	movs	r3, #3
 80144c4:	e109      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80144c6:	4b87      	ldr	r3, [pc, #540]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2201      	movs	r2, #1
 80144cc:	4013      	ands	r3, r2
 80144ce:	683a      	ldr	r2, [r7, #0]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d1ee      	bne.n	80144b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2202      	movs	r2, #2
 80144da:	4013      	ands	r3, r2
 80144dc:	d009      	beq.n	80144f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80144de:	4b83      	ldr	r3, [pc, #524]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 80144e0:	68db      	ldr	r3, [r3, #12]
 80144e2:	22f0      	movs	r2, #240	@ 0xf0
 80144e4:	4393      	bics	r3, r2
 80144e6:	0019      	movs	r1, r3
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	689a      	ldr	r2, [r3, #8]
 80144ec:	4b7f      	ldr	r3, [pc, #508]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 80144ee:	430a      	orrs	r2, r1
 80144f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	2201      	movs	r2, #1
 80144f8:	4013      	ands	r3, r2
 80144fa:	d100      	bne.n	80144fe <HAL_RCC_ClockConfig+0x8a>
 80144fc:	e089      	b.n	8014612 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	685b      	ldr	r3, [r3, #4]
 8014502:	2b02      	cmp	r3, #2
 8014504:	d107      	bne.n	8014516 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014506:	4b79      	ldr	r3, [pc, #484]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	2380      	movs	r3, #128	@ 0x80
 801450c:	029b      	lsls	r3, r3, #10
 801450e:	4013      	ands	r3, r2
 8014510:	d120      	bne.n	8014554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014512:	2301      	movs	r3, #1
 8014514:	e0e1      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	2b03      	cmp	r3, #3
 801451c:	d107      	bne.n	801452e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801451e:	4b73      	ldr	r3, [pc, #460]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014520:	681a      	ldr	r2, [r3, #0]
 8014522:	2380      	movs	r3, #128	@ 0x80
 8014524:	049b      	lsls	r3, r3, #18
 8014526:	4013      	ands	r3, r2
 8014528:	d114      	bne.n	8014554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801452a:	2301      	movs	r3, #1
 801452c:	e0d5      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	2b01      	cmp	r3, #1
 8014534:	d106      	bne.n	8014544 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014536:	4b6d      	ldr	r3, [pc, #436]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2204      	movs	r2, #4
 801453c:	4013      	ands	r3, r2
 801453e:	d109      	bne.n	8014554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014540:	2301      	movs	r3, #1
 8014542:	e0ca      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014544:	4b69      	ldr	r3, [pc, #420]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	2380      	movs	r3, #128	@ 0x80
 801454a:	009b      	lsls	r3, r3, #2
 801454c:	4013      	ands	r3, r2
 801454e:	d101      	bne.n	8014554 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014550:	2301      	movs	r3, #1
 8014552:	e0c2      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014554:	4b65      	ldr	r3, [pc, #404]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014556:	68db      	ldr	r3, [r3, #12]
 8014558:	2203      	movs	r2, #3
 801455a:	4393      	bics	r3, r2
 801455c:	0019      	movs	r1, r3
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	685a      	ldr	r2, [r3, #4]
 8014562:	4b62      	ldr	r3, [pc, #392]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014564:	430a      	orrs	r2, r1
 8014566:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014568:	f7f9 fac2 	bl	800daf0 <HAL_GetTick>
 801456c:	0003      	movs	r3, r0
 801456e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	2b02      	cmp	r3, #2
 8014576:	d111      	bne.n	801459c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014578:	e009      	b.n	801458e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801457a:	f7f9 fab9 	bl	800daf0 <HAL_GetTick>
 801457e:	0002      	movs	r2, r0
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	4a58      	ldr	r2, [pc, #352]	@ (80146e8 <HAL_RCC_ClockConfig+0x274>)
 8014586:	4293      	cmp	r3, r2
 8014588:	d901      	bls.n	801458e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801458a:	2303      	movs	r3, #3
 801458c:	e0a5      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801458e:	4b57      	ldr	r3, [pc, #348]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014590:	68db      	ldr	r3, [r3, #12]
 8014592:	220c      	movs	r2, #12
 8014594:	4013      	ands	r3, r2
 8014596:	2b08      	cmp	r3, #8
 8014598:	d1ef      	bne.n	801457a <HAL_RCC_ClockConfig+0x106>
 801459a:	e03a      	b.n	8014612 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	2b03      	cmp	r3, #3
 80145a2:	d111      	bne.n	80145c8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80145a4:	e009      	b.n	80145ba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80145a6:	f7f9 faa3 	bl	800daf0 <HAL_GetTick>
 80145aa:	0002      	movs	r2, r0
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	1ad3      	subs	r3, r2, r3
 80145b0:	4a4d      	ldr	r2, [pc, #308]	@ (80146e8 <HAL_RCC_ClockConfig+0x274>)
 80145b2:	4293      	cmp	r3, r2
 80145b4:	d901      	bls.n	80145ba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80145b6:	2303      	movs	r3, #3
 80145b8:	e08f      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80145ba:	4b4c      	ldr	r3, [pc, #304]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	220c      	movs	r2, #12
 80145c0:	4013      	ands	r3, r2
 80145c2:	2b0c      	cmp	r3, #12
 80145c4:	d1ef      	bne.n	80145a6 <HAL_RCC_ClockConfig+0x132>
 80145c6:	e024      	b.n	8014612 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	2b01      	cmp	r3, #1
 80145ce:	d11b      	bne.n	8014608 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80145d0:	e009      	b.n	80145e6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80145d2:	f7f9 fa8d 	bl	800daf0 <HAL_GetTick>
 80145d6:	0002      	movs	r2, r0
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	1ad3      	subs	r3, r2, r3
 80145dc:	4a42      	ldr	r2, [pc, #264]	@ (80146e8 <HAL_RCC_ClockConfig+0x274>)
 80145de:	4293      	cmp	r3, r2
 80145e0:	d901      	bls.n	80145e6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80145e2:	2303      	movs	r3, #3
 80145e4:	e079      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80145e6:	4b41      	ldr	r3, [pc, #260]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	220c      	movs	r2, #12
 80145ec:	4013      	ands	r3, r2
 80145ee:	2b04      	cmp	r3, #4
 80145f0:	d1ef      	bne.n	80145d2 <HAL_RCC_ClockConfig+0x15e>
 80145f2:	e00e      	b.n	8014612 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80145f4:	f7f9 fa7c 	bl	800daf0 <HAL_GetTick>
 80145f8:	0002      	movs	r2, r0
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	1ad3      	subs	r3, r2, r3
 80145fe:	4a3a      	ldr	r2, [pc, #232]	@ (80146e8 <HAL_RCC_ClockConfig+0x274>)
 8014600:	4293      	cmp	r3, r2
 8014602:	d901      	bls.n	8014608 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014604:	2303      	movs	r3, #3
 8014606:	e068      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014608:	4b38      	ldr	r3, [pc, #224]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	220c      	movs	r2, #12
 801460e:	4013      	ands	r3, r2
 8014610:	d1f0      	bne.n	80145f4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014612:	4b34      	ldr	r3, [pc, #208]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	2201      	movs	r2, #1
 8014618:	4013      	ands	r3, r2
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	429a      	cmp	r2, r3
 801461e:	d21e      	bcs.n	801465e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014620:	4b30      	ldr	r3, [pc, #192]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2201      	movs	r2, #1
 8014626:	4393      	bics	r3, r2
 8014628:	0019      	movs	r1, r3
 801462a:	4b2e      	ldr	r3, [pc, #184]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 801462c:	683a      	ldr	r2, [r7, #0]
 801462e:	430a      	orrs	r2, r1
 8014630:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014632:	f7f9 fa5d 	bl	800daf0 <HAL_GetTick>
 8014636:	0003      	movs	r3, r0
 8014638:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801463a:	e009      	b.n	8014650 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801463c:	f7f9 fa58 	bl	800daf0 <HAL_GetTick>
 8014640:	0002      	movs	r2, r0
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	4a28      	ldr	r2, [pc, #160]	@ (80146e8 <HAL_RCC_ClockConfig+0x274>)
 8014648:	4293      	cmp	r3, r2
 801464a:	d901      	bls.n	8014650 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801464c:	2303      	movs	r3, #3
 801464e:	e044      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014650:	4b24      	ldr	r3, [pc, #144]	@ (80146e4 <HAL_RCC_ClockConfig+0x270>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2201      	movs	r2, #1
 8014656:	4013      	ands	r3, r2
 8014658:	683a      	ldr	r2, [r7, #0]
 801465a:	429a      	cmp	r2, r3
 801465c:	d1ee      	bne.n	801463c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	2204      	movs	r2, #4
 8014664:	4013      	ands	r3, r2
 8014666:	d009      	beq.n	801467c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014668:	4b20      	ldr	r3, [pc, #128]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	4a20      	ldr	r2, [pc, #128]	@ (80146f0 <HAL_RCC_ClockConfig+0x27c>)
 801466e:	4013      	ands	r3, r2
 8014670:	0019      	movs	r1, r3
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	68da      	ldr	r2, [r3, #12]
 8014676:	4b1d      	ldr	r3, [pc, #116]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014678:	430a      	orrs	r2, r1
 801467a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2208      	movs	r2, #8
 8014682:	4013      	ands	r3, r2
 8014684:	d00a      	beq.n	801469c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014686:	4b19      	ldr	r3, [pc, #100]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	4a1a      	ldr	r2, [pc, #104]	@ (80146f4 <HAL_RCC_ClockConfig+0x280>)
 801468c:	4013      	ands	r3, r2
 801468e:	0019      	movs	r1, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	691b      	ldr	r3, [r3, #16]
 8014694:	00da      	lsls	r2, r3, #3
 8014696:	4b15      	ldr	r3, [pc, #84]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 8014698:	430a      	orrs	r2, r1
 801469a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801469c:	f000 f832 	bl	8014704 <HAL_RCC_GetSysClockFreq>
 80146a0:	0001      	movs	r1, r0
 80146a2:	4b12      	ldr	r3, [pc, #72]	@ (80146ec <HAL_RCC_ClockConfig+0x278>)
 80146a4:	68db      	ldr	r3, [r3, #12]
 80146a6:	091b      	lsrs	r3, r3, #4
 80146a8:	220f      	movs	r2, #15
 80146aa:	4013      	ands	r3, r2
 80146ac:	4a12      	ldr	r2, [pc, #72]	@ (80146f8 <HAL_RCC_ClockConfig+0x284>)
 80146ae:	5cd3      	ldrb	r3, [r2, r3]
 80146b0:	000a      	movs	r2, r1
 80146b2:	40da      	lsrs	r2, r3
 80146b4:	4b11      	ldr	r3, [pc, #68]	@ (80146fc <HAL_RCC_ClockConfig+0x288>)
 80146b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80146b8:	4b11      	ldr	r3, [pc, #68]	@ (8014700 <HAL_RCC_ClockConfig+0x28c>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	250b      	movs	r5, #11
 80146be:	197c      	adds	r4, r7, r5
 80146c0:	0018      	movs	r0, r3
 80146c2:	f7f9 f9cf 	bl	800da64 <HAL_InitTick>
 80146c6:	0003      	movs	r3, r0
 80146c8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80146ca:	197b      	adds	r3, r7, r5
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d002      	beq.n	80146d8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80146d2:	197b      	adds	r3, r7, r5
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	e000      	b.n	80146da <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	0018      	movs	r0, r3
 80146dc:	46bd      	mov	sp, r7
 80146de:	b004      	add	sp, #16
 80146e0:	bdb0      	pop	{r4, r5, r7, pc}
 80146e2:	46c0      	nop			@ (mov r8, r8)
 80146e4:	40022000 	.word	0x40022000
 80146e8:	00001388 	.word	0x00001388
 80146ec:	40021000 	.word	0x40021000
 80146f0:	fffff8ff 	.word	0xfffff8ff
 80146f4:	ffffc7ff 	.word	0xffffc7ff
 80146f8:	08023bb0 	.word	0x08023bb0
 80146fc:	200000c8 	.word	0x200000c8
 8014700:	200000d8 	.word	0x200000d8

08014704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014704:	b5b0      	push	{r4, r5, r7, lr}
 8014706:	b08e      	sub	sp, #56	@ 0x38
 8014708:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801470a:	4b4c      	ldr	r3, [pc, #304]	@ (801483c <HAL_RCC_GetSysClockFreq+0x138>)
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8014710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014712:	230c      	movs	r3, #12
 8014714:	4013      	ands	r3, r2
 8014716:	2b0c      	cmp	r3, #12
 8014718:	d014      	beq.n	8014744 <HAL_RCC_GetSysClockFreq+0x40>
 801471a:	d900      	bls.n	801471e <HAL_RCC_GetSysClockFreq+0x1a>
 801471c:	e07b      	b.n	8014816 <HAL_RCC_GetSysClockFreq+0x112>
 801471e:	2b04      	cmp	r3, #4
 8014720:	d002      	beq.n	8014728 <HAL_RCC_GetSysClockFreq+0x24>
 8014722:	2b08      	cmp	r3, #8
 8014724:	d00b      	beq.n	801473e <HAL_RCC_GetSysClockFreq+0x3a>
 8014726:	e076      	b.n	8014816 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014728:	4b44      	ldr	r3, [pc, #272]	@ (801483c <HAL_RCC_GetSysClockFreq+0x138>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2210      	movs	r2, #16
 801472e:	4013      	ands	r3, r2
 8014730:	d002      	beq.n	8014738 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8014732:	4b43      	ldr	r3, [pc, #268]	@ (8014840 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014734:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8014736:	e07c      	b.n	8014832 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014738:	4b42      	ldr	r3, [pc, #264]	@ (8014844 <HAL_RCC_GetSysClockFreq+0x140>)
 801473a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801473c:	e079      	b.n	8014832 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801473e:	4b42      	ldr	r3, [pc, #264]	@ (8014848 <HAL_RCC_GetSysClockFreq+0x144>)
 8014740:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014742:	e076      	b.n	8014832 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8014744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014746:	0c9a      	lsrs	r2, r3, #18
 8014748:	230f      	movs	r3, #15
 801474a:	401a      	ands	r2, r3
 801474c:	4b3f      	ldr	r3, [pc, #252]	@ (801484c <HAL_RCC_GetSysClockFreq+0x148>)
 801474e:	5c9b      	ldrb	r3, [r3, r2]
 8014750:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8014752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014754:	0d9a      	lsrs	r2, r3, #22
 8014756:	2303      	movs	r3, #3
 8014758:	4013      	ands	r3, r2
 801475a:	3301      	adds	r3, #1
 801475c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801475e:	4b37      	ldr	r3, [pc, #220]	@ (801483c <HAL_RCC_GetSysClockFreq+0x138>)
 8014760:	68da      	ldr	r2, [r3, #12]
 8014762:	2380      	movs	r3, #128	@ 0x80
 8014764:	025b      	lsls	r3, r3, #9
 8014766:	4013      	ands	r3, r2
 8014768:	d01a      	beq.n	80147a0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801476c:	61bb      	str	r3, [r7, #24]
 801476e:	2300      	movs	r3, #0
 8014770:	61fb      	str	r3, [r7, #28]
 8014772:	4a35      	ldr	r2, [pc, #212]	@ (8014848 <HAL_RCC_GetSysClockFreq+0x144>)
 8014774:	2300      	movs	r3, #0
 8014776:	69b8      	ldr	r0, [r7, #24]
 8014778:	69f9      	ldr	r1, [r7, #28]
 801477a:	f7eb ff21 	bl	80005c0 <__aeabi_lmul>
 801477e:	0002      	movs	r2, r0
 8014780:	000b      	movs	r3, r1
 8014782:	0010      	movs	r0, r2
 8014784:	0019      	movs	r1, r3
 8014786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014788:	613b      	str	r3, [r7, #16]
 801478a:	2300      	movs	r3, #0
 801478c:	617b      	str	r3, [r7, #20]
 801478e:	693a      	ldr	r2, [r7, #16]
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	f7eb fef5 	bl	8000580 <__aeabi_uldivmod>
 8014796:	0002      	movs	r2, r0
 8014798:	000b      	movs	r3, r1
 801479a:	0013      	movs	r3, r2
 801479c:	637b      	str	r3, [r7, #52]	@ 0x34
 801479e:	e037      	b.n	8014810 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80147a0:	4b26      	ldr	r3, [pc, #152]	@ (801483c <HAL_RCC_GetSysClockFreq+0x138>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2210      	movs	r2, #16
 80147a6:	4013      	ands	r3, r2
 80147a8:	d01a      	beq.n	80147e0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80147aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147ac:	60bb      	str	r3, [r7, #8]
 80147ae:	2300      	movs	r3, #0
 80147b0:	60fb      	str	r3, [r7, #12]
 80147b2:	4a23      	ldr	r2, [pc, #140]	@ (8014840 <HAL_RCC_GetSysClockFreq+0x13c>)
 80147b4:	2300      	movs	r3, #0
 80147b6:	68b8      	ldr	r0, [r7, #8]
 80147b8:	68f9      	ldr	r1, [r7, #12]
 80147ba:	f7eb ff01 	bl	80005c0 <__aeabi_lmul>
 80147be:	0002      	movs	r2, r0
 80147c0:	000b      	movs	r3, r1
 80147c2:	0010      	movs	r0, r2
 80147c4:	0019      	movs	r1, r3
 80147c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147c8:	603b      	str	r3, [r7, #0]
 80147ca:	2300      	movs	r3, #0
 80147cc:	607b      	str	r3, [r7, #4]
 80147ce:	683a      	ldr	r2, [r7, #0]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f7eb fed5 	bl	8000580 <__aeabi_uldivmod>
 80147d6:	0002      	movs	r2, r0
 80147d8:	000b      	movs	r3, r1
 80147da:	0013      	movs	r3, r2
 80147dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80147de:	e017      	b.n	8014810 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80147e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147e2:	0018      	movs	r0, r3
 80147e4:	2300      	movs	r3, #0
 80147e6:	0019      	movs	r1, r3
 80147e8:	4a16      	ldr	r2, [pc, #88]	@ (8014844 <HAL_RCC_GetSysClockFreq+0x140>)
 80147ea:	2300      	movs	r3, #0
 80147ec:	f7eb fee8 	bl	80005c0 <__aeabi_lmul>
 80147f0:	0002      	movs	r2, r0
 80147f2:	000b      	movs	r3, r1
 80147f4:	0010      	movs	r0, r2
 80147f6:	0019      	movs	r1, r3
 80147f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fa:	001c      	movs	r4, r3
 80147fc:	2300      	movs	r3, #0
 80147fe:	001d      	movs	r5, r3
 8014800:	0022      	movs	r2, r4
 8014802:	002b      	movs	r3, r5
 8014804:	f7eb febc 	bl	8000580 <__aeabi_uldivmod>
 8014808:	0002      	movs	r2, r0
 801480a:	000b      	movs	r3, r1
 801480c:	0013      	movs	r3, r2
 801480e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8014810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014812:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014814:	e00d      	b.n	8014832 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8014816:	4b09      	ldr	r3, [pc, #36]	@ (801483c <HAL_RCC_GetSysClockFreq+0x138>)
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	0b5b      	lsrs	r3, r3, #13
 801481c:	2207      	movs	r2, #7
 801481e:	4013      	ands	r3, r2
 8014820:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8014822:	6a3b      	ldr	r3, [r7, #32]
 8014824:	3301      	adds	r3, #1
 8014826:	2280      	movs	r2, #128	@ 0x80
 8014828:	0212      	lsls	r2, r2, #8
 801482a:	409a      	lsls	r2, r3
 801482c:	0013      	movs	r3, r2
 801482e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014830:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8014832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8014834:	0018      	movs	r0, r3
 8014836:	46bd      	mov	sp, r7
 8014838:	b00e      	add	sp, #56	@ 0x38
 801483a:	bdb0      	pop	{r4, r5, r7, pc}
 801483c:	40021000 	.word	0x40021000
 8014840:	003d0900 	.word	0x003d0900
 8014844:	00f42400 	.word	0x00f42400
 8014848:	007a1200 	.word	0x007a1200
 801484c:	08023bc8 	.word	0x08023bc8

08014850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014854:	4b02      	ldr	r3, [pc, #8]	@ (8014860 <HAL_RCC_GetHCLKFreq+0x10>)
 8014856:	681b      	ldr	r3, [r3, #0]
}
 8014858:	0018      	movs	r0, r3
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	46c0      	nop			@ (mov r8, r8)
 8014860:	200000c8 	.word	0x200000c8

08014864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014868:	f7ff fff2 	bl	8014850 <HAL_RCC_GetHCLKFreq>
 801486c:	0001      	movs	r1, r0
 801486e:	4b06      	ldr	r3, [pc, #24]	@ (8014888 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014870:	68db      	ldr	r3, [r3, #12]
 8014872:	0a1b      	lsrs	r3, r3, #8
 8014874:	2207      	movs	r2, #7
 8014876:	4013      	ands	r3, r2
 8014878:	4a04      	ldr	r2, [pc, #16]	@ (801488c <HAL_RCC_GetPCLK1Freq+0x28>)
 801487a:	5cd3      	ldrb	r3, [r2, r3]
 801487c:	40d9      	lsrs	r1, r3
 801487e:	000b      	movs	r3, r1
}
 8014880:	0018      	movs	r0, r3
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	46c0      	nop			@ (mov r8, r8)
 8014888:	40021000 	.word	0x40021000
 801488c:	08023bc0 	.word	0x08023bc0

08014890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014890:	b580      	push	{r7, lr}
 8014892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8014894:	f7ff ffdc 	bl	8014850 <HAL_RCC_GetHCLKFreq>
 8014898:	0001      	movs	r1, r0
 801489a:	4b06      	ldr	r3, [pc, #24]	@ (80148b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	0adb      	lsrs	r3, r3, #11
 80148a0:	2207      	movs	r2, #7
 80148a2:	4013      	ands	r3, r2
 80148a4:	4a04      	ldr	r2, [pc, #16]	@ (80148b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80148a6:	5cd3      	ldrb	r3, [r2, r3]
 80148a8:	40d9      	lsrs	r1, r3
 80148aa:	000b      	movs	r3, r1
}
 80148ac:	0018      	movs	r0, r3
 80148ae:	46bd      	mov	sp, r7
 80148b0:	bd80      	pop	{r7, pc}
 80148b2:	46c0      	nop			@ (mov r8, r8)
 80148b4:	40021000 	.word	0x40021000
 80148b8:	08023bc0 	.word	0x08023bc0

080148bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b086      	sub	sp, #24
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80148c4:	2017      	movs	r0, #23
 80148c6:	183b      	adds	r3, r7, r0
 80148c8:	2200      	movs	r2, #0
 80148ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	2220      	movs	r2, #32
 80148d2:	4013      	ands	r3, r2
 80148d4:	d100      	bne.n	80148d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80148d6:	e0c7      	b.n	8014a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80148d8:	4b9b      	ldr	r3, [pc, #620]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80148da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80148dc:	2380      	movs	r3, #128	@ 0x80
 80148de:	055b      	lsls	r3, r3, #21
 80148e0:	4013      	ands	r3, r2
 80148e2:	d109      	bne.n	80148f8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80148e4:	4b98      	ldr	r3, [pc, #608]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80148e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80148e8:	4b97      	ldr	r3, [pc, #604]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80148ea:	2180      	movs	r1, #128	@ 0x80
 80148ec:	0549      	lsls	r1, r1, #21
 80148ee:	430a      	orrs	r2, r1
 80148f0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80148f2:	183b      	adds	r3, r7, r0
 80148f4:	2201      	movs	r2, #1
 80148f6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80148f8:	4b94      	ldr	r3, [pc, #592]	@ (8014b4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80148fa:	681a      	ldr	r2, [r3, #0]
 80148fc:	2380      	movs	r3, #128	@ 0x80
 80148fe:	005b      	lsls	r3, r3, #1
 8014900:	4013      	ands	r3, r2
 8014902:	d11a      	bne.n	801493a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014904:	4b91      	ldr	r3, [pc, #580]	@ (8014b4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	4b90      	ldr	r3, [pc, #576]	@ (8014b4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801490a:	2180      	movs	r1, #128	@ 0x80
 801490c:	0049      	lsls	r1, r1, #1
 801490e:	430a      	orrs	r2, r1
 8014910:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014912:	f7f9 f8ed 	bl	800daf0 <HAL_GetTick>
 8014916:	0003      	movs	r3, r0
 8014918:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801491a:	e008      	b.n	801492e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801491c:	f7f9 f8e8 	bl	800daf0 <HAL_GetTick>
 8014920:	0002      	movs	r2, r0
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	2b64      	cmp	r3, #100	@ 0x64
 8014928:	d901      	bls.n	801492e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801492a:	2303      	movs	r3, #3
 801492c:	e107      	b.n	8014b3e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801492e:	4b87      	ldr	r3, [pc, #540]	@ (8014b4c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	2380      	movs	r3, #128	@ 0x80
 8014934:	005b      	lsls	r3, r3, #1
 8014936:	4013      	ands	r3, r2
 8014938:	d0f0      	beq.n	801491c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801493a:	4b83      	ldr	r3, [pc, #524]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801493c:	681a      	ldr	r2, [r3, #0]
 801493e:	23c0      	movs	r3, #192	@ 0xc0
 8014940:	039b      	lsls	r3, r3, #14
 8014942:	4013      	ands	r3, r2
 8014944:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	685a      	ldr	r2, [r3, #4]
 801494a:	23c0      	movs	r3, #192	@ 0xc0
 801494c:	039b      	lsls	r3, r3, #14
 801494e:	4013      	ands	r3, r2
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	429a      	cmp	r2, r3
 8014954:	d013      	beq.n	801497e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	685a      	ldr	r2, [r3, #4]
 801495a:	23c0      	movs	r3, #192	@ 0xc0
 801495c:	029b      	lsls	r3, r3, #10
 801495e:	401a      	ands	r2, r3
 8014960:	23c0      	movs	r3, #192	@ 0xc0
 8014962:	029b      	lsls	r3, r3, #10
 8014964:	429a      	cmp	r2, r3
 8014966:	d10a      	bne.n	801497e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014968:	4b77      	ldr	r3, [pc, #476]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	2380      	movs	r3, #128	@ 0x80
 801496e:	029b      	lsls	r3, r3, #10
 8014970:	401a      	ands	r2, r3
 8014972:	2380      	movs	r3, #128	@ 0x80
 8014974:	029b      	lsls	r3, r3, #10
 8014976:	429a      	cmp	r2, r3
 8014978:	d101      	bne.n	801497e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801497a:	2301      	movs	r3, #1
 801497c:	e0df      	b.n	8014b3e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801497e:	4b72      	ldr	r3, [pc, #456]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014982:	23c0      	movs	r3, #192	@ 0xc0
 8014984:	029b      	lsls	r3, r3, #10
 8014986:	4013      	ands	r3, r2
 8014988:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d03b      	beq.n	8014a08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	685a      	ldr	r2, [r3, #4]
 8014994:	23c0      	movs	r3, #192	@ 0xc0
 8014996:	029b      	lsls	r3, r3, #10
 8014998:	4013      	ands	r3, r2
 801499a:	68fa      	ldr	r2, [r7, #12]
 801499c:	429a      	cmp	r2, r3
 801499e:	d033      	beq.n	8014a08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	2220      	movs	r2, #32
 80149a6:	4013      	ands	r3, r2
 80149a8:	d02e      	beq.n	8014a08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80149aa:	4b67      	ldr	r3, [pc, #412]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149ae:	4a68      	ldr	r2, [pc, #416]	@ (8014b50 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80149b0:	4013      	ands	r3, r2
 80149b2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80149b4:	4b64      	ldr	r3, [pc, #400]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149b8:	4b63      	ldr	r3, [pc, #396]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149ba:	2180      	movs	r1, #128	@ 0x80
 80149bc:	0309      	lsls	r1, r1, #12
 80149be:	430a      	orrs	r2, r1
 80149c0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80149c2:	4b61      	ldr	r3, [pc, #388]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80149c6:	4b60      	ldr	r3, [pc, #384]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149c8:	4962      	ldr	r1, [pc, #392]	@ (8014b54 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80149ca:	400a      	ands	r2, r1
 80149cc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80149ce:	4b5e      	ldr	r3, [pc, #376]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149d0:	68fa      	ldr	r2, [r7, #12]
 80149d2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80149d4:	68fa      	ldr	r2, [r7, #12]
 80149d6:	2380      	movs	r3, #128	@ 0x80
 80149d8:	005b      	lsls	r3, r3, #1
 80149da:	4013      	ands	r3, r2
 80149dc:	d014      	beq.n	8014a08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149de:	f7f9 f887 	bl	800daf0 <HAL_GetTick>
 80149e2:	0003      	movs	r3, r0
 80149e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80149e6:	e009      	b.n	80149fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80149e8:	f7f9 f882 	bl	800daf0 <HAL_GetTick>
 80149ec:	0002      	movs	r2, r0
 80149ee:	693b      	ldr	r3, [r7, #16]
 80149f0:	1ad3      	subs	r3, r2, r3
 80149f2:	4a59      	ldr	r2, [pc, #356]	@ (8014b58 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80149f4:	4293      	cmp	r3, r2
 80149f6:	d901      	bls.n	80149fc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80149f8:	2303      	movs	r3, #3
 80149fa:	e0a0      	b.n	8014b3e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80149fc:	4b52      	ldr	r3, [pc, #328]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a00:	2380      	movs	r3, #128	@ 0x80
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	4013      	ands	r3, r2
 8014a06:	d0ef      	beq.n	80149e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2220      	movs	r2, #32
 8014a0e:	4013      	ands	r3, r2
 8014a10:	d01f      	beq.n	8014a52 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	685a      	ldr	r2, [r3, #4]
 8014a16:	23c0      	movs	r3, #192	@ 0xc0
 8014a18:	029b      	lsls	r3, r3, #10
 8014a1a:	401a      	ands	r2, r3
 8014a1c:	23c0      	movs	r3, #192	@ 0xc0
 8014a1e:	029b      	lsls	r3, r3, #10
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d10c      	bne.n	8014a3e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8014a24:	4b48      	ldr	r3, [pc, #288]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4a4c      	ldr	r2, [pc, #304]	@ (8014b5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8014a2a:	4013      	ands	r3, r2
 8014a2c:	0019      	movs	r1, r3
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	685a      	ldr	r2, [r3, #4]
 8014a32:	23c0      	movs	r3, #192	@ 0xc0
 8014a34:	039b      	lsls	r3, r3, #14
 8014a36:	401a      	ands	r2, r3
 8014a38:	4b43      	ldr	r3, [pc, #268]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a3a:	430a      	orrs	r2, r1
 8014a3c:	601a      	str	r2, [r3, #0]
 8014a3e:	4b42      	ldr	r3, [pc, #264]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	685a      	ldr	r2, [r3, #4]
 8014a46:	23c0      	movs	r3, #192	@ 0xc0
 8014a48:	029b      	lsls	r3, r3, #10
 8014a4a:	401a      	ands	r2, r3
 8014a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a4e:	430a      	orrs	r2, r1
 8014a50:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014a52:	2317      	movs	r3, #23
 8014a54:	18fb      	adds	r3, r7, r3
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	2b01      	cmp	r3, #1
 8014a5a:	d105      	bne.n	8014a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a60:	4b39      	ldr	r3, [pc, #228]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a62:	493f      	ldr	r1, [pc, #252]	@ (8014b60 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8014a64:	400a      	ands	r2, r1
 8014a66:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	2201      	movs	r2, #1
 8014a6e:	4013      	ands	r3, r2
 8014a70:	d009      	beq.n	8014a86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014a72:	4b35      	ldr	r3, [pc, #212]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a76:	2203      	movs	r2, #3
 8014a78:	4393      	bics	r3, r2
 8014a7a:	0019      	movs	r1, r3
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	689a      	ldr	r2, [r3, #8]
 8014a80:	4b31      	ldr	r3, [pc, #196]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a82:	430a      	orrs	r2, r1
 8014a84:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2202      	movs	r2, #2
 8014a8c:	4013      	ands	r3, r2
 8014a8e:	d009      	beq.n	8014aa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014a90:	4b2d      	ldr	r3, [pc, #180]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014a94:	220c      	movs	r2, #12
 8014a96:	4393      	bics	r3, r2
 8014a98:	0019      	movs	r1, r3
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	68da      	ldr	r2, [r3, #12]
 8014a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014aa0:	430a      	orrs	r2, r1
 8014aa2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	2204      	movs	r2, #4
 8014aaa:	4013      	ands	r3, r2
 8014aac:	d009      	beq.n	8014ac2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014aae:	4b26      	ldr	r3, [pc, #152]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8014b64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8014ab4:	4013      	ands	r3, r2
 8014ab6:	0019      	movs	r1, r3
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	691a      	ldr	r2, [r3, #16]
 8014abc:	4b22      	ldr	r3, [pc, #136]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014abe:	430a      	orrs	r2, r1
 8014ac0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	2208      	movs	r2, #8
 8014ac8:	4013      	ands	r3, r2
 8014aca:	d009      	beq.n	8014ae0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8014acc:	4b1e      	ldr	r3, [pc, #120]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ad0:	4a25      	ldr	r2, [pc, #148]	@ (8014b68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8014ad2:	4013      	ands	r3, r2
 8014ad4:	0019      	movs	r1, r3
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	695a      	ldr	r2, [r3, #20]
 8014ada:	4b1b      	ldr	r3, [pc, #108]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014adc:	430a      	orrs	r2, r1
 8014ade:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	2380      	movs	r3, #128	@ 0x80
 8014ae6:	005b      	lsls	r3, r3, #1
 8014ae8:	4013      	ands	r3, r2
 8014aea:	d009      	beq.n	8014b00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014aec:	4b16      	ldr	r3, [pc, #88]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014af0:	4a17      	ldr	r2, [pc, #92]	@ (8014b50 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014af2:	4013      	ands	r3, r2
 8014af4:	0019      	movs	r1, r3
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	699a      	ldr	r2, [r3, #24]
 8014afa:	4b13      	ldr	r3, [pc, #76]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014afc:	430a      	orrs	r2, r1
 8014afe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2240      	movs	r2, #64	@ 0x40
 8014b06:	4013      	ands	r3, r2
 8014b08:	d009      	beq.n	8014b1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b0e:	4a17      	ldr	r2, [pc, #92]	@ (8014b6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8014b10:	4013      	ands	r3, r2
 8014b12:	0019      	movs	r1, r3
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6a1a      	ldr	r2, [r3, #32]
 8014b18:	4b0b      	ldr	r3, [pc, #44]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b1a:	430a      	orrs	r2, r1
 8014b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	2280      	movs	r2, #128	@ 0x80
 8014b24:	4013      	ands	r3, r2
 8014b26:	d009      	beq.n	8014b3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8014b28:	4b07      	ldr	r3, [pc, #28]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b2c:	4a10      	ldr	r2, [pc, #64]	@ (8014b70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8014b2e:	4013      	ands	r3, r2
 8014b30:	0019      	movs	r1, r3
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	69da      	ldr	r2, [r3, #28]
 8014b36:	4b04      	ldr	r3, [pc, #16]	@ (8014b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b38:	430a      	orrs	r2, r1
 8014b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8014b3c:	2300      	movs	r3, #0
}
 8014b3e:	0018      	movs	r0, r3
 8014b40:	46bd      	mov	sp, r7
 8014b42:	b006      	add	sp, #24
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	46c0      	nop			@ (mov r8, r8)
 8014b48:	40021000 	.word	0x40021000
 8014b4c:	40007000 	.word	0x40007000
 8014b50:	fffcffff 	.word	0xfffcffff
 8014b54:	fff7ffff 	.word	0xfff7ffff
 8014b58:	00001388 	.word	0x00001388
 8014b5c:	ffcfffff 	.word	0xffcfffff
 8014b60:	efffffff 	.word	0xefffffff
 8014b64:	fffff3ff 	.word	0xfffff3ff
 8014b68:	ffffcfff 	.word	0xffffcfff
 8014b6c:	fbffffff 	.word	0xfbffffff
 8014b70:	fff3ffff 	.word	0xfff3ffff

08014b74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8014b74:	b5b0      	push	{r4, r5, r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014b7c:	230f      	movs	r3, #15
 8014b7e:	18fb      	adds	r3, r7, r3
 8014b80:	2201      	movs	r2, #1
 8014b82:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d101      	bne.n	8014b8e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	e088      	b.n	8014ca0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2221      	movs	r2, #33	@ 0x21
 8014b92:	5c9b      	ldrb	r3, [r3, r2]
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d107      	bne.n	8014baa <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	2220      	movs	r2, #32
 8014b9e:	2100      	movs	r1, #0
 8014ba0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	0018      	movs	r0, r3
 8014ba6:	f7f3 fdcf 	bl	8008748 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2221      	movs	r2, #33	@ 0x21
 8014bae:	2102      	movs	r1, #2
 8014bb0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	68db      	ldr	r3, [r3, #12]
 8014bb8:	2210      	movs	r2, #16
 8014bba:	4013      	ands	r3, r2
 8014bbc:	2b10      	cmp	r3, #16
 8014bbe:	d05f      	beq.n	8014c80 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	22ca      	movs	r2, #202	@ 0xca
 8014bc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	2253      	movs	r2, #83	@ 0x53
 8014bce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8014bd0:	250f      	movs	r5, #15
 8014bd2:	197c      	adds	r4, r7, r5
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	0018      	movs	r0, r3
 8014bd8:	f000 fa7c 	bl	80150d4 <RTC_EnterInitMode>
 8014bdc:	0003      	movs	r3, r0
 8014bde:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8014be0:	0028      	movs	r0, r5
 8014be2:	183b      	adds	r3, r7, r0
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d12c      	bne.n	8014c44 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	689a      	ldr	r2, [r3, #8]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	492c      	ldr	r1, [pc, #176]	@ (8014ca8 <HAL_RTC_Init+0x134>)
 8014bf6:	400a      	ands	r2, r1
 8014bf8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	6899      	ldr	r1, [r3, #8]
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	685a      	ldr	r2, [r3, #4]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	691b      	ldr	r3, [r3, #16]
 8014c08:	431a      	orrs	r2, r3
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	699b      	ldr	r3, [r3, #24]
 8014c0e:	431a      	orrs	r2, r3
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	430a      	orrs	r2, r1
 8014c16:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	68d2      	ldr	r2, [r2, #12]
 8014c20:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	6919      	ldr	r1, [r3, #16]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	689b      	ldr	r3, [r3, #8]
 8014c2c:	041a      	lsls	r2, r3, #16
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	430a      	orrs	r2, r1
 8014c34:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8014c36:	183c      	adds	r4, r7, r0
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	0018      	movs	r0, r3
 8014c3c:	f000 fa8e 	bl	801515c <RTC_ExitInitMode>
 8014c40:	0003      	movs	r3, r0
 8014c42:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8014c44:	230f      	movs	r3, #15
 8014c46:	18fb      	adds	r3, r7, r3
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d113      	bne.n	8014c76 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2103      	movs	r1, #3
 8014c5a:	438a      	bics	r2, r1
 8014c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	69da      	ldr	r2, [r3, #28]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	695b      	ldr	r3, [r3, #20]
 8014c6c:	431a      	orrs	r2, r3
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	430a      	orrs	r2, r1
 8014c74:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	22ff      	movs	r2, #255	@ 0xff
 8014c7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014c7e:	e003      	b.n	8014c88 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8014c80:	230f      	movs	r3, #15
 8014c82:	18fb      	adds	r3, r7, r3
 8014c84:	2200      	movs	r2, #0
 8014c86:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8014c88:	230f      	movs	r3, #15
 8014c8a:	18fb      	adds	r3, r7, r3
 8014c8c:	781b      	ldrb	r3, [r3, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d103      	bne.n	8014c9a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	2221      	movs	r2, #33	@ 0x21
 8014c96:	2101      	movs	r1, #1
 8014c98:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8014c9a:	230f      	movs	r3, #15
 8014c9c:	18fb      	adds	r3, r7, r3
 8014c9e:	781b      	ldrb	r3, [r3, #0]
}
 8014ca0:	0018      	movs	r0, r3
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	b004      	add	sp, #16
 8014ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8014ca8:	ff8fffbf 	.word	0xff8fffbf

08014cac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014cac:	b5b0      	push	{r4, r5, r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	60f8      	str	r0, [r7, #12]
 8014cb4:	60b9      	str	r1, [r7, #8]
 8014cb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2220      	movs	r2, #32
 8014cc0:	5c9b      	ldrb	r3, [r3, r2]
 8014cc2:	2b01      	cmp	r3, #1
 8014cc4:	d101      	bne.n	8014cca <HAL_RTC_SetTime+0x1e>
 8014cc6:	2302      	movs	r3, #2
 8014cc8:	e092      	b.n	8014df0 <HAL_RTC_SetTime+0x144>
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2220      	movs	r2, #32
 8014cce:	2101      	movs	r1, #1
 8014cd0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	2221      	movs	r2, #33	@ 0x21
 8014cd6:	2102      	movs	r1, #2
 8014cd8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d125      	bne.n	8014d2c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	689b      	ldr	r3, [r3, #8]
 8014ce6:	2240      	movs	r2, #64	@ 0x40
 8014ce8:	4013      	ands	r3, r2
 8014cea:	d102      	bne.n	8014cf2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	0018      	movs	r0, r3
 8014cf8:	f000 fa5a 	bl	80151b0 <RTC_ByteToBcd2>
 8014cfc:	0003      	movs	r3, r0
 8014cfe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	785b      	ldrb	r3, [r3, #1]
 8014d04:	0018      	movs	r0, r3
 8014d06:	f000 fa53 	bl	80151b0 <RTC_ByteToBcd2>
 8014d0a:	0003      	movs	r3, r0
 8014d0c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014d0e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	789b      	ldrb	r3, [r3, #2]
 8014d14:	0018      	movs	r0, r3
 8014d16:	f000 fa4b 	bl	80151b0 <RTC_ByteToBcd2>
 8014d1a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014d1c:	0022      	movs	r2, r4
 8014d1e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	78db      	ldrb	r3, [r3, #3]
 8014d24:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014d26:	4313      	orrs	r3, r2
 8014d28:	617b      	str	r3, [r7, #20]
 8014d2a:	e017      	b.n	8014d5c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	689b      	ldr	r3, [r3, #8]
 8014d32:	2240      	movs	r2, #64	@ 0x40
 8014d34:	4013      	ands	r3, r2
 8014d36:	d102      	bne.n	8014d3e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014d3e:	68bb      	ldr	r3, [r7, #8]
 8014d40:	781b      	ldrb	r3, [r3, #0]
 8014d42:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	785b      	ldrb	r3, [r3, #1]
 8014d48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014d4a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8014d4c:	68ba      	ldr	r2, [r7, #8]
 8014d4e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8014d50:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	78db      	ldrb	r3, [r3, #3]
 8014d56:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014d58:	4313      	orrs	r3, r2
 8014d5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	22ca      	movs	r2, #202	@ 0xca
 8014d62:	625a      	str	r2, [r3, #36]	@ 0x24
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2253      	movs	r2, #83	@ 0x53
 8014d6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014d6c:	2513      	movs	r5, #19
 8014d6e:	197c      	adds	r4, r7, r5
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	0018      	movs	r0, r3
 8014d74:	f000 f9ae 	bl	80150d4 <RTC_EnterInitMode>
 8014d78:	0003      	movs	r3, r0
 8014d7a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014d7c:	0028      	movs	r0, r5
 8014d7e:	183b      	adds	r3, r7, r0
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d120      	bne.n	8014dc8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	697a      	ldr	r2, [r7, #20]
 8014d8c:	491a      	ldr	r1, [pc, #104]	@ (8014df8 <HAL_RTC_SetTime+0x14c>)
 8014d8e:	400a      	ands	r2, r1
 8014d90:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	689a      	ldr	r2, [r3, #8]
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	4917      	ldr	r1, [pc, #92]	@ (8014dfc <HAL_RTC_SetTime+0x150>)
 8014d9e:	400a      	ands	r2, r1
 8014da0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	6899      	ldr	r1, [r3, #8]
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	68da      	ldr	r2, [r3, #12]
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	691b      	ldr	r3, [r3, #16]
 8014db0:	431a      	orrs	r2, r3
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	430a      	orrs	r2, r1
 8014db8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014dba:	183c      	adds	r4, r7, r0
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	0018      	movs	r0, r3
 8014dc0:	f000 f9cc 	bl	801515c <RTC_ExitInitMode>
 8014dc4:	0003      	movs	r3, r0
 8014dc6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014dc8:	2313      	movs	r3, #19
 8014dca:	18fb      	adds	r3, r7, r3
 8014dcc:	781b      	ldrb	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d103      	bne.n	8014dda <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2221      	movs	r2, #33	@ 0x21
 8014dd6:	2101      	movs	r1, #1
 8014dd8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	22ff      	movs	r2, #255	@ 0xff
 8014de0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2220      	movs	r2, #32
 8014de6:	2100      	movs	r1, #0
 8014de8:	5499      	strb	r1, [r3, r2]

  return status;
 8014dea:	2313      	movs	r3, #19
 8014dec:	18fb      	adds	r3, r7, r3
 8014dee:	781b      	ldrb	r3, [r3, #0]
}
 8014df0:	0018      	movs	r0, r3
 8014df2:	46bd      	mov	sp, r7
 8014df4:	b006      	add	sp, #24
 8014df6:	bdb0      	pop	{r4, r5, r7, pc}
 8014df8:	007f7f7f 	.word	0x007f7f7f
 8014dfc:	fffbffff 	.word	0xfffbffff

08014e00 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b086      	sub	sp, #24
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014e16:	68bb      	ldr	r3, [r7, #8]
 8014e18:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	691b      	ldr	r3, [r3, #16]
 8014e20:	045b      	lsls	r3, r3, #17
 8014e22:	0c5a      	lsrs	r2, r3, #17
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	4a22      	ldr	r2, [pc, #136]	@ (8014eb8 <HAL_RTC_GetTime+0xb8>)
 8014e30:	4013      	ands	r3, r2
 8014e32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	0c1b      	lsrs	r3, r3, #16
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	223f      	movs	r2, #63	@ 0x3f
 8014e3c:	4013      	ands	r3, r2
 8014e3e:	b2da      	uxtb	r2, r3
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	0a1b      	lsrs	r3, r3, #8
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	227f      	movs	r2, #127	@ 0x7f
 8014e4c:	4013      	ands	r3, r2
 8014e4e:	b2da      	uxtb	r2, r3
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	b2db      	uxtb	r3, r3
 8014e58:	227f      	movs	r2, #127	@ 0x7f
 8014e5a:	4013      	ands	r3, r2
 8014e5c:	b2da      	uxtb	r2, r3
 8014e5e:	68bb      	ldr	r3, [r7, #8]
 8014e60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	0d9b      	lsrs	r3, r3, #22
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	2201      	movs	r2, #1
 8014e6a:	4013      	ands	r3, r2
 8014e6c:	b2da      	uxtb	r2, r3
 8014e6e:	68bb      	ldr	r3, [r7, #8]
 8014e70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d11a      	bne.n	8014eae <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	781b      	ldrb	r3, [r3, #0]
 8014e7c:	0018      	movs	r0, r3
 8014e7e:	f000 f9b8 	bl	80151f2 <RTC_Bcd2ToByte>
 8014e82:	0003      	movs	r3, r0
 8014e84:	001a      	movs	r2, r3
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	785b      	ldrb	r3, [r3, #1]
 8014e8e:	0018      	movs	r0, r3
 8014e90:	f000 f9af 	bl	80151f2 <RTC_Bcd2ToByte>
 8014e94:	0003      	movs	r3, r0
 8014e96:	001a      	movs	r2, r3
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	789b      	ldrb	r3, [r3, #2]
 8014ea0:	0018      	movs	r0, r3
 8014ea2:	f000 f9a6 	bl	80151f2 <RTC_Bcd2ToByte>
 8014ea6:	0003      	movs	r3, r0
 8014ea8:	001a      	movs	r2, r3
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8014eae:	2300      	movs	r3, #0
}
 8014eb0:	0018      	movs	r0, r3
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	b006      	add	sp, #24
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	007f7f7f 	.word	0x007f7f7f

08014ebc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014ebc:	b5b0      	push	{r4, r5, r7, lr}
 8014ebe:	b086      	sub	sp, #24
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	60f8      	str	r0, [r7, #12]
 8014ec4:	60b9      	str	r1, [r7, #8]
 8014ec6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	2220      	movs	r2, #32
 8014ed0:	5c9b      	ldrb	r3, [r3, r2]
 8014ed2:	2b01      	cmp	r3, #1
 8014ed4:	d101      	bne.n	8014eda <HAL_RTC_SetDate+0x1e>
 8014ed6:	2302      	movs	r3, #2
 8014ed8:	e07e      	b.n	8014fd8 <HAL_RTC_SetDate+0x11c>
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	2220      	movs	r2, #32
 8014ede:	2101      	movs	r1, #1
 8014ee0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	2221      	movs	r2, #33	@ 0x21
 8014ee6:	2102      	movs	r1, #2
 8014ee8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d10e      	bne.n	8014f0e <HAL_RTC_SetDate+0x52>
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	785b      	ldrb	r3, [r3, #1]
 8014ef4:	001a      	movs	r2, r3
 8014ef6:	2310      	movs	r3, #16
 8014ef8:	4013      	ands	r3, r2
 8014efa:	d008      	beq.n	8014f0e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	785b      	ldrb	r3, [r3, #1]
 8014f00:	2210      	movs	r2, #16
 8014f02:	4393      	bics	r3, r2
 8014f04:	b2db      	uxtb	r3, r3
 8014f06:	330a      	adds	r3, #10
 8014f08:	b2da      	uxtb	r2, r3
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d11c      	bne.n	8014f4e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	78db      	ldrb	r3, [r3, #3]
 8014f18:	0018      	movs	r0, r3
 8014f1a:	f000 f949 	bl	80151b0 <RTC_ByteToBcd2>
 8014f1e:	0003      	movs	r3, r0
 8014f20:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	785b      	ldrb	r3, [r3, #1]
 8014f26:	0018      	movs	r0, r3
 8014f28:	f000 f942 	bl	80151b0 <RTC_ByteToBcd2>
 8014f2c:	0003      	movs	r3, r0
 8014f2e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014f30:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	789b      	ldrb	r3, [r3, #2]
 8014f36:	0018      	movs	r0, r3
 8014f38:	f000 f93a 	bl	80151b0 <RTC_ByteToBcd2>
 8014f3c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014f3e:	0022      	movs	r2, r4
 8014f40:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014f48:	4313      	orrs	r3, r2
 8014f4a:	617b      	str	r3, [r7, #20]
 8014f4c:	e00e      	b.n	8014f6c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	78db      	ldrb	r3, [r3, #3]
 8014f52:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	785b      	ldrb	r3, [r3, #1]
 8014f58:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014f5a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8014f5c:	68ba      	ldr	r2, [r7, #8]
 8014f5e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014f60:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014f68:	4313      	orrs	r3, r2
 8014f6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	22ca      	movs	r2, #202	@ 0xca
 8014f72:	625a      	str	r2, [r3, #36]	@ 0x24
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	2253      	movs	r2, #83	@ 0x53
 8014f7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014f7c:	2513      	movs	r5, #19
 8014f7e:	197c      	adds	r4, r7, r5
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	0018      	movs	r0, r3
 8014f84:	f000 f8a6 	bl	80150d4 <RTC_EnterInitMode>
 8014f88:	0003      	movs	r3, r0
 8014f8a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014f8c:	0028      	movs	r0, r5
 8014f8e:	183b      	adds	r3, r7, r0
 8014f90:	781b      	ldrb	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d10c      	bne.n	8014fb0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	697a      	ldr	r2, [r7, #20]
 8014f9c:	4910      	ldr	r1, [pc, #64]	@ (8014fe0 <HAL_RTC_SetDate+0x124>)
 8014f9e:	400a      	ands	r2, r1
 8014fa0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014fa2:	183c      	adds	r4, r7, r0
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	0018      	movs	r0, r3
 8014fa8:	f000 f8d8 	bl	801515c <RTC_ExitInitMode>
 8014fac:	0003      	movs	r3, r0
 8014fae:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014fb0:	2313      	movs	r3, #19
 8014fb2:	18fb      	adds	r3, r7, r3
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d103      	bne.n	8014fc2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2221      	movs	r2, #33	@ 0x21
 8014fbe:	2101      	movs	r1, #1
 8014fc0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	22ff      	movs	r2, #255	@ 0xff
 8014fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2220      	movs	r2, #32
 8014fce:	2100      	movs	r1, #0
 8014fd0:	5499      	strb	r1, [r3, r2]

  return status;
 8014fd2:	2313      	movs	r3, #19
 8014fd4:	18fb      	adds	r3, r7, r3
 8014fd6:	781b      	ldrb	r3, [r3, #0]
}
 8014fd8:	0018      	movs	r0, r3
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	b006      	add	sp, #24
 8014fde:	bdb0      	pop	{r4, r5, r7, pc}
 8014fe0:	00ffff3f 	.word	0x00ffff3f

08014fe4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b086      	sub	sp, #24
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	4a21      	ldr	r2, [pc, #132]	@ (8015080 <HAL_RTC_GetDate+0x9c>)
 8014ffc:	4013      	ands	r3, r2
 8014ffe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	0c1b      	lsrs	r3, r3, #16
 8015004:	b2da      	uxtb	r2, r3
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801500a:	697b      	ldr	r3, [r7, #20]
 801500c:	0a1b      	lsrs	r3, r3, #8
 801500e:	b2db      	uxtb	r3, r3
 8015010:	221f      	movs	r2, #31
 8015012:	4013      	ands	r3, r2
 8015014:	b2da      	uxtb	r2, r3
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801501a:	697b      	ldr	r3, [r7, #20]
 801501c:	b2db      	uxtb	r3, r3
 801501e:	223f      	movs	r2, #63	@ 0x3f
 8015020:	4013      	ands	r3, r2
 8015022:	b2da      	uxtb	r2, r3
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	0b5b      	lsrs	r3, r3, #13
 801502c:	b2db      	uxtb	r3, r3
 801502e:	2207      	movs	r2, #7
 8015030:	4013      	ands	r3, r2
 8015032:	b2da      	uxtb	r2, r3
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d11a      	bne.n	8015074 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	78db      	ldrb	r3, [r3, #3]
 8015042:	0018      	movs	r0, r3
 8015044:	f000 f8d5 	bl	80151f2 <RTC_Bcd2ToByte>
 8015048:	0003      	movs	r3, r0
 801504a:	001a      	movs	r2, r3
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	785b      	ldrb	r3, [r3, #1]
 8015054:	0018      	movs	r0, r3
 8015056:	f000 f8cc 	bl	80151f2 <RTC_Bcd2ToByte>
 801505a:	0003      	movs	r3, r0
 801505c:	001a      	movs	r2, r3
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	789b      	ldrb	r3, [r3, #2]
 8015066:	0018      	movs	r0, r3
 8015068:	f000 f8c3 	bl	80151f2 <RTC_Bcd2ToByte>
 801506c:	0003      	movs	r3, r0
 801506e:	001a      	movs	r2, r3
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015074:	2300      	movs	r3, #0
}
 8015076:	0018      	movs	r0, r3
 8015078:	46bd      	mov	sp, r7
 801507a:	b006      	add	sp, #24
 801507c:	bd80      	pop	{r7, pc}
 801507e:	46c0      	nop			@ (mov r8, r8)
 8015080:	00ffff3f 	.word	0x00ffff3f

08015084 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801508c:	2300      	movs	r3, #0
 801508e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	4a0e      	ldr	r2, [pc, #56]	@ (80150d0 <HAL_RTC_WaitForSynchro+0x4c>)
 8015096:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015098:	f7f8 fd2a 	bl	800daf0 <HAL_GetTick>
 801509c:	0003      	movs	r3, r0
 801509e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80150a0:	e00a      	b.n	80150b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80150a2:	f7f8 fd25 	bl	800daf0 <HAL_GetTick>
 80150a6:	0002      	movs	r2, r0
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	1ad2      	subs	r2, r2, r3
 80150ac:	23fa      	movs	r3, #250	@ 0xfa
 80150ae:	009b      	lsls	r3, r3, #2
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d901      	bls.n	80150b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80150b4:	2303      	movs	r3, #3
 80150b6:	e006      	b.n	80150c6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	2220      	movs	r2, #32
 80150c0:	4013      	ands	r3, r2
 80150c2:	d0ee      	beq.n	80150a2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80150c4:	2300      	movs	r3, #0
}
 80150c6:	0018      	movs	r0, r3
 80150c8:	46bd      	mov	sp, r7
 80150ca:	b004      	add	sp, #16
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	46c0      	nop			@ (mov r8, r8)
 80150d0:	0001ff5f 	.word	0x0001ff5f

080150d4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b084      	sub	sp, #16
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80150dc:	2300      	movs	r3, #0
 80150de:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80150e0:	230f      	movs	r3, #15
 80150e2:	18fb      	adds	r3, r7, r3
 80150e4:	2200      	movs	r2, #0
 80150e6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	68db      	ldr	r3, [r3, #12]
 80150ee:	2240      	movs	r2, #64	@ 0x40
 80150f0:	4013      	ands	r3, r2
 80150f2:	d12c      	bne.n	801514e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	68da      	ldr	r2, [r3, #12]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	2180      	movs	r1, #128	@ 0x80
 8015100:	430a      	orrs	r2, r1
 8015102:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015104:	f7f8 fcf4 	bl	800daf0 <HAL_GetTick>
 8015108:	0003      	movs	r3, r0
 801510a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801510c:	e014      	b.n	8015138 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801510e:	f7f8 fcef 	bl	800daf0 <HAL_GetTick>
 8015112:	0002      	movs	r2, r0
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	1ad2      	subs	r2, r2, r3
 8015118:	200f      	movs	r0, #15
 801511a:	183b      	adds	r3, r7, r0
 801511c:	1839      	adds	r1, r7, r0
 801511e:	7809      	ldrb	r1, [r1, #0]
 8015120:	7019      	strb	r1, [r3, #0]
 8015122:	23fa      	movs	r3, #250	@ 0xfa
 8015124:	009b      	lsls	r3, r3, #2
 8015126:	429a      	cmp	r2, r3
 8015128:	d906      	bls.n	8015138 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2221      	movs	r2, #33	@ 0x21
 801512e:	2104      	movs	r1, #4
 8015130:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8015132:	183b      	adds	r3, r7, r0
 8015134:	2201      	movs	r2, #1
 8015136:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	68db      	ldr	r3, [r3, #12]
 801513e:	2240      	movs	r2, #64	@ 0x40
 8015140:	4013      	ands	r3, r2
 8015142:	d104      	bne.n	801514e <RTC_EnterInitMode+0x7a>
 8015144:	230f      	movs	r3, #15
 8015146:	18fb      	adds	r3, r7, r3
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	2b01      	cmp	r3, #1
 801514c:	d1df      	bne.n	801510e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801514e:	230f      	movs	r3, #15
 8015150:	18fb      	adds	r3, r7, r3
 8015152:	781b      	ldrb	r3, [r3, #0]
}
 8015154:	0018      	movs	r0, r3
 8015156:	46bd      	mov	sp, r7
 8015158:	b004      	add	sp, #16
 801515a:	bd80      	pop	{r7, pc}

0801515c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801515c:	b590      	push	{r4, r7, lr}
 801515e:	b085      	sub	sp, #20
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015164:	240f      	movs	r4, #15
 8015166:	193b      	adds	r3, r7, r4
 8015168:	2200      	movs	r2, #0
 801516a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	68da      	ldr	r2, [r3, #12]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	2180      	movs	r1, #128	@ 0x80
 8015178:	438a      	bics	r2, r1
 801517a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	689b      	ldr	r3, [r3, #8]
 8015182:	2220      	movs	r2, #32
 8015184:	4013      	ands	r3, r2
 8015186:	d10c      	bne.n	80151a2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	0018      	movs	r0, r3
 801518c:	f7ff ff7a 	bl	8015084 <HAL_RTC_WaitForSynchro>
 8015190:	1e03      	subs	r3, r0, #0
 8015192:	d006      	beq.n	80151a2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2221      	movs	r2, #33	@ 0x21
 8015198:	2104      	movs	r1, #4
 801519a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801519c:	193b      	adds	r3, r7, r4
 801519e:	2201      	movs	r2, #1
 80151a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80151a2:	230f      	movs	r3, #15
 80151a4:	18fb      	adds	r3, r7, r3
 80151a6:	781b      	ldrb	r3, [r3, #0]
}
 80151a8:	0018      	movs	r0, r3
 80151aa:	46bd      	mov	sp, r7
 80151ac:	b005      	add	sp, #20
 80151ae:	bd90      	pop	{r4, r7, pc}

080151b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b084      	sub	sp, #16
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	0002      	movs	r2, r0
 80151b8:	1dfb      	adds	r3, r7, #7
 80151ba:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80151bc:	2300      	movs	r3, #0
 80151be:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80151c0:	e007      	b.n	80151d2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	3301      	adds	r3, #1
 80151c6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80151c8:	1dfb      	adds	r3, r7, #7
 80151ca:	1dfa      	adds	r2, r7, #7
 80151cc:	7812      	ldrb	r2, [r2, #0]
 80151ce:	3a0a      	subs	r2, #10
 80151d0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80151d2:	1dfb      	adds	r3, r7, #7
 80151d4:	781b      	ldrb	r3, [r3, #0]
 80151d6:	2b09      	cmp	r3, #9
 80151d8:	d8f3      	bhi.n	80151c2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	011b      	lsls	r3, r3, #4
 80151e0:	b2da      	uxtb	r2, r3
 80151e2:	1dfb      	adds	r3, r7, #7
 80151e4:	781b      	ldrb	r3, [r3, #0]
 80151e6:	4313      	orrs	r3, r2
 80151e8:	b2db      	uxtb	r3, r3
}
 80151ea:	0018      	movs	r0, r3
 80151ec:	46bd      	mov	sp, r7
 80151ee:	b004      	add	sp, #16
 80151f0:	bd80      	pop	{r7, pc}

080151f2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b084      	sub	sp, #16
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	0002      	movs	r2, r0
 80151fa:	1dfb      	adds	r3, r7, #7
 80151fc:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80151fe:	2300      	movs	r3, #0
 8015200:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8015202:	1dfb      	adds	r3, r7, #7
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	091b      	lsrs	r3, r3, #4
 8015208:	b2db      	uxtb	r3, r3
 801520a:	001a      	movs	r2, r3
 801520c:	0013      	movs	r3, r2
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	189b      	adds	r3, r3, r2
 8015212:	005b      	lsls	r3, r3, #1
 8015214:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	b2da      	uxtb	r2, r3
 801521a:	1dfb      	adds	r3, r7, #7
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	210f      	movs	r1, #15
 8015220:	400b      	ands	r3, r1
 8015222:	b2db      	uxtb	r3, r3
 8015224:	18d3      	adds	r3, r2, r3
 8015226:	b2db      	uxtb	r3, r3
}
 8015228:	0018      	movs	r0, r3
 801522a:	46bd      	mov	sp, r7
 801522c:	b004      	add	sp, #16
 801522e:	bd80      	pop	{r7, pc}

08015230 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b086      	sub	sp, #24
 8015234:	af00      	add	r7, sp, #0
 8015236:	60f8      	str	r0, [r7, #12]
 8015238:	60b9      	str	r1, [r7, #8]
 801523a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801523c:	4b64      	ldr	r3, [pc, #400]	@ (80153d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	22fa      	movs	r2, #250	@ 0xfa
 8015242:	01d1      	lsls	r1, r2, #7
 8015244:	0018      	movs	r0, r3
 8015246:	f7ea ffad 	bl	80001a4 <__udivsi3>
 801524a:	0003      	movs	r3, r0
 801524c:	001a      	movs	r2, r3
 801524e:	0013      	movs	r3, r2
 8015250:	015b      	lsls	r3, r3, #5
 8015252:	1a9b      	subs	r3, r3, r2
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	189b      	adds	r3, r3, r2
 8015258:	00db      	lsls	r3, r3, #3
 801525a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2220      	movs	r2, #32
 8015260:	5c9b      	ldrb	r3, [r3, r2]
 8015262:	2b01      	cmp	r3, #1
 8015264:	d101      	bne.n	801526a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8015266:	2302      	movs	r3, #2
 8015268:	e0ad      	b.n	80153c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2220      	movs	r2, #32
 801526e:	2101      	movs	r1, #1
 8015270:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2221      	movs	r2, #33	@ 0x21
 8015276:	2102      	movs	r1, #2
 8015278:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	22ca      	movs	r2, #202	@ 0xca
 8015280:	625a      	str	r2, [r3, #36]	@ 0x24
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	2253      	movs	r2, #83	@ 0x53
 8015288:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	689a      	ldr	r2, [r3, #8]
 8015290:	2380      	movs	r3, #128	@ 0x80
 8015292:	00db      	lsls	r3, r3, #3
 8015294:	4013      	ands	r3, r2
 8015296:	d019      	beq.n	80152cc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	3b01      	subs	r3, #1
 801529c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d10d      	bne.n	80152c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	22ff      	movs	r2, #255	@ 0xff
 80152aa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	2221      	movs	r2, #33	@ 0x21
 80152b0:	2103      	movs	r1, #3
 80152b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	2220      	movs	r2, #32
 80152b8:	2100      	movs	r1, #0
 80152ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80152bc:	2303      	movs	r3, #3
 80152be:	e082      	b.n	80153c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	68db      	ldr	r3, [r3, #12]
 80152c6:	2204      	movs	r2, #4
 80152c8:	4013      	ands	r3, r2
 80152ca:	d1e5      	bne.n	8015298 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	689a      	ldr	r2, [r3, #8]
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	493f      	ldr	r1, [pc, #252]	@ (80153d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80152d8:	400a      	ands	r2, r1
 80152da:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	68db      	ldr	r3, [r3, #12]
 80152e2:	22ff      	movs	r2, #255	@ 0xff
 80152e4:	401a      	ands	r2, r3
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	493b      	ldr	r1, [pc, #236]	@ (80153d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80152ec:	430a      	orrs	r2, r1
 80152ee:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80152f0:	4b37      	ldr	r3, [pc, #220]	@ (80153d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	22fa      	movs	r2, #250	@ 0xfa
 80152f6:	01d1      	lsls	r1, r2, #7
 80152f8:	0018      	movs	r0, r3
 80152fa:	f7ea ff53 	bl	80001a4 <__udivsi3>
 80152fe:	0003      	movs	r3, r0
 8015300:	001a      	movs	r2, r3
 8015302:	0013      	movs	r3, r2
 8015304:	015b      	lsls	r3, r3, #5
 8015306:	1a9b      	subs	r3, r3, r2
 8015308:	009b      	lsls	r3, r3, #2
 801530a:	189b      	adds	r3, r3, r2
 801530c:	00db      	lsls	r3, r3, #3
 801530e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	3b01      	subs	r3, #1
 8015314:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d10d      	bne.n	8015338 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	22ff      	movs	r2, #255	@ 0xff
 8015322:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2221      	movs	r2, #33	@ 0x21
 8015328:	2103      	movs	r1, #3
 801532a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2220      	movs	r2, #32
 8015330:	2100      	movs	r1, #0
 8015332:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015334:	2303      	movs	r3, #3
 8015336:	e046      	b.n	80153c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	68db      	ldr	r3, [r3, #12]
 801533e:	2204      	movs	r2, #4
 8015340:	4013      	ands	r3, r2
 8015342:	d0e5      	beq.n	8015310 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	689a      	ldr	r2, [r3, #8]
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2107      	movs	r1, #7
 8015350:	438a      	bics	r2, r1
 8015352:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	6899      	ldr	r1, [r3, #8]
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	430a      	orrs	r2, r1
 8015362:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	68ba      	ldr	r2, [r7, #8]
 801536a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801536c:	4b1b      	ldr	r3, [pc, #108]	@ (80153dc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	4b1a      	ldr	r3, [pc, #104]	@ (80153dc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015372:	2180      	movs	r1, #128	@ 0x80
 8015374:	0349      	lsls	r1, r1, #13
 8015376:	430a      	orrs	r2, r1
 8015378:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801537a:	4b18      	ldr	r3, [pc, #96]	@ (80153dc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801537c:	689a      	ldr	r2, [r3, #8]
 801537e:	4b17      	ldr	r3, [pc, #92]	@ (80153dc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015380:	2180      	movs	r1, #128	@ 0x80
 8015382:	0349      	lsls	r1, r1, #13
 8015384:	430a      	orrs	r2, r1
 8015386:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	689a      	ldr	r2, [r3, #8]
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2180      	movs	r1, #128	@ 0x80
 8015394:	01c9      	lsls	r1, r1, #7
 8015396:	430a      	orrs	r2, r1
 8015398:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	689a      	ldr	r2, [r3, #8]
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2180      	movs	r1, #128	@ 0x80
 80153a6:	00c9      	lsls	r1, r1, #3
 80153a8:	430a      	orrs	r2, r1
 80153aa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	22ff      	movs	r2, #255	@ 0xff
 80153b2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2221      	movs	r2, #33	@ 0x21
 80153b8:	2101      	movs	r1, #1
 80153ba:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	2220      	movs	r2, #32
 80153c0:	2100      	movs	r1, #0
 80153c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80153c4:	2300      	movs	r3, #0
}
 80153c6:	0018      	movs	r0, r3
 80153c8:	46bd      	mov	sp, r7
 80153ca:	b006      	add	sp, #24
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	46c0      	nop			@ (mov r8, r8)
 80153d0:	200000c8 	.word	0x200000c8
 80153d4:	fffffbff 	.word	0xfffffbff
 80153d8:	fffffb7f 	.word	0xfffffb7f
 80153dc:	40010400 	.word	0x40010400

080153e0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b084      	sub	sp, #16
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80153e8:	2300      	movs	r3, #0
 80153ea:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2220      	movs	r2, #32
 80153f0:	5c9b      	ldrb	r3, [r3, r2]
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	d101      	bne.n	80153fa <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80153f6:	2302      	movs	r3, #2
 80153f8:	e04e      	b.n	8015498 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2220      	movs	r2, #32
 80153fe:	2101      	movs	r1, #1
 8015400:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2221      	movs	r2, #33	@ 0x21
 8015406:	2102      	movs	r1, #2
 8015408:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	22ca      	movs	r2, #202	@ 0xca
 8015410:	625a      	str	r2, [r3, #36]	@ 0x24
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	2253      	movs	r2, #83	@ 0x53
 8015418:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	689a      	ldr	r2, [r3, #8]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	491e      	ldr	r1, [pc, #120]	@ (80154a0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8015426:	400a      	ands	r2, r1
 8015428:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	689a      	ldr	r2, [r3, #8]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	491b      	ldr	r1, [pc, #108]	@ (80154a4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015436:	400a      	ands	r2, r1
 8015438:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801543a:	f7f8 fb59 	bl	800daf0 <HAL_GetTick>
 801543e:	0003      	movs	r3, r0
 8015440:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015442:	e016      	b.n	8015472 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015444:	f7f8 fb54 	bl	800daf0 <HAL_GetTick>
 8015448:	0002      	movs	r2, r0
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	1ad2      	subs	r2, r2, r3
 801544e:	23fa      	movs	r3, #250	@ 0xfa
 8015450:	009b      	lsls	r3, r3, #2
 8015452:	429a      	cmp	r2, r3
 8015454:	d90d      	bls.n	8015472 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	22ff      	movs	r2, #255	@ 0xff
 801545c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2221      	movs	r2, #33	@ 0x21
 8015462:	2103      	movs	r1, #3
 8015464:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2220      	movs	r2, #32
 801546a:	2100      	movs	r1, #0
 801546c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801546e:	2303      	movs	r3, #3
 8015470:	e012      	b.n	8015498 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	2204      	movs	r2, #4
 801547a:	4013      	ands	r3, r2
 801547c:	d0e2      	beq.n	8015444 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	22ff      	movs	r2, #255	@ 0xff
 8015484:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2221      	movs	r2, #33	@ 0x21
 801548a:	2101      	movs	r1, #1
 801548c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2220      	movs	r2, #32
 8015492:	2100      	movs	r1, #0
 8015494:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015496:	2300      	movs	r3, #0
}
 8015498:	0018      	movs	r0, r3
 801549a:	46bd      	mov	sp, r7
 801549c:	b004      	add	sp, #16
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	fffffbff 	.word	0xfffffbff
 80154a4:	ffffbfff 	.word	0xffffbfff

080154a8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80154b0:	4b13      	ldr	r3, [pc, #76]	@ (8015500 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80154b2:	2280      	movs	r2, #128	@ 0x80
 80154b4:	0352      	lsls	r2, r2, #13
 80154b6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	689a      	ldr	r2, [r3, #8]
 80154be:	2380      	movs	r3, #128	@ 0x80
 80154c0:	01db      	lsls	r3, r3, #7
 80154c2:	4013      	ands	r3, r2
 80154c4:	d014      	beq.n	80154f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	68da      	ldr	r2, [r3, #12]
 80154cc:	2380      	movs	r3, #128	@ 0x80
 80154ce:	00db      	lsls	r3, r3, #3
 80154d0:	4013      	ands	r3, r2
 80154d2:	d00d      	beq.n	80154f0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	68db      	ldr	r3, [r3, #12]
 80154da:	22ff      	movs	r2, #255	@ 0xff
 80154dc:	401a      	ands	r2, r3
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	4908      	ldr	r1, [pc, #32]	@ (8015504 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80154e4:	430a      	orrs	r2, r1
 80154e6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	0018      	movs	r0, r3
 80154ec:	f000 f80c 	bl	8015508 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2221      	movs	r2, #33	@ 0x21
 80154f4:	2101      	movs	r1, #1
 80154f6:	5499      	strb	r1, [r3, r2]
}
 80154f8:	46c0      	nop			@ (mov r8, r8)
 80154fa:	46bd      	mov	sp, r7
 80154fc:	b002      	add	sp, #8
 80154fe:	bd80      	pop	{r7, pc}
 8015500:	40010400 	.word	0x40010400
 8015504:	fffffb7f 	.word	0xfffffb7f

08015508 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015510:	46c0      	nop			@ (mov r8, r8)
 8015512:	46bd      	mov	sp, r7
 8015514:	b002      	add	sp, #8
 8015516:	bd80      	pop	{r7, pc}

08015518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d101      	bne.n	801552a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015526:	2301      	movs	r3, #1
 8015528:	e032      	b.n	8015590 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2239      	movs	r2, #57	@ 0x39
 801552e:	5c9b      	ldrb	r3, [r3, r2]
 8015530:	b2db      	uxtb	r3, r3
 8015532:	2b00      	cmp	r3, #0
 8015534:	d107      	bne.n	8015546 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2238      	movs	r2, #56	@ 0x38
 801553a:	2100      	movs	r1, #0
 801553c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	0018      	movs	r0, r3
 8015542:	f7f7 fc8f 	bl	800ce64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2239      	movs	r2, #57	@ 0x39
 801554a:	2102      	movs	r1, #2
 801554c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681a      	ldr	r2, [r3, #0]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	3304      	adds	r3, #4
 8015556:	0019      	movs	r1, r3
 8015558:	0010      	movs	r0, r2
 801555a:	f000 fa1d 	bl	8015998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	223e      	movs	r2, #62	@ 0x3e
 8015562:	2101      	movs	r1, #1
 8015564:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	223a      	movs	r2, #58	@ 0x3a
 801556a:	2101      	movs	r1, #1
 801556c:	5499      	strb	r1, [r3, r2]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	223b      	movs	r2, #59	@ 0x3b
 8015572:	2101      	movs	r1, #1
 8015574:	5499      	strb	r1, [r3, r2]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	223c      	movs	r2, #60	@ 0x3c
 801557a:	2101      	movs	r1, #1
 801557c:	5499      	strb	r1, [r3, r2]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	223d      	movs	r2, #61	@ 0x3d
 8015582:	2101      	movs	r1, #1
 8015584:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2239      	movs	r2, #57	@ 0x39
 801558a:	2101      	movs	r1, #1
 801558c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801558e:	2300      	movs	r3, #0
}
 8015590:	0018      	movs	r0, r3
 8015592:	46bd      	mov	sp, r7
 8015594:	b002      	add	sp, #8
 8015596:	bd80      	pop	{r7, pc}

08015598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2239      	movs	r2, #57	@ 0x39
 80155a4:	5c9b      	ldrb	r3, [r3, r2]
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	2b01      	cmp	r3, #1
 80155aa:	d001      	beq.n	80155b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80155ac:	2301      	movs	r3, #1
 80155ae:	e033      	b.n	8015618 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2239      	movs	r2, #57	@ 0x39
 80155b4:	2102      	movs	r1, #2
 80155b6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	681a      	ldr	r2, [r3, #0]
 80155bc:	2380      	movs	r3, #128	@ 0x80
 80155be:	05db      	lsls	r3, r3, #23
 80155c0:	429a      	cmp	r2, r3
 80155c2:	d00e      	beq.n	80155e2 <HAL_TIM_Base_Start+0x4a>
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	4a15      	ldr	r2, [pc, #84]	@ (8015620 <HAL_TIM_Base_Start+0x88>)
 80155ca:	4293      	cmp	r3, r2
 80155cc:	d009      	beq.n	80155e2 <HAL_TIM_Base_Start+0x4a>
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	4a14      	ldr	r2, [pc, #80]	@ (8015624 <HAL_TIM_Base_Start+0x8c>)
 80155d4:	4293      	cmp	r3, r2
 80155d6:	d004      	beq.n	80155e2 <HAL_TIM_Base_Start+0x4a>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	4a12      	ldr	r2, [pc, #72]	@ (8015628 <HAL_TIM_Base_Start+0x90>)
 80155de:	4293      	cmp	r3, r2
 80155e0:	d111      	bne.n	8015606 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	689b      	ldr	r3, [r3, #8]
 80155e8:	2207      	movs	r2, #7
 80155ea:	4013      	ands	r3, r2
 80155ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2b06      	cmp	r3, #6
 80155f2:	d010      	beq.n	8015616 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	2101      	movs	r1, #1
 8015600:	430a      	orrs	r2, r1
 8015602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015604:	e007      	b.n	8015616 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	2101      	movs	r1, #1
 8015612:	430a      	orrs	r2, r1
 8015614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015616:	2300      	movs	r3, #0
}
 8015618:	0018      	movs	r0, r3
 801561a:	46bd      	mov	sp, r7
 801561c:	b004      	add	sp, #16
 801561e:	bd80      	pop	{r7, pc}
 8015620:	40000400 	.word	0x40000400
 8015624:	40010800 	.word	0x40010800
 8015628:	40011400 	.word	0x40011400

0801562c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	6a1b      	ldr	r3, [r3, #32]
 801563a:	4a0a      	ldr	r2, [pc, #40]	@ (8015664 <HAL_TIM_Base_Stop+0x38>)
 801563c:	4013      	ands	r3, r2
 801563e:	d107      	bne.n	8015650 <HAL_TIM_Base_Stop+0x24>
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	681a      	ldr	r2, [r3, #0]
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	2101      	movs	r1, #1
 801564c:	438a      	bics	r2, r1
 801564e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2239      	movs	r2, #57	@ 0x39
 8015654:	2101      	movs	r1, #1
 8015656:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015658:	2300      	movs	r3, #0
}
 801565a:	0018      	movs	r0, r3
 801565c:	46bd      	mov	sp, r7
 801565e:	b002      	add	sp, #8
 8015660:	bd80      	pop	{r7, pc}
 8015662:	46c0      	nop			@ (mov r8, r8)
 8015664:	00001111 	.word	0x00001111

08015668 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b082      	sub	sp, #8
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d101      	bne.n	801567a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015676:	2301      	movs	r3, #1
 8015678:	e032      	b.n	80156e0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2239      	movs	r2, #57	@ 0x39
 801567e:	5c9b      	ldrb	r3, [r3, r2]
 8015680:	b2db      	uxtb	r3, r3
 8015682:	2b00      	cmp	r3, #0
 8015684:	d107      	bne.n	8015696 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2238      	movs	r2, #56	@ 0x38
 801568a:	2100      	movs	r1, #0
 801568c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	0018      	movs	r0, r3
 8015692:	f7f7 fbc3 	bl	800ce1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2239      	movs	r2, #57	@ 0x39
 801569a:	2102      	movs	r1, #2
 801569c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	3304      	adds	r3, #4
 80156a6:	0019      	movs	r1, r3
 80156a8:	0010      	movs	r0, r2
 80156aa:	f000 f975 	bl	8015998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	223e      	movs	r2, #62	@ 0x3e
 80156b2:	2101      	movs	r1, #1
 80156b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	223a      	movs	r2, #58	@ 0x3a
 80156ba:	2101      	movs	r1, #1
 80156bc:	5499      	strb	r1, [r3, r2]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	223b      	movs	r2, #59	@ 0x3b
 80156c2:	2101      	movs	r1, #1
 80156c4:	5499      	strb	r1, [r3, r2]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	223c      	movs	r2, #60	@ 0x3c
 80156ca:	2101      	movs	r1, #1
 80156cc:	5499      	strb	r1, [r3, r2]
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	223d      	movs	r2, #61	@ 0x3d
 80156d2:	2101      	movs	r1, #1
 80156d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	2239      	movs	r2, #57	@ 0x39
 80156da:	2101      	movs	r1, #1
 80156dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80156de:	2300      	movs	r3, #0
}
 80156e0:	0018      	movs	r0, r3
 80156e2:	46bd      	mov	sp, r7
 80156e4:	b002      	add	sp, #8
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b084      	sub	sp, #16
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80156f2:	683b      	ldr	r3, [r7, #0]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d108      	bne.n	801570a <HAL_TIM_PWM_Start+0x22>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	223a      	movs	r2, #58	@ 0x3a
 80156fc:	5c9b      	ldrb	r3, [r3, r2]
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	3b01      	subs	r3, #1
 8015702:	1e5a      	subs	r2, r3, #1
 8015704:	4193      	sbcs	r3, r2
 8015706:	b2db      	uxtb	r3, r3
 8015708:	e01f      	b.n	801574a <HAL_TIM_PWM_Start+0x62>
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	2b04      	cmp	r3, #4
 801570e:	d108      	bne.n	8015722 <HAL_TIM_PWM_Start+0x3a>
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	223b      	movs	r2, #59	@ 0x3b
 8015714:	5c9b      	ldrb	r3, [r3, r2]
 8015716:	b2db      	uxtb	r3, r3
 8015718:	3b01      	subs	r3, #1
 801571a:	1e5a      	subs	r2, r3, #1
 801571c:	4193      	sbcs	r3, r2
 801571e:	b2db      	uxtb	r3, r3
 8015720:	e013      	b.n	801574a <HAL_TIM_PWM_Start+0x62>
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	2b08      	cmp	r3, #8
 8015726:	d108      	bne.n	801573a <HAL_TIM_PWM_Start+0x52>
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	223c      	movs	r2, #60	@ 0x3c
 801572c:	5c9b      	ldrb	r3, [r3, r2]
 801572e:	b2db      	uxtb	r3, r3
 8015730:	3b01      	subs	r3, #1
 8015732:	1e5a      	subs	r2, r3, #1
 8015734:	4193      	sbcs	r3, r2
 8015736:	b2db      	uxtb	r3, r3
 8015738:	e007      	b.n	801574a <HAL_TIM_PWM_Start+0x62>
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	223d      	movs	r2, #61	@ 0x3d
 801573e:	5c9b      	ldrb	r3, [r3, r2]
 8015740:	b2db      	uxtb	r3, r3
 8015742:	3b01      	subs	r3, #1
 8015744:	1e5a      	subs	r2, r3, #1
 8015746:	4193      	sbcs	r3, r2
 8015748:	b2db      	uxtb	r3, r3
 801574a:	2b00      	cmp	r3, #0
 801574c:	d001      	beq.n	8015752 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801574e:	2301      	movs	r3, #1
 8015750:	e052      	b.n	80157f8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015752:	683b      	ldr	r3, [r7, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d104      	bne.n	8015762 <HAL_TIM_PWM_Start+0x7a>
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	223a      	movs	r2, #58	@ 0x3a
 801575c:	2102      	movs	r1, #2
 801575e:	5499      	strb	r1, [r3, r2]
 8015760:	e013      	b.n	801578a <HAL_TIM_PWM_Start+0xa2>
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	2b04      	cmp	r3, #4
 8015766:	d104      	bne.n	8015772 <HAL_TIM_PWM_Start+0x8a>
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	223b      	movs	r2, #59	@ 0x3b
 801576c:	2102      	movs	r1, #2
 801576e:	5499      	strb	r1, [r3, r2]
 8015770:	e00b      	b.n	801578a <HAL_TIM_PWM_Start+0xa2>
 8015772:	683b      	ldr	r3, [r7, #0]
 8015774:	2b08      	cmp	r3, #8
 8015776:	d104      	bne.n	8015782 <HAL_TIM_PWM_Start+0x9a>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	223c      	movs	r2, #60	@ 0x3c
 801577c:	2102      	movs	r1, #2
 801577e:	5499      	strb	r1, [r3, r2]
 8015780:	e003      	b.n	801578a <HAL_TIM_PWM_Start+0xa2>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	223d      	movs	r2, #61	@ 0x3d
 8015786:	2102      	movs	r1, #2
 8015788:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	6839      	ldr	r1, [r7, #0]
 8015790:	2201      	movs	r2, #1
 8015792:	0018      	movs	r0, r3
 8015794:	f000 fa62 	bl	8015c5c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	2380      	movs	r3, #128	@ 0x80
 801579e:	05db      	lsls	r3, r3, #23
 80157a0:	429a      	cmp	r2, r3
 80157a2:	d00e      	beq.n	80157c2 <HAL_TIM_PWM_Start+0xda>
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4a15      	ldr	r2, [pc, #84]	@ (8015800 <HAL_TIM_PWM_Start+0x118>)
 80157aa:	4293      	cmp	r3, r2
 80157ac:	d009      	beq.n	80157c2 <HAL_TIM_PWM_Start+0xda>
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	4a14      	ldr	r2, [pc, #80]	@ (8015804 <HAL_TIM_PWM_Start+0x11c>)
 80157b4:	4293      	cmp	r3, r2
 80157b6:	d004      	beq.n	80157c2 <HAL_TIM_PWM_Start+0xda>
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	4a12      	ldr	r2, [pc, #72]	@ (8015808 <HAL_TIM_PWM_Start+0x120>)
 80157be:	4293      	cmp	r3, r2
 80157c0:	d111      	bne.n	80157e6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	689b      	ldr	r3, [r3, #8]
 80157c8:	2207      	movs	r2, #7
 80157ca:	4013      	ands	r3, r2
 80157cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	2b06      	cmp	r3, #6
 80157d2:	d010      	beq.n	80157f6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2101      	movs	r1, #1
 80157e0:	430a      	orrs	r2, r1
 80157e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80157e4:	e007      	b.n	80157f6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	2101      	movs	r1, #1
 80157f2:	430a      	orrs	r2, r1
 80157f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80157f6:	2300      	movs	r3, #0
}
 80157f8:	0018      	movs	r0, r3
 80157fa:	46bd      	mov	sp, r7
 80157fc:	b004      	add	sp, #16
 80157fe:	bd80      	pop	{r7, pc}
 8015800:	40000400 	.word	0x40000400
 8015804:	40010800 	.word	0x40010800
 8015808:	40011400 	.word	0x40011400

0801580c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b086      	sub	sp, #24
 8015810:	af00      	add	r7, sp, #0
 8015812:	60f8      	str	r0, [r7, #12]
 8015814:	60b9      	str	r1, [r7, #8]
 8015816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015818:	2317      	movs	r3, #23
 801581a:	18fb      	adds	r3, r7, r3
 801581c:	2200      	movs	r2, #0
 801581e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	2238      	movs	r2, #56	@ 0x38
 8015824:	5c9b      	ldrb	r3, [r3, r2]
 8015826:	2b01      	cmp	r3, #1
 8015828:	d101      	bne.n	801582e <HAL_TIM_PWM_ConfigChannel+0x22>
 801582a:	2302      	movs	r3, #2
 801582c:	e0ad      	b.n	801598a <HAL_TIM_PWM_ConfigChannel+0x17e>
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	2238      	movs	r2, #56	@ 0x38
 8015832:	2101      	movs	r1, #1
 8015834:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2b0c      	cmp	r3, #12
 801583a:	d100      	bne.n	801583e <HAL_TIM_PWM_ConfigChannel+0x32>
 801583c:	e076      	b.n	801592c <HAL_TIM_PWM_ConfigChannel+0x120>
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	2b0c      	cmp	r3, #12
 8015842:	d900      	bls.n	8015846 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8015844:	e095      	b.n	8015972 <HAL_TIM_PWM_ConfigChannel+0x166>
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2b08      	cmp	r3, #8
 801584a:	d04e      	beq.n	80158ea <HAL_TIM_PWM_ConfigChannel+0xde>
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	2b08      	cmp	r3, #8
 8015850:	d900      	bls.n	8015854 <HAL_TIM_PWM_ConfigChannel+0x48>
 8015852:	e08e      	b.n	8015972 <HAL_TIM_PWM_ConfigChannel+0x166>
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d003      	beq.n	8015862 <HAL_TIM_PWM_ConfigChannel+0x56>
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	2b04      	cmp	r3, #4
 801585e:	d021      	beq.n	80158a4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8015860:	e087      	b.n	8015972 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	68ba      	ldr	r2, [r7, #8]
 8015868:	0011      	movs	r1, r2
 801586a:	0018      	movs	r0, r3
 801586c:	f000 f8f2 	bl	8015a54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	699a      	ldr	r2, [r3, #24]
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	2108      	movs	r1, #8
 801587c:	430a      	orrs	r2, r1
 801587e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	699a      	ldr	r2, [r3, #24]
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	2104      	movs	r1, #4
 801588c:	438a      	bics	r2, r1
 801588e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	6999      	ldr	r1, [r3, #24]
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	68da      	ldr	r2, [r3, #12]
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	430a      	orrs	r2, r1
 80158a0:	619a      	str	r2, [r3, #24]
      break;
 80158a2:	e06b      	b.n	801597c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	68ba      	ldr	r2, [r7, #8]
 80158aa:	0011      	movs	r1, r2
 80158ac:	0018      	movs	r0, r3
 80158ae:	f000 f90d 	bl	8015acc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	699a      	ldr	r2, [r3, #24]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	2180      	movs	r1, #128	@ 0x80
 80158be:	0109      	lsls	r1, r1, #4
 80158c0:	430a      	orrs	r2, r1
 80158c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	699a      	ldr	r2, [r3, #24]
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	4931      	ldr	r1, [pc, #196]	@ (8015994 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80158d0:	400a      	ands	r2, r1
 80158d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	6999      	ldr	r1, [r3, #24]
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	68db      	ldr	r3, [r3, #12]
 80158de:	021a      	lsls	r2, r3, #8
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	430a      	orrs	r2, r1
 80158e6:	619a      	str	r2, [r3, #24]
      break;
 80158e8:	e048      	b.n	801597c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	68ba      	ldr	r2, [r7, #8]
 80158f0:	0011      	movs	r1, r2
 80158f2:	0018      	movs	r0, r3
 80158f4:	f000 f92c 	bl	8015b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	69da      	ldr	r2, [r3, #28]
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	2108      	movs	r1, #8
 8015904:	430a      	orrs	r2, r1
 8015906:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	69da      	ldr	r2, [r3, #28]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	2104      	movs	r1, #4
 8015914:	438a      	bics	r2, r1
 8015916:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	69d9      	ldr	r1, [r3, #28]
 801591e:	68bb      	ldr	r3, [r7, #8]
 8015920:	68da      	ldr	r2, [r3, #12]
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	430a      	orrs	r2, r1
 8015928:	61da      	str	r2, [r3, #28]
      break;
 801592a:	e027      	b.n	801597c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	68ba      	ldr	r2, [r7, #8]
 8015932:	0011      	movs	r1, r2
 8015934:	0018      	movs	r0, r3
 8015936:	f000 f94b 	bl	8015bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	69da      	ldr	r2, [r3, #28]
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	2180      	movs	r1, #128	@ 0x80
 8015946:	0109      	lsls	r1, r1, #4
 8015948:	430a      	orrs	r2, r1
 801594a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	69da      	ldr	r2, [r3, #28]
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	490f      	ldr	r1, [pc, #60]	@ (8015994 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015958:	400a      	ands	r2, r1
 801595a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	69d9      	ldr	r1, [r3, #28]
 8015962:	68bb      	ldr	r3, [r7, #8]
 8015964:	68db      	ldr	r3, [r3, #12]
 8015966:	021a      	lsls	r2, r3, #8
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	430a      	orrs	r2, r1
 801596e:	61da      	str	r2, [r3, #28]
      break;
 8015970:	e004      	b.n	801597c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8015972:	2317      	movs	r3, #23
 8015974:	18fb      	adds	r3, r7, r3
 8015976:	2201      	movs	r2, #1
 8015978:	701a      	strb	r2, [r3, #0]
      break;
 801597a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2238      	movs	r2, #56	@ 0x38
 8015980:	2100      	movs	r1, #0
 8015982:	5499      	strb	r1, [r3, r2]

  return status;
 8015984:	2317      	movs	r3, #23
 8015986:	18fb      	adds	r3, r7, r3
 8015988:	781b      	ldrb	r3, [r3, #0]
}
 801598a:	0018      	movs	r0, r3
 801598c:	46bd      	mov	sp, r7
 801598e:	b006      	add	sp, #24
 8015990:	bd80      	pop	{r7, pc}
 8015992:	46c0      	nop			@ (mov r8, r8)
 8015994:	fffffbff 	.word	0xfffffbff

08015998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b084      	sub	sp, #16
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
 80159a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	2380      	movs	r3, #128	@ 0x80
 80159ac:	05db      	lsls	r3, r3, #23
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d00b      	beq.n	80159ca <TIM_Base_SetConfig+0x32>
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	4a23      	ldr	r2, [pc, #140]	@ (8015a44 <TIM_Base_SetConfig+0xac>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d007      	beq.n	80159ca <TIM_Base_SetConfig+0x32>
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	4a22      	ldr	r2, [pc, #136]	@ (8015a48 <TIM_Base_SetConfig+0xb0>)
 80159be:	4293      	cmp	r3, r2
 80159c0:	d003      	beq.n	80159ca <TIM_Base_SetConfig+0x32>
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	4a21      	ldr	r2, [pc, #132]	@ (8015a4c <TIM_Base_SetConfig+0xb4>)
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d108      	bne.n	80159dc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2270      	movs	r2, #112	@ 0x70
 80159ce:	4393      	bics	r3, r2
 80159d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	68fa      	ldr	r2, [r7, #12]
 80159d8:	4313      	orrs	r3, r2
 80159da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80159dc:	687a      	ldr	r2, [r7, #4]
 80159de:	2380      	movs	r3, #128	@ 0x80
 80159e0:	05db      	lsls	r3, r3, #23
 80159e2:	429a      	cmp	r2, r3
 80159e4:	d00b      	beq.n	80159fe <TIM_Base_SetConfig+0x66>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	4a16      	ldr	r2, [pc, #88]	@ (8015a44 <TIM_Base_SetConfig+0xac>)
 80159ea:	4293      	cmp	r3, r2
 80159ec:	d007      	beq.n	80159fe <TIM_Base_SetConfig+0x66>
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	4a15      	ldr	r2, [pc, #84]	@ (8015a48 <TIM_Base_SetConfig+0xb0>)
 80159f2:	4293      	cmp	r3, r2
 80159f4:	d003      	beq.n	80159fe <TIM_Base_SetConfig+0x66>
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	4a14      	ldr	r2, [pc, #80]	@ (8015a4c <TIM_Base_SetConfig+0xb4>)
 80159fa:	4293      	cmp	r3, r2
 80159fc:	d108      	bne.n	8015a10 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	4a13      	ldr	r2, [pc, #76]	@ (8015a50 <TIM_Base_SetConfig+0xb8>)
 8015a02:	4013      	ands	r3, r2
 8015a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	68fa      	ldr	r2, [r7, #12]
 8015a0c:	4313      	orrs	r3, r2
 8015a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2280      	movs	r2, #128	@ 0x80
 8015a14:	4393      	bics	r3, r2
 8015a16:	001a      	movs	r2, r3
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	691b      	ldr	r3, [r3, #16]
 8015a1c:	4313      	orrs	r3, r2
 8015a1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	68fa      	ldr	r2, [r7, #12]
 8015a24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	689a      	ldr	r2, [r3, #8]
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	681a      	ldr	r2, [r3, #0]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	2201      	movs	r2, #1
 8015a3a:	615a      	str	r2, [r3, #20]
}
 8015a3c:	46c0      	nop			@ (mov r8, r8)
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	b004      	add	sp, #16
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	40000400 	.word	0x40000400
 8015a48:	40010800 	.word	0x40010800
 8015a4c:	40011400 	.word	0x40011400
 8015a50:	fffffcff 	.word	0xfffffcff

08015a54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b086      	sub	sp, #24
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
 8015a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6a1b      	ldr	r3, [r3, #32]
 8015a62:	2201      	movs	r2, #1
 8015a64:	4393      	bics	r3, r2
 8015a66:	001a      	movs	r2, r3
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	6a1b      	ldr	r3, [r3, #32]
 8015a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	699b      	ldr	r3, [r3, #24]
 8015a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	2270      	movs	r2, #112	@ 0x70
 8015a82:	4393      	bics	r3, r2
 8015a84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	2203      	movs	r2, #3
 8015a8a:	4393      	bics	r3, r2
 8015a8c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	68fa      	ldr	r2, [r7, #12]
 8015a94:	4313      	orrs	r3, r2
 8015a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	2202      	movs	r2, #2
 8015a9c:	4393      	bics	r3, r2
 8015a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	689b      	ldr	r3, [r3, #8]
 8015aa4:	697a      	ldr	r2, [r7, #20]
 8015aa6:	4313      	orrs	r3, r2
 8015aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	693a      	ldr	r2, [r7, #16]
 8015aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	68fa      	ldr	r2, [r7, #12]
 8015ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	685a      	ldr	r2, [r3, #4]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	697a      	ldr	r2, [r7, #20]
 8015ac2:	621a      	str	r2, [r3, #32]
}
 8015ac4:	46c0      	nop			@ (mov r8, r8)
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	b006      	add	sp, #24
 8015aca:	bd80      	pop	{r7, pc}

08015acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b086      	sub	sp, #24
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6a1b      	ldr	r3, [r3, #32]
 8015ada:	2210      	movs	r2, #16
 8015adc:	4393      	bics	r3, r2
 8015ade:	001a      	movs	r2, r3
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6a1b      	ldr	r3, [r3, #32]
 8015ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	685b      	ldr	r3, [r3, #4]
 8015aee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	699b      	ldr	r3, [r3, #24]
 8015af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	4a13      	ldr	r2, [pc, #76]	@ (8015b48 <TIM_OC2_SetConfig+0x7c>)
 8015afa:	4013      	ands	r3, r2
 8015afc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	4a12      	ldr	r2, [pc, #72]	@ (8015b4c <TIM_OC2_SetConfig+0x80>)
 8015b02:	4013      	ands	r3, r2
 8015b04:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	021b      	lsls	r3, r3, #8
 8015b0c:	68fa      	ldr	r2, [r7, #12]
 8015b0e:	4313      	orrs	r3, r2
 8015b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015b12:	697b      	ldr	r3, [r7, #20]
 8015b14:	2220      	movs	r2, #32
 8015b16:	4393      	bics	r3, r2
 8015b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	689b      	ldr	r3, [r3, #8]
 8015b1e:	011b      	lsls	r3, r3, #4
 8015b20:	697a      	ldr	r2, [r7, #20]
 8015b22:	4313      	orrs	r3, r2
 8015b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	693a      	ldr	r2, [r7, #16]
 8015b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	68fa      	ldr	r2, [r7, #12]
 8015b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	685a      	ldr	r2, [r3, #4]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	697a      	ldr	r2, [r7, #20]
 8015b3e:	621a      	str	r2, [r3, #32]
}
 8015b40:	46c0      	nop			@ (mov r8, r8)
 8015b42:	46bd      	mov	sp, r7
 8015b44:	b006      	add	sp, #24
 8015b46:	bd80      	pop	{r7, pc}
 8015b48:	ffff8fff 	.word	0xffff8fff
 8015b4c:	fffffcff 	.word	0xfffffcff

08015b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	6a1b      	ldr	r3, [r3, #32]
 8015b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8015bc8 <TIM_OC3_SetConfig+0x78>)
 8015b60:	401a      	ands	r2, r3
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6a1b      	ldr	r3, [r3, #32]
 8015b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	69db      	ldr	r3, [r3, #28]
 8015b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	2270      	movs	r2, #112	@ 0x70
 8015b7c:	4393      	bics	r3, r2
 8015b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	2203      	movs	r2, #3
 8015b84:	4393      	bics	r3, r2
 8015b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	68fa      	ldr	r2, [r7, #12]
 8015b8e:	4313      	orrs	r3, r2
 8015b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015b92:	697b      	ldr	r3, [r7, #20]
 8015b94:	4a0d      	ldr	r2, [pc, #52]	@ (8015bcc <TIM_OC3_SetConfig+0x7c>)
 8015b96:	4013      	ands	r3, r2
 8015b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	689b      	ldr	r3, [r3, #8]
 8015b9e:	021b      	lsls	r3, r3, #8
 8015ba0:	697a      	ldr	r2, [r7, #20]
 8015ba2:	4313      	orrs	r3, r2
 8015ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	693a      	ldr	r2, [r7, #16]
 8015baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	68fa      	ldr	r2, [r7, #12]
 8015bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	685a      	ldr	r2, [r3, #4]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	697a      	ldr	r2, [r7, #20]
 8015bbe:	621a      	str	r2, [r3, #32]
}
 8015bc0:	46c0      	nop			@ (mov r8, r8)
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	b006      	add	sp, #24
 8015bc6:	bd80      	pop	{r7, pc}
 8015bc8:	fffffeff 	.word	0xfffffeff
 8015bcc:	fffffdff 	.word	0xfffffdff

08015bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b086      	sub	sp, #24
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	6a1b      	ldr	r3, [r3, #32]
 8015bde:	4a1b      	ldr	r2, [pc, #108]	@ (8015c4c <TIM_OC4_SetConfig+0x7c>)
 8015be0:	401a      	ands	r2, r3
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	6a1b      	ldr	r3, [r3, #32]
 8015bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	685b      	ldr	r3, [r3, #4]
 8015bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	69db      	ldr	r3, [r3, #28]
 8015bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	4a15      	ldr	r2, [pc, #84]	@ (8015c50 <TIM_OC4_SetConfig+0x80>)
 8015bfc:	4013      	ands	r3, r2
 8015bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	4a14      	ldr	r2, [pc, #80]	@ (8015c54 <TIM_OC4_SetConfig+0x84>)
 8015c04:	4013      	ands	r3, r2
 8015c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	021b      	lsls	r3, r3, #8
 8015c0e:	68fa      	ldr	r2, [r7, #12]
 8015c10:	4313      	orrs	r3, r2
 8015c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015c14:	697b      	ldr	r3, [r7, #20]
 8015c16:	4a10      	ldr	r2, [pc, #64]	@ (8015c58 <TIM_OC4_SetConfig+0x88>)
 8015c18:	4013      	ands	r3, r2
 8015c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	689b      	ldr	r3, [r3, #8]
 8015c20:	031b      	lsls	r3, r3, #12
 8015c22:	697a      	ldr	r2, [r7, #20]
 8015c24:	4313      	orrs	r3, r2
 8015c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	693a      	ldr	r2, [r7, #16]
 8015c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	68fa      	ldr	r2, [r7, #12]
 8015c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	685a      	ldr	r2, [r3, #4]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	697a      	ldr	r2, [r7, #20]
 8015c40:	621a      	str	r2, [r3, #32]
}
 8015c42:	46c0      	nop			@ (mov r8, r8)
 8015c44:	46bd      	mov	sp, r7
 8015c46:	b006      	add	sp, #24
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	46c0      	nop			@ (mov r8, r8)
 8015c4c:	ffffefff 	.word	0xffffefff
 8015c50:	ffff8fff 	.word	0xffff8fff
 8015c54:	fffffcff 	.word	0xfffffcff
 8015c58:	ffffdfff 	.word	0xffffdfff

08015c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b086      	sub	sp, #24
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	60f8      	str	r0, [r7, #12]
 8015c64:	60b9      	str	r1, [r7, #8]
 8015c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	221f      	movs	r2, #31
 8015c6c:	4013      	ands	r3, r2
 8015c6e:	2201      	movs	r2, #1
 8015c70:	409a      	lsls	r2, r3
 8015c72:	0013      	movs	r3, r2
 8015c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	6a1b      	ldr	r3, [r3, #32]
 8015c7a:	697a      	ldr	r2, [r7, #20]
 8015c7c:	43d2      	mvns	r2, r2
 8015c7e:	401a      	ands	r2, r3
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	6a1a      	ldr	r2, [r3, #32]
 8015c88:	68bb      	ldr	r3, [r7, #8]
 8015c8a:	211f      	movs	r1, #31
 8015c8c:	400b      	ands	r3, r1
 8015c8e:	6879      	ldr	r1, [r7, #4]
 8015c90:	4099      	lsls	r1, r3
 8015c92:	000b      	movs	r3, r1
 8015c94:	431a      	orrs	r2, r3
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	621a      	str	r2, [r3, #32]
}
 8015c9a:	46c0      	nop			@ (mov r8, r8)
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	b006      	add	sp, #24
 8015ca0:	bd80      	pop	{r7, pc}
	...

08015ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2238      	movs	r2, #56	@ 0x38
 8015cb2:	5c9b      	ldrb	r3, [r3, r2]
 8015cb4:	2b01      	cmp	r3, #1
 8015cb6:	d101      	bne.n	8015cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015cb8:	2302      	movs	r3, #2
 8015cba:	e047      	b.n	8015d4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2238      	movs	r2, #56	@ 0x38
 8015cc0:	2101      	movs	r1, #1
 8015cc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2239      	movs	r2, #57	@ 0x39
 8015cc8:	2102      	movs	r1, #2
 8015cca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	685b      	ldr	r3, [r3, #4]
 8015cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	689b      	ldr	r3, [r3, #8]
 8015cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2270      	movs	r2, #112	@ 0x70
 8015ce0:	4393      	bics	r3, r2
 8015ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	68fa      	ldr	r2, [r7, #12]
 8015cea:	4313      	orrs	r3, r2
 8015cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	68fa      	ldr	r2, [r7, #12]
 8015cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	2380      	movs	r3, #128	@ 0x80
 8015cfc:	05db      	lsls	r3, r3, #23
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d00e      	beq.n	8015d20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	4a13      	ldr	r2, [pc, #76]	@ (8015d54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8015d08:	4293      	cmp	r3, r2
 8015d0a:	d009      	beq.n	8015d20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	4a11      	ldr	r2, [pc, #68]	@ (8015d58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8015d12:	4293      	cmp	r3, r2
 8015d14:	d004      	beq.n	8015d20 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	4a10      	ldr	r2, [pc, #64]	@ (8015d5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	d10c      	bne.n	8015d3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	2280      	movs	r2, #128	@ 0x80
 8015d24:	4393      	bics	r3, r2
 8015d26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	68ba      	ldr	r2, [r7, #8]
 8015d2e:	4313      	orrs	r3, r2
 8015d30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	68ba      	ldr	r2, [r7, #8]
 8015d38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2239      	movs	r2, #57	@ 0x39
 8015d3e:	2101      	movs	r1, #1
 8015d40:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	2238      	movs	r2, #56	@ 0x38
 8015d46:	2100      	movs	r1, #0
 8015d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015d4a:	2300      	movs	r3, #0
}
 8015d4c:	0018      	movs	r0, r3
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	b004      	add	sp, #16
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	40000400 	.word	0x40000400
 8015d58:	40010800 	.word	0x40010800
 8015d5c:	40011400 	.word	0x40011400

08015d60 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	2238      	movs	r2, #56	@ 0x38
 8015d6e:	5c9b      	ldrb	r3, [r3, r2]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d101      	bne.n	8015d78 <HAL_TIMEx_RemapConfig+0x18>
 8015d74:	2302      	movs	r3, #2
 8015d76:	e00c      	b.n	8015d92 <HAL_TIMEx_RemapConfig+0x32>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	2238      	movs	r2, #56	@ 0x38
 8015d7c:	2101      	movs	r1, #1
 8015d7e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	683a      	ldr	r2, [r7, #0]
 8015d86:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2238      	movs	r2, #56	@ 0x38
 8015d8c:	2100      	movs	r1, #0
 8015d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015d90:	2300      	movs	r3, #0
}
 8015d92:	0018      	movs	r0, r3
 8015d94:	46bd      	mov	sp, r7
 8015d96:	b002      	add	sp, #8
 8015d98:	bd80      	pop	{r7, pc}
	...

08015d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b082      	sub	sp, #8
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d101      	bne.n	8015dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015daa:	2301      	movs	r3, #1
 8015dac:	e053      	b.n	8015e56 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d116      	bne.n	8015de4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	2278      	movs	r2, #120	@ 0x78
 8015dba:	2100      	movs	r1, #0
 8015dbc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	0018      	movs	r0, r3
 8015dc2:	f000 fd65 	bl	8016890 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	22b0      	movs	r2, #176	@ 0xb0
 8015dca:	589b      	ldr	r3, [r3, r2]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d103      	bne.n	8015dd8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	21b0      	movs	r1, #176	@ 0xb0
 8015dd4:	4a22      	ldr	r2, [pc, #136]	@ (8015e60 <HAL_UART_Init+0xc4>)
 8015dd6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	22b0      	movs	r2, #176	@ 0xb0
 8015ddc:	589b      	ldr	r3, [r3, r2]
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	0010      	movs	r0, r2
 8015de2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	2224      	movs	r2, #36	@ 0x24
 8015de8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	681a      	ldr	r2, [r3, #0]
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2101      	movs	r1, #1
 8015df6:	438a      	bics	r2, r1
 8015df8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	0018      	movs	r0, r3
 8015dfe:	f000 fd8b 	bl	8016918 <UART_SetConfig>
 8015e02:	0003      	movs	r3, r0
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d101      	bne.n	8015e0c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8015e08:	2301      	movs	r3, #1
 8015e0a:	e024      	b.n	8015e56 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d003      	beq.n	8015e1c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	0018      	movs	r0, r3
 8015e18:	f001 f81c 	bl	8016e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	685a      	ldr	r2, [r3, #4]
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	490f      	ldr	r1, [pc, #60]	@ (8015e64 <HAL_UART_Init+0xc8>)
 8015e28:	400a      	ands	r2, r1
 8015e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	689a      	ldr	r2, [r3, #8]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	212a      	movs	r1, #42	@ 0x2a
 8015e38:	438a      	bics	r2, r1
 8015e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	681a      	ldr	r2, [r3, #0]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	2101      	movs	r1, #1
 8015e48:	430a      	orrs	r2, r1
 8015e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	0018      	movs	r0, r3
 8015e50:	f001 f8b4 	bl	8016fbc <UART_CheckIdleState>
 8015e54:	0003      	movs	r3, r0
}
 8015e56:	0018      	movs	r0, r3
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	b002      	add	sp, #8
 8015e5c:	bd80      	pop	{r7, pc}
 8015e5e:	46c0      	nop			@ (mov r8, r8)
 8015e60:	0800d099 	.word	0x0800d099
 8015e64:	ffffb7ff 	.word	0xffffb7ff

08015e68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b08a      	sub	sp, #40	@ 0x28
 8015e6c:	af02      	add	r7, sp, #8
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	603b      	str	r3, [r7, #0]
 8015e74:	1dbb      	adds	r3, r7, #6
 8015e76:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e7c:	2b20      	cmp	r3, #32
 8015e7e:	d000      	beq.n	8015e82 <HAL_UART_Transmit+0x1a>
 8015e80:	e08c      	b.n	8015f9c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8015e82:	68bb      	ldr	r3, [r7, #8]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d003      	beq.n	8015e90 <HAL_UART_Transmit+0x28>
 8015e88:	1dbb      	adds	r3, r7, #6
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d101      	bne.n	8015e94 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8015e90:	2301      	movs	r3, #1
 8015e92:	e084      	b.n	8015f9e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	689a      	ldr	r2, [r3, #8]
 8015e98:	2380      	movs	r3, #128	@ 0x80
 8015e9a:	015b      	lsls	r3, r3, #5
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d109      	bne.n	8015eb4 <HAL_UART_Transmit+0x4c>
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	691b      	ldr	r3, [r3, #16]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d105      	bne.n	8015eb4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	2201      	movs	r2, #1
 8015eac:	4013      	ands	r3, r2
 8015eae:	d001      	beq.n	8015eb4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	e074      	b.n	8015f9e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2284      	movs	r2, #132	@ 0x84
 8015eb8:	2100      	movs	r1, #0
 8015eba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	2221      	movs	r2, #33	@ 0x21
 8015ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015ec2:	f7f7 fe15 	bl	800daf0 <HAL_GetTick>
 8015ec6:	0003      	movs	r3, r0
 8015ec8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	1dba      	adds	r2, r7, #6
 8015ece:	2150      	movs	r1, #80	@ 0x50
 8015ed0:	8812      	ldrh	r2, [r2, #0]
 8015ed2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	1dba      	adds	r2, r7, #6
 8015ed8:	2152      	movs	r1, #82	@ 0x52
 8015eda:	8812      	ldrh	r2, [r2, #0]
 8015edc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	689a      	ldr	r2, [r3, #8]
 8015ee2:	2380      	movs	r3, #128	@ 0x80
 8015ee4:	015b      	lsls	r3, r3, #5
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d108      	bne.n	8015efc <HAL_UART_Transmit+0x94>
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	691b      	ldr	r3, [r3, #16]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d104      	bne.n	8015efc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	61bb      	str	r3, [r7, #24]
 8015efa:	e003      	b.n	8015f04 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8015efc:	68bb      	ldr	r3, [r7, #8]
 8015efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015f00:	2300      	movs	r3, #0
 8015f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015f04:	e02f      	b.n	8015f66 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015f06:	697a      	ldr	r2, [r7, #20]
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	0013      	movs	r3, r2
 8015f10:	2200      	movs	r2, #0
 8015f12:	2180      	movs	r1, #128	@ 0x80
 8015f14:	f001 f8fa 	bl	801710c <UART_WaitOnFlagUntilTimeout>
 8015f18:	1e03      	subs	r3, r0, #0
 8015f1a:	d004      	beq.n	8015f26 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	2220      	movs	r2, #32
 8015f20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8015f22:	2303      	movs	r3, #3
 8015f24:	e03b      	b.n	8015f9e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8015f26:	69fb      	ldr	r3, [r7, #28]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d10b      	bne.n	8015f44 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015f2c:	69bb      	ldr	r3, [r7, #24]
 8015f2e:	881b      	ldrh	r3, [r3, #0]
 8015f30:	001a      	movs	r2, r3
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	05d2      	lsls	r2, r2, #23
 8015f38:	0dd2      	lsrs	r2, r2, #23
 8015f3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015f3c:	69bb      	ldr	r3, [r7, #24]
 8015f3e:	3302      	adds	r3, #2
 8015f40:	61bb      	str	r3, [r7, #24]
 8015f42:	e007      	b.n	8015f54 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015f44:	69fb      	ldr	r3, [r7, #28]
 8015f46:	781a      	ldrb	r2, [r3, #0]
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8015f4e:	69fb      	ldr	r3, [r7, #28]
 8015f50:	3301      	adds	r3, #1
 8015f52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2252      	movs	r2, #82	@ 0x52
 8015f58:	5a9b      	ldrh	r3, [r3, r2]
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	3b01      	subs	r3, #1
 8015f5e:	b299      	uxth	r1, r3
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	2252      	movs	r2, #82	@ 0x52
 8015f64:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	2252      	movs	r2, #82	@ 0x52
 8015f6a:	5a9b      	ldrh	r3, [r3, r2]
 8015f6c:	b29b      	uxth	r3, r3
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1c9      	bne.n	8015f06 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015f72:	697a      	ldr	r2, [r7, #20]
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	9300      	str	r3, [sp, #0]
 8015f7a:	0013      	movs	r3, r2
 8015f7c:	2200      	movs	r2, #0
 8015f7e:	2140      	movs	r1, #64	@ 0x40
 8015f80:	f001 f8c4 	bl	801710c <UART_WaitOnFlagUntilTimeout>
 8015f84:	1e03      	subs	r3, r0, #0
 8015f86:	d004      	beq.n	8015f92 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	2220      	movs	r2, #32
 8015f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8015f8e:	2303      	movs	r3, #3
 8015f90:	e005      	b.n	8015f9e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	2220      	movs	r2, #32
 8015f96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	e000      	b.n	8015f9e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8015f9c:	2302      	movs	r3, #2
  }
}
 8015f9e:	0018      	movs	r0, r3
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	b008      	add	sp, #32
 8015fa4:	bd80      	pop	{r7, pc}
	...

08015fa8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b088      	sub	sp, #32
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	60b9      	str	r1, [r7, #8]
 8015fb2:	1dbb      	adds	r3, r7, #6
 8015fb4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2280      	movs	r2, #128	@ 0x80
 8015fba:	589b      	ldr	r3, [r3, r2]
 8015fbc:	2b20      	cmp	r3, #32
 8015fbe:	d14a      	bne.n	8016056 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d003      	beq.n	8015fce <HAL_UART_Receive_IT+0x26>
 8015fc6:	1dbb      	adds	r3, r7, #6
 8015fc8:	881b      	ldrh	r3, [r3, #0]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d101      	bne.n	8015fd2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015fce:	2301      	movs	r3, #1
 8015fd0:	e042      	b.n	8016058 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	689a      	ldr	r2, [r3, #8]
 8015fd6:	2380      	movs	r3, #128	@ 0x80
 8015fd8:	015b      	lsls	r3, r3, #5
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d109      	bne.n	8015ff2 <HAL_UART_Receive_IT+0x4a>
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	691b      	ldr	r3, [r3, #16]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d105      	bne.n	8015ff2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	4013      	ands	r3, r2
 8015fec:	d001      	beq.n	8015ff2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8015fee:	2301      	movs	r3, #1
 8015ff0:	e032      	b.n	8016058 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	4a18      	ldr	r2, [pc, #96]	@ (8016060 <HAL_UART_Receive_IT+0xb8>)
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d020      	beq.n	8016044 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	685a      	ldr	r2, [r3, #4]
 8016008:	2380      	movs	r3, #128	@ 0x80
 801600a:	041b      	lsls	r3, r3, #16
 801600c:	4013      	ands	r3, r2
 801600e:	d019      	beq.n	8016044 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016010:	f3ef 8310 	mrs	r3, PRIMASK
 8016014:	613b      	str	r3, [r7, #16]
  return(result);
 8016016:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016018:	61fb      	str	r3, [r7, #28]
 801601a:	2301      	movs	r3, #1
 801601c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	f383 8810 	msr	PRIMASK, r3
}
 8016024:	46c0      	nop			@ (mov r8, r8)
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	681a      	ldr	r2, [r3, #0]
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	2180      	movs	r1, #128	@ 0x80
 8016032:	04c9      	lsls	r1, r1, #19
 8016034:	430a      	orrs	r2, r1
 8016036:	601a      	str	r2, [r3, #0]
 8016038:	69fb      	ldr	r3, [r7, #28]
 801603a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801603c:	69bb      	ldr	r3, [r7, #24]
 801603e:	f383 8810 	msr	PRIMASK, r3
}
 8016042:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016044:	1dbb      	adds	r3, r7, #6
 8016046:	881a      	ldrh	r2, [r3, #0]
 8016048:	68b9      	ldr	r1, [r7, #8]
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	0018      	movs	r0, r3
 801604e:	f001 f8c7 	bl	80171e0 <UART_Start_Receive_IT>
 8016052:	0003      	movs	r3, r0
 8016054:	e000      	b.n	8016058 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016056:	2302      	movs	r3, #2
  }
}
 8016058:	0018      	movs	r0, r3
 801605a:	46bd      	mov	sp, r7
 801605c:	b008      	add	sp, #32
 801605e:	bd80      	pop	{r7, pc}
 8016060:	40004800 	.word	0x40004800

08016064 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b088      	sub	sp, #32
 8016068:	af00      	add	r7, sp, #0
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	1dbb      	adds	r3, r7, #6
 8016070:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016076:	2b20      	cmp	r3, #32
 8016078:	d000      	beq.n	801607c <HAL_UART_Transmit_DMA+0x18>
 801607a:	e077      	b.n	801616c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d003      	beq.n	801608a <HAL_UART_Transmit_DMA+0x26>
 8016082:	1dbb      	adds	r3, r7, #6
 8016084:	881b      	ldrh	r3, [r3, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d101      	bne.n	801608e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801608a:	2301      	movs	r3, #1
 801608c:	e06f      	b.n	801616e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	689a      	ldr	r2, [r3, #8]
 8016092:	2380      	movs	r3, #128	@ 0x80
 8016094:	015b      	lsls	r3, r3, #5
 8016096:	429a      	cmp	r2, r3
 8016098:	d109      	bne.n	80160ae <HAL_UART_Transmit_DMA+0x4a>
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	691b      	ldr	r3, [r3, #16]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d105      	bne.n	80160ae <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	2201      	movs	r2, #1
 80160a6:	4013      	ands	r3, r2
 80160a8:	d001      	beq.n	80160ae <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80160aa:	2301      	movs	r3, #1
 80160ac:	e05f      	b.n	801616e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	68ba      	ldr	r2, [r7, #8]
 80160b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	1dba      	adds	r2, r7, #6
 80160b8:	2150      	movs	r1, #80	@ 0x50
 80160ba:	8812      	ldrh	r2, [r2, #0]
 80160bc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	1dba      	adds	r2, r7, #6
 80160c2:	2152      	movs	r1, #82	@ 0x52
 80160c4:	8812      	ldrh	r2, [r2, #0]
 80160c6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2284      	movs	r2, #132	@ 0x84
 80160cc:	2100      	movs	r1, #0
 80160ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2221      	movs	r2, #33	@ 0x21
 80160d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d027      	beq.n	801612e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160e2:	4a25      	ldr	r2, [pc, #148]	@ (8016178 <HAL_UART_Transmit_DMA+0x114>)
 80160e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160ea:	4a24      	ldr	r2, [pc, #144]	@ (801617c <HAL_UART_Transmit_DMA+0x118>)
 80160ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160f2:	4a23      	ldr	r2, [pc, #140]	@ (8016180 <HAL_UART_Transmit_DMA+0x11c>)
 80160f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160fa:	2200      	movs	r2, #0
 80160fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016106:	0019      	movs	r1, r3
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	3328      	adds	r3, #40	@ 0x28
 801610e:	001a      	movs	r2, r3
 8016110:	1dbb      	adds	r3, r7, #6
 8016112:	881b      	ldrh	r3, [r3, #0]
 8016114:	f7f8 fa28 	bl	800e568 <HAL_DMA_Start_IT>
 8016118:	1e03      	subs	r3, r0, #0
 801611a:	d008      	beq.n	801612e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2284      	movs	r2, #132	@ 0x84
 8016120:	2110      	movs	r1, #16
 8016122:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2220      	movs	r2, #32
 8016128:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801612a:	2301      	movs	r3, #1
 801612c:	e01f      	b.n	801616e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	2240      	movs	r2, #64	@ 0x40
 8016134:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016136:	f3ef 8310 	mrs	r3, PRIMASK
 801613a:	613b      	str	r3, [r7, #16]
  return(result);
 801613c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801613e:	61fb      	str	r3, [r7, #28]
 8016140:	2301      	movs	r3, #1
 8016142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	f383 8810 	msr	PRIMASK, r3
}
 801614a:	46c0      	nop			@ (mov r8, r8)
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	689a      	ldr	r2, [r3, #8]
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2180      	movs	r1, #128	@ 0x80
 8016158:	430a      	orrs	r2, r1
 801615a:	609a      	str	r2, [r3, #8]
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016160:	69bb      	ldr	r3, [r7, #24]
 8016162:	f383 8810 	msr	PRIMASK, r3
}
 8016166:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016168:	2300      	movs	r3, #0
 801616a:	e000      	b.n	801616e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801616c:	2302      	movs	r3, #2
  }
}
 801616e:	0018      	movs	r0, r3
 8016170:	46bd      	mov	sp, r7
 8016172:	b008      	add	sp, #32
 8016174:	bd80      	pop	{r7, pc}
 8016176:	46c0      	nop			@ (mov r8, r8)
 8016178:	080175c5 	.word	0x080175c5
 801617c:	08017661 	.word	0x08017661
 8016180:	08017801 	.word	0x08017801

08016184 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b088      	sub	sp, #32
 8016188:	af00      	add	r7, sp, #0
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	1dbb      	adds	r3, r7, #6
 8016190:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2280      	movs	r2, #128	@ 0x80
 8016196:	589b      	ldr	r3, [r3, r2]
 8016198:	2b20      	cmp	r3, #32
 801619a:	d14a      	bne.n	8016232 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d003      	beq.n	80161aa <HAL_UART_Receive_DMA+0x26>
 80161a2:	1dbb      	adds	r3, r7, #6
 80161a4:	881b      	ldrh	r3, [r3, #0]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d101      	bne.n	80161ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80161aa:	2301      	movs	r3, #1
 80161ac:	e042      	b.n	8016234 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	689a      	ldr	r2, [r3, #8]
 80161b2:	2380      	movs	r3, #128	@ 0x80
 80161b4:	015b      	lsls	r3, r3, #5
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d109      	bne.n	80161ce <HAL_UART_Receive_DMA+0x4a>
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	691b      	ldr	r3, [r3, #16]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d105      	bne.n	80161ce <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80161c2:	68bb      	ldr	r3, [r7, #8]
 80161c4:	2201      	movs	r2, #1
 80161c6:	4013      	ands	r3, r2
 80161c8:	d001      	beq.n	80161ce <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80161ca:	2301      	movs	r3, #1
 80161cc:	e032      	b.n	8016234 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	2200      	movs	r2, #0
 80161d2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	4a18      	ldr	r2, [pc, #96]	@ (801623c <HAL_UART_Receive_DMA+0xb8>)
 80161da:	4293      	cmp	r3, r2
 80161dc:	d020      	beq.n	8016220 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	685a      	ldr	r2, [r3, #4]
 80161e4:	2380      	movs	r3, #128	@ 0x80
 80161e6:	041b      	lsls	r3, r3, #16
 80161e8:	4013      	ands	r3, r2
 80161ea:	d019      	beq.n	8016220 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161ec:	f3ef 8310 	mrs	r3, PRIMASK
 80161f0:	613b      	str	r3, [r7, #16]
  return(result);
 80161f2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80161f4:	61fb      	str	r3, [r7, #28]
 80161f6:	2301      	movs	r3, #1
 80161f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	f383 8810 	msr	PRIMASK, r3
}
 8016200:	46c0      	nop			@ (mov r8, r8)
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	681a      	ldr	r2, [r3, #0]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2180      	movs	r1, #128	@ 0x80
 801620e:	04c9      	lsls	r1, r1, #19
 8016210:	430a      	orrs	r2, r1
 8016212:	601a      	str	r2, [r3, #0]
 8016214:	69fb      	ldr	r3, [r7, #28]
 8016216:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016218:	69bb      	ldr	r3, [r7, #24]
 801621a:	f383 8810 	msr	PRIMASK, r3
}
 801621e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016220:	1dbb      	adds	r3, r7, #6
 8016222:	881a      	ldrh	r2, [r3, #0]
 8016224:	68b9      	ldr	r1, [r7, #8]
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	0018      	movs	r0, r3
 801622a:	f001 f8a3 	bl	8017374 <UART_Start_Receive_DMA>
 801622e:	0003      	movs	r3, r0
 8016230:	e000      	b.n	8016234 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016232:	2302      	movs	r3, #2
  }
}
 8016234:	0018      	movs	r0, r3
 8016236:	46bd      	mov	sp, r7
 8016238:	b008      	add	sp, #32
 801623a:	bd80      	pop	{r7, pc}
 801623c:	40004800 	.word	0x40004800

08016240 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016240:	b590      	push	{r4, r7, lr}
 8016242:	b0ab      	sub	sp, #172	@ 0xac
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	69db      	ldr	r3, [r3, #28]
 801624e:	22a4      	movs	r2, #164	@ 0xa4
 8016250:	18b9      	adds	r1, r7, r2
 8016252:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	20a0      	movs	r0, #160	@ 0xa0
 801625c:	1839      	adds	r1, r7, r0
 801625e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	689b      	ldr	r3, [r3, #8]
 8016266:	219c      	movs	r1, #156	@ 0x9c
 8016268:	1879      	adds	r1, r7, r1
 801626a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801626c:	0011      	movs	r1, r2
 801626e:	18bb      	adds	r3, r7, r2
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	4a9c      	ldr	r2, [pc, #624]	@ (80164e4 <HAL_UART_IRQHandler+0x2a4>)
 8016274:	4013      	ands	r3, r2
 8016276:	2298      	movs	r2, #152	@ 0x98
 8016278:	18bc      	adds	r4, r7, r2
 801627a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801627c:	18bb      	adds	r3, r7, r2
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d114      	bne.n	80162ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016284:	187b      	adds	r3, r7, r1
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2220      	movs	r2, #32
 801628a:	4013      	ands	r3, r2
 801628c:	d00f      	beq.n	80162ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801628e:	183b      	adds	r3, r7, r0
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2220      	movs	r2, #32
 8016294:	4013      	ands	r3, r2
 8016296:	d00a      	beq.n	80162ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801629c:	2b00      	cmp	r3, #0
 801629e:	d100      	bne.n	80162a2 <HAL_UART_IRQHandler+0x62>
 80162a0:	e2aa      	b.n	80167f8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	0010      	movs	r0, r2
 80162aa:	4798      	blx	r3
      }
      return;
 80162ac:	e2a4      	b.n	80167f8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80162ae:	2398      	movs	r3, #152	@ 0x98
 80162b0:	18fb      	adds	r3, r7, r3
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d100      	bne.n	80162ba <HAL_UART_IRQHandler+0x7a>
 80162b8:	e11a      	b.n	80164f0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80162ba:	239c      	movs	r3, #156	@ 0x9c
 80162bc:	18fb      	adds	r3, r7, r3
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2201      	movs	r2, #1
 80162c2:	4013      	ands	r3, r2
 80162c4:	d106      	bne.n	80162d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80162c6:	23a0      	movs	r3, #160	@ 0xa0
 80162c8:	18fb      	adds	r3, r7, r3
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	4a86      	ldr	r2, [pc, #536]	@ (80164e8 <HAL_UART_IRQHandler+0x2a8>)
 80162ce:	4013      	ands	r3, r2
 80162d0:	d100      	bne.n	80162d4 <HAL_UART_IRQHandler+0x94>
 80162d2:	e10d      	b.n	80164f0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80162d4:	23a4      	movs	r3, #164	@ 0xa4
 80162d6:	18fb      	adds	r3, r7, r3
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	2201      	movs	r2, #1
 80162dc:	4013      	ands	r3, r2
 80162de:	d012      	beq.n	8016306 <HAL_UART_IRQHandler+0xc6>
 80162e0:	23a0      	movs	r3, #160	@ 0xa0
 80162e2:	18fb      	adds	r3, r7, r3
 80162e4:	681a      	ldr	r2, [r3, #0]
 80162e6:	2380      	movs	r3, #128	@ 0x80
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	4013      	ands	r3, r2
 80162ec:	d00b      	beq.n	8016306 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	2201      	movs	r2, #1
 80162f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2284      	movs	r2, #132	@ 0x84
 80162fa:	589b      	ldr	r3, [r3, r2]
 80162fc:	2201      	movs	r2, #1
 80162fe:	431a      	orrs	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2184      	movs	r1, #132	@ 0x84
 8016304:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016306:	23a4      	movs	r3, #164	@ 0xa4
 8016308:	18fb      	adds	r3, r7, r3
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	2202      	movs	r2, #2
 801630e:	4013      	ands	r3, r2
 8016310:	d011      	beq.n	8016336 <HAL_UART_IRQHandler+0xf6>
 8016312:	239c      	movs	r3, #156	@ 0x9c
 8016314:	18fb      	adds	r3, r7, r3
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	2201      	movs	r2, #1
 801631a:	4013      	ands	r3, r2
 801631c:	d00b      	beq.n	8016336 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	2202      	movs	r2, #2
 8016324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2284      	movs	r2, #132	@ 0x84
 801632a:	589b      	ldr	r3, [r3, r2]
 801632c:	2204      	movs	r2, #4
 801632e:	431a      	orrs	r2, r3
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2184      	movs	r1, #132	@ 0x84
 8016334:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016336:	23a4      	movs	r3, #164	@ 0xa4
 8016338:	18fb      	adds	r3, r7, r3
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	2204      	movs	r2, #4
 801633e:	4013      	ands	r3, r2
 8016340:	d011      	beq.n	8016366 <HAL_UART_IRQHandler+0x126>
 8016342:	239c      	movs	r3, #156	@ 0x9c
 8016344:	18fb      	adds	r3, r7, r3
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	2201      	movs	r2, #1
 801634a:	4013      	ands	r3, r2
 801634c:	d00b      	beq.n	8016366 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2204      	movs	r2, #4
 8016354:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	2284      	movs	r2, #132	@ 0x84
 801635a:	589b      	ldr	r3, [r3, r2]
 801635c:	2202      	movs	r2, #2
 801635e:	431a      	orrs	r2, r3
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2184      	movs	r1, #132	@ 0x84
 8016364:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016366:	23a4      	movs	r3, #164	@ 0xa4
 8016368:	18fb      	adds	r3, r7, r3
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2208      	movs	r2, #8
 801636e:	4013      	ands	r3, r2
 8016370:	d017      	beq.n	80163a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016372:	23a0      	movs	r3, #160	@ 0xa0
 8016374:	18fb      	adds	r3, r7, r3
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	2220      	movs	r2, #32
 801637a:	4013      	ands	r3, r2
 801637c:	d105      	bne.n	801638a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801637e:	239c      	movs	r3, #156	@ 0x9c
 8016380:	18fb      	adds	r3, r7, r3
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	2201      	movs	r2, #1
 8016386:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016388:	d00b      	beq.n	80163a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	2208      	movs	r2, #8
 8016390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2284      	movs	r2, #132	@ 0x84
 8016396:	589b      	ldr	r3, [r3, r2]
 8016398:	2208      	movs	r2, #8
 801639a:	431a      	orrs	r2, r3
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2184      	movs	r1, #132	@ 0x84
 80163a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80163a2:	23a4      	movs	r3, #164	@ 0xa4
 80163a4:	18fb      	adds	r3, r7, r3
 80163a6:	681a      	ldr	r2, [r3, #0]
 80163a8:	2380      	movs	r3, #128	@ 0x80
 80163aa:	011b      	lsls	r3, r3, #4
 80163ac:	4013      	ands	r3, r2
 80163ae:	d013      	beq.n	80163d8 <HAL_UART_IRQHandler+0x198>
 80163b0:	23a0      	movs	r3, #160	@ 0xa0
 80163b2:	18fb      	adds	r3, r7, r3
 80163b4:	681a      	ldr	r2, [r3, #0]
 80163b6:	2380      	movs	r3, #128	@ 0x80
 80163b8:	04db      	lsls	r3, r3, #19
 80163ba:	4013      	ands	r3, r2
 80163bc:	d00c      	beq.n	80163d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	2280      	movs	r2, #128	@ 0x80
 80163c4:	0112      	lsls	r2, r2, #4
 80163c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2284      	movs	r2, #132	@ 0x84
 80163cc:	589b      	ldr	r3, [r3, r2]
 80163ce:	2220      	movs	r2, #32
 80163d0:	431a      	orrs	r2, r3
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2184      	movs	r1, #132	@ 0x84
 80163d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2284      	movs	r2, #132	@ 0x84
 80163dc:	589b      	ldr	r3, [r3, r2]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d100      	bne.n	80163e4 <HAL_UART_IRQHandler+0x1a4>
 80163e2:	e20b      	b.n	80167fc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80163e4:	23a4      	movs	r3, #164	@ 0xa4
 80163e6:	18fb      	adds	r3, r7, r3
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2220      	movs	r2, #32
 80163ec:	4013      	ands	r3, r2
 80163ee:	d00e      	beq.n	801640e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80163f0:	23a0      	movs	r3, #160	@ 0xa0
 80163f2:	18fb      	adds	r3, r7, r3
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	2220      	movs	r2, #32
 80163f8:	4013      	ands	r3, r2
 80163fa:	d008      	beq.n	801640e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016400:	2b00      	cmp	r3, #0
 8016402:	d004      	beq.n	801640e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	0010      	movs	r0, r2
 801640c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	2284      	movs	r2, #132	@ 0x84
 8016412:	589b      	ldr	r3, [r3, r2]
 8016414:	2194      	movs	r1, #148	@ 0x94
 8016416:	187a      	adds	r2, r7, r1
 8016418:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	689b      	ldr	r3, [r3, #8]
 8016420:	2240      	movs	r2, #64	@ 0x40
 8016422:	4013      	ands	r3, r2
 8016424:	2b40      	cmp	r3, #64	@ 0x40
 8016426:	d004      	beq.n	8016432 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016428:	187b      	adds	r3, r7, r1
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	2228      	movs	r2, #40	@ 0x28
 801642e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016430:	d04b      	beq.n	80164ca <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	0018      	movs	r0, r3
 8016436:	f001 f861 	bl	80174fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	689b      	ldr	r3, [r3, #8]
 8016440:	2240      	movs	r2, #64	@ 0x40
 8016442:	4013      	ands	r3, r2
 8016444:	2b40      	cmp	r3, #64	@ 0x40
 8016446:	d139      	bne.n	80164bc <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016448:	f3ef 8310 	mrs	r3, PRIMASK
 801644c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801644e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016450:	2090      	movs	r0, #144	@ 0x90
 8016452:	183a      	adds	r2, r7, r0
 8016454:	6013      	str	r3, [r2, #0]
 8016456:	2301      	movs	r3, #1
 8016458:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801645a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801645c:	f383 8810 	msr	PRIMASK, r3
}
 8016460:	46c0      	nop			@ (mov r8, r8)
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	689a      	ldr	r2, [r3, #8]
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	2140      	movs	r1, #64	@ 0x40
 801646e:	438a      	bics	r2, r1
 8016470:	609a      	str	r2, [r3, #8]
 8016472:	183b      	adds	r3, r7, r0
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801647a:	f383 8810 	msr	PRIMASK, r3
}
 801647e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016484:	2b00      	cmp	r3, #0
 8016486:	d012      	beq.n	80164ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801648c:	4a17      	ldr	r2, [pc, #92]	@ (80164ec <HAL_UART_IRQHandler+0x2ac>)
 801648e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016494:	0018      	movs	r0, r3
 8016496:	f7f8 f90d 	bl	800e6b4 <HAL_DMA_Abort_IT>
 801649a:	1e03      	subs	r3, r0, #0
 801649c:	d020      	beq.n	80164e0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164a8:	0018      	movs	r0, r3
 80164aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164ac:	e018      	b.n	80164e0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2298      	movs	r2, #152	@ 0x98
 80164b2:	589b      	ldr	r3, [r3, r2]
 80164b4:	687a      	ldr	r2, [r7, #4]
 80164b6:	0010      	movs	r0, r2
 80164b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164ba:	e011      	b.n	80164e0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	2298      	movs	r2, #152	@ 0x98
 80164c0:	589b      	ldr	r3, [r3, r2]
 80164c2:	687a      	ldr	r2, [r7, #4]
 80164c4:	0010      	movs	r0, r2
 80164c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164c8:	e00a      	b.n	80164e0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2298      	movs	r2, #152	@ 0x98
 80164ce:	589b      	ldr	r3, [r3, r2]
 80164d0:	687a      	ldr	r2, [r7, #4]
 80164d2:	0010      	movs	r0, r2
 80164d4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2284      	movs	r2, #132	@ 0x84
 80164da:	2100      	movs	r1, #0
 80164dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80164de:	e18d      	b.n	80167fc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80164e0:	46c0      	nop			@ (mov r8, r8)
    return;
 80164e2:	e18b      	b.n	80167fc <HAL_UART_IRQHandler+0x5bc>
 80164e4:	0000080f 	.word	0x0000080f
 80164e8:	04000120 	.word	0x04000120
 80164ec:	08017889 	.word	0x08017889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80164f4:	2b01      	cmp	r3, #1
 80164f6:	d000      	beq.n	80164fa <HAL_UART_IRQHandler+0x2ba>
 80164f8:	e13d      	b.n	8016776 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80164fa:	23a4      	movs	r3, #164	@ 0xa4
 80164fc:	18fb      	adds	r3, r7, r3
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	2210      	movs	r2, #16
 8016502:	4013      	ands	r3, r2
 8016504:	d100      	bne.n	8016508 <HAL_UART_IRQHandler+0x2c8>
 8016506:	e136      	b.n	8016776 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016508:	23a0      	movs	r3, #160	@ 0xa0
 801650a:	18fb      	adds	r3, r7, r3
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	2210      	movs	r2, #16
 8016510:	4013      	ands	r3, r2
 8016512:	d100      	bne.n	8016516 <HAL_UART_IRQHandler+0x2d6>
 8016514:	e12f      	b.n	8016776 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2210      	movs	r2, #16
 801651c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	689b      	ldr	r3, [r3, #8]
 8016524:	2240      	movs	r2, #64	@ 0x40
 8016526:	4013      	ands	r3, r2
 8016528:	2b40      	cmp	r3, #64	@ 0x40
 801652a:	d000      	beq.n	801652e <HAL_UART_IRQHandler+0x2ee>
 801652c:	e0a2      	b.n	8016674 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	685a      	ldr	r2, [r3, #4]
 8016536:	217e      	movs	r1, #126	@ 0x7e
 8016538:	187b      	adds	r3, r7, r1
 801653a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801653c:	187b      	adds	r3, r7, r1
 801653e:	881b      	ldrh	r3, [r3, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d100      	bne.n	8016546 <HAL_UART_IRQHandler+0x306>
 8016544:	e15c      	b.n	8016800 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2258      	movs	r2, #88	@ 0x58
 801654a:	5a9b      	ldrh	r3, [r3, r2]
 801654c:	187a      	adds	r2, r7, r1
 801654e:	8812      	ldrh	r2, [r2, #0]
 8016550:	429a      	cmp	r2, r3
 8016552:	d300      	bcc.n	8016556 <HAL_UART_IRQHandler+0x316>
 8016554:	e154      	b.n	8016800 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	187a      	adds	r2, r7, r1
 801655a:	215a      	movs	r1, #90	@ 0x5a
 801655c:	8812      	ldrh	r2, [r2, #0]
 801655e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2220      	movs	r2, #32
 801656a:	4013      	ands	r3, r2
 801656c:	d16f      	bne.n	801664e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801656e:	f3ef 8310 	mrs	r3, PRIMASK
 8016572:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016576:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016578:	2301      	movs	r3, #1
 801657a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801657c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801657e:	f383 8810 	msr	PRIMASK, r3
}
 8016582:	46c0      	nop			@ (mov r8, r8)
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	681a      	ldr	r2, [r3, #0]
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	49a0      	ldr	r1, [pc, #640]	@ (8016810 <HAL_UART_IRQHandler+0x5d0>)
 8016590:	400a      	ands	r2, r1
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016596:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801659a:	f383 8810 	msr	PRIMASK, r3
}
 801659e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165a0:	f3ef 8310 	mrs	r3, PRIMASK
 80165a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80165a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80165a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80165aa:	2301      	movs	r3, #1
 80165ac:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80165b0:	f383 8810 	msr	PRIMASK, r3
}
 80165b4:	46c0      	nop			@ (mov r8, r8)
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	689a      	ldr	r2, [r3, #8]
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2101      	movs	r1, #1
 80165c2:	438a      	bics	r2, r1
 80165c4:	609a      	str	r2, [r3, #8]
 80165c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80165c8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80165cc:	f383 8810 	msr	PRIMASK, r3
}
 80165d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165d2:	f3ef 8310 	mrs	r3, PRIMASK
 80165d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80165d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80165da:	673b      	str	r3, [r7, #112]	@ 0x70
 80165dc:	2301      	movs	r3, #1
 80165de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165e2:	f383 8810 	msr	PRIMASK, r3
}
 80165e6:	46c0      	nop			@ (mov r8, r8)
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	689a      	ldr	r2, [r3, #8]
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	2140      	movs	r1, #64	@ 0x40
 80165f4:	438a      	bics	r2, r1
 80165f6:	609a      	str	r2, [r3, #8]
 80165f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80165fa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165fe:	f383 8810 	msr	PRIMASK, r3
}
 8016602:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2280      	movs	r2, #128	@ 0x80
 8016608:	2120      	movs	r1, #32
 801660a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2200      	movs	r2, #0
 8016610:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016612:	f3ef 8310 	mrs	r3, PRIMASK
 8016616:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801661a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801661c:	2301      	movs	r3, #1
 801661e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016622:	f383 8810 	msr	PRIMASK, r3
}
 8016626:	46c0      	nop			@ (mov r8, r8)
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	2110      	movs	r1, #16
 8016634:	438a      	bics	r2, r1
 8016636:	601a      	str	r2, [r3, #0]
 8016638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801663a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801663c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801663e:	f383 8810 	msr	PRIMASK, r3
}
 8016642:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016648:	0018      	movs	r0, r3
 801664a:	f7f7 fff3 	bl	800e634 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2202      	movs	r2, #2
 8016652:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	22ac      	movs	r2, #172	@ 0xac
 8016658:	589b      	ldr	r3, [r3, r2]
 801665a:	687a      	ldr	r2, [r7, #4]
 801665c:	2158      	movs	r1, #88	@ 0x58
 801665e:	5a51      	ldrh	r1, [r2, r1]
 8016660:	687a      	ldr	r2, [r7, #4]
 8016662:	205a      	movs	r0, #90	@ 0x5a
 8016664:	5a12      	ldrh	r2, [r2, r0]
 8016666:	b292      	uxth	r2, r2
 8016668:	1a8a      	subs	r2, r1, r2
 801666a:	b291      	uxth	r1, r2
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	0010      	movs	r0, r2
 8016670:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016672:	e0c5      	b.n	8016800 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	2258      	movs	r2, #88	@ 0x58
 8016678:	5a99      	ldrh	r1, [r3, r2]
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	225a      	movs	r2, #90	@ 0x5a
 801667e:	5a9b      	ldrh	r3, [r3, r2]
 8016680:	b29a      	uxth	r2, r3
 8016682:	208e      	movs	r0, #142	@ 0x8e
 8016684:	183b      	adds	r3, r7, r0
 8016686:	1a8a      	subs	r2, r1, r2
 8016688:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	225a      	movs	r2, #90	@ 0x5a
 801668e:	5a9b      	ldrh	r3, [r3, r2]
 8016690:	b29b      	uxth	r3, r3
 8016692:	2b00      	cmp	r3, #0
 8016694:	d100      	bne.n	8016698 <HAL_UART_IRQHandler+0x458>
 8016696:	e0b5      	b.n	8016804 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8016698:	183b      	adds	r3, r7, r0
 801669a:	881b      	ldrh	r3, [r3, #0]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d100      	bne.n	80166a2 <HAL_UART_IRQHandler+0x462>
 80166a0:	e0b0      	b.n	8016804 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166a2:	f3ef 8310 	mrs	r3, PRIMASK
 80166a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80166a8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80166aa:	2488      	movs	r4, #136	@ 0x88
 80166ac:	193a      	adds	r2, r7, r4
 80166ae:	6013      	str	r3, [r2, #0]
 80166b0:	2301      	movs	r3, #1
 80166b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	f383 8810 	msr	PRIMASK, r3
}
 80166ba:	46c0      	nop			@ (mov r8, r8)
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	681a      	ldr	r2, [r3, #0]
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	4953      	ldr	r1, [pc, #332]	@ (8016814 <HAL_UART_IRQHandler+0x5d4>)
 80166c8:	400a      	ands	r2, r1
 80166ca:	601a      	str	r2, [r3, #0]
 80166cc:	193b      	adds	r3, r7, r4
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	f383 8810 	msr	PRIMASK, r3
}
 80166d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166da:	f3ef 8310 	mrs	r3, PRIMASK
 80166de:	61bb      	str	r3, [r7, #24]
  return(result);
 80166e0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80166e2:	2484      	movs	r4, #132	@ 0x84
 80166e4:	193a      	adds	r2, r7, r4
 80166e6:	6013      	str	r3, [r2, #0]
 80166e8:	2301      	movs	r3, #1
 80166ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	f383 8810 	msr	PRIMASK, r3
}
 80166f2:	46c0      	nop			@ (mov r8, r8)
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	689a      	ldr	r2, [r3, #8]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	2101      	movs	r1, #1
 8016700:	438a      	bics	r2, r1
 8016702:	609a      	str	r2, [r3, #8]
 8016704:	193b      	adds	r3, r7, r4
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801670a:	6a3b      	ldr	r3, [r7, #32]
 801670c:	f383 8810 	msr	PRIMASK, r3
}
 8016710:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2280      	movs	r2, #128	@ 0x80
 8016716:	2120      	movs	r1, #32
 8016718:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2200      	movs	r2, #0
 801671e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2200      	movs	r2, #0
 8016724:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016726:	f3ef 8310 	mrs	r3, PRIMASK
 801672a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801672e:	2480      	movs	r4, #128	@ 0x80
 8016730:	193a      	adds	r2, r7, r4
 8016732:	6013      	str	r3, [r2, #0]
 8016734:	2301      	movs	r3, #1
 8016736:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801673a:	f383 8810 	msr	PRIMASK, r3
}
 801673e:	46c0      	nop			@ (mov r8, r8)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	681a      	ldr	r2, [r3, #0]
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	2110      	movs	r1, #16
 801674c:	438a      	bics	r2, r1
 801674e:	601a      	str	r2, [r3, #0]
 8016750:	193b      	adds	r3, r7, r4
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016758:	f383 8810 	msr	PRIMASK, r3
}
 801675c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2202      	movs	r2, #2
 8016762:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	22ac      	movs	r2, #172	@ 0xac
 8016768:	589b      	ldr	r3, [r3, r2]
 801676a:	183a      	adds	r2, r7, r0
 801676c:	8811      	ldrh	r1, [r2, #0]
 801676e:	687a      	ldr	r2, [r7, #4]
 8016770:	0010      	movs	r0, r2
 8016772:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016774:	e046      	b.n	8016804 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016776:	23a4      	movs	r3, #164	@ 0xa4
 8016778:	18fb      	adds	r3, r7, r3
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	2380      	movs	r3, #128	@ 0x80
 801677e:	035b      	lsls	r3, r3, #13
 8016780:	4013      	ands	r3, r2
 8016782:	d012      	beq.n	80167aa <HAL_UART_IRQHandler+0x56a>
 8016784:	239c      	movs	r3, #156	@ 0x9c
 8016786:	18fb      	adds	r3, r7, r3
 8016788:	681a      	ldr	r2, [r3, #0]
 801678a:	2380      	movs	r3, #128	@ 0x80
 801678c:	03db      	lsls	r3, r3, #15
 801678e:	4013      	ands	r3, r2
 8016790:	d00b      	beq.n	80167aa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2280      	movs	r2, #128	@ 0x80
 8016798:	0352      	lsls	r2, r2, #13
 801679a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	22a8      	movs	r2, #168	@ 0xa8
 80167a0:	589b      	ldr	r3, [r3, r2]
 80167a2:	687a      	ldr	r2, [r7, #4]
 80167a4:	0010      	movs	r0, r2
 80167a6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80167a8:	e02f      	b.n	801680a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80167aa:	23a4      	movs	r3, #164	@ 0xa4
 80167ac:	18fb      	adds	r3, r7, r3
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	2280      	movs	r2, #128	@ 0x80
 80167b2:	4013      	ands	r3, r2
 80167b4:	d00f      	beq.n	80167d6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80167b6:	23a0      	movs	r3, #160	@ 0xa0
 80167b8:	18fb      	adds	r3, r7, r3
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	2280      	movs	r2, #128	@ 0x80
 80167be:	4013      	ands	r3, r2
 80167c0:	d009      	beq.n	80167d6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d01e      	beq.n	8016808 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167ce:	687a      	ldr	r2, [r7, #4]
 80167d0:	0010      	movs	r0, r2
 80167d2:	4798      	blx	r3
    }
    return;
 80167d4:	e018      	b.n	8016808 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80167d6:	23a4      	movs	r3, #164	@ 0xa4
 80167d8:	18fb      	adds	r3, r7, r3
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	2240      	movs	r2, #64	@ 0x40
 80167de:	4013      	ands	r3, r2
 80167e0:	d013      	beq.n	801680a <HAL_UART_IRQHandler+0x5ca>
 80167e2:	23a0      	movs	r3, #160	@ 0xa0
 80167e4:	18fb      	adds	r3, r7, r3
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	2240      	movs	r2, #64	@ 0x40
 80167ea:	4013      	ands	r3, r2
 80167ec:	d00d      	beq.n	801680a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	0018      	movs	r0, r3
 80167f2:	f001 f862 	bl	80178ba <UART_EndTransmit_IT>
    return;
 80167f6:	e008      	b.n	801680a <HAL_UART_IRQHandler+0x5ca>
      return;
 80167f8:	46c0      	nop			@ (mov r8, r8)
 80167fa:	e006      	b.n	801680a <HAL_UART_IRQHandler+0x5ca>
    return;
 80167fc:	46c0      	nop			@ (mov r8, r8)
 80167fe:	e004      	b.n	801680a <HAL_UART_IRQHandler+0x5ca>
      return;
 8016800:	46c0      	nop			@ (mov r8, r8)
 8016802:	e002      	b.n	801680a <HAL_UART_IRQHandler+0x5ca>
      return;
 8016804:	46c0      	nop			@ (mov r8, r8)
 8016806:	e000      	b.n	801680a <HAL_UART_IRQHandler+0x5ca>
    return;
 8016808:	46c0      	nop			@ (mov r8, r8)
  }

}
 801680a:	46bd      	mov	sp, r7
 801680c:	b02b      	add	sp, #172	@ 0xac
 801680e:	bd90      	pop	{r4, r7, pc}
 8016810:	fffffeff 	.word	0xfffffeff
 8016814:	fffffedf 	.word	0xfffffedf

08016818 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b082      	sub	sp, #8
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016820:	46c0      	nop			@ (mov r8, r8)
 8016822:	46bd      	mov	sp, r7
 8016824:	b002      	add	sp, #8
 8016826:	bd80      	pop	{r7, pc}

08016828 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b082      	sub	sp, #8
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8016830:	46c0      	nop			@ (mov r8, r8)
 8016832:	46bd      	mov	sp, r7
 8016834:	b002      	add	sp, #8
 8016836:	bd80      	pop	{r7, pc}

08016838 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8016840:	46c0      	nop			@ (mov r8, r8)
 8016842:	46bd      	mov	sp, r7
 8016844:	b002      	add	sp, #8
 8016846:	bd80      	pop	{r7, pc}

08016848 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016850:	46c0      	nop			@ (mov r8, r8)
 8016852:	46bd      	mov	sp, r7
 8016854:	b002      	add	sp, #8
 8016856:	bd80      	pop	{r7, pc}

08016858 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b082      	sub	sp, #8
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016860:	46c0      	nop			@ (mov r8, r8)
 8016862:	46bd      	mov	sp, r7
 8016864:	b002      	add	sp, #8
 8016866:	bd80      	pop	{r7, pc}

08016868 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016870:	46c0      	nop			@ (mov r8, r8)
 8016872:	46bd      	mov	sp, r7
 8016874:	b002      	add	sp, #8
 8016876:	bd80      	pop	{r7, pc}

08016878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
 8016880:	000a      	movs	r2, r1
 8016882:	1cbb      	adds	r3, r7, #2
 8016884:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016886:	46c0      	nop			@ (mov r8, r8)
 8016888:	46bd      	mov	sp, r7
 801688a:	b002      	add	sp, #8
 801688c:	bd80      	pop	{r7, pc}
	...

08016890 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b082      	sub	sp, #8
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2188      	movs	r1, #136	@ 0x88
 801689c:	4a14      	ldr	r2, [pc, #80]	@ (80168f0 <UART_InitCallbacksToDefault+0x60>)
 801689e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	218c      	movs	r1, #140	@ 0x8c
 80168a4:	4a13      	ldr	r2, [pc, #76]	@ (80168f4 <UART_InitCallbacksToDefault+0x64>)
 80168a6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2190      	movs	r1, #144	@ 0x90
 80168ac:	4a12      	ldr	r2, [pc, #72]	@ (80168f8 <UART_InitCallbacksToDefault+0x68>)
 80168ae:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2194      	movs	r1, #148	@ 0x94
 80168b4:	4a11      	ldr	r2, [pc, #68]	@ (80168fc <UART_InitCallbacksToDefault+0x6c>)
 80168b6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2198      	movs	r1, #152	@ 0x98
 80168bc:	4a10      	ldr	r2, [pc, #64]	@ (8016900 <UART_InitCallbacksToDefault+0x70>)
 80168be:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	219c      	movs	r1, #156	@ 0x9c
 80168c4:	4a0f      	ldr	r2, [pc, #60]	@ (8016904 <UART_InitCallbacksToDefault+0x74>)
 80168c6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	21a0      	movs	r1, #160	@ 0xa0
 80168cc:	4a0e      	ldr	r2, [pc, #56]	@ (8016908 <UART_InitCallbacksToDefault+0x78>)
 80168ce:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	21a4      	movs	r1, #164	@ 0xa4
 80168d4:	4a0d      	ldr	r2, [pc, #52]	@ (801690c <UART_InitCallbacksToDefault+0x7c>)
 80168d6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	21a8      	movs	r1, #168	@ 0xa8
 80168dc:	4a0c      	ldr	r2, [pc, #48]	@ (8016910 <UART_InitCallbacksToDefault+0x80>)
 80168de:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	21ac      	movs	r1, #172	@ 0xac
 80168e4:	4a0b      	ldr	r2, [pc, #44]	@ (8016914 <UART_InitCallbacksToDefault+0x84>)
 80168e6:	505a      	str	r2, [r3, r1]

}
 80168e8:	46c0      	nop			@ (mov r8, r8)
 80168ea:	46bd      	mov	sp, r7
 80168ec:	b002      	add	sp, #8
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	08016829 	.word	0x08016829
 80168f4:	08016819 	.word	0x08016819
 80168f8:	08016839 	.word	0x08016839
 80168fc:	080079c5 	.word	0x080079c5
 8016900:	08003afd 	.word	0x08003afd
 8016904:	08016849 	.word	0x08016849
 8016908:	08016859 	.word	0x08016859
 801690c:	08016869 	.word	0x08016869
 8016910:	08017cad 	.word	0x08017cad
 8016914:	08016879 	.word	0x08016879

08016918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016918:	b5b0      	push	{r4, r5, r7, lr}
 801691a:	b08e      	sub	sp, #56	@ 0x38
 801691c:	af00      	add	r7, sp, #0
 801691e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016920:	231a      	movs	r3, #26
 8016922:	2218      	movs	r2, #24
 8016924:	189b      	adds	r3, r3, r2
 8016926:	19db      	adds	r3, r3, r7
 8016928:	2200      	movs	r2, #0
 801692a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	689a      	ldr	r2, [r3, #8]
 8016930:	69fb      	ldr	r3, [r7, #28]
 8016932:	691b      	ldr	r3, [r3, #16]
 8016934:	431a      	orrs	r2, r3
 8016936:	69fb      	ldr	r3, [r7, #28]
 8016938:	695b      	ldr	r3, [r3, #20]
 801693a:	431a      	orrs	r2, r3
 801693c:	69fb      	ldr	r3, [r7, #28]
 801693e:	69db      	ldr	r3, [r3, #28]
 8016940:	4313      	orrs	r3, r2
 8016942:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016944:	69fb      	ldr	r3, [r7, #28]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	4ac3      	ldr	r2, [pc, #780]	@ (8016c58 <UART_SetConfig+0x340>)
 801694c:	4013      	ands	r3, r2
 801694e:	0019      	movs	r1, r3
 8016950:	69fb      	ldr	r3, [r7, #28]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016956:	430a      	orrs	r2, r1
 8016958:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801695a:	69fb      	ldr	r3, [r7, #28]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	685b      	ldr	r3, [r3, #4]
 8016960:	4abe      	ldr	r2, [pc, #760]	@ (8016c5c <UART_SetConfig+0x344>)
 8016962:	4013      	ands	r3, r2
 8016964:	0019      	movs	r1, r3
 8016966:	69fb      	ldr	r3, [r7, #28]
 8016968:	68da      	ldr	r2, [r3, #12]
 801696a:	69fb      	ldr	r3, [r7, #28]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	430a      	orrs	r2, r1
 8016970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016972:	69fb      	ldr	r3, [r7, #28]
 8016974:	699b      	ldr	r3, [r3, #24]
 8016976:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	4ab8      	ldr	r2, [pc, #736]	@ (8016c60 <UART_SetConfig+0x348>)
 801697e:	4293      	cmp	r3, r2
 8016980:	d004      	beq.n	801698c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	6a1b      	ldr	r3, [r3, #32]
 8016986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016988:	4313      	orrs	r3, r2
 801698a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	689b      	ldr	r3, [r3, #8]
 8016992:	4ab4      	ldr	r2, [pc, #720]	@ (8016c64 <UART_SetConfig+0x34c>)
 8016994:	4013      	ands	r3, r2
 8016996:	0019      	movs	r1, r3
 8016998:	69fb      	ldr	r3, [r7, #28]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801699e:	430a      	orrs	r2, r1
 80169a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80169a2:	69fb      	ldr	r3, [r7, #28]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	4ab0      	ldr	r2, [pc, #704]	@ (8016c68 <UART_SetConfig+0x350>)
 80169a8:	4293      	cmp	r3, r2
 80169aa:	d131      	bne.n	8016a10 <UART_SetConfig+0xf8>
 80169ac:	4baf      	ldr	r3, [pc, #700]	@ (8016c6c <UART_SetConfig+0x354>)
 80169ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80169b0:	2203      	movs	r2, #3
 80169b2:	4013      	ands	r3, r2
 80169b4:	2b03      	cmp	r3, #3
 80169b6:	d01d      	beq.n	80169f4 <UART_SetConfig+0xdc>
 80169b8:	d823      	bhi.n	8016a02 <UART_SetConfig+0xea>
 80169ba:	2b02      	cmp	r3, #2
 80169bc:	d00c      	beq.n	80169d8 <UART_SetConfig+0xc0>
 80169be:	d820      	bhi.n	8016a02 <UART_SetConfig+0xea>
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d002      	beq.n	80169ca <UART_SetConfig+0xb2>
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	d00e      	beq.n	80169e6 <UART_SetConfig+0xce>
 80169c8:	e01b      	b.n	8016a02 <UART_SetConfig+0xea>
 80169ca:	231b      	movs	r3, #27
 80169cc:	2218      	movs	r2, #24
 80169ce:	189b      	adds	r3, r3, r2
 80169d0:	19db      	adds	r3, r3, r7
 80169d2:	2201      	movs	r2, #1
 80169d4:	701a      	strb	r2, [r3, #0]
 80169d6:	e0b4      	b.n	8016b42 <UART_SetConfig+0x22a>
 80169d8:	231b      	movs	r3, #27
 80169da:	2218      	movs	r2, #24
 80169dc:	189b      	adds	r3, r3, r2
 80169de:	19db      	adds	r3, r3, r7
 80169e0:	2202      	movs	r2, #2
 80169e2:	701a      	strb	r2, [r3, #0]
 80169e4:	e0ad      	b.n	8016b42 <UART_SetConfig+0x22a>
 80169e6:	231b      	movs	r3, #27
 80169e8:	2218      	movs	r2, #24
 80169ea:	189b      	adds	r3, r3, r2
 80169ec:	19db      	adds	r3, r3, r7
 80169ee:	2204      	movs	r2, #4
 80169f0:	701a      	strb	r2, [r3, #0]
 80169f2:	e0a6      	b.n	8016b42 <UART_SetConfig+0x22a>
 80169f4:	231b      	movs	r3, #27
 80169f6:	2218      	movs	r2, #24
 80169f8:	189b      	adds	r3, r3, r2
 80169fa:	19db      	adds	r3, r3, r7
 80169fc:	2208      	movs	r2, #8
 80169fe:	701a      	strb	r2, [r3, #0]
 8016a00:	e09f      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a02:	231b      	movs	r3, #27
 8016a04:	2218      	movs	r2, #24
 8016a06:	189b      	adds	r3, r3, r2
 8016a08:	19db      	adds	r3, r3, r7
 8016a0a:	2210      	movs	r2, #16
 8016a0c:	701a      	strb	r2, [r3, #0]
 8016a0e:	e098      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	4a96      	ldr	r2, [pc, #600]	@ (8016c70 <UART_SetConfig+0x358>)
 8016a16:	4293      	cmp	r3, r2
 8016a18:	d131      	bne.n	8016a7e <UART_SetConfig+0x166>
 8016a1a:	4b94      	ldr	r3, [pc, #592]	@ (8016c6c <UART_SetConfig+0x354>)
 8016a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a1e:	220c      	movs	r2, #12
 8016a20:	4013      	ands	r3, r2
 8016a22:	2b0c      	cmp	r3, #12
 8016a24:	d01d      	beq.n	8016a62 <UART_SetConfig+0x14a>
 8016a26:	d823      	bhi.n	8016a70 <UART_SetConfig+0x158>
 8016a28:	2b08      	cmp	r3, #8
 8016a2a:	d00c      	beq.n	8016a46 <UART_SetConfig+0x12e>
 8016a2c:	d820      	bhi.n	8016a70 <UART_SetConfig+0x158>
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d002      	beq.n	8016a38 <UART_SetConfig+0x120>
 8016a32:	2b04      	cmp	r3, #4
 8016a34:	d00e      	beq.n	8016a54 <UART_SetConfig+0x13c>
 8016a36:	e01b      	b.n	8016a70 <UART_SetConfig+0x158>
 8016a38:	231b      	movs	r3, #27
 8016a3a:	2218      	movs	r2, #24
 8016a3c:	189b      	adds	r3, r3, r2
 8016a3e:	19db      	adds	r3, r3, r7
 8016a40:	2200      	movs	r2, #0
 8016a42:	701a      	strb	r2, [r3, #0]
 8016a44:	e07d      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a46:	231b      	movs	r3, #27
 8016a48:	2218      	movs	r2, #24
 8016a4a:	189b      	adds	r3, r3, r2
 8016a4c:	19db      	adds	r3, r3, r7
 8016a4e:	2202      	movs	r2, #2
 8016a50:	701a      	strb	r2, [r3, #0]
 8016a52:	e076      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a54:	231b      	movs	r3, #27
 8016a56:	2218      	movs	r2, #24
 8016a58:	189b      	adds	r3, r3, r2
 8016a5a:	19db      	adds	r3, r3, r7
 8016a5c:	2204      	movs	r2, #4
 8016a5e:	701a      	strb	r2, [r3, #0]
 8016a60:	e06f      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a62:	231b      	movs	r3, #27
 8016a64:	2218      	movs	r2, #24
 8016a66:	189b      	adds	r3, r3, r2
 8016a68:	19db      	adds	r3, r3, r7
 8016a6a:	2208      	movs	r2, #8
 8016a6c:	701a      	strb	r2, [r3, #0]
 8016a6e:	e068      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a70:	231b      	movs	r3, #27
 8016a72:	2218      	movs	r2, #24
 8016a74:	189b      	adds	r3, r3, r2
 8016a76:	19db      	adds	r3, r3, r7
 8016a78:	2210      	movs	r2, #16
 8016a7a:	701a      	strb	r2, [r3, #0]
 8016a7c:	e061      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a7e:	69fb      	ldr	r3, [r7, #28]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	4a7c      	ldr	r2, [pc, #496]	@ (8016c74 <UART_SetConfig+0x35c>)
 8016a84:	4293      	cmp	r3, r2
 8016a86:	d106      	bne.n	8016a96 <UART_SetConfig+0x17e>
 8016a88:	231b      	movs	r3, #27
 8016a8a:	2218      	movs	r2, #24
 8016a8c:	189b      	adds	r3, r3, r2
 8016a8e:	19db      	adds	r3, r3, r7
 8016a90:	2200      	movs	r2, #0
 8016a92:	701a      	strb	r2, [r3, #0]
 8016a94:	e055      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016a96:	69fb      	ldr	r3, [r7, #28]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	4a77      	ldr	r2, [pc, #476]	@ (8016c78 <UART_SetConfig+0x360>)
 8016a9c:	4293      	cmp	r3, r2
 8016a9e:	d106      	bne.n	8016aae <UART_SetConfig+0x196>
 8016aa0:	231b      	movs	r3, #27
 8016aa2:	2218      	movs	r2, #24
 8016aa4:	189b      	adds	r3, r3, r2
 8016aa6:	19db      	adds	r3, r3, r7
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	701a      	strb	r2, [r3, #0]
 8016aac:	e049      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016aae:	69fb      	ldr	r3, [r7, #28]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	4a6b      	ldr	r2, [pc, #428]	@ (8016c60 <UART_SetConfig+0x348>)
 8016ab4:	4293      	cmp	r3, r2
 8016ab6:	d13e      	bne.n	8016b36 <UART_SetConfig+0x21e>
 8016ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8016c6c <UART_SetConfig+0x354>)
 8016aba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016abc:	23c0      	movs	r3, #192	@ 0xc0
 8016abe:	011b      	lsls	r3, r3, #4
 8016ac0:	4013      	ands	r3, r2
 8016ac2:	22c0      	movs	r2, #192	@ 0xc0
 8016ac4:	0112      	lsls	r2, r2, #4
 8016ac6:	4293      	cmp	r3, r2
 8016ac8:	d027      	beq.n	8016b1a <UART_SetConfig+0x202>
 8016aca:	22c0      	movs	r2, #192	@ 0xc0
 8016acc:	0112      	lsls	r2, r2, #4
 8016ace:	4293      	cmp	r3, r2
 8016ad0:	d82a      	bhi.n	8016b28 <UART_SetConfig+0x210>
 8016ad2:	2280      	movs	r2, #128	@ 0x80
 8016ad4:	0112      	lsls	r2, r2, #4
 8016ad6:	4293      	cmp	r3, r2
 8016ad8:	d011      	beq.n	8016afe <UART_SetConfig+0x1e6>
 8016ada:	2280      	movs	r2, #128	@ 0x80
 8016adc:	0112      	lsls	r2, r2, #4
 8016ade:	4293      	cmp	r3, r2
 8016ae0:	d822      	bhi.n	8016b28 <UART_SetConfig+0x210>
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d004      	beq.n	8016af0 <UART_SetConfig+0x1d8>
 8016ae6:	2280      	movs	r2, #128	@ 0x80
 8016ae8:	00d2      	lsls	r2, r2, #3
 8016aea:	4293      	cmp	r3, r2
 8016aec:	d00e      	beq.n	8016b0c <UART_SetConfig+0x1f4>
 8016aee:	e01b      	b.n	8016b28 <UART_SetConfig+0x210>
 8016af0:	231b      	movs	r3, #27
 8016af2:	2218      	movs	r2, #24
 8016af4:	189b      	adds	r3, r3, r2
 8016af6:	19db      	adds	r3, r3, r7
 8016af8:	2200      	movs	r2, #0
 8016afa:	701a      	strb	r2, [r3, #0]
 8016afc:	e021      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016afe:	231b      	movs	r3, #27
 8016b00:	2218      	movs	r2, #24
 8016b02:	189b      	adds	r3, r3, r2
 8016b04:	19db      	adds	r3, r3, r7
 8016b06:	2202      	movs	r2, #2
 8016b08:	701a      	strb	r2, [r3, #0]
 8016b0a:	e01a      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016b0c:	231b      	movs	r3, #27
 8016b0e:	2218      	movs	r2, #24
 8016b10:	189b      	adds	r3, r3, r2
 8016b12:	19db      	adds	r3, r3, r7
 8016b14:	2204      	movs	r2, #4
 8016b16:	701a      	strb	r2, [r3, #0]
 8016b18:	e013      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016b1a:	231b      	movs	r3, #27
 8016b1c:	2218      	movs	r2, #24
 8016b1e:	189b      	adds	r3, r3, r2
 8016b20:	19db      	adds	r3, r3, r7
 8016b22:	2208      	movs	r2, #8
 8016b24:	701a      	strb	r2, [r3, #0]
 8016b26:	e00c      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016b28:	231b      	movs	r3, #27
 8016b2a:	2218      	movs	r2, #24
 8016b2c:	189b      	adds	r3, r3, r2
 8016b2e:	19db      	adds	r3, r3, r7
 8016b30:	2210      	movs	r2, #16
 8016b32:	701a      	strb	r2, [r3, #0]
 8016b34:	e005      	b.n	8016b42 <UART_SetConfig+0x22a>
 8016b36:	231b      	movs	r3, #27
 8016b38:	2218      	movs	r2, #24
 8016b3a:	189b      	adds	r3, r3, r2
 8016b3c:	19db      	adds	r3, r3, r7
 8016b3e:	2210      	movs	r2, #16
 8016b40:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	4a46      	ldr	r2, [pc, #280]	@ (8016c60 <UART_SetConfig+0x348>)
 8016b48:	4293      	cmp	r3, r2
 8016b4a:	d000      	beq.n	8016b4e <UART_SetConfig+0x236>
 8016b4c:	e09a      	b.n	8016c84 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016b4e:	231b      	movs	r3, #27
 8016b50:	2218      	movs	r2, #24
 8016b52:	189b      	adds	r3, r3, r2
 8016b54:	19db      	adds	r3, r3, r7
 8016b56:	781b      	ldrb	r3, [r3, #0]
 8016b58:	2b08      	cmp	r3, #8
 8016b5a:	d01d      	beq.n	8016b98 <UART_SetConfig+0x280>
 8016b5c:	dc20      	bgt.n	8016ba0 <UART_SetConfig+0x288>
 8016b5e:	2b04      	cmp	r3, #4
 8016b60:	d015      	beq.n	8016b8e <UART_SetConfig+0x276>
 8016b62:	dc1d      	bgt.n	8016ba0 <UART_SetConfig+0x288>
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d002      	beq.n	8016b6e <UART_SetConfig+0x256>
 8016b68:	2b02      	cmp	r3, #2
 8016b6a:	d005      	beq.n	8016b78 <UART_SetConfig+0x260>
 8016b6c:	e018      	b.n	8016ba0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016b6e:	f7fd fe79 	bl	8014864 <HAL_RCC_GetPCLK1Freq>
 8016b72:	0003      	movs	r3, r0
 8016b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016b76:	e01c      	b.n	8016bb2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016b78:	4b3c      	ldr	r3, [pc, #240]	@ (8016c6c <UART_SetConfig+0x354>)
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	2210      	movs	r2, #16
 8016b7e:	4013      	ands	r3, r2
 8016b80:	d002      	beq.n	8016b88 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016b82:	4b3e      	ldr	r3, [pc, #248]	@ (8016c7c <UART_SetConfig+0x364>)
 8016b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016b86:	e014      	b.n	8016bb2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8016b88:	4b3d      	ldr	r3, [pc, #244]	@ (8016c80 <UART_SetConfig+0x368>)
 8016b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016b8c:	e011      	b.n	8016bb2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016b8e:	f7fd fdb9 	bl	8014704 <HAL_RCC_GetSysClockFreq>
 8016b92:	0003      	movs	r3, r0
 8016b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016b96:	e00c      	b.n	8016bb2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016b98:	2380      	movs	r3, #128	@ 0x80
 8016b9a:	021b      	lsls	r3, r3, #8
 8016b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016b9e:	e008      	b.n	8016bb2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016ba4:	231a      	movs	r3, #26
 8016ba6:	2218      	movs	r2, #24
 8016ba8:	189b      	adds	r3, r3, r2
 8016baa:	19db      	adds	r3, r3, r7
 8016bac:	2201      	movs	r2, #1
 8016bae:	701a      	strb	r2, [r3, #0]
        break;
 8016bb0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d100      	bne.n	8016bba <UART_SetConfig+0x2a2>
 8016bb8:	e133      	b.n	8016e22 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016bba:	69fb      	ldr	r3, [r7, #28]
 8016bbc:	685a      	ldr	r2, [r3, #4]
 8016bbe:	0013      	movs	r3, r2
 8016bc0:	005b      	lsls	r3, r3, #1
 8016bc2:	189b      	adds	r3, r3, r2
 8016bc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d305      	bcc.n	8016bd6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d906      	bls.n	8016be4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8016bd6:	231a      	movs	r3, #26
 8016bd8:	2218      	movs	r2, #24
 8016bda:	189b      	adds	r3, r3, r2
 8016bdc:	19db      	adds	r3, r3, r7
 8016bde:	2201      	movs	r2, #1
 8016be0:	701a      	strb	r2, [r3, #0]
 8016be2:	e11e      	b.n	8016e22 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8016be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016be6:	613b      	str	r3, [r7, #16]
 8016be8:	2300      	movs	r3, #0
 8016bea:	617b      	str	r3, [r7, #20]
 8016bec:	6939      	ldr	r1, [r7, #16]
 8016bee:	697a      	ldr	r2, [r7, #20]
 8016bf0:	000b      	movs	r3, r1
 8016bf2:	0e1b      	lsrs	r3, r3, #24
 8016bf4:	0010      	movs	r0, r2
 8016bf6:	0205      	lsls	r5, r0, #8
 8016bf8:	431d      	orrs	r5, r3
 8016bfa:	000b      	movs	r3, r1
 8016bfc:	021c      	lsls	r4, r3, #8
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	085b      	lsrs	r3, r3, #1
 8016c04:	60bb      	str	r3, [r7, #8]
 8016c06:	2300      	movs	r3, #0
 8016c08:	60fb      	str	r3, [r7, #12]
 8016c0a:	68b8      	ldr	r0, [r7, #8]
 8016c0c:	68f9      	ldr	r1, [r7, #12]
 8016c0e:	1900      	adds	r0, r0, r4
 8016c10:	4169      	adcs	r1, r5
 8016c12:	69fb      	ldr	r3, [r7, #28]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	603b      	str	r3, [r7, #0]
 8016c18:	2300      	movs	r3, #0
 8016c1a:	607b      	str	r3, [r7, #4]
 8016c1c:	683a      	ldr	r2, [r7, #0]
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	f7e9 fcae 	bl	8000580 <__aeabi_uldivmod>
 8016c24:	0002      	movs	r2, r0
 8016c26:	000b      	movs	r3, r1
 8016c28:	0013      	movs	r3, r2
 8016c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c2e:	23c0      	movs	r3, #192	@ 0xc0
 8016c30:	009b      	lsls	r3, r3, #2
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d309      	bcc.n	8016c4a <UART_SetConfig+0x332>
 8016c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c38:	2380      	movs	r3, #128	@ 0x80
 8016c3a:	035b      	lsls	r3, r3, #13
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d204      	bcs.n	8016c4a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c46:	60da      	str	r2, [r3, #12]
 8016c48:	e0eb      	b.n	8016e22 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8016c4a:	231a      	movs	r3, #26
 8016c4c:	2218      	movs	r2, #24
 8016c4e:	189b      	adds	r3, r3, r2
 8016c50:	19db      	adds	r3, r3, r7
 8016c52:	2201      	movs	r2, #1
 8016c54:	701a      	strb	r2, [r3, #0]
 8016c56:	e0e4      	b.n	8016e22 <UART_SetConfig+0x50a>
 8016c58:	efff69f3 	.word	0xefff69f3
 8016c5c:	ffffcfff 	.word	0xffffcfff
 8016c60:	40004800 	.word	0x40004800
 8016c64:	fffff4ff 	.word	0xfffff4ff
 8016c68:	40013800 	.word	0x40013800
 8016c6c:	40021000 	.word	0x40021000
 8016c70:	40004400 	.word	0x40004400
 8016c74:	40004c00 	.word	0x40004c00
 8016c78:	40005000 	.word	0x40005000
 8016c7c:	003d0900 	.word	0x003d0900
 8016c80:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016c84:	69fb      	ldr	r3, [r7, #28]
 8016c86:	69da      	ldr	r2, [r3, #28]
 8016c88:	2380      	movs	r3, #128	@ 0x80
 8016c8a:	021b      	lsls	r3, r3, #8
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d000      	beq.n	8016c92 <UART_SetConfig+0x37a>
 8016c90:	e070      	b.n	8016d74 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8016c92:	231b      	movs	r3, #27
 8016c94:	2218      	movs	r2, #24
 8016c96:	189b      	adds	r3, r3, r2
 8016c98:	19db      	adds	r3, r3, r7
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	2b08      	cmp	r3, #8
 8016c9e:	d822      	bhi.n	8016ce6 <UART_SetConfig+0x3ce>
 8016ca0:	009a      	lsls	r2, r3, #2
 8016ca2:	4b67      	ldr	r3, [pc, #412]	@ (8016e40 <UART_SetConfig+0x528>)
 8016ca4:	18d3      	adds	r3, r2, r3
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016caa:	f7fd fddb 	bl	8014864 <HAL_RCC_GetPCLK1Freq>
 8016cae:	0003      	movs	r3, r0
 8016cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016cb2:	e021      	b.n	8016cf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016cb4:	f7fd fdec 	bl	8014890 <HAL_RCC_GetPCLK2Freq>
 8016cb8:	0003      	movs	r3, r0
 8016cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016cbc:	e01c      	b.n	8016cf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016cbe:	4b61      	ldr	r3, [pc, #388]	@ (8016e44 <UART_SetConfig+0x52c>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	2210      	movs	r2, #16
 8016cc4:	4013      	ands	r3, r2
 8016cc6:	d002      	beq.n	8016cce <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016cc8:	4b5f      	ldr	r3, [pc, #380]	@ (8016e48 <UART_SetConfig+0x530>)
 8016cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016ccc:	e014      	b.n	8016cf8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8016cce:	4b5f      	ldr	r3, [pc, #380]	@ (8016e4c <UART_SetConfig+0x534>)
 8016cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016cd2:	e011      	b.n	8016cf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016cd4:	f7fd fd16 	bl	8014704 <HAL_RCC_GetSysClockFreq>
 8016cd8:	0003      	movs	r3, r0
 8016cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016cdc:	e00c      	b.n	8016cf8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016cde:	2380      	movs	r3, #128	@ 0x80
 8016ce0:	021b      	lsls	r3, r3, #8
 8016ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016ce4:	e008      	b.n	8016cf8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016cea:	231a      	movs	r3, #26
 8016cec:	2218      	movs	r2, #24
 8016cee:	189b      	adds	r3, r3, r2
 8016cf0:	19db      	adds	r3, r3, r7
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	701a      	strb	r2, [r3, #0]
        break;
 8016cf6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d100      	bne.n	8016d00 <UART_SetConfig+0x3e8>
 8016cfe:	e090      	b.n	8016e22 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8016d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d02:	005a      	lsls	r2, r3, #1
 8016d04:	69fb      	ldr	r3, [r7, #28]
 8016d06:	685b      	ldr	r3, [r3, #4]
 8016d08:	085b      	lsrs	r3, r3, #1
 8016d0a:	18d2      	adds	r2, r2, r3
 8016d0c:	69fb      	ldr	r3, [r7, #28]
 8016d0e:	685b      	ldr	r3, [r3, #4]
 8016d10:	0019      	movs	r1, r3
 8016d12:	0010      	movs	r0, r2
 8016d14:	f7e9 fa46 	bl	80001a4 <__udivsi3>
 8016d18:	0003      	movs	r3, r0
 8016d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d1e:	2b0f      	cmp	r3, #15
 8016d20:	d921      	bls.n	8016d66 <UART_SetConfig+0x44e>
 8016d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d24:	2380      	movs	r3, #128	@ 0x80
 8016d26:	025b      	lsls	r3, r3, #9
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	d21c      	bcs.n	8016d66 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d2e:	b29a      	uxth	r2, r3
 8016d30:	200e      	movs	r0, #14
 8016d32:	2418      	movs	r4, #24
 8016d34:	1903      	adds	r3, r0, r4
 8016d36:	19db      	adds	r3, r3, r7
 8016d38:	210f      	movs	r1, #15
 8016d3a:	438a      	bics	r2, r1
 8016d3c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d40:	085b      	lsrs	r3, r3, #1
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	2207      	movs	r2, #7
 8016d46:	4013      	ands	r3, r2
 8016d48:	b299      	uxth	r1, r3
 8016d4a:	1903      	adds	r3, r0, r4
 8016d4c:	19db      	adds	r3, r3, r7
 8016d4e:	1902      	adds	r2, r0, r4
 8016d50:	19d2      	adds	r2, r2, r7
 8016d52:	8812      	ldrh	r2, [r2, #0]
 8016d54:	430a      	orrs	r2, r1
 8016d56:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8016d58:	69fb      	ldr	r3, [r7, #28]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	1902      	adds	r2, r0, r4
 8016d5e:	19d2      	adds	r2, r2, r7
 8016d60:	8812      	ldrh	r2, [r2, #0]
 8016d62:	60da      	str	r2, [r3, #12]
 8016d64:	e05d      	b.n	8016e22 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8016d66:	231a      	movs	r3, #26
 8016d68:	2218      	movs	r2, #24
 8016d6a:	189b      	adds	r3, r3, r2
 8016d6c:	19db      	adds	r3, r3, r7
 8016d6e:	2201      	movs	r2, #1
 8016d70:	701a      	strb	r2, [r3, #0]
 8016d72:	e056      	b.n	8016e22 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016d74:	231b      	movs	r3, #27
 8016d76:	2218      	movs	r2, #24
 8016d78:	189b      	adds	r3, r3, r2
 8016d7a:	19db      	adds	r3, r3, r7
 8016d7c:	781b      	ldrb	r3, [r3, #0]
 8016d7e:	2b08      	cmp	r3, #8
 8016d80:	d822      	bhi.n	8016dc8 <UART_SetConfig+0x4b0>
 8016d82:	009a      	lsls	r2, r3, #2
 8016d84:	4b32      	ldr	r3, [pc, #200]	@ (8016e50 <UART_SetConfig+0x538>)
 8016d86:	18d3      	adds	r3, r2, r3
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016d8c:	f7fd fd6a 	bl	8014864 <HAL_RCC_GetPCLK1Freq>
 8016d90:	0003      	movs	r3, r0
 8016d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016d94:	e021      	b.n	8016dda <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016d96:	f7fd fd7b 	bl	8014890 <HAL_RCC_GetPCLK2Freq>
 8016d9a:	0003      	movs	r3, r0
 8016d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016d9e:	e01c      	b.n	8016dda <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016da0:	4b28      	ldr	r3, [pc, #160]	@ (8016e44 <UART_SetConfig+0x52c>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	2210      	movs	r2, #16
 8016da6:	4013      	ands	r3, r2
 8016da8:	d002      	beq.n	8016db0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016daa:	4b27      	ldr	r3, [pc, #156]	@ (8016e48 <UART_SetConfig+0x530>)
 8016dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016dae:	e014      	b.n	8016dda <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8016db0:	4b26      	ldr	r3, [pc, #152]	@ (8016e4c <UART_SetConfig+0x534>)
 8016db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016db4:	e011      	b.n	8016dda <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016db6:	f7fd fca5 	bl	8014704 <HAL_RCC_GetSysClockFreq>
 8016dba:	0003      	movs	r3, r0
 8016dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016dbe:	e00c      	b.n	8016dda <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016dc0:	2380      	movs	r3, #128	@ 0x80
 8016dc2:	021b      	lsls	r3, r3, #8
 8016dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016dc6:	e008      	b.n	8016dda <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016dcc:	231a      	movs	r3, #26
 8016dce:	2218      	movs	r2, #24
 8016dd0:	189b      	adds	r3, r3, r2
 8016dd2:	19db      	adds	r3, r3, r7
 8016dd4:	2201      	movs	r2, #1
 8016dd6:	701a      	strb	r2, [r3, #0]
        break;
 8016dd8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8016dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d020      	beq.n	8016e22 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8016de0:	69fb      	ldr	r3, [r7, #28]
 8016de2:	685b      	ldr	r3, [r3, #4]
 8016de4:	085a      	lsrs	r2, r3, #1
 8016de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016de8:	18d2      	adds	r2, r2, r3
 8016dea:	69fb      	ldr	r3, [r7, #28]
 8016dec:	685b      	ldr	r3, [r3, #4]
 8016dee:	0019      	movs	r1, r3
 8016df0:	0010      	movs	r0, r2
 8016df2:	f7e9 f9d7 	bl	80001a4 <__udivsi3>
 8016df6:	0003      	movs	r3, r0
 8016df8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dfc:	2b0f      	cmp	r3, #15
 8016dfe:	d90a      	bls.n	8016e16 <UART_SetConfig+0x4fe>
 8016e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e02:	2380      	movs	r3, #128	@ 0x80
 8016e04:	025b      	lsls	r3, r3, #9
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d205      	bcs.n	8016e16 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e0c:	b29a      	uxth	r2, r3
 8016e0e:	69fb      	ldr	r3, [r7, #28]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	60da      	str	r2, [r3, #12]
 8016e14:	e005      	b.n	8016e22 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8016e16:	231a      	movs	r3, #26
 8016e18:	2218      	movs	r2, #24
 8016e1a:	189b      	adds	r3, r3, r2
 8016e1c:	19db      	adds	r3, r3, r7
 8016e1e:	2201      	movs	r2, #1
 8016e20:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016e22:	69fb      	ldr	r3, [r7, #28]
 8016e24:	2200      	movs	r2, #0
 8016e26:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8016e28:	69fb      	ldr	r3, [r7, #28]
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8016e2e:	231a      	movs	r3, #26
 8016e30:	2218      	movs	r2, #24
 8016e32:	189b      	adds	r3, r3, r2
 8016e34:	19db      	adds	r3, r3, r7
 8016e36:	781b      	ldrb	r3, [r3, #0]
}
 8016e38:	0018      	movs	r0, r3
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	b00e      	add	sp, #56	@ 0x38
 8016e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8016e40:	08023be0 	.word	0x08023be0
 8016e44:	40021000 	.word	0x40021000
 8016e48:	003d0900 	.word	0x003d0900
 8016e4c:	00f42400 	.word	0x00f42400
 8016e50:	08023c04 	.word	0x08023c04

08016e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b082      	sub	sp, #8
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e60:	2201      	movs	r2, #1
 8016e62:	4013      	ands	r3, r2
 8016e64:	d00b      	beq.n	8016e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	685b      	ldr	r3, [r3, #4]
 8016e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8016f98 <UART_AdvFeatureConfig+0x144>)
 8016e6e:	4013      	ands	r3, r2
 8016e70:	0019      	movs	r1, r3
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	430a      	orrs	r2, r1
 8016e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e82:	2202      	movs	r2, #2
 8016e84:	4013      	ands	r3, r2
 8016e86:	d00b      	beq.n	8016ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	685b      	ldr	r3, [r3, #4]
 8016e8e:	4a43      	ldr	r2, [pc, #268]	@ (8016f9c <UART_AdvFeatureConfig+0x148>)
 8016e90:	4013      	ands	r3, r2
 8016e92:	0019      	movs	r1, r3
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	430a      	orrs	r2, r1
 8016e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ea4:	2204      	movs	r2, #4
 8016ea6:	4013      	ands	r3, r2
 8016ea8:	d00b      	beq.n	8016ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	685b      	ldr	r3, [r3, #4]
 8016eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8016fa0 <UART_AdvFeatureConfig+0x14c>)
 8016eb2:	4013      	ands	r3, r2
 8016eb4:	0019      	movs	r1, r3
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	430a      	orrs	r2, r1
 8016ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ec6:	2208      	movs	r2, #8
 8016ec8:	4013      	ands	r3, r2
 8016eca:	d00b      	beq.n	8016ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	685b      	ldr	r3, [r3, #4]
 8016ed2:	4a34      	ldr	r2, [pc, #208]	@ (8016fa4 <UART_AdvFeatureConfig+0x150>)
 8016ed4:	4013      	ands	r3, r2
 8016ed6:	0019      	movs	r1, r3
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	430a      	orrs	r2, r1
 8016ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ee8:	2210      	movs	r2, #16
 8016eea:	4013      	ands	r3, r2
 8016eec:	d00b      	beq.n	8016f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	689b      	ldr	r3, [r3, #8]
 8016ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8016fa8 <UART_AdvFeatureConfig+0x154>)
 8016ef6:	4013      	ands	r3, r2
 8016ef8:	0019      	movs	r1, r3
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	430a      	orrs	r2, r1
 8016f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f0a:	2220      	movs	r2, #32
 8016f0c:	4013      	ands	r3, r2
 8016f0e:	d00b      	beq.n	8016f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	689b      	ldr	r3, [r3, #8]
 8016f16:	4a25      	ldr	r2, [pc, #148]	@ (8016fac <UART_AdvFeatureConfig+0x158>)
 8016f18:	4013      	ands	r3, r2
 8016f1a:	0019      	movs	r1, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	430a      	orrs	r2, r1
 8016f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f2c:	2240      	movs	r2, #64	@ 0x40
 8016f2e:	4013      	ands	r3, r2
 8016f30:	d01d      	beq.n	8016f6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	685b      	ldr	r3, [r3, #4]
 8016f38:	4a1d      	ldr	r2, [pc, #116]	@ (8016fb0 <UART_AdvFeatureConfig+0x15c>)
 8016f3a:	4013      	ands	r3, r2
 8016f3c:	0019      	movs	r1, r3
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	430a      	orrs	r2, r1
 8016f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016f4e:	2380      	movs	r3, #128	@ 0x80
 8016f50:	035b      	lsls	r3, r3, #13
 8016f52:	429a      	cmp	r2, r3
 8016f54:	d10b      	bne.n	8016f6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	685b      	ldr	r3, [r3, #4]
 8016f5c:	4a15      	ldr	r2, [pc, #84]	@ (8016fb4 <UART_AdvFeatureConfig+0x160>)
 8016f5e:	4013      	ands	r3, r2
 8016f60:	0019      	movs	r1, r3
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	430a      	orrs	r2, r1
 8016f6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f72:	2280      	movs	r2, #128	@ 0x80
 8016f74:	4013      	ands	r3, r2
 8016f76:	d00b      	beq.n	8016f90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8016fb8 <UART_AdvFeatureConfig+0x164>)
 8016f80:	4013      	ands	r3, r2
 8016f82:	0019      	movs	r1, r3
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	430a      	orrs	r2, r1
 8016f8e:	605a      	str	r2, [r3, #4]
  }
}
 8016f90:	46c0      	nop			@ (mov r8, r8)
 8016f92:	46bd      	mov	sp, r7
 8016f94:	b002      	add	sp, #8
 8016f96:	bd80      	pop	{r7, pc}
 8016f98:	fffdffff 	.word	0xfffdffff
 8016f9c:	fffeffff 	.word	0xfffeffff
 8016fa0:	fffbffff 	.word	0xfffbffff
 8016fa4:	ffff7fff 	.word	0xffff7fff
 8016fa8:	ffffefff 	.word	0xffffefff
 8016fac:	ffffdfff 	.word	0xffffdfff
 8016fb0:	ffefffff 	.word	0xffefffff
 8016fb4:	ff9fffff 	.word	0xff9fffff
 8016fb8:	fff7ffff 	.word	0xfff7ffff

08016fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b092      	sub	sp, #72	@ 0x48
 8016fc0:	af02      	add	r7, sp, #8
 8016fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	2284      	movs	r2, #132	@ 0x84
 8016fc8:	2100      	movs	r1, #0
 8016fca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016fcc:	f7f6 fd90 	bl	800daf0 <HAL_GetTick>
 8016fd0:	0003      	movs	r3, r0
 8016fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	2208      	movs	r2, #8
 8016fdc:	4013      	ands	r3, r2
 8016fde:	2b08      	cmp	r3, #8
 8016fe0:	d12c      	bne.n	801703c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fe4:	2280      	movs	r2, #128	@ 0x80
 8016fe6:	0391      	lsls	r1, r2, #14
 8016fe8:	6878      	ldr	r0, [r7, #4]
 8016fea:	4a46      	ldr	r2, [pc, #280]	@ (8017104 <UART_CheckIdleState+0x148>)
 8016fec:	9200      	str	r2, [sp, #0]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	f000 f88c 	bl	801710c <UART_WaitOnFlagUntilTimeout>
 8016ff4:	1e03      	subs	r3, r0, #0
 8016ff6:	d021      	beq.n	801703c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8016ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8017000:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017002:	2301      	movs	r3, #1
 8017004:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017008:	f383 8810 	msr	PRIMASK, r3
}
 801700c:	46c0      	nop			@ (mov r8, r8)
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	681a      	ldr	r2, [r3, #0]
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	2180      	movs	r1, #128	@ 0x80
 801701a:	438a      	bics	r2, r1
 801701c:	601a      	str	r2, [r3, #0]
 801701e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017024:	f383 8810 	msr	PRIMASK, r3
}
 8017028:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	2220      	movs	r2, #32
 801702e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	2278      	movs	r2, #120	@ 0x78
 8017034:	2100      	movs	r1, #0
 8017036:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017038:	2303      	movs	r3, #3
 801703a:	e05f      	b.n	80170fc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	2204      	movs	r2, #4
 8017044:	4013      	ands	r3, r2
 8017046:	2b04      	cmp	r3, #4
 8017048:	d146      	bne.n	80170d8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801704a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801704c:	2280      	movs	r2, #128	@ 0x80
 801704e:	03d1      	lsls	r1, r2, #15
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	4a2c      	ldr	r2, [pc, #176]	@ (8017104 <UART_CheckIdleState+0x148>)
 8017054:	9200      	str	r2, [sp, #0]
 8017056:	2200      	movs	r2, #0
 8017058:	f000 f858 	bl	801710c <UART_WaitOnFlagUntilTimeout>
 801705c:	1e03      	subs	r3, r0, #0
 801705e:	d03b      	beq.n	80170d8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017060:	f3ef 8310 	mrs	r3, PRIMASK
 8017064:	60fb      	str	r3, [r7, #12]
  return(result);
 8017066:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017068:	637b      	str	r3, [r7, #52]	@ 0x34
 801706a:	2301      	movs	r3, #1
 801706c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801706e:	693b      	ldr	r3, [r7, #16]
 8017070:	f383 8810 	msr	PRIMASK, r3
}
 8017074:	46c0      	nop			@ (mov r8, r8)
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	681a      	ldr	r2, [r3, #0]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	4921      	ldr	r1, [pc, #132]	@ (8017108 <UART_CheckIdleState+0x14c>)
 8017082:	400a      	ands	r2, r1
 8017084:	601a      	str	r2, [r3, #0]
 8017086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	f383 8810 	msr	PRIMASK, r3
}
 8017090:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017092:	f3ef 8310 	mrs	r3, PRIMASK
 8017096:	61bb      	str	r3, [r7, #24]
  return(result);
 8017098:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801709a:	633b      	str	r3, [r7, #48]	@ 0x30
 801709c:	2301      	movs	r3, #1
 801709e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170a0:	69fb      	ldr	r3, [r7, #28]
 80170a2:	f383 8810 	msr	PRIMASK, r3
}
 80170a6:	46c0      	nop			@ (mov r8, r8)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	689a      	ldr	r2, [r3, #8]
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	2101      	movs	r1, #1
 80170b4:	438a      	bics	r2, r1
 80170b6:	609a      	str	r2, [r3, #8]
 80170b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170bc:	6a3b      	ldr	r3, [r7, #32]
 80170be:	f383 8810 	msr	PRIMASK, r3
}
 80170c2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2280      	movs	r2, #128	@ 0x80
 80170c8:	2120      	movs	r1, #32
 80170ca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	2278      	movs	r2, #120	@ 0x78
 80170d0:	2100      	movs	r1, #0
 80170d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80170d4:	2303      	movs	r3, #3
 80170d6:	e011      	b.n	80170fc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	2220      	movs	r2, #32
 80170dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	2280      	movs	r2, #128	@ 0x80
 80170e2:	2120      	movs	r1, #32
 80170e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2200      	movs	r2, #0
 80170ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2200      	movs	r2, #0
 80170f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	2278      	movs	r2, #120	@ 0x78
 80170f6:	2100      	movs	r1, #0
 80170f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80170fa:	2300      	movs	r3, #0
}
 80170fc:	0018      	movs	r0, r3
 80170fe:	46bd      	mov	sp, r7
 8017100:	b010      	add	sp, #64	@ 0x40
 8017102:	bd80      	pop	{r7, pc}
 8017104:	01ffffff 	.word	0x01ffffff
 8017108:	fffffedf 	.word	0xfffffedf

0801710c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b084      	sub	sp, #16
 8017110:	af00      	add	r7, sp, #0
 8017112:	60f8      	str	r0, [r7, #12]
 8017114:	60b9      	str	r1, [r7, #8]
 8017116:	603b      	str	r3, [r7, #0]
 8017118:	1dfb      	adds	r3, r7, #7
 801711a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801711c:	e04b      	b.n	80171b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801711e:	69bb      	ldr	r3, [r7, #24]
 8017120:	3301      	adds	r3, #1
 8017122:	d048      	beq.n	80171b6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017124:	f7f6 fce4 	bl	800daf0 <HAL_GetTick>
 8017128:	0002      	movs	r2, r0
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	69ba      	ldr	r2, [r7, #24]
 8017130:	429a      	cmp	r2, r3
 8017132:	d302      	bcc.n	801713a <UART_WaitOnFlagUntilTimeout+0x2e>
 8017134:	69bb      	ldr	r3, [r7, #24]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d101      	bne.n	801713e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801713a:	2303      	movs	r3, #3
 801713c:	e04b      	b.n	80171d6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2204      	movs	r2, #4
 8017146:	4013      	ands	r3, r2
 8017148:	d035      	beq.n	80171b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	69db      	ldr	r3, [r3, #28]
 8017150:	2208      	movs	r2, #8
 8017152:	4013      	ands	r3, r2
 8017154:	2b08      	cmp	r3, #8
 8017156:	d111      	bne.n	801717c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	2208      	movs	r2, #8
 801715e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	0018      	movs	r0, r3
 8017164:	f000 f9ca 	bl	80174fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	2284      	movs	r2, #132	@ 0x84
 801716c:	2108      	movs	r1, #8
 801716e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	2278      	movs	r2, #120	@ 0x78
 8017174:	2100      	movs	r1, #0
 8017176:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017178:	2301      	movs	r3, #1
 801717a:	e02c      	b.n	80171d6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	69da      	ldr	r2, [r3, #28]
 8017182:	2380      	movs	r3, #128	@ 0x80
 8017184:	011b      	lsls	r3, r3, #4
 8017186:	401a      	ands	r2, r3
 8017188:	2380      	movs	r3, #128	@ 0x80
 801718a:	011b      	lsls	r3, r3, #4
 801718c:	429a      	cmp	r2, r3
 801718e:	d112      	bne.n	80171b6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	2280      	movs	r2, #128	@ 0x80
 8017196:	0112      	lsls	r2, r2, #4
 8017198:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	0018      	movs	r0, r3
 801719e:	f000 f9ad 	bl	80174fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	2284      	movs	r2, #132	@ 0x84
 80171a6:	2120      	movs	r1, #32
 80171a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	2278      	movs	r2, #120	@ 0x78
 80171ae:	2100      	movs	r1, #0
 80171b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80171b2:	2303      	movs	r3, #3
 80171b4:	e00f      	b.n	80171d6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	69db      	ldr	r3, [r3, #28]
 80171bc:	68ba      	ldr	r2, [r7, #8]
 80171be:	4013      	ands	r3, r2
 80171c0:	68ba      	ldr	r2, [r7, #8]
 80171c2:	1ad3      	subs	r3, r2, r3
 80171c4:	425a      	negs	r2, r3
 80171c6:	4153      	adcs	r3, r2
 80171c8:	b2db      	uxtb	r3, r3
 80171ca:	001a      	movs	r2, r3
 80171cc:	1dfb      	adds	r3, r7, #7
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d0a4      	beq.n	801711e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80171d4:	2300      	movs	r3, #0
}
 80171d6:	0018      	movs	r0, r3
 80171d8:	46bd      	mov	sp, r7
 80171da:	b004      	add	sp, #16
 80171dc:	bd80      	pop	{r7, pc}
	...

080171e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b090      	sub	sp, #64	@ 0x40
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	60b9      	str	r1, [r7, #8]
 80171ea:	1dbb      	adds	r3, r7, #6
 80171ec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	68ba      	ldr	r2, [r7, #8]
 80171f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	1dba      	adds	r2, r7, #6
 80171f8:	2158      	movs	r1, #88	@ 0x58
 80171fa:	8812      	ldrh	r2, [r2, #0]
 80171fc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	1dba      	adds	r2, r7, #6
 8017202:	215a      	movs	r1, #90	@ 0x5a
 8017204:	8812      	ldrh	r2, [r2, #0]
 8017206:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	2200      	movs	r2, #0
 801720c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	689a      	ldr	r2, [r3, #8]
 8017212:	2380      	movs	r3, #128	@ 0x80
 8017214:	015b      	lsls	r3, r3, #5
 8017216:	429a      	cmp	r2, r3
 8017218:	d10d      	bne.n	8017236 <UART_Start_Receive_IT+0x56>
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	691b      	ldr	r3, [r3, #16]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d104      	bne.n	801722c <UART_Start_Receive_IT+0x4c>
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	225c      	movs	r2, #92	@ 0x5c
 8017226:	4950      	ldr	r1, [pc, #320]	@ (8017368 <UART_Start_Receive_IT+0x188>)
 8017228:	5299      	strh	r1, [r3, r2]
 801722a:	e02e      	b.n	801728a <UART_Start_Receive_IT+0xaa>
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	225c      	movs	r2, #92	@ 0x5c
 8017230:	21ff      	movs	r1, #255	@ 0xff
 8017232:	5299      	strh	r1, [r3, r2]
 8017234:	e029      	b.n	801728a <UART_Start_Receive_IT+0xaa>
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	689b      	ldr	r3, [r3, #8]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d10d      	bne.n	801725a <UART_Start_Receive_IT+0x7a>
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	691b      	ldr	r3, [r3, #16]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d104      	bne.n	8017250 <UART_Start_Receive_IT+0x70>
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	225c      	movs	r2, #92	@ 0x5c
 801724a:	21ff      	movs	r1, #255	@ 0xff
 801724c:	5299      	strh	r1, [r3, r2]
 801724e:	e01c      	b.n	801728a <UART_Start_Receive_IT+0xaa>
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	225c      	movs	r2, #92	@ 0x5c
 8017254:	217f      	movs	r1, #127	@ 0x7f
 8017256:	5299      	strh	r1, [r3, r2]
 8017258:	e017      	b.n	801728a <UART_Start_Receive_IT+0xaa>
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	689a      	ldr	r2, [r3, #8]
 801725e:	2380      	movs	r3, #128	@ 0x80
 8017260:	055b      	lsls	r3, r3, #21
 8017262:	429a      	cmp	r2, r3
 8017264:	d10d      	bne.n	8017282 <UART_Start_Receive_IT+0xa2>
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	691b      	ldr	r3, [r3, #16]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d104      	bne.n	8017278 <UART_Start_Receive_IT+0x98>
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	225c      	movs	r2, #92	@ 0x5c
 8017272:	217f      	movs	r1, #127	@ 0x7f
 8017274:	5299      	strh	r1, [r3, r2]
 8017276:	e008      	b.n	801728a <UART_Start_Receive_IT+0xaa>
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	225c      	movs	r2, #92	@ 0x5c
 801727c:	213f      	movs	r1, #63	@ 0x3f
 801727e:	5299      	strh	r1, [r3, r2]
 8017280:	e003      	b.n	801728a <UART_Start_Receive_IT+0xaa>
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	225c      	movs	r2, #92	@ 0x5c
 8017286:	2100      	movs	r1, #0
 8017288:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2284      	movs	r2, #132	@ 0x84
 801728e:	2100      	movs	r1, #0
 8017290:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	2280      	movs	r2, #128	@ 0x80
 8017296:	2122      	movs	r1, #34	@ 0x22
 8017298:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801729a:	f3ef 8310 	mrs	r3, PRIMASK
 801729e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80172a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80172a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80172a4:	2301      	movs	r3, #1
 80172a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172aa:	f383 8810 	msr	PRIMASK, r3
}
 80172ae:	46c0      	nop			@ (mov r8, r8)
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	689a      	ldr	r2, [r3, #8]
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	2101      	movs	r1, #1
 80172bc:	430a      	orrs	r2, r1
 80172be:	609a      	str	r2, [r3, #8]
 80172c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172c6:	f383 8810 	msr	PRIMASK, r3
}
 80172ca:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	689a      	ldr	r2, [r3, #8]
 80172d0:	2380      	movs	r3, #128	@ 0x80
 80172d2:	015b      	lsls	r3, r3, #5
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d107      	bne.n	80172e8 <UART_Start_Receive_IT+0x108>
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	691b      	ldr	r3, [r3, #16]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d103      	bne.n	80172e8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	4a22      	ldr	r2, [pc, #136]	@ (801736c <UART_Start_Receive_IT+0x18c>)
 80172e4:	669a      	str	r2, [r3, #104]	@ 0x68
 80172e6:	e002      	b.n	80172ee <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	4a21      	ldr	r2, [pc, #132]	@ (8017370 <UART_Start_Receive_IT+0x190>)
 80172ec:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	691b      	ldr	r3, [r3, #16]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d019      	beq.n	801732a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172f6:	f3ef 8310 	mrs	r3, PRIMASK
 80172fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80172fc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80172fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8017300:	2301      	movs	r3, #1
 8017302:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017304:	6a3b      	ldr	r3, [r7, #32]
 8017306:	f383 8810 	msr	PRIMASK, r3
}
 801730a:	46c0      	nop			@ (mov r8, r8)
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	681a      	ldr	r2, [r3, #0]
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	2190      	movs	r1, #144	@ 0x90
 8017318:	0049      	lsls	r1, r1, #1
 801731a:	430a      	orrs	r2, r1
 801731c:	601a      	str	r2, [r3, #0]
 801731e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017320:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017324:	f383 8810 	msr	PRIMASK, r3
}
 8017328:	e018      	b.n	801735c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801732a:	f3ef 8310 	mrs	r3, PRIMASK
 801732e:	613b      	str	r3, [r7, #16]
  return(result);
 8017330:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8017332:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017334:	2301      	movs	r3, #1
 8017336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017338:	697b      	ldr	r3, [r7, #20]
 801733a:	f383 8810 	msr	PRIMASK, r3
}
 801733e:	46c0      	nop			@ (mov r8, r8)
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	2120      	movs	r1, #32
 801734c:	430a      	orrs	r2, r1
 801734e:	601a      	str	r2, [r3, #0]
 8017350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017352:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017354:	69bb      	ldr	r3, [r7, #24]
 8017356:	f383 8810 	msr	PRIMASK, r3
}
 801735a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801735c:	2300      	movs	r3, #0
}
 801735e:	0018      	movs	r0, r3
 8017360:	46bd      	mov	sp, r7
 8017362:	b010      	add	sp, #64	@ 0x40
 8017364:	bd80      	pop	{r7, pc}
 8017366:	46c0      	nop			@ (mov r8, r8)
 8017368:	000001ff 	.word	0x000001ff
 801736c:	08017ae1 	.word	0x08017ae1
 8017370:	08017915 	.word	0x08017915

08017374 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b090      	sub	sp, #64	@ 0x40
 8017378:	af00      	add	r7, sp, #0
 801737a:	60f8      	str	r0, [r7, #12]
 801737c:	60b9      	str	r1, [r7, #8]
 801737e:	1dbb      	adds	r3, r7, #6
 8017380:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	68ba      	ldr	r2, [r7, #8]
 8017386:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	1dba      	adds	r2, r7, #6
 801738c:	2158      	movs	r1, #88	@ 0x58
 801738e:	8812      	ldrh	r2, [r2, #0]
 8017390:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	2284      	movs	r2, #132	@ 0x84
 8017396:	2100      	movs	r1, #0
 8017398:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	2280      	movs	r2, #128	@ 0x80
 801739e:	2122      	movs	r1, #34	@ 0x22
 80173a0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d028      	beq.n	80173fc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173ae:	4a3e      	ldr	r2, [pc, #248]	@ (80174a8 <UART_Start_Receive_DMA+0x134>)
 80173b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173b6:	4a3d      	ldr	r2, [pc, #244]	@ (80174ac <UART_Start_Receive_DMA+0x138>)
 80173b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173be:	4a3c      	ldr	r2, [pc, #240]	@ (80174b0 <UART_Start_Receive_DMA+0x13c>)
 80173c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173c6:	2200      	movs	r2, #0
 80173c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	3324      	adds	r3, #36	@ 0x24
 80173d4:	0019      	movs	r1, r3
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80173da:	001a      	movs	r2, r3
 80173dc:	1dbb      	adds	r3, r7, #6
 80173de:	881b      	ldrh	r3, [r3, #0]
 80173e0:	f7f7 f8c2 	bl	800e568 <HAL_DMA_Start_IT>
 80173e4:	1e03      	subs	r3, r0, #0
 80173e6:	d009      	beq.n	80173fc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	2284      	movs	r2, #132	@ 0x84
 80173ec:	2110      	movs	r1, #16
 80173ee:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2280      	movs	r2, #128	@ 0x80
 80173f4:	2120      	movs	r1, #32
 80173f6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80173f8:	2301      	movs	r3, #1
 80173fa:	e050      	b.n	801749e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	691b      	ldr	r3, [r3, #16]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d019      	beq.n	8017438 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017404:	f3ef 8310 	mrs	r3, PRIMASK
 8017408:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801740e:	2301      	movs	r3, #1
 8017410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017414:	f383 8810 	msr	PRIMASK, r3
}
 8017418:	46c0      	nop			@ (mov r8, r8)
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	681a      	ldr	r2, [r3, #0]
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	2180      	movs	r1, #128	@ 0x80
 8017426:	0049      	lsls	r1, r1, #1
 8017428:	430a      	orrs	r2, r1
 801742a:	601a      	str	r2, [r3, #0]
 801742c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801742e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017432:	f383 8810 	msr	PRIMASK, r3
}
 8017436:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017438:	f3ef 8310 	mrs	r3, PRIMASK
 801743c:	613b      	str	r3, [r7, #16]
  return(result);
 801743e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017440:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017442:	2301      	movs	r3, #1
 8017444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	f383 8810 	msr	PRIMASK, r3
}
 801744c:	46c0      	nop			@ (mov r8, r8)
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	689a      	ldr	r2, [r3, #8]
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2101      	movs	r1, #1
 801745a:	430a      	orrs	r2, r1
 801745c:	609a      	str	r2, [r3, #8]
 801745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017460:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017462:	69bb      	ldr	r3, [r7, #24]
 8017464:	f383 8810 	msr	PRIMASK, r3
}
 8017468:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801746a:	f3ef 8310 	mrs	r3, PRIMASK
 801746e:	61fb      	str	r3, [r7, #28]
  return(result);
 8017470:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017472:	637b      	str	r3, [r7, #52]	@ 0x34
 8017474:	2301      	movs	r3, #1
 8017476:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017478:	6a3b      	ldr	r3, [r7, #32]
 801747a:	f383 8810 	msr	PRIMASK, r3
}
 801747e:	46c0      	nop			@ (mov r8, r8)
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	689a      	ldr	r2, [r3, #8]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	2140      	movs	r1, #64	@ 0x40
 801748c:	430a      	orrs	r2, r1
 801748e:	609a      	str	r2, [r3, #8]
 8017490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017492:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017496:	f383 8810 	msr	PRIMASK, r3
}
 801749a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801749c:	2300      	movs	r3, #0
}
 801749e:	0018      	movs	r0, r3
 80174a0:	46bd      	mov	sp, r7
 80174a2:	b010      	add	sp, #64	@ 0x40
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	46c0      	nop			@ (mov r8, r8)
 80174a8:	08017685 	.word	0x08017685
 80174ac:	080177b9 	.word	0x080177b9
 80174b0:	08017801 	.word	0x08017801

080174b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b086      	sub	sp, #24
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174bc:	f3ef 8310 	mrs	r3, PRIMASK
 80174c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80174c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80174c4:	617b      	str	r3, [r7, #20]
 80174c6:	2301      	movs	r3, #1
 80174c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	f383 8810 	msr	PRIMASK, r3
}
 80174d0:	46c0      	nop			@ (mov r8, r8)
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	681a      	ldr	r2, [r3, #0]
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	21c0      	movs	r1, #192	@ 0xc0
 80174de:	438a      	bics	r2, r1
 80174e0:	601a      	str	r2, [r3, #0]
 80174e2:	697b      	ldr	r3, [r7, #20]
 80174e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174e6:	693b      	ldr	r3, [r7, #16]
 80174e8:	f383 8810 	msr	PRIMASK, r3
}
 80174ec:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2220      	movs	r2, #32
 80174f2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80174f4:	46c0      	nop			@ (mov r8, r8)
 80174f6:	46bd      	mov	sp, r7
 80174f8:	b006      	add	sp, #24
 80174fa:	bd80      	pop	{r7, pc}

080174fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b08e      	sub	sp, #56	@ 0x38
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017504:	f3ef 8310 	mrs	r3, PRIMASK
 8017508:	617b      	str	r3, [r7, #20]
  return(result);
 801750a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801750c:	637b      	str	r3, [r7, #52]	@ 0x34
 801750e:	2301      	movs	r3, #1
 8017510:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017512:	69bb      	ldr	r3, [r7, #24]
 8017514:	f383 8810 	msr	PRIMASK, r3
}
 8017518:	46c0      	nop			@ (mov r8, r8)
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	681a      	ldr	r2, [r3, #0]
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	4926      	ldr	r1, [pc, #152]	@ (80175c0 <UART_EndRxTransfer+0xc4>)
 8017526:	400a      	ands	r2, r1
 8017528:	601a      	str	r2, [r3, #0]
 801752a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801752c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801752e:	69fb      	ldr	r3, [r7, #28]
 8017530:	f383 8810 	msr	PRIMASK, r3
}
 8017534:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017536:	f3ef 8310 	mrs	r3, PRIMASK
 801753a:	623b      	str	r3, [r7, #32]
  return(result);
 801753c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801753e:	633b      	str	r3, [r7, #48]	@ 0x30
 8017540:	2301      	movs	r3, #1
 8017542:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017546:	f383 8810 	msr	PRIMASK, r3
}
 801754a:	46c0      	nop			@ (mov r8, r8)
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	689a      	ldr	r2, [r3, #8]
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	2101      	movs	r1, #1
 8017558:	438a      	bics	r2, r1
 801755a:	609a      	str	r2, [r3, #8]
 801755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801755e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017562:	f383 8810 	msr	PRIMASK, r3
}
 8017566:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801756c:	2b01      	cmp	r3, #1
 801756e:	d118      	bne.n	80175a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017570:	f3ef 8310 	mrs	r3, PRIMASK
 8017574:	60bb      	str	r3, [r7, #8]
  return(result);
 8017576:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801757a:	2301      	movs	r3, #1
 801757c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	f383 8810 	msr	PRIMASK, r3
}
 8017584:	46c0      	nop			@ (mov r8, r8)
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	681a      	ldr	r2, [r3, #0]
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	2110      	movs	r1, #16
 8017592:	438a      	bics	r2, r1
 8017594:	601a      	str	r2, [r3, #0]
 8017596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017598:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	f383 8810 	msr	PRIMASK, r3
}
 80175a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	2280      	movs	r2, #128	@ 0x80
 80175a6:	2120      	movs	r1, #32
 80175a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	2200      	movs	r2, #0
 80175ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2200      	movs	r2, #0
 80175b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80175b6:	46c0      	nop			@ (mov r8, r8)
 80175b8:	46bd      	mov	sp, r7
 80175ba:	b00e      	add	sp, #56	@ 0x38
 80175bc:	bd80      	pop	{r7, pc}
 80175be:	46c0      	nop			@ (mov r8, r8)
 80175c0:	fffffedf 	.word	0xfffffedf

080175c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b08c      	sub	sp, #48	@ 0x30
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2220      	movs	r2, #32
 80175da:	4013      	ands	r3, r2
 80175dc:	d135      	bne.n	801764a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80175de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175e0:	2252      	movs	r2, #82	@ 0x52
 80175e2:	2100      	movs	r1, #0
 80175e4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80175e6:	f3ef 8310 	mrs	r3, PRIMASK
 80175ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80175ec:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80175ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80175f0:	2301      	movs	r3, #1
 80175f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	f383 8810 	msr	PRIMASK, r3
}
 80175fa:	46c0      	nop			@ (mov r8, r8)
 80175fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	689a      	ldr	r2, [r3, #8]
 8017602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	2180      	movs	r1, #128	@ 0x80
 8017608:	438a      	bics	r2, r1
 801760a:	609a      	str	r2, [r3, #8]
 801760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801760e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	f383 8810 	msr	PRIMASK, r3
}
 8017616:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017618:	f3ef 8310 	mrs	r3, PRIMASK
 801761c:	61bb      	str	r3, [r7, #24]
  return(result);
 801761e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017620:	627b      	str	r3, [r7, #36]	@ 0x24
 8017622:	2301      	movs	r3, #1
 8017624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017626:	69fb      	ldr	r3, [r7, #28]
 8017628:	f383 8810 	msr	PRIMASK, r3
}
 801762c:	46c0      	nop			@ (mov r8, r8)
 801762e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	681a      	ldr	r2, [r3, #0]
 8017634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	2140      	movs	r1, #64	@ 0x40
 801763a:	430a      	orrs	r2, r1
 801763c:	601a      	str	r2, [r3, #0]
 801763e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017640:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017642:	6a3b      	ldr	r3, [r7, #32]
 8017644:	f383 8810 	msr	PRIMASK, r3
}
 8017648:	e006      	b.n	8017658 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801764a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801764c:	228c      	movs	r2, #140	@ 0x8c
 801764e:	589b      	ldr	r3, [r3, r2]
 8017650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017652:	0010      	movs	r0, r2
 8017654:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017656:	46c0      	nop			@ (mov r8, r8)
 8017658:	46c0      	nop			@ (mov r8, r8)
 801765a:	46bd      	mov	sp, r7
 801765c:	b00c      	add	sp, #48	@ 0x30
 801765e:	bd80      	pop	{r7, pc}

08017660 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b084      	sub	sp, #16
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801766c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	2288      	movs	r2, #136	@ 0x88
 8017672:	589b      	ldr	r3, [r3, r2]
 8017674:	68fa      	ldr	r2, [r7, #12]
 8017676:	0010      	movs	r0, r2
 8017678:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801767a:	46c0      	nop			@ (mov r8, r8)
 801767c:	46bd      	mov	sp, r7
 801767e:	b004      	add	sp, #16
 8017680:	bd80      	pop	{r7, pc}
	...

08017684 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b094      	sub	sp, #80	@ 0x50
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017690:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2220      	movs	r2, #32
 801769a:	4013      	ands	r3, r2
 801769c:	d16f      	bne.n	801777e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801769e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176a0:	225a      	movs	r2, #90	@ 0x5a
 80176a2:	2100      	movs	r1, #0
 80176a4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176a6:	f3ef 8310 	mrs	r3, PRIMASK
 80176aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80176ac:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80176ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80176b0:	2301      	movs	r3, #1
 80176b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176b4:	69fb      	ldr	r3, [r7, #28]
 80176b6:	f383 8810 	msr	PRIMASK, r3
}
 80176ba:	46c0      	nop			@ (mov r8, r8)
 80176bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	681a      	ldr	r2, [r3, #0]
 80176c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	493b      	ldr	r1, [pc, #236]	@ (80177b4 <UART_DMAReceiveCplt+0x130>)
 80176c8:	400a      	ands	r2, r1
 80176ca:	601a      	str	r2, [r3, #0]
 80176cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80176ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176d0:	6a3b      	ldr	r3, [r7, #32]
 80176d2:	f383 8810 	msr	PRIMASK, r3
}
 80176d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176d8:	f3ef 8310 	mrs	r3, PRIMASK
 80176dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80176de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80176e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80176e2:	2301      	movs	r3, #1
 80176e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176e8:	f383 8810 	msr	PRIMASK, r3
}
 80176ec:	46c0      	nop			@ (mov r8, r8)
 80176ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	689a      	ldr	r2, [r3, #8]
 80176f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	2101      	movs	r1, #1
 80176fa:	438a      	bics	r2, r1
 80176fc:	609a      	str	r2, [r3, #8]
 80176fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017704:	f383 8810 	msr	PRIMASK, r3
}
 8017708:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801770a:	f3ef 8310 	mrs	r3, PRIMASK
 801770e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017712:	643b      	str	r3, [r7, #64]	@ 0x40
 8017714:	2301      	movs	r3, #1
 8017716:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801771a:	f383 8810 	msr	PRIMASK, r3
}
 801771e:	46c0      	nop			@ (mov r8, r8)
 8017720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	689a      	ldr	r2, [r3, #8]
 8017726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	2140      	movs	r1, #64	@ 0x40
 801772c:	438a      	bics	r2, r1
 801772e:	609a      	str	r2, [r3, #8]
 8017730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017732:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017736:	f383 8810 	msr	PRIMASK, r3
}
 801773a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801773c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801773e:	2280      	movs	r2, #128	@ 0x80
 8017740:	2120      	movs	r1, #32
 8017742:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017748:	2b01      	cmp	r3, #1
 801774a:	d118      	bne.n	801777e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801774c:	f3ef 8310 	mrs	r3, PRIMASK
 8017750:	60fb      	str	r3, [r7, #12]
  return(result);
 8017752:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017756:	2301      	movs	r3, #1
 8017758:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801775a:	693b      	ldr	r3, [r7, #16]
 801775c:	f383 8810 	msr	PRIMASK, r3
}
 8017760:	46c0      	nop			@ (mov r8, r8)
 8017762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	681a      	ldr	r2, [r3, #0]
 8017768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2110      	movs	r1, #16
 801776e:	438a      	bics	r2, r1
 8017770:	601a      	str	r2, [r3, #0]
 8017772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	f383 8810 	msr	PRIMASK, r3
}
 801777c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801777e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017780:	2200      	movs	r2, #0
 8017782:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017788:	2b01      	cmp	r3, #1
 801778a:	d109      	bne.n	80177a0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801778c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801778e:	22ac      	movs	r2, #172	@ 0xac
 8017790:	589b      	ldr	r3, [r3, r2]
 8017792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017794:	2158      	movs	r1, #88	@ 0x58
 8017796:	5a51      	ldrh	r1, [r2, r1]
 8017798:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801779a:	0010      	movs	r0, r2
 801779c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801779e:	e005      	b.n	80177ac <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80177a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177a2:	2294      	movs	r2, #148	@ 0x94
 80177a4:	589b      	ldr	r3, [r3, r2]
 80177a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80177a8:	0010      	movs	r0, r2
 80177aa:	4798      	blx	r3
}
 80177ac:	46c0      	nop			@ (mov r8, r8)
 80177ae:	46bd      	mov	sp, r7
 80177b0:	b014      	add	sp, #80	@ 0x50
 80177b2:	bd80      	pop	{r7, pc}
 80177b4:	fffffeff 	.word	0xfffffeff

080177b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b084      	sub	sp, #16
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	2201      	movs	r2, #1
 80177ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80177d0:	2b01      	cmp	r3, #1
 80177d2:	d10b      	bne.n	80177ec <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	22ac      	movs	r2, #172	@ 0xac
 80177d8:	589b      	ldr	r3, [r3, r2]
 80177da:	68fa      	ldr	r2, [r7, #12]
 80177dc:	2158      	movs	r1, #88	@ 0x58
 80177de:	5a52      	ldrh	r2, [r2, r1]
 80177e0:	0852      	lsrs	r2, r2, #1
 80177e2:	b291      	uxth	r1, r2
 80177e4:	68fa      	ldr	r2, [r7, #12]
 80177e6:	0010      	movs	r0, r2
 80177e8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80177ea:	e005      	b.n	80177f8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2290      	movs	r2, #144	@ 0x90
 80177f0:	589b      	ldr	r3, [r3, r2]
 80177f2:	68fa      	ldr	r2, [r7, #12]
 80177f4:	0010      	movs	r0, r2
 80177f6:	4798      	blx	r3
}
 80177f8:	46c0      	nop			@ (mov r8, r8)
 80177fa:	46bd      	mov	sp, r7
 80177fc:	b004      	add	sp, #16
 80177fe:	bd80      	pop	{r7, pc}

08017800 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b086      	sub	sp, #24
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801780c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017812:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8017814:	697b      	ldr	r3, [r7, #20]
 8017816:	2280      	movs	r2, #128	@ 0x80
 8017818:	589b      	ldr	r3, [r3, r2]
 801781a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	689b      	ldr	r3, [r3, #8]
 8017822:	2280      	movs	r2, #128	@ 0x80
 8017824:	4013      	ands	r3, r2
 8017826:	2b80      	cmp	r3, #128	@ 0x80
 8017828:	d10a      	bne.n	8017840 <UART_DMAError+0x40>
 801782a:	693b      	ldr	r3, [r7, #16]
 801782c:	2b21      	cmp	r3, #33	@ 0x21
 801782e:	d107      	bne.n	8017840 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8017830:	697b      	ldr	r3, [r7, #20]
 8017832:	2252      	movs	r2, #82	@ 0x52
 8017834:	2100      	movs	r1, #0
 8017836:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	0018      	movs	r0, r3
 801783c:	f7ff fe3a 	bl	80174b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017840:	697b      	ldr	r3, [r7, #20]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	689b      	ldr	r3, [r3, #8]
 8017846:	2240      	movs	r2, #64	@ 0x40
 8017848:	4013      	ands	r3, r2
 801784a:	2b40      	cmp	r3, #64	@ 0x40
 801784c:	d10a      	bne.n	8017864 <UART_DMAError+0x64>
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	2b22      	cmp	r3, #34	@ 0x22
 8017852:	d107      	bne.n	8017864 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8017854:	697b      	ldr	r3, [r7, #20]
 8017856:	225a      	movs	r2, #90	@ 0x5a
 8017858:	2100      	movs	r1, #0
 801785a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801785c:	697b      	ldr	r3, [r7, #20]
 801785e:	0018      	movs	r0, r3
 8017860:	f7ff fe4c 	bl	80174fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017864:	697b      	ldr	r3, [r7, #20]
 8017866:	2284      	movs	r2, #132	@ 0x84
 8017868:	589b      	ldr	r3, [r3, r2]
 801786a:	2210      	movs	r2, #16
 801786c:	431a      	orrs	r2, r3
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	2184      	movs	r1, #132	@ 0x84
 8017872:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017874:	697b      	ldr	r3, [r7, #20]
 8017876:	2298      	movs	r2, #152	@ 0x98
 8017878:	589b      	ldr	r3, [r3, r2]
 801787a:	697a      	ldr	r2, [r7, #20]
 801787c:	0010      	movs	r0, r2
 801787e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017880:	46c0      	nop			@ (mov r8, r8)
 8017882:	46bd      	mov	sp, r7
 8017884:	b006      	add	sp, #24
 8017886:	bd80      	pop	{r7, pc}

08017888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b084      	sub	sp, #16
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	225a      	movs	r2, #90	@ 0x5a
 801789a:	2100      	movs	r1, #0
 801789c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	2252      	movs	r2, #82	@ 0x52
 80178a2:	2100      	movs	r1, #0
 80178a4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	2298      	movs	r2, #152	@ 0x98
 80178aa:	589b      	ldr	r3, [r3, r2]
 80178ac:	68fa      	ldr	r2, [r7, #12]
 80178ae:	0010      	movs	r0, r2
 80178b0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80178b2:	46c0      	nop			@ (mov r8, r8)
 80178b4:	46bd      	mov	sp, r7
 80178b6:	b004      	add	sp, #16
 80178b8:	bd80      	pop	{r7, pc}

080178ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80178ba:	b580      	push	{r7, lr}
 80178bc:	b086      	sub	sp, #24
 80178be:	af00      	add	r7, sp, #0
 80178c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178c2:	f3ef 8310 	mrs	r3, PRIMASK
 80178c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80178c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80178ca:	617b      	str	r3, [r7, #20]
 80178cc:	2301      	movs	r3, #1
 80178ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	f383 8810 	msr	PRIMASK, r3
}
 80178d6:	46c0      	nop			@ (mov r8, r8)
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	681a      	ldr	r2, [r3, #0]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	2140      	movs	r1, #64	@ 0x40
 80178e4:	438a      	bics	r2, r1
 80178e6:	601a      	str	r2, [r3, #0]
 80178e8:	697b      	ldr	r3, [r7, #20]
 80178ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178ec:	693b      	ldr	r3, [r7, #16]
 80178ee:	f383 8810 	msr	PRIMASK, r3
}
 80178f2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	2220      	movs	r2, #32
 80178f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2200      	movs	r2, #0
 80178fe:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	228c      	movs	r2, #140	@ 0x8c
 8017904:	589b      	ldr	r3, [r3, r2]
 8017906:	687a      	ldr	r2, [r7, #4]
 8017908:	0010      	movs	r0, r2
 801790a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801790c:	46c0      	nop			@ (mov r8, r8)
 801790e:	46bd      	mov	sp, r7
 8017910:	b006      	add	sp, #24
 8017912:	bd80      	pop	{r7, pc}

08017914 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b094      	sub	sp, #80	@ 0x50
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801791c:	204e      	movs	r0, #78	@ 0x4e
 801791e:	183b      	adds	r3, r7, r0
 8017920:	687a      	ldr	r2, [r7, #4]
 8017922:	215c      	movs	r1, #92	@ 0x5c
 8017924:	5a52      	ldrh	r2, [r2, r1]
 8017926:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	2280      	movs	r2, #128	@ 0x80
 801792c:	589b      	ldr	r3, [r3, r2]
 801792e:	2b22      	cmp	r3, #34	@ 0x22
 8017930:	d000      	beq.n	8017934 <UART_RxISR_8BIT+0x20>
 8017932:	e0c2      	b.n	8017aba <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801793a:	214c      	movs	r1, #76	@ 0x4c
 801793c:	187b      	adds	r3, r7, r1
 801793e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017940:	187b      	adds	r3, r7, r1
 8017942:	881b      	ldrh	r3, [r3, #0]
 8017944:	b2da      	uxtb	r2, r3
 8017946:	183b      	adds	r3, r7, r0
 8017948:	881b      	ldrh	r3, [r3, #0]
 801794a:	b2d9      	uxtb	r1, r3
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017950:	400a      	ands	r2, r1
 8017952:	b2d2      	uxtb	r2, r2
 8017954:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801795a:	1c5a      	adds	r2, r3, #1
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	225a      	movs	r2, #90	@ 0x5a
 8017964:	5a9b      	ldrh	r3, [r3, r2]
 8017966:	b29b      	uxth	r3, r3
 8017968:	3b01      	subs	r3, #1
 801796a:	b299      	uxth	r1, r3
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	225a      	movs	r2, #90	@ 0x5a
 8017970:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	225a      	movs	r2, #90	@ 0x5a
 8017976:	5a9b      	ldrh	r3, [r3, r2]
 8017978:	b29b      	uxth	r3, r3
 801797a:	2b00      	cmp	r3, #0
 801797c:	d000      	beq.n	8017980 <UART_RxISR_8BIT+0x6c>
 801797e:	e0a4      	b.n	8017aca <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017980:	f3ef 8310 	mrs	r3, PRIMASK
 8017984:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017988:	64bb      	str	r3, [r7, #72]	@ 0x48
 801798a:	2301      	movs	r3, #1
 801798c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801798e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017990:	f383 8810 	msr	PRIMASK, r3
}
 8017994:	46c0      	nop			@ (mov r8, r8)
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	681a      	ldr	r2, [r3, #0]
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	494c      	ldr	r1, [pc, #304]	@ (8017ad4 <UART_RxISR_8BIT+0x1c0>)
 80179a2:	400a      	ands	r2, r1
 80179a4:	601a      	str	r2, [r3, #0]
 80179a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80179a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179ac:	f383 8810 	msr	PRIMASK, r3
}
 80179b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179b2:	f3ef 8310 	mrs	r3, PRIMASK
 80179b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80179b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80179ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80179bc:	2301      	movs	r3, #1
 80179be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80179c2:	f383 8810 	msr	PRIMASK, r3
}
 80179c6:	46c0      	nop			@ (mov r8, r8)
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	689a      	ldr	r2, [r3, #8]
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	2101      	movs	r1, #1
 80179d4:	438a      	bics	r2, r1
 80179d6:	609a      	str	r2, [r3, #8]
 80179d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80179da:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179de:	f383 8810 	msr	PRIMASK, r3
}
 80179e2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2280      	movs	r2, #128	@ 0x80
 80179e8:	2120      	movs	r1, #32
 80179ea:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	2200      	movs	r2, #0
 80179f0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2200      	movs	r2, #0
 80179f6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	4a36      	ldr	r2, [pc, #216]	@ (8017ad8 <UART_RxISR_8BIT+0x1c4>)
 80179fe:	4293      	cmp	r3, r2
 8017a00:	d01f      	beq.n	8017a42 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	685a      	ldr	r2, [r3, #4]
 8017a08:	2380      	movs	r3, #128	@ 0x80
 8017a0a:	041b      	lsls	r3, r3, #16
 8017a0c:	4013      	ands	r3, r2
 8017a0e:	d018      	beq.n	8017a42 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a10:	f3ef 8310 	mrs	r3, PRIMASK
 8017a14:	61bb      	str	r3, [r7, #24]
  return(result);
 8017a16:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a1e:	69fb      	ldr	r3, [r7, #28]
 8017a20:	f383 8810 	msr	PRIMASK, r3
}
 8017a24:	46c0      	nop			@ (mov r8, r8)
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	681a      	ldr	r2, [r3, #0]
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	492a      	ldr	r1, [pc, #168]	@ (8017adc <UART_RxISR_8BIT+0x1c8>)
 8017a32:	400a      	ands	r2, r1
 8017a34:	601a      	str	r2, [r3, #0]
 8017a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017a38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a3a:	6a3b      	ldr	r3, [r7, #32]
 8017a3c:	f383 8810 	msr	PRIMASK, r3
}
 8017a40:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017a46:	2b01      	cmp	r3, #1
 8017a48:	d130      	bne.n	8017aac <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a50:	f3ef 8310 	mrs	r3, PRIMASK
 8017a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8017a56:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a5a:	2301      	movs	r3, #1
 8017a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a5e:	693b      	ldr	r3, [r7, #16]
 8017a60:	f383 8810 	msr	PRIMASK, r3
}
 8017a64:	46c0      	nop			@ (mov r8, r8)
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	681a      	ldr	r2, [r3, #0]
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2110      	movs	r1, #16
 8017a72:	438a      	bics	r2, r1
 8017a74:	601a      	str	r2, [r3, #0]
 8017a76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a7a:	697b      	ldr	r3, [r7, #20]
 8017a7c:	f383 8810 	msr	PRIMASK, r3
}
 8017a80:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	69db      	ldr	r3, [r3, #28]
 8017a88:	2210      	movs	r2, #16
 8017a8a:	4013      	ands	r3, r2
 8017a8c:	2b10      	cmp	r3, #16
 8017a8e:	d103      	bne.n	8017a98 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	2210      	movs	r2, #16
 8017a96:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	22ac      	movs	r2, #172	@ 0xac
 8017a9c:	589b      	ldr	r3, [r3, r2]
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	2158      	movs	r1, #88	@ 0x58
 8017aa2:	5a51      	ldrh	r1, [r2, r1]
 8017aa4:	687a      	ldr	r2, [r7, #4]
 8017aa6:	0010      	movs	r0, r2
 8017aa8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017aaa:	e00e      	b.n	8017aca <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2294      	movs	r2, #148	@ 0x94
 8017ab0:	589b      	ldr	r3, [r3, r2]
 8017ab2:	687a      	ldr	r2, [r7, #4]
 8017ab4:	0010      	movs	r0, r2
 8017ab6:	4798      	blx	r3
}
 8017ab8:	e007      	b.n	8017aca <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	699a      	ldr	r2, [r3, #24]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	2108      	movs	r1, #8
 8017ac6:	430a      	orrs	r2, r1
 8017ac8:	619a      	str	r2, [r3, #24]
}
 8017aca:	46c0      	nop			@ (mov r8, r8)
 8017acc:	46bd      	mov	sp, r7
 8017ace:	b014      	add	sp, #80	@ 0x50
 8017ad0:	bd80      	pop	{r7, pc}
 8017ad2:	46c0      	nop			@ (mov r8, r8)
 8017ad4:	fffffedf 	.word	0xfffffedf
 8017ad8:	40004800 	.word	0x40004800
 8017adc:	fbffffff 	.word	0xfbffffff

08017ae0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b094      	sub	sp, #80	@ 0x50
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017ae8:	204e      	movs	r0, #78	@ 0x4e
 8017aea:	183b      	adds	r3, r7, r0
 8017aec:	687a      	ldr	r2, [r7, #4]
 8017aee:	215c      	movs	r1, #92	@ 0x5c
 8017af0:	5a52      	ldrh	r2, [r2, r1]
 8017af2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2280      	movs	r2, #128	@ 0x80
 8017af8:	589b      	ldr	r3, [r3, r2]
 8017afa:	2b22      	cmp	r3, #34	@ 0x22
 8017afc:	d000      	beq.n	8017b00 <UART_RxISR_16BIT+0x20>
 8017afe:	e0c2      	b.n	8017c86 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017b06:	214c      	movs	r1, #76	@ 0x4c
 8017b08:	187b      	adds	r3, r7, r1
 8017b0a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017b10:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8017b12:	187b      	adds	r3, r7, r1
 8017b14:	183a      	adds	r2, r7, r0
 8017b16:	881b      	ldrh	r3, [r3, #0]
 8017b18:	8812      	ldrh	r2, [r2, #0]
 8017b1a:	4013      	ands	r3, r2
 8017b1c:	b29a      	uxth	r2, r3
 8017b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017b20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017b26:	1c9a      	adds	r2, r3, #2
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	225a      	movs	r2, #90	@ 0x5a
 8017b30:	5a9b      	ldrh	r3, [r3, r2]
 8017b32:	b29b      	uxth	r3, r3
 8017b34:	3b01      	subs	r3, #1
 8017b36:	b299      	uxth	r1, r3
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	225a      	movs	r2, #90	@ 0x5a
 8017b3c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	225a      	movs	r2, #90	@ 0x5a
 8017b42:	5a9b      	ldrh	r3, [r3, r2]
 8017b44:	b29b      	uxth	r3, r3
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d000      	beq.n	8017b4c <UART_RxISR_16BIT+0x6c>
 8017b4a:	e0a4      	b.n	8017c96 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8017b50:	623b      	str	r3, [r7, #32]
  return(result);
 8017b52:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8017b56:	2301      	movs	r3, #1
 8017b58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b5c:	f383 8810 	msr	PRIMASK, r3
}
 8017b60:	46c0      	nop			@ (mov r8, r8)
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	681a      	ldr	r2, [r3, #0]
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	494c      	ldr	r1, [pc, #304]	@ (8017ca0 <UART_RxISR_16BIT+0x1c0>)
 8017b6e:	400a      	ands	r2, r1
 8017b70:	601a      	str	r2, [r3, #0]
 8017b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b78:	f383 8810 	msr	PRIMASK, r3
}
 8017b7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8017b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8017b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b86:	643b      	str	r3, [r7, #64]	@ 0x40
 8017b88:	2301      	movs	r3, #1
 8017b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b8e:	f383 8810 	msr	PRIMASK, r3
}
 8017b92:	46c0      	nop			@ (mov r8, r8)
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	689a      	ldr	r2, [r3, #8]
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	2101      	movs	r1, #1
 8017ba0:	438a      	bics	r2, r1
 8017ba2:	609a      	str	r2, [r3, #8]
 8017ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017baa:	f383 8810 	msr	PRIMASK, r3
}
 8017bae:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2280      	movs	r2, #128	@ 0x80
 8017bb4:	2120      	movs	r1, #32
 8017bb6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	4a36      	ldr	r2, [pc, #216]	@ (8017ca4 <UART_RxISR_16BIT+0x1c4>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d01f      	beq.n	8017c0e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	685a      	ldr	r2, [r3, #4]
 8017bd4:	2380      	movs	r3, #128	@ 0x80
 8017bd6:	041b      	lsls	r3, r3, #16
 8017bd8:	4013      	ands	r3, r2
 8017bda:	d018      	beq.n	8017c0e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8017be0:	617b      	str	r3, [r7, #20]
  return(result);
 8017be2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017be6:	2301      	movs	r3, #1
 8017be8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bea:	69bb      	ldr	r3, [r7, #24]
 8017bec:	f383 8810 	msr	PRIMASK, r3
}
 8017bf0:	46c0      	nop			@ (mov r8, r8)
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	681a      	ldr	r2, [r3, #0]
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	681b      	ldr	r3, [r3, #0]
 8017bfc:	492a      	ldr	r1, [pc, #168]	@ (8017ca8 <UART_RxISR_16BIT+0x1c8>)
 8017bfe:	400a      	ands	r2, r1
 8017c00:	601a      	str	r2, [r3, #0]
 8017c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c06:	69fb      	ldr	r3, [r7, #28]
 8017c08:	f383 8810 	msr	PRIMASK, r3
}
 8017c0c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	d130      	bne.n	8017c78 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	2200      	movs	r2, #0
 8017c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8017c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8017c22:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017c24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017c26:	2301      	movs	r3, #1
 8017c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	f383 8810 	msr	PRIMASK, r3
}
 8017c30:	46c0      	nop			@ (mov r8, r8)
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	681a      	ldr	r2, [r3, #0]
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2110      	movs	r1, #16
 8017c3e:	438a      	bics	r2, r1
 8017c40:	601a      	str	r2, [r3, #0]
 8017c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c46:	693b      	ldr	r3, [r7, #16]
 8017c48:	f383 8810 	msr	PRIMASK, r3
}
 8017c4c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	69db      	ldr	r3, [r3, #28]
 8017c54:	2210      	movs	r2, #16
 8017c56:	4013      	ands	r3, r2
 8017c58:	2b10      	cmp	r3, #16
 8017c5a:	d103      	bne.n	8017c64 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	2210      	movs	r2, #16
 8017c62:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	22ac      	movs	r2, #172	@ 0xac
 8017c68:	589b      	ldr	r3, [r3, r2]
 8017c6a:	687a      	ldr	r2, [r7, #4]
 8017c6c:	2158      	movs	r1, #88	@ 0x58
 8017c6e:	5a51      	ldrh	r1, [r2, r1]
 8017c70:	687a      	ldr	r2, [r7, #4]
 8017c72:	0010      	movs	r0, r2
 8017c74:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017c76:	e00e      	b.n	8017c96 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2294      	movs	r2, #148	@ 0x94
 8017c7c:	589b      	ldr	r3, [r3, r2]
 8017c7e:	687a      	ldr	r2, [r7, #4]
 8017c80:	0010      	movs	r0, r2
 8017c82:	4798      	blx	r3
}
 8017c84:	e007      	b.n	8017c96 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	699a      	ldr	r2, [r3, #24]
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	2108      	movs	r1, #8
 8017c92:	430a      	orrs	r2, r1
 8017c94:	619a      	str	r2, [r3, #24]
}
 8017c96:	46c0      	nop			@ (mov r8, r8)
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	b014      	add	sp, #80	@ 0x50
 8017c9c:	bd80      	pop	{r7, pc}
 8017c9e:	46c0      	nop			@ (mov r8, r8)
 8017ca0:	fffffedf 	.word	0xfffffedf
 8017ca4:	40004800 	.word	0x40004800
 8017ca8:	fbffffff 	.word	0xfbffffff

08017cac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b082      	sub	sp, #8
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017cb4:	46c0      	nop			@ (mov r8, r8)
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	b002      	add	sp, #8
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2244      	movs	r2, #68	@ 0x44
 8017cc8:	2100      	movs	r1, #0
 8017cca:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8017ccc:	4b05      	ldr	r3, [pc, #20]	@ (8017ce4 <USB_EnableGlobalInt+0x28>)
 8017cce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	b299      	uxth	r1, r3
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	2240      	movs	r2, #64	@ 0x40
 8017cd8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017cda:	2300      	movs	r3, #0
}
 8017cdc:	0018      	movs	r0, r3
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	b004      	add	sp, #16
 8017ce2:	bd80      	pop	{r7, pc}
 8017ce4:	0000bf80 	.word	0x0000bf80

08017ce8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b084      	sub	sp, #16
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8017cf0:	4b09      	ldr	r3, [pc, #36]	@ (8017d18 <USB_DisableGlobalInt+0x30>)
 8017cf2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2240      	movs	r2, #64	@ 0x40
 8017cf8:	5a9b      	ldrh	r3, [r3, r2]
 8017cfa:	b29b      	uxth	r3, r3
 8017cfc:	68fa      	ldr	r2, [r7, #12]
 8017cfe:	b292      	uxth	r2, r2
 8017d00:	43d2      	mvns	r2, r2
 8017d02:	b292      	uxth	r2, r2
 8017d04:	4013      	ands	r3, r2
 8017d06:	b299      	uxth	r1, r3
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2240      	movs	r2, #64	@ 0x40
 8017d0c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017d0e:	2300      	movs	r3, #0
}
 8017d10:	0018      	movs	r0, r3
 8017d12:	46bd      	mov	sp, r7
 8017d14:	b004      	add	sp, #16
 8017d16:	bd80      	pop	{r7, pc}
 8017d18:	0000bf80 	.word	0x0000bf80

08017d1c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8017d1c:	b084      	sub	sp, #16
 8017d1e:	b590      	push	{r4, r7, lr}
 8017d20:	b083      	sub	sp, #12
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	6078      	str	r0, [r7, #4]
 8017d26:	2004      	movs	r0, #4
 8017d28:	2410      	movs	r4, #16
 8017d2a:	1900      	adds	r0, r0, r4
 8017d2c:	2408      	movs	r4, #8
 8017d2e:	46a4      	mov	ip, r4
 8017d30:	44bc      	add	ip, r7
 8017d32:	4460      	add	r0, ip
 8017d34:	6001      	str	r1, [r0, #0]
 8017d36:	6042      	str	r2, [r0, #4]
 8017d38:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	2240      	movs	r2, #64	@ 0x40
 8017d3e:	2101      	movs	r1, #1
 8017d40:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	2240      	movs	r2, #64	@ 0x40
 8017d46:	2100      	movs	r1, #0
 8017d48:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	2244      	movs	r2, #68	@ 0x44
 8017d4e:	2100      	movs	r1, #0
 8017d50:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	2250      	movs	r2, #80	@ 0x50
 8017d56:	2100      	movs	r1, #0
 8017d58:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017d5a:	2300      	movs	r3, #0
}
 8017d5c:	0018      	movs	r0, r3
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	b003      	add	sp, #12
 8017d62:	bc90      	pop	{r4, r7}
 8017d64:	bc08      	pop	{r3}
 8017d66:	b004      	add	sp, #16
 8017d68:	4718      	bx	r3
	...

08017d6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b09c      	sub	sp, #112	@ 0x70
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
 8017d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8017d76:	236f      	movs	r3, #111	@ 0x6f
 8017d78:	18fb      	adds	r3, r7, r3
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8017d7e:	687a      	ldr	r2, [r7, #4]
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	781b      	ldrb	r3, [r3, #0]
 8017d84:	009b      	lsls	r3, r3, #2
 8017d86:	18d3      	adds	r3, r2, r3
 8017d88:	881b      	ldrh	r3, [r3, #0]
 8017d8a:	b29a      	uxth	r2, r3
 8017d8c:	236c      	movs	r3, #108	@ 0x6c
 8017d8e:	18fb      	adds	r3, r7, r3
 8017d90:	49a3      	ldr	r1, [pc, #652]	@ (8018020 <USB_ActivateEndpoint+0x2b4>)
 8017d92:	400a      	ands	r2, r1
 8017d94:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	78db      	ldrb	r3, [r3, #3]
 8017d9a:	2b03      	cmp	r3, #3
 8017d9c:	d017      	beq.n	8017dce <USB_ActivateEndpoint+0x62>
 8017d9e:	dc28      	bgt.n	8017df2 <USB_ActivateEndpoint+0x86>
 8017da0:	2b02      	cmp	r3, #2
 8017da2:	d00e      	beq.n	8017dc2 <USB_ActivateEndpoint+0x56>
 8017da4:	dc25      	bgt.n	8017df2 <USB_ActivateEndpoint+0x86>
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d002      	beq.n	8017db0 <USB_ActivateEndpoint+0x44>
 8017daa:	2b01      	cmp	r3, #1
 8017dac:	d018      	beq.n	8017de0 <USB_ActivateEndpoint+0x74>
 8017dae:	e020      	b.n	8017df2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8017db0:	226c      	movs	r2, #108	@ 0x6c
 8017db2:	18bb      	adds	r3, r7, r2
 8017db4:	18ba      	adds	r2, r7, r2
 8017db6:	8812      	ldrh	r2, [r2, #0]
 8017db8:	2180      	movs	r1, #128	@ 0x80
 8017dba:	0089      	lsls	r1, r1, #2
 8017dbc:	430a      	orrs	r2, r1
 8017dbe:	801a      	strh	r2, [r3, #0]
      break;
 8017dc0:	e01c      	b.n	8017dfc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8017dc2:	226c      	movs	r2, #108	@ 0x6c
 8017dc4:	18bb      	adds	r3, r7, r2
 8017dc6:	18ba      	adds	r2, r7, r2
 8017dc8:	8812      	ldrh	r2, [r2, #0]
 8017dca:	801a      	strh	r2, [r3, #0]
      break;
 8017dcc:	e016      	b.n	8017dfc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8017dce:	226c      	movs	r2, #108	@ 0x6c
 8017dd0:	18bb      	adds	r3, r7, r2
 8017dd2:	18ba      	adds	r2, r7, r2
 8017dd4:	8812      	ldrh	r2, [r2, #0]
 8017dd6:	21c0      	movs	r1, #192	@ 0xc0
 8017dd8:	00c9      	lsls	r1, r1, #3
 8017dda:	430a      	orrs	r2, r1
 8017ddc:	801a      	strh	r2, [r3, #0]
      break;
 8017dde:	e00d      	b.n	8017dfc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8017de0:	226c      	movs	r2, #108	@ 0x6c
 8017de2:	18bb      	adds	r3, r7, r2
 8017de4:	18ba      	adds	r2, r7, r2
 8017de6:	8812      	ldrh	r2, [r2, #0]
 8017de8:	2180      	movs	r1, #128	@ 0x80
 8017dea:	00c9      	lsls	r1, r1, #3
 8017dec:	430a      	orrs	r2, r1
 8017dee:	801a      	strh	r2, [r3, #0]
      break;
 8017df0:	e004      	b.n	8017dfc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8017df2:	236f      	movs	r3, #111	@ 0x6f
 8017df4:	18fb      	adds	r3, r7, r3
 8017df6:	2201      	movs	r2, #1
 8017df8:	701a      	strb	r2, [r3, #0]
      break;
 8017dfa:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8017dfc:	687a      	ldr	r2, [r7, #4]
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	781b      	ldrb	r3, [r3, #0]
 8017e02:	009b      	lsls	r3, r3, #2
 8017e04:	18d3      	adds	r3, r2, r3
 8017e06:	226c      	movs	r2, #108	@ 0x6c
 8017e08:	18ba      	adds	r2, r7, r2
 8017e0a:	8812      	ldrh	r2, [r2, #0]
 8017e0c:	4985      	ldr	r1, [pc, #532]	@ (8018024 <USB_ActivateEndpoint+0x2b8>)
 8017e0e:	430a      	orrs	r2, r1
 8017e10:	b292      	uxth	r2, r2
 8017e12:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8017e14:	687a      	ldr	r2, [r7, #4]
 8017e16:	683b      	ldr	r3, [r7, #0]
 8017e18:	781b      	ldrb	r3, [r3, #0]
 8017e1a:	009b      	lsls	r3, r3, #2
 8017e1c:	18d3      	adds	r3, r2, r3
 8017e1e:	881b      	ldrh	r3, [r3, #0]
 8017e20:	b29b      	uxth	r3, r3
 8017e22:	b21b      	sxth	r3, r3
 8017e24:	4a80      	ldr	r2, [pc, #512]	@ (8018028 <USB_ActivateEndpoint+0x2bc>)
 8017e26:	4013      	ands	r3, r2
 8017e28:	b21a      	sxth	r2, r3
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	b21b      	sxth	r3, r3
 8017e30:	4313      	orrs	r3, r2
 8017e32:	b21a      	sxth	r2, r3
 8017e34:	2166      	movs	r1, #102	@ 0x66
 8017e36:	187b      	adds	r3, r7, r1
 8017e38:	801a      	strh	r2, [r3, #0]
 8017e3a:	687a      	ldr	r2, [r7, #4]
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	781b      	ldrb	r3, [r3, #0]
 8017e40:	009b      	lsls	r3, r3, #2
 8017e42:	18d3      	adds	r3, r2, r3
 8017e44:	187a      	adds	r2, r7, r1
 8017e46:	8812      	ldrh	r2, [r2, #0]
 8017e48:	4976      	ldr	r1, [pc, #472]	@ (8018024 <USB_ActivateEndpoint+0x2b8>)
 8017e4a:	430a      	orrs	r2, r1
 8017e4c:	b292      	uxth	r2, r2
 8017e4e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	7b1b      	ldrb	r3, [r3, #12]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d000      	beq.n	8017e5a <USB_ActivateEndpoint+0xee>
 8017e58:	e178      	b.n	801814c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8017e5a:	683b      	ldr	r3, [r7, #0]
 8017e5c:	785b      	ldrb	r3, [r3, #1]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d100      	bne.n	8017e64 <USB_ActivateEndpoint+0xf8>
 8017e62:	e07a      	b.n	8017f5a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	61bb      	str	r3, [r7, #24]
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	2250      	movs	r2, #80	@ 0x50
 8017e6c:	5a9b      	ldrh	r3, [r3, r2]
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	001a      	movs	r2, r3
 8017e72:	69bb      	ldr	r3, [r7, #24]
 8017e74:	189b      	adds	r3, r3, r2
 8017e76:	61bb      	str	r3, [r7, #24]
 8017e78:	683b      	ldr	r3, [r7, #0]
 8017e7a:	781b      	ldrb	r3, [r3, #0]
 8017e7c:	00da      	lsls	r2, r3, #3
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	18d3      	adds	r3, r2, r3
 8017e82:	2280      	movs	r2, #128	@ 0x80
 8017e84:	00d2      	lsls	r2, r2, #3
 8017e86:	4694      	mov	ip, r2
 8017e88:	4463      	add	r3, ip
 8017e8a:	617b      	str	r3, [r7, #20]
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	88db      	ldrh	r3, [r3, #6]
 8017e90:	085b      	lsrs	r3, r3, #1
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	18db      	adds	r3, r3, r3
 8017e96:	b29a      	uxth	r2, r3
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017e9c:	687a      	ldr	r2, [r7, #4]
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	18d2      	adds	r2, r2, r3
 8017ea6:	2112      	movs	r1, #18
 8017ea8:	187b      	adds	r3, r7, r1
 8017eaa:	8812      	ldrh	r2, [r2, #0]
 8017eac:	801a      	strh	r2, [r3, #0]
 8017eae:	187b      	adds	r3, r7, r1
 8017eb0:	881b      	ldrh	r3, [r3, #0]
 8017eb2:	2240      	movs	r2, #64	@ 0x40
 8017eb4:	4013      	ands	r3, r2
 8017eb6:	d016      	beq.n	8017ee6 <USB_ActivateEndpoint+0x17a>
 8017eb8:	687a      	ldr	r2, [r7, #4]
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	781b      	ldrb	r3, [r3, #0]
 8017ebe:	009b      	lsls	r3, r3, #2
 8017ec0:	18d3      	adds	r3, r2, r3
 8017ec2:	881b      	ldrh	r3, [r3, #0]
 8017ec4:	b29a      	uxth	r2, r3
 8017ec6:	2010      	movs	r0, #16
 8017ec8:	183b      	adds	r3, r7, r0
 8017eca:	4957      	ldr	r1, [pc, #348]	@ (8018028 <USB_ActivateEndpoint+0x2bc>)
 8017ecc:	400a      	ands	r2, r1
 8017ece:	801a      	strh	r2, [r3, #0]
 8017ed0:	687a      	ldr	r2, [r7, #4]
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	781b      	ldrb	r3, [r3, #0]
 8017ed6:	009b      	lsls	r3, r3, #2
 8017ed8:	18d3      	adds	r3, r2, r3
 8017eda:	183a      	adds	r2, r7, r0
 8017edc:	8812      	ldrh	r2, [r2, #0]
 8017ede:	4953      	ldr	r1, [pc, #332]	@ (801802c <USB_ActivateEndpoint+0x2c0>)
 8017ee0:	430a      	orrs	r2, r1
 8017ee2:	b292      	uxth	r2, r2
 8017ee4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017ee6:	683b      	ldr	r3, [r7, #0]
 8017ee8:	78db      	ldrb	r3, [r3, #3]
 8017eea:	2b01      	cmp	r3, #1
 8017eec:	d01d      	beq.n	8017f2a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8017eee:	687a      	ldr	r2, [r7, #4]
 8017ef0:	683b      	ldr	r3, [r7, #0]
 8017ef2:	781b      	ldrb	r3, [r3, #0]
 8017ef4:	009b      	lsls	r3, r3, #2
 8017ef6:	18d3      	adds	r3, r2, r3
 8017ef8:	881b      	ldrh	r3, [r3, #0]
 8017efa:	b29a      	uxth	r2, r3
 8017efc:	200c      	movs	r0, #12
 8017efe:	183b      	adds	r3, r7, r0
 8017f00:	494b      	ldr	r1, [pc, #300]	@ (8018030 <USB_ActivateEndpoint+0x2c4>)
 8017f02:	400a      	ands	r2, r1
 8017f04:	801a      	strh	r2, [r3, #0]
 8017f06:	183b      	adds	r3, r7, r0
 8017f08:	183a      	adds	r2, r7, r0
 8017f0a:	8812      	ldrh	r2, [r2, #0]
 8017f0c:	2120      	movs	r1, #32
 8017f0e:	404a      	eors	r2, r1
 8017f10:	801a      	strh	r2, [r3, #0]
 8017f12:	687a      	ldr	r2, [r7, #4]
 8017f14:	683b      	ldr	r3, [r7, #0]
 8017f16:	781b      	ldrb	r3, [r3, #0]
 8017f18:	009b      	lsls	r3, r3, #2
 8017f1a:	18d3      	adds	r3, r2, r3
 8017f1c:	183a      	adds	r2, r7, r0
 8017f1e:	8812      	ldrh	r2, [r2, #0]
 8017f20:	4940      	ldr	r1, [pc, #256]	@ (8018024 <USB_ActivateEndpoint+0x2b8>)
 8017f22:	430a      	orrs	r2, r1
 8017f24:	b292      	uxth	r2, r2
 8017f26:	801a      	strh	r2, [r3, #0]
 8017f28:	e2b4      	b.n	8018494 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017f2a:	687a      	ldr	r2, [r7, #4]
 8017f2c:	683b      	ldr	r3, [r7, #0]
 8017f2e:	781b      	ldrb	r3, [r3, #0]
 8017f30:	009b      	lsls	r3, r3, #2
 8017f32:	18d3      	adds	r3, r2, r3
 8017f34:	881b      	ldrh	r3, [r3, #0]
 8017f36:	b29a      	uxth	r2, r3
 8017f38:	200e      	movs	r0, #14
 8017f3a:	183b      	adds	r3, r7, r0
 8017f3c:	493c      	ldr	r1, [pc, #240]	@ (8018030 <USB_ActivateEndpoint+0x2c4>)
 8017f3e:	400a      	ands	r2, r1
 8017f40:	801a      	strh	r2, [r3, #0]
 8017f42:	687a      	ldr	r2, [r7, #4]
 8017f44:	683b      	ldr	r3, [r7, #0]
 8017f46:	781b      	ldrb	r3, [r3, #0]
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	18d3      	adds	r3, r2, r3
 8017f4c:	183a      	adds	r2, r7, r0
 8017f4e:	8812      	ldrh	r2, [r2, #0]
 8017f50:	4934      	ldr	r1, [pc, #208]	@ (8018024 <USB_ActivateEndpoint+0x2b8>)
 8017f52:	430a      	orrs	r2, r1
 8017f54:	b292      	uxth	r2, r2
 8017f56:	801a      	strh	r2, [r3, #0]
 8017f58:	e29c      	b.n	8018494 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	2250      	movs	r2, #80	@ 0x50
 8017f62:	5a9b      	ldrh	r3, [r3, r2]
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	001a      	movs	r2, r3
 8017f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f6a:	189b      	adds	r3, r3, r2
 8017f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f6e:	683b      	ldr	r3, [r7, #0]
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	00da      	lsls	r2, r3, #3
 8017f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f76:	18d3      	adds	r3, r2, r3
 8017f78:	4a2e      	ldr	r2, [pc, #184]	@ (8018034 <USB_ActivateEndpoint+0x2c8>)
 8017f7a:	4694      	mov	ip, r2
 8017f7c:	4463      	add	r3, ip
 8017f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f80:	683b      	ldr	r3, [r7, #0]
 8017f82:	88db      	ldrh	r3, [r3, #6]
 8017f84:	085b      	lsrs	r3, r3, #1
 8017f86:	b29b      	uxth	r3, r3
 8017f88:	18db      	adds	r3, r3, r3
 8017f8a:	b29a      	uxth	r2, r3
 8017f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	2250      	movs	r2, #80	@ 0x50
 8017f98:	5a9b      	ldrh	r3, [r3, r2]
 8017f9a:	b29b      	uxth	r3, r3
 8017f9c:	001a      	movs	r2, r3
 8017f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fa0:	189b      	adds	r3, r3, r2
 8017fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017fa4:	683b      	ldr	r3, [r7, #0]
 8017fa6:	781b      	ldrb	r3, [r3, #0]
 8017fa8:	00da      	lsls	r2, r3, #3
 8017faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fac:	18d3      	adds	r3, r2, r3
 8017fae:	4a22      	ldr	r2, [pc, #136]	@ (8018038 <USB_ActivateEndpoint+0x2cc>)
 8017fb0:	4694      	mov	ip, r2
 8017fb2:	4463      	add	r3, ip
 8017fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8017fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fb8:	881b      	ldrh	r3, [r3, #0]
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	059b      	lsls	r3, r3, #22
 8017fbe:	0d9b      	lsrs	r3, r3, #22
 8017fc0:	b29a      	uxth	r2, r3
 8017fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fc4:	801a      	strh	r2, [r3, #0]
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	691b      	ldr	r3, [r3, #16]
 8017fca:	2b3e      	cmp	r3, #62	@ 0x3e
 8017fcc:	d91a      	bls.n	8018004 <USB_ActivateEndpoint+0x298>
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	691b      	ldr	r3, [r3, #16]
 8017fd2:	095b      	lsrs	r3, r3, #5
 8017fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	691b      	ldr	r3, [r3, #16]
 8017fda:	221f      	movs	r2, #31
 8017fdc:	4013      	ands	r3, r2
 8017fde:	d102      	bne.n	8017fe6 <USB_ActivateEndpoint+0x27a>
 8017fe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017fe2:	3b01      	subs	r3, #1
 8017fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe8:	881b      	ldrh	r3, [r3, #0]
 8017fea:	b29a      	uxth	r2, r3
 8017fec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017fee:	b29b      	uxth	r3, r3
 8017ff0:	029b      	lsls	r3, r3, #10
 8017ff2:	b29b      	uxth	r3, r3
 8017ff4:	4313      	orrs	r3, r2
 8017ff6:	b29b      	uxth	r3, r3
 8017ff8:	4a10      	ldr	r2, [pc, #64]	@ (801803c <USB_ActivateEndpoint+0x2d0>)
 8017ffa:	4313      	orrs	r3, r2
 8017ffc:	b29a      	uxth	r2, r3
 8017ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018000:	801a      	strh	r2, [r3, #0]
 8018002:	e034      	b.n	801806e <USB_ActivateEndpoint+0x302>
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	691b      	ldr	r3, [r3, #16]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d119      	bne.n	8018040 <USB_ActivateEndpoint+0x2d4>
 801800c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801800e:	881b      	ldrh	r3, [r3, #0]
 8018010:	b29b      	uxth	r3, r3
 8018012:	4a0a      	ldr	r2, [pc, #40]	@ (801803c <USB_ActivateEndpoint+0x2d0>)
 8018014:	4313      	orrs	r3, r2
 8018016:	b29a      	uxth	r2, r3
 8018018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801801a:	801a      	strh	r2, [r3, #0]
 801801c:	e027      	b.n	801806e <USB_ActivateEndpoint+0x302>
 801801e:	46c0      	nop			@ (mov r8, r8)
 8018020:	ffff898f 	.word	0xffff898f
 8018024:	ffff8080 	.word	0xffff8080
 8018028:	ffff8f8f 	.word	0xffff8f8f
 801802c:	ffff80c0 	.word	0xffff80c0
 8018030:	ffff8fbf 	.word	0xffff8fbf
 8018034:	00000404 	.word	0x00000404
 8018038:	00000406 	.word	0x00000406
 801803c:	ffff8000 	.word	0xffff8000
 8018040:	683b      	ldr	r3, [r7, #0]
 8018042:	691b      	ldr	r3, [r3, #16]
 8018044:	085b      	lsrs	r3, r3, #1
 8018046:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	691b      	ldr	r3, [r3, #16]
 801804c:	2201      	movs	r2, #1
 801804e:	4013      	ands	r3, r2
 8018050:	d002      	beq.n	8018058 <USB_ActivateEndpoint+0x2ec>
 8018052:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018054:	3301      	adds	r3, #1
 8018056:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801805a:	881b      	ldrh	r3, [r3, #0]
 801805c:	b29a      	uxth	r2, r3
 801805e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018060:	b29b      	uxth	r3, r3
 8018062:	029b      	lsls	r3, r3, #10
 8018064:	b29b      	uxth	r3, r3
 8018066:	4313      	orrs	r3, r2
 8018068:	b29a      	uxth	r2, r3
 801806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801806c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801806e:	687a      	ldr	r2, [r7, #4]
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	781b      	ldrb	r3, [r3, #0]
 8018074:	009b      	lsls	r3, r3, #2
 8018076:	18d2      	adds	r2, r2, r3
 8018078:	2122      	movs	r1, #34	@ 0x22
 801807a:	187b      	adds	r3, r7, r1
 801807c:	8812      	ldrh	r2, [r2, #0]
 801807e:	801a      	strh	r2, [r3, #0]
 8018080:	187b      	adds	r3, r7, r1
 8018082:	881a      	ldrh	r2, [r3, #0]
 8018084:	2380      	movs	r3, #128	@ 0x80
 8018086:	01db      	lsls	r3, r3, #7
 8018088:	4013      	ands	r3, r2
 801808a:	d016      	beq.n	80180ba <USB_ActivateEndpoint+0x34e>
 801808c:	687a      	ldr	r2, [r7, #4]
 801808e:	683b      	ldr	r3, [r7, #0]
 8018090:	781b      	ldrb	r3, [r3, #0]
 8018092:	009b      	lsls	r3, r3, #2
 8018094:	18d3      	adds	r3, r2, r3
 8018096:	881b      	ldrh	r3, [r3, #0]
 8018098:	b29a      	uxth	r2, r3
 801809a:	2020      	movs	r0, #32
 801809c:	183b      	adds	r3, r7, r0
 801809e:	49dd      	ldr	r1, [pc, #884]	@ (8018414 <USB_ActivateEndpoint+0x6a8>)
 80180a0:	400a      	ands	r2, r1
 80180a2:	801a      	strh	r2, [r3, #0]
 80180a4:	687a      	ldr	r2, [r7, #4]
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	781b      	ldrb	r3, [r3, #0]
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	18d3      	adds	r3, r2, r3
 80180ae:	183a      	adds	r2, r7, r0
 80180b0:	8812      	ldrh	r2, [r2, #0]
 80180b2:	49d9      	ldr	r1, [pc, #868]	@ (8018418 <USB_ActivateEndpoint+0x6ac>)
 80180b4:	430a      	orrs	r2, r1
 80180b6:	b292      	uxth	r2, r2
 80180b8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80180ba:	683b      	ldr	r3, [r7, #0]
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d125      	bne.n	801810e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80180c2:	687a      	ldr	r2, [r7, #4]
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	781b      	ldrb	r3, [r3, #0]
 80180c8:	009b      	lsls	r3, r3, #2
 80180ca:	18d3      	adds	r3, r2, r3
 80180cc:	881b      	ldrh	r3, [r3, #0]
 80180ce:	b29a      	uxth	r2, r3
 80180d0:	201c      	movs	r0, #28
 80180d2:	183b      	adds	r3, r7, r0
 80180d4:	49d1      	ldr	r1, [pc, #836]	@ (801841c <USB_ActivateEndpoint+0x6b0>)
 80180d6:	400a      	ands	r2, r1
 80180d8:	801a      	strh	r2, [r3, #0]
 80180da:	183b      	adds	r3, r7, r0
 80180dc:	183a      	adds	r2, r7, r0
 80180de:	8812      	ldrh	r2, [r2, #0]
 80180e0:	2180      	movs	r1, #128	@ 0x80
 80180e2:	0149      	lsls	r1, r1, #5
 80180e4:	404a      	eors	r2, r1
 80180e6:	801a      	strh	r2, [r3, #0]
 80180e8:	183b      	adds	r3, r7, r0
 80180ea:	183a      	adds	r2, r7, r0
 80180ec:	8812      	ldrh	r2, [r2, #0]
 80180ee:	2180      	movs	r1, #128	@ 0x80
 80180f0:	0189      	lsls	r1, r1, #6
 80180f2:	404a      	eors	r2, r1
 80180f4:	801a      	strh	r2, [r3, #0]
 80180f6:	687a      	ldr	r2, [r7, #4]
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	009b      	lsls	r3, r3, #2
 80180fe:	18d3      	adds	r3, r2, r3
 8018100:	183a      	adds	r2, r7, r0
 8018102:	8812      	ldrh	r2, [r2, #0]
 8018104:	49c6      	ldr	r1, [pc, #792]	@ (8018420 <USB_ActivateEndpoint+0x6b4>)
 8018106:	430a      	orrs	r2, r1
 8018108:	b292      	uxth	r2, r2
 801810a:	801a      	strh	r2, [r3, #0]
 801810c:	e1c2      	b.n	8018494 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801810e:	687a      	ldr	r2, [r7, #4]
 8018110:	683b      	ldr	r3, [r7, #0]
 8018112:	781b      	ldrb	r3, [r3, #0]
 8018114:	009b      	lsls	r3, r3, #2
 8018116:	18d3      	adds	r3, r2, r3
 8018118:	881b      	ldrh	r3, [r3, #0]
 801811a:	b29a      	uxth	r2, r3
 801811c:	201e      	movs	r0, #30
 801811e:	183b      	adds	r3, r7, r0
 8018120:	49be      	ldr	r1, [pc, #760]	@ (801841c <USB_ActivateEndpoint+0x6b0>)
 8018122:	400a      	ands	r2, r1
 8018124:	801a      	strh	r2, [r3, #0]
 8018126:	183b      	adds	r3, r7, r0
 8018128:	183a      	adds	r2, r7, r0
 801812a:	8812      	ldrh	r2, [r2, #0]
 801812c:	2180      	movs	r1, #128	@ 0x80
 801812e:	0189      	lsls	r1, r1, #6
 8018130:	404a      	eors	r2, r1
 8018132:	801a      	strh	r2, [r3, #0]
 8018134:	687a      	ldr	r2, [r7, #4]
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	009b      	lsls	r3, r3, #2
 801813c:	18d3      	adds	r3, r2, r3
 801813e:	183a      	adds	r2, r7, r0
 8018140:	8812      	ldrh	r2, [r2, #0]
 8018142:	49b7      	ldr	r1, [pc, #732]	@ (8018420 <USB_ActivateEndpoint+0x6b4>)
 8018144:	430a      	orrs	r2, r1
 8018146:	b292      	uxth	r2, r2
 8018148:	801a      	strh	r2, [r3, #0]
 801814a:	e1a3      	b.n	8018494 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	78db      	ldrb	r3, [r3, #3]
 8018150:	2b02      	cmp	r3, #2
 8018152:	d117      	bne.n	8018184 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018154:	687a      	ldr	r2, [r7, #4]
 8018156:	683b      	ldr	r3, [r7, #0]
 8018158:	781b      	ldrb	r3, [r3, #0]
 801815a:	009b      	lsls	r3, r3, #2
 801815c:	18d3      	adds	r3, r2, r3
 801815e:	881b      	ldrh	r3, [r3, #0]
 8018160:	b29a      	uxth	r2, r3
 8018162:	2062      	movs	r0, #98	@ 0x62
 8018164:	183b      	adds	r3, r7, r0
 8018166:	49ab      	ldr	r1, [pc, #684]	@ (8018414 <USB_ActivateEndpoint+0x6a8>)
 8018168:	400a      	ands	r2, r1
 801816a:	801a      	strh	r2, [r3, #0]
 801816c:	687a      	ldr	r2, [r7, #4]
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	781b      	ldrb	r3, [r3, #0]
 8018172:	009b      	lsls	r3, r3, #2
 8018174:	18d3      	adds	r3, r2, r3
 8018176:	183a      	adds	r2, r7, r0
 8018178:	8812      	ldrh	r2, [r2, #0]
 801817a:	49aa      	ldr	r1, [pc, #680]	@ (8018424 <USB_ActivateEndpoint+0x6b8>)
 801817c:	430a      	orrs	r2, r1
 801817e:	b292      	uxth	r2, r2
 8018180:	801a      	strh	r2, [r3, #0]
 8018182:	e016      	b.n	80181b2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8018184:	687a      	ldr	r2, [r7, #4]
 8018186:	683b      	ldr	r3, [r7, #0]
 8018188:	781b      	ldrb	r3, [r3, #0]
 801818a:	009b      	lsls	r3, r3, #2
 801818c:	18d3      	adds	r3, r2, r3
 801818e:	881b      	ldrh	r3, [r3, #0]
 8018190:	b29a      	uxth	r2, r3
 8018192:	2064      	movs	r0, #100	@ 0x64
 8018194:	183b      	adds	r3, r7, r0
 8018196:	49a4      	ldr	r1, [pc, #656]	@ (8018428 <USB_ActivateEndpoint+0x6bc>)
 8018198:	400a      	ands	r2, r1
 801819a:	801a      	strh	r2, [r3, #0]
 801819c:	687a      	ldr	r2, [r7, #4]
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	781b      	ldrb	r3, [r3, #0]
 80181a2:	009b      	lsls	r3, r3, #2
 80181a4:	18d3      	adds	r3, r2, r3
 80181a6:	183a      	adds	r2, r7, r0
 80181a8:	8812      	ldrh	r2, [r2, #0]
 80181aa:	499d      	ldr	r1, [pc, #628]	@ (8018420 <USB_ActivateEndpoint+0x6b4>)
 80181ac:	430a      	orrs	r2, r1
 80181ae:	b292      	uxth	r2, r2
 80181b0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	2250      	movs	r2, #80	@ 0x50
 80181ba:	5a9b      	ldrh	r3, [r3, r2]
 80181bc:	b29b      	uxth	r3, r3
 80181be:	001a      	movs	r2, r3
 80181c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80181c2:	189b      	adds	r3, r3, r2
 80181c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80181c6:	683b      	ldr	r3, [r7, #0]
 80181c8:	781b      	ldrb	r3, [r3, #0]
 80181ca:	00da      	lsls	r2, r3, #3
 80181cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80181ce:	18d3      	adds	r3, r2, r3
 80181d0:	2280      	movs	r2, #128	@ 0x80
 80181d2:	00d2      	lsls	r2, r2, #3
 80181d4:	4694      	mov	ip, r2
 80181d6:	4463      	add	r3, ip
 80181d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	891b      	ldrh	r3, [r3, #8]
 80181de:	085b      	lsrs	r3, r3, #1
 80181e0:	b29b      	uxth	r3, r3
 80181e2:	18db      	adds	r3, r3, r3
 80181e4:	b29a      	uxth	r2, r3
 80181e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80181e8:	801a      	strh	r2, [r3, #0]
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	2250      	movs	r2, #80	@ 0x50
 80181f2:	5a9b      	ldrh	r3, [r3, r2]
 80181f4:	b29b      	uxth	r3, r3
 80181f6:	001a      	movs	r2, r3
 80181f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80181fa:	189b      	adds	r3, r3, r2
 80181fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	781b      	ldrb	r3, [r3, #0]
 8018202:	00da      	lsls	r2, r3, #3
 8018204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018206:	18d3      	adds	r3, r2, r3
 8018208:	4a88      	ldr	r2, [pc, #544]	@ (801842c <USB_ActivateEndpoint+0x6c0>)
 801820a:	4694      	mov	ip, r2
 801820c:	4463      	add	r3, ip
 801820e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	895b      	ldrh	r3, [r3, #10]
 8018214:	085b      	lsrs	r3, r3, #1
 8018216:	b29b      	uxth	r3, r3
 8018218:	18db      	adds	r3, r3, r3
 801821a:	b29a      	uxth	r2, r3
 801821c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801821e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018220:	683b      	ldr	r3, [r7, #0]
 8018222:	785b      	ldrb	r3, [r3, #1]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d000      	beq.n	801822a <USB_ActivateEndpoint+0x4be>
 8018228:	e087      	b.n	801833a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801822a:	687a      	ldr	r2, [r7, #4]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	009b      	lsls	r3, r3, #2
 8018232:	18d2      	adds	r2, r2, r3
 8018234:	2140      	movs	r1, #64	@ 0x40
 8018236:	187b      	adds	r3, r7, r1
 8018238:	8812      	ldrh	r2, [r2, #0]
 801823a:	801a      	strh	r2, [r3, #0]
 801823c:	187b      	adds	r3, r7, r1
 801823e:	881a      	ldrh	r2, [r3, #0]
 8018240:	2380      	movs	r3, #128	@ 0x80
 8018242:	01db      	lsls	r3, r3, #7
 8018244:	4013      	ands	r3, r2
 8018246:	d016      	beq.n	8018276 <USB_ActivateEndpoint+0x50a>
 8018248:	687a      	ldr	r2, [r7, #4]
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	781b      	ldrb	r3, [r3, #0]
 801824e:	009b      	lsls	r3, r3, #2
 8018250:	18d3      	adds	r3, r2, r3
 8018252:	881b      	ldrh	r3, [r3, #0]
 8018254:	b29a      	uxth	r2, r3
 8018256:	203e      	movs	r0, #62	@ 0x3e
 8018258:	183b      	adds	r3, r7, r0
 801825a:	496e      	ldr	r1, [pc, #440]	@ (8018414 <USB_ActivateEndpoint+0x6a8>)
 801825c:	400a      	ands	r2, r1
 801825e:	801a      	strh	r2, [r3, #0]
 8018260:	687a      	ldr	r2, [r7, #4]
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	781b      	ldrb	r3, [r3, #0]
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	18d3      	adds	r3, r2, r3
 801826a:	183a      	adds	r2, r7, r0
 801826c:	8812      	ldrh	r2, [r2, #0]
 801826e:	496a      	ldr	r1, [pc, #424]	@ (8018418 <USB_ActivateEndpoint+0x6ac>)
 8018270:	430a      	orrs	r2, r1
 8018272:	b292      	uxth	r2, r2
 8018274:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018276:	687a      	ldr	r2, [r7, #4]
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	781b      	ldrb	r3, [r3, #0]
 801827c:	009b      	lsls	r3, r3, #2
 801827e:	18d2      	adds	r2, r2, r3
 8018280:	213c      	movs	r1, #60	@ 0x3c
 8018282:	187b      	adds	r3, r7, r1
 8018284:	8812      	ldrh	r2, [r2, #0]
 8018286:	801a      	strh	r2, [r3, #0]
 8018288:	187b      	adds	r3, r7, r1
 801828a:	881b      	ldrh	r3, [r3, #0]
 801828c:	2240      	movs	r2, #64	@ 0x40
 801828e:	4013      	ands	r3, r2
 8018290:	d016      	beq.n	80182c0 <USB_ActivateEndpoint+0x554>
 8018292:	687a      	ldr	r2, [r7, #4]
 8018294:	683b      	ldr	r3, [r7, #0]
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	009b      	lsls	r3, r3, #2
 801829a:	18d3      	adds	r3, r2, r3
 801829c:	881b      	ldrh	r3, [r3, #0]
 801829e:	b29a      	uxth	r2, r3
 80182a0:	203a      	movs	r0, #58	@ 0x3a
 80182a2:	183b      	adds	r3, r7, r0
 80182a4:	495b      	ldr	r1, [pc, #364]	@ (8018414 <USB_ActivateEndpoint+0x6a8>)
 80182a6:	400a      	ands	r2, r1
 80182a8:	801a      	strh	r2, [r3, #0]
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	683b      	ldr	r3, [r7, #0]
 80182ae:	781b      	ldrb	r3, [r3, #0]
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	18d3      	adds	r3, r2, r3
 80182b4:	183a      	adds	r2, r7, r0
 80182b6:	8812      	ldrh	r2, [r2, #0]
 80182b8:	495d      	ldr	r1, [pc, #372]	@ (8018430 <USB_ActivateEndpoint+0x6c4>)
 80182ba:	430a      	orrs	r2, r1
 80182bc:	b292      	uxth	r2, r2
 80182be:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80182c0:	687a      	ldr	r2, [r7, #4]
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	781b      	ldrb	r3, [r3, #0]
 80182c6:	009b      	lsls	r3, r3, #2
 80182c8:	18d3      	adds	r3, r2, r3
 80182ca:	881b      	ldrh	r3, [r3, #0]
 80182cc:	b29a      	uxth	r2, r3
 80182ce:	2038      	movs	r0, #56	@ 0x38
 80182d0:	183b      	adds	r3, r7, r0
 80182d2:	4952      	ldr	r1, [pc, #328]	@ (801841c <USB_ActivateEndpoint+0x6b0>)
 80182d4:	400a      	ands	r2, r1
 80182d6:	801a      	strh	r2, [r3, #0]
 80182d8:	183b      	adds	r3, r7, r0
 80182da:	183a      	adds	r2, r7, r0
 80182dc:	8812      	ldrh	r2, [r2, #0]
 80182de:	2180      	movs	r1, #128	@ 0x80
 80182e0:	0149      	lsls	r1, r1, #5
 80182e2:	404a      	eors	r2, r1
 80182e4:	801a      	strh	r2, [r3, #0]
 80182e6:	183b      	adds	r3, r7, r0
 80182e8:	183a      	adds	r2, r7, r0
 80182ea:	8812      	ldrh	r2, [r2, #0]
 80182ec:	2180      	movs	r1, #128	@ 0x80
 80182ee:	0189      	lsls	r1, r1, #6
 80182f0:	404a      	eors	r2, r1
 80182f2:	801a      	strh	r2, [r3, #0]
 80182f4:	687a      	ldr	r2, [r7, #4]
 80182f6:	683b      	ldr	r3, [r7, #0]
 80182f8:	781b      	ldrb	r3, [r3, #0]
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	18d3      	adds	r3, r2, r3
 80182fe:	183a      	adds	r2, r7, r0
 8018300:	8812      	ldrh	r2, [r2, #0]
 8018302:	4947      	ldr	r1, [pc, #284]	@ (8018420 <USB_ActivateEndpoint+0x6b4>)
 8018304:	430a      	orrs	r2, r1
 8018306:	b292      	uxth	r2, r2
 8018308:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801830a:	687a      	ldr	r2, [r7, #4]
 801830c:	683b      	ldr	r3, [r7, #0]
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	18d3      	adds	r3, r2, r3
 8018314:	881b      	ldrh	r3, [r3, #0]
 8018316:	b29a      	uxth	r2, r3
 8018318:	2036      	movs	r0, #54	@ 0x36
 801831a:	183b      	adds	r3, r7, r0
 801831c:	4945      	ldr	r1, [pc, #276]	@ (8018434 <USB_ActivateEndpoint+0x6c8>)
 801831e:	400a      	ands	r2, r1
 8018320:	801a      	strh	r2, [r3, #0]
 8018322:	687a      	ldr	r2, [r7, #4]
 8018324:	683b      	ldr	r3, [r7, #0]
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	009b      	lsls	r3, r3, #2
 801832a:	18d3      	adds	r3, r2, r3
 801832c:	183a      	adds	r2, r7, r0
 801832e:	8812      	ldrh	r2, [r2, #0]
 8018330:	493b      	ldr	r1, [pc, #236]	@ (8018420 <USB_ActivateEndpoint+0x6b4>)
 8018332:	430a      	orrs	r2, r1
 8018334:	b292      	uxth	r2, r2
 8018336:	801a      	strh	r2, [r3, #0]
 8018338:	e0ac      	b.n	8018494 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801833a:	687a      	ldr	r2, [r7, #4]
 801833c:	683b      	ldr	r3, [r7, #0]
 801833e:	781b      	ldrb	r3, [r3, #0]
 8018340:	009b      	lsls	r3, r3, #2
 8018342:	18d2      	adds	r2, r2, r3
 8018344:	214e      	movs	r1, #78	@ 0x4e
 8018346:	187b      	adds	r3, r7, r1
 8018348:	8812      	ldrh	r2, [r2, #0]
 801834a:	801a      	strh	r2, [r3, #0]
 801834c:	187b      	adds	r3, r7, r1
 801834e:	881a      	ldrh	r2, [r3, #0]
 8018350:	2380      	movs	r3, #128	@ 0x80
 8018352:	01db      	lsls	r3, r3, #7
 8018354:	4013      	ands	r3, r2
 8018356:	d016      	beq.n	8018386 <USB_ActivateEndpoint+0x61a>
 8018358:	687a      	ldr	r2, [r7, #4]
 801835a:	683b      	ldr	r3, [r7, #0]
 801835c:	781b      	ldrb	r3, [r3, #0]
 801835e:	009b      	lsls	r3, r3, #2
 8018360:	18d3      	adds	r3, r2, r3
 8018362:	881b      	ldrh	r3, [r3, #0]
 8018364:	b29a      	uxth	r2, r3
 8018366:	204c      	movs	r0, #76	@ 0x4c
 8018368:	183b      	adds	r3, r7, r0
 801836a:	492a      	ldr	r1, [pc, #168]	@ (8018414 <USB_ActivateEndpoint+0x6a8>)
 801836c:	400a      	ands	r2, r1
 801836e:	801a      	strh	r2, [r3, #0]
 8018370:	687a      	ldr	r2, [r7, #4]
 8018372:	683b      	ldr	r3, [r7, #0]
 8018374:	781b      	ldrb	r3, [r3, #0]
 8018376:	009b      	lsls	r3, r3, #2
 8018378:	18d3      	adds	r3, r2, r3
 801837a:	183a      	adds	r2, r7, r0
 801837c:	8812      	ldrh	r2, [r2, #0]
 801837e:	4926      	ldr	r1, [pc, #152]	@ (8018418 <USB_ActivateEndpoint+0x6ac>)
 8018380:	430a      	orrs	r2, r1
 8018382:	b292      	uxth	r2, r2
 8018384:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018386:	687a      	ldr	r2, [r7, #4]
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	781b      	ldrb	r3, [r3, #0]
 801838c:	009b      	lsls	r3, r3, #2
 801838e:	18d2      	adds	r2, r2, r3
 8018390:	214a      	movs	r1, #74	@ 0x4a
 8018392:	187b      	adds	r3, r7, r1
 8018394:	8812      	ldrh	r2, [r2, #0]
 8018396:	801a      	strh	r2, [r3, #0]
 8018398:	187b      	adds	r3, r7, r1
 801839a:	881b      	ldrh	r3, [r3, #0]
 801839c:	2240      	movs	r2, #64	@ 0x40
 801839e:	4013      	ands	r3, r2
 80183a0:	d016      	beq.n	80183d0 <USB_ActivateEndpoint+0x664>
 80183a2:	687a      	ldr	r2, [r7, #4]
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	781b      	ldrb	r3, [r3, #0]
 80183a8:	009b      	lsls	r3, r3, #2
 80183aa:	18d3      	adds	r3, r2, r3
 80183ac:	881b      	ldrh	r3, [r3, #0]
 80183ae:	b29a      	uxth	r2, r3
 80183b0:	2048      	movs	r0, #72	@ 0x48
 80183b2:	183b      	adds	r3, r7, r0
 80183b4:	4917      	ldr	r1, [pc, #92]	@ (8018414 <USB_ActivateEndpoint+0x6a8>)
 80183b6:	400a      	ands	r2, r1
 80183b8:	801a      	strh	r2, [r3, #0]
 80183ba:	687a      	ldr	r2, [r7, #4]
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	009b      	lsls	r3, r3, #2
 80183c2:	18d3      	adds	r3, r2, r3
 80183c4:	183a      	adds	r2, r7, r0
 80183c6:	8812      	ldrh	r2, [r2, #0]
 80183c8:	4919      	ldr	r1, [pc, #100]	@ (8018430 <USB_ActivateEndpoint+0x6c4>)
 80183ca:	430a      	orrs	r2, r1
 80183cc:	b292      	uxth	r2, r2
 80183ce:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80183d0:	683b      	ldr	r3, [r7, #0]
 80183d2:	78db      	ldrb	r3, [r3, #3]
 80183d4:	2b01      	cmp	r3, #1
 80183d6:	d02f      	beq.n	8018438 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80183d8:	687a      	ldr	r2, [r7, #4]
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	781b      	ldrb	r3, [r3, #0]
 80183de:	009b      	lsls	r3, r3, #2
 80183e0:	18d3      	adds	r3, r2, r3
 80183e2:	881b      	ldrh	r3, [r3, #0]
 80183e4:	b29a      	uxth	r2, r3
 80183e6:	2044      	movs	r0, #68	@ 0x44
 80183e8:	183b      	adds	r3, r7, r0
 80183ea:	4912      	ldr	r1, [pc, #72]	@ (8018434 <USB_ActivateEndpoint+0x6c8>)
 80183ec:	400a      	ands	r2, r1
 80183ee:	801a      	strh	r2, [r3, #0]
 80183f0:	183b      	adds	r3, r7, r0
 80183f2:	183a      	adds	r2, r7, r0
 80183f4:	8812      	ldrh	r2, [r2, #0]
 80183f6:	2120      	movs	r1, #32
 80183f8:	404a      	eors	r2, r1
 80183fa:	801a      	strh	r2, [r3, #0]
 80183fc:	687a      	ldr	r2, [r7, #4]
 80183fe:	683b      	ldr	r3, [r7, #0]
 8018400:	781b      	ldrb	r3, [r3, #0]
 8018402:	009b      	lsls	r3, r3, #2
 8018404:	18d3      	adds	r3, r2, r3
 8018406:	183a      	adds	r2, r7, r0
 8018408:	8812      	ldrh	r2, [r2, #0]
 801840a:	4905      	ldr	r1, [pc, #20]	@ (8018420 <USB_ActivateEndpoint+0x6b4>)
 801840c:	430a      	orrs	r2, r1
 801840e:	b292      	uxth	r2, r2
 8018410:	801a      	strh	r2, [r3, #0]
 8018412:	e028      	b.n	8018466 <USB_ActivateEndpoint+0x6fa>
 8018414:	ffff8f8f 	.word	0xffff8f8f
 8018418:	ffffc080 	.word	0xffffc080
 801841c:	ffffbf8f 	.word	0xffffbf8f
 8018420:	ffff8080 	.word	0xffff8080
 8018424:	ffff8180 	.word	0xffff8180
 8018428:	ffff8e8f 	.word	0xffff8e8f
 801842c:	00000404 	.word	0x00000404
 8018430:	ffff80c0 	.word	0xffff80c0
 8018434:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018438:	687a      	ldr	r2, [r7, #4]
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	009b      	lsls	r3, r3, #2
 8018440:	18d3      	adds	r3, r2, r3
 8018442:	881b      	ldrh	r3, [r3, #0]
 8018444:	b29a      	uxth	r2, r3
 8018446:	2046      	movs	r0, #70	@ 0x46
 8018448:	183b      	adds	r3, r7, r0
 801844a:	4916      	ldr	r1, [pc, #88]	@ (80184a4 <USB_ActivateEndpoint+0x738>)
 801844c:	400a      	ands	r2, r1
 801844e:	801a      	strh	r2, [r3, #0]
 8018450:	687a      	ldr	r2, [r7, #4]
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	009b      	lsls	r3, r3, #2
 8018458:	18d3      	adds	r3, r2, r3
 801845a:	183a      	adds	r2, r7, r0
 801845c:	8812      	ldrh	r2, [r2, #0]
 801845e:	4912      	ldr	r1, [pc, #72]	@ (80184a8 <USB_ActivateEndpoint+0x73c>)
 8018460:	430a      	orrs	r2, r1
 8018462:	b292      	uxth	r2, r2
 8018464:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018466:	687a      	ldr	r2, [r7, #4]
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	781b      	ldrb	r3, [r3, #0]
 801846c:	009b      	lsls	r3, r3, #2
 801846e:	18d3      	adds	r3, r2, r3
 8018470:	881b      	ldrh	r3, [r3, #0]
 8018472:	b29a      	uxth	r2, r3
 8018474:	2042      	movs	r0, #66	@ 0x42
 8018476:	183b      	adds	r3, r7, r0
 8018478:	490c      	ldr	r1, [pc, #48]	@ (80184ac <USB_ActivateEndpoint+0x740>)
 801847a:	400a      	ands	r2, r1
 801847c:	801a      	strh	r2, [r3, #0]
 801847e:	687a      	ldr	r2, [r7, #4]
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	781b      	ldrb	r3, [r3, #0]
 8018484:	009b      	lsls	r3, r3, #2
 8018486:	18d3      	adds	r3, r2, r3
 8018488:	183a      	adds	r2, r7, r0
 801848a:	8812      	ldrh	r2, [r2, #0]
 801848c:	4906      	ldr	r1, [pc, #24]	@ (80184a8 <USB_ActivateEndpoint+0x73c>)
 801848e:	430a      	orrs	r2, r1
 8018490:	b292      	uxth	r2, r2
 8018492:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018494:	236f      	movs	r3, #111	@ 0x6f
 8018496:	18fb      	adds	r3, r7, r3
 8018498:	781b      	ldrb	r3, [r3, #0]
}
 801849a:	0018      	movs	r0, r3
 801849c:	46bd      	mov	sp, r7
 801849e:	b01c      	add	sp, #112	@ 0x70
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	46c0      	nop			@ (mov r8, r8)
 80184a4:	ffff8fbf 	.word	0xffff8fbf
 80184a8:	ffff8080 	.word	0xffff8080
 80184ac:	ffffbf8f 	.word	0xffffbf8f

080184b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b08c      	sub	sp, #48	@ 0x30
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80184ba:	683b      	ldr	r3, [r7, #0]
 80184bc:	7b1b      	ldrb	r3, [r3, #12]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d000      	beq.n	80184c4 <USB_DeactivateEndpoint+0x14>
 80184c2:	e07e      	b.n	80185c2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	785b      	ldrb	r3, [r3, #1]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d03c      	beq.n	8018546 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80184cc:	687a      	ldr	r2, [r7, #4]
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	781b      	ldrb	r3, [r3, #0]
 80184d2:	009b      	lsls	r3, r3, #2
 80184d4:	18d2      	adds	r2, r2, r3
 80184d6:	210c      	movs	r1, #12
 80184d8:	187b      	adds	r3, r7, r1
 80184da:	8812      	ldrh	r2, [r2, #0]
 80184dc:	801a      	strh	r2, [r3, #0]
 80184de:	187b      	adds	r3, r7, r1
 80184e0:	881b      	ldrh	r3, [r3, #0]
 80184e2:	2240      	movs	r2, #64	@ 0x40
 80184e4:	4013      	ands	r3, r2
 80184e6:	d016      	beq.n	8018516 <USB_DeactivateEndpoint+0x66>
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	683b      	ldr	r3, [r7, #0]
 80184ec:	781b      	ldrb	r3, [r3, #0]
 80184ee:	009b      	lsls	r3, r3, #2
 80184f0:	18d3      	adds	r3, r2, r3
 80184f2:	881b      	ldrh	r3, [r3, #0]
 80184f4:	b29a      	uxth	r2, r3
 80184f6:	200a      	movs	r0, #10
 80184f8:	183b      	adds	r3, r7, r0
 80184fa:	49c7      	ldr	r1, [pc, #796]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 80184fc:	400a      	ands	r2, r1
 80184fe:	801a      	strh	r2, [r3, #0]
 8018500:	687a      	ldr	r2, [r7, #4]
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	009b      	lsls	r3, r3, #2
 8018508:	18d3      	adds	r3, r2, r3
 801850a:	183a      	adds	r2, r7, r0
 801850c:	8812      	ldrh	r2, [r2, #0]
 801850e:	49c3      	ldr	r1, [pc, #780]	@ (801881c <USB_DeactivateEndpoint+0x36c>)
 8018510:	430a      	orrs	r2, r1
 8018512:	b292      	uxth	r2, r2
 8018514:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018516:	687a      	ldr	r2, [r7, #4]
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	009b      	lsls	r3, r3, #2
 801851e:	18d3      	adds	r3, r2, r3
 8018520:	881b      	ldrh	r3, [r3, #0]
 8018522:	b29a      	uxth	r2, r3
 8018524:	2008      	movs	r0, #8
 8018526:	183b      	adds	r3, r7, r0
 8018528:	49bd      	ldr	r1, [pc, #756]	@ (8018820 <USB_DeactivateEndpoint+0x370>)
 801852a:	400a      	ands	r2, r1
 801852c:	801a      	strh	r2, [r3, #0]
 801852e:	687a      	ldr	r2, [r7, #4]
 8018530:	683b      	ldr	r3, [r7, #0]
 8018532:	781b      	ldrb	r3, [r3, #0]
 8018534:	009b      	lsls	r3, r3, #2
 8018536:	18d3      	adds	r3, r2, r3
 8018538:	183a      	adds	r2, r7, r0
 801853a:	8812      	ldrh	r2, [r2, #0]
 801853c:	49b9      	ldr	r1, [pc, #740]	@ (8018824 <USB_DeactivateEndpoint+0x374>)
 801853e:	430a      	orrs	r2, r1
 8018540:	b292      	uxth	r2, r2
 8018542:	801a      	strh	r2, [r3, #0]
 8018544:	e163      	b.n	801880e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	683b      	ldr	r3, [r7, #0]
 801854a:	781b      	ldrb	r3, [r3, #0]
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	18d2      	adds	r2, r2, r3
 8018550:	2112      	movs	r1, #18
 8018552:	187b      	adds	r3, r7, r1
 8018554:	8812      	ldrh	r2, [r2, #0]
 8018556:	801a      	strh	r2, [r3, #0]
 8018558:	187b      	adds	r3, r7, r1
 801855a:	881a      	ldrh	r2, [r3, #0]
 801855c:	2380      	movs	r3, #128	@ 0x80
 801855e:	01db      	lsls	r3, r3, #7
 8018560:	4013      	ands	r3, r2
 8018562:	d016      	beq.n	8018592 <USB_DeactivateEndpoint+0xe2>
 8018564:	687a      	ldr	r2, [r7, #4]
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	009b      	lsls	r3, r3, #2
 801856c:	18d3      	adds	r3, r2, r3
 801856e:	881b      	ldrh	r3, [r3, #0]
 8018570:	b29a      	uxth	r2, r3
 8018572:	2010      	movs	r0, #16
 8018574:	183b      	adds	r3, r7, r0
 8018576:	49a8      	ldr	r1, [pc, #672]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 8018578:	400a      	ands	r2, r1
 801857a:	801a      	strh	r2, [r3, #0]
 801857c:	687a      	ldr	r2, [r7, #4]
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	781b      	ldrb	r3, [r3, #0]
 8018582:	009b      	lsls	r3, r3, #2
 8018584:	18d3      	adds	r3, r2, r3
 8018586:	183a      	adds	r2, r7, r0
 8018588:	8812      	ldrh	r2, [r2, #0]
 801858a:	49a7      	ldr	r1, [pc, #668]	@ (8018828 <USB_DeactivateEndpoint+0x378>)
 801858c:	430a      	orrs	r2, r1
 801858e:	b292      	uxth	r2, r2
 8018590:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018592:	687a      	ldr	r2, [r7, #4]
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	781b      	ldrb	r3, [r3, #0]
 8018598:	009b      	lsls	r3, r3, #2
 801859a:	18d3      	adds	r3, r2, r3
 801859c:	881b      	ldrh	r3, [r3, #0]
 801859e:	b29a      	uxth	r2, r3
 80185a0:	200e      	movs	r0, #14
 80185a2:	183b      	adds	r3, r7, r0
 80185a4:	49a1      	ldr	r1, [pc, #644]	@ (801882c <USB_DeactivateEndpoint+0x37c>)
 80185a6:	400a      	ands	r2, r1
 80185a8:	801a      	strh	r2, [r3, #0]
 80185aa:	687a      	ldr	r2, [r7, #4]
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	781b      	ldrb	r3, [r3, #0]
 80185b0:	009b      	lsls	r3, r3, #2
 80185b2:	18d3      	adds	r3, r2, r3
 80185b4:	183a      	adds	r2, r7, r0
 80185b6:	8812      	ldrh	r2, [r2, #0]
 80185b8:	499a      	ldr	r1, [pc, #616]	@ (8018824 <USB_DeactivateEndpoint+0x374>)
 80185ba:	430a      	orrs	r2, r1
 80185bc:	b292      	uxth	r2, r2
 80185be:	801a      	strh	r2, [r3, #0]
 80185c0:	e125      	b.n	801880e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80185c2:	683b      	ldr	r3, [r7, #0]
 80185c4:	785b      	ldrb	r3, [r3, #1]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d000      	beq.n	80185cc <USB_DeactivateEndpoint+0x11c>
 80185ca:	e090      	b.n	80186ee <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80185cc:	687a      	ldr	r2, [r7, #4]
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	781b      	ldrb	r3, [r3, #0]
 80185d2:	009b      	lsls	r3, r3, #2
 80185d4:	18d2      	adds	r2, r2, r3
 80185d6:	2120      	movs	r1, #32
 80185d8:	187b      	adds	r3, r7, r1
 80185da:	8812      	ldrh	r2, [r2, #0]
 80185dc:	801a      	strh	r2, [r3, #0]
 80185de:	187b      	adds	r3, r7, r1
 80185e0:	881a      	ldrh	r2, [r3, #0]
 80185e2:	2380      	movs	r3, #128	@ 0x80
 80185e4:	01db      	lsls	r3, r3, #7
 80185e6:	4013      	ands	r3, r2
 80185e8:	d016      	beq.n	8018618 <USB_DeactivateEndpoint+0x168>
 80185ea:	687a      	ldr	r2, [r7, #4]
 80185ec:	683b      	ldr	r3, [r7, #0]
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	009b      	lsls	r3, r3, #2
 80185f2:	18d3      	adds	r3, r2, r3
 80185f4:	881b      	ldrh	r3, [r3, #0]
 80185f6:	b29a      	uxth	r2, r3
 80185f8:	201e      	movs	r0, #30
 80185fa:	183b      	adds	r3, r7, r0
 80185fc:	4986      	ldr	r1, [pc, #536]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 80185fe:	400a      	ands	r2, r1
 8018600:	801a      	strh	r2, [r3, #0]
 8018602:	687a      	ldr	r2, [r7, #4]
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	781b      	ldrb	r3, [r3, #0]
 8018608:	009b      	lsls	r3, r3, #2
 801860a:	18d3      	adds	r3, r2, r3
 801860c:	183a      	adds	r2, r7, r0
 801860e:	8812      	ldrh	r2, [r2, #0]
 8018610:	4985      	ldr	r1, [pc, #532]	@ (8018828 <USB_DeactivateEndpoint+0x378>)
 8018612:	430a      	orrs	r2, r1
 8018614:	b292      	uxth	r2, r2
 8018616:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018618:	687a      	ldr	r2, [r7, #4]
 801861a:	683b      	ldr	r3, [r7, #0]
 801861c:	781b      	ldrb	r3, [r3, #0]
 801861e:	009b      	lsls	r3, r3, #2
 8018620:	18d2      	adds	r2, r2, r3
 8018622:	211c      	movs	r1, #28
 8018624:	187b      	adds	r3, r7, r1
 8018626:	8812      	ldrh	r2, [r2, #0]
 8018628:	801a      	strh	r2, [r3, #0]
 801862a:	187b      	adds	r3, r7, r1
 801862c:	881b      	ldrh	r3, [r3, #0]
 801862e:	2240      	movs	r2, #64	@ 0x40
 8018630:	4013      	ands	r3, r2
 8018632:	d016      	beq.n	8018662 <USB_DeactivateEndpoint+0x1b2>
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	009b      	lsls	r3, r3, #2
 801863c:	18d3      	adds	r3, r2, r3
 801863e:	881b      	ldrh	r3, [r3, #0]
 8018640:	b29a      	uxth	r2, r3
 8018642:	201a      	movs	r0, #26
 8018644:	183b      	adds	r3, r7, r0
 8018646:	4974      	ldr	r1, [pc, #464]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 8018648:	400a      	ands	r2, r1
 801864a:	801a      	strh	r2, [r3, #0]
 801864c:	687a      	ldr	r2, [r7, #4]
 801864e:	683b      	ldr	r3, [r7, #0]
 8018650:	781b      	ldrb	r3, [r3, #0]
 8018652:	009b      	lsls	r3, r3, #2
 8018654:	18d3      	adds	r3, r2, r3
 8018656:	183a      	adds	r2, r7, r0
 8018658:	8812      	ldrh	r2, [r2, #0]
 801865a:	4970      	ldr	r1, [pc, #448]	@ (801881c <USB_DeactivateEndpoint+0x36c>)
 801865c:	430a      	orrs	r2, r1
 801865e:	b292      	uxth	r2, r2
 8018660:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018662:	687a      	ldr	r2, [r7, #4]
 8018664:	683b      	ldr	r3, [r7, #0]
 8018666:	781b      	ldrb	r3, [r3, #0]
 8018668:	009b      	lsls	r3, r3, #2
 801866a:	18d3      	adds	r3, r2, r3
 801866c:	881b      	ldrh	r3, [r3, #0]
 801866e:	b29a      	uxth	r2, r3
 8018670:	2018      	movs	r0, #24
 8018672:	183b      	adds	r3, r7, r0
 8018674:	4968      	ldr	r1, [pc, #416]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 8018676:	400a      	ands	r2, r1
 8018678:	801a      	strh	r2, [r3, #0]
 801867a:	687a      	ldr	r2, [r7, #4]
 801867c:	683b      	ldr	r3, [r7, #0]
 801867e:	781b      	ldrb	r3, [r3, #0]
 8018680:	009b      	lsls	r3, r3, #2
 8018682:	18d3      	adds	r3, r2, r3
 8018684:	183a      	adds	r2, r7, r0
 8018686:	8812      	ldrh	r2, [r2, #0]
 8018688:	4964      	ldr	r1, [pc, #400]	@ (801881c <USB_DeactivateEndpoint+0x36c>)
 801868a:	430a      	orrs	r2, r1
 801868c:	b292      	uxth	r2, r2
 801868e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018690:	687a      	ldr	r2, [r7, #4]
 8018692:	683b      	ldr	r3, [r7, #0]
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	18d3      	adds	r3, r2, r3
 801869a:	881b      	ldrh	r3, [r3, #0]
 801869c:	b29a      	uxth	r2, r3
 801869e:	2016      	movs	r0, #22
 80186a0:	183b      	adds	r3, r7, r0
 80186a2:	4962      	ldr	r1, [pc, #392]	@ (801882c <USB_DeactivateEndpoint+0x37c>)
 80186a4:	400a      	ands	r2, r1
 80186a6:	801a      	strh	r2, [r3, #0]
 80186a8:	687a      	ldr	r2, [r7, #4]
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	781b      	ldrb	r3, [r3, #0]
 80186ae:	009b      	lsls	r3, r3, #2
 80186b0:	18d3      	adds	r3, r2, r3
 80186b2:	183a      	adds	r2, r7, r0
 80186b4:	8812      	ldrh	r2, [r2, #0]
 80186b6:	495b      	ldr	r1, [pc, #364]	@ (8018824 <USB_DeactivateEndpoint+0x374>)
 80186b8:	430a      	orrs	r2, r1
 80186ba:	b292      	uxth	r2, r2
 80186bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80186be:	687a      	ldr	r2, [r7, #4]
 80186c0:	683b      	ldr	r3, [r7, #0]
 80186c2:	781b      	ldrb	r3, [r3, #0]
 80186c4:	009b      	lsls	r3, r3, #2
 80186c6:	18d3      	adds	r3, r2, r3
 80186c8:	881b      	ldrh	r3, [r3, #0]
 80186ca:	b29a      	uxth	r2, r3
 80186cc:	2014      	movs	r0, #20
 80186ce:	183b      	adds	r3, r7, r0
 80186d0:	4953      	ldr	r1, [pc, #332]	@ (8018820 <USB_DeactivateEndpoint+0x370>)
 80186d2:	400a      	ands	r2, r1
 80186d4:	801a      	strh	r2, [r3, #0]
 80186d6:	687a      	ldr	r2, [r7, #4]
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	781b      	ldrb	r3, [r3, #0]
 80186dc:	009b      	lsls	r3, r3, #2
 80186de:	18d3      	adds	r3, r2, r3
 80186e0:	183a      	adds	r2, r7, r0
 80186e2:	8812      	ldrh	r2, [r2, #0]
 80186e4:	494f      	ldr	r1, [pc, #316]	@ (8018824 <USB_DeactivateEndpoint+0x374>)
 80186e6:	430a      	orrs	r2, r1
 80186e8:	b292      	uxth	r2, r2
 80186ea:	801a      	strh	r2, [r3, #0]
 80186ec:	e08f      	b.n	801880e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80186ee:	687a      	ldr	r2, [r7, #4]
 80186f0:	683b      	ldr	r3, [r7, #0]
 80186f2:	781b      	ldrb	r3, [r3, #0]
 80186f4:	009b      	lsls	r3, r3, #2
 80186f6:	18d2      	adds	r2, r2, r3
 80186f8:	212e      	movs	r1, #46	@ 0x2e
 80186fa:	187b      	adds	r3, r7, r1
 80186fc:	8812      	ldrh	r2, [r2, #0]
 80186fe:	801a      	strh	r2, [r3, #0]
 8018700:	187b      	adds	r3, r7, r1
 8018702:	881a      	ldrh	r2, [r3, #0]
 8018704:	2380      	movs	r3, #128	@ 0x80
 8018706:	01db      	lsls	r3, r3, #7
 8018708:	4013      	ands	r3, r2
 801870a:	d016      	beq.n	801873a <USB_DeactivateEndpoint+0x28a>
 801870c:	687a      	ldr	r2, [r7, #4]
 801870e:	683b      	ldr	r3, [r7, #0]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	009b      	lsls	r3, r3, #2
 8018714:	18d3      	adds	r3, r2, r3
 8018716:	881b      	ldrh	r3, [r3, #0]
 8018718:	b29a      	uxth	r2, r3
 801871a:	202c      	movs	r0, #44	@ 0x2c
 801871c:	183b      	adds	r3, r7, r0
 801871e:	493e      	ldr	r1, [pc, #248]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 8018720:	400a      	ands	r2, r1
 8018722:	801a      	strh	r2, [r3, #0]
 8018724:	687a      	ldr	r2, [r7, #4]
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	781b      	ldrb	r3, [r3, #0]
 801872a:	009b      	lsls	r3, r3, #2
 801872c:	18d3      	adds	r3, r2, r3
 801872e:	183a      	adds	r2, r7, r0
 8018730:	8812      	ldrh	r2, [r2, #0]
 8018732:	493d      	ldr	r1, [pc, #244]	@ (8018828 <USB_DeactivateEndpoint+0x378>)
 8018734:	430a      	orrs	r2, r1
 8018736:	b292      	uxth	r2, r2
 8018738:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801873a:	687a      	ldr	r2, [r7, #4]
 801873c:	683b      	ldr	r3, [r7, #0]
 801873e:	781b      	ldrb	r3, [r3, #0]
 8018740:	009b      	lsls	r3, r3, #2
 8018742:	18d2      	adds	r2, r2, r3
 8018744:	212a      	movs	r1, #42	@ 0x2a
 8018746:	187b      	adds	r3, r7, r1
 8018748:	8812      	ldrh	r2, [r2, #0]
 801874a:	801a      	strh	r2, [r3, #0]
 801874c:	187b      	adds	r3, r7, r1
 801874e:	881b      	ldrh	r3, [r3, #0]
 8018750:	2240      	movs	r2, #64	@ 0x40
 8018752:	4013      	ands	r3, r2
 8018754:	d016      	beq.n	8018784 <USB_DeactivateEndpoint+0x2d4>
 8018756:	687a      	ldr	r2, [r7, #4]
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	009b      	lsls	r3, r3, #2
 801875e:	18d3      	adds	r3, r2, r3
 8018760:	881b      	ldrh	r3, [r3, #0]
 8018762:	b29a      	uxth	r2, r3
 8018764:	2028      	movs	r0, #40	@ 0x28
 8018766:	183b      	adds	r3, r7, r0
 8018768:	492b      	ldr	r1, [pc, #172]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 801876a:	400a      	ands	r2, r1
 801876c:	801a      	strh	r2, [r3, #0]
 801876e:	687a      	ldr	r2, [r7, #4]
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	781b      	ldrb	r3, [r3, #0]
 8018774:	009b      	lsls	r3, r3, #2
 8018776:	18d3      	adds	r3, r2, r3
 8018778:	183a      	adds	r2, r7, r0
 801877a:	8812      	ldrh	r2, [r2, #0]
 801877c:	4927      	ldr	r1, [pc, #156]	@ (801881c <USB_DeactivateEndpoint+0x36c>)
 801877e:	430a      	orrs	r2, r1
 8018780:	b292      	uxth	r2, r2
 8018782:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8018784:	687a      	ldr	r2, [r7, #4]
 8018786:	683b      	ldr	r3, [r7, #0]
 8018788:	781b      	ldrb	r3, [r3, #0]
 801878a:	009b      	lsls	r3, r3, #2
 801878c:	18d3      	adds	r3, r2, r3
 801878e:	881b      	ldrh	r3, [r3, #0]
 8018790:	b29a      	uxth	r2, r3
 8018792:	2026      	movs	r0, #38	@ 0x26
 8018794:	183b      	adds	r3, r7, r0
 8018796:	4920      	ldr	r1, [pc, #128]	@ (8018818 <USB_DeactivateEndpoint+0x368>)
 8018798:	400a      	ands	r2, r1
 801879a:	801a      	strh	r2, [r3, #0]
 801879c:	687a      	ldr	r2, [r7, #4]
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	009b      	lsls	r3, r3, #2
 80187a4:	18d3      	adds	r3, r2, r3
 80187a6:	183a      	adds	r2, r7, r0
 80187a8:	8812      	ldrh	r2, [r2, #0]
 80187aa:	491f      	ldr	r1, [pc, #124]	@ (8018828 <USB_DeactivateEndpoint+0x378>)
 80187ac:	430a      	orrs	r2, r1
 80187ae:	b292      	uxth	r2, r2
 80187b0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80187b2:	687a      	ldr	r2, [r7, #4]
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	781b      	ldrb	r3, [r3, #0]
 80187b8:	009b      	lsls	r3, r3, #2
 80187ba:	18d3      	adds	r3, r2, r3
 80187bc:	881b      	ldrh	r3, [r3, #0]
 80187be:	b29a      	uxth	r2, r3
 80187c0:	2024      	movs	r0, #36	@ 0x24
 80187c2:	183b      	adds	r3, r7, r0
 80187c4:	4916      	ldr	r1, [pc, #88]	@ (8018820 <USB_DeactivateEndpoint+0x370>)
 80187c6:	400a      	ands	r2, r1
 80187c8:	801a      	strh	r2, [r3, #0]
 80187ca:	687a      	ldr	r2, [r7, #4]
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	781b      	ldrb	r3, [r3, #0]
 80187d0:	009b      	lsls	r3, r3, #2
 80187d2:	18d3      	adds	r3, r2, r3
 80187d4:	183a      	adds	r2, r7, r0
 80187d6:	8812      	ldrh	r2, [r2, #0]
 80187d8:	4912      	ldr	r1, [pc, #72]	@ (8018824 <USB_DeactivateEndpoint+0x374>)
 80187da:	430a      	orrs	r2, r1
 80187dc:	b292      	uxth	r2, r2
 80187de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80187e0:	687a      	ldr	r2, [r7, #4]
 80187e2:	683b      	ldr	r3, [r7, #0]
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	009b      	lsls	r3, r3, #2
 80187e8:	18d3      	adds	r3, r2, r3
 80187ea:	881b      	ldrh	r3, [r3, #0]
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	2022      	movs	r0, #34	@ 0x22
 80187f0:	183b      	adds	r3, r7, r0
 80187f2:	490e      	ldr	r1, [pc, #56]	@ (801882c <USB_DeactivateEndpoint+0x37c>)
 80187f4:	400a      	ands	r2, r1
 80187f6:	801a      	strh	r2, [r3, #0]
 80187f8:	687a      	ldr	r2, [r7, #4]
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	009b      	lsls	r3, r3, #2
 8018800:	18d3      	adds	r3, r2, r3
 8018802:	183a      	adds	r2, r7, r0
 8018804:	8812      	ldrh	r2, [r2, #0]
 8018806:	4907      	ldr	r1, [pc, #28]	@ (8018824 <USB_DeactivateEndpoint+0x374>)
 8018808:	430a      	orrs	r2, r1
 801880a:	b292      	uxth	r2, r2
 801880c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801880e:	2300      	movs	r3, #0
}
 8018810:	0018      	movs	r0, r3
 8018812:	46bd      	mov	sp, r7
 8018814:	b00c      	add	sp, #48	@ 0x30
 8018816:	bd80      	pop	{r7, pc}
 8018818:	ffff8f8f 	.word	0xffff8f8f
 801881c:	ffff80c0 	.word	0xffff80c0
 8018820:	ffff8fbf 	.word	0xffff8fbf
 8018824:	ffff8080 	.word	0xffff8080
 8018828:	ffffc080 	.word	0xffffc080
 801882c:	ffffbf8f 	.word	0xffffbf8f

08018830 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018830:	b590      	push	{r4, r7, lr}
 8018832:	b0c3      	sub	sp, #268	@ 0x10c
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
 8018838:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801883a:	683b      	ldr	r3, [r7, #0]
 801883c:	785b      	ldrb	r3, [r3, #1]
 801883e:	2b01      	cmp	r3, #1
 8018840:	d001      	beq.n	8018846 <USB_EPStartXfer+0x16>
 8018842:	f000 fd2d 	bl	80192a0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	699a      	ldr	r2, [r3, #24]
 801884a:	683b      	ldr	r3, [r7, #0]
 801884c:	691b      	ldr	r3, [r3, #16]
 801884e:	429a      	cmp	r2, r3
 8018850:	d905      	bls.n	801885e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8018852:	683b      	ldr	r3, [r7, #0]
 8018854:	691b      	ldr	r3, [r3, #16]
 8018856:	1d7a      	adds	r2, r7, #5
 8018858:	32ff      	adds	r2, #255	@ 0xff
 801885a:	6013      	str	r3, [r2, #0]
 801885c:	e004      	b.n	8018868 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	699b      	ldr	r3, [r3, #24]
 8018862:	1d7a      	adds	r2, r7, #5
 8018864:	32ff      	adds	r2, #255	@ 0xff
 8018866:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	7b1b      	ldrb	r3, [r3, #12]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d125      	bne.n	80188bc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8018870:	683b      	ldr	r3, [r7, #0]
 8018872:	6959      	ldr	r1, [r3, #20]
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	88da      	ldrh	r2, [r3, #6]
 8018878:	1d7b      	adds	r3, r7, #5
 801887a:	33ff      	adds	r3, #255	@ 0xff
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	b29b      	uxth	r3, r3
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	f001 fa47 	bl	8019d14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	613b      	str	r3, [r7, #16]
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	2250      	movs	r2, #80	@ 0x50
 801888e:	5a9b      	ldrh	r3, [r3, r2]
 8018890:	b29b      	uxth	r3, r3
 8018892:	001a      	movs	r2, r3
 8018894:	693b      	ldr	r3, [r7, #16]
 8018896:	189b      	adds	r3, r3, r2
 8018898:	613b      	str	r3, [r7, #16]
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	781b      	ldrb	r3, [r3, #0]
 801889e:	00da      	lsls	r2, r3, #3
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	18d3      	adds	r3, r2, r3
 80188a4:	4ad7      	ldr	r2, [pc, #860]	@ (8018c04 <USB_EPStartXfer+0x3d4>)
 80188a6:	4694      	mov	ip, r2
 80188a8:	4463      	add	r3, ip
 80188aa:	60fb      	str	r3, [r7, #12]
 80188ac:	1d7b      	adds	r3, r7, #5
 80188ae:	33ff      	adds	r3, #255	@ 0xff
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	b29a      	uxth	r2, r3
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	801a      	strh	r2, [r3, #0]
 80188b8:	f000 fccd 	bl	8019256 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	78db      	ldrb	r3, [r3, #3]
 80188c0:	2b02      	cmp	r3, #2
 80188c2:	d000      	beq.n	80188c6 <USB_EPStartXfer+0x96>
 80188c4:	e362      	b.n	8018f8c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	6a1a      	ldr	r2, [r3, #32]
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	691b      	ldr	r3, [r3, #16]
 80188ce:	429a      	cmp	r2, r3
 80188d0:	d800      	bhi.n	80188d4 <USB_EPStartXfer+0xa4>
 80188d2:	e309      	b.n	8018ee8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80188d4:	687a      	ldr	r2, [r7, #4]
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	009b      	lsls	r3, r3, #2
 80188dc:	18d3      	adds	r3, r2, r3
 80188de:	881b      	ldrh	r3, [r3, #0]
 80188e0:	b29a      	uxth	r2, r3
 80188e2:	2056      	movs	r0, #86	@ 0x56
 80188e4:	183b      	adds	r3, r7, r0
 80188e6:	49c8      	ldr	r1, [pc, #800]	@ (8018c08 <USB_EPStartXfer+0x3d8>)
 80188e8:	400a      	ands	r2, r1
 80188ea:	801a      	strh	r2, [r3, #0]
 80188ec:	687a      	ldr	r2, [r7, #4]
 80188ee:	683b      	ldr	r3, [r7, #0]
 80188f0:	781b      	ldrb	r3, [r3, #0]
 80188f2:	009b      	lsls	r3, r3, #2
 80188f4:	18d3      	adds	r3, r2, r3
 80188f6:	183a      	adds	r2, r7, r0
 80188f8:	8812      	ldrh	r2, [r2, #0]
 80188fa:	49c4      	ldr	r1, [pc, #784]	@ (8018c0c <USB_EPStartXfer+0x3dc>)
 80188fc:	430a      	orrs	r2, r1
 80188fe:	b292      	uxth	r2, r2
 8018900:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8018902:	683b      	ldr	r3, [r7, #0]
 8018904:	6a1a      	ldr	r2, [r3, #32]
 8018906:	1d7b      	adds	r3, r7, #5
 8018908:	33ff      	adds	r3, #255	@ 0xff
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	1ad2      	subs	r2, r2, r3
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8018912:	687a      	ldr	r2, [r7, #4]
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	781b      	ldrb	r3, [r3, #0]
 8018918:	009b      	lsls	r3, r3, #2
 801891a:	18d3      	adds	r3, r2, r3
 801891c:	881b      	ldrh	r3, [r3, #0]
 801891e:	b29b      	uxth	r3, r3
 8018920:	001a      	movs	r2, r3
 8018922:	2340      	movs	r3, #64	@ 0x40
 8018924:	4013      	ands	r3, r2
 8018926:	d100      	bne.n	801892a <USB_EPStartXfer+0xfa>
 8018928:	e176      	b.n	8018c18 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	633b      	str	r3, [r7, #48]	@ 0x30
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	785b      	ldrb	r3, [r3, #1]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d000      	beq.n	8018938 <USB_EPStartXfer+0x108>
 8018936:	e074      	b.n	8018a22 <USB_EPStartXfer+0x1f2>
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	2250      	movs	r2, #80	@ 0x50
 8018940:	5a9b      	ldrh	r3, [r3, r2]
 8018942:	b29b      	uxth	r3, r3
 8018944:	001a      	movs	r2, r3
 8018946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018948:	189b      	adds	r3, r3, r2
 801894a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	781b      	ldrb	r3, [r3, #0]
 8018950:	00da      	lsls	r2, r3, #3
 8018952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018954:	18d3      	adds	r3, r2, r3
 8018956:	4aae      	ldr	r2, [pc, #696]	@ (8018c10 <USB_EPStartXfer+0x3e0>)
 8018958:	4694      	mov	ip, r2
 801895a:	4463      	add	r3, ip
 801895c:	627b      	str	r3, [r7, #36]	@ 0x24
 801895e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018960:	881b      	ldrh	r3, [r3, #0]
 8018962:	b29b      	uxth	r3, r3
 8018964:	059b      	lsls	r3, r3, #22
 8018966:	0d9b      	lsrs	r3, r3, #22
 8018968:	b29a      	uxth	r2, r3
 801896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801896c:	801a      	strh	r2, [r3, #0]
 801896e:	1d7b      	adds	r3, r7, #5
 8018970:	33ff      	adds	r3, #255	@ 0xff
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	2b3e      	cmp	r3, #62	@ 0x3e
 8018976:	d924      	bls.n	80189c2 <USB_EPStartXfer+0x192>
 8018978:	1d7b      	adds	r3, r7, #5
 801897a:	33ff      	adds	r3, #255	@ 0xff
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	095b      	lsrs	r3, r3, #5
 8018980:	1c7a      	adds	r2, r7, #1
 8018982:	32ff      	adds	r2, #255	@ 0xff
 8018984:	6013      	str	r3, [r2, #0]
 8018986:	1d7b      	adds	r3, r7, #5
 8018988:	33ff      	adds	r3, #255	@ 0xff
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	221f      	movs	r2, #31
 801898e:	4013      	ands	r3, r2
 8018990:	d106      	bne.n	80189a0 <USB_EPStartXfer+0x170>
 8018992:	1c7b      	adds	r3, r7, #1
 8018994:	33ff      	adds	r3, #255	@ 0xff
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	3b01      	subs	r3, #1
 801899a:	1c7a      	adds	r2, r7, #1
 801899c:	32ff      	adds	r2, #255	@ 0xff
 801899e:	6013      	str	r3, [r2, #0]
 80189a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189a2:	881b      	ldrh	r3, [r3, #0]
 80189a4:	b29a      	uxth	r2, r3
 80189a6:	1c7b      	adds	r3, r7, #1
 80189a8:	33ff      	adds	r3, #255	@ 0xff
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	b29b      	uxth	r3, r3
 80189ae:	029b      	lsls	r3, r3, #10
 80189b0:	b29b      	uxth	r3, r3
 80189b2:	4313      	orrs	r3, r2
 80189b4:	b29b      	uxth	r3, r3
 80189b6:	4a97      	ldr	r2, [pc, #604]	@ (8018c14 <USB_EPStartXfer+0x3e4>)
 80189b8:	4313      	orrs	r3, r2
 80189ba:	b29a      	uxth	r2, r3
 80189bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189be:	801a      	strh	r2, [r3, #0]
 80189c0:	e04a      	b.n	8018a58 <USB_EPStartXfer+0x228>
 80189c2:	1d7b      	adds	r3, r7, #5
 80189c4:	33ff      	adds	r3, #255	@ 0xff
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d108      	bne.n	80189de <USB_EPStartXfer+0x1ae>
 80189cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189ce:	881b      	ldrh	r3, [r3, #0]
 80189d0:	b29b      	uxth	r3, r3
 80189d2:	4a90      	ldr	r2, [pc, #576]	@ (8018c14 <USB_EPStartXfer+0x3e4>)
 80189d4:	4313      	orrs	r3, r2
 80189d6:	b29a      	uxth	r2, r3
 80189d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189da:	801a      	strh	r2, [r3, #0]
 80189dc:	e03c      	b.n	8018a58 <USB_EPStartXfer+0x228>
 80189de:	1d7b      	adds	r3, r7, #5
 80189e0:	33ff      	adds	r3, #255	@ 0xff
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	085b      	lsrs	r3, r3, #1
 80189e6:	1c7a      	adds	r2, r7, #1
 80189e8:	32ff      	adds	r2, #255	@ 0xff
 80189ea:	6013      	str	r3, [r2, #0]
 80189ec:	1d7b      	adds	r3, r7, #5
 80189ee:	33ff      	adds	r3, #255	@ 0xff
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	2201      	movs	r2, #1
 80189f4:	4013      	ands	r3, r2
 80189f6:	d006      	beq.n	8018a06 <USB_EPStartXfer+0x1d6>
 80189f8:	1c7b      	adds	r3, r7, #1
 80189fa:	33ff      	adds	r3, #255	@ 0xff
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	3301      	adds	r3, #1
 8018a00:	1c7a      	adds	r2, r7, #1
 8018a02:	32ff      	adds	r2, #255	@ 0xff
 8018a04:	6013      	str	r3, [r2, #0]
 8018a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a08:	881b      	ldrh	r3, [r3, #0]
 8018a0a:	b29a      	uxth	r2, r3
 8018a0c:	1c7b      	adds	r3, r7, #1
 8018a0e:	33ff      	adds	r3, #255	@ 0xff
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	b29b      	uxth	r3, r3
 8018a14:	029b      	lsls	r3, r3, #10
 8018a16:	b29b      	uxth	r3, r3
 8018a18:	4313      	orrs	r3, r2
 8018a1a:	b29a      	uxth	r2, r3
 8018a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a1e:	801a      	strh	r2, [r3, #0]
 8018a20:	e01a      	b.n	8018a58 <USB_EPStartXfer+0x228>
 8018a22:	683b      	ldr	r3, [r7, #0]
 8018a24:	785b      	ldrb	r3, [r3, #1]
 8018a26:	2b01      	cmp	r3, #1
 8018a28:	d116      	bne.n	8018a58 <USB_EPStartXfer+0x228>
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	2250      	movs	r2, #80	@ 0x50
 8018a2e:	5a9b      	ldrh	r3, [r3, r2]
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	001a      	movs	r2, r3
 8018a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a36:	189b      	adds	r3, r3, r2
 8018a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	00da      	lsls	r2, r3, #3
 8018a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a42:	18d3      	adds	r3, r2, r3
 8018a44:	4a72      	ldr	r2, [pc, #456]	@ (8018c10 <USB_EPStartXfer+0x3e0>)
 8018a46:	4694      	mov	ip, r2
 8018a48:	4463      	add	r3, ip
 8018a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018a4c:	1d7b      	adds	r3, r7, #5
 8018a4e:	33ff      	adds	r3, #255	@ 0xff
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	b29a      	uxth	r2, r3
 8018a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8018a58:	2076      	movs	r0, #118	@ 0x76
 8018a5a:	183b      	adds	r3, r7, r0
 8018a5c:	683a      	ldr	r2, [r7, #0]
 8018a5e:	8952      	ldrh	r2, [r2, #10]
 8018a60:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018a62:	683b      	ldr	r3, [r7, #0]
 8018a64:	6959      	ldr	r1, [r3, #20]
 8018a66:	1d7b      	adds	r3, r7, #5
 8018a68:	33ff      	adds	r3, #255	@ 0xff
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	b29c      	uxth	r4, r3
 8018a6e:	183b      	adds	r3, r7, r0
 8018a70:	881a      	ldrh	r2, [r3, #0]
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	0023      	movs	r3, r4
 8018a76:	f001 f94d 	bl	8019d14 <USB_WritePMA>
            ep->xfer_buff += len;
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	695a      	ldr	r2, [r3, #20]
 8018a7e:	1d7b      	adds	r3, r7, #5
 8018a80:	33ff      	adds	r3, #255	@ 0xff
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	18d2      	adds	r2, r2, r3
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8018a8a:	683b      	ldr	r3, [r7, #0]
 8018a8c:	6a1a      	ldr	r2, [r3, #32]
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	691b      	ldr	r3, [r3, #16]
 8018a92:	429a      	cmp	r2, r3
 8018a94:	d908      	bls.n	8018aa8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	6a1a      	ldr	r2, [r3, #32]
 8018a9a:	1d7b      	adds	r3, r7, #5
 8018a9c:	33ff      	adds	r3, #255	@ 0xff
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	1ad2      	subs	r2, r2, r3
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	621a      	str	r2, [r3, #32]
 8018aa6:	e007      	b.n	8018ab8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	6a1b      	ldr	r3, [r3, #32]
 8018aac:	1d7a      	adds	r2, r7, #5
 8018aae:	32ff      	adds	r2, #255	@ 0xff
 8018ab0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8018ab2:	683b      	ldr	r3, [r7, #0]
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018ab8:	683b      	ldr	r3, [r7, #0]
 8018aba:	785b      	ldrb	r3, [r3, #1]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d000      	beq.n	8018ac2 <USB_EPStartXfer+0x292>
 8018ac0:	e070      	b.n	8018ba4 <USB_EPStartXfer+0x374>
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	61bb      	str	r3, [r7, #24]
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2250      	movs	r2, #80	@ 0x50
 8018aca:	5a9b      	ldrh	r3, [r3, r2]
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	001a      	movs	r2, r3
 8018ad0:	69bb      	ldr	r3, [r7, #24]
 8018ad2:	189b      	adds	r3, r3, r2
 8018ad4:	61bb      	str	r3, [r7, #24]
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	00da      	lsls	r2, r3, #3
 8018adc:	69bb      	ldr	r3, [r7, #24]
 8018ade:	18d3      	adds	r3, r2, r3
 8018ae0:	4a48      	ldr	r2, [pc, #288]	@ (8018c04 <USB_EPStartXfer+0x3d4>)
 8018ae2:	4694      	mov	ip, r2
 8018ae4:	4463      	add	r3, ip
 8018ae6:	617b      	str	r3, [r7, #20]
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	881b      	ldrh	r3, [r3, #0]
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	059b      	lsls	r3, r3, #22
 8018af0:	0d9b      	lsrs	r3, r3, #22
 8018af2:	b29a      	uxth	r2, r3
 8018af4:	697b      	ldr	r3, [r7, #20]
 8018af6:	801a      	strh	r2, [r3, #0]
 8018af8:	1d7b      	adds	r3, r7, #5
 8018afa:	33ff      	adds	r3, #255	@ 0xff
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	2b3e      	cmp	r3, #62	@ 0x3e
 8018b00:	d922      	bls.n	8018b48 <USB_EPStartXfer+0x318>
 8018b02:	1d7b      	adds	r3, r7, #5
 8018b04:	33ff      	adds	r3, #255	@ 0xff
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	095b      	lsrs	r3, r3, #5
 8018b0a:	21fc      	movs	r1, #252	@ 0xfc
 8018b0c:	187a      	adds	r2, r7, r1
 8018b0e:	6013      	str	r3, [r2, #0]
 8018b10:	1d7b      	adds	r3, r7, #5
 8018b12:	33ff      	adds	r3, #255	@ 0xff
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	221f      	movs	r2, #31
 8018b18:	4013      	ands	r3, r2
 8018b1a:	d104      	bne.n	8018b26 <USB_EPStartXfer+0x2f6>
 8018b1c:	187b      	adds	r3, r7, r1
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	3b01      	subs	r3, #1
 8018b22:	187a      	adds	r2, r7, r1
 8018b24:	6013      	str	r3, [r2, #0]
 8018b26:	697b      	ldr	r3, [r7, #20]
 8018b28:	881b      	ldrh	r3, [r3, #0]
 8018b2a:	b29a      	uxth	r2, r3
 8018b2c:	23fc      	movs	r3, #252	@ 0xfc
 8018b2e:	18fb      	adds	r3, r7, r3
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	b29b      	uxth	r3, r3
 8018b34:	029b      	lsls	r3, r3, #10
 8018b36:	b29b      	uxth	r3, r3
 8018b38:	4313      	orrs	r3, r2
 8018b3a:	b29b      	uxth	r3, r3
 8018b3c:	4a35      	ldr	r2, [pc, #212]	@ (8018c14 <USB_EPStartXfer+0x3e4>)
 8018b3e:	4313      	orrs	r3, r2
 8018b40:	b29a      	uxth	r2, r3
 8018b42:	697b      	ldr	r3, [r7, #20]
 8018b44:	801a      	strh	r2, [r3, #0]
 8018b46:	e04a      	b.n	8018bde <USB_EPStartXfer+0x3ae>
 8018b48:	1d7b      	adds	r3, r7, #5
 8018b4a:	33ff      	adds	r3, #255	@ 0xff
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d108      	bne.n	8018b64 <USB_EPStartXfer+0x334>
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	881b      	ldrh	r3, [r3, #0]
 8018b56:	b29b      	uxth	r3, r3
 8018b58:	4a2e      	ldr	r2, [pc, #184]	@ (8018c14 <USB_EPStartXfer+0x3e4>)
 8018b5a:	4313      	orrs	r3, r2
 8018b5c:	b29a      	uxth	r2, r3
 8018b5e:	697b      	ldr	r3, [r7, #20]
 8018b60:	801a      	strh	r2, [r3, #0]
 8018b62:	e03c      	b.n	8018bde <USB_EPStartXfer+0x3ae>
 8018b64:	1d7b      	adds	r3, r7, #5
 8018b66:	33ff      	adds	r3, #255	@ 0xff
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	085b      	lsrs	r3, r3, #1
 8018b6c:	21fc      	movs	r1, #252	@ 0xfc
 8018b6e:	187a      	adds	r2, r7, r1
 8018b70:	6013      	str	r3, [r2, #0]
 8018b72:	1d7b      	adds	r3, r7, #5
 8018b74:	33ff      	adds	r3, #255	@ 0xff
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	2201      	movs	r2, #1
 8018b7a:	4013      	ands	r3, r2
 8018b7c:	d004      	beq.n	8018b88 <USB_EPStartXfer+0x358>
 8018b7e:	187b      	adds	r3, r7, r1
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	3301      	adds	r3, #1
 8018b84:	187a      	adds	r2, r7, r1
 8018b86:	6013      	str	r3, [r2, #0]
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	881b      	ldrh	r3, [r3, #0]
 8018b8c:	b29a      	uxth	r2, r3
 8018b8e:	23fc      	movs	r3, #252	@ 0xfc
 8018b90:	18fb      	adds	r3, r7, r3
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	b29b      	uxth	r3, r3
 8018b96:	029b      	lsls	r3, r3, #10
 8018b98:	b29b      	uxth	r3, r3
 8018b9a:	4313      	orrs	r3, r2
 8018b9c:	b29a      	uxth	r2, r3
 8018b9e:	697b      	ldr	r3, [r7, #20]
 8018ba0:	801a      	strh	r2, [r3, #0]
 8018ba2:	e01c      	b.n	8018bde <USB_EPStartXfer+0x3ae>
 8018ba4:	683b      	ldr	r3, [r7, #0]
 8018ba6:	785b      	ldrb	r3, [r3, #1]
 8018ba8:	2b01      	cmp	r3, #1
 8018baa:	d118      	bne.n	8018bde <USB_EPStartXfer+0x3ae>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	623b      	str	r3, [r7, #32]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	2250      	movs	r2, #80	@ 0x50
 8018bb4:	5a9b      	ldrh	r3, [r3, r2]
 8018bb6:	b29b      	uxth	r3, r3
 8018bb8:	001a      	movs	r2, r3
 8018bba:	6a3b      	ldr	r3, [r7, #32]
 8018bbc:	189b      	adds	r3, r3, r2
 8018bbe:	623b      	str	r3, [r7, #32]
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	781b      	ldrb	r3, [r3, #0]
 8018bc4:	00da      	lsls	r2, r3, #3
 8018bc6:	6a3b      	ldr	r3, [r7, #32]
 8018bc8:	18d3      	adds	r3, r2, r3
 8018bca:	4a0e      	ldr	r2, [pc, #56]	@ (8018c04 <USB_EPStartXfer+0x3d4>)
 8018bcc:	4694      	mov	ip, r2
 8018bce:	4463      	add	r3, ip
 8018bd0:	61fb      	str	r3, [r7, #28]
 8018bd2:	1d7b      	adds	r3, r7, #5
 8018bd4:	33ff      	adds	r3, #255	@ 0xff
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	b29a      	uxth	r2, r3
 8018bda:	69fb      	ldr	r3, [r7, #28]
 8018bdc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8018bde:	2076      	movs	r0, #118	@ 0x76
 8018be0:	183b      	adds	r3, r7, r0
 8018be2:	683a      	ldr	r2, [r7, #0]
 8018be4:	8912      	ldrh	r2, [r2, #8]
 8018be6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	6959      	ldr	r1, [r3, #20]
 8018bec:	1d7b      	adds	r3, r7, #5
 8018bee:	33ff      	adds	r3, #255	@ 0xff
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	b29c      	uxth	r4, r3
 8018bf4:	183b      	adds	r3, r7, r0
 8018bf6:	881a      	ldrh	r2, [r3, #0]
 8018bf8:	6878      	ldr	r0, [r7, #4]
 8018bfa:	0023      	movs	r3, r4
 8018bfc:	f001 f88a 	bl	8019d14 <USB_WritePMA>
 8018c00:	e329      	b.n	8019256 <USB_EPStartXfer+0xa26>
 8018c02:	46c0      	nop			@ (mov r8, r8)
 8018c04:	00000402 	.word	0x00000402
 8018c08:	ffff8f8f 	.word	0xffff8f8f
 8018c0c:	ffff8180 	.word	0xffff8180
 8018c10:	00000406 	.word	0x00000406
 8018c14:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018c18:	683b      	ldr	r3, [r7, #0]
 8018c1a:	785b      	ldrb	r3, [r3, #1]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d000      	beq.n	8018c22 <USB_EPStartXfer+0x3f2>
 8018c20:	e070      	b.n	8018d04 <USB_EPStartXfer+0x4d4>
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	2250      	movs	r2, #80	@ 0x50
 8018c2a:	5a9b      	ldrh	r3, [r3, r2]
 8018c2c:	b29b      	uxth	r3, r3
 8018c2e:	001a      	movs	r2, r3
 8018c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c32:	189b      	adds	r3, r3, r2
 8018c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	781b      	ldrb	r3, [r3, #0]
 8018c3a:	00da      	lsls	r2, r3, #3
 8018c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c3e:	18d3      	adds	r3, r2, r3
 8018c40:	4acd      	ldr	r2, [pc, #820]	@ (8018f78 <USB_EPStartXfer+0x748>)
 8018c42:	4694      	mov	ip, r2
 8018c44:	4463      	add	r3, ip
 8018c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8018c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c4a:	881b      	ldrh	r3, [r3, #0]
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	059b      	lsls	r3, r3, #22
 8018c50:	0d9b      	lsrs	r3, r3, #22
 8018c52:	b29a      	uxth	r2, r3
 8018c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c56:	801a      	strh	r2, [r3, #0]
 8018c58:	1d7b      	adds	r3, r7, #5
 8018c5a:	33ff      	adds	r3, #255	@ 0xff
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8018c60:	d922      	bls.n	8018ca8 <USB_EPStartXfer+0x478>
 8018c62:	1d7b      	adds	r3, r7, #5
 8018c64:	33ff      	adds	r3, #255	@ 0xff
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	095b      	lsrs	r3, r3, #5
 8018c6a:	21f8      	movs	r1, #248	@ 0xf8
 8018c6c:	187a      	adds	r2, r7, r1
 8018c6e:	6013      	str	r3, [r2, #0]
 8018c70:	1d7b      	adds	r3, r7, #5
 8018c72:	33ff      	adds	r3, #255	@ 0xff
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	221f      	movs	r2, #31
 8018c78:	4013      	ands	r3, r2
 8018c7a:	d104      	bne.n	8018c86 <USB_EPStartXfer+0x456>
 8018c7c:	187b      	adds	r3, r7, r1
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	3b01      	subs	r3, #1
 8018c82:	187a      	adds	r2, r7, r1
 8018c84:	6013      	str	r3, [r2, #0]
 8018c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c88:	881b      	ldrh	r3, [r3, #0]
 8018c8a:	b29a      	uxth	r2, r3
 8018c8c:	23f8      	movs	r3, #248	@ 0xf8
 8018c8e:	18fb      	adds	r3, r7, r3
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	029b      	lsls	r3, r3, #10
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	4313      	orrs	r3, r2
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	4ab7      	ldr	r2, [pc, #732]	@ (8018f7c <USB_EPStartXfer+0x74c>)
 8018c9e:	4313      	orrs	r3, r2
 8018ca0:	b29a      	uxth	r2, r3
 8018ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ca4:	801a      	strh	r2, [r3, #0]
 8018ca6:	e04a      	b.n	8018d3e <USB_EPStartXfer+0x50e>
 8018ca8:	1d7b      	adds	r3, r7, #5
 8018caa:	33ff      	adds	r3, #255	@ 0xff
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d108      	bne.n	8018cc4 <USB_EPStartXfer+0x494>
 8018cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018cb4:	881b      	ldrh	r3, [r3, #0]
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	4ab0      	ldr	r2, [pc, #704]	@ (8018f7c <USB_EPStartXfer+0x74c>)
 8018cba:	4313      	orrs	r3, r2
 8018cbc:	b29a      	uxth	r2, r3
 8018cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018cc0:	801a      	strh	r2, [r3, #0]
 8018cc2:	e03c      	b.n	8018d3e <USB_EPStartXfer+0x50e>
 8018cc4:	1d7b      	adds	r3, r7, #5
 8018cc6:	33ff      	adds	r3, #255	@ 0xff
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	085b      	lsrs	r3, r3, #1
 8018ccc:	21f8      	movs	r1, #248	@ 0xf8
 8018cce:	187a      	adds	r2, r7, r1
 8018cd0:	6013      	str	r3, [r2, #0]
 8018cd2:	1d7b      	adds	r3, r7, #5
 8018cd4:	33ff      	adds	r3, #255	@ 0xff
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	2201      	movs	r2, #1
 8018cda:	4013      	ands	r3, r2
 8018cdc:	d004      	beq.n	8018ce8 <USB_EPStartXfer+0x4b8>
 8018cde:	187b      	adds	r3, r7, r1
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	3301      	adds	r3, #1
 8018ce4:	187a      	adds	r2, r7, r1
 8018ce6:	6013      	str	r3, [r2, #0]
 8018ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018cea:	881b      	ldrh	r3, [r3, #0]
 8018cec:	b29a      	uxth	r2, r3
 8018cee:	23f8      	movs	r3, #248	@ 0xf8
 8018cf0:	18fb      	adds	r3, r7, r3
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	b29b      	uxth	r3, r3
 8018cf6:	029b      	lsls	r3, r3, #10
 8018cf8:	b29b      	uxth	r3, r3
 8018cfa:	4313      	orrs	r3, r2
 8018cfc:	b29a      	uxth	r2, r3
 8018cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d00:	801a      	strh	r2, [r3, #0]
 8018d02:	e01c      	b.n	8018d3e <USB_EPStartXfer+0x50e>
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	785b      	ldrb	r3, [r3, #1]
 8018d08:	2b01      	cmp	r3, #1
 8018d0a:	d118      	bne.n	8018d3e <USB_EPStartXfer+0x50e>
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2250      	movs	r2, #80	@ 0x50
 8018d14:	5a9b      	ldrh	r3, [r3, r2]
 8018d16:	b29b      	uxth	r3, r3
 8018d18:	001a      	movs	r2, r3
 8018d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018d1c:	189b      	adds	r3, r3, r2
 8018d1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018d20:	683b      	ldr	r3, [r7, #0]
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	00da      	lsls	r2, r3, #3
 8018d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018d28:	18d3      	adds	r3, r2, r3
 8018d2a:	4a93      	ldr	r2, [pc, #588]	@ (8018f78 <USB_EPStartXfer+0x748>)
 8018d2c:	4694      	mov	ip, r2
 8018d2e:	4463      	add	r3, ip
 8018d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018d32:	1d7b      	adds	r3, r7, #5
 8018d34:	33ff      	adds	r3, #255	@ 0xff
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	b29a      	uxth	r2, r3
 8018d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8018d3e:	2076      	movs	r0, #118	@ 0x76
 8018d40:	183b      	adds	r3, r7, r0
 8018d42:	683a      	ldr	r2, [r7, #0]
 8018d44:	8912      	ldrh	r2, [r2, #8]
 8018d46:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	6959      	ldr	r1, [r3, #20]
 8018d4c:	1d7b      	adds	r3, r7, #5
 8018d4e:	33ff      	adds	r3, #255	@ 0xff
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	b29c      	uxth	r4, r3
 8018d54:	183b      	adds	r3, r7, r0
 8018d56:	881a      	ldrh	r2, [r3, #0]
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	0023      	movs	r3, r4
 8018d5c:	f000 ffda 	bl	8019d14 <USB_WritePMA>
            ep->xfer_buff += len;
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	695a      	ldr	r2, [r3, #20]
 8018d64:	1d7b      	adds	r3, r7, #5
 8018d66:	33ff      	adds	r3, #255	@ 0xff
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	18d2      	adds	r2, r2, r3
 8018d6c:	683b      	ldr	r3, [r7, #0]
 8018d6e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	6a1a      	ldr	r2, [r3, #32]
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	691b      	ldr	r3, [r3, #16]
 8018d78:	429a      	cmp	r2, r3
 8018d7a:	d908      	bls.n	8018d8e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	6a1a      	ldr	r2, [r3, #32]
 8018d80:	1d7b      	adds	r3, r7, #5
 8018d82:	33ff      	adds	r3, #255	@ 0xff
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	1ad2      	subs	r2, r2, r3
 8018d88:	683b      	ldr	r3, [r7, #0]
 8018d8a:	621a      	str	r2, [r3, #32]
 8018d8c:	e007      	b.n	8018d9e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8018d8e:	683b      	ldr	r3, [r7, #0]
 8018d90:	6a1b      	ldr	r3, [r3, #32]
 8018d92:	1d7a      	adds	r2, r7, #5
 8018d94:	32ff      	adds	r2, #255	@ 0xff
 8018d96:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8018d98:	683b      	ldr	r3, [r7, #0]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	785b      	ldrb	r3, [r3, #1]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d000      	beq.n	8018dac <USB_EPStartXfer+0x57c>
 8018daa:	e070      	b.n	8018e8e <USB_EPStartXfer+0x65e>
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2250      	movs	r2, #80	@ 0x50
 8018db4:	5a9b      	ldrh	r3, [r3, r2]
 8018db6:	b29b      	uxth	r3, r3
 8018db8:	001a      	movs	r2, r3
 8018dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018dbc:	189b      	adds	r3, r3, r2
 8018dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	781b      	ldrb	r3, [r3, #0]
 8018dc4:	00da      	lsls	r2, r3, #3
 8018dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018dc8:	18d3      	adds	r3, r2, r3
 8018dca:	4a6d      	ldr	r2, [pc, #436]	@ (8018f80 <USB_EPStartXfer+0x750>)
 8018dcc:	4694      	mov	ip, r2
 8018dce:	4463      	add	r3, ip
 8018dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8018dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dd4:	881b      	ldrh	r3, [r3, #0]
 8018dd6:	b29b      	uxth	r3, r3
 8018dd8:	059b      	lsls	r3, r3, #22
 8018dda:	0d9b      	lsrs	r3, r3, #22
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018de0:	801a      	strh	r2, [r3, #0]
 8018de2:	1d7b      	adds	r3, r7, #5
 8018de4:	33ff      	adds	r3, #255	@ 0xff
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	2b3e      	cmp	r3, #62	@ 0x3e
 8018dea:	d922      	bls.n	8018e32 <USB_EPStartXfer+0x602>
 8018dec:	1d7b      	adds	r3, r7, #5
 8018dee:	33ff      	adds	r3, #255	@ 0xff
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	095b      	lsrs	r3, r3, #5
 8018df4:	21f4      	movs	r1, #244	@ 0xf4
 8018df6:	187a      	adds	r2, r7, r1
 8018df8:	6013      	str	r3, [r2, #0]
 8018dfa:	1d7b      	adds	r3, r7, #5
 8018dfc:	33ff      	adds	r3, #255	@ 0xff
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	221f      	movs	r2, #31
 8018e02:	4013      	ands	r3, r2
 8018e04:	d104      	bne.n	8018e10 <USB_EPStartXfer+0x5e0>
 8018e06:	187b      	adds	r3, r7, r1
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	3b01      	subs	r3, #1
 8018e0c:	187a      	adds	r2, r7, r1
 8018e0e:	6013      	str	r3, [r2, #0]
 8018e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e12:	881b      	ldrh	r3, [r3, #0]
 8018e14:	b29a      	uxth	r2, r3
 8018e16:	23f4      	movs	r3, #244	@ 0xf4
 8018e18:	18fb      	adds	r3, r7, r3
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	b29b      	uxth	r3, r3
 8018e1e:	029b      	lsls	r3, r3, #10
 8018e20:	b29b      	uxth	r3, r3
 8018e22:	4313      	orrs	r3, r2
 8018e24:	b29b      	uxth	r3, r3
 8018e26:	4a55      	ldr	r2, [pc, #340]	@ (8018f7c <USB_EPStartXfer+0x74c>)
 8018e28:	4313      	orrs	r3, r2
 8018e2a:	b29a      	uxth	r2, r3
 8018e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e2e:	801a      	strh	r2, [r3, #0]
 8018e30:	e048      	b.n	8018ec4 <USB_EPStartXfer+0x694>
 8018e32:	1d7b      	adds	r3, r7, #5
 8018e34:	33ff      	adds	r3, #255	@ 0xff
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d108      	bne.n	8018e4e <USB_EPStartXfer+0x61e>
 8018e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e3e:	881b      	ldrh	r3, [r3, #0]
 8018e40:	b29b      	uxth	r3, r3
 8018e42:	4a4e      	ldr	r2, [pc, #312]	@ (8018f7c <USB_EPStartXfer+0x74c>)
 8018e44:	4313      	orrs	r3, r2
 8018e46:	b29a      	uxth	r2, r3
 8018e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e4a:	801a      	strh	r2, [r3, #0]
 8018e4c:	e03a      	b.n	8018ec4 <USB_EPStartXfer+0x694>
 8018e4e:	1d7b      	adds	r3, r7, #5
 8018e50:	33ff      	adds	r3, #255	@ 0xff
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	085b      	lsrs	r3, r3, #1
 8018e56:	21f4      	movs	r1, #244	@ 0xf4
 8018e58:	187a      	adds	r2, r7, r1
 8018e5a:	6013      	str	r3, [r2, #0]
 8018e5c:	1d7b      	adds	r3, r7, #5
 8018e5e:	33ff      	adds	r3, #255	@ 0xff
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	2201      	movs	r2, #1
 8018e64:	4013      	ands	r3, r2
 8018e66:	d004      	beq.n	8018e72 <USB_EPStartXfer+0x642>
 8018e68:	187b      	adds	r3, r7, r1
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	3301      	adds	r3, #1
 8018e6e:	187a      	adds	r2, r7, r1
 8018e70:	6013      	str	r3, [r2, #0]
 8018e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e74:	881b      	ldrh	r3, [r3, #0]
 8018e76:	b29a      	uxth	r2, r3
 8018e78:	23f4      	movs	r3, #244	@ 0xf4
 8018e7a:	18fb      	adds	r3, r7, r3
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	b29b      	uxth	r3, r3
 8018e80:	029b      	lsls	r3, r3, #10
 8018e82:	b29b      	uxth	r3, r3
 8018e84:	4313      	orrs	r3, r2
 8018e86:	b29a      	uxth	r2, r3
 8018e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e8a:	801a      	strh	r2, [r3, #0]
 8018e8c:	e01a      	b.n	8018ec4 <USB_EPStartXfer+0x694>
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	785b      	ldrb	r3, [r3, #1]
 8018e92:	2b01      	cmp	r3, #1
 8018e94:	d116      	bne.n	8018ec4 <USB_EPStartXfer+0x694>
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	2250      	movs	r2, #80	@ 0x50
 8018e9a:	5a9b      	ldrh	r3, [r3, r2]
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	001a      	movs	r2, r3
 8018ea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ea2:	189b      	adds	r3, r3, r2
 8018ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ea6:	683b      	ldr	r3, [r7, #0]
 8018ea8:	781b      	ldrb	r3, [r3, #0]
 8018eaa:	00da      	lsls	r2, r3, #3
 8018eac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018eae:	18d3      	adds	r3, r2, r3
 8018eb0:	4a33      	ldr	r2, [pc, #204]	@ (8018f80 <USB_EPStartXfer+0x750>)
 8018eb2:	4694      	mov	ip, r2
 8018eb4:	4463      	add	r3, ip
 8018eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018eb8:	1d7b      	adds	r3, r7, #5
 8018eba:	33ff      	adds	r3, #255	@ 0xff
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	b29a      	uxth	r2, r3
 8018ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ec2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8018ec4:	2076      	movs	r0, #118	@ 0x76
 8018ec6:	183b      	adds	r3, r7, r0
 8018ec8:	683a      	ldr	r2, [r7, #0]
 8018eca:	8952      	ldrh	r2, [r2, #10]
 8018ecc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	6959      	ldr	r1, [r3, #20]
 8018ed2:	1d7b      	adds	r3, r7, #5
 8018ed4:	33ff      	adds	r3, #255	@ 0xff
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	b29c      	uxth	r4, r3
 8018eda:	183b      	adds	r3, r7, r0
 8018edc:	881a      	ldrh	r2, [r3, #0]
 8018ede:	6878      	ldr	r0, [r7, #4]
 8018ee0:	0023      	movs	r3, r4
 8018ee2:	f000 ff17 	bl	8019d14 <USB_WritePMA>
 8018ee6:	e1b6      	b.n	8019256 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8018ee8:	683b      	ldr	r3, [r7, #0]
 8018eea:	6a1b      	ldr	r3, [r3, #32]
 8018eec:	1d7a      	adds	r2, r7, #5
 8018eee:	32ff      	adds	r2, #255	@ 0xff
 8018ef0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8018ef2:	687a      	ldr	r2, [r7, #4]
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	781b      	ldrb	r3, [r3, #0]
 8018ef8:	009b      	lsls	r3, r3, #2
 8018efa:	18d3      	adds	r3, r2, r3
 8018efc:	881b      	ldrh	r3, [r3, #0]
 8018efe:	b29a      	uxth	r2, r3
 8018f00:	2062      	movs	r0, #98	@ 0x62
 8018f02:	183b      	adds	r3, r7, r0
 8018f04:	491f      	ldr	r1, [pc, #124]	@ (8018f84 <USB_EPStartXfer+0x754>)
 8018f06:	400a      	ands	r2, r1
 8018f08:	801a      	strh	r2, [r3, #0]
 8018f0a:	687a      	ldr	r2, [r7, #4]
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	781b      	ldrb	r3, [r3, #0]
 8018f10:	009b      	lsls	r3, r3, #2
 8018f12:	18d3      	adds	r3, r2, r3
 8018f14:	183a      	adds	r2, r7, r0
 8018f16:	8812      	ldrh	r2, [r2, #0]
 8018f18:	491b      	ldr	r1, [pc, #108]	@ (8018f88 <USB_EPStartXfer+0x758>)
 8018f1a:	430a      	orrs	r2, r1
 8018f1c:	b292      	uxth	r2, r2
 8018f1e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	2250      	movs	r2, #80	@ 0x50
 8018f28:	5a9b      	ldrh	r3, [r3, r2]
 8018f2a:	b29b      	uxth	r3, r3
 8018f2c:	001a      	movs	r2, r3
 8018f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018f30:	189b      	adds	r3, r3, r2
 8018f32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	781b      	ldrb	r3, [r3, #0]
 8018f38:	00da      	lsls	r2, r3, #3
 8018f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018f3c:	18d3      	adds	r3, r2, r3
 8018f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8018f78 <USB_EPStartXfer+0x748>)
 8018f40:	4694      	mov	ip, r2
 8018f42:	4463      	add	r3, ip
 8018f44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018f46:	1d7b      	adds	r3, r7, #5
 8018f48:	33ff      	adds	r3, #255	@ 0xff
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	b29a      	uxth	r2, r3
 8018f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018f50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8018f52:	2076      	movs	r0, #118	@ 0x76
 8018f54:	183b      	adds	r3, r7, r0
 8018f56:	683a      	ldr	r2, [r7, #0]
 8018f58:	8912      	ldrh	r2, [r2, #8]
 8018f5a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	6959      	ldr	r1, [r3, #20]
 8018f60:	1d7b      	adds	r3, r7, #5
 8018f62:	33ff      	adds	r3, #255	@ 0xff
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	b29c      	uxth	r4, r3
 8018f68:	183b      	adds	r3, r7, r0
 8018f6a:	881a      	ldrh	r2, [r3, #0]
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	0023      	movs	r3, r4
 8018f70:	f000 fed0 	bl	8019d14 <USB_WritePMA>
 8018f74:	e16f      	b.n	8019256 <USB_EPStartXfer+0xa26>
 8018f76:	46c0      	nop			@ (mov r8, r8)
 8018f78:	00000402 	.word	0x00000402
 8018f7c:	ffff8000 	.word	0xffff8000
 8018f80:	00000406 	.word	0x00000406
 8018f84:	ffff8e8f 	.word	0xffff8e8f
 8018f88:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	6a1a      	ldr	r2, [r3, #32]
 8018f90:	1d7b      	adds	r3, r7, #5
 8018f92:	33ff      	adds	r3, #255	@ 0xff
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	1ad2      	subs	r2, r2, r3
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8018f9c:	687a      	ldr	r2, [r7, #4]
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	781b      	ldrb	r3, [r3, #0]
 8018fa2:	009b      	lsls	r3, r3, #2
 8018fa4:	18d3      	adds	r3, r2, r3
 8018fa6:	881b      	ldrh	r3, [r3, #0]
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	001a      	movs	r2, r3
 8018fac:	2340      	movs	r3, #64	@ 0x40
 8018fae:	4013      	ands	r3, r2
 8018fb0:	d100      	bne.n	8018fb4 <USB_EPStartXfer+0x784>
 8018fb2:	e0a4      	b.n	80190fe <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	785b      	ldrb	r3, [r3, #1]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d000      	beq.n	8018fc2 <USB_EPStartXfer+0x792>
 8018fc0:	e070      	b.n	80190a4 <USB_EPStartXfer+0x874>
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2250      	movs	r2, #80	@ 0x50
 8018fca:	5a9b      	ldrh	r3, [r3, r2]
 8018fcc:	b29b      	uxth	r3, r3
 8018fce:	001a      	movs	r2, r3
 8018fd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018fd2:	189b      	adds	r3, r3, r2
 8018fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	00da      	lsls	r2, r3, #3
 8018fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018fde:	18d3      	adds	r3, r2, r3
 8018fe0:	4abc      	ldr	r2, [pc, #752]	@ (80192d4 <USB_EPStartXfer+0xaa4>)
 8018fe2:	4694      	mov	ip, r2
 8018fe4:	4463      	add	r3, ip
 8018fe6:	667b      	str	r3, [r7, #100]	@ 0x64
 8018fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018fea:	881b      	ldrh	r3, [r3, #0]
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	059b      	lsls	r3, r3, #22
 8018ff0:	0d9b      	lsrs	r3, r3, #22
 8018ff2:	b29a      	uxth	r2, r3
 8018ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018ff6:	801a      	strh	r2, [r3, #0]
 8018ff8:	1d7b      	adds	r3, r7, #5
 8018ffa:	33ff      	adds	r3, #255	@ 0xff
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	2b3e      	cmp	r3, #62	@ 0x3e
 8019000:	d922      	bls.n	8019048 <USB_EPStartXfer+0x818>
 8019002:	1d7b      	adds	r3, r7, #5
 8019004:	33ff      	adds	r3, #255	@ 0xff
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	095b      	lsrs	r3, r3, #5
 801900a:	21f0      	movs	r1, #240	@ 0xf0
 801900c:	187a      	adds	r2, r7, r1
 801900e:	6013      	str	r3, [r2, #0]
 8019010:	1d7b      	adds	r3, r7, #5
 8019012:	33ff      	adds	r3, #255	@ 0xff
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	221f      	movs	r2, #31
 8019018:	4013      	ands	r3, r2
 801901a:	d104      	bne.n	8019026 <USB_EPStartXfer+0x7f6>
 801901c:	187b      	adds	r3, r7, r1
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	3b01      	subs	r3, #1
 8019022:	187a      	adds	r2, r7, r1
 8019024:	6013      	str	r3, [r2, #0]
 8019026:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019028:	881b      	ldrh	r3, [r3, #0]
 801902a:	b29a      	uxth	r2, r3
 801902c:	23f0      	movs	r3, #240	@ 0xf0
 801902e:	18fb      	adds	r3, r7, r3
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	b29b      	uxth	r3, r3
 8019034:	029b      	lsls	r3, r3, #10
 8019036:	b29b      	uxth	r3, r3
 8019038:	4313      	orrs	r3, r2
 801903a:	b29b      	uxth	r3, r3
 801903c:	4aa6      	ldr	r2, [pc, #664]	@ (80192d8 <USB_EPStartXfer+0xaa8>)
 801903e:	4313      	orrs	r3, r2
 8019040:	b29a      	uxth	r2, r3
 8019042:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019044:	801a      	strh	r2, [r3, #0]
 8019046:	e048      	b.n	80190da <USB_EPStartXfer+0x8aa>
 8019048:	1d7b      	adds	r3, r7, #5
 801904a:	33ff      	adds	r3, #255	@ 0xff
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d108      	bne.n	8019064 <USB_EPStartXfer+0x834>
 8019052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019054:	881b      	ldrh	r3, [r3, #0]
 8019056:	b29b      	uxth	r3, r3
 8019058:	4a9f      	ldr	r2, [pc, #636]	@ (80192d8 <USB_EPStartXfer+0xaa8>)
 801905a:	4313      	orrs	r3, r2
 801905c:	b29a      	uxth	r2, r3
 801905e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019060:	801a      	strh	r2, [r3, #0]
 8019062:	e03a      	b.n	80190da <USB_EPStartXfer+0x8aa>
 8019064:	1d7b      	adds	r3, r7, #5
 8019066:	33ff      	adds	r3, #255	@ 0xff
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	085b      	lsrs	r3, r3, #1
 801906c:	21f0      	movs	r1, #240	@ 0xf0
 801906e:	187a      	adds	r2, r7, r1
 8019070:	6013      	str	r3, [r2, #0]
 8019072:	1d7b      	adds	r3, r7, #5
 8019074:	33ff      	adds	r3, #255	@ 0xff
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	2201      	movs	r2, #1
 801907a:	4013      	ands	r3, r2
 801907c:	d004      	beq.n	8019088 <USB_EPStartXfer+0x858>
 801907e:	187b      	adds	r3, r7, r1
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	3301      	adds	r3, #1
 8019084:	187a      	adds	r2, r7, r1
 8019086:	6013      	str	r3, [r2, #0]
 8019088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801908a:	881b      	ldrh	r3, [r3, #0]
 801908c:	b29a      	uxth	r2, r3
 801908e:	23f0      	movs	r3, #240	@ 0xf0
 8019090:	18fb      	adds	r3, r7, r3
 8019092:	681b      	ldr	r3, [r3, #0]
 8019094:	b29b      	uxth	r3, r3
 8019096:	029b      	lsls	r3, r3, #10
 8019098:	b29b      	uxth	r3, r3
 801909a:	4313      	orrs	r3, r2
 801909c:	b29a      	uxth	r2, r3
 801909e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80190a0:	801a      	strh	r2, [r3, #0]
 80190a2:	e01a      	b.n	80190da <USB_EPStartXfer+0x8aa>
 80190a4:	683b      	ldr	r3, [r7, #0]
 80190a6:	785b      	ldrb	r3, [r3, #1]
 80190a8:	2b01      	cmp	r3, #1
 80190aa:	d116      	bne.n	80190da <USB_EPStartXfer+0x8aa>
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	2250      	movs	r2, #80	@ 0x50
 80190b0:	5a9b      	ldrh	r3, [r3, r2]
 80190b2:	b29b      	uxth	r3, r3
 80190b4:	001a      	movs	r2, r3
 80190b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80190b8:	189b      	adds	r3, r3, r2
 80190ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80190bc:	683b      	ldr	r3, [r7, #0]
 80190be:	781b      	ldrb	r3, [r3, #0]
 80190c0:	00da      	lsls	r2, r3, #3
 80190c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80190c4:	18d3      	adds	r3, r2, r3
 80190c6:	4a83      	ldr	r2, [pc, #524]	@ (80192d4 <USB_EPStartXfer+0xaa4>)
 80190c8:	4694      	mov	ip, r2
 80190ca:	4463      	add	r3, ip
 80190cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80190ce:	1d7b      	adds	r3, r7, #5
 80190d0:	33ff      	adds	r3, #255	@ 0xff
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	b29a      	uxth	r2, r3
 80190d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80190d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80190da:	2076      	movs	r0, #118	@ 0x76
 80190dc:	183b      	adds	r3, r7, r0
 80190de:	683a      	ldr	r2, [r7, #0]
 80190e0:	8952      	ldrh	r2, [r2, #10]
 80190e2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	6959      	ldr	r1, [r3, #20]
 80190e8:	1d7b      	adds	r3, r7, #5
 80190ea:	33ff      	adds	r3, #255	@ 0xff
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	b29c      	uxth	r4, r3
 80190f0:	183b      	adds	r3, r7, r0
 80190f2:	881a      	ldrh	r2, [r3, #0]
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	0023      	movs	r3, r4
 80190f8:	f000 fe0c 	bl	8019d14 <USB_WritePMA>
 80190fc:	e0ab      	b.n	8019256 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	785b      	ldrb	r3, [r3, #1]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d000      	beq.n	8019108 <USB_EPStartXfer+0x8d8>
 8019106:	e070      	b.n	80191ea <USB_EPStartXfer+0x9ba>
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	2250      	movs	r2, #80	@ 0x50
 8019110:	5a9b      	ldrh	r3, [r3, r2]
 8019112:	b29b      	uxth	r3, r3
 8019114:	001a      	movs	r2, r3
 8019116:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019118:	189b      	adds	r3, r3, r2
 801911a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801911c:	683b      	ldr	r3, [r7, #0]
 801911e:	781b      	ldrb	r3, [r3, #0]
 8019120:	00da      	lsls	r2, r3, #3
 8019122:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019124:	18d3      	adds	r3, r2, r3
 8019126:	4a6d      	ldr	r2, [pc, #436]	@ (80192dc <USB_EPStartXfer+0xaac>)
 8019128:	4694      	mov	ip, r2
 801912a:	4463      	add	r3, ip
 801912c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801912e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019130:	881b      	ldrh	r3, [r3, #0]
 8019132:	b29b      	uxth	r3, r3
 8019134:	059b      	lsls	r3, r3, #22
 8019136:	0d9b      	lsrs	r3, r3, #22
 8019138:	b29a      	uxth	r2, r3
 801913a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801913c:	801a      	strh	r2, [r3, #0]
 801913e:	1d7b      	adds	r3, r7, #5
 8019140:	33ff      	adds	r3, #255	@ 0xff
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	2b3e      	cmp	r3, #62	@ 0x3e
 8019146:	d922      	bls.n	801918e <USB_EPStartXfer+0x95e>
 8019148:	1d7b      	adds	r3, r7, #5
 801914a:	33ff      	adds	r3, #255	@ 0xff
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	095b      	lsrs	r3, r3, #5
 8019150:	21ec      	movs	r1, #236	@ 0xec
 8019152:	187a      	adds	r2, r7, r1
 8019154:	6013      	str	r3, [r2, #0]
 8019156:	1d7b      	adds	r3, r7, #5
 8019158:	33ff      	adds	r3, #255	@ 0xff
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	221f      	movs	r2, #31
 801915e:	4013      	ands	r3, r2
 8019160:	d104      	bne.n	801916c <USB_EPStartXfer+0x93c>
 8019162:	187b      	adds	r3, r7, r1
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	3b01      	subs	r3, #1
 8019168:	187a      	adds	r2, r7, r1
 801916a:	6013      	str	r3, [r2, #0]
 801916c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801916e:	881b      	ldrh	r3, [r3, #0]
 8019170:	b29a      	uxth	r2, r3
 8019172:	23ec      	movs	r3, #236	@ 0xec
 8019174:	18fb      	adds	r3, r7, r3
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	b29b      	uxth	r3, r3
 801917a:	029b      	lsls	r3, r3, #10
 801917c:	b29b      	uxth	r3, r3
 801917e:	4313      	orrs	r3, r2
 8019180:	b29b      	uxth	r3, r3
 8019182:	4a55      	ldr	r2, [pc, #340]	@ (80192d8 <USB_EPStartXfer+0xaa8>)
 8019184:	4313      	orrs	r3, r2
 8019186:	b29a      	uxth	r2, r3
 8019188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801918a:	801a      	strh	r2, [r3, #0]
 801918c:	e052      	b.n	8019234 <USB_EPStartXfer+0xa04>
 801918e:	1d7b      	adds	r3, r7, #5
 8019190:	33ff      	adds	r3, #255	@ 0xff
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	2b00      	cmp	r3, #0
 8019196:	d108      	bne.n	80191aa <USB_EPStartXfer+0x97a>
 8019198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801919a:	881b      	ldrh	r3, [r3, #0]
 801919c:	b29b      	uxth	r3, r3
 801919e:	4a4e      	ldr	r2, [pc, #312]	@ (80192d8 <USB_EPStartXfer+0xaa8>)
 80191a0:	4313      	orrs	r3, r2
 80191a2:	b29a      	uxth	r2, r3
 80191a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80191a6:	801a      	strh	r2, [r3, #0]
 80191a8:	e044      	b.n	8019234 <USB_EPStartXfer+0xa04>
 80191aa:	1d7b      	adds	r3, r7, #5
 80191ac:	33ff      	adds	r3, #255	@ 0xff
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	085b      	lsrs	r3, r3, #1
 80191b2:	21ec      	movs	r1, #236	@ 0xec
 80191b4:	187a      	adds	r2, r7, r1
 80191b6:	6013      	str	r3, [r2, #0]
 80191b8:	1d7b      	adds	r3, r7, #5
 80191ba:	33ff      	adds	r3, #255	@ 0xff
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	2201      	movs	r2, #1
 80191c0:	4013      	ands	r3, r2
 80191c2:	d004      	beq.n	80191ce <USB_EPStartXfer+0x99e>
 80191c4:	187b      	adds	r3, r7, r1
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	3301      	adds	r3, #1
 80191ca:	187a      	adds	r2, r7, r1
 80191cc:	6013      	str	r3, [r2, #0]
 80191ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80191d0:	881b      	ldrh	r3, [r3, #0]
 80191d2:	b29a      	uxth	r2, r3
 80191d4:	23ec      	movs	r3, #236	@ 0xec
 80191d6:	18fb      	adds	r3, r7, r3
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	b29b      	uxth	r3, r3
 80191dc:	029b      	lsls	r3, r3, #10
 80191de:	b29b      	uxth	r3, r3
 80191e0:	4313      	orrs	r3, r2
 80191e2:	b29a      	uxth	r2, r3
 80191e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80191e6:	801a      	strh	r2, [r3, #0]
 80191e8:	e024      	b.n	8019234 <USB_EPStartXfer+0xa04>
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	785b      	ldrb	r3, [r3, #1]
 80191ee:	2b01      	cmp	r3, #1
 80191f0:	d120      	bne.n	8019234 <USB_EPStartXfer+0xa04>
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	2184      	movs	r1, #132	@ 0x84
 80191f6:	187a      	adds	r2, r7, r1
 80191f8:	6013      	str	r3, [r2, #0]
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	2250      	movs	r2, #80	@ 0x50
 80191fe:	5a9b      	ldrh	r3, [r3, r2]
 8019200:	b29b      	uxth	r3, r3
 8019202:	001a      	movs	r2, r3
 8019204:	187b      	adds	r3, r7, r1
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	189b      	adds	r3, r3, r2
 801920a:	187a      	adds	r2, r7, r1
 801920c:	6013      	str	r3, [r2, #0]
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	00da      	lsls	r2, r3, #3
 8019214:	187b      	adds	r3, r7, r1
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	18d3      	adds	r3, r2, r3
 801921a:	4a30      	ldr	r2, [pc, #192]	@ (80192dc <USB_EPStartXfer+0xaac>)
 801921c:	4694      	mov	ip, r2
 801921e:	4463      	add	r3, ip
 8019220:	2180      	movs	r1, #128	@ 0x80
 8019222:	187a      	adds	r2, r7, r1
 8019224:	6013      	str	r3, [r2, #0]
 8019226:	1d7b      	adds	r3, r7, #5
 8019228:	33ff      	adds	r3, #255	@ 0xff
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	b29a      	uxth	r2, r3
 801922e:	187b      	adds	r3, r7, r1
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019234:	2076      	movs	r0, #118	@ 0x76
 8019236:	183b      	adds	r3, r7, r0
 8019238:	683a      	ldr	r2, [r7, #0]
 801923a:	8912      	ldrh	r2, [r2, #8]
 801923c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801923e:	683b      	ldr	r3, [r7, #0]
 8019240:	6959      	ldr	r1, [r3, #20]
 8019242:	1d7b      	adds	r3, r7, #5
 8019244:	33ff      	adds	r3, #255	@ 0xff
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	b29c      	uxth	r4, r3
 801924a:	183b      	adds	r3, r7, r0
 801924c:	881a      	ldrh	r2, [r3, #0]
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	0023      	movs	r3, r4
 8019252:	f000 fd5f 	bl	8019d14 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8019256:	687a      	ldr	r2, [r7, #4]
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	009b      	lsls	r3, r3, #2
 801925e:	18d3      	adds	r3, r2, r3
 8019260:	881b      	ldrh	r3, [r3, #0]
 8019262:	b29a      	uxth	r2, r3
 8019264:	200a      	movs	r0, #10
 8019266:	183b      	adds	r3, r7, r0
 8019268:	491d      	ldr	r1, [pc, #116]	@ (80192e0 <USB_EPStartXfer+0xab0>)
 801926a:	400a      	ands	r2, r1
 801926c:	801a      	strh	r2, [r3, #0]
 801926e:	183b      	adds	r3, r7, r0
 8019270:	183a      	adds	r2, r7, r0
 8019272:	8812      	ldrh	r2, [r2, #0]
 8019274:	2110      	movs	r1, #16
 8019276:	404a      	eors	r2, r1
 8019278:	801a      	strh	r2, [r3, #0]
 801927a:	183b      	adds	r3, r7, r0
 801927c:	183a      	adds	r2, r7, r0
 801927e:	8812      	ldrh	r2, [r2, #0]
 8019280:	2120      	movs	r1, #32
 8019282:	404a      	eors	r2, r1
 8019284:	801a      	strh	r2, [r3, #0]
 8019286:	687a      	ldr	r2, [r7, #4]
 8019288:	683b      	ldr	r3, [r7, #0]
 801928a:	781b      	ldrb	r3, [r3, #0]
 801928c:	009b      	lsls	r3, r3, #2
 801928e:	18d3      	adds	r3, r2, r3
 8019290:	183a      	adds	r2, r7, r0
 8019292:	8812      	ldrh	r2, [r2, #0]
 8019294:	4913      	ldr	r1, [pc, #76]	@ (80192e4 <USB_EPStartXfer+0xab4>)
 8019296:	430a      	orrs	r2, r1
 8019298:	b292      	uxth	r2, r2
 801929a:	801a      	strh	r2, [r3, #0]
 801929c:	f000 fbf4 	bl	8019a88 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	7b1b      	ldrb	r3, [r3, #12]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d000      	beq.n	80192aa <USB_EPStartXfer+0xa7a>
 80192a8:	e0a9      	b.n	80193fe <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80192aa:	683b      	ldr	r3, [r7, #0]
 80192ac:	699a      	ldr	r2, [r3, #24]
 80192ae:	683b      	ldr	r3, [r7, #0]
 80192b0:	691b      	ldr	r3, [r3, #16]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d918      	bls.n	80192e8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	691b      	ldr	r3, [r3, #16]
 80192ba:	1d7a      	adds	r2, r7, #5
 80192bc:	32ff      	adds	r2, #255	@ 0xff
 80192be:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80192c0:	683b      	ldr	r3, [r7, #0]
 80192c2:	699a      	ldr	r2, [r3, #24]
 80192c4:	1d7b      	adds	r3, r7, #5
 80192c6:	33ff      	adds	r3, #255	@ 0xff
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	1ad2      	subs	r2, r2, r3
 80192cc:	683b      	ldr	r3, [r7, #0]
 80192ce:	619a      	str	r2, [r3, #24]
 80192d0:	e012      	b.n	80192f8 <USB_EPStartXfer+0xac8>
 80192d2:	46c0      	nop			@ (mov r8, r8)
 80192d4:	00000406 	.word	0x00000406
 80192d8:	ffff8000 	.word	0xffff8000
 80192dc:	00000402 	.word	0x00000402
 80192e0:	ffff8fbf 	.word	0xffff8fbf
 80192e4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80192e8:	683b      	ldr	r3, [r7, #0]
 80192ea:	699b      	ldr	r3, [r3, #24]
 80192ec:	1d7a      	adds	r2, r7, #5
 80192ee:	32ff      	adds	r2, #255	@ 0xff
 80192f0:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	2200      	movs	r2, #0
 80192f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	2190      	movs	r1, #144	@ 0x90
 80192fc:	187a      	adds	r2, r7, r1
 80192fe:	6013      	str	r3, [r2, #0]
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	2250      	movs	r2, #80	@ 0x50
 8019304:	5a9b      	ldrh	r3, [r3, r2]
 8019306:	b29b      	uxth	r3, r3
 8019308:	001a      	movs	r2, r3
 801930a:	187b      	adds	r3, r7, r1
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	189b      	adds	r3, r3, r2
 8019310:	187a      	adds	r2, r7, r1
 8019312:	6013      	str	r3, [r2, #0]
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	781b      	ldrb	r3, [r3, #0]
 8019318:	00da      	lsls	r2, r3, #3
 801931a:	187b      	adds	r3, r7, r1
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	18d3      	adds	r3, r2, r3
 8019320:	4acf      	ldr	r2, [pc, #828]	@ (8019660 <USB_EPStartXfer+0xe30>)
 8019322:	4694      	mov	ip, r2
 8019324:	4463      	add	r3, ip
 8019326:	218c      	movs	r1, #140	@ 0x8c
 8019328:	187a      	adds	r2, r7, r1
 801932a:	6013      	str	r3, [r2, #0]
 801932c:	187b      	adds	r3, r7, r1
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	881b      	ldrh	r3, [r3, #0]
 8019332:	b29b      	uxth	r3, r3
 8019334:	059b      	lsls	r3, r3, #22
 8019336:	0d9b      	lsrs	r3, r3, #22
 8019338:	b29a      	uxth	r2, r3
 801933a:	187b      	adds	r3, r7, r1
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	801a      	strh	r2, [r3, #0]
 8019340:	1d7b      	adds	r3, r7, #5
 8019342:	33ff      	adds	r3, #255	@ 0xff
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	2b3e      	cmp	r3, #62	@ 0x3e
 8019348:	d925      	bls.n	8019396 <USB_EPStartXfer+0xb66>
 801934a:	1d7b      	adds	r3, r7, #5
 801934c:	33ff      	adds	r3, #255	@ 0xff
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	095b      	lsrs	r3, r3, #5
 8019352:	21e8      	movs	r1, #232	@ 0xe8
 8019354:	187a      	adds	r2, r7, r1
 8019356:	6013      	str	r3, [r2, #0]
 8019358:	1d7b      	adds	r3, r7, #5
 801935a:	33ff      	adds	r3, #255	@ 0xff
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	221f      	movs	r2, #31
 8019360:	4013      	ands	r3, r2
 8019362:	d104      	bne.n	801936e <USB_EPStartXfer+0xb3e>
 8019364:	187b      	adds	r3, r7, r1
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	3b01      	subs	r3, #1
 801936a:	187a      	adds	r2, r7, r1
 801936c:	6013      	str	r3, [r2, #0]
 801936e:	218c      	movs	r1, #140	@ 0x8c
 8019370:	187b      	adds	r3, r7, r1
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	881b      	ldrh	r3, [r3, #0]
 8019376:	b29a      	uxth	r2, r3
 8019378:	23e8      	movs	r3, #232	@ 0xe8
 801937a:	18fb      	adds	r3, r7, r3
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	b29b      	uxth	r3, r3
 8019380:	029b      	lsls	r3, r3, #10
 8019382:	b29b      	uxth	r3, r3
 8019384:	4313      	orrs	r3, r2
 8019386:	b29b      	uxth	r3, r3
 8019388:	4ab6      	ldr	r2, [pc, #728]	@ (8019664 <USB_EPStartXfer+0xe34>)
 801938a:	4313      	orrs	r3, r2
 801938c:	b29a      	uxth	r2, r3
 801938e:	187b      	adds	r3, r7, r1
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	801a      	strh	r2, [r3, #0]
 8019394:	e353      	b.n	8019a3e <USB_EPStartXfer+0x120e>
 8019396:	1d7b      	adds	r3, r7, #5
 8019398:	33ff      	adds	r3, #255	@ 0xff
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d10b      	bne.n	80193b8 <USB_EPStartXfer+0xb88>
 80193a0:	218c      	movs	r1, #140	@ 0x8c
 80193a2:	187b      	adds	r3, r7, r1
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	881b      	ldrh	r3, [r3, #0]
 80193a8:	b29b      	uxth	r3, r3
 80193aa:	4aae      	ldr	r2, [pc, #696]	@ (8019664 <USB_EPStartXfer+0xe34>)
 80193ac:	4313      	orrs	r3, r2
 80193ae:	b29a      	uxth	r2, r3
 80193b0:	187b      	adds	r3, r7, r1
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	801a      	strh	r2, [r3, #0]
 80193b6:	e342      	b.n	8019a3e <USB_EPStartXfer+0x120e>
 80193b8:	1d7b      	adds	r3, r7, #5
 80193ba:	33ff      	adds	r3, #255	@ 0xff
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	085b      	lsrs	r3, r3, #1
 80193c0:	21e8      	movs	r1, #232	@ 0xe8
 80193c2:	187a      	adds	r2, r7, r1
 80193c4:	6013      	str	r3, [r2, #0]
 80193c6:	1d7b      	adds	r3, r7, #5
 80193c8:	33ff      	adds	r3, #255	@ 0xff
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	2201      	movs	r2, #1
 80193ce:	4013      	ands	r3, r2
 80193d0:	d004      	beq.n	80193dc <USB_EPStartXfer+0xbac>
 80193d2:	187b      	adds	r3, r7, r1
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	3301      	adds	r3, #1
 80193d8:	187a      	adds	r2, r7, r1
 80193da:	6013      	str	r3, [r2, #0]
 80193dc:	218c      	movs	r1, #140	@ 0x8c
 80193de:	187b      	adds	r3, r7, r1
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	881b      	ldrh	r3, [r3, #0]
 80193e4:	b29a      	uxth	r2, r3
 80193e6:	23e8      	movs	r3, #232	@ 0xe8
 80193e8:	18fb      	adds	r3, r7, r3
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	b29b      	uxth	r3, r3
 80193ee:	029b      	lsls	r3, r3, #10
 80193f0:	b29b      	uxth	r3, r3
 80193f2:	4313      	orrs	r3, r2
 80193f4:	b29a      	uxth	r2, r3
 80193f6:	187b      	adds	r3, r7, r1
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	801a      	strh	r2, [r3, #0]
 80193fc:	e31f      	b.n	8019a3e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80193fe:	683b      	ldr	r3, [r7, #0]
 8019400:	78db      	ldrb	r3, [r3, #3]
 8019402:	2b02      	cmp	r3, #2
 8019404:	d000      	beq.n	8019408 <USB_EPStartXfer+0xbd8>
 8019406:	e191      	b.n	801972c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	785b      	ldrb	r3, [r3, #1]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d000      	beq.n	8019412 <USB_EPStartXfer+0xbe2>
 8019410:	e07c      	b.n	801950c <USB_EPStartXfer+0xcdc>
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	21ac      	movs	r1, #172	@ 0xac
 8019416:	187a      	adds	r2, r7, r1
 8019418:	6013      	str	r3, [r2, #0]
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2250      	movs	r2, #80	@ 0x50
 801941e:	5a9b      	ldrh	r3, [r3, r2]
 8019420:	b29b      	uxth	r3, r3
 8019422:	001a      	movs	r2, r3
 8019424:	187b      	adds	r3, r7, r1
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	189b      	adds	r3, r3, r2
 801942a:	187a      	adds	r2, r7, r1
 801942c:	6013      	str	r3, [r2, #0]
 801942e:	683b      	ldr	r3, [r7, #0]
 8019430:	781b      	ldrb	r3, [r3, #0]
 8019432:	00da      	lsls	r2, r3, #3
 8019434:	187b      	adds	r3, r7, r1
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	18d3      	adds	r3, r2, r3
 801943a:	4a8b      	ldr	r2, [pc, #556]	@ (8019668 <USB_EPStartXfer+0xe38>)
 801943c:	4694      	mov	ip, r2
 801943e:	4463      	add	r3, ip
 8019440:	21a8      	movs	r1, #168	@ 0xa8
 8019442:	187a      	adds	r2, r7, r1
 8019444:	6013      	str	r3, [r2, #0]
 8019446:	187b      	adds	r3, r7, r1
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	881b      	ldrh	r3, [r3, #0]
 801944c:	b29b      	uxth	r3, r3
 801944e:	059b      	lsls	r3, r3, #22
 8019450:	0d9b      	lsrs	r3, r3, #22
 8019452:	b29a      	uxth	r2, r3
 8019454:	187b      	adds	r3, r7, r1
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	801a      	strh	r2, [r3, #0]
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	691b      	ldr	r3, [r3, #16]
 801945e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019460:	d923      	bls.n	80194aa <USB_EPStartXfer+0xc7a>
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	691b      	ldr	r3, [r3, #16]
 8019466:	095b      	lsrs	r3, r3, #5
 8019468:	21e4      	movs	r1, #228	@ 0xe4
 801946a:	187a      	adds	r2, r7, r1
 801946c:	6013      	str	r3, [r2, #0]
 801946e:	683b      	ldr	r3, [r7, #0]
 8019470:	691b      	ldr	r3, [r3, #16]
 8019472:	221f      	movs	r2, #31
 8019474:	4013      	ands	r3, r2
 8019476:	d104      	bne.n	8019482 <USB_EPStartXfer+0xc52>
 8019478:	187b      	adds	r3, r7, r1
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	3b01      	subs	r3, #1
 801947e:	187a      	adds	r2, r7, r1
 8019480:	6013      	str	r3, [r2, #0]
 8019482:	21a8      	movs	r1, #168	@ 0xa8
 8019484:	187b      	adds	r3, r7, r1
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	881b      	ldrh	r3, [r3, #0]
 801948a:	b29a      	uxth	r2, r3
 801948c:	23e4      	movs	r3, #228	@ 0xe4
 801948e:	18fb      	adds	r3, r7, r3
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	b29b      	uxth	r3, r3
 8019494:	029b      	lsls	r3, r3, #10
 8019496:	b29b      	uxth	r3, r3
 8019498:	4313      	orrs	r3, r2
 801949a:	b29b      	uxth	r3, r3
 801949c:	4a71      	ldr	r2, [pc, #452]	@ (8019664 <USB_EPStartXfer+0xe34>)
 801949e:	4313      	orrs	r3, r2
 80194a0:	b29a      	uxth	r2, r3
 80194a2:	187b      	adds	r3, r7, r1
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	801a      	strh	r2, [r3, #0]
 80194a8:	e054      	b.n	8019554 <USB_EPStartXfer+0xd24>
 80194aa:	683b      	ldr	r3, [r7, #0]
 80194ac:	691b      	ldr	r3, [r3, #16]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d10b      	bne.n	80194ca <USB_EPStartXfer+0xc9a>
 80194b2:	21a8      	movs	r1, #168	@ 0xa8
 80194b4:	187b      	adds	r3, r7, r1
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	881b      	ldrh	r3, [r3, #0]
 80194ba:	b29b      	uxth	r3, r3
 80194bc:	4a69      	ldr	r2, [pc, #420]	@ (8019664 <USB_EPStartXfer+0xe34>)
 80194be:	4313      	orrs	r3, r2
 80194c0:	b29a      	uxth	r2, r3
 80194c2:	187b      	adds	r3, r7, r1
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	801a      	strh	r2, [r3, #0]
 80194c8:	e044      	b.n	8019554 <USB_EPStartXfer+0xd24>
 80194ca:	683b      	ldr	r3, [r7, #0]
 80194cc:	691b      	ldr	r3, [r3, #16]
 80194ce:	085b      	lsrs	r3, r3, #1
 80194d0:	21e4      	movs	r1, #228	@ 0xe4
 80194d2:	187a      	adds	r2, r7, r1
 80194d4:	6013      	str	r3, [r2, #0]
 80194d6:	683b      	ldr	r3, [r7, #0]
 80194d8:	691b      	ldr	r3, [r3, #16]
 80194da:	2201      	movs	r2, #1
 80194dc:	4013      	ands	r3, r2
 80194de:	d004      	beq.n	80194ea <USB_EPStartXfer+0xcba>
 80194e0:	187b      	adds	r3, r7, r1
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	3301      	adds	r3, #1
 80194e6:	187a      	adds	r2, r7, r1
 80194e8:	6013      	str	r3, [r2, #0]
 80194ea:	21a8      	movs	r1, #168	@ 0xa8
 80194ec:	187b      	adds	r3, r7, r1
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	881b      	ldrh	r3, [r3, #0]
 80194f2:	b29a      	uxth	r2, r3
 80194f4:	23e4      	movs	r3, #228	@ 0xe4
 80194f6:	18fb      	adds	r3, r7, r3
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	b29b      	uxth	r3, r3
 80194fc:	029b      	lsls	r3, r3, #10
 80194fe:	b29b      	uxth	r3, r3
 8019500:	4313      	orrs	r3, r2
 8019502:	b29a      	uxth	r2, r3
 8019504:	187b      	adds	r3, r7, r1
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	801a      	strh	r2, [r3, #0]
 801950a:	e023      	b.n	8019554 <USB_EPStartXfer+0xd24>
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	785b      	ldrb	r3, [r3, #1]
 8019510:	2b01      	cmp	r3, #1
 8019512:	d11f      	bne.n	8019554 <USB_EPStartXfer+0xd24>
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	21b4      	movs	r1, #180	@ 0xb4
 8019518:	187a      	adds	r2, r7, r1
 801951a:	6013      	str	r3, [r2, #0]
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2250      	movs	r2, #80	@ 0x50
 8019520:	5a9b      	ldrh	r3, [r3, r2]
 8019522:	b29b      	uxth	r3, r3
 8019524:	001a      	movs	r2, r3
 8019526:	187b      	adds	r3, r7, r1
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	189b      	adds	r3, r3, r2
 801952c:	187a      	adds	r2, r7, r1
 801952e:	6013      	str	r3, [r2, #0]
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	781b      	ldrb	r3, [r3, #0]
 8019534:	00da      	lsls	r2, r3, #3
 8019536:	187b      	adds	r3, r7, r1
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	18d3      	adds	r3, r2, r3
 801953c:	4a4a      	ldr	r2, [pc, #296]	@ (8019668 <USB_EPStartXfer+0xe38>)
 801953e:	4694      	mov	ip, r2
 8019540:	4463      	add	r3, ip
 8019542:	21b0      	movs	r1, #176	@ 0xb0
 8019544:	187a      	adds	r2, r7, r1
 8019546:	6013      	str	r3, [r2, #0]
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	691b      	ldr	r3, [r3, #16]
 801954c:	b29a      	uxth	r2, r3
 801954e:	187b      	adds	r3, r7, r1
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	801a      	strh	r2, [r3, #0]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	22a4      	movs	r2, #164	@ 0xa4
 8019558:	18ba      	adds	r2, r7, r2
 801955a:	6013      	str	r3, [r2, #0]
 801955c:	683b      	ldr	r3, [r7, #0]
 801955e:	785b      	ldrb	r3, [r3, #1]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d000      	beq.n	8019566 <USB_EPStartXfer+0xd36>
 8019564:	e082      	b.n	801966c <USB_EPStartXfer+0xe3c>
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	219c      	movs	r1, #156	@ 0x9c
 801956a:	187a      	adds	r2, r7, r1
 801956c:	6013      	str	r3, [r2, #0]
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	2250      	movs	r2, #80	@ 0x50
 8019572:	5a9b      	ldrh	r3, [r3, r2]
 8019574:	b29b      	uxth	r3, r3
 8019576:	001a      	movs	r2, r3
 8019578:	187b      	adds	r3, r7, r1
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	189b      	adds	r3, r3, r2
 801957e:	187a      	adds	r2, r7, r1
 8019580:	6013      	str	r3, [r2, #0]
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	781b      	ldrb	r3, [r3, #0]
 8019586:	00da      	lsls	r2, r3, #3
 8019588:	187b      	adds	r3, r7, r1
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	18d3      	adds	r3, r2, r3
 801958e:	4a34      	ldr	r2, [pc, #208]	@ (8019660 <USB_EPStartXfer+0xe30>)
 8019590:	4694      	mov	ip, r2
 8019592:	4463      	add	r3, ip
 8019594:	2198      	movs	r1, #152	@ 0x98
 8019596:	187a      	adds	r2, r7, r1
 8019598:	6013      	str	r3, [r2, #0]
 801959a:	187b      	adds	r3, r7, r1
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	881b      	ldrh	r3, [r3, #0]
 80195a0:	b29b      	uxth	r3, r3
 80195a2:	059b      	lsls	r3, r3, #22
 80195a4:	0d9b      	lsrs	r3, r3, #22
 80195a6:	b29a      	uxth	r2, r3
 80195a8:	187b      	adds	r3, r7, r1
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	801a      	strh	r2, [r3, #0]
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	691b      	ldr	r3, [r3, #16]
 80195b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80195b4:	d923      	bls.n	80195fe <USB_EPStartXfer+0xdce>
 80195b6:	683b      	ldr	r3, [r7, #0]
 80195b8:	691b      	ldr	r3, [r3, #16]
 80195ba:	095b      	lsrs	r3, r3, #5
 80195bc:	21e0      	movs	r1, #224	@ 0xe0
 80195be:	187a      	adds	r2, r7, r1
 80195c0:	6013      	str	r3, [r2, #0]
 80195c2:	683b      	ldr	r3, [r7, #0]
 80195c4:	691b      	ldr	r3, [r3, #16]
 80195c6:	221f      	movs	r2, #31
 80195c8:	4013      	ands	r3, r2
 80195ca:	d104      	bne.n	80195d6 <USB_EPStartXfer+0xda6>
 80195cc:	187b      	adds	r3, r7, r1
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	3b01      	subs	r3, #1
 80195d2:	187a      	adds	r2, r7, r1
 80195d4:	6013      	str	r3, [r2, #0]
 80195d6:	2198      	movs	r1, #152	@ 0x98
 80195d8:	187b      	adds	r3, r7, r1
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	881b      	ldrh	r3, [r3, #0]
 80195de:	b29a      	uxth	r2, r3
 80195e0:	23e0      	movs	r3, #224	@ 0xe0
 80195e2:	18fb      	adds	r3, r7, r3
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	b29b      	uxth	r3, r3
 80195e8:	029b      	lsls	r3, r3, #10
 80195ea:	b29b      	uxth	r3, r3
 80195ec:	4313      	orrs	r3, r2
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	4a1c      	ldr	r2, [pc, #112]	@ (8019664 <USB_EPStartXfer+0xe34>)
 80195f2:	4313      	orrs	r3, r2
 80195f4:	b29a      	uxth	r2, r3
 80195f6:	187b      	adds	r3, r7, r1
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	801a      	strh	r2, [r3, #0]
 80195fc:	e057      	b.n	80196ae <USB_EPStartXfer+0xe7e>
 80195fe:	683b      	ldr	r3, [r7, #0]
 8019600:	691b      	ldr	r3, [r3, #16]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d10b      	bne.n	801961e <USB_EPStartXfer+0xdee>
 8019606:	2198      	movs	r1, #152	@ 0x98
 8019608:	187b      	adds	r3, r7, r1
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	881b      	ldrh	r3, [r3, #0]
 801960e:	b29b      	uxth	r3, r3
 8019610:	4a14      	ldr	r2, [pc, #80]	@ (8019664 <USB_EPStartXfer+0xe34>)
 8019612:	4313      	orrs	r3, r2
 8019614:	b29a      	uxth	r2, r3
 8019616:	187b      	adds	r3, r7, r1
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	801a      	strh	r2, [r3, #0]
 801961c:	e047      	b.n	80196ae <USB_EPStartXfer+0xe7e>
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	691b      	ldr	r3, [r3, #16]
 8019622:	085b      	lsrs	r3, r3, #1
 8019624:	21e0      	movs	r1, #224	@ 0xe0
 8019626:	187a      	adds	r2, r7, r1
 8019628:	6013      	str	r3, [r2, #0]
 801962a:	683b      	ldr	r3, [r7, #0]
 801962c:	691b      	ldr	r3, [r3, #16]
 801962e:	2201      	movs	r2, #1
 8019630:	4013      	ands	r3, r2
 8019632:	d004      	beq.n	801963e <USB_EPStartXfer+0xe0e>
 8019634:	187b      	adds	r3, r7, r1
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	3301      	adds	r3, #1
 801963a:	187a      	adds	r2, r7, r1
 801963c:	6013      	str	r3, [r2, #0]
 801963e:	2198      	movs	r1, #152	@ 0x98
 8019640:	187b      	adds	r3, r7, r1
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	881b      	ldrh	r3, [r3, #0]
 8019646:	b29a      	uxth	r2, r3
 8019648:	23e0      	movs	r3, #224	@ 0xe0
 801964a:	18fb      	adds	r3, r7, r3
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	b29b      	uxth	r3, r3
 8019650:	029b      	lsls	r3, r3, #10
 8019652:	b29b      	uxth	r3, r3
 8019654:	4313      	orrs	r3, r2
 8019656:	b29a      	uxth	r2, r3
 8019658:	187b      	adds	r3, r7, r1
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	801a      	strh	r2, [r3, #0]
 801965e:	e026      	b.n	80196ae <USB_EPStartXfer+0xe7e>
 8019660:	00000406 	.word	0x00000406
 8019664:	ffff8000 	.word	0xffff8000
 8019668:	00000402 	.word	0x00000402
 801966c:	683b      	ldr	r3, [r7, #0]
 801966e:	785b      	ldrb	r3, [r3, #1]
 8019670:	2b01      	cmp	r3, #1
 8019672:	d11c      	bne.n	80196ae <USB_EPStartXfer+0xe7e>
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	2250      	movs	r2, #80	@ 0x50
 8019678:	5a9b      	ldrh	r3, [r3, r2]
 801967a:	b29b      	uxth	r3, r3
 801967c:	001a      	movs	r2, r3
 801967e:	21a4      	movs	r1, #164	@ 0xa4
 8019680:	187b      	adds	r3, r7, r1
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	189b      	adds	r3, r3, r2
 8019686:	187a      	adds	r2, r7, r1
 8019688:	6013      	str	r3, [r2, #0]
 801968a:	683b      	ldr	r3, [r7, #0]
 801968c:	781b      	ldrb	r3, [r3, #0]
 801968e:	00da      	lsls	r2, r3, #3
 8019690:	187b      	adds	r3, r7, r1
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	18d3      	adds	r3, r2, r3
 8019696:	4ad2      	ldr	r2, [pc, #840]	@ (80199e0 <USB_EPStartXfer+0x11b0>)
 8019698:	4694      	mov	ip, r2
 801969a:	4463      	add	r3, ip
 801969c:	21a0      	movs	r1, #160	@ 0xa0
 801969e:	187a      	adds	r2, r7, r1
 80196a0:	6013      	str	r3, [r2, #0]
 80196a2:	683b      	ldr	r3, [r7, #0]
 80196a4:	691b      	ldr	r3, [r3, #16]
 80196a6:	b29a      	uxth	r2, r3
 80196a8:	187b      	adds	r3, r7, r1
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80196ae:	683b      	ldr	r3, [r7, #0]
 80196b0:	69db      	ldr	r3, [r3, #28]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d100      	bne.n	80196b8 <USB_EPStartXfer+0xe88>
 80196b6:	e1c2      	b.n	8019a3e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80196b8:	687a      	ldr	r2, [r7, #4]
 80196ba:	683b      	ldr	r3, [r7, #0]
 80196bc:	781b      	ldrb	r3, [r3, #0]
 80196be:	009b      	lsls	r3, r3, #2
 80196c0:	18d2      	adds	r2, r2, r3
 80196c2:	2196      	movs	r1, #150	@ 0x96
 80196c4:	187b      	adds	r3, r7, r1
 80196c6:	8812      	ldrh	r2, [r2, #0]
 80196c8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80196ca:	187b      	adds	r3, r7, r1
 80196cc:	881a      	ldrh	r2, [r3, #0]
 80196ce:	2380      	movs	r3, #128	@ 0x80
 80196d0:	01db      	lsls	r3, r3, #7
 80196d2:	4013      	ands	r3, r2
 80196d4:	d004      	beq.n	80196e0 <USB_EPStartXfer+0xeb0>
 80196d6:	187b      	adds	r3, r7, r1
 80196d8:	881b      	ldrh	r3, [r3, #0]
 80196da:	2240      	movs	r2, #64	@ 0x40
 80196dc:	4013      	ands	r3, r2
 80196de:	d10d      	bne.n	80196fc <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80196e0:	2196      	movs	r1, #150	@ 0x96
 80196e2:	187b      	adds	r3, r7, r1
 80196e4:	881a      	ldrh	r2, [r3, #0]
 80196e6:	2380      	movs	r3, #128	@ 0x80
 80196e8:	01db      	lsls	r3, r3, #7
 80196ea:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80196ec:	d000      	beq.n	80196f0 <USB_EPStartXfer+0xec0>
 80196ee:	e1a6      	b.n	8019a3e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80196f0:	187b      	adds	r3, r7, r1
 80196f2:	881b      	ldrh	r3, [r3, #0]
 80196f4:	2240      	movs	r2, #64	@ 0x40
 80196f6:	4013      	ands	r3, r2
 80196f8:	d000      	beq.n	80196fc <USB_EPStartXfer+0xecc>
 80196fa:	e1a0      	b.n	8019a3e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80196fc:	687a      	ldr	r2, [r7, #4]
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	781b      	ldrb	r3, [r3, #0]
 8019702:	009b      	lsls	r3, r3, #2
 8019704:	18d3      	adds	r3, r2, r3
 8019706:	881b      	ldrh	r3, [r3, #0]
 8019708:	b29a      	uxth	r2, r3
 801970a:	2094      	movs	r0, #148	@ 0x94
 801970c:	183b      	adds	r3, r7, r0
 801970e:	49b5      	ldr	r1, [pc, #724]	@ (80199e4 <USB_EPStartXfer+0x11b4>)
 8019710:	400a      	ands	r2, r1
 8019712:	801a      	strh	r2, [r3, #0]
 8019714:	687a      	ldr	r2, [r7, #4]
 8019716:	683b      	ldr	r3, [r7, #0]
 8019718:	781b      	ldrb	r3, [r3, #0]
 801971a:	009b      	lsls	r3, r3, #2
 801971c:	18d3      	adds	r3, r2, r3
 801971e:	183a      	adds	r2, r7, r0
 8019720:	8812      	ldrh	r2, [r2, #0]
 8019722:	49b1      	ldr	r1, [pc, #708]	@ (80199e8 <USB_EPStartXfer+0x11b8>)
 8019724:	430a      	orrs	r2, r1
 8019726:	b292      	uxth	r2, r2
 8019728:	801a      	strh	r2, [r3, #0]
 801972a:	e188      	b.n	8019a3e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801972c:	683b      	ldr	r3, [r7, #0]
 801972e:	78db      	ldrb	r3, [r3, #3]
 8019730:	2b01      	cmp	r3, #1
 8019732:	d000      	beq.n	8019736 <USB_EPStartXfer+0xf06>
 8019734:	e181      	b.n	8019a3a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	699a      	ldr	r2, [r3, #24]
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	691b      	ldr	r3, [r3, #16]
 801973e:	429a      	cmp	r2, r3
 8019740:	d90d      	bls.n	801975e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	691b      	ldr	r3, [r3, #16]
 8019746:	1d7a      	adds	r2, r7, #5
 8019748:	32ff      	adds	r2, #255	@ 0xff
 801974a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	699a      	ldr	r2, [r3, #24]
 8019750:	1d7b      	adds	r3, r7, #5
 8019752:	33ff      	adds	r3, #255	@ 0xff
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	1ad2      	subs	r2, r2, r3
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	619a      	str	r2, [r3, #24]
 801975c:	e007      	b.n	801976e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	699b      	ldr	r3, [r3, #24]
 8019762:	1d7a      	adds	r2, r7, #5
 8019764:	32ff      	adds	r2, #255	@ 0xff
 8019766:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8019768:	683b      	ldr	r3, [r7, #0]
 801976a:	2200      	movs	r2, #0
 801976c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	785b      	ldrb	r3, [r3, #1]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d000      	beq.n	8019778 <USB_EPStartXfer+0xf48>
 8019776:	e082      	b.n	801987e <USB_EPStartXfer+0x104e>
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	21cc      	movs	r1, #204	@ 0xcc
 801977c:	187a      	adds	r2, r7, r1
 801977e:	6013      	str	r3, [r2, #0]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	2250      	movs	r2, #80	@ 0x50
 8019784:	5a9b      	ldrh	r3, [r3, r2]
 8019786:	b29b      	uxth	r3, r3
 8019788:	001a      	movs	r2, r3
 801978a:	187b      	adds	r3, r7, r1
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	189b      	adds	r3, r3, r2
 8019790:	187a      	adds	r2, r7, r1
 8019792:	6013      	str	r3, [r2, #0]
 8019794:	683b      	ldr	r3, [r7, #0]
 8019796:	781b      	ldrb	r3, [r3, #0]
 8019798:	00da      	lsls	r2, r3, #3
 801979a:	187b      	adds	r3, r7, r1
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	18d3      	adds	r3, r2, r3
 80197a0:	4a92      	ldr	r2, [pc, #584]	@ (80199ec <USB_EPStartXfer+0x11bc>)
 80197a2:	4694      	mov	ip, r2
 80197a4:	4463      	add	r3, ip
 80197a6:	21c8      	movs	r1, #200	@ 0xc8
 80197a8:	187a      	adds	r2, r7, r1
 80197aa:	6013      	str	r3, [r2, #0]
 80197ac:	187b      	adds	r3, r7, r1
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	881b      	ldrh	r3, [r3, #0]
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	059b      	lsls	r3, r3, #22
 80197b6:	0d9b      	lsrs	r3, r3, #22
 80197b8:	b29a      	uxth	r2, r3
 80197ba:	187b      	adds	r3, r7, r1
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	801a      	strh	r2, [r3, #0]
 80197c0:	1d7b      	adds	r3, r7, #5
 80197c2:	33ff      	adds	r3, #255	@ 0xff
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80197c8:	d925      	bls.n	8019816 <USB_EPStartXfer+0xfe6>
 80197ca:	1d7b      	adds	r3, r7, #5
 80197cc:	33ff      	adds	r3, #255	@ 0xff
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	095b      	lsrs	r3, r3, #5
 80197d2:	21dc      	movs	r1, #220	@ 0xdc
 80197d4:	187a      	adds	r2, r7, r1
 80197d6:	6013      	str	r3, [r2, #0]
 80197d8:	1d7b      	adds	r3, r7, #5
 80197da:	33ff      	adds	r3, #255	@ 0xff
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	221f      	movs	r2, #31
 80197e0:	4013      	ands	r3, r2
 80197e2:	d104      	bne.n	80197ee <USB_EPStartXfer+0xfbe>
 80197e4:	187b      	adds	r3, r7, r1
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	3b01      	subs	r3, #1
 80197ea:	187a      	adds	r2, r7, r1
 80197ec:	6013      	str	r3, [r2, #0]
 80197ee:	21c8      	movs	r1, #200	@ 0xc8
 80197f0:	187b      	adds	r3, r7, r1
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	881b      	ldrh	r3, [r3, #0]
 80197f6:	b29a      	uxth	r2, r3
 80197f8:	23dc      	movs	r3, #220	@ 0xdc
 80197fa:	18fb      	adds	r3, r7, r3
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	b29b      	uxth	r3, r3
 8019800:	029b      	lsls	r3, r3, #10
 8019802:	b29b      	uxth	r3, r3
 8019804:	4313      	orrs	r3, r2
 8019806:	b29b      	uxth	r3, r3
 8019808:	4a79      	ldr	r2, [pc, #484]	@ (80199f0 <USB_EPStartXfer+0x11c0>)
 801980a:	4313      	orrs	r3, r2
 801980c:	b29a      	uxth	r2, r3
 801980e:	187b      	adds	r3, r7, r1
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	801a      	strh	r2, [r3, #0]
 8019814:	e058      	b.n	80198c8 <USB_EPStartXfer+0x1098>
 8019816:	1d7b      	adds	r3, r7, #5
 8019818:	33ff      	adds	r3, #255	@ 0xff
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d10b      	bne.n	8019838 <USB_EPStartXfer+0x1008>
 8019820:	21c8      	movs	r1, #200	@ 0xc8
 8019822:	187b      	adds	r3, r7, r1
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	881b      	ldrh	r3, [r3, #0]
 8019828:	b29b      	uxth	r3, r3
 801982a:	4a71      	ldr	r2, [pc, #452]	@ (80199f0 <USB_EPStartXfer+0x11c0>)
 801982c:	4313      	orrs	r3, r2
 801982e:	b29a      	uxth	r2, r3
 8019830:	187b      	adds	r3, r7, r1
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	801a      	strh	r2, [r3, #0]
 8019836:	e047      	b.n	80198c8 <USB_EPStartXfer+0x1098>
 8019838:	1d7b      	adds	r3, r7, #5
 801983a:	33ff      	adds	r3, #255	@ 0xff
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	085b      	lsrs	r3, r3, #1
 8019840:	21dc      	movs	r1, #220	@ 0xdc
 8019842:	187a      	adds	r2, r7, r1
 8019844:	6013      	str	r3, [r2, #0]
 8019846:	1d7b      	adds	r3, r7, #5
 8019848:	33ff      	adds	r3, #255	@ 0xff
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	2201      	movs	r2, #1
 801984e:	4013      	ands	r3, r2
 8019850:	d004      	beq.n	801985c <USB_EPStartXfer+0x102c>
 8019852:	187b      	adds	r3, r7, r1
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	3301      	adds	r3, #1
 8019858:	187a      	adds	r2, r7, r1
 801985a:	6013      	str	r3, [r2, #0]
 801985c:	21c8      	movs	r1, #200	@ 0xc8
 801985e:	187b      	adds	r3, r7, r1
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	881b      	ldrh	r3, [r3, #0]
 8019864:	b29a      	uxth	r2, r3
 8019866:	23dc      	movs	r3, #220	@ 0xdc
 8019868:	18fb      	adds	r3, r7, r3
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	b29b      	uxth	r3, r3
 801986e:	029b      	lsls	r3, r3, #10
 8019870:	b29b      	uxth	r3, r3
 8019872:	4313      	orrs	r3, r2
 8019874:	b29a      	uxth	r2, r3
 8019876:	187b      	adds	r3, r7, r1
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	801a      	strh	r2, [r3, #0]
 801987c:	e024      	b.n	80198c8 <USB_EPStartXfer+0x1098>
 801987e:	683b      	ldr	r3, [r7, #0]
 8019880:	785b      	ldrb	r3, [r3, #1]
 8019882:	2b01      	cmp	r3, #1
 8019884:	d120      	bne.n	80198c8 <USB_EPStartXfer+0x1098>
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	21d4      	movs	r1, #212	@ 0xd4
 801988a:	187a      	adds	r2, r7, r1
 801988c:	6013      	str	r3, [r2, #0]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	2250      	movs	r2, #80	@ 0x50
 8019892:	5a9b      	ldrh	r3, [r3, r2]
 8019894:	b29b      	uxth	r3, r3
 8019896:	001a      	movs	r2, r3
 8019898:	187b      	adds	r3, r7, r1
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	189b      	adds	r3, r3, r2
 801989e:	187a      	adds	r2, r7, r1
 80198a0:	6013      	str	r3, [r2, #0]
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	781b      	ldrb	r3, [r3, #0]
 80198a6:	00da      	lsls	r2, r3, #3
 80198a8:	187b      	adds	r3, r7, r1
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	18d3      	adds	r3, r2, r3
 80198ae:	4a4f      	ldr	r2, [pc, #316]	@ (80199ec <USB_EPStartXfer+0x11bc>)
 80198b0:	4694      	mov	ip, r2
 80198b2:	4463      	add	r3, ip
 80198b4:	21d0      	movs	r1, #208	@ 0xd0
 80198b6:	187a      	adds	r2, r7, r1
 80198b8:	6013      	str	r3, [r2, #0]
 80198ba:	1d7b      	adds	r3, r7, #5
 80198bc:	33ff      	adds	r3, #255	@ 0xff
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	b29a      	uxth	r2, r3
 80198c2:	187b      	adds	r3, r7, r1
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	801a      	strh	r2, [r3, #0]
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	22c4      	movs	r2, #196	@ 0xc4
 80198cc:	18ba      	adds	r2, r7, r2
 80198ce:	6013      	str	r3, [r2, #0]
 80198d0:	683b      	ldr	r3, [r7, #0]
 80198d2:	785b      	ldrb	r3, [r3, #1]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d000      	beq.n	80198da <USB_EPStartXfer+0x10aa>
 80198d8:	e08c      	b.n	80199f4 <USB_EPStartXfer+0x11c4>
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	21bc      	movs	r1, #188	@ 0xbc
 80198de:	187a      	adds	r2, r7, r1
 80198e0:	6013      	str	r3, [r2, #0]
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	2250      	movs	r2, #80	@ 0x50
 80198e6:	5a9b      	ldrh	r3, [r3, r2]
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	001a      	movs	r2, r3
 80198ec:	187b      	adds	r3, r7, r1
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	189b      	adds	r3, r3, r2
 80198f2:	187a      	adds	r2, r7, r1
 80198f4:	6013      	str	r3, [r2, #0]
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	00da      	lsls	r2, r3, #3
 80198fc:	187b      	adds	r3, r7, r1
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	18d3      	adds	r3, r2, r3
 8019902:	4a37      	ldr	r2, [pc, #220]	@ (80199e0 <USB_EPStartXfer+0x11b0>)
 8019904:	4694      	mov	ip, r2
 8019906:	4463      	add	r3, ip
 8019908:	21b8      	movs	r1, #184	@ 0xb8
 801990a:	187a      	adds	r2, r7, r1
 801990c:	6013      	str	r3, [r2, #0]
 801990e:	187b      	adds	r3, r7, r1
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	881b      	ldrh	r3, [r3, #0]
 8019914:	b29b      	uxth	r3, r3
 8019916:	059b      	lsls	r3, r3, #22
 8019918:	0d9b      	lsrs	r3, r3, #22
 801991a:	b29a      	uxth	r2, r3
 801991c:	187b      	adds	r3, r7, r1
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	801a      	strh	r2, [r3, #0]
 8019922:	1d7b      	adds	r3, r7, #5
 8019924:	33ff      	adds	r3, #255	@ 0xff
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	2b3e      	cmp	r3, #62	@ 0x3e
 801992a:	d925      	bls.n	8019978 <USB_EPStartXfer+0x1148>
 801992c:	1d7b      	adds	r3, r7, #5
 801992e:	33ff      	adds	r3, #255	@ 0xff
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	095b      	lsrs	r3, r3, #5
 8019934:	21d8      	movs	r1, #216	@ 0xd8
 8019936:	187a      	adds	r2, r7, r1
 8019938:	6013      	str	r3, [r2, #0]
 801993a:	1d7b      	adds	r3, r7, #5
 801993c:	33ff      	adds	r3, #255	@ 0xff
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	221f      	movs	r2, #31
 8019942:	4013      	ands	r3, r2
 8019944:	d104      	bne.n	8019950 <USB_EPStartXfer+0x1120>
 8019946:	187b      	adds	r3, r7, r1
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	3b01      	subs	r3, #1
 801994c:	187a      	adds	r2, r7, r1
 801994e:	6013      	str	r3, [r2, #0]
 8019950:	21b8      	movs	r1, #184	@ 0xb8
 8019952:	187b      	adds	r3, r7, r1
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	881b      	ldrh	r3, [r3, #0]
 8019958:	b29a      	uxth	r2, r3
 801995a:	23d8      	movs	r3, #216	@ 0xd8
 801995c:	18fb      	adds	r3, r7, r3
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	b29b      	uxth	r3, r3
 8019962:	029b      	lsls	r3, r3, #10
 8019964:	b29b      	uxth	r3, r3
 8019966:	4313      	orrs	r3, r2
 8019968:	b29b      	uxth	r3, r3
 801996a:	4a21      	ldr	r2, [pc, #132]	@ (80199f0 <USB_EPStartXfer+0x11c0>)
 801996c:	4313      	orrs	r3, r2
 801996e:	b29a      	uxth	r2, r3
 8019970:	187b      	adds	r3, r7, r1
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	801a      	strh	r2, [r3, #0]
 8019976:	e062      	b.n	8019a3e <USB_EPStartXfer+0x120e>
 8019978:	1d7b      	adds	r3, r7, #5
 801997a:	33ff      	adds	r3, #255	@ 0xff
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d10b      	bne.n	801999a <USB_EPStartXfer+0x116a>
 8019982:	21b8      	movs	r1, #184	@ 0xb8
 8019984:	187b      	adds	r3, r7, r1
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	881b      	ldrh	r3, [r3, #0]
 801998a:	b29b      	uxth	r3, r3
 801998c:	4a18      	ldr	r2, [pc, #96]	@ (80199f0 <USB_EPStartXfer+0x11c0>)
 801998e:	4313      	orrs	r3, r2
 8019990:	b29a      	uxth	r2, r3
 8019992:	187b      	adds	r3, r7, r1
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	801a      	strh	r2, [r3, #0]
 8019998:	e051      	b.n	8019a3e <USB_EPStartXfer+0x120e>
 801999a:	1d7b      	adds	r3, r7, #5
 801999c:	33ff      	adds	r3, #255	@ 0xff
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	085b      	lsrs	r3, r3, #1
 80199a2:	21d8      	movs	r1, #216	@ 0xd8
 80199a4:	187a      	adds	r2, r7, r1
 80199a6:	6013      	str	r3, [r2, #0]
 80199a8:	1d7b      	adds	r3, r7, #5
 80199aa:	33ff      	adds	r3, #255	@ 0xff
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	2201      	movs	r2, #1
 80199b0:	4013      	ands	r3, r2
 80199b2:	d004      	beq.n	80199be <USB_EPStartXfer+0x118e>
 80199b4:	187b      	adds	r3, r7, r1
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	3301      	adds	r3, #1
 80199ba:	187a      	adds	r2, r7, r1
 80199bc:	6013      	str	r3, [r2, #0]
 80199be:	21b8      	movs	r1, #184	@ 0xb8
 80199c0:	187b      	adds	r3, r7, r1
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	881b      	ldrh	r3, [r3, #0]
 80199c6:	b29a      	uxth	r2, r3
 80199c8:	23d8      	movs	r3, #216	@ 0xd8
 80199ca:	18fb      	adds	r3, r7, r3
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	b29b      	uxth	r3, r3
 80199d0:	029b      	lsls	r3, r3, #10
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	4313      	orrs	r3, r2
 80199d6:	b29a      	uxth	r2, r3
 80199d8:	187b      	adds	r3, r7, r1
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	801a      	strh	r2, [r3, #0]
 80199de:	e02e      	b.n	8019a3e <USB_EPStartXfer+0x120e>
 80199e0:	00000406 	.word	0x00000406
 80199e4:	ffff8f8f 	.word	0xffff8f8f
 80199e8:	ffff80c0 	.word	0xffff80c0
 80199ec:	00000402 	.word	0x00000402
 80199f0:	ffff8000 	.word	0xffff8000
 80199f4:	683b      	ldr	r3, [r7, #0]
 80199f6:	785b      	ldrb	r3, [r3, #1]
 80199f8:	2b01      	cmp	r3, #1
 80199fa:	d120      	bne.n	8019a3e <USB_EPStartXfer+0x120e>
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2250      	movs	r2, #80	@ 0x50
 8019a00:	5a9b      	ldrh	r3, [r3, r2]
 8019a02:	b29b      	uxth	r3, r3
 8019a04:	001a      	movs	r2, r3
 8019a06:	21c4      	movs	r1, #196	@ 0xc4
 8019a08:	187b      	adds	r3, r7, r1
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	189b      	adds	r3, r3, r2
 8019a0e:	187a      	adds	r2, r7, r1
 8019a10:	6013      	str	r3, [r2, #0]
 8019a12:	683b      	ldr	r3, [r7, #0]
 8019a14:	781b      	ldrb	r3, [r3, #0]
 8019a16:	00da      	lsls	r2, r3, #3
 8019a18:	187b      	adds	r3, r7, r1
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	18d3      	adds	r3, r2, r3
 8019a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8019a94 <USB_EPStartXfer+0x1264>)
 8019a20:	4694      	mov	ip, r2
 8019a22:	4463      	add	r3, ip
 8019a24:	21c0      	movs	r1, #192	@ 0xc0
 8019a26:	187a      	adds	r2, r7, r1
 8019a28:	6013      	str	r3, [r2, #0]
 8019a2a:	1d7b      	adds	r3, r7, #5
 8019a2c:	33ff      	adds	r3, #255	@ 0xff
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	b29a      	uxth	r2, r3
 8019a32:	187b      	adds	r3, r7, r1
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	801a      	strh	r2, [r3, #0]
 8019a38:	e001      	b.n	8019a3e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	e025      	b.n	8019a8a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019a3e:	687a      	ldr	r2, [r7, #4]
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	009b      	lsls	r3, r3, #2
 8019a46:	18d3      	adds	r3, r2, r3
 8019a48:	881b      	ldrh	r3, [r3, #0]
 8019a4a:	b29a      	uxth	r2, r3
 8019a4c:	208a      	movs	r0, #138	@ 0x8a
 8019a4e:	183b      	adds	r3, r7, r0
 8019a50:	4911      	ldr	r1, [pc, #68]	@ (8019a98 <USB_EPStartXfer+0x1268>)
 8019a52:	400a      	ands	r2, r1
 8019a54:	801a      	strh	r2, [r3, #0]
 8019a56:	183b      	adds	r3, r7, r0
 8019a58:	183a      	adds	r2, r7, r0
 8019a5a:	8812      	ldrh	r2, [r2, #0]
 8019a5c:	2180      	movs	r1, #128	@ 0x80
 8019a5e:	0149      	lsls	r1, r1, #5
 8019a60:	404a      	eors	r2, r1
 8019a62:	801a      	strh	r2, [r3, #0]
 8019a64:	183b      	adds	r3, r7, r0
 8019a66:	183a      	adds	r2, r7, r0
 8019a68:	8812      	ldrh	r2, [r2, #0]
 8019a6a:	2180      	movs	r1, #128	@ 0x80
 8019a6c:	0189      	lsls	r1, r1, #6
 8019a6e:	404a      	eors	r2, r1
 8019a70:	801a      	strh	r2, [r3, #0]
 8019a72:	687a      	ldr	r2, [r7, #4]
 8019a74:	683b      	ldr	r3, [r7, #0]
 8019a76:	781b      	ldrb	r3, [r3, #0]
 8019a78:	009b      	lsls	r3, r3, #2
 8019a7a:	18d3      	adds	r3, r2, r3
 8019a7c:	183a      	adds	r2, r7, r0
 8019a7e:	8812      	ldrh	r2, [r2, #0]
 8019a80:	4906      	ldr	r1, [pc, #24]	@ (8019a9c <USB_EPStartXfer+0x126c>)
 8019a82:	430a      	orrs	r2, r1
 8019a84:	b292      	uxth	r2, r2
 8019a86:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019a88:	2300      	movs	r3, #0
}
 8019a8a:	0018      	movs	r0, r3
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	b043      	add	sp, #268	@ 0x10c
 8019a90:	bd90      	pop	{r4, r7, pc}
 8019a92:	46c0      	nop			@ (mov r8, r8)
 8019a94:	00000406 	.word	0x00000406
 8019a98:	ffffbf8f 	.word	0xffffbf8f
 8019a9c:	ffff8080 	.word	0xffff8080

08019aa0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b084      	sub	sp, #16
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8019aaa:	683b      	ldr	r3, [r7, #0]
 8019aac:	785b      	ldrb	r3, [r3, #1]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d01d      	beq.n	8019aee <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	781b      	ldrb	r3, [r3, #0]
 8019ab8:	009b      	lsls	r3, r3, #2
 8019aba:	18d3      	adds	r3, r2, r3
 8019abc:	881b      	ldrh	r3, [r3, #0]
 8019abe:	b29a      	uxth	r2, r3
 8019ac0:	200c      	movs	r0, #12
 8019ac2:	183b      	adds	r3, r7, r0
 8019ac4:	491b      	ldr	r1, [pc, #108]	@ (8019b34 <USB_EPSetStall+0x94>)
 8019ac6:	400a      	ands	r2, r1
 8019ac8:	801a      	strh	r2, [r3, #0]
 8019aca:	183b      	adds	r3, r7, r0
 8019acc:	183a      	adds	r2, r7, r0
 8019ace:	8812      	ldrh	r2, [r2, #0]
 8019ad0:	2110      	movs	r1, #16
 8019ad2:	404a      	eors	r2, r1
 8019ad4:	801a      	strh	r2, [r3, #0]
 8019ad6:	687a      	ldr	r2, [r7, #4]
 8019ad8:	683b      	ldr	r3, [r7, #0]
 8019ada:	781b      	ldrb	r3, [r3, #0]
 8019adc:	009b      	lsls	r3, r3, #2
 8019ade:	18d3      	adds	r3, r2, r3
 8019ae0:	183a      	adds	r2, r7, r0
 8019ae2:	8812      	ldrh	r2, [r2, #0]
 8019ae4:	4914      	ldr	r1, [pc, #80]	@ (8019b38 <USB_EPSetStall+0x98>)
 8019ae6:	430a      	orrs	r2, r1
 8019ae8:	b292      	uxth	r2, r2
 8019aea:	801a      	strh	r2, [r3, #0]
 8019aec:	e01d      	b.n	8019b2a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8019aee:	687a      	ldr	r2, [r7, #4]
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	781b      	ldrb	r3, [r3, #0]
 8019af4:	009b      	lsls	r3, r3, #2
 8019af6:	18d3      	adds	r3, r2, r3
 8019af8:	881b      	ldrh	r3, [r3, #0]
 8019afa:	b29a      	uxth	r2, r3
 8019afc:	200e      	movs	r0, #14
 8019afe:	183b      	adds	r3, r7, r0
 8019b00:	490e      	ldr	r1, [pc, #56]	@ (8019b3c <USB_EPSetStall+0x9c>)
 8019b02:	400a      	ands	r2, r1
 8019b04:	801a      	strh	r2, [r3, #0]
 8019b06:	183b      	adds	r3, r7, r0
 8019b08:	183a      	adds	r2, r7, r0
 8019b0a:	8812      	ldrh	r2, [r2, #0]
 8019b0c:	2180      	movs	r1, #128	@ 0x80
 8019b0e:	0149      	lsls	r1, r1, #5
 8019b10:	404a      	eors	r2, r1
 8019b12:	801a      	strh	r2, [r3, #0]
 8019b14:	687a      	ldr	r2, [r7, #4]
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	009b      	lsls	r3, r3, #2
 8019b1c:	18d3      	adds	r3, r2, r3
 8019b1e:	183a      	adds	r2, r7, r0
 8019b20:	8812      	ldrh	r2, [r2, #0]
 8019b22:	4905      	ldr	r1, [pc, #20]	@ (8019b38 <USB_EPSetStall+0x98>)
 8019b24:	430a      	orrs	r2, r1
 8019b26:	b292      	uxth	r2, r2
 8019b28:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019b2a:	2300      	movs	r3, #0
}
 8019b2c:	0018      	movs	r0, r3
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	b004      	add	sp, #16
 8019b32:	bd80      	pop	{r7, pc}
 8019b34:	ffff8fbf 	.word	0xffff8fbf
 8019b38:	ffff8080 	.word	0xffff8080
 8019b3c:	ffffbf8f 	.word	0xffffbf8f

08019b40 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b086      	sub	sp, #24
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
 8019b48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019b4a:	683b      	ldr	r3, [r7, #0]
 8019b4c:	7b1b      	ldrb	r3, [r3, #12]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d000      	beq.n	8019b54 <USB_EPClearStall+0x14>
 8019b52:	e095      	b.n	8019c80 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	785b      	ldrb	r3, [r3, #1]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d046      	beq.n	8019bea <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019b5c:	687a      	ldr	r2, [r7, #4]
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	781b      	ldrb	r3, [r3, #0]
 8019b62:	009b      	lsls	r3, r3, #2
 8019b64:	18d2      	adds	r2, r2, r3
 8019b66:	2110      	movs	r1, #16
 8019b68:	187b      	adds	r3, r7, r1
 8019b6a:	8812      	ldrh	r2, [r2, #0]
 8019b6c:	801a      	strh	r2, [r3, #0]
 8019b6e:	187b      	adds	r3, r7, r1
 8019b70:	881b      	ldrh	r3, [r3, #0]
 8019b72:	2240      	movs	r2, #64	@ 0x40
 8019b74:	4013      	ands	r3, r2
 8019b76:	d016      	beq.n	8019ba6 <USB_EPClearStall+0x66>
 8019b78:	687a      	ldr	r2, [r7, #4]
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	781b      	ldrb	r3, [r3, #0]
 8019b7e:	009b      	lsls	r3, r3, #2
 8019b80:	18d3      	adds	r3, r2, r3
 8019b82:	881b      	ldrh	r3, [r3, #0]
 8019b84:	b29a      	uxth	r2, r3
 8019b86:	200e      	movs	r0, #14
 8019b88:	183b      	adds	r3, r7, r0
 8019b8a:	4940      	ldr	r1, [pc, #256]	@ (8019c8c <USB_EPClearStall+0x14c>)
 8019b8c:	400a      	ands	r2, r1
 8019b8e:	801a      	strh	r2, [r3, #0]
 8019b90:	687a      	ldr	r2, [r7, #4]
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	781b      	ldrb	r3, [r3, #0]
 8019b96:	009b      	lsls	r3, r3, #2
 8019b98:	18d3      	adds	r3, r2, r3
 8019b9a:	183a      	adds	r2, r7, r0
 8019b9c:	8812      	ldrh	r2, [r2, #0]
 8019b9e:	493c      	ldr	r1, [pc, #240]	@ (8019c90 <USB_EPClearStall+0x150>)
 8019ba0:	430a      	orrs	r2, r1
 8019ba2:	b292      	uxth	r2, r2
 8019ba4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	78db      	ldrb	r3, [r3, #3]
 8019baa:	2b01      	cmp	r3, #1
 8019bac:	d068      	beq.n	8019c80 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019bae:	687a      	ldr	r2, [r7, #4]
 8019bb0:	683b      	ldr	r3, [r7, #0]
 8019bb2:	781b      	ldrb	r3, [r3, #0]
 8019bb4:	009b      	lsls	r3, r3, #2
 8019bb6:	18d3      	adds	r3, r2, r3
 8019bb8:	881b      	ldrh	r3, [r3, #0]
 8019bba:	b29a      	uxth	r2, r3
 8019bbc:	200c      	movs	r0, #12
 8019bbe:	183b      	adds	r3, r7, r0
 8019bc0:	4934      	ldr	r1, [pc, #208]	@ (8019c94 <USB_EPClearStall+0x154>)
 8019bc2:	400a      	ands	r2, r1
 8019bc4:	801a      	strh	r2, [r3, #0]
 8019bc6:	183b      	adds	r3, r7, r0
 8019bc8:	183a      	adds	r2, r7, r0
 8019bca:	8812      	ldrh	r2, [r2, #0]
 8019bcc:	2120      	movs	r1, #32
 8019bce:	404a      	eors	r2, r1
 8019bd0:	801a      	strh	r2, [r3, #0]
 8019bd2:	687a      	ldr	r2, [r7, #4]
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	009b      	lsls	r3, r3, #2
 8019bda:	18d3      	adds	r3, r2, r3
 8019bdc:	183a      	adds	r2, r7, r0
 8019bde:	8812      	ldrh	r2, [r2, #0]
 8019be0:	492d      	ldr	r1, [pc, #180]	@ (8019c98 <USB_EPClearStall+0x158>)
 8019be2:	430a      	orrs	r2, r1
 8019be4:	b292      	uxth	r2, r2
 8019be6:	801a      	strh	r2, [r3, #0]
 8019be8:	e04a      	b.n	8019c80 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019bea:	687a      	ldr	r2, [r7, #4]
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	009b      	lsls	r3, r3, #2
 8019bf2:	18d2      	adds	r2, r2, r3
 8019bf4:	2116      	movs	r1, #22
 8019bf6:	187b      	adds	r3, r7, r1
 8019bf8:	8812      	ldrh	r2, [r2, #0]
 8019bfa:	801a      	strh	r2, [r3, #0]
 8019bfc:	187b      	adds	r3, r7, r1
 8019bfe:	881a      	ldrh	r2, [r3, #0]
 8019c00:	2380      	movs	r3, #128	@ 0x80
 8019c02:	01db      	lsls	r3, r3, #7
 8019c04:	4013      	ands	r3, r2
 8019c06:	d016      	beq.n	8019c36 <USB_EPClearStall+0xf6>
 8019c08:	687a      	ldr	r2, [r7, #4]
 8019c0a:	683b      	ldr	r3, [r7, #0]
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	009b      	lsls	r3, r3, #2
 8019c10:	18d3      	adds	r3, r2, r3
 8019c12:	881b      	ldrh	r3, [r3, #0]
 8019c14:	b29a      	uxth	r2, r3
 8019c16:	2014      	movs	r0, #20
 8019c18:	183b      	adds	r3, r7, r0
 8019c1a:	491c      	ldr	r1, [pc, #112]	@ (8019c8c <USB_EPClearStall+0x14c>)
 8019c1c:	400a      	ands	r2, r1
 8019c1e:	801a      	strh	r2, [r3, #0]
 8019c20:	687a      	ldr	r2, [r7, #4]
 8019c22:	683b      	ldr	r3, [r7, #0]
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	18d3      	adds	r3, r2, r3
 8019c2a:	183a      	adds	r2, r7, r0
 8019c2c:	8812      	ldrh	r2, [r2, #0]
 8019c2e:	491b      	ldr	r1, [pc, #108]	@ (8019c9c <USB_EPClearStall+0x15c>)
 8019c30:	430a      	orrs	r2, r1
 8019c32:	b292      	uxth	r2, r2
 8019c34:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019c36:	687a      	ldr	r2, [r7, #4]
 8019c38:	683b      	ldr	r3, [r7, #0]
 8019c3a:	781b      	ldrb	r3, [r3, #0]
 8019c3c:	009b      	lsls	r3, r3, #2
 8019c3e:	18d3      	adds	r3, r2, r3
 8019c40:	881b      	ldrh	r3, [r3, #0]
 8019c42:	b29a      	uxth	r2, r3
 8019c44:	2012      	movs	r0, #18
 8019c46:	183b      	adds	r3, r7, r0
 8019c48:	4915      	ldr	r1, [pc, #84]	@ (8019ca0 <USB_EPClearStall+0x160>)
 8019c4a:	400a      	ands	r2, r1
 8019c4c:	801a      	strh	r2, [r3, #0]
 8019c4e:	183b      	adds	r3, r7, r0
 8019c50:	183a      	adds	r2, r7, r0
 8019c52:	8812      	ldrh	r2, [r2, #0]
 8019c54:	2180      	movs	r1, #128	@ 0x80
 8019c56:	0149      	lsls	r1, r1, #5
 8019c58:	404a      	eors	r2, r1
 8019c5a:	801a      	strh	r2, [r3, #0]
 8019c5c:	183b      	adds	r3, r7, r0
 8019c5e:	183a      	adds	r2, r7, r0
 8019c60:	8812      	ldrh	r2, [r2, #0]
 8019c62:	2180      	movs	r1, #128	@ 0x80
 8019c64:	0189      	lsls	r1, r1, #6
 8019c66:	404a      	eors	r2, r1
 8019c68:	801a      	strh	r2, [r3, #0]
 8019c6a:	687a      	ldr	r2, [r7, #4]
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	781b      	ldrb	r3, [r3, #0]
 8019c70:	009b      	lsls	r3, r3, #2
 8019c72:	18d3      	adds	r3, r2, r3
 8019c74:	183a      	adds	r2, r7, r0
 8019c76:	8812      	ldrh	r2, [r2, #0]
 8019c78:	4907      	ldr	r1, [pc, #28]	@ (8019c98 <USB_EPClearStall+0x158>)
 8019c7a:	430a      	orrs	r2, r1
 8019c7c:	b292      	uxth	r2, r2
 8019c7e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8019c80:	2300      	movs	r3, #0
}
 8019c82:	0018      	movs	r0, r3
 8019c84:	46bd      	mov	sp, r7
 8019c86:	b006      	add	sp, #24
 8019c88:	bd80      	pop	{r7, pc}
 8019c8a:	46c0      	nop			@ (mov r8, r8)
 8019c8c:	ffff8f8f 	.word	0xffff8f8f
 8019c90:	ffff80c0 	.word	0xffff80c0
 8019c94:	ffff8fbf 	.word	0xffff8fbf
 8019c98:	ffff8080 	.word	0xffff8080
 8019c9c:	ffffc080 	.word	0xffffc080
 8019ca0:	ffffbf8f 	.word	0xffffbf8f

08019ca4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b082      	sub	sp, #8
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	6078      	str	r0, [r7, #4]
 8019cac:	000a      	movs	r2, r1
 8019cae:	1cfb      	adds	r3, r7, #3
 8019cb0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8019cb2:	1cfb      	adds	r3, r7, #3
 8019cb4:	781b      	ldrb	r3, [r3, #0]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d103      	bne.n	8019cc2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	224c      	movs	r2, #76	@ 0x4c
 8019cbe:	2180      	movs	r1, #128	@ 0x80
 8019cc0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8019cc2:	2300      	movs	r3, #0
}
 8019cc4:	0018      	movs	r0, r3
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	b002      	add	sp, #8
 8019cca:	bd80      	pop	{r7, pc}

08019ccc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8019ccc:	b580      	push	{r7, lr}
 8019cce:	b082      	sub	sp, #8
 8019cd0:	af00      	add	r7, sp, #0
 8019cd2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	2258      	movs	r2, #88	@ 0x58
 8019cd8:	5a9b      	ldrh	r3, [r3, r2]
 8019cda:	b29b      	uxth	r3, r3
 8019cdc:	4a05      	ldr	r2, [pc, #20]	@ (8019cf4 <USB_DevConnect+0x28>)
 8019cde:	4313      	orrs	r3, r2
 8019ce0:	b299      	uxth	r1, r3
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	2258      	movs	r2, #88	@ 0x58
 8019ce6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019ce8:	2300      	movs	r3, #0
}
 8019cea:	0018      	movs	r0, r3
 8019cec:	46bd      	mov	sp, r7
 8019cee:	b002      	add	sp, #8
 8019cf0:	bd80      	pop	{r7, pc}
 8019cf2:	46c0      	nop			@ (mov r8, r8)
 8019cf4:	ffff8000 	.word	0xffff8000

08019cf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b084      	sub	sp, #16
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	2244      	movs	r2, #68	@ 0x44
 8019d04:	5a9b      	ldrh	r3, [r3, r2]
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
}
 8019d0c:	0018      	movs	r0, r3
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	b004      	add	sp, #16
 8019d12:	bd80      	pop	{r7, pc}

08019d14 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b08a      	sub	sp, #40	@ 0x28
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	60f8      	str	r0, [r7, #12]
 8019d1c:	60b9      	str	r1, [r7, #8]
 8019d1e:	0019      	movs	r1, r3
 8019d20:	1dbb      	adds	r3, r7, #6
 8019d22:	801a      	strh	r2, [r3, #0]
 8019d24:	1d3b      	adds	r3, r7, #4
 8019d26:	1c0a      	adds	r2, r1, #0
 8019d28:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8019d2a:	1d3b      	adds	r3, r7, #4
 8019d2c:	881b      	ldrh	r3, [r3, #0]
 8019d2e:	3301      	adds	r3, #1
 8019d30:	085b      	lsrs	r3, r3, #1
 8019d32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019d38:	68bb      	ldr	r3, [r7, #8]
 8019d3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8019d3c:	1dbb      	adds	r3, r7, #6
 8019d3e:	881a      	ldrh	r2, [r3, #0]
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	18d3      	adds	r3, r2, r3
 8019d44:	2280      	movs	r2, #128	@ 0x80
 8019d46:	00d2      	lsls	r2, r2, #3
 8019d48:	4694      	mov	ip, r2
 8019d4a:	4463      	add	r3, ip
 8019d4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8019d4e:	69bb      	ldr	r3, [r7, #24]
 8019d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d52:	e020      	b.n	8019d96 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8019d54:	69fb      	ldr	r3, [r7, #28]
 8019d56:	781a      	ldrb	r2, [r3, #0]
 8019d58:	2112      	movs	r1, #18
 8019d5a:	187b      	adds	r3, r7, r1
 8019d5c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8019d5e:	69fb      	ldr	r3, [r7, #28]
 8019d60:	3301      	adds	r3, #1
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	021b      	lsls	r3, r3, #8
 8019d66:	b21a      	sxth	r2, r3
 8019d68:	187b      	adds	r3, r7, r1
 8019d6a:	2000      	movs	r0, #0
 8019d6c:	5e1b      	ldrsh	r3, [r3, r0]
 8019d6e:	4313      	orrs	r3, r2
 8019d70:	b21a      	sxth	r2, r3
 8019d72:	187b      	adds	r3, r7, r1
 8019d74:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8019d76:	6a3b      	ldr	r3, [r7, #32]
 8019d78:	187a      	adds	r2, r7, r1
 8019d7a:	8812      	ldrh	r2, [r2, #0]
 8019d7c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8019d7e:	6a3b      	ldr	r3, [r7, #32]
 8019d80:	3302      	adds	r3, #2
 8019d82:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8019d84:	69fb      	ldr	r3, [r7, #28]
 8019d86:	3301      	adds	r3, #1
 8019d88:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8019d8a:	69fb      	ldr	r3, [r7, #28]
 8019d8c:	3301      	adds	r3, #1
 8019d8e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8019d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d92:	3b01      	subs	r3, #1
 8019d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d1db      	bne.n	8019d54 <USB_WritePMA+0x40>
  }
}
 8019d9c:	46c0      	nop			@ (mov r8, r8)
 8019d9e:	46c0      	nop			@ (mov r8, r8)
 8019da0:	46bd      	mov	sp, r7
 8019da2:	b00a      	add	sp, #40	@ 0x28
 8019da4:	bd80      	pop	{r7, pc}

08019da6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019da6:	b580      	push	{r7, lr}
 8019da8:	b08a      	sub	sp, #40	@ 0x28
 8019daa:	af00      	add	r7, sp, #0
 8019dac:	60f8      	str	r0, [r7, #12]
 8019dae:	60b9      	str	r1, [r7, #8]
 8019db0:	0019      	movs	r1, r3
 8019db2:	1dbb      	adds	r3, r7, #6
 8019db4:	801a      	strh	r2, [r3, #0]
 8019db6:	1d3b      	adds	r3, r7, #4
 8019db8:	1c0a      	adds	r2, r1, #0
 8019dba:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8019dbc:	1d3b      	adds	r3, r7, #4
 8019dbe:	881b      	ldrh	r3, [r3, #0]
 8019dc0:	085b      	lsrs	r3, r3, #1
 8019dc2:	b29b      	uxth	r3, r3
 8019dc4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019dca:	68bb      	ldr	r3, [r7, #8]
 8019dcc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8019dce:	1dbb      	adds	r3, r7, #6
 8019dd0:	881a      	ldrh	r2, [r3, #0]
 8019dd2:	697b      	ldr	r3, [r7, #20]
 8019dd4:	18d3      	adds	r3, r2, r3
 8019dd6:	2280      	movs	r2, #128	@ 0x80
 8019dd8:	00d2      	lsls	r2, r2, #3
 8019dda:	4694      	mov	ip, r2
 8019ddc:	4463      	add	r3, ip
 8019dde:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8019de0:	69bb      	ldr	r3, [r7, #24]
 8019de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8019de4:	e018      	b.n	8019e18 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8019de6:	6a3b      	ldr	r3, [r7, #32]
 8019de8:	881b      	ldrh	r3, [r3, #0]
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8019dee:	6a3b      	ldr	r3, [r7, #32]
 8019df0:	3302      	adds	r3, #2
 8019df2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019df4:	693b      	ldr	r3, [r7, #16]
 8019df6:	b2da      	uxtb	r2, r3
 8019df8:	69fb      	ldr	r3, [r7, #28]
 8019dfa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019dfc:	69fb      	ldr	r3, [r7, #28]
 8019dfe:	3301      	adds	r3, #1
 8019e00:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	0a1b      	lsrs	r3, r3, #8
 8019e06:	b2da      	uxtb	r2, r3
 8019e08:	69fb      	ldr	r3, [r7, #28]
 8019e0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019e0c:	69fb      	ldr	r3, [r7, #28]
 8019e0e:	3301      	adds	r3, #1
 8019e10:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8019e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e14:	3b01      	subs	r3, #1
 8019e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8019e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d1e3      	bne.n	8019de6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8019e1e:	1d3b      	adds	r3, r7, #4
 8019e20:	881b      	ldrh	r3, [r3, #0]
 8019e22:	2201      	movs	r2, #1
 8019e24:	4013      	ands	r3, r2
 8019e26:	b29b      	uxth	r3, r3
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d007      	beq.n	8019e3c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8019e2c:	6a3b      	ldr	r3, [r7, #32]
 8019e2e:	881b      	ldrh	r3, [r3, #0]
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019e34:	693b      	ldr	r3, [r7, #16]
 8019e36:	b2da      	uxtb	r2, r3
 8019e38:	69fb      	ldr	r3, [r7, #28]
 8019e3a:	701a      	strb	r2, [r3, #0]
  }
}
 8019e3c:	46c0      	nop			@ (mov r8, r8)
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	b00a      	add	sp, #40	@ 0x28
 8019e42:	bd80      	pop	{r7, pc}

08019e44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019e44:	b580      	push	{r7, lr}
 8019e46:	b084      	sub	sp, #16
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
 8019e4c:	000a      	movs	r2, r1
 8019e4e:	1cfb      	adds	r3, r7, #3
 8019e50:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8019e52:	230f      	movs	r3, #15
 8019e54:	18fb      	adds	r3, r7, r3
 8019e56:	2200      	movs	r2, #0
 8019e58:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	7c1b      	ldrb	r3, [r3, #16]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d116      	bne.n	8019e90 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019e62:	2380      	movs	r3, #128	@ 0x80
 8019e64:	009b      	lsls	r3, r3, #2
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	2202      	movs	r2, #2
 8019e6a:	2181      	movs	r1, #129	@ 0x81
 8019e6c:	f002 f8eb 	bl	801c046 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	2201      	movs	r2, #1
 8019e74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019e76:	2380      	movs	r3, #128	@ 0x80
 8019e78:	009b      	lsls	r3, r3, #2
 8019e7a:	6878      	ldr	r0, [r7, #4]
 8019e7c:	2202      	movs	r2, #2
 8019e7e:	2101      	movs	r1, #1
 8019e80:	f002 f8e1 	bl	801c046 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019e84:	687a      	ldr	r2, [r7, #4]
 8019e86:	23b6      	movs	r3, #182	@ 0xb6
 8019e88:	005b      	lsls	r3, r3, #1
 8019e8a:	2101      	movs	r1, #1
 8019e8c:	50d1      	str	r1, [r2, r3]
 8019e8e:	e013      	b.n	8019eb8 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019e90:	6878      	ldr	r0, [r7, #4]
 8019e92:	2340      	movs	r3, #64	@ 0x40
 8019e94:	2202      	movs	r2, #2
 8019e96:	2181      	movs	r1, #129	@ 0x81
 8019e98:	f002 f8d5 	bl	801c046 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	2201      	movs	r2, #1
 8019ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019ea2:	6878      	ldr	r0, [r7, #4]
 8019ea4:	2340      	movs	r3, #64	@ 0x40
 8019ea6:	2202      	movs	r2, #2
 8019ea8:	2101      	movs	r1, #1
 8019eaa:	f002 f8cc 	bl	801c046 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019eae:	687a      	ldr	r2, [r7, #4]
 8019eb0:	23b6      	movs	r3, #182	@ 0xb6
 8019eb2:	005b      	lsls	r3, r3, #1
 8019eb4:	2101      	movs	r1, #1
 8019eb6:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8019eb8:	6878      	ldr	r0, [r7, #4]
 8019eba:	2308      	movs	r3, #8
 8019ebc:	2203      	movs	r2, #3
 8019ebe:	2182      	movs	r1, #130	@ 0x82
 8019ec0:	f002 f8c1 	bl	801c046 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8019eca:	2387      	movs	r3, #135	@ 0x87
 8019ecc:	009b      	lsls	r3, r3, #2
 8019ece:	0018      	movs	r0, r3
 8019ed0:	f002 fa52 	bl	801c378 <USBD_static_malloc>
 8019ed4:	0001      	movs	r1, r0
 8019ed6:	687a      	ldr	r2, [r7, #4]
 8019ed8:	23ae      	movs	r3, #174	@ 0xae
 8019eda:	009b      	lsls	r3, r3, #2
 8019edc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8019ede:	687a      	ldr	r2, [r7, #4]
 8019ee0:	23ae      	movs	r3, #174	@ 0xae
 8019ee2:	009b      	lsls	r3, r3, #2
 8019ee4:	58d3      	ldr	r3, [r2, r3]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d104      	bne.n	8019ef4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8019eea:	230f      	movs	r3, #15
 8019eec:	18fb      	adds	r3, r7, r3
 8019eee:	2201      	movs	r2, #1
 8019ef0:	701a      	strb	r2, [r3, #0]
 8019ef2:	e02c      	b.n	8019f4e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019ef4:	687a      	ldr	r2, [r7, #4]
 8019ef6:	23ae      	movs	r3, #174	@ 0xae
 8019ef8:	009b      	lsls	r3, r3, #2
 8019efa:	58d3      	ldr	r3, [r2, r3]
 8019efc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8019efe:	687a      	ldr	r2, [r7, #4]
 8019f00:	23af      	movs	r3, #175	@ 0xaf
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	58d3      	ldr	r3, [r2, r3]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8019f0a:	68ba      	ldr	r2, [r7, #8]
 8019f0c:	2385      	movs	r3, #133	@ 0x85
 8019f0e:	009b      	lsls	r3, r3, #2
 8019f10:	2100      	movs	r1, #0
 8019f12:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8019f14:	68ba      	ldr	r2, [r7, #8]
 8019f16:	2386      	movs	r3, #134	@ 0x86
 8019f18:	009b      	lsls	r3, r3, #2
 8019f1a:	2100      	movs	r1, #0
 8019f1c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	7c1b      	ldrb	r3, [r3, #16]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d10a      	bne.n	8019f3c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019f26:	68ba      	ldr	r2, [r7, #8]
 8019f28:	2381      	movs	r3, #129	@ 0x81
 8019f2a:	009b      	lsls	r3, r3, #2
 8019f2c:	58d2      	ldr	r2, [r2, r3]
 8019f2e:	2380      	movs	r3, #128	@ 0x80
 8019f30:	009b      	lsls	r3, r3, #2
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	2101      	movs	r1, #1
 8019f36:	f002 f9d1 	bl	801c2dc <USBD_LL_PrepareReceive>
 8019f3a:	e008      	b.n	8019f4e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019f3c:	68ba      	ldr	r2, [r7, #8]
 8019f3e:	2381      	movs	r3, #129	@ 0x81
 8019f40:	009b      	lsls	r3, r3, #2
 8019f42:	58d2      	ldr	r2, [r2, r3]
 8019f44:	6878      	ldr	r0, [r7, #4]
 8019f46:	2340      	movs	r3, #64	@ 0x40
 8019f48:	2101      	movs	r1, #1
 8019f4a:	f002 f9c7 	bl	801c2dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8019f4e:	230f      	movs	r3, #15
 8019f50:	18fb      	adds	r3, r7, r3
 8019f52:	781b      	ldrb	r3, [r3, #0]
}
 8019f54:	0018      	movs	r0, r3
 8019f56:	46bd      	mov	sp, r7
 8019f58:	b004      	add	sp, #16
 8019f5a:	bd80      	pop	{r7, pc}

08019f5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b084      	sub	sp, #16
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
 8019f64:	000a      	movs	r2, r1
 8019f66:	1cfb      	adds	r3, r7, #3
 8019f68:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8019f6a:	230f      	movs	r3, #15
 8019f6c:	18fb      	adds	r3, r7, r3
 8019f6e:	2200      	movs	r2, #0
 8019f70:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	2181      	movs	r1, #129	@ 0x81
 8019f76:	0018      	movs	r0, r3
 8019f78:	f002 f89c 	bl	801c0b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	2200      	movs	r2, #0
 8019f80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	2101      	movs	r1, #1
 8019f86:	0018      	movs	r0, r3
 8019f88:	f002 f894 	bl	801c0b4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8019f8c:	687a      	ldr	r2, [r7, #4]
 8019f8e:	23b6      	movs	r3, #182	@ 0xb6
 8019f90:	005b      	lsls	r3, r3, #1
 8019f92:	2100      	movs	r1, #0
 8019f94:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	2182      	movs	r1, #130	@ 0x82
 8019f9a:	0018      	movs	r0, r3
 8019f9c:	f002 f88a 	bl	801c0b4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8019fa6:	687a      	ldr	r2, [r7, #4]
 8019fa8:	23ae      	movs	r3, #174	@ 0xae
 8019faa:	009b      	lsls	r3, r3, #2
 8019fac:	58d3      	ldr	r3, [r2, r3]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d011      	beq.n	8019fd6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	23af      	movs	r3, #175	@ 0xaf
 8019fb6:	009b      	lsls	r3, r3, #2
 8019fb8:	58d3      	ldr	r3, [r2, r3]
 8019fba:	685b      	ldr	r3, [r3, #4]
 8019fbc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	23ae      	movs	r3, #174	@ 0xae
 8019fc2:	009b      	lsls	r3, r3, #2
 8019fc4:	58d3      	ldr	r3, [r2, r3]
 8019fc6:	0018      	movs	r0, r3
 8019fc8:	f002 f9e2 	bl	801c390 <USBD_static_free>
    pdev->pClassData = NULL;
 8019fcc:	687a      	ldr	r2, [r7, #4]
 8019fce:	23ae      	movs	r3, #174	@ 0xae
 8019fd0:	009b      	lsls	r3, r3, #2
 8019fd2:	2100      	movs	r1, #0
 8019fd4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8019fd6:	230f      	movs	r3, #15
 8019fd8:	18fb      	adds	r3, r7, r3
 8019fda:	781b      	ldrb	r3, [r3, #0]
}
 8019fdc:	0018      	movs	r0, r3
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	b004      	add	sp, #16
 8019fe2:	bd80      	pop	{r7, pc}

08019fe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b086      	sub	sp, #24
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]
 8019fec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019fee:	687a      	ldr	r2, [r7, #4]
 8019ff0:	23ae      	movs	r3, #174	@ 0xae
 8019ff2:	009b      	lsls	r3, r3, #2
 8019ff4:	58d3      	ldr	r3, [r2, r3]
 8019ff6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8019ff8:	230f      	movs	r3, #15
 8019ffa:	18fb      	adds	r3, r7, r3
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a000:	230c      	movs	r3, #12
 801a002:	18fb      	adds	r3, r7, r3
 801a004:	2200      	movs	r2, #0
 801a006:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a008:	2317      	movs	r3, #23
 801a00a:	18fb      	adds	r3, r7, r3
 801a00c:	2200      	movs	r2, #0
 801a00e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a010:	683b      	ldr	r3, [r7, #0]
 801a012:	781b      	ldrb	r3, [r3, #0]
 801a014:	001a      	movs	r2, r3
 801a016:	2360      	movs	r3, #96	@ 0x60
 801a018:	4013      	ands	r3, r2
 801a01a:	d03d      	beq.n	801a098 <USBD_CDC_Setup+0xb4>
 801a01c:	2b20      	cmp	r3, #32
 801a01e:	d000      	beq.n	801a022 <USBD_CDC_Setup+0x3e>
 801a020:	e094      	b.n	801a14c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a022:	683b      	ldr	r3, [r7, #0]
 801a024:	88db      	ldrh	r3, [r3, #6]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d02b      	beq.n	801a082 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	781b      	ldrb	r3, [r3, #0]
 801a02e:	b25b      	sxtb	r3, r3
 801a030:	2b00      	cmp	r3, #0
 801a032:	da12      	bge.n	801a05a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a034:	687a      	ldr	r2, [r7, #4]
 801a036:	23af      	movs	r3, #175	@ 0xaf
 801a038:	009b      	lsls	r3, r3, #2
 801a03a:	58d3      	ldr	r3, [r2, r3]
 801a03c:	689b      	ldr	r3, [r3, #8]
 801a03e:	683a      	ldr	r2, [r7, #0]
 801a040:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a042:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a044:	683a      	ldr	r2, [r7, #0]
 801a046:	88d2      	ldrh	r2, [r2, #6]
 801a048:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a04a:	6939      	ldr	r1, [r7, #16]
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	88da      	ldrh	r2, [r3, #6]
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	0018      	movs	r0, r3
 801a054:	f001 fbaf 	bl	801b7b6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a058:	e083      	b.n	801a162 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	7859      	ldrb	r1, [r3, #1]
 801a05e:	693a      	ldr	r2, [r7, #16]
 801a060:	2380      	movs	r3, #128	@ 0x80
 801a062:	009b      	lsls	r3, r3, #2
 801a064:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	88db      	ldrh	r3, [r3, #6]
 801a06a:	b2d9      	uxtb	r1, r3
 801a06c:	693b      	ldr	r3, [r7, #16]
 801a06e:	4a40      	ldr	r2, [pc, #256]	@ (801a170 <USBD_CDC_Setup+0x18c>)
 801a070:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a072:	6939      	ldr	r1, [r7, #16]
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	88da      	ldrh	r2, [r3, #6]
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	0018      	movs	r0, r3
 801a07c:	f001 fbce 	bl	801b81c <USBD_CtlPrepareRx>
      break;
 801a080:	e06f      	b.n	801a162 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a082:	687a      	ldr	r2, [r7, #4]
 801a084:	23af      	movs	r3, #175	@ 0xaf
 801a086:	009b      	lsls	r3, r3, #2
 801a088:	58d3      	ldr	r3, [r2, r3]
 801a08a:	689b      	ldr	r3, [r3, #8]
 801a08c:	683a      	ldr	r2, [r7, #0]
 801a08e:	7850      	ldrb	r0, [r2, #1]
 801a090:	6839      	ldr	r1, [r7, #0]
 801a092:	2200      	movs	r2, #0
 801a094:	4798      	blx	r3
      break;
 801a096:	e064      	b.n	801a162 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a098:	683b      	ldr	r3, [r7, #0]
 801a09a:	785b      	ldrb	r3, [r3, #1]
 801a09c:	2b0b      	cmp	r3, #11
 801a09e:	d037      	beq.n	801a110 <USBD_CDC_Setup+0x12c>
 801a0a0:	dc47      	bgt.n	801a132 <USBD_CDC_Setup+0x14e>
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d002      	beq.n	801a0ac <USBD_CDC_Setup+0xc8>
 801a0a6:	2b0a      	cmp	r3, #10
 801a0a8:	d019      	beq.n	801a0de <USBD_CDC_Setup+0xfa>
 801a0aa:	e042      	b.n	801a132 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a0ac:	687a      	ldr	r2, [r7, #4]
 801a0ae:	23a7      	movs	r3, #167	@ 0xa7
 801a0b0:	009b      	lsls	r3, r3, #2
 801a0b2:	5cd3      	ldrb	r3, [r2, r3]
 801a0b4:	2b03      	cmp	r3, #3
 801a0b6:	d107      	bne.n	801a0c8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801a0b8:	230c      	movs	r3, #12
 801a0ba:	18f9      	adds	r1, r7, r3
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	2202      	movs	r2, #2
 801a0c0:	0018      	movs	r0, r3
 801a0c2:	f001 fb78 	bl	801b7b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a0c6:	e040      	b.n	801a14a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a0c8:	683a      	ldr	r2, [r7, #0]
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	0011      	movs	r1, r2
 801a0ce:	0018      	movs	r0, r3
 801a0d0:	f001 faf3 	bl	801b6ba <USBD_CtlError>
            ret = USBD_FAIL;
 801a0d4:	2317      	movs	r3, #23
 801a0d6:	18fb      	adds	r3, r7, r3
 801a0d8:	2202      	movs	r2, #2
 801a0da:	701a      	strb	r2, [r3, #0]
          break;
 801a0dc:	e035      	b.n	801a14a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a0de:	687a      	ldr	r2, [r7, #4]
 801a0e0:	23a7      	movs	r3, #167	@ 0xa7
 801a0e2:	009b      	lsls	r3, r3, #2
 801a0e4:	5cd3      	ldrb	r3, [r2, r3]
 801a0e6:	2b03      	cmp	r3, #3
 801a0e8:	d107      	bne.n	801a0fa <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801a0ea:	230f      	movs	r3, #15
 801a0ec:	18f9      	adds	r1, r7, r3
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	2201      	movs	r2, #1
 801a0f2:	0018      	movs	r0, r3
 801a0f4:	f001 fb5f 	bl	801b7b6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a0f8:	e027      	b.n	801a14a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a0fa:	683a      	ldr	r2, [r7, #0]
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	0011      	movs	r1, r2
 801a100:	0018      	movs	r0, r3
 801a102:	f001 fada 	bl	801b6ba <USBD_CtlError>
            ret = USBD_FAIL;
 801a106:	2317      	movs	r3, #23
 801a108:	18fb      	adds	r3, r7, r3
 801a10a:	2202      	movs	r2, #2
 801a10c:	701a      	strb	r2, [r3, #0]
          break;
 801a10e:	e01c      	b.n	801a14a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a110:	687a      	ldr	r2, [r7, #4]
 801a112:	23a7      	movs	r3, #167	@ 0xa7
 801a114:	009b      	lsls	r3, r3, #2
 801a116:	5cd3      	ldrb	r3, [r2, r3]
 801a118:	2b03      	cmp	r3, #3
 801a11a:	d015      	beq.n	801a148 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801a11c:	683a      	ldr	r2, [r7, #0]
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	0011      	movs	r1, r2
 801a122:	0018      	movs	r0, r3
 801a124:	f001 fac9 	bl	801b6ba <USBD_CtlError>
            ret = USBD_FAIL;
 801a128:	2317      	movs	r3, #23
 801a12a:	18fb      	adds	r3, r7, r3
 801a12c:	2202      	movs	r2, #2
 801a12e:	701a      	strb	r2, [r3, #0]
          }
          break;
 801a130:	e00a      	b.n	801a148 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801a132:	683a      	ldr	r2, [r7, #0]
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	0011      	movs	r1, r2
 801a138:	0018      	movs	r0, r3
 801a13a:	f001 fabe 	bl	801b6ba <USBD_CtlError>
          ret = USBD_FAIL;
 801a13e:	2317      	movs	r3, #23
 801a140:	18fb      	adds	r3, r7, r3
 801a142:	2202      	movs	r2, #2
 801a144:	701a      	strb	r2, [r3, #0]
          break;
 801a146:	e000      	b.n	801a14a <USBD_CDC_Setup+0x166>
          break;
 801a148:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a14a:	e00a      	b.n	801a162 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801a14c:	683a      	ldr	r2, [r7, #0]
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	0011      	movs	r1, r2
 801a152:	0018      	movs	r0, r3
 801a154:	f001 fab1 	bl	801b6ba <USBD_CtlError>
      ret = USBD_FAIL;
 801a158:	2317      	movs	r3, #23
 801a15a:	18fb      	adds	r3, r7, r3
 801a15c:	2202      	movs	r2, #2
 801a15e:	701a      	strb	r2, [r3, #0]
      break;
 801a160:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a162:	2317      	movs	r3, #23
 801a164:	18fb      	adds	r3, r7, r3
 801a166:	781b      	ldrb	r3, [r3, #0]
}
 801a168:	0018      	movs	r0, r3
 801a16a:	46bd      	mov	sp, r7
 801a16c:	b006      	add	sp, #24
 801a16e:	bd80      	pop	{r7, pc}
 801a170:	00000201 	.word	0x00000201

0801a174 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b084      	sub	sp, #16
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
 801a17c:	000a      	movs	r2, r1
 801a17e:	1cfb      	adds	r3, r7, #3
 801a180:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a182:	687a      	ldr	r2, [r7, #4]
 801a184:	23ae      	movs	r3, #174	@ 0xae
 801a186:	009b      	lsls	r3, r3, #2
 801a188:	58d3      	ldr	r3, [r2, r3]
 801a18a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801a18c:	687a      	ldr	r2, [r7, #4]
 801a18e:	23b0      	movs	r3, #176	@ 0xb0
 801a190:	009b      	lsls	r3, r3, #2
 801a192:	58d3      	ldr	r3, [r2, r3]
 801a194:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801a196:	687a      	ldr	r2, [r7, #4]
 801a198:	23ae      	movs	r3, #174	@ 0xae
 801a19a:	009b      	lsls	r3, r3, #2
 801a19c:	58d3      	ldr	r3, [r2, r3]
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d03e      	beq.n	801a220 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801a1a2:	1cfb      	adds	r3, r7, #3
 801a1a4:	781a      	ldrb	r2, [r3, #0]
 801a1a6:	6879      	ldr	r1, [r7, #4]
 801a1a8:	0013      	movs	r3, r2
 801a1aa:	009b      	lsls	r3, r3, #2
 801a1ac:	189b      	adds	r3, r3, r2
 801a1ae:	009b      	lsls	r3, r3, #2
 801a1b0:	18cb      	adds	r3, r1, r3
 801a1b2:	331c      	adds	r3, #28
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d02b      	beq.n	801a212 <USBD_CDC_DataIn+0x9e>
 801a1ba:	1cfb      	adds	r3, r7, #3
 801a1bc:	781a      	ldrb	r2, [r3, #0]
 801a1be:	6879      	ldr	r1, [r7, #4]
 801a1c0:	0013      	movs	r3, r2
 801a1c2:	009b      	lsls	r3, r3, #2
 801a1c4:	189b      	adds	r3, r3, r2
 801a1c6:	009b      	lsls	r3, r3, #2
 801a1c8:	18cb      	adds	r3, r1, r3
 801a1ca:	331c      	adds	r3, #28
 801a1cc:	6818      	ldr	r0, [r3, #0]
 801a1ce:	1cfb      	adds	r3, r7, #3
 801a1d0:	781a      	ldrb	r2, [r3, #0]
 801a1d2:	68b9      	ldr	r1, [r7, #8]
 801a1d4:	0013      	movs	r3, r2
 801a1d6:	009b      	lsls	r3, r3, #2
 801a1d8:	189b      	adds	r3, r3, r2
 801a1da:	00db      	lsls	r3, r3, #3
 801a1dc:	18cb      	adds	r3, r1, r3
 801a1de:	3338      	adds	r3, #56	@ 0x38
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	0019      	movs	r1, r3
 801a1e4:	f7e6 f864 	bl	80002b0 <__aeabi_uidivmod>
 801a1e8:	1e0b      	subs	r3, r1, #0
 801a1ea:	d112      	bne.n	801a212 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801a1ec:	1cfb      	adds	r3, r7, #3
 801a1ee:	781a      	ldrb	r2, [r3, #0]
 801a1f0:	6879      	ldr	r1, [r7, #4]
 801a1f2:	0013      	movs	r3, r2
 801a1f4:	009b      	lsls	r3, r3, #2
 801a1f6:	189b      	adds	r3, r3, r2
 801a1f8:	009b      	lsls	r3, r3, #2
 801a1fa:	18cb      	adds	r3, r1, r3
 801a1fc:	331c      	adds	r3, #28
 801a1fe:	2200      	movs	r2, #0
 801a200:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a202:	1cfb      	adds	r3, r7, #3
 801a204:	7819      	ldrb	r1, [r3, #0]
 801a206:	6878      	ldr	r0, [r7, #4]
 801a208:	2300      	movs	r3, #0
 801a20a:	2200      	movs	r2, #0
 801a20c:	f002 f82f 	bl	801c26e <USBD_LL_Transmit>
 801a210:	e004      	b.n	801a21c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801a212:	68fa      	ldr	r2, [r7, #12]
 801a214:	2385      	movs	r3, #133	@ 0x85
 801a216:	009b      	lsls	r3, r3, #2
 801a218:	2100      	movs	r1, #0
 801a21a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801a21c:	2300      	movs	r3, #0
 801a21e:	e000      	b.n	801a222 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801a220:	2302      	movs	r3, #2
  }
}
 801a222:	0018      	movs	r0, r3
 801a224:	46bd      	mov	sp, r7
 801a226:	b004      	add	sp, #16
 801a228:	bd80      	pop	{r7, pc}

0801a22a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a22a:	b580      	push	{r7, lr}
 801a22c:	b084      	sub	sp, #16
 801a22e:	af00      	add	r7, sp, #0
 801a230:	6078      	str	r0, [r7, #4]
 801a232:	000a      	movs	r2, r1
 801a234:	1cfb      	adds	r3, r7, #3
 801a236:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a238:	687a      	ldr	r2, [r7, #4]
 801a23a:	23ae      	movs	r3, #174	@ 0xae
 801a23c:	009b      	lsls	r3, r3, #2
 801a23e:	58d3      	ldr	r3, [r2, r3]
 801a240:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a242:	1cfb      	adds	r3, r7, #3
 801a244:	781a      	ldrb	r2, [r3, #0]
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	0011      	movs	r1, r2
 801a24a:	0018      	movs	r0, r3
 801a24c:	f002 f87d 	bl	801c34a <USBD_LL_GetRxDataSize>
 801a250:	0001      	movs	r1, r0
 801a252:	68fa      	ldr	r2, [r7, #12]
 801a254:	2383      	movs	r3, #131	@ 0x83
 801a256:	009b      	lsls	r3, r3, #2
 801a258:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801a25a:	687a      	ldr	r2, [r7, #4]
 801a25c:	23ae      	movs	r3, #174	@ 0xae
 801a25e:	009b      	lsls	r3, r3, #2
 801a260:	58d3      	ldr	r3, [r2, r3]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d011      	beq.n	801a28a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a266:	687a      	ldr	r2, [r7, #4]
 801a268:	23af      	movs	r3, #175	@ 0xaf
 801a26a:	009b      	lsls	r3, r3, #2
 801a26c:	58d3      	ldr	r3, [r2, r3]
 801a26e:	68da      	ldr	r2, [r3, #12]
 801a270:	68f9      	ldr	r1, [r7, #12]
 801a272:	2381      	movs	r3, #129	@ 0x81
 801a274:	009b      	lsls	r3, r3, #2
 801a276:	58c8      	ldr	r0, [r1, r3]
 801a278:	68fb      	ldr	r3, [r7, #12]
 801a27a:	2183      	movs	r1, #131	@ 0x83
 801a27c:	0089      	lsls	r1, r1, #2
 801a27e:	468c      	mov	ip, r1
 801a280:	4463      	add	r3, ip
 801a282:	0019      	movs	r1, r3
 801a284:	4790      	blx	r2

    return USBD_OK;
 801a286:	2300      	movs	r3, #0
 801a288:	e000      	b.n	801a28c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801a28a:	2302      	movs	r3, #2
  }
}
 801a28c:	0018      	movs	r0, r3
 801a28e:	46bd      	mov	sp, r7
 801a290:	b004      	add	sp, #16
 801a292:	bd80      	pop	{r7, pc}

0801a294 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a294:	b590      	push	{r4, r7, lr}
 801a296:	b085      	sub	sp, #20
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a29c:	687a      	ldr	r2, [r7, #4]
 801a29e:	23ae      	movs	r3, #174	@ 0xae
 801a2a0:	009b      	lsls	r3, r3, #2
 801a2a2:	58d3      	ldr	r3, [r2, r3]
 801a2a4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a2a6:	687a      	ldr	r2, [r7, #4]
 801a2a8:	23af      	movs	r3, #175	@ 0xaf
 801a2aa:	009b      	lsls	r3, r3, #2
 801a2ac:	58d3      	ldr	r3, [r2, r3]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d018      	beq.n	801a2e4 <USBD_CDC_EP0_RxReady+0x50>
 801a2b2:	68fa      	ldr	r2, [r7, #12]
 801a2b4:	2380      	movs	r3, #128	@ 0x80
 801a2b6:	009b      	lsls	r3, r3, #2
 801a2b8:	5cd3      	ldrb	r3, [r2, r3]
 801a2ba:	2bff      	cmp	r3, #255	@ 0xff
 801a2bc:	d012      	beq.n	801a2e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a2be:	687a      	ldr	r2, [r7, #4]
 801a2c0:	23af      	movs	r3, #175	@ 0xaf
 801a2c2:	009b      	lsls	r3, r3, #2
 801a2c4:	58d3      	ldr	r3, [r2, r3]
 801a2c6:	689b      	ldr	r3, [r3, #8]
 801a2c8:	68f9      	ldr	r1, [r7, #12]
 801a2ca:	2280      	movs	r2, #128	@ 0x80
 801a2cc:	0092      	lsls	r2, r2, #2
 801a2ce:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801a2d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801a2d2:	68fa      	ldr	r2, [r7, #12]
 801a2d4:	4c06      	ldr	r4, [pc, #24]	@ (801a2f0 <USBD_CDC_EP0_RxReady+0x5c>)
 801a2d6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a2d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a2da:	68fa      	ldr	r2, [r7, #12]
 801a2dc:	2380      	movs	r3, #128	@ 0x80
 801a2de:	009b      	lsls	r3, r3, #2
 801a2e0:	21ff      	movs	r1, #255	@ 0xff
 801a2e2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801a2e4:	2300      	movs	r3, #0
}
 801a2e6:	0018      	movs	r0, r3
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	b005      	add	sp, #20
 801a2ec:	bd90      	pop	{r4, r7, pc}
 801a2ee:	46c0      	nop			@ (mov r8, r8)
 801a2f0:	00000201 	.word	0x00000201

0801a2f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b082      	sub	sp, #8
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	2243      	movs	r2, #67	@ 0x43
 801a300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801a302:	4b02      	ldr	r3, [pc, #8]	@ (801a30c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801a304:	0018      	movs	r0, r3
 801a306:	46bd      	mov	sp, r7
 801a308:	b002      	add	sp, #8
 801a30a:	bd80      	pop	{r7, pc}
 801a30c:	20000168 	.word	0x20000168

0801a310 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b082      	sub	sp, #8
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	2243      	movs	r2, #67	@ 0x43
 801a31c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801a31e:	4b02      	ldr	r3, [pc, #8]	@ (801a328 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801a320:	0018      	movs	r0, r3
 801a322:	46bd      	mov	sp, r7
 801a324:	b002      	add	sp, #8
 801a326:	bd80      	pop	{r7, pc}
 801a328:	20000124 	.word	0x20000124

0801a32c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801a32c:	b580      	push	{r7, lr}
 801a32e:	b082      	sub	sp, #8
 801a330:	af00      	add	r7, sp, #0
 801a332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2243      	movs	r2, #67	@ 0x43
 801a338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801a33a:	4b02      	ldr	r3, [pc, #8]	@ (801a344 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801a33c:	0018      	movs	r0, r3
 801a33e:	46bd      	mov	sp, r7
 801a340:	b002      	add	sp, #8
 801a342:	bd80      	pop	{r7, pc}
 801a344:	200001ac 	.word	0x200001ac

0801a348 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801a348:	b580      	push	{r7, lr}
 801a34a:	b082      	sub	sp, #8
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	220a      	movs	r2, #10
 801a354:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801a356:	4b02      	ldr	r3, [pc, #8]	@ (801a360 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801a358:	0018      	movs	r0, r3
 801a35a:	46bd      	mov	sp, r7
 801a35c:	b002      	add	sp, #8
 801a35e:	bd80      	pop	{r7, pc}
 801a360:	200000e0 	.word	0x200000e0

0801a364 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b084      	sub	sp, #16
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
 801a36c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801a36e:	200f      	movs	r0, #15
 801a370:	183b      	adds	r3, r7, r0
 801a372:	2202      	movs	r2, #2
 801a374:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801a376:	683b      	ldr	r3, [r7, #0]
 801a378:	2b00      	cmp	r3, #0
 801a37a:	d007      	beq.n	801a38c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801a37c:	687a      	ldr	r2, [r7, #4]
 801a37e:	23af      	movs	r3, #175	@ 0xaf
 801a380:	009b      	lsls	r3, r3, #2
 801a382:	6839      	ldr	r1, [r7, #0]
 801a384:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801a386:	183b      	adds	r3, r7, r0
 801a388:	2200      	movs	r2, #0
 801a38a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801a38c:	230f      	movs	r3, #15
 801a38e:	18fb      	adds	r3, r7, r3
 801a390:	781b      	ldrb	r3, [r3, #0]
}
 801a392:	0018      	movs	r0, r3
 801a394:	46bd      	mov	sp, r7
 801a396:	b004      	add	sp, #16
 801a398:	bd80      	pop	{r7, pc}

0801a39a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801a39a:	b580      	push	{r7, lr}
 801a39c:	b086      	sub	sp, #24
 801a39e:	af00      	add	r7, sp, #0
 801a3a0:	60f8      	str	r0, [r7, #12]
 801a3a2:	60b9      	str	r1, [r7, #8]
 801a3a4:	1dbb      	adds	r3, r7, #6
 801a3a6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a3a8:	68fa      	ldr	r2, [r7, #12]
 801a3aa:	23ae      	movs	r3, #174	@ 0xae
 801a3ac:	009b      	lsls	r3, r3, #2
 801a3ae:	58d3      	ldr	r3, [r2, r3]
 801a3b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801a3b2:	697a      	ldr	r2, [r7, #20]
 801a3b4:	2382      	movs	r3, #130	@ 0x82
 801a3b6:	009b      	lsls	r3, r3, #2
 801a3b8:	68b9      	ldr	r1, [r7, #8]
 801a3ba:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801a3bc:	1dbb      	adds	r3, r7, #6
 801a3be:	8819      	ldrh	r1, [r3, #0]
 801a3c0:	697a      	ldr	r2, [r7, #20]
 801a3c2:	2384      	movs	r3, #132	@ 0x84
 801a3c4:	009b      	lsls	r3, r3, #2
 801a3c6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a3c8:	2300      	movs	r3, #0
}
 801a3ca:	0018      	movs	r0, r3
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	b006      	add	sp, #24
 801a3d0:	bd80      	pop	{r7, pc}

0801a3d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801a3d2:	b580      	push	{r7, lr}
 801a3d4:	b084      	sub	sp, #16
 801a3d6:	af00      	add	r7, sp, #0
 801a3d8:	6078      	str	r0, [r7, #4]
 801a3da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a3dc:	687a      	ldr	r2, [r7, #4]
 801a3de:	23ae      	movs	r3, #174	@ 0xae
 801a3e0:	009b      	lsls	r3, r3, #2
 801a3e2:	58d3      	ldr	r3, [r2, r3]
 801a3e4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801a3e6:	68fa      	ldr	r2, [r7, #12]
 801a3e8:	2381      	movs	r3, #129	@ 0x81
 801a3ea:	009b      	lsls	r3, r3, #2
 801a3ec:	6839      	ldr	r1, [r7, #0]
 801a3ee:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a3f0:	2300      	movs	r3, #0
}
 801a3f2:	0018      	movs	r0, r3
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	b004      	add	sp, #16
 801a3f8:	bd80      	pop	{r7, pc}

0801a3fa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801a3fa:	b580      	push	{r7, lr}
 801a3fc:	b084      	sub	sp, #16
 801a3fe:	af00      	add	r7, sp, #0
 801a400:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a402:	687a      	ldr	r2, [r7, #4]
 801a404:	23ae      	movs	r3, #174	@ 0xae
 801a406:	009b      	lsls	r3, r3, #2
 801a408:	58d3      	ldr	r3, [r2, r3]
 801a40a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801a40c:	687a      	ldr	r2, [r7, #4]
 801a40e:	23ae      	movs	r3, #174	@ 0xae
 801a410:	009b      	lsls	r3, r3, #2
 801a412:	58d3      	ldr	r3, [r2, r3]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d022      	beq.n	801a45e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801a418:	68fa      	ldr	r2, [r7, #12]
 801a41a:	2385      	movs	r3, #133	@ 0x85
 801a41c:	009b      	lsls	r3, r3, #2
 801a41e:	58d3      	ldr	r3, [r2, r3]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d11a      	bne.n	801a45a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801a424:	68fa      	ldr	r2, [r7, #12]
 801a426:	2385      	movs	r3, #133	@ 0x85
 801a428:	009b      	lsls	r3, r3, #2
 801a42a:	2101      	movs	r1, #1
 801a42c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801a42e:	68fa      	ldr	r2, [r7, #12]
 801a430:	2384      	movs	r3, #132	@ 0x84
 801a432:	009b      	lsls	r3, r3, #2
 801a434:	58d2      	ldr	r2, [r2, r3]
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801a43a:	68fa      	ldr	r2, [r7, #12]
 801a43c:	2382      	movs	r3, #130	@ 0x82
 801a43e:	009b      	lsls	r3, r3, #2
 801a440:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801a442:	68fa      	ldr	r2, [r7, #12]
 801a444:	2384      	movs	r3, #132	@ 0x84
 801a446:	009b      	lsls	r3, r3, #2
 801a448:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801a44a:	b29b      	uxth	r3, r3
 801a44c:	6878      	ldr	r0, [r7, #4]
 801a44e:	000a      	movs	r2, r1
 801a450:	2181      	movs	r1, #129	@ 0x81
 801a452:	f001 ff0c 	bl	801c26e <USBD_LL_Transmit>

      return USBD_OK;
 801a456:	2300      	movs	r3, #0
 801a458:	e002      	b.n	801a460 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801a45a:	2301      	movs	r3, #1
 801a45c:	e000      	b.n	801a460 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801a45e:	2302      	movs	r3, #2
  }
}
 801a460:	0018      	movs	r0, r3
 801a462:	46bd      	mov	sp, r7
 801a464:	b004      	add	sp, #16
 801a466:	bd80      	pop	{r7, pc}

0801a468 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b084      	sub	sp, #16
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a470:	687a      	ldr	r2, [r7, #4]
 801a472:	23ae      	movs	r3, #174	@ 0xae
 801a474:	009b      	lsls	r3, r3, #2
 801a476:	58d3      	ldr	r3, [r2, r3]
 801a478:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801a47a:	687a      	ldr	r2, [r7, #4]
 801a47c:	23ae      	movs	r3, #174	@ 0xae
 801a47e:	009b      	lsls	r3, r3, #2
 801a480:	58d3      	ldr	r3, [r2, r3]
 801a482:	2b00      	cmp	r3, #0
 801a484:	d019      	beq.n	801a4ba <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	7c1b      	ldrb	r3, [r3, #16]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d10a      	bne.n	801a4a4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801a48e:	68fa      	ldr	r2, [r7, #12]
 801a490:	2381      	movs	r3, #129	@ 0x81
 801a492:	009b      	lsls	r3, r3, #2
 801a494:	58d2      	ldr	r2, [r2, r3]
 801a496:	2380      	movs	r3, #128	@ 0x80
 801a498:	009b      	lsls	r3, r3, #2
 801a49a:	6878      	ldr	r0, [r7, #4]
 801a49c:	2101      	movs	r1, #1
 801a49e:	f001 ff1d 	bl	801c2dc <USBD_LL_PrepareReceive>
 801a4a2:	e008      	b.n	801a4b6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801a4a4:	68fa      	ldr	r2, [r7, #12]
 801a4a6:	2381      	movs	r3, #129	@ 0x81
 801a4a8:	009b      	lsls	r3, r3, #2
 801a4aa:	58d2      	ldr	r2, [r2, r3]
 801a4ac:	6878      	ldr	r0, [r7, #4]
 801a4ae:	2340      	movs	r3, #64	@ 0x40
 801a4b0:	2101      	movs	r1, #1
 801a4b2:	f001 ff13 	bl	801c2dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	e000      	b.n	801a4bc <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801a4ba:	2302      	movs	r3, #2
  }
}
 801a4bc:	0018      	movs	r0, r3
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	b004      	add	sp, #16
 801a4c2:	bd80      	pop	{r7, pc}

0801a4c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801a4c4:	b580      	push	{r7, lr}
 801a4c6:	b084      	sub	sp, #16
 801a4c8:	af00      	add	r7, sp, #0
 801a4ca:	60f8      	str	r0, [r7, #12]
 801a4cc:	60b9      	str	r1, [r7, #8]
 801a4ce:	1dfb      	adds	r3, r7, #7
 801a4d0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d101      	bne.n	801a4dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801a4d8:	2302      	movs	r3, #2
 801a4da:	e020      	b.n	801a51e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801a4dc:	68fa      	ldr	r2, [r7, #12]
 801a4de:	23ad      	movs	r3, #173	@ 0xad
 801a4e0:	009b      	lsls	r3, r3, #2
 801a4e2:	58d3      	ldr	r3, [r2, r3]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d004      	beq.n	801a4f2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801a4e8:	68fa      	ldr	r2, [r7, #12]
 801a4ea:	23ad      	movs	r3, #173	@ 0xad
 801a4ec:	009b      	lsls	r3, r3, #2
 801a4ee:	2100      	movs	r1, #0
 801a4f0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801a4f2:	68bb      	ldr	r3, [r7, #8]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d004      	beq.n	801a502 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801a4f8:	68fa      	ldr	r2, [r7, #12]
 801a4fa:	23ac      	movs	r3, #172	@ 0xac
 801a4fc:	009b      	lsls	r3, r3, #2
 801a4fe:	68b9      	ldr	r1, [r7, #8]
 801a500:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a502:	68fa      	ldr	r2, [r7, #12]
 801a504:	23a7      	movs	r3, #167	@ 0xa7
 801a506:	009b      	lsls	r3, r3, #2
 801a508:	2101      	movs	r1, #1
 801a50a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	1dfa      	adds	r2, r7, #7
 801a510:	7812      	ldrb	r2, [r2, #0]
 801a512:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	0018      	movs	r0, r3
 801a518:	f001 fd0c 	bl	801bf34 <USBD_LL_Init>

  return USBD_OK;
 801a51c:	2300      	movs	r3, #0
}
 801a51e:	0018      	movs	r0, r3
 801a520:	46bd      	mov	sp, r7
 801a522:	b004      	add	sp, #16
 801a524:	bd80      	pop	{r7, pc}

0801a526 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801a526:	b580      	push	{r7, lr}
 801a528:	b084      	sub	sp, #16
 801a52a:	af00      	add	r7, sp, #0
 801a52c:	6078      	str	r0, [r7, #4]
 801a52e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801a530:	200f      	movs	r0, #15
 801a532:	183b      	adds	r3, r7, r0
 801a534:	2200      	movs	r2, #0
 801a536:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d008      	beq.n	801a550 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801a53e:	687a      	ldr	r2, [r7, #4]
 801a540:	23ad      	movs	r3, #173	@ 0xad
 801a542:	009b      	lsls	r3, r3, #2
 801a544:	6839      	ldr	r1, [r7, #0]
 801a546:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801a548:	183b      	adds	r3, r7, r0
 801a54a:	2200      	movs	r2, #0
 801a54c:	701a      	strb	r2, [r3, #0]
 801a54e:	e003      	b.n	801a558 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801a550:	230f      	movs	r3, #15
 801a552:	18fb      	adds	r3, r7, r3
 801a554:	2202      	movs	r2, #2
 801a556:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801a558:	230f      	movs	r3, #15
 801a55a:	18fb      	adds	r3, r7, r3
 801a55c:	781b      	ldrb	r3, [r3, #0]
}
 801a55e:	0018      	movs	r0, r3
 801a560:	46bd      	mov	sp, r7
 801a562:	b004      	add	sp, #16
 801a564:	bd80      	pop	{r7, pc}

0801a566 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801a566:	b580      	push	{r7, lr}
 801a568:	b082      	sub	sp, #8
 801a56a:	af00      	add	r7, sp, #0
 801a56c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	0018      	movs	r0, r3
 801a572:	f001 fd43 	bl	801bffc <USBD_LL_Start>

  return USBD_OK;
 801a576:	2300      	movs	r3, #0
}
 801a578:	0018      	movs	r0, r3
 801a57a:	46bd      	mov	sp, r7
 801a57c:	b002      	add	sp, #8
 801a57e:	bd80      	pop	{r7, pc}

0801a580 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801a580:	b580      	push	{r7, lr}
 801a582:	b082      	sub	sp, #8
 801a584:	af00      	add	r7, sp, #0
 801a586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a588:	2300      	movs	r3, #0
}
 801a58a:	0018      	movs	r0, r3
 801a58c:	46bd      	mov	sp, r7
 801a58e:	b002      	add	sp, #8
 801a590:	bd80      	pop	{r7, pc}

0801a592 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801a592:	b590      	push	{r4, r7, lr}
 801a594:	b085      	sub	sp, #20
 801a596:	af00      	add	r7, sp, #0
 801a598:	6078      	str	r0, [r7, #4]
 801a59a:	000a      	movs	r2, r1
 801a59c:	1cfb      	adds	r3, r7, #3
 801a59e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801a5a0:	240f      	movs	r4, #15
 801a5a2:	193b      	adds	r3, r7, r4
 801a5a4:	2202      	movs	r2, #2
 801a5a6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801a5a8:	687a      	ldr	r2, [r7, #4]
 801a5aa:	23ad      	movs	r3, #173	@ 0xad
 801a5ac:	009b      	lsls	r3, r3, #2
 801a5ae:	58d3      	ldr	r3, [r2, r3]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d00e      	beq.n	801a5d2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801a5b4:	687a      	ldr	r2, [r7, #4]
 801a5b6:	23ad      	movs	r3, #173	@ 0xad
 801a5b8:	009b      	lsls	r3, r3, #2
 801a5ba:	58d3      	ldr	r3, [r2, r3]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	1cfa      	adds	r2, r7, #3
 801a5c0:	7811      	ldrb	r1, [r2, #0]
 801a5c2:	687a      	ldr	r2, [r7, #4]
 801a5c4:	0010      	movs	r0, r2
 801a5c6:	4798      	blx	r3
 801a5c8:	1e03      	subs	r3, r0, #0
 801a5ca:	d102      	bne.n	801a5d2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801a5cc:	193b      	adds	r3, r7, r4
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801a5d2:	230f      	movs	r3, #15
 801a5d4:	18fb      	adds	r3, r7, r3
 801a5d6:	781b      	ldrb	r3, [r3, #0]
}
 801a5d8:	0018      	movs	r0, r3
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	b005      	add	sp, #20
 801a5de:	bd90      	pop	{r4, r7, pc}

0801a5e0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b082      	sub	sp, #8
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	6078      	str	r0, [r7, #4]
 801a5e8:	000a      	movs	r2, r1
 801a5ea:	1cfb      	adds	r3, r7, #3
 801a5ec:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801a5ee:	687a      	ldr	r2, [r7, #4]
 801a5f0:	23ad      	movs	r3, #173	@ 0xad
 801a5f2:	009b      	lsls	r3, r3, #2
 801a5f4:	58d3      	ldr	r3, [r2, r3]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	1cfa      	adds	r2, r7, #3
 801a5fa:	7811      	ldrb	r1, [r2, #0]
 801a5fc:	687a      	ldr	r2, [r7, #4]
 801a5fe:	0010      	movs	r0, r2
 801a600:	4798      	blx	r3

  return USBD_OK;
 801a602:	2300      	movs	r3, #0
}
 801a604:	0018      	movs	r0, r3
 801a606:	46bd      	mov	sp, r7
 801a608:	b002      	add	sp, #8
 801a60a:	bd80      	pop	{r7, pc}

0801a60c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b082      	sub	sp, #8
 801a610:	af00      	add	r7, sp, #0
 801a612:	6078      	str	r0, [r7, #4]
 801a614:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	22aa      	movs	r2, #170	@ 0xaa
 801a61a:	0092      	lsls	r2, r2, #2
 801a61c:	4694      	mov	ip, r2
 801a61e:	4463      	add	r3, ip
 801a620:	683a      	ldr	r2, [r7, #0]
 801a622:	0011      	movs	r1, r2
 801a624:	0018      	movs	r0, r3
 801a626:	f001 f810 	bl	801b64a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801a62a:	687a      	ldr	r2, [r7, #4]
 801a62c:	23a5      	movs	r3, #165	@ 0xa5
 801a62e:	009b      	lsls	r3, r3, #2
 801a630:	2101      	movs	r1, #1
 801a632:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	4a23      	ldr	r2, [pc, #140]	@ (801a6c4 <USBD_LL_SetupStage+0xb8>)
 801a638:	5a9b      	ldrh	r3, [r3, r2]
 801a63a:	0019      	movs	r1, r3
 801a63c:	687a      	ldr	r2, [r7, #4]
 801a63e:	23a6      	movs	r3, #166	@ 0xa6
 801a640:	009b      	lsls	r3, r3, #2
 801a642:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801a644:	687a      	ldr	r2, [r7, #4]
 801a646:	23aa      	movs	r3, #170	@ 0xaa
 801a648:	009b      	lsls	r3, r3, #2
 801a64a:	5cd3      	ldrb	r3, [r2, r3]
 801a64c:	001a      	movs	r2, r3
 801a64e:	231f      	movs	r3, #31
 801a650:	4013      	ands	r3, r2
 801a652:	2b02      	cmp	r3, #2
 801a654:	d019      	beq.n	801a68a <USBD_LL_SetupStage+0x7e>
 801a656:	d822      	bhi.n	801a69e <USBD_LL_SetupStage+0x92>
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d002      	beq.n	801a662 <USBD_LL_SetupStage+0x56>
 801a65c:	2b01      	cmp	r3, #1
 801a65e:	d00a      	beq.n	801a676 <USBD_LL_SetupStage+0x6a>
 801a660:	e01d      	b.n	801a69e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	22aa      	movs	r2, #170	@ 0xaa
 801a666:	0092      	lsls	r2, r2, #2
 801a668:	189a      	adds	r2, r3, r2
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	0011      	movs	r1, r2
 801a66e:	0018      	movs	r0, r3
 801a670:	f000 fa10 	bl	801aa94 <USBD_StdDevReq>
      break;
 801a674:	e020      	b.n	801a6b8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	22aa      	movs	r2, #170	@ 0xaa
 801a67a:	0092      	lsls	r2, r2, #2
 801a67c:	189a      	adds	r2, r3, r2
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	0011      	movs	r1, r2
 801a682:	0018      	movs	r0, r3
 801a684:	f000 fa78 	bl	801ab78 <USBD_StdItfReq>
      break;
 801a688:	e016      	b.n	801a6b8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	22aa      	movs	r2, #170	@ 0xaa
 801a68e:	0092      	lsls	r2, r2, #2
 801a690:	189a      	adds	r2, r3, r2
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	0011      	movs	r1, r2
 801a696:	0018      	movs	r0, r3
 801a698:	f000 fac5 	bl	801ac26 <USBD_StdEPReq>
      break;
 801a69c:	e00c      	b.n	801a6b8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a69e:	687a      	ldr	r2, [r7, #4]
 801a6a0:	23aa      	movs	r3, #170	@ 0xaa
 801a6a2:	009b      	lsls	r3, r3, #2
 801a6a4:	5cd3      	ldrb	r3, [r2, r3]
 801a6a6:	227f      	movs	r2, #127	@ 0x7f
 801a6a8:	4393      	bics	r3, r2
 801a6aa:	b2da      	uxtb	r2, r3
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	0011      	movs	r1, r2
 801a6b0:	0018      	movs	r0, r3
 801a6b2:	f001 fd2a 	bl	801c10a <USBD_LL_StallEP>
      break;
 801a6b6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801a6b8:	2300      	movs	r3, #0
}
 801a6ba:	0018      	movs	r0, r3
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	b002      	add	sp, #8
 801a6c0:	bd80      	pop	{r7, pc}
 801a6c2:	46c0      	nop			@ (mov r8, r8)
 801a6c4:	000002ae 	.word	0x000002ae

0801a6c8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b086      	sub	sp, #24
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	60f8      	str	r0, [r7, #12]
 801a6d0:	607a      	str	r2, [r7, #4]
 801a6d2:	200b      	movs	r0, #11
 801a6d4:	183b      	adds	r3, r7, r0
 801a6d6:	1c0a      	adds	r2, r1, #0
 801a6d8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801a6da:	183b      	adds	r3, r7, r0
 801a6dc:	781b      	ldrb	r3, [r3, #0]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d154      	bne.n	801a78c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	3355      	adds	r3, #85	@ 0x55
 801a6e6:	33ff      	adds	r3, #255	@ 0xff
 801a6e8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a6ea:	68fa      	ldr	r2, [r7, #12]
 801a6ec:	23a5      	movs	r3, #165	@ 0xa5
 801a6ee:	009b      	lsls	r3, r3, #2
 801a6f0:	58d3      	ldr	r3, [r2, r3]
 801a6f2:	2b03      	cmp	r3, #3
 801a6f4:	d139      	bne.n	801a76a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a6f6:	697b      	ldr	r3, [r7, #20]
 801a6f8:	68da      	ldr	r2, [r3, #12]
 801a6fa:	697b      	ldr	r3, [r7, #20]
 801a6fc:	691b      	ldr	r3, [r3, #16]
 801a6fe:	429a      	cmp	r2, r3
 801a700:	d919      	bls.n	801a736 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801a702:	697b      	ldr	r3, [r7, #20]
 801a704:	68da      	ldr	r2, [r3, #12]
 801a706:	697b      	ldr	r3, [r7, #20]
 801a708:	691b      	ldr	r3, [r3, #16]
 801a70a:	1ad2      	subs	r2, r2, r3
 801a70c:	697b      	ldr	r3, [r7, #20]
 801a70e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801a710:	697b      	ldr	r3, [r7, #20]
 801a712:	68da      	ldr	r2, [r3, #12]
 801a714:	697b      	ldr	r3, [r7, #20]
 801a716:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801a718:	429a      	cmp	r2, r3
 801a71a:	d203      	bcs.n	801a724 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801a71c:	697b      	ldr	r3, [r7, #20]
 801a71e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801a720:	b29b      	uxth	r3, r3
 801a722:	e002      	b.n	801a72a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801a724:	697b      	ldr	r3, [r7, #20]
 801a726:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801a728:	b29b      	uxth	r3, r3
 801a72a:	6879      	ldr	r1, [r7, #4]
 801a72c:	68f8      	ldr	r0, [r7, #12]
 801a72e:	001a      	movs	r2, r3
 801a730:	f001 f898 	bl	801b864 <USBD_CtlContinueRx>
 801a734:	e045      	b.n	801a7c2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801a736:	68fa      	ldr	r2, [r7, #12]
 801a738:	23ad      	movs	r3, #173	@ 0xad
 801a73a:	009b      	lsls	r3, r3, #2
 801a73c:	58d3      	ldr	r3, [r2, r3]
 801a73e:	691b      	ldr	r3, [r3, #16]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d00d      	beq.n	801a760 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a744:	68fa      	ldr	r2, [r7, #12]
 801a746:	23a7      	movs	r3, #167	@ 0xa7
 801a748:	009b      	lsls	r3, r3, #2
 801a74a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801a74c:	2b03      	cmp	r3, #3
 801a74e:	d107      	bne.n	801a760 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801a750:	68fa      	ldr	r2, [r7, #12]
 801a752:	23ad      	movs	r3, #173	@ 0xad
 801a754:	009b      	lsls	r3, r3, #2
 801a756:	58d3      	ldr	r3, [r2, r3]
 801a758:	691b      	ldr	r3, [r3, #16]
 801a75a:	68fa      	ldr	r2, [r7, #12]
 801a75c:	0010      	movs	r0, r2
 801a75e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	0018      	movs	r0, r3
 801a764:	f001 f891 	bl	801b88a <USBD_CtlSendStatus>
 801a768:	e02b      	b.n	801a7c2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801a76a:	68fa      	ldr	r2, [r7, #12]
 801a76c:	23a5      	movs	r3, #165	@ 0xa5
 801a76e:	009b      	lsls	r3, r3, #2
 801a770:	58d3      	ldr	r3, [r2, r3]
 801a772:	2b05      	cmp	r3, #5
 801a774:	d125      	bne.n	801a7c2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801a776:	68fa      	ldr	r2, [r7, #12]
 801a778:	23a5      	movs	r3, #165	@ 0xa5
 801a77a:	009b      	lsls	r3, r3, #2
 801a77c:	2100      	movs	r1, #0
 801a77e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	2100      	movs	r1, #0
 801a784:	0018      	movs	r0, r3
 801a786:	f001 fcc0 	bl	801c10a <USBD_LL_StallEP>
 801a78a:	e01a      	b.n	801a7c2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801a78c:	68fa      	ldr	r2, [r7, #12]
 801a78e:	23ad      	movs	r3, #173	@ 0xad
 801a790:	009b      	lsls	r3, r3, #2
 801a792:	58d3      	ldr	r3, [r2, r3]
 801a794:	699b      	ldr	r3, [r3, #24]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d011      	beq.n	801a7be <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a79a:	68fa      	ldr	r2, [r7, #12]
 801a79c:	23a7      	movs	r3, #167	@ 0xa7
 801a79e:	009b      	lsls	r3, r3, #2
 801a7a0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801a7a2:	2b03      	cmp	r3, #3
 801a7a4:	d10b      	bne.n	801a7be <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801a7a6:	68fa      	ldr	r2, [r7, #12]
 801a7a8:	23ad      	movs	r3, #173	@ 0xad
 801a7aa:	009b      	lsls	r3, r3, #2
 801a7ac:	58d3      	ldr	r3, [r2, r3]
 801a7ae:	699b      	ldr	r3, [r3, #24]
 801a7b0:	220b      	movs	r2, #11
 801a7b2:	18ba      	adds	r2, r7, r2
 801a7b4:	7811      	ldrb	r1, [r2, #0]
 801a7b6:	68fa      	ldr	r2, [r7, #12]
 801a7b8:	0010      	movs	r0, r2
 801a7ba:	4798      	blx	r3
 801a7bc:	e001      	b.n	801a7c2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801a7be:	2302      	movs	r3, #2
 801a7c0:	e000      	b.n	801a7c4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801a7c2:	2300      	movs	r3, #0
}
 801a7c4:	0018      	movs	r0, r3
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	b006      	add	sp, #24
 801a7ca:	bd80      	pop	{r7, pc}

0801a7cc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a7cc:	b580      	push	{r7, lr}
 801a7ce:	b086      	sub	sp, #24
 801a7d0:	af00      	add	r7, sp, #0
 801a7d2:	60f8      	str	r0, [r7, #12]
 801a7d4:	607a      	str	r2, [r7, #4]
 801a7d6:	200b      	movs	r0, #11
 801a7d8:	183b      	adds	r3, r7, r0
 801a7da:	1c0a      	adds	r2, r1, #0
 801a7dc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801a7de:	183b      	adds	r3, r7, r0
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d000      	beq.n	801a7e8 <USBD_LL_DataInStage+0x1c>
 801a7e6:	e08e      	b.n	801a906 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	3314      	adds	r3, #20
 801a7ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a7ee:	68fa      	ldr	r2, [r7, #12]
 801a7f0:	23a5      	movs	r3, #165	@ 0xa5
 801a7f2:	009b      	lsls	r3, r3, #2
 801a7f4:	58d3      	ldr	r3, [r2, r3]
 801a7f6:	2b02      	cmp	r3, #2
 801a7f8:	d164      	bne.n	801a8c4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801a7fa:	697b      	ldr	r3, [r7, #20]
 801a7fc:	68da      	ldr	r2, [r3, #12]
 801a7fe:	697b      	ldr	r3, [r7, #20]
 801a800:	691b      	ldr	r3, [r3, #16]
 801a802:	429a      	cmp	r2, r3
 801a804:	d915      	bls.n	801a832 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801a806:	697b      	ldr	r3, [r7, #20]
 801a808:	68da      	ldr	r2, [r3, #12]
 801a80a:	697b      	ldr	r3, [r7, #20]
 801a80c:	691b      	ldr	r3, [r3, #16]
 801a80e:	1ad2      	subs	r2, r2, r3
 801a810:	697b      	ldr	r3, [r7, #20]
 801a812:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	68db      	ldr	r3, [r3, #12]
 801a818:	b29a      	uxth	r2, r3
 801a81a:	6879      	ldr	r1, [r7, #4]
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	0018      	movs	r0, r3
 801a820:	f000 ffe9 	bl	801b7f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a824:	68f8      	ldr	r0, [r7, #12]
 801a826:	2300      	movs	r3, #0
 801a828:	2200      	movs	r2, #0
 801a82a:	2100      	movs	r1, #0
 801a82c:	f001 fd56 	bl	801c2dc <USBD_LL_PrepareReceive>
 801a830:	e059      	b.n	801a8e6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a832:	697b      	ldr	r3, [r7, #20]
 801a834:	689a      	ldr	r2, [r3, #8]
 801a836:	697b      	ldr	r3, [r7, #20]
 801a838:	691b      	ldr	r3, [r3, #16]
 801a83a:	0019      	movs	r1, r3
 801a83c:	0010      	movs	r0, r2
 801a83e:	f7e5 fd37 	bl	80002b0 <__aeabi_uidivmod>
 801a842:	1e0b      	subs	r3, r1, #0
 801a844:	d11f      	bne.n	801a886 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801a846:	697b      	ldr	r3, [r7, #20]
 801a848:	689a      	ldr	r2, [r3, #8]
 801a84a:	697b      	ldr	r3, [r7, #20]
 801a84c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a84e:	429a      	cmp	r2, r3
 801a850:	d319      	bcc.n	801a886 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801a852:	697b      	ldr	r3, [r7, #20]
 801a854:	689a      	ldr	r2, [r3, #8]
 801a856:	68f9      	ldr	r1, [r7, #12]
 801a858:	23a6      	movs	r3, #166	@ 0xa6
 801a85a:	009b      	lsls	r3, r3, #2
 801a85c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801a85e:	429a      	cmp	r2, r3
 801a860:	d211      	bcs.n	801a886 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	2200      	movs	r2, #0
 801a866:	2100      	movs	r1, #0
 801a868:	0018      	movs	r0, r3
 801a86a:	f000 ffc4 	bl	801b7f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a86e:	68fa      	ldr	r2, [r7, #12]
 801a870:	23a6      	movs	r3, #166	@ 0xa6
 801a872:	009b      	lsls	r3, r3, #2
 801a874:	2100      	movs	r1, #0
 801a876:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a878:	68f8      	ldr	r0, [r7, #12]
 801a87a:	2300      	movs	r3, #0
 801a87c:	2200      	movs	r2, #0
 801a87e:	2100      	movs	r1, #0
 801a880:	f001 fd2c 	bl	801c2dc <USBD_LL_PrepareReceive>
 801a884:	e02f      	b.n	801a8e6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a886:	68fa      	ldr	r2, [r7, #12]
 801a888:	23ad      	movs	r3, #173	@ 0xad
 801a88a:	009b      	lsls	r3, r3, #2
 801a88c:	58d3      	ldr	r3, [r2, r3]
 801a88e:	68db      	ldr	r3, [r3, #12]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d00d      	beq.n	801a8b0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a894:	68fa      	ldr	r2, [r7, #12]
 801a896:	23a7      	movs	r3, #167	@ 0xa7
 801a898:	009b      	lsls	r3, r3, #2
 801a89a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a89c:	2b03      	cmp	r3, #3
 801a89e:	d107      	bne.n	801a8b0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801a8a0:	68fa      	ldr	r2, [r7, #12]
 801a8a2:	23ad      	movs	r3, #173	@ 0xad
 801a8a4:	009b      	lsls	r3, r3, #2
 801a8a6:	58d3      	ldr	r3, [r2, r3]
 801a8a8:	68db      	ldr	r3, [r3, #12]
 801a8aa:	68fa      	ldr	r2, [r7, #12]
 801a8ac:	0010      	movs	r0, r2
 801a8ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	2180      	movs	r1, #128	@ 0x80
 801a8b4:	0018      	movs	r0, r3
 801a8b6:	f001 fc28 	bl	801c10a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	0018      	movs	r0, r3
 801a8be:	f000 fff8 	bl	801b8b2 <USBD_CtlReceiveStatus>
 801a8c2:	e010      	b.n	801a8e6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a8c4:	68fa      	ldr	r2, [r7, #12]
 801a8c6:	23a5      	movs	r3, #165	@ 0xa5
 801a8c8:	009b      	lsls	r3, r3, #2
 801a8ca:	58d3      	ldr	r3, [r2, r3]
 801a8cc:	2b04      	cmp	r3, #4
 801a8ce:	d005      	beq.n	801a8dc <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801a8d0:	68fa      	ldr	r2, [r7, #12]
 801a8d2:	23a5      	movs	r3, #165	@ 0xa5
 801a8d4:	009b      	lsls	r3, r3, #2
 801a8d6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d104      	bne.n	801a8e6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	2180      	movs	r1, #128	@ 0x80
 801a8e0:	0018      	movs	r0, r3
 801a8e2:	f001 fc12 	bl	801c10a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801a8e6:	68fa      	ldr	r2, [r7, #12]
 801a8e8:	23a8      	movs	r3, #168	@ 0xa8
 801a8ea:	009b      	lsls	r3, r3, #2
 801a8ec:	5cd3      	ldrb	r3, [r2, r3]
 801a8ee:	2b01      	cmp	r3, #1
 801a8f0:	d124      	bne.n	801a93c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	0018      	movs	r0, r3
 801a8f6:	f7ff fe43 	bl	801a580 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a8fa:	68fa      	ldr	r2, [r7, #12]
 801a8fc:	23a8      	movs	r3, #168	@ 0xa8
 801a8fe:	009b      	lsls	r3, r3, #2
 801a900:	2100      	movs	r1, #0
 801a902:	54d1      	strb	r1, [r2, r3]
 801a904:	e01a      	b.n	801a93c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801a906:	68fa      	ldr	r2, [r7, #12]
 801a908:	23ad      	movs	r3, #173	@ 0xad
 801a90a:	009b      	lsls	r3, r3, #2
 801a90c:	58d3      	ldr	r3, [r2, r3]
 801a90e:	695b      	ldr	r3, [r3, #20]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d011      	beq.n	801a938 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a914:	68fa      	ldr	r2, [r7, #12]
 801a916:	23a7      	movs	r3, #167	@ 0xa7
 801a918:	009b      	lsls	r3, r3, #2
 801a91a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801a91c:	2b03      	cmp	r3, #3
 801a91e:	d10b      	bne.n	801a938 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801a920:	68fa      	ldr	r2, [r7, #12]
 801a922:	23ad      	movs	r3, #173	@ 0xad
 801a924:	009b      	lsls	r3, r3, #2
 801a926:	58d3      	ldr	r3, [r2, r3]
 801a928:	695b      	ldr	r3, [r3, #20]
 801a92a:	220b      	movs	r2, #11
 801a92c:	18ba      	adds	r2, r7, r2
 801a92e:	7811      	ldrb	r1, [r2, #0]
 801a930:	68fa      	ldr	r2, [r7, #12]
 801a932:	0010      	movs	r0, r2
 801a934:	4798      	blx	r3
 801a936:	e001      	b.n	801a93c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801a938:	2302      	movs	r3, #2
 801a93a:	e000      	b.n	801a93e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801a93c:	2300      	movs	r3, #0
}
 801a93e:	0018      	movs	r0, r3
 801a940:	46bd      	mov	sp, r7
 801a942:	b006      	add	sp, #24
 801a944:	bd80      	pop	{r7, pc}

0801a946 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a946:	b580      	push	{r7, lr}
 801a948:	b082      	sub	sp, #8
 801a94a:	af00      	add	r7, sp, #0
 801a94c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a94e:	6878      	ldr	r0, [r7, #4]
 801a950:	2340      	movs	r3, #64	@ 0x40
 801a952:	2200      	movs	r2, #0
 801a954:	2100      	movs	r1, #0
 801a956:	f001 fb76 	bl	801c046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a95a:	687a      	ldr	r2, [r7, #4]
 801a95c:	23ac      	movs	r3, #172	@ 0xac
 801a95e:	005b      	lsls	r3, r3, #1
 801a960:	2101      	movs	r1, #1
 801a962:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a964:	687a      	ldr	r2, [r7, #4]
 801a966:	23b2      	movs	r3, #178	@ 0xb2
 801a968:	005b      	lsls	r3, r3, #1
 801a96a:	2140      	movs	r1, #64	@ 0x40
 801a96c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a96e:	6878      	ldr	r0, [r7, #4]
 801a970:	2340      	movs	r3, #64	@ 0x40
 801a972:	2200      	movs	r2, #0
 801a974:	2180      	movs	r1, #128	@ 0x80
 801a976:	f001 fb66 	bl	801c046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	2201      	movs	r2, #1
 801a97e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	2240      	movs	r2, #64	@ 0x40
 801a984:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a986:	687a      	ldr	r2, [r7, #4]
 801a988:	23a7      	movs	r3, #167	@ 0xa7
 801a98a:	009b      	lsls	r3, r3, #2
 801a98c:	2101      	movs	r1, #1
 801a98e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801a990:	687a      	ldr	r2, [r7, #4]
 801a992:	23a5      	movs	r3, #165	@ 0xa5
 801a994:	009b      	lsls	r3, r3, #2
 801a996:	2100      	movs	r1, #0
 801a998:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	2200      	movs	r2, #0
 801a99e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a9a0:	687a      	ldr	r2, [r7, #4]
 801a9a2:	23a9      	movs	r3, #169	@ 0xa9
 801a9a4:	009b      	lsls	r3, r3, #2
 801a9a6:	2100      	movs	r1, #0
 801a9a8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801a9aa:	687a      	ldr	r2, [r7, #4]
 801a9ac:	23ae      	movs	r3, #174	@ 0xae
 801a9ae:	009b      	lsls	r3, r3, #2
 801a9b0:	58d3      	ldr	r3, [r2, r3]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d00a      	beq.n	801a9cc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a9b6:	687a      	ldr	r2, [r7, #4]
 801a9b8:	23ad      	movs	r3, #173	@ 0xad
 801a9ba:	009b      	lsls	r3, r3, #2
 801a9bc:	58d3      	ldr	r3, [r2, r3]
 801a9be:	685a      	ldr	r2, [r3, #4]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	685b      	ldr	r3, [r3, #4]
 801a9c4:	b2d9      	uxtb	r1, r3
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	0018      	movs	r0, r3
 801a9ca:	4790      	blx	r2
  }

  return USBD_OK;
 801a9cc:	2300      	movs	r3, #0
}
 801a9ce:	0018      	movs	r0, r3
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	b002      	add	sp, #8
 801a9d4:	bd80      	pop	{r7, pc}

0801a9d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a9d6:	b580      	push	{r7, lr}
 801a9d8:	b082      	sub	sp, #8
 801a9da:	af00      	add	r7, sp, #0
 801a9dc:	6078      	str	r0, [r7, #4]
 801a9de:	000a      	movs	r2, r1
 801a9e0:	1cfb      	adds	r3, r7, #3
 801a9e2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	1cfa      	adds	r2, r7, #3
 801a9e8:	7812      	ldrb	r2, [r2, #0]
 801a9ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a9ec:	2300      	movs	r3, #0
}
 801a9ee:	0018      	movs	r0, r3
 801a9f0:	46bd      	mov	sp, r7
 801a9f2:	b002      	add	sp, #8
 801a9f4:	bd80      	pop	{r7, pc}
	...

0801a9f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b082      	sub	sp, #8
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801aa00:	687a      	ldr	r2, [r7, #4]
 801aa02:	23a7      	movs	r3, #167	@ 0xa7
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	5cd1      	ldrb	r1, [r2, r3]
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	4a06      	ldr	r2, [pc, #24]	@ (801aa24 <USBD_LL_Suspend+0x2c>)
 801aa0c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801aa0e:	687a      	ldr	r2, [r7, #4]
 801aa10:	23a7      	movs	r3, #167	@ 0xa7
 801aa12:	009b      	lsls	r3, r3, #2
 801aa14:	2104      	movs	r1, #4
 801aa16:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801aa18:	2300      	movs	r3, #0
}
 801aa1a:	0018      	movs	r0, r3
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	b002      	add	sp, #8
 801aa20:	bd80      	pop	{r7, pc}
 801aa22:	46c0      	nop			@ (mov r8, r8)
 801aa24:	0000029d 	.word	0x0000029d

0801aa28 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	b082      	sub	sp, #8
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801aa30:	687a      	ldr	r2, [r7, #4]
 801aa32:	23a7      	movs	r3, #167	@ 0xa7
 801aa34:	009b      	lsls	r3, r3, #2
 801aa36:	5cd3      	ldrb	r3, [r2, r3]
 801aa38:	2b04      	cmp	r3, #4
 801aa3a:	d106      	bne.n	801aa4a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	4a05      	ldr	r2, [pc, #20]	@ (801aa54 <USBD_LL_Resume+0x2c>)
 801aa40:	5c99      	ldrb	r1, [r3, r2]
 801aa42:	687a      	ldr	r2, [r7, #4]
 801aa44:	23a7      	movs	r3, #167	@ 0xa7
 801aa46:	009b      	lsls	r3, r3, #2
 801aa48:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801aa4a:	2300      	movs	r3, #0
}
 801aa4c:	0018      	movs	r0, r3
 801aa4e:	46bd      	mov	sp, r7
 801aa50:	b002      	add	sp, #8
 801aa52:	bd80      	pop	{r7, pc}
 801aa54:	0000029d 	.word	0x0000029d

0801aa58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b082      	sub	sp, #8
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aa60:	687a      	ldr	r2, [r7, #4]
 801aa62:	23a7      	movs	r3, #167	@ 0xa7
 801aa64:	009b      	lsls	r3, r3, #2
 801aa66:	5cd3      	ldrb	r3, [r2, r3]
 801aa68:	2b03      	cmp	r3, #3
 801aa6a:	d10e      	bne.n	801aa8a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801aa6c:	687a      	ldr	r2, [r7, #4]
 801aa6e:	23ad      	movs	r3, #173	@ 0xad
 801aa70:	009b      	lsls	r3, r3, #2
 801aa72:	58d3      	ldr	r3, [r2, r3]
 801aa74:	69db      	ldr	r3, [r3, #28]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d007      	beq.n	801aa8a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801aa7a:	687a      	ldr	r2, [r7, #4]
 801aa7c:	23ad      	movs	r3, #173	@ 0xad
 801aa7e:	009b      	lsls	r3, r3, #2
 801aa80:	58d3      	ldr	r3, [r2, r3]
 801aa82:	69db      	ldr	r3, [r3, #28]
 801aa84:	687a      	ldr	r2, [r7, #4]
 801aa86:	0010      	movs	r0, r2
 801aa88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801aa8a:	2300      	movs	r3, #0
}
 801aa8c:	0018      	movs	r0, r3
 801aa8e:	46bd      	mov	sp, r7
 801aa90:	b002      	add	sp, #8
 801aa92:	bd80      	pop	{r7, pc}

0801aa94 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801aa94:	b580      	push	{r7, lr}
 801aa96:	b084      	sub	sp, #16
 801aa98:	af00      	add	r7, sp, #0
 801aa9a:	6078      	str	r0, [r7, #4]
 801aa9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801aa9e:	230f      	movs	r3, #15
 801aaa0:	18fb      	adds	r3, r7, r3
 801aaa2:	2200      	movs	r2, #0
 801aaa4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801aaa6:	683b      	ldr	r3, [r7, #0]
 801aaa8:	781b      	ldrb	r3, [r3, #0]
 801aaaa:	001a      	movs	r2, r3
 801aaac:	2360      	movs	r3, #96	@ 0x60
 801aaae:	4013      	ands	r3, r2
 801aab0:	2b40      	cmp	r3, #64	@ 0x40
 801aab2:	d004      	beq.n	801aabe <USBD_StdDevReq+0x2a>
 801aab4:	d84f      	bhi.n	801ab56 <USBD_StdDevReq+0xc2>
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d00b      	beq.n	801aad2 <USBD_StdDevReq+0x3e>
 801aaba:	2b20      	cmp	r3, #32
 801aabc:	d14b      	bne.n	801ab56 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801aabe:	687a      	ldr	r2, [r7, #4]
 801aac0:	23ad      	movs	r3, #173	@ 0xad
 801aac2:	009b      	lsls	r3, r3, #2
 801aac4:	58d3      	ldr	r3, [r2, r3]
 801aac6:	689b      	ldr	r3, [r3, #8]
 801aac8:	6839      	ldr	r1, [r7, #0]
 801aaca:	687a      	ldr	r2, [r7, #4]
 801aacc:	0010      	movs	r0, r2
 801aace:	4798      	blx	r3
      break;
 801aad0:	e048      	b.n	801ab64 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	785b      	ldrb	r3, [r3, #1]
 801aad6:	2b09      	cmp	r3, #9
 801aad8:	d835      	bhi.n	801ab46 <USBD_StdDevReq+0xb2>
 801aada:	009a      	lsls	r2, r3, #2
 801aadc:	4b25      	ldr	r3, [pc, #148]	@ (801ab74 <USBD_StdDevReq+0xe0>)
 801aade:	18d3      	adds	r3, r2, r3
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801aae4:	683a      	ldr	r2, [r7, #0]
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	0011      	movs	r1, r2
 801aaea:	0018      	movs	r0, r3
 801aaec:	f000 fa52 	bl	801af94 <USBD_GetDescriptor>
          break;
 801aaf0:	e030      	b.n	801ab54 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801aaf2:	683a      	ldr	r2, [r7, #0]
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	0011      	movs	r1, r2
 801aaf8:	0018      	movs	r0, r3
 801aafa:	f000 fbfd 	bl	801b2f8 <USBD_SetAddress>
          break;
 801aafe:	e029      	b.n	801ab54 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801ab00:	683a      	ldr	r2, [r7, #0]
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	0011      	movs	r1, r2
 801ab06:	0018      	movs	r0, r3
 801ab08:	f000 fc4a 	bl	801b3a0 <USBD_SetConfig>
          break;
 801ab0c:	e022      	b.n	801ab54 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801ab0e:	683a      	ldr	r2, [r7, #0]
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	0011      	movs	r1, r2
 801ab14:	0018      	movs	r0, r3
 801ab16:	f000 fce7 	bl	801b4e8 <USBD_GetConfig>
          break;
 801ab1a:	e01b      	b.n	801ab54 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801ab1c:	683a      	ldr	r2, [r7, #0]
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	0011      	movs	r1, r2
 801ab22:	0018      	movs	r0, r3
 801ab24:	f000 fd1b 	bl	801b55e <USBD_GetStatus>
          break;
 801ab28:	e014      	b.n	801ab54 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801ab2a:	683a      	ldr	r2, [r7, #0]
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	0011      	movs	r1, r2
 801ab30:	0018      	movs	r0, r3
 801ab32:	f000 fd4e 	bl	801b5d2 <USBD_SetFeature>
          break;
 801ab36:	e00d      	b.n	801ab54 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801ab38:	683a      	ldr	r2, [r7, #0]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	0011      	movs	r1, r2
 801ab3e:	0018      	movs	r0, r3
 801ab40:	f000 fd5d 	bl	801b5fe <USBD_ClrFeature>
          break;
 801ab44:	e006      	b.n	801ab54 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801ab46:	683a      	ldr	r2, [r7, #0]
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	0011      	movs	r1, r2
 801ab4c:	0018      	movs	r0, r3
 801ab4e:	f000 fdb4 	bl	801b6ba <USBD_CtlError>
          break;
 801ab52:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ab54:	e006      	b.n	801ab64 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801ab56:	683a      	ldr	r2, [r7, #0]
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	0011      	movs	r1, r2
 801ab5c:	0018      	movs	r0, r3
 801ab5e:	f000 fdac 	bl	801b6ba <USBD_CtlError>
      break;
 801ab62:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ab64:	230f      	movs	r3, #15
 801ab66:	18fb      	adds	r3, r7, r3
 801ab68:	781b      	ldrb	r3, [r3, #0]
}
 801ab6a:	0018      	movs	r0, r3
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	b004      	add	sp, #16
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	46c0      	nop			@ (mov r8, r8)
 801ab74:	08023c28 	.word	0x08023c28

0801ab78 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801ab78:	b5b0      	push	{r4, r5, r7, lr}
 801ab7a:	b084      	sub	sp, #16
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
 801ab80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ab82:	230f      	movs	r3, #15
 801ab84:	18fb      	adds	r3, r7, r3
 801ab86:	2200      	movs	r2, #0
 801ab88:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	781b      	ldrb	r3, [r3, #0]
 801ab8e:	001a      	movs	r2, r3
 801ab90:	2360      	movs	r3, #96	@ 0x60
 801ab92:	4013      	ands	r3, r2
 801ab94:	2b40      	cmp	r3, #64	@ 0x40
 801ab96:	d004      	beq.n	801aba2 <USBD_StdItfReq+0x2a>
 801ab98:	d839      	bhi.n	801ac0e <USBD_StdItfReq+0x96>
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d001      	beq.n	801aba2 <USBD_StdItfReq+0x2a>
 801ab9e:	2b20      	cmp	r3, #32
 801aba0:	d135      	bne.n	801ac0e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801aba2:	687a      	ldr	r2, [r7, #4]
 801aba4:	23a7      	movs	r3, #167	@ 0xa7
 801aba6:	009b      	lsls	r3, r3, #2
 801aba8:	5cd3      	ldrb	r3, [r2, r3]
 801abaa:	3b01      	subs	r3, #1
 801abac:	2b02      	cmp	r3, #2
 801abae:	d825      	bhi.n	801abfc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801abb0:	683b      	ldr	r3, [r7, #0]
 801abb2:	889b      	ldrh	r3, [r3, #4]
 801abb4:	b2db      	uxtb	r3, r3
 801abb6:	2b01      	cmp	r3, #1
 801abb8:	d819      	bhi.n	801abee <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801abba:	687a      	ldr	r2, [r7, #4]
 801abbc:	23ad      	movs	r3, #173	@ 0xad
 801abbe:	009b      	lsls	r3, r3, #2
 801abc0:	58d3      	ldr	r3, [r2, r3]
 801abc2:	689b      	ldr	r3, [r3, #8]
 801abc4:	250f      	movs	r5, #15
 801abc6:	197c      	adds	r4, r7, r5
 801abc8:	6839      	ldr	r1, [r7, #0]
 801abca:	687a      	ldr	r2, [r7, #4]
 801abcc:	0010      	movs	r0, r2
 801abce:	4798      	blx	r3
 801abd0:	0003      	movs	r3, r0
 801abd2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801abd4:	683b      	ldr	r3, [r7, #0]
 801abd6:	88db      	ldrh	r3, [r3, #6]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d116      	bne.n	801ac0a <USBD_StdItfReq+0x92>
 801abdc:	197b      	adds	r3, r7, r5
 801abde:	781b      	ldrb	r3, [r3, #0]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d112      	bne.n	801ac0a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	0018      	movs	r0, r3
 801abe8:	f000 fe4f 	bl	801b88a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801abec:	e00d      	b.n	801ac0a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801abee:	683a      	ldr	r2, [r7, #0]
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	0011      	movs	r1, r2
 801abf4:	0018      	movs	r0, r3
 801abf6:	f000 fd60 	bl	801b6ba <USBD_CtlError>
          break;
 801abfa:	e006      	b.n	801ac0a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801abfc:	683a      	ldr	r2, [r7, #0]
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	0011      	movs	r1, r2
 801ac02:	0018      	movs	r0, r3
 801ac04:	f000 fd59 	bl	801b6ba <USBD_CtlError>
          break;
 801ac08:	e000      	b.n	801ac0c <USBD_StdItfReq+0x94>
          break;
 801ac0a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ac0c:	e006      	b.n	801ac1c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801ac0e:	683a      	ldr	r2, [r7, #0]
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	0011      	movs	r1, r2
 801ac14:	0018      	movs	r0, r3
 801ac16:	f000 fd50 	bl	801b6ba <USBD_CtlError>
      break;
 801ac1a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801ac1c:	2300      	movs	r3, #0
}
 801ac1e:	0018      	movs	r0, r3
 801ac20:	46bd      	mov	sp, r7
 801ac22:	b004      	add	sp, #16
 801ac24:	bdb0      	pop	{r4, r5, r7, pc}

0801ac26 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801ac26:	b5b0      	push	{r4, r5, r7, lr}
 801ac28:	b084      	sub	sp, #16
 801ac2a:	af00      	add	r7, sp, #0
 801ac2c:	6078      	str	r0, [r7, #4]
 801ac2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801ac30:	230f      	movs	r3, #15
 801ac32:	18fb      	adds	r3, r7, r3
 801ac34:	2200      	movs	r2, #0
 801ac36:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801ac38:	683b      	ldr	r3, [r7, #0]
 801ac3a:	889a      	ldrh	r2, [r3, #4]
 801ac3c:	230e      	movs	r3, #14
 801ac3e:	18fb      	adds	r3, r7, r3
 801ac40:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ac42:	683b      	ldr	r3, [r7, #0]
 801ac44:	781b      	ldrb	r3, [r3, #0]
 801ac46:	001a      	movs	r2, r3
 801ac48:	2360      	movs	r3, #96	@ 0x60
 801ac4a:	4013      	ands	r3, r2
 801ac4c:	2b40      	cmp	r3, #64	@ 0x40
 801ac4e:	d006      	beq.n	801ac5e <USBD_StdEPReq+0x38>
 801ac50:	d900      	bls.n	801ac54 <USBD_StdEPReq+0x2e>
 801ac52:	e190      	b.n	801af76 <USBD_StdEPReq+0x350>
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d00c      	beq.n	801ac72 <USBD_StdEPReq+0x4c>
 801ac58:	2b20      	cmp	r3, #32
 801ac5a:	d000      	beq.n	801ac5e <USBD_StdEPReq+0x38>
 801ac5c:	e18b      	b.n	801af76 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801ac5e:	687a      	ldr	r2, [r7, #4]
 801ac60:	23ad      	movs	r3, #173	@ 0xad
 801ac62:	009b      	lsls	r3, r3, #2
 801ac64:	58d3      	ldr	r3, [r2, r3]
 801ac66:	689b      	ldr	r3, [r3, #8]
 801ac68:	6839      	ldr	r1, [r7, #0]
 801ac6a:	687a      	ldr	r2, [r7, #4]
 801ac6c:	0010      	movs	r0, r2
 801ac6e:	4798      	blx	r3
      break;
 801ac70:	e188      	b.n	801af84 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801ac72:	683b      	ldr	r3, [r7, #0]
 801ac74:	781b      	ldrb	r3, [r3, #0]
 801ac76:	001a      	movs	r2, r3
 801ac78:	2360      	movs	r3, #96	@ 0x60
 801ac7a:	4013      	ands	r3, r2
 801ac7c:	2b20      	cmp	r3, #32
 801ac7e:	d10f      	bne.n	801aca0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ac80:	687a      	ldr	r2, [r7, #4]
 801ac82:	23ad      	movs	r3, #173	@ 0xad
 801ac84:	009b      	lsls	r3, r3, #2
 801ac86:	58d3      	ldr	r3, [r2, r3]
 801ac88:	689b      	ldr	r3, [r3, #8]
 801ac8a:	250f      	movs	r5, #15
 801ac8c:	197c      	adds	r4, r7, r5
 801ac8e:	6839      	ldr	r1, [r7, #0]
 801ac90:	687a      	ldr	r2, [r7, #4]
 801ac92:	0010      	movs	r0, r2
 801ac94:	4798      	blx	r3
 801ac96:	0003      	movs	r3, r0
 801ac98:	7023      	strb	r3, [r4, #0]

        return ret;
 801ac9a:	197b      	adds	r3, r7, r5
 801ac9c:	781b      	ldrb	r3, [r3, #0]
 801ac9e:	e174      	b.n	801af8a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801aca0:	683b      	ldr	r3, [r7, #0]
 801aca2:	785b      	ldrb	r3, [r3, #1]
 801aca4:	2b03      	cmp	r3, #3
 801aca6:	d007      	beq.n	801acb8 <USBD_StdEPReq+0x92>
 801aca8:	dd00      	ble.n	801acac <USBD_StdEPReq+0x86>
 801acaa:	e15c      	b.n	801af66 <USBD_StdEPReq+0x340>
 801acac:	2b00      	cmp	r3, #0
 801acae:	d100      	bne.n	801acb2 <USBD_StdEPReq+0x8c>
 801acb0:	e092      	b.n	801add8 <USBD_StdEPReq+0x1b2>
 801acb2:	2b01      	cmp	r3, #1
 801acb4:	d04b      	beq.n	801ad4e <USBD_StdEPReq+0x128>
 801acb6:	e156      	b.n	801af66 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801acb8:	687a      	ldr	r2, [r7, #4]
 801acba:	23a7      	movs	r3, #167	@ 0xa7
 801acbc:	009b      	lsls	r3, r3, #2
 801acbe:	5cd3      	ldrb	r3, [r2, r3]
 801acc0:	2b02      	cmp	r3, #2
 801acc2:	d002      	beq.n	801acca <USBD_StdEPReq+0xa4>
 801acc4:	2b03      	cmp	r3, #3
 801acc6:	d01d      	beq.n	801ad04 <USBD_StdEPReq+0xde>
 801acc8:	e039      	b.n	801ad3e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801acca:	220e      	movs	r2, #14
 801accc:	18bb      	adds	r3, r7, r2
 801acce:	781b      	ldrb	r3, [r3, #0]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d010      	beq.n	801acf6 <USBD_StdEPReq+0xd0>
 801acd4:	18bb      	adds	r3, r7, r2
 801acd6:	781b      	ldrb	r3, [r3, #0]
 801acd8:	2b80      	cmp	r3, #128	@ 0x80
 801acda:	d00c      	beq.n	801acf6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801acdc:	18bb      	adds	r3, r7, r2
 801acde:	781a      	ldrb	r2, [r3, #0]
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	0011      	movs	r1, r2
 801ace4:	0018      	movs	r0, r3
 801ace6:	f001 fa10 	bl	801c10a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	2180      	movs	r1, #128	@ 0x80
 801acee:	0018      	movs	r0, r3
 801acf0:	f001 fa0b 	bl	801c10a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801acf4:	e02a      	b.n	801ad4c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801acf6:	683a      	ldr	r2, [r7, #0]
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	0011      	movs	r1, r2
 801acfc:	0018      	movs	r0, r3
 801acfe:	f000 fcdc 	bl	801b6ba <USBD_CtlError>
              break;
 801ad02:	e023      	b.n	801ad4c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ad04:	683b      	ldr	r3, [r7, #0]
 801ad06:	885b      	ldrh	r3, [r3, #2]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d113      	bne.n	801ad34 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801ad0c:	220e      	movs	r2, #14
 801ad0e:	18bb      	adds	r3, r7, r2
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d00e      	beq.n	801ad34 <USBD_StdEPReq+0x10e>
 801ad16:	18bb      	adds	r3, r7, r2
 801ad18:	781b      	ldrb	r3, [r3, #0]
 801ad1a:	2b80      	cmp	r3, #128	@ 0x80
 801ad1c:	d00a      	beq.n	801ad34 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801ad1e:	683b      	ldr	r3, [r7, #0]
 801ad20:	88db      	ldrh	r3, [r3, #6]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d106      	bne.n	801ad34 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801ad26:	18bb      	adds	r3, r7, r2
 801ad28:	781a      	ldrb	r2, [r3, #0]
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	0011      	movs	r1, r2
 801ad2e:	0018      	movs	r0, r3
 801ad30:	f001 f9eb 	bl	801c10a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	0018      	movs	r0, r3
 801ad38:	f000 fda7 	bl	801b88a <USBD_CtlSendStatus>

              break;
 801ad3c:	e006      	b.n	801ad4c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801ad3e:	683a      	ldr	r2, [r7, #0]
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	0011      	movs	r1, r2
 801ad44:	0018      	movs	r0, r3
 801ad46:	f000 fcb8 	bl	801b6ba <USBD_CtlError>
              break;
 801ad4a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801ad4c:	e112      	b.n	801af74 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801ad4e:	687a      	ldr	r2, [r7, #4]
 801ad50:	23a7      	movs	r3, #167	@ 0xa7
 801ad52:	009b      	lsls	r3, r3, #2
 801ad54:	5cd3      	ldrb	r3, [r2, r3]
 801ad56:	2b02      	cmp	r3, #2
 801ad58:	d002      	beq.n	801ad60 <USBD_StdEPReq+0x13a>
 801ad5a:	2b03      	cmp	r3, #3
 801ad5c:	d01d      	beq.n	801ad9a <USBD_StdEPReq+0x174>
 801ad5e:	e032      	b.n	801adc6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ad60:	220e      	movs	r2, #14
 801ad62:	18bb      	adds	r3, r7, r2
 801ad64:	781b      	ldrb	r3, [r3, #0]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d010      	beq.n	801ad8c <USBD_StdEPReq+0x166>
 801ad6a:	18bb      	adds	r3, r7, r2
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	2b80      	cmp	r3, #128	@ 0x80
 801ad70:	d00c      	beq.n	801ad8c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801ad72:	18bb      	adds	r3, r7, r2
 801ad74:	781a      	ldrb	r2, [r3, #0]
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	0011      	movs	r1, r2
 801ad7a:	0018      	movs	r0, r3
 801ad7c:	f001 f9c5 	bl	801c10a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	2180      	movs	r1, #128	@ 0x80
 801ad84:	0018      	movs	r0, r3
 801ad86:	f001 f9c0 	bl	801c10a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801ad8a:	e024      	b.n	801add6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801ad8c:	683a      	ldr	r2, [r7, #0]
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	0011      	movs	r1, r2
 801ad92:	0018      	movs	r0, r3
 801ad94:	f000 fc91 	bl	801b6ba <USBD_CtlError>
              break;
 801ad98:	e01d      	b.n	801add6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ad9a:	683b      	ldr	r3, [r7, #0]
 801ad9c:	885b      	ldrh	r3, [r3, #2]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d118      	bne.n	801add4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801ada2:	210e      	movs	r1, #14
 801ada4:	187b      	adds	r3, r7, r1
 801ada6:	781b      	ldrb	r3, [r3, #0]
 801ada8:	227f      	movs	r2, #127	@ 0x7f
 801adaa:	4013      	ands	r3, r2
 801adac:	d006      	beq.n	801adbc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801adae:	187b      	adds	r3, r7, r1
 801adb0:	781a      	ldrb	r2, [r3, #0]
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	0011      	movs	r1, r2
 801adb6:	0018      	movs	r0, r3
 801adb8:	f001 f9d2 	bl	801c160 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	0018      	movs	r0, r3
 801adc0:	f000 fd63 	bl	801b88a <USBD_CtlSendStatus>
              }
              break;
 801adc4:	e006      	b.n	801add4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801adc6:	683a      	ldr	r2, [r7, #0]
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	0011      	movs	r1, r2
 801adcc:	0018      	movs	r0, r3
 801adce:	f000 fc74 	bl	801b6ba <USBD_CtlError>
              break;
 801add2:	e000      	b.n	801add6 <USBD_StdEPReq+0x1b0>
              break;
 801add4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801add6:	e0cd      	b.n	801af74 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801add8:	687a      	ldr	r2, [r7, #4]
 801adda:	23a7      	movs	r3, #167	@ 0xa7
 801addc:	009b      	lsls	r3, r3, #2
 801adde:	5cd3      	ldrb	r3, [r2, r3]
 801ade0:	2b02      	cmp	r3, #2
 801ade2:	d002      	beq.n	801adea <USBD_StdEPReq+0x1c4>
 801ade4:	2b03      	cmp	r3, #3
 801ade6:	d03c      	beq.n	801ae62 <USBD_StdEPReq+0x23c>
 801ade8:	e0b5      	b.n	801af56 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801adea:	220e      	movs	r2, #14
 801adec:	18bb      	adds	r3, r7, r2
 801adee:	781b      	ldrb	r3, [r3, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d00a      	beq.n	801ae0a <USBD_StdEPReq+0x1e4>
 801adf4:	18bb      	adds	r3, r7, r2
 801adf6:	781b      	ldrb	r3, [r3, #0]
 801adf8:	2b80      	cmp	r3, #128	@ 0x80
 801adfa:	d006      	beq.n	801ae0a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801adfc:	683a      	ldr	r2, [r7, #0]
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	0011      	movs	r1, r2
 801ae02:	0018      	movs	r0, r3
 801ae04:	f000 fc59 	bl	801b6ba <USBD_CtlError>
                break;
 801ae08:	e0ac      	b.n	801af64 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ae0a:	220e      	movs	r2, #14
 801ae0c:	18bb      	adds	r3, r7, r2
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	b25b      	sxtb	r3, r3
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	da0c      	bge.n	801ae30 <USBD_StdEPReq+0x20a>
 801ae16:	18bb      	adds	r3, r7, r2
 801ae18:	781b      	ldrb	r3, [r3, #0]
 801ae1a:	227f      	movs	r2, #127	@ 0x7f
 801ae1c:	401a      	ands	r2, r3
 801ae1e:	0013      	movs	r3, r2
 801ae20:	009b      	lsls	r3, r3, #2
 801ae22:	189b      	adds	r3, r3, r2
 801ae24:	009b      	lsls	r3, r3, #2
 801ae26:	3310      	adds	r3, #16
 801ae28:	687a      	ldr	r2, [r7, #4]
 801ae2a:	18d3      	adds	r3, r2, r3
 801ae2c:	3304      	adds	r3, #4
 801ae2e:	e00d      	b.n	801ae4c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801ae30:	230e      	movs	r3, #14
 801ae32:	18fb      	adds	r3, r7, r3
 801ae34:	781b      	ldrb	r3, [r3, #0]
 801ae36:	227f      	movs	r2, #127	@ 0x7f
 801ae38:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ae3a:	0013      	movs	r3, r2
 801ae3c:	009b      	lsls	r3, r3, #2
 801ae3e:	189b      	adds	r3, r3, r2
 801ae40:	009b      	lsls	r3, r3, #2
 801ae42:	3351      	adds	r3, #81	@ 0x51
 801ae44:	33ff      	adds	r3, #255	@ 0xff
 801ae46:	687a      	ldr	r2, [r7, #4]
 801ae48:	18d3      	adds	r3, r2, r3
 801ae4a:	3304      	adds	r3, #4
 801ae4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801ae4e:	68bb      	ldr	r3, [r7, #8]
 801ae50:	2200      	movs	r2, #0
 801ae52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801ae54:	68b9      	ldr	r1, [r7, #8]
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	2202      	movs	r2, #2
 801ae5a:	0018      	movs	r0, r3
 801ae5c:	f000 fcab 	bl	801b7b6 <USBD_CtlSendData>
              break;
 801ae60:	e080      	b.n	801af64 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801ae62:	220e      	movs	r2, #14
 801ae64:	18bb      	adds	r3, r7, r2
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	b25b      	sxtb	r3, r3
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	da14      	bge.n	801ae98 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801ae6e:	18bb      	adds	r3, r7, r2
 801ae70:	781b      	ldrb	r3, [r3, #0]
 801ae72:	220f      	movs	r2, #15
 801ae74:	401a      	ands	r2, r3
 801ae76:	6879      	ldr	r1, [r7, #4]
 801ae78:	0013      	movs	r3, r2
 801ae7a:	009b      	lsls	r3, r3, #2
 801ae7c:	189b      	adds	r3, r3, r2
 801ae7e:	009b      	lsls	r3, r3, #2
 801ae80:	18cb      	adds	r3, r1, r3
 801ae82:	3318      	adds	r3, #24
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d11e      	bne.n	801aec8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801ae8a:	683a      	ldr	r2, [r7, #0]
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	0011      	movs	r1, r2
 801ae90:	0018      	movs	r0, r3
 801ae92:	f000 fc12 	bl	801b6ba <USBD_CtlError>
                  break;
 801ae96:	e065      	b.n	801af64 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801ae98:	230e      	movs	r3, #14
 801ae9a:	18fb      	adds	r3, r7, r3
 801ae9c:	781b      	ldrb	r3, [r3, #0]
 801ae9e:	220f      	movs	r2, #15
 801aea0:	401a      	ands	r2, r3
 801aea2:	6878      	ldr	r0, [r7, #4]
 801aea4:	23ac      	movs	r3, #172	@ 0xac
 801aea6:	0059      	lsls	r1, r3, #1
 801aea8:	0013      	movs	r3, r2
 801aeaa:	009b      	lsls	r3, r3, #2
 801aeac:	189b      	adds	r3, r3, r2
 801aeae:	009b      	lsls	r3, r3, #2
 801aeb0:	18c3      	adds	r3, r0, r3
 801aeb2:	185b      	adds	r3, r3, r1
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d106      	bne.n	801aec8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801aeba:	683a      	ldr	r2, [r7, #0]
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	0011      	movs	r1, r2
 801aec0:	0018      	movs	r0, r3
 801aec2:	f000 fbfa 	bl	801b6ba <USBD_CtlError>
                  break;
 801aec6:	e04d      	b.n	801af64 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801aec8:	220e      	movs	r2, #14
 801aeca:	18bb      	adds	r3, r7, r2
 801aecc:	781b      	ldrb	r3, [r3, #0]
 801aece:	b25b      	sxtb	r3, r3
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	da0c      	bge.n	801aeee <USBD_StdEPReq+0x2c8>
 801aed4:	18bb      	adds	r3, r7, r2
 801aed6:	781b      	ldrb	r3, [r3, #0]
 801aed8:	227f      	movs	r2, #127	@ 0x7f
 801aeda:	401a      	ands	r2, r3
 801aedc:	0013      	movs	r3, r2
 801aede:	009b      	lsls	r3, r3, #2
 801aee0:	189b      	adds	r3, r3, r2
 801aee2:	009b      	lsls	r3, r3, #2
 801aee4:	3310      	adds	r3, #16
 801aee6:	687a      	ldr	r2, [r7, #4]
 801aee8:	18d3      	adds	r3, r2, r3
 801aeea:	3304      	adds	r3, #4
 801aeec:	e00d      	b.n	801af0a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801aeee:	230e      	movs	r3, #14
 801aef0:	18fb      	adds	r3, r7, r3
 801aef2:	781b      	ldrb	r3, [r3, #0]
 801aef4:	227f      	movs	r2, #127	@ 0x7f
 801aef6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801aef8:	0013      	movs	r3, r2
 801aefa:	009b      	lsls	r3, r3, #2
 801aefc:	189b      	adds	r3, r3, r2
 801aefe:	009b      	lsls	r3, r3, #2
 801af00:	3351      	adds	r3, #81	@ 0x51
 801af02:	33ff      	adds	r3, #255	@ 0xff
 801af04:	687a      	ldr	r2, [r7, #4]
 801af06:	18d3      	adds	r3, r2, r3
 801af08:	3304      	adds	r3, #4
 801af0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801af0c:	220e      	movs	r2, #14
 801af0e:	18bb      	adds	r3, r7, r2
 801af10:	781b      	ldrb	r3, [r3, #0]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d003      	beq.n	801af1e <USBD_StdEPReq+0x2f8>
 801af16:	18bb      	adds	r3, r7, r2
 801af18:	781b      	ldrb	r3, [r3, #0]
 801af1a:	2b80      	cmp	r3, #128	@ 0x80
 801af1c:	d103      	bne.n	801af26 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801af1e:	68bb      	ldr	r3, [r7, #8]
 801af20:	2200      	movs	r2, #0
 801af22:	601a      	str	r2, [r3, #0]
 801af24:	e010      	b.n	801af48 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801af26:	230e      	movs	r3, #14
 801af28:	18fb      	adds	r3, r7, r3
 801af2a:	781a      	ldrb	r2, [r3, #0]
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	0011      	movs	r1, r2
 801af30:	0018      	movs	r0, r3
 801af32:	f001 f940 	bl	801c1b6 <USBD_LL_IsStallEP>
 801af36:	1e03      	subs	r3, r0, #0
 801af38:	d003      	beq.n	801af42 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801af3a:	68bb      	ldr	r3, [r7, #8]
 801af3c:	2201      	movs	r2, #1
 801af3e:	601a      	str	r2, [r3, #0]
 801af40:	e002      	b.n	801af48 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801af42:	68bb      	ldr	r3, [r7, #8]
 801af44:	2200      	movs	r2, #0
 801af46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801af48:	68b9      	ldr	r1, [r7, #8]
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	2202      	movs	r2, #2
 801af4e:	0018      	movs	r0, r3
 801af50:	f000 fc31 	bl	801b7b6 <USBD_CtlSendData>
              break;
 801af54:	e006      	b.n	801af64 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801af56:	683a      	ldr	r2, [r7, #0]
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	0011      	movs	r1, r2
 801af5c:	0018      	movs	r0, r3
 801af5e:	f000 fbac 	bl	801b6ba <USBD_CtlError>
              break;
 801af62:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801af64:	e006      	b.n	801af74 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801af66:	683a      	ldr	r2, [r7, #0]
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	0011      	movs	r1, r2
 801af6c:	0018      	movs	r0, r3
 801af6e:	f000 fba4 	bl	801b6ba <USBD_CtlError>
          break;
 801af72:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801af74:	e006      	b.n	801af84 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801af76:	683a      	ldr	r2, [r7, #0]
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	0011      	movs	r1, r2
 801af7c:	0018      	movs	r0, r3
 801af7e:	f000 fb9c 	bl	801b6ba <USBD_CtlError>
      break;
 801af82:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801af84:	230f      	movs	r3, #15
 801af86:	18fb      	adds	r3, r7, r3
 801af88:	781b      	ldrb	r3, [r3, #0]
}
 801af8a:	0018      	movs	r0, r3
 801af8c:	46bd      	mov	sp, r7
 801af8e:	b004      	add	sp, #16
 801af90:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801af94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801af94:	b580      	push	{r7, lr}
 801af96:	b084      	sub	sp, #16
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
 801af9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801af9e:	2308      	movs	r3, #8
 801afa0:	18fb      	adds	r3, r7, r3
 801afa2:	2200      	movs	r2, #0
 801afa4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801afa6:	2300      	movs	r3, #0
 801afa8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801afaa:	230b      	movs	r3, #11
 801afac:	18fb      	adds	r3, r7, r3
 801afae:	2200      	movs	r2, #0
 801afb0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801afb2:	683b      	ldr	r3, [r7, #0]
 801afb4:	885b      	ldrh	r3, [r3, #2]
 801afb6:	0a1b      	lsrs	r3, r3, #8
 801afb8:	b29b      	uxth	r3, r3
 801afba:	2b07      	cmp	r3, #7
 801afbc:	d900      	bls.n	801afc0 <USBD_GetDescriptor+0x2c>
 801afbe:	e159      	b.n	801b274 <USBD_GetDescriptor+0x2e0>
 801afc0:	009a      	lsls	r2, r3, #2
 801afc2:	4bcb      	ldr	r3, [pc, #812]	@ (801b2f0 <USBD_GetDescriptor+0x35c>)
 801afc4:	18d3      	adds	r3, r2, r3
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801afca:	687a      	ldr	r2, [r7, #4]
 801afcc:	23ac      	movs	r3, #172	@ 0xac
 801afce:	009b      	lsls	r3, r3, #2
 801afd0:	58d3      	ldr	r3, [r2, r3]
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	687a      	ldr	r2, [r7, #4]
 801afd6:	7c12      	ldrb	r2, [r2, #16]
 801afd8:	2108      	movs	r1, #8
 801afda:	1879      	adds	r1, r7, r1
 801afdc:	0010      	movs	r0, r2
 801afde:	4798      	blx	r3
 801afe0:	0003      	movs	r3, r0
 801afe2:	60fb      	str	r3, [r7, #12]
      break;
 801afe4:	e153      	b.n	801b28e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	7c1b      	ldrb	r3, [r3, #16]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d10f      	bne.n	801b00e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801afee:	687a      	ldr	r2, [r7, #4]
 801aff0:	23ad      	movs	r3, #173	@ 0xad
 801aff2:	009b      	lsls	r3, r3, #2
 801aff4:	58d3      	ldr	r3, [r2, r3]
 801aff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aff8:	2208      	movs	r2, #8
 801affa:	18ba      	adds	r2, r7, r2
 801affc:	0010      	movs	r0, r2
 801affe:	4798      	blx	r3
 801b000:	0003      	movs	r3, r0
 801b002:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b004:	68fb      	ldr	r3, [r7, #12]
 801b006:	3301      	adds	r3, #1
 801b008:	2202      	movs	r2, #2
 801b00a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b00c:	e13f      	b.n	801b28e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b00e:	687a      	ldr	r2, [r7, #4]
 801b010:	23ad      	movs	r3, #173	@ 0xad
 801b012:	009b      	lsls	r3, r3, #2
 801b014:	58d3      	ldr	r3, [r2, r3]
 801b016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b018:	2208      	movs	r2, #8
 801b01a:	18ba      	adds	r2, r7, r2
 801b01c:	0010      	movs	r0, r2
 801b01e:	4798      	blx	r3
 801b020:	0003      	movs	r3, r0
 801b022:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	3301      	adds	r3, #1
 801b028:	2202      	movs	r2, #2
 801b02a:	701a      	strb	r2, [r3, #0]
      break;
 801b02c:	e12f      	b.n	801b28e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b02e:	683b      	ldr	r3, [r7, #0]
 801b030:	885b      	ldrh	r3, [r3, #2]
 801b032:	b2db      	uxtb	r3, r3
 801b034:	2b05      	cmp	r3, #5
 801b036:	d900      	bls.n	801b03a <USBD_GetDescriptor+0xa6>
 801b038:	e0d0      	b.n	801b1dc <USBD_GetDescriptor+0x248>
 801b03a:	009a      	lsls	r2, r3, #2
 801b03c:	4bad      	ldr	r3, [pc, #692]	@ (801b2f4 <USBD_GetDescriptor+0x360>)
 801b03e:	18d3      	adds	r3, r2, r3
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b044:	687a      	ldr	r2, [r7, #4]
 801b046:	23ac      	movs	r3, #172	@ 0xac
 801b048:	009b      	lsls	r3, r3, #2
 801b04a:	58d3      	ldr	r3, [r2, r3]
 801b04c:	685b      	ldr	r3, [r3, #4]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d00d      	beq.n	801b06e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	23ac      	movs	r3, #172	@ 0xac
 801b056:	009b      	lsls	r3, r3, #2
 801b058:	58d3      	ldr	r3, [r2, r3]
 801b05a:	685b      	ldr	r3, [r3, #4]
 801b05c:	687a      	ldr	r2, [r7, #4]
 801b05e:	7c12      	ldrb	r2, [r2, #16]
 801b060:	2108      	movs	r1, #8
 801b062:	1879      	adds	r1, r7, r1
 801b064:	0010      	movs	r0, r2
 801b066:	4798      	blx	r3
 801b068:	0003      	movs	r3, r0
 801b06a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b06c:	e0c3      	b.n	801b1f6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b06e:	683a      	ldr	r2, [r7, #0]
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	0011      	movs	r1, r2
 801b074:	0018      	movs	r0, r3
 801b076:	f000 fb20 	bl	801b6ba <USBD_CtlError>
            err++;
 801b07a:	210b      	movs	r1, #11
 801b07c:	187b      	adds	r3, r7, r1
 801b07e:	781a      	ldrb	r2, [r3, #0]
 801b080:	187b      	adds	r3, r7, r1
 801b082:	3201      	adds	r2, #1
 801b084:	701a      	strb	r2, [r3, #0]
          break;
 801b086:	e0b6      	b.n	801b1f6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b088:	687a      	ldr	r2, [r7, #4]
 801b08a:	23ac      	movs	r3, #172	@ 0xac
 801b08c:	009b      	lsls	r3, r3, #2
 801b08e:	58d3      	ldr	r3, [r2, r3]
 801b090:	689b      	ldr	r3, [r3, #8]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d00d      	beq.n	801b0b2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b096:	687a      	ldr	r2, [r7, #4]
 801b098:	23ac      	movs	r3, #172	@ 0xac
 801b09a:	009b      	lsls	r3, r3, #2
 801b09c:	58d3      	ldr	r3, [r2, r3]
 801b09e:	689b      	ldr	r3, [r3, #8]
 801b0a0:	687a      	ldr	r2, [r7, #4]
 801b0a2:	7c12      	ldrb	r2, [r2, #16]
 801b0a4:	2108      	movs	r1, #8
 801b0a6:	1879      	adds	r1, r7, r1
 801b0a8:	0010      	movs	r0, r2
 801b0aa:	4798      	blx	r3
 801b0ac:	0003      	movs	r3, r0
 801b0ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b0b0:	e0a1      	b.n	801b1f6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b0b2:	683a      	ldr	r2, [r7, #0]
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	0011      	movs	r1, r2
 801b0b8:	0018      	movs	r0, r3
 801b0ba:	f000 fafe 	bl	801b6ba <USBD_CtlError>
            err++;
 801b0be:	210b      	movs	r1, #11
 801b0c0:	187b      	adds	r3, r7, r1
 801b0c2:	781a      	ldrb	r2, [r3, #0]
 801b0c4:	187b      	adds	r3, r7, r1
 801b0c6:	3201      	adds	r2, #1
 801b0c8:	701a      	strb	r2, [r3, #0]
          break;
 801b0ca:	e094      	b.n	801b1f6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b0cc:	687a      	ldr	r2, [r7, #4]
 801b0ce:	23ac      	movs	r3, #172	@ 0xac
 801b0d0:	009b      	lsls	r3, r3, #2
 801b0d2:	58d3      	ldr	r3, [r2, r3]
 801b0d4:	68db      	ldr	r3, [r3, #12]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d00d      	beq.n	801b0f6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b0da:	687a      	ldr	r2, [r7, #4]
 801b0dc:	23ac      	movs	r3, #172	@ 0xac
 801b0de:	009b      	lsls	r3, r3, #2
 801b0e0:	58d3      	ldr	r3, [r2, r3]
 801b0e2:	68db      	ldr	r3, [r3, #12]
 801b0e4:	687a      	ldr	r2, [r7, #4]
 801b0e6:	7c12      	ldrb	r2, [r2, #16]
 801b0e8:	2108      	movs	r1, #8
 801b0ea:	1879      	adds	r1, r7, r1
 801b0ec:	0010      	movs	r0, r2
 801b0ee:	4798      	blx	r3
 801b0f0:	0003      	movs	r3, r0
 801b0f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b0f4:	e07f      	b.n	801b1f6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b0f6:	683a      	ldr	r2, [r7, #0]
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	0011      	movs	r1, r2
 801b0fc:	0018      	movs	r0, r3
 801b0fe:	f000 fadc 	bl	801b6ba <USBD_CtlError>
            err++;
 801b102:	210b      	movs	r1, #11
 801b104:	187b      	adds	r3, r7, r1
 801b106:	781a      	ldrb	r2, [r3, #0]
 801b108:	187b      	adds	r3, r7, r1
 801b10a:	3201      	adds	r2, #1
 801b10c:	701a      	strb	r2, [r3, #0]
          break;
 801b10e:	e072      	b.n	801b1f6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b110:	687a      	ldr	r2, [r7, #4]
 801b112:	23ac      	movs	r3, #172	@ 0xac
 801b114:	009b      	lsls	r3, r3, #2
 801b116:	58d3      	ldr	r3, [r2, r3]
 801b118:	691b      	ldr	r3, [r3, #16]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d00d      	beq.n	801b13a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b11e:	687a      	ldr	r2, [r7, #4]
 801b120:	23ac      	movs	r3, #172	@ 0xac
 801b122:	009b      	lsls	r3, r3, #2
 801b124:	58d3      	ldr	r3, [r2, r3]
 801b126:	691b      	ldr	r3, [r3, #16]
 801b128:	687a      	ldr	r2, [r7, #4]
 801b12a:	7c12      	ldrb	r2, [r2, #16]
 801b12c:	2108      	movs	r1, #8
 801b12e:	1879      	adds	r1, r7, r1
 801b130:	0010      	movs	r0, r2
 801b132:	4798      	blx	r3
 801b134:	0003      	movs	r3, r0
 801b136:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b138:	e05d      	b.n	801b1f6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b13a:	683a      	ldr	r2, [r7, #0]
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	0011      	movs	r1, r2
 801b140:	0018      	movs	r0, r3
 801b142:	f000 faba 	bl	801b6ba <USBD_CtlError>
            err++;
 801b146:	210b      	movs	r1, #11
 801b148:	187b      	adds	r3, r7, r1
 801b14a:	781a      	ldrb	r2, [r3, #0]
 801b14c:	187b      	adds	r3, r7, r1
 801b14e:	3201      	adds	r2, #1
 801b150:	701a      	strb	r2, [r3, #0]
          break;
 801b152:	e050      	b.n	801b1f6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801b154:	687a      	ldr	r2, [r7, #4]
 801b156:	23ac      	movs	r3, #172	@ 0xac
 801b158:	009b      	lsls	r3, r3, #2
 801b15a:	58d3      	ldr	r3, [r2, r3]
 801b15c:	695b      	ldr	r3, [r3, #20]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d00d      	beq.n	801b17e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801b162:	687a      	ldr	r2, [r7, #4]
 801b164:	23ac      	movs	r3, #172	@ 0xac
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	58d3      	ldr	r3, [r2, r3]
 801b16a:	695b      	ldr	r3, [r3, #20]
 801b16c:	687a      	ldr	r2, [r7, #4]
 801b16e:	7c12      	ldrb	r2, [r2, #16]
 801b170:	2108      	movs	r1, #8
 801b172:	1879      	adds	r1, r7, r1
 801b174:	0010      	movs	r0, r2
 801b176:	4798      	blx	r3
 801b178:	0003      	movs	r3, r0
 801b17a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b17c:	e03b      	b.n	801b1f6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b17e:	683a      	ldr	r2, [r7, #0]
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	0011      	movs	r1, r2
 801b184:	0018      	movs	r0, r3
 801b186:	f000 fa98 	bl	801b6ba <USBD_CtlError>
            err++;
 801b18a:	210b      	movs	r1, #11
 801b18c:	187b      	adds	r3, r7, r1
 801b18e:	781a      	ldrb	r2, [r3, #0]
 801b190:	187b      	adds	r3, r7, r1
 801b192:	3201      	adds	r2, #1
 801b194:	701a      	strb	r2, [r3, #0]
          break;
 801b196:	e02e      	b.n	801b1f6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801b198:	687a      	ldr	r2, [r7, #4]
 801b19a:	23ac      	movs	r3, #172	@ 0xac
 801b19c:	009b      	lsls	r3, r3, #2
 801b19e:	58d3      	ldr	r3, [r2, r3]
 801b1a0:	699b      	ldr	r3, [r3, #24]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d00d      	beq.n	801b1c2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801b1a6:	687a      	ldr	r2, [r7, #4]
 801b1a8:	23ac      	movs	r3, #172	@ 0xac
 801b1aa:	009b      	lsls	r3, r3, #2
 801b1ac:	58d3      	ldr	r3, [r2, r3]
 801b1ae:	699b      	ldr	r3, [r3, #24]
 801b1b0:	687a      	ldr	r2, [r7, #4]
 801b1b2:	7c12      	ldrb	r2, [r2, #16]
 801b1b4:	2108      	movs	r1, #8
 801b1b6:	1879      	adds	r1, r7, r1
 801b1b8:	0010      	movs	r0, r2
 801b1ba:	4798      	blx	r3
 801b1bc:	0003      	movs	r3, r0
 801b1be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b1c0:	e019      	b.n	801b1f6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b1c2:	683a      	ldr	r2, [r7, #0]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	0011      	movs	r1, r2
 801b1c8:	0018      	movs	r0, r3
 801b1ca:	f000 fa76 	bl	801b6ba <USBD_CtlError>
            err++;
 801b1ce:	210b      	movs	r1, #11
 801b1d0:	187b      	adds	r3, r7, r1
 801b1d2:	781a      	ldrb	r2, [r3, #0]
 801b1d4:	187b      	adds	r3, r7, r1
 801b1d6:	3201      	adds	r2, #1
 801b1d8:	701a      	strb	r2, [r3, #0]
          break;
 801b1da:	e00c      	b.n	801b1f6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801b1dc:	683a      	ldr	r2, [r7, #0]
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	0011      	movs	r1, r2
 801b1e2:	0018      	movs	r0, r3
 801b1e4:	f000 fa69 	bl	801b6ba <USBD_CtlError>
          err++;
 801b1e8:	210b      	movs	r1, #11
 801b1ea:	187b      	adds	r3, r7, r1
 801b1ec:	781a      	ldrb	r2, [r3, #0]
 801b1ee:	187b      	adds	r3, r7, r1
 801b1f0:	3201      	adds	r2, #1
 801b1f2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801b1f4:	e04b      	b.n	801b28e <USBD_GetDescriptor+0x2fa>
 801b1f6:	e04a      	b.n	801b28e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	7c1b      	ldrb	r3, [r3, #16]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d10b      	bne.n	801b218 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801b200:	687a      	ldr	r2, [r7, #4]
 801b202:	23ad      	movs	r3, #173	@ 0xad
 801b204:	009b      	lsls	r3, r3, #2
 801b206:	58d3      	ldr	r3, [r2, r3]
 801b208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b20a:	2208      	movs	r2, #8
 801b20c:	18ba      	adds	r2, r7, r2
 801b20e:	0010      	movs	r0, r2
 801b210:	4798      	blx	r3
 801b212:	0003      	movs	r3, r0
 801b214:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b216:	e03a      	b.n	801b28e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b218:	683a      	ldr	r2, [r7, #0]
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	0011      	movs	r1, r2
 801b21e:	0018      	movs	r0, r3
 801b220:	f000 fa4b 	bl	801b6ba <USBD_CtlError>
        err++;
 801b224:	210b      	movs	r1, #11
 801b226:	187b      	adds	r3, r7, r1
 801b228:	781a      	ldrb	r2, [r3, #0]
 801b22a:	187b      	adds	r3, r7, r1
 801b22c:	3201      	adds	r2, #1
 801b22e:	701a      	strb	r2, [r3, #0]
      break;
 801b230:	e02d      	b.n	801b28e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	7c1b      	ldrb	r3, [r3, #16]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d10f      	bne.n	801b25a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	23ad      	movs	r3, #173	@ 0xad
 801b23e:	009b      	lsls	r3, r3, #2
 801b240:	58d3      	ldr	r3, [r2, r3]
 801b242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b244:	2208      	movs	r2, #8
 801b246:	18ba      	adds	r2, r7, r2
 801b248:	0010      	movs	r0, r2
 801b24a:	4798      	blx	r3
 801b24c:	0003      	movs	r3, r0
 801b24e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	3301      	adds	r3, #1
 801b254:	2207      	movs	r2, #7
 801b256:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b258:	e019      	b.n	801b28e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b25a:	683a      	ldr	r2, [r7, #0]
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	0011      	movs	r1, r2
 801b260:	0018      	movs	r0, r3
 801b262:	f000 fa2a 	bl	801b6ba <USBD_CtlError>
        err++;
 801b266:	210b      	movs	r1, #11
 801b268:	187b      	adds	r3, r7, r1
 801b26a:	781a      	ldrb	r2, [r3, #0]
 801b26c:	187b      	adds	r3, r7, r1
 801b26e:	3201      	adds	r2, #1
 801b270:	701a      	strb	r2, [r3, #0]
      break;
 801b272:	e00c      	b.n	801b28e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801b274:	683a      	ldr	r2, [r7, #0]
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	0011      	movs	r1, r2
 801b27a:	0018      	movs	r0, r3
 801b27c:	f000 fa1d 	bl	801b6ba <USBD_CtlError>
      err++;
 801b280:	210b      	movs	r1, #11
 801b282:	187b      	adds	r3, r7, r1
 801b284:	781a      	ldrb	r2, [r3, #0]
 801b286:	187b      	adds	r3, r7, r1
 801b288:	3201      	adds	r2, #1
 801b28a:	701a      	strb	r2, [r3, #0]
      break;
 801b28c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801b28e:	230b      	movs	r3, #11
 801b290:	18fb      	adds	r3, r7, r3
 801b292:	781b      	ldrb	r3, [r3, #0]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d127      	bne.n	801b2e8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801b298:	2108      	movs	r1, #8
 801b29a:	187b      	adds	r3, r7, r1
 801b29c:	881b      	ldrh	r3, [r3, #0]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d019      	beq.n	801b2d6 <USBD_GetDescriptor+0x342>
 801b2a2:	683b      	ldr	r3, [r7, #0]
 801b2a4:	88db      	ldrh	r3, [r3, #6]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d015      	beq.n	801b2d6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	88da      	ldrh	r2, [r3, #6]
 801b2ae:	187b      	adds	r3, r7, r1
 801b2b0:	881b      	ldrh	r3, [r3, #0]
 801b2b2:	1c18      	adds	r0, r3, #0
 801b2b4:	1c11      	adds	r1, r2, #0
 801b2b6:	b28a      	uxth	r2, r1
 801b2b8:	b283      	uxth	r3, r0
 801b2ba:	429a      	cmp	r2, r3
 801b2bc:	d900      	bls.n	801b2c0 <USBD_GetDescriptor+0x32c>
 801b2be:	1c01      	adds	r1, r0, #0
 801b2c0:	b28a      	uxth	r2, r1
 801b2c2:	2108      	movs	r1, #8
 801b2c4:	187b      	adds	r3, r7, r1
 801b2c6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801b2c8:	187b      	adds	r3, r7, r1
 801b2ca:	881a      	ldrh	r2, [r3, #0]
 801b2cc:	68f9      	ldr	r1, [r7, #12]
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	0018      	movs	r0, r3
 801b2d2:	f000 fa70 	bl	801b7b6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801b2d6:	683b      	ldr	r3, [r7, #0]
 801b2d8:	88db      	ldrh	r3, [r3, #6]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d105      	bne.n	801b2ea <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	0018      	movs	r0, r3
 801b2e2:	f000 fad2 	bl	801b88a <USBD_CtlSendStatus>
 801b2e6:	e000      	b.n	801b2ea <USBD_GetDescriptor+0x356>
    return;
 801b2e8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	b004      	add	sp, #16
 801b2ee:	bd80      	pop	{r7, pc}
 801b2f0:	08023c50 	.word	0x08023c50
 801b2f4:	08023c70 	.word	0x08023c70

0801b2f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b2f8:	b590      	push	{r4, r7, lr}
 801b2fa:	b085      	sub	sp, #20
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
 801b300:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801b302:	683b      	ldr	r3, [r7, #0]
 801b304:	889b      	ldrh	r3, [r3, #4]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d13d      	bne.n	801b386 <USBD_SetAddress+0x8e>
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	88db      	ldrh	r3, [r3, #6]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d139      	bne.n	801b386 <USBD_SetAddress+0x8e>
 801b312:	683b      	ldr	r3, [r7, #0]
 801b314:	885b      	ldrh	r3, [r3, #2]
 801b316:	2b7f      	cmp	r3, #127	@ 0x7f
 801b318:	d835      	bhi.n	801b386 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801b31a:	683b      	ldr	r3, [r7, #0]
 801b31c:	885b      	ldrh	r3, [r3, #2]
 801b31e:	b2da      	uxtb	r2, r3
 801b320:	230f      	movs	r3, #15
 801b322:	18fb      	adds	r3, r7, r3
 801b324:	217f      	movs	r1, #127	@ 0x7f
 801b326:	400a      	ands	r2, r1
 801b328:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b32a:	687a      	ldr	r2, [r7, #4]
 801b32c:	23a7      	movs	r3, #167	@ 0xa7
 801b32e:	009b      	lsls	r3, r3, #2
 801b330:	5cd3      	ldrb	r3, [r2, r3]
 801b332:	2b03      	cmp	r3, #3
 801b334:	d106      	bne.n	801b344 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801b336:	683a      	ldr	r2, [r7, #0]
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	0011      	movs	r1, r2
 801b33c:	0018      	movs	r0, r3
 801b33e:	f000 f9bc 	bl	801b6ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b342:	e027      	b.n	801b394 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	240f      	movs	r4, #15
 801b348:	193a      	adds	r2, r7, r4
 801b34a:	4914      	ldr	r1, [pc, #80]	@ (801b39c <USBD_SetAddress+0xa4>)
 801b34c:	7812      	ldrb	r2, [r2, #0]
 801b34e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801b350:	193b      	adds	r3, r7, r4
 801b352:	781a      	ldrb	r2, [r3, #0]
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	0011      	movs	r1, r2
 801b358:	0018      	movs	r0, r3
 801b35a:	f000 ff5d 	bl	801c218 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	0018      	movs	r0, r3
 801b362:	f000 fa92 	bl	801b88a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801b366:	193b      	adds	r3, r7, r4
 801b368:	781b      	ldrb	r3, [r3, #0]
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d005      	beq.n	801b37a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801b36e:	687a      	ldr	r2, [r7, #4]
 801b370:	23a7      	movs	r3, #167	@ 0xa7
 801b372:	009b      	lsls	r3, r3, #2
 801b374:	2102      	movs	r1, #2
 801b376:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b378:	e00c      	b.n	801b394 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801b37a:	687a      	ldr	r2, [r7, #4]
 801b37c:	23a7      	movs	r3, #167	@ 0xa7
 801b37e:	009b      	lsls	r3, r3, #2
 801b380:	2101      	movs	r1, #1
 801b382:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b384:	e006      	b.n	801b394 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801b386:	683a      	ldr	r2, [r7, #0]
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	0011      	movs	r1, r2
 801b38c:	0018      	movs	r0, r3
 801b38e:	f000 f994 	bl	801b6ba <USBD_CtlError>
  }
}
 801b392:	46c0      	nop			@ (mov r8, r8)
 801b394:	46c0      	nop			@ (mov r8, r8)
 801b396:	46bd      	mov	sp, r7
 801b398:	b005      	add	sp, #20
 801b39a:	bd90      	pop	{r4, r7, pc}
 801b39c:	0000029e 	.word	0x0000029e

0801b3a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801b3aa:	683b      	ldr	r3, [r7, #0]
 801b3ac:	885b      	ldrh	r3, [r3, #2]
 801b3ae:	b2da      	uxtb	r2, r3
 801b3b0:	4b4c      	ldr	r3, [pc, #304]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b3b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801b3b4:	4b4b      	ldr	r3, [pc, #300]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	2b01      	cmp	r3, #1
 801b3ba:	d906      	bls.n	801b3ca <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801b3bc:	683a      	ldr	r2, [r7, #0]
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	0011      	movs	r1, r2
 801b3c2:	0018      	movs	r0, r3
 801b3c4:	f000 f979 	bl	801b6ba <USBD_CtlError>
 801b3c8:	e088      	b.n	801b4dc <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801b3ca:	687a      	ldr	r2, [r7, #4]
 801b3cc:	23a7      	movs	r3, #167	@ 0xa7
 801b3ce:	009b      	lsls	r3, r3, #2
 801b3d0:	5cd3      	ldrb	r3, [r2, r3]
 801b3d2:	2b02      	cmp	r3, #2
 801b3d4:	d002      	beq.n	801b3dc <USBD_SetConfig+0x3c>
 801b3d6:	2b03      	cmp	r3, #3
 801b3d8:	d029      	beq.n	801b42e <USBD_SetConfig+0x8e>
 801b3da:	e071      	b.n	801b4c0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801b3dc:	4b41      	ldr	r3, [pc, #260]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b3de:	781b      	ldrb	r3, [r3, #0]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d01f      	beq.n	801b424 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801b3e4:	4b3f      	ldr	r3, [pc, #252]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b3e6:	781b      	ldrb	r3, [r3, #0]
 801b3e8:	001a      	movs	r2, r3
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801b3ee:	687a      	ldr	r2, [r7, #4]
 801b3f0:	23a7      	movs	r3, #167	@ 0xa7
 801b3f2:	009b      	lsls	r3, r3, #2
 801b3f4:	2103      	movs	r1, #3
 801b3f6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801b3f8:	4b3a      	ldr	r3, [pc, #232]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b3fa:	781a      	ldrb	r2, [r3, #0]
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	0011      	movs	r1, r2
 801b400:	0018      	movs	r0, r3
 801b402:	f7ff f8c6 	bl	801a592 <USBD_SetClassConfig>
 801b406:	0003      	movs	r3, r0
 801b408:	2b02      	cmp	r3, #2
 801b40a:	d106      	bne.n	801b41a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801b40c:	683a      	ldr	r2, [r7, #0]
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	0011      	movs	r1, r2
 801b412:	0018      	movs	r0, r3
 801b414:	f000 f951 	bl	801b6ba <USBD_CtlError>
            return;
 801b418:	e060      	b.n	801b4dc <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	0018      	movs	r0, r3
 801b41e:	f000 fa34 	bl	801b88a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801b422:	e05b      	b.n	801b4dc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	0018      	movs	r0, r3
 801b428:	f000 fa2f 	bl	801b88a <USBD_CtlSendStatus>
        break;
 801b42c:	e056      	b.n	801b4dc <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801b42e:	4b2d      	ldr	r3, [pc, #180]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b430:	781b      	ldrb	r3, [r3, #0]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d115      	bne.n	801b462 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801b436:	687a      	ldr	r2, [r7, #4]
 801b438:	23a7      	movs	r3, #167	@ 0xa7
 801b43a:	009b      	lsls	r3, r3, #2
 801b43c:	2102      	movs	r1, #2
 801b43e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801b440:	4b28      	ldr	r3, [pc, #160]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b442:	781b      	ldrb	r3, [r3, #0]
 801b444:	001a      	movs	r2, r3
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801b44a:	4b26      	ldr	r3, [pc, #152]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b44c:	781a      	ldrb	r2, [r3, #0]
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	0011      	movs	r1, r2
 801b452:	0018      	movs	r0, r3
 801b454:	f7ff f8c4 	bl	801a5e0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	0018      	movs	r0, r3
 801b45c:	f000 fa15 	bl	801b88a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801b460:	e03c      	b.n	801b4dc <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801b462:	4b20      	ldr	r3, [pc, #128]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b464:	781b      	ldrb	r3, [r3, #0]
 801b466:	001a      	movs	r2, r3
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	685b      	ldr	r3, [r3, #4]
 801b46c:	429a      	cmp	r2, r3
 801b46e:	d022      	beq.n	801b4b6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	685b      	ldr	r3, [r3, #4]
 801b474:	b2da      	uxtb	r2, r3
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	0011      	movs	r1, r2
 801b47a:	0018      	movs	r0, r3
 801b47c:	f7ff f8b0 	bl	801a5e0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801b480:	4b18      	ldr	r3, [pc, #96]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b482:	781b      	ldrb	r3, [r3, #0]
 801b484:	001a      	movs	r2, r3
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801b48a:	4b16      	ldr	r3, [pc, #88]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b48c:	781a      	ldrb	r2, [r3, #0]
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	0011      	movs	r1, r2
 801b492:	0018      	movs	r0, r3
 801b494:	f7ff f87d 	bl	801a592 <USBD_SetClassConfig>
 801b498:	0003      	movs	r3, r0
 801b49a:	2b02      	cmp	r3, #2
 801b49c:	d106      	bne.n	801b4ac <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801b49e:	683a      	ldr	r2, [r7, #0]
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	0011      	movs	r1, r2
 801b4a4:	0018      	movs	r0, r3
 801b4a6:	f000 f908 	bl	801b6ba <USBD_CtlError>
            return;
 801b4aa:	e017      	b.n	801b4dc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	0018      	movs	r0, r3
 801b4b0:	f000 f9eb 	bl	801b88a <USBD_CtlSendStatus>
        break;
 801b4b4:	e012      	b.n	801b4dc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	0018      	movs	r0, r3
 801b4ba:	f000 f9e6 	bl	801b88a <USBD_CtlSendStatus>
        break;
 801b4be:	e00d      	b.n	801b4dc <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801b4c0:	683a      	ldr	r2, [r7, #0]
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	0011      	movs	r1, r2
 801b4c6:	0018      	movs	r0, r3
 801b4c8:	f000 f8f7 	bl	801b6ba <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801b4cc:	4b05      	ldr	r3, [pc, #20]	@ (801b4e4 <USBD_SetConfig+0x144>)
 801b4ce:	781a      	ldrb	r2, [r3, #0]
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	0011      	movs	r1, r2
 801b4d4:	0018      	movs	r0, r3
 801b4d6:	f7ff f883 	bl	801a5e0 <USBD_ClrClassConfig>
        break;
 801b4da:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b4dc:	46bd      	mov	sp, r7
 801b4de:	b002      	add	sp, #8
 801b4e0:	bd80      	pop	{r7, pc}
 801b4e2:	46c0      	nop			@ (mov r8, r8)
 801b4e4:	20002518 	.word	0x20002518

0801b4e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b4e8:	b580      	push	{r7, lr}
 801b4ea:	b082      	sub	sp, #8
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	6078      	str	r0, [r7, #4]
 801b4f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801b4f2:	683b      	ldr	r3, [r7, #0]
 801b4f4:	88db      	ldrh	r3, [r3, #6]
 801b4f6:	2b01      	cmp	r3, #1
 801b4f8:	d006      	beq.n	801b508 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801b4fa:	683a      	ldr	r2, [r7, #0]
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	0011      	movs	r1, r2
 801b500:	0018      	movs	r0, r3
 801b502:	f000 f8da 	bl	801b6ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801b506:	e026      	b.n	801b556 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801b508:	687a      	ldr	r2, [r7, #4]
 801b50a:	23a7      	movs	r3, #167	@ 0xa7
 801b50c:	009b      	lsls	r3, r3, #2
 801b50e:	5cd3      	ldrb	r3, [r2, r3]
 801b510:	2b02      	cmp	r3, #2
 801b512:	dc02      	bgt.n	801b51a <USBD_GetConfig+0x32>
 801b514:	2b00      	cmp	r3, #0
 801b516:	dc03      	bgt.n	801b520 <USBD_GetConfig+0x38>
 801b518:	e016      	b.n	801b548 <USBD_GetConfig+0x60>
 801b51a:	2b03      	cmp	r3, #3
 801b51c:	d00c      	beq.n	801b538 <USBD_GetConfig+0x50>
 801b51e:	e013      	b.n	801b548 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	2200      	movs	r2, #0
 801b524:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	3308      	adds	r3, #8
 801b52a:	0019      	movs	r1, r3
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	2201      	movs	r2, #1
 801b530:	0018      	movs	r0, r3
 801b532:	f000 f940 	bl	801b7b6 <USBD_CtlSendData>
        break;
 801b536:	e00e      	b.n	801b556 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	1d19      	adds	r1, r3, #4
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	2201      	movs	r2, #1
 801b540:	0018      	movs	r0, r3
 801b542:	f000 f938 	bl	801b7b6 <USBD_CtlSendData>
        break;
 801b546:	e006      	b.n	801b556 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801b548:	683a      	ldr	r2, [r7, #0]
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	0011      	movs	r1, r2
 801b54e:	0018      	movs	r0, r3
 801b550:	f000 f8b3 	bl	801b6ba <USBD_CtlError>
        break;
 801b554:	46c0      	nop			@ (mov r8, r8)
}
 801b556:	46c0      	nop			@ (mov r8, r8)
 801b558:	46bd      	mov	sp, r7
 801b55a:	b002      	add	sp, #8
 801b55c:	bd80      	pop	{r7, pc}

0801b55e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b55e:	b580      	push	{r7, lr}
 801b560:	b082      	sub	sp, #8
 801b562:	af00      	add	r7, sp, #0
 801b564:	6078      	str	r0, [r7, #4]
 801b566:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b568:	687a      	ldr	r2, [r7, #4]
 801b56a:	23a7      	movs	r3, #167	@ 0xa7
 801b56c:	009b      	lsls	r3, r3, #2
 801b56e:	5cd3      	ldrb	r3, [r2, r3]
 801b570:	3b01      	subs	r3, #1
 801b572:	2b02      	cmp	r3, #2
 801b574:	d822      	bhi.n	801b5bc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801b576:	683b      	ldr	r3, [r7, #0]
 801b578:	88db      	ldrh	r3, [r3, #6]
 801b57a:	2b02      	cmp	r3, #2
 801b57c:	d006      	beq.n	801b58c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801b57e:	683a      	ldr	r2, [r7, #0]
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	0011      	movs	r1, r2
 801b584:	0018      	movs	r0, r3
 801b586:	f000 f898 	bl	801b6ba <USBD_CtlError>
        break;
 801b58a:	e01e      	b.n	801b5ca <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	2201      	movs	r2, #1
 801b590:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801b592:	687a      	ldr	r2, [r7, #4]
 801b594:	23a9      	movs	r3, #169	@ 0xa9
 801b596:	009b      	lsls	r3, r3, #2
 801b598:	58d3      	ldr	r3, [r2, r3]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d005      	beq.n	801b5aa <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	68db      	ldr	r3, [r3, #12]
 801b5a2:	2202      	movs	r2, #2
 801b5a4:	431a      	orrs	r2, r3
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	330c      	adds	r3, #12
 801b5ae:	0019      	movs	r1, r3
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	2202      	movs	r2, #2
 801b5b4:	0018      	movs	r0, r3
 801b5b6:	f000 f8fe 	bl	801b7b6 <USBD_CtlSendData>
      break;
 801b5ba:	e006      	b.n	801b5ca <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801b5bc:	683a      	ldr	r2, [r7, #0]
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	0011      	movs	r1, r2
 801b5c2:	0018      	movs	r0, r3
 801b5c4:	f000 f879 	bl	801b6ba <USBD_CtlError>
      break;
 801b5c8:	46c0      	nop			@ (mov r8, r8)
  }
}
 801b5ca:	46c0      	nop			@ (mov r8, r8)
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	b002      	add	sp, #8
 801b5d0:	bd80      	pop	{r7, pc}

0801b5d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b5d2:	b580      	push	{r7, lr}
 801b5d4:	b082      	sub	sp, #8
 801b5d6:	af00      	add	r7, sp, #0
 801b5d8:	6078      	str	r0, [r7, #4]
 801b5da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b5dc:	683b      	ldr	r3, [r7, #0]
 801b5de:	885b      	ldrh	r3, [r3, #2]
 801b5e0:	2b01      	cmp	r3, #1
 801b5e2:	d108      	bne.n	801b5f6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801b5e4:	687a      	ldr	r2, [r7, #4]
 801b5e6:	23a9      	movs	r3, #169	@ 0xa9
 801b5e8:	009b      	lsls	r3, r3, #2
 801b5ea:	2101      	movs	r1, #1
 801b5ec:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	0018      	movs	r0, r3
 801b5f2:	f000 f94a 	bl	801b88a <USBD_CtlSendStatus>
  }
}
 801b5f6:	46c0      	nop			@ (mov r8, r8)
 801b5f8:	46bd      	mov	sp, r7
 801b5fa:	b002      	add	sp, #8
 801b5fc:	bd80      	pop	{r7, pc}

0801b5fe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b5fe:	b580      	push	{r7, lr}
 801b600:	b082      	sub	sp, #8
 801b602:	af00      	add	r7, sp, #0
 801b604:	6078      	str	r0, [r7, #4]
 801b606:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b608:	687a      	ldr	r2, [r7, #4]
 801b60a:	23a7      	movs	r3, #167	@ 0xa7
 801b60c:	009b      	lsls	r3, r3, #2
 801b60e:	5cd3      	ldrb	r3, [r2, r3]
 801b610:	3b01      	subs	r3, #1
 801b612:	2b02      	cmp	r3, #2
 801b614:	d80d      	bhi.n	801b632 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	885b      	ldrh	r3, [r3, #2]
 801b61a:	2b01      	cmp	r3, #1
 801b61c:	d110      	bne.n	801b640 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801b61e:	687a      	ldr	r2, [r7, #4]
 801b620:	23a9      	movs	r3, #169	@ 0xa9
 801b622:	009b      	lsls	r3, r3, #2
 801b624:	2100      	movs	r1, #0
 801b626:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	0018      	movs	r0, r3
 801b62c:	f000 f92d 	bl	801b88a <USBD_CtlSendStatus>
      }
      break;
 801b630:	e006      	b.n	801b640 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801b632:	683a      	ldr	r2, [r7, #0]
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	0011      	movs	r1, r2
 801b638:	0018      	movs	r0, r3
 801b63a:	f000 f83e 	bl	801b6ba <USBD_CtlError>
      break;
 801b63e:	e000      	b.n	801b642 <USBD_ClrFeature+0x44>
      break;
 801b640:	46c0      	nop			@ (mov r8, r8)
  }
}
 801b642:	46c0      	nop			@ (mov r8, r8)
 801b644:	46bd      	mov	sp, r7
 801b646:	b002      	add	sp, #8
 801b648:	bd80      	pop	{r7, pc}

0801b64a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801b64a:	b580      	push	{r7, lr}
 801b64c:	b082      	sub	sp, #8
 801b64e:	af00      	add	r7, sp, #0
 801b650:	6078      	str	r0, [r7, #4]
 801b652:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801b654:	683b      	ldr	r3, [r7, #0]
 801b656:	781a      	ldrb	r2, [r3, #0]
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801b65c:	683b      	ldr	r3, [r7, #0]
 801b65e:	785a      	ldrb	r2, [r3, #1]
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801b664:	683b      	ldr	r3, [r7, #0]
 801b666:	3302      	adds	r3, #2
 801b668:	781b      	ldrb	r3, [r3, #0]
 801b66a:	001a      	movs	r2, r3
 801b66c:	683b      	ldr	r3, [r7, #0]
 801b66e:	3303      	adds	r3, #3
 801b670:	781b      	ldrb	r3, [r3, #0]
 801b672:	021b      	lsls	r3, r3, #8
 801b674:	b29b      	uxth	r3, r3
 801b676:	18d3      	adds	r3, r2, r3
 801b678:	b29a      	uxth	r2, r3
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801b67e:	683b      	ldr	r3, [r7, #0]
 801b680:	3304      	adds	r3, #4
 801b682:	781b      	ldrb	r3, [r3, #0]
 801b684:	001a      	movs	r2, r3
 801b686:	683b      	ldr	r3, [r7, #0]
 801b688:	3305      	adds	r3, #5
 801b68a:	781b      	ldrb	r3, [r3, #0]
 801b68c:	021b      	lsls	r3, r3, #8
 801b68e:	b29b      	uxth	r3, r3
 801b690:	18d3      	adds	r3, r2, r3
 801b692:	b29a      	uxth	r2, r3
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801b698:	683b      	ldr	r3, [r7, #0]
 801b69a:	3306      	adds	r3, #6
 801b69c:	781b      	ldrb	r3, [r3, #0]
 801b69e:	001a      	movs	r2, r3
 801b6a0:	683b      	ldr	r3, [r7, #0]
 801b6a2:	3307      	adds	r3, #7
 801b6a4:	781b      	ldrb	r3, [r3, #0]
 801b6a6:	021b      	lsls	r3, r3, #8
 801b6a8:	b29b      	uxth	r3, r3
 801b6aa:	18d3      	adds	r3, r2, r3
 801b6ac:	b29a      	uxth	r2, r3
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	80da      	strh	r2, [r3, #6]

}
 801b6b2:	46c0      	nop			@ (mov r8, r8)
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	b002      	add	sp, #8
 801b6b8:	bd80      	pop	{r7, pc}

0801b6ba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801b6ba:	b580      	push	{r7, lr}
 801b6bc:	b082      	sub	sp, #8
 801b6be:	af00      	add	r7, sp, #0
 801b6c0:	6078      	str	r0, [r7, #4]
 801b6c2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	2180      	movs	r1, #128	@ 0x80
 801b6c8:	0018      	movs	r0, r3
 801b6ca:	f000 fd1e 	bl	801c10a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	2100      	movs	r1, #0
 801b6d2:	0018      	movs	r0, r3
 801b6d4:	f000 fd19 	bl	801c10a <USBD_LL_StallEP>
}
 801b6d8:	46c0      	nop			@ (mov r8, r8)
 801b6da:	46bd      	mov	sp, r7
 801b6dc:	b002      	add	sp, #8
 801b6de:	bd80      	pop	{r7, pc}

0801b6e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801b6e0:	b590      	push	{r4, r7, lr}
 801b6e2:	b087      	sub	sp, #28
 801b6e4:	af00      	add	r7, sp, #0
 801b6e6:	60f8      	str	r0, [r7, #12]
 801b6e8:	60b9      	str	r1, [r7, #8]
 801b6ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801b6ec:	2417      	movs	r4, #23
 801b6ee:	193b      	adds	r3, r7, r4
 801b6f0:	2200      	movs	r2, #0
 801b6f2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d03c      	beq.n	801b774 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	0018      	movs	r0, r3
 801b6fe:	f000 f83d 	bl	801b77c <USBD_GetLen>
 801b702:	0003      	movs	r3, r0
 801b704:	3301      	adds	r3, #1
 801b706:	b29b      	uxth	r3, r3
 801b708:	18db      	adds	r3, r3, r3
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801b710:	193b      	adds	r3, r7, r4
 801b712:	781b      	ldrb	r3, [r3, #0]
 801b714:	193a      	adds	r2, r7, r4
 801b716:	1c59      	adds	r1, r3, #1
 801b718:	7011      	strb	r1, [r2, #0]
 801b71a:	001a      	movs	r2, r3
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	189b      	adds	r3, r3, r2
 801b720:	687a      	ldr	r2, [r7, #4]
 801b722:	7812      	ldrb	r2, [r2, #0]
 801b724:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801b726:	193b      	adds	r3, r7, r4
 801b728:	781b      	ldrb	r3, [r3, #0]
 801b72a:	193a      	adds	r2, r7, r4
 801b72c:	1c59      	adds	r1, r3, #1
 801b72e:	7011      	strb	r1, [r2, #0]
 801b730:	001a      	movs	r2, r3
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	189b      	adds	r3, r3, r2
 801b736:	2203      	movs	r2, #3
 801b738:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801b73a:	e017      	b.n	801b76c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	1c5a      	adds	r2, r3, #1
 801b740:	60fa      	str	r2, [r7, #12]
 801b742:	2417      	movs	r4, #23
 801b744:	193a      	adds	r2, r7, r4
 801b746:	7812      	ldrb	r2, [r2, #0]
 801b748:	1939      	adds	r1, r7, r4
 801b74a:	1c50      	adds	r0, r2, #1
 801b74c:	7008      	strb	r0, [r1, #0]
 801b74e:	0011      	movs	r1, r2
 801b750:	68ba      	ldr	r2, [r7, #8]
 801b752:	1852      	adds	r2, r2, r1
 801b754:	781b      	ldrb	r3, [r3, #0]
 801b756:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801b758:	193b      	adds	r3, r7, r4
 801b75a:	781b      	ldrb	r3, [r3, #0]
 801b75c:	193a      	adds	r2, r7, r4
 801b75e:	1c59      	adds	r1, r3, #1
 801b760:	7011      	strb	r1, [r2, #0]
 801b762:	001a      	movs	r2, r3
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	189b      	adds	r3, r3, r2
 801b768:	2200      	movs	r2, #0
 801b76a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801b76c:	68fb      	ldr	r3, [r7, #12]
 801b76e:	781b      	ldrb	r3, [r3, #0]
 801b770:	2b00      	cmp	r3, #0
 801b772:	d1e3      	bne.n	801b73c <USBD_GetString+0x5c>
    }
  }
}
 801b774:	46c0      	nop			@ (mov r8, r8)
 801b776:	46bd      	mov	sp, r7
 801b778:	b007      	add	sp, #28
 801b77a:	bd90      	pop	{r4, r7, pc}

0801b77c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b77c:	b580      	push	{r7, lr}
 801b77e:	b084      	sub	sp, #16
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b784:	230f      	movs	r3, #15
 801b786:	18fb      	adds	r3, r7, r3
 801b788:	2200      	movs	r2, #0
 801b78a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801b78c:	e008      	b.n	801b7a0 <USBD_GetLen+0x24>
  {
    len++;
 801b78e:	210f      	movs	r1, #15
 801b790:	187b      	adds	r3, r7, r1
 801b792:	781a      	ldrb	r2, [r3, #0]
 801b794:	187b      	adds	r3, r7, r1
 801b796:	3201      	adds	r2, #1
 801b798:	701a      	strb	r2, [r3, #0]
    buf++;
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	3301      	adds	r3, #1
 801b79e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	781b      	ldrb	r3, [r3, #0]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d1f2      	bne.n	801b78e <USBD_GetLen+0x12>
  }

  return len;
 801b7a8:	230f      	movs	r3, #15
 801b7aa:	18fb      	adds	r3, r7, r3
 801b7ac:	781b      	ldrb	r3, [r3, #0]
}
 801b7ae:	0018      	movs	r0, r3
 801b7b0:	46bd      	mov	sp, r7
 801b7b2:	b004      	add	sp, #16
 801b7b4:	bd80      	pop	{r7, pc}

0801b7b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801b7b6:	b580      	push	{r7, lr}
 801b7b8:	b084      	sub	sp, #16
 801b7ba:	af00      	add	r7, sp, #0
 801b7bc:	60f8      	str	r0, [r7, #12]
 801b7be:	60b9      	str	r1, [r7, #8]
 801b7c0:	1dbb      	adds	r3, r7, #6
 801b7c2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b7c4:	68fa      	ldr	r2, [r7, #12]
 801b7c6:	23a5      	movs	r3, #165	@ 0xa5
 801b7c8:	009b      	lsls	r3, r3, #2
 801b7ca:	2102      	movs	r1, #2
 801b7cc:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801b7ce:	1dbb      	adds	r3, r7, #6
 801b7d0:	881a      	ldrh	r2, [r3, #0]
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801b7d6:	1dbb      	adds	r3, r7, #6
 801b7d8:	881a      	ldrh	r2, [r3, #0]
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b7de:	1dbb      	adds	r3, r7, #6
 801b7e0:	881b      	ldrh	r3, [r3, #0]
 801b7e2:	68ba      	ldr	r2, [r7, #8]
 801b7e4:	68f8      	ldr	r0, [r7, #12]
 801b7e6:	2100      	movs	r1, #0
 801b7e8:	f000 fd41 	bl	801c26e <USBD_LL_Transmit>

  return USBD_OK;
 801b7ec:	2300      	movs	r3, #0
}
 801b7ee:	0018      	movs	r0, r3
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	b004      	add	sp, #16
 801b7f4:	bd80      	pop	{r7, pc}

0801b7f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801b7f6:	b580      	push	{r7, lr}
 801b7f8:	b084      	sub	sp, #16
 801b7fa:	af00      	add	r7, sp, #0
 801b7fc:	60f8      	str	r0, [r7, #12]
 801b7fe:	60b9      	str	r1, [r7, #8]
 801b800:	1dbb      	adds	r3, r7, #6
 801b802:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b804:	1dbb      	adds	r3, r7, #6
 801b806:	881b      	ldrh	r3, [r3, #0]
 801b808:	68ba      	ldr	r2, [r7, #8]
 801b80a:	68f8      	ldr	r0, [r7, #12]
 801b80c:	2100      	movs	r1, #0
 801b80e:	f000 fd2e 	bl	801c26e <USBD_LL_Transmit>

  return USBD_OK;
 801b812:	2300      	movs	r3, #0
}
 801b814:	0018      	movs	r0, r3
 801b816:	46bd      	mov	sp, r7
 801b818:	b004      	add	sp, #16
 801b81a:	bd80      	pop	{r7, pc}

0801b81c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801b81c:	b580      	push	{r7, lr}
 801b81e:	b084      	sub	sp, #16
 801b820:	af00      	add	r7, sp, #0
 801b822:	60f8      	str	r0, [r7, #12]
 801b824:	60b9      	str	r1, [r7, #8]
 801b826:	1dbb      	adds	r3, r7, #6
 801b828:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b82a:	68fa      	ldr	r2, [r7, #12]
 801b82c:	23a5      	movs	r3, #165	@ 0xa5
 801b82e:	009b      	lsls	r3, r3, #2
 801b830:	2103      	movs	r1, #3
 801b832:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801b834:	1dbb      	adds	r3, r7, #6
 801b836:	8819      	ldrh	r1, [r3, #0]
 801b838:	68fa      	ldr	r2, [r7, #12]
 801b83a:	23ae      	movs	r3, #174	@ 0xae
 801b83c:	005b      	lsls	r3, r3, #1
 801b83e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801b840:	1dbb      	adds	r3, r7, #6
 801b842:	8819      	ldrh	r1, [r3, #0]
 801b844:	68fa      	ldr	r2, [r7, #12]
 801b846:	23b0      	movs	r3, #176	@ 0xb0
 801b848:	005b      	lsls	r3, r3, #1
 801b84a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b84c:	1dbb      	adds	r3, r7, #6
 801b84e:	881b      	ldrh	r3, [r3, #0]
 801b850:	68ba      	ldr	r2, [r7, #8]
 801b852:	68f8      	ldr	r0, [r7, #12]
 801b854:	2100      	movs	r1, #0
 801b856:	f000 fd41 	bl	801c2dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b85a:	2300      	movs	r3, #0
}
 801b85c:	0018      	movs	r0, r3
 801b85e:	46bd      	mov	sp, r7
 801b860:	b004      	add	sp, #16
 801b862:	bd80      	pop	{r7, pc}

0801b864 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b084      	sub	sp, #16
 801b868:	af00      	add	r7, sp, #0
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	60b9      	str	r1, [r7, #8]
 801b86e:	1dbb      	adds	r3, r7, #6
 801b870:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b872:	1dbb      	adds	r3, r7, #6
 801b874:	881b      	ldrh	r3, [r3, #0]
 801b876:	68ba      	ldr	r2, [r7, #8]
 801b878:	68f8      	ldr	r0, [r7, #12]
 801b87a:	2100      	movs	r1, #0
 801b87c:	f000 fd2e 	bl	801c2dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b880:	2300      	movs	r3, #0
}
 801b882:	0018      	movs	r0, r3
 801b884:	46bd      	mov	sp, r7
 801b886:	b004      	add	sp, #16
 801b888:	bd80      	pop	{r7, pc}

0801b88a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b88a:	b580      	push	{r7, lr}
 801b88c:	b082      	sub	sp, #8
 801b88e:	af00      	add	r7, sp, #0
 801b890:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b892:	687a      	ldr	r2, [r7, #4]
 801b894:	23a5      	movs	r3, #165	@ 0xa5
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	2104      	movs	r1, #4
 801b89a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b89c:	6878      	ldr	r0, [r7, #4]
 801b89e:	2300      	movs	r3, #0
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	2100      	movs	r1, #0
 801b8a4:	f000 fce3 	bl	801c26e <USBD_LL_Transmit>

  return USBD_OK;
 801b8a8:	2300      	movs	r3, #0
}
 801b8aa:	0018      	movs	r0, r3
 801b8ac:	46bd      	mov	sp, r7
 801b8ae:	b002      	add	sp, #8
 801b8b0:	bd80      	pop	{r7, pc}

0801b8b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b8b2:	b580      	push	{r7, lr}
 801b8b4:	b082      	sub	sp, #8
 801b8b6:	af00      	add	r7, sp, #0
 801b8b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b8ba:	687a      	ldr	r2, [r7, #4]
 801b8bc:	23a5      	movs	r3, #165	@ 0xa5
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	2105      	movs	r1, #5
 801b8c2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b8c4:	6878      	ldr	r0, [r7, #4]
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	2200      	movs	r2, #0
 801b8ca:	2100      	movs	r1, #0
 801b8cc:	f000 fd06 	bl	801c2dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b8d0:	2300      	movs	r3, #0
}
 801b8d2:	0018      	movs	r0, r3
 801b8d4:	46bd      	mov	sp, r7
 801b8d6:	b002      	add	sp, #8
 801b8d8:	bd80      	pop	{r7, pc}
	...

0801b8dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b8e0:	4914      	ldr	r1, [pc, #80]	@ (801b934 <MX_USB_DEVICE_Init+0x58>)
 801b8e2:	4b15      	ldr	r3, [pc, #84]	@ (801b938 <MX_USB_DEVICE_Init+0x5c>)
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	0018      	movs	r0, r3
 801b8e8:	f7fe fdec 	bl	801a4c4 <USBD_Init>
 801b8ec:	1e03      	subs	r3, r0, #0
 801b8ee:	d001      	beq.n	801b8f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b8f0:	f7ec f8fe 	bl	8007af0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b8f4:	4a11      	ldr	r2, [pc, #68]	@ (801b93c <MX_USB_DEVICE_Init+0x60>)
 801b8f6:	4b10      	ldr	r3, [pc, #64]	@ (801b938 <MX_USB_DEVICE_Init+0x5c>)
 801b8f8:	0011      	movs	r1, r2
 801b8fa:	0018      	movs	r0, r3
 801b8fc:	f7fe fe13 	bl	801a526 <USBD_RegisterClass>
 801b900:	1e03      	subs	r3, r0, #0
 801b902:	d001      	beq.n	801b908 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801b904:	f7ec f8f4 	bl	8007af0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b908:	4a0d      	ldr	r2, [pc, #52]	@ (801b940 <MX_USB_DEVICE_Init+0x64>)
 801b90a:	4b0b      	ldr	r3, [pc, #44]	@ (801b938 <MX_USB_DEVICE_Init+0x5c>)
 801b90c:	0011      	movs	r1, r2
 801b90e:	0018      	movs	r0, r3
 801b910:	f7fe fd28 	bl	801a364 <USBD_CDC_RegisterInterface>
 801b914:	1e03      	subs	r3, r0, #0
 801b916:	d001      	beq.n	801b91c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801b918:	f7ec f8ea 	bl	8007af0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b91c:	4b06      	ldr	r3, [pc, #24]	@ (801b938 <MX_USB_DEVICE_Init+0x5c>)
 801b91e:	0018      	movs	r0, r3
 801b920:	f7fe fe21 	bl	801a566 <USBD_Start>
 801b924:	1e03      	subs	r3, r0, #0
 801b926:	d001      	beq.n	801b92c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801b928:	f7ec f8e2 	bl	8007af0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b92c:	46c0      	nop			@ (mov r8, r8)
 801b92e:	46bd      	mov	sp, r7
 801b930:	bd80      	pop	{r7, pc}
 801b932:	46c0      	nop			@ (mov r8, r8)
 801b934:	20000200 	.word	0x20000200
 801b938:	2000251c 	.word	0x2000251c
 801b93c:	200000ec 	.word	0x200000ec
 801b940:	200001f0 	.word	0x200001f0

0801b944 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b948:	4907      	ldr	r1, [pc, #28]	@ (801b968 <CDC_Init_FS+0x24>)
 801b94a:	4b08      	ldr	r3, [pc, #32]	@ (801b96c <CDC_Init_FS+0x28>)
 801b94c:	2200      	movs	r2, #0
 801b94e:	0018      	movs	r0, r3
 801b950:	f7fe fd23 	bl	801a39a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b954:	4a06      	ldr	r2, [pc, #24]	@ (801b970 <CDC_Init_FS+0x2c>)
 801b956:	4b05      	ldr	r3, [pc, #20]	@ (801b96c <CDC_Init_FS+0x28>)
 801b958:	0011      	movs	r1, r2
 801b95a:	0018      	movs	r0, r3
 801b95c:	f7fe fd39 	bl	801a3d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b960:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b962:	0018      	movs	r0, r3
 801b964:	46bd      	mov	sp, r7
 801b966:	bd80      	pop	{r7, pc}
 801b968:	20002ca0 	.word	0x20002ca0
 801b96c:	2000251c 	.word	0x2000251c
 801b970:	200028a0 	.word	0x200028a0

0801b974 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b974:	b580      	push	{r7, lr}
 801b976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b978:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b97a:	0018      	movs	r0, r3
 801b97c:	46bd      	mov	sp, r7
 801b97e:	bd80      	pop	{r7, pc}

0801b980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b980:	b580      	push	{r7, lr}
 801b982:	b082      	sub	sp, #8
 801b984:	af00      	add	r7, sp, #0
 801b986:	6039      	str	r1, [r7, #0]
 801b988:	0011      	movs	r1, r2
 801b98a:	1dfb      	adds	r3, r7, #7
 801b98c:	1c02      	adds	r2, r0, #0
 801b98e:	701a      	strb	r2, [r3, #0]
 801b990:	1d3b      	adds	r3, r7, #4
 801b992:	1c0a      	adds	r2, r1, #0
 801b994:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b996:	1dfb      	adds	r3, r7, #7
 801b998:	781b      	ldrb	r3, [r3, #0]
 801b99a:	2b23      	cmp	r3, #35	@ 0x23
 801b99c:	d804      	bhi.n	801b9a8 <CDC_Control_FS+0x28>
 801b99e:	009a      	lsls	r2, r3, #2
 801b9a0:	4b04      	ldr	r3, [pc, #16]	@ (801b9b4 <CDC_Control_FS+0x34>)
 801b9a2:	18d3      	adds	r3, r2, r3
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b9a8:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801b9aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b9ac:	0018      	movs	r0, r3
 801b9ae:	46bd      	mov	sp, r7
 801b9b0:	b002      	add	sp, #8
 801b9b2:	bd80      	pop	{r7, pc}
 801b9b4:	08023c88 	.word	0x08023c88

0801b9b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b9b8:	b580      	push	{r7, lr}
 801b9ba:	b082      	sub	sp, #8
 801b9bc:	af00      	add	r7, sp, #0
 801b9be:	6078      	str	r0, [r7, #4]
 801b9c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801b9c2:	4b12      	ldr	r3, [pc, #72]	@ (801ba0c <CDC_Receive_FS+0x54>)
 801b9c4:	781b      	ldrb	r3, [r3, #0]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d013      	beq.n	801b9f2 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801b9ca:	683b      	ldr	r3, [r7, #0]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	b29a      	uxth	r2, r3
 801b9d0:	2301      	movs	r3, #1
 801b9d2:	425b      	negs	r3, r3
 801b9d4:	6879      	ldr	r1, [r7, #4]
 801b9d6:	480e      	ldr	r0, [pc, #56]	@ (801ba10 <CDC_Receive_FS+0x58>)
 801b9d8:	f7fa fa46 	bl	8015e68 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b9dc:	687a      	ldr	r2, [r7, #4]
 801b9de:	4b0d      	ldr	r3, [pc, #52]	@ (801ba14 <CDC_Receive_FS+0x5c>)
 801b9e0:	0011      	movs	r1, r2
 801b9e2:	0018      	movs	r0, r3
 801b9e4:	f7fe fcf5 	bl	801a3d2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b9e8:	4b0a      	ldr	r3, [pc, #40]	@ (801ba14 <CDC_Receive_FS+0x5c>)
 801b9ea:	0018      	movs	r0, r3
 801b9ec:	f7fe fd3c 	bl	801a468 <USBD_CDC_ReceivePacket>
 801b9f0:	e006      	b.n	801ba00 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801b9f2:	683b      	ldr	r3, [r7, #0]
 801b9f4:	681a      	ldr	r2, [r3, #0]
 801b9f6:	4b08      	ldr	r3, [pc, #32]	@ (801ba18 <CDC_Receive_FS+0x60>)
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	18d2      	adds	r2, r2, r3
 801b9fc:	4b06      	ldr	r3, [pc, #24]	@ (801ba18 <CDC_Receive_FS+0x60>)
 801b9fe:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801ba00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ba02:	0018      	movs	r0, r3
 801ba04:	46bd      	mov	sp, r7
 801ba06:	b002      	add	sp, #8
 801ba08:	bd80      	pop	{r7, pc}
 801ba0a:	46c0      	nop			@ (mov r8, r8)
 801ba0c:	200027e0 	.word	0x200027e0
 801ba10:	200027e4 	.word	0x200027e4
 801ba14:	2000251c 	.word	0x2000251c
 801ba18:	2000289c 	.word	0x2000289c

0801ba1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801ba1c:	b5b0      	push	{r4, r5, r7, lr}
 801ba1e:	b084      	sub	sp, #16
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	6078      	str	r0, [r7, #4]
 801ba24:	000a      	movs	r2, r1
 801ba26:	1cbb      	adds	r3, r7, #2
 801ba28:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801ba2a:	230f      	movs	r3, #15
 801ba2c:	18fb      	adds	r3, r7, r3
 801ba2e:	2200      	movs	r2, #0
 801ba30:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801ba32:	4a11      	ldr	r2, [pc, #68]	@ (801ba78 <CDC_Transmit_FS+0x5c>)
 801ba34:	23ae      	movs	r3, #174	@ 0xae
 801ba36:	009b      	lsls	r3, r3, #2
 801ba38:	58d3      	ldr	r3, [r2, r3]
 801ba3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ba3c:	68ba      	ldr	r2, [r7, #8]
 801ba3e:	2385      	movs	r3, #133	@ 0x85
 801ba40:	009b      	lsls	r3, r3, #2
 801ba42:	58d3      	ldr	r3, [r2, r3]
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d001      	beq.n	801ba4c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801ba48:	2301      	movs	r3, #1
 801ba4a:	e010      	b.n	801ba6e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801ba4c:	1cbb      	adds	r3, r7, #2
 801ba4e:	881a      	ldrh	r2, [r3, #0]
 801ba50:	6879      	ldr	r1, [r7, #4]
 801ba52:	4b09      	ldr	r3, [pc, #36]	@ (801ba78 <CDC_Transmit_FS+0x5c>)
 801ba54:	0018      	movs	r0, r3
 801ba56:	f7fe fca0 	bl	801a39a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801ba5a:	250f      	movs	r5, #15
 801ba5c:	197c      	adds	r4, r7, r5
 801ba5e:	4b06      	ldr	r3, [pc, #24]	@ (801ba78 <CDC_Transmit_FS+0x5c>)
 801ba60:	0018      	movs	r0, r3
 801ba62:	f7fe fcca 	bl	801a3fa <USBD_CDC_TransmitPacket>
 801ba66:	0003      	movs	r3, r0
 801ba68:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801ba6a:	197b      	adds	r3, r7, r5
 801ba6c:	781b      	ldrb	r3, [r3, #0]
}
 801ba6e:	0018      	movs	r0, r3
 801ba70:	46bd      	mov	sp, r7
 801ba72:	b004      	add	sp, #16
 801ba74:	bdb0      	pop	{r4, r5, r7, pc}
 801ba76:	46c0      	nop			@ (mov r8, r8)
 801ba78:	2000251c 	.word	0x2000251c

0801ba7c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	af00      	add	r7, sp, #0
  ESPProg = true;
 801ba80:	4b02      	ldr	r3, [pc, #8]	@ (801ba8c <EnableESPProg+0x10>)
 801ba82:	2201      	movs	r2, #1
 801ba84:	701a      	strb	r2, [r3, #0]
}
 801ba86:	46c0      	nop			@ (mov r8, r8)
 801ba88:	46bd      	mov	sp, r7
 801ba8a:	bd80      	pop	{r7, pc}
 801ba8c:	200027e0 	.word	0x200027e0

0801ba90 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801ba90:	b580      	push	{r7, lr}
 801ba92:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801ba94:	4b01      	ldr	r3, [pc, #4]	@ (801ba9c <GetUsbRxPointer+0xc>)
}
 801ba96:	0018      	movs	r0, r3
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	bd80      	pop	{r7, pc}
 801ba9c:	200028a0 	.word	0x200028a0

0801baa0 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801baa0:	b580      	push	{r7, lr}
 801baa2:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801baa4:	4b07      	ldr	r3, [pc, #28]	@ (801bac4 <ResetUsbRxDataSize+0x24>)
 801baa6:	2200      	movs	r2, #0
 801baa8:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801baaa:	4a07      	ldr	r2, [pc, #28]	@ (801bac8 <ResetUsbRxDataSize+0x28>)
 801baac:	4b07      	ldr	r3, [pc, #28]	@ (801bacc <ResetUsbRxDataSize+0x2c>)
 801baae:	0011      	movs	r1, r2
 801bab0:	0018      	movs	r0, r3
 801bab2:	f7fe fc8e 	bl	801a3d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bab6:	4b05      	ldr	r3, [pc, #20]	@ (801bacc <ResetUsbRxDataSize+0x2c>)
 801bab8:	0018      	movs	r0, r3
 801baba:	f7fe fcd5 	bl	801a468 <USBD_CDC_ReceivePacket>
}
 801babe:	46c0      	nop			@ (mov r8, r8)
 801bac0:	46bd      	mov	sp, r7
 801bac2:	bd80      	pop	{r7, pc}
 801bac4:	2000289c 	.word	0x2000289c
 801bac8:	200028a0 	.word	0x200028a0
 801bacc:	2000251c 	.word	0x2000251c

0801bad0 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801bad4:	4b02      	ldr	r3, [pc, #8]	@ (801bae0 <GetUsbRxDataSize+0x10>)
 801bad6:	681b      	ldr	r3, [r3, #0]
}
 801bad8:	0018      	movs	r0, r3
 801bada:	46bd      	mov	sp, r7
 801badc:	bd80      	pop	{r7, pc}
 801bade:	46c0      	nop			@ (mov r8, r8)
 801bae0:	2000289c 	.word	0x2000289c

0801bae4 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b082      	sub	sp, #8
 801bae8:	af00      	add	r7, sp, #0
 801baea:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801baec:	687a      	ldr	r2, [r7, #4]
 801baee:	4b07      	ldr	r3, [pc, #28]	@ (801bb0c <GetUsbRxNextChunk+0x28>)
 801baf0:	18d2      	adds	r2, r2, r3
 801baf2:	4b07      	ldr	r3, [pc, #28]	@ (801bb10 <GetUsbRxNextChunk+0x2c>)
 801baf4:	0011      	movs	r1, r2
 801baf6:	0018      	movs	r0, r3
 801baf8:	f7fe fc6b 	bl	801a3d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bafc:	4b04      	ldr	r3, [pc, #16]	@ (801bb10 <GetUsbRxNextChunk+0x2c>)
 801bafe:	0018      	movs	r0, r3
 801bb00:	f7fe fcb2 	bl	801a468 <USBD_CDC_ReceivePacket>
}
 801bb04:	46c0      	nop			@ (mov r8, r8)
 801bb06:	46bd      	mov	sp, r7
 801bb08:	b002      	add	sp, #8
 801bb0a:	bd80      	pop	{r7, pc}
 801bb0c:	200028a0 	.word	0x200028a0
 801bb10:	2000251c 	.word	0x2000251c

0801bb14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb14:	b580      	push	{r7, lr}
 801bb16:	b082      	sub	sp, #8
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	0002      	movs	r2, r0
 801bb1c:	6039      	str	r1, [r7, #0]
 801bb1e:	1dfb      	adds	r3, r7, #7
 801bb20:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801bb22:	683b      	ldr	r3, [r7, #0]
 801bb24:	2212      	movs	r2, #18
 801bb26:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801bb28:	4b02      	ldr	r3, [pc, #8]	@ (801bb34 <USBD_FS_DeviceDescriptor+0x20>)
}
 801bb2a:	0018      	movs	r0, r3
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	b002      	add	sp, #8
 801bb30:	bd80      	pop	{r7, pc}
 801bb32:	46c0      	nop			@ (mov r8, r8)
 801bb34:	2000021c 	.word	0x2000021c

0801bb38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b082      	sub	sp, #8
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	0002      	movs	r2, r0
 801bb40:	6039      	str	r1, [r7, #0]
 801bb42:	1dfb      	adds	r3, r7, #7
 801bb44:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801bb46:	683b      	ldr	r3, [r7, #0]
 801bb48:	2204      	movs	r2, #4
 801bb4a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801bb4c:	4b02      	ldr	r3, [pc, #8]	@ (801bb58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801bb4e:	0018      	movs	r0, r3
 801bb50:	46bd      	mov	sp, r7
 801bb52:	b002      	add	sp, #8
 801bb54:	bd80      	pop	{r7, pc}
 801bb56:	46c0      	nop			@ (mov r8, r8)
 801bb58:	20000230 	.word	0x20000230

0801bb5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b082      	sub	sp, #8
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	0002      	movs	r2, r0
 801bb64:	6039      	str	r1, [r7, #0]
 801bb66:	1dfb      	adds	r3, r7, #7
 801bb68:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801bb6a:	1dfb      	adds	r3, r7, #7
 801bb6c:	781b      	ldrb	r3, [r3, #0]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d106      	bne.n	801bb80 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bb72:	683a      	ldr	r2, [r7, #0]
 801bb74:	4908      	ldr	r1, [pc, #32]	@ (801bb98 <USBD_FS_ProductStrDescriptor+0x3c>)
 801bb76:	4b09      	ldr	r3, [pc, #36]	@ (801bb9c <USBD_FS_ProductStrDescriptor+0x40>)
 801bb78:	0018      	movs	r0, r3
 801bb7a:	f7ff fdb1 	bl	801b6e0 <USBD_GetString>
 801bb7e:	e005      	b.n	801bb8c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bb80:	683a      	ldr	r2, [r7, #0]
 801bb82:	4905      	ldr	r1, [pc, #20]	@ (801bb98 <USBD_FS_ProductStrDescriptor+0x3c>)
 801bb84:	4b05      	ldr	r3, [pc, #20]	@ (801bb9c <USBD_FS_ProductStrDescriptor+0x40>)
 801bb86:	0018      	movs	r0, r3
 801bb88:	f7ff fdaa 	bl	801b6e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bb8c:	4b02      	ldr	r3, [pc, #8]	@ (801bb98 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801bb8e:	0018      	movs	r0, r3
 801bb90:	46bd      	mov	sp, r7
 801bb92:	b002      	add	sp, #8
 801bb94:	bd80      	pop	{r7, pc}
 801bb96:	46c0      	nop			@ (mov r8, r8)
 801bb98:	200030a0 	.word	0x200030a0
 801bb9c:	08023734 	.word	0x08023734

0801bba0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b082      	sub	sp, #8
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	0002      	movs	r2, r0
 801bba8:	6039      	str	r1, [r7, #0]
 801bbaa:	1dfb      	adds	r3, r7, #7
 801bbac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801bbae:	683a      	ldr	r2, [r7, #0]
 801bbb0:	4904      	ldr	r1, [pc, #16]	@ (801bbc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801bbb2:	4b05      	ldr	r3, [pc, #20]	@ (801bbc8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801bbb4:	0018      	movs	r0, r3
 801bbb6:	f7ff fd93 	bl	801b6e0 <USBD_GetString>
  return USBD_StrDesc;
 801bbba:	4b02      	ldr	r3, [pc, #8]	@ (801bbc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801bbbc:	0018      	movs	r0, r3
 801bbbe:	46bd      	mov	sp, r7
 801bbc0:	b002      	add	sp, #8
 801bbc2:	bd80      	pop	{r7, pc}
 801bbc4:	200030a0 	.word	0x200030a0
 801bbc8:	0802374c 	.word	0x0802374c

0801bbcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b082      	sub	sp, #8
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	0002      	movs	r2, r0
 801bbd4:	6039      	str	r1, [r7, #0]
 801bbd6:	1dfb      	adds	r3, r7, #7
 801bbd8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801bbda:	683b      	ldr	r3, [r7, #0]
 801bbdc:	221a      	movs	r2, #26
 801bbde:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801bbe0:	f000 f84c 	bl	801bc7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801bbe4:	4b02      	ldr	r3, [pc, #8]	@ (801bbf0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801bbe6:	0018      	movs	r0, r3
 801bbe8:	46bd      	mov	sp, r7
 801bbea:	b002      	add	sp, #8
 801bbec:	bd80      	pop	{r7, pc}
 801bbee:	46c0      	nop			@ (mov r8, r8)
 801bbf0:	20000234 	.word	0x20000234

0801bbf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	0002      	movs	r2, r0
 801bbfc:	6039      	str	r1, [r7, #0]
 801bbfe:	1dfb      	adds	r3, r7, #7
 801bc00:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801bc02:	1dfb      	adds	r3, r7, #7
 801bc04:	781b      	ldrb	r3, [r3, #0]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d106      	bne.n	801bc18 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bc0a:	683a      	ldr	r2, [r7, #0]
 801bc0c:	4908      	ldr	r1, [pc, #32]	@ (801bc30 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801bc0e:	4b09      	ldr	r3, [pc, #36]	@ (801bc34 <USBD_FS_ConfigStrDescriptor+0x40>)
 801bc10:	0018      	movs	r0, r3
 801bc12:	f7ff fd65 	bl	801b6e0 <USBD_GetString>
 801bc16:	e005      	b.n	801bc24 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bc18:	683a      	ldr	r2, [r7, #0]
 801bc1a:	4905      	ldr	r1, [pc, #20]	@ (801bc30 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801bc1c:	4b05      	ldr	r3, [pc, #20]	@ (801bc34 <USBD_FS_ConfigStrDescriptor+0x40>)
 801bc1e:	0018      	movs	r0, r3
 801bc20:	f7ff fd5e 	bl	801b6e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bc24:	4b02      	ldr	r3, [pc, #8]	@ (801bc30 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801bc26:	0018      	movs	r0, r3
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	b002      	add	sp, #8
 801bc2c:	bd80      	pop	{r7, pc}
 801bc2e:	46c0      	nop			@ (mov r8, r8)
 801bc30:	200030a0 	.word	0x200030a0
 801bc34:	08023760 	.word	0x08023760

0801bc38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b082      	sub	sp, #8
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	0002      	movs	r2, r0
 801bc40:	6039      	str	r1, [r7, #0]
 801bc42:	1dfb      	adds	r3, r7, #7
 801bc44:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801bc46:	1dfb      	adds	r3, r7, #7
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d106      	bne.n	801bc5c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bc4e:	683a      	ldr	r2, [r7, #0]
 801bc50:	4908      	ldr	r1, [pc, #32]	@ (801bc74 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801bc52:	4b09      	ldr	r3, [pc, #36]	@ (801bc78 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801bc54:	0018      	movs	r0, r3
 801bc56:	f7ff fd43 	bl	801b6e0 <USBD_GetString>
 801bc5a:	e005      	b.n	801bc68 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bc5c:	683a      	ldr	r2, [r7, #0]
 801bc5e:	4905      	ldr	r1, [pc, #20]	@ (801bc74 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801bc60:	4b05      	ldr	r3, [pc, #20]	@ (801bc78 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801bc62:	0018      	movs	r0, r3
 801bc64:	f7ff fd3c 	bl	801b6e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bc68:	4b02      	ldr	r3, [pc, #8]	@ (801bc74 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801bc6a:	0018      	movs	r0, r3
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	b002      	add	sp, #8
 801bc70:	bd80      	pop	{r7, pc}
 801bc72:	46c0      	nop			@ (mov r8, r8)
 801bc74:	200030a0 	.word	0x200030a0
 801bc78:	0802376c 	.word	0x0802376c

0801bc7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b084      	sub	sp, #16
 801bc80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801bc82:	4b10      	ldr	r3, [pc, #64]	@ (801bcc4 <Get_SerialNum+0x48>)
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801bc88:	4b0f      	ldr	r3, [pc, #60]	@ (801bcc8 <Get_SerialNum+0x4c>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801bc8e:	4b0f      	ldr	r3, [pc, #60]	@ (801bccc <Get_SerialNum+0x50>)
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801bc94:	68fa      	ldr	r2, [r7, #12]
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	18d3      	adds	r3, r2, r3
 801bc9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d00b      	beq.n	801bcba <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801bca2:	490b      	ldr	r1, [pc, #44]	@ (801bcd0 <Get_SerialNum+0x54>)
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	2208      	movs	r2, #8
 801bca8:	0018      	movs	r0, r3
 801bcaa:	f000 f815 	bl	801bcd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801bcae:	4909      	ldr	r1, [pc, #36]	@ (801bcd4 <Get_SerialNum+0x58>)
 801bcb0:	68bb      	ldr	r3, [r7, #8]
 801bcb2:	2204      	movs	r2, #4
 801bcb4:	0018      	movs	r0, r3
 801bcb6:	f000 f80f 	bl	801bcd8 <IntToUnicode>
  }
}
 801bcba:	46c0      	nop			@ (mov r8, r8)
 801bcbc:	46bd      	mov	sp, r7
 801bcbe:	b004      	add	sp, #16
 801bcc0:	bd80      	pop	{r7, pc}
 801bcc2:	46c0      	nop			@ (mov r8, r8)
 801bcc4:	1ff80050 	.word	0x1ff80050
 801bcc8:	1ff80054 	.word	0x1ff80054
 801bccc:	1ff80058 	.word	0x1ff80058
 801bcd0:	20000236 	.word	0x20000236
 801bcd4:	20000246 	.word	0x20000246

0801bcd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b086      	sub	sp, #24
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	60f8      	str	r0, [r7, #12]
 801bce0:	60b9      	str	r1, [r7, #8]
 801bce2:	1dfb      	adds	r3, r7, #7
 801bce4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801bce6:	2117      	movs	r1, #23
 801bce8:	187b      	adds	r3, r7, r1
 801bcea:	2200      	movs	r2, #0
 801bcec:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801bcee:	187b      	adds	r3, r7, r1
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	701a      	strb	r2, [r3, #0]
 801bcf4:	e02f      	b.n	801bd56 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801bcf6:	68fb      	ldr	r3, [r7, #12]
 801bcf8:	0f1b      	lsrs	r3, r3, #28
 801bcfa:	2b09      	cmp	r3, #9
 801bcfc:	d80d      	bhi.n	801bd1a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	0f1b      	lsrs	r3, r3, #28
 801bd02:	b2da      	uxtb	r2, r3
 801bd04:	2317      	movs	r3, #23
 801bd06:	18fb      	adds	r3, r7, r3
 801bd08:	781b      	ldrb	r3, [r3, #0]
 801bd0a:	005b      	lsls	r3, r3, #1
 801bd0c:	0019      	movs	r1, r3
 801bd0e:	68bb      	ldr	r3, [r7, #8]
 801bd10:	185b      	adds	r3, r3, r1
 801bd12:	3230      	adds	r2, #48	@ 0x30
 801bd14:	b2d2      	uxtb	r2, r2
 801bd16:	701a      	strb	r2, [r3, #0]
 801bd18:	e00c      	b.n	801bd34 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	0f1b      	lsrs	r3, r3, #28
 801bd1e:	b2da      	uxtb	r2, r3
 801bd20:	2317      	movs	r3, #23
 801bd22:	18fb      	adds	r3, r7, r3
 801bd24:	781b      	ldrb	r3, [r3, #0]
 801bd26:	005b      	lsls	r3, r3, #1
 801bd28:	0019      	movs	r1, r3
 801bd2a:	68bb      	ldr	r3, [r7, #8]
 801bd2c:	185b      	adds	r3, r3, r1
 801bd2e:	3237      	adds	r2, #55	@ 0x37
 801bd30:	b2d2      	uxtb	r2, r2
 801bd32:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	011b      	lsls	r3, r3, #4
 801bd38:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801bd3a:	2117      	movs	r1, #23
 801bd3c:	187b      	adds	r3, r7, r1
 801bd3e:	781b      	ldrb	r3, [r3, #0]
 801bd40:	005b      	lsls	r3, r3, #1
 801bd42:	3301      	adds	r3, #1
 801bd44:	68ba      	ldr	r2, [r7, #8]
 801bd46:	18d3      	adds	r3, r2, r3
 801bd48:	2200      	movs	r2, #0
 801bd4a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801bd4c:	187b      	adds	r3, r7, r1
 801bd4e:	781a      	ldrb	r2, [r3, #0]
 801bd50:	187b      	adds	r3, r7, r1
 801bd52:	3201      	adds	r2, #1
 801bd54:	701a      	strb	r2, [r3, #0]
 801bd56:	2317      	movs	r3, #23
 801bd58:	18fa      	adds	r2, r7, r3
 801bd5a:	1dfb      	adds	r3, r7, #7
 801bd5c:	7812      	ldrb	r2, [r2, #0]
 801bd5e:	781b      	ldrb	r3, [r3, #0]
 801bd60:	429a      	cmp	r2, r3
 801bd62:	d3c8      	bcc.n	801bcf6 <IntToUnicode+0x1e>
  }
}
 801bd64:	46c0      	nop			@ (mov r8, r8)
 801bd66:	46c0      	nop			@ (mov r8, r8)
 801bd68:	46bd      	mov	sp, r7
 801bd6a:	b006      	add	sp, #24
 801bd6c:	bd80      	pop	{r7, pc}
	...

0801bd70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b082      	sub	sp, #8
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	4a0a      	ldr	r2, [pc, #40]	@ (801bda8 <HAL_PCD_MspInit+0x38>)
 801bd7e:	4293      	cmp	r3, r2
 801bd80:	d10e      	bne.n	801bda0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801bd82:	4b0a      	ldr	r3, [pc, #40]	@ (801bdac <HAL_PCD_MspInit+0x3c>)
 801bd84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bd86:	4b09      	ldr	r3, [pc, #36]	@ (801bdac <HAL_PCD_MspInit+0x3c>)
 801bd88:	2180      	movs	r1, #128	@ 0x80
 801bd8a:	0409      	lsls	r1, r1, #16
 801bd8c:	430a      	orrs	r2, r1
 801bd8e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801bd90:	2200      	movs	r2, #0
 801bd92:	2100      	movs	r1, #0
 801bd94:	201f      	movs	r0, #31
 801bd96:	f7f2 fb3d 	bl	800e414 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801bd9a:	201f      	movs	r0, #31
 801bd9c:	f7f2 fb4f 	bl	800e43e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801bda0:	46c0      	nop			@ (mov r8, r8)
 801bda2:	46bd      	mov	sp, r7
 801bda4:	b002      	add	sp, #8
 801bda6:	bd80      	pop	{r7, pc}
 801bda8:	40005c00 	.word	0x40005c00
 801bdac:	40021000 	.word	0x40021000

0801bdb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b082      	sub	sp, #8
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bdb8:	687a      	ldr	r2, [r7, #4]
 801bdba:	23bc      	movs	r3, #188	@ 0xbc
 801bdbc:	009b      	lsls	r3, r3, #2
 801bdbe:	58d2      	ldr	r2, [r2, r3]
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	21ac      	movs	r1, #172	@ 0xac
 801bdc4:	0089      	lsls	r1, r1, #2
 801bdc6:	468c      	mov	ip, r1
 801bdc8:	4463      	add	r3, ip
 801bdca:	0019      	movs	r1, r3
 801bdcc:	0010      	movs	r0, r2
 801bdce:	f7fe fc1d 	bl	801a60c <USBD_LL_SetupStage>
}
 801bdd2:	46c0      	nop			@ (mov r8, r8)
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	b002      	add	sp, #8
 801bdd8:	bd80      	pop	{r7, pc}

0801bdda <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdda:	b590      	push	{r4, r7, lr}
 801bddc:	b083      	sub	sp, #12
 801bdde:	af00      	add	r7, sp, #0
 801bde0:	6078      	str	r0, [r7, #4]
 801bde2:	000a      	movs	r2, r1
 801bde4:	1cfb      	adds	r3, r7, #3
 801bde6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bde8:	687a      	ldr	r2, [r7, #4]
 801bdea:	23bc      	movs	r3, #188	@ 0xbc
 801bdec:	009b      	lsls	r3, r3, #2
 801bdee:	58d4      	ldr	r4, [r2, r3]
 801bdf0:	1cfb      	adds	r3, r7, #3
 801bdf2:	781a      	ldrb	r2, [r3, #0]
 801bdf4:	6878      	ldr	r0, [r7, #4]
 801bdf6:	23be      	movs	r3, #190	@ 0xbe
 801bdf8:	0059      	lsls	r1, r3, #1
 801bdfa:	0013      	movs	r3, r2
 801bdfc:	009b      	lsls	r3, r3, #2
 801bdfe:	189b      	adds	r3, r3, r2
 801be00:	00db      	lsls	r3, r3, #3
 801be02:	18c3      	adds	r3, r0, r3
 801be04:	185b      	adds	r3, r3, r1
 801be06:	681a      	ldr	r2, [r3, #0]
 801be08:	1cfb      	adds	r3, r7, #3
 801be0a:	781b      	ldrb	r3, [r3, #0]
 801be0c:	0019      	movs	r1, r3
 801be0e:	0020      	movs	r0, r4
 801be10:	f7fe fc5a 	bl	801a6c8 <USBD_LL_DataOutStage>
}
 801be14:	46c0      	nop			@ (mov r8, r8)
 801be16:	46bd      	mov	sp, r7
 801be18:	b003      	add	sp, #12
 801be1a:	bd90      	pop	{r4, r7, pc}

0801be1c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be1c:	b580      	push	{r7, lr}
 801be1e:	b082      	sub	sp, #8
 801be20:	af00      	add	r7, sp, #0
 801be22:	6078      	str	r0, [r7, #4]
 801be24:	000a      	movs	r2, r1
 801be26:	1cfb      	adds	r3, r7, #3
 801be28:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801be2a:	687a      	ldr	r2, [r7, #4]
 801be2c:	23bc      	movs	r3, #188	@ 0xbc
 801be2e:	009b      	lsls	r3, r3, #2
 801be30:	58d0      	ldr	r0, [r2, r3]
 801be32:	1cfb      	adds	r3, r7, #3
 801be34:	781a      	ldrb	r2, [r3, #0]
 801be36:	6879      	ldr	r1, [r7, #4]
 801be38:	0013      	movs	r3, r2
 801be3a:	009b      	lsls	r3, r3, #2
 801be3c:	189b      	adds	r3, r3, r2
 801be3e:	00db      	lsls	r3, r3, #3
 801be40:	18cb      	adds	r3, r1, r3
 801be42:	333c      	adds	r3, #60	@ 0x3c
 801be44:	681a      	ldr	r2, [r3, #0]
 801be46:	1cfb      	adds	r3, r7, #3
 801be48:	781b      	ldrb	r3, [r3, #0]
 801be4a:	0019      	movs	r1, r3
 801be4c:	f7fe fcbe 	bl	801a7cc <USBD_LL_DataInStage>
}
 801be50:	46c0      	nop			@ (mov r8, r8)
 801be52:	46bd      	mov	sp, r7
 801be54:	b002      	add	sp, #8
 801be56:	bd80      	pop	{r7, pc}

0801be58 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be58:	b580      	push	{r7, lr}
 801be5a:	b082      	sub	sp, #8
 801be5c:	af00      	add	r7, sp, #0
 801be5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801be60:	687a      	ldr	r2, [r7, #4]
 801be62:	23bc      	movs	r3, #188	@ 0xbc
 801be64:	009b      	lsls	r3, r3, #2
 801be66:	58d3      	ldr	r3, [r2, r3]
 801be68:	0018      	movs	r0, r3
 801be6a:	f7fe fdf5 	bl	801aa58 <USBD_LL_SOF>
}
 801be6e:	46c0      	nop			@ (mov r8, r8)
 801be70:	46bd      	mov	sp, r7
 801be72:	b002      	add	sp, #8
 801be74:	bd80      	pop	{r7, pc}

0801be76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be76:	b580      	push	{r7, lr}
 801be78:	b084      	sub	sp, #16
 801be7a:	af00      	add	r7, sp, #0
 801be7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801be7e:	230f      	movs	r3, #15
 801be80:	18fb      	adds	r3, r7, r3
 801be82:	2201      	movs	r2, #1
 801be84:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	689b      	ldr	r3, [r3, #8]
 801be8a:	2b02      	cmp	r3, #2
 801be8c:	d001      	beq.n	801be92 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801be8e:	f7eb fe2f 	bl	8007af0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801be92:	687a      	ldr	r2, [r7, #4]
 801be94:	23bc      	movs	r3, #188	@ 0xbc
 801be96:	009b      	lsls	r3, r3, #2
 801be98:	58d2      	ldr	r2, [r2, r3]
 801be9a:	230f      	movs	r3, #15
 801be9c:	18fb      	adds	r3, r7, r3
 801be9e:	781b      	ldrb	r3, [r3, #0]
 801bea0:	0019      	movs	r1, r3
 801bea2:	0010      	movs	r0, r2
 801bea4:	f7fe fd97 	bl	801a9d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bea8:	687a      	ldr	r2, [r7, #4]
 801beaa:	23bc      	movs	r3, #188	@ 0xbc
 801beac:	009b      	lsls	r3, r3, #2
 801beae:	58d3      	ldr	r3, [r2, r3]
 801beb0:	0018      	movs	r0, r3
 801beb2:	f7fe fd48 	bl	801a946 <USBD_LL_Reset>
}
 801beb6:	46c0      	nop			@ (mov r8, r8)
 801beb8:	46bd      	mov	sp, r7
 801beba:	b004      	add	sp, #16
 801bebc:	bd80      	pop	{r7, pc}
	...

0801bec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bec0:	b580      	push	{r7, lr}
 801bec2:	b082      	sub	sp, #8
 801bec4:	af00      	add	r7, sp, #0
 801bec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bec8:	687a      	ldr	r2, [r7, #4]
 801beca:	23bc      	movs	r3, #188	@ 0xbc
 801becc:	009b      	lsls	r3, r3, #2
 801bece:	58d3      	ldr	r3, [r2, r3]
 801bed0:	0018      	movs	r0, r3
 801bed2:	f7fe fd91 	bl	801a9f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	699b      	ldr	r3, [r3, #24]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d005      	beq.n	801beea <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bede:	4b05      	ldr	r3, [pc, #20]	@ (801bef4 <HAL_PCD_SuspendCallback+0x34>)
 801bee0:	691a      	ldr	r2, [r3, #16]
 801bee2:	4b04      	ldr	r3, [pc, #16]	@ (801bef4 <HAL_PCD_SuspendCallback+0x34>)
 801bee4:	2106      	movs	r1, #6
 801bee6:	430a      	orrs	r2, r1
 801bee8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801beea:	46c0      	nop			@ (mov r8, r8)
 801beec:	46bd      	mov	sp, r7
 801beee:	b002      	add	sp, #8
 801bef0:	bd80      	pop	{r7, pc}
 801bef2:	46c0      	nop			@ (mov r8, r8)
 801bef4:	e000ed00 	.word	0xe000ed00

0801bef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b082      	sub	sp, #8
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	699b      	ldr	r3, [r3, #24]
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d007      	beq.n	801bf18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bf08:	4b09      	ldr	r3, [pc, #36]	@ (801bf30 <HAL_PCD_ResumeCallback+0x38>)
 801bf0a:	691a      	ldr	r2, [r3, #16]
 801bf0c:	4b08      	ldr	r3, [pc, #32]	@ (801bf30 <HAL_PCD_ResumeCallback+0x38>)
 801bf0e:	2106      	movs	r1, #6
 801bf10:	438a      	bics	r2, r1
 801bf12:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801bf14:	f000 fa44 	bl	801c3a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801bf18:	687a      	ldr	r2, [r7, #4]
 801bf1a:	23bc      	movs	r3, #188	@ 0xbc
 801bf1c:	009b      	lsls	r3, r3, #2
 801bf1e:	58d3      	ldr	r3, [r2, r3]
 801bf20:	0018      	movs	r0, r3
 801bf22:	f7fe fd81 	bl	801aa28 <USBD_LL_Resume>
}
 801bf26:	46c0      	nop			@ (mov r8, r8)
 801bf28:	46bd      	mov	sp, r7
 801bf2a:	b002      	add	sp, #8
 801bf2c:	bd80      	pop	{r7, pc}
 801bf2e:	46c0      	nop			@ (mov r8, r8)
 801bf30:	e000ed00 	.word	0xe000ed00

0801bf34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801bf34:	b580      	push	{r7, lr}
 801bf36:	b082      	sub	sp, #8
 801bf38:	af00      	add	r7, sp, #0
 801bf3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801bf3c:	4a2d      	ldr	r2, [pc, #180]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf3e:	23bc      	movs	r3, #188	@ 0xbc
 801bf40:	009b      	lsls	r3, r3, #2
 801bf42:	6879      	ldr	r1, [r7, #4]
 801bf44:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801bf46:	687a      	ldr	r2, [r7, #4]
 801bf48:	23b0      	movs	r3, #176	@ 0xb0
 801bf4a:	009b      	lsls	r3, r3, #2
 801bf4c:	4929      	ldr	r1, [pc, #164]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf4e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801bf50:	4b28      	ldr	r3, [pc, #160]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf52:	4a29      	ldr	r2, [pc, #164]	@ (801bff8 <USBD_LL_Init+0xc4>)
 801bf54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801bf56:	4b27      	ldr	r3, [pc, #156]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf58:	2208      	movs	r2, #8
 801bf5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801bf5c:	4b25      	ldr	r3, [pc, #148]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf5e:	2202      	movs	r2, #2
 801bf60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801bf62:	4b24      	ldr	r3, [pc, #144]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf64:	2202      	movs	r2, #2
 801bf66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801bf68:	4b22      	ldr	r3, [pc, #136]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf6a:	2200      	movs	r2, #0
 801bf6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801bf6e:	4b21      	ldr	r3, [pc, #132]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf70:	2200      	movs	r2, #0
 801bf72:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801bf74:	4b1f      	ldr	r3, [pc, #124]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf76:	2200      	movs	r2, #0
 801bf78:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801bf7a:	4b1e      	ldr	r3, [pc, #120]	@ (801bff4 <USBD_LL_Init+0xc0>)
 801bf7c:	0018      	movs	r0, r3
 801bf7e:	f7f5 ffd3 	bl	8011f28 <HAL_PCD_Init>
 801bf82:	1e03      	subs	r3, r0, #0
 801bf84:	d001      	beq.n	801bf8a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801bf86:	f7eb fdb3 	bl	8007af0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801bf8a:	687a      	ldr	r2, [r7, #4]
 801bf8c:	23b0      	movs	r3, #176	@ 0xb0
 801bf8e:	009b      	lsls	r3, r3, #2
 801bf90:	58d0      	ldr	r0, [r2, r3]
 801bf92:	2318      	movs	r3, #24
 801bf94:	2200      	movs	r2, #0
 801bf96:	2100      	movs	r1, #0
 801bf98:	f7f7 fd94 	bl	8013ac4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	23b0      	movs	r3, #176	@ 0xb0
 801bfa0:	009b      	lsls	r3, r3, #2
 801bfa2:	58d0      	ldr	r0, [r2, r3]
 801bfa4:	2358      	movs	r3, #88	@ 0x58
 801bfa6:	2200      	movs	r2, #0
 801bfa8:	2180      	movs	r1, #128	@ 0x80
 801bfaa:	f7f7 fd8b 	bl	8013ac4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801bfae:	687a      	ldr	r2, [r7, #4]
 801bfb0:	23b0      	movs	r3, #176	@ 0xb0
 801bfb2:	009b      	lsls	r3, r3, #2
 801bfb4:	58d0      	ldr	r0, [r2, r3]
 801bfb6:	23c0      	movs	r3, #192	@ 0xc0
 801bfb8:	2200      	movs	r2, #0
 801bfba:	2181      	movs	r1, #129	@ 0x81
 801bfbc:	f7f7 fd82 	bl	8013ac4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801bfc0:	687a      	ldr	r2, [r7, #4]
 801bfc2:	23b0      	movs	r3, #176	@ 0xb0
 801bfc4:	009b      	lsls	r3, r3, #2
 801bfc6:	58d0      	ldr	r0, [r2, r3]
 801bfc8:	2388      	movs	r3, #136	@ 0x88
 801bfca:	005b      	lsls	r3, r3, #1
 801bfcc:	2200      	movs	r2, #0
 801bfce:	2101      	movs	r1, #1
 801bfd0:	f7f7 fd78 	bl	8013ac4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801bfd4:	687a      	ldr	r2, [r7, #4]
 801bfd6:	23b0      	movs	r3, #176	@ 0xb0
 801bfd8:	009b      	lsls	r3, r3, #2
 801bfda:	58d0      	ldr	r0, [r2, r3]
 801bfdc:	2380      	movs	r3, #128	@ 0x80
 801bfde:	005b      	lsls	r3, r3, #1
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	2182      	movs	r1, #130	@ 0x82
 801bfe4:	f7f7 fd6e 	bl	8013ac4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801bfe8:	2300      	movs	r3, #0
}
 801bfea:	0018      	movs	r0, r3
 801bfec:	46bd      	mov	sp, r7
 801bfee:	b002      	add	sp, #8
 801bff0:	bd80      	pop	{r7, pc}
 801bff2:	46c0      	nop			@ (mov r8, r8)
 801bff4:	200032a0 	.word	0x200032a0
 801bff8:	40005c00 	.word	0x40005c00

0801bffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801bffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bffe:	b085      	sub	sp, #20
 801c000:	af00      	add	r7, sp, #0
 801c002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c004:	210f      	movs	r1, #15
 801c006:	187b      	adds	r3, r7, r1
 801c008:	2200      	movs	r2, #0
 801c00a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c00c:	260e      	movs	r6, #14
 801c00e:	19bb      	adds	r3, r7, r6
 801c010:	2200      	movs	r2, #0
 801c012:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c014:	687a      	ldr	r2, [r7, #4]
 801c016:	23b0      	movs	r3, #176	@ 0xb0
 801c018:	009b      	lsls	r3, r3, #2
 801c01a:	58d3      	ldr	r3, [r2, r3]
 801c01c:	000d      	movs	r5, r1
 801c01e:	187c      	adds	r4, r7, r1
 801c020:	0018      	movs	r0, r3
 801c022:	f7f6 f881 	bl	8012128 <HAL_PCD_Start>
 801c026:	0003      	movs	r3, r0
 801c028:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c02a:	19bc      	adds	r4, r7, r6
 801c02c:	197b      	adds	r3, r7, r5
 801c02e:	781b      	ldrb	r3, [r3, #0]
 801c030:	0018      	movs	r0, r3
 801c032:	f000 f9bc 	bl	801c3ae <USBD_Get_USB_Status>
 801c036:	0003      	movs	r3, r0
 801c038:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c03a:	19bb      	adds	r3, r7, r6
 801c03c:	781b      	ldrb	r3, [r3, #0]
}
 801c03e:	0018      	movs	r0, r3
 801c040:	46bd      	mov	sp, r7
 801c042:	b005      	add	sp, #20
 801c044:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c046:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c048:	b085      	sub	sp, #20
 801c04a:	af00      	add	r7, sp, #0
 801c04c:	6078      	str	r0, [r7, #4]
 801c04e:	000c      	movs	r4, r1
 801c050:	0010      	movs	r0, r2
 801c052:	0019      	movs	r1, r3
 801c054:	1cfb      	adds	r3, r7, #3
 801c056:	1c22      	adds	r2, r4, #0
 801c058:	701a      	strb	r2, [r3, #0]
 801c05a:	1cbb      	adds	r3, r7, #2
 801c05c:	1c02      	adds	r2, r0, #0
 801c05e:	701a      	strb	r2, [r3, #0]
 801c060:	003b      	movs	r3, r7
 801c062:	1c0a      	adds	r2, r1, #0
 801c064:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c066:	260f      	movs	r6, #15
 801c068:	19bb      	adds	r3, r7, r6
 801c06a:	2200      	movs	r2, #0
 801c06c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c06e:	250e      	movs	r5, #14
 801c070:	197b      	adds	r3, r7, r5
 801c072:	2200      	movs	r2, #0
 801c074:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c076:	687a      	ldr	r2, [r7, #4]
 801c078:	23b0      	movs	r3, #176	@ 0xb0
 801c07a:	009b      	lsls	r3, r3, #2
 801c07c:	58d0      	ldr	r0, [r2, r3]
 801c07e:	19bc      	adds	r4, r7, r6
 801c080:	1cbb      	adds	r3, r7, #2
 801c082:	781d      	ldrb	r5, [r3, #0]
 801c084:	003b      	movs	r3, r7
 801c086:	881a      	ldrh	r2, [r3, #0]
 801c088:	1cfb      	adds	r3, r7, #3
 801c08a:	7819      	ldrb	r1, [r3, #0]
 801c08c:	002b      	movs	r3, r5
 801c08e:	f7f6 f9e0 	bl	8012452 <HAL_PCD_EP_Open>
 801c092:	0003      	movs	r3, r0
 801c094:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c096:	250e      	movs	r5, #14
 801c098:	197c      	adds	r4, r7, r5
 801c09a:	19bb      	adds	r3, r7, r6
 801c09c:	781b      	ldrb	r3, [r3, #0]
 801c09e:	0018      	movs	r0, r3
 801c0a0:	f000 f985 	bl	801c3ae <USBD_Get_USB_Status>
 801c0a4:	0003      	movs	r3, r0
 801c0a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c0a8:	197b      	adds	r3, r7, r5
 801c0aa:	781b      	ldrb	r3, [r3, #0]
}
 801c0ac:	0018      	movs	r0, r3
 801c0ae:	46bd      	mov	sp, r7
 801c0b0:	b005      	add	sp, #20
 801c0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c0b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0b6:	b085      	sub	sp, #20
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	000a      	movs	r2, r1
 801c0be:	1cfb      	adds	r3, r7, #3
 801c0c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c0c2:	210f      	movs	r1, #15
 801c0c4:	187b      	adds	r3, r7, r1
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c0ca:	260e      	movs	r6, #14
 801c0cc:	19bb      	adds	r3, r7, r6
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c0d2:	687a      	ldr	r2, [r7, #4]
 801c0d4:	23b0      	movs	r3, #176	@ 0xb0
 801c0d6:	009b      	lsls	r3, r3, #2
 801c0d8:	58d2      	ldr	r2, [r2, r3]
 801c0da:	000d      	movs	r5, r1
 801c0dc:	187c      	adds	r4, r7, r1
 801c0de:	1cfb      	adds	r3, r7, #3
 801c0e0:	781b      	ldrb	r3, [r3, #0]
 801c0e2:	0019      	movs	r1, r3
 801c0e4:	0010      	movs	r0, r2
 801c0e6:	f7f6 fa23 	bl	8012530 <HAL_PCD_EP_Close>
 801c0ea:	0003      	movs	r3, r0
 801c0ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c0ee:	19bc      	adds	r4, r7, r6
 801c0f0:	197b      	adds	r3, r7, r5
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	0018      	movs	r0, r3
 801c0f6:	f000 f95a 	bl	801c3ae <USBD_Get_USB_Status>
 801c0fa:	0003      	movs	r3, r0
 801c0fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c0fe:	19bb      	adds	r3, r7, r6
 801c100:	781b      	ldrb	r3, [r3, #0]
}
 801c102:	0018      	movs	r0, r3
 801c104:	46bd      	mov	sp, r7
 801c106:	b005      	add	sp, #20
 801c108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c10a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c10a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c10c:	b085      	sub	sp, #20
 801c10e:	af00      	add	r7, sp, #0
 801c110:	6078      	str	r0, [r7, #4]
 801c112:	000a      	movs	r2, r1
 801c114:	1cfb      	adds	r3, r7, #3
 801c116:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c118:	210f      	movs	r1, #15
 801c11a:	187b      	adds	r3, r7, r1
 801c11c:	2200      	movs	r2, #0
 801c11e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c120:	260e      	movs	r6, #14
 801c122:	19bb      	adds	r3, r7, r6
 801c124:	2200      	movs	r2, #0
 801c126:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c128:	687a      	ldr	r2, [r7, #4]
 801c12a:	23b0      	movs	r3, #176	@ 0xb0
 801c12c:	009b      	lsls	r3, r3, #2
 801c12e:	58d2      	ldr	r2, [r2, r3]
 801c130:	000d      	movs	r5, r1
 801c132:	187c      	adds	r4, r7, r1
 801c134:	1cfb      	adds	r3, r7, #3
 801c136:	781b      	ldrb	r3, [r3, #0]
 801c138:	0019      	movs	r1, r3
 801c13a:	0010      	movs	r0, r2
 801c13c:	f7f6 fad5 	bl	80126ea <HAL_PCD_EP_SetStall>
 801c140:	0003      	movs	r3, r0
 801c142:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c144:	19bc      	adds	r4, r7, r6
 801c146:	197b      	adds	r3, r7, r5
 801c148:	781b      	ldrb	r3, [r3, #0]
 801c14a:	0018      	movs	r0, r3
 801c14c:	f000 f92f 	bl	801c3ae <USBD_Get_USB_Status>
 801c150:	0003      	movs	r3, r0
 801c152:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c154:	19bb      	adds	r3, r7, r6
 801c156:	781b      	ldrb	r3, [r3, #0]
}
 801c158:	0018      	movs	r0, r3
 801c15a:	46bd      	mov	sp, r7
 801c15c:	b005      	add	sp, #20
 801c15e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c160 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c160:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c162:	b085      	sub	sp, #20
 801c164:	af00      	add	r7, sp, #0
 801c166:	6078      	str	r0, [r7, #4]
 801c168:	000a      	movs	r2, r1
 801c16a:	1cfb      	adds	r3, r7, #3
 801c16c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c16e:	210f      	movs	r1, #15
 801c170:	187b      	adds	r3, r7, r1
 801c172:	2200      	movs	r2, #0
 801c174:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c176:	260e      	movs	r6, #14
 801c178:	19bb      	adds	r3, r7, r6
 801c17a:	2200      	movs	r2, #0
 801c17c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c17e:	687a      	ldr	r2, [r7, #4]
 801c180:	23b0      	movs	r3, #176	@ 0xb0
 801c182:	009b      	lsls	r3, r3, #2
 801c184:	58d2      	ldr	r2, [r2, r3]
 801c186:	000d      	movs	r5, r1
 801c188:	187c      	adds	r4, r7, r1
 801c18a:	1cfb      	adds	r3, r7, #3
 801c18c:	781b      	ldrb	r3, [r3, #0]
 801c18e:	0019      	movs	r1, r3
 801c190:	0010      	movs	r0, r2
 801c192:	f7f6 fb06 	bl	80127a2 <HAL_PCD_EP_ClrStall>
 801c196:	0003      	movs	r3, r0
 801c198:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c19a:	19bc      	adds	r4, r7, r6
 801c19c:	197b      	adds	r3, r7, r5
 801c19e:	781b      	ldrb	r3, [r3, #0]
 801c1a0:	0018      	movs	r0, r3
 801c1a2:	f000 f904 	bl	801c3ae <USBD_Get_USB_Status>
 801c1a6:	0003      	movs	r3, r0
 801c1a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c1aa:	19bb      	adds	r3, r7, r6
 801c1ac:	781b      	ldrb	r3, [r3, #0]
}
 801c1ae:	0018      	movs	r0, r3
 801c1b0:	46bd      	mov	sp, r7
 801c1b2:	b005      	add	sp, #20
 801c1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c1b6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c1b6:	b580      	push	{r7, lr}
 801c1b8:	b084      	sub	sp, #16
 801c1ba:	af00      	add	r7, sp, #0
 801c1bc:	6078      	str	r0, [r7, #4]
 801c1be:	000a      	movs	r2, r1
 801c1c0:	1cfb      	adds	r3, r7, #3
 801c1c2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c1c4:	687a      	ldr	r2, [r7, #4]
 801c1c6:	23b0      	movs	r3, #176	@ 0xb0
 801c1c8:	009b      	lsls	r3, r3, #2
 801c1ca:	58d3      	ldr	r3, [r2, r3]
 801c1cc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c1ce:	1cfb      	adds	r3, r7, #3
 801c1d0:	781b      	ldrb	r3, [r3, #0]
 801c1d2:	b25b      	sxtb	r3, r3
 801c1d4:	2b00      	cmp	r3, #0
 801c1d6:	da0d      	bge.n	801c1f4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c1d8:	1cfb      	adds	r3, r7, #3
 801c1da:	781b      	ldrb	r3, [r3, #0]
 801c1dc:	227f      	movs	r2, #127	@ 0x7f
 801c1de:	4013      	ands	r3, r2
 801c1e0:	68f9      	ldr	r1, [r7, #12]
 801c1e2:	1c5a      	adds	r2, r3, #1
 801c1e4:	0013      	movs	r3, r2
 801c1e6:	009b      	lsls	r3, r3, #2
 801c1e8:	189b      	adds	r3, r3, r2
 801c1ea:	00db      	lsls	r3, r3, #3
 801c1ec:	18cb      	adds	r3, r1, r3
 801c1ee:	3302      	adds	r3, #2
 801c1f0:	781b      	ldrb	r3, [r3, #0]
 801c1f2:	e00d      	b.n	801c210 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c1f4:	1cfb      	adds	r3, r7, #3
 801c1f6:	781b      	ldrb	r3, [r3, #0]
 801c1f8:	227f      	movs	r2, #127	@ 0x7f
 801c1fa:	401a      	ands	r2, r3
 801c1fc:	68f8      	ldr	r0, [r7, #12]
 801c1fe:	23b5      	movs	r3, #181	@ 0xb5
 801c200:	0059      	lsls	r1, r3, #1
 801c202:	0013      	movs	r3, r2
 801c204:	009b      	lsls	r3, r3, #2
 801c206:	189b      	adds	r3, r3, r2
 801c208:	00db      	lsls	r3, r3, #3
 801c20a:	18c3      	adds	r3, r0, r3
 801c20c:	185b      	adds	r3, r3, r1
 801c20e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c210:	0018      	movs	r0, r3
 801c212:	46bd      	mov	sp, r7
 801c214:	b004      	add	sp, #16
 801c216:	bd80      	pop	{r7, pc}

0801c218 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c21a:	b085      	sub	sp, #20
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
 801c220:	000a      	movs	r2, r1
 801c222:	1cfb      	adds	r3, r7, #3
 801c224:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c226:	210f      	movs	r1, #15
 801c228:	187b      	adds	r3, r7, r1
 801c22a:	2200      	movs	r2, #0
 801c22c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c22e:	260e      	movs	r6, #14
 801c230:	19bb      	adds	r3, r7, r6
 801c232:	2200      	movs	r2, #0
 801c234:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c236:	687a      	ldr	r2, [r7, #4]
 801c238:	23b0      	movs	r3, #176	@ 0xb0
 801c23a:	009b      	lsls	r3, r3, #2
 801c23c:	58d2      	ldr	r2, [r2, r3]
 801c23e:	000d      	movs	r5, r1
 801c240:	187c      	adds	r4, r7, r1
 801c242:	1cfb      	adds	r3, r7, #3
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	0019      	movs	r1, r3
 801c248:	0010      	movs	r0, r2
 801c24a:	f7f6 f8d7 	bl	80123fc <HAL_PCD_SetAddress>
 801c24e:	0003      	movs	r3, r0
 801c250:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c252:	19bc      	adds	r4, r7, r6
 801c254:	197b      	adds	r3, r7, r5
 801c256:	781b      	ldrb	r3, [r3, #0]
 801c258:	0018      	movs	r0, r3
 801c25a:	f000 f8a8 	bl	801c3ae <USBD_Get_USB_Status>
 801c25e:	0003      	movs	r3, r0
 801c260:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c262:	19bb      	adds	r3, r7, r6
 801c264:	781b      	ldrb	r3, [r3, #0]
}
 801c266:	0018      	movs	r0, r3
 801c268:	46bd      	mov	sp, r7
 801c26a:	b005      	add	sp, #20
 801c26c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c26e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c26e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c270:	b087      	sub	sp, #28
 801c272:	af00      	add	r7, sp, #0
 801c274:	60f8      	str	r0, [r7, #12]
 801c276:	0008      	movs	r0, r1
 801c278:	607a      	str	r2, [r7, #4]
 801c27a:	0019      	movs	r1, r3
 801c27c:	230b      	movs	r3, #11
 801c27e:	18fb      	adds	r3, r7, r3
 801c280:	1c02      	adds	r2, r0, #0
 801c282:	701a      	strb	r2, [r3, #0]
 801c284:	2408      	movs	r4, #8
 801c286:	193b      	adds	r3, r7, r4
 801c288:	1c0a      	adds	r2, r1, #0
 801c28a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c28c:	2117      	movs	r1, #23
 801c28e:	187b      	adds	r3, r7, r1
 801c290:	2200      	movs	r2, #0
 801c292:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c294:	2516      	movs	r5, #22
 801c296:	197b      	adds	r3, r7, r5
 801c298:	2200      	movs	r2, #0
 801c29a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c29c:	68fa      	ldr	r2, [r7, #12]
 801c29e:	23b0      	movs	r3, #176	@ 0xb0
 801c2a0:	009b      	lsls	r3, r3, #2
 801c2a2:	58d0      	ldr	r0, [r2, r3]
 801c2a4:	193b      	adds	r3, r7, r4
 801c2a6:	881d      	ldrh	r5, [r3, #0]
 801c2a8:	000e      	movs	r6, r1
 801c2aa:	187c      	adds	r4, r7, r1
 801c2ac:	687a      	ldr	r2, [r7, #4]
 801c2ae:	230b      	movs	r3, #11
 801c2b0:	18fb      	adds	r3, r7, r3
 801c2b2:	7819      	ldrb	r1, [r3, #0]
 801c2b4:	002b      	movs	r3, r5
 801c2b6:	f7f6 f9dc 	bl	8012672 <HAL_PCD_EP_Transmit>
 801c2ba:	0003      	movs	r3, r0
 801c2bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c2be:	2516      	movs	r5, #22
 801c2c0:	197c      	adds	r4, r7, r5
 801c2c2:	19bb      	adds	r3, r7, r6
 801c2c4:	781b      	ldrb	r3, [r3, #0]
 801c2c6:	0018      	movs	r0, r3
 801c2c8:	f000 f871 	bl	801c3ae <USBD_Get_USB_Status>
 801c2cc:	0003      	movs	r3, r0
 801c2ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c2d0:	197b      	adds	r3, r7, r5
 801c2d2:	781b      	ldrb	r3, [r3, #0]
}
 801c2d4:	0018      	movs	r0, r3
 801c2d6:	46bd      	mov	sp, r7
 801c2d8:	b007      	add	sp, #28
 801c2da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c2dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2de:	b087      	sub	sp, #28
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	60f8      	str	r0, [r7, #12]
 801c2e4:	0008      	movs	r0, r1
 801c2e6:	607a      	str	r2, [r7, #4]
 801c2e8:	0019      	movs	r1, r3
 801c2ea:	230b      	movs	r3, #11
 801c2ec:	18fb      	adds	r3, r7, r3
 801c2ee:	1c02      	adds	r2, r0, #0
 801c2f0:	701a      	strb	r2, [r3, #0]
 801c2f2:	2408      	movs	r4, #8
 801c2f4:	193b      	adds	r3, r7, r4
 801c2f6:	1c0a      	adds	r2, r1, #0
 801c2f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c2fa:	2117      	movs	r1, #23
 801c2fc:	187b      	adds	r3, r7, r1
 801c2fe:	2200      	movs	r2, #0
 801c300:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c302:	2516      	movs	r5, #22
 801c304:	197b      	adds	r3, r7, r5
 801c306:	2200      	movs	r2, #0
 801c308:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c30a:	68fa      	ldr	r2, [r7, #12]
 801c30c:	23b0      	movs	r3, #176	@ 0xb0
 801c30e:	009b      	lsls	r3, r3, #2
 801c310:	58d0      	ldr	r0, [r2, r3]
 801c312:	193b      	adds	r3, r7, r4
 801c314:	881d      	ldrh	r5, [r3, #0]
 801c316:	000e      	movs	r6, r1
 801c318:	187c      	adds	r4, r7, r1
 801c31a:	687a      	ldr	r2, [r7, #4]
 801c31c:	230b      	movs	r3, #11
 801c31e:	18fb      	adds	r3, r7, r3
 801c320:	7819      	ldrb	r1, [r3, #0]
 801c322:	002b      	movs	r3, r5
 801c324:	f7f6 f955 	bl	80125d2 <HAL_PCD_EP_Receive>
 801c328:	0003      	movs	r3, r0
 801c32a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c32c:	2516      	movs	r5, #22
 801c32e:	197c      	adds	r4, r7, r5
 801c330:	19bb      	adds	r3, r7, r6
 801c332:	781b      	ldrb	r3, [r3, #0]
 801c334:	0018      	movs	r0, r3
 801c336:	f000 f83a 	bl	801c3ae <USBD_Get_USB_Status>
 801c33a:	0003      	movs	r3, r0
 801c33c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c33e:	197b      	adds	r3, r7, r5
 801c340:	781b      	ldrb	r3, [r3, #0]
}
 801c342:	0018      	movs	r0, r3
 801c344:	46bd      	mov	sp, r7
 801c346:	b007      	add	sp, #28
 801c348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c34a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c34a:	b580      	push	{r7, lr}
 801c34c:	b082      	sub	sp, #8
 801c34e:	af00      	add	r7, sp, #0
 801c350:	6078      	str	r0, [r7, #4]
 801c352:	000a      	movs	r2, r1
 801c354:	1cfb      	adds	r3, r7, #3
 801c356:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c358:	687a      	ldr	r2, [r7, #4]
 801c35a:	23b0      	movs	r3, #176	@ 0xb0
 801c35c:	009b      	lsls	r3, r3, #2
 801c35e:	58d2      	ldr	r2, [r2, r3]
 801c360:	1cfb      	adds	r3, r7, #3
 801c362:	781b      	ldrb	r3, [r3, #0]
 801c364:	0019      	movs	r1, r3
 801c366:	0010      	movs	r0, r2
 801c368:	f7f6 f96a 	bl	8012640 <HAL_PCD_EP_GetRxCount>
 801c36c:	0003      	movs	r3, r0
}
 801c36e:	0018      	movs	r0, r3
 801c370:	46bd      	mov	sp, r7
 801c372:	b002      	add	sp, #8
 801c374:	bd80      	pop	{r7, pc}
	...

0801c378 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c378:	b580      	push	{r7, lr}
 801c37a:	b082      	sub	sp, #8
 801c37c:	af00      	add	r7, sp, #0
 801c37e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c380:	4b02      	ldr	r3, [pc, #8]	@ (801c38c <USBD_static_malloc+0x14>)
}
 801c382:	0018      	movs	r0, r3
 801c384:	46bd      	mov	sp, r7
 801c386:	b002      	add	sp, #8
 801c388:	bd80      	pop	{r7, pc}
 801c38a:	46c0      	nop			@ (mov r8, r8)
 801c38c:	20003594 	.word	0x20003594

0801c390 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c390:	b580      	push	{r7, lr}
 801c392:	b082      	sub	sp, #8
 801c394:	af00      	add	r7, sp, #0
 801c396:	6078      	str	r0, [r7, #4]

}
 801c398:	46c0      	nop			@ (mov r8, r8)
 801c39a:	46bd      	mov	sp, r7
 801c39c:	b002      	add	sp, #8
 801c39e:	bd80      	pop	{r7, pc}

0801c3a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801c3a4:	f7eb fa6c 	bl	8007880 <SystemClock_Config>
}
 801c3a8:	46c0      	nop			@ (mov r8, r8)
 801c3aa:	46bd      	mov	sp, r7
 801c3ac:	bd80      	pop	{r7, pc}

0801c3ae <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c3ae:	b580      	push	{r7, lr}
 801c3b0:	b084      	sub	sp, #16
 801c3b2:	af00      	add	r7, sp, #0
 801c3b4:	0002      	movs	r2, r0
 801c3b6:	1dfb      	adds	r3, r7, #7
 801c3b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c3ba:	230f      	movs	r3, #15
 801c3bc:	18fb      	adds	r3, r7, r3
 801c3be:	2200      	movs	r2, #0
 801c3c0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801c3c2:	1dfb      	adds	r3, r7, #7
 801c3c4:	781b      	ldrb	r3, [r3, #0]
 801c3c6:	2b03      	cmp	r3, #3
 801c3c8:	d017      	beq.n	801c3fa <USBD_Get_USB_Status+0x4c>
 801c3ca:	dc1b      	bgt.n	801c404 <USBD_Get_USB_Status+0x56>
 801c3cc:	2b02      	cmp	r3, #2
 801c3ce:	d00f      	beq.n	801c3f0 <USBD_Get_USB_Status+0x42>
 801c3d0:	dc18      	bgt.n	801c404 <USBD_Get_USB_Status+0x56>
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d002      	beq.n	801c3dc <USBD_Get_USB_Status+0x2e>
 801c3d6:	2b01      	cmp	r3, #1
 801c3d8:	d005      	beq.n	801c3e6 <USBD_Get_USB_Status+0x38>
 801c3da:	e013      	b.n	801c404 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c3dc:	230f      	movs	r3, #15
 801c3de:	18fb      	adds	r3, r7, r3
 801c3e0:	2200      	movs	r2, #0
 801c3e2:	701a      	strb	r2, [r3, #0]
    break;
 801c3e4:	e013      	b.n	801c40e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c3e6:	230f      	movs	r3, #15
 801c3e8:	18fb      	adds	r3, r7, r3
 801c3ea:	2202      	movs	r2, #2
 801c3ec:	701a      	strb	r2, [r3, #0]
    break;
 801c3ee:	e00e      	b.n	801c40e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c3f0:	230f      	movs	r3, #15
 801c3f2:	18fb      	adds	r3, r7, r3
 801c3f4:	2201      	movs	r2, #1
 801c3f6:	701a      	strb	r2, [r3, #0]
    break;
 801c3f8:	e009      	b.n	801c40e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c3fa:	230f      	movs	r3, #15
 801c3fc:	18fb      	adds	r3, r7, r3
 801c3fe:	2202      	movs	r2, #2
 801c400:	701a      	strb	r2, [r3, #0]
    break;
 801c402:	e004      	b.n	801c40e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801c404:	230f      	movs	r3, #15
 801c406:	18fb      	adds	r3, r7, r3
 801c408:	2202      	movs	r2, #2
 801c40a:	701a      	strb	r2, [r3, #0]
    break;
 801c40c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801c40e:	230f      	movs	r3, #15
 801c410:	18fb      	adds	r3, r7, r3
 801c412:	781b      	ldrb	r3, [r3, #0]
}
 801c414:	0018      	movs	r0, r3
 801c416:	46bd      	mov	sp, r7
 801c418:	b004      	add	sp, #16
 801c41a:	bd80      	pop	{r7, pc}

0801c41c <arm_cfft_radix4by2_q31>:
 801c41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c41e:	465f      	mov	r7, fp
 801c420:	4656      	mov	r6, sl
 801c422:	464d      	mov	r5, r9
 801c424:	4644      	mov	r4, r8
 801c426:	000b      	movs	r3, r1
 801c428:	b4f0      	push	{r4, r5, r6, r7}
 801c42a:	085b      	lsrs	r3, r3, #1
 801c42c:	b08f      	sub	sp, #60	@ 0x3c
 801c42e:	910a      	str	r1, [sp, #40]	@ 0x28
 801c430:	0007      	movs	r7, r0
 801c432:	9009      	str	r0, [sp, #36]	@ 0x24
 801c434:	0011      	movs	r1, r2
 801c436:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c438:	930c      	str	r3, [sp, #48]	@ 0x30
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d100      	bne.n	801c440 <arm_cfft_radix4by2_q31+0x24>
 801c43e:	e0a0      	b.n	801c582 <arm_cfft_radix4by2_q31+0x166>
 801c440:	0002      	movs	r2, r0
 801c442:	00db      	lsls	r3, r3, #3
 801c444:	3204      	adds	r2, #4
 801c446:	4691      	mov	r9, r2
 801c448:	4698      	mov	r8, r3
 801c44a:	000a      	movs	r2, r1
 801c44c:	464e      	mov	r6, r9
 801c44e:	4442      	add	r2, r8
 801c450:	4699      	mov	r9, r3
 801c452:	4688      	mov	r8, r1
 801c454:	9208      	str	r2, [sp, #32]
 801c456:	900d      	str	r0, [sp, #52]	@ 0x34
 801c458:	4643      	mov	r3, r8
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	469b      	mov	fp, r3
 801c45e:	4643      	mov	r3, r8
 801c460:	685b      	ldr	r3, [r3, #4]
 801c462:	469a      	mov	sl, r3
 801c464:	683b      	ldr	r3, [r7, #0]
 801c466:	109c      	asrs	r4, r3, #2
 801c468:	464b      	mov	r3, r9
 801c46a:	58fb      	ldr	r3, [r7, r3]
 801c46c:	109a      	asrs	r2, r3, #2
 801c46e:	18a3      	adds	r3, r4, r2
 801c470:	603b      	str	r3, [r7, #0]
 801c472:	6833      	ldr	r3, [r6, #0]
 801c474:	1aa4      	subs	r4, r4, r2
 801c476:	109d      	asrs	r5, r3, #2
 801c478:	464b      	mov	r3, r9
 801c47a:	58f3      	ldr	r3, [r6, r3]
 801c47c:	17e2      	asrs	r2, r4, #31
 801c47e:	109b      	asrs	r3, r3, #2
 801c480:	18e9      	adds	r1, r5, r3
 801c482:	6031      	str	r1, [r6, #0]
 801c484:	0011      	movs	r1, r2
 801c486:	465a      	mov	r2, fp
 801c488:	17d2      	asrs	r2, r2, #31
 801c48a:	0010      	movs	r0, r2
 801c48c:	4652      	mov	r2, sl
 801c48e:	1aed      	subs	r5, r5, r3
 801c490:	17eb      	asrs	r3, r5, #31
 801c492:	17d2      	asrs	r2, r2, #31
 801c494:	9307      	str	r3, [sp, #28]
 801c496:	9204      	str	r2, [sp, #16]
 801c498:	0003      	movs	r3, r0
 801c49a:	465a      	mov	r2, fp
 801c49c:	9006      	str	r0, [sp, #24]
 801c49e:	0020      	movs	r0, r4
 801c4a0:	9105      	str	r1, [sp, #20]
 801c4a2:	f7e4 f88d 	bl	80005c0 <__aeabi_lmul>
 801c4a6:	2280      	movs	r2, #128	@ 0x80
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	0612      	lsls	r2, r2, #24
 801c4ac:	1880      	adds	r0, r0, r2
 801c4ae:	4159      	adcs	r1, r3
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	9101      	str	r1, [sp, #4]
 801c4b4:	9300      	str	r3, [sp, #0]
 801c4b6:	4652      	mov	r2, sl
 801c4b8:	9b04      	ldr	r3, [sp, #16]
 801c4ba:	0028      	movs	r0, r5
 801c4bc:	17e9      	asrs	r1, r5, #31
 801c4be:	f7e4 f87f 	bl	80005c0 <__aeabi_lmul>
 801c4c2:	9a00      	ldr	r2, [sp, #0]
 801c4c4:	9b01      	ldr	r3, [sp, #4]
 801c4c6:	1880      	adds	r0, r0, r2
 801c4c8:	4159      	adcs	r1, r3
 801c4ca:	2280      	movs	r2, #128	@ 0x80
 801c4cc:	2300      	movs	r3, #0
 801c4ce:	0612      	lsls	r2, r2, #24
 801c4d0:	1880      	adds	r0, r0, r2
 801c4d2:	4159      	adcs	r1, r3
 801c4d4:	464a      	mov	r2, r9
 801c4d6:	004b      	lsls	r3, r1, #1
 801c4d8:	50bb      	str	r3, [r7, r2]
 801c4da:	4658      	mov	r0, fp
 801c4dc:	002a      	movs	r2, r5
 801c4de:	9b07      	ldr	r3, [sp, #28]
 801c4e0:	9906      	ldr	r1, [sp, #24]
 801c4e2:	f7e4 f86d 	bl	80005c0 <__aeabi_lmul>
 801c4e6:	2280      	movs	r2, #128	@ 0x80
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	0612      	lsls	r2, r2, #24
 801c4ec:	1880      	adds	r0, r0, r2
 801c4ee:	4159      	adcs	r1, r3
 801c4f0:	2000      	movs	r0, #0
 801c4f2:	9103      	str	r1, [sp, #12]
 801c4f4:	9002      	str	r0, [sp, #8]
 801c4f6:	4652      	mov	r2, sl
 801c4f8:	9b04      	ldr	r3, [sp, #16]
 801c4fa:	0020      	movs	r0, r4
 801c4fc:	9905      	ldr	r1, [sp, #20]
 801c4fe:	f7e4 f85f 	bl	80005c0 <__aeabi_lmul>
 801c502:	9a02      	ldr	r2, [sp, #8]
 801c504:	9b03      	ldr	r3, [sp, #12]
 801c506:	1a12      	subs	r2, r2, r0
 801c508:	418b      	sbcs	r3, r1
 801c50a:	2080      	movs	r0, #128	@ 0x80
 801c50c:	2100      	movs	r1, #0
 801c50e:	0600      	lsls	r0, r0, #24
 801c510:	1812      	adds	r2, r2, r0
 801c512:	414b      	adcs	r3, r1
 801c514:	464a      	mov	r2, r9
 801c516:	005b      	lsls	r3, r3, #1
 801c518:	50b3      	str	r3, [r6, r2]
 801c51a:	2308      	movs	r3, #8
 801c51c:	469c      	mov	ip, r3
 801c51e:	9b08      	ldr	r3, [sp, #32]
 801c520:	44e0      	add	r8, ip
 801c522:	3708      	adds	r7, #8
 801c524:	3608      	adds	r6, #8
 801c526:	4598      	cmp	r8, r3
 801c528:	d196      	bne.n	801c458 <arm_cfft_radix4by2_q31+0x3c>
 801c52a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c52c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c52e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c530:	2302      	movs	r3, #2
 801c532:	003a      	movs	r2, r7
 801c534:	0029      	movs	r1, r5
 801c536:	0020      	movs	r0, r4
 801c538:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801c53a:	f000 f957 	bl	801c7ec <arm_radix4_butterfly_q31>
 801c53e:	46a4      	mov	ip, r4
 801c540:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c542:	2302      	movs	r3, #2
 801c544:	0088      	lsls	r0, r1, #2
 801c546:	4460      	add	r0, ip
 801c548:	003a      	movs	r2, r7
 801c54a:	0029      	movs	r1, r5
 801c54c:	f000 f94e 	bl	801c7ec <arm_radix4_butterfly_q31>
 801c550:	46a4      	mov	ip, r4
 801c552:	0128      	lsls	r0, r5, #4
 801c554:	4460      	add	r0, ip
 801c556:	6833      	ldr	r3, [r6, #0]
 801c558:	005b      	lsls	r3, r3, #1
 801c55a:	6033      	str	r3, [r6, #0]
 801c55c:	6873      	ldr	r3, [r6, #4]
 801c55e:	005b      	lsls	r3, r3, #1
 801c560:	6073      	str	r3, [r6, #4]
 801c562:	68b3      	ldr	r3, [r6, #8]
 801c564:	005b      	lsls	r3, r3, #1
 801c566:	60b3      	str	r3, [r6, #8]
 801c568:	68f3      	ldr	r3, [r6, #12]
 801c56a:	005b      	lsls	r3, r3, #1
 801c56c:	60f3      	str	r3, [r6, #12]
 801c56e:	3610      	adds	r6, #16
 801c570:	42b0      	cmp	r0, r6
 801c572:	d1f0      	bne.n	801c556 <arm_cfft_radix4by2_q31+0x13a>
 801c574:	b00f      	add	sp, #60	@ 0x3c
 801c576:	bc3c      	pop	{r2, r3, r4, r5}
 801c578:	4690      	mov	r8, r2
 801c57a:	4699      	mov	r9, r3
 801c57c:	46a2      	mov	sl, r4
 801c57e:	46ab      	mov	fp, r5
 801c580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c582:	2302      	movs	r3, #2
 801c584:	2100      	movs	r1, #0
 801c586:	0015      	movs	r5, r2
 801c588:	f000 f930 	bl	801c7ec <arm_radix4_butterfly_q31>
 801c58c:	46bc      	mov	ip, r7
 801c58e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c590:	002a      	movs	r2, r5
 801c592:	0098      	lsls	r0, r3, #2
 801c594:	4460      	add	r0, ip
 801c596:	2302      	movs	r3, #2
 801c598:	2100      	movs	r1, #0
 801c59a:	f000 f927 	bl	801c7ec <arm_radix4_butterfly_q31>
 801c59e:	e7e9      	b.n	801c574 <arm_cfft_radix4by2_q31+0x158>

0801c5a0 <arm_cfft_radix4by2_inverse_q31>:
 801c5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5a2:	465f      	mov	r7, fp
 801c5a4:	4656      	mov	r6, sl
 801c5a6:	464d      	mov	r5, r9
 801c5a8:	4644      	mov	r4, r8
 801c5aa:	000b      	movs	r3, r1
 801c5ac:	b4f0      	push	{r4, r5, r6, r7}
 801c5ae:	085b      	lsrs	r3, r3, #1
 801c5b0:	b08f      	sub	sp, #60	@ 0x3c
 801c5b2:	910a      	str	r1, [sp, #40]	@ 0x28
 801c5b4:	0007      	movs	r7, r0
 801c5b6:	9009      	str	r0, [sp, #36]	@ 0x24
 801c5b8:	0011      	movs	r1, r2
 801c5ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c5bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d100      	bne.n	801c5c4 <arm_cfft_radix4by2_inverse_q31+0x24>
 801c5c2:	e0a0      	b.n	801c706 <arm_cfft_radix4by2_inverse_q31+0x166>
 801c5c4:	0002      	movs	r2, r0
 801c5c6:	00db      	lsls	r3, r3, #3
 801c5c8:	3204      	adds	r2, #4
 801c5ca:	4691      	mov	r9, r2
 801c5cc:	4698      	mov	r8, r3
 801c5ce:	000a      	movs	r2, r1
 801c5d0:	464e      	mov	r6, r9
 801c5d2:	4442      	add	r2, r8
 801c5d4:	4699      	mov	r9, r3
 801c5d6:	4688      	mov	r8, r1
 801c5d8:	9208      	str	r2, [sp, #32]
 801c5da:	900d      	str	r0, [sp, #52]	@ 0x34
 801c5dc:	4643      	mov	r3, r8
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	469b      	mov	fp, r3
 801c5e2:	4643      	mov	r3, r8
 801c5e4:	685b      	ldr	r3, [r3, #4]
 801c5e6:	469a      	mov	sl, r3
 801c5e8:	683b      	ldr	r3, [r7, #0]
 801c5ea:	109c      	asrs	r4, r3, #2
 801c5ec:	464b      	mov	r3, r9
 801c5ee:	58fb      	ldr	r3, [r7, r3]
 801c5f0:	109a      	asrs	r2, r3, #2
 801c5f2:	18a3      	adds	r3, r4, r2
 801c5f4:	603b      	str	r3, [r7, #0]
 801c5f6:	6833      	ldr	r3, [r6, #0]
 801c5f8:	1aa4      	subs	r4, r4, r2
 801c5fa:	109d      	asrs	r5, r3, #2
 801c5fc:	464b      	mov	r3, r9
 801c5fe:	58f3      	ldr	r3, [r6, r3]
 801c600:	17e2      	asrs	r2, r4, #31
 801c602:	109b      	asrs	r3, r3, #2
 801c604:	18e9      	adds	r1, r5, r3
 801c606:	6031      	str	r1, [r6, #0]
 801c608:	0011      	movs	r1, r2
 801c60a:	465a      	mov	r2, fp
 801c60c:	17d2      	asrs	r2, r2, #31
 801c60e:	0010      	movs	r0, r2
 801c610:	4652      	mov	r2, sl
 801c612:	1aed      	subs	r5, r5, r3
 801c614:	17eb      	asrs	r3, r5, #31
 801c616:	17d2      	asrs	r2, r2, #31
 801c618:	9307      	str	r3, [sp, #28]
 801c61a:	9204      	str	r2, [sp, #16]
 801c61c:	0003      	movs	r3, r0
 801c61e:	465a      	mov	r2, fp
 801c620:	9006      	str	r0, [sp, #24]
 801c622:	0020      	movs	r0, r4
 801c624:	9105      	str	r1, [sp, #20]
 801c626:	f7e3 ffcb 	bl	80005c0 <__aeabi_lmul>
 801c62a:	2280      	movs	r2, #128	@ 0x80
 801c62c:	2300      	movs	r3, #0
 801c62e:	0612      	lsls	r2, r2, #24
 801c630:	1880      	adds	r0, r0, r2
 801c632:	4159      	adcs	r1, r3
 801c634:	2300      	movs	r3, #0
 801c636:	9101      	str	r1, [sp, #4]
 801c638:	9300      	str	r3, [sp, #0]
 801c63a:	4652      	mov	r2, sl
 801c63c:	9b04      	ldr	r3, [sp, #16]
 801c63e:	0028      	movs	r0, r5
 801c640:	17e9      	asrs	r1, r5, #31
 801c642:	f7e3 ffbd 	bl	80005c0 <__aeabi_lmul>
 801c646:	9a00      	ldr	r2, [sp, #0]
 801c648:	9b01      	ldr	r3, [sp, #4]
 801c64a:	1a12      	subs	r2, r2, r0
 801c64c:	418b      	sbcs	r3, r1
 801c64e:	2080      	movs	r0, #128	@ 0x80
 801c650:	2100      	movs	r1, #0
 801c652:	0600      	lsls	r0, r0, #24
 801c654:	1812      	adds	r2, r2, r0
 801c656:	414b      	adcs	r3, r1
 801c658:	464a      	mov	r2, r9
 801c65a:	005b      	lsls	r3, r3, #1
 801c65c:	50bb      	str	r3, [r7, r2]
 801c65e:	4658      	mov	r0, fp
 801c660:	002a      	movs	r2, r5
 801c662:	9b07      	ldr	r3, [sp, #28]
 801c664:	9906      	ldr	r1, [sp, #24]
 801c666:	f7e3 ffab 	bl	80005c0 <__aeabi_lmul>
 801c66a:	2280      	movs	r2, #128	@ 0x80
 801c66c:	2300      	movs	r3, #0
 801c66e:	0612      	lsls	r2, r2, #24
 801c670:	1880      	adds	r0, r0, r2
 801c672:	4159      	adcs	r1, r3
 801c674:	2000      	movs	r0, #0
 801c676:	9103      	str	r1, [sp, #12]
 801c678:	9002      	str	r0, [sp, #8]
 801c67a:	4652      	mov	r2, sl
 801c67c:	9b04      	ldr	r3, [sp, #16]
 801c67e:	0020      	movs	r0, r4
 801c680:	9905      	ldr	r1, [sp, #20]
 801c682:	f7e3 ff9d 	bl	80005c0 <__aeabi_lmul>
 801c686:	9b02      	ldr	r3, [sp, #8]
 801c688:	9c03      	ldr	r4, [sp, #12]
 801c68a:	18c0      	adds	r0, r0, r3
 801c68c:	4161      	adcs	r1, r4
 801c68e:	2380      	movs	r3, #128	@ 0x80
 801c690:	2400      	movs	r4, #0
 801c692:	061b      	lsls	r3, r3, #24
 801c694:	18c0      	adds	r0, r0, r3
 801c696:	4161      	adcs	r1, r4
 801c698:	464a      	mov	r2, r9
 801c69a:	004b      	lsls	r3, r1, #1
 801c69c:	50b3      	str	r3, [r6, r2]
 801c69e:	2308      	movs	r3, #8
 801c6a0:	469c      	mov	ip, r3
 801c6a2:	9b08      	ldr	r3, [sp, #32]
 801c6a4:	44e0      	add	r8, ip
 801c6a6:	3708      	adds	r7, #8
 801c6a8:	3608      	adds	r6, #8
 801c6aa:	4598      	cmp	r8, r3
 801c6ac:	d196      	bne.n	801c5dc <arm_cfft_radix4by2_inverse_q31+0x3c>
 801c6ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c6b0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c6b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c6b4:	2302      	movs	r3, #2
 801c6b6:	003a      	movs	r2, r7
 801c6b8:	0029      	movs	r1, r5
 801c6ba:	0020      	movs	r0, r4
 801c6bc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801c6be:	f000 fb3b 	bl	801cd38 <arm_radix4_butterfly_inverse_q31>
 801c6c2:	46a4      	mov	ip, r4
 801c6c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c6c6:	2302      	movs	r3, #2
 801c6c8:	0088      	lsls	r0, r1, #2
 801c6ca:	4460      	add	r0, ip
 801c6cc:	003a      	movs	r2, r7
 801c6ce:	0029      	movs	r1, r5
 801c6d0:	f000 fb32 	bl	801cd38 <arm_radix4_butterfly_inverse_q31>
 801c6d4:	46a4      	mov	ip, r4
 801c6d6:	0128      	lsls	r0, r5, #4
 801c6d8:	4460      	add	r0, ip
 801c6da:	6833      	ldr	r3, [r6, #0]
 801c6dc:	005b      	lsls	r3, r3, #1
 801c6de:	6033      	str	r3, [r6, #0]
 801c6e0:	6873      	ldr	r3, [r6, #4]
 801c6e2:	005b      	lsls	r3, r3, #1
 801c6e4:	6073      	str	r3, [r6, #4]
 801c6e6:	68b3      	ldr	r3, [r6, #8]
 801c6e8:	005b      	lsls	r3, r3, #1
 801c6ea:	60b3      	str	r3, [r6, #8]
 801c6ec:	68f3      	ldr	r3, [r6, #12]
 801c6ee:	005b      	lsls	r3, r3, #1
 801c6f0:	60f3      	str	r3, [r6, #12]
 801c6f2:	3610      	adds	r6, #16
 801c6f4:	42b0      	cmp	r0, r6
 801c6f6:	d1f0      	bne.n	801c6da <arm_cfft_radix4by2_inverse_q31+0x13a>
 801c6f8:	b00f      	add	sp, #60	@ 0x3c
 801c6fa:	bc3c      	pop	{r2, r3, r4, r5}
 801c6fc:	4690      	mov	r8, r2
 801c6fe:	4699      	mov	r9, r3
 801c700:	46a2      	mov	sl, r4
 801c702:	46ab      	mov	fp, r5
 801c704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c706:	2302      	movs	r3, #2
 801c708:	2100      	movs	r1, #0
 801c70a:	0015      	movs	r5, r2
 801c70c:	f000 fb14 	bl	801cd38 <arm_radix4_butterfly_inverse_q31>
 801c710:	46bc      	mov	ip, r7
 801c712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c714:	002a      	movs	r2, r5
 801c716:	0098      	lsls	r0, r3, #2
 801c718:	4460      	add	r0, ip
 801c71a:	2302      	movs	r3, #2
 801c71c:	2100      	movs	r1, #0
 801c71e:	f000 fb0b 	bl	801cd38 <arm_radix4_butterfly_inverse_q31>
 801c722:	e7e9      	b.n	801c6f8 <arm_cfft_radix4by2_inverse_q31+0x158>

0801c724 <arm_cfft_q31>:
 801c724:	b570      	push	{r4, r5, r6, lr}
 801c726:	001e      	movs	r6, r3
 801c728:	2380      	movs	r3, #128	@ 0x80
 801c72a:	000d      	movs	r5, r1
 801c72c:	0004      	movs	r4, r0
 801c72e:	8801      	ldrh	r1, [r0, #0]
 801c730:	005b      	lsls	r3, r3, #1
 801c732:	2a01      	cmp	r2, #1
 801c734:	d028      	beq.n	801c788 <arm_cfft_q31+0x64>
 801c736:	4299      	cmp	r1, r3
 801c738:	d020      	beq.n	801c77c <arm_cfft_q31+0x58>
 801c73a:	d812      	bhi.n	801c762 <arm_cfft_q31+0x3e>
 801c73c:	2920      	cmp	r1, #32
 801c73e:	d004      	beq.n	801c74a <arm_cfft_q31+0x26>
 801c740:	d949      	bls.n	801c7d6 <arm_cfft_q31+0xb2>
 801c742:	2940      	cmp	r1, #64	@ 0x40
 801c744:	d01a      	beq.n	801c77c <arm_cfft_q31+0x58>
 801c746:	2980      	cmp	r1, #128	@ 0x80
 801c748:	d103      	bne.n	801c752 <arm_cfft_q31+0x2e>
 801c74a:	6862      	ldr	r2, [r4, #4]
 801c74c:	0028      	movs	r0, r5
 801c74e:	f7ff fe65 	bl	801c41c <arm_cfft_radix4by2_q31>
 801c752:	2e00      	cmp	r6, #0
 801c754:	d004      	beq.n	801c760 <arm_cfft_q31+0x3c>
 801c756:	68a2      	ldr	r2, [r4, #8]
 801c758:	89a1      	ldrh	r1, [r4, #12]
 801c75a:	0028      	movs	r0, r5
 801c75c:	f7e3 fcd4 	bl	8000108 <arm_bitreversal_32>
 801c760:	bd70      	pop	{r4, r5, r6, pc}
 801c762:	2380      	movs	r3, #128	@ 0x80
 801c764:	00db      	lsls	r3, r3, #3
 801c766:	4299      	cmp	r1, r3
 801c768:	d008      	beq.n	801c77c <arm_cfft_q31+0x58>
 801c76a:	d92f      	bls.n	801c7cc <arm_cfft_q31+0xa8>
 801c76c:	2380      	movs	r3, #128	@ 0x80
 801c76e:	011b      	lsls	r3, r3, #4
 801c770:	4299      	cmp	r1, r3
 801c772:	d0ea      	beq.n	801c74a <arm_cfft_q31+0x26>
 801c774:	2380      	movs	r3, #128	@ 0x80
 801c776:	015b      	lsls	r3, r3, #5
 801c778:	4299      	cmp	r1, r3
 801c77a:	d1ea      	bne.n	801c752 <arm_cfft_q31+0x2e>
 801c77c:	2301      	movs	r3, #1
 801c77e:	6862      	ldr	r2, [r4, #4]
 801c780:	0028      	movs	r0, r5
 801c782:	f000 f833 	bl	801c7ec <arm_radix4_butterfly_q31>
 801c786:	e7e4      	b.n	801c752 <arm_cfft_q31+0x2e>
 801c788:	4299      	cmp	r1, r3
 801c78a:	d019      	beq.n	801c7c0 <arm_cfft_q31+0x9c>
 801c78c:	d80b      	bhi.n	801c7a6 <arm_cfft_q31+0x82>
 801c78e:	2920      	cmp	r1, #32
 801c790:	d004      	beq.n	801c79c <arm_cfft_q31+0x78>
 801c792:	d928      	bls.n	801c7e6 <arm_cfft_q31+0xc2>
 801c794:	2940      	cmp	r1, #64	@ 0x40
 801c796:	d013      	beq.n	801c7c0 <arm_cfft_q31+0x9c>
 801c798:	2980      	cmp	r1, #128	@ 0x80
 801c79a:	d1da      	bne.n	801c752 <arm_cfft_q31+0x2e>
 801c79c:	6862      	ldr	r2, [r4, #4]
 801c79e:	0028      	movs	r0, r5
 801c7a0:	f7ff fefe 	bl	801c5a0 <arm_cfft_radix4by2_inverse_q31>
 801c7a4:	e7d5      	b.n	801c752 <arm_cfft_q31+0x2e>
 801c7a6:	2380      	movs	r3, #128	@ 0x80
 801c7a8:	00db      	lsls	r3, r3, #3
 801c7aa:	4299      	cmp	r1, r3
 801c7ac:	d008      	beq.n	801c7c0 <arm_cfft_q31+0x9c>
 801c7ae:	d915      	bls.n	801c7dc <arm_cfft_q31+0xb8>
 801c7b0:	2380      	movs	r3, #128	@ 0x80
 801c7b2:	011b      	lsls	r3, r3, #4
 801c7b4:	4299      	cmp	r1, r3
 801c7b6:	d0f1      	beq.n	801c79c <arm_cfft_q31+0x78>
 801c7b8:	2380      	movs	r3, #128	@ 0x80
 801c7ba:	015b      	lsls	r3, r3, #5
 801c7bc:	4299      	cmp	r1, r3
 801c7be:	d1c8      	bne.n	801c752 <arm_cfft_q31+0x2e>
 801c7c0:	2301      	movs	r3, #1
 801c7c2:	6862      	ldr	r2, [r4, #4]
 801c7c4:	0028      	movs	r0, r5
 801c7c6:	f000 fab7 	bl	801cd38 <arm_radix4_butterfly_inverse_q31>
 801c7ca:	e7c2      	b.n	801c752 <arm_cfft_q31+0x2e>
 801c7cc:	2380      	movs	r3, #128	@ 0x80
 801c7ce:	009b      	lsls	r3, r3, #2
 801c7d0:	4299      	cmp	r1, r3
 801c7d2:	d0ba      	beq.n	801c74a <arm_cfft_q31+0x26>
 801c7d4:	e7bd      	b.n	801c752 <arm_cfft_q31+0x2e>
 801c7d6:	2910      	cmp	r1, #16
 801c7d8:	d1bb      	bne.n	801c752 <arm_cfft_q31+0x2e>
 801c7da:	e7cf      	b.n	801c77c <arm_cfft_q31+0x58>
 801c7dc:	2380      	movs	r3, #128	@ 0x80
 801c7de:	009b      	lsls	r3, r3, #2
 801c7e0:	4299      	cmp	r1, r3
 801c7e2:	d0db      	beq.n	801c79c <arm_cfft_q31+0x78>
 801c7e4:	e7b5      	b.n	801c752 <arm_cfft_q31+0x2e>
 801c7e6:	2910      	cmp	r1, #16
 801c7e8:	d1b3      	bne.n	801c752 <arm_cfft_q31+0x2e>
 801c7ea:	e7e9      	b.n	801c7c0 <arm_cfft_q31+0x9c>

0801c7ec <arm_radix4_butterfly_q31>:
 801c7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7ee:	464d      	mov	r5, r9
 801c7f0:	4644      	mov	r4, r8
 801c7f2:	465f      	mov	r7, fp
 801c7f4:	4656      	mov	r6, sl
 801c7f6:	469c      	mov	ip, r3
 801c7f8:	b4f0      	push	{r4, r5, r6, r7}
 801c7fa:	b0a7      	sub	sp, #156	@ 0x9c
 801c7fc:	9114      	str	r1, [sp, #80]	@ 0x50
 801c7fe:	0889      	lsrs	r1, r1, #2
 801c800:	9310      	str	r3, [sp, #64]	@ 0x40
 801c802:	00cb      	lsls	r3, r1, #3
 801c804:	0015      	movs	r5, r2
 801c806:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c808:	18c2      	adds	r2, r0, r3
 801c80a:	000c      	movs	r4, r1
 801c80c:	469a      	mov	sl, r3
 801c80e:	9124      	str	r1, [sp, #144]	@ 0x90
 801c810:	18d1      	adds	r1, r2, r3
 801c812:	4663      	mov	r3, ip
 801c814:	468b      	mov	fp, r1
 801c816:	0119      	lsls	r1, r3, #4
 801c818:	910d      	str	r1, [sp, #52]	@ 0x34
 801c81a:	00d9      	lsls	r1, r3, #3
 801c81c:	005b      	lsls	r3, r3, #1
 801c81e:	4463      	add	r3, ip
 801c820:	910e      	str	r1, [sp, #56]	@ 0x38
 801c822:	00d9      	lsls	r1, r3, #3
 801c824:	465b      	mov	r3, fp
 801c826:	44da      	add	sl, fp
 801c828:	4690      	mov	r8, r2
 801c82a:	4683      	mov	fp, r0
 801c82c:	4699      	mov	r9, r3
 801c82e:	9022      	str	r0, [sp, #136]	@ 0x88
 801c830:	9025      	str	r0, [sp, #148]	@ 0x94
 801c832:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c834:	9502      	str	r5, [sp, #8]
 801c836:	9500      	str	r5, [sp, #0]
 801c838:	9501      	str	r5, [sp, #4]
 801c83a:	9407      	str	r4, [sp, #28]
 801c83c:	465b      	mov	r3, fp
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	4642      	mov	r2, r8
 801c842:	111c      	asrs	r4, r3, #4
 801c844:	464b      	mov	r3, r9
 801c846:	4658      	mov	r0, fp
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	6812      	ldr	r2, [r2, #0]
 801c84c:	111b      	asrs	r3, r3, #4
 801c84e:	18e7      	adds	r7, r4, r3
 801c850:	1ae3      	subs	r3, r4, r3
 801c852:	1114      	asrs	r4, r2, #4
 801c854:	4652      	mov	r2, sl
 801c856:	6840      	ldr	r0, [r0, #4]
 801c858:	6812      	ldr	r2, [r2, #0]
 801c85a:	1105      	asrs	r5, r0, #4
 801c85c:	4648      	mov	r0, r9
 801c85e:	9303      	str	r3, [sp, #12]
 801c860:	1113      	asrs	r3, r2, #4
 801c862:	18e2      	adds	r2, r4, r3
 801c864:	465c      	mov	r4, fp
 801c866:	6840      	ldr	r0, [r0, #4]
 801c868:	1103      	asrs	r3, r0, #4
 801c86a:	18ee      	adds	r6, r5, r3
 801c86c:	1ae8      	subs	r0, r5, r3
 801c86e:	18bb      	adds	r3, r7, r2
 801c870:	6023      	str	r3, [r4, #0]
 801c872:	4644      	mov	r4, r8
 801c874:	6864      	ldr	r4, [r4, #4]
 801c876:	9004      	str	r0, [sp, #16]
 801c878:	1125      	asrs	r5, r4, #4
 801c87a:	4654      	mov	r4, sl
 801c87c:	6864      	ldr	r4, [r4, #4]
 801c87e:	1123      	asrs	r3, r4, #4
 801c880:	465c      	mov	r4, fp
 801c882:	18eb      	adds	r3, r5, r3
 801c884:	18f1      	adds	r1, r6, r3
 801c886:	6061      	str	r1, [r4, #4]
 801c888:	4655      	mov	r5, sl
 801c88a:	4644      	mov	r4, r8
 801c88c:	686d      	ldr	r5, [r5, #4]
 801c88e:	6864      	ldr	r4, [r4, #4]
 801c890:	1129      	asrs	r1, r5, #4
 801c892:	1124      	asrs	r4, r4, #4
 801c894:	1a64      	subs	r4, r4, r1
 801c896:	4641      	mov	r1, r8
 801c898:	6809      	ldr	r1, [r1, #0]
 801c89a:	9405      	str	r4, [sp, #20]
 801c89c:	1108      	asrs	r0, r1, #4
 801c89e:	4651      	mov	r1, sl
 801c8a0:	6809      	ldr	r1, [r1, #0]
 801c8a2:	1abc      	subs	r4, r7, r2
 801c8a4:	1109      	asrs	r1, r1, #4
 801c8a6:	1a41      	subs	r1, r0, r1
 801c8a8:	17e2      	asrs	r2, r4, #31
 801c8aa:	9106      	str	r1, [sp, #24]
 801c8ac:	0011      	movs	r1, r2
 801c8ae:	9a01      	ldr	r2, [sp, #4]
 801c8b0:	9108      	str	r1, [sp, #32]
 801c8b2:	6817      	ldr	r7, [r2, #0]
 801c8b4:	17fd      	asrs	r5, r7, #31
 801c8b6:	0028      	movs	r0, r5
 801c8b8:	1af5      	subs	r5, r6, r3
 801c8ba:	17ee      	asrs	r6, r5, #31
 801c8bc:	960a      	str	r6, [sp, #40]	@ 0x28
 801c8be:	6856      	ldr	r6, [r2, #4]
 801c8c0:	9009      	str	r0, [sp, #36]	@ 0x24
 801c8c2:	17f3      	asrs	r3, r6, #31
 801c8c4:	003a      	movs	r2, r7
 801c8c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c8c8:	0003      	movs	r3, r0
 801c8ca:	0020      	movs	r0, r4
 801c8cc:	f7e3 fe78 	bl	80005c0 <__aeabi_lmul>
 801c8d0:	0032      	movs	r2, r6
 801c8d2:	17f3      	asrs	r3, r6, #31
 801c8d4:	910c      	str	r1, [sp, #48]	@ 0x30
 801c8d6:	0028      	movs	r0, r5
 801c8d8:	17e9      	asrs	r1, r5, #31
 801c8da:	f7e3 fe71 	bl	80005c0 <__aeabi_lmul>
 801c8de:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c8e0:	002a      	movs	r2, r5
 801c8e2:	4684      	mov	ip, r0
 801c8e4:	4640      	mov	r0, r8
 801c8e6:	4461      	add	r1, ip
 801c8e8:	0049      	lsls	r1, r1, #1
 801c8ea:	6001      	str	r1, [r0, #0]
 801c8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c8ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c8f0:	0038      	movs	r0, r7
 801c8f2:	f7e3 fe65 	bl	80005c0 <__aeabi_lmul>
 801c8f6:	0032      	movs	r2, r6
 801c8f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c8fa:	000d      	movs	r5, r1
 801c8fc:	0020      	movs	r0, r4
 801c8fe:	9908      	ldr	r1, [sp, #32]
 801c900:	f7e3 fe5e 	bl	80005c0 <__aeabi_lmul>
 801c904:	4646      	mov	r6, r8
 801c906:	1a6d      	subs	r5, r5, r1
 801c908:	006d      	lsls	r5, r5, #1
 801c90a:	6075      	str	r5, [r6, #4]
 801c90c:	9903      	ldr	r1, [sp, #12]
 801c90e:	9d05      	ldr	r5, [sp, #20]
 801c910:	000c      	movs	r4, r1
 801c912:	46ac      	mov	ip, r5
 801c914:	4464      	add	r4, ip
 801c916:	17e6      	asrs	r6, r4, #31
 801c918:	0031      	movs	r1, r6
 801c91a:	9b00      	ldr	r3, [sp, #0]
 801c91c:	9804      	ldr	r0, [sp, #16]
 801c91e:	681e      	ldr	r6, [r3, #0]
 801c920:	17f7      	asrs	r7, r6, #31
 801c922:	9709      	str	r7, [sp, #36]	@ 0x24
 801c924:	9f06      	ldr	r7, [sp, #24]
 801c926:	0032      	movs	r2, r6
 801c928:	1bc7      	subs	r7, r0, r7
 801c92a:	17fd      	asrs	r5, r7, #31
 801c92c:	950a      	str	r5, [sp, #40]	@ 0x28
 801c92e:	685d      	ldr	r5, [r3, #4]
 801c930:	17f3      	asrs	r3, r6, #31
 801c932:	17e8      	asrs	r0, r5, #31
 801c934:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c936:	0020      	movs	r0, r4
 801c938:	9108      	str	r1, [sp, #32]
 801c93a:	f7e3 fe41 	bl	80005c0 <__aeabi_lmul>
 801c93e:	002a      	movs	r2, r5
 801c940:	17eb      	asrs	r3, r5, #31
 801c942:	910c      	str	r1, [sp, #48]	@ 0x30
 801c944:	0038      	movs	r0, r7
 801c946:	17f9      	asrs	r1, r7, #31
 801c948:	f7e3 fe3a 	bl	80005c0 <__aeabi_lmul>
 801c94c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c94e:	003a      	movs	r2, r7
 801c950:	4684      	mov	ip, r0
 801c952:	4648      	mov	r0, r9
 801c954:	4461      	add	r1, ip
 801c956:	0049      	lsls	r1, r1, #1
 801c958:	6001      	str	r1, [r0, #0]
 801c95a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c95c:	0030      	movs	r0, r6
 801c95e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c960:	f7e3 fe2e 	bl	80005c0 <__aeabi_lmul>
 801c964:	002a      	movs	r2, r5
 801c966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c968:	000e      	movs	r6, r1
 801c96a:	0020      	movs	r0, r4
 801c96c:	9908      	ldr	r1, [sp, #32]
 801c96e:	f7e3 fe27 	bl	80005c0 <__aeabi_lmul>
 801c972:	464c      	mov	r4, r9
 801c974:	9d05      	ldr	r5, [sp, #20]
 801c976:	1a76      	subs	r6, r6, r1
 801c978:	9903      	ldr	r1, [sp, #12]
 801c97a:	0076      	lsls	r6, r6, #1
 801c97c:	6066      	str	r6, [r4, #4]
 801c97e:	1b4c      	subs	r4, r1, r5
 801c980:	9e06      	ldr	r6, [sp, #24]
 801c982:	17e1      	asrs	r1, r4, #31
 801c984:	9103      	str	r1, [sp, #12]
 801c986:	9902      	ldr	r1, [sp, #8]
 801c988:	46b4      	mov	ip, r6
 801c98a:	680f      	ldr	r7, [r1, #0]
 801c98c:	9804      	ldr	r0, [sp, #16]
 801c98e:	17fd      	asrs	r5, r7, #31
 801c990:	002b      	movs	r3, r5
 801c992:	684e      	ldr	r6, [r1, #4]
 801c994:	4460      	add	r0, ip
 801c996:	0005      	movs	r5, r0
 801c998:	17c0      	asrs	r0, r0, #31
 801c99a:	9005      	str	r0, [sp, #20]
 801c99c:	17f0      	asrs	r0, r6, #31
 801c99e:	9006      	str	r0, [sp, #24]
 801c9a0:	003a      	movs	r2, r7
 801c9a2:	0020      	movs	r0, r4
 801c9a4:	17e1      	asrs	r1, r4, #31
 801c9a6:	9304      	str	r3, [sp, #16]
 801c9a8:	f7e3 fe0a 	bl	80005c0 <__aeabi_lmul>
 801c9ac:	0032      	movs	r2, r6
 801c9ae:	9108      	str	r1, [sp, #32]
 801c9b0:	17f3      	asrs	r3, r6, #31
 801c9b2:	0028      	movs	r0, r5
 801c9b4:	17e9      	asrs	r1, r5, #31
 801c9b6:	f7e3 fe03 	bl	80005c0 <__aeabi_lmul>
 801c9ba:	9808      	ldr	r0, [sp, #32]
 801c9bc:	002a      	movs	r2, r5
 801c9be:	4684      	mov	ip, r0
 801c9c0:	4650      	mov	r0, sl
 801c9c2:	4461      	add	r1, ip
 801c9c4:	0049      	lsls	r1, r1, #1
 801c9c6:	6001      	str	r1, [r0, #0]
 801c9c8:	9b05      	ldr	r3, [sp, #20]
 801c9ca:	9904      	ldr	r1, [sp, #16]
 801c9cc:	0038      	movs	r0, r7
 801c9ce:	f7e3 fdf7 	bl	80005c0 <__aeabi_lmul>
 801c9d2:	0020      	movs	r0, r4
 801c9d4:	2408      	movs	r4, #8
 801c9d6:	000d      	movs	r5, r1
 801c9d8:	0032      	movs	r2, r6
 801c9da:	9b06      	ldr	r3, [sp, #24]
 801c9dc:	9903      	ldr	r1, [sp, #12]
 801c9de:	f7e3 fdef 	bl	80005c0 <__aeabi_lmul>
 801c9e2:	46a4      	mov	ip, r4
 801c9e4:	4650      	mov	r0, sl
 801c9e6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c9e8:	44e3      	add	fp, ip
 801c9ea:	44e0      	add	r8, ip
 801c9ec:	44e1      	add	r9, ip
 801c9ee:	44e2      	add	sl, ip
 801c9f0:	46a4      	mov	ip, r4
 801c9f2:	1a6d      	subs	r5, r5, r1
 801c9f4:	006d      	lsls	r5, r5, #1
 801c9f6:	9a01      	ldr	r2, [sp, #4]
 801c9f8:	6045      	str	r5, [r0, #4]
 801c9fa:	9807      	ldr	r0, [sp, #28]
 801c9fc:	4462      	add	r2, ip
 801c9fe:	3801      	subs	r0, #1
 801ca00:	9201      	str	r2, [sp, #4]
 801ca02:	9007      	str	r0, [sp, #28]
 801ca04:	9b00      	ldr	r3, [sp, #0]
 801ca06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca08:	9902      	ldr	r1, [sp, #8]
 801ca0a:	4694      	mov	ip, r2
 801ca0c:	4463      	add	r3, ip
 801ca0e:	9300      	str	r3, [sp, #0]
 801ca10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca12:	469c      	mov	ip, r3
 801ca14:	4461      	add	r1, ip
 801ca16:	9102      	str	r1, [sp, #8]
 801ca18:	2800      	cmp	r0, #0
 801ca1a:	d000      	beq.n	801ca1e <arm_radix4_butterfly_q31+0x232>
 801ca1c:	e70e      	b.n	801c83c <arm_radix4_butterfly_q31+0x50>
 801ca1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ca20:	009b      	lsls	r3, r3, #2
 801ca22:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ca24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca26:	9320      	str	r3, [sp, #128]	@ 0x80
 801ca28:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ca2a:	2b04      	cmp	r3, #4
 801ca2c:	d800      	bhi.n	801ca30 <arm_radix4_butterfly_q31+0x244>
 801ca2e:	e180      	b.n	801cd32 <arm_radix4_butterfly_q31+0x546>
 801ca30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ca32:	0893      	lsrs	r3, r2, #2
 801ca34:	1e59      	subs	r1, r3, #1
 801ca36:	9321      	str	r3, [sp, #132]	@ 0x84
 801ca38:	00db      	lsls	r3, r3, #3
 801ca3a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801ca3c:	00d3      	lsls	r3, r2, #3
 801ca3e:	9300      	str	r3, [sp, #0]
 801ca40:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ca42:	911a      	str	r1, [sp, #104]	@ 0x68
 801ca44:	00da      	lsls	r2, r3, #3
 801ca46:	921e      	str	r2, [sp, #120]	@ 0x78
 801ca48:	011a      	lsls	r2, r3, #4
 801ca4a:	921d      	str	r2, [sp, #116]	@ 0x74
 801ca4c:	001a      	movs	r2, r3
 801ca4e:	4694      	mov	ip, r2
 801ca50:	005b      	lsls	r3, r3, #1
 801ca52:	4463      	add	r3, ip
 801ca54:	00db      	lsls	r3, r3, #3
 801ca56:	931c      	str	r3, [sp, #112]	@ 0x70
 801ca58:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ca5a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ca5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ca5e:	9318      	str	r3, [sp, #96]	@ 0x60
 801ca60:	9319      	str	r3, [sp, #100]	@ 0x64
 801ca62:	9316      	str	r3, [sp, #88]	@ 0x58
 801ca64:	2300      	movs	r3, #0
 801ca66:	9315      	str	r3, [sp, #84]	@ 0x54
 801ca68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ca6a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ca6c:	681a      	ldr	r2, [r3, #0]
 801ca6e:	685b      	ldr	r3, [r3, #4]
 801ca70:	9205      	str	r2, [sp, #20]
 801ca72:	9306      	str	r3, [sp, #24]
 801ca74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ca76:	468c      	mov	ip, r1
 801ca78:	681a      	ldr	r2, [r3, #0]
 801ca7a:	685b      	ldr	r3, [r3, #4]
 801ca7c:	9207      	str	r2, [sp, #28]
 801ca7e:	9308      	str	r3, [sp, #32]
 801ca80:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ca82:	681a      	ldr	r2, [r3, #0]
 801ca84:	685b      	ldr	r3, [r3, #4]
 801ca86:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca88:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ca8a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ca8c:	0013      	movs	r3, r2
 801ca8e:	4463      	add	r3, ip
 801ca90:	4698      	mov	r8, r3
 801ca92:	0013      	movs	r3, r2
 801ca94:	4442      	add	r2, r8
 801ca96:	4691      	mov	r9, r2
 801ca98:	001a      	movs	r2, r3
 801ca9a:	444a      	add	r2, r9
 801ca9c:	4692      	mov	sl, r2
 801ca9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801caa0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801caa2:	4293      	cmp	r3, r2
 801caa4:	d800      	bhi.n	801caa8 <arm_radix4_butterfly_q31+0x2bc>
 801caa6:	e0dd      	b.n	801cc64 <arm_radix4_butterfly_q31+0x478>
 801caa8:	4694      	mov	ip, r2
 801caaa:	468b      	mov	fp, r1
 801caac:	4644      	mov	r4, r8
 801caae:	4655      	mov	r5, sl
 801cab0:	9b07      	ldr	r3, [sp, #28]
 801cab2:	17db      	asrs	r3, r3, #31
 801cab4:	930c      	str	r3, [sp, #48]	@ 0x30
 801cab6:	9b08      	ldr	r3, [sp, #32]
 801cab8:	17db      	asrs	r3, r3, #31
 801caba:	930d      	str	r3, [sp, #52]	@ 0x34
 801cabc:	9b05      	ldr	r3, [sp, #20]
 801cabe:	17db      	asrs	r3, r3, #31
 801cac0:	930e      	str	r3, [sp, #56]	@ 0x38
 801cac2:	9b06      	ldr	r3, [sp, #24]
 801cac4:	17db      	asrs	r3, r3, #31
 801cac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caca:	17db      	asrs	r3, r3, #31
 801cacc:	9310      	str	r3, [sp, #64]	@ 0x40
 801cace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cad0:	17db      	asrs	r3, r3, #31
 801cad2:	9311      	str	r3, [sp, #68]	@ 0x44
 801cad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cad6:	4463      	add	r3, ip
 801cad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cada:	465b      	mov	r3, fp
 801cadc:	4659      	mov	r1, fp
 801cade:	681a      	ldr	r2, [r3, #0]
 801cae0:	464b      	mov	r3, r9
 801cae2:	684f      	ldr	r7, [r1, #4]
 801cae4:	4649      	mov	r1, r9
 801cae6:	681b      	ldr	r3, [r3, #0]
 801cae8:	18d6      	adds	r6, r2, r3
 801caea:	1ad3      	subs	r3, r2, r3
 801caec:	9301      	str	r3, [sp, #4]
 801caee:	684b      	ldr	r3, [r1, #4]
 801caf0:	18f8      	adds	r0, r7, r3
 801caf2:	1af9      	subs	r1, r7, r3
 801caf4:	6827      	ldr	r7, [r4, #0]
 801caf6:	9102      	str	r1, [sp, #8]
 801caf8:	003a      	movs	r2, r7
 801cafa:	682f      	ldr	r7, [r5, #0]
 801cafc:	46bc      	mov	ip, r7
 801cafe:	465f      	mov	r7, fp
 801cb00:	4462      	add	r2, ip
 801cb02:	18b3      	adds	r3, r6, r2
 801cb04:	109b      	asrs	r3, r3, #2
 801cb06:	603b      	str	r3, [r7, #0]
 801cb08:	6867      	ldr	r7, [r4, #4]
 801cb0a:	1ab6      	subs	r6, r6, r2
 801cb0c:	46b8      	mov	r8, r7
 801cb0e:	686f      	ldr	r7, [r5, #4]
 801cb10:	17f2      	asrs	r2, r6, #31
 801cb12:	46bc      	mov	ip, r7
 801cb14:	44e0      	add	r8, ip
 801cb16:	4643      	mov	r3, r8
 801cb18:	465f      	mov	r7, fp
 801cb1a:	18c1      	adds	r1, r0, r3
 801cb1c:	1089      	asrs	r1, r1, #2
 801cb1e:	6079      	str	r1, [r7, #4]
 801cb20:	9900      	ldr	r1, [sp, #0]
 801cb22:	4690      	mov	r8, r2
 801cb24:	468c      	mov	ip, r1
 801cb26:	6867      	ldr	r7, [r4, #4]
 801cb28:	6869      	ldr	r1, [r5, #4]
 801cb2a:	44e3      	add	fp, ip
 801cb2c:	1a7f      	subs	r7, r7, r1
 801cb2e:	9703      	str	r7, [sp, #12]
 801cb30:	6829      	ldr	r1, [r5, #0]
 801cb32:	6827      	ldr	r7, [r4, #0]
 801cb34:	1a7f      	subs	r7, r7, r1
 801cb36:	9704      	str	r7, [sp, #16]
 801cb38:	1ac7      	subs	r7, r0, r3
 801cb3a:	17fa      	asrs	r2, r7, #31
 801cb3c:	4692      	mov	sl, r2
 801cb3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb40:	9a07      	ldr	r2, [sp, #28]
 801cb42:	0030      	movs	r0, r6
 801cb44:	4641      	mov	r1, r8
 801cb46:	f7e3 fd3b 	bl	80005c0 <__aeabi_lmul>
 801cb4a:	9a08      	ldr	r2, [sp, #32]
 801cb4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb4e:	9112      	str	r1, [sp, #72]	@ 0x48
 801cb50:	0038      	movs	r0, r7
 801cb52:	4651      	mov	r1, sl
 801cb54:	f7e3 fd34 	bl	80005c0 <__aeabi_lmul>
 801cb58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cb5a:	9a07      	ldr	r2, [sp, #28]
 801cb5c:	4684      	mov	ip, r0
 801cb5e:	4461      	add	r1, ip
 801cb60:	1049      	asrs	r1, r1, #1
 801cb62:	6021      	str	r1, [r4, #0]
 801cb64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb66:	0038      	movs	r0, r7
 801cb68:	4651      	mov	r1, sl
 801cb6a:	f7e3 fd29 	bl	80005c0 <__aeabi_lmul>
 801cb6e:	9a08      	ldr	r2, [sp, #32]
 801cb70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb72:	000f      	movs	r7, r1
 801cb74:	0030      	movs	r0, r6
 801cb76:	4641      	mov	r1, r8
 801cb78:	f7e3 fd22 	bl	80005c0 <__aeabi_lmul>
 801cb7c:	9b00      	ldr	r3, [sp, #0]
 801cb7e:	9a01      	ldr	r2, [sp, #4]
 801cb80:	469c      	mov	ip, r3
 801cb82:	9803      	ldr	r0, [sp, #12]
 801cb84:	1a7f      	subs	r7, r7, r1
 801cb86:	107f      	asrs	r7, r7, #1
 801cb88:	6067      	str	r7, [r4, #4]
 801cb8a:	0016      	movs	r6, r2
 801cb8c:	4464      	add	r4, ip
 801cb8e:	4684      	mov	ip, r0
 801cb90:	4466      	add	r6, ip
 801cb92:	17f2      	asrs	r2, r6, #31
 801cb94:	4690      	mov	r8, r2
 801cb96:	9902      	ldr	r1, [sp, #8]
 801cb98:	9f04      	ldr	r7, [sp, #16]
 801cb9a:	0030      	movs	r0, r6
 801cb9c:	1bcf      	subs	r7, r1, r7
 801cb9e:	17fa      	asrs	r2, r7, #31
 801cba0:	4692      	mov	sl, r2
 801cba2:	4641      	mov	r1, r8
 801cba4:	9a05      	ldr	r2, [sp, #20]
 801cba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cba8:	f7e3 fd0a 	bl	80005c0 <__aeabi_lmul>
 801cbac:	9a06      	ldr	r2, [sp, #24]
 801cbae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbb0:	9112      	str	r1, [sp, #72]	@ 0x48
 801cbb2:	0038      	movs	r0, r7
 801cbb4:	4651      	mov	r1, sl
 801cbb6:	f7e3 fd03 	bl	80005c0 <__aeabi_lmul>
 801cbba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cbbc:	9a05      	ldr	r2, [sp, #20]
 801cbbe:	4684      	mov	ip, r0
 801cbc0:	4648      	mov	r0, r9
 801cbc2:	4461      	add	r1, ip
 801cbc4:	1049      	asrs	r1, r1, #1
 801cbc6:	6001      	str	r1, [r0, #0]
 801cbc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cbca:	0038      	movs	r0, r7
 801cbcc:	4651      	mov	r1, sl
 801cbce:	f7e3 fcf7 	bl	80005c0 <__aeabi_lmul>
 801cbd2:	9a06      	ldr	r2, [sp, #24]
 801cbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbd6:	000f      	movs	r7, r1
 801cbd8:	0030      	movs	r0, r6
 801cbda:	4641      	mov	r1, r8
 801cbdc:	f7e3 fcf0 	bl	80005c0 <__aeabi_lmul>
 801cbe0:	464e      	mov	r6, r9
 801cbe2:	9a00      	ldr	r2, [sp, #0]
 801cbe4:	9b01      	ldr	r3, [sp, #4]
 801cbe6:	4694      	mov	ip, r2
 801cbe8:	9803      	ldr	r0, [sp, #12]
 801cbea:	1a7f      	subs	r7, r7, r1
 801cbec:	107f      	asrs	r7, r7, #1
 801cbee:	6077      	str	r7, [r6, #4]
 801cbf0:	1a1e      	subs	r6, r3, r0
 801cbf2:	9b04      	ldr	r3, [sp, #16]
 801cbf4:	44e1      	add	r9, ip
 801cbf6:	469c      	mov	ip, r3
 801cbf8:	17f0      	asrs	r0, r6, #31
 801cbfa:	4680      	mov	r8, r0
 801cbfc:	9902      	ldr	r1, [sp, #8]
 801cbfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc00:	4461      	add	r1, ip
 801cc02:	17cb      	asrs	r3, r1, #31
 801cc04:	000f      	movs	r7, r1
 801cc06:	469a      	mov	sl, r3
 801cc08:	0030      	movs	r0, r6
 801cc0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cc0c:	4641      	mov	r1, r8
 801cc0e:	f7e3 fcd7 	bl	80005c0 <__aeabi_lmul>
 801cc12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cc16:	9101      	str	r1, [sp, #4]
 801cc18:	0038      	movs	r0, r7
 801cc1a:	4651      	mov	r1, sl
 801cc1c:	f7e3 fcd0 	bl	80005c0 <__aeabi_lmul>
 801cc20:	9801      	ldr	r0, [sp, #4]
 801cc22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc24:	4684      	mov	ip, r0
 801cc26:	4461      	add	r1, ip
 801cc28:	1049      	asrs	r1, r1, #1
 801cc2a:	6029      	str	r1, [r5, #0]
 801cc2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cc2e:	0038      	movs	r0, r7
 801cc30:	4651      	mov	r1, sl
 801cc32:	f7e3 fcc5 	bl	80005c0 <__aeabi_lmul>
 801cc36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cc38:	000f      	movs	r7, r1
 801cc3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc3c:	0030      	movs	r0, r6
 801cc3e:	4641      	mov	r1, r8
 801cc40:	f7e3 fcbe 	bl	80005c0 <__aeabi_lmul>
 801cc44:	1a7f      	subs	r7, r7, r1
 801cc46:	107f      	asrs	r7, r7, #1
 801cc48:	606f      	str	r7, [r5, #4]
 801cc4a:	9a00      	ldr	r2, [sp, #0]
 801cc4c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cc4e:	4694      	mov	ip, r2
 801cc50:	4465      	add	r5, ip
 801cc52:	468c      	mov	ip, r1
 801cc54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cc56:	0013      	movs	r3, r2
 801cc58:	4462      	add	r2, ip
 801cc5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cc5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cc5e:	429a      	cmp	r2, r3
 801cc60:	d900      	bls.n	801cc64 <arm_radix4_butterfly_q31+0x478>
 801cc62:	e73a      	b.n	801cada <arm_radix4_butterfly_q31+0x2ee>
 801cc64:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801cc66:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cc68:	468c      	mov	ip, r1
 801cc6a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801cc6c:	4462      	add	r2, ip
 801cc6e:	468c      	mov	ip, r1
 801cc70:	9216      	str	r2, [sp, #88]	@ 0x58
 801cc72:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801cc74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cc76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cc78:	4462      	add	r2, ip
 801cc7a:	468c      	mov	ip, r1
 801cc7c:	9219      	str	r2, [sp, #100]	@ 0x64
 801cc7e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cc80:	3301      	adds	r3, #1
 801cc82:	4462      	add	r2, ip
 801cc84:	9218      	str	r2, [sp, #96]	@ 0x60
 801cc86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cc88:	9315      	str	r3, [sp, #84]	@ 0x54
 801cc8a:	3208      	adds	r2, #8
 801cc8c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801cc8e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cc90:	4293      	cmp	r3, r2
 801cc92:	d800      	bhi.n	801cc96 <arm_radix4_butterfly_q31+0x4aa>
 801cc94:	e6e8      	b.n	801ca68 <arm_radix4_butterfly_q31+0x27c>
 801cc96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cc98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801cc9a:	009b      	lsls	r3, r3, #2
 801cc9c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801cc9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cca0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801cca2:	089b      	lsrs	r3, r3, #2
 801cca4:	9320      	str	r3, [sp, #128]	@ 0x80
 801cca6:	2b04      	cmp	r3, #4
 801cca8:	d900      	bls.n	801ccac <arm_radix4_butterfly_q31+0x4c0>
 801ccaa:	e6c1      	b.n	801ca30 <arm_radix4_butterfly_q31+0x244>
 801ccac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ccae:	469a      	mov	sl, r3
 801ccb0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ccb2:	691c      	ldr	r4, [r3, #16]
 801ccb4:	685a      	ldr	r2, [r3, #4]
 801ccb6:	46a1      	mov	r9, r4
 801ccb8:	4690      	mov	r8, r2
 801ccba:	6819      	ldr	r1, [r3, #0]
 801ccbc:	689a      	ldr	r2, [r3, #8]
 801ccbe:	699f      	ldr	r7, [r3, #24]
 801ccc0:	188d      	adds	r5, r1, r2
 801ccc2:	444d      	add	r5, r9
 801ccc4:	19ed      	adds	r5, r5, r7
 801ccc6:	69de      	ldr	r6, [r3, #28]
 801ccc8:	601d      	str	r5, [r3, #0]
 801ccca:	4645      	mov	r5, r8
 801cccc:	46b4      	mov	ip, r6
 801ccce:	68d8      	ldr	r0, [r3, #12]
 801ccd0:	695c      	ldr	r4, [r3, #20]
 801ccd2:	182d      	adds	r5, r5, r0
 801ccd4:	192d      	adds	r5, r5, r4
 801ccd6:	4465      	add	r5, ip
 801ccd8:	605d      	str	r5, [r3, #4]
 801ccda:	1a8d      	subs	r5, r1, r2
 801ccdc:	444d      	add	r5, r9
 801ccde:	1bed      	subs	r5, r5, r7
 801cce0:	609d      	str	r5, [r3, #8]
 801cce2:	4645      	mov	r5, r8
 801cce4:	1a2d      	subs	r5, r5, r0
 801cce6:	192d      	adds	r5, r5, r4
 801cce8:	1bad      	subs	r5, r5, r6
 801ccea:	464e      	mov	r6, r9
 801ccec:	60dd      	str	r5, [r3, #12]
 801ccee:	180d      	adds	r5, r1, r0
 801ccf0:	1bad      	subs	r5, r5, r6
 801ccf2:	4666      	mov	r6, ip
 801ccf4:	1bad      	subs	r5, r5, r6
 801ccf6:	611d      	str	r5, [r3, #16]
 801ccf8:	4645      	mov	r5, r8
 801ccfa:	1aad      	subs	r5, r5, r2
 801ccfc:	4442      	add	r2, r8
 801ccfe:	1b12      	subs	r2, r2, r4
 801cd00:	1bd2      	subs	r2, r2, r7
 801cd02:	1a08      	subs	r0, r1, r0
 801cd04:	61da      	str	r2, [r3, #28]
 801cd06:	4649      	mov	r1, r9
 801cd08:	2201      	movs	r2, #1
 801cd0a:	1a41      	subs	r1, r0, r1
 801cd0c:	4252      	negs	r2, r2
 801cd0e:	4461      	add	r1, ip
 801cd10:	4694      	mov	ip, r2
 801cd12:	44e2      	add	sl, ip
 801cd14:	4652      	mov	r2, sl
 801cd16:	1b2d      	subs	r5, r5, r4
 801cd18:	19ed      	adds	r5, r5, r7
 801cd1a:	615d      	str	r5, [r3, #20]
 801cd1c:	6199      	str	r1, [r3, #24]
 801cd1e:	3320      	adds	r3, #32
 801cd20:	2a00      	cmp	r2, #0
 801cd22:	d1c6      	bne.n	801ccb2 <arm_radix4_butterfly_q31+0x4c6>
 801cd24:	b027      	add	sp, #156	@ 0x9c
 801cd26:	bc3c      	pop	{r2, r3, r4, r5}
 801cd28:	4690      	mov	r8, r2
 801cd2a:	4699      	mov	r9, r3
 801cd2c:	46a2      	mov	sl, r4
 801cd2e:	46ab      	mov	fp, r5
 801cd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd32:	469a      	mov	sl, r3
 801cd34:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801cd36:	e7bc      	b.n	801ccb2 <arm_radix4_butterfly_q31+0x4c6>

0801cd38 <arm_radix4_butterfly_inverse_q31>:
 801cd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd3a:	464d      	mov	r5, r9
 801cd3c:	4644      	mov	r4, r8
 801cd3e:	465f      	mov	r7, fp
 801cd40:	4656      	mov	r6, sl
 801cd42:	b4f0      	push	{r4, r5, r6, r7}
 801cd44:	b0a7      	sub	sp, #156	@ 0x9c
 801cd46:	469c      	mov	ip, r3
 801cd48:	9114      	str	r1, [sp, #80]	@ 0x50
 801cd4a:	0889      	lsrs	r1, r1, #2
 801cd4c:	9310      	str	r3, [sp, #64]	@ 0x40
 801cd4e:	00cb      	lsls	r3, r1, #3
 801cd50:	0015      	movs	r5, r2
 801cd52:	9223      	str	r2, [sp, #140]	@ 0x8c
 801cd54:	18c2      	adds	r2, r0, r3
 801cd56:	000c      	movs	r4, r1
 801cd58:	9124      	str	r1, [sp, #144]	@ 0x90
 801cd5a:	18d1      	adds	r1, r2, r3
 801cd5c:	468b      	mov	fp, r1
 801cd5e:	469a      	mov	sl, r3
 801cd60:	4663      	mov	r3, ip
 801cd62:	44da      	add	sl, fp
 801cd64:	46d0      	mov	r8, sl
 801cd66:	4681      	mov	r9, r0
 801cd68:	4692      	mov	sl, r2
 801cd6a:	0119      	lsls	r1, r3, #4
 801cd6c:	910d      	str	r1, [sp, #52]	@ 0x34
 801cd6e:	00d9      	lsls	r1, r3, #3
 801cd70:	005b      	lsls	r3, r3, #1
 801cd72:	4463      	add	r3, ip
 801cd74:	910e      	str	r1, [sp, #56]	@ 0x38
 801cd76:	00d9      	lsls	r1, r3, #3
 801cd78:	9022      	str	r0, [sp, #136]	@ 0x88
 801cd7a:	9025      	str	r0, [sp, #148]	@ 0x94
 801cd7c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801cd7e:	9502      	str	r5, [sp, #8]
 801cd80:	9500      	str	r5, [sp, #0]
 801cd82:	9501      	str	r5, [sp, #4]
 801cd84:	9409      	str	r4, [sp, #36]	@ 0x24
 801cd86:	464b      	mov	r3, r9
 801cd88:	681b      	ldr	r3, [r3, #0]
 801cd8a:	4652      	mov	r2, sl
 801cd8c:	111c      	asrs	r4, r3, #4
 801cd8e:	465b      	mov	r3, fp
 801cd90:	4648      	mov	r0, r9
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	6812      	ldr	r2, [r2, #0]
 801cd96:	6840      	ldr	r0, [r0, #4]
 801cd98:	111b      	asrs	r3, r3, #4
 801cd9a:	18e7      	adds	r7, r4, r3
 801cd9c:	1ae3      	subs	r3, r4, r3
 801cd9e:	1114      	asrs	r4, r2, #4
 801cda0:	4642      	mov	r2, r8
 801cda2:	1105      	asrs	r5, r0, #4
 801cda4:	4658      	mov	r0, fp
 801cda6:	6812      	ldr	r2, [r2, #0]
 801cda8:	6840      	ldr	r0, [r0, #4]
 801cdaa:	9303      	str	r3, [sp, #12]
 801cdac:	1113      	asrs	r3, r2, #4
 801cdae:	18e2      	adds	r2, r4, r3
 801cdb0:	1103      	asrs	r3, r0, #4
 801cdb2:	18ee      	adds	r6, r5, r3
 801cdb4:	1ae8      	subs	r0, r5, r3
 801cdb6:	464d      	mov	r5, r9
 801cdb8:	18bb      	adds	r3, r7, r2
 801cdba:	602b      	str	r3, [r5, #0]
 801cdbc:	4641      	mov	r1, r8
 801cdbe:	4655      	mov	r5, sl
 801cdc0:	6849      	ldr	r1, [r1, #4]
 801cdc2:	686d      	ldr	r5, [r5, #4]
 801cdc4:	110b      	asrs	r3, r1, #4
 801cdc6:	112d      	asrs	r5, r5, #4
 801cdc8:	18eb      	adds	r3, r5, r3
 801cdca:	464d      	mov	r5, r9
 801cdcc:	18f1      	adds	r1, r6, r3
 801cdce:	6069      	str	r1, [r5, #4]
 801cdd0:	4655      	mov	r5, sl
 801cdd2:	686d      	ldr	r5, [r5, #4]
 801cdd4:	9004      	str	r0, [sp, #16]
 801cdd6:	112c      	asrs	r4, r5, #4
 801cdd8:	4645      	mov	r5, r8
 801cdda:	686d      	ldr	r5, [r5, #4]
 801cddc:	1129      	asrs	r1, r5, #4
 801cdde:	1a65      	subs	r5, r4, r1
 801cde0:	4651      	mov	r1, sl
 801cde2:	6809      	ldr	r1, [r1, #0]
 801cde4:	1abc      	subs	r4, r7, r2
 801cde6:	1108      	asrs	r0, r1, #4
 801cde8:	4641      	mov	r1, r8
 801cdea:	17e2      	asrs	r2, r4, #31
 801cdec:	6809      	ldr	r1, [r1, #0]
 801cdee:	9207      	str	r2, [sp, #28]
 801cdf0:	9a01      	ldr	r2, [sp, #4]
 801cdf2:	1109      	asrs	r1, r1, #4
 801cdf4:	6817      	ldr	r7, [r2, #0]
 801cdf6:	1a41      	subs	r1, r0, r1
 801cdf8:	9106      	str	r1, [sp, #24]
 801cdfa:	0039      	movs	r1, r7
 801cdfc:	17ff      	asrs	r7, r7, #31
 801cdfe:	0038      	movs	r0, r7
 801ce00:	9505      	str	r5, [sp, #20]
 801ce02:	1af5      	subs	r5, r6, r3
 801ce04:	17ef      	asrs	r7, r5, #31
 801ce06:	970b      	str	r7, [sp, #44]	@ 0x2c
 801ce08:	6857      	ldr	r7, [r2, #4]
 801ce0a:	0003      	movs	r3, r0
 801ce0c:	17fe      	asrs	r6, r7, #31
 801ce0e:	000a      	movs	r2, r1
 801ce10:	9108      	str	r1, [sp, #32]
 801ce12:	900a      	str	r0, [sp, #40]	@ 0x28
 801ce14:	17e1      	asrs	r1, r4, #31
 801ce16:	0020      	movs	r0, r4
 801ce18:	960c      	str	r6, [sp, #48]	@ 0x30
 801ce1a:	f7e3 fbd1 	bl	80005c0 <__aeabi_lmul>
 801ce1e:	003a      	movs	r2, r7
 801ce20:	17fb      	asrs	r3, r7, #31
 801ce22:	000e      	movs	r6, r1
 801ce24:	0028      	movs	r0, r5
 801ce26:	17e9      	asrs	r1, r5, #31
 801ce28:	f7e3 fbca 	bl	80005c0 <__aeabi_lmul>
 801ce2c:	4653      	mov	r3, sl
 801ce2e:	1a76      	subs	r6, r6, r1
 801ce30:	0076      	lsls	r6, r6, #1
 801ce32:	601e      	str	r6, [r3, #0]
 801ce34:	002a      	movs	r2, r5
 801ce36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce38:	9808      	ldr	r0, [sp, #32]
 801ce3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ce3c:	f7e3 fbc0 	bl	80005c0 <__aeabi_lmul>
 801ce40:	003a      	movs	r2, r7
 801ce42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ce44:	000d      	movs	r5, r1
 801ce46:	0020      	movs	r0, r4
 801ce48:	9907      	ldr	r1, [sp, #28]
 801ce4a:	f7e3 fbb9 	bl	80005c0 <__aeabi_lmul>
 801ce4e:	4657      	mov	r7, sl
 801ce50:	186d      	adds	r5, r5, r1
 801ce52:	006d      	lsls	r5, r5, #1
 801ce54:	607d      	str	r5, [r7, #4]
 801ce56:	9b03      	ldr	r3, [sp, #12]
 801ce58:	9e06      	ldr	r6, [sp, #24]
 801ce5a:	9d05      	ldr	r5, [sp, #20]
 801ce5c:	46b4      	mov	ip, r6
 801ce5e:	1b5d      	subs	r5, r3, r5
 801ce60:	9b00      	ldr	r3, [sp, #0]
 801ce62:	17ef      	asrs	r7, r5, #31
 801ce64:	0039      	movs	r1, r7
 801ce66:	681f      	ldr	r7, [r3, #0]
 801ce68:	17fc      	asrs	r4, r7, #31
 801ce6a:	0020      	movs	r0, r4
 801ce6c:	9c04      	ldr	r4, [sp, #16]
 801ce6e:	4464      	add	r4, ip
 801ce70:	17e6      	asrs	r6, r4, #31
 801ce72:	9407      	str	r4, [sp, #28]
 801ce74:	9608      	str	r6, [sp, #32]
 801ce76:	685e      	ldr	r6, [r3, #4]
 801ce78:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ce7a:	17f2      	asrs	r2, r6, #31
 801ce7c:	0003      	movs	r3, r0
 801ce7e:	920c      	str	r2, [sp, #48]	@ 0x30
 801ce80:	0028      	movs	r0, r5
 801ce82:	003a      	movs	r2, r7
 801ce84:	910a      	str	r1, [sp, #40]	@ 0x28
 801ce86:	f7e3 fb9b 	bl	80005c0 <__aeabi_lmul>
 801ce8a:	0032      	movs	r2, r6
 801ce8c:	17f3      	asrs	r3, r6, #31
 801ce8e:	9807      	ldr	r0, [sp, #28]
 801ce90:	000c      	movs	r4, r1
 801ce92:	9908      	ldr	r1, [sp, #32]
 801ce94:	f7e3 fb94 	bl	80005c0 <__aeabi_lmul>
 801ce98:	4658      	mov	r0, fp
 801ce9a:	1a64      	subs	r4, r4, r1
 801ce9c:	0064      	lsls	r4, r4, #1
 801ce9e:	9a07      	ldr	r2, [sp, #28]
 801cea0:	6004      	str	r4, [r0, #0]
 801cea2:	9b08      	ldr	r3, [sp, #32]
 801cea4:	0038      	movs	r0, r7
 801cea6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cea8:	f7e3 fb8a 	bl	80005c0 <__aeabi_lmul>
 801ceac:	0032      	movs	r2, r6
 801ceae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ceb0:	000c      	movs	r4, r1
 801ceb2:	0028      	movs	r0, r5
 801ceb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ceb6:	f7e3 fb83 	bl	80005c0 <__aeabi_lmul>
 801ceba:	9d05      	ldr	r5, [sp, #20]
 801cebc:	465f      	mov	r7, fp
 801cebe:	46ac      	mov	ip, r5
 801cec0:	1864      	adds	r4, r4, r1
 801cec2:	9903      	ldr	r1, [sp, #12]
 801cec4:	0064      	lsls	r4, r4, #1
 801cec6:	4461      	add	r1, ip
 801cec8:	607c      	str	r4, [r7, #4]
 801ceca:	000c      	movs	r4, r1
 801cecc:	17c9      	asrs	r1, r1, #31
 801cece:	9105      	str	r1, [sp, #20]
 801ced0:	9902      	ldr	r1, [sp, #8]
 801ced2:	9804      	ldr	r0, [sp, #16]
 801ced4:	680d      	ldr	r5, [r1, #0]
 801ced6:	9e06      	ldr	r6, [sp, #24]
 801ced8:	002b      	movs	r3, r5
 801ceda:	17ed      	asrs	r5, r5, #31
 801cedc:	684f      	ldr	r7, [r1, #4]
 801cede:	9503      	str	r5, [sp, #12]
 801cee0:	1b85      	subs	r5, r0, r6
 801cee2:	17e8      	asrs	r0, r5, #31
 801cee4:	001a      	movs	r2, r3
 801cee6:	9006      	str	r0, [sp, #24]
 801cee8:	17fe      	asrs	r6, r7, #31
 801ceea:	9304      	str	r3, [sp, #16]
 801ceec:	0020      	movs	r0, r4
 801ceee:	9b03      	ldr	r3, [sp, #12]
 801cef0:	17e1      	asrs	r1, r4, #31
 801cef2:	9607      	str	r6, [sp, #28]
 801cef4:	f7e3 fb64 	bl	80005c0 <__aeabi_lmul>
 801cef8:	003a      	movs	r2, r7
 801cefa:	000e      	movs	r6, r1
 801cefc:	17fb      	asrs	r3, r7, #31
 801cefe:	0028      	movs	r0, r5
 801cf00:	17e9      	asrs	r1, r5, #31
 801cf02:	f7e3 fb5d 	bl	80005c0 <__aeabi_lmul>
 801cf06:	4640      	mov	r0, r8
 801cf08:	1a76      	subs	r6, r6, r1
 801cf0a:	0076      	lsls	r6, r6, #1
 801cf0c:	002a      	movs	r2, r5
 801cf0e:	9b06      	ldr	r3, [sp, #24]
 801cf10:	6006      	str	r6, [r0, #0]
 801cf12:	9903      	ldr	r1, [sp, #12]
 801cf14:	9804      	ldr	r0, [sp, #16]
 801cf16:	f7e3 fb53 	bl	80005c0 <__aeabi_lmul>
 801cf1a:	0020      	movs	r0, r4
 801cf1c:	2408      	movs	r4, #8
 801cf1e:	9b07      	ldr	r3, [sp, #28]
 801cf20:	000d      	movs	r5, r1
 801cf22:	003a      	movs	r2, r7
 801cf24:	9905      	ldr	r1, [sp, #20]
 801cf26:	f7e3 fb4b 	bl	80005c0 <__aeabi_lmul>
 801cf2a:	4640      	mov	r0, r8
 801cf2c:	46a4      	mov	ip, r4
 801cf2e:	186d      	adds	r5, r5, r1
 801cf30:	006d      	lsls	r5, r5, #1
 801cf32:	6045      	str	r5, [r0, #4]
 801cf34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cf36:	44e1      	add	r9, ip
 801cf38:	3801      	subs	r0, #1
 801cf3a:	9009      	str	r0, [sp, #36]	@ 0x24
 801cf3c:	9a01      	ldr	r2, [sp, #4]
 801cf3e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801cf40:	44e2      	add	sl, ip
 801cf42:	44e3      	add	fp, ip
 801cf44:	44e0      	add	r8, ip
 801cf46:	46a4      	mov	ip, r4
 801cf48:	4462      	add	r2, ip
 801cf4a:	9201      	str	r2, [sp, #4]
 801cf4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cf4e:	9b00      	ldr	r3, [sp, #0]
 801cf50:	4694      	mov	ip, r2
 801cf52:	4463      	add	r3, ip
 801cf54:	9300      	str	r3, [sp, #0]
 801cf56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf58:	9902      	ldr	r1, [sp, #8]
 801cf5a:	469c      	mov	ip, r3
 801cf5c:	4461      	add	r1, ip
 801cf5e:	9102      	str	r1, [sp, #8]
 801cf60:	2800      	cmp	r0, #0
 801cf62:	d000      	beq.n	801cf66 <arm_radix4_butterfly_inverse_q31+0x22e>
 801cf64:	e70f      	b.n	801cd86 <arm_radix4_butterfly_inverse_q31+0x4e>
 801cf66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf68:	009b      	lsls	r3, r3, #2
 801cf6a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801cf6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cf6e:	9320      	str	r3, [sp, #128]	@ 0x80
 801cf70:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cf72:	2b04      	cmp	r3, #4
 801cf74:	d800      	bhi.n	801cf78 <arm_radix4_butterfly_inverse_q31+0x240>
 801cf76:	e17c      	b.n	801d272 <arm_radix4_butterfly_inverse_q31+0x53a>
 801cf78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cf7a:	0893      	lsrs	r3, r2, #2
 801cf7c:	1e59      	subs	r1, r3, #1
 801cf7e:	9321      	str	r3, [sp, #132]	@ 0x84
 801cf80:	00db      	lsls	r3, r3, #3
 801cf82:	931b      	str	r3, [sp, #108]	@ 0x6c
 801cf84:	00d3      	lsls	r3, r2, #3
 801cf86:	9300      	str	r3, [sp, #0]
 801cf88:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cf8a:	911a      	str	r1, [sp, #104]	@ 0x68
 801cf8c:	00da      	lsls	r2, r3, #3
 801cf8e:	921e      	str	r2, [sp, #120]	@ 0x78
 801cf90:	011a      	lsls	r2, r3, #4
 801cf92:	921d      	str	r2, [sp, #116]	@ 0x74
 801cf94:	001a      	movs	r2, r3
 801cf96:	4694      	mov	ip, r2
 801cf98:	005b      	lsls	r3, r3, #1
 801cf9a:	4463      	add	r3, ip
 801cf9c:	00db      	lsls	r3, r3, #3
 801cf9e:	931c      	str	r3, [sp, #112]	@ 0x70
 801cfa0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cfa2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cfa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cfa6:	9318      	str	r3, [sp, #96]	@ 0x60
 801cfa8:	9319      	str	r3, [sp, #100]	@ 0x64
 801cfaa:	9316      	str	r3, [sp, #88]	@ 0x58
 801cfac:	2300      	movs	r3, #0
 801cfae:	9315      	str	r3, [sp, #84]	@ 0x54
 801cfb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cfb2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cfb4:	681a      	ldr	r2, [r3, #0]
 801cfb6:	685b      	ldr	r3, [r3, #4]
 801cfb8:	9205      	str	r2, [sp, #20]
 801cfba:	9306      	str	r3, [sp, #24]
 801cfbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cfbe:	468c      	mov	ip, r1
 801cfc0:	681a      	ldr	r2, [r3, #0]
 801cfc2:	685b      	ldr	r3, [r3, #4]
 801cfc4:	9207      	str	r2, [sp, #28]
 801cfc6:	9308      	str	r3, [sp, #32]
 801cfc8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cfca:	681a      	ldr	r2, [r3, #0]
 801cfcc:	685b      	ldr	r3, [r3, #4]
 801cfce:	9209      	str	r2, [sp, #36]	@ 0x24
 801cfd0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801cfd2:	930a      	str	r3, [sp, #40]	@ 0x28
 801cfd4:	0013      	movs	r3, r2
 801cfd6:	4463      	add	r3, ip
 801cfd8:	4698      	mov	r8, r3
 801cfda:	0013      	movs	r3, r2
 801cfdc:	4442      	add	r2, r8
 801cfde:	4691      	mov	r9, r2
 801cfe0:	001a      	movs	r2, r3
 801cfe2:	444a      	add	r2, r9
 801cfe4:	4692      	mov	sl, r2
 801cfe6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cfe8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cfea:	4293      	cmp	r3, r2
 801cfec:	d800      	bhi.n	801cff0 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801cfee:	e0d9      	b.n	801d1a4 <arm_radix4_butterfly_inverse_q31+0x46c>
 801cff0:	4694      	mov	ip, r2
 801cff2:	4644      	mov	r4, r8
 801cff4:	4655      	mov	r5, sl
 801cff6:	4688      	mov	r8, r1
 801cff8:	9b07      	ldr	r3, [sp, #28]
 801cffa:	17db      	asrs	r3, r3, #31
 801cffc:	930c      	str	r3, [sp, #48]	@ 0x30
 801cffe:	9b08      	ldr	r3, [sp, #32]
 801d000:	17db      	asrs	r3, r3, #31
 801d002:	930d      	str	r3, [sp, #52]	@ 0x34
 801d004:	9b05      	ldr	r3, [sp, #20]
 801d006:	17db      	asrs	r3, r3, #31
 801d008:	930e      	str	r3, [sp, #56]	@ 0x38
 801d00a:	9b06      	ldr	r3, [sp, #24]
 801d00c:	17db      	asrs	r3, r3, #31
 801d00e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d012:	17db      	asrs	r3, r3, #31
 801d014:	9310      	str	r3, [sp, #64]	@ 0x40
 801d016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d018:	17db      	asrs	r3, r3, #31
 801d01a:	9311      	str	r3, [sp, #68]	@ 0x44
 801d01c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d01e:	4463      	add	r3, ip
 801d020:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d022:	4643      	mov	r3, r8
 801d024:	4641      	mov	r1, r8
 801d026:	681a      	ldr	r2, [r3, #0]
 801d028:	464b      	mov	r3, r9
 801d02a:	684f      	ldr	r7, [r1, #4]
 801d02c:	4649      	mov	r1, r9
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	18d6      	adds	r6, r2, r3
 801d032:	1ad3      	subs	r3, r2, r3
 801d034:	9301      	str	r3, [sp, #4]
 801d036:	684b      	ldr	r3, [r1, #4]
 801d038:	1af9      	subs	r1, r7, r3
 801d03a:	9102      	str	r1, [sp, #8]
 801d03c:	6829      	ldr	r1, [r5, #0]
 801d03e:	18f8      	adds	r0, r7, r3
 801d040:	468c      	mov	ip, r1
 801d042:	6827      	ldr	r7, [r4, #0]
 801d044:	4467      	add	r7, ip
 801d046:	003a      	movs	r2, r7
 801d048:	19f3      	adds	r3, r6, r7
 801d04a:	4647      	mov	r7, r8
 801d04c:	109b      	asrs	r3, r3, #2
 801d04e:	603b      	str	r3, [r7, #0]
 801d050:	6869      	ldr	r1, [r5, #4]
 801d052:	6867      	ldr	r7, [r4, #4]
 801d054:	468c      	mov	ip, r1
 801d056:	4467      	add	r7, ip
 801d058:	003b      	movs	r3, r7
 801d05a:	19c1      	adds	r1, r0, r7
 801d05c:	4647      	mov	r7, r8
 801d05e:	1ab6      	subs	r6, r6, r2
 801d060:	1089      	asrs	r1, r1, #2
 801d062:	6079      	str	r1, [r7, #4]
 801d064:	17f2      	asrs	r2, r6, #31
 801d066:	9900      	ldr	r1, [sp, #0]
 801d068:	4692      	mov	sl, r2
 801d06a:	468c      	mov	ip, r1
 801d06c:	6867      	ldr	r7, [r4, #4]
 801d06e:	6869      	ldr	r1, [r5, #4]
 801d070:	44e0      	add	r8, ip
 801d072:	1a7f      	subs	r7, r7, r1
 801d074:	9703      	str	r7, [sp, #12]
 801d076:	6821      	ldr	r1, [r4, #0]
 801d078:	682f      	ldr	r7, [r5, #0]
 801d07a:	1bc9      	subs	r1, r1, r7
 801d07c:	1ac7      	subs	r7, r0, r3
 801d07e:	17fa      	asrs	r2, r7, #31
 801d080:	4693      	mov	fp, r2
 801d082:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d084:	9a07      	ldr	r2, [sp, #28]
 801d086:	9104      	str	r1, [sp, #16]
 801d088:	0030      	movs	r0, r6
 801d08a:	4651      	mov	r1, sl
 801d08c:	f7e3 fa98 	bl	80005c0 <__aeabi_lmul>
 801d090:	9a08      	ldr	r2, [sp, #32]
 801d092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d094:	9112      	str	r1, [sp, #72]	@ 0x48
 801d096:	0038      	movs	r0, r7
 801d098:	4659      	mov	r1, fp
 801d09a:	f7e3 fa91 	bl	80005c0 <__aeabi_lmul>
 801d09e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d0a0:	9a07      	ldr	r2, [sp, #28]
 801d0a2:	1a41      	subs	r1, r0, r1
 801d0a4:	1049      	asrs	r1, r1, #1
 801d0a6:	6021      	str	r1, [r4, #0]
 801d0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0aa:	0038      	movs	r0, r7
 801d0ac:	4659      	mov	r1, fp
 801d0ae:	f7e3 fa87 	bl	80005c0 <__aeabi_lmul>
 801d0b2:	9a08      	ldr	r2, [sp, #32]
 801d0b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d0b6:	000f      	movs	r7, r1
 801d0b8:	0030      	movs	r0, r6
 801d0ba:	4651      	mov	r1, sl
 801d0bc:	f7e3 fa80 	bl	80005c0 <__aeabi_lmul>
 801d0c0:	9b00      	ldr	r3, [sp, #0]
 801d0c2:	187f      	adds	r7, r7, r1
 801d0c4:	469c      	mov	ip, r3
 801d0c6:	107f      	asrs	r7, r7, #1
 801d0c8:	6067      	str	r7, [r4, #4]
 801d0ca:	9a01      	ldr	r2, [sp, #4]
 801d0cc:	9f03      	ldr	r7, [sp, #12]
 801d0ce:	9802      	ldr	r0, [sp, #8]
 801d0d0:	1bd7      	subs	r7, r2, r7
 801d0d2:	17fe      	asrs	r6, r7, #31
 801d0d4:	0031      	movs	r1, r6
 801d0d6:	9e04      	ldr	r6, [sp, #16]
 801d0d8:	4682      	mov	sl, r0
 801d0da:	4464      	add	r4, ip
 801d0dc:	46b4      	mov	ip, r6
 801d0de:	44e2      	add	sl, ip
 801d0e0:	4652      	mov	r2, sl
 801d0e2:	17d2      	asrs	r2, r2, #31
 801d0e4:	4693      	mov	fp, r2
 801d0e6:	0038      	movs	r0, r7
 801d0e8:	9a05      	ldr	r2, [sp, #20]
 801d0ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0ec:	9112      	str	r1, [sp, #72]	@ 0x48
 801d0ee:	f7e3 fa67 	bl	80005c0 <__aeabi_lmul>
 801d0f2:	9a06      	ldr	r2, [sp, #24]
 801d0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0f6:	000e      	movs	r6, r1
 801d0f8:	4650      	mov	r0, sl
 801d0fa:	4659      	mov	r1, fp
 801d0fc:	f7e3 fa60 	bl	80005c0 <__aeabi_lmul>
 801d100:	4648      	mov	r0, r9
 801d102:	1a76      	subs	r6, r6, r1
 801d104:	1076      	asrs	r6, r6, #1
 801d106:	6006      	str	r6, [r0, #0]
 801d108:	9a05      	ldr	r2, [sp, #20]
 801d10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d10c:	4650      	mov	r0, sl
 801d10e:	4659      	mov	r1, fp
 801d110:	f7e3 fa56 	bl	80005c0 <__aeabi_lmul>
 801d114:	9a06      	ldr	r2, [sp, #24]
 801d116:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d118:	000e      	movs	r6, r1
 801d11a:	0038      	movs	r0, r7
 801d11c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d11e:	f7e3 fa4f 	bl	80005c0 <__aeabi_lmul>
 801d122:	9a00      	ldr	r2, [sp, #0]
 801d124:	9f03      	ldr	r7, [sp, #12]
 801d126:	4694      	mov	ip, r2
 801d128:	1876      	adds	r6, r6, r1
 801d12a:	4649      	mov	r1, r9
 801d12c:	44e1      	add	r9, ip
 801d12e:	46bc      	mov	ip, r7
 801d130:	9b01      	ldr	r3, [sp, #4]
 801d132:	1076      	asrs	r6, r6, #1
 801d134:	4463      	add	r3, ip
 801d136:	17df      	asrs	r7, r3, #31
 801d138:	604e      	str	r6, [r1, #4]
 801d13a:	46ba      	mov	sl, r7
 801d13c:	001e      	movs	r6, r3
 801d13e:	9802      	ldr	r0, [sp, #8]
 801d140:	9b04      	ldr	r3, [sp, #16]
 801d142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d144:	1ac7      	subs	r7, r0, r3
 801d146:	17fb      	asrs	r3, r7, #31
 801d148:	469b      	mov	fp, r3
 801d14a:	0030      	movs	r0, r6
 801d14c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d14e:	4651      	mov	r1, sl
 801d150:	f7e3 fa36 	bl	80005c0 <__aeabi_lmul>
 801d154:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d156:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d158:	9101      	str	r1, [sp, #4]
 801d15a:	0038      	movs	r0, r7
 801d15c:	4659      	mov	r1, fp
 801d15e:	f7e3 fa2f 	bl	80005c0 <__aeabi_lmul>
 801d162:	9801      	ldr	r0, [sp, #4]
 801d164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d166:	1a41      	subs	r1, r0, r1
 801d168:	1049      	asrs	r1, r1, #1
 801d16a:	6029      	str	r1, [r5, #0]
 801d16c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d16e:	0038      	movs	r0, r7
 801d170:	4659      	mov	r1, fp
 801d172:	f7e3 fa25 	bl	80005c0 <__aeabi_lmul>
 801d176:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d178:	000f      	movs	r7, r1
 801d17a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d17c:	0030      	movs	r0, r6
 801d17e:	4651      	mov	r1, sl
 801d180:	f7e3 fa1e 	bl	80005c0 <__aeabi_lmul>
 801d184:	187f      	adds	r7, r7, r1
 801d186:	107f      	asrs	r7, r7, #1
 801d188:	606f      	str	r7, [r5, #4]
 801d18a:	9a00      	ldr	r2, [sp, #0]
 801d18c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d18e:	4694      	mov	ip, r2
 801d190:	4465      	add	r5, ip
 801d192:	468c      	mov	ip, r1
 801d194:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d196:	0013      	movs	r3, r2
 801d198:	4462      	add	r2, ip
 801d19a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d19c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d19e:	429a      	cmp	r2, r3
 801d1a0:	d900      	bls.n	801d1a4 <arm_radix4_butterfly_inverse_q31+0x46c>
 801d1a2:	e73e      	b.n	801d022 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801d1a4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d1a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d1a8:	468c      	mov	ip, r1
 801d1aa:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d1ac:	4462      	add	r2, ip
 801d1ae:	468c      	mov	ip, r1
 801d1b0:	9216      	str	r2, [sp, #88]	@ 0x58
 801d1b2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d1b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d1b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d1b8:	4462      	add	r2, ip
 801d1ba:	468c      	mov	ip, r1
 801d1bc:	9219      	str	r2, [sp, #100]	@ 0x64
 801d1be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d1c0:	3301      	adds	r3, #1
 801d1c2:	4462      	add	r2, ip
 801d1c4:	9218      	str	r2, [sp, #96]	@ 0x60
 801d1c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d1c8:	9315      	str	r3, [sp, #84]	@ 0x54
 801d1ca:	3208      	adds	r2, #8
 801d1cc:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d1ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d1d0:	4293      	cmp	r3, r2
 801d1d2:	d800      	bhi.n	801d1d6 <arm_radix4_butterfly_inverse_q31+0x49e>
 801d1d4:	e6ec      	b.n	801cfb0 <arm_radix4_butterfly_inverse_q31+0x278>
 801d1d6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d1d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d1da:	009b      	lsls	r3, r3, #2
 801d1dc:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d1de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d1e0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d1e2:	089b      	lsrs	r3, r3, #2
 801d1e4:	9320      	str	r3, [sp, #128]	@ 0x80
 801d1e6:	2b04      	cmp	r3, #4
 801d1e8:	d900      	bls.n	801d1ec <arm_radix4_butterfly_inverse_q31+0x4b4>
 801d1ea:	e6c5      	b.n	801cf78 <arm_radix4_butterfly_inverse_q31+0x240>
 801d1ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d1ee:	469a      	mov	sl, r3
 801d1f0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d1f2:	681a      	ldr	r2, [r3, #0]
 801d1f4:	6918      	ldr	r0, [r3, #16]
 801d1f6:	4691      	mov	r9, r2
 801d1f8:	464c      	mov	r4, r9
 801d1fa:	4680      	mov	r8, r0
 801d1fc:	69de      	ldr	r6, [r3, #28]
 801d1fe:	689d      	ldr	r5, [r3, #8]
 801d200:	46b4      	mov	ip, r6
 801d202:	6998      	ldr	r0, [r3, #24]
 801d204:	1964      	adds	r4, r4, r5
 801d206:	6859      	ldr	r1, [r3, #4]
 801d208:	68da      	ldr	r2, [r3, #12]
 801d20a:	4444      	add	r4, r8
 801d20c:	695f      	ldr	r7, [r3, #20]
 801d20e:	1824      	adds	r4, r4, r0
 801d210:	601c      	str	r4, [r3, #0]
 801d212:	188c      	adds	r4, r1, r2
 801d214:	19e4      	adds	r4, r4, r7
 801d216:	4464      	add	r4, ip
 801d218:	605c      	str	r4, [r3, #4]
 801d21a:	464c      	mov	r4, r9
 801d21c:	1b64      	subs	r4, r4, r5
 801d21e:	4444      	add	r4, r8
 801d220:	1a24      	subs	r4, r4, r0
 801d222:	609c      	str	r4, [r3, #8]
 801d224:	1a8c      	subs	r4, r1, r2
 801d226:	19e4      	adds	r4, r4, r7
 801d228:	1ba4      	subs	r4, r4, r6
 801d22a:	60dc      	str	r4, [r3, #12]
 801d22c:	464c      	mov	r4, r9
 801d22e:	4646      	mov	r6, r8
 801d230:	1aa4      	subs	r4, r4, r2
 801d232:	1ba4      	subs	r4, r4, r6
 801d234:	4464      	add	r4, ip
 801d236:	611c      	str	r4, [r3, #16]
 801d238:	194c      	adds	r4, r1, r5
 801d23a:	1be4      	subs	r4, r4, r7
 801d23c:	1a24      	subs	r4, r4, r0
 801d23e:	615c      	str	r4, [r3, #20]
 801d240:	4644      	mov	r4, r8
 801d242:	4666      	mov	r6, ip
 801d244:	444a      	add	r2, r9
 801d246:	1b12      	subs	r2, r2, r4
 801d248:	1b92      	subs	r2, r2, r6
 801d24a:	619a      	str	r2, [r3, #24]
 801d24c:	1b4a      	subs	r2, r1, r5
 801d24e:	1bd1      	subs	r1, r2, r7
 801d250:	2201      	movs	r2, #1
 801d252:	4252      	negs	r2, r2
 801d254:	4694      	mov	ip, r2
 801d256:	44e2      	add	sl, ip
 801d258:	4652      	mov	r2, sl
 801d25a:	1809      	adds	r1, r1, r0
 801d25c:	61d9      	str	r1, [r3, #28]
 801d25e:	3320      	adds	r3, #32
 801d260:	2a00      	cmp	r2, #0
 801d262:	d1c6      	bne.n	801d1f2 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801d264:	b027      	add	sp, #156	@ 0x9c
 801d266:	bc3c      	pop	{r2, r3, r4, r5}
 801d268:	4690      	mov	r8, r2
 801d26a:	4699      	mov	r9, r3
 801d26c:	46a2      	mov	sl, r4
 801d26e:	46ab      	mov	fp, r5
 801d270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d272:	469a      	mov	sl, r3
 801d274:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d276:	e7bc      	b.n	801d1f2 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801d278 <arm_cmplx_mag_squared_q31>:
 801d278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d27a:	464f      	mov	r7, r9
 801d27c:	4646      	mov	r6, r8
 801d27e:	0004      	movs	r4, r0
 801d280:	b4c0      	push	{r6, r7}
 801d282:	0016      	movs	r6, r2
 801d284:	000f      	movs	r7, r1
 801d286:	2a00      	cmp	r2, #0
 801d288:	d018      	beq.n	801d2bc <arm_cmplx_mag_squared_q31+0x44>
 801d28a:	6823      	ldr	r3, [r4, #0]
 801d28c:	6822      	ldr	r2, [r4, #0]
 801d28e:	17d9      	asrs	r1, r3, #31
 801d290:	6863      	ldr	r3, [r4, #4]
 801d292:	0010      	movs	r0, r2
 801d294:	4698      	mov	r8, r3
 801d296:	17db      	asrs	r3, r3, #31
 801d298:	4699      	mov	r9, r3
 801d29a:	000b      	movs	r3, r1
 801d29c:	f7e3 f990 	bl	80005c0 <__aeabi_lmul>
 801d2a0:	4642      	mov	r2, r8
 801d2a2:	104d      	asrs	r5, r1, #1
 801d2a4:	464b      	mov	r3, r9
 801d2a6:	4640      	mov	r0, r8
 801d2a8:	4649      	mov	r1, r9
 801d2aa:	f7e3 f989 	bl	80005c0 <__aeabi_lmul>
 801d2ae:	1049      	asrs	r1, r1, #1
 801d2b0:	1869      	adds	r1, r5, r1
 801d2b2:	3e01      	subs	r6, #1
 801d2b4:	c702      	stmia	r7!, {r1}
 801d2b6:	3408      	adds	r4, #8
 801d2b8:	2e00      	cmp	r6, #0
 801d2ba:	d1e6      	bne.n	801d28a <arm_cmplx_mag_squared_q31+0x12>
 801d2bc:	bc0c      	pop	{r2, r3}
 801d2be:	4690      	mov	r8, r2
 801d2c0:	4699      	mov	r9, r3
 801d2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d2c4 <arm_mult_q31>:
 801d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2c6:	4646      	mov	r6, r8
 801d2c8:	464f      	mov	r7, r9
 801d2ca:	4690      	mov	r8, r2
 801d2cc:	b4c0      	push	{r6, r7}
 801d2ce:	001d      	movs	r5, r3
 801d2d0:	0006      	movs	r6, r0
 801d2d2:	000f      	movs	r7, r1
 801d2d4:	2400      	movs	r4, #0
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	d020      	beq.n	801d31c <arm_mult_q31+0x58>
 801d2da:	4b12      	ldr	r3, [pc, #72]	@ (801d324 <arm_mult_q31+0x60>)
 801d2dc:	4699      	mov	r9, r3
 801d2de:	e007      	b.n	801d2f0 <arm_mult_q31+0x2c>
 801d2e0:	464b      	mov	r3, r9
 801d2e2:	4059      	eors	r1, r3
 801d2e4:	4643      	mov	r3, r8
 801d2e6:	3d01      	subs	r5, #1
 801d2e8:	5119      	str	r1, [r3, r4]
 801d2ea:	3404      	adds	r4, #4
 801d2ec:	2d00      	cmp	r5, #0
 801d2ee:	d015      	beq.n	801d31c <arm_mult_q31+0x58>
 801d2f0:	5933      	ldr	r3, [r6, r4]
 801d2f2:	593a      	ldr	r2, [r7, r4]
 801d2f4:	17d9      	asrs	r1, r3, #31
 801d2f6:	593b      	ldr	r3, [r7, r4]
 801d2f8:	5930      	ldr	r0, [r6, r4]
 801d2fa:	17db      	asrs	r3, r3, #31
 801d2fc:	f7e3 f960 	bl	80005c0 <__aeabi_lmul>
 801d300:	004b      	lsls	r3, r1, #1
 801d302:	0fc0      	lsrs	r0, r0, #31
 801d304:	4318      	orrs	r0, r3
 801d306:	17c9      	asrs	r1, r1, #31
 801d308:	17c3      	asrs	r3, r0, #31
 801d30a:	428b      	cmp	r3, r1
 801d30c:	d1e8      	bne.n	801d2e0 <arm_mult_q31+0x1c>
 801d30e:	0001      	movs	r1, r0
 801d310:	4643      	mov	r3, r8
 801d312:	3d01      	subs	r5, #1
 801d314:	5119      	str	r1, [r3, r4]
 801d316:	3404      	adds	r4, #4
 801d318:	2d00      	cmp	r5, #0
 801d31a:	d1e9      	bne.n	801d2f0 <arm_mult_q31+0x2c>
 801d31c:	bc0c      	pop	{r2, r3}
 801d31e:	4690      	mov	r8, r2
 801d320:	4699      	mov	r9, r3
 801d322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d324:	7fffffff 	.word	0x7fffffff

0801d328 <arm_add_q31>:
 801d328:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d32a:	465f      	mov	r7, fp
 801d32c:	4656      	mov	r6, sl
 801d32e:	464d      	mov	r5, r9
 801d330:	4644      	mov	r4, r8
 801d332:	b4f0      	push	{r4, r5, r6, r7}
 801d334:	4693      	mov	fp, r2
 801d336:	b083      	sub	sp, #12
 801d338:	4681      	mov	r9, r0
 801d33a:	468a      	mov	sl, r1
 801d33c:	4698      	mov	r8, r3
 801d33e:	2200      	movs	r2, #0
 801d340:	2b00      	cmp	r3, #0
 801d342:	d020      	beq.n	801d386 <arm_add_q31+0x5e>
 801d344:	4649      	mov	r1, r9
 801d346:	4653      	mov	r3, sl
 801d348:	588e      	ldr	r6, [r1, r2]
 801d34a:	589b      	ldr	r3, [r3, r2]
 801d34c:	17f7      	asrs	r7, r6, #31
 801d34e:	001c      	movs	r4, r3
 801d350:	0030      	movs	r0, r6
 801d352:	0039      	movs	r1, r7
 801d354:	17dd      	asrs	r5, r3, #31
 801d356:	46b4      	mov	ip, r6
 801d358:	1900      	adds	r0, r0, r4
 801d35a:	4169      	adcs	r1, r5
 801d35c:	4463      	add	r3, ip
 801d35e:	9000      	str	r0, [sp, #0]
 801d360:	9101      	str	r1, [sp, #4]
 801d362:	17d9      	asrs	r1, r3, #31
 801d364:	468c      	mov	ip, r1
 801d366:	9901      	ldr	r1, [sp, #4]
 801d368:	458c      	cmp	ip, r1
 801d36a:	d002      	beq.n	801d372 <arm_add_q31+0x4a>
 801d36c:	17cb      	asrs	r3, r1, #31
 801d36e:	4909      	ldr	r1, [pc, #36]	@ (801d394 <arm_add_q31+0x6c>)
 801d370:	404b      	eors	r3, r1
 801d372:	4659      	mov	r1, fp
 801d374:	508b      	str	r3, [r1, r2]
 801d376:	2301      	movs	r3, #1
 801d378:	425b      	negs	r3, r3
 801d37a:	469c      	mov	ip, r3
 801d37c:	44e0      	add	r8, ip
 801d37e:	4643      	mov	r3, r8
 801d380:	3204      	adds	r2, #4
 801d382:	2b00      	cmp	r3, #0
 801d384:	d1de      	bne.n	801d344 <arm_add_q31+0x1c>
 801d386:	b003      	add	sp, #12
 801d388:	bc3c      	pop	{r2, r3, r4, r5}
 801d38a:	4690      	mov	r8, r2
 801d38c:	4699      	mov	r9, r3
 801d38e:	46a2      	mov	sl, r4
 801d390:	46ab      	mov	fp, r5
 801d392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d394:	7fffffff 	.word	0x7fffffff

0801d398 <atof>:
 801d398:	b510      	push	{r4, lr}
 801d39a:	2100      	movs	r1, #0
 801d39c:	f000 fe12 	bl	801dfc4 <strtod>
 801d3a0:	bd10      	pop	{r4, pc}

0801d3a2 <atoi>:
 801d3a2:	b510      	push	{r4, lr}
 801d3a4:	220a      	movs	r2, #10
 801d3a6:	2100      	movs	r1, #0
 801d3a8:	f000 fea4 	bl	801e0f4 <strtol>
 801d3ac:	bd10      	pop	{r4, pc}
	...

0801d3b0 <sulp>:
 801d3b0:	b570      	push	{r4, r5, r6, lr}
 801d3b2:	0016      	movs	r6, r2
 801d3b4:	000d      	movs	r5, r1
 801d3b6:	f003 fcf3 	bl	8020da0 <__ulp>
 801d3ba:	2e00      	cmp	r6, #0
 801d3bc:	d00d      	beq.n	801d3da <sulp+0x2a>
 801d3be:	236b      	movs	r3, #107	@ 0x6b
 801d3c0:	006a      	lsls	r2, r5, #1
 801d3c2:	0d52      	lsrs	r2, r2, #21
 801d3c4:	1a9b      	subs	r3, r3, r2
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	dd07      	ble.n	801d3da <sulp+0x2a>
 801d3ca:	2400      	movs	r4, #0
 801d3cc:	4a03      	ldr	r2, [pc, #12]	@ (801d3dc <sulp+0x2c>)
 801d3ce:	051b      	lsls	r3, r3, #20
 801d3d0:	189d      	adds	r5, r3, r2
 801d3d2:	002b      	movs	r3, r5
 801d3d4:	0022      	movs	r2, r4
 801d3d6:	f7e5 f931 	bl	800263c <__aeabi_dmul>
 801d3da:	bd70      	pop	{r4, r5, r6, pc}
 801d3dc:	3ff00000 	.word	0x3ff00000

0801d3e0 <_strtod_l>:
 801d3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3e2:	b0a3      	sub	sp, #140	@ 0x8c
 801d3e4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801d3e6:	2200      	movs	r2, #0
 801d3e8:	2600      	movs	r6, #0
 801d3ea:	2700      	movs	r7, #0
 801d3ec:	9005      	str	r0, [sp, #20]
 801d3ee:	9109      	str	r1, [sp, #36]	@ 0x24
 801d3f0:	921e      	str	r2, [sp, #120]	@ 0x78
 801d3f2:	911d      	str	r1, [sp, #116]	@ 0x74
 801d3f4:	780a      	ldrb	r2, [r1, #0]
 801d3f6:	2a2b      	cmp	r2, #43	@ 0x2b
 801d3f8:	d053      	beq.n	801d4a2 <_strtod_l+0xc2>
 801d3fa:	d83f      	bhi.n	801d47c <_strtod_l+0x9c>
 801d3fc:	2a0d      	cmp	r2, #13
 801d3fe:	d839      	bhi.n	801d474 <_strtod_l+0x94>
 801d400:	2a08      	cmp	r2, #8
 801d402:	d839      	bhi.n	801d478 <_strtod_l+0x98>
 801d404:	2a00      	cmp	r2, #0
 801d406:	d042      	beq.n	801d48e <_strtod_l+0xae>
 801d408:	2200      	movs	r2, #0
 801d40a:	9212      	str	r2, [sp, #72]	@ 0x48
 801d40c:	2100      	movs	r1, #0
 801d40e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d410:	910c      	str	r1, [sp, #48]	@ 0x30
 801d412:	782a      	ldrb	r2, [r5, #0]
 801d414:	2a30      	cmp	r2, #48	@ 0x30
 801d416:	d000      	beq.n	801d41a <_strtod_l+0x3a>
 801d418:	e083      	b.n	801d522 <_strtod_l+0x142>
 801d41a:	786a      	ldrb	r2, [r5, #1]
 801d41c:	3120      	adds	r1, #32
 801d41e:	438a      	bics	r2, r1
 801d420:	2a58      	cmp	r2, #88	@ 0x58
 801d422:	d000      	beq.n	801d426 <_strtod_l+0x46>
 801d424:	e073      	b.n	801d50e <_strtod_l+0x12e>
 801d426:	9302      	str	r3, [sp, #8]
 801d428:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d42a:	4a95      	ldr	r2, [pc, #596]	@ (801d680 <_strtod_l+0x2a0>)
 801d42c:	9301      	str	r3, [sp, #4]
 801d42e:	ab1e      	add	r3, sp, #120	@ 0x78
 801d430:	9300      	str	r3, [sp, #0]
 801d432:	9805      	ldr	r0, [sp, #20]
 801d434:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d436:	a91d      	add	r1, sp, #116	@ 0x74
 801d438:	f002 fd62 	bl	801ff00 <__gethex>
 801d43c:	230f      	movs	r3, #15
 801d43e:	0002      	movs	r2, r0
 801d440:	401a      	ands	r2, r3
 801d442:	0004      	movs	r4, r0
 801d444:	9206      	str	r2, [sp, #24]
 801d446:	4218      	tst	r0, r3
 801d448:	d005      	beq.n	801d456 <_strtod_l+0x76>
 801d44a:	2a06      	cmp	r2, #6
 801d44c:	d12b      	bne.n	801d4a6 <_strtod_l+0xc6>
 801d44e:	2300      	movs	r3, #0
 801d450:	3501      	adds	r5, #1
 801d452:	951d      	str	r5, [sp, #116]	@ 0x74
 801d454:	9312      	str	r3, [sp, #72]	@ 0x48
 801d456:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d002      	beq.n	801d462 <_strtod_l+0x82>
 801d45c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d45e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d460:	6013      	str	r3, [r2, #0]
 801d462:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d464:	2b00      	cmp	r3, #0
 801d466:	d019      	beq.n	801d49c <_strtod_l+0xbc>
 801d468:	2380      	movs	r3, #128	@ 0x80
 801d46a:	0030      	movs	r0, r6
 801d46c:	061b      	lsls	r3, r3, #24
 801d46e:	18f9      	adds	r1, r7, r3
 801d470:	b023      	add	sp, #140	@ 0x8c
 801d472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d474:	2a20      	cmp	r2, #32
 801d476:	d1c7      	bne.n	801d408 <_strtod_l+0x28>
 801d478:	3101      	adds	r1, #1
 801d47a:	e7ba      	b.n	801d3f2 <_strtod_l+0x12>
 801d47c:	2a2d      	cmp	r2, #45	@ 0x2d
 801d47e:	d1c3      	bne.n	801d408 <_strtod_l+0x28>
 801d480:	3a2c      	subs	r2, #44	@ 0x2c
 801d482:	9212      	str	r2, [sp, #72]	@ 0x48
 801d484:	1c4a      	adds	r2, r1, #1
 801d486:	921d      	str	r2, [sp, #116]	@ 0x74
 801d488:	784a      	ldrb	r2, [r1, #1]
 801d48a:	2a00      	cmp	r2, #0
 801d48c:	d1be      	bne.n	801d40c <_strtod_l+0x2c>
 801d48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d490:	931d      	str	r3, [sp, #116]	@ 0x74
 801d492:	2300      	movs	r3, #0
 801d494:	9312      	str	r3, [sp, #72]	@ 0x48
 801d496:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d1df      	bne.n	801d45c <_strtod_l+0x7c>
 801d49c:	0030      	movs	r0, r6
 801d49e:	0039      	movs	r1, r7
 801d4a0:	e7e6      	b.n	801d470 <_strtod_l+0x90>
 801d4a2:	2200      	movs	r2, #0
 801d4a4:	e7ed      	b.n	801d482 <_strtod_l+0xa2>
 801d4a6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d4a8:	2a00      	cmp	r2, #0
 801d4aa:	d007      	beq.n	801d4bc <_strtod_l+0xdc>
 801d4ac:	2135      	movs	r1, #53	@ 0x35
 801d4ae:	a820      	add	r0, sp, #128	@ 0x80
 801d4b0:	f003 fd6c 	bl	8020f8c <__copybits>
 801d4b4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d4b6:	9805      	ldr	r0, [sp, #20]
 801d4b8:	f003 f926 	bl	8020708 <_Bfree>
 801d4bc:	9806      	ldr	r0, [sp, #24]
 801d4be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d4c0:	3801      	subs	r0, #1
 801d4c2:	2804      	cmp	r0, #4
 801d4c4:	d806      	bhi.n	801d4d4 <_strtod_l+0xf4>
 801d4c6:	f7e2 fe59 	bl	800017c <__gnu_thumb1_case_uqi>
 801d4ca:	0312      	.short	0x0312
 801d4cc:	1e1c      	.short	0x1e1c
 801d4ce:	12          	.byte	0x12
 801d4cf:	00          	.byte	0x00
 801d4d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d4d2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801d4d4:	05e4      	lsls	r4, r4, #23
 801d4d6:	d502      	bpl.n	801d4de <_strtod_l+0xfe>
 801d4d8:	2380      	movs	r3, #128	@ 0x80
 801d4da:	061b      	lsls	r3, r3, #24
 801d4dc:	431f      	orrs	r7, r3
 801d4de:	4b69      	ldr	r3, [pc, #420]	@ (801d684 <_strtod_l+0x2a4>)
 801d4e0:	423b      	tst	r3, r7
 801d4e2:	d1b8      	bne.n	801d456 <_strtod_l+0x76>
 801d4e4:	f001 fd90 	bl	801f008 <__errno>
 801d4e8:	2322      	movs	r3, #34	@ 0x22
 801d4ea:	6003      	str	r3, [r0, #0]
 801d4ec:	e7b3      	b.n	801d456 <_strtod_l+0x76>
 801d4ee:	4966      	ldr	r1, [pc, #408]	@ (801d688 <_strtod_l+0x2a8>)
 801d4f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d4f2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d4f4:	400a      	ands	r2, r1
 801d4f6:	4965      	ldr	r1, [pc, #404]	@ (801d68c <_strtod_l+0x2ac>)
 801d4f8:	185b      	adds	r3, r3, r1
 801d4fa:	051b      	lsls	r3, r3, #20
 801d4fc:	431a      	orrs	r2, r3
 801d4fe:	0017      	movs	r7, r2
 801d500:	e7e8      	b.n	801d4d4 <_strtod_l+0xf4>
 801d502:	4f60      	ldr	r7, [pc, #384]	@ (801d684 <_strtod_l+0x2a4>)
 801d504:	e7e6      	b.n	801d4d4 <_strtod_l+0xf4>
 801d506:	2601      	movs	r6, #1
 801d508:	4f61      	ldr	r7, [pc, #388]	@ (801d690 <_strtod_l+0x2b0>)
 801d50a:	4276      	negs	r6, r6
 801d50c:	e7e2      	b.n	801d4d4 <_strtod_l+0xf4>
 801d50e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d510:	1c5a      	adds	r2, r3, #1
 801d512:	921d      	str	r2, [sp, #116]	@ 0x74
 801d514:	785b      	ldrb	r3, [r3, #1]
 801d516:	2b30      	cmp	r3, #48	@ 0x30
 801d518:	d0f9      	beq.n	801d50e <_strtod_l+0x12e>
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d09b      	beq.n	801d456 <_strtod_l+0x76>
 801d51e:	2301      	movs	r3, #1
 801d520:	930c      	str	r3, [sp, #48]	@ 0x30
 801d522:	2500      	movs	r5, #0
 801d524:	220a      	movs	r2, #10
 801d526:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d528:	950d      	str	r5, [sp, #52]	@ 0x34
 801d52a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d52c:	9508      	str	r5, [sp, #32]
 801d52e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d530:	7804      	ldrb	r4, [r0, #0]
 801d532:	0023      	movs	r3, r4
 801d534:	3b30      	subs	r3, #48	@ 0x30
 801d536:	b2d9      	uxtb	r1, r3
 801d538:	2909      	cmp	r1, #9
 801d53a:	d927      	bls.n	801d58c <_strtod_l+0x1ac>
 801d53c:	2201      	movs	r2, #1
 801d53e:	4955      	ldr	r1, [pc, #340]	@ (801d694 <_strtod_l+0x2b4>)
 801d540:	f001 fcd4 	bl	801eeec <strncmp>
 801d544:	2800      	cmp	r0, #0
 801d546:	d031      	beq.n	801d5ac <_strtod_l+0x1cc>
 801d548:	2000      	movs	r0, #0
 801d54a:	0023      	movs	r3, r4
 801d54c:	4684      	mov	ip, r0
 801d54e:	9a08      	ldr	r2, [sp, #32]
 801d550:	900e      	str	r0, [sp, #56]	@ 0x38
 801d552:	9206      	str	r2, [sp, #24]
 801d554:	2220      	movs	r2, #32
 801d556:	0019      	movs	r1, r3
 801d558:	4391      	bics	r1, r2
 801d55a:	000a      	movs	r2, r1
 801d55c:	2100      	movs	r1, #0
 801d55e:	9107      	str	r1, [sp, #28]
 801d560:	2a45      	cmp	r2, #69	@ 0x45
 801d562:	d000      	beq.n	801d566 <_strtod_l+0x186>
 801d564:	e0c0      	b.n	801d6e8 <_strtod_l+0x308>
 801d566:	9b06      	ldr	r3, [sp, #24]
 801d568:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d56a:	4303      	orrs	r3, r0
 801d56c:	4313      	orrs	r3, r2
 801d56e:	428b      	cmp	r3, r1
 801d570:	d08d      	beq.n	801d48e <_strtod_l+0xae>
 801d572:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d574:	9309      	str	r3, [sp, #36]	@ 0x24
 801d576:	3301      	adds	r3, #1
 801d578:	931d      	str	r3, [sp, #116]	@ 0x74
 801d57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d57c:	785b      	ldrb	r3, [r3, #1]
 801d57e:	2b2b      	cmp	r3, #43	@ 0x2b
 801d580:	d070      	beq.n	801d664 <_strtod_l+0x284>
 801d582:	000c      	movs	r4, r1
 801d584:	2b2d      	cmp	r3, #45	@ 0x2d
 801d586:	d173      	bne.n	801d670 <_strtod_l+0x290>
 801d588:	2401      	movs	r4, #1
 801d58a:	e06c      	b.n	801d666 <_strtod_l+0x286>
 801d58c:	9908      	ldr	r1, [sp, #32]
 801d58e:	2908      	cmp	r1, #8
 801d590:	dc09      	bgt.n	801d5a6 <_strtod_l+0x1c6>
 801d592:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d594:	4351      	muls	r1, r2
 801d596:	185b      	adds	r3, r3, r1
 801d598:	930d      	str	r3, [sp, #52]	@ 0x34
 801d59a:	9b08      	ldr	r3, [sp, #32]
 801d59c:	3001      	adds	r0, #1
 801d59e:	3301      	adds	r3, #1
 801d5a0:	9308      	str	r3, [sp, #32]
 801d5a2:	901d      	str	r0, [sp, #116]	@ 0x74
 801d5a4:	e7c3      	b.n	801d52e <_strtod_l+0x14e>
 801d5a6:	4355      	muls	r5, r2
 801d5a8:	195d      	adds	r5, r3, r5
 801d5aa:	e7f6      	b.n	801d59a <_strtod_l+0x1ba>
 801d5ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d5ae:	1c5a      	adds	r2, r3, #1
 801d5b0:	921d      	str	r2, [sp, #116]	@ 0x74
 801d5b2:	9a08      	ldr	r2, [sp, #32]
 801d5b4:	785b      	ldrb	r3, [r3, #1]
 801d5b6:	2a00      	cmp	r2, #0
 801d5b8:	d03a      	beq.n	801d630 <_strtod_l+0x250>
 801d5ba:	900e      	str	r0, [sp, #56]	@ 0x38
 801d5bc:	9206      	str	r2, [sp, #24]
 801d5be:	001a      	movs	r2, r3
 801d5c0:	3a30      	subs	r2, #48	@ 0x30
 801d5c2:	2a09      	cmp	r2, #9
 801d5c4:	d912      	bls.n	801d5ec <_strtod_l+0x20c>
 801d5c6:	2201      	movs	r2, #1
 801d5c8:	4694      	mov	ip, r2
 801d5ca:	e7c3      	b.n	801d554 <_strtod_l+0x174>
 801d5cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d5ce:	3001      	adds	r0, #1
 801d5d0:	1c5a      	adds	r2, r3, #1
 801d5d2:	921d      	str	r2, [sp, #116]	@ 0x74
 801d5d4:	785b      	ldrb	r3, [r3, #1]
 801d5d6:	2b30      	cmp	r3, #48	@ 0x30
 801d5d8:	d0f8      	beq.n	801d5cc <_strtod_l+0x1ec>
 801d5da:	001a      	movs	r2, r3
 801d5dc:	3a31      	subs	r2, #49	@ 0x31
 801d5de:	2a08      	cmp	r2, #8
 801d5e0:	d83b      	bhi.n	801d65a <_strtod_l+0x27a>
 801d5e2:	900e      	str	r0, [sp, #56]	@ 0x38
 801d5e4:	2000      	movs	r0, #0
 801d5e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801d5e8:	9006      	str	r0, [sp, #24]
 801d5ea:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d5ec:	001a      	movs	r2, r3
 801d5ee:	1c41      	adds	r1, r0, #1
 801d5f0:	3a30      	subs	r2, #48	@ 0x30
 801d5f2:	2b30      	cmp	r3, #48	@ 0x30
 801d5f4:	d016      	beq.n	801d624 <_strtod_l+0x244>
 801d5f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5f8:	185b      	adds	r3, r3, r1
 801d5fa:	930e      	str	r3, [sp, #56]	@ 0x38
 801d5fc:	9b06      	ldr	r3, [sp, #24]
 801d5fe:	210a      	movs	r1, #10
 801d600:	469c      	mov	ip, r3
 801d602:	4484      	add	ip, r0
 801d604:	459c      	cmp	ip, r3
 801d606:	d115      	bne.n	801d634 <_strtod_l+0x254>
 801d608:	9906      	ldr	r1, [sp, #24]
 801d60a:	9b06      	ldr	r3, [sp, #24]
 801d60c:	3101      	adds	r1, #1
 801d60e:	1809      	adds	r1, r1, r0
 801d610:	181b      	adds	r3, r3, r0
 801d612:	9106      	str	r1, [sp, #24]
 801d614:	2b08      	cmp	r3, #8
 801d616:	dc19      	bgt.n	801d64c <_strtod_l+0x26c>
 801d618:	230a      	movs	r3, #10
 801d61a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d61c:	434b      	muls	r3, r1
 801d61e:	2100      	movs	r1, #0
 801d620:	18d3      	adds	r3, r2, r3
 801d622:	930d      	str	r3, [sp, #52]	@ 0x34
 801d624:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d626:	0008      	movs	r0, r1
 801d628:	1c5a      	adds	r2, r3, #1
 801d62a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d62c:	785b      	ldrb	r3, [r3, #1]
 801d62e:	e7c6      	b.n	801d5be <_strtod_l+0x1de>
 801d630:	9808      	ldr	r0, [sp, #32]
 801d632:	e7d0      	b.n	801d5d6 <_strtod_l+0x1f6>
 801d634:	1c5c      	adds	r4, r3, #1
 801d636:	2b08      	cmp	r3, #8
 801d638:	dc04      	bgt.n	801d644 <_strtod_l+0x264>
 801d63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d63c:	434b      	muls	r3, r1
 801d63e:	930d      	str	r3, [sp, #52]	@ 0x34
 801d640:	0023      	movs	r3, r4
 801d642:	e7df      	b.n	801d604 <_strtod_l+0x224>
 801d644:	2c10      	cmp	r4, #16
 801d646:	dcfb      	bgt.n	801d640 <_strtod_l+0x260>
 801d648:	434d      	muls	r5, r1
 801d64a:	e7f9      	b.n	801d640 <_strtod_l+0x260>
 801d64c:	2100      	movs	r1, #0
 801d64e:	2b0f      	cmp	r3, #15
 801d650:	dce8      	bgt.n	801d624 <_strtod_l+0x244>
 801d652:	230a      	movs	r3, #10
 801d654:	435d      	muls	r5, r3
 801d656:	1955      	adds	r5, r2, r5
 801d658:	e7e4      	b.n	801d624 <_strtod_l+0x244>
 801d65a:	2200      	movs	r2, #0
 801d65c:	920e      	str	r2, [sp, #56]	@ 0x38
 801d65e:	9206      	str	r2, [sp, #24]
 801d660:	3201      	adds	r2, #1
 801d662:	e7b1      	b.n	801d5c8 <_strtod_l+0x1e8>
 801d664:	2400      	movs	r4, #0
 801d666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d668:	3302      	adds	r3, #2
 801d66a:	931d      	str	r3, [sp, #116]	@ 0x74
 801d66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d66e:	789b      	ldrb	r3, [r3, #2]
 801d670:	001a      	movs	r2, r3
 801d672:	3a30      	subs	r2, #48	@ 0x30
 801d674:	2a09      	cmp	r2, #9
 801d676:	d913      	bls.n	801d6a0 <_strtod_l+0x2c0>
 801d678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d67a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d67c:	2200      	movs	r2, #0
 801d67e:	e032      	b.n	801d6e6 <_strtod_l+0x306>
 801d680:	08024120 	.word	0x08024120
 801d684:	7ff00000 	.word	0x7ff00000
 801d688:	ffefffff 	.word	0xffefffff
 801d68c:	00000433 	.word	0x00000433
 801d690:	7fffffff 	.word	0x7fffffff
 801d694:	08024108 	.word	0x08024108
 801d698:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d69a:	1c5a      	adds	r2, r3, #1
 801d69c:	921d      	str	r2, [sp, #116]	@ 0x74
 801d69e:	785b      	ldrb	r3, [r3, #1]
 801d6a0:	2b30      	cmp	r3, #48	@ 0x30
 801d6a2:	d0f9      	beq.n	801d698 <_strtod_l+0x2b8>
 801d6a4:	2200      	movs	r2, #0
 801d6a6:	9207      	str	r2, [sp, #28]
 801d6a8:	001a      	movs	r2, r3
 801d6aa:	3a31      	subs	r2, #49	@ 0x31
 801d6ac:	2a08      	cmp	r2, #8
 801d6ae:	d81b      	bhi.n	801d6e8 <_strtod_l+0x308>
 801d6b0:	3b30      	subs	r3, #48	@ 0x30
 801d6b2:	9310      	str	r3, [sp, #64]	@ 0x40
 801d6b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d6b6:	9307      	str	r3, [sp, #28]
 801d6b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d6ba:	1c59      	adds	r1, r3, #1
 801d6bc:	911d      	str	r1, [sp, #116]	@ 0x74
 801d6be:	785b      	ldrb	r3, [r3, #1]
 801d6c0:	001a      	movs	r2, r3
 801d6c2:	3a30      	subs	r2, #48	@ 0x30
 801d6c4:	2a09      	cmp	r2, #9
 801d6c6:	d93a      	bls.n	801d73e <_strtod_l+0x35e>
 801d6c8:	9a07      	ldr	r2, [sp, #28]
 801d6ca:	1a8a      	subs	r2, r1, r2
 801d6cc:	49b4      	ldr	r1, [pc, #720]	@ (801d9a0 <_strtod_l+0x5c0>)
 801d6ce:	9107      	str	r1, [sp, #28]
 801d6d0:	2a08      	cmp	r2, #8
 801d6d2:	dc04      	bgt.n	801d6de <_strtod_l+0x2fe>
 801d6d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d6d6:	9207      	str	r2, [sp, #28]
 801d6d8:	428a      	cmp	r2, r1
 801d6da:	dd00      	ble.n	801d6de <_strtod_l+0x2fe>
 801d6dc:	9107      	str	r1, [sp, #28]
 801d6de:	2c00      	cmp	r4, #0
 801d6e0:	d002      	beq.n	801d6e8 <_strtod_l+0x308>
 801d6e2:	9a07      	ldr	r2, [sp, #28]
 801d6e4:	4252      	negs	r2, r2
 801d6e6:	9207      	str	r2, [sp, #28]
 801d6e8:	9a06      	ldr	r2, [sp, #24]
 801d6ea:	2a00      	cmp	r2, #0
 801d6ec:	d14d      	bne.n	801d78a <_strtod_l+0x3aa>
 801d6ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d6f0:	4310      	orrs	r0, r2
 801d6f2:	d000      	beq.n	801d6f6 <_strtod_l+0x316>
 801d6f4:	e6af      	b.n	801d456 <_strtod_l+0x76>
 801d6f6:	4662      	mov	r2, ip
 801d6f8:	2a00      	cmp	r2, #0
 801d6fa:	d000      	beq.n	801d6fe <_strtod_l+0x31e>
 801d6fc:	e6c7      	b.n	801d48e <_strtod_l+0xae>
 801d6fe:	2b69      	cmp	r3, #105	@ 0x69
 801d700:	d027      	beq.n	801d752 <_strtod_l+0x372>
 801d702:	dc23      	bgt.n	801d74c <_strtod_l+0x36c>
 801d704:	2b49      	cmp	r3, #73	@ 0x49
 801d706:	d024      	beq.n	801d752 <_strtod_l+0x372>
 801d708:	2b4e      	cmp	r3, #78	@ 0x4e
 801d70a:	d000      	beq.n	801d70e <_strtod_l+0x32e>
 801d70c:	e6bf      	b.n	801d48e <_strtod_l+0xae>
 801d70e:	49a5      	ldr	r1, [pc, #660]	@ (801d9a4 <_strtod_l+0x5c4>)
 801d710:	a81d      	add	r0, sp, #116	@ 0x74
 801d712:	f002 fe2b 	bl	802036c <__match>
 801d716:	2800      	cmp	r0, #0
 801d718:	d100      	bne.n	801d71c <_strtod_l+0x33c>
 801d71a:	e6b8      	b.n	801d48e <_strtod_l+0xae>
 801d71c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d71e:	781b      	ldrb	r3, [r3, #0]
 801d720:	2b28      	cmp	r3, #40	@ 0x28
 801d722:	d12c      	bne.n	801d77e <_strtod_l+0x39e>
 801d724:	49a0      	ldr	r1, [pc, #640]	@ (801d9a8 <_strtod_l+0x5c8>)
 801d726:	aa20      	add	r2, sp, #128	@ 0x80
 801d728:	a81d      	add	r0, sp, #116	@ 0x74
 801d72a:	f002 fe33 	bl	8020394 <__hexnan>
 801d72e:	2805      	cmp	r0, #5
 801d730:	d125      	bne.n	801d77e <_strtod_l+0x39e>
 801d732:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d734:	4a9d      	ldr	r2, [pc, #628]	@ (801d9ac <_strtod_l+0x5cc>)
 801d736:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d738:	431a      	orrs	r2, r3
 801d73a:	0017      	movs	r7, r2
 801d73c:	e68b      	b.n	801d456 <_strtod_l+0x76>
 801d73e:	220a      	movs	r2, #10
 801d740:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d742:	434a      	muls	r2, r1
 801d744:	18d2      	adds	r2, r2, r3
 801d746:	3a30      	subs	r2, #48	@ 0x30
 801d748:	9210      	str	r2, [sp, #64]	@ 0x40
 801d74a:	e7b5      	b.n	801d6b8 <_strtod_l+0x2d8>
 801d74c:	2b6e      	cmp	r3, #110	@ 0x6e
 801d74e:	d0de      	beq.n	801d70e <_strtod_l+0x32e>
 801d750:	e69d      	b.n	801d48e <_strtod_l+0xae>
 801d752:	4997      	ldr	r1, [pc, #604]	@ (801d9b0 <_strtod_l+0x5d0>)
 801d754:	a81d      	add	r0, sp, #116	@ 0x74
 801d756:	f002 fe09 	bl	802036c <__match>
 801d75a:	2800      	cmp	r0, #0
 801d75c:	d100      	bne.n	801d760 <_strtod_l+0x380>
 801d75e:	e696      	b.n	801d48e <_strtod_l+0xae>
 801d760:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d762:	4994      	ldr	r1, [pc, #592]	@ (801d9b4 <_strtod_l+0x5d4>)
 801d764:	3b01      	subs	r3, #1
 801d766:	a81d      	add	r0, sp, #116	@ 0x74
 801d768:	931d      	str	r3, [sp, #116]	@ 0x74
 801d76a:	f002 fdff 	bl	802036c <__match>
 801d76e:	2800      	cmp	r0, #0
 801d770:	d102      	bne.n	801d778 <_strtod_l+0x398>
 801d772:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d774:	3301      	adds	r3, #1
 801d776:	931d      	str	r3, [sp, #116]	@ 0x74
 801d778:	2600      	movs	r6, #0
 801d77a:	4f8c      	ldr	r7, [pc, #560]	@ (801d9ac <_strtod_l+0x5cc>)
 801d77c:	e66b      	b.n	801d456 <_strtod_l+0x76>
 801d77e:	488e      	ldr	r0, [pc, #568]	@ (801d9b8 <_strtod_l+0x5d8>)
 801d780:	f001 fc84 	bl	801f08c <nan>
 801d784:	0006      	movs	r6, r0
 801d786:	000f      	movs	r7, r1
 801d788:	e665      	b.n	801d456 <_strtod_l+0x76>
 801d78a:	9b07      	ldr	r3, [sp, #28]
 801d78c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d78e:	1a9b      	subs	r3, r3, r2
 801d790:	930c      	str	r3, [sp, #48]	@ 0x30
 801d792:	9b08      	ldr	r3, [sp, #32]
 801d794:	2b00      	cmp	r3, #0
 801d796:	d101      	bne.n	801d79c <_strtod_l+0x3bc>
 801d798:	9b06      	ldr	r3, [sp, #24]
 801d79a:	9308      	str	r3, [sp, #32]
 801d79c:	9c06      	ldr	r4, [sp, #24]
 801d79e:	2c10      	cmp	r4, #16
 801d7a0:	dd00      	ble.n	801d7a4 <_strtod_l+0x3c4>
 801d7a2:	2410      	movs	r4, #16
 801d7a4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d7a6:	f7e5 fe39 	bl	800341c <__aeabi_ui2d>
 801d7aa:	9b06      	ldr	r3, [sp, #24]
 801d7ac:	0006      	movs	r6, r0
 801d7ae:	000f      	movs	r7, r1
 801d7b0:	2b09      	cmp	r3, #9
 801d7b2:	dc13      	bgt.n	801d7dc <_strtod_l+0x3fc>
 801d7b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d100      	bne.n	801d7bc <_strtod_l+0x3dc>
 801d7ba:	e64c      	b.n	801d456 <_strtod_l+0x76>
 801d7bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	dc00      	bgt.n	801d7c4 <_strtod_l+0x3e4>
 801d7c2:	e07e      	b.n	801d8c2 <_strtod_l+0x4e2>
 801d7c4:	2b16      	cmp	r3, #22
 801d7c6:	dc63      	bgt.n	801d890 <_strtod_l+0x4b0>
 801d7c8:	497c      	ldr	r1, [pc, #496]	@ (801d9bc <_strtod_l+0x5dc>)
 801d7ca:	00db      	lsls	r3, r3, #3
 801d7cc:	18c9      	adds	r1, r1, r3
 801d7ce:	0032      	movs	r2, r6
 801d7d0:	6808      	ldr	r0, [r1, #0]
 801d7d2:	6849      	ldr	r1, [r1, #4]
 801d7d4:	003b      	movs	r3, r7
 801d7d6:	f7e4 ff31 	bl	800263c <__aeabi_dmul>
 801d7da:	e7d3      	b.n	801d784 <_strtod_l+0x3a4>
 801d7dc:	0022      	movs	r2, r4
 801d7de:	4b77      	ldr	r3, [pc, #476]	@ (801d9bc <_strtod_l+0x5dc>)
 801d7e0:	3a09      	subs	r2, #9
 801d7e2:	00d2      	lsls	r2, r2, #3
 801d7e4:	189b      	adds	r3, r3, r2
 801d7e6:	681a      	ldr	r2, [r3, #0]
 801d7e8:	685b      	ldr	r3, [r3, #4]
 801d7ea:	f7e4 ff27 	bl	800263c <__aeabi_dmul>
 801d7ee:	0006      	movs	r6, r0
 801d7f0:	0028      	movs	r0, r5
 801d7f2:	000f      	movs	r7, r1
 801d7f4:	f7e5 fe12 	bl	800341c <__aeabi_ui2d>
 801d7f8:	000b      	movs	r3, r1
 801d7fa:	0002      	movs	r2, r0
 801d7fc:	0039      	movs	r1, r7
 801d7fe:	0030      	movs	r0, r6
 801d800:	f7e3 ff74 	bl	80016ec <__aeabi_dadd>
 801d804:	9b06      	ldr	r3, [sp, #24]
 801d806:	0006      	movs	r6, r0
 801d808:	000f      	movs	r7, r1
 801d80a:	2b0f      	cmp	r3, #15
 801d80c:	ddd2      	ble.n	801d7b4 <_strtod_l+0x3d4>
 801d80e:	9b06      	ldr	r3, [sp, #24]
 801d810:	1b1c      	subs	r4, r3, r4
 801d812:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d814:	18e4      	adds	r4, r4, r3
 801d816:	2c00      	cmp	r4, #0
 801d818:	dc00      	bgt.n	801d81c <_strtod_l+0x43c>
 801d81a:	e09b      	b.n	801d954 <_strtod_l+0x574>
 801d81c:	220f      	movs	r2, #15
 801d81e:	0023      	movs	r3, r4
 801d820:	4013      	ands	r3, r2
 801d822:	4214      	tst	r4, r2
 801d824:	d00a      	beq.n	801d83c <_strtod_l+0x45c>
 801d826:	4965      	ldr	r1, [pc, #404]	@ (801d9bc <_strtod_l+0x5dc>)
 801d828:	00db      	lsls	r3, r3, #3
 801d82a:	18c9      	adds	r1, r1, r3
 801d82c:	0032      	movs	r2, r6
 801d82e:	6808      	ldr	r0, [r1, #0]
 801d830:	6849      	ldr	r1, [r1, #4]
 801d832:	003b      	movs	r3, r7
 801d834:	f7e4 ff02 	bl	800263c <__aeabi_dmul>
 801d838:	0006      	movs	r6, r0
 801d83a:	000f      	movs	r7, r1
 801d83c:	230f      	movs	r3, #15
 801d83e:	439c      	bics	r4, r3
 801d840:	d073      	beq.n	801d92a <_strtod_l+0x54a>
 801d842:	3326      	adds	r3, #38	@ 0x26
 801d844:	33ff      	adds	r3, #255	@ 0xff
 801d846:	429c      	cmp	r4, r3
 801d848:	dd4b      	ble.n	801d8e2 <_strtod_l+0x502>
 801d84a:	2300      	movs	r3, #0
 801d84c:	9306      	str	r3, [sp, #24]
 801d84e:	9307      	str	r3, [sp, #28]
 801d850:	930d      	str	r3, [sp, #52]	@ 0x34
 801d852:	9308      	str	r3, [sp, #32]
 801d854:	2322      	movs	r3, #34	@ 0x22
 801d856:	2600      	movs	r6, #0
 801d858:	9a05      	ldr	r2, [sp, #20]
 801d85a:	4f54      	ldr	r7, [pc, #336]	@ (801d9ac <_strtod_l+0x5cc>)
 801d85c:	6013      	str	r3, [r2, #0]
 801d85e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d860:	42b3      	cmp	r3, r6
 801d862:	d100      	bne.n	801d866 <_strtod_l+0x486>
 801d864:	e5f7      	b.n	801d456 <_strtod_l+0x76>
 801d866:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d868:	9805      	ldr	r0, [sp, #20]
 801d86a:	f002 ff4d 	bl	8020708 <_Bfree>
 801d86e:	9908      	ldr	r1, [sp, #32]
 801d870:	9805      	ldr	r0, [sp, #20]
 801d872:	f002 ff49 	bl	8020708 <_Bfree>
 801d876:	9907      	ldr	r1, [sp, #28]
 801d878:	9805      	ldr	r0, [sp, #20]
 801d87a:	f002 ff45 	bl	8020708 <_Bfree>
 801d87e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d880:	9805      	ldr	r0, [sp, #20]
 801d882:	f002 ff41 	bl	8020708 <_Bfree>
 801d886:	9906      	ldr	r1, [sp, #24]
 801d888:	9805      	ldr	r0, [sp, #20]
 801d88a:	f002 ff3d 	bl	8020708 <_Bfree>
 801d88e:	e5e2      	b.n	801d456 <_strtod_l+0x76>
 801d890:	2325      	movs	r3, #37	@ 0x25
 801d892:	9a06      	ldr	r2, [sp, #24]
 801d894:	1a9b      	subs	r3, r3, r2
 801d896:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d898:	4293      	cmp	r3, r2
 801d89a:	dbb8      	blt.n	801d80e <_strtod_l+0x42e>
 801d89c:	240f      	movs	r4, #15
 801d89e:	9b06      	ldr	r3, [sp, #24]
 801d8a0:	4d46      	ldr	r5, [pc, #280]	@ (801d9bc <_strtod_l+0x5dc>)
 801d8a2:	1ae4      	subs	r4, r4, r3
 801d8a4:	00e1      	lsls	r1, r4, #3
 801d8a6:	1869      	adds	r1, r5, r1
 801d8a8:	0032      	movs	r2, r6
 801d8aa:	6808      	ldr	r0, [r1, #0]
 801d8ac:	6849      	ldr	r1, [r1, #4]
 801d8ae:	003b      	movs	r3, r7
 801d8b0:	f7e4 fec4 	bl	800263c <__aeabi_dmul>
 801d8b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d8b6:	1b1c      	subs	r4, r3, r4
 801d8b8:	00e4      	lsls	r4, r4, #3
 801d8ba:	192d      	adds	r5, r5, r4
 801d8bc:	682a      	ldr	r2, [r5, #0]
 801d8be:	686b      	ldr	r3, [r5, #4]
 801d8c0:	e789      	b.n	801d7d6 <_strtod_l+0x3f6>
 801d8c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d8c4:	3316      	adds	r3, #22
 801d8c6:	dba2      	blt.n	801d80e <_strtod_l+0x42e>
 801d8c8:	9907      	ldr	r1, [sp, #28]
 801d8ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8cc:	4b3b      	ldr	r3, [pc, #236]	@ (801d9bc <_strtod_l+0x5dc>)
 801d8ce:	1a52      	subs	r2, r2, r1
 801d8d0:	00d2      	lsls	r2, r2, #3
 801d8d2:	189b      	adds	r3, r3, r2
 801d8d4:	0030      	movs	r0, r6
 801d8d6:	681a      	ldr	r2, [r3, #0]
 801d8d8:	685b      	ldr	r3, [r3, #4]
 801d8da:	0039      	movs	r1, r7
 801d8dc:	f7e4 fa6a 	bl	8001db4 <__aeabi_ddiv>
 801d8e0:	e750      	b.n	801d784 <_strtod_l+0x3a4>
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	0030      	movs	r0, r6
 801d8e6:	0039      	movs	r1, r7
 801d8e8:	4d35      	ldr	r5, [pc, #212]	@ (801d9c0 <_strtod_l+0x5e0>)
 801d8ea:	1124      	asrs	r4, r4, #4
 801d8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8ee:	2c01      	cmp	r4, #1
 801d8f0:	dc1e      	bgt.n	801d930 <_strtod_l+0x550>
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d001      	beq.n	801d8fa <_strtod_l+0x51a>
 801d8f6:	0006      	movs	r6, r0
 801d8f8:	000f      	movs	r7, r1
 801d8fa:	4b32      	ldr	r3, [pc, #200]	@ (801d9c4 <_strtod_l+0x5e4>)
 801d8fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d8fe:	18ff      	adds	r7, r7, r3
 801d900:	4b2f      	ldr	r3, [pc, #188]	@ (801d9c0 <_strtod_l+0x5e0>)
 801d902:	00d5      	lsls	r5, r2, #3
 801d904:	195d      	adds	r5, r3, r5
 801d906:	0032      	movs	r2, r6
 801d908:	6828      	ldr	r0, [r5, #0]
 801d90a:	6869      	ldr	r1, [r5, #4]
 801d90c:	003b      	movs	r3, r7
 801d90e:	f7e4 fe95 	bl	800263c <__aeabi_dmul>
 801d912:	4b26      	ldr	r3, [pc, #152]	@ (801d9ac <_strtod_l+0x5cc>)
 801d914:	4a2c      	ldr	r2, [pc, #176]	@ (801d9c8 <_strtod_l+0x5e8>)
 801d916:	0006      	movs	r6, r0
 801d918:	400b      	ands	r3, r1
 801d91a:	4293      	cmp	r3, r2
 801d91c:	d895      	bhi.n	801d84a <_strtod_l+0x46a>
 801d91e:	4a2b      	ldr	r2, [pc, #172]	@ (801d9cc <_strtod_l+0x5ec>)
 801d920:	4293      	cmp	r3, r2
 801d922:	d913      	bls.n	801d94c <_strtod_l+0x56c>
 801d924:	2601      	movs	r6, #1
 801d926:	4f2a      	ldr	r7, [pc, #168]	@ (801d9d0 <_strtod_l+0x5f0>)
 801d928:	4276      	negs	r6, r6
 801d92a:	2300      	movs	r3, #0
 801d92c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d92e:	e086      	b.n	801da3e <_strtod_l+0x65e>
 801d930:	2201      	movs	r2, #1
 801d932:	4214      	tst	r4, r2
 801d934:	d004      	beq.n	801d940 <_strtod_l+0x560>
 801d936:	682a      	ldr	r2, [r5, #0]
 801d938:	686b      	ldr	r3, [r5, #4]
 801d93a:	f7e4 fe7f 	bl	800263c <__aeabi_dmul>
 801d93e:	2301      	movs	r3, #1
 801d940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d942:	1064      	asrs	r4, r4, #1
 801d944:	3201      	adds	r2, #1
 801d946:	9209      	str	r2, [sp, #36]	@ 0x24
 801d948:	3508      	adds	r5, #8
 801d94a:	e7d0      	b.n	801d8ee <_strtod_l+0x50e>
 801d94c:	23d4      	movs	r3, #212	@ 0xd4
 801d94e:	049b      	lsls	r3, r3, #18
 801d950:	18cf      	adds	r7, r1, r3
 801d952:	e7ea      	b.n	801d92a <_strtod_l+0x54a>
 801d954:	2c00      	cmp	r4, #0
 801d956:	d0e8      	beq.n	801d92a <_strtod_l+0x54a>
 801d958:	4264      	negs	r4, r4
 801d95a:	230f      	movs	r3, #15
 801d95c:	0022      	movs	r2, r4
 801d95e:	401a      	ands	r2, r3
 801d960:	421c      	tst	r4, r3
 801d962:	d00a      	beq.n	801d97a <_strtod_l+0x59a>
 801d964:	4b15      	ldr	r3, [pc, #84]	@ (801d9bc <_strtod_l+0x5dc>)
 801d966:	00d2      	lsls	r2, r2, #3
 801d968:	189b      	adds	r3, r3, r2
 801d96a:	0030      	movs	r0, r6
 801d96c:	681a      	ldr	r2, [r3, #0]
 801d96e:	685b      	ldr	r3, [r3, #4]
 801d970:	0039      	movs	r1, r7
 801d972:	f7e4 fa1f 	bl	8001db4 <__aeabi_ddiv>
 801d976:	0006      	movs	r6, r0
 801d978:	000f      	movs	r7, r1
 801d97a:	1124      	asrs	r4, r4, #4
 801d97c:	d0d5      	beq.n	801d92a <_strtod_l+0x54a>
 801d97e:	2c1f      	cmp	r4, #31
 801d980:	dd28      	ble.n	801d9d4 <_strtod_l+0x5f4>
 801d982:	2300      	movs	r3, #0
 801d984:	9306      	str	r3, [sp, #24]
 801d986:	9307      	str	r3, [sp, #28]
 801d988:	930d      	str	r3, [sp, #52]	@ 0x34
 801d98a:	9308      	str	r3, [sp, #32]
 801d98c:	2322      	movs	r3, #34	@ 0x22
 801d98e:	9a05      	ldr	r2, [sp, #20]
 801d990:	2600      	movs	r6, #0
 801d992:	6013      	str	r3, [r2, #0]
 801d994:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d996:	2700      	movs	r7, #0
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d000      	beq.n	801d99e <_strtod_l+0x5be>
 801d99c:	e763      	b.n	801d866 <_strtod_l+0x486>
 801d99e:	e55a      	b.n	801d456 <_strtod_l+0x76>
 801d9a0:	00004e1f 	.word	0x00004e1f
 801d9a4:	0802426e 	.word	0x0802426e
 801d9a8:	0802410c 	.word	0x0802410c
 801d9ac:	7ff00000 	.word	0x7ff00000
 801d9b0:	08024266 	.word	0x08024266
 801d9b4:	080242a0 	.word	0x080242a0
 801d9b8:	0802452c 	.word	0x0802452c
 801d9bc:	08024418 	.word	0x08024418
 801d9c0:	080243f0 	.word	0x080243f0
 801d9c4:	fcb00000 	.word	0xfcb00000
 801d9c8:	7ca00000 	.word	0x7ca00000
 801d9cc:	7c900000 	.word	0x7c900000
 801d9d0:	7fefffff 	.word	0x7fefffff
 801d9d4:	2310      	movs	r3, #16
 801d9d6:	0022      	movs	r2, r4
 801d9d8:	401a      	ands	r2, r3
 801d9da:	9209      	str	r2, [sp, #36]	@ 0x24
 801d9dc:	421c      	tst	r4, r3
 801d9de:	d001      	beq.n	801d9e4 <_strtod_l+0x604>
 801d9e0:	335a      	adds	r3, #90	@ 0x5a
 801d9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9e4:	0030      	movs	r0, r6
 801d9e6:	0039      	movs	r1, r7
 801d9e8:	2300      	movs	r3, #0
 801d9ea:	4dbf      	ldr	r5, [pc, #764]	@ (801dce8 <_strtod_l+0x908>)
 801d9ec:	2201      	movs	r2, #1
 801d9ee:	4214      	tst	r4, r2
 801d9f0:	d004      	beq.n	801d9fc <_strtod_l+0x61c>
 801d9f2:	682a      	ldr	r2, [r5, #0]
 801d9f4:	686b      	ldr	r3, [r5, #4]
 801d9f6:	f7e4 fe21 	bl	800263c <__aeabi_dmul>
 801d9fa:	2301      	movs	r3, #1
 801d9fc:	1064      	asrs	r4, r4, #1
 801d9fe:	3508      	adds	r5, #8
 801da00:	2c00      	cmp	r4, #0
 801da02:	d1f3      	bne.n	801d9ec <_strtod_l+0x60c>
 801da04:	2b00      	cmp	r3, #0
 801da06:	d001      	beq.n	801da0c <_strtod_l+0x62c>
 801da08:	0006      	movs	r6, r0
 801da0a:	000f      	movs	r7, r1
 801da0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d00d      	beq.n	801da2e <_strtod_l+0x64e>
 801da12:	236b      	movs	r3, #107	@ 0x6b
 801da14:	007a      	lsls	r2, r7, #1
 801da16:	0d52      	lsrs	r2, r2, #21
 801da18:	0039      	movs	r1, r7
 801da1a:	1a9b      	subs	r3, r3, r2
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	dd06      	ble.n	801da2e <_strtod_l+0x64e>
 801da20:	2b1f      	cmp	r3, #31
 801da22:	dd5a      	ble.n	801dada <_strtod_l+0x6fa>
 801da24:	2600      	movs	r6, #0
 801da26:	2b34      	cmp	r3, #52	@ 0x34
 801da28:	dd50      	ble.n	801dacc <_strtod_l+0x6ec>
 801da2a:	27dc      	movs	r7, #220	@ 0xdc
 801da2c:	04bf      	lsls	r7, r7, #18
 801da2e:	2200      	movs	r2, #0
 801da30:	2300      	movs	r3, #0
 801da32:	0030      	movs	r0, r6
 801da34:	0039      	movs	r1, r7
 801da36:	f7e2 fd3b 	bl	80004b0 <__aeabi_dcmpeq>
 801da3a:	2800      	cmp	r0, #0
 801da3c:	d1a1      	bne.n	801d982 <_strtod_l+0x5a2>
 801da3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da40:	9a08      	ldr	r2, [sp, #32]
 801da42:	9300      	str	r3, [sp, #0]
 801da44:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801da46:	9b06      	ldr	r3, [sp, #24]
 801da48:	9805      	ldr	r0, [sp, #20]
 801da4a:	f002 fec5 	bl	80207d8 <__s2b>
 801da4e:	900d      	str	r0, [sp, #52]	@ 0x34
 801da50:	2800      	cmp	r0, #0
 801da52:	d100      	bne.n	801da56 <_strtod_l+0x676>
 801da54:	e6f9      	b.n	801d84a <_strtod_l+0x46a>
 801da56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da58:	9907      	ldr	r1, [sp, #28]
 801da5a:	17da      	asrs	r2, r3, #31
 801da5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da5e:	1a5b      	subs	r3, r3, r1
 801da60:	401a      	ands	r2, r3
 801da62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801da64:	9217      	str	r2, [sp, #92]	@ 0x5c
 801da66:	43db      	mvns	r3, r3
 801da68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801da6a:	17db      	asrs	r3, r3, #31
 801da6c:	401a      	ands	r2, r3
 801da6e:	2300      	movs	r3, #0
 801da70:	921a      	str	r2, [sp, #104]	@ 0x68
 801da72:	9306      	str	r3, [sp, #24]
 801da74:	9307      	str	r3, [sp, #28]
 801da76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da78:	9805      	ldr	r0, [sp, #20]
 801da7a:	6859      	ldr	r1, [r3, #4]
 801da7c:	f002 fe00 	bl	8020680 <_Balloc>
 801da80:	9008      	str	r0, [sp, #32]
 801da82:	2800      	cmp	r0, #0
 801da84:	d100      	bne.n	801da88 <_strtod_l+0x6a8>
 801da86:	e6e5      	b.n	801d854 <_strtod_l+0x474>
 801da88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da8a:	300c      	adds	r0, #12
 801da8c:	0019      	movs	r1, r3
 801da8e:	691a      	ldr	r2, [r3, #16]
 801da90:	310c      	adds	r1, #12
 801da92:	3202      	adds	r2, #2
 801da94:	0092      	lsls	r2, r2, #2
 801da96:	f001 faef 	bl	801f078 <memcpy>
 801da9a:	ab20      	add	r3, sp, #128	@ 0x80
 801da9c:	9301      	str	r3, [sp, #4]
 801da9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801daa0:	9300      	str	r3, [sp, #0]
 801daa2:	0032      	movs	r2, r6
 801daa4:	003b      	movs	r3, r7
 801daa6:	9805      	ldr	r0, [sp, #20]
 801daa8:	9610      	str	r6, [sp, #64]	@ 0x40
 801daaa:	9711      	str	r7, [sp, #68]	@ 0x44
 801daac:	f003 f9e4 	bl	8020e78 <__d2b>
 801dab0:	901e      	str	r0, [sp, #120]	@ 0x78
 801dab2:	2800      	cmp	r0, #0
 801dab4:	d100      	bne.n	801dab8 <_strtod_l+0x6d8>
 801dab6:	e6cd      	b.n	801d854 <_strtod_l+0x474>
 801dab8:	2101      	movs	r1, #1
 801daba:	9805      	ldr	r0, [sp, #20]
 801dabc:	f002 ff28 	bl	8020910 <__i2b>
 801dac0:	9007      	str	r0, [sp, #28]
 801dac2:	2800      	cmp	r0, #0
 801dac4:	d10e      	bne.n	801dae4 <_strtod_l+0x704>
 801dac6:	2300      	movs	r3, #0
 801dac8:	9307      	str	r3, [sp, #28]
 801daca:	e6c3      	b.n	801d854 <_strtod_l+0x474>
 801dacc:	234b      	movs	r3, #75	@ 0x4b
 801dace:	1a9a      	subs	r2, r3, r2
 801dad0:	3b4c      	subs	r3, #76	@ 0x4c
 801dad2:	4093      	lsls	r3, r2
 801dad4:	4019      	ands	r1, r3
 801dad6:	000f      	movs	r7, r1
 801dad8:	e7a9      	b.n	801da2e <_strtod_l+0x64e>
 801dada:	2201      	movs	r2, #1
 801dadc:	4252      	negs	r2, r2
 801dade:	409a      	lsls	r2, r3
 801dae0:	4016      	ands	r6, r2
 801dae2:	e7a4      	b.n	801da2e <_strtod_l+0x64e>
 801dae4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dae6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dae8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801daea:	1ad4      	subs	r4, r2, r3
 801daec:	2b00      	cmp	r3, #0
 801daee:	db01      	blt.n	801daf4 <_strtod_l+0x714>
 801daf0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801daf2:	195d      	adds	r5, r3, r5
 801daf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801daf6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801daf8:	1a5b      	subs	r3, r3, r1
 801dafa:	2136      	movs	r1, #54	@ 0x36
 801dafc:	189b      	adds	r3, r3, r2
 801dafe:	1a8a      	subs	r2, r1, r2
 801db00:	497a      	ldr	r1, [pc, #488]	@ (801dcec <_strtod_l+0x90c>)
 801db02:	2001      	movs	r0, #1
 801db04:	468c      	mov	ip, r1
 801db06:	2100      	movs	r1, #0
 801db08:	3b01      	subs	r3, #1
 801db0a:	9116      	str	r1, [sp, #88]	@ 0x58
 801db0c:	9014      	str	r0, [sp, #80]	@ 0x50
 801db0e:	4563      	cmp	r3, ip
 801db10:	da06      	bge.n	801db20 <_strtod_l+0x740>
 801db12:	4661      	mov	r1, ip
 801db14:	1ac9      	subs	r1, r1, r3
 801db16:	1a52      	subs	r2, r2, r1
 801db18:	291f      	cmp	r1, #31
 801db1a:	dc3f      	bgt.n	801db9c <_strtod_l+0x7bc>
 801db1c:	4088      	lsls	r0, r1
 801db1e:	9014      	str	r0, [sp, #80]	@ 0x50
 801db20:	18ab      	adds	r3, r5, r2
 801db22:	930e      	str	r3, [sp, #56]	@ 0x38
 801db24:	18a4      	adds	r4, r4, r2
 801db26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db2a:	191c      	adds	r4, r3, r4
 801db2c:	002b      	movs	r3, r5
 801db2e:	4295      	cmp	r5, r2
 801db30:	dd00      	ble.n	801db34 <_strtod_l+0x754>
 801db32:	0013      	movs	r3, r2
 801db34:	42a3      	cmp	r3, r4
 801db36:	dd00      	ble.n	801db3a <_strtod_l+0x75a>
 801db38:	0023      	movs	r3, r4
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	dd04      	ble.n	801db48 <_strtod_l+0x768>
 801db3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db40:	1ae4      	subs	r4, r4, r3
 801db42:	1ad2      	subs	r2, r2, r3
 801db44:	920e      	str	r2, [sp, #56]	@ 0x38
 801db46:	1aed      	subs	r5, r5, r3
 801db48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	dd16      	ble.n	801db7c <_strtod_l+0x79c>
 801db4e:	001a      	movs	r2, r3
 801db50:	9907      	ldr	r1, [sp, #28]
 801db52:	9805      	ldr	r0, [sp, #20]
 801db54:	f002 ffa6 	bl	8020aa4 <__pow5mult>
 801db58:	9007      	str	r0, [sp, #28]
 801db5a:	2800      	cmp	r0, #0
 801db5c:	d0b3      	beq.n	801dac6 <_strtod_l+0x6e6>
 801db5e:	0001      	movs	r1, r0
 801db60:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801db62:	9805      	ldr	r0, [sp, #20]
 801db64:	f002 feec 	bl	8020940 <__multiply>
 801db68:	9013      	str	r0, [sp, #76]	@ 0x4c
 801db6a:	2800      	cmp	r0, #0
 801db6c:	d100      	bne.n	801db70 <_strtod_l+0x790>
 801db6e:	e671      	b.n	801d854 <_strtod_l+0x474>
 801db70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801db72:	9805      	ldr	r0, [sp, #20]
 801db74:	f002 fdc8 	bl	8020708 <_Bfree>
 801db78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801db7a:	931e      	str	r3, [sp, #120]	@ 0x78
 801db7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db7e:	2b00      	cmp	r3, #0
 801db80:	dc12      	bgt.n	801dba8 <_strtod_l+0x7c8>
 801db82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db84:	2b00      	cmp	r3, #0
 801db86:	dd18      	ble.n	801dbba <_strtod_l+0x7da>
 801db88:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801db8a:	9908      	ldr	r1, [sp, #32]
 801db8c:	9805      	ldr	r0, [sp, #20]
 801db8e:	f002 ff89 	bl	8020aa4 <__pow5mult>
 801db92:	9008      	str	r0, [sp, #32]
 801db94:	2800      	cmp	r0, #0
 801db96:	d110      	bne.n	801dbba <_strtod_l+0x7da>
 801db98:	2300      	movs	r3, #0
 801db9a:	e65a      	b.n	801d852 <_strtod_l+0x472>
 801db9c:	4954      	ldr	r1, [pc, #336]	@ (801dcf0 <_strtod_l+0x910>)
 801db9e:	1acb      	subs	r3, r1, r3
 801dba0:	0001      	movs	r1, r0
 801dba2:	4099      	lsls	r1, r3
 801dba4:	9116      	str	r1, [sp, #88]	@ 0x58
 801dba6:	e7ba      	b.n	801db1e <_strtod_l+0x73e>
 801dba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbaa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dbac:	9805      	ldr	r0, [sp, #20]
 801dbae:	f002 ffd5 	bl	8020b5c <__lshift>
 801dbb2:	901e      	str	r0, [sp, #120]	@ 0x78
 801dbb4:	2800      	cmp	r0, #0
 801dbb6:	d1e4      	bne.n	801db82 <_strtod_l+0x7a2>
 801dbb8:	e64c      	b.n	801d854 <_strtod_l+0x474>
 801dbba:	2c00      	cmp	r4, #0
 801dbbc:	dd07      	ble.n	801dbce <_strtod_l+0x7ee>
 801dbbe:	0022      	movs	r2, r4
 801dbc0:	9908      	ldr	r1, [sp, #32]
 801dbc2:	9805      	ldr	r0, [sp, #20]
 801dbc4:	f002 ffca 	bl	8020b5c <__lshift>
 801dbc8:	9008      	str	r0, [sp, #32]
 801dbca:	2800      	cmp	r0, #0
 801dbcc:	d0e4      	beq.n	801db98 <_strtod_l+0x7b8>
 801dbce:	2d00      	cmp	r5, #0
 801dbd0:	dd08      	ble.n	801dbe4 <_strtod_l+0x804>
 801dbd2:	002a      	movs	r2, r5
 801dbd4:	9907      	ldr	r1, [sp, #28]
 801dbd6:	9805      	ldr	r0, [sp, #20]
 801dbd8:	f002 ffc0 	bl	8020b5c <__lshift>
 801dbdc:	9007      	str	r0, [sp, #28]
 801dbde:	2800      	cmp	r0, #0
 801dbe0:	d100      	bne.n	801dbe4 <_strtod_l+0x804>
 801dbe2:	e637      	b.n	801d854 <_strtod_l+0x474>
 801dbe4:	9a08      	ldr	r2, [sp, #32]
 801dbe6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dbe8:	9805      	ldr	r0, [sp, #20]
 801dbea:	f003 f83f 	bl	8020c6c <__mdiff>
 801dbee:	9006      	str	r0, [sp, #24]
 801dbf0:	2800      	cmp	r0, #0
 801dbf2:	d100      	bne.n	801dbf6 <_strtod_l+0x816>
 801dbf4:	e62e      	b.n	801d854 <_strtod_l+0x474>
 801dbf6:	68c3      	ldr	r3, [r0, #12]
 801dbf8:	9907      	ldr	r1, [sp, #28]
 801dbfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dbfc:	2300      	movs	r3, #0
 801dbfe:	60c3      	str	r3, [r0, #12]
 801dc00:	f003 f818 	bl	8020c34 <__mcmp>
 801dc04:	2800      	cmp	r0, #0
 801dc06:	da3b      	bge.n	801dc80 <_strtod_l+0x8a0>
 801dc08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dc0a:	4333      	orrs	r3, r6
 801dc0c:	d167      	bne.n	801dcde <_strtod_l+0x8fe>
 801dc0e:	033b      	lsls	r3, r7, #12
 801dc10:	d165      	bne.n	801dcde <_strtod_l+0x8fe>
 801dc12:	22d6      	movs	r2, #214	@ 0xd6
 801dc14:	4b37      	ldr	r3, [pc, #220]	@ (801dcf4 <_strtod_l+0x914>)
 801dc16:	04d2      	lsls	r2, r2, #19
 801dc18:	403b      	ands	r3, r7
 801dc1a:	4293      	cmp	r3, r2
 801dc1c:	d95f      	bls.n	801dcde <_strtod_l+0x8fe>
 801dc1e:	9b06      	ldr	r3, [sp, #24]
 801dc20:	695b      	ldr	r3, [r3, #20]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d103      	bne.n	801dc2e <_strtod_l+0x84e>
 801dc26:	9b06      	ldr	r3, [sp, #24]
 801dc28:	691b      	ldr	r3, [r3, #16]
 801dc2a:	2b01      	cmp	r3, #1
 801dc2c:	dd57      	ble.n	801dcde <_strtod_l+0x8fe>
 801dc2e:	9906      	ldr	r1, [sp, #24]
 801dc30:	2201      	movs	r2, #1
 801dc32:	9805      	ldr	r0, [sp, #20]
 801dc34:	f002 ff92 	bl	8020b5c <__lshift>
 801dc38:	9907      	ldr	r1, [sp, #28]
 801dc3a:	9006      	str	r0, [sp, #24]
 801dc3c:	f002 fffa 	bl	8020c34 <__mcmp>
 801dc40:	2800      	cmp	r0, #0
 801dc42:	dd4c      	ble.n	801dcde <_strtod_l+0x8fe>
 801dc44:	4b2b      	ldr	r3, [pc, #172]	@ (801dcf4 <_strtod_l+0x914>)
 801dc46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dc48:	403b      	ands	r3, r7
 801dc4a:	2a00      	cmp	r2, #0
 801dc4c:	d074      	beq.n	801dd38 <_strtod_l+0x958>
 801dc4e:	22d6      	movs	r2, #214	@ 0xd6
 801dc50:	04d2      	lsls	r2, r2, #19
 801dc52:	4293      	cmp	r3, r2
 801dc54:	d870      	bhi.n	801dd38 <_strtod_l+0x958>
 801dc56:	22dc      	movs	r2, #220	@ 0xdc
 801dc58:	0492      	lsls	r2, r2, #18
 801dc5a:	4293      	cmp	r3, r2
 801dc5c:	d800      	bhi.n	801dc60 <_strtod_l+0x880>
 801dc5e:	e695      	b.n	801d98c <_strtod_l+0x5ac>
 801dc60:	0030      	movs	r0, r6
 801dc62:	0039      	movs	r1, r7
 801dc64:	4b24      	ldr	r3, [pc, #144]	@ (801dcf8 <_strtod_l+0x918>)
 801dc66:	2200      	movs	r2, #0
 801dc68:	f7e4 fce8 	bl	800263c <__aeabi_dmul>
 801dc6c:	4b21      	ldr	r3, [pc, #132]	@ (801dcf4 <_strtod_l+0x914>)
 801dc6e:	0006      	movs	r6, r0
 801dc70:	000f      	movs	r7, r1
 801dc72:	420b      	tst	r3, r1
 801dc74:	d000      	beq.n	801dc78 <_strtod_l+0x898>
 801dc76:	e5f6      	b.n	801d866 <_strtod_l+0x486>
 801dc78:	2322      	movs	r3, #34	@ 0x22
 801dc7a:	9a05      	ldr	r2, [sp, #20]
 801dc7c:	6013      	str	r3, [r2, #0]
 801dc7e:	e5f2      	b.n	801d866 <_strtod_l+0x486>
 801dc80:	970e      	str	r7, [sp, #56]	@ 0x38
 801dc82:	2800      	cmp	r0, #0
 801dc84:	d175      	bne.n	801dd72 <_strtod_l+0x992>
 801dc86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dc88:	033b      	lsls	r3, r7, #12
 801dc8a:	0b1b      	lsrs	r3, r3, #12
 801dc8c:	2a00      	cmp	r2, #0
 801dc8e:	d039      	beq.n	801dd04 <_strtod_l+0x924>
 801dc90:	4a1a      	ldr	r2, [pc, #104]	@ (801dcfc <_strtod_l+0x91c>)
 801dc92:	4293      	cmp	r3, r2
 801dc94:	d138      	bne.n	801dd08 <_strtod_l+0x928>
 801dc96:	2101      	movs	r1, #1
 801dc98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc9a:	4249      	negs	r1, r1
 801dc9c:	0032      	movs	r2, r6
 801dc9e:	0008      	movs	r0, r1
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d00b      	beq.n	801dcbc <_strtod_l+0x8dc>
 801dca4:	24d4      	movs	r4, #212	@ 0xd4
 801dca6:	4b13      	ldr	r3, [pc, #76]	@ (801dcf4 <_strtod_l+0x914>)
 801dca8:	0008      	movs	r0, r1
 801dcaa:	403b      	ands	r3, r7
 801dcac:	04e4      	lsls	r4, r4, #19
 801dcae:	42a3      	cmp	r3, r4
 801dcb0:	d804      	bhi.n	801dcbc <_strtod_l+0x8dc>
 801dcb2:	306c      	adds	r0, #108	@ 0x6c
 801dcb4:	0d1b      	lsrs	r3, r3, #20
 801dcb6:	1ac3      	subs	r3, r0, r3
 801dcb8:	4099      	lsls	r1, r3
 801dcba:	0008      	movs	r0, r1
 801dcbc:	4282      	cmp	r2, r0
 801dcbe:	d123      	bne.n	801dd08 <_strtod_l+0x928>
 801dcc0:	4b0f      	ldr	r3, [pc, #60]	@ (801dd00 <_strtod_l+0x920>)
 801dcc2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dcc4:	4299      	cmp	r1, r3
 801dcc6:	d102      	bne.n	801dcce <_strtod_l+0x8ee>
 801dcc8:	3201      	adds	r2, #1
 801dcca:	d100      	bne.n	801dcce <_strtod_l+0x8ee>
 801dccc:	e5c2      	b.n	801d854 <_strtod_l+0x474>
 801dcce:	4b09      	ldr	r3, [pc, #36]	@ (801dcf4 <_strtod_l+0x914>)
 801dcd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dcd2:	2600      	movs	r6, #0
 801dcd4:	401a      	ands	r2, r3
 801dcd6:	0013      	movs	r3, r2
 801dcd8:	2280      	movs	r2, #128	@ 0x80
 801dcda:	0352      	lsls	r2, r2, #13
 801dcdc:	189f      	adds	r7, r3, r2
 801dcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d1bd      	bne.n	801dc60 <_strtod_l+0x880>
 801dce4:	e5bf      	b.n	801d866 <_strtod_l+0x486>
 801dce6:	46c0      	nop			@ (mov r8, r8)
 801dce8:	08024138 	.word	0x08024138
 801dcec:	fffffc02 	.word	0xfffffc02
 801dcf0:	fffffbe2 	.word	0xfffffbe2
 801dcf4:	7ff00000 	.word	0x7ff00000
 801dcf8:	39500000 	.word	0x39500000
 801dcfc:	000fffff 	.word	0x000fffff
 801dd00:	7fefffff 	.word	0x7fefffff
 801dd04:	4333      	orrs	r3, r6
 801dd06:	d09d      	beq.n	801dc44 <_strtod_l+0x864>
 801dd08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d01c      	beq.n	801dd48 <_strtod_l+0x968>
 801dd0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd10:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dd12:	4213      	tst	r3, r2
 801dd14:	d0e3      	beq.n	801dcde <_strtod_l+0x8fe>
 801dd16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd18:	0030      	movs	r0, r6
 801dd1a:	0039      	movs	r1, r7
 801dd1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d016      	beq.n	801dd50 <_strtod_l+0x970>
 801dd22:	f7ff fb45 	bl	801d3b0 <sulp>
 801dd26:	0002      	movs	r2, r0
 801dd28:	000b      	movs	r3, r1
 801dd2a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dd2c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dd2e:	f7e3 fcdd 	bl	80016ec <__aeabi_dadd>
 801dd32:	0006      	movs	r6, r0
 801dd34:	000f      	movs	r7, r1
 801dd36:	e7d2      	b.n	801dcde <_strtod_l+0x8fe>
 801dd38:	2601      	movs	r6, #1
 801dd3a:	4a92      	ldr	r2, [pc, #584]	@ (801df84 <_strtod_l+0xba4>)
 801dd3c:	4276      	negs	r6, r6
 801dd3e:	189b      	adds	r3, r3, r2
 801dd40:	4a91      	ldr	r2, [pc, #580]	@ (801df88 <_strtod_l+0xba8>)
 801dd42:	431a      	orrs	r2, r3
 801dd44:	0017      	movs	r7, r2
 801dd46:	e7ca      	b.n	801dcde <_strtod_l+0x8fe>
 801dd48:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd4a:	4233      	tst	r3, r6
 801dd4c:	d0c7      	beq.n	801dcde <_strtod_l+0x8fe>
 801dd4e:	e7e2      	b.n	801dd16 <_strtod_l+0x936>
 801dd50:	f7ff fb2e 	bl	801d3b0 <sulp>
 801dd54:	0002      	movs	r2, r0
 801dd56:	000b      	movs	r3, r1
 801dd58:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dd5a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dd5c:	f7e4 ff36 	bl	8002bcc <__aeabi_dsub>
 801dd60:	2200      	movs	r2, #0
 801dd62:	2300      	movs	r3, #0
 801dd64:	0006      	movs	r6, r0
 801dd66:	000f      	movs	r7, r1
 801dd68:	f7e2 fba2 	bl	80004b0 <__aeabi_dcmpeq>
 801dd6c:	2800      	cmp	r0, #0
 801dd6e:	d0b6      	beq.n	801dcde <_strtod_l+0x8fe>
 801dd70:	e60c      	b.n	801d98c <_strtod_l+0x5ac>
 801dd72:	9907      	ldr	r1, [sp, #28]
 801dd74:	9806      	ldr	r0, [sp, #24]
 801dd76:	f003 f8df 	bl	8020f38 <__ratio>
 801dd7a:	2380      	movs	r3, #128	@ 0x80
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	05db      	lsls	r3, r3, #23
 801dd80:	0004      	movs	r4, r0
 801dd82:	000d      	movs	r5, r1
 801dd84:	f7e2 fba4 	bl	80004d0 <__aeabi_dcmple>
 801dd88:	2800      	cmp	r0, #0
 801dd8a:	d06c      	beq.n	801de66 <_strtod_l+0xa86>
 801dd8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d177      	bne.n	801de82 <_strtod_l+0xaa2>
 801dd92:	2e00      	cmp	r6, #0
 801dd94:	d157      	bne.n	801de46 <_strtod_l+0xa66>
 801dd96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd98:	031b      	lsls	r3, r3, #12
 801dd9a:	d15a      	bne.n	801de52 <_strtod_l+0xa72>
 801dd9c:	2200      	movs	r2, #0
 801dd9e:	0020      	movs	r0, r4
 801dda0:	0029      	movs	r1, r5
 801dda2:	4b7a      	ldr	r3, [pc, #488]	@ (801df8c <_strtod_l+0xbac>)
 801dda4:	f7e2 fb8a 	bl	80004bc <__aeabi_dcmplt>
 801dda8:	2800      	cmp	r0, #0
 801ddaa:	d159      	bne.n	801de60 <_strtod_l+0xa80>
 801ddac:	0020      	movs	r0, r4
 801ddae:	0029      	movs	r1, r5
 801ddb0:	2200      	movs	r2, #0
 801ddb2:	4b77      	ldr	r3, [pc, #476]	@ (801df90 <_strtod_l+0xbb0>)
 801ddb4:	f7e4 fc42 	bl	800263c <__aeabi_dmul>
 801ddb8:	0004      	movs	r4, r0
 801ddba:	000d      	movs	r5, r1
 801ddbc:	2380      	movs	r3, #128	@ 0x80
 801ddbe:	061b      	lsls	r3, r3, #24
 801ddc0:	18eb      	adds	r3, r5, r3
 801ddc2:	940a      	str	r4, [sp, #40]	@ 0x28
 801ddc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ddc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddca:	9214      	str	r2, [sp, #80]	@ 0x50
 801ddcc:	9315      	str	r3, [sp, #84]	@ 0x54
 801ddce:	4a71      	ldr	r2, [pc, #452]	@ (801df94 <_strtod_l+0xbb4>)
 801ddd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ddd2:	4013      	ands	r3, r2
 801ddd4:	9316      	str	r3, [sp, #88]	@ 0x58
 801ddd6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ddd8:	4b6f      	ldr	r3, [pc, #444]	@ (801df98 <_strtod_l+0xbb8>)
 801ddda:	429a      	cmp	r2, r3
 801dddc:	d000      	beq.n	801dde0 <_strtod_l+0xa00>
 801ddde:	e087      	b.n	801def0 <_strtod_l+0xb10>
 801dde0:	4a6e      	ldr	r2, [pc, #440]	@ (801df9c <_strtod_l+0xbbc>)
 801dde2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dde4:	4694      	mov	ip, r2
 801dde6:	4463      	add	r3, ip
 801dde8:	001f      	movs	r7, r3
 801ddea:	0030      	movs	r0, r6
 801ddec:	0019      	movs	r1, r3
 801ddee:	f002 ffd7 	bl	8020da0 <__ulp>
 801ddf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ddf6:	f7e4 fc21 	bl	800263c <__aeabi_dmul>
 801ddfa:	0032      	movs	r2, r6
 801ddfc:	003b      	movs	r3, r7
 801ddfe:	f7e3 fc75 	bl	80016ec <__aeabi_dadd>
 801de02:	4a64      	ldr	r2, [pc, #400]	@ (801df94 <_strtod_l+0xbb4>)
 801de04:	4b66      	ldr	r3, [pc, #408]	@ (801dfa0 <_strtod_l+0xbc0>)
 801de06:	0006      	movs	r6, r0
 801de08:	400a      	ands	r2, r1
 801de0a:	429a      	cmp	r2, r3
 801de0c:	d940      	bls.n	801de90 <_strtod_l+0xab0>
 801de0e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801de10:	4a64      	ldr	r2, [pc, #400]	@ (801dfa4 <_strtod_l+0xbc4>)
 801de12:	4293      	cmp	r3, r2
 801de14:	d103      	bne.n	801de1e <_strtod_l+0xa3e>
 801de16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801de18:	3301      	adds	r3, #1
 801de1a:	d100      	bne.n	801de1e <_strtod_l+0xa3e>
 801de1c:	e51a      	b.n	801d854 <_strtod_l+0x474>
 801de1e:	2601      	movs	r6, #1
 801de20:	4f60      	ldr	r7, [pc, #384]	@ (801dfa4 <_strtod_l+0xbc4>)
 801de22:	4276      	negs	r6, r6
 801de24:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801de26:	9805      	ldr	r0, [sp, #20]
 801de28:	f002 fc6e 	bl	8020708 <_Bfree>
 801de2c:	9908      	ldr	r1, [sp, #32]
 801de2e:	9805      	ldr	r0, [sp, #20]
 801de30:	f002 fc6a 	bl	8020708 <_Bfree>
 801de34:	9907      	ldr	r1, [sp, #28]
 801de36:	9805      	ldr	r0, [sp, #20]
 801de38:	f002 fc66 	bl	8020708 <_Bfree>
 801de3c:	9906      	ldr	r1, [sp, #24]
 801de3e:	9805      	ldr	r0, [sp, #20]
 801de40:	f002 fc62 	bl	8020708 <_Bfree>
 801de44:	e617      	b.n	801da76 <_strtod_l+0x696>
 801de46:	2e01      	cmp	r6, #1
 801de48:	d103      	bne.n	801de52 <_strtod_l+0xa72>
 801de4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d100      	bne.n	801de52 <_strtod_l+0xa72>
 801de50:	e59c      	b.n	801d98c <_strtod_l+0x5ac>
 801de52:	2300      	movs	r3, #0
 801de54:	4c54      	ldr	r4, [pc, #336]	@ (801dfa8 <_strtod_l+0xbc8>)
 801de56:	4d4d      	ldr	r5, [pc, #308]	@ (801df8c <_strtod_l+0xbac>)
 801de58:	930a      	str	r3, [sp, #40]	@ 0x28
 801de5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801de5c:	2400      	movs	r4, #0
 801de5e:	e7b2      	b.n	801ddc6 <_strtod_l+0x9e6>
 801de60:	2400      	movs	r4, #0
 801de62:	4d4b      	ldr	r5, [pc, #300]	@ (801df90 <_strtod_l+0xbb0>)
 801de64:	e7aa      	b.n	801ddbc <_strtod_l+0x9dc>
 801de66:	0020      	movs	r0, r4
 801de68:	0029      	movs	r1, r5
 801de6a:	4b49      	ldr	r3, [pc, #292]	@ (801df90 <_strtod_l+0xbb0>)
 801de6c:	2200      	movs	r2, #0
 801de6e:	f7e4 fbe5 	bl	800263c <__aeabi_dmul>
 801de72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801de74:	0004      	movs	r4, r0
 801de76:	000d      	movs	r5, r1
 801de78:	2b00      	cmp	r3, #0
 801de7a:	d09f      	beq.n	801ddbc <_strtod_l+0x9dc>
 801de7c:	940a      	str	r4, [sp, #40]	@ 0x28
 801de7e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801de80:	e7a1      	b.n	801ddc6 <_strtod_l+0x9e6>
 801de82:	2300      	movs	r3, #0
 801de84:	4c41      	ldr	r4, [pc, #260]	@ (801df8c <_strtod_l+0xbac>)
 801de86:	0025      	movs	r5, r4
 801de88:	930a      	str	r3, [sp, #40]	@ 0x28
 801de8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801de8c:	001c      	movs	r4, r3
 801de8e:	e79a      	b.n	801ddc6 <_strtod_l+0x9e6>
 801de90:	23d4      	movs	r3, #212	@ 0xd4
 801de92:	049b      	lsls	r3, r3, #18
 801de94:	18cf      	adds	r7, r1, r3
 801de96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de98:	9710      	str	r7, [sp, #64]	@ 0x40
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d1c2      	bne.n	801de24 <_strtod_l+0xa44>
 801de9e:	4b3d      	ldr	r3, [pc, #244]	@ (801df94 <_strtod_l+0xbb4>)
 801dea0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dea2:	403b      	ands	r3, r7
 801dea4:	429a      	cmp	r2, r3
 801dea6:	d1bd      	bne.n	801de24 <_strtod_l+0xa44>
 801dea8:	0020      	movs	r0, r4
 801deaa:	0029      	movs	r1, r5
 801deac:	f7e2 fbec 	bl	8000688 <__aeabi_d2lz>
 801deb0:	f7e2 fc24 	bl	80006fc <__aeabi_l2d>
 801deb4:	0002      	movs	r2, r0
 801deb6:	000b      	movs	r3, r1
 801deb8:	0020      	movs	r0, r4
 801deba:	0029      	movs	r1, r5
 801debc:	f7e4 fe86 	bl	8002bcc <__aeabi_dsub>
 801dec0:	033c      	lsls	r4, r7, #12
 801dec2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dec4:	0b24      	lsrs	r4, r4, #12
 801dec6:	4334      	orrs	r4, r6
 801dec8:	900e      	str	r0, [sp, #56]	@ 0x38
 801deca:	910f      	str	r1, [sp, #60]	@ 0x3c
 801decc:	4a37      	ldr	r2, [pc, #220]	@ (801dfac <_strtod_l+0xbcc>)
 801dece:	431c      	orrs	r4, r3
 801ded0:	d052      	beq.n	801df78 <_strtod_l+0xb98>
 801ded2:	4b37      	ldr	r3, [pc, #220]	@ (801dfb0 <_strtod_l+0xbd0>)
 801ded4:	f7e2 faf2 	bl	80004bc <__aeabi_dcmplt>
 801ded8:	2800      	cmp	r0, #0
 801deda:	d000      	beq.n	801dede <_strtod_l+0xafe>
 801dedc:	e4c3      	b.n	801d866 <_strtod_l+0x486>
 801dede:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801dee0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801dee2:	4a34      	ldr	r2, [pc, #208]	@ (801dfb4 <_strtod_l+0xbd4>)
 801dee4:	4b2a      	ldr	r3, [pc, #168]	@ (801df90 <_strtod_l+0xbb0>)
 801dee6:	f7e2 fafd 	bl	80004e4 <__aeabi_dcmpgt>
 801deea:	2800      	cmp	r0, #0
 801deec:	d09a      	beq.n	801de24 <_strtod_l+0xa44>
 801deee:	e4ba      	b.n	801d866 <_strtod_l+0x486>
 801def0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801def2:	2b00      	cmp	r3, #0
 801def4:	d02a      	beq.n	801df4c <_strtod_l+0xb6c>
 801def6:	23d4      	movs	r3, #212	@ 0xd4
 801def8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801defa:	04db      	lsls	r3, r3, #19
 801defc:	429a      	cmp	r2, r3
 801defe:	d825      	bhi.n	801df4c <_strtod_l+0xb6c>
 801df00:	0020      	movs	r0, r4
 801df02:	0029      	movs	r1, r5
 801df04:	4a2c      	ldr	r2, [pc, #176]	@ (801dfb8 <_strtod_l+0xbd8>)
 801df06:	4b2d      	ldr	r3, [pc, #180]	@ (801dfbc <_strtod_l+0xbdc>)
 801df08:	f7e2 fae2 	bl	80004d0 <__aeabi_dcmple>
 801df0c:	2800      	cmp	r0, #0
 801df0e:	d016      	beq.n	801df3e <_strtod_l+0xb5e>
 801df10:	0020      	movs	r0, r4
 801df12:	0029      	movs	r1, r5
 801df14:	f7e2 fb9a 	bl	800064c <__aeabi_d2uiz>
 801df18:	2800      	cmp	r0, #0
 801df1a:	d100      	bne.n	801df1e <_strtod_l+0xb3e>
 801df1c:	3001      	adds	r0, #1
 801df1e:	f7e5 fa7d 	bl	800341c <__aeabi_ui2d>
 801df22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801df24:	0004      	movs	r4, r0
 801df26:	000d      	movs	r5, r1
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d122      	bne.n	801df72 <_strtod_l+0xb92>
 801df2c:	2380      	movs	r3, #128	@ 0x80
 801df2e:	061b      	lsls	r3, r3, #24
 801df30:	18cb      	adds	r3, r1, r3
 801df32:	9018      	str	r0, [sp, #96]	@ 0x60
 801df34:	9319      	str	r3, [sp, #100]	@ 0x64
 801df36:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801df38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df3a:	9214      	str	r2, [sp, #80]	@ 0x50
 801df3c:	9315      	str	r3, [sp, #84]	@ 0x54
 801df3e:	22d6      	movs	r2, #214	@ 0xd6
 801df40:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801df42:	04d2      	lsls	r2, r2, #19
 801df44:	189b      	adds	r3, r3, r2
 801df46:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801df48:	1a9b      	subs	r3, r3, r2
 801df4a:	9315      	str	r3, [sp, #84]	@ 0x54
 801df4c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801df4e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801df50:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801df52:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801df54:	f002 ff24 	bl	8020da0 <__ulp>
 801df58:	0002      	movs	r2, r0
 801df5a:	000b      	movs	r3, r1
 801df5c:	0030      	movs	r0, r6
 801df5e:	0039      	movs	r1, r7
 801df60:	f7e4 fb6c 	bl	800263c <__aeabi_dmul>
 801df64:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801df66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df68:	f7e3 fbc0 	bl	80016ec <__aeabi_dadd>
 801df6c:	0006      	movs	r6, r0
 801df6e:	000f      	movs	r7, r1
 801df70:	e791      	b.n	801de96 <_strtod_l+0xab6>
 801df72:	9418      	str	r4, [sp, #96]	@ 0x60
 801df74:	9519      	str	r5, [sp, #100]	@ 0x64
 801df76:	e7de      	b.n	801df36 <_strtod_l+0xb56>
 801df78:	4b11      	ldr	r3, [pc, #68]	@ (801dfc0 <_strtod_l+0xbe0>)
 801df7a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801df7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801df7e:	f7e2 fa9d 	bl	80004bc <__aeabi_dcmplt>
 801df82:	e7b2      	b.n	801deea <_strtod_l+0xb0a>
 801df84:	fff00000 	.word	0xfff00000
 801df88:	000fffff 	.word	0x000fffff
 801df8c:	3ff00000 	.word	0x3ff00000
 801df90:	3fe00000 	.word	0x3fe00000
 801df94:	7ff00000 	.word	0x7ff00000
 801df98:	7fe00000 	.word	0x7fe00000
 801df9c:	fcb00000 	.word	0xfcb00000
 801dfa0:	7c9fffff 	.word	0x7c9fffff
 801dfa4:	7fefffff 	.word	0x7fefffff
 801dfa8:	bff00000 	.word	0xbff00000
 801dfac:	94a03595 	.word	0x94a03595
 801dfb0:	3fdfffff 	.word	0x3fdfffff
 801dfb4:	35afe535 	.word	0x35afe535
 801dfb8:	ffc00000 	.word	0xffc00000
 801dfbc:	41dfffff 	.word	0x41dfffff
 801dfc0:	3fcfffff 	.word	0x3fcfffff

0801dfc4 <strtod>:
 801dfc4:	b510      	push	{r4, lr}
 801dfc6:	4c04      	ldr	r4, [pc, #16]	@ (801dfd8 <strtod+0x14>)
 801dfc8:	000a      	movs	r2, r1
 801dfca:	0001      	movs	r1, r0
 801dfcc:	4b03      	ldr	r3, [pc, #12]	@ (801dfdc <strtod+0x18>)
 801dfce:	6820      	ldr	r0, [r4, #0]
 801dfd0:	f7ff fa06 	bl	801d3e0 <_strtod_l>
 801dfd4:	bd10      	pop	{r4, pc}
 801dfd6:	46c0      	nop			@ (mov r8, r8)
 801dfd8:	200003c8 	.word	0x200003c8
 801dfdc:	2000025c 	.word	0x2000025c

0801dfe0 <_strtol_l.constprop.0>:
 801dfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfe2:	b085      	sub	sp, #20
 801dfe4:	0017      	movs	r7, r2
 801dfe6:	001e      	movs	r6, r3
 801dfe8:	9003      	str	r0, [sp, #12]
 801dfea:	9101      	str	r1, [sp, #4]
 801dfec:	2b24      	cmp	r3, #36	@ 0x24
 801dfee:	d844      	bhi.n	801e07a <_strtol_l.constprop.0+0x9a>
 801dff0:	000c      	movs	r4, r1
 801dff2:	2b01      	cmp	r3, #1
 801dff4:	d041      	beq.n	801e07a <_strtol_l.constprop.0+0x9a>
 801dff6:	4b3d      	ldr	r3, [pc, #244]	@ (801e0ec <_strtol_l.constprop.0+0x10c>)
 801dff8:	2208      	movs	r2, #8
 801dffa:	469c      	mov	ip, r3
 801dffc:	0023      	movs	r3, r4
 801dffe:	4661      	mov	r1, ip
 801e000:	781d      	ldrb	r5, [r3, #0]
 801e002:	3401      	adds	r4, #1
 801e004:	5d48      	ldrb	r0, [r1, r5]
 801e006:	0001      	movs	r1, r0
 801e008:	4011      	ands	r1, r2
 801e00a:	4210      	tst	r0, r2
 801e00c:	d1f6      	bne.n	801dffc <_strtol_l.constprop.0+0x1c>
 801e00e:	2d2d      	cmp	r5, #45	@ 0x2d
 801e010:	d13a      	bne.n	801e088 <_strtol_l.constprop.0+0xa8>
 801e012:	7825      	ldrb	r5, [r4, #0]
 801e014:	1c9c      	adds	r4, r3, #2
 801e016:	2301      	movs	r3, #1
 801e018:	9300      	str	r3, [sp, #0]
 801e01a:	2210      	movs	r2, #16
 801e01c:	0033      	movs	r3, r6
 801e01e:	4393      	bics	r3, r2
 801e020:	d109      	bne.n	801e036 <_strtol_l.constprop.0+0x56>
 801e022:	2d30      	cmp	r5, #48	@ 0x30
 801e024:	d136      	bne.n	801e094 <_strtol_l.constprop.0+0xb4>
 801e026:	2120      	movs	r1, #32
 801e028:	7823      	ldrb	r3, [r4, #0]
 801e02a:	438b      	bics	r3, r1
 801e02c:	2b58      	cmp	r3, #88	@ 0x58
 801e02e:	d131      	bne.n	801e094 <_strtol_l.constprop.0+0xb4>
 801e030:	0016      	movs	r6, r2
 801e032:	7865      	ldrb	r5, [r4, #1]
 801e034:	3402      	adds	r4, #2
 801e036:	4a2e      	ldr	r2, [pc, #184]	@ (801e0f0 <_strtol_l.constprop.0+0x110>)
 801e038:	9b00      	ldr	r3, [sp, #0]
 801e03a:	4694      	mov	ip, r2
 801e03c:	4463      	add	r3, ip
 801e03e:	0031      	movs	r1, r6
 801e040:	0018      	movs	r0, r3
 801e042:	9302      	str	r3, [sp, #8]
 801e044:	f7e2 f934 	bl	80002b0 <__aeabi_uidivmod>
 801e048:	2200      	movs	r2, #0
 801e04a:	4684      	mov	ip, r0
 801e04c:	0010      	movs	r0, r2
 801e04e:	002b      	movs	r3, r5
 801e050:	3b30      	subs	r3, #48	@ 0x30
 801e052:	2b09      	cmp	r3, #9
 801e054:	d825      	bhi.n	801e0a2 <_strtol_l.constprop.0+0xc2>
 801e056:	001d      	movs	r5, r3
 801e058:	42ae      	cmp	r6, r5
 801e05a:	dd31      	ble.n	801e0c0 <_strtol_l.constprop.0+0xe0>
 801e05c:	1c53      	adds	r3, r2, #1
 801e05e:	d009      	beq.n	801e074 <_strtol_l.constprop.0+0x94>
 801e060:	2201      	movs	r2, #1
 801e062:	4252      	negs	r2, r2
 801e064:	4584      	cmp	ip, r0
 801e066:	d305      	bcc.n	801e074 <_strtol_l.constprop.0+0x94>
 801e068:	d101      	bne.n	801e06e <_strtol_l.constprop.0+0x8e>
 801e06a:	42a9      	cmp	r1, r5
 801e06c:	db25      	blt.n	801e0ba <_strtol_l.constprop.0+0xda>
 801e06e:	2201      	movs	r2, #1
 801e070:	4370      	muls	r0, r6
 801e072:	1828      	adds	r0, r5, r0
 801e074:	7825      	ldrb	r5, [r4, #0]
 801e076:	3401      	adds	r4, #1
 801e078:	e7e9      	b.n	801e04e <_strtol_l.constprop.0+0x6e>
 801e07a:	f000 ffc5 	bl	801f008 <__errno>
 801e07e:	2316      	movs	r3, #22
 801e080:	6003      	str	r3, [r0, #0]
 801e082:	2000      	movs	r0, #0
 801e084:	b005      	add	sp, #20
 801e086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e088:	9100      	str	r1, [sp, #0]
 801e08a:	2d2b      	cmp	r5, #43	@ 0x2b
 801e08c:	d1c5      	bne.n	801e01a <_strtol_l.constprop.0+0x3a>
 801e08e:	7825      	ldrb	r5, [r4, #0]
 801e090:	1c9c      	adds	r4, r3, #2
 801e092:	e7c2      	b.n	801e01a <_strtol_l.constprop.0+0x3a>
 801e094:	2e00      	cmp	r6, #0
 801e096:	d1ce      	bne.n	801e036 <_strtol_l.constprop.0+0x56>
 801e098:	3608      	adds	r6, #8
 801e09a:	2d30      	cmp	r5, #48	@ 0x30
 801e09c:	d0cb      	beq.n	801e036 <_strtol_l.constprop.0+0x56>
 801e09e:	3602      	adds	r6, #2
 801e0a0:	e7c9      	b.n	801e036 <_strtol_l.constprop.0+0x56>
 801e0a2:	002b      	movs	r3, r5
 801e0a4:	3b41      	subs	r3, #65	@ 0x41
 801e0a6:	2b19      	cmp	r3, #25
 801e0a8:	d801      	bhi.n	801e0ae <_strtol_l.constprop.0+0xce>
 801e0aa:	3d37      	subs	r5, #55	@ 0x37
 801e0ac:	e7d4      	b.n	801e058 <_strtol_l.constprop.0+0x78>
 801e0ae:	002b      	movs	r3, r5
 801e0b0:	3b61      	subs	r3, #97	@ 0x61
 801e0b2:	2b19      	cmp	r3, #25
 801e0b4:	d804      	bhi.n	801e0c0 <_strtol_l.constprop.0+0xe0>
 801e0b6:	3d57      	subs	r5, #87	@ 0x57
 801e0b8:	e7ce      	b.n	801e058 <_strtol_l.constprop.0+0x78>
 801e0ba:	2201      	movs	r2, #1
 801e0bc:	4252      	negs	r2, r2
 801e0be:	e7d9      	b.n	801e074 <_strtol_l.constprop.0+0x94>
 801e0c0:	1c53      	adds	r3, r2, #1
 801e0c2:	d108      	bne.n	801e0d6 <_strtol_l.constprop.0+0xf6>
 801e0c4:	2322      	movs	r3, #34	@ 0x22
 801e0c6:	9a03      	ldr	r2, [sp, #12]
 801e0c8:	9802      	ldr	r0, [sp, #8]
 801e0ca:	6013      	str	r3, [r2, #0]
 801e0cc:	2f00      	cmp	r7, #0
 801e0ce:	d0d9      	beq.n	801e084 <_strtol_l.constprop.0+0xa4>
 801e0d0:	1e63      	subs	r3, r4, #1
 801e0d2:	9301      	str	r3, [sp, #4]
 801e0d4:	e007      	b.n	801e0e6 <_strtol_l.constprop.0+0x106>
 801e0d6:	9b00      	ldr	r3, [sp, #0]
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d000      	beq.n	801e0de <_strtol_l.constprop.0+0xfe>
 801e0dc:	4240      	negs	r0, r0
 801e0de:	2f00      	cmp	r7, #0
 801e0e0:	d0d0      	beq.n	801e084 <_strtol_l.constprop.0+0xa4>
 801e0e2:	2a00      	cmp	r2, #0
 801e0e4:	d1f4      	bne.n	801e0d0 <_strtol_l.constprop.0+0xf0>
 801e0e6:	9b01      	ldr	r3, [sp, #4]
 801e0e8:	603b      	str	r3, [r7, #0]
 801e0ea:	e7cb      	b.n	801e084 <_strtol_l.constprop.0+0xa4>
 801e0ec:	08024161 	.word	0x08024161
 801e0f0:	7fffffff 	.word	0x7fffffff

0801e0f4 <strtol>:
 801e0f4:	b510      	push	{r4, lr}
 801e0f6:	4c04      	ldr	r4, [pc, #16]	@ (801e108 <strtol+0x14>)
 801e0f8:	0013      	movs	r3, r2
 801e0fa:	000a      	movs	r2, r1
 801e0fc:	0001      	movs	r1, r0
 801e0fe:	6820      	ldr	r0, [r4, #0]
 801e100:	f7ff ff6e 	bl	801dfe0 <_strtol_l.constprop.0>
 801e104:	bd10      	pop	{r4, pc}
 801e106:	46c0      	nop			@ (mov r8, r8)
 801e108:	200003c8 	.word	0x200003c8

0801e10c <__cvt>:
 801e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e10e:	001f      	movs	r7, r3
 801e110:	2300      	movs	r3, #0
 801e112:	0016      	movs	r6, r2
 801e114:	b08b      	sub	sp, #44	@ 0x2c
 801e116:	429f      	cmp	r7, r3
 801e118:	da04      	bge.n	801e124 <__cvt+0x18>
 801e11a:	2180      	movs	r1, #128	@ 0x80
 801e11c:	0609      	lsls	r1, r1, #24
 801e11e:	187b      	adds	r3, r7, r1
 801e120:	001f      	movs	r7, r3
 801e122:	232d      	movs	r3, #45	@ 0x2d
 801e124:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e126:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e128:	7013      	strb	r3, [r2, #0]
 801e12a:	2320      	movs	r3, #32
 801e12c:	2203      	movs	r2, #3
 801e12e:	439d      	bics	r5, r3
 801e130:	2d46      	cmp	r5, #70	@ 0x46
 801e132:	d007      	beq.n	801e144 <__cvt+0x38>
 801e134:	002b      	movs	r3, r5
 801e136:	3b45      	subs	r3, #69	@ 0x45
 801e138:	4259      	negs	r1, r3
 801e13a:	414b      	adcs	r3, r1
 801e13c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e13e:	3a01      	subs	r2, #1
 801e140:	18cb      	adds	r3, r1, r3
 801e142:	9310      	str	r3, [sp, #64]	@ 0x40
 801e144:	ab09      	add	r3, sp, #36	@ 0x24
 801e146:	9304      	str	r3, [sp, #16]
 801e148:	ab08      	add	r3, sp, #32
 801e14a:	9303      	str	r3, [sp, #12]
 801e14c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e14e:	9200      	str	r2, [sp, #0]
 801e150:	9302      	str	r3, [sp, #8]
 801e152:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e154:	0032      	movs	r2, r6
 801e156:	9301      	str	r3, [sp, #4]
 801e158:	003b      	movs	r3, r7
 801e15a:	f001 f82b 	bl	801f1b4 <_dtoa_r>
 801e15e:	0004      	movs	r4, r0
 801e160:	2d47      	cmp	r5, #71	@ 0x47
 801e162:	d11b      	bne.n	801e19c <__cvt+0x90>
 801e164:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e166:	07db      	lsls	r3, r3, #31
 801e168:	d511      	bpl.n	801e18e <__cvt+0x82>
 801e16a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e16c:	18c3      	adds	r3, r0, r3
 801e16e:	9307      	str	r3, [sp, #28]
 801e170:	2200      	movs	r2, #0
 801e172:	2300      	movs	r3, #0
 801e174:	0030      	movs	r0, r6
 801e176:	0039      	movs	r1, r7
 801e178:	f7e2 f99a 	bl	80004b0 <__aeabi_dcmpeq>
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d001      	beq.n	801e184 <__cvt+0x78>
 801e180:	9b07      	ldr	r3, [sp, #28]
 801e182:	9309      	str	r3, [sp, #36]	@ 0x24
 801e184:	2230      	movs	r2, #48	@ 0x30
 801e186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e188:	9907      	ldr	r1, [sp, #28]
 801e18a:	428b      	cmp	r3, r1
 801e18c:	d320      	bcc.n	801e1d0 <__cvt+0xc4>
 801e18e:	0020      	movs	r0, r4
 801e190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e192:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e194:	1b1b      	subs	r3, r3, r4
 801e196:	6013      	str	r3, [r2, #0]
 801e198:	b00b      	add	sp, #44	@ 0x2c
 801e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e19c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e19e:	18c3      	adds	r3, r0, r3
 801e1a0:	9307      	str	r3, [sp, #28]
 801e1a2:	2d46      	cmp	r5, #70	@ 0x46
 801e1a4:	d1e4      	bne.n	801e170 <__cvt+0x64>
 801e1a6:	7803      	ldrb	r3, [r0, #0]
 801e1a8:	2b30      	cmp	r3, #48	@ 0x30
 801e1aa:	d10c      	bne.n	801e1c6 <__cvt+0xba>
 801e1ac:	2200      	movs	r2, #0
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	0030      	movs	r0, r6
 801e1b2:	0039      	movs	r1, r7
 801e1b4:	f7e2 f97c 	bl	80004b0 <__aeabi_dcmpeq>
 801e1b8:	2800      	cmp	r0, #0
 801e1ba:	d104      	bne.n	801e1c6 <__cvt+0xba>
 801e1bc:	2301      	movs	r3, #1
 801e1be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e1c0:	1a9b      	subs	r3, r3, r2
 801e1c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e1c4:	6013      	str	r3, [r2, #0]
 801e1c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e1c8:	9a07      	ldr	r2, [sp, #28]
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	18d3      	adds	r3, r2, r3
 801e1ce:	e7ce      	b.n	801e16e <__cvt+0x62>
 801e1d0:	1c59      	adds	r1, r3, #1
 801e1d2:	9109      	str	r1, [sp, #36]	@ 0x24
 801e1d4:	701a      	strb	r2, [r3, #0]
 801e1d6:	e7d6      	b.n	801e186 <__cvt+0x7a>

0801e1d8 <__exponent>:
 801e1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1da:	232b      	movs	r3, #43	@ 0x2b
 801e1dc:	0005      	movs	r5, r0
 801e1de:	000c      	movs	r4, r1
 801e1e0:	b085      	sub	sp, #20
 801e1e2:	7002      	strb	r2, [r0, #0]
 801e1e4:	2900      	cmp	r1, #0
 801e1e6:	da01      	bge.n	801e1ec <__exponent+0x14>
 801e1e8:	424c      	negs	r4, r1
 801e1ea:	3302      	adds	r3, #2
 801e1ec:	706b      	strb	r3, [r5, #1]
 801e1ee:	2c09      	cmp	r4, #9
 801e1f0:	dd2c      	ble.n	801e24c <__exponent+0x74>
 801e1f2:	ab02      	add	r3, sp, #8
 801e1f4:	1dde      	adds	r6, r3, #7
 801e1f6:	0020      	movs	r0, r4
 801e1f8:	210a      	movs	r1, #10
 801e1fa:	f7e2 f943 	bl	8000484 <__aeabi_idivmod>
 801e1fe:	0037      	movs	r7, r6
 801e200:	3130      	adds	r1, #48	@ 0x30
 801e202:	3e01      	subs	r6, #1
 801e204:	0020      	movs	r0, r4
 801e206:	7031      	strb	r1, [r6, #0]
 801e208:	210a      	movs	r1, #10
 801e20a:	9401      	str	r4, [sp, #4]
 801e20c:	f7e2 f854 	bl	80002b8 <__divsi3>
 801e210:	9b01      	ldr	r3, [sp, #4]
 801e212:	0004      	movs	r4, r0
 801e214:	2b63      	cmp	r3, #99	@ 0x63
 801e216:	dcee      	bgt.n	801e1f6 <__exponent+0x1e>
 801e218:	1eba      	subs	r2, r7, #2
 801e21a:	1ca8      	adds	r0, r5, #2
 801e21c:	0001      	movs	r1, r0
 801e21e:	0013      	movs	r3, r2
 801e220:	3430      	adds	r4, #48	@ 0x30
 801e222:	7014      	strb	r4, [r2, #0]
 801e224:	ac02      	add	r4, sp, #8
 801e226:	3407      	adds	r4, #7
 801e228:	429c      	cmp	r4, r3
 801e22a:	d80a      	bhi.n	801e242 <__exponent+0x6a>
 801e22c:	2300      	movs	r3, #0
 801e22e:	42a2      	cmp	r2, r4
 801e230:	d803      	bhi.n	801e23a <__exponent+0x62>
 801e232:	3309      	adds	r3, #9
 801e234:	aa02      	add	r2, sp, #8
 801e236:	189b      	adds	r3, r3, r2
 801e238:	1bdb      	subs	r3, r3, r7
 801e23a:	18c0      	adds	r0, r0, r3
 801e23c:	1b40      	subs	r0, r0, r5
 801e23e:	b005      	add	sp, #20
 801e240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e242:	781c      	ldrb	r4, [r3, #0]
 801e244:	3301      	adds	r3, #1
 801e246:	700c      	strb	r4, [r1, #0]
 801e248:	3101      	adds	r1, #1
 801e24a:	e7eb      	b.n	801e224 <__exponent+0x4c>
 801e24c:	2330      	movs	r3, #48	@ 0x30
 801e24e:	18e4      	adds	r4, r4, r3
 801e250:	70ab      	strb	r3, [r5, #2]
 801e252:	1d28      	adds	r0, r5, #4
 801e254:	70ec      	strb	r4, [r5, #3]
 801e256:	e7f1      	b.n	801e23c <__exponent+0x64>

0801e258 <_printf_float>:
 801e258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e25a:	b097      	sub	sp, #92	@ 0x5c
 801e25c:	000d      	movs	r5, r1
 801e25e:	920a      	str	r2, [sp, #40]	@ 0x28
 801e260:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801e262:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e264:	9009      	str	r0, [sp, #36]	@ 0x24
 801e266:	f000 fe7d 	bl	801ef64 <_localeconv_r>
 801e26a:	6803      	ldr	r3, [r0, #0]
 801e26c:	0018      	movs	r0, r3
 801e26e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e270:	f7e1 ff7c 	bl	800016c <strlen>
 801e274:	2300      	movs	r3, #0
 801e276:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e278:	9314      	str	r3, [sp, #80]	@ 0x50
 801e27a:	7e2b      	ldrb	r3, [r5, #24]
 801e27c:	2207      	movs	r2, #7
 801e27e:	930c      	str	r3, [sp, #48]	@ 0x30
 801e280:	682b      	ldr	r3, [r5, #0]
 801e282:	930e      	str	r3, [sp, #56]	@ 0x38
 801e284:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e286:	6823      	ldr	r3, [r4, #0]
 801e288:	05c9      	lsls	r1, r1, #23
 801e28a:	d545      	bpl.n	801e318 <_printf_float+0xc0>
 801e28c:	189b      	adds	r3, r3, r2
 801e28e:	4393      	bics	r3, r2
 801e290:	001a      	movs	r2, r3
 801e292:	3208      	adds	r2, #8
 801e294:	6022      	str	r2, [r4, #0]
 801e296:	2201      	movs	r2, #1
 801e298:	681e      	ldr	r6, [r3, #0]
 801e29a:	685f      	ldr	r7, [r3, #4]
 801e29c:	007b      	lsls	r3, r7, #1
 801e29e:	085b      	lsrs	r3, r3, #1
 801e2a0:	9311      	str	r3, [sp, #68]	@ 0x44
 801e2a2:	9610      	str	r6, [sp, #64]	@ 0x40
 801e2a4:	64ae      	str	r6, [r5, #72]	@ 0x48
 801e2a6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801e2a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e2aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e2ac:	4ba7      	ldr	r3, [pc, #668]	@ (801e54c <_printf_float+0x2f4>)
 801e2ae:	4252      	negs	r2, r2
 801e2b0:	f7e5 f828 	bl	8003304 <__aeabi_dcmpun>
 801e2b4:	2800      	cmp	r0, #0
 801e2b6:	d131      	bne.n	801e31c <_printf_float+0xc4>
 801e2b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e2ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e2bc:	2201      	movs	r2, #1
 801e2be:	4ba3      	ldr	r3, [pc, #652]	@ (801e54c <_printf_float+0x2f4>)
 801e2c0:	4252      	negs	r2, r2
 801e2c2:	f7e2 f905 	bl	80004d0 <__aeabi_dcmple>
 801e2c6:	2800      	cmp	r0, #0
 801e2c8:	d128      	bne.n	801e31c <_printf_float+0xc4>
 801e2ca:	2200      	movs	r2, #0
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	0030      	movs	r0, r6
 801e2d0:	0039      	movs	r1, r7
 801e2d2:	f7e2 f8f3 	bl	80004bc <__aeabi_dcmplt>
 801e2d6:	2800      	cmp	r0, #0
 801e2d8:	d003      	beq.n	801e2e2 <_printf_float+0x8a>
 801e2da:	002b      	movs	r3, r5
 801e2dc:	222d      	movs	r2, #45	@ 0x2d
 801e2de:	3343      	adds	r3, #67	@ 0x43
 801e2e0:	701a      	strb	r2, [r3, #0]
 801e2e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2e4:	4f9a      	ldr	r7, [pc, #616]	@ (801e550 <_printf_float+0x2f8>)
 801e2e6:	2b47      	cmp	r3, #71	@ 0x47
 801e2e8:	d900      	bls.n	801e2ec <_printf_float+0x94>
 801e2ea:	4f9a      	ldr	r7, [pc, #616]	@ (801e554 <_printf_float+0x2fc>)
 801e2ec:	2303      	movs	r3, #3
 801e2ee:	2400      	movs	r4, #0
 801e2f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e2f2:	612b      	str	r3, [r5, #16]
 801e2f4:	3301      	adds	r3, #1
 801e2f6:	439a      	bics	r2, r3
 801e2f8:	602a      	str	r2, [r5, #0]
 801e2fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e2fc:	0029      	movs	r1, r5
 801e2fe:	9300      	str	r3, [sp, #0]
 801e300:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e304:	aa15      	add	r2, sp, #84	@ 0x54
 801e306:	f000 f9e5 	bl	801e6d4 <_printf_common>
 801e30a:	3001      	adds	r0, #1
 801e30c:	d000      	beq.n	801e310 <_printf_float+0xb8>
 801e30e:	e09f      	b.n	801e450 <_printf_float+0x1f8>
 801e310:	2001      	movs	r0, #1
 801e312:	4240      	negs	r0, r0
 801e314:	b017      	add	sp, #92	@ 0x5c
 801e316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e318:	3307      	adds	r3, #7
 801e31a:	e7b8      	b.n	801e28e <_printf_float+0x36>
 801e31c:	0032      	movs	r2, r6
 801e31e:	003b      	movs	r3, r7
 801e320:	0030      	movs	r0, r6
 801e322:	0039      	movs	r1, r7
 801e324:	f7e4 ffee 	bl	8003304 <__aeabi_dcmpun>
 801e328:	2800      	cmp	r0, #0
 801e32a:	d00b      	beq.n	801e344 <_printf_float+0xec>
 801e32c:	2f00      	cmp	r7, #0
 801e32e:	da03      	bge.n	801e338 <_printf_float+0xe0>
 801e330:	002b      	movs	r3, r5
 801e332:	222d      	movs	r2, #45	@ 0x2d
 801e334:	3343      	adds	r3, #67	@ 0x43
 801e336:	701a      	strb	r2, [r3, #0]
 801e338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e33a:	4f87      	ldr	r7, [pc, #540]	@ (801e558 <_printf_float+0x300>)
 801e33c:	2b47      	cmp	r3, #71	@ 0x47
 801e33e:	d9d5      	bls.n	801e2ec <_printf_float+0x94>
 801e340:	4f86      	ldr	r7, [pc, #536]	@ (801e55c <_printf_float+0x304>)
 801e342:	e7d3      	b.n	801e2ec <_printf_float+0x94>
 801e344:	2220      	movs	r2, #32
 801e346:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e348:	686b      	ldr	r3, [r5, #4]
 801e34a:	4394      	bics	r4, r2
 801e34c:	1c5a      	adds	r2, r3, #1
 801e34e:	d146      	bne.n	801e3de <_printf_float+0x186>
 801e350:	3307      	adds	r3, #7
 801e352:	606b      	str	r3, [r5, #4]
 801e354:	2380      	movs	r3, #128	@ 0x80
 801e356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e358:	00db      	lsls	r3, r3, #3
 801e35a:	4313      	orrs	r3, r2
 801e35c:	2200      	movs	r2, #0
 801e35e:	602b      	str	r3, [r5, #0]
 801e360:	9206      	str	r2, [sp, #24]
 801e362:	aa14      	add	r2, sp, #80	@ 0x50
 801e364:	9205      	str	r2, [sp, #20]
 801e366:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e368:	a90a      	add	r1, sp, #40	@ 0x28
 801e36a:	9204      	str	r2, [sp, #16]
 801e36c:	aa13      	add	r2, sp, #76	@ 0x4c
 801e36e:	9203      	str	r2, [sp, #12]
 801e370:	2223      	movs	r2, #35	@ 0x23
 801e372:	1852      	adds	r2, r2, r1
 801e374:	9202      	str	r2, [sp, #8]
 801e376:	9301      	str	r3, [sp, #4]
 801e378:	686b      	ldr	r3, [r5, #4]
 801e37a:	0032      	movs	r2, r6
 801e37c:	9300      	str	r3, [sp, #0]
 801e37e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e380:	003b      	movs	r3, r7
 801e382:	f7ff fec3 	bl	801e10c <__cvt>
 801e386:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e388:	0007      	movs	r7, r0
 801e38a:	2c47      	cmp	r4, #71	@ 0x47
 801e38c:	d12d      	bne.n	801e3ea <_printf_float+0x192>
 801e38e:	1cd3      	adds	r3, r2, #3
 801e390:	db02      	blt.n	801e398 <_printf_float+0x140>
 801e392:	686b      	ldr	r3, [r5, #4]
 801e394:	429a      	cmp	r2, r3
 801e396:	dd48      	ble.n	801e42a <_printf_float+0x1d2>
 801e398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e39a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e39c:	3b02      	subs	r3, #2
 801e39e:	b2db      	uxtb	r3, r3
 801e3a0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e3a2:	0028      	movs	r0, r5
 801e3a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e3a6:	3901      	subs	r1, #1
 801e3a8:	3050      	adds	r0, #80	@ 0x50
 801e3aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e3ac:	f7ff ff14 	bl	801e1d8 <__exponent>
 801e3b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e3b2:	0004      	movs	r4, r0
 801e3b4:	1813      	adds	r3, r2, r0
 801e3b6:	612b      	str	r3, [r5, #16]
 801e3b8:	2a01      	cmp	r2, #1
 801e3ba:	dc02      	bgt.n	801e3c2 <_printf_float+0x16a>
 801e3bc:	682a      	ldr	r2, [r5, #0]
 801e3be:	07d2      	lsls	r2, r2, #31
 801e3c0:	d501      	bpl.n	801e3c6 <_printf_float+0x16e>
 801e3c2:	3301      	adds	r3, #1
 801e3c4:	612b      	str	r3, [r5, #16]
 801e3c6:	2323      	movs	r3, #35	@ 0x23
 801e3c8:	aa0a      	add	r2, sp, #40	@ 0x28
 801e3ca:	189b      	adds	r3, r3, r2
 801e3cc:	781b      	ldrb	r3, [r3, #0]
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	d100      	bne.n	801e3d4 <_printf_float+0x17c>
 801e3d2:	e792      	b.n	801e2fa <_printf_float+0xa2>
 801e3d4:	002b      	movs	r3, r5
 801e3d6:	222d      	movs	r2, #45	@ 0x2d
 801e3d8:	3343      	adds	r3, #67	@ 0x43
 801e3da:	701a      	strb	r2, [r3, #0]
 801e3dc:	e78d      	b.n	801e2fa <_printf_float+0xa2>
 801e3de:	2c47      	cmp	r4, #71	@ 0x47
 801e3e0:	d1b8      	bne.n	801e354 <_printf_float+0xfc>
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d1b6      	bne.n	801e354 <_printf_float+0xfc>
 801e3e6:	3301      	adds	r3, #1
 801e3e8:	e7b3      	b.n	801e352 <_printf_float+0xfa>
 801e3ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3ec:	0011      	movs	r1, r2
 801e3ee:	2b65      	cmp	r3, #101	@ 0x65
 801e3f0:	d9d7      	bls.n	801e3a2 <_printf_float+0x14a>
 801e3f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3f4:	2b66      	cmp	r3, #102	@ 0x66
 801e3f6:	d11a      	bne.n	801e42e <_printf_float+0x1d6>
 801e3f8:	686b      	ldr	r3, [r5, #4]
 801e3fa:	2a00      	cmp	r2, #0
 801e3fc:	dd09      	ble.n	801e412 <_printf_float+0x1ba>
 801e3fe:	612a      	str	r2, [r5, #16]
 801e400:	2b00      	cmp	r3, #0
 801e402:	d102      	bne.n	801e40a <_printf_float+0x1b2>
 801e404:	6829      	ldr	r1, [r5, #0]
 801e406:	07c9      	lsls	r1, r1, #31
 801e408:	d50b      	bpl.n	801e422 <_printf_float+0x1ca>
 801e40a:	3301      	adds	r3, #1
 801e40c:	189b      	adds	r3, r3, r2
 801e40e:	612b      	str	r3, [r5, #16]
 801e410:	e007      	b.n	801e422 <_printf_float+0x1ca>
 801e412:	2b00      	cmp	r3, #0
 801e414:	d103      	bne.n	801e41e <_printf_float+0x1c6>
 801e416:	2201      	movs	r2, #1
 801e418:	6829      	ldr	r1, [r5, #0]
 801e41a:	4211      	tst	r1, r2
 801e41c:	d000      	beq.n	801e420 <_printf_float+0x1c8>
 801e41e:	1c9a      	adds	r2, r3, #2
 801e420:	612a      	str	r2, [r5, #16]
 801e422:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e424:	2400      	movs	r4, #0
 801e426:	65ab      	str	r3, [r5, #88]	@ 0x58
 801e428:	e7cd      	b.n	801e3c6 <_printf_float+0x16e>
 801e42a:	2367      	movs	r3, #103	@ 0x67
 801e42c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e42e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e430:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e432:	4299      	cmp	r1, r3
 801e434:	db06      	blt.n	801e444 <_printf_float+0x1ec>
 801e436:	682b      	ldr	r3, [r5, #0]
 801e438:	6129      	str	r1, [r5, #16]
 801e43a:	07db      	lsls	r3, r3, #31
 801e43c:	d5f1      	bpl.n	801e422 <_printf_float+0x1ca>
 801e43e:	3101      	adds	r1, #1
 801e440:	6129      	str	r1, [r5, #16]
 801e442:	e7ee      	b.n	801e422 <_printf_float+0x1ca>
 801e444:	2201      	movs	r2, #1
 801e446:	2900      	cmp	r1, #0
 801e448:	dce0      	bgt.n	801e40c <_printf_float+0x1b4>
 801e44a:	1892      	adds	r2, r2, r2
 801e44c:	1a52      	subs	r2, r2, r1
 801e44e:	e7dd      	b.n	801e40c <_printf_float+0x1b4>
 801e450:	682a      	ldr	r2, [r5, #0]
 801e452:	0553      	lsls	r3, r2, #21
 801e454:	d408      	bmi.n	801e468 <_printf_float+0x210>
 801e456:	692b      	ldr	r3, [r5, #16]
 801e458:	003a      	movs	r2, r7
 801e45a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e45c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e45e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e460:	47a0      	blx	r4
 801e462:	3001      	adds	r0, #1
 801e464:	d129      	bne.n	801e4ba <_printf_float+0x262>
 801e466:	e753      	b.n	801e310 <_printf_float+0xb8>
 801e468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e46a:	2b65      	cmp	r3, #101	@ 0x65
 801e46c:	d800      	bhi.n	801e470 <_printf_float+0x218>
 801e46e:	e0da      	b.n	801e626 <_printf_float+0x3ce>
 801e470:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801e472:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801e474:	2200      	movs	r2, #0
 801e476:	2300      	movs	r3, #0
 801e478:	f7e2 f81a 	bl	80004b0 <__aeabi_dcmpeq>
 801e47c:	2800      	cmp	r0, #0
 801e47e:	d033      	beq.n	801e4e8 <_printf_float+0x290>
 801e480:	2301      	movs	r3, #1
 801e482:	4a37      	ldr	r2, [pc, #220]	@ (801e560 <_printf_float+0x308>)
 801e484:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e488:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e48a:	47a0      	blx	r4
 801e48c:	3001      	adds	r0, #1
 801e48e:	d100      	bne.n	801e492 <_printf_float+0x23a>
 801e490:	e73e      	b.n	801e310 <_printf_float+0xb8>
 801e492:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e494:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e496:	42b3      	cmp	r3, r6
 801e498:	db02      	blt.n	801e4a0 <_printf_float+0x248>
 801e49a:	682b      	ldr	r3, [r5, #0]
 801e49c:	07db      	lsls	r3, r3, #31
 801e49e:	d50c      	bpl.n	801e4ba <_printf_float+0x262>
 801e4a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e4a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e4a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e4a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e4a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e4aa:	47a0      	blx	r4
 801e4ac:	2400      	movs	r4, #0
 801e4ae:	3001      	adds	r0, #1
 801e4b0:	d100      	bne.n	801e4b4 <_printf_float+0x25c>
 801e4b2:	e72d      	b.n	801e310 <_printf_float+0xb8>
 801e4b4:	1e73      	subs	r3, r6, #1
 801e4b6:	42a3      	cmp	r3, r4
 801e4b8:	dc0a      	bgt.n	801e4d0 <_printf_float+0x278>
 801e4ba:	682b      	ldr	r3, [r5, #0]
 801e4bc:	079b      	lsls	r3, r3, #30
 801e4be:	d500      	bpl.n	801e4c2 <_printf_float+0x26a>
 801e4c0:	e105      	b.n	801e6ce <_printf_float+0x476>
 801e4c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e4c4:	68e8      	ldr	r0, [r5, #12]
 801e4c6:	4298      	cmp	r0, r3
 801e4c8:	db00      	blt.n	801e4cc <_printf_float+0x274>
 801e4ca:	e723      	b.n	801e314 <_printf_float+0xbc>
 801e4cc:	0018      	movs	r0, r3
 801e4ce:	e721      	b.n	801e314 <_printf_float+0xbc>
 801e4d0:	002a      	movs	r2, r5
 801e4d2:	2301      	movs	r3, #1
 801e4d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e4d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e4d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e4da:	321a      	adds	r2, #26
 801e4dc:	47b8      	blx	r7
 801e4de:	3001      	adds	r0, #1
 801e4e0:	d100      	bne.n	801e4e4 <_printf_float+0x28c>
 801e4e2:	e715      	b.n	801e310 <_printf_float+0xb8>
 801e4e4:	3401      	adds	r4, #1
 801e4e6:	e7e5      	b.n	801e4b4 <_printf_float+0x25c>
 801e4e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	dc3a      	bgt.n	801e564 <_printf_float+0x30c>
 801e4ee:	2301      	movs	r3, #1
 801e4f0:	4a1b      	ldr	r2, [pc, #108]	@ (801e560 <_printf_float+0x308>)
 801e4f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e4f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e4f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e4f8:	47a0      	blx	r4
 801e4fa:	3001      	adds	r0, #1
 801e4fc:	d100      	bne.n	801e500 <_printf_float+0x2a8>
 801e4fe:	e707      	b.n	801e310 <_printf_float+0xb8>
 801e500:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e502:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e504:	4333      	orrs	r3, r6
 801e506:	d102      	bne.n	801e50e <_printf_float+0x2b6>
 801e508:	682b      	ldr	r3, [r5, #0]
 801e50a:	07db      	lsls	r3, r3, #31
 801e50c:	d5d5      	bpl.n	801e4ba <_printf_float+0x262>
 801e50e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e510:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e512:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e514:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e516:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e518:	47a0      	blx	r4
 801e51a:	2300      	movs	r3, #0
 801e51c:	3001      	adds	r0, #1
 801e51e:	d100      	bne.n	801e522 <_printf_float+0x2ca>
 801e520:	e6f6      	b.n	801e310 <_printf_float+0xb8>
 801e522:	930c      	str	r3, [sp, #48]	@ 0x30
 801e524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e526:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e528:	425b      	negs	r3, r3
 801e52a:	4293      	cmp	r3, r2
 801e52c:	dc01      	bgt.n	801e532 <_printf_float+0x2da>
 801e52e:	0033      	movs	r3, r6
 801e530:	e792      	b.n	801e458 <_printf_float+0x200>
 801e532:	002a      	movs	r2, r5
 801e534:	2301      	movs	r3, #1
 801e536:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e538:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e53a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e53c:	321a      	adds	r2, #26
 801e53e:	47a0      	blx	r4
 801e540:	3001      	adds	r0, #1
 801e542:	d100      	bne.n	801e546 <_printf_float+0x2ee>
 801e544:	e6e4      	b.n	801e310 <_printf_float+0xb8>
 801e546:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e548:	3301      	adds	r3, #1
 801e54a:	e7ea      	b.n	801e522 <_printf_float+0x2ca>
 801e54c:	7fefffff 	.word	0x7fefffff
 801e550:	08024261 	.word	0x08024261
 801e554:	08024265 	.word	0x08024265
 801e558:	08024269 	.word	0x08024269
 801e55c:	0802426d 	.word	0x0802426d
 801e560:	08024271 	.word	0x08024271
 801e564:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e566:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801e568:	930c      	str	r3, [sp, #48]	@ 0x30
 801e56a:	429e      	cmp	r6, r3
 801e56c:	dd00      	ble.n	801e570 <_printf_float+0x318>
 801e56e:	001e      	movs	r6, r3
 801e570:	2e00      	cmp	r6, #0
 801e572:	dc31      	bgt.n	801e5d8 <_printf_float+0x380>
 801e574:	43f3      	mvns	r3, r6
 801e576:	2400      	movs	r4, #0
 801e578:	17db      	asrs	r3, r3, #31
 801e57a:	4033      	ands	r3, r6
 801e57c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e57e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801e580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e582:	1af3      	subs	r3, r6, r3
 801e584:	42a3      	cmp	r3, r4
 801e586:	dc30      	bgt.n	801e5ea <_printf_float+0x392>
 801e588:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e58a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e58c:	429a      	cmp	r2, r3
 801e58e:	dc38      	bgt.n	801e602 <_printf_float+0x3aa>
 801e590:	682b      	ldr	r3, [r5, #0]
 801e592:	07db      	lsls	r3, r3, #31
 801e594:	d435      	bmi.n	801e602 <_printf_float+0x3aa>
 801e596:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e59a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e59c:	1b9b      	subs	r3, r3, r6
 801e59e:	1b14      	subs	r4, r2, r4
 801e5a0:	429c      	cmp	r4, r3
 801e5a2:	dd00      	ble.n	801e5a6 <_printf_float+0x34e>
 801e5a4:	001c      	movs	r4, r3
 801e5a6:	2c00      	cmp	r4, #0
 801e5a8:	dc34      	bgt.n	801e614 <_printf_float+0x3bc>
 801e5aa:	43e3      	mvns	r3, r4
 801e5ac:	2600      	movs	r6, #0
 801e5ae:	17db      	asrs	r3, r3, #31
 801e5b0:	401c      	ands	r4, r3
 801e5b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e5b6:	1ad3      	subs	r3, r2, r3
 801e5b8:	1b1b      	subs	r3, r3, r4
 801e5ba:	42b3      	cmp	r3, r6
 801e5bc:	dc00      	bgt.n	801e5c0 <_printf_float+0x368>
 801e5be:	e77c      	b.n	801e4ba <_printf_float+0x262>
 801e5c0:	002a      	movs	r2, r5
 801e5c2:	2301      	movs	r3, #1
 801e5c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e5c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e5ca:	321a      	adds	r2, #26
 801e5cc:	47b8      	blx	r7
 801e5ce:	3001      	adds	r0, #1
 801e5d0:	d100      	bne.n	801e5d4 <_printf_float+0x37c>
 801e5d2:	e69d      	b.n	801e310 <_printf_float+0xb8>
 801e5d4:	3601      	adds	r6, #1
 801e5d6:	e7ec      	b.n	801e5b2 <_printf_float+0x35a>
 801e5d8:	0033      	movs	r3, r6
 801e5da:	003a      	movs	r2, r7
 801e5dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e5e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e5e2:	47a0      	blx	r4
 801e5e4:	3001      	adds	r0, #1
 801e5e6:	d1c5      	bne.n	801e574 <_printf_float+0x31c>
 801e5e8:	e692      	b.n	801e310 <_printf_float+0xb8>
 801e5ea:	002a      	movs	r2, r5
 801e5ec:	2301      	movs	r3, #1
 801e5ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e5f2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e5f4:	321a      	adds	r2, #26
 801e5f6:	47b0      	blx	r6
 801e5f8:	3001      	adds	r0, #1
 801e5fa:	d100      	bne.n	801e5fe <_printf_float+0x3a6>
 801e5fc:	e688      	b.n	801e310 <_printf_float+0xb8>
 801e5fe:	3401      	adds	r4, #1
 801e600:	e7bd      	b.n	801e57e <_printf_float+0x326>
 801e602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e604:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e606:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e608:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e60a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e60c:	47a0      	blx	r4
 801e60e:	3001      	adds	r0, #1
 801e610:	d1c1      	bne.n	801e596 <_printf_float+0x33e>
 801e612:	e67d      	b.n	801e310 <_printf_float+0xb8>
 801e614:	19ba      	adds	r2, r7, r6
 801e616:	0023      	movs	r3, r4
 801e618:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e61a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e61c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e61e:	47b0      	blx	r6
 801e620:	3001      	adds	r0, #1
 801e622:	d1c2      	bne.n	801e5aa <_printf_float+0x352>
 801e624:	e674      	b.n	801e310 <_printf_float+0xb8>
 801e626:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e628:	930c      	str	r3, [sp, #48]	@ 0x30
 801e62a:	2b01      	cmp	r3, #1
 801e62c:	dc02      	bgt.n	801e634 <_printf_float+0x3dc>
 801e62e:	2301      	movs	r3, #1
 801e630:	421a      	tst	r2, r3
 801e632:	d039      	beq.n	801e6a8 <_printf_float+0x450>
 801e634:	2301      	movs	r3, #1
 801e636:	003a      	movs	r2, r7
 801e638:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e63c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e63e:	47b0      	blx	r6
 801e640:	3001      	adds	r0, #1
 801e642:	d100      	bne.n	801e646 <_printf_float+0x3ee>
 801e644:	e664      	b.n	801e310 <_printf_float+0xb8>
 801e646:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e648:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e64a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e64c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e64e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e650:	47b0      	blx	r6
 801e652:	3001      	adds	r0, #1
 801e654:	d100      	bne.n	801e658 <_printf_float+0x400>
 801e656:	e65b      	b.n	801e310 <_printf_float+0xb8>
 801e658:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801e65a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801e65c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e65e:	2200      	movs	r2, #0
 801e660:	3b01      	subs	r3, #1
 801e662:	930c      	str	r3, [sp, #48]	@ 0x30
 801e664:	2300      	movs	r3, #0
 801e666:	f7e1 ff23 	bl	80004b0 <__aeabi_dcmpeq>
 801e66a:	2800      	cmp	r0, #0
 801e66c:	d11a      	bne.n	801e6a4 <_printf_float+0x44c>
 801e66e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e670:	1c7a      	adds	r2, r7, #1
 801e672:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e674:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e676:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e678:	47b0      	blx	r6
 801e67a:	3001      	adds	r0, #1
 801e67c:	d10e      	bne.n	801e69c <_printf_float+0x444>
 801e67e:	e647      	b.n	801e310 <_printf_float+0xb8>
 801e680:	002a      	movs	r2, r5
 801e682:	2301      	movs	r3, #1
 801e684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e686:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e688:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e68a:	321a      	adds	r2, #26
 801e68c:	47b8      	blx	r7
 801e68e:	3001      	adds	r0, #1
 801e690:	d100      	bne.n	801e694 <_printf_float+0x43c>
 801e692:	e63d      	b.n	801e310 <_printf_float+0xb8>
 801e694:	3601      	adds	r6, #1
 801e696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e698:	429e      	cmp	r6, r3
 801e69a:	dbf1      	blt.n	801e680 <_printf_float+0x428>
 801e69c:	002a      	movs	r2, r5
 801e69e:	0023      	movs	r3, r4
 801e6a0:	3250      	adds	r2, #80	@ 0x50
 801e6a2:	e6da      	b.n	801e45a <_printf_float+0x202>
 801e6a4:	2600      	movs	r6, #0
 801e6a6:	e7f6      	b.n	801e696 <_printf_float+0x43e>
 801e6a8:	003a      	movs	r2, r7
 801e6aa:	e7e2      	b.n	801e672 <_printf_float+0x41a>
 801e6ac:	002a      	movs	r2, r5
 801e6ae:	2301      	movs	r3, #1
 801e6b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6b4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e6b6:	3219      	adds	r2, #25
 801e6b8:	47b0      	blx	r6
 801e6ba:	3001      	adds	r0, #1
 801e6bc:	d100      	bne.n	801e6c0 <_printf_float+0x468>
 801e6be:	e627      	b.n	801e310 <_printf_float+0xb8>
 801e6c0:	3401      	adds	r4, #1
 801e6c2:	68eb      	ldr	r3, [r5, #12]
 801e6c4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e6c6:	1a9b      	subs	r3, r3, r2
 801e6c8:	42a3      	cmp	r3, r4
 801e6ca:	dcef      	bgt.n	801e6ac <_printf_float+0x454>
 801e6cc:	e6f9      	b.n	801e4c2 <_printf_float+0x26a>
 801e6ce:	2400      	movs	r4, #0
 801e6d0:	e7f7      	b.n	801e6c2 <_printf_float+0x46a>
 801e6d2:	46c0      	nop			@ (mov r8, r8)

0801e6d4 <_printf_common>:
 801e6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e6d6:	0016      	movs	r6, r2
 801e6d8:	9301      	str	r3, [sp, #4]
 801e6da:	688a      	ldr	r2, [r1, #8]
 801e6dc:	690b      	ldr	r3, [r1, #16]
 801e6de:	000c      	movs	r4, r1
 801e6e0:	9000      	str	r0, [sp, #0]
 801e6e2:	4293      	cmp	r3, r2
 801e6e4:	da00      	bge.n	801e6e8 <_printf_common+0x14>
 801e6e6:	0013      	movs	r3, r2
 801e6e8:	0022      	movs	r2, r4
 801e6ea:	6033      	str	r3, [r6, #0]
 801e6ec:	3243      	adds	r2, #67	@ 0x43
 801e6ee:	7812      	ldrb	r2, [r2, #0]
 801e6f0:	2a00      	cmp	r2, #0
 801e6f2:	d001      	beq.n	801e6f8 <_printf_common+0x24>
 801e6f4:	3301      	adds	r3, #1
 801e6f6:	6033      	str	r3, [r6, #0]
 801e6f8:	6823      	ldr	r3, [r4, #0]
 801e6fa:	069b      	lsls	r3, r3, #26
 801e6fc:	d502      	bpl.n	801e704 <_printf_common+0x30>
 801e6fe:	6833      	ldr	r3, [r6, #0]
 801e700:	3302      	adds	r3, #2
 801e702:	6033      	str	r3, [r6, #0]
 801e704:	6822      	ldr	r2, [r4, #0]
 801e706:	2306      	movs	r3, #6
 801e708:	0015      	movs	r5, r2
 801e70a:	401d      	ands	r5, r3
 801e70c:	421a      	tst	r2, r3
 801e70e:	d027      	beq.n	801e760 <_printf_common+0x8c>
 801e710:	0023      	movs	r3, r4
 801e712:	3343      	adds	r3, #67	@ 0x43
 801e714:	781b      	ldrb	r3, [r3, #0]
 801e716:	1e5a      	subs	r2, r3, #1
 801e718:	4193      	sbcs	r3, r2
 801e71a:	6822      	ldr	r2, [r4, #0]
 801e71c:	0692      	lsls	r2, r2, #26
 801e71e:	d430      	bmi.n	801e782 <_printf_common+0xae>
 801e720:	0022      	movs	r2, r4
 801e722:	9901      	ldr	r1, [sp, #4]
 801e724:	9800      	ldr	r0, [sp, #0]
 801e726:	9d08      	ldr	r5, [sp, #32]
 801e728:	3243      	adds	r2, #67	@ 0x43
 801e72a:	47a8      	blx	r5
 801e72c:	3001      	adds	r0, #1
 801e72e:	d025      	beq.n	801e77c <_printf_common+0xa8>
 801e730:	2206      	movs	r2, #6
 801e732:	6823      	ldr	r3, [r4, #0]
 801e734:	2500      	movs	r5, #0
 801e736:	4013      	ands	r3, r2
 801e738:	2b04      	cmp	r3, #4
 801e73a:	d105      	bne.n	801e748 <_printf_common+0x74>
 801e73c:	6833      	ldr	r3, [r6, #0]
 801e73e:	68e5      	ldr	r5, [r4, #12]
 801e740:	1aed      	subs	r5, r5, r3
 801e742:	43eb      	mvns	r3, r5
 801e744:	17db      	asrs	r3, r3, #31
 801e746:	401d      	ands	r5, r3
 801e748:	68a3      	ldr	r3, [r4, #8]
 801e74a:	6922      	ldr	r2, [r4, #16]
 801e74c:	4293      	cmp	r3, r2
 801e74e:	dd01      	ble.n	801e754 <_printf_common+0x80>
 801e750:	1a9b      	subs	r3, r3, r2
 801e752:	18ed      	adds	r5, r5, r3
 801e754:	2600      	movs	r6, #0
 801e756:	42b5      	cmp	r5, r6
 801e758:	d120      	bne.n	801e79c <_printf_common+0xc8>
 801e75a:	2000      	movs	r0, #0
 801e75c:	e010      	b.n	801e780 <_printf_common+0xac>
 801e75e:	3501      	adds	r5, #1
 801e760:	68e3      	ldr	r3, [r4, #12]
 801e762:	6832      	ldr	r2, [r6, #0]
 801e764:	1a9b      	subs	r3, r3, r2
 801e766:	42ab      	cmp	r3, r5
 801e768:	ddd2      	ble.n	801e710 <_printf_common+0x3c>
 801e76a:	0022      	movs	r2, r4
 801e76c:	2301      	movs	r3, #1
 801e76e:	9901      	ldr	r1, [sp, #4]
 801e770:	9800      	ldr	r0, [sp, #0]
 801e772:	9f08      	ldr	r7, [sp, #32]
 801e774:	3219      	adds	r2, #25
 801e776:	47b8      	blx	r7
 801e778:	3001      	adds	r0, #1
 801e77a:	d1f0      	bne.n	801e75e <_printf_common+0x8a>
 801e77c:	2001      	movs	r0, #1
 801e77e:	4240      	negs	r0, r0
 801e780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e782:	2030      	movs	r0, #48	@ 0x30
 801e784:	18e1      	adds	r1, r4, r3
 801e786:	3143      	adds	r1, #67	@ 0x43
 801e788:	7008      	strb	r0, [r1, #0]
 801e78a:	0021      	movs	r1, r4
 801e78c:	1c5a      	adds	r2, r3, #1
 801e78e:	3145      	adds	r1, #69	@ 0x45
 801e790:	7809      	ldrb	r1, [r1, #0]
 801e792:	18a2      	adds	r2, r4, r2
 801e794:	3243      	adds	r2, #67	@ 0x43
 801e796:	3302      	adds	r3, #2
 801e798:	7011      	strb	r1, [r2, #0]
 801e79a:	e7c1      	b.n	801e720 <_printf_common+0x4c>
 801e79c:	0022      	movs	r2, r4
 801e79e:	2301      	movs	r3, #1
 801e7a0:	9901      	ldr	r1, [sp, #4]
 801e7a2:	9800      	ldr	r0, [sp, #0]
 801e7a4:	9f08      	ldr	r7, [sp, #32]
 801e7a6:	321a      	adds	r2, #26
 801e7a8:	47b8      	blx	r7
 801e7aa:	3001      	adds	r0, #1
 801e7ac:	d0e6      	beq.n	801e77c <_printf_common+0xa8>
 801e7ae:	3601      	adds	r6, #1
 801e7b0:	e7d1      	b.n	801e756 <_printf_common+0x82>
	...

0801e7b4 <_printf_i>:
 801e7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7b6:	b08b      	sub	sp, #44	@ 0x2c
 801e7b8:	9206      	str	r2, [sp, #24]
 801e7ba:	000a      	movs	r2, r1
 801e7bc:	3243      	adds	r2, #67	@ 0x43
 801e7be:	9307      	str	r3, [sp, #28]
 801e7c0:	9005      	str	r0, [sp, #20]
 801e7c2:	9203      	str	r2, [sp, #12]
 801e7c4:	7e0a      	ldrb	r2, [r1, #24]
 801e7c6:	000c      	movs	r4, r1
 801e7c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7ca:	2a78      	cmp	r2, #120	@ 0x78
 801e7cc:	d809      	bhi.n	801e7e2 <_printf_i+0x2e>
 801e7ce:	2a62      	cmp	r2, #98	@ 0x62
 801e7d0:	d80b      	bhi.n	801e7ea <_printf_i+0x36>
 801e7d2:	2a00      	cmp	r2, #0
 801e7d4:	d100      	bne.n	801e7d8 <_printf_i+0x24>
 801e7d6:	e0bc      	b.n	801e952 <_printf_i+0x19e>
 801e7d8:	497b      	ldr	r1, [pc, #492]	@ (801e9c8 <_printf_i+0x214>)
 801e7da:	9104      	str	r1, [sp, #16]
 801e7dc:	2a58      	cmp	r2, #88	@ 0x58
 801e7de:	d100      	bne.n	801e7e2 <_printf_i+0x2e>
 801e7e0:	e090      	b.n	801e904 <_printf_i+0x150>
 801e7e2:	0025      	movs	r5, r4
 801e7e4:	3542      	adds	r5, #66	@ 0x42
 801e7e6:	702a      	strb	r2, [r5, #0]
 801e7e8:	e022      	b.n	801e830 <_printf_i+0x7c>
 801e7ea:	0010      	movs	r0, r2
 801e7ec:	3863      	subs	r0, #99	@ 0x63
 801e7ee:	2815      	cmp	r0, #21
 801e7f0:	d8f7      	bhi.n	801e7e2 <_printf_i+0x2e>
 801e7f2:	f7e1 fccd 	bl	8000190 <__gnu_thumb1_case_shi>
 801e7f6:	0016      	.short	0x0016
 801e7f8:	fff6001f 	.word	0xfff6001f
 801e7fc:	fff6fff6 	.word	0xfff6fff6
 801e800:	001ffff6 	.word	0x001ffff6
 801e804:	fff6fff6 	.word	0xfff6fff6
 801e808:	fff6fff6 	.word	0xfff6fff6
 801e80c:	003600a1 	.word	0x003600a1
 801e810:	fff60080 	.word	0xfff60080
 801e814:	00b2fff6 	.word	0x00b2fff6
 801e818:	0036fff6 	.word	0x0036fff6
 801e81c:	fff6fff6 	.word	0xfff6fff6
 801e820:	0084      	.short	0x0084
 801e822:	0025      	movs	r5, r4
 801e824:	681a      	ldr	r2, [r3, #0]
 801e826:	3542      	adds	r5, #66	@ 0x42
 801e828:	1d11      	adds	r1, r2, #4
 801e82a:	6019      	str	r1, [r3, #0]
 801e82c:	6813      	ldr	r3, [r2, #0]
 801e82e:	702b      	strb	r3, [r5, #0]
 801e830:	2301      	movs	r3, #1
 801e832:	e0a0      	b.n	801e976 <_printf_i+0x1c2>
 801e834:	6818      	ldr	r0, [r3, #0]
 801e836:	6809      	ldr	r1, [r1, #0]
 801e838:	1d02      	adds	r2, r0, #4
 801e83a:	060d      	lsls	r5, r1, #24
 801e83c:	d50b      	bpl.n	801e856 <_printf_i+0xa2>
 801e83e:	6806      	ldr	r6, [r0, #0]
 801e840:	601a      	str	r2, [r3, #0]
 801e842:	2e00      	cmp	r6, #0
 801e844:	da03      	bge.n	801e84e <_printf_i+0x9a>
 801e846:	232d      	movs	r3, #45	@ 0x2d
 801e848:	9a03      	ldr	r2, [sp, #12]
 801e84a:	4276      	negs	r6, r6
 801e84c:	7013      	strb	r3, [r2, #0]
 801e84e:	4b5e      	ldr	r3, [pc, #376]	@ (801e9c8 <_printf_i+0x214>)
 801e850:	270a      	movs	r7, #10
 801e852:	9304      	str	r3, [sp, #16]
 801e854:	e018      	b.n	801e888 <_printf_i+0xd4>
 801e856:	6806      	ldr	r6, [r0, #0]
 801e858:	601a      	str	r2, [r3, #0]
 801e85a:	0649      	lsls	r1, r1, #25
 801e85c:	d5f1      	bpl.n	801e842 <_printf_i+0x8e>
 801e85e:	b236      	sxth	r6, r6
 801e860:	e7ef      	b.n	801e842 <_printf_i+0x8e>
 801e862:	6808      	ldr	r0, [r1, #0]
 801e864:	6819      	ldr	r1, [r3, #0]
 801e866:	c940      	ldmia	r1!, {r6}
 801e868:	0605      	lsls	r5, r0, #24
 801e86a:	d402      	bmi.n	801e872 <_printf_i+0xbe>
 801e86c:	0640      	lsls	r0, r0, #25
 801e86e:	d500      	bpl.n	801e872 <_printf_i+0xbe>
 801e870:	b2b6      	uxth	r6, r6
 801e872:	6019      	str	r1, [r3, #0]
 801e874:	4b54      	ldr	r3, [pc, #336]	@ (801e9c8 <_printf_i+0x214>)
 801e876:	270a      	movs	r7, #10
 801e878:	9304      	str	r3, [sp, #16]
 801e87a:	2a6f      	cmp	r2, #111	@ 0x6f
 801e87c:	d100      	bne.n	801e880 <_printf_i+0xcc>
 801e87e:	3f02      	subs	r7, #2
 801e880:	0023      	movs	r3, r4
 801e882:	2200      	movs	r2, #0
 801e884:	3343      	adds	r3, #67	@ 0x43
 801e886:	701a      	strb	r2, [r3, #0]
 801e888:	6863      	ldr	r3, [r4, #4]
 801e88a:	60a3      	str	r3, [r4, #8]
 801e88c:	2b00      	cmp	r3, #0
 801e88e:	db03      	blt.n	801e898 <_printf_i+0xe4>
 801e890:	2104      	movs	r1, #4
 801e892:	6822      	ldr	r2, [r4, #0]
 801e894:	438a      	bics	r2, r1
 801e896:	6022      	str	r2, [r4, #0]
 801e898:	2e00      	cmp	r6, #0
 801e89a:	d102      	bne.n	801e8a2 <_printf_i+0xee>
 801e89c:	9d03      	ldr	r5, [sp, #12]
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	d00c      	beq.n	801e8bc <_printf_i+0x108>
 801e8a2:	9d03      	ldr	r5, [sp, #12]
 801e8a4:	0030      	movs	r0, r6
 801e8a6:	0039      	movs	r1, r7
 801e8a8:	f7e1 fd02 	bl	80002b0 <__aeabi_uidivmod>
 801e8ac:	9b04      	ldr	r3, [sp, #16]
 801e8ae:	3d01      	subs	r5, #1
 801e8b0:	5c5b      	ldrb	r3, [r3, r1]
 801e8b2:	702b      	strb	r3, [r5, #0]
 801e8b4:	0033      	movs	r3, r6
 801e8b6:	0006      	movs	r6, r0
 801e8b8:	429f      	cmp	r7, r3
 801e8ba:	d9f3      	bls.n	801e8a4 <_printf_i+0xf0>
 801e8bc:	2f08      	cmp	r7, #8
 801e8be:	d109      	bne.n	801e8d4 <_printf_i+0x120>
 801e8c0:	6823      	ldr	r3, [r4, #0]
 801e8c2:	07db      	lsls	r3, r3, #31
 801e8c4:	d506      	bpl.n	801e8d4 <_printf_i+0x120>
 801e8c6:	6862      	ldr	r2, [r4, #4]
 801e8c8:	6923      	ldr	r3, [r4, #16]
 801e8ca:	429a      	cmp	r2, r3
 801e8cc:	dc02      	bgt.n	801e8d4 <_printf_i+0x120>
 801e8ce:	2330      	movs	r3, #48	@ 0x30
 801e8d0:	3d01      	subs	r5, #1
 801e8d2:	702b      	strb	r3, [r5, #0]
 801e8d4:	9b03      	ldr	r3, [sp, #12]
 801e8d6:	1b5b      	subs	r3, r3, r5
 801e8d8:	6123      	str	r3, [r4, #16]
 801e8da:	9b07      	ldr	r3, [sp, #28]
 801e8dc:	0021      	movs	r1, r4
 801e8de:	9300      	str	r3, [sp, #0]
 801e8e0:	9805      	ldr	r0, [sp, #20]
 801e8e2:	9b06      	ldr	r3, [sp, #24]
 801e8e4:	aa09      	add	r2, sp, #36	@ 0x24
 801e8e6:	f7ff fef5 	bl	801e6d4 <_printf_common>
 801e8ea:	3001      	adds	r0, #1
 801e8ec:	d148      	bne.n	801e980 <_printf_i+0x1cc>
 801e8ee:	2001      	movs	r0, #1
 801e8f0:	4240      	negs	r0, r0
 801e8f2:	b00b      	add	sp, #44	@ 0x2c
 801e8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8f6:	2220      	movs	r2, #32
 801e8f8:	6809      	ldr	r1, [r1, #0]
 801e8fa:	430a      	orrs	r2, r1
 801e8fc:	6022      	str	r2, [r4, #0]
 801e8fe:	2278      	movs	r2, #120	@ 0x78
 801e900:	4932      	ldr	r1, [pc, #200]	@ (801e9cc <_printf_i+0x218>)
 801e902:	9104      	str	r1, [sp, #16]
 801e904:	0021      	movs	r1, r4
 801e906:	3145      	adds	r1, #69	@ 0x45
 801e908:	700a      	strb	r2, [r1, #0]
 801e90a:	6819      	ldr	r1, [r3, #0]
 801e90c:	6822      	ldr	r2, [r4, #0]
 801e90e:	c940      	ldmia	r1!, {r6}
 801e910:	0610      	lsls	r0, r2, #24
 801e912:	d402      	bmi.n	801e91a <_printf_i+0x166>
 801e914:	0650      	lsls	r0, r2, #25
 801e916:	d500      	bpl.n	801e91a <_printf_i+0x166>
 801e918:	b2b6      	uxth	r6, r6
 801e91a:	6019      	str	r1, [r3, #0]
 801e91c:	07d3      	lsls	r3, r2, #31
 801e91e:	d502      	bpl.n	801e926 <_printf_i+0x172>
 801e920:	2320      	movs	r3, #32
 801e922:	4313      	orrs	r3, r2
 801e924:	6023      	str	r3, [r4, #0]
 801e926:	2e00      	cmp	r6, #0
 801e928:	d001      	beq.n	801e92e <_printf_i+0x17a>
 801e92a:	2710      	movs	r7, #16
 801e92c:	e7a8      	b.n	801e880 <_printf_i+0xcc>
 801e92e:	2220      	movs	r2, #32
 801e930:	6823      	ldr	r3, [r4, #0]
 801e932:	4393      	bics	r3, r2
 801e934:	6023      	str	r3, [r4, #0]
 801e936:	e7f8      	b.n	801e92a <_printf_i+0x176>
 801e938:	681a      	ldr	r2, [r3, #0]
 801e93a:	680d      	ldr	r5, [r1, #0]
 801e93c:	1d10      	adds	r0, r2, #4
 801e93e:	6949      	ldr	r1, [r1, #20]
 801e940:	6018      	str	r0, [r3, #0]
 801e942:	6813      	ldr	r3, [r2, #0]
 801e944:	062e      	lsls	r6, r5, #24
 801e946:	d501      	bpl.n	801e94c <_printf_i+0x198>
 801e948:	6019      	str	r1, [r3, #0]
 801e94a:	e002      	b.n	801e952 <_printf_i+0x19e>
 801e94c:	066d      	lsls	r5, r5, #25
 801e94e:	d5fb      	bpl.n	801e948 <_printf_i+0x194>
 801e950:	8019      	strh	r1, [r3, #0]
 801e952:	2300      	movs	r3, #0
 801e954:	9d03      	ldr	r5, [sp, #12]
 801e956:	6123      	str	r3, [r4, #16]
 801e958:	e7bf      	b.n	801e8da <_printf_i+0x126>
 801e95a:	681a      	ldr	r2, [r3, #0]
 801e95c:	1d11      	adds	r1, r2, #4
 801e95e:	6019      	str	r1, [r3, #0]
 801e960:	6815      	ldr	r5, [r2, #0]
 801e962:	2100      	movs	r1, #0
 801e964:	0028      	movs	r0, r5
 801e966:	6862      	ldr	r2, [r4, #4]
 801e968:	f000 fb7b 	bl	801f062 <memchr>
 801e96c:	2800      	cmp	r0, #0
 801e96e:	d001      	beq.n	801e974 <_printf_i+0x1c0>
 801e970:	1b40      	subs	r0, r0, r5
 801e972:	6060      	str	r0, [r4, #4]
 801e974:	6863      	ldr	r3, [r4, #4]
 801e976:	6123      	str	r3, [r4, #16]
 801e978:	2300      	movs	r3, #0
 801e97a:	9a03      	ldr	r2, [sp, #12]
 801e97c:	7013      	strb	r3, [r2, #0]
 801e97e:	e7ac      	b.n	801e8da <_printf_i+0x126>
 801e980:	002a      	movs	r2, r5
 801e982:	6923      	ldr	r3, [r4, #16]
 801e984:	9906      	ldr	r1, [sp, #24]
 801e986:	9805      	ldr	r0, [sp, #20]
 801e988:	9d07      	ldr	r5, [sp, #28]
 801e98a:	47a8      	blx	r5
 801e98c:	3001      	adds	r0, #1
 801e98e:	d0ae      	beq.n	801e8ee <_printf_i+0x13a>
 801e990:	6823      	ldr	r3, [r4, #0]
 801e992:	079b      	lsls	r3, r3, #30
 801e994:	d415      	bmi.n	801e9c2 <_printf_i+0x20e>
 801e996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e998:	68e0      	ldr	r0, [r4, #12]
 801e99a:	4298      	cmp	r0, r3
 801e99c:	daa9      	bge.n	801e8f2 <_printf_i+0x13e>
 801e99e:	0018      	movs	r0, r3
 801e9a0:	e7a7      	b.n	801e8f2 <_printf_i+0x13e>
 801e9a2:	0022      	movs	r2, r4
 801e9a4:	2301      	movs	r3, #1
 801e9a6:	9906      	ldr	r1, [sp, #24]
 801e9a8:	9805      	ldr	r0, [sp, #20]
 801e9aa:	9e07      	ldr	r6, [sp, #28]
 801e9ac:	3219      	adds	r2, #25
 801e9ae:	47b0      	blx	r6
 801e9b0:	3001      	adds	r0, #1
 801e9b2:	d09c      	beq.n	801e8ee <_printf_i+0x13a>
 801e9b4:	3501      	adds	r5, #1
 801e9b6:	68e3      	ldr	r3, [r4, #12]
 801e9b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e9ba:	1a9b      	subs	r3, r3, r2
 801e9bc:	42ab      	cmp	r3, r5
 801e9be:	dcf0      	bgt.n	801e9a2 <_printf_i+0x1ee>
 801e9c0:	e7e9      	b.n	801e996 <_printf_i+0x1e2>
 801e9c2:	2500      	movs	r5, #0
 801e9c4:	e7f7      	b.n	801e9b6 <_printf_i+0x202>
 801e9c6:	46c0      	nop			@ (mov r8, r8)
 801e9c8:	08024273 	.word	0x08024273
 801e9cc:	08024284 	.word	0x08024284

0801e9d0 <std>:
 801e9d0:	2300      	movs	r3, #0
 801e9d2:	b510      	push	{r4, lr}
 801e9d4:	0004      	movs	r4, r0
 801e9d6:	6003      	str	r3, [r0, #0]
 801e9d8:	6043      	str	r3, [r0, #4]
 801e9da:	6083      	str	r3, [r0, #8]
 801e9dc:	8181      	strh	r1, [r0, #12]
 801e9de:	6643      	str	r3, [r0, #100]	@ 0x64
 801e9e0:	81c2      	strh	r2, [r0, #14]
 801e9e2:	6103      	str	r3, [r0, #16]
 801e9e4:	6143      	str	r3, [r0, #20]
 801e9e6:	6183      	str	r3, [r0, #24]
 801e9e8:	0019      	movs	r1, r3
 801e9ea:	2208      	movs	r2, #8
 801e9ec:	305c      	adds	r0, #92	@ 0x5c
 801e9ee:	f000 fa67 	bl	801eec0 <memset>
 801e9f2:	4b0b      	ldr	r3, [pc, #44]	@ (801ea20 <std+0x50>)
 801e9f4:	6224      	str	r4, [r4, #32]
 801e9f6:	6263      	str	r3, [r4, #36]	@ 0x24
 801e9f8:	4b0a      	ldr	r3, [pc, #40]	@ (801ea24 <std+0x54>)
 801e9fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e9fc:	4b0a      	ldr	r3, [pc, #40]	@ (801ea28 <std+0x58>)
 801e9fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801ea00:	4b0a      	ldr	r3, [pc, #40]	@ (801ea2c <std+0x5c>)
 801ea02:	6323      	str	r3, [r4, #48]	@ 0x30
 801ea04:	4b0a      	ldr	r3, [pc, #40]	@ (801ea30 <std+0x60>)
 801ea06:	429c      	cmp	r4, r3
 801ea08:	d005      	beq.n	801ea16 <std+0x46>
 801ea0a:	4b0a      	ldr	r3, [pc, #40]	@ (801ea34 <std+0x64>)
 801ea0c:	429c      	cmp	r4, r3
 801ea0e:	d002      	beq.n	801ea16 <std+0x46>
 801ea10:	4b09      	ldr	r3, [pc, #36]	@ (801ea38 <std+0x68>)
 801ea12:	429c      	cmp	r4, r3
 801ea14:	d103      	bne.n	801ea1e <std+0x4e>
 801ea16:	0020      	movs	r0, r4
 801ea18:	3058      	adds	r0, #88	@ 0x58
 801ea1a:	f000 fb1f 	bl	801f05c <__retarget_lock_init_recursive>
 801ea1e:	bd10      	pop	{r4, pc}
 801ea20:	0801ec79 	.word	0x0801ec79
 801ea24:	0801eca1 	.word	0x0801eca1
 801ea28:	0801ecd9 	.word	0x0801ecd9
 801ea2c:	0801ed05 	.word	0x0801ed05
 801ea30:	200037b4 	.word	0x200037b4
 801ea34:	2000381c 	.word	0x2000381c
 801ea38:	20003884 	.word	0x20003884

0801ea3c <stdio_exit_handler>:
 801ea3c:	b510      	push	{r4, lr}
 801ea3e:	4a03      	ldr	r2, [pc, #12]	@ (801ea4c <stdio_exit_handler+0x10>)
 801ea40:	4903      	ldr	r1, [pc, #12]	@ (801ea50 <stdio_exit_handler+0x14>)
 801ea42:	4804      	ldr	r0, [pc, #16]	@ (801ea54 <stdio_exit_handler+0x18>)
 801ea44:	f000 f86c 	bl	801eb20 <_fwalk_sglue>
 801ea48:	bd10      	pop	{r4, pc}
 801ea4a:	46c0      	nop			@ (mov r8, r8)
 801ea4c:	20000250 	.word	0x20000250
 801ea50:	08021681 	.word	0x08021681
 801ea54:	200003cc 	.word	0x200003cc

0801ea58 <cleanup_stdio>:
 801ea58:	6841      	ldr	r1, [r0, #4]
 801ea5a:	4b0b      	ldr	r3, [pc, #44]	@ (801ea88 <cleanup_stdio+0x30>)
 801ea5c:	b510      	push	{r4, lr}
 801ea5e:	0004      	movs	r4, r0
 801ea60:	4299      	cmp	r1, r3
 801ea62:	d001      	beq.n	801ea68 <cleanup_stdio+0x10>
 801ea64:	f002 fe0c 	bl	8021680 <_fflush_r>
 801ea68:	68a1      	ldr	r1, [r4, #8]
 801ea6a:	4b08      	ldr	r3, [pc, #32]	@ (801ea8c <cleanup_stdio+0x34>)
 801ea6c:	4299      	cmp	r1, r3
 801ea6e:	d002      	beq.n	801ea76 <cleanup_stdio+0x1e>
 801ea70:	0020      	movs	r0, r4
 801ea72:	f002 fe05 	bl	8021680 <_fflush_r>
 801ea76:	68e1      	ldr	r1, [r4, #12]
 801ea78:	4b05      	ldr	r3, [pc, #20]	@ (801ea90 <cleanup_stdio+0x38>)
 801ea7a:	4299      	cmp	r1, r3
 801ea7c:	d002      	beq.n	801ea84 <cleanup_stdio+0x2c>
 801ea7e:	0020      	movs	r0, r4
 801ea80:	f002 fdfe 	bl	8021680 <_fflush_r>
 801ea84:	bd10      	pop	{r4, pc}
 801ea86:	46c0      	nop			@ (mov r8, r8)
 801ea88:	200037b4 	.word	0x200037b4
 801ea8c:	2000381c 	.word	0x2000381c
 801ea90:	20003884 	.word	0x20003884

0801ea94 <global_stdio_init.part.0>:
 801ea94:	b510      	push	{r4, lr}
 801ea96:	4b09      	ldr	r3, [pc, #36]	@ (801eabc <global_stdio_init.part.0+0x28>)
 801ea98:	4a09      	ldr	r2, [pc, #36]	@ (801eac0 <global_stdio_init.part.0+0x2c>)
 801ea9a:	2104      	movs	r1, #4
 801ea9c:	601a      	str	r2, [r3, #0]
 801ea9e:	4809      	ldr	r0, [pc, #36]	@ (801eac4 <global_stdio_init.part.0+0x30>)
 801eaa0:	2200      	movs	r2, #0
 801eaa2:	f7ff ff95 	bl	801e9d0 <std>
 801eaa6:	2201      	movs	r2, #1
 801eaa8:	2109      	movs	r1, #9
 801eaaa:	4807      	ldr	r0, [pc, #28]	@ (801eac8 <global_stdio_init.part.0+0x34>)
 801eaac:	f7ff ff90 	bl	801e9d0 <std>
 801eab0:	2202      	movs	r2, #2
 801eab2:	2112      	movs	r1, #18
 801eab4:	4805      	ldr	r0, [pc, #20]	@ (801eacc <global_stdio_init.part.0+0x38>)
 801eab6:	f7ff ff8b 	bl	801e9d0 <std>
 801eaba:	bd10      	pop	{r4, pc}
 801eabc:	200038ec 	.word	0x200038ec
 801eac0:	0801ea3d 	.word	0x0801ea3d
 801eac4:	200037b4 	.word	0x200037b4
 801eac8:	2000381c 	.word	0x2000381c
 801eacc:	20003884 	.word	0x20003884

0801ead0 <__sfp_lock_acquire>:
 801ead0:	b510      	push	{r4, lr}
 801ead2:	4802      	ldr	r0, [pc, #8]	@ (801eadc <__sfp_lock_acquire+0xc>)
 801ead4:	f000 fac3 	bl	801f05e <__retarget_lock_acquire_recursive>
 801ead8:	bd10      	pop	{r4, pc}
 801eada:	46c0      	nop			@ (mov r8, r8)
 801eadc:	200038f5 	.word	0x200038f5

0801eae0 <__sfp_lock_release>:
 801eae0:	b510      	push	{r4, lr}
 801eae2:	4802      	ldr	r0, [pc, #8]	@ (801eaec <__sfp_lock_release+0xc>)
 801eae4:	f000 fabc 	bl	801f060 <__retarget_lock_release_recursive>
 801eae8:	bd10      	pop	{r4, pc}
 801eaea:	46c0      	nop			@ (mov r8, r8)
 801eaec:	200038f5 	.word	0x200038f5

0801eaf0 <__sinit>:
 801eaf0:	b510      	push	{r4, lr}
 801eaf2:	0004      	movs	r4, r0
 801eaf4:	f7ff ffec 	bl	801ead0 <__sfp_lock_acquire>
 801eaf8:	6a23      	ldr	r3, [r4, #32]
 801eafa:	2b00      	cmp	r3, #0
 801eafc:	d002      	beq.n	801eb04 <__sinit+0x14>
 801eafe:	f7ff ffef 	bl	801eae0 <__sfp_lock_release>
 801eb02:	bd10      	pop	{r4, pc}
 801eb04:	4b04      	ldr	r3, [pc, #16]	@ (801eb18 <__sinit+0x28>)
 801eb06:	6223      	str	r3, [r4, #32]
 801eb08:	4b04      	ldr	r3, [pc, #16]	@ (801eb1c <__sinit+0x2c>)
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d1f6      	bne.n	801eafe <__sinit+0xe>
 801eb10:	f7ff ffc0 	bl	801ea94 <global_stdio_init.part.0>
 801eb14:	e7f3      	b.n	801eafe <__sinit+0xe>
 801eb16:	46c0      	nop			@ (mov r8, r8)
 801eb18:	0801ea59 	.word	0x0801ea59
 801eb1c:	200038ec 	.word	0x200038ec

0801eb20 <_fwalk_sglue>:
 801eb20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eb22:	0014      	movs	r4, r2
 801eb24:	2600      	movs	r6, #0
 801eb26:	9000      	str	r0, [sp, #0]
 801eb28:	9101      	str	r1, [sp, #4]
 801eb2a:	68a5      	ldr	r5, [r4, #8]
 801eb2c:	6867      	ldr	r7, [r4, #4]
 801eb2e:	3f01      	subs	r7, #1
 801eb30:	d504      	bpl.n	801eb3c <_fwalk_sglue+0x1c>
 801eb32:	6824      	ldr	r4, [r4, #0]
 801eb34:	2c00      	cmp	r4, #0
 801eb36:	d1f8      	bne.n	801eb2a <_fwalk_sglue+0xa>
 801eb38:	0030      	movs	r0, r6
 801eb3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801eb3c:	89ab      	ldrh	r3, [r5, #12]
 801eb3e:	2b01      	cmp	r3, #1
 801eb40:	d908      	bls.n	801eb54 <_fwalk_sglue+0x34>
 801eb42:	220e      	movs	r2, #14
 801eb44:	5eab      	ldrsh	r3, [r5, r2]
 801eb46:	3301      	adds	r3, #1
 801eb48:	d004      	beq.n	801eb54 <_fwalk_sglue+0x34>
 801eb4a:	0029      	movs	r1, r5
 801eb4c:	9800      	ldr	r0, [sp, #0]
 801eb4e:	9b01      	ldr	r3, [sp, #4]
 801eb50:	4798      	blx	r3
 801eb52:	4306      	orrs	r6, r0
 801eb54:	3568      	adds	r5, #104	@ 0x68
 801eb56:	e7ea      	b.n	801eb2e <_fwalk_sglue+0xe>

0801eb58 <iprintf>:
 801eb58:	b40f      	push	{r0, r1, r2, r3}
 801eb5a:	b507      	push	{r0, r1, r2, lr}
 801eb5c:	4905      	ldr	r1, [pc, #20]	@ (801eb74 <iprintf+0x1c>)
 801eb5e:	ab04      	add	r3, sp, #16
 801eb60:	6808      	ldr	r0, [r1, #0]
 801eb62:	cb04      	ldmia	r3!, {r2}
 801eb64:	6881      	ldr	r1, [r0, #8]
 801eb66:	9301      	str	r3, [sp, #4]
 801eb68:	f002 fbe8 	bl	802133c <_vfiprintf_r>
 801eb6c:	b003      	add	sp, #12
 801eb6e:	bc08      	pop	{r3}
 801eb70:	b004      	add	sp, #16
 801eb72:	4718      	bx	r3
 801eb74:	200003c8 	.word	0x200003c8

0801eb78 <_puts_r>:
 801eb78:	6a03      	ldr	r3, [r0, #32]
 801eb7a:	b570      	push	{r4, r5, r6, lr}
 801eb7c:	0005      	movs	r5, r0
 801eb7e:	000e      	movs	r6, r1
 801eb80:	6884      	ldr	r4, [r0, #8]
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	d101      	bne.n	801eb8a <_puts_r+0x12>
 801eb86:	f7ff ffb3 	bl	801eaf0 <__sinit>
 801eb8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801eb8c:	07db      	lsls	r3, r3, #31
 801eb8e:	d405      	bmi.n	801eb9c <_puts_r+0x24>
 801eb90:	89a3      	ldrh	r3, [r4, #12]
 801eb92:	059b      	lsls	r3, r3, #22
 801eb94:	d402      	bmi.n	801eb9c <_puts_r+0x24>
 801eb96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eb98:	f000 fa61 	bl	801f05e <__retarget_lock_acquire_recursive>
 801eb9c:	89a3      	ldrh	r3, [r4, #12]
 801eb9e:	071b      	lsls	r3, r3, #28
 801eba0:	d502      	bpl.n	801eba8 <_puts_r+0x30>
 801eba2:	6923      	ldr	r3, [r4, #16]
 801eba4:	2b00      	cmp	r3, #0
 801eba6:	d11f      	bne.n	801ebe8 <_puts_r+0x70>
 801eba8:	0021      	movs	r1, r4
 801ebaa:	0028      	movs	r0, r5
 801ebac:	f000 f92a 	bl	801ee04 <__swsetup_r>
 801ebb0:	2800      	cmp	r0, #0
 801ebb2:	d019      	beq.n	801ebe8 <_puts_r+0x70>
 801ebb4:	2501      	movs	r5, #1
 801ebb6:	426d      	negs	r5, r5
 801ebb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ebba:	07db      	lsls	r3, r3, #31
 801ebbc:	d405      	bmi.n	801ebca <_puts_r+0x52>
 801ebbe:	89a3      	ldrh	r3, [r4, #12]
 801ebc0:	059b      	lsls	r3, r3, #22
 801ebc2:	d402      	bmi.n	801ebca <_puts_r+0x52>
 801ebc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ebc6:	f000 fa4b 	bl	801f060 <__retarget_lock_release_recursive>
 801ebca:	0028      	movs	r0, r5
 801ebcc:	bd70      	pop	{r4, r5, r6, pc}
 801ebce:	3601      	adds	r6, #1
 801ebd0:	60a3      	str	r3, [r4, #8]
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	da04      	bge.n	801ebe0 <_puts_r+0x68>
 801ebd6:	69a2      	ldr	r2, [r4, #24]
 801ebd8:	429a      	cmp	r2, r3
 801ebda:	dc16      	bgt.n	801ec0a <_puts_r+0x92>
 801ebdc:	290a      	cmp	r1, #10
 801ebde:	d014      	beq.n	801ec0a <_puts_r+0x92>
 801ebe0:	6823      	ldr	r3, [r4, #0]
 801ebe2:	1c5a      	adds	r2, r3, #1
 801ebe4:	6022      	str	r2, [r4, #0]
 801ebe6:	7019      	strb	r1, [r3, #0]
 801ebe8:	68a3      	ldr	r3, [r4, #8]
 801ebea:	7831      	ldrb	r1, [r6, #0]
 801ebec:	3b01      	subs	r3, #1
 801ebee:	2900      	cmp	r1, #0
 801ebf0:	d1ed      	bne.n	801ebce <_puts_r+0x56>
 801ebf2:	60a3      	str	r3, [r4, #8]
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	da0f      	bge.n	801ec18 <_puts_r+0xa0>
 801ebf8:	0022      	movs	r2, r4
 801ebfa:	0028      	movs	r0, r5
 801ebfc:	310a      	adds	r1, #10
 801ebfe:	f000 f8bf 	bl	801ed80 <__swbuf_r>
 801ec02:	3001      	adds	r0, #1
 801ec04:	d0d6      	beq.n	801ebb4 <_puts_r+0x3c>
 801ec06:	250a      	movs	r5, #10
 801ec08:	e7d6      	b.n	801ebb8 <_puts_r+0x40>
 801ec0a:	0022      	movs	r2, r4
 801ec0c:	0028      	movs	r0, r5
 801ec0e:	f000 f8b7 	bl	801ed80 <__swbuf_r>
 801ec12:	3001      	adds	r0, #1
 801ec14:	d1e8      	bne.n	801ebe8 <_puts_r+0x70>
 801ec16:	e7cd      	b.n	801ebb4 <_puts_r+0x3c>
 801ec18:	6823      	ldr	r3, [r4, #0]
 801ec1a:	1c5a      	adds	r2, r3, #1
 801ec1c:	6022      	str	r2, [r4, #0]
 801ec1e:	220a      	movs	r2, #10
 801ec20:	701a      	strb	r2, [r3, #0]
 801ec22:	e7f0      	b.n	801ec06 <_puts_r+0x8e>

0801ec24 <puts>:
 801ec24:	b510      	push	{r4, lr}
 801ec26:	4b03      	ldr	r3, [pc, #12]	@ (801ec34 <puts+0x10>)
 801ec28:	0001      	movs	r1, r0
 801ec2a:	6818      	ldr	r0, [r3, #0]
 801ec2c:	f7ff ffa4 	bl	801eb78 <_puts_r>
 801ec30:	bd10      	pop	{r4, pc}
 801ec32:	46c0      	nop			@ (mov r8, r8)
 801ec34:	200003c8 	.word	0x200003c8

0801ec38 <siprintf>:
 801ec38:	b40e      	push	{r1, r2, r3}
 801ec3a:	b500      	push	{lr}
 801ec3c:	490b      	ldr	r1, [pc, #44]	@ (801ec6c <siprintf+0x34>)
 801ec3e:	b09c      	sub	sp, #112	@ 0x70
 801ec40:	ab1d      	add	r3, sp, #116	@ 0x74
 801ec42:	9002      	str	r0, [sp, #8]
 801ec44:	9006      	str	r0, [sp, #24]
 801ec46:	9107      	str	r1, [sp, #28]
 801ec48:	9104      	str	r1, [sp, #16]
 801ec4a:	4809      	ldr	r0, [pc, #36]	@ (801ec70 <siprintf+0x38>)
 801ec4c:	4909      	ldr	r1, [pc, #36]	@ (801ec74 <siprintf+0x3c>)
 801ec4e:	cb04      	ldmia	r3!, {r2}
 801ec50:	9105      	str	r1, [sp, #20]
 801ec52:	6800      	ldr	r0, [r0, #0]
 801ec54:	a902      	add	r1, sp, #8
 801ec56:	9301      	str	r3, [sp, #4]
 801ec58:	f002 fa4a 	bl	80210f0 <_svfiprintf_r>
 801ec5c:	2200      	movs	r2, #0
 801ec5e:	9b02      	ldr	r3, [sp, #8]
 801ec60:	701a      	strb	r2, [r3, #0]
 801ec62:	b01c      	add	sp, #112	@ 0x70
 801ec64:	bc08      	pop	{r3}
 801ec66:	b003      	add	sp, #12
 801ec68:	4718      	bx	r3
 801ec6a:	46c0      	nop			@ (mov r8, r8)
 801ec6c:	7fffffff 	.word	0x7fffffff
 801ec70:	200003c8 	.word	0x200003c8
 801ec74:	ffff0208 	.word	0xffff0208

0801ec78 <__sread>:
 801ec78:	b570      	push	{r4, r5, r6, lr}
 801ec7a:	000c      	movs	r4, r1
 801ec7c:	250e      	movs	r5, #14
 801ec7e:	5f49      	ldrsh	r1, [r1, r5]
 801ec80:	f000 f99a 	bl	801efb8 <_read_r>
 801ec84:	2800      	cmp	r0, #0
 801ec86:	db03      	blt.n	801ec90 <__sread+0x18>
 801ec88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ec8a:	181b      	adds	r3, r3, r0
 801ec8c:	6563      	str	r3, [r4, #84]	@ 0x54
 801ec8e:	bd70      	pop	{r4, r5, r6, pc}
 801ec90:	89a3      	ldrh	r3, [r4, #12]
 801ec92:	4a02      	ldr	r2, [pc, #8]	@ (801ec9c <__sread+0x24>)
 801ec94:	4013      	ands	r3, r2
 801ec96:	81a3      	strh	r3, [r4, #12]
 801ec98:	e7f9      	b.n	801ec8e <__sread+0x16>
 801ec9a:	46c0      	nop			@ (mov r8, r8)
 801ec9c:	ffffefff 	.word	0xffffefff

0801eca0 <__swrite>:
 801eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eca2:	001f      	movs	r7, r3
 801eca4:	898b      	ldrh	r3, [r1, #12]
 801eca6:	0005      	movs	r5, r0
 801eca8:	000c      	movs	r4, r1
 801ecaa:	0016      	movs	r6, r2
 801ecac:	05db      	lsls	r3, r3, #23
 801ecae:	d505      	bpl.n	801ecbc <__swrite+0x1c>
 801ecb0:	230e      	movs	r3, #14
 801ecb2:	5ec9      	ldrsh	r1, [r1, r3]
 801ecb4:	2200      	movs	r2, #0
 801ecb6:	2302      	movs	r3, #2
 801ecb8:	f000 f96a 	bl	801ef90 <_lseek_r>
 801ecbc:	89a3      	ldrh	r3, [r4, #12]
 801ecbe:	4a05      	ldr	r2, [pc, #20]	@ (801ecd4 <__swrite+0x34>)
 801ecc0:	0028      	movs	r0, r5
 801ecc2:	4013      	ands	r3, r2
 801ecc4:	81a3      	strh	r3, [r4, #12]
 801ecc6:	0032      	movs	r2, r6
 801ecc8:	230e      	movs	r3, #14
 801ecca:	5ee1      	ldrsh	r1, [r4, r3]
 801eccc:	003b      	movs	r3, r7
 801ecce:	f000 f987 	bl	801efe0 <_write_r>
 801ecd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ecd4:	ffffefff 	.word	0xffffefff

0801ecd8 <__sseek>:
 801ecd8:	b570      	push	{r4, r5, r6, lr}
 801ecda:	000c      	movs	r4, r1
 801ecdc:	250e      	movs	r5, #14
 801ecde:	5f49      	ldrsh	r1, [r1, r5]
 801ece0:	f000 f956 	bl	801ef90 <_lseek_r>
 801ece4:	89a3      	ldrh	r3, [r4, #12]
 801ece6:	1c42      	adds	r2, r0, #1
 801ece8:	d103      	bne.n	801ecf2 <__sseek+0x1a>
 801ecea:	4a05      	ldr	r2, [pc, #20]	@ (801ed00 <__sseek+0x28>)
 801ecec:	4013      	ands	r3, r2
 801ecee:	81a3      	strh	r3, [r4, #12]
 801ecf0:	bd70      	pop	{r4, r5, r6, pc}
 801ecf2:	2280      	movs	r2, #128	@ 0x80
 801ecf4:	0152      	lsls	r2, r2, #5
 801ecf6:	4313      	orrs	r3, r2
 801ecf8:	81a3      	strh	r3, [r4, #12]
 801ecfa:	6560      	str	r0, [r4, #84]	@ 0x54
 801ecfc:	e7f8      	b.n	801ecf0 <__sseek+0x18>
 801ecfe:	46c0      	nop			@ (mov r8, r8)
 801ed00:	ffffefff 	.word	0xffffefff

0801ed04 <__sclose>:
 801ed04:	b510      	push	{r4, lr}
 801ed06:	230e      	movs	r3, #14
 801ed08:	5ec9      	ldrsh	r1, [r1, r3]
 801ed0a:	f000 f92f 	bl	801ef6c <_close_r>
 801ed0e:	bd10      	pop	{r4, pc}

0801ed10 <_vsniprintf_r>:
 801ed10:	b530      	push	{r4, r5, lr}
 801ed12:	0014      	movs	r4, r2
 801ed14:	0005      	movs	r5, r0
 801ed16:	001a      	movs	r2, r3
 801ed18:	b09b      	sub	sp, #108	@ 0x6c
 801ed1a:	2c00      	cmp	r4, #0
 801ed1c:	da05      	bge.n	801ed2a <_vsniprintf_r+0x1a>
 801ed1e:	238b      	movs	r3, #139	@ 0x8b
 801ed20:	6003      	str	r3, [r0, #0]
 801ed22:	2001      	movs	r0, #1
 801ed24:	4240      	negs	r0, r0
 801ed26:	b01b      	add	sp, #108	@ 0x6c
 801ed28:	bd30      	pop	{r4, r5, pc}
 801ed2a:	2382      	movs	r3, #130	@ 0x82
 801ed2c:	4668      	mov	r0, sp
 801ed2e:	009b      	lsls	r3, r3, #2
 801ed30:	8183      	strh	r3, [r0, #12]
 801ed32:	2300      	movs	r3, #0
 801ed34:	9100      	str	r1, [sp, #0]
 801ed36:	9104      	str	r1, [sp, #16]
 801ed38:	429c      	cmp	r4, r3
 801ed3a:	d000      	beq.n	801ed3e <_vsniprintf_r+0x2e>
 801ed3c:	1e63      	subs	r3, r4, #1
 801ed3e:	9302      	str	r3, [sp, #8]
 801ed40:	9305      	str	r3, [sp, #20]
 801ed42:	2301      	movs	r3, #1
 801ed44:	4669      	mov	r1, sp
 801ed46:	425b      	negs	r3, r3
 801ed48:	81cb      	strh	r3, [r1, #14]
 801ed4a:	0028      	movs	r0, r5
 801ed4c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ed4e:	f002 f9cf 	bl	80210f0 <_svfiprintf_r>
 801ed52:	1c43      	adds	r3, r0, #1
 801ed54:	da01      	bge.n	801ed5a <_vsniprintf_r+0x4a>
 801ed56:	238b      	movs	r3, #139	@ 0x8b
 801ed58:	602b      	str	r3, [r5, #0]
 801ed5a:	2c00      	cmp	r4, #0
 801ed5c:	d0e3      	beq.n	801ed26 <_vsniprintf_r+0x16>
 801ed5e:	2200      	movs	r2, #0
 801ed60:	9b00      	ldr	r3, [sp, #0]
 801ed62:	701a      	strb	r2, [r3, #0]
 801ed64:	e7df      	b.n	801ed26 <_vsniprintf_r+0x16>
	...

0801ed68 <vsniprintf>:
 801ed68:	b513      	push	{r0, r1, r4, lr}
 801ed6a:	4c04      	ldr	r4, [pc, #16]	@ (801ed7c <vsniprintf+0x14>)
 801ed6c:	9300      	str	r3, [sp, #0]
 801ed6e:	0013      	movs	r3, r2
 801ed70:	000a      	movs	r2, r1
 801ed72:	0001      	movs	r1, r0
 801ed74:	6820      	ldr	r0, [r4, #0]
 801ed76:	f7ff ffcb 	bl	801ed10 <_vsniprintf_r>
 801ed7a:	bd16      	pop	{r1, r2, r4, pc}
 801ed7c:	200003c8 	.word	0x200003c8

0801ed80 <__swbuf_r>:
 801ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed82:	0006      	movs	r6, r0
 801ed84:	000d      	movs	r5, r1
 801ed86:	0014      	movs	r4, r2
 801ed88:	2800      	cmp	r0, #0
 801ed8a:	d004      	beq.n	801ed96 <__swbuf_r+0x16>
 801ed8c:	6a03      	ldr	r3, [r0, #32]
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d101      	bne.n	801ed96 <__swbuf_r+0x16>
 801ed92:	f7ff fead 	bl	801eaf0 <__sinit>
 801ed96:	69a3      	ldr	r3, [r4, #24]
 801ed98:	60a3      	str	r3, [r4, #8]
 801ed9a:	89a3      	ldrh	r3, [r4, #12]
 801ed9c:	071b      	lsls	r3, r3, #28
 801ed9e:	d502      	bpl.n	801eda6 <__swbuf_r+0x26>
 801eda0:	6923      	ldr	r3, [r4, #16]
 801eda2:	2b00      	cmp	r3, #0
 801eda4:	d109      	bne.n	801edba <__swbuf_r+0x3a>
 801eda6:	0021      	movs	r1, r4
 801eda8:	0030      	movs	r0, r6
 801edaa:	f000 f82b 	bl	801ee04 <__swsetup_r>
 801edae:	2800      	cmp	r0, #0
 801edb0:	d003      	beq.n	801edba <__swbuf_r+0x3a>
 801edb2:	2501      	movs	r5, #1
 801edb4:	426d      	negs	r5, r5
 801edb6:	0028      	movs	r0, r5
 801edb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edba:	6923      	ldr	r3, [r4, #16]
 801edbc:	6820      	ldr	r0, [r4, #0]
 801edbe:	b2ef      	uxtb	r7, r5
 801edc0:	1ac0      	subs	r0, r0, r3
 801edc2:	6963      	ldr	r3, [r4, #20]
 801edc4:	b2ed      	uxtb	r5, r5
 801edc6:	4283      	cmp	r3, r0
 801edc8:	dc05      	bgt.n	801edd6 <__swbuf_r+0x56>
 801edca:	0021      	movs	r1, r4
 801edcc:	0030      	movs	r0, r6
 801edce:	f002 fc57 	bl	8021680 <_fflush_r>
 801edd2:	2800      	cmp	r0, #0
 801edd4:	d1ed      	bne.n	801edb2 <__swbuf_r+0x32>
 801edd6:	68a3      	ldr	r3, [r4, #8]
 801edd8:	3001      	adds	r0, #1
 801edda:	3b01      	subs	r3, #1
 801eddc:	60a3      	str	r3, [r4, #8]
 801edde:	6823      	ldr	r3, [r4, #0]
 801ede0:	1c5a      	adds	r2, r3, #1
 801ede2:	6022      	str	r2, [r4, #0]
 801ede4:	701f      	strb	r7, [r3, #0]
 801ede6:	6963      	ldr	r3, [r4, #20]
 801ede8:	4283      	cmp	r3, r0
 801edea:	d004      	beq.n	801edf6 <__swbuf_r+0x76>
 801edec:	89a3      	ldrh	r3, [r4, #12]
 801edee:	07db      	lsls	r3, r3, #31
 801edf0:	d5e1      	bpl.n	801edb6 <__swbuf_r+0x36>
 801edf2:	2d0a      	cmp	r5, #10
 801edf4:	d1df      	bne.n	801edb6 <__swbuf_r+0x36>
 801edf6:	0021      	movs	r1, r4
 801edf8:	0030      	movs	r0, r6
 801edfa:	f002 fc41 	bl	8021680 <_fflush_r>
 801edfe:	2800      	cmp	r0, #0
 801ee00:	d0d9      	beq.n	801edb6 <__swbuf_r+0x36>
 801ee02:	e7d6      	b.n	801edb2 <__swbuf_r+0x32>

0801ee04 <__swsetup_r>:
 801ee04:	4b2d      	ldr	r3, [pc, #180]	@ (801eebc <__swsetup_r+0xb8>)
 801ee06:	b570      	push	{r4, r5, r6, lr}
 801ee08:	0005      	movs	r5, r0
 801ee0a:	6818      	ldr	r0, [r3, #0]
 801ee0c:	000c      	movs	r4, r1
 801ee0e:	2800      	cmp	r0, #0
 801ee10:	d004      	beq.n	801ee1c <__swsetup_r+0x18>
 801ee12:	6a03      	ldr	r3, [r0, #32]
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	d101      	bne.n	801ee1c <__swsetup_r+0x18>
 801ee18:	f7ff fe6a 	bl	801eaf0 <__sinit>
 801ee1c:	230c      	movs	r3, #12
 801ee1e:	5ee2      	ldrsh	r2, [r4, r3]
 801ee20:	0713      	lsls	r3, r2, #28
 801ee22:	d423      	bmi.n	801ee6c <__swsetup_r+0x68>
 801ee24:	06d3      	lsls	r3, r2, #27
 801ee26:	d407      	bmi.n	801ee38 <__swsetup_r+0x34>
 801ee28:	2309      	movs	r3, #9
 801ee2a:	602b      	str	r3, [r5, #0]
 801ee2c:	2340      	movs	r3, #64	@ 0x40
 801ee2e:	2001      	movs	r0, #1
 801ee30:	4313      	orrs	r3, r2
 801ee32:	81a3      	strh	r3, [r4, #12]
 801ee34:	4240      	negs	r0, r0
 801ee36:	e03a      	b.n	801eeae <__swsetup_r+0xaa>
 801ee38:	0752      	lsls	r2, r2, #29
 801ee3a:	d513      	bpl.n	801ee64 <__swsetup_r+0x60>
 801ee3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ee3e:	2900      	cmp	r1, #0
 801ee40:	d008      	beq.n	801ee54 <__swsetup_r+0x50>
 801ee42:	0023      	movs	r3, r4
 801ee44:	3344      	adds	r3, #68	@ 0x44
 801ee46:	4299      	cmp	r1, r3
 801ee48:	d002      	beq.n	801ee50 <__swsetup_r+0x4c>
 801ee4a:	0028      	movs	r0, r5
 801ee4c:	f000 ffa6 	bl	801fd9c <_free_r>
 801ee50:	2300      	movs	r3, #0
 801ee52:	6363      	str	r3, [r4, #52]	@ 0x34
 801ee54:	2224      	movs	r2, #36	@ 0x24
 801ee56:	89a3      	ldrh	r3, [r4, #12]
 801ee58:	4393      	bics	r3, r2
 801ee5a:	81a3      	strh	r3, [r4, #12]
 801ee5c:	2300      	movs	r3, #0
 801ee5e:	6063      	str	r3, [r4, #4]
 801ee60:	6923      	ldr	r3, [r4, #16]
 801ee62:	6023      	str	r3, [r4, #0]
 801ee64:	2308      	movs	r3, #8
 801ee66:	89a2      	ldrh	r2, [r4, #12]
 801ee68:	4313      	orrs	r3, r2
 801ee6a:	81a3      	strh	r3, [r4, #12]
 801ee6c:	6923      	ldr	r3, [r4, #16]
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d10b      	bne.n	801ee8a <__swsetup_r+0x86>
 801ee72:	21a0      	movs	r1, #160	@ 0xa0
 801ee74:	2280      	movs	r2, #128	@ 0x80
 801ee76:	89a3      	ldrh	r3, [r4, #12]
 801ee78:	0089      	lsls	r1, r1, #2
 801ee7a:	0092      	lsls	r2, r2, #2
 801ee7c:	400b      	ands	r3, r1
 801ee7e:	4293      	cmp	r3, r2
 801ee80:	d003      	beq.n	801ee8a <__swsetup_r+0x86>
 801ee82:	0021      	movs	r1, r4
 801ee84:	0028      	movs	r0, r5
 801ee86:	f002 fc51 	bl	802172c <__smakebuf_r>
 801ee8a:	230c      	movs	r3, #12
 801ee8c:	5ee2      	ldrsh	r2, [r4, r3]
 801ee8e:	2101      	movs	r1, #1
 801ee90:	0013      	movs	r3, r2
 801ee92:	400b      	ands	r3, r1
 801ee94:	420a      	tst	r2, r1
 801ee96:	d00b      	beq.n	801eeb0 <__swsetup_r+0xac>
 801ee98:	2300      	movs	r3, #0
 801ee9a:	60a3      	str	r3, [r4, #8]
 801ee9c:	6963      	ldr	r3, [r4, #20]
 801ee9e:	425b      	negs	r3, r3
 801eea0:	61a3      	str	r3, [r4, #24]
 801eea2:	2000      	movs	r0, #0
 801eea4:	6923      	ldr	r3, [r4, #16]
 801eea6:	4283      	cmp	r3, r0
 801eea8:	d101      	bne.n	801eeae <__swsetup_r+0xaa>
 801eeaa:	0613      	lsls	r3, r2, #24
 801eeac:	d4be      	bmi.n	801ee2c <__swsetup_r+0x28>
 801eeae:	bd70      	pop	{r4, r5, r6, pc}
 801eeb0:	0791      	lsls	r1, r2, #30
 801eeb2:	d400      	bmi.n	801eeb6 <__swsetup_r+0xb2>
 801eeb4:	6963      	ldr	r3, [r4, #20]
 801eeb6:	60a3      	str	r3, [r4, #8]
 801eeb8:	e7f3      	b.n	801eea2 <__swsetup_r+0x9e>
 801eeba:	46c0      	nop			@ (mov r8, r8)
 801eebc:	200003c8 	.word	0x200003c8

0801eec0 <memset>:
 801eec0:	0003      	movs	r3, r0
 801eec2:	1882      	adds	r2, r0, r2
 801eec4:	4293      	cmp	r3, r2
 801eec6:	d100      	bne.n	801eeca <memset+0xa>
 801eec8:	4770      	bx	lr
 801eeca:	7019      	strb	r1, [r3, #0]
 801eecc:	3301      	adds	r3, #1
 801eece:	e7f9      	b.n	801eec4 <memset+0x4>

0801eed0 <strchr>:
 801eed0:	b2c9      	uxtb	r1, r1
 801eed2:	7803      	ldrb	r3, [r0, #0]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	d004      	beq.n	801eee2 <strchr+0x12>
 801eed8:	428b      	cmp	r3, r1
 801eeda:	d100      	bne.n	801eede <strchr+0xe>
 801eedc:	4770      	bx	lr
 801eede:	3001      	adds	r0, #1
 801eee0:	e7f7      	b.n	801eed2 <strchr+0x2>
 801eee2:	424b      	negs	r3, r1
 801eee4:	4159      	adcs	r1, r3
 801eee6:	4249      	negs	r1, r1
 801eee8:	4008      	ands	r0, r1
 801eeea:	e7f7      	b.n	801eedc <strchr+0xc>

0801eeec <strncmp>:
 801eeec:	b530      	push	{r4, r5, lr}
 801eeee:	0005      	movs	r5, r0
 801eef0:	1e10      	subs	r0, r2, #0
 801eef2:	d00b      	beq.n	801ef0c <strncmp+0x20>
 801eef4:	2400      	movs	r4, #0
 801eef6:	3a01      	subs	r2, #1
 801eef8:	5d2b      	ldrb	r3, [r5, r4]
 801eefa:	5d08      	ldrb	r0, [r1, r4]
 801eefc:	4283      	cmp	r3, r0
 801eefe:	d104      	bne.n	801ef0a <strncmp+0x1e>
 801ef00:	42a2      	cmp	r2, r4
 801ef02:	d002      	beq.n	801ef0a <strncmp+0x1e>
 801ef04:	3401      	adds	r4, #1
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	d1f6      	bne.n	801eef8 <strncmp+0xc>
 801ef0a:	1a18      	subs	r0, r3, r0
 801ef0c:	bd30      	pop	{r4, r5, pc}

0801ef0e <strncpy>:
 801ef0e:	0003      	movs	r3, r0
 801ef10:	b530      	push	{r4, r5, lr}
 801ef12:	001d      	movs	r5, r3
 801ef14:	2a00      	cmp	r2, #0
 801ef16:	d006      	beq.n	801ef26 <strncpy+0x18>
 801ef18:	780c      	ldrb	r4, [r1, #0]
 801ef1a:	3a01      	subs	r2, #1
 801ef1c:	3301      	adds	r3, #1
 801ef1e:	702c      	strb	r4, [r5, #0]
 801ef20:	3101      	adds	r1, #1
 801ef22:	2c00      	cmp	r4, #0
 801ef24:	d1f5      	bne.n	801ef12 <strncpy+0x4>
 801ef26:	2100      	movs	r1, #0
 801ef28:	189a      	adds	r2, r3, r2
 801ef2a:	4293      	cmp	r3, r2
 801ef2c:	d100      	bne.n	801ef30 <strncpy+0x22>
 801ef2e:	bd30      	pop	{r4, r5, pc}
 801ef30:	7019      	strb	r1, [r3, #0]
 801ef32:	3301      	adds	r3, #1
 801ef34:	e7f9      	b.n	801ef2a <strncpy+0x1c>

0801ef36 <strstr>:
 801ef36:	780a      	ldrb	r2, [r1, #0]
 801ef38:	b530      	push	{r4, r5, lr}
 801ef3a:	2a00      	cmp	r2, #0
 801ef3c:	d10c      	bne.n	801ef58 <strstr+0x22>
 801ef3e:	bd30      	pop	{r4, r5, pc}
 801ef40:	429a      	cmp	r2, r3
 801ef42:	d108      	bne.n	801ef56 <strstr+0x20>
 801ef44:	2301      	movs	r3, #1
 801ef46:	5ccc      	ldrb	r4, [r1, r3]
 801ef48:	2c00      	cmp	r4, #0
 801ef4a:	d0f8      	beq.n	801ef3e <strstr+0x8>
 801ef4c:	5cc5      	ldrb	r5, [r0, r3]
 801ef4e:	42a5      	cmp	r5, r4
 801ef50:	d101      	bne.n	801ef56 <strstr+0x20>
 801ef52:	3301      	adds	r3, #1
 801ef54:	e7f7      	b.n	801ef46 <strstr+0x10>
 801ef56:	3001      	adds	r0, #1
 801ef58:	7803      	ldrb	r3, [r0, #0]
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d1f0      	bne.n	801ef40 <strstr+0xa>
 801ef5e:	0018      	movs	r0, r3
 801ef60:	e7ed      	b.n	801ef3e <strstr+0x8>
	...

0801ef64 <_localeconv_r>:
 801ef64:	4800      	ldr	r0, [pc, #0]	@ (801ef68 <_localeconv_r+0x4>)
 801ef66:	4770      	bx	lr
 801ef68:	2000034c 	.word	0x2000034c

0801ef6c <_close_r>:
 801ef6c:	2300      	movs	r3, #0
 801ef6e:	b570      	push	{r4, r5, r6, lr}
 801ef70:	4d06      	ldr	r5, [pc, #24]	@ (801ef8c <_close_r+0x20>)
 801ef72:	0004      	movs	r4, r0
 801ef74:	0008      	movs	r0, r1
 801ef76:	602b      	str	r3, [r5, #0]
 801ef78:	f7ed fdba 	bl	800caf0 <_close>
 801ef7c:	1c43      	adds	r3, r0, #1
 801ef7e:	d103      	bne.n	801ef88 <_close_r+0x1c>
 801ef80:	682b      	ldr	r3, [r5, #0]
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d000      	beq.n	801ef88 <_close_r+0x1c>
 801ef86:	6023      	str	r3, [r4, #0]
 801ef88:	bd70      	pop	{r4, r5, r6, pc}
 801ef8a:	46c0      	nop			@ (mov r8, r8)
 801ef8c:	200038f0 	.word	0x200038f0

0801ef90 <_lseek_r>:
 801ef90:	b570      	push	{r4, r5, r6, lr}
 801ef92:	0004      	movs	r4, r0
 801ef94:	0008      	movs	r0, r1
 801ef96:	0011      	movs	r1, r2
 801ef98:	001a      	movs	r2, r3
 801ef9a:	2300      	movs	r3, #0
 801ef9c:	4d05      	ldr	r5, [pc, #20]	@ (801efb4 <_lseek_r+0x24>)
 801ef9e:	602b      	str	r3, [r5, #0]
 801efa0:	f7ed fdc7 	bl	800cb32 <_lseek>
 801efa4:	1c43      	adds	r3, r0, #1
 801efa6:	d103      	bne.n	801efb0 <_lseek_r+0x20>
 801efa8:	682b      	ldr	r3, [r5, #0]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	d000      	beq.n	801efb0 <_lseek_r+0x20>
 801efae:	6023      	str	r3, [r4, #0]
 801efb0:	bd70      	pop	{r4, r5, r6, pc}
 801efb2:	46c0      	nop			@ (mov r8, r8)
 801efb4:	200038f0 	.word	0x200038f0

0801efb8 <_read_r>:
 801efb8:	b570      	push	{r4, r5, r6, lr}
 801efba:	0004      	movs	r4, r0
 801efbc:	0008      	movs	r0, r1
 801efbe:	0011      	movs	r1, r2
 801efc0:	001a      	movs	r2, r3
 801efc2:	2300      	movs	r3, #0
 801efc4:	4d05      	ldr	r5, [pc, #20]	@ (801efdc <_read_r+0x24>)
 801efc6:	602b      	str	r3, [r5, #0]
 801efc8:	f7ed fd75 	bl	800cab6 <_read>
 801efcc:	1c43      	adds	r3, r0, #1
 801efce:	d103      	bne.n	801efd8 <_read_r+0x20>
 801efd0:	682b      	ldr	r3, [r5, #0]
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d000      	beq.n	801efd8 <_read_r+0x20>
 801efd6:	6023      	str	r3, [r4, #0]
 801efd8:	bd70      	pop	{r4, r5, r6, pc}
 801efda:	46c0      	nop			@ (mov r8, r8)
 801efdc:	200038f0 	.word	0x200038f0

0801efe0 <_write_r>:
 801efe0:	b570      	push	{r4, r5, r6, lr}
 801efe2:	0004      	movs	r4, r0
 801efe4:	0008      	movs	r0, r1
 801efe6:	0011      	movs	r1, r2
 801efe8:	001a      	movs	r2, r3
 801efea:	2300      	movs	r3, #0
 801efec:	4d05      	ldr	r5, [pc, #20]	@ (801f004 <_write_r+0x24>)
 801efee:	602b      	str	r3, [r5, #0]
 801eff0:	f7ee fa36 	bl	800d460 <_write>
 801eff4:	1c43      	adds	r3, r0, #1
 801eff6:	d103      	bne.n	801f000 <_write_r+0x20>
 801eff8:	682b      	ldr	r3, [r5, #0]
 801effa:	2b00      	cmp	r3, #0
 801effc:	d000      	beq.n	801f000 <_write_r+0x20>
 801effe:	6023      	str	r3, [r4, #0]
 801f000:	bd70      	pop	{r4, r5, r6, pc}
 801f002:	46c0      	nop			@ (mov r8, r8)
 801f004:	200038f0 	.word	0x200038f0

0801f008 <__errno>:
 801f008:	4b01      	ldr	r3, [pc, #4]	@ (801f010 <__errno+0x8>)
 801f00a:	6818      	ldr	r0, [r3, #0]
 801f00c:	4770      	bx	lr
 801f00e:	46c0      	nop			@ (mov r8, r8)
 801f010:	200003c8 	.word	0x200003c8

0801f014 <__libc_init_array>:
 801f014:	b570      	push	{r4, r5, r6, lr}
 801f016:	2600      	movs	r6, #0
 801f018:	4c0c      	ldr	r4, [pc, #48]	@ (801f04c <__libc_init_array+0x38>)
 801f01a:	4d0d      	ldr	r5, [pc, #52]	@ (801f050 <__libc_init_array+0x3c>)
 801f01c:	1b64      	subs	r4, r4, r5
 801f01e:	10a4      	asrs	r4, r4, #2
 801f020:	42a6      	cmp	r6, r4
 801f022:	d109      	bne.n	801f038 <__libc_init_array+0x24>
 801f024:	2600      	movs	r6, #0
 801f026:	f002 fee9 	bl	8021dfc <_init>
 801f02a:	4c0a      	ldr	r4, [pc, #40]	@ (801f054 <__libc_init_array+0x40>)
 801f02c:	4d0a      	ldr	r5, [pc, #40]	@ (801f058 <__libc_init_array+0x44>)
 801f02e:	1b64      	subs	r4, r4, r5
 801f030:	10a4      	asrs	r4, r4, #2
 801f032:	42a6      	cmp	r6, r4
 801f034:	d105      	bne.n	801f042 <__libc_init_array+0x2e>
 801f036:	bd70      	pop	{r4, r5, r6, pc}
 801f038:	00b3      	lsls	r3, r6, #2
 801f03a:	58eb      	ldr	r3, [r5, r3]
 801f03c:	4798      	blx	r3
 801f03e:	3601      	adds	r6, #1
 801f040:	e7ee      	b.n	801f020 <__libc_init_array+0xc>
 801f042:	00b3      	lsls	r3, r6, #2
 801f044:	58eb      	ldr	r3, [r5, r3]
 801f046:	4798      	blx	r3
 801f048:	3601      	adds	r6, #1
 801f04a:	e7f2      	b.n	801f032 <__libc_init_array+0x1e>
 801f04c:	08024550 	.word	0x08024550
 801f050:	08024550 	.word	0x08024550
 801f054:	08024554 	.word	0x08024554
 801f058:	08024550 	.word	0x08024550

0801f05c <__retarget_lock_init_recursive>:
 801f05c:	4770      	bx	lr

0801f05e <__retarget_lock_acquire_recursive>:
 801f05e:	4770      	bx	lr

0801f060 <__retarget_lock_release_recursive>:
 801f060:	4770      	bx	lr

0801f062 <memchr>:
 801f062:	b2c9      	uxtb	r1, r1
 801f064:	1882      	adds	r2, r0, r2
 801f066:	4290      	cmp	r0, r2
 801f068:	d101      	bne.n	801f06e <memchr+0xc>
 801f06a:	2000      	movs	r0, #0
 801f06c:	4770      	bx	lr
 801f06e:	7803      	ldrb	r3, [r0, #0]
 801f070:	428b      	cmp	r3, r1
 801f072:	d0fb      	beq.n	801f06c <memchr+0xa>
 801f074:	3001      	adds	r0, #1
 801f076:	e7f6      	b.n	801f066 <memchr+0x4>

0801f078 <memcpy>:
 801f078:	2300      	movs	r3, #0
 801f07a:	b510      	push	{r4, lr}
 801f07c:	429a      	cmp	r2, r3
 801f07e:	d100      	bne.n	801f082 <memcpy+0xa>
 801f080:	bd10      	pop	{r4, pc}
 801f082:	5ccc      	ldrb	r4, [r1, r3]
 801f084:	54c4      	strb	r4, [r0, r3]
 801f086:	3301      	adds	r3, #1
 801f088:	e7f8      	b.n	801f07c <memcpy+0x4>
	...

0801f08c <nan>:
 801f08c:	2000      	movs	r0, #0
 801f08e:	4901      	ldr	r1, [pc, #4]	@ (801f094 <nan+0x8>)
 801f090:	4770      	bx	lr
 801f092:	46c0      	nop			@ (mov r8, r8)
 801f094:	7ff80000 	.word	0x7ff80000

0801f098 <quorem>:
 801f098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f09a:	6902      	ldr	r2, [r0, #16]
 801f09c:	690f      	ldr	r7, [r1, #16]
 801f09e:	b087      	sub	sp, #28
 801f0a0:	0006      	movs	r6, r0
 801f0a2:	000b      	movs	r3, r1
 801f0a4:	2000      	movs	r0, #0
 801f0a6:	9102      	str	r1, [sp, #8]
 801f0a8:	42ba      	cmp	r2, r7
 801f0aa:	db6d      	blt.n	801f188 <quorem+0xf0>
 801f0ac:	3f01      	subs	r7, #1
 801f0ae:	00bc      	lsls	r4, r7, #2
 801f0b0:	3314      	adds	r3, #20
 801f0b2:	9305      	str	r3, [sp, #20]
 801f0b4:	191b      	adds	r3, r3, r4
 801f0b6:	9303      	str	r3, [sp, #12]
 801f0b8:	0033      	movs	r3, r6
 801f0ba:	3314      	adds	r3, #20
 801f0bc:	191c      	adds	r4, r3, r4
 801f0be:	9301      	str	r3, [sp, #4]
 801f0c0:	6823      	ldr	r3, [r4, #0]
 801f0c2:	9304      	str	r3, [sp, #16]
 801f0c4:	9b03      	ldr	r3, [sp, #12]
 801f0c6:	9804      	ldr	r0, [sp, #16]
 801f0c8:	681d      	ldr	r5, [r3, #0]
 801f0ca:	3501      	adds	r5, #1
 801f0cc:	0029      	movs	r1, r5
 801f0ce:	f7e1 f869 	bl	80001a4 <__udivsi3>
 801f0d2:	9b04      	ldr	r3, [sp, #16]
 801f0d4:	9000      	str	r0, [sp, #0]
 801f0d6:	42ab      	cmp	r3, r5
 801f0d8:	d32b      	bcc.n	801f132 <quorem+0x9a>
 801f0da:	9b05      	ldr	r3, [sp, #20]
 801f0dc:	9d01      	ldr	r5, [sp, #4]
 801f0de:	469c      	mov	ip, r3
 801f0e0:	2300      	movs	r3, #0
 801f0e2:	9305      	str	r3, [sp, #20]
 801f0e4:	9304      	str	r3, [sp, #16]
 801f0e6:	4662      	mov	r2, ip
 801f0e8:	ca08      	ldmia	r2!, {r3}
 801f0ea:	6828      	ldr	r0, [r5, #0]
 801f0ec:	4694      	mov	ip, r2
 801f0ee:	9a00      	ldr	r2, [sp, #0]
 801f0f0:	b299      	uxth	r1, r3
 801f0f2:	4351      	muls	r1, r2
 801f0f4:	9a05      	ldr	r2, [sp, #20]
 801f0f6:	0c1b      	lsrs	r3, r3, #16
 801f0f8:	1889      	adds	r1, r1, r2
 801f0fa:	9a00      	ldr	r2, [sp, #0]
 801f0fc:	4353      	muls	r3, r2
 801f0fe:	0c0a      	lsrs	r2, r1, #16
 801f100:	189b      	adds	r3, r3, r2
 801f102:	0c1a      	lsrs	r2, r3, #16
 801f104:	b289      	uxth	r1, r1
 801f106:	9205      	str	r2, [sp, #20]
 801f108:	b282      	uxth	r2, r0
 801f10a:	1a52      	subs	r2, r2, r1
 801f10c:	9904      	ldr	r1, [sp, #16]
 801f10e:	0c00      	lsrs	r0, r0, #16
 801f110:	1852      	adds	r2, r2, r1
 801f112:	b29b      	uxth	r3, r3
 801f114:	1411      	asrs	r1, r2, #16
 801f116:	1ac3      	subs	r3, r0, r3
 801f118:	185b      	adds	r3, r3, r1
 801f11a:	1419      	asrs	r1, r3, #16
 801f11c:	b292      	uxth	r2, r2
 801f11e:	041b      	lsls	r3, r3, #16
 801f120:	431a      	orrs	r2, r3
 801f122:	9b03      	ldr	r3, [sp, #12]
 801f124:	9104      	str	r1, [sp, #16]
 801f126:	c504      	stmia	r5!, {r2}
 801f128:	4563      	cmp	r3, ip
 801f12a:	d2dc      	bcs.n	801f0e6 <quorem+0x4e>
 801f12c:	6823      	ldr	r3, [r4, #0]
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d030      	beq.n	801f194 <quorem+0xfc>
 801f132:	0030      	movs	r0, r6
 801f134:	9902      	ldr	r1, [sp, #8]
 801f136:	f001 fd7d 	bl	8020c34 <__mcmp>
 801f13a:	2800      	cmp	r0, #0
 801f13c:	db23      	blt.n	801f186 <quorem+0xee>
 801f13e:	0034      	movs	r4, r6
 801f140:	2500      	movs	r5, #0
 801f142:	9902      	ldr	r1, [sp, #8]
 801f144:	3414      	adds	r4, #20
 801f146:	3114      	adds	r1, #20
 801f148:	6823      	ldr	r3, [r4, #0]
 801f14a:	c901      	ldmia	r1!, {r0}
 801f14c:	9302      	str	r3, [sp, #8]
 801f14e:	466b      	mov	r3, sp
 801f150:	891b      	ldrh	r3, [r3, #8]
 801f152:	b282      	uxth	r2, r0
 801f154:	1a9a      	subs	r2, r3, r2
 801f156:	9b02      	ldr	r3, [sp, #8]
 801f158:	1952      	adds	r2, r2, r5
 801f15a:	0c00      	lsrs	r0, r0, #16
 801f15c:	0c1b      	lsrs	r3, r3, #16
 801f15e:	1a1b      	subs	r3, r3, r0
 801f160:	1410      	asrs	r0, r2, #16
 801f162:	181b      	adds	r3, r3, r0
 801f164:	141d      	asrs	r5, r3, #16
 801f166:	b292      	uxth	r2, r2
 801f168:	041b      	lsls	r3, r3, #16
 801f16a:	431a      	orrs	r2, r3
 801f16c:	9b03      	ldr	r3, [sp, #12]
 801f16e:	c404      	stmia	r4!, {r2}
 801f170:	428b      	cmp	r3, r1
 801f172:	d2e9      	bcs.n	801f148 <quorem+0xb0>
 801f174:	9a01      	ldr	r2, [sp, #4]
 801f176:	00bb      	lsls	r3, r7, #2
 801f178:	18d3      	adds	r3, r2, r3
 801f17a:	681a      	ldr	r2, [r3, #0]
 801f17c:	2a00      	cmp	r2, #0
 801f17e:	d013      	beq.n	801f1a8 <quorem+0x110>
 801f180:	9b00      	ldr	r3, [sp, #0]
 801f182:	3301      	adds	r3, #1
 801f184:	9300      	str	r3, [sp, #0]
 801f186:	9800      	ldr	r0, [sp, #0]
 801f188:	b007      	add	sp, #28
 801f18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f18c:	6823      	ldr	r3, [r4, #0]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d104      	bne.n	801f19c <quorem+0x104>
 801f192:	3f01      	subs	r7, #1
 801f194:	9b01      	ldr	r3, [sp, #4]
 801f196:	3c04      	subs	r4, #4
 801f198:	42a3      	cmp	r3, r4
 801f19a:	d3f7      	bcc.n	801f18c <quorem+0xf4>
 801f19c:	6137      	str	r7, [r6, #16]
 801f19e:	e7c8      	b.n	801f132 <quorem+0x9a>
 801f1a0:	681a      	ldr	r2, [r3, #0]
 801f1a2:	2a00      	cmp	r2, #0
 801f1a4:	d104      	bne.n	801f1b0 <quorem+0x118>
 801f1a6:	3f01      	subs	r7, #1
 801f1a8:	9a01      	ldr	r2, [sp, #4]
 801f1aa:	3b04      	subs	r3, #4
 801f1ac:	429a      	cmp	r2, r3
 801f1ae:	d3f7      	bcc.n	801f1a0 <quorem+0x108>
 801f1b0:	6137      	str	r7, [r6, #16]
 801f1b2:	e7e5      	b.n	801f180 <quorem+0xe8>

0801f1b4 <_dtoa_r>:
 801f1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1b6:	0014      	movs	r4, r2
 801f1b8:	001d      	movs	r5, r3
 801f1ba:	69c6      	ldr	r6, [r0, #28]
 801f1bc:	b09d      	sub	sp, #116	@ 0x74
 801f1be:	940a      	str	r4, [sp, #40]	@ 0x28
 801f1c0:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f1c2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801f1c4:	9003      	str	r0, [sp, #12]
 801f1c6:	2e00      	cmp	r6, #0
 801f1c8:	d10f      	bne.n	801f1ea <_dtoa_r+0x36>
 801f1ca:	2010      	movs	r0, #16
 801f1cc:	f001 f98a 	bl	80204e4 <malloc>
 801f1d0:	9b03      	ldr	r3, [sp, #12]
 801f1d2:	1e02      	subs	r2, r0, #0
 801f1d4:	61d8      	str	r0, [r3, #28]
 801f1d6:	d104      	bne.n	801f1e2 <_dtoa_r+0x2e>
 801f1d8:	21ef      	movs	r1, #239	@ 0xef
 801f1da:	4bc7      	ldr	r3, [pc, #796]	@ (801f4f8 <_dtoa_r+0x344>)
 801f1dc:	48c7      	ldr	r0, [pc, #796]	@ (801f4fc <_dtoa_r+0x348>)
 801f1de:	f002 fb2f 	bl	8021840 <__assert_func>
 801f1e2:	6046      	str	r6, [r0, #4]
 801f1e4:	6086      	str	r6, [r0, #8]
 801f1e6:	6006      	str	r6, [r0, #0]
 801f1e8:	60c6      	str	r6, [r0, #12]
 801f1ea:	9b03      	ldr	r3, [sp, #12]
 801f1ec:	69db      	ldr	r3, [r3, #28]
 801f1ee:	6819      	ldr	r1, [r3, #0]
 801f1f0:	2900      	cmp	r1, #0
 801f1f2:	d00b      	beq.n	801f20c <_dtoa_r+0x58>
 801f1f4:	685a      	ldr	r2, [r3, #4]
 801f1f6:	2301      	movs	r3, #1
 801f1f8:	4093      	lsls	r3, r2
 801f1fa:	604a      	str	r2, [r1, #4]
 801f1fc:	608b      	str	r3, [r1, #8]
 801f1fe:	9803      	ldr	r0, [sp, #12]
 801f200:	f001 fa82 	bl	8020708 <_Bfree>
 801f204:	2200      	movs	r2, #0
 801f206:	9b03      	ldr	r3, [sp, #12]
 801f208:	69db      	ldr	r3, [r3, #28]
 801f20a:	601a      	str	r2, [r3, #0]
 801f20c:	2d00      	cmp	r5, #0
 801f20e:	da1e      	bge.n	801f24e <_dtoa_r+0x9a>
 801f210:	2301      	movs	r3, #1
 801f212:	603b      	str	r3, [r7, #0]
 801f214:	006b      	lsls	r3, r5, #1
 801f216:	085b      	lsrs	r3, r3, #1
 801f218:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f21a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f21c:	4bb8      	ldr	r3, [pc, #736]	@ (801f500 <_dtoa_r+0x34c>)
 801f21e:	4ab8      	ldr	r2, [pc, #736]	@ (801f500 <_dtoa_r+0x34c>)
 801f220:	403b      	ands	r3, r7
 801f222:	4293      	cmp	r3, r2
 801f224:	d116      	bne.n	801f254 <_dtoa_r+0xa0>
 801f226:	4bb7      	ldr	r3, [pc, #732]	@ (801f504 <_dtoa_r+0x350>)
 801f228:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f22a:	6013      	str	r3, [r2, #0]
 801f22c:	033b      	lsls	r3, r7, #12
 801f22e:	0b1b      	lsrs	r3, r3, #12
 801f230:	4323      	orrs	r3, r4
 801f232:	d101      	bne.n	801f238 <_dtoa_r+0x84>
 801f234:	f000 fd83 	bl	801fd3e <_dtoa_r+0xb8a>
 801f238:	4bb3      	ldr	r3, [pc, #716]	@ (801f508 <_dtoa_r+0x354>)
 801f23a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f23c:	9308      	str	r3, [sp, #32]
 801f23e:	2a00      	cmp	r2, #0
 801f240:	d002      	beq.n	801f248 <_dtoa_r+0x94>
 801f242:	4bb2      	ldr	r3, [pc, #712]	@ (801f50c <_dtoa_r+0x358>)
 801f244:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f246:	6013      	str	r3, [r2, #0]
 801f248:	9808      	ldr	r0, [sp, #32]
 801f24a:	b01d      	add	sp, #116	@ 0x74
 801f24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f24e:	2300      	movs	r3, #0
 801f250:	603b      	str	r3, [r7, #0]
 801f252:	e7e2      	b.n	801f21a <_dtoa_r+0x66>
 801f254:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f258:	9212      	str	r2, [sp, #72]	@ 0x48
 801f25a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f25c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f25e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f260:	2200      	movs	r2, #0
 801f262:	2300      	movs	r3, #0
 801f264:	f7e1 f924 	bl	80004b0 <__aeabi_dcmpeq>
 801f268:	1e06      	subs	r6, r0, #0
 801f26a:	d00b      	beq.n	801f284 <_dtoa_r+0xd0>
 801f26c:	2301      	movs	r3, #1
 801f26e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f270:	6013      	str	r3, [r2, #0]
 801f272:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f274:	2b00      	cmp	r3, #0
 801f276:	d002      	beq.n	801f27e <_dtoa_r+0xca>
 801f278:	4ba5      	ldr	r3, [pc, #660]	@ (801f510 <_dtoa_r+0x35c>)
 801f27a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f27c:	6013      	str	r3, [r2, #0]
 801f27e:	4ba5      	ldr	r3, [pc, #660]	@ (801f514 <_dtoa_r+0x360>)
 801f280:	9308      	str	r3, [sp, #32]
 801f282:	e7e1      	b.n	801f248 <_dtoa_r+0x94>
 801f284:	ab1a      	add	r3, sp, #104	@ 0x68
 801f286:	9301      	str	r3, [sp, #4]
 801f288:	ab1b      	add	r3, sp, #108	@ 0x6c
 801f28a:	9300      	str	r3, [sp, #0]
 801f28c:	9803      	ldr	r0, [sp, #12]
 801f28e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f290:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f292:	f001 fdf1 	bl	8020e78 <__d2b>
 801f296:	007a      	lsls	r2, r7, #1
 801f298:	9005      	str	r0, [sp, #20]
 801f29a:	0d52      	lsrs	r2, r2, #21
 801f29c:	d100      	bne.n	801f2a0 <_dtoa_r+0xec>
 801f29e:	e07b      	b.n	801f398 <_dtoa_r+0x1e4>
 801f2a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f2a2:	9618      	str	r6, [sp, #96]	@ 0x60
 801f2a4:	0319      	lsls	r1, r3, #12
 801f2a6:	4b9c      	ldr	r3, [pc, #624]	@ (801f518 <_dtoa_r+0x364>)
 801f2a8:	0b09      	lsrs	r1, r1, #12
 801f2aa:	430b      	orrs	r3, r1
 801f2ac:	499b      	ldr	r1, [pc, #620]	@ (801f51c <_dtoa_r+0x368>)
 801f2ae:	1857      	adds	r7, r2, r1
 801f2b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f2b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f2b4:	0019      	movs	r1, r3
 801f2b6:	2200      	movs	r2, #0
 801f2b8:	4b99      	ldr	r3, [pc, #612]	@ (801f520 <_dtoa_r+0x36c>)
 801f2ba:	f7e3 fc87 	bl	8002bcc <__aeabi_dsub>
 801f2be:	4a99      	ldr	r2, [pc, #612]	@ (801f524 <_dtoa_r+0x370>)
 801f2c0:	4b99      	ldr	r3, [pc, #612]	@ (801f528 <_dtoa_r+0x374>)
 801f2c2:	f7e3 f9bb 	bl	800263c <__aeabi_dmul>
 801f2c6:	4a99      	ldr	r2, [pc, #612]	@ (801f52c <_dtoa_r+0x378>)
 801f2c8:	4b99      	ldr	r3, [pc, #612]	@ (801f530 <_dtoa_r+0x37c>)
 801f2ca:	f7e2 fa0f 	bl	80016ec <__aeabi_dadd>
 801f2ce:	0004      	movs	r4, r0
 801f2d0:	0038      	movs	r0, r7
 801f2d2:	000d      	movs	r5, r1
 801f2d4:	f7e4 f874 	bl	80033c0 <__aeabi_i2d>
 801f2d8:	4a96      	ldr	r2, [pc, #600]	@ (801f534 <_dtoa_r+0x380>)
 801f2da:	4b97      	ldr	r3, [pc, #604]	@ (801f538 <_dtoa_r+0x384>)
 801f2dc:	f7e3 f9ae 	bl	800263c <__aeabi_dmul>
 801f2e0:	0002      	movs	r2, r0
 801f2e2:	000b      	movs	r3, r1
 801f2e4:	0020      	movs	r0, r4
 801f2e6:	0029      	movs	r1, r5
 801f2e8:	f7e2 fa00 	bl	80016ec <__aeabi_dadd>
 801f2ec:	0004      	movs	r4, r0
 801f2ee:	000d      	movs	r5, r1
 801f2f0:	f7e4 f82a 	bl	8003348 <__aeabi_d2iz>
 801f2f4:	2200      	movs	r2, #0
 801f2f6:	9004      	str	r0, [sp, #16]
 801f2f8:	2300      	movs	r3, #0
 801f2fa:	0020      	movs	r0, r4
 801f2fc:	0029      	movs	r1, r5
 801f2fe:	f7e1 f8dd 	bl	80004bc <__aeabi_dcmplt>
 801f302:	2800      	cmp	r0, #0
 801f304:	d00b      	beq.n	801f31e <_dtoa_r+0x16a>
 801f306:	9804      	ldr	r0, [sp, #16]
 801f308:	f7e4 f85a 	bl	80033c0 <__aeabi_i2d>
 801f30c:	002b      	movs	r3, r5
 801f30e:	0022      	movs	r2, r4
 801f310:	f7e1 f8ce 	bl	80004b0 <__aeabi_dcmpeq>
 801f314:	4243      	negs	r3, r0
 801f316:	4158      	adcs	r0, r3
 801f318:	9b04      	ldr	r3, [sp, #16]
 801f31a:	1a1b      	subs	r3, r3, r0
 801f31c:	9304      	str	r3, [sp, #16]
 801f31e:	2301      	movs	r3, #1
 801f320:	9315      	str	r3, [sp, #84]	@ 0x54
 801f322:	9b04      	ldr	r3, [sp, #16]
 801f324:	2b16      	cmp	r3, #22
 801f326:	d810      	bhi.n	801f34a <_dtoa_r+0x196>
 801f328:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f32a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f32c:	9a04      	ldr	r2, [sp, #16]
 801f32e:	4b83      	ldr	r3, [pc, #524]	@ (801f53c <_dtoa_r+0x388>)
 801f330:	00d2      	lsls	r2, r2, #3
 801f332:	189b      	adds	r3, r3, r2
 801f334:	681a      	ldr	r2, [r3, #0]
 801f336:	685b      	ldr	r3, [r3, #4]
 801f338:	f7e1 f8c0 	bl	80004bc <__aeabi_dcmplt>
 801f33c:	2800      	cmp	r0, #0
 801f33e:	d047      	beq.n	801f3d0 <_dtoa_r+0x21c>
 801f340:	9b04      	ldr	r3, [sp, #16]
 801f342:	3b01      	subs	r3, #1
 801f344:	9304      	str	r3, [sp, #16]
 801f346:	2300      	movs	r3, #0
 801f348:	9315      	str	r3, [sp, #84]	@ 0x54
 801f34a:	2200      	movs	r2, #0
 801f34c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f34e:	9206      	str	r2, [sp, #24]
 801f350:	1bdb      	subs	r3, r3, r7
 801f352:	1e5a      	subs	r2, r3, #1
 801f354:	d53e      	bpl.n	801f3d4 <_dtoa_r+0x220>
 801f356:	2201      	movs	r2, #1
 801f358:	1ad3      	subs	r3, r2, r3
 801f35a:	9306      	str	r3, [sp, #24]
 801f35c:	2300      	movs	r3, #0
 801f35e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f360:	9b04      	ldr	r3, [sp, #16]
 801f362:	2b00      	cmp	r3, #0
 801f364:	db38      	blt.n	801f3d8 <_dtoa_r+0x224>
 801f366:	9a04      	ldr	r2, [sp, #16]
 801f368:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f36a:	4694      	mov	ip, r2
 801f36c:	4463      	add	r3, ip
 801f36e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f370:	2300      	movs	r3, #0
 801f372:	9214      	str	r2, [sp, #80]	@ 0x50
 801f374:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f376:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f378:	2401      	movs	r4, #1
 801f37a:	2b09      	cmp	r3, #9
 801f37c:	d867      	bhi.n	801f44e <_dtoa_r+0x29a>
 801f37e:	2b05      	cmp	r3, #5
 801f380:	dd02      	ble.n	801f388 <_dtoa_r+0x1d4>
 801f382:	2400      	movs	r4, #0
 801f384:	3b04      	subs	r3, #4
 801f386:	9322      	str	r3, [sp, #136]	@ 0x88
 801f388:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f38a:	1e98      	subs	r0, r3, #2
 801f38c:	2803      	cmp	r0, #3
 801f38e:	d867      	bhi.n	801f460 <_dtoa_r+0x2ac>
 801f390:	f7e0 fef4 	bl	800017c <__gnu_thumb1_case_uqi>
 801f394:	5b383a2b 	.word	0x5b383a2b
 801f398:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f39a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f39c:	18f6      	adds	r6, r6, r3
 801f39e:	4b68      	ldr	r3, [pc, #416]	@ (801f540 <_dtoa_r+0x38c>)
 801f3a0:	18f2      	adds	r2, r6, r3
 801f3a2:	2a20      	cmp	r2, #32
 801f3a4:	dd0f      	ble.n	801f3c6 <_dtoa_r+0x212>
 801f3a6:	2340      	movs	r3, #64	@ 0x40
 801f3a8:	1a9b      	subs	r3, r3, r2
 801f3aa:	409f      	lsls	r7, r3
 801f3ac:	4b65      	ldr	r3, [pc, #404]	@ (801f544 <_dtoa_r+0x390>)
 801f3ae:	0038      	movs	r0, r7
 801f3b0:	18f3      	adds	r3, r6, r3
 801f3b2:	40dc      	lsrs	r4, r3
 801f3b4:	4320      	orrs	r0, r4
 801f3b6:	f7e4 f831 	bl	800341c <__aeabi_ui2d>
 801f3ba:	2201      	movs	r2, #1
 801f3bc:	4b62      	ldr	r3, [pc, #392]	@ (801f548 <_dtoa_r+0x394>)
 801f3be:	1e77      	subs	r7, r6, #1
 801f3c0:	18cb      	adds	r3, r1, r3
 801f3c2:	9218      	str	r2, [sp, #96]	@ 0x60
 801f3c4:	e776      	b.n	801f2b4 <_dtoa_r+0x100>
 801f3c6:	2320      	movs	r3, #32
 801f3c8:	0020      	movs	r0, r4
 801f3ca:	1a9b      	subs	r3, r3, r2
 801f3cc:	4098      	lsls	r0, r3
 801f3ce:	e7f2      	b.n	801f3b6 <_dtoa_r+0x202>
 801f3d0:	9015      	str	r0, [sp, #84]	@ 0x54
 801f3d2:	e7ba      	b.n	801f34a <_dtoa_r+0x196>
 801f3d4:	920d      	str	r2, [sp, #52]	@ 0x34
 801f3d6:	e7c3      	b.n	801f360 <_dtoa_r+0x1ac>
 801f3d8:	9b06      	ldr	r3, [sp, #24]
 801f3da:	9a04      	ldr	r2, [sp, #16]
 801f3dc:	1a9b      	subs	r3, r3, r2
 801f3de:	9306      	str	r3, [sp, #24]
 801f3e0:	4253      	negs	r3, r2
 801f3e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3e4:	2300      	movs	r3, #0
 801f3e6:	9314      	str	r3, [sp, #80]	@ 0x50
 801f3e8:	e7c5      	b.n	801f376 <_dtoa_r+0x1c2>
 801f3ea:	2300      	movs	r3, #0
 801f3ec:	9310      	str	r3, [sp, #64]	@ 0x40
 801f3ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f3f0:	930e      	str	r3, [sp, #56]	@ 0x38
 801f3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	dc13      	bgt.n	801f420 <_dtoa_r+0x26c>
 801f3f8:	2301      	movs	r3, #1
 801f3fa:	001a      	movs	r2, r3
 801f3fc:	930e      	str	r3, [sp, #56]	@ 0x38
 801f3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801f400:	9223      	str	r2, [sp, #140]	@ 0x8c
 801f402:	e00d      	b.n	801f420 <_dtoa_r+0x26c>
 801f404:	2301      	movs	r3, #1
 801f406:	e7f1      	b.n	801f3ec <_dtoa_r+0x238>
 801f408:	2300      	movs	r3, #0
 801f40a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f40c:	9310      	str	r3, [sp, #64]	@ 0x40
 801f40e:	4694      	mov	ip, r2
 801f410:	9b04      	ldr	r3, [sp, #16]
 801f412:	4463      	add	r3, ip
 801f414:	930e      	str	r3, [sp, #56]	@ 0x38
 801f416:	3301      	adds	r3, #1
 801f418:	9309      	str	r3, [sp, #36]	@ 0x24
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	dc00      	bgt.n	801f420 <_dtoa_r+0x26c>
 801f41e:	2301      	movs	r3, #1
 801f420:	9a03      	ldr	r2, [sp, #12]
 801f422:	2100      	movs	r1, #0
 801f424:	69d0      	ldr	r0, [r2, #28]
 801f426:	2204      	movs	r2, #4
 801f428:	0015      	movs	r5, r2
 801f42a:	3514      	adds	r5, #20
 801f42c:	429d      	cmp	r5, r3
 801f42e:	d91b      	bls.n	801f468 <_dtoa_r+0x2b4>
 801f430:	6041      	str	r1, [r0, #4]
 801f432:	9803      	ldr	r0, [sp, #12]
 801f434:	f001 f924 	bl	8020680 <_Balloc>
 801f438:	9008      	str	r0, [sp, #32]
 801f43a:	2800      	cmp	r0, #0
 801f43c:	d117      	bne.n	801f46e <_dtoa_r+0x2ba>
 801f43e:	21b0      	movs	r1, #176	@ 0xb0
 801f440:	4b42      	ldr	r3, [pc, #264]	@ (801f54c <_dtoa_r+0x398>)
 801f442:	482e      	ldr	r0, [pc, #184]	@ (801f4fc <_dtoa_r+0x348>)
 801f444:	9a08      	ldr	r2, [sp, #32]
 801f446:	31ff      	adds	r1, #255	@ 0xff
 801f448:	e6c9      	b.n	801f1de <_dtoa_r+0x2a>
 801f44a:	2301      	movs	r3, #1
 801f44c:	e7dd      	b.n	801f40a <_dtoa_r+0x256>
 801f44e:	2300      	movs	r3, #0
 801f450:	9410      	str	r4, [sp, #64]	@ 0x40
 801f452:	9322      	str	r3, [sp, #136]	@ 0x88
 801f454:	3b01      	subs	r3, #1
 801f456:	930e      	str	r3, [sp, #56]	@ 0x38
 801f458:	9309      	str	r3, [sp, #36]	@ 0x24
 801f45a:	2200      	movs	r2, #0
 801f45c:	3313      	adds	r3, #19
 801f45e:	e7cf      	b.n	801f400 <_dtoa_r+0x24c>
 801f460:	2301      	movs	r3, #1
 801f462:	9310      	str	r3, [sp, #64]	@ 0x40
 801f464:	3b02      	subs	r3, #2
 801f466:	e7f6      	b.n	801f456 <_dtoa_r+0x2a2>
 801f468:	3101      	adds	r1, #1
 801f46a:	0052      	lsls	r2, r2, #1
 801f46c:	e7dc      	b.n	801f428 <_dtoa_r+0x274>
 801f46e:	9b03      	ldr	r3, [sp, #12]
 801f470:	9a08      	ldr	r2, [sp, #32]
 801f472:	69db      	ldr	r3, [r3, #28]
 801f474:	601a      	str	r2, [r3, #0]
 801f476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f478:	2b0e      	cmp	r3, #14
 801f47a:	d900      	bls.n	801f47e <_dtoa_r+0x2ca>
 801f47c:	e0d9      	b.n	801f632 <_dtoa_r+0x47e>
 801f47e:	2c00      	cmp	r4, #0
 801f480:	d100      	bne.n	801f484 <_dtoa_r+0x2d0>
 801f482:	e0d6      	b.n	801f632 <_dtoa_r+0x47e>
 801f484:	9b04      	ldr	r3, [sp, #16]
 801f486:	2b00      	cmp	r3, #0
 801f488:	dd64      	ble.n	801f554 <_dtoa_r+0x3a0>
 801f48a:	210f      	movs	r1, #15
 801f48c:	9a04      	ldr	r2, [sp, #16]
 801f48e:	4b2b      	ldr	r3, [pc, #172]	@ (801f53c <_dtoa_r+0x388>)
 801f490:	400a      	ands	r2, r1
 801f492:	00d2      	lsls	r2, r2, #3
 801f494:	189b      	adds	r3, r3, r2
 801f496:	681e      	ldr	r6, [r3, #0]
 801f498:	685f      	ldr	r7, [r3, #4]
 801f49a:	9b04      	ldr	r3, [sp, #16]
 801f49c:	2402      	movs	r4, #2
 801f49e:	111d      	asrs	r5, r3, #4
 801f4a0:	05db      	lsls	r3, r3, #23
 801f4a2:	d50a      	bpl.n	801f4ba <_dtoa_r+0x306>
 801f4a4:	4b2a      	ldr	r3, [pc, #168]	@ (801f550 <_dtoa_r+0x39c>)
 801f4a6:	400d      	ands	r5, r1
 801f4a8:	6a1a      	ldr	r2, [r3, #32]
 801f4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f4ac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f4ae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f4b0:	f7e2 fc80 	bl	8001db4 <__aeabi_ddiv>
 801f4b4:	900a      	str	r0, [sp, #40]	@ 0x28
 801f4b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f4b8:	3401      	adds	r4, #1
 801f4ba:	4b25      	ldr	r3, [pc, #148]	@ (801f550 <_dtoa_r+0x39c>)
 801f4bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f4be:	2d00      	cmp	r5, #0
 801f4c0:	d108      	bne.n	801f4d4 <_dtoa_r+0x320>
 801f4c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f4c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f4c6:	0032      	movs	r2, r6
 801f4c8:	003b      	movs	r3, r7
 801f4ca:	f7e2 fc73 	bl	8001db4 <__aeabi_ddiv>
 801f4ce:	900a      	str	r0, [sp, #40]	@ 0x28
 801f4d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f4d2:	e05a      	b.n	801f58a <_dtoa_r+0x3d6>
 801f4d4:	2301      	movs	r3, #1
 801f4d6:	421d      	tst	r5, r3
 801f4d8:	d009      	beq.n	801f4ee <_dtoa_r+0x33a>
 801f4da:	18e4      	adds	r4, r4, r3
 801f4dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f4de:	0030      	movs	r0, r6
 801f4e0:	681a      	ldr	r2, [r3, #0]
 801f4e2:	685b      	ldr	r3, [r3, #4]
 801f4e4:	0039      	movs	r1, r7
 801f4e6:	f7e3 f8a9 	bl	800263c <__aeabi_dmul>
 801f4ea:	0006      	movs	r6, r0
 801f4ec:	000f      	movs	r7, r1
 801f4ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f4f0:	106d      	asrs	r5, r5, #1
 801f4f2:	3308      	adds	r3, #8
 801f4f4:	e7e2      	b.n	801f4bc <_dtoa_r+0x308>
 801f4f6:	46c0      	nop			@ (mov r8, r8)
 801f4f8:	080242aa 	.word	0x080242aa
 801f4fc:	080242c1 	.word	0x080242c1
 801f500:	7ff00000 	.word	0x7ff00000
 801f504:	0000270f 	.word	0x0000270f
 801f508:	080242a6 	.word	0x080242a6
 801f50c:	080242a9 	.word	0x080242a9
 801f510:	08024272 	.word	0x08024272
 801f514:	08024271 	.word	0x08024271
 801f518:	3ff00000 	.word	0x3ff00000
 801f51c:	fffffc01 	.word	0xfffffc01
 801f520:	3ff80000 	.word	0x3ff80000
 801f524:	636f4361 	.word	0x636f4361
 801f528:	3fd287a7 	.word	0x3fd287a7
 801f52c:	8b60c8b3 	.word	0x8b60c8b3
 801f530:	3fc68a28 	.word	0x3fc68a28
 801f534:	509f79fb 	.word	0x509f79fb
 801f538:	3fd34413 	.word	0x3fd34413
 801f53c:	08024418 	.word	0x08024418
 801f540:	00000432 	.word	0x00000432
 801f544:	00000412 	.word	0x00000412
 801f548:	fe100000 	.word	0xfe100000
 801f54c:	08024319 	.word	0x08024319
 801f550:	080243f0 	.word	0x080243f0
 801f554:	9b04      	ldr	r3, [sp, #16]
 801f556:	2402      	movs	r4, #2
 801f558:	2b00      	cmp	r3, #0
 801f55a:	d016      	beq.n	801f58a <_dtoa_r+0x3d6>
 801f55c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f55e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f560:	220f      	movs	r2, #15
 801f562:	425d      	negs	r5, r3
 801f564:	402a      	ands	r2, r5
 801f566:	4bd7      	ldr	r3, [pc, #860]	@ (801f8c4 <_dtoa_r+0x710>)
 801f568:	00d2      	lsls	r2, r2, #3
 801f56a:	189b      	adds	r3, r3, r2
 801f56c:	681a      	ldr	r2, [r3, #0]
 801f56e:	685b      	ldr	r3, [r3, #4]
 801f570:	f7e3 f864 	bl	800263c <__aeabi_dmul>
 801f574:	2701      	movs	r7, #1
 801f576:	2300      	movs	r3, #0
 801f578:	900a      	str	r0, [sp, #40]	@ 0x28
 801f57a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f57c:	4ed2      	ldr	r6, [pc, #840]	@ (801f8c8 <_dtoa_r+0x714>)
 801f57e:	112d      	asrs	r5, r5, #4
 801f580:	2d00      	cmp	r5, #0
 801f582:	d000      	beq.n	801f586 <_dtoa_r+0x3d2>
 801f584:	e0ba      	b.n	801f6fc <_dtoa_r+0x548>
 801f586:	2b00      	cmp	r3, #0
 801f588:	d1a1      	bne.n	801f4ce <_dtoa_r+0x31a>
 801f58a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801f58c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f58e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f590:	2b00      	cmp	r3, #0
 801f592:	d100      	bne.n	801f596 <_dtoa_r+0x3e2>
 801f594:	e0bd      	b.n	801f712 <_dtoa_r+0x55e>
 801f596:	2200      	movs	r2, #0
 801f598:	0030      	movs	r0, r6
 801f59a:	0039      	movs	r1, r7
 801f59c:	4bcb      	ldr	r3, [pc, #812]	@ (801f8cc <_dtoa_r+0x718>)
 801f59e:	f7e0 ff8d 	bl	80004bc <__aeabi_dcmplt>
 801f5a2:	2800      	cmp	r0, #0
 801f5a4:	d100      	bne.n	801f5a8 <_dtoa_r+0x3f4>
 801f5a6:	e0b4      	b.n	801f712 <_dtoa_r+0x55e>
 801f5a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d100      	bne.n	801f5b0 <_dtoa_r+0x3fc>
 801f5ae:	e0b0      	b.n	801f712 <_dtoa_r+0x55e>
 801f5b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	dd39      	ble.n	801f62a <_dtoa_r+0x476>
 801f5b6:	9b04      	ldr	r3, [sp, #16]
 801f5b8:	2200      	movs	r2, #0
 801f5ba:	3b01      	subs	r3, #1
 801f5bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f5be:	0030      	movs	r0, r6
 801f5c0:	4bc3      	ldr	r3, [pc, #780]	@ (801f8d0 <_dtoa_r+0x71c>)
 801f5c2:	0039      	movs	r1, r7
 801f5c4:	f7e3 f83a 	bl	800263c <__aeabi_dmul>
 801f5c8:	900a      	str	r0, [sp, #40]	@ 0x28
 801f5ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5ce:	3401      	adds	r4, #1
 801f5d0:	0020      	movs	r0, r4
 801f5d2:	9311      	str	r3, [sp, #68]	@ 0x44
 801f5d4:	f7e3 fef4 	bl	80033c0 <__aeabi_i2d>
 801f5d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f5da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f5dc:	f7e3 f82e 	bl	800263c <__aeabi_dmul>
 801f5e0:	4bbc      	ldr	r3, [pc, #752]	@ (801f8d4 <_dtoa_r+0x720>)
 801f5e2:	2200      	movs	r2, #0
 801f5e4:	f7e2 f882 	bl	80016ec <__aeabi_dadd>
 801f5e8:	4bbb      	ldr	r3, [pc, #748]	@ (801f8d8 <_dtoa_r+0x724>)
 801f5ea:	0006      	movs	r6, r0
 801f5ec:	18cf      	adds	r7, r1, r3
 801f5ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d000      	beq.n	801f5f6 <_dtoa_r+0x442>
 801f5f4:	e091      	b.n	801f71a <_dtoa_r+0x566>
 801f5f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f5f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f5fa:	2200      	movs	r2, #0
 801f5fc:	4bb7      	ldr	r3, [pc, #732]	@ (801f8dc <_dtoa_r+0x728>)
 801f5fe:	f7e3 fae5 	bl	8002bcc <__aeabi_dsub>
 801f602:	0032      	movs	r2, r6
 801f604:	003b      	movs	r3, r7
 801f606:	0004      	movs	r4, r0
 801f608:	000d      	movs	r5, r1
 801f60a:	f7e0 ff6b 	bl	80004e4 <__aeabi_dcmpgt>
 801f60e:	2800      	cmp	r0, #0
 801f610:	d000      	beq.n	801f614 <_dtoa_r+0x460>
 801f612:	e29d      	b.n	801fb50 <_dtoa_r+0x99c>
 801f614:	2180      	movs	r1, #128	@ 0x80
 801f616:	0609      	lsls	r1, r1, #24
 801f618:	187b      	adds	r3, r7, r1
 801f61a:	0032      	movs	r2, r6
 801f61c:	0020      	movs	r0, r4
 801f61e:	0029      	movs	r1, r5
 801f620:	f7e0 ff4c 	bl	80004bc <__aeabi_dcmplt>
 801f624:	2800      	cmp	r0, #0
 801f626:	d000      	beq.n	801f62a <_dtoa_r+0x476>
 801f628:	e130      	b.n	801f88c <_dtoa_r+0x6d8>
 801f62a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f62c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f62e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f630:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f632:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f634:	2b00      	cmp	r3, #0
 801f636:	da00      	bge.n	801f63a <_dtoa_r+0x486>
 801f638:	e177      	b.n	801f92a <_dtoa_r+0x776>
 801f63a:	9a04      	ldr	r2, [sp, #16]
 801f63c:	2a0e      	cmp	r2, #14
 801f63e:	dd00      	ble.n	801f642 <_dtoa_r+0x48e>
 801f640:	e173      	b.n	801f92a <_dtoa_r+0x776>
 801f642:	4ba0      	ldr	r3, [pc, #640]	@ (801f8c4 <_dtoa_r+0x710>)
 801f644:	00d2      	lsls	r2, r2, #3
 801f646:	189b      	adds	r3, r3, r2
 801f648:	685c      	ldr	r4, [r3, #4]
 801f64a:	681b      	ldr	r3, [r3, #0]
 801f64c:	9306      	str	r3, [sp, #24]
 801f64e:	9407      	str	r4, [sp, #28]
 801f650:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f652:	2b00      	cmp	r3, #0
 801f654:	da03      	bge.n	801f65e <_dtoa_r+0x4aa>
 801f656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f658:	2b00      	cmp	r3, #0
 801f65a:	dc00      	bgt.n	801f65e <_dtoa_r+0x4aa>
 801f65c:	e106      	b.n	801f86c <_dtoa_r+0x6b8>
 801f65e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801f660:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f664:	9d08      	ldr	r5, [sp, #32]
 801f666:	3b01      	subs	r3, #1
 801f668:	195b      	adds	r3, r3, r5
 801f66a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f66c:	9a06      	ldr	r2, [sp, #24]
 801f66e:	9b07      	ldr	r3, [sp, #28]
 801f670:	0030      	movs	r0, r6
 801f672:	0039      	movs	r1, r7
 801f674:	f7e2 fb9e 	bl	8001db4 <__aeabi_ddiv>
 801f678:	f7e3 fe66 	bl	8003348 <__aeabi_d2iz>
 801f67c:	9009      	str	r0, [sp, #36]	@ 0x24
 801f67e:	f7e3 fe9f 	bl	80033c0 <__aeabi_i2d>
 801f682:	9a06      	ldr	r2, [sp, #24]
 801f684:	9b07      	ldr	r3, [sp, #28]
 801f686:	f7e2 ffd9 	bl	800263c <__aeabi_dmul>
 801f68a:	0002      	movs	r2, r0
 801f68c:	000b      	movs	r3, r1
 801f68e:	0030      	movs	r0, r6
 801f690:	0039      	movs	r1, r7
 801f692:	f7e3 fa9b 	bl	8002bcc <__aeabi_dsub>
 801f696:	002b      	movs	r3, r5
 801f698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f69a:	3501      	adds	r5, #1
 801f69c:	3230      	adds	r2, #48	@ 0x30
 801f69e:	701a      	strb	r2, [r3, #0]
 801f6a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f6a2:	002c      	movs	r4, r5
 801f6a4:	429a      	cmp	r2, r3
 801f6a6:	d000      	beq.n	801f6aa <_dtoa_r+0x4f6>
 801f6a8:	e131      	b.n	801f90e <_dtoa_r+0x75a>
 801f6aa:	0002      	movs	r2, r0
 801f6ac:	000b      	movs	r3, r1
 801f6ae:	f7e2 f81d 	bl	80016ec <__aeabi_dadd>
 801f6b2:	9a06      	ldr	r2, [sp, #24]
 801f6b4:	9b07      	ldr	r3, [sp, #28]
 801f6b6:	0006      	movs	r6, r0
 801f6b8:	000f      	movs	r7, r1
 801f6ba:	f7e0 ff13 	bl	80004e4 <__aeabi_dcmpgt>
 801f6be:	2800      	cmp	r0, #0
 801f6c0:	d000      	beq.n	801f6c4 <_dtoa_r+0x510>
 801f6c2:	e10f      	b.n	801f8e4 <_dtoa_r+0x730>
 801f6c4:	9a06      	ldr	r2, [sp, #24]
 801f6c6:	9b07      	ldr	r3, [sp, #28]
 801f6c8:	0030      	movs	r0, r6
 801f6ca:	0039      	movs	r1, r7
 801f6cc:	f7e0 fef0 	bl	80004b0 <__aeabi_dcmpeq>
 801f6d0:	2800      	cmp	r0, #0
 801f6d2:	d003      	beq.n	801f6dc <_dtoa_r+0x528>
 801f6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f6d6:	07dd      	lsls	r5, r3, #31
 801f6d8:	d500      	bpl.n	801f6dc <_dtoa_r+0x528>
 801f6da:	e103      	b.n	801f8e4 <_dtoa_r+0x730>
 801f6dc:	9905      	ldr	r1, [sp, #20]
 801f6de:	9803      	ldr	r0, [sp, #12]
 801f6e0:	f001 f812 	bl	8020708 <_Bfree>
 801f6e4:	2300      	movs	r3, #0
 801f6e6:	7023      	strb	r3, [r4, #0]
 801f6e8:	9b04      	ldr	r3, [sp, #16]
 801f6ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f6ec:	3301      	adds	r3, #1
 801f6ee:	6013      	str	r3, [r2, #0]
 801f6f0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d100      	bne.n	801f6f8 <_dtoa_r+0x544>
 801f6f6:	e5a7      	b.n	801f248 <_dtoa_r+0x94>
 801f6f8:	601c      	str	r4, [r3, #0]
 801f6fa:	e5a5      	b.n	801f248 <_dtoa_r+0x94>
 801f6fc:	423d      	tst	r5, r7
 801f6fe:	d005      	beq.n	801f70c <_dtoa_r+0x558>
 801f700:	6832      	ldr	r2, [r6, #0]
 801f702:	6873      	ldr	r3, [r6, #4]
 801f704:	f7e2 ff9a 	bl	800263c <__aeabi_dmul>
 801f708:	003b      	movs	r3, r7
 801f70a:	3401      	adds	r4, #1
 801f70c:	106d      	asrs	r5, r5, #1
 801f70e:	3608      	adds	r6, #8
 801f710:	e736      	b.n	801f580 <_dtoa_r+0x3cc>
 801f712:	9b04      	ldr	r3, [sp, #16]
 801f714:	930c      	str	r3, [sp, #48]	@ 0x30
 801f716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f718:	e75a      	b.n	801f5d0 <_dtoa_r+0x41c>
 801f71a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f71c:	4b69      	ldr	r3, [pc, #420]	@ (801f8c4 <_dtoa_r+0x710>)
 801f71e:	3a01      	subs	r2, #1
 801f720:	00d2      	lsls	r2, r2, #3
 801f722:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f724:	189b      	adds	r3, r3, r2
 801f726:	681a      	ldr	r2, [r3, #0]
 801f728:	685b      	ldr	r3, [r3, #4]
 801f72a:	2900      	cmp	r1, #0
 801f72c:	d04c      	beq.n	801f7c8 <_dtoa_r+0x614>
 801f72e:	2000      	movs	r0, #0
 801f730:	496b      	ldr	r1, [pc, #428]	@ (801f8e0 <_dtoa_r+0x72c>)
 801f732:	f7e2 fb3f 	bl	8001db4 <__aeabi_ddiv>
 801f736:	0032      	movs	r2, r6
 801f738:	003b      	movs	r3, r7
 801f73a:	f7e3 fa47 	bl	8002bcc <__aeabi_dsub>
 801f73e:	9a08      	ldr	r2, [sp, #32]
 801f740:	0006      	movs	r6, r0
 801f742:	4694      	mov	ip, r2
 801f744:	000f      	movs	r7, r1
 801f746:	9b08      	ldr	r3, [sp, #32]
 801f748:	9316      	str	r3, [sp, #88]	@ 0x58
 801f74a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f74c:	4463      	add	r3, ip
 801f74e:	9311      	str	r3, [sp, #68]	@ 0x44
 801f750:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f752:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f754:	f7e3 fdf8 	bl	8003348 <__aeabi_d2iz>
 801f758:	0005      	movs	r5, r0
 801f75a:	f7e3 fe31 	bl	80033c0 <__aeabi_i2d>
 801f75e:	0002      	movs	r2, r0
 801f760:	000b      	movs	r3, r1
 801f762:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f764:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f766:	f7e3 fa31 	bl	8002bcc <__aeabi_dsub>
 801f76a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f76c:	3530      	adds	r5, #48	@ 0x30
 801f76e:	1c5c      	adds	r4, r3, #1
 801f770:	701d      	strb	r5, [r3, #0]
 801f772:	0032      	movs	r2, r6
 801f774:	003b      	movs	r3, r7
 801f776:	900a      	str	r0, [sp, #40]	@ 0x28
 801f778:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f77a:	f7e0 fe9f 	bl	80004bc <__aeabi_dcmplt>
 801f77e:	2800      	cmp	r0, #0
 801f780:	d16a      	bne.n	801f858 <_dtoa_r+0x6a4>
 801f782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f786:	2000      	movs	r0, #0
 801f788:	4950      	ldr	r1, [pc, #320]	@ (801f8cc <_dtoa_r+0x718>)
 801f78a:	f7e3 fa1f 	bl	8002bcc <__aeabi_dsub>
 801f78e:	0032      	movs	r2, r6
 801f790:	003b      	movs	r3, r7
 801f792:	f7e0 fe93 	bl	80004bc <__aeabi_dcmplt>
 801f796:	2800      	cmp	r0, #0
 801f798:	d000      	beq.n	801f79c <_dtoa_r+0x5e8>
 801f79a:	e0a5      	b.n	801f8e8 <_dtoa_r+0x734>
 801f79c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f79e:	42a3      	cmp	r3, r4
 801f7a0:	d100      	bne.n	801f7a4 <_dtoa_r+0x5f0>
 801f7a2:	e742      	b.n	801f62a <_dtoa_r+0x476>
 801f7a4:	2200      	movs	r2, #0
 801f7a6:	0030      	movs	r0, r6
 801f7a8:	0039      	movs	r1, r7
 801f7aa:	4b49      	ldr	r3, [pc, #292]	@ (801f8d0 <_dtoa_r+0x71c>)
 801f7ac:	f7e2 ff46 	bl	800263c <__aeabi_dmul>
 801f7b0:	2200      	movs	r2, #0
 801f7b2:	0006      	movs	r6, r0
 801f7b4:	000f      	movs	r7, r1
 801f7b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f7b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f7ba:	4b45      	ldr	r3, [pc, #276]	@ (801f8d0 <_dtoa_r+0x71c>)
 801f7bc:	f7e2 ff3e 	bl	800263c <__aeabi_dmul>
 801f7c0:	9416      	str	r4, [sp, #88]	@ 0x58
 801f7c2:	900a      	str	r0, [sp, #40]	@ 0x28
 801f7c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f7c6:	e7c3      	b.n	801f750 <_dtoa_r+0x59c>
 801f7c8:	0030      	movs	r0, r6
 801f7ca:	0039      	movs	r1, r7
 801f7cc:	f7e2 ff36 	bl	800263c <__aeabi_dmul>
 801f7d0:	9d08      	ldr	r5, [sp, #32]
 801f7d2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f7d4:	002b      	movs	r3, r5
 801f7d6:	4694      	mov	ip, r2
 801f7d8:	9016      	str	r0, [sp, #88]	@ 0x58
 801f7da:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f7dc:	4463      	add	r3, ip
 801f7de:	9319      	str	r3, [sp, #100]	@ 0x64
 801f7e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f7e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f7e4:	f7e3 fdb0 	bl	8003348 <__aeabi_d2iz>
 801f7e8:	0004      	movs	r4, r0
 801f7ea:	f7e3 fde9 	bl	80033c0 <__aeabi_i2d>
 801f7ee:	000b      	movs	r3, r1
 801f7f0:	0002      	movs	r2, r0
 801f7f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f7f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f7f6:	f7e3 f9e9 	bl	8002bcc <__aeabi_dsub>
 801f7fa:	3430      	adds	r4, #48	@ 0x30
 801f7fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f7fe:	702c      	strb	r4, [r5, #0]
 801f800:	3501      	adds	r5, #1
 801f802:	0006      	movs	r6, r0
 801f804:	000f      	movs	r7, r1
 801f806:	42ab      	cmp	r3, r5
 801f808:	d129      	bne.n	801f85e <_dtoa_r+0x6aa>
 801f80a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f80c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f80e:	9b08      	ldr	r3, [sp, #32]
 801f810:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f812:	469c      	mov	ip, r3
 801f814:	2200      	movs	r2, #0
 801f816:	4b32      	ldr	r3, [pc, #200]	@ (801f8e0 <_dtoa_r+0x72c>)
 801f818:	4464      	add	r4, ip
 801f81a:	f7e1 ff67 	bl	80016ec <__aeabi_dadd>
 801f81e:	0002      	movs	r2, r0
 801f820:	000b      	movs	r3, r1
 801f822:	0030      	movs	r0, r6
 801f824:	0039      	movs	r1, r7
 801f826:	f7e0 fe5d 	bl	80004e4 <__aeabi_dcmpgt>
 801f82a:	2800      	cmp	r0, #0
 801f82c:	d15c      	bne.n	801f8e8 <_dtoa_r+0x734>
 801f82e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f830:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f832:	2000      	movs	r0, #0
 801f834:	492a      	ldr	r1, [pc, #168]	@ (801f8e0 <_dtoa_r+0x72c>)
 801f836:	f7e3 f9c9 	bl	8002bcc <__aeabi_dsub>
 801f83a:	0002      	movs	r2, r0
 801f83c:	000b      	movs	r3, r1
 801f83e:	0030      	movs	r0, r6
 801f840:	0039      	movs	r1, r7
 801f842:	f7e0 fe3b 	bl	80004bc <__aeabi_dcmplt>
 801f846:	2800      	cmp	r0, #0
 801f848:	d100      	bne.n	801f84c <_dtoa_r+0x698>
 801f84a:	e6ee      	b.n	801f62a <_dtoa_r+0x476>
 801f84c:	0023      	movs	r3, r4
 801f84e:	3c01      	subs	r4, #1
 801f850:	7822      	ldrb	r2, [r4, #0]
 801f852:	2a30      	cmp	r2, #48	@ 0x30
 801f854:	d0fa      	beq.n	801f84c <_dtoa_r+0x698>
 801f856:	001c      	movs	r4, r3
 801f858:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f85a:	9304      	str	r3, [sp, #16]
 801f85c:	e73e      	b.n	801f6dc <_dtoa_r+0x528>
 801f85e:	2200      	movs	r2, #0
 801f860:	4b1b      	ldr	r3, [pc, #108]	@ (801f8d0 <_dtoa_r+0x71c>)
 801f862:	f7e2 feeb 	bl	800263c <__aeabi_dmul>
 801f866:	900a      	str	r0, [sp, #40]	@ 0x28
 801f868:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f86a:	e7b9      	b.n	801f7e0 <_dtoa_r+0x62c>
 801f86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d10c      	bne.n	801f88c <_dtoa_r+0x6d8>
 801f872:	9806      	ldr	r0, [sp, #24]
 801f874:	9907      	ldr	r1, [sp, #28]
 801f876:	2200      	movs	r2, #0
 801f878:	4b18      	ldr	r3, [pc, #96]	@ (801f8dc <_dtoa_r+0x728>)
 801f87a:	f7e2 fedf 	bl	800263c <__aeabi_dmul>
 801f87e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f882:	f7e0 fe39 	bl	80004f8 <__aeabi_dcmpge>
 801f886:	2800      	cmp	r0, #0
 801f888:	d100      	bne.n	801f88c <_dtoa_r+0x6d8>
 801f88a:	e164      	b.n	801fb56 <_dtoa_r+0x9a2>
 801f88c:	2600      	movs	r6, #0
 801f88e:	0037      	movs	r7, r6
 801f890:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f892:	9c08      	ldr	r4, [sp, #32]
 801f894:	43db      	mvns	r3, r3
 801f896:	930c      	str	r3, [sp, #48]	@ 0x30
 801f898:	2300      	movs	r3, #0
 801f89a:	9304      	str	r3, [sp, #16]
 801f89c:	0031      	movs	r1, r6
 801f89e:	9803      	ldr	r0, [sp, #12]
 801f8a0:	f000 ff32 	bl	8020708 <_Bfree>
 801f8a4:	2f00      	cmp	r7, #0
 801f8a6:	d0d7      	beq.n	801f858 <_dtoa_r+0x6a4>
 801f8a8:	9b04      	ldr	r3, [sp, #16]
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d005      	beq.n	801f8ba <_dtoa_r+0x706>
 801f8ae:	42bb      	cmp	r3, r7
 801f8b0:	d003      	beq.n	801f8ba <_dtoa_r+0x706>
 801f8b2:	0019      	movs	r1, r3
 801f8b4:	9803      	ldr	r0, [sp, #12]
 801f8b6:	f000 ff27 	bl	8020708 <_Bfree>
 801f8ba:	0039      	movs	r1, r7
 801f8bc:	9803      	ldr	r0, [sp, #12]
 801f8be:	f000 ff23 	bl	8020708 <_Bfree>
 801f8c2:	e7c9      	b.n	801f858 <_dtoa_r+0x6a4>
 801f8c4:	08024418 	.word	0x08024418
 801f8c8:	080243f0 	.word	0x080243f0
 801f8cc:	3ff00000 	.word	0x3ff00000
 801f8d0:	40240000 	.word	0x40240000
 801f8d4:	401c0000 	.word	0x401c0000
 801f8d8:	fcc00000 	.word	0xfcc00000
 801f8dc:	40140000 	.word	0x40140000
 801f8e0:	3fe00000 	.word	0x3fe00000
 801f8e4:	9b04      	ldr	r3, [sp, #16]
 801f8e6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8e8:	0023      	movs	r3, r4
 801f8ea:	001c      	movs	r4, r3
 801f8ec:	3b01      	subs	r3, #1
 801f8ee:	781a      	ldrb	r2, [r3, #0]
 801f8f0:	2a39      	cmp	r2, #57	@ 0x39
 801f8f2:	d108      	bne.n	801f906 <_dtoa_r+0x752>
 801f8f4:	9a08      	ldr	r2, [sp, #32]
 801f8f6:	429a      	cmp	r2, r3
 801f8f8:	d1f7      	bne.n	801f8ea <_dtoa_r+0x736>
 801f8fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f8fc:	9908      	ldr	r1, [sp, #32]
 801f8fe:	3201      	adds	r2, #1
 801f900:	920c      	str	r2, [sp, #48]	@ 0x30
 801f902:	2230      	movs	r2, #48	@ 0x30
 801f904:	700a      	strb	r2, [r1, #0]
 801f906:	781a      	ldrb	r2, [r3, #0]
 801f908:	3201      	adds	r2, #1
 801f90a:	701a      	strb	r2, [r3, #0]
 801f90c:	e7a4      	b.n	801f858 <_dtoa_r+0x6a4>
 801f90e:	2200      	movs	r2, #0
 801f910:	4bc6      	ldr	r3, [pc, #792]	@ (801fc2c <_dtoa_r+0xa78>)
 801f912:	f7e2 fe93 	bl	800263c <__aeabi_dmul>
 801f916:	2200      	movs	r2, #0
 801f918:	2300      	movs	r3, #0
 801f91a:	0006      	movs	r6, r0
 801f91c:	000f      	movs	r7, r1
 801f91e:	f7e0 fdc7 	bl	80004b0 <__aeabi_dcmpeq>
 801f922:	2800      	cmp	r0, #0
 801f924:	d100      	bne.n	801f928 <_dtoa_r+0x774>
 801f926:	e6a1      	b.n	801f66c <_dtoa_r+0x4b8>
 801f928:	e6d8      	b.n	801f6dc <_dtoa_r+0x528>
 801f92a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f92c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f92e:	9c06      	ldr	r4, [sp, #24]
 801f930:	2f00      	cmp	r7, #0
 801f932:	d014      	beq.n	801f95e <_dtoa_r+0x7aa>
 801f934:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f936:	2a01      	cmp	r2, #1
 801f938:	dd00      	ble.n	801f93c <_dtoa_r+0x788>
 801f93a:	e0c8      	b.n	801face <_dtoa_r+0x91a>
 801f93c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f93e:	2a00      	cmp	r2, #0
 801f940:	d100      	bne.n	801f944 <_dtoa_r+0x790>
 801f942:	e0be      	b.n	801fac2 <_dtoa_r+0x90e>
 801f944:	4aba      	ldr	r2, [pc, #744]	@ (801fc30 <_dtoa_r+0xa7c>)
 801f946:	189b      	adds	r3, r3, r2
 801f948:	9a06      	ldr	r2, [sp, #24]
 801f94a:	2101      	movs	r1, #1
 801f94c:	18d2      	adds	r2, r2, r3
 801f94e:	9206      	str	r2, [sp, #24]
 801f950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f952:	9803      	ldr	r0, [sp, #12]
 801f954:	18d3      	adds	r3, r2, r3
 801f956:	930d      	str	r3, [sp, #52]	@ 0x34
 801f958:	f000 ffda 	bl	8020910 <__i2b>
 801f95c:	0007      	movs	r7, r0
 801f95e:	2c00      	cmp	r4, #0
 801f960:	d00e      	beq.n	801f980 <_dtoa_r+0x7cc>
 801f962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f964:	2b00      	cmp	r3, #0
 801f966:	dd0b      	ble.n	801f980 <_dtoa_r+0x7cc>
 801f968:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f96a:	0023      	movs	r3, r4
 801f96c:	4294      	cmp	r4, r2
 801f96e:	dd00      	ble.n	801f972 <_dtoa_r+0x7be>
 801f970:	0013      	movs	r3, r2
 801f972:	9a06      	ldr	r2, [sp, #24]
 801f974:	1ae4      	subs	r4, r4, r3
 801f976:	1ad2      	subs	r2, r2, r3
 801f978:	9206      	str	r2, [sp, #24]
 801f97a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f97c:	1ad3      	subs	r3, r2, r3
 801f97e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f982:	2b00      	cmp	r3, #0
 801f984:	d01f      	beq.n	801f9c6 <_dtoa_r+0x812>
 801f986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d100      	bne.n	801f98e <_dtoa_r+0x7da>
 801f98c:	e0b5      	b.n	801fafa <_dtoa_r+0x946>
 801f98e:	2d00      	cmp	r5, #0
 801f990:	d010      	beq.n	801f9b4 <_dtoa_r+0x800>
 801f992:	0039      	movs	r1, r7
 801f994:	002a      	movs	r2, r5
 801f996:	9803      	ldr	r0, [sp, #12]
 801f998:	f001 f884 	bl	8020aa4 <__pow5mult>
 801f99c:	9a05      	ldr	r2, [sp, #20]
 801f99e:	0001      	movs	r1, r0
 801f9a0:	0007      	movs	r7, r0
 801f9a2:	9803      	ldr	r0, [sp, #12]
 801f9a4:	f000 ffcc 	bl	8020940 <__multiply>
 801f9a8:	0006      	movs	r6, r0
 801f9aa:	9905      	ldr	r1, [sp, #20]
 801f9ac:	9803      	ldr	r0, [sp, #12]
 801f9ae:	f000 feab 	bl	8020708 <_Bfree>
 801f9b2:	9605      	str	r6, [sp, #20]
 801f9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9b6:	1b5a      	subs	r2, r3, r5
 801f9b8:	42ab      	cmp	r3, r5
 801f9ba:	d004      	beq.n	801f9c6 <_dtoa_r+0x812>
 801f9bc:	9905      	ldr	r1, [sp, #20]
 801f9be:	9803      	ldr	r0, [sp, #12]
 801f9c0:	f001 f870 	bl	8020aa4 <__pow5mult>
 801f9c4:	9005      	str	r0, [sp, #20]
 801f9c6:	2101      	movs	r1, #1
 801f9c8:	9803      	ldr	r0, [sp, #12]
 801f9ca:	f000 ffa1 	bl	8020910 <__i2b>
 801f9ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f9d0:	0006      	movs	r6, r0
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	d100      	bne.n	801f9d8 <_dtoa_r+0x824>
 801f9d6:	e1bc      	b.n	801fd52 <_dtoa_r+0xb9e>
 801f9d8:	001a      	movs	r2, r3
 801f9da:	0001      	movs	r1, r0
 801f9dc:	9803      	ldr	r0, [sp, #12]
 801f9de:	f001 f861 	bl	8020aa4 <__pow5mult>
 801f9e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f9e4:	0006      	movs	r6, r0
 801f9e6:	2500      	movs	r5, #0
 801f9e8:	2b01      	cmp	r3, #1
 801f9ea:	dc16      	bgt.n	801fa1a <_dtoa_r+0x866>
 801f9ec:	2500      	movs	r5, #0
 801f9ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9f0:	42ab      	cmp	r3, r5
 801f9f2:	d10e      	bne.n	801fa12 <_dtoa_r+0x85e>
 801f9f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9f6:	031b      	lsls	r3, r3, #12
 801f9f8:	42ab      	cmp	r3, r5
 801f9fa:	d10a      	bne.n	801fa12 <_dtoa_r+0x85e>
 801f9fc:	4b8d      	ldr	r3, [pc, #564]	@ (801fc34 <_dtoa_r+0xa80>)
 801f9fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fa00:	4213      	tst	r3, r2
 801fa02:	d006      	beq.n	801fa12 <_dtoa_r+0x85e>
 801fa04:	9b06      	ldr	r3, [sp, #24]
 801fa06:	3501      	adds	r5, #1
 801fa08:	3301      	adds	r3, #1
 801fa0a:	9306      	str	r3, [sp, #24]
 801fa0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa0e:	3301      	adds	r3, #1
 801fa10:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fa14:	2001      	movs	r0, #1
 801fa16:	2b00      	cmp	r3, #0
 801fa18:	d008      	beq.n	801fa2c <_dtoa_r+0x878>
 801fa1a:	6933      	ldr	r3, [r6, #16]
 801fa1c:	3303      	adds	r3, #3
 801fa1e:	009b      	lsls	r3, r3, #2
 801fa20:	18f3      	adds	r3, r6, r3
 801fa22:	6858      	ldr	r0, [r3, #4]
 801fa24:	f000 ff24 	bl	8020870 <__hi0bits>
 801fa28:	2320      	movs	r3, #32
 801fa2a:	1a18      	subs	r0, r3, r0
 801fa2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa2e:	1818      	adds	r0, r3, r0
 801fa30:	0002      	movs	r2, r0
 801fa32:	231f      	movs	r3, #31
 801fa34:	401a      	ands	r2, r3
 801fa36:	4218      	tst	r0, r3
 801fa38:	d065      	beq.n	801fb06 <_dtoa_r+0x952>
 801fa3a:	3301      	adds	r3, #1
 801fa3c:	1a9b      	subs	r3, r3, r2
 801fa3e:	2b04      	cmp	r3, #4
 801fa40:	dd5d      	ble.n	801fafe <_dtoa_r+0x94a>
 801fa42:	231c      	movs	r3, #28
 801fa44:	1a9b      	subs	r3, r3, r2
 801fa46:	9a06      	ldr	r2, [sp, #24]
 801fa48:	18e4      	adds	r4, r4, r3
 801fa4a:	18d2      	adds	r2, r2, r3
 801fa4c:	9206      	str	r2, [sp, #24]
 801fa4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa50:	18d3      	adds	r3, r2, r3
 801fa52:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa54:	9b06      	ldr	r3, [sp, #24]
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	dd05      	ble.n	801fa66 <_dtoa_r+0x8b2>
 801fa5a:	001a      	movs	r2, r3
 801fa5c:	9905      	ldr	r1, [sp, #20]
 801fa5e:	9803      	ldr	r0, [sp, #12]
 801fa60:	f001 f87c 	bl	8020b5c <__lshift>
 801fa64:	9005      	str	r0, [sp, #20]
 801fa66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	dd05      	ble.n	801fa78 <_dtoa_r+0x8c4>
 801fa6c:	0031      	movs	r1, r6
 801fa6e:	001a      	movs	r2, r3
 801fa70:	9803      	ldr	r0, [sp, #12]
 801fa72:	f001 f873 	bl	8020b5c <__lshift>
 801fa76:	0006      	movs	r6, r0
 801fa78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d045      	beq.n	801fb0a <_dtoa_r+0x956>
 801fa7e:	0031      	movs	r1, r6
 801fa80:	9805      	ldr	r0, [sp, #20]
 801fa82:	f001 f8d7 	bl	8020c34 <__mcmp>
 801fa86:	2800      	cmp	r0, #0
 801fa88:	da3f      	bge.n	801fb0a <_dtoa_r+0x956>
 801fa8a:	9b04      	ldr	r3, [sp, #16]
 801fa8c:	220a      	movs	r2, #10
 801fa8e:	3b01      	subs	r3, #1
 801fa90:	930c      	str	r3, [sp, #48]	@ 0x30
 801fa92:	9905      	ldr	r1, [sp, #20]
 801fa94:	2300      	movs	r3, #0
 801fa96:	9803      	ldr	r0, [sp, #12]
 801fa98:	f000 fe5a 	bl	8020750 <__multadd>
 801fa9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa9e:	9005      	str	r0, [sp, #20]
 801faa0:	2b00      	cmp	r3, #0
 801faa2:	d100      	bne.n	801faa6 <_dtoa_r+0x8f2>
 801faa4:	e15c      	b.n	801fd60 <_dtoa_r+0xbac>
 801faa6:	2300      	movs	r3, #0
 801faa8:	0039      	movs	r1, r7
 801faaa:	220a      	movs	r2, #10
 801faac:	9803      	ldr	r0, [sp, #12]
 801faae:	f000 fe4f 	bl	8020750 <__multadd>
 801fab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fab4:	0007      	movs	r7, r0
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	dc55      	bgt.n	801fb66 <_dtoa_r+0x9b2>
 801faba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fabc:	2b02      	cmp	r3, #2
 801fabe:	dc2d      	bgt.n	801fb1c <_dtoa_r+0x968>
 801fac0:	e051      	b.n	801fb66 <_dtoa_r+0x9b2>
 801fac2:	2336      	movs	r3, #54	@ 0x36
 801fac4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fac6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801fac8:	9c06      	ldr	r4, [sp, #24]
 801faca:	1a9b      	subs	r3, r3, r2
 801facc:	e73c      	b.n	801f948 <_dtoa_r+0x794>
 801face:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fad0:	1e5d      	subs	r5, r3, #1
 801fad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fad4:	42ab      	cmp	r3, r5
 801fad6:	db08      	blt.n	801faea <_dtoa_r+0x936>
 801fad8:	1b5d      	subs	r5, r3, r5
 801fada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fadc:	9c06      	ldr	r4, [sp, #24]
 801fade:	2b00      	cmp	r3, #0
 801fae0:	db00      	blt.n	801fae4 <_dtoa_r+0x930>
 801fae2:	e731      	b.n	801f948 <_dtoa_r+0x794>
 801fae4:	1ae4      	subs	r4, r4, r3
 801fae6:	2300      	movs	r3, #0
 801fae8:	e72e      	b.n	801f948 <_dtoa_r+0x794>
 801faea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801faec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801faee:	1aeb      	subs	r3, r5, r3
 801faf0:	18d3      	adds	r3, r2, r3
 801faf2:	950f      	str	r5, [sp, #60]	@ 0x3c
 801faf4:	9314      	str	r3, [sp, #80]	@ 0x50
 801faf6:	2500      	movs	r5, #0
 801faf8:	e7ef      	b.n	801fada <_dtoa_r+0x926>
 801fafa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fafc:	e75e      	b.n	801f9bc <_dtoa_r+0x808>
 801fafe:	2b04      	cmp	r3, #4
 801fb00:	d0a8      	beq.n	801fa54 <_dtoa_r+0x8a0>
 801fb02:	331c      	adds	r3, #28
 801fb04:	e79f      	b.n	801fa46 <_dtoa_r+0x892>
 801fb06:	0013      	movs	r3, r2
 801fb08:	e7fb      	b.n	801fb02 <_dtoa_r+0x94e>
 801fb0a:	9b04      	ldr	r3, [sp, #16]
 801fb0c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb10:	930e      	str	r3, [sp, #56]	@ 0x38
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	dc23      	bgt.n	801fb5e <_dtoa_r+0x9aa>
 801fb16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fb18:	2b02      	cmp	r3, #2
 801fb1a:	dd20      	ble.n	801fb5e <_dtoa_r+0x9aa>
 801fb1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d000      	beq.n	801fb24 <_dtoa_r+0x970>
 801fb22:	e6b5      	b.n	801f890 <_dtoa_r+0x6dc>
 801fb24:	0031      	movs	r1, r6
 801fb26:	2205      	movs	r2, #5
 801fb28:	9803      	ldr	r0, [sp, #12]
 801fb2a:	f000 fe11 	bl	8020750 <__multadd>
 801fb2e:	0006      	movs	r6, r0
 801fb30:	0001      	movs	r1, r0
 801fb32:	9805      	ldr	r0, [sp, #20]
 801fb34:	f001 f87e 	bl	8020c34 <__mcmp>
 801fb38:	2800      	cmp	r0, #0
 801fb3a:	dc00      	bgt.n	801fb3e <_dtoa_r+0x98a>
 801fb3c:	e6a8      	b.n	801f890 <_dtoa_r+0x6dc>
 801fb3e:	9b08      	ldr	r3, [sp, #32]
 801fb40:	9a08      	ldr	r2, [sp, #32]
 801fb42:	1c5c      	adds	r4, r3, #1
 801fb44:	2331      	movs	r3, #49	@ 0x31
 801fb46:	7013      	strb	r3, [r2, #0]
 801fb48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb4a:	3301      	adds	r3, #1
 801fb4c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb4e:	e6a3      	b.n	801f898 <_dtoa_r+0x6e4>
 801fb50:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801fb52:	0037      	movs	r7, r6
 801fb54:	e7f3      	b.n	801fb3e <_dtoa_r+0x98a>
 801fb56:	9b04      	ldr	r3, [sp, #16]
 801fb58:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801fb5a:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb5c:	e7f9      	b.n	801fb52 <_dtoa_r+0x99e>
 801fb5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fb60:	2b00      	cmp	r3, #0
 801fb62:	d100      	bne.n	801fb66 <_dtoa_r+0x9b2>
 801fb64:	e100      	b.n	801fd68 <_dtoa_r+0xbb4>
 801fb66:	2c00      	cmp	r4, #0
 801fb68:	dd05      	ble.n	801fb76 <_dtoa_r+0x9c2>
 801fb6a:	0039      	movs	r1, r7
 801fb6c:	0022      	movs	r2, r4
 801fb6e:	9803      	ldr	r0, [sp, #12]
 801fb70:	f000 fff4 	bl	8020b5c <__lshift>
 801fb74:	0007      	movs	r7, r0
 801fb76:	0038      	movs	r0, r7
 801fb78:	2d00      	cmp	r5, #0
 801fb7a:	d018      	beq.n	801fbae <_dtoa_r+0x9fa>
 801fb7c:	6879      	ldr	r1, [r7, #4]
 801fb7e:	9803      	ldr	r0, [sp, #12]
 801fb80:	f000 fd7e 	bl	8020680 <_Balloc>
 801fb84:	1e04      	subs	r4, r0, #0
 801fb86:	d105      	bne.n	801fb94 <_dtoa_r+0x9e0>
 801fb88:	0022      	movs	r2, r4
 801fb8a:	4b2b      	ldr	r3, [pc, #172]	@ (801fc38 <_dtoa_r+0xa84>)
 801fb8c:	482b      	ldr	r0, [pc, #172]	@ (801fc3c <_dtoa_r+0xa88>)
 801fb8e:	492c      	ldr	r1, [pc, #176]	@ (801fc40 <_dtoa_r+0xa8c>)
 801fb90:	f7ff fb25 	bl	801f1de <_dtoa_r+0x2a>
 801fb94:	0039      	movs	r1, r7
 801fb96:	693a      	ldr	r2, [r7, #16]
 801fb98:	310c      	adds	r1, #12
 801fb9a:	3202      	adds	r2, #2
 801fb9c:	0092      	lsls	r2, r2, #2
 801fb9e:	300c      	adds	r0, #12
 801fba0:	f7ff fa6a 	bl	801f078 <memcpy>
 801fba4:	2201      	movs	r2, #1
 801fba6:	0021      	movs	r1, r4
 801fba8:	9803      	ldr	r0, [sp, #12]
 801fbaa:	f000 ffd7 	bl	8020b5c <__lshift>
 801fbae:	9b08      	ldr	r3, [sp, #32]
 801fbb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fbb2:	9306      	str	r3, [sp, #24]
 801fbb4:	3b01      	subs	r3, #1
 801fbb6:	189b      	adds	r3, r3, r2
 801fbb8:	2201      	movs	r2, #1
 801fbba:	9704      	str	r7, [sp, #16]
 801fbbc:	0007      	movs	r7, r0
 801fbbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fbc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fbc2:	4013      	ands	r3, r2
 801fbc4:	930e      	str	r3, [sp, #56]	@ 0x38
 801fbc6:	0031      	movs	r1, r6
 801fbc8:	9805      	ldr	r0, [sp, #20]
 801fbca:	f7ff fa65 	bl	801f098 <quorem>
 801fbce:	9904      	ldr	r1, [sp, #16]
 801fbd0:	0005      	movs	r5, r0
 801fbd2:	900a      	str	r0, [sp, #40]	@ 0x28
 801fbd4:	9805      	ldr	r0, [sp, #20]
 801fbd6:	f001 f82d 	bl	8020c34 <__mcmp>
 801fbda:	003a      	movs	r2, r7
 801fbdc:	900d      	str	r0, [sp, #52]	@ 0x34
 801fbde:	0031      	movs	r1, r6
 801fbe0:	9803      	ldr	r0, [sp, #12]
 801fbe2:	f001 f843 	bl	8020c6c <__mdiff>
 801fbe6:	2201      	movs	r2, #1
 801fbe8:	68c3      	ldr	r3, [r0, #12]
 801fbea:	0004      	movs	r4, r0
 801fbec:	3530      	adds	r5, #48	@ 0x30
 801fbee:	9209      	str	r2, [sp, #36]	@ 0x24
 801fbf0:	2b00      	cmp	r3, #0
 801fbf2:	d104      	bne.n	801fbfe <_dtoa_r+0xa4a>
 801fbf4:	0001      	movs	r1, r0
 801fbf6:	9805      	ldr	r0, [sp, #20]
 801fbf8:	f001 f81c 	bl	8020c34 <__mcmp>
 801fbfc:	9009      	str	r0, [sp, #36]	@ 0x24
 801fbfe:	0021      	movs	r1, r4
 801fc00:	9803      	ldr	r0, [sp, #12]
 801fc02:	f000 fd81 	bl	8020708 <_Bfree>
 801fc06:	9b06      	ldr	r3, [sp, #24]
 801fc08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc0a:	1c5c      	adds	r4, r3, #1
 801fc0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fc0e:	4313      	orrs	r3, r2
 801fc10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc12:	4313      	orrs	r3, r2
 801fc14:	d116      	bne.n	801fc44 <_dtoa_r+0xa90>
 801fc16:	2d39      	cmp	r5, #57	@ 0x39
 801fc18:	d02f      	beq.n	801fc7a <_dtoa_r+0xac6>
 801fc1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	dd01      	ble.n	801fc24 <_dtoa_r+0xa70>
 801fc20:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fc22:	3531      	adds	r5, #49	@ 0x31
 801fc24:	9b06      	ldr	r3, [sp, #24]
 801fc26:	701d      	strb	r5, [r3, #0]
 801fc28:	e638      	b.n	801f89c <_dtoa_r+0x6e8>
 801fc2a:	46c0      	nop			@ (mov r8, r8)
 801fc2c:	40240000 	.word	0x40240000
 801fc30:	00000433 	.word	0x00000433
 801fc34:	7ff00000 	.word	0x7ff00000
 801fc38:	08024319 	.word	0x08024319
 801fc3c:	080242c1 	.word	0x080242c1
 801fc40:	000002ef 	.word	0x000002ef
 801fc44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	db04      	blt.n	801fc54 <_dtoa_r+0xaa0>
 801fc4a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801fc4c:	4313      	orrs	r3, r2
 801fc4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc50:	4313      	orrs	r3, r2
 801fc52:	d11e      	bne.n	801fc92 <_dtoa_r+0xade>
 801fc54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	dde4      	ble.n	801fc24 <_dtoa_r+0xa70>
 801fc5a:	9905      	ldr	r1, [sp, #20]
 801fc5c:	2201      	movs	r2, #1
 801fc5e:	9803      	ldr	r0, [sp, #12]
 801fc60:	f000 ff7c 	bl	8020b5c <__lshift>
 801fc64:	0031      	movs	r1, r6
 801fc66:	9005      	str	r0, [sp, #20]
 801fc68:	f000 ffe4 	bl	8020c34 <__mcmp>
 801fc6c:	2800      	cmp	r0, #0
 801fc6e:	dc02      	bgt.n	801fc76 <_dtoa_r+0xac2>
 801fc70:	d1d8      	bne.n	801fc24 <_dtoa_r+0xa70>
 801fc72:	07eb      	lsls	r3, r5, #31
 801fc74:	d5d6      	bpl.n	801fc24 <_dtoa_r+0xa70>
 801fc76:	2d39      	cmp	r5, #57	@ 0x39
 801fc78:	d1d2      	bne.n	801fc20 <_dtoa_r+0xa6c>
 801fc7a:	2339      	movs	r3, #57	@ 0x39
 801fc7c:	9a06      	ldr	r2, [sp, #24]
 801fc7e:	7013      	strb	r3, [r2, #0]
 801fc80:	0023      	movs	r3, r4
 801fc82:	001c      	movs	r4, r3
 801fc84:	3b01      	subs	r3, #1
 801fc86:	781a      	ldrb	r2, [r3, #0]
 801fc88:	2a39      	cmp	r2, #57	@ 0x39
 801fc8a:	d04f      	beq.n	801fd2c <_dtoa_r+0xb78>
 801fc8c:	3201      	adds	r2, #1
 801fc8e:	701a      	strb	r2, [r3, #0]
 801fc90:	e604      	b.n	801f89c <_dtoa_r+0x6e8>
 801fc92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	dd03      	ble.n	801fca0 <_dtoa_r+0xaec>
 801fc98:	2d39      	cmp	r5, #57	@ 0x39
 801fc9a:	d0ee      	beq.n	801fc7a <_dtoa_r+0xac6>
 801fc9c:	3501      	adds	r5, #1
 801fc9e:	e7c1      	b.n	801fc24 <_dtoa_r+0xa70>
 801fca0:	9b06      	ldr	r3, [sp, #24]
 801fca2:	9a06      	ldr	r2, [sp, #24]
 801fca4:	701d      	strb	r5, [r3, #0]
 801fca6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fca8:	4293      	cmp	r3, r2
 801fcaa:	d02a      	beq.n	801fd02 <_dtoa_r+0xb4e>
 801fcac:	2300      	movs	r3, #0
 801fcae:	220a      	movs	r2, #10
 801fcb0:	9905      	ldr	r1, [sp, #20]
 801fcb2:	9803      	ldr	r0, [sp, #12]
 801fcb4:	f000 fd4c 	bl	8020750 <__multadd>
 801fcb8:	9b04      	ldr	r3, [sp, #16]
 801fcba:	9005      	str	r0, [sp, #20]
 801fcbc:	42bb      	cmp	r3, r7
 801fcbe:	d109      	bne.n	801fcd4 <_dtoa_r+0xb20>
 801fcc0:	2300      	movs	r3, #0
 801fcc2:	220a      	movs	r2, #10
 801fcc4:	9904      	ldr	r1, [sp, #16]
 801fcc6:	9803      	ldr	r0, [sp, #12]
 801fcc8:	f000 fd42 	bl	8020750 <__multadd>
 801fccc:	9004      	str	r0, [sp, #16]
 801fcce:	0007      	movs	r7, r0
 801fcd0:	9406      	str	r4, [sp, #24]
 801fcd2:	e778      	b.n	801fbc6 <_dtoa_r+0xa12>
 801fcd4:	9904      	ldr	r1, [sp, #16]
 801fcd6:	2300      	movs	r3, #0
 801fcd8:	220a      	movs	r2, #10
 801fcda:	9803      	ldr	r0, [sp, #12]
 801fcdc:	f000 fd38 	bl	8020750 <__multadd>
 801fce0:	2300      	movs	r3, #0
 801fce2:	9004      	str	r0, [sp, #16]
 801fce4:	220a      	movs	r2, #10
 801fce6:	0039      	movs	r1, r7
 801fce8:	9803      	ldr	r0, [sp, #12]
 801fcea:	f000 fd31 	bl	8020750 <__multadd>
 801fcee:	e7ee      	b.n	801fcce <_dtoa_r+0xb1a>
 801fcf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fcf2:	2401      	movs	r4, #1
 801fcf4:	2b00      	cmp	r3, #0
 801fcf6:	dd00      	ble.n	801fcfa <_dtoa_r+0xb46>
 801fcf8:	001c      	movs	r4, r3
 801fcfa:	9b08      	ldr	r3, [sp, #32]
 801fcfc:	191c      	adds	r4, r3, r4
 801fcfe:	2300      	movs	r3, #0
 801fd00:	9304      	str	r3, [sp, #16]
 801fd02:	9905      	ldr	r1, [sp, #20]
 801fd04:	2201      	movs	r2, #1
 801fd06:	9803      	ldr	r0, [sp, #12]
 801fd08:	f000 ff28 	bl	8020b5c <__lshift>
 801fd0c:	0031      	movs	r1, r6
 801fd0e:	9005      	str	r0, [sp, #20]
 801fd10:	f000 ff90 	bl	8020c34 <__mcmp>
 801fd14:	2800      	cmp	r0, #0
 801fd16:	dcb3      	bgt.n	801fc80 <_dtoa_r+0xacc>
 801fd18:	d101      	bne.n	801fd1e <_dtoa_r+0xb6a>
 801fd1a:	07ed      	lsls	r5, r5, #31
 801fd1c:	d4b0      	bmi.n	801fc80 <_dtoa_r+0xacc>
 801fd1e:	0023      	movs	r3, r4
 801fd20:	001c      	movs	r4, r3
 801fd22:	3b01      	subs	r3, #1
 801fd24:	781a      	ldrb	r2, [r3, #0]
 801fd26:	2a30      	cmp	r2, #48	@ 0x30
 801fd28:	d0fa      	beq.n	801fd20 <_dtoa_r+0xb6c>
 801fd2a:	e5b7      	b.n	801f89c <_dtoa_r+0x6e8>
 801fd2c:	9a08      	ldr	r2, [sp, #32]
 801fd2e:	429a      	cmp	r2, r3
 801fd30:	d1a7      	bne.n	801fc82 <_dtoa_r+0xace>
 801fd32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fd34:	3301      	adds	r3, #1
 801fd36:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd38:	2331      	movs	r3, #49	@ 0x31
 801fd3a:	7013      	strb	r3, [r2, #0]
 801fd3c:	e5ae      	b.n	801f89c <_dtoa_r+0x6e8>
 801fd3e:	4b15      	ldr	r3, [pc, #84]	@ (801fd94 <_dtoa_r+0xbe0>)
 801fd40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fd42:	9308      	str	r3, [sp, #32]
 801fd44:	4b14      	ldr	r3, [pc, #80]	@ (801fd98 <_dtoa_r+0xbe4>)
 801fd46:	2a00      	cmp	r2, #0
 801fd48:	d001      	beq.n	801fd4e <_dtoa_r+0xb9a>
 801fd4a:	f7ff fa7b 	bl	801f244 <_dtoa_r+0x90>
 801fd4e:	f7ff fa7b 	bl	801f248 <_dtoa_r+0x94>
 801fd52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fd54:	2b01      	cmp	r3, #1
 801fd56:	dc00      	bgt.n	801fd5a <_dtoa_r+0xba6>
 801fd58:	e648      	b.n	801f9ec <_dtoa_r+0x838>
 801fd5a:	2001      	movs	r0, #1
 801fd5c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fd5e:	e665      	b.n	801fa2c <_dtoa_r+0x878>
 801fd60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	dc00      	bgt.n	801fd68 <_dtoa_r+0xbb4>
 801fd66:	e6d6      	b.n	801fb16 <_dtoa_r+0x962>
 801fd68:	2400      	movs	r4, #0
 801fd6a:	0031      	movs	r1, r6
 801fd6c:	9805      	ldr	r0, [sp, #20]
 801fd6e:	f7ff f993 	bl	801f098 <quorem>
 801fd72:	9b08      	ldr	r3, [sp, #32]
 801fd74:	3030      	adds	r0, #48	@ 0x30
 801fd76:	5518      	strb	r0, [r3, r4]
 801fd78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fd7a:	3401      	adds	r4, #1
 801fd7c:	0005      	movs	r5, r0
 801fd7e:	429c      	cmp	r4, r3
 801fd80:	dab6      	bge.n	801fcf0 <_dtoa_r+0xb3c>
 801fd82:	2300      	movs	r3, #0
 801fd84:	220a      	movs	r2, #10
 801fd86:	9905      	ldr	r1, [sp, #20]
 801fd88:	9803      	ldr	r0, [sp, #12]
 801fd8a:	f000 fce1 	bl	8020750 <__multadd>
 801fd8e:	9005      	str	r0, [sp, #20]
 801fd90:	e7eb      	b.n	801fd6a <_dtoa_r+0xbb6>
 801fd92:	46c0      	nop			@ (mov r8, r8)
 801fd94:	0802429d 	.word	0x0802429d
 801fd98:	080242a5 	.word	0x080242a5

0801fd9c <_free_r>:
 801fd9c:	b570      	push	{r4, r5, r6, lr}
 801fd9e:	0005      	movs	r5, r0
 801fda0:	1e0c      	subs	r4, r1, #0
 801fda2:	d010      	beq.n	801fdc6 <_free_r+0x2a>
 801fda4:	3c04      	subs	r4, #4
 801fda6:	6823      	ldr	r3, [r4, #0]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	da00      	bge.n	801fdae <_free_r+0x12>
 801fdac:	18e4      	adds	r4, r4, r3
 801fdae:	0028      	movs	r0, r5
 801fdb0:	f000 fc56 	bl	8020660 <__malloc_lock>
 801fdb4:	4a1d      	ldr	r2, [pc, #116]	@ (801fe2c <_free_r+0x90>)
 801fdb6:	6813      	ldr	r3, [r2, #0]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d105      	bne.n	801fdc8 <_free_r+0x2c>
 801fdbc:	6063      	str	r3, [r4, #4]
 801fdbe:	6014      	str	r4, [r2, #0]
 801fdc0:	0028      	movs	r0, r5
 801fdc2:	f000 fc55 	bl	8020670 <__malloc_unlock>
 801fdc6:	bd70      	pop	{r4, r5, r6, pc}
 801fdc8:	42a3      	cmp	r3, r4
 801fdca:	d908      	bls.n	801fdde <_free_r+0x42>
 801fdcc:	6820      	ldr	r0, [r4, #0]
 801fdce:	1821      	adds	r1, r4, r0
 801fdd0:	428b      	cmp	r3, r1
 801fdd2:	d1f3      	bne.n	801fdbc <_free_r+0x20>
 801fdd4:	6819      	ldr	r1, [r3, #0]
 801fdd6:	685b      	ldr	r3, [r3, #4]
 801fdd8:	1809      	adds	r1, r1, r0
 801fdda:	6021      	str	r1, [r4, #0]
 801fddc:	e7ee      	b.n	801fdbc <_free_r+0x20>
 801fdde:	001a      	movs	r2, r3
 801fde0:	685b      	ldr	r3, [r3, #4]
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d001      	beq.n	801fdea <_free_r+0x4e>
 801fde6:	42a3      	cmp	r3, r4
 801fde8:	d9f9      	bls.n	801fdde <_free_r+0x42>
 801fdea:	6811      	ldr	r1, [r2, #0]
 801fdec:	1850      	adds	r0, r2, r1
 801fdee:	42a0      	cmp	r0, r4
 801fdf0:	d10b      	bne.n	801fe0a <_free_r+0x6e>
 801fdf2:	6820      	ldr	r0, [r4, #0]
 801fdf4:	1809      	adds	r1, r1, r0
 801fdf6:	1850      	adds	r0, r2, r1
 801fdf8:	6011      	str	r1, [r2, #0]
 801fdfa:	4283      	cmp	r3, r0
 801fdfc:	d1e0      	bne.n	801fdc0 <_free_r+0x24>
 801fdfe:	6818      	ldr	r0, [r3, #0]
 801fe00:	685b      	ldr	r3, [r3, #4]
 801fe02:	1841      	adds	r1, r0, r1
 801fe04:	6011      	str	r1, [r2, #0]
 801fe06:	6053      	str	r3, [r2, #4]
 801fe08:	e7da      	b.n	801fdc0 <_free_r+0x24>
 801fe0a:	42a0      	cmp	r0, r4
 801fe0c:	d902      	bls.n	801fe14 <_free_r+0x78>
 801fe0e:	230c      	movs	r3, #12
 801fe10:	602b      	str	r3, [r5, #0]
 801fe12:	e7d5      	b.n	801fdc0 <_free_r+0x24>
 801fe14:	6820      	ldr	r0, [r4, #0]
 801fe16:	1821      	adds	r1, r4, r0
 801fe18:	428b      	cmp	r3, r1
 801fe1a:	d103      	bne.n	801fe24 <_free_r+0x88>
 801fe1c:	6819      	ldr	r1, [r3, #0]
 801fe1e:	685b      	ldr	r3, [r3, #4]
 801fe20:	1809      	adds	r1, r1, r0
 801fe22:	6021      	str	r1, [r4, #0]
 801fe24:	6063      	str	r3, [r4, #4]
 801fe26:	6054      	str	r4, [r2, #4]
 801fe28:	e7ca      	b.n	801fdc0 <_free_r+0x24>
 801fe2a:	46c0      	nop			@ (mov r8, r8)
 801fe2c:	200038fc 	.word	0x200038fc

0801fe30 <rshift>:
 801fe30:	0002      	movs	r2, r0
 801fe32:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe34:	6904      	ldr	r4, [r0, #16]
 801fe36:	b085      	sub	sp, #20
 801fe38:	3214      	adds	r2, #20
 801fe3a:	114b      	asrs	r3, r1, #5
 801fe3c:	0016      	movs	r6, r2
 801fe3e:	9302      	str	r3, [sp, #8]
 801fe40:	429c      	cmp	r4, r3
 801fe42:	dd31      	ble.n	801fea8 <rshift+0x78>
 801fe44:	261f      	movs	r6, #31
 801fe46:	000f      	movs	r7, r1
 801fe48:	009b      	lsls	r3, r3, #2
 801fe4a:	00a5      	lsls	r5, r4, #2
 801fe4c:	18d3      	adds	r3, r2, r3
 801fe4e:	4037      	ands	r7, r6
 801fe50:	1955      	adds	r5, r2, r5
 801fe52:	9300      	str	r3, [sp, #0]
 801fe54:	9701      	str	r7, [sp, #4]
 801fe56:	4231      	tst	r1, r6
 801fe58:	d10d      	bne.n	801fe76 <rshift+0x46>
 801fe5a:	0016      	movs	r6, r2
 801fe5c:	0019      	movs	r1, r3
 801fe5e:	428d      	cmp	r5, r1
 801fe60:	d836      	bhi.n	801fed0 <rshift+0xa0>
 801fe62:	9b00      	ldr	r3, [sp, #0]
 801fe64:	2600      	movs	r6, #0
 801fe66:	3b03      	subs	r3, #3
 801fe68:	429d      	cmp	r5, r3
 801fe6a:	d302      	bcc.n	801fe72 <rshift+0x42>
 801fe6c:	9b02      	ldr	r3, [sp, #8]
 801fe6e:	1ae4      	subs	r4, r4, r3
 801fe70:	00a6      	lsls	r6, r4, #2
 801fe72:	1996      	adds	r6, r2, r6
 801fe74:	e018      	b.n	801fea8 <rshift+0x78>
 801fe76:	2120      	movs	r1, #32
 801fe78:	9e01      	ldr	r6, [sp, #4]
 801fe7a:	9f01      	ldr	r7, [sp, #4]
 801fe7c:	1b89      	subs	r1, r1, r6
 801fe7e:	9e00      	ldr	r6, [sp, #0]
 801fe80:	9103      	str	r1, [sp, #12]
 801fe82:	ce02      	ldmia	r6!, {r1}
 801fe84:	4694      	mov	ip, r2
 801fe86:	40f9      	lsrs	r1, r7
 801fe88:	42b5      	cmp	r5, r6
 801fe8a:	d816      	bhi.n	801feba <rshift+0x8a>
 801fe8c:	9b00      	ldr	r3, [sp, #0]
 801fe8e:	2600      	movs	r6, #0
 801fe90:	3301      	adds	r3, #1
 801fe92:	429d      	cmp	r5, r3
 801fe94:	d303      	bcc.n	801fe9e <rshift+0x6e>
 801fe96:	9b02      	ldr	r3, [sp, #8]
 801fe98:	1ae4      	subs	r4, r4, r3
 801fe9a:	00a6      	lsls	r6, r4, #2
 801fe9c:	3e04      	subs	r6, #4
 801fe9e:	1996      	adds	r6, r2, r6
 801fea0:	6031      	str	r1, [r6, #0]
 801fea2:	2900      	cmp	r1, #0
 801fea4:	d000      	beq.n	801fea8 <rshift+0x78>
 801fea6:	3604      	adds	r6, #4
 801fea8:	1ab1      	subs	r1, r6, r2
 801feaa:	1089      	asrs	r1, r1, #2
 801feac:	6101      	str	r1, [r0, #16]
 801feae:	4296      	cmp	r6, r2
 801feb0:	d101      	bne.n	801feb6 <rshift+0x86>
 801feb2:	2300      	movs	r3, #0
 801feb4:	6143      	str	r3, [r0, #20]
 801feb6:	b005      	add	sp, #20
 801feb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801feba:	6837      	ldr	r7, [r6, #0]
 801febc:	9b03      	ldr	r3, [sp, #12]
 801febe:	409f      	lsls	r7, r3
 801fec0:	430f      	orrs	r7, r1
 801fec2:	4661      	mov	r1, ip
 801fec4:	c180      	stmia	r1!, {r7}
 801fec6:	468c      	mov	ip, r1
 801fec8:	9b01      	ldr	r3, [sp, #4]
 801feca:	ce02      	ldmia	r6!, {r1}
 801fecc:	40d9      	lsrs	r1, r3
 801fece:	e7db      	b.n	801fe88 <rshift+0x58>
 801fed0:	c980      	ldmia	r1!, {r7}
 801fed2:	c680      	stmia	r6!, {r7}
 801fed4:	e7c3      	b.n	801fe5e <rshift+0x2e>

0801fed6 <__hexdig_fun>:
 801fed6:	0002      	movs	r2, r0
 801fed8:	3a30      	subs	r2, #48	@ 0x30
 801feda:	0003      	movs	r3, r0
 801fedc:	2a09      	cmp	r2, #9
 801fede:	d802      	bhi.n	801fee6 <__hexdig_fun+0x10>
 801fee0:	3b20      	subs	r3, #32
 801fee2:	b2d8      	uxtb	r0, r3
 801fee4:	4770      	bx	lr
 801fee6:	0002      	movs	r2, r0
 801fee8:	3a61      	subs	r2, #97	@ 0x61
 801feea:	2a05      	cmp	r2, #5
 801feec:	d801      	bhi.n	801fef2 <__hexdig_fun+0x1c>
 801feee:	3b47      	subs	r3, #71	@ 0x47
 801fef0:	e7f7      	b.n	801fee2 <__hexdig_fun+0xc>
 801fef2:	001a      	movs	r2, r3
 801fef4:	3a41      	subs	r2, #65	@ 0x41
 801fef6:	2000      	movs	r0, #0
 801fef8:	2a05      	cmp	r2, #5
 801fefa:	d8f3      	bhi.n	801fee4 <__hexdig_fun+0xe>
 801fefc:	3b27      	subs	r3, #39	@ 0x27
 801fefe:	e7f0      	b.n	801fee2 <__hexdig_fun+0xc>

0801ff00 <__gethex>:
 801ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff02:	b089      	sub	sp, #36	@ 0x24
 801ff04:	9307      	str	r3, [sp, #28]
 801ff06:	680b      	ldr	r3, [r1, #0]
 801ff08:	9201      	str	r2, [sp, #4]
 801ff0a:	9003      	str	r0, [sp, #12]
 801ff0c:	9106      	str	r1, [sp, #24]
 801ff0e:	1c9a      	adds	r2, r3, #2
 801ff10:	0011      	movs	r1, r2
 801ff12:	3201      	adds	r2, #1
 801ff14:	1e50      	subs	r0, r2, #1
 801ff16:	7800      	ldrb	r0, [r0, #0]
 801ff18:	2830      	cmp	r0, #48	@ 0x30
 801ff1a:	d0f9      	beq.n	801ff10 <__gethex+0x10>
 801ff1c:	1acb      	subs	r3, r1, r3
 801ff1e:	3b02      	subs	r3, #2
 801ff20:	9305      	str	r3, [sp, #20]
 801ff22:	9100      	str	r1, [sp, #0]
 801ff24:	f7ff ffd7 	bl	801fed6 <__hexdig_fun>
 801ff28:	2300      	movs	r3, #0
 801ff2a:	001d      	movs	r5, r3
 801ff2c:	9302      	str	r3, [sp, #8]
 801ff2e:	4298      	cmp	r0, r3
 801ff30:	d11e      	bne.n	801ff70 <__gethex+0x70>
 801ff32:	2201      	movs	r2, #1
 801ff34:	49a6      	ldr	r1, [pc, #664]	@ (80201d0 <__gethex+0x2d0>)
 801ff36:	9800      	ldr	r0, [sp, #0]
 801ff38:	f7fe ffd8 	bl	801eeec <strncmp>
 801ff3c:	0007      	movs	r7, r0
 801ff3e:	42a8      	cmp	r0, r5
 801ff40:	d000      	beq.n	801ff44 <__gethex+0x44>
 801ff42:	e06a      	b.n	802001a <__gethex+0x11a>
 801ff44:	9b00      	ldr	r3, [sp, #0]
 801ff46:	7858      	ldrb	r0, [r3, #1]
 801ff48:	1c5c      	adds	r4, r3, #1
 801ff4a:	f7ff ffc4 	bl	801fed6 <__hexdig_fun>
 801ff4e:	2301      	movs	r3, #1
 801ff50:	9302      	str	r3, [sp, #8]
 801ff52:	42a8      	cmp	r0, r5
 801ff54:	d02f      	beq.n	801ffb6 <__gethex+0xb6>
 801ff56:	9400      	str	r4, [sp, #0]
 801ff58:	9b00      	ldr	r3, [sp, #0]
 801ff5a:	7818      	ldrb	r0, [r3, #0]
 801ff5c:	2830      	cmp	r0, #48	@ 0x30
 801ff5e:	d009      	beq.n	801ff74 <__gethex+0x74>
 801ff60:	f7ff ffb9 	bl	801fed6 <__hexdig_fun>
 801ff64:	4242      	negs	r2, r0
 801ff66:	4142      	adcs	r2, r0
 801ff68:	2301      	movs	r3, #1
 801ff6a:	0025      	movs	r5, r4
 801ff6c:	9202      	str	r2, [sp, #8]
 801ff6e:	9305      	str	r3, [sp, #20]
 801ff70:	9c00      	ldr	r4, [sp, #0]
 801ff72:	e004      	b.n	801ff7e <__gethex+0x7e>
 801ff74:	9b00      	ldr	r3, [sp, #0]
 801ff76:	3301      	adds	r3, #1
 801ff78:	9300      	str	r3, [sp, #0]
 801ff7a:	e7ed      	b.n	801ff58 <__gethex+0x58>
 801ff7c:	3401      	adds	r4, #1
 801ff7e:	7820      	ldrb	r0, [r4, #0]
 801ff80:	f7ff ffa9 	bl	801fed6 <__hexdig_fun>
 801ff84:	1e07      	subs	r7, r0, #0
 801ff86:	d1f9      	bne.n	801ff7c <__gethex+0x7c>
 801ff88:	2201      	movs	r2, #1
 801ff8a:	0020      	movs	r0, r4
 801ff8c:	4990      	ldr	r1, [pc, #576]	@ (80201d0 <__gethex+0x2d0>)
 801ff8e:	f7fe ffad 	bl	801eeec <strncmp>
 801ff92:	2800      	cmp	r0, #0
 801ff94:	d10d      	bne.n	801ffb2 <__gethex+0xb2>
 801ff96:	2d00      	cmp	r5, #0
 801ff98:	d106      	bne.n	801ffa8 <__gethex+0xa8>
 801ff9a:	3401      	adds	r4, #1
 801ff9c:	0025      	movs	r5, r4
 801ff9e:	7820      	ldrb	r0, [r4, #0]
 801ffa0:	f7ff ff99 	bl	801fed6 <__hexdig_fun>
 801ffa4:	2800      	cmp	r0, #0
 801ffa6:	d102      	bne.n	801ffae <__gethex+0xae>
 801ffa8:	1b2d      	subs	r5, r5, r4
 801ffaa:	00af      	lsls	r7, r5, #2
 801ffac:	e003      	b.n	801ffb6 <__gethex+0xb6>
 801ffae:	3401      	adds	r4, #1
 801ffb0:	e7f5      	b.n	801ff9e <__gethex+0x9e>
 801ffb2:	2d00      	cmp	r5, #0
 801ffb4:	d1f8      	bne.n	801ffa8 <__gethex+0xa8>
 801ffb6:	2220      	movs	r2, #32
 801ffb8:	7823      	ldrb	r3, [r4, #0]
 801ffba:	0026      	movs	r6, r4
 801ffbc:	4393      	bics	r3, r2
 801ffbe:	2b50      	cmp	r3, #80	@ 0x50
 801ffc0:	d11d      	bne.n	801fffe <__gethex+0xfe>
 801ffc2:	7863      	ldrb	r3, [r4, #1]
 801ffc4:	2b2b      	cmp	r3, #43	@ 0x2b
 801ffc6:	d02d      	beq.n	8020024 <__gethex+0x124>
 801ffc8:	2b2d      	cmp	r3, #45	@ 0x2d
 801ffca:	d02f      	beq.n	802002c <__gethex+0x12c>
 801ffcc:	2300      	movs	r3, #0
 801ffce:	1c66      	adds	r6, r4, #1
 801ffd0:	9304      	str	r3, [sp, #16]
 801ffd2:	7830      	ldrb	r0, [r6, #0]
 801ffd4:	f7ff ff7f 	bl	801fed6 <__hexdig_fun>
 801ffd8:	1e43      	subs	r3, r0, #1
 801ffda:	b2db      	uxtb	r3, r3
 801ffdc:	0005      	movs	r5, r0
 801ffde:	2b18      	cmp	r3, #24
 801ffe0:	d82a      	bhi.n	8020038 <__gethex+0x138>
 801ffe2:	7870      	ldrb	r0, [r6, #1]
 801ffe4:	f7ff ff77 	bl	801fed6 <__hexdig_fun>
 801ffe8:	1e43      	subs	r3, r0, #1
 801ffea:	b2db      	uxtb	r3, r3
 801ffec:	3601      	adds	r6, #1
 801ffee:	3d10      	subs	r5, #16
 801fff0:	2b18      	cmp	r3, #24
 801fff2:	d91d      	bls.n	8020030 <__gethex+0x130>
 801fff4:	9b04      	ldr	r3, [sp, #16]
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d000      	beq.n	801fffc <__gethex+0xfc>
 801fffa:	426d      	negs	r5, r5
 801fffc:	197f      	adds	r7, r7, r5
 801fffe:	9b06      	ldr	r3, [sp, #24]
 8020000:	601e      	str	r6, [r3, #0]
 8020002:	9b02      	ldr	r3, [sp, #8]
 8020004:	2b00      	cmp	r3, #0
 8020006:	d019      	beq.n	802003c <__gethex+0x13c>
 8020008:	9b05      	ldr	r3, [sp, #20]
 802000a:	2606      	movs	r6, #6
 802000c:	425a      	negs	r2, r3
 802000e:	4153      	adcs	r3, r2
 8020010:	425b      	negs	r3, r3
 8020012:	401e      	ands	r6, r3
 8020014:	0030      	movs	r0, r6
 8020016:	b009      	add	sp, #36	@ 0x24
 8020018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802001a:	2301      	movs	r3, #1
 802001c:	2700      	movs	r7, #0
 802001e:	9c00      	ldr	r4, [sp, #0]
 8020020:	9302      	str	r3, [sp, #8]
 8020022:	e7c8      	b.n	801ffb6 <__gethex+0xb6>
 8020024:	2300      	movs	r3, #0
 8020026:	9304      	str	r3, [sp, #16]
 8020028:	1ca6      	adds	r6, r4, #2
 802002a:	e7d2      	b.n	801ffd2 <__gethex+0xd2>
 802002c:	2301      	movs	r3, #1
 802002e:	e7fa      	b.n	8020026 <__gethex+0x126>
 8020030:	230a      	movs	r3, #10
 8020032:	435d      	muls	r5, r3
 8020034:	182d      	adds	r5, r5, r0
 8020036:	e7d4      	b.n	801ffe2 <__gethex+0xe2>
 8020038:	0026      	movs	r6, r4
 802003a:	e7e0      	b.n	801fffe <__gethex+0xfe>
 802003c:	9b00      	ldr	r3, [sp, #0]
 802003e:	9902      	ldr	r1, [sp, #8]
 8020040:	1ae3      	subs	r3, r4, r3
 8020042:	3b01      	subs	r3, #1
 8020044:	2b07      	cmp	r3, #7
 8020046:	dc0a      	bgt.n	802005e <__gethex+0x15e>
 8020048:	9803      	ldr	r0, [sp, #12]
 802004a:	f000 fb19 	bl	8020680 <_Balloc>
 802004e:	1e05      	subs	r5, r0, #0
 8020050:	d108      	bne.n	8020064 <__gethex+0x164>
 8020052:	002a      	movs	r2, r5
 8020054:	21e4      	movs	r1, #228	@ 0xe4
 8020056:	4b5f      	ldr	r3, [pc, #380]	@ (80201d4 <__gethex+0x2d4>)
 8020058:	485f      	ldr	r0, [pc, #380]	@ (80201d8 <__gethex+0x2d8>)
 802005a:	f001 fbf1 	bl	8021840 <__assert_func>
 802005e:	3101      	adds	r1, #1
 8020060:	105b      	asrs	r3, r3, #1
 8020062:	e7ef      	b.n	8020044 <__gethex+0x144>
 8020064:	0003      	movs	r3, r0
 8020066:	3314      	adds	r3, #20
 8020068:	9302      	str	r3, [sp, #8]
 802006a:	9305      	str	r3, [sp, #20]
 802006c:	2300      	movs	r3, #0
 802006e:	001e      	movs	r6, r3
 8020070:	9304      	str	r3, [sp, #16]
 8020072:	9b00      	ldr	r3, [sp, #0]
 8020074:	42a3      	cmp	r3, r4
 8020076:	d338      	bcc.n	80200ea <__gethex+0x1ea>
 8020078:	9c05      	ldr	r4, [sp, #20]
 802007a:	9b02      	ldr	r3, [sp, #8]
 802007c:	c440      	stmia	r4!, {r6}
 802007e:	1ae4      	subs	r4, r4, r3
 8020080:	10a4      	asrs	r4, r4, #2
 8020082:	0030      	movs	r0, r6
 8020084:	612c      	str	r4, [r5, #16]
 8020086:	f000 fbf3 	bl	8020870 <__hi0bits>
 802008a:	9b01      	ldr	r3, [sp, #4]
 802008c:	0164      	lsls	r4, r4, #5
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	1a26      	subs	r6, r4, r0
 8020092:	9300      	str	r3, [sp, #0]
 8020094:	429e      	cmp	r6, r3
 8020096:	dd52      	ble.n	802013e <__gethex+0x23e>
 8020098:	1af6      	subs	r6, r6, r3
 802009a:	0031      	movs	r1, r6
 802009c:	0028      	movs	r0, r5
 802009e:	f000 ff96 	bl	8020fce <__any_on>
 80200a2:	1e04      	subs	r4, r0, #0
 80200a4:	d00f      	beq.n	80200c6 <__gethex+0x1c6>
 80200a6:	2401      	movs	r4, #1
 80200a8:	231f      	movs	r3, #31
 80200aa:	0020      	movs	r0, r4
 80200ac:	1e72      	subs	r2, r6, #1
 80200ae:	4013      	ands	r3, r2
 80200b0:	4098      	lsls	r0, r3
 80200b2:	0003      	movs	r3, r0
 80200b4:	1151      	asrs	r1, r2, #5
 80200b6:	9802      	ldr	r0, [sp, #8]
 80200b8:	0089      	lsls	r1, r1, #2
 80200ba:	5809      	ldr	r1, [r1, r0]
 80200bc:	4219      	tst	r1, r3
 80200be:	d002      	beq.n	80200c6 <__gethex+0x1c6>
 80200c0:	42a2      	cmp	r2, r4
 80200c2:	dc34      	bgt.n	802012e <__gethex+0x22e>
 80200c4:	2402      	movs	r4, #2
 80200c6:	0031      	movs	r1, r6
 80200c8:	0028      	movs	r0, r5
 80200ca:	f7ff feb1 	bl	801fe30 <rshift>
 80200ce:	19bf      	adds	r7, r7, r6
 80200d0:	9b01      	ldr	r3, [sp, #4]
 80200d2:	689b      	ldr	r3, [r3, #8]
 80200d4:	42bb      	cmp	r3, r7
 80200d6:	da42      	bge.n	802015e <__gethex+0x25e>
 80200d8:	0029      	movs	r1, r5
 80200da:	9803      	ldr	r0, [sp, #12]
 80200dc:	f000 fb14 	bl	8020708 <_Bfree>
 80200e0:	2300      	movs	r3, #0
 80200e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80200e4:	26a3      	movs	r6, #163	@ 0xa3
 80200e6:	6013      	str	r3, [r2, #0]
 80200e8:	e794      	b.n	8020014 <__gethex+0x114>
 80200ea:	3c01      	subs	r4, #1
 80200ec:	7823      	ldrb	r3, [r4, #0]
 80200ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80200f0:	d012      	beq.n	8020118 <__gethex+0x218>
 80200f2:	9b04      	ldr	r3, [sp, #16]
 80200f4:	2b20      	cmp	r3, #32
 80200f6:	d104      	bne.n	8020102 <__gethex+0x202>
 80200f8:	9b05      	ldr	r3, [sp, #20]
 80200fa:	c340      	stmia	r3!, {r6}
 80200fc:	2600      	movs	r6, #0
 80200fe:	9305      	str	r3, [sp, #20]
 8020100:	9604      	str	r6, [sp, #16]
 8020102:	7820      	ldrb	r0, [r4, #0]
 8020104:	f7ff fee7 	bl	801fed6 <__hexdig_fun>
 8020108:	230f      	movs	r3, #15
 802010a:	4018      	ands	r0, r3
 802010c:	9b04      	ldr	r3, [sp, #16]
 802010e:	4098      	lsls	r0, r3
 8020110:	3304      	adds	r3, #4
 8020112:	4306      	orrs	r6, r0
 8020114:	9304      	str	r3, [sp, #16]
 8020116:	e7ac      	b.n	8020072 <__gethex+0x172>
 8020118:	9b00      	ldr	r3, [sp, #0]
 802011a:	42a3      	cmp	r3, r4
 802011c:	d8e9      	bhi.n	80200f2 <__gethex+0x1f2>
 802011e:	2201      	movs	r2, #1
 8020120:	0020      	movs	r0, r4
 8020122:	492b      	ldr	r1, [pc, #172]	@ (80201d0 <__gethex+0x2d0>)
 8020124:	f7fe fee2 	bl	801eeec <strncmp>
 8020128:	2800      	cmp	r0, #0
 802012a:	d1e2      	bne.n	80200f2 <__gethex+0x1f2>
 802012c:	e7a1      	b.n	8020072 <__gethex+0x172>
 802012e:	0028      	movs	r0, r5
 8020130:	1eb1      	subs	r1, r6, #2
 8020132:	f000 ff4c 	bl	8020fce <__any_on>
 8020136:	2800      	cmp	r0, #0
 8020138:	d0c4      	beq.n	80200c4 <__gethex+0x1c4>
 802013a:	2403      	movs	r4, #3
 802013c:	e7c3      	b.n	80200c6 <__gethex+0x1c6>
 802013e:	9b00      	ldr	r3, [sp, #0]
 8020140:	2400      	movs	r4, #0
 8020142:	429e      	cmp	r6, r3
 8020144:	dac4      	bge.n	80200d0 <__gethex+0x1d0>
 8020146:	1b9e      	subs	r6, r3, r6
 8020148:	0029      	movs	r1, r5
 802014a:	0032      	movs	r2, r6
 802014c:	9803      	ldr	r0, [sp, #12]
 802014e:	f000 fd05 	bl	8020b5c <__lshift>
 8020152:	0003      	movs	r3, r0
 8020154:	3314      	adds	r3, #20
 8020156:	0005      	movs	r5, r0
 8020158:	1bbf      	subs	r7, r7, r6
 802015a:	9302      	str	r3, [sp, #8]
 802015c:	e7b8      	b.n	80200d0 <__gethex+0x1d0>
 802015e:	9b01      	ldr	r3, [sp, #4]
 8020160:	685e      	ldr	r6, [r3, #4]
 8020162:	42be      	cmp	r6, r7
 8020164:	dd6f      	ble.n	8020246 <__gethex+0x346>
 8020166:	9b00      	ldr	r3, [sp, #0]
 8020168:	1bf6      	subs	r6, r6, r7
 802016a:	42b3      	cmp	r3, r6
 802016c:	dc36      	bgt.n	80201dc <__gethex+0x2dc>
 802016e:	9b01      	ldr	r3, [sp, #4]
 8020170:	68db      	ldr	r3, [r3, #12]
 8020172:	2b02      	cmp	r3, #2
 8020174:	d024      	beq.n	80201c0 <__gethex+0x2c0>
 8020176:	2b03      	cmp	r3, #3
 8020178:	d026      	beq.n	80201c8 <__gethex+0x2c8>
 802017a:	2b01      	cmp	r3, #1
 802017c:	d117      	bne.n	80201ae <__gethex+0x2ae>
 802017e:	9b00      	ldr	r3, [sp, #0]
 8020180:	42b3      	cmp	r3, r6
 8020182:	d114      	bne.n	80201ae <__gethex+0x2ae>
 8020184:	2b01      	cmp	r3, #1
 8020186:	d10b      	bne.n	80201a0 <__gethex+0x2a0>
 8020188:	9b01      	ldr	r3, [sp, #4]
 802018a:	9a07      	ldr	r2, [sp, #28]
 802018c:	685b      	ldr	r3, [r3, #4]
 802018e:	2662      	movs	r6, #98	@ 0x62
 8020190:	6013      	str	r3, [r2, #0]
 8020192:	2301      	movs	r3, #1
 8020194:	9a02      	ldr	r2, [sp, #8]
 8020196:	612b      	str	r3, [r5, #16]
 8020198:	6013      	str	r3, [r2, #0]
 802019a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802019c:	601d      	str	r5, [r3, #0]
 802019e:	e739      	b.n	8020014 <__gethex+0x114>
 80201a0:	9900      	ldr	r1, [sp, #0]
 80201a2:	0028      	movs	r0, r5
 80201a4:	3901      	subs	r1, #1
 80201a6:	f000 ff12 	bl	8020fce <__any_on>
 80201aa:	2800      	cmp	r0, #0
 80201ac:	d1ec      	bne.n	8020188 <__gethex+0x288>
 80201ae:	0029      	movs	r1, r5
 80201b0:	9803      	ldr	r0, [sp, #12]
 80201b2:	f000 faa9 	bl	8020708 <_Bfree>
 80201b6:	2300      	movs	r3, #0
 80201b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201ba:	2650      	movs	r6, #80	@ 0x50
 80201bc:	6013      	str	r3, [r2, #0]
 80201be:	e729      	b.n	8020014 <__gethex+0x114>
 80201c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d1f3      	bne.n	80201ae <__gethex+0x2ae>
 80201c6:	e7df      	b.n	8020188 <__gethex+0x288>
 80201c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d1dc      	bne.n	8020188 <__gethex+0x288>
 80201ce:	e7ee      	b.n	80201ae <__gethex+0x2ae>
 80201d0:	08024108 	.word	0x08024108
 80201d4:	08024319 	.word	0x08024319
 80201d8:	0802432a 	.word	0x0802432a
 80201dc:	1e77      	subs	r7, r6, #1
 80201de:	2c00      	cmp	r4, #0
 80201e0:	d12f      	bne.n	8020242 <__gethex+0x342>
 80201e2:	2f00      	cmp	r7, #0
 80201e4:	d004      	beq.n	80201f0 <__gethex+0x2f0>
 80201e6:	0039      	movs	r1, r7
 80201e8:	0028      	movs	r0, r5
 80201ea:	f000 fef0 	bl	8020fce <__any_on>
 80201ee:	0004      	movs	r4, r0
 80201f0:	231f      	movs	r3, #31
 80201f2:	117a      	asrs	r2, r7, #5
 80201f4:	401f      	ands	r7, r3
 80201f6:	3b1e      	subs	r3, #30
 80201f8:	40bb      	lsls	r3, r7
 80201fa:	9902      	ldr	r1, [sp, #8]
 80201fc:	0092      	lsls	r2, r2, #2
 80201fe:	5852      	ldr	r2, [r2, r1]
 8020200:	421a      	tst	r2, r3
 8020202:	d001      	beq.n	8020208 <__gethex+0x308>
 8020204:	2302      	movs	r3, #2
 8020206:	431c      	orrs	r4, r3
 8020208:	9b00      	ldr	r3, [sp, #0]
 802020a:	0031      	movs	r1, r6
 802020c:	1b9b      	subs	r3, r3, r6
 802020e:	2602      	movs	r6, #2
 8020210:	0028      	movs	r0, r5
 8020212:	9300      	str	r3, [sp, #0]
 8020214:	f7ff fe0c 	bl	801fe30 <rshift>
 8020218:	9b01      	ldr	r3, [sp, #4]
 802021a:	685f      	ldr	r7, [r3, #4]
 802021c:	2c00      	cmp	r4, #0
 802021e:	d03f      	beq.n	80202a0 <__gethex+0x3a0>
 8020220:	9b01      	ldr	r3, [sp, #4]
 8020222:	68db      	ldr	r3, [r3, #12]
 8020224:	2b02      	cmp	r3, #2
 8020226:	d010      	beq.n	802024a <__gethex+0x34a>
 8020228:	2b03      	cmp	r3, #3
 802022a:	d012      	beq.n	8020252 <__gethex+0x352>
 802022c:	2b01      	cmp	r3, #1
 802022e:	d106      	bne.n	802023e <__gethex+0x33e>
 8020230:	07a2      	lsls	r2, r4, #30
 8020232:	d504      	bpl.n	802023e <__gethex+0x33e>
 8020234:	9a02      	ldr	r2, [sp, #8]
 8020236:	6812      	ldr	r2, [r2, #0]
 8020238:	4314      	orrs	r4, r2
 802023a:	421c      	tst	r4, r3
 802023c:	d10c      	bne.n	8020258 <__gethex+0x358>
 802023e:	2310      	movs	r3, #16
 8020240:	e02d      	b.n	802029e <__gethex+0x39e>
 8020242:	2401      	movs	r4, #1
 8020244:	e7d4      	b.n	80201f0 <__gethex+0x2f0>
 8020246:	2601      	movs	r6, #1
 8020248:	e7e8      	b.n	802021c <__gethex+0x31c>
 802024a:	2301      	movs	r3, #1
 802024c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802024e:	1a9b      	subs	r3, r3, r2
 8020250:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020254:	2b00      	cmp	r3, #0
 8020256:	d0f2      	beq.n	802023e <__gethex+0x33e>
 8020258:	692b      	ldr	r3, [r5, #16]
 802025a:	2000      	movs	r0, #0
 802025c:	9302      	str	r3, [sp, #8]
 802025e:	009b      	lsls	r3, r3, #2
 8020260:	9304      	str	r3, [sp, #16]
 8020262:	002b      	movs	r3, r5
 8020264:	9a04      	ldr	r2, [sp, #16]
 8020266:	3314      	adds	r3, #20
 8020268:	1899      	adds	r1, r3, r2
 802026a:	681a      	ldr	r2, [r3, #0]
 802026c:	1c54      	adds	r4, r2, #1
 802026e:	d01c      	beq.n	80202aa <__gethex+0x3aa>
 8020270:	3201      	adds	r2, #1
 8020272:	601a      	str	r2, [r3, #0]
 8020274:	002b      	movs	r3, r5
 8020276:	3314      	adds	r3, #20
 8020278:	2e02      	cmp	r6, #2
 802027a:	d13f      	bne.n	80202fc <__gethex+0x3fc>
 802027c:	9a01      	ldr	r2, [sp, #4]
 802027e:	9900      	ldr	r1, [sp, #0]
 8020280:	6812      	ldr	r2, [r2, #0]
 8020282:	3a01      	subs	r2, #1
 8020284:	428a      	cmp	r2, r1
 8020286:	d109      	bne.n	802029c <__gethex+0x39c>
 8020288:	000a      	movs	r2, r1
 802028a:	201f      	movs	r0, #31
 802028c:	4010      	ands	r0, r2
 802028e:	2201      	movs	r2, #1
 8020290:	4082      	lsls	r2, r0
 8020292:	1149      	asrs	r1, r1, #5
 8020294:	0089      	lsls	r1, r1, #2
 8020296:	58cb      	ldr	r3, [r1, r3]
 8020298:	4213      	tst	r3, r2
 802029a:	d13d      	bne.n	8020318 <__gethex+0x418>
 802029c:	2320      	movs	r3, #32
 802029e:	431e      	orrs	r6, r3
 80202a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202a2:	601d      	str	r5, [r3, #0]
 80202a4:	9b07      	ldr	r3, [sp, #28]
 80202a6:	601f      	str	r7, [r3, #0]
 80202a8:	e6b4      	b.n	8020014 <__gethex+0x114>
 80202aa:	c301      	stmia	r3!, {r0}
 80202ac:	4299      	cmp	r1, r3
 80202ae:	d8dc      	bhi.n	802026a <__gethex+0x36a>
 80202b0:	68ab      	ldr	r3, [r5, #8]
 80202b2:	9a02      	ldr	r2, [sp, #8]
 80202b4:	429a      	cmp	r2, r3
 80202b6:	db18      	blt.n	80202ea <__gethex+0x3ea>
 80202b8:	6869      	ldr	r1, [r5, #4]
 80202ba:	9803      	ldr	r0, [sp, #12]
 80202bc:	3101      	adds	r1, #1
 80202be:	f000 f9df 	bl	8020680 <_Balloc>
 80202c2:	1e04      	subs	r4, r0, #0
 80202c4:	d104      	bne.n	80202d0 <__gethex+0x3d0>
 80202c6:	0022      	movs	r2, r4
 80202c8:	2184      	movs	r1, #132	@ 0x84
 80202ca:	4b1d      	ldr	r3, [pc, #116]	@ (8020340 <__gethex+0x440>)
 80202cc:	481d      	ldr	r0, [pc, #116]	@ (8020344 <__gethex+0x444>)
 80202ce:	e6c4      	b.n	802005a <__gethex+0x15a>
 80202d0:	0029      	movs	r1, r5
 80202d2:	692a      	ldr	r2, [r5, #16]
 80202d4:	310c      	adds	r1, #12
 80202d6:	3202      	adds	r2, #2
 80202d8:	0092      	lsls	r2, r2, #2
 80202da:	300c      	adds	r0, #12
 80202dc:	f7fe fecc 	bl	801f078 <memcpy>
 80202e0:	0029      	movs	r1, r5
 80202e2:	9803      	ldr	r0, [sp, #12]
 80202e4:	f000 fa10 	bl	8020708 <_Bfree>
 80202e8:	0025      	movs	r5, r4
 80202ea:	692b      	ldr	r3, [r5, #16]
 80202ec:	1c5a      	adds	r2, r3, #1
 80202ee:	612a      	str	r2, [r5, #16]
 80202f0:	2201      	movs	r2, #1
 80202f2:	3304      	adds	r3, #4
 80202f4:	009b      	lsls	r3, r3, #2
 80202f6:	18eb      	adds	r3, r5, r3
 80202f8:	605a      	str	r2, [r3, #4]
 80202fa:	e7bb      	b.n	8020274 <__gethex+0x374>
 80202fc:	692a      	ldr	r2, [r5, #16]
 80202fe:	9902      	ldr	r1, [sp, #8]
 8020300:	428a      	cmp	r2, r1
 8020302:	dd0b      	ble.n	802031c <__gethex+0x41c>
 8020304:	2101      	movs	r1, #1
 8020306:	0028      	movs	r0, r5
 8020308:	f7ff fd92 	bl	801fe30 <rshift>
 802030c:	9b01      	ldr	r3, [sp, #4]
 802030e:	3701      	adds	r7, #1
 8020310:	689b      	ldr	r3, [r3, #8]
 8020312:	42bb      	cmp	r3, r7
 8020314:	da00      	bge.n	8020318 <__gethex+0x418>
 8020316:	e6df      	b.n	80200d8 <__gethex+0x1d8>
 8020318:	2601      	movs	r6, #1
 802031a:	e7bf      	b.n	802029c <__gethex+0x39c>
 802031c:	221f      	movs	r2, #31
 802031e:	9c00      	ldr	r4, [sp, #0]
 8020320:	9900      	ldr	r1, [sp, #0]
 8020322:	4014      	ands	r4, r2
 8020324:	4211      	tst	r1, r2
 8020326:	d0f7      	beq.n	8020318 <__gethex+0x418>
 8020328:	9a04      	ldr	r2, [sp, #16]
 802032a:	189b      	adds	r3, r3, r2
 802032c:	3b04      	subs	r3, #4
 802032e:	6818      	ldr	r0, [r3, #0]
 8020330:	f000 fa9e 	bl	8020870 <__hi0bits>
 8020334:	2320      	movs	r3, #32
 8020336:	1b1b      	subs	r3, r3, r4
 8020338:	4298      	cmp	r0, r3
 802033a:	dbe3      	blt.n	8020304 <__gethex+0x404>
 802033c:	e7ec      	b.n	8020318 <__gethex+0x418>
 802033e:	46c0      	nop			@ (mov r8, r8)
 8020340:	08024319 	.word	0x08024319
 8020344:	0802432a 	.word	0x0802432a

08020348 <L_shift>:
 8020348:	2308      	movs	r3, #8
 802034a:	b570      	push	{r4, r5, r6, lr}
 802034c:	2520      	movs	r5, #32
 802034e:	1a9a      	subs	r2, r3, r2
 8020350:	0092      	lsls	r2, r2, #2
 8020352:	1aad      	subs	r5, r5, r2
 8020354:	6843      	ldr	r3, [r0, #4]
 8020356:	6804      	ldr	r4, [r0, #0]
 8020358:	001e      	movs	r6, r3
 802035a:	40ae      	lsls	r6, r5
 802035c:	40d3      	lsrs	r3, r2
 802035e:	4334      	orrs	r4, r6
 8020360:	6004      	str	r4, [r0, #0]
 8020362:	6043      	str	r3, [r0, #4]
 8020364:	3004      	adds	r0, #4
 8020366:	4288      	cmp	r0, r1
 8020368:	d3f4      	bcc.n	8020354 <L_shift+0xc>
 802036a:	bd70      	pop	{r4, r5, r6, pc}

0802036c <__match>:
 802036c:	b530      	push	{r4, r5, lr}
 802036e:	6803      	ldr	r3, [r0, #0]
 8020370:	780c      	ldrb	r4, [r1, #0]
 8020372:	3301      	adds	r3, #1
 8020374:	2c00      	cmp	r4, #0
 8020376:	d102      	bne.n	802037e <__match+0x12>
 8020378:	6003      	str	r3, [r0, #0]
 802037a:	2001      	movs	r0, #1
 802037c:	bd30      	pop	{r4, r5, pc}
 802037e:	781a      	ldrb	r2, [r3, #0]
 8020380:	0015      	movs	r5, r2
 8020382:	3d41      	subs	r5, #65	@ 0x41
 8020384:	2d19      	cmp	r5, #25
 8020386:	d800      	bhi.n	802038a <__match+0x1e>
 8020388:	3220      	adds	r2, #32
 802038a:	3101      	adds	r1, #1
 802038c:	42a2      	cmp	r2, r4
 802038e:	d0ef      	beq.n	8020370 <__match+0x4>
 8020390:	2000      	movs	r0, #0
 8020392:	e7f3      	b.n	802037c <__match+0x10>

08020394 <__hexnan>:
 8020394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020396:	680b      	ldr	r3, [r1, #0]
 8020398:	b08b      	sub	sp, #44	@ 0x2c
 802039a:	9201      	str	r2, [sp, #4]
 802039c:	9901      	ldr	r1, [sp, #4]
 802039e:	115a      	asrs	r2, r3, #5
 80203a0:	0092      	lsls	r2, r2, #2
 80203a2:	188a      	adds	r2, r1, r2
 80203a4:	9202      	str	r2, [sp, #8]
 80203a6:	0019      	movs	r1, r3
 80203a8:	221f      	movs	r2, #31
 80203aa:	4011      	ands	r1, r2
 80203ac:	9008      	str	r0, [sp, #32]
 80203ae:	9106      	str	r1, [sp, #24]
 80203b0:	4213      	tst	r3, r2
 80203b2:	d002      	beq.n	80203ba <__hexnan+0x26>
 80203b4:	9b02      	ldr	r3, [sp, #8]
 80203b6:	3304      	adds	r3, #4
 80203b8:	9302      	str	r3, [sp, #8]
 80203ba:	9b02      	ldr	r3, [sp, #8]
 80203bc:	2500      	movs	r5, #0
 80203be:	1f1f      	subs	r7, r3, #4
 80203c0:	003e      	movs	r6, r7
 80203c2:	003c      	movs	r4, r7
 80203c4:	9b08      	ldr	r3, [sp, #32]
 80203c6:	603d      	str	r5, [r7, #0]
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	9507      	str	r5, [sp, #28]
 80203cc:	9305      	str	r3, [sp, #20]
 80203ce:	9503      	str	r5, [sp, #12]
 80203d0:	9b05      	ldr	r3, [sp, #20]
 80203d2:	3301      	adds	r3, #1
 80203d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80203d6:	9b05      	ldr	r3, [sp, #20]
 80203d8:	785b      	ldrb	r3, [r3, #1]
 80203da:	9304      	str	r3, [sp, #16]
 80203dc:	2b00      	cmp	r3, #0
 80203de:	d028      	beq.n	8020432 <__hexnan+0x9e>
 80203e0:	9804      	ldr	r0, [sp, #16]
 80203e2:	f7ff fd78 	bl	801fed6 <__hexdig_fun>
 80203e6:	2800      	cmp	r0, #0
 80203e8:	d155      	bne.n	8020496 <__hexnan+0x102>
 80203ea:	9b04      	ldr	r3, [sp, #16]
 80203ec:	2b20      	cmp	r3, #32
 80203ee:	d819      	bhi.n	8020424 <__hexnan+0x90>
 80203f0:	9b03      	ldr	r3, [sp, #12]
 80203f2:	9a07      	ldr	r2, [sp, #28]
 80203f4:	4293      	cmp	r3, r2
 80203f6:	dd12      	ble.n	802041e <__hexnan+0x8a>
 80203f8:	42b4      	cmp	r4, r6
 80203fa:	d206      	bcs.n	802040a <__hexnan+0x76>
 80203fc:	2d07      	cmp	r5, #7
 80203fe:	dc04      	bgt.n	802040a <__hexnan+0x76>
 8020400:	002a      	movs	r2, r5
 8020402:	0031      	movs	r1, r6
 8020404:	0020      	movs	r0, r4
 8020406:	f7ff ff9f 	bl	8020348 <L_shift>
 802040a:	9b01      	ldr	r3, [sp, #4]
 802040c:	2508      	movs	r5, #8
 802040e:	429c      	cmp	r4, r3
 8020410:	d905      	bls.n	802041e <__hexnan+0x8a>
 8020412:	1f26      	subs	r6, r4, #4
 8020414:	2500      	movs	r5, #0
 8020416:	0034      	movs	r4, r6
 8020418:	9b03      	ldr	r3, [sp, #12]
 802041a:	6035      	str	r5, [r6, #0]
 802041c:	9307      	str	r3, [sp, #28]
 802041e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020420:	9305      	str	r3, [sp, #20]
 8020422:	e7d5      	b.n	80203d0 <__hexnan+0x3c>
 8020424:	9b04      	ldr	r3, [sp, #16]
 8020426:	2b29      	cmp	r3, #41	@ 0x29
 8020428:	d15a      	bne.n	80204e0 <__hexnan+0x14c>
 802042a:	9b05      	ldr	r3, [sp, #20]
 802042c:	9a08      	ldr	r2, [sp, #32]
 802042e:	3302      	adds	r3, #2
 8020430:	6013      	str	r3, [r2, #0]
 8020432:	9b03      	ldr	r3, [sp, #12]
 8020434:	2b00      	cmp	r3, #0
 8020436:	d053      	beq.n	80204e0 <__hexnan+0x14c>
 8020438:	42b4      	cmp	r4, r6
 802043a:	d206      	bcs.n	802044a <__hexnan+0xb6>
 802043c:	2d07      	cmp	r5, #7
 802043e:	dc04      	bgt.n	802044a <__hexnan+0xb6>
 8020440:	002a      	movs	r2, r5
 8020442:	0031      	movs	r1, r6
 8020444:	0020      	movs	r0, r4
 8020446:	f7ff ff7f 	bl	8020348 <L_shift>
 802044a:	9b01      	ldr	r3, [sp, #4]
 802044c:	429c      	cmp	r4, r3
 802044e:	d936      	bls.n	80204be <__hexnan+0x12a>
 8020450:	001a      	movs	r2, r3
 8020452:	0023      	movs	r3, r4
 8020454:	cb02      	ldmia	r3!, {r1}
 8020456:	c202      	stmia	r2!, {r1}
 8020458:	429f      	cmp	r7, r3
 802045a:	d2fb      	bcs.n	8020454 <__hexnan+0xc0>
 802045c:	9b02      	ldr	r3, [sp, #8]
 802045e:	1c61      	adds	r1, r4, #1
 8020460:	1eda      	subs	r2, r3, #3
 8020462:	2304      	movs	r3, #4
 8020464:	4291      	cmp	r1, r2
 8020466:	d805      	bhi.n	8020474 <__hexnan+0xe0>
 8020468:	9b02      	ldr	r3, [sp, #8]
 802046a:	3b04      	subs	r3, #4
 802046c:	1b1b      	subs	r3, r3, r4
 802046e:	089b      	lsrs	r3, r3, #2
 8020470:	3301      	adds	r3, #1
 8020472:	009b      	lsls	r3, r3, #2
 8020474:	9a01      	ldr	r2, [sp, #4]
 8020476:	18d3      	adds	r3, r2, r3
 8020478:	2200      	movs	r2, #0
 802047a:	c304      	stmia	r3!, {r2}
 802047c:	429f      	cmp	r7, r3
 802047e:	d2fc      	bcs.n	802047a <__hexnan+0xe6>
 8020480:	683b      	ldr	r3, [r7, #0]
 8020482:	2b00      	cmp	r3, #0
 8020484:	d104      	bne.n	8020490 <__hexnan+0xfc>
 8020486:	9b01      	ldr	r3, [sp, #4]
 8020488:	429f      	cmp	r7, r3
 802048a:	d127      	bne.n	80204dc <__hexnan+0x148>
 802048c:	2301      	movs	r3, #1
 802048e:	603b      	str	r3, [r7, #0]
 8020490:	2005      	movs	r0, #5
 8020492:	b00b      	add	sp, #44	@ 0x2c
 8020494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020496:	9b03      	ldr	r3, [sp, #12]
 8020498:	3501      	adds	r5, #1
 802049a:	3301      	adds	r3, #1
 802049c:	9303      	str	r3, [sp, #12]
 802049e:	2d08      	cmp	r5, #8
 80204a0:	dd06      	ble.n	80204b0 <__hexnan+0x11c>
 80204a2:	9b01      	ldr	r3, [sp, #4]
 80204a4:	429c      	cmp	r4, r3
 80204a6:	d9ba      	bls.n	802041e <__hexnan+0x8a>
 80204a8:	2300      	movs	r3, #0
 80204aa:	2501      	movs	r5, #1
 80204ac:	3c04      	subs	r4, #4
 80204ae:	6023      	str	r3, [r4, #0]
 80204b0:	220f      	movs	r2, #15
 80204b2:	6823      	ldr	r3, [r4, #0]
 80204b4:	4010      	ands	r0, r2
 80204b6:	011b      	lsls	r3, r3, #4
 80204b8:	4303      	orrs	r3, r0
 80204ba:	6023      	str	r3, [r4, #0]
 80204bc:	e7af      	b.n	802041e <__hexnan+0x8a>
 80204be:	9b06      	ldr	r3, [sp, #24]
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d0dd      	beq.n	8020480 <__hexnan+0xec>
 80204c4:	2320      	movs	r3, #32
 80204c6:	9a06      	ldr	r2, [sp, #24]
 80204c8:	9902      	ldr	r1, [sp, #8]
 80204ca:	1a9b      	subs	r3, r3, r2
 80204cc:	2201      	movs	r2, #1
 80204ce:	4252      	negs	r2, r2
 80204d0:	40da      	lsrs	r2, r3
 80204d2:	3904      	subs	r1, #4
 80204d4:	680b      	ldr	r3, [r1, #0]
 80204d6:	4013      	ands	r3, r2
 80204d8:	600b      	str	r3, [r1, #0]
 80204da:	e7d1      	b.n	8020480 <__hexnan+0xec>
 80204dc:	3f04      	subs	r7, #4
 80204de:	e7cf      	b.n	8020480 <__hexnan+0xec>
 80204e0:	2004      	movs	r0, #4
 80204e2:	e7d6      	b.n	8020492 <__hexnan+0xfe>

080204e4 <malloc>:
 80204e4:	b510      	push	{r4, lr}
 80204e6:	4b03      	ldr	r3, [pc, #12]	@ (80204f4 <malloc+0x10>)
 80204e8:	0001      	movs	r1, r0
 80204ea:	6818      	ldr	r0, [r3, #0]
 80204ec:	f000 f826 	bl	802053c <_malloc_r>
 80204f0:	bd10      	pop	{r4, pc}
 80204f2:	46c0      	nop			@ (mov r8, r8)
 80204f4:	200003c8 	.word	0x200003c8

080204f8 <sbrk_aligned>:
 80204f8:	b570      	push	{r4, r5, r6, lr}
 80204fa:	4e0f      	ldr	r6, [pc, #60]	@ (8020538 <sbrk_aligned+0x40>)
 80204fc:	000d      	movs	r5, r1
 80204fe:	6831      	ldr	r1, [r6, #0]
 8020500:	0004      	movs	r4, r0
 8020502:	2900      	cmp	r1, #0
 8020504:	d102      	bne.n	802050c <sbrk_aligned+0x14>
 8020506:	f001 f989 	bl	802181c <_sbrk_r>
 802050a:	6030      	str	r0, [r6, #0]
 802050c:	0029      	movs	r1, r5
 802050e:	0020      	movs	r0, r4
 8020510:	f001 f984 	bl	802181c <_sbrk_r>
 8020514:	1c43      	adds	r3, r0, #1
 8020516:	d103      	bne.n	8020520 <sbrk_aligned+0x28>
 8020518:	2501      	movs	r5, #1
 802051a:	426d      	negs	r5, r5
 802051c:	0028      	movs	r0, r5
 802051e:	bd70      	pop	{r4, r5, r6, pc}
 8020520:	2303      	movs	r3, #3
 8020522:	1cc5      	adds	r5, r0, #3
 8020524:	439d      	bics	r5, r3
 8020526:	42a8      	cmp	r0, r5
 8020528:	d0f8      	beq.n	802051c <sbrk_aligned+0x24>
 802052a:	1a29      	subs	r1, r5, r0
 802052c:	0020      	movs	r0, r4
 802052e:	f001 f975 	bl	802181c <_sbrk_r>
 8020532:	3001      	adds	r0, #1
 8020534:	d1f2      	bne.n	802051c <sbrk_aligned+0x24>
 8020536:	e7ef      	b.n	8020518 <sbrk_aligned+0x20>
 8020538:	200038f8 	.word	0x200038f8

0802053c <_malloc_r>:
 802053c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802053e:	2203      	movs	r2, #3
 8020540:	1ccb      	adds	r3, r1, #3
 8020542:	4393      	bics	r3, r2
 8020544:	3308      	adds	r3, #8
 8020546:	0005      	movs	r5, r0
 8020548:	001f      	movs	r7, r3
 802054a:	2b0c      	cmp	r3, #12
 802054c:	d234      	bcs.n	80205b8 <_malloc_r+0x7c>
 802054e:	270c      	movs	r7, #12
 8020550:	42b9      	cmp	r1, r7
 8020552:	d833      	bhi.n	80205bc <_malloc_r+0x80>
 8020554:	0028      	movs	r0, r5
 8020556:	f000 f883 	bl	8020660 <__malloc_lock>
 802055a:	4e37      	ldr	r6, [pc, #220]	@ (8020638 <_malloc_r+0xfc>)
 802055c:	6833      	ldr	r3, [r6, #0]
 802055e:	001c      	movs	r4, r3
 8020560:	2c00      	cmp	r4, #0
 8020562:	d12f      	bne.n	80205c4 <_malloc_r+0x88>
 8020564:	0039      	movs	r1, r7
 8020566:	0028      	movs	r0, r5
 8020568:	f7ff ffc6 	bl	80204f8 <sbrk_aligned>
 802056c:	0004      	movs	r4, r0
 802056e:	1c43      	adds	r3, r0, #1
 8020570:	d15f      	bne.n	8020632 <_malloc_r+0xf6>
 8020572:	6834      	ldr	r4, [r6, #0]
 8020574:	9400      	str	r4, [sp, #0]
 8020576:	9b00      	ldr	r3, [sp, #0]
 8020578:	2b00      	cmp	r3, #0
 802057a:	d14a      	bne.n	8020612 <_malloc_r+0xd6>
 802057c:	2c00      	cmp	r4, #0
 802057e:	d052      	beq.n	8020626 <_malloc_r+0xea>
 8020580:	6823      	ldr	r3, [r4, #0]
 8020582:	0028      	movs	r0, r5
 8020584:	18e3      	adds	r3, r4, r3
 8020586:	9900      	ldr	r1, [sp, #0]
 8020588:	9301      	str	r3, [sp, #4]
 802058a:	f001 f947 	bl	802181c <_sbrk_r>
 802058e:	9b01      	ldr	r3, [sp, #4]
 8020590:	4283      	cmp	r3, r0
 8020592:	d148      	bne.n	8020626 <_malloc_r+0xea>
 8020594:	6823      	ldr	r3, [r4, #0]
 8020596:	0028      	movs	r0, r5
 8020598:	1aff      	subs	r7, r7, r3
 802059a:	0039      	movs	r1, r7
 802059c:	f7ff ffac 	bl	80204f8 <sbrk_aligned>
 80205a0:	3001      	adds	r0, #1
 80205a2:	d040      	beq.n	8020626 <_malloc_r+0xea>
 80205a4:	6823      	ldr	r3, [r4, #0]
 80205a6:	19db      	adds	r3, r3, r7
 80205a8:	6023      	str	r3, [r4, #0]
 80205aa:	6833      	ldr	r3, [r6, #0]
 80205ac:	685a      	ldr	r2, [r3, #4]
 80205ae:	2a00      	cmp	r2, #0
 80205b0:	d133      	bne.n	802061a <_malloc_r+0xde>
 80205b2:	9b00      	ldr	r3, [sp, #0]
 80205b4:	6033      	str	r3, [r6, #0]
 80205b6:	e019      	b.n	80205ec <_malloc_r+0xb0>
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	dac9      	bge.n	8020550 <_malloc_r+0x14>
 80205bc:	230c      	movs	r3, #12
 80205be:	602b      	str	r3, [r5, #0]
 80205c0:	2000      	movs	r0, #0
 80205c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80205c4:	6821      	ldr	r1, [r4, #0]
 80205c6:	1bc9      	subs	r1, r1, r7
 80205c8:	d420      	bmi.n	802060c <_malloc_r+0xd0>
 80205ca:	290b      	cmp	r1, #11
 80205cc:	d90a      	bls.n	80205e4 <_malloc_r+0xa8>
 80205ce:	19e2      	adds	r2, r4, r7
 80205d0:	6027      	str	r7, [r4, #0]
 80205d2:	42a3      	cmp	r3, r4
 80205d4:	d104      	bne.n	80205e0 <_malloc_r+0xa4>
 80205d6:	6032      	str	r2, [r6, #0]
 80205d8:	6863      	ldr	r3, [r4, #4]
 80205da:	6011      	str	r1, [r2, #0]
 80205dc:	6053      	str	r3, [r2, #4]
 80205de:	e005      	b.n	80205ec <_malloc_r+0xb0>
 80205e0:	605a      	str	r2, [r3, #4]
 80205e2:	e7f9      	b.n	80205d8 <_malloc_r+0x9c>
 80205e4:	6862      	ldr	r2, [r4, #4]
 80205e6:	42a3      	cmp	r3, r4
 80205e8:	d10e      	bne.n	8020608 <_malloc_r+0xcc>
 80205ea:	6032      	str	r2, [r6, #0]
 80205ec:	0028      	movs	r0, r5
 80205ee:	f000 f83f 	bl	8020670 <__malloc_unlock>
 80205f2:	0020      	movs	r0, r4
 80205f4:	2207      	movs	r2, #7
 80205f6:	300b      	adds	r0, #11
 80205f8:	1d23      	adds	r3, r4, #4
 80205fa:	4390      	bics	r0, r2
 80205fc:	1ac2      	subs	r2, r0, r3
 80205fe:	4298      	cmp	r0, r3
 8020600:	d0df      	beq.n	80205c2 <_malloc_r+0x86>
 8020602:	1a1b      	subs	r3, r3, r0
 8020604:	50a3      	str	r3, [r4, r2]
 8020606:	e7dc      	b.n	80205c2 <_malloc_r+0x86>
 8020608:	605a      	str	r2, [r3, #4]
 802060a:	e7ef      	b.n	80205ec <_malloc_r+0xb0>
 802060c:	0023      	movs	r3, r4
 802060e:	6864      	ldr	r4, [r4, #4]
 8020610:	e7a6      	b.n	8020560 <_malloc_r+0x24>
 8020612:	9c00      	ldr	r4, [sp, #0]
 8020614:	6863      	ldr	r3, [r4, #4]
 8020616:	9300      	str	r3, [sp, #0]
 8020618:	e7ad      	b.n	8020576 <_malloc_r+0x3a>
 802061a:	001a      	movs	r2, r3
 802061c:	685b      	ldr	r3, [r3, #4]
 802061e:	42a3      	cmp	r3, r4
 8020620:	d1fb      	bne.n	802061a <_malloc_r+0xde>
 8020622:	2300      	movs	r3, #0
 8020624:	e7da      	b.n	80205dc <_malloc_r+0xa0>
 8020626:	230c      	movs	r3, #12
 8020628:	0028      	movs	r0, r5
 802062a:	602b      	str	r3, [r5, #0]
 802062c:	f000 f820 	bl	8020670 <__malloc_unlock>
 8020630:	e7c6      	b.n	80205c0 <_malloc_r+0x84>
 8020632:	6007      	str	r7, [r0, #0]
 8020634:	e7da      	b.n	80205ec <_malloc_r+0xb0>
 8020636:	46c0      	nop			@ (mov r8, r8)
 8020638:	200038fc 	.word	0x200038fc

0802063c <__ascii_mbtowc>:
 802063c:	b082      	sub	sp, #8
 802063e:	2900      	cmp	r1, #0
 8020640:	d100      	bne.n	8020644 <__ascii_mbtowc+0x8>
 8020642:	a901      	add	r1, sp, #4
 8020644:	1e10      	subs	r0, r2, #0
 8020646:	d006      	beq.n	8020656 <__ascii_mbtowc+0x1a>
 8020648:	2b00      	cmp	r3, #0
 802064a:	d006      	beq.n	802065a <__ascii_mbtowc+0x1e>
 802064c:	7813      	ldrb	r3, [r2, #0]
 802064e:	600b      	str	r3, [r1, #0]
 8020650:	7810      	ldrb	r0, [r2, #0]
 8020652:	1e43      	subs	r3, r0, #1
 8020654:	4198      	sbcs	r0, r3
 8020656:	b002      	add	sp, #8
 8020658:	4770      	bx	lr
 802065a:	2002      	movs	r0, #2
 802065c:	4240      	negs	r0, r0
 802065e:	e7fa      	b.n	8020656 <__ascii_mbtowc+0x1a>

08020660 <__malloc_lock>:
 8020660:	b510      	push	{r4, lr}
 8020662:	4802      	ldr	r0, [pc, #8]	@ (802066c <__malloc_lock+0xc>)
 8020664:	f7fe fcfb 	bl	801f05e <__retarget_lock_acquire_recursive>
 8020668:	bd10      	pop	{r4, pc}
 802066a:	46c0      	nop			@ (mov r8, r8)
 802066c:	200038f4 	.word	0x200038f4

08020670 <__malloc_unlock>:
 8020670:	b510      	push	{r4, lr}
 8020672:	4802      	ldr	r0, [pc, #8]	@ (802067c <__malloc_unlock+0xc>)
 8020674:	f7fe fcf4 	bl	801f060 <__retarget_lock_release_recursive>
 8020678:	bd10      	pop	{r4, pc}
 802067a:	46c0      	nop			@ (mov r8, r8)
 802067c:	200038f4 	.word	0x200038f4

08020680 <_Balloc>:
 8020680:	b570      	push	{r4, r5, r6, lr}
 8020682:	69c5      	ldr	r5, [r0, #28]
 8020684:	0006      	movs	r6, r0
 8020686:	000c      	movs	r4, r1
 8020688:	2d00      	cmp	r5, #0
 802068a:	d10e      	bne.n	80206aa <_Balloc+0x2a>
 802068c:	2010      	movs	r0, #16
 802068e:	f7ff ff29 	bl	80204e4 <malloc>
 8020692:	1e02      	subs	r2, r0, #0
 8020694:	61f0      	str	r0, [r6, #28]
 8020696:	d104      	bne.n	80206a2 <_Balloc+0x22>
 8020698:	216b      	movs	r1, #107	@ 0x6b
 802069a:	4b19      	ldr	r3, [pc, #100]	@ (8020700 <_Balloc+0x80>)
 802069c:	4819      	ldr	r0, [pc, #100]	@ (8020704 <_Balloc+0x84>)
 802069e:	f001 f8cf 	bl	8021840 <__assert_func>
 80206a2:	6045      	str	r5, [r0, #4]
 80206a4:	6085      	str	r5, [r0, #8]
 80206a6:	6005      	str	r5, [r0, #0]
 80206a8:	60c5      	str	r5, [r0, #12]
 80206aa:	69f5      	ldr	r5, [r6, #28]
 80206ac:	68eb      	ldr	r3, [r5, #12]
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	d013      	beq.n	80206da <_Balloc+0x5a>
 80206b2:	69f3      	ldr	r3, [r6, #28]
 80206b4:	00a2      	lsls	r2, r4, #2
 80206b6:	68db      	ldr	r3, [r3, #12]
 80206b8:	189b      	adds	r3, r3, r2
 80206ba:	6818      	ldr	r0, [r3, #0]
 80206bc:	2800      	cmp	r0, #0
 80206be:	d118      	bne.n	80206f2 <_Balloc+0x72>
 80206c0:	2101      	movs	r1, #1
 80206c2:	000d      	movs	r5, r1
 80206c4:	40a5      	lsls	r5, r4
 80206c6:	1d6a      	adds	r2, r5, #5
 80206c8:	0030      	movs	r0, r6
 80206ca:	0092      	lsls	r2, r2, #2
 80206cc:	f001 f8d6 	bl	802187c <_calloc_r>
 80206d0:	2800      	cmp	r0, #0
 80206d2:	d00c      	beq.n	80206ee <_Balloc+0x6e>
 80206d4:	6044      	str	r4, [r0, #4]
 80206d6:	6085      	str	r5, [r0, #8]
 80206d8:	e00d      	b.n	80206f6 <_Balloc+0x76>
 80206da:	2221      	movs	r2, #33	@ 0x21
 80206dc:	2104      	movs	r1, #4
 80206de:	0030      	movs	r0, r6
 80206e0:	f001 f8cc 	bl	802187c <_calloc_r>
 80206e4:	69f3      	ldr	r3, [r6, #28]
 80206e6:	60e8      	str	r0, [r5, #12]
 80206e8:	68db      	ldr	r3, [r3, #12]
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	d1e1      	bne.n	80206b2 <_Balloc+0x32>
 80206ee:	2000      	movs	r0, #0
 80206f0:	bd70      	pop	{r4, r5, r6, pc}
 80206f2:	6802      	ldr	r2, [r0, #0]
 80206f4:	601a      	str	r2, [r3, #0]
 80206f6:	2300      	movs	r3, #0
 80206f8:	6103      	str	r3, [r0, #16]
 80206fa:	60c3      	str	r3, [r0, #12]
 80206fc:	e7f8      	b.n	80206f0 <_Balloc+0x70>
 80206fe:	46c0      	nop			@ (mov r8, r8)
 8020700:	080242aa 	.word	0x080242aa
 8020704:	0802438a 	.word	0x0802438a

08020708 <_Bfree>:
 8020708:	b570      	push	{r4, r5, r6, lr}
 802070a:	69c6      	ldr	r6, [r0, #28]
 802070c:	0005      	movs	r5, r0
 802070e:	000c      	movs	r4, r1
 8020710:	2e00      	cmp	r6, #0
 8020712:	d10e      	bne.n	8020732 <_Bfree+0x2a>
 8020714:	2010      	movs	r0, #16
 8020716:	f7ff fee5 	bl	80204e4 <malloc>
 802071a:	1e02      	subs	r2, r0, #0
 802071c:	61e8      	str	r0, [r5, #28]
 802071e:	d104      	bne.n	802072a <_Bfree+0x22>
 8020720:	218f      	movs	r1, #143	@ 0x8f
 8020722:	4b09      	ldr	r3, [pc, #36]	@ (8020748 <_Bfree+0x40>)
 8020724:	4809      	ldr	r0, [pc, #36]	@ (802074c <_Bfree+0x44>)
 8020726:	f001 f88b 	bl	8021840 <__assert_func>
 802072a:	6046      	str	r6, [r0, #4]
 802072c:	6086      	str	r6, [r0, #8]
 802072e:	6006      	str	r6, [r0, #0]
 8020730:	60c6      	str	r6, [r0, #12]
 8020732:	2c00      	cmp	r4, #0
 8020734:	d007      	beq.n	8020746 <_Bfree+0x3e>
 8020736:	69eb      	ldr	r3, [r5, #28]
 8020738:	6862      	ldr	r2, [r4, #4]
 802073a:	68db      	ldr	r3, [r3, #12]
 802073c:	0092      	lsls	r2, r2, #2
 802073e:	189b      	adds	r3, r3, r2
 8020740:	681a      	ldr	r2, [r3, #0]
 8020742:	6022      	str	r2, [r4, #0]
 8020744:	601c      	str	r4, [r3, #0]
 8020746:	bd70      	pop	{r4, r5, r6, pc}
 8020748:	080242aa 	.word	0x080242aa
 802074c:	0802438a 	.word	0x0802438a

08020750 <__multadd>:
 8020750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020752:	000f      	movs	r7, r1
 8020754:	9001      	str	r0, [sp, #4]
 8020756:	000c      	movs	r4, r1
 8020758:	001e      	movs	r6, r3
 802075a:	2000      	movs	r0, #0
 802075c:	690d      	ldr	r5, [r1, #16]
 802075e:	3714      	adds	r7, #20
 8020760:	683b      	ldr	r3, [r7, #0]
 8020762:	3001      	adds	r0, #1
 8020764:	b299      	uxth	r1, r3
 8020766:	4351      	muls	r1, r2
 8020768:	0c1b      	lsrs	r3, r3, #16
 802076a:	4353      	muls	r3, r2
 802076c:	1989      	adds	r1, r1, r6
 802076e:	0c0e      	lsrs	r6, r1, #16
 8020770:	199b      	adds	r3, r3, r6
 8020772:	0c1e      	lsrs	r6, r3, #16
 8020774:	b289      	uxth	r1, r1
 8020776:	041b      	lsls	r3, r3, #16
 8020778:	185b      	adds	r3, r3, r1
 802077a:	c708      	stmia	r7!, {r3}
 802077c:	4285      	cmp	r5, r0
 802077e:	dcef      	bgt.n	8020760 <__multadd+0x10>
 8020780:	2e00      	cmp	r6, #0
 8020782:	d022      	beq.n	80207ca <__multadd+0x7a>
 8020784:	68a3      	ldr	r3, [r4, #8]
 8020786:	42ab      	cmp	r3, r5
 8020788:	dc19      	bgt.n	80207be <__multadd+0x6e>
 802078a:	6861      	ldr	r1, [r4, #4]
 802078c:	9801      	ldr	r0, [sp, #4]
 802078e:	3101      	adds	r1, #1
 8020790:	f7ff ff76 	bl	8020680 <_Balloc>
 8020794:	1e07      	subs	r7, r0, #0
 8020796:	d105      	bne.n	80207a4 <__multadd+0x54>
 8020798:	003a      	movs	r2, r7
 802079a:	21ba      	movs	r1, #186	@ 0xba
 802079c:	4b0c      	ldr	r3, [pc, #48]	@ (80207d0 <__multadd+0x80>)
 802079e:	480d      	ldr	r0, [pc, #52]	@ (80207d4 <__multadd+0x84>)
 80207a0:	f001 f84e 	bl	8021840 <__assert_func>
 80207a4:	0021      	movs	r1, r4
 80207a6:	6922      	ldr	r2, [r4, #16]
 80207a8:	310c      	adds	r1, #12
 80207aa:	3202      	adds	r2, #2
 80207ac:	0092      	lsls	r2, r2, #2
 80207ae:	300c      	adds	r0, #12
 80207b0:	f7fe fc62 	bl	801f078 <memcpy>
 80207b4:	0021      	movs	r1, r4
 80207b6:	9801      	ldr	r0, [sp, #4]
 80207b8:	f7ff ffa6 	bl	8020708 <_Bfree>
 80207bc:	003c      	movs	r4, r7
 80207be:	1d2b      	adds	r3, r5, #4
 80207c0:	009b      	lsls	r3, r3, #2
 80207c2:	18e3      	adds	r3, r4, r3
 80207c4:	3501      	adds	r5, #1
 80207c6:	605e      	str	r6, [r3, #4]
 80207c8:	6125      	str	r5, [r4, #16]
 80207ca:	0020      	movs	r0, r4
 80207cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80207ce:	46c0      	nop			@ (mov r8, r8)
 80207d0:	08024319 	.word	0x08024319
 80207d4:	0802438a 	.word	0x0802438a

080207d8 <__s2b>:
 80207d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80207da:	0007      	movs	r7, r0
 80207dc:	0018      	movs	r0, r3
 80207de:	000c      	movs	r4, r1
 80207e0:	3008      	adds	r0, #8
 80207e2:	2109      	movs	r1, #9
 80207e4:	9301      	str	r3, [sp, #4]
 80207e6:	0015      	movs	r5, r2
 80207e8:	f7df fd66 	bl	80002b8 <__divsi3>
 80207ec:	2301      	movs	r3, #1
 80207ee:	2100      	movs	r1, #0
 80207f0:	4283      	cmp	r3, r0
 80207f2:	db0a      	blt.n	802080a <__s2b+0x32>
 80207f4:	0038      	movs	r0, r7
 80207f6:	f7ff ff43 	bl	8020680 <_Balloc>
 80207fa:	1e01      	subs	r1, r0, #0
 80207fc:	d108      	bne.n	8020810 <__s2b+0x38>
 80207fe:	000a      	movs	r2, r1
 8020800:	4b19      	ldr	r3, [pc, #100]	@ (8020868 <__s2b+0x90>)
 8020802:	481a      	ldr	r0, [pc, #104]	@ (802086c <__s2b+0x94>)
 8020804:	31d3      	adds	r1, #211	@ 0xd3
 8020806:	f001 f81b 	bl	8021840 <__assert_func>
 802080a:	005b      	lsls	r3, r3, #1
 802080c:	3101      	adds	r1, #1
 802080e:	e7ef      	b.n	80207f0 <__s2b+0x18>
 8020810:	9b08      	ldr	r3, [sp, #32]
 8020812:	6143      	str	r3, [r0, #20]
 8020814:	2301      	movs	r3, #1
 8020816:	6103      	str	r3, [r0, #16]
 8020818:	2d09      	cmp	r5, #9
 802081a:	dd18      	ble.n	802084e <__s2b+0x76>
 802081c:	0023      	movs	r3, r4
 802081e:	3309      	adds	r3, #9
 8020820:	001e      	movs	r6, r3
 8020822:	9300      	str	r3, [sp, #0]
 8020824:	1964      	adds	r4, r4, r5
 8020826:	7833      	ldrb	r3, [r6, #0]
 8020828:	220a      	movs	r2, #10
 802082a:	0038      	movs	r0, r7
 802082c:	3b30      	subs	r3, #48	@ 0x30
 802082e:	f7ff ff8f 	bl	8020750 <__multadd>
 8020832:	3601      	adds	r6, #1
 8020834:	0001      	movs	r1, r0
 8020836:	42a6      	cmp	r6, r4
 8020838:	d1f5      	bne.n	8020826 <__s2b+0x4e>
 802083a:	002c      	movs	r4, r5
 802083c:	9b00      	ldr	r3, [sp, #0]
 802083e:	3c08      	subs	r4, #8
 8020840:	191c      	adds	r4, r3, r4
 8020842:	002e      	movs	r6, r5
 8020844:	9b01      	ldr	r3, [sp, #4]
 8020846:	429e      	cmp	r6, r3
 8020848:	db04      	blt.n	8020854 <__s2b+0x7c>
 802084a:	0008      	movs	r0, r1
 802084c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802084e:	2509      	movs	r5, #9
 8020850:	340a      	adds	r4, #10
 8020852:	e7f6      	b.n	8020842 <__s2b+0x6a>
 8020854:	1b63      	subs	r3, r4, r5
 8020856:	5d9b      	ldrb	r3, [r3, r6]
 8020858:	220a      	movs	r2, #10
 802085a:	0038      	movs	r0, r7
 802085c:	3b30      	subs	r3, #48	@ 0x30
 802085e:	f7ff ff77 	bl	8020750 <__multadd>
 8020862:	3601      	adds	r6, #1
 8020864:	0001      	movs	r1, r0
 8020866:	e7ed      	b.n	8020844 <__s2b+0x6c>
 8020868:	08024319 	.word	0x08024319
 802086c:	0802438a 	.word	0x0802438a

08020870 <__hi0bits>:
 8020870:	2280      	movs	r2, #128	@ 0x80
 8020872:	0003      	movs	r3, r0
 8020874:	0252      	lsls	r2, r2, #9
 8020876:	2000      	movs	r0, #0
 8020878:	4293      	cmp	r3, r2
 802087a:	d201      	bcs.n	8020880 <__hi0bits+0x10>
 802087c:	041b      	lsls	r3, r3, #16
 802087e:	3010      	adds	r0, #16
 8020880:	2280      	movs	r2, #128	@ 0x80
 8020882:	0452      	lsls	r2, r2, #17
 8020884:	4293      	cmp	r3, r2
 8020886:	d201      	bcs.n	802088c <__hi0bits+0x1c>
 8020888:	3008      	adds	r0, #8
 802088a:	021b      	lsls	r3, r3, #8
 802088c:	2280      	movs	r2, #128	@ 0x80
 802088e:	0552      	lsls	r2, r2, #21
 8020890:	4293      	cmp	r3, r2
 8020892:	d201      	bcs.n	8020898 <__hi0bits+0x28>
 8020894:	3004      	adds	r0, #4
 8020896:	011b      	lsls	r3, r3, #4
 8020898:	2280      	movs	r2, #128	@ 0x80
 802089a:	05d2      	lsls	r2, r2, #23
 802089c:	4293      	cmp	r3, r2
 802089e:	d201      	bcs.n	80208a4 <__hi0bits+0x34>
 80208a0:	3002      	adds	r0, #2
 80208a2:	009b      	lsls	r3, r3, #2
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	db03      	blt.n	80208b0 <__hi0bits+0x40>
 80208a8:	3001      	adds	r0, #1
 80208aa:	4213      	tst	r3, r2
 80208ac:	d100      	bne.n	80208b0 <__hi0bits+0x40>
 80208ae:	2020      	movs	r0, #32
 80208b0:	4770      	bx	lr

080208b2 <__lo0bits>:
 80208b2:	6803      	ldr	r3, [r0, #0]
 80208b4:	0001      	movs	r1, r0
 80208b6:	2207      	movs	r2, #7
 80208b8:	0018      	movs	r0, r3
 80208ba:	4010      	ands	r0, r2
 80208bc:	4213      	tst	r3, r2
 80208be:	d00d      	beq.n	80208dc <__lo0bits+0x2a>
 80208c0:	3a06      	subs	r2, #6
 80208c2:	2000      	movs	r0, #0
 80208c4:	4213      	tst	r3, r2
 80208c6:	d105      	bne.n	80208d4 <__lo0bits+0x22>
 80208c8:	3002      	adds	r0, #2
 80208ca:	4203      	tst	r3, r0
 80208cc:	d003      	beq.n	80208d6 <__lo0bits+0x24>
 80208ce:	40d3      	lsrs	r3, r2
 80208d0:	0010      	movs	r0, r2
 80208d2:	600b      	str	r3, [r1, #0]
 80208d4:	4770      	bx	lr
 80208d6:	089b      	lsrs	r3, r3, #2
 80208d8:	600b      	str	r3, [r1, #0]
 80208da:	e7fb      	b.n	80208d4 <__lo0bits+0x22>
 80208dc:	b29a      	uxth	r2, r3
 80208de:	2a00      	cmp	r2, #0
 80208e0:	d101      	bne.n	80208e6 <__lo0bits+0x34>
 80208e2:	2010      	movs	r0, #16
 80208e4:	0c1b      	lsrs	r3, r3, #16
 80208e6:	b2da      	uxtb	r2, r3
 80208e8:	2a00      	cmp	r2, #0
 80208ea:	d101      	bne.n	80208f0 <__lo0bits+0x3e>
 80208ec:	3008      	adds	r0, #8
 80208ee:	0a1b      	lsrs	r3, r3, #8
 80208f0:	071a      	lsls	r2, r3, #28
 80208f2:	d101      	bne.n	80208f8 <__lo0bits+0x46>
 80208f4:	3004      	adds	r0, #4
 80208f6:	091b      	lsrs	r3, r3, #4
 80208f8:	079a      	lsls	r2, r3, #30
 80208fa:	d101      	bne.n	8020900 <__lo0bits+0x4e>
 80208fc:	3002      	adds	r0, #2
 80208fe:	089b      	lsrs	r3, r3, #2
 8020900:	07da      	lsls	r2, r3, #31
 8020902:	d4e9      	bmi.n	80208d8 <__lo0bits+0x26>
 8020904:	3001      	adds	r0, #1
 8020906:	085b      	lsrs	r3, r3, #1
 8020908:	d1e6      	bne.n	80208d8 <__lo0bits+0x26>
 802090a:	2020      	movs	r0, #32
 802090c:	e7e2      	b.n	80208d4 <__lo0bits+0x22>
	...

08020910 <__i2b>:
 8020910:	b510      	push	{r4, lr}
 8020912:	000c      	movs	r4, r1
 8020914:	2101      	movs	r1, #1
 8020916:	f7ff feb3 	bl	8020680 <_Balloc>
 802091a:	2800      	cmp	r0, #0
 802091c:	d107      	bne.n	802092e <__i2b+0x1e>
 802091e:	2146      	movs	r1, #70	@ 0x46
 8020920:	4c05      	ldr	r4, [pc, #20]	@ (8020938 <__i2b+0x28>)
 8020922:	0002      	movs	r2, r0
 8020924:	4b05      	ldr	r3, [pc, #20]	@ (802093c <__i2b+0x2c>)
 8020926:	0020      	movs	r0, r4
 8020928:	31ff      	adds	r1, #255	@ 0xff
 802092a:	f000 ff89 	bl	8021840 <__assert_func>
 802092e:	2301      	movs	r3, #1
 8020930:	6144      	str	r4, [r0, #20]
 8020932:	6103      	str	r3, [r0, #16]
 8020934:	bd10      	pop	{r4, pc}
 8020936:	46c0      	nop			@ (mov r8, r8)
 8020938:	0802438a 	.word	0x0802438a
 802093c:	08024319 	.word	0x08024319

08020940 <__multiply>:
 8020940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020942:	0014      	movs	r4, r2
 8020944:	690a      	ldr	r2, [r1, #16]
 8020946:	6923      	ldr	r3, [r4, #16]
 8020948:	000d      	movs	r5, r1
 802094a:	b08b      	sub	sp, #44	@ 0x2c
 802094c:	429a      	cmp	r2, r3
 802094e:	db02      	blt.n	8020956 <__multiply+0x16>
 8020950:	0023      	movs	r3, r4
 8020952:	000c      	movs	r4, r1
 8020954:	001d      	movs	r5, r3
 8020956:	6927      	ldr	r7, [r4, #16]
 8020958:	692e      	ldr	r6, [r5, #16]
 802095a:	6861      	ldr	r1, [r4, #4]
 802095c:	19bb      	adds	r3, r7, r6
 802095e:	9303      	str	r3, [sp, #12]
 8020960:	68a3      	ldr	r3, [r4, #8]
 8020962:	19ba      	adds	r2, r7, r6
 8020964:	4293      	cmp	r3, r2
 8020966:	da00      	bge.n	802096a <__multiply+0x2a>
 8020968:	3101      	adds	r1, #1
 802096a:	f7ff fe89 	bl	8020680 <_Balloc>
 802096e:	9002      	str	r0, [sp, #8]
 8020970:	2800      	cmp	r0, #0
 8020972:	d106      	bne.n	8020982 <__multiply+0x42>
 8020974:	21b1      	movs	r1, #177	@ 0xb1
 8020976:	4b49      	ldr	r3, [pc, #292]	@ (8020a9c <__multiply+0x15c>)
 8020978:	4849      	ldr	r0, [pc, #292]	@ (8020aa0 <__multiply+0x160>)
 802097a:	9a02      	ldr	r2, [sp, #8]
 802097c:	0049      	lsls	r1, r1, #1
 802097e:	f000 ff5f 	bl	8021840 <__assert_func>
 8020982:	9b02      	ldr	r3, [sp, #8]
 8020984:	2200      	movs	r2, #0
 8020986:	3314      	adds	r3, #20
 8020988:	469c      	mov	ip, r3
 802098a:	19bb      	adds	r3, r7, r6
 802098c:	009b      	lsls	r3, r3, #2
 802098e:	4463      	add	r3, ip
 8020990:	9304      	str	r3, [sp, #16]
 8020992:	4663      	mov	r3, ip
 8020994:	9904      	ldr	r1, [sp, #16]
 8020996:	428b      	cmp	r3, r1
 8020998:	d32a      	bcc.n	80209f0 <__multiply+0xb0>
 802099a:	0023      	movs	r3, r4
 802099c:	00bf      	lsls	r7, r7, #2
 802099e:	3314      	adds	r3, #20
 80209a0:	3514      	adds	r5, #20
 80209a2:	9308      	str	r3, [sp, #32]
 80209a4:	00b6      	lsls	r6, r6, #2
 80209a6:	19db      	adds	r3, r3, r7
 80209a8:	9305      	str	r3, [sp, #20]
 80209aa:	19ab      	adds	r3, r5, r6
 80209ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80209ae:	2304      	movs	r3, #4
 80209b0:	9306      	str	r3, [sp, #24]
 80209b2:	0023      	movs	r3, r4
 80209b4:	9a05      	ldr	r2, [sp, #20]
 80209b6:	3315      	adds	r3, #21
 80209b8:	9501      	str	r5, [sp, #4]
 80209ba:	429a      	cmp	r2, r3
 80209bc:	d305      	bcc.n	80209ca <__multiply+0x8a>
 80209be:	1b13      	subs	r3, r2, r4
 80209c0:	3b15      	subs	r3, #21
 80209c2:	089b      	lsrs	r3, r3, #2
 80209c4:	3301      	adds	r3, #1
 80209c6:	009b      	lsls	r3, r3, #2
 80209c8:	9306      	str	r3, [sp, #24]
 80209ca:	9b01      	ldr	r3, [sp, #4]
 80209cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80209ce:	4293      	cmp	r3, r2
 80209d0:	d310      	bcc.n	80209f4 <__multiply+0xb4>
 80209d2:	9b03      	ldr	r3, [sp, #12]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	dd05      	ble.n	80209e4 <__multiply+0xa4>
 80209d8:	9b04      	ldr	r3, [sp, #16]
 80209da:	3b04      	subs	r3, #4
 80209dc:	9304      	str	r3, [sp, #16]
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d056      	beq.n	8020a92 <__multiply+0x152>
 80209e4:	9b02      	ldr	r3, [sp, #8]
 80209e6:	9a03      	ldr	r2, [sp, #12]
 80209e8:	0018      	movs	r0, r3
 80209ea:	611a      	str	r2, [r3, #16]
 80209ec:	b00b      	add	sp, #44	@ 0x2c
 80209ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209f0:	c304      	stmia	r3!, {r2}
 80209f2:	e7cf      	b.n	8020994 <__multiply+0x54>
 80209f4:	9b01      	ldr	r3, [sp, #4]
 80209f6:	6818      	ldr	r0, [r3, #0]
 80209f8:	b280      	uxth	r0, r0
 80209fa:	2800      	cmp	r0, #0
 80209fc:	d01e      	beq.n	8020a3c <__multiply+0xfc>
 80209fe:	4667      	mov	r7, ip
 8020a00:	2500      	movs	r5, #0
 8020a02:	9e08      	ldr	r6, [sp, #32]
 8020a04:	ce02      	ldmia	r6!, {r1}
 8020a06:	683b      	ldr	r3, [r7, #0]
 8020a08:	9307      	str	r3, [sp, #28]
 8020a0a:	b28b      	uxth	r3, r1
 8020a0c:	4343      	muls	r3, r0
 8020a0e:	001a      	movs	r2, r3
 8020a10:	466b      	mov	r3, sp
 8020a12:	0c09      	lsrs	r1, r1, #16
 8020a14:	8b9b      	ldrh	r3, [r3, #28]
 8020a16:	4341      	muls	r1, r0
 8020a18:	18d3      	adds	r3, r2, r3
 8020a1a:	9a07      	ldr	r2, [sp, #28]
 8020a1c:	195b      	adds	r3, r3, r5
 8020a1e:	0c12      	lsrs	r2, r2, #16
 8020a20:	1889      	adds	r1, r1, r2
 8020a22:	0c1a      	lsrs	r2, r3, #16
 8020a24:	188a      	adds	r2, r1, r2
 8020a26:	b29b      	uxth	r3, r3
 8020a28:	0c15      	lsrs	r5, r2, #16
 8020a2a:	0412      	lsls	r2, r2, #16
 8020a2c:	431a      	orrs	r2, r3
 8020a2e:	9b05      	ldr	r3, [sp, #20]
 8020a30:	c704      	stmia	r7!, {r2}
 8020a32:	42b3      	cmp	r3, r6
 8020a34:	d8e6      	bhi.n	8020a04 <__multiply+0xc4>
 8020a36:	4663      	mov	r3, ip
 8020a38:	9a06      	ldr	r2, [sp, #24]
 8020a3a:	509d      	str	r5, [r3, r2]
 8020a3c:	9b01      	ldr	r3, [sp, #4]
 8020a3e:	6818      	ldr	r0, [r3, #0]
 8020a40:	0c00      	lsrs	r0, r0, #16
 8020a42:	d020      	beq.n	8020a86 <__multiply+0x146>
 8020a44:	4663      	mov	r3, ip
 8020a46:	0025      	movs	r5, r4
 8020a48:	4661      	mov	r1, ip
 8020a4a:	2700      	movs	r7, #0
 8020a4c:	681b      	ldr	r3, [r3, #0]
 8020a4e:	3514      	adds	r5, #20
 8020a50:	682a      	ldr	r2, [r5, #0]
 8020a52:	680e      	ldr	r6, [r1, #0]
 8020a54:	b292      	uxth	r2, r2
 8020a56:	4342      	muls	r2, r0
 8020a58:	0c36      	lsrs	r6, r6, #16
 8020a5a:	1992      	adds	r2, r2, r6
 8020a5c:	19d2      	adds	r2, r2, r7
 8020a5e:	0416      	lsls	r6, r2, #16
 8020a60:	b29b      	uxth	r3, r3
 8020a62:	431e      	orrs	r6, r3
 8020a64:	600e      	str	r6, [r1, #0]
 8020a66:	cd40      	ldmia	r5!, {r6}
 8020a68:	684b      	ldr	r3, [r1, #4]
 8020a6a:	0c36      	lsrs	r6, r6, #16
 8020a6c:	4346      	muls	r6, r0
 8020a6e:	b29b      	uxth	r3, r3
 8020a70:	0c12      	lsrs	r2, r2, #16
 8020a72:	18f3      	adds	r3, r6, r3
 8020a74:	189b      	adds	r3, r3, r2
 8020a76:	9a05      	ldr	r2, [sp, #20]
 8020a78:	0c1f      	lsrs	r7, r3, #16
 8020a7a:	3104      	adds	r1, #4
 8020a7c:	42aa      	cmp	r2, r5
 8020a7e:	d8e7      	bhi.n	8020a50 <__multiply+0x110>
 8020a80:	4662      	mov	r2, ip
 8020a82:	9906      	ldr	r1, [sp, #24]
 8020a84:	5053      	str	r3, [r2, r1]
 8020a86:	9b01      	ldr	r3, [sp, #4]
 8020a88:	3304      	adds	r3, #4
 8020a8a:	9301      	str	r3, [sp, #4]
 8020a8c:	2304      	movs	r3, #4
 8020a8e:	449c      	add	ip, r3
 8020a90:	e79b      	b.n	80209ca <__multiply+0x8a>
 8020a92:	9b03      	ldr	r3, [sp, #12]
 8020a94:	3b01      	subs	r3, #1
 8020a96:	9303      	str	r3, [sp, #12]
 8020a98:	e79b      	b.n	80209d2 <__multiply+0x92>
 8020a9a:	46c0      	nop			@ (mov r8, r8)
 8020a9c:	08024319 	.word	0x08024319
 8020aa0:	0802438a 	.word	0x0802438a

08020aa4 <__pow5mult>:
 8020aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020aa6:	2303      	movs	r3, #3
 8020aa8:	0015      	movs	r5, r2
 8020aaa:	0007      	movs	r7, r0
 8020aac:	000e      	movs	r6, r1
 8020aae:	401a      	ands	r2, r3
 8020ab0:	421d      	tst	r5, r3
 8020ab2:	d008      	beq.n	8020ac6 <__pow5mult+0x22>
 8020ab4:	4925      	ldr	r1, [pc, #148]	@ (8020b4c <__pow5mult+0xa8>)
 8020ab6:	3a01      	subs	r2, #1
 8020ab8:	0092      	lsls	r2, r2, #2
 8020aba:	5852      	ldr	r2, [r2, r1]
 8020abc:	2300      	movs	r3, #0
 8020abe:	0031      	movs	r1, r6
 8020ac0:	f7ff fe46 	bl	8020750 <__multadd>
 8020ac4:	0006      	movs	r6, r0
 8020ac6:	10ad      	asrs	r5, r5, #2
 8020ac8:	d03d      	beq.n	8020b46 <__pow5mult+0xa2>
 8020aca:	69fc      	ldr	r4, [r7, #28]
 8020acc:	2c00      	cmp	r4, #0
 8020ace:	d10f      	bne.n	8020af0 <__pow5mult+0x4c>
 8020ad0:	2010      	movs	r0, #16
 8020ad2:	f7ff fd07 	bl	80204e4 <malloc>
 8020ad6:	1e02      	subs	r2, r0, #0
 8020ad8:	61f8      	str	r0, [r7, #28]
 8020ada:	d105      	bne.n	8020ae8 <__pow5mult+0x44>
 8020adc:	21b4      	movs	r1, #180	@ 0xb4
 8020ade:	4b1c      	ldr	r3, [pc, #112]	@ (8020b50 <__pow5mult+0xac>)
 8020ae0:	481c      	ldr	r0, [pc, #112]	@ (8020b54 <__pow5mult+0xb0>)
 8020ae2:	31ff      	adds	r1, #255	@ 0xff
 8020ae4:	f000 feac 	bl	8021840 <__assert_func>
 8020ae8:	6044      	str	r4, [r0, #4]
 8020aea:	6084      	str	r4, [r0, #8]
 8020aec:	6004      	str	r4, [r0, #0]
 8020aee:	60c4      	str	r4, [r0, #12]
 8020af0:	69fb      	ldr	r3, [r7, #28]
 8020af2:	689c      	ldr	r4, [r3, #8]
 8020af4:	9301      	str	r3, [sp, #4]
 8020af6:	2c00      	cmp	r4, #0
 8020af8:	d108      	bne.n	8020b0c <__pow5mult+0x68>
 8020afa:	0038      	movs	r0, r7
 8020afc:	4916      	ldr	r1, [pc, #88]	@ (8020b58 <__pow5mult+0xb4>)
 8020afe:	f7ff ff07 	bl	8020910 <__i2b>
 8020b02:	9b01      	ldr	r3, [sp, #4]
 8020b04:	0004      	movs	r4, r0
 8020b06:	6098      	str	r0, [r3, #8]
 8020b08:	2300      	movs	r3, #0
 8020b0a:	6003      	str	r3, [r0, #0]
 8020b0c:	2301      	movs	r3, #1
 8020b0e:	421d      	tst	r5, r3
 8020b10:	d00a      	beq.n	8020b28 <__pow5mult+0x84>
 8020b12:	0031      	movs	r1, r6
 8020b14:	0022      	movs	r2, r4
 8020b16:	0038      	movs	r0, r7
 8020b18:	f7ff ff12 	bl	8020940 <__multiply>
 8020b1c:	0031      	movs	r1, r6
 8020b1e:	9001      	str	r0, [sp, #4]
 8020b20:	0038      	movs	r0, r7
 8020b22:	f7ff fdf1 	bl	8020708 <_Bfree>
 8020b26:	9e01      	ldr	r6, [sp, #4]
 8020b28:	106d      	asrs	r5, r5, #1
 8020b2a:	d00c      	beq.n	8020b46 <__pow5mult+0xa2>
 8020b2c:	6820      	ldr	r0, [r4, #0]
 8020b2e:	2800      	cmp	r0, #0
 8020b30:	d107      	bne.n	8020b42 <__pow5mult+0x9e>
 8020b32:	0022      	movs	r2, r4
 8020b34:	0021      	movs	r1, r4
 8020b36:	0038      	movs	r0, r7
 8020b38:	f7ff ff02 	bl	8020940 <__multiply>
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	6020      	str	r0, [r4, #0]
 8020b40:	6003      	str	r3, [r0, #0]
 8020b42:	0004      	movs	r4, r0
 8020b44:	e7e2      	b.n	8020b0c <__pow5mult+0x68>
 8020b46:	0030      	movs	r0, r6
 8020b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020b4a:	46c0      	nop			@ (mov r8, r8)
 8020b4c:	080243e4 	.word	0x080243e4
 8020b50:	080242aa 	.word	0x080242aa
 8020b54:	0802438a 	.word	0x0802438a
 8020b58:	00000271 	.word	0x00000271

08020b5c <__lshift>:
 8020b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b5e:	000c      	movs	r4, r1
 8020b60:	0016      	movs	r6, r2
 8020b62:	6923      	ldr	r3, [r4, #16]
 8020b64:	1157      	asrs	r7, r2, #5
 8020b66:	b085      	sub	sp, #20
 8020b68:	18fb      	adds	r3, r7, r3
 8020b6a:	9301      	str	r3, [sp, #4]
 8020b6c:	3301      	adds	r3, #1
 8020b6e:	9300      	str	r3, [sp, #0]
 8020b70:	6849      	ldr	r1, [r1, #4]
 8020b72:	68a3      	ldr	r3, [r4, #8]
 8020b74:	9002      	str	r0, [sp, #8]
 8020b76:	9a00      	ldr	r2, [sp, #0]
 8020b78:	4293      	cmp	r3, r2
 8020b7a:	db10      	blt.n	8020b9e <__lshift+0x42>
 8020b7c:	9802      	ldr	r0, [sp, #8]
 8020b7e:	f7ff fd7f 	bl	8020680 <_Balloc>
 8020b82:	2300      	movs	r3, #0
 8020b84:	0001      	movs	r1, r0
 8020b86:	0005      	movs	r5, r0
 8020b88:	001a      	movs	r2, r3
 8020b8a:	3114      	adds	r1, #20
 8020b8c:	4298      	cmp	r0, r3
 8020b8e:	d10c      	bne.n	8020baa <__lshift+0x4e>
 8020b90:	21ef      	movs	r1, #239	@ 0xef
 8020b92:	002a      	movs	r2, r5
 8020b94:	4b25      	ldr	r3, [pc, #148]	@ (8020c2c <__lshift+0xd0>)
 8020b96:	4826      	ldr	r0, [pc, #152]	@ (8020c30 <__lshift+0xd4>)
 8020b98:	0049      	lsls	r1, r1, #1
 8020b9a:	f000 fe51 	bl	8021840 <__assert_func>
 8020b9e:	3101      	adds	r1, #1
 8020ba0:	005b      	lsls	r3, r3, #1
 8020ba2:	e7e8      	b.n	8020b76 <__lshift+0x1a>
 8020ba4:	0098      	lsls	r0, r3, #2
 8020ba6:	500a      	str	r2, [r1, r0]
 8020ba8:	3301      	adds	r3, #1
 8020baa:	42bb      	cmp	r3, r7
 8020bac:	dbfa      	blt.n	8020ba4 <__lshift+0x48>
 8020bae:	43fb      	mvns	r3, r7
 8020bb0:	17db      	asrs	r3, r3, #31
 8020bb2:	401f      	ands	r7, r3
 8020bb4:	00bf      	lsls	r7, r7, #2
 8020bb6:	0023      	movs	r3, r4
 8020bb8:	201f      	movs	r0, #31
 8020bba:	19c9      	adds	r1, r1, r7
 8020bbc:	0037      	movs	r7, r6
 8020bbe:	6922      	ldr	r2, [r4, #16]
 8020bc0:	3314      	adds	r3, #20
 8020bc2:	0092      	lsls	r2, r2, #2
 8020bc4:	189a      	adds	r2, r3, r2
 8020bc6:	4007      	ands	r7, r0
 8020bc8:	4206      	tst	r6, r0
 8020bca:	d029      	beq.n	8020c20 <__lshift+0xc4>
 8020bcc:	3001      	adds	r0, #1
 8020bce:	1bc0      	subs	r0, r0, r7
 8020bd0:	9003      	str	r0, [sp, #12]
 8020bd2:	468c      	mov	ip, r1
 8020bd4:	2000      	movs	r0, #0
 8020bd6:	681e      	ldr	r6, [r3, #0]
 8020bd8:	40be      	lsls	r6, r7
 8020bda:	4306      	orrs	r6, r0
 8020bdc:	4660      	mov	r0, ip
 8020bde:	c040      	stmia	r0!, {r6}
 8020be0:	4684      	mov	ip, r0
 8020be2:	9e03      	ldr	r6, [sp, #12]
 8020be4:	cb01      	ldmia	r3!, {r0}
 8020be6:	40f0      	lsrs	r0, r6
 8020be8:	429a      	cmp	r2, r3
 8020bea:	d8f4      	bhi.n	8020bd6 <__lshift+0x7a>
 8020bec:	0026      	movs	r6, r4
 8020bee:	3615      	adds	r6, #21
 8020bf0:	2304      	movs	r3, #4
 8020bf2:	42b2      	cmp	r2, r6
 8020bf4:	d304      	bcc.n	8020c00 <__lshift+0xa4>
 8020bf6:	1b13      	subs	r3, r2, r4
 8020bf8:	3b15      	subs	r3, #21
 8020bfa:	089b      	lsrs	r3, r3, #2
 8020bfc:	3301      	adds	r3, #1
 8020bfe:	009b      	lsls	r3, r3, #2
 8020c00:	50c8      	str	r0, [r1, r3]
 8020c02:	2800      	cmp	r0, #0
 8020c04:	d002      	beq.n	8020c0c <__lshift+0xb0>
 8020c06:	9b01      	ldr	r3, [sp, #4]
 8020c08:	3302      	adds	r3, #2
 8020c0a:	9300      	str	r3, [sp, #0]
 8020c0c:	9b00      	ldr	r3, [sp, #0]
 8020c0e:	9802      	ldr	r0, [sp, #8]
 8020c10:	3b01      	subs	r3, #1
 8020c12:	0021      	movs	r1, r4
 8020c14:	612b      	str	r3, [r5, #16]
 8020c16:	f7ff fd77 	bl	8020708 <_Bfree>
 8020c1a:	0028      	movs	r0, r5
 8020c1c:	b005      	add	sp, #20
 8020c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c20:	cb01      	ldmia	r3!, {r0}
 8020c22:	c101      	stmia	r1!, {r0}
 8020c24:	429a      	cmp	r2, r3
 8020c26:	d8fb      	bhi.n	8020c20 <__lshift+0xc4>
 8020c28:	e7f0      	b.n	8020c0c <__lshift+0xb0>
 8020c2a:	46c0      	nop			@ (mov r8, r8)
 8020c2c:	08024319 	.word	0x08024319
 8020c30:	0802438a 	.word	0x0802438a

08020c34 <__mcmp>:
 8020c34:	b530      	push	{r4, r5, lr}
 8020c36:	690b      	ldr	r3, [r1, #16]
 8020c38:	6904      	ldr	r4, [r0, #16]
 8020c3a:	0002      	movs	r2, r0
 8020c3c:	1ae0      	subs	r0, r4, r3
 8020c3e:	429c      	cmp	r4, r3
 8020c40:	d10f      	bne.n	8020c62 <__mcmp+0x2e>
 8020c42:	3214      	adds	r2, #20
 8020c44:	009b      	lsls	r3, r3, #2
 8020c46:	3114      	adds	r1, #20
 8020c48:	0014      	movs	r4, r2
 8020c4a:	18c9      	adds	r1, r1, r3
 8020c4c:	18d2      	adds	r2, r2, r3
 8020c4e:	3a04      	subs	r2, #4
 8020c50:	3904      	subs	r1, #4
 8020c52:	6815      	ldr	r5, [r2, #0]
 8020c54:	680b      	ldr	r3, [r1, #0]
 8020c56:	429d      	cmp	r5, r3
 8020c58:	d004      	beq.n	8020c64 <__mcmp+0x30>
 8020c5a:	2001      	movs	r0, #1
 8020c5c:	429d      	cmp	r5, r3
 8020c5e:	d200      	bcs.n	8020c62 <__mcmp+0x2e>
 8020c60:	3802      	subs	r0, #2
 8020c62:	bd30      	pop	{r4, r5, pc}
 8020c64:	4294      	cmp	r4, r2
 8020c66:	d3f2      	bcc.n	8020c4e <__mcmp+0x1a>
 8020c68:	e7fb      	b.n	8020c62 <__mcmp+0x2e>
	...

08020c6c <__mdiff>:
 8020c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c6e:	000c      	movs	r4, r1
 8020c70:	b087      	sub	sp, #28
 8020c72:	9000      	str	r0, [sp, #0]
 8020c74:	0011      	movs	r1, r2
 8020c76:	0020      	movs	r0, r4
 8020c78:	0017      	movs	r7, r2
 8020c7a:	f7ff ffdb 	bl	8020c34 <__mcmp>
 8020c7e:	1e05      	subs	r5, r0, #0
 8020c80:	d110      	bne.n	8020ca4 <__mdiff+0x38>
 8020c82:	0001      	movs	r1, r0
 8020c84:	9800      	ldr	r0, [sp, #0]
 8020c86:	f7ff fcfb 	bl	8020680 <_Balloc>
 8020c8a:	1e02      	subs	r2, r0, #0
 8020c8c:	d104      	bne.n	8020c98 <__mdiff+0x2c>
 8020c8e:	4b40      	ldr	r3, [pc, #256]	@ (8020d90 <__mdiff+0x124>)
 8020c90:	4840      	ldr	r0, [pc, #256]	@ (8020d94 <__mdiff+0x128>)
 8020c92:	4941      	ldr	r1, [pc, #260]	@ (8020d98 <__mdiff+0x12c>)
 8020c94:	f000 fdd4 	bl	8021840 <__assert_func>
 8020c98:	2301      	movs	r3, #1
 8020c9a:	6145      	str	r5, [r0, #20]
 8020c9c:	6103      	str	r3, [r0, #16]
 8020c9e:	0010      	movs	r0, r2
 8020ca0:	b007      	add	sp, #28
 8020ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ca4:	2600      	movs	r6, #0
 8020ca6:	42b0      	cmp	r0, r6
 8020ca8:	da03      	bge.n	8020cb2 <__mdiff+0x46>
 8020caa:	0023      	movs	r3, r4
 8020cac:	003c      	movs	r4, r7
 8020cae:	001f      	movs	r7, r3
 8020cb0:	3601      	adds	r6, #1
 8020cb2:	6861      	ldr	r1, [r4, #4]
 8020cb4:	9800      	ldr	r0, [sp, #0]
 8020cb6:	f7ff fce3 	bl	8020680 <_Balloc>
 8020cba:	1e02      	subs	r2, r0, #0
 8020cbc:	d103      	bne.n	8020cc6 <__mdiff+0x5a>
 8020cbe:	4b34      	ldr	r3, [pc, #208]	@ (8020d90 <__mdiff+0x124>)
 8020cc0:	4834      	ldr	r0, [pc, #208]	@ (8020d94 <__mdiff+0x128>)
 8020cc2:	4936      	ldr	r1, [pc, #216]	@ (8020d9c <__mdiff+0x130>)
 8020cc4:	e7e6      	b.n	8020c94 <__mdiff+0x28>
 8020cc6:	6923      	ldr	r3, [r4, #16]
 8020cc8:	3414      	adds	r4, #20
 8020cca:	9300      	str	r3, [sp, #0]
 8020ccc:	009b      	lsls	r3, r3, #2
 8020cce:	18e3      	adds	r3, r4, r3
 8020cd0:	0021      	movs	r1, r4
 8020cd2:	9401      	str	r4, [sp, #4]
 8020cd4:	003c      	movs	r4, r7
 8020cd6:	9302      	str	r3, [sp, #8]
 8020cd8:	693b      	ldr	r3, [r7, #16]
 8020cda:	3414      	adds	r4, #20
 8020cdc:	009b      	lsls	r3, r3, #2
 8020cde:	18e3      	adds	r3, r4, r3
 8020ce0:	9303      	str	r3, [sp, #12]
 8020ce2:	0003      	movs	r3, r0
 8020ce4:	60c6      	str	r6, [r0, #12]
 8020ce6:	468c      	mov	ip, r1
 8020ce8:	2000      	movs	r0, #0
 8020cea:	3314      	adds	r3, #20
 8020cec:	9304      	str	r3, [sp, #16]
 8020cee:	9305      	str	r3, [sp, #20]
 8020cf0:	4663      	mov	r3, ip
 8020cf2:	cb20      	ldmia	r3!, {r5}
 8020cf4:	b2a9      	uxth	r1, r5
 8020cf6:	000e      	movs	r6, r1
 8020cf8:	469c      	mov	ip, r3
 8020cfa:	cc08      	ldmia	r4!, {r3}
 8020cfc:	0c2d      	lsrs	r5, r5, #16
 8020cfe:	b299      	uxth	r1, r3
 8020d00:	1a71      	subs	r1, r6, r1
 8020d02:	1809      	adds	r1, r1, r0
 8020d04:	0c1b      	lsrs	r3, r3, #16
 8020d06:	1408      	asrs	r0, r1, #16
 8020d08:	1aeb      	subs	r3, r5, r3
 8020d0a:	181b      	adds	r3, r3, r0
 8020d0c:	1418      	asrs	r0, r3, #16
 8020d0e:	b289      	uxth	r1, r1
 8020d10:	041b      	lsls	r3, r3, #16
 8020d12:	4319      	orrs	r1, r3
 8020d14:	9b05      	ldr	r3, [sp, #20]
 8020d16:	c302      	stmia	r3!, {r1}
 8020d18:	9305      	str	r3, [sp, #20]
 8020d1a:	9b03      	ldr	r3, [sp, #12]
 8020d1c:	42a3      	cmp	r3, r4
 8020d1e:	d8e7      	bhi.n	8020cf0 <__mdiff+0x84>
 8020d20:	0039      	movs	r1, r7
 8020d22:	9c03      	ldr	r4, [sp, #12]
 8020d24:	3115      	adds	r1, #21
 8020d26:	2304      	movs	r3, #4
 8020d28:	428c      	cmp	r4, r1
 8020d2a:	d304      	bcc.n	8020d36 <__mdiff+0xca>
 8020d2c:	1be3      	subs	r3, r4, r7
 8020d2e:	3b15      	subs	r3, #21
 8020d30:	089b      	lsrs	r3, r3, #2
 8020d32:	3301      	adds	r3, #1
 8020d34:	009b      	lsls	r3, r3, #2
 8020d36:	9901      	ldr	r1, [sp, #4]
 8020d38:	18cd      	adds	r5, r1, r3
 8020d3a:	9904      	ldr	r1, [sp, #16]
 8020d3c:	002e      	movs	r6, r5
 8020d3e:	18cb      	adds	r3, r1, r3
 8020d40:	001f      	movs	r7, r3
 8020d42:	9902      	ldr	r1, [sp, #8]
 8020d44:	428e      	cmp	r6, r1
 8020d46:	d311      	bcc.n	8020d6c <__mdiff+0x100>
 8020d48:	9c02      	ldr	r4, [sp, #8]
 8020d4a:	1ee9      	subs	r1, r5, #3
 8020d4c:	2000      	movs	r0, #0
 8020d4e:	428c      	cmp	r4, r1
 8020d50:	d304      	bcc.n	8020d5c <__mdiff+0xf0>
 8020d52:	0021      	movs	r1, r4
 8020d54:	3103      	adds	r1, #3
 8020d56:	1b49      	subs	r1, r1, r5
 8020d58:	0889      	lsrs	r1, r1, #2
 8020d5a:	0088      	lsls	r0, r1, #2
 8020d5c:	181b      	adds	r3, r3, r0
 8020d5e:	3b04      	subs	r3, #4
 8020d60:	6819      	ldr	r1, [r3, #0]
 8020d62:	2900      	cmp	r1, #0
 8020d64:	d010      	beq.n	8020d88 <__mdiff+0x11c>
 8020d66:	9b00      	ldr	r3, [sp, #0]
 8020d68:	6113      	str	r3, [r2, #16]
 8020d6a:	e798      	b.n	8020c9e <__mdiff+0x32>
 8020d6c:	4684      	mov	ip, r0
 8020d6e:	ce02      	ldmia	r6!, {r1}
 8020d70:	b288      	uxth	r0, r1
 8020d72:	4460      	add	r0, ip
 8020d74:	1400      	asrs	r0, r0, #16
 8020d76:	0c0c      	lsrs	r4, r1, #16
 8020d78:	1904      	adds	r4, r0, r4
 8020d7a:	4461      	add	r1, ip
 8020d7c:	1420      	asrs	r0, r4, #16
 8020d7e:	b289      	uxth	r1, r1
 8020d80:	0424      	lsls	r4, r4, #16
 8020d82:	4321      	orrs	r1, r4
 8020d84:	c702      	stmia	r7!, {r1}
 8020d86:	e7dc      	b.n	8020d42 <__mdiff+0xd6>
 8020d88:	9900      	ldr	r1, [sp, #0]
 8020d8a:	3901      	subs	r1, #1
 8020d8c:	9100      	str	r1, [sp, #0]
 8020d8e:	e7e6      	b.n	8020d5e <__mdiff+0xf2>
 8020d90:	08024319 	.word	0x08024319
 8020d94:	0802438a 	.word	0x0802438a
 8020d98:	00000237 	.word	0x00000237
 8020d9c:	00000245 	.word	0x00000245

08020da0 <__ulp>:
 8020da0:	b510      	push	{r4, lr}
 8020da2:	2400      	movs	r4, #0
 8020da4:	4b0c      	ldr	r3, [pc, #48]	@ (8020dd8 <__ulp+0x38>)
 8020da6:	4a0d      	ldr	r2, [pc, #52]	@ (8020ddc <__ulp+0x3c>)
 8020da8:	400b      	ands	r3, r1
 8020daa:	189b      	adds	r3, r3, r2
 8020dac:	42a3      	cmp	r3, r4
 8020dae:	dc06      	bgt.n	8020dbe <__ulp+0x1e>
 8020db0:	425b      	negs	r3, r3
 8020db2:	151a      	asrs	r2, r3, #20
 8020db4:	2a13      	cmp	r2, #19
 8020db6:	dc05      	bgt.n	8020dc4 <__ulp+0x24>
 8020db8:	2380      	movs	r3, #128	@ 0x80
 8020dba:	031b      	lsls	r3, r3, #12
 8020dbc:	4113      	asrs	r3, r2
 8020dbe:	0019      	movs	r1, r3
 8020dc0:	0020      	movs	r0, r4
 8020dc2:	bd10      	pop	{r4, pc}
 8020dc4:	3a14      	subs	r2, #20
 8020dc6:	2401      	movs	r4, #1
 8020dc8:	2a1e      	cmp	r2, #30
 8020dca:	dc02      	bgt.n	8020dd2 <__ulp+0x32>
 8020dcc:	2480      	movs	r4, #128	@ 0x80
 8020dce:	0624      	lsls	r4, r4, #24
 8020dd0:	40d4      	lsrs	r4, r2
 8020dd2:	2300      	movs	r3, #0
 8020dd4:	e7f3      	b.n	8020dbe <__ulp+0x1e>
 8020dd6:	46c0      	nop			@ (mov r8, r8)
 8020dd8:	7ff00000 	.word	0x7ff00000
 8020ddc:	fcc00000 	.word	0xfcc00000

08020de0 <__b2d>:
 8020de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020de2:	0006      	movs	r6, r0
 8020de4:	6903      	ldr	r3, [r0, #16]
 8020de6:	3614      	adds	r6, #20
 8020de8:	009b      	lsls	r3, r3, #2
 8020dea:	18f3      	adds	r3, r6, r3
 8020dec:	1f1d      	subs	r5, r3, #4
 8020dee:	682c      	ldr	r4, [r5, #0]
 8020df0:	000f      	movs	r7, r1
 8020df2:	0020      	movs	r0, r4
 8020df4:	9301      	str	r3, [sp, #4]
 8020df6:	f7ff fd3b 	bl	8020870 <__hi0bits>
 8020dfa:	2220      	movs	r2, #32
 8020dfc:	1a12      	subs	r2, r2, r0
 8020dfe:	603a      	str	r2, [r7, #0]
 8020e00:	0003      	movs	r3, r0
 8020e02:	4a1c      	ldr	r2, [pc, #112]	@ (8020e74 <__b2d+0x94>)
 8020e04:	280a      	cmp	r0, #10
 8020e06:	dc15      	bgt.n	8020e34 <__b2d+0x54>
 8020e08:	210b      	movs	r1, #11
 8020e0a:	0027      	movs	r7, r4
 8020e0c:	1a09      	subs	r1, r1, r0
 8020e0e:	40cf      	lsrs	r7, r1
 8020e10:	433a      	orrs	r2, r7
 8020e12:	468c      	mov	ip, r1
 8020e14:	0011      	movs	r1, r2
 8020e16:	2200      	movs	r2, #0
 8020e18:	42ae      	cmp	r6, r5
 8020e1a:	d202      	bcs.n	8020e22 <__b2d+0x42>
 8020e1c:	9a01      	ldr	r2, [sp, #4]
 8020e1e:	3a08      	subs	r2, #8
 8020e20:	6812      	ldr	r2, [r2, #0]
 8020e22:	3315      	adds	r3, #21
 8020e24:	409c      	lsls	r4, r3
 8020e26:	4663      	mov	r3, ip
 8020e28:	0027      	movs	r7, r4
 8020e2a:	40da      	lsrs	r2, r3
 8020e2c:	4317      	orrs	r7, r2
 8020e2e:	0038      	movs	r0, r7
 8020e30:	b003      	add	sp, #12
 8020e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e34:	2700      	movs	r7, #0
 8020e36:	42ae      	cmp	r6, r5
 8020e38:	d202      	bcs.n	8020e40 <__b2d+0x60>
 8020e3a:	9d01      	ldr	r5, [sp, #4]
 8020e3c:	3d08      	subs	r5, #8
 8020e3e:	682f      	ldr	r7, [r5, #0]
 8020e40:	210b      	movs	r1, #11
 8020e42:	4249      	negs	r1, r1
 8020e44:	468c      	mov	ip, r1
 8020e46:	449c      	add	ip, r3
 8020e48:	2b0b      	cmp	r3, #11
 8020e4a:	d010      	beq.n	8020e6e <__b2d+0x8e>
 8020e4c:	4661      	mov	r1, ip
 8020e4e:	2320      	movs	r3, #32
 8020e50:	408c      	lsls	r4, r1
 8020e52:	1a5b      	subs	r3, r3, r1
 8020e54:	0039      	movs	r1, r7
 8020e56:	40d9      	lsrs	r1, r3
 8020e58:	430c      	orrs	r4, r1
 8020e5a:	4322      	orrs	r2, r4
 8020e5c:	0011      	movs	r1, r2
 8020e5e:	2200      	movs	r2, #0
 8020e60:	42b5      	cmp	r5, r6
 8020e62:	d901      	bls.n	8020e68 <__b2d+0x88>
 8020e64:	3d04      	subs	r5, #4
 8020e66:	682a      	ldr	r2, [r5, #0]
 8020e68:	4664      	mov	r4, ip
 8020e6a:	40a7      	lsls	r7, r4
 8020e6c:	e7dd      	b.n	8020e2a <__b2d+0x4a>
 8020e6e:	4322      	orrs	r2, r4
 8020e70:	0011      	movs	r1, r2
 8020e72:	e7dc      	b.n	8020e2e <__b2d+0x4e>
 8020e74:	3ff00000 	.word	0x3ff00000

08020e78 <__d2b>:
 8020e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020e7a:	2101      	movs	r1, #1
 8020e7c:	0016      	movs	r6, r2
 8020e7e:	001f      	movs	r7, r3
 8020e80:	f7ff fbfe 	bl	8020680 <_Balloc>
 8020e84:	1e04      	subs	r4, r0, #0
 8020e86:	d105      	bne.n	8020e94 <__d2b+0x1c>
 8020e88:	0022      	movs	r2, r4
 8020e8a:	4b25      	ldr	r3, [pc, #148]	@ (8020f20 <__d2b+0xa8>)
 8020e8c:	4825      	ldr	r0, [pc, #148]	@ (8020f24 <__d2b+0xac>)
 8020e8e:	4926      	ldr	r1, [pc, #152]	@ (8020f28 <__d2b+0xb0>)
 8020e90:	f000 fcd6 	bl	8021840 <__assert_func>
 8020e94:	033b      	lsls	r3, r7, #12
 8020e96:	007d      	lsls	r5, r7, #1
 8020e98:	0b1b      	lsrs	r3, r3, #12
 8020e9a:	0d6d      	lsrs	r5, r5, #21
 8020e9c:	d002      	beq.n	8020ea4 <__d2b+0x2c>
 8020e9e:	2280      	movs	r2, #128	@ 0x80
 8020ea0:	0352      	lsls	r2, r2, #13
 8020ea2:	4313      	orrs	r3, r2
 8020ea4:	9301      	str	r3, [sp, #4]
 8020ea6:	2e00      	cmp	r6, #0
 8020ea8:	d025      	beq.n	8020ef6 <__d2b+0x7e>
 8020eaa:	4668      	mov	r0, sp
 8020eac:	9600      	str	r6, [sp, #0]
 8020eae:	f7ff fd00 	bl	80208b2 <__lo0bits>
 8020eb2:	9b01      	ldr	r3, [sp, #4]
 8020eb4:	9900      	ldr	r1, [sp, #0]
 8020eb6:	2800      	cmp	r0, #0
 8020eb8:	d01b      	beq.n	8020ef2 <__d2b+0x7a>
 8020eba:	2220      	movs	r2, #32
 8020ebc:	001e      	movs	r6, r3
 8020ebe:	1a12      	subs	r2, r2, r0
 8020ec0:	4096      	lsls	r6, r2
 8020ec2:	0032      	movs	r2, r6
 8020ec4:	40c3      	lsrs	r3, r0
 8020ec6:	430a      	orrs	r2, r1
 8020ec8:	6162      	str	r2, [r4, #20]
 8020eca:	9301      	str	r3, [sp, #4]
 8020ecc:	9e01      	ldr	r6, [sp, #4]
 8020ece:	61a6      	str	r6, [r4, #24]
 8020ed0:	1e73      	subs	r3, r6, #1
 8020ed2:	419e      	sbcs	r6, r3
 8020ed4:	3601      	adds	r6, #1
 8020ed6:	6126      	str	r6, [r4, #16]
 8020ed8:	2d00      	cmp	r5, #0
 8020eda:	d014      	beq.n	8020f06 <__d2b+0x8e>
 8020edc:	2635      	movs	r6, #53	@ 0x35
 8020ede:	4b13      	ldr	r3, [pc, #76]	@ (8020f2c <__d2b+0xb4>)
 8020ee0:	18ed      	adds	r5, r5, r3
 8020ee2:	9b08      	ldr	r3, [sp, #32]
 8020ee4:	182d      	adds	r5, r5, r0
 8020ee6:	601d      	str	r5, [r3, #0]
 8020ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020eea:	1a36      	subs	r6, r6, r0
 8020eec:	601e      	str	r6, [r3, #0]
 8020eee:	0020      	movs	r0, r4
 8020ef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020ef2:	6161      	str	r1, [r4, #20]
 8020ef4:	e7ea      	b.n	8020ecc <__d2b+0x54>
 8020ef6:	a801      	add	r0, sp, #4
 8020ef8:	f7ff fcdb 	bl	80208b2 <__lo0bits>
 8020efc:	9b01      	ldr	r3, [sp, #4]
 8020efe:	2601      	movs	r6, #1
 8020f00:	6163      	str	r3, [r4, #20]
 8020f02:	3020      	adds	r0, #32
 8020f04:	e7e7      	b.n	8020ed6 <__d2b+0x5e>
 8020f06:	4b0a      	ldr	r3, [pc, #40]	@ (8020f30 <__d2b+0xb8>)
 8020f08:	18c0      	adds	r0, r0, r3
 8020f0a:	9b08      	ldr	r3, [sp, #32]
 8020f0c:	6018      	str	r0, [r3, #0]
 8020f0e:	4b09      	ldr	r3, [pc, #36]	@ (8020f34 <__d2b+0xbc>)
 8020f10:	18f3      	adds	r3, r6, r3
 8020f12:	009b      	lsls	r3, r3, #2
 8020f14:	18e3      	adds	r3, r4, r3
 8020f16:	6958      	ldr	r0, [r3, #20]
 8020f18:	f7ff fcaa 	bl	8020870 <__hi0bits>
 8020f1c:	0176      	lsls	r6, r6, #5
 8020f1e:	e7e3      	b.n	8020ee8 <__d2b+0x70>
 8020f20:	08024319 	.word	0x08024319
 8020f24:	0802438a 	.word	0x0802438a
 8020f28:	0000030f 	.word	0x0000030f
 8020f2c:	fffffbcd 	.word	0xfffffbcd
 8020f30:	fffffbce 	.word	0xfffffbce
 8020f34:	3fffffff 	.word	0x3fffffff

08020f38 <__ratio>:
 8020f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f3a:	b087      	sub	sp, #28
 8020f3c:	000f      	movs	r7, r1
 8020f3e:	a904      	add	r1, sp, #16
 8020f40:	0006      	movs	r6, r0
 8020f42:	f7ff ff4d 	bl	8020de0 <__b2d>
 8020f46:	9000      	str	r0, [sp, #0]
 8020f48:	9101      	str	r1, [sp, #4]
 8020f4a:	9b00      	ldr	r3, [sp, #0]
 8020f4c:	9c01      	ldr	r4, [sp, #4]
 8020f4e:	0038      	movs	r0, r7
 8020f50:	a905      	add	r1, sp, #20
 8020f52:	9302      	str	r3, [sp, #8]
 8020f54:	9403      	str	r4, [sp, #12]
 8020f56:	f7ff ff43 	bl	8020de0 <__b2d>
 8020f5a:	000d      	movs	r5, r1
 8020f5c:	0002      	movs	r2, r0
 8020f5e:	000b      	movs	r3, r1
 8020f60:	6930      	ldr	r0, [r6, #16]
 8020f62:	6939      	ldr	r1, [r7, #16]
 8020f64:	9e04      	ldr	r6, [sp, #16]
 8020f66:	1a40      	subs	r0, r0, r1
 8020f68:	9905      	ldr	r1, [sp, #20]
 8020f6a:	0140      	lsls	r0, r0, #5
 8020f6c:	1a71      	subs	r1, r6, r1
 8020f6e:	1841      	adds	r1, r0, r1
 8020f70:	0508      	lsls	r0, r1, #20
 8020f72:	2900      	cmp	r1, #0
 8020f74:	dd08      	ble.n	8020f88 <__ratio+0x50>
 8020f76:	9901      	ldr	r1, [sp, #4]
 8020f78:	1841      	adds	r1, r0, r1
 8020f7a:	9103      	str	r1, [sp, #12]
 8020f7c:	9802      	ldr	r0, [sp, #8]
 8020f7e:	9903      	ldr	r1, [sp, #12]
 8020f80:	f7e0 ff18 	bl	8001db4 <__aeabi_ddiv>
 8020f84:	b007      	add	sp, #28
 8020f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f88:	1a2b      	subs	r3, r5, r0
 8020f8a:	e7f7      	b.n	8020f7c <__ratio+0x44>

08020f8c <__copybits>:
 8020f8c:	b570      	push	{r4, r5, r6, lr}
 8020f8e:	0014      	movs	r4, r2
 8020f90:	0005      	movs	r5, r0
 8020f92:	3901      	subs	r1, #1
 8020f94:	6913      	ldr	r3, [r2, #16]
 8020f96:	1149      	asrs	r1, r1, #5
 8020f98:	3101      	adds	r1, #1
 8020f9a:	0089      	lsls	r1, r1, #2
 8020f9c:	3414      	adds	r4, #20
 8020f9e:	009b      	lsls	r3, r3, #2
 8020fa0:	1841      	adds	r1, r0, r1
 8020fa2:	18e3      	adds	r3, r4, r3
 8020fa4:	42a3      	cmp	r3, r4
 8020fa6:	d80d      	bhi.n	8020fc4 <__copybits+0x38>
 8020fa8:	0014      	movs	r4, r2
 8020faa:	3411      	adds	r4, #17
 8020fac:	2500      	movs	r5, #0
 8020fae:	429c      	cmp	r4, r3
 8020fb0:	d803      	bhi.n	8020fba <__copybits+0x2e>
 8020fb2:	1a9b      	subs	r3, r3, r2
 8020fb4:	3b11      	subs	r3, #17
 8020fb6:	089b      	lsrs	r3, r3, #2
 8020fb8:	009d      	lsls	r5, r3, #2
 8020fba:	2300      	movs	r3, #0
 8020fbc:	1940      	adds	r0, r0, r5
 8020fbe:	4281      	cmp	r1, r0
 8020fc0:	d803      	bhi.n	8020fca <__copybits+0x3e>
 8020fc2:	bd70      	pop	{r4, r5, r6, pc}
 8020fc4:	cc40      	ldmia	r4!, {r6}
 8020fc6:	c540      	stmia	r5!, {r6}
 8020fc8:	e7ec      	b.n	8020fa4 <__copybits+0x18>
 8020fca:	c008      	stmia	r0!, {r3}
 8020fcc:	e7f7      	b.n	8020fbe <__copybits+0x32>

08020fce <__any_on>:
 8020fce:	0002      	movs	r2, r0
 8020fd0:	6900      	ldr	r0, [r0, #16]
 8020fd2:	b510      	push	{r4, lr}
 8020fd4:	3214      	adds	r2, #20
 8020fd6:	114b      	asrs	r3, r1, #5
 8020fd8:	4298      	cmp	r0, r3
 8020fda:	db13      	blt.n	8021004 <__any_on+0x36>
 8020fdc:	dd0c      	ble.n	8020ff8 <__any_on+0x2a>
 8020fde:	241f      	movs	r4, #31
 8020fe0:	0008      	movs	r0, r1
 8020fe2:	4020      	ands	r0, r4
 8020fe4:	4221      	tst	r1, r4
 8020fe6:	d007      	beq.n	8020ff8 <__any_on+0x2a>
 8020fe8:	0099      	lsls	r1, r3, #2
 8020fea:	588c      	ldr	r4, [r1, r2]
 8020fec:	0021      	movs	r1, r4
 8020fee:	40c1      	lsrs	r1, r0
 8020ff0:	4081      	lsls	r1, r0
 8020ff2:	2001      	movs	r0, #1
 8020ff4:	428c      	cmp	r4, r1
 8020ff6:	d104      	bne.n	8021002 <__any_on+0x34>
 8020ff8:	009b      	lsls	r3, r3, #2
 8020ffa:	18d3      	adds	r3, r2, r3
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	d803      	bhi.n	8021008 <__any_on+0x3a>
 8021000:	2000      	movs	r0, #0
 8021002:	bd10      	pop	{r4, pc}
 8021004:	0003      	movs	r3, r0
 8021006:	e7f7      	b.n	8020ff8 <__any_on+0x2a>
 8021008:	3b04      	subs	r3, #4
 802100a:	6819      	ldr	r1, [r3, #0]
 802100c:	2900      	cmp	r1, #0
 802100e:	d0f5      	beq.n	8020ffc <__any_on+0x2e>
 8021010:	2001      	movs	r0, #1
 8021012:	e7f6      	b.n	8021002 <__any_on+0x34>

08021014 <__ascii_wctomb>:
 8021014:	0003      	movs	r3, r0
 8021016:	1e08      	subs	r0, r1, #0
 8021018:	d005      	beq.n	8021026 <__ascii_wctomb+0x12>
 802101a:	2aff      	cmp	r2, #255	@ 0xff
 802101c:	d904      	bls.n	8021028 <__ascii_wctomb+0x14>
 802101e:	228a      	movs	r2, #138	@ 0x8a
 8021020:	2001      	movs	r0, #1
 8021022:	601a      	str	r2, [r3, #0]
 8021024:	4240      	negs	r0, r0
 8021026:	4770      	bx	lr
 8021028:	2001      	movs	r0, #1
 802102a:	700a      	strb	r2, [r1, #0]
 802102c:	e7fb      	b.n	8021026 <__ascii_wctomb+0x12>
	...

08021030 <__ssputs_r>:
 8021030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021032:	688e      	ldr	r6, [r1, #8]
 8021034:	b085      	sub	sp, #20
 8021036:	001f      	movs	r7, r3
 8021038:	000c      	movs	r4, r1
 802103a:	680b      	ldr	r3, [r1, #0]
 802103c:	9002      	str	r0, [sp, #8]
 802103e:	9203      	str	r2, [sp, #12]
 8021040:	42be      	cmp	r6, r7
 8021042:	d830      	bhi.n	80210a6 <__ssputs_r+0x76>
 8021044:	210c      	movs	r1, #12
 8021046:	5e62      	ldrsh	r2, [r4, r1]
 8021048:	2190      	movs	r1, #144	@ 0x90
 802104a:	00c9      	lsls	r1, r1, #3
 802104c:	420a      	tst	r2, r1
 802104e:	d028      	beq.n	80210a2 <__ssputs_r+0x72>
 8021050:	2003      	movs	r0, #3
 8021052:	6921      	ldr	r1, [r4, #16]
 8021054:	1a5b      	subs	r3, r3, r1
 8021056:	9301      	str	r3, [sp, #4]
 8021058:	6963      	ldr	r3, [r4, #20]
 802105a:	4343      	muls	r3, r0
 802105c:	9801      	ldr	r0, [sp, #4]
 802105e:	0fdd      	lsrs	r5, r3, #31
 8021060:	18ed      	adds	r5, r5, r3
 8021062:	1c7b      	adds	r3, r7, #1
 8021064:	181b      	adds	r3, r3, r0
 8021066:	106d      	asrs	r5, r5, #1
 8021068:	42ab      	cmp	r3, r5
 802106a:	d900      	bls.n	802106e <__ssputs_r+0x3e>
 802106c:	001d      	movs	r5, r3
 802106e:	0552      	lsls	r2, r2, #21
 8021070:	d528      	bpl.n	80210c4 <__ssputs_r+0x94>
 8021072:	0029      	movs	r1, r5
 8021074:	9802      	ldr	r0, [sp, #8]
 8021076:	f7ff fa61 	bl	802053c <_malloc_r>
 802107a:	1e06      	subs	r6, r0, #0
 802107c:	d02c      	beq.n	80210d8 <__ssputs_r+0xa8>
 802107e:	9a01      	ldr	r2, [sp, #4]
 8021080:	6921      	ldr	r1, [r4, #16]
 8021082:	f7fd fff9 	bl	801f078 <memcpy>
 8021086:	89a2      	ldrh	r2, [r4, #12]
 8021088:	4b18      	ldr	r3, [pc, #96]	@ (80210ec <__ssputs_r+0xbc>)
 802108a:	401a      	ands	r2, r3
 802108c:	2380      	movs	r3, #128	@ 0x80
 802108e:	4313      	orrs	r3, r2
 8021090:	81a3      	strh	r3, [r4, #12]
 8021092:	9b01      	ldr	r3, [sp, #4]
 8021094:	6126      	str	r6, [r4, #16]
 8021096:	18f6      	adds	r6, r6, r3
 8021098:	6026      	str	r6, [r4, #0]
 802109a:	003e      	movs	r6, r7
 802109c:	6165      	str	r5, [r4, #20]
 802109e:	1aed      	subs	r5, r5, r3
 80210a0:	60a5      	str	r5, [r4, #8]
 80210a2:	42be      	cmp	r6, r7
 80210a4:	d900      	bls.n	80210a8 <__ssputs_r+0x78>
 80210a6:	003e      	movs	r6, r7
 80210a8:	0032      	movs	r2, r6
 80210aa:	9903      	ldr	r1, [sp, #12]
 80210ac:	6820      	ldr	r0, [r4, #0]
 80210ae:	f000 fb7e 	bl	80217ae <memmove>
 80210b2:	2000      	movs	r0, #0
 80210b4:	68a3      	ldr	r3, [r4, #8]
 80210b6:	1b9b      	subs	r3, r3, r6
 80210b8:	60a3      	str	r3, [r4, #8]
 80210ba:	6823      	ldr	r3, [r4, #0]
 80210bc:	199b      	adds	r3, r3, r6
 80210be:	6023      	str	r3, [r4, #0]
 80210c0:	b005      	add	sp, #20
 80210c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210c4:	002a      	movs	r2, r5
 80210c6:	9802      	ldr	r0, [sp, #8]
 80210c8:	f000 fc05 	bl	80218d6 <_realloc_r>
 80210cc:	1e06      	subs	r6, r0, #0
 80210ce:	d1e0      	bne.n	8021092 <__ssputs_r+0x62>
 80210d0:	6921      	ldr	r1, [r4, #16]
 80210d2:	9802      	ldr	r0, [sp, #8]
 80210d4:	f7fe fe62 	bl	801fd9c <_free_r>
 80210d8:	230c      	movs	r3, #12
 80210da:	2001      	movs	r0, #1
 80210dc:	9a02      	ldr	r2, [sp, #8]
 80210de:	4240      	negs	r0, r0
 80210e0:	6013      	str	r3, [r2, #0]
 80210e2:	89a2      	ldrh	r2, [r4, #12]
 80210e4:	3334      	adds	r3, #52	@ 0x34
 80210e6:	4313      	orrs	r3, r2
 80210e8:	81a3      	strh	r3, [r4, #12]
 80210ea:	e7e9      	b.n	80210c0 <__ssputs_r+0x90>
 80210ec:	fffffb7f 	.word	0xfffffb7f

080210f0 <_svfiprintf_r>:
 80210f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210f2:	b0a1      	sub	sp, #132	@ 0x84
 80210f4:	9003      	str	r0, [sp, #12]
 80210f6:	001d      	movs	r5, r3
 80210f8:	898b      	ldrh	r3, [r1, #12]
 80210fa:	000f      	movs	r7, r1
 80210fc:	0016      	movs	r6, r2
 80210fe:	061b      	lsls	r3, r3, #24
 8021100:	d511      	bpl.n	8021126 <_svfiprintf_r+0x36>
 8021102:	690b      	ldr	r3, [r1, #16]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d10e      	bne.n	8021126 <_svfiprintf_r+0x36>
 8021108:	2140      	movs	r1, #64	@ 0x40
 802110a:	f7ff fa17 	bl	802053c <_malloc_r>
 802110e:	6038      	str	r0, [r7, #0]
 8021110:	6138      	str	r0, [r7, #16]
 8021112:	2800      	cmp	r0, #0
 8021114:	d105      	bne.n	8021122 <_svfiprintf_r+0x32>
 8021116:	230c      	movs	r3, #12
 8021118:	9a03      	ldr	r2, [sp, #12]
 802111a:	6013      	str	r3, [r2, #0]
 802111c:	2001      	movs	r0, #1
 802111e:	4240      	negs	r0, r0
 8021120:	e0cf      	b.n	80212c2 <_svfiprintf_r+0x1d2>
 8021122:	2340      	movs	r3, #64	@ 0x40
 8021124:	617b      	str	r3, [r7, #20]
 8021126:	2300      	movs	r3, #0
 8021128:	ac08      	add	r4, sp, #32
 802112a:	6163      	str	r3, [r4, #20]
 802112c:	3320      	adds	r3, #32
 802112e:	7663      	strb	r3, [r4, #25]
 8021130:	3310      	adds	r3, #16
 8021132:	76a3      	strb	r3, [r4, #26]
 8021134:	9507      	str	r5, [sp, #28]
 8021136:	0035      	movs	r5, r6
 8021138:	782b      	ldrb	r3, [r5, #0]
 802113a:	2b00      	cmp	r3, #0
 802113c:	d001      	beq.n	8021142 <_svfiprintf_r+0x52>
 802113e:	2b25      	cmp	r3, #37	@ 0x25
 8021140:	d148      	bne.n	80211d4 <_svfiprintf_r+0xe4>
 8021142:	1bab      	subs	r3, r5, r6
 8021144:	9305      	str	r3, [sp, #20]
 8021146:	42b5      	cmp	r5, r6
 8021148:	d00b      	beq.n	8021162 <_svfiprintf_r+0x72>
 802114a:	0032      	movs	r2, r6
 802114c:	0039      	movs	r1, r7
 802114e:	9803      	ldr	r0, [sp, #12]
 8021150:	f7ff ff6e 	bl	8021030 <__ssputs_r>
 8021154:	3001      	adds	r0, #1
 8021156:	d100      	bne.n	802115a <_svfiprintf_r+0x6a>
 8021158:	e0ae      	b.n	80212b8 <_svfiprintf_r+0x1c8>
 802115a:	6963      	ldr	r3, [r4, #20]
 802115c:	9a05      	ldr	r2, [sp, #20]
 802115e:	189b      	adds	r3, r3, r2
 8021160:	6163      	str	r3, [r4, #20]
 8021162:	782b      	ldrb	r3, [r5, #0]
 8021164:	2b00      	cmp	r3, #0
 8021166:	d100      	bne.n	802116a <_svfiprintf_r+0x7a>
 8021168:	e0a6      	b.n	80212b8 <_svfiprintf_r+0x1c8>
 802116a:	2201      	movs	r2, #1
 802116c:	2300      	movs	r3, #0
 802116e:	4252      	negs	r2, r2
 8021170:	6062      	str	r2, [r4, #4]
 8021172:	a904      	add	r1, sp, #16
 8021174:	3254      	adds	r2, #84	@ 0x54
 8021176:	1852      	adds	r2, r2, r1
 8021178:	1c6e      	adds	r6, r5, #1
 802117a:	6023      	str	r3, [r4, #0]
 802117c:	60e3      	str	r3, [r4, #12]
 802117e:	60a3      	str	r3, [r4, #8]
 8021180:	7013      	strb	r3, [r2, #0]
 8021182:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021184:	4b54      	ldr	r3, [pc, #336]	@ (80212d8 <_svfiprintf_r+0x1e8>)
 8021186:	2205      	movs	r2, #5
 8021188:	0018      	movs	r0, r3
 802118a:	7831      	ldrb	r1, [r6, #0]
 802118c:	9305      	str	r3, [sp, #20]
 802118e:	f7fd ff68 	bl	801f062 <memchr>
 8021192:	1c75      	adds	r5, r6, #1
 8021194:	2800      	cmp	r0, #0
 8021196:	d11f      	bne.n	80211d8 <_svfiprintf_r+0xe8>
 8021198:	6822      	ldr	r2, [r4, #0]
 802119a:	06d3      	lsls	r3, r2, #27
 802119c:	d504      	bpl.n	80211a8 <_svfiprintf_r+0xb8>
 802119e:	2353      	movs	r3, #83	@ 0x53
 80211a0:	a904      	add	r1, sp, #16
 80211a2:	185b      	adds	r3, r3, r1
 80211a4:	2120      	movs	r1, #32
 80211a6:	7019      	strb	r1, [r3, #0]
 80211a8:	0713      	lsls	r3, r2, #28
 80211aa:	d504      	bpl.n	80211b6 <_svfiprintf_r+0xc6>
 80211ac:	2353      	movs	r3, #83	@ 0x53
 80211ae:	a904      	add	r1, sp, #16
 80211b0:	185b      	adds	r3, r3, r1
 80211b2:	212b      	movs	r1, #43	@ 0x2b
 80211b4:	7019      	strb	r1, [r3, #0]
 80211b6:	7833      	ldrb	r3, [r6, #0]
 80211b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80211ba:	d016      	beq.n	80211ea <_svfiprintf_r+0xfa>
 80211bc:	0035      	movs	r5, r6
 80211be:	2100      	movs	r1, #0
 80211c0:	200a      	movs	r0, #10
 80211c2:	68e3      	ldr	r3, [r4, #12]
 80211c4:	782a      	ldrb	r2, [r5, #0]
 80211c6:	1c6e      	adds	r6, r5, #1
 80211c8:	3a30      	subs	r2, #48	@ 0x30
 80211ca:	2a09      	cmp	r2, #9
 80211cc:	d950      	bls.n	8021270 <_svfiprintf_r+0x180>
 80211ce:	2900      	cmp	r1, #0
 80211d0:	d111      	bne.n	80211f6 <_svfiprintf_r+0x106>
 80211d2:	e017      	b.n	8021204 <_svfiprintf_r+0x114>
 80211d4:	3501      	adds	r5, #1
 80211d6:	e7af      	b.n	8021138 <_svfiprintf_r+0x48>
 80211d8:	9b05      	ldr	r3, [sp, #20]
 80211da:	6822      	ldr	r2, [r4, #0]
 80211dc:	1ac0      	subs	r0, r0, r3
 80211de:	2301      	movs	r3, #1
 80211e0:	4083      	lsls	r3, r0
 80211e2:	4313      	orrs	r3, r2
 80211e4:	002e      	movs	r6, r5
 80211e6:	6023      	str	r3, [r4, #0]
 80211e8:	e7cc      	b.n	8021184 <_svfiprintf_r+0x94>
 80211ea:	9b07      	ldr	r3, [sp, #28]
 80211ec:	1d19      	adds	r1, r3, #4
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	9107      	str	r1, [sp, #28]
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	db01      	blt.n	80211fa <_svfiprintf_r+0x10a>
 80211f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80211f8:	e004      	b.n	8021204 <_svfiprintf_r+0x114>
 80211fa:	425b      	negs	r3, r3
 80211fc:	60e3      	str	r3, [r4, #12]
 80211fe:	2302      	movs	r3, #2
 8021200:	4313      	orrs	r3, r2
 8021202:	6023      	str	r3, [r4, #0]
 8021204:	782b      	ldrb	r3, [r5, #0]
 8021206:	2b2e      	cmp	r3, #46	@ 0x2e
 8021208:	d10c      	bne.n	8021224 <_svfiprintf_r+0x134>
 802120a:	786b      	ldrb	r3, [r5, #1]
 802120c:	2b2a      	cmp	r3, #42	@ 0x2a
 802120e:	d134      	bne.n	802127a <_svfiprintf_r+0x18a>
 8021210:	9b07      	ldr	r3, [sp, #28]
 8021212:	3502      	adds	r5, #2
 8021214:	1d1a      	adds	r2, r3, #4
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	9207      	str	r2, [sp, #28]
 802121a:	2b00      	cmp	r3, #0
 802121c:	da01      	bge.n	8021222 <_svfiprintf_r+0x132>
 802121e:	2301      	movs	r3, #1
 8021220:	425b      	negs	r3, r3
 8021222:	9309      	str	r3, [sp, #36]	@ 0x24
 8021224:	4e2d      	ldr	r6, [pc, #180]	@ (80212dc <_svfiprintf_r+0x1ec>)
 8021226:	2203      	movs	r2, #3
 8021228:	0030      	movs	r0, r6
 802122a:	7829      	ldrb	r1, [r5, #0]
 802122c:	f7fd ff19 	bl	801f062 <memchr>
 8021230:	2800      	cmp	r0, #0
 8021232:	d006      	beq.n	8021242 <_svfiprintf_r+0x152>
 8021234:	2340      	movs	r3, #64	@ 0x40
 8021236:	1b80      	subs	r0, r0, r6
 8021238:	4083      	lsls	r3, r0
 802123a:	6822      	ldr	r2, [r4, #0]
 802123c:	3501      	adds	r5, #1
 802123e:	4313      	orrs	r3, r2
 8021240:	6023      	str	r3, [r4, #0]
 8021242:	7829      	ldrb	r1, [r5, #0]
 8021244:	2206      	movs	r2, #6
 8021246:	4826      	ldr	r0, [pc, #152]	@ (80212e0 <_svfiprintf_r+0x1f0>)
 8021248:	1c6e      	adds	r6, r5, #1
 802124a:	7621      	strb	r1, [r4, #24]
 802124c:	f7fd ff09 	bl	801f062 <memchr>
 8021250:	2800      	cmp	r0, #0
 8021252:	d038      	beq.n	80212c6 <_svfiprintf_r+0x1d6>
 8021254:	4b23      	ldr	r3, [pc, #140]	@ (80212e4 <_svfiprintf_r+0x1f4>)
 8021256:	2b00      	cmp	r3, #0
 8021258:	d122      	bne.n	80212a0 <_svfiprintf_r+0x1b0>
 802125a:	2207      	movs	r2, #7
 802125c:	9b07      	ldr	r3, [sp, #28]
 802125e:	3307      	adds	r3, #7
 8021260:	4393      	bics	r3, r2
 8021262:	3308      	adds	r3, #8
 8021264:	9307      	str	r3, [sp, #28]
 8021266:	6963      	ldr	r3, [r4, #20]
 8021268:	9a04      	ldr	r2, [sp, #16]
 802126a:	189b      	adds	r3, r3, r2
 802126c:	6163      	str	r3, [r4, #20]
 802126e:	e762      	b.n	8021136 <_svfiprintf_r+0x46>
 8021270:	4343      	muls	r3, r0
 8021272:	0035      	movs	r5, r6
 8021274:	2101      	movs	r1, #1
 8021276:	189b      	adds	r3, r3, r2
 8021278:	e7a4      	b.n	80211c4 <_svfiprintf_r+0xd4>
 802127a:	2300      	movs	r3, #0
 802127c:	200a      	movs	r0, #10
 802127e:	0019      	movs	r1, r3
 8021280:	3501      	adds	r5, #1
 8021282:	6063      	str	r3, [r4, #4]
 8021284:	782a      	ldrb	r2, [r5, #0]
 8021286:	1c6e      	adds	r6, r5, #1
 8021288:	3a30      	subs	r2, #48	@ 0x30
 802128a:	2a09      	cmp	r2, #9
 802128c:	d903      	bls.n	8021296 <_svfiprintf_r+0x1a6>
 802128e:	2b00      	cmp	r3, #0
 8021290:	d0c8      	beq.n	8021224 <_svfiprintf_r+0x134>
 8021292:	9109      	str	r1, [sp, #36]	@ 0x24
 8021294:	e7c6      	b.n	8021224 <_svfiprintf_r+0x134>
 8021296:	4341      	muls	r1, r0
 8021298:	0035      	movs	r5, r6
 802129a:	2301      	movs	r3, #1
 802129c:	1889      	adds	r1, r1, r2
 802129e:	e7f1      	b.n	8021284 <_svfiprintf_r+0x194>
 80212a0:	aa07      	add	r2, sp, #28
 80212a2:	9200      	str	r2, [sp, #0]
 80212a4:	0021      	movs	r1, r4
 80212a6:	003a      	movs	r2, r7
 80212a8:	4b0f      	ldr	r3, [pc, #60]	@ (80212e8 <_svfiprintf_r+0x1f8>)
 80212aa:	9803      	ldr	r0, [sp, #12]
 80212ac:	f7fc ffd4 	bl	801e258 <_printf_float>
 80212b0:	9004      	str	r0, [sp, #16]
 80212b2:	9b04      	ldr	r3, [sp, #16]
 80212b4:	3301      	adds	r3, #1
 80212b6:	d1d6      	bne.n	8021266 <_svfiprintf_r+0x176>
 80212b8:	89bb      	ldrh	r3, [r7, #12]
 80212ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80212bc:	065b      	lsls	r3, r3, #25
 80212be:	d500      	bpl.n	80212c2 <_svfiprintf_r+0x1d2>
 80212c0:	e72c      	b.n	802111c <_svfiprintf_r+0x2c>
 80212c2:	b021      	add	sp, #132	@ 0x84
 80212c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212c6:	aa07      	add	r2, sp, #28
 80212c8:	9200      	str	r2, [sp, #0]
 80212ca:	0021      	movs	r1, r4
 80212cc:	003a      	movs	r2, r7
 80212ce:	4b06      	ldr	r3, [pc, #24]	@ (80212e8 <_svfiprintf_r+0x1f8>)
 80212d0:	9803      	ldr	r0, [sp, #12]
 80212d2:	f7fd fa6f 	bl	801e7b4 <_printf_i>
 80212d6:	e7eb      	b.n	80212b0 <_svfiprintf_r+0x1c0>
 80212d8:	080244e0 	.word	0x080244e0
 80212dc:	080244e6 	.word	0x080244e6
 80212e0:	080244ea 	.word	0x080244ea
 80212e4:	0801e259 	.word	0x0801e259
 80212e8:	08021031 	.word	0x08021031

080212ec <__sfputc_r>:
 80212ec:	6893      	ldr	r3, [r2, #8]
 80212ee:	b510      	push	{r4, lr}
 80212f0:	3b01      	subs	r3, #1
 80212f2:	6093      	str	r3, [r2, #8]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	da04      	bge.n	8021302 <__sfputc_r+0x16>
 80212f8:	6994      	ldr	r4, [r2, #24]
 80212fa:	42a3      	cmp	r3, r4
 80212fc:	db07      	blt.n	802130e <__sfputc_r+0x22>
 80212fe:	290a      	cmp	r1, #10
 8021300:	d005      	beq.n	802130e <__sfputc_r+0x22>
 8021302:	6813      	ldr	r3, [r2, #0]
 8021304:	1c58      	adds	r0, r3, #1
 8021306:	6010      	str	r0, [r2, #0]
 8021308:	7019      	strb	r1, [r3, #0]
 802130a:	0008      	movs	r0, r1
 802130c:	bd10      	pop	{r4, pc}
 802130e:	f7fd fd37 	bl	801ed80 <__swbuf_r>
 8021312:	0001      	movs	r1, r0
 8021314:	e7f9      	b.n	802130a <__sfputc_r+0x1e>

08021316 <__sfputs_r>:
 8021316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021318:	0006      	movs	r6, r0
 802131a:	000f      	movs	r7, r1
 802131c:	0014      	movs	r4, r2
 802131e:	18d5      	adds	r5, r2, r3
 8021320:	42ac      	cmp	r4, r5
 8021322:	d101      	bne.n	8021328 <__sfputs_r+0x12>
 8021324:	2000      	movs	r0, #0
 8021326:	e007      	b.n	8021338 <__sfputs_r+0x22>
 8021328:	7821      	ldrb	r1, [r4, #0]
 802132a:	003a      	movs	r2, r7
 802132c:	0030      	movs	r0, r6
 802132e:	f7ff ffdd 	bl	80212ec <__sfputc_r>
 8021332:	3401      	adds	r4, #1
 8021334:	1c43      	adds	r3, r0, #1
 8021336:	d1f3      	bne.n	8021320 <__sfputs_r+0xa>
 8021338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802133c <_vfiprintf_r>:
 802133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802133e:	b0a1      	sub	sp, #132	@ 0x84
 8021340:	000f      	movs	r7, r1
 8021342:	0015      	movs	r5, r2
 8021344:	001e      	movs	r6, r3
 8021346:	9003      	str	r0, [sp, #12]
 8021348:	2800      	cmp	r0, #0
 802134a:	d004      	beq.n	8021356 <_vfiprintf_r+0x1a>
 802134c:	6a03      	ldr	r3, [r0, #32]
 802134e:	2b00      	cmp	r3, #0
 8021350:	d101      	bne.n	8021356 <_vfiprintf_r+0x1a>
 8021352:	f7fd fbcd 	bl	801eaf0 <__sinit>
 8021356:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021358:	07db      	lsls	r3, r3, #31
 802135a:	d405      	bmi.n	8021368 <_vfiprintf_r+0x2c>
 802135c:	89bb      	ldrh	r3, [r7, #12]
 802135e:	059b      	lsls	r3, r3, #22
 8021360:	d402      	bmi.n	8021368 <_vfiprintf_r+0x2c>
 8021362:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021364:	f7fd fe7b 	bl	801f05e <__retarget_lock_acquire_recursive>
 8021368:	89bb      	ldrh	r3, [r7, #12]
 802136a:	071b      	lsls	r3, r3, #28
 802136c:	d502      	bpl.n	8021374 <_vfiprintf_r+0x38>
 802136e:	693b      	ldr	r3, [r7, #16]
 8021370:	2b00      	cmp	r3, #0
 8021372:	d113      	bne.n	802139c <_vfiprintf_r+0x60>
 8021374:	0039      	movs	r1, r7
 8021376:	9803      	ldr	r0, [sp, #12]
 8021378:	f7fd fd44 	bl	801ee04 <__swsetup_r>
 802137c:	2800      	cmp	r0, #0
 802137e:	d00d      	beq.n	802139c <_vfiprintf_r+0x60>
 8021380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021382:	07db      	lsls	r3, r3, #31
 8021384:	d503      	bpl.n	802138e <_vfiprintf_r+0x52>
 8021386:	2001      	movs	r0, #1
 8021388:	4240      	negs	r0, r0
 802138a:	b021      	add	sp, #132	@ 0x84
 802138c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802138e:	89bb      	ldrh	r3, [r7, #12]
 8021390:	059b      	lsls	r3, r3, #22
 8021392:	d4f8      	bmi.n	8021386 <_vfiprintf_r+0x4a>
 8021394:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021396:	f7fd fe63 	bl	801f060 <__retarget_lock_release_recursive>
 802139a:	e7f4      	b.n	8021386 <_vfiprintf_r+0x4a>
 802139c:	2300      	movs	r3, #0
 802139e:	ac08      	add	r4, sp, #32
 80213a0:	6163      	str	r3, [r4, #20]
 80213a2:	3320      	adds	r3, #32
 80213a4:	7663      	strb	r3, [r4, #25]
 80213a6:	3310      	adds	r3, #16
 80213a8:	76a3      	strb	r3, [r4, #26]
 80213aa:	9607      	str	r6, [sp, #28]
 80213ac:	002e      	movs	r6, r5
 80213ae:	7833      	ldrb	r3, [r6, #0]
 80213b0:	2b00      	cmp	r3, #0
 80213b2:	d001      	beq.n	80213b8 <_vfiprintf_r+0x7c>
 80213b4:	2b25      	cmp	r3, #37	@ 0x25
 80213b6:	d148      	bne.n	802144a <_vfiprintf_r+0x10e>
 80213b8:	1b73      	subs	r3, r6, r5
 80213ba:	9305      	str	r3, [sp, #20]
 80213bc:	42ae      	cmp	r6, r5
 80213be:	d00b      	beq.n	80213d8 <_vfiprintf_r+0x9c>
 80213c0:	002a      	movs	r2, r5
 80213c2:	0039      	movs	r1, r7
 80213c4:	9803      	ldr	r0, [sp, #12]
 80213c6:	f7ff ffa6 	bl	8021316 <__sfputs_r>
 80213ca:	3001      	adds	r0, #1
 80213cc:	d100      	bne.n	80213d0 <_vfiprintf_r+0x94>
 80213ce:	e0ae      	b.n	802152e <_vfiprintf_r+0x1f2>
 80213d0:	6963      	ldr	r3, [r4, #20]
 80213d2:	9a05      	ldr	r2, [sp, #20]
 80213d4:	189b      	adds	r3, r3, r2
 80213d6:	6163      	str	r3, [r4, #20]
 80213d8:	7833      	ldrb	r3, [r6, #0]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d100      	bne.n	80213e0 <_vfiprintf_r+0xa4>
 80213de:	e0a6      	b.n	802152e <_vfiprintf_r+0x1f2>
 80213e0:	2201      	movs	r2, #1
 80213e2:	2300      	movs	r3, #0
 80213e4:	4252      	negs	r2, r2
 80213e6:	6062      	str	r2, [r4, #4]
 80213e8:	a904      	add	r1, sp, #16
 80213ea:	3254      	adds	r2, #84	@ 0x54
 80213ec:	1852      	adds	r2, r2, r1
 80213ee:	1c75      	adds	r5, r6, #1
 80213f0:	6023      	str	r3, [r4, #0]
 80213f2:	60e3      	str	r3, [r4, #12]
 80213f4:	60a3      	str	r3, [r4, #8]
 80213f6:	7013      	strb	r3, [r2, #0]
 80213f8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80213fa:	4b59      	ldr	r3, [pc, #356]	@ (8021560 <_vfiprintf_r+0x224>)
 80213fc:	2205      	movs	r2, #5
 80213fe:	0018      	movs	r0, r3
 8021400:	7829      	ldrb	r1, [r5, #0]
 8021402:	9305      	str	r3, [sp, #20]
 8021404:	f7fd fe2d 	bl	801f062 <memchr>
 8021408:	1c6e      	adds	r6, r5, #1
 802140a:	2800      	cmp	r0, #0
 802140c:	d11f      	bne.n	802144e <_vfiprintf_r+0x112>
 802140e:	6822      	ldr	r2, [r4, #0]
 8021410:	06d3      	lsls	r3, r2, #27
 8021412:	d504      	bpl.n	802141e <_vfiprintf_r+0xe2>
 8021414:	2353      	movs	r3, #83	@ 0x53
 8021416:	a904      	add	r1, sp, #16
 8021418:	185b      	adds	r3, r3, r1
 802141a:	2120      	movs	r1, #32
 802141c:	7019      	strb	r1, [r3, #0]
 802141e:	0713      	lsls	r3, r2, #28
 8021420:	d504      	bpl.n	802142c <_vfiprintf_r+0xf0>
 8021422:	2353      	movs	r3, #83	@ 0x53
 8021424:	a904      	add	r1, sp, #16
 8021426:	185b      	adds	r3, r3, r1
 8021428:	212b      	movs	r1, #43	@ 0x2b
 802142a:	7019      	strb	r1, [r3, #0]
 802142c:	782b      	ldrb	r3, [r5, #0]
 802142e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021430:	d016      	beq.n	8021460 <_vfiprintf_r+0x124>
 8021432:	002e      	movs	r6, r5
 8021434:	2100      	movs	r1, #0
 8021436:	200a      	movs	r0, #10
 8021438:	68e3      	ldr	r3, [r4, #12]
 802143a:	7832      	ldrb	r2, [r6, #0]
 802143c:	1c75      	adds	r5, r6, #1
 802143e:	3a30      	subs	r2, #48	@ 0x30
 8021440:	2a09      	cmp	r2, #9
 8021442:	d950      	bls.n	80214e6 <_vfiprintf_r+0x1aa>
 8021444:	2900      	cmp	r1, #0
 8021446:	d111      	bne.n	802146c <_vfiprintf_r+0x130>
 8021448:	e017      	b.n	802147a <_vfiprintf_r+0x13e>
 802144a:	3601      	adds	r6, #1
 802144c:	e7af      	b.n	80213ae <_vfiprintf_r+0x72>
 802144e:	9b05      	ldr	r3, [sp, #20]
 8021450:	6822      	ldr	r2, [r4, #0]
 8021452:	1ac0      	subs	r0, r0, r3
 8021454:	2301      	movs	r3, #1
 8021456:	4083      	lsls	r3, r0
 8021458:	4313      	orrs	r3, r2
 802145a:	0035      	movs	r5, r6
 802145c:	6023      	str	r3, [r4, #0]
 802145e:	e7cc      	b.n	80213fa <_vfiprintf_r+0xbe>
 8021460:	9b07      	ldr	r3, [sp, #28]
 8021462:	1d19      	adds	r1, r3, #4
 8021464:	681b      	ldr	r3, [r3, #0]
 8021466:	9107      	str	r1, [sp, #28]
 8021468:	2b00      	cmp	r3, #0
 802146a:	db01      	blt.n	8021470 <_vfiprintf_r+0x134>
 802146c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802146e:	e004      	b.n	802147a <_vfiprintf_r+0x13e>
 8021470:	425b      	negs	r3, r3
 8021472:	60e3      	str	r3, [r4, #12]
 8021474:	2302      	movs	r3, #2
 8021476:	4313      	orrs	r3, r2
 8021478:	6023      	str	r3, [r4, #0]
 802147a:	7833      	ldrb	r3, [r6, #0]
 802147c:	2b2e      	cmp	r3, #46	@ 0x2e
 802147e:	d10c      	bne.n	802149a <_vfiprintf_r+0x15e>
 8021480:	7873      	ldrb	r3, [r6, #1]
 8021482:	2b2a      	cmp	r3, #42	@ 0x2a
 8021484:	d134      	bne.n	80214f0 <_vfiprintf_r+0x1b4>
 8021486:	9b07      	ldr	r3, [sp, #28]
 8021488:	3602      	adds	r6, #2
 802148a:	1d1a      	adds	r2, r3, #4
 802148c:	681b      	ldr	r3, [r3, #0]
 802148e:	9207      	str	r2, [sp, #28]
 8021490:	2b00      	cmp	r3, #0
 8021492:	da01      	bge.n	8021498 <_vfiprintf_r+0x15c>
 8021494:	2301      	movs	r3, #1
 8021496:	425b      	negs	r3, r3
 8021498:	9309      	str	r3, [sp, #36]	@ 0x24
 802149a:	4d32      	ldr	r5, [pc, #200]	@ (8021564 <_vfiprintf_r+0x228>)
 802149c:	2203      	movs	r2, #3
 802149e:	0028      	movs	r0, r5
 80214a0:	7831      	ldrb	r1, [r6, #0]
 80214a2:	f7fd fdde 	bl	801f062 <memchr>
 80214a6:	2800      	cmp	r0, #0
 80214a8:	d006      	beq.n	80214b8 <_vfiprintf_r+0x17c>
 80214aa:	2340      	movs	r3, #64	@ 0x40
 80214ac:	1b40      	subs	r0, r0, r5
 80214ae:	4083      	lsls	r3, r0
 80214b0:	6822      	ldr	r2, [r4, #0]
 80214b2:	3601      	adds	r6, #1
 80214b4:	4313      	orrs	r3, r2
 80214b6:	6023      	str	r3, [r4, #0]
 80214b8:	7831      	ldrb	r1, [r6, #0]
 80214ba:	2206      	movs	r2, #6
 80214bc:	482a      	ldr	r0, [pc, #168]	@ (8021568 <_vfiprintf_r+0x22c>)
 80214be:	1c75      	adds	r5, r6, #1
 80214c0:	7621      	strb	r1, [r4, #24]
 80214c2:	f7fd fdce 	bl	801f062 <memchr>
 80214c6:	2800      	cmp	r0, #0
 80214c8:	d040      	beq.n	802154c <_vfiprintf_r+0x210>
 80214ca:	4b28      	ldr	r3, [pc, #160]	@ (802156c <_vfiprintf_r+0x230>)
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d122      	bne.n	8021516 <_vfiprintf_r+0x1da>
 80214d0:	2207      	movs	r2, #7
 80214d2:	9b07      	ldr	r3, [sp, #28]
 80214d4:	3307      	adds	r3, #7
 80214d6:	4393      	bics	r3, r2
 80214d8:	3308      	adds	r3, #8
 80214da:	9307      	str	r3, [sp, #28]
 80214dc:	6963      	ldr	r3, [r4, #20]
 80214de:	9a04      	ldr	r2, [sp, #16]
 80214e0:	189b      	adds	r3, r3, r2
 80214e2:	6163      	str	r3, [r4, #20]
 80214e4:	e762      	b.n	80213ac <_vfiprintf_r+0x70>
 80214e6:	4343      	muls	r3, r0
 80214e8:	002e      	movs	r6, r5
 80214ea:	2101      	movs	r1, #1
 80214ec:	189b      	adds	r3, r3, r2
 80214ee:	e7a4      	b.n	802143a <_vfiprintf_r+0xfe>
 80214f0:	2300      	movs	r3, #0
 80214f2:	200a      	movs	r0, #10
 80214f4:	0019      	movs	r1, r3
 80214f6:	3601      	adds	r6, #1
 80214f8:	6063      	str	r3, [r4, #4]
 80214fa:	7832      	ldrb	r2, [r6, #0]
 80214fc:	1c75      	adds	r5, r6, #1
 80214fe:	3a30      	subs	r2, #48	@ 0x30
 8021500:	2a09      	cmp	r2, #9
 8021502:	d903      	bls.n	802150c <_vfiprintf_r+0x1d0>
 8021504:	2b00      	cmp	r3, #0
 8021506:	d0c8      	beq.n	802149a <_vfiprintf_r+0x15e>
 8021508:	9109      	str	r1, [sp, #36]	@ 0x24
 802150a:	e7c6      	b.n	802149a <_vfiprintf_r+0x15e>
 802150c:	4341      	muls	r1, r0
 802150e:	002e      	movs	r6, r5
 8021510:	2301      	movs	r3, #1
 8021512:	1889      	adds	r1, r1, r2
 8021514:	e7f1      	b.n	80214fa <_vfiprintf_r+0x1be>
 8021516:	aa07      	add	r2, sp, #28
 8021518:	9200      	str	r2, [sp, #0]
 802151a:	0021      	movs	r1, r4
 802151c:	003a      	movs	r2, r7
 802151e:	4b14      	ldr	r3, [pc, #80]	@ (8021570 <_vfiprintf_r+0x234>)
 8021520:	9803      	ldr	r0, [sp, #12]
 8021522:	f7fc fe99 	bl	801e258 <_printf_float>
 8021526:	9004      	str	r0, [sp, #16]
 8021528:	9b04      	ldr	r3, [sp, #16]
 802152a:	3301      	adds	r3, #1
 802152c:	d1d6      	bne.n	80214dc <_vfiprintf_r+0x1a0>
 802152e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021530:	07db      	lsls	r3, r3, #31
 8021532:	d405      	bmi.n	8021540 <_vfiprintf_r+0x204>
 8021534:	89bb      	ldrh	r3, [r7, #12]
 8021536:	059b      	lsls	r3, r3, #22
 8021538:	d402      	bmi.n	8021540 <_vfiprintf_r+0x204>
 802153a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802153c:	f7fd fd90 	bl	801f060 <__retarget_lock_release_recursive>
 8021540:	89bb      	ldrh	r3, [r7, #12]
 8021542:	065b      	lsls	r3, r3, #25
 8021544:	d500      	bpl.n	8021548 <_vfiprintf_r+0x20c>
 8021546:	e71e      	b.n	8021386 <_vfiprintf_r+0x4a>
 8021548:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802154a:	e71e      	b.n	802138a <_vfiprintf_r+0x4e>
 802154c:	aa07      	add	r2, sp, #28
 802154e:	9200      	str	r2, [sp, #0]
 8021550:	0021      	movs	r1, r4
 8021552:	003a      	movs	r2, r7
 8021554:	4b06      	ldr	r3, [pc, #24]	@ (8021570 <_vfiprintf_r+0x234>)
 8021556:	9803      	ldr	r0, [sp, #12]
 8021558:	f7fd f92c 	bl	801e7b4 <_printf_i>
 802155c:	e7e3      	b.n	8021526 <_vfiprintf_r+0x1ea>
 802155e:	46c0      	nop			@ (mov r8, r8)
 8021560:	080244e0 	.word	0x080244e0
 8021564:	080244e6 	.word	0x080244e6
 8021568:	080244ea 	.word	0x080244ea
 802156c:	0801e259 	.word	0x0801e259
 8021570:	08021317 	.word	0x08021317

08021574 <__sflush_r>:
 8021574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021576:	220c      	movs	r2, #12
 8021578:	5e8b      	ldrsh	r3, [r1, r2]
 802157a:	0005      	movs	r5, r0
 802157c:	000c      	movs	r4, r1
 802157e:	071a      	lsls	r2, r3, #28
 8021580:	d456      	bmi.n	8021630 <__sflush_r+0xbc>
 8021582:	684a      	ldr	r2, [r1, #4]
 8021584:	2a00      	cmp	r2, #0
 8021586:	dc02      	bgt.n	802158e <__sflush_r+0x1a>
 8021588:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802158a:	2a00      	cmp	r2, #0
 802158c:	dd4e      	ble.n	802162c <__sflush_r+0xb8>
 802158e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021590:	2f00      	cmp	r7, #0
 8021592:	d04b      	beq.n	802162c <__sflush_r+0xb8>
 8021594:	2200      	movs	r2, #0
 8021596:	2080      	movs	r0, #128	@ 0x80
 8021598:	682e      	ldr	r6, [r5, #0]
 802159a:	602a      	str	r2, [r5, #0]
 802159c:	001a      	movs	r2, r3
 802159e:	0140      	lsls	r0, r0, #5
 80215a0:	6a21      	ldr	r1, [r4, #32]
 80215a2:	4002      	ands	r2, r0
 80215a4:	4203      	tst	r3, r0
 80215a6:	d033      	beq.n	8021610 <__sflush_r+0x9c>
 80215a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80215aa:	89a3      	ldrh	r3, [r4, #12]
 80215ac:	075b      	lsls	r3, r3, #29
 80215ae:	d506      	bpl.n	80215be <__sflush_r+0x4a>
 80215b0:	6863      	ldr	r3, [r4, #4]
 80215b2:	1ad2      	subs	r2, r2, r3
 80215b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80215b6:	2b00      	cmp	r3, #0
 80215b8:	d001      	beq.n	80215be <__sflush_r+0x4a>
 80215ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80215bc:	1ad2      	subs	r2, r2, r3
 80215be:	2300      	movs	r3, #0
 80215c0:	0028      	movs	r0, r5
 80215c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80215c4:	6a21      	ldr	r1, [r4, #32]
 80215c6:	47b8      	blx	r7
 80215c8:	89a2      	ldrh	r2, [r4, #12]
 80215ca:	1c43      	adds	r3, r0, #1
 80215cc:	d106      	bne.n	80215dc <__sflush_r+0x68>
 80215ce:	6829      	ldr	r1, [r5, #0]
 80215d0:	291d      	cmp	r1, #29
 80215d2:	d846      	bhi.n	8021662 <__sflush_r+0xee>
 80215d4:	4b29      	ldr	r3, [pc, #164]	@ (802167c <__sflush_r+0x108>)
 80215d6:	410b      	asrs	r3, r1
 80215d8:	07db      	lsls	r3, r3, #31
 80215da:	d442      	bmi.n	8021662 <__sflush_r+0xee>
 80215dc:	2300      	movs	r3, #0
 80215de:	6063      	str	r3, [r4, #4]
 80215e0:	6923      	ldr	r3, [r4, #16]
 80215e2:	6023      	str	r3, [r4, #0]
 80215e4:	04d2      	lsls	r2, r2, #19
 80215e6:	d505      	bpl.n	80215f4 <__sflush_r+0x80>
 80215e8:	1c43      	adds	r3, r0, #1
 80215ea:	d102      	bne.n	80215f2 <__sflush_r+0x7e>
 80215ec:	682b      	ldr	r3, [r5, #0]
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	d100      	bne.n	80215f4 <__sflush_r+0x80>
 80215f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80215f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80215f6:	602e      	str	r6, [r5, #0]
 80215f8:	2900      	cmp	r1, #0
 80215fa:	d017      	beq.n	802162c <__sflush_r+0xb8>
 80215fc:	0023      	movs	r3, r4
 80215fe:	3344      	adds	r3, #68	@ 0x44
 8021600:	4299      	cmp	r1, r3
 8021602:	d002      	beq.n	802160a <__sflush_r+0x96>
 8021604:	0028      	movs	r0, r5
 8021606:	f7fe fbc9 	bl	801fd9c <_free_r>
 802160a:	2300      	movs	r3, #0
 802160c:	6363      	str	r3, [r4, #52]	@ 0x34
 802160e:	e00d      	b.n	802162c <__sflush_r+0xb8>
 8021610:	2301      	movs	r3, #1
 8021612:	0028      	movs	r0, r5
 8021614:	47b8      	blx	r7
 8021616:	0002      	movs	r2, r0
 8021618:	1c43      	adds	r3, r0, #1
 802161a:	d1c6      	bne.n	80215aa <__sflush_r+0x36>
 802161c:	682b      	ldr	r3, [r5, #0]
 802161e:	2b00      	cmp	r3, #0
 8021620:	d0c3      	beq.n	80215aa <__sflush_r+0x36>
 8021622:	2b1d      	cmp	r3, #29
 8021624:	d001      	beq.n	802162a <__sflush_r+0xb6>
 8021626:	2b16      	cmp	r3, #22
 8021628:	d11a      	bne.n	8021660 <__sflush_r+0xec>
 802162a:	602e      	str	r6, [r5, #0]
 802162c:	2000      	movs	r0, #0
 802162e:	e01e      	b.n	802166e <__sflush_r+0xfa>
 8021630:	690e      	ldr	r6, [r1, #16]
 8021632:	2e00      	cmp	r6, #0
 8021634:	d0fa      	beq.n	802162c <__sflush_r+0xb8>
 8021636:	680f      	ldr	r7, [r1, #0]
 8021638:	600e      	str	r6, [r1, #0]
 802163a:	1bba      	subs	r2, r7, r6
 802163c:	9201      	str	r2, [sp, #4]
 802163e:	2200      	movs	r2, #0
 8021640:	079b      	lsls	r3, r3, #30
 8021642:	d100      	bne.n	8021646 <__sflush_r+0xd2>
 8021644:	694a      	ldr	r2, [r1, #20]
 8021646:	60a2      	str	r2, [r4, #8]
 8021648:	9b01      	ldr	r3, [sp, #4]
 802164a:	2b00      	cmp	r3, #0
 802164c:	ddee      	ble.n	802162c <__sflush_r+0xb8>
 802164e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021650:	0032      	movs	r2, r6
 8021652:	001f      	movs	r7, r3
 8021654:	0028      	movs	r0, r5
 8021656:	9b01      	ldr	r3, [sp, #4]
 8021658:	6a21      	ldr	r1, [r4, #32]
 802165a:	47b8      	blx	r7
 802165c:	2800      	cmp	r0, #0
 802165e:	dc07      	bgt.n	8021670 <__sflush_r+0xfc>
 8021660:	89a2      	ldrh	r2, [r4, #12]
 8021662:	2340      	movs	r3, #64	@ 0x40
 8021664:	2001      	movs	r0, #1
 8021666:	4313      	orrs	r3, r2
 8021668:	b21b      	sxth	r3, r3
 802166a:	81a3      	strh	r3, [r4, #12]
 802166c:	4240      	negs	r0, r0
 802166e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021670:	9b01      	ldr	r3, [sp, #4]
 8021672:	1836      	adds	r6, r6, r0
 8021674:	1a1b      	subs	r3, r3, r0
 8021676:	9301      	str	r3, [sp, #4]
 8021678:	e7e6      	b.n	8021648 <__sflush_r+0xd4>
 802167a:	46c0      	nop			@ (mov r8, r8)
 802167c:	dfbffffe 	.word	0xdfbffffe

08021680 <_fflush_r>:
 8021680:	690b      	ldr	r3, [r1, #16]
 8021682:	b570      	push	{r4, r5, r6, lr}
 8021684:	0005      	movs	r5, r0
 8021686:	000c      	movs	r4, r1
 8021688:	2b00      	cmp	r3, #0
 802168a:	d102      	bne.n	8021692 <_fflush_r+0x12>
 802168c:	2500      	movs	r5, #0
 802168e:	0028      	movs	r0, r5
 8021690:	bd70      	pop	{r4, r5, r6, pc}
 8021692:	2800      	cmp	r0, #0
 8021694:	d004      	beq.n	80216a0 <_fflush_r+0x20>
 8021696:	6a03      	ldr	r3, [r0, #32]
 8021698:	2b00      	cmp	r3, #0
 802169a:	d101      	bne.n	80216a0 <_fflush_r+0x20>
 802169c:	f7fd fa28 	bl	801eaf0 <__sinit>
 80216a0:	220c      	movs	r2, #12
 80216a2:	5ea3      	ldrsh	r3, [r4, r2]
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d0f1      	beq.n	802168c <_fflush_r+0xc>
 80216a8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80216aa:	07d2      	lsls	r2, r2, #31
 80216ac:	d404      	bmi.n	80216b8 <_fflush_r+0x38>
 80216ae:	059b      	lsls	r3, r3, #22
 80216b0:	d402      	bmi.n	80216b8 <_fflush_r+0x38>
 80216b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216b4:	f7fd fcd3 	bl	801f05e <__retarget_lock_acquire_recursive>
 80216b8:	0028      	movs	r0, r5
 80216ba:	0021      	movs	r1, r4
 80216bc:	f7ff ff5a 	bl	8021574 <__sflush_r>
 80216c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80216c2:	0005      	movs	r5, r0
 80216c4:	07db      	lsls	r3, r3, #31
 80216c6:	d4e2      	bmi.n	802168e <_fflush_r+0xe>
 80216c8:	89a3      	ldrh	r3, [r4, #12]
 80216ca:	059b      	lsls	r3, r3, #22
 80216cc:	d4df      	bmi.n	802168e <_fflush_r+0xe>
 80216ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80216d0:	f7fd fcc6 	bl	801f060 <__retarget_lock_release_recursive>
 80216d4:	e7db      	b.n	802168e <_fflush_r+0xe>
	...

080216d8 <__swhatbuf_r>:
 80216d8:	b570      	push	{r4, r5, r6, lr}
 80216da:	000e      	movs	r6, r1
 80216dc:	001d      	movs	r5, r3
 80216de:	230e      	movs	r3, #14
 80216e0:	5ec9      	ldrsh	r1, [r1, r3]
 80216e2:	0014      	movs	r4, r2
 80216e4:	b096      	sub	sp, #88	@ 0x58
 80216e6:	2900      	cmp	r1, #0
 80216e8:	da0c      	bge.n	8021704 <__swhatbuf_r+0x2c>
 80216ea:	89b2      	ldrh	r2, [r6, #12]
 80216ec:	2380      	movs	r3, #128	@ 0x80
 80216ee:	0011      	movs	r1, r2
 80216f0:	4019      	ands	r1, r3
 80216f2:	421a      	tst	r2, r3
 80216f4:	d114      	bne.n	8021720 <__swhatbuf_r+0x48>
 80216f6:	2380      	movs	r3, #128	@ 0x80
 80216f8:	00db      	lsls	r3, r3, #3
 80216fa:	2000      	movs	r0, #0
 80216fc:	6029      	str	r1, [r5, #0]
 80216fe:	6023      	str	r3, [r4, #0]
 8021700:	b016      	add	sp, #88	@ 0x58
 8021702:	bd70      	pop	{r4, r5, r6, pc}
 8021704:	466a      	mov	r2, sp
 8021706:	f000 f865 	bl	80217d4 <_fstat_r>
 802170a:	2800      	cmp	r0, #0
 802170c:	dbed      	blt.n	80216ea <__swhatbuf_r+0x12>
 802170e:	23f0      	movs	r3, #240	@ 0xf0
 8021710:	9901      	ldr	r1, [sp, #4]
 8021712:	021b      	lsls	r3, r3, #8
 8021714:	4019      	ands	r1, r3
 8021716:	4b04      	ldr	r3, [pc, #16]	@ (8021728 <__swhatbuf_r+0x50>)
 8021718:	18c9      	adds	r1, r1, r3
 802171a:	424b      	negs	r3, r1
 802171c:	4159      	adcs	r1, r3
 802171e:	e7ea      	b.n	80216f6 <__swhatbuf_r+0x1e>
 8021720:	2100      	movs	r1, #0
 8021722:	2340      	movs	r3, #64	@ 0x40
 8021724:	e7e9      	b.n	80216fa <__swhatbuf_r+0x22>
 8021726:	46c0      	nop			@ (mov r8, r8)
 8021728:	ffffe000 	.word	0xffffe000

0802172c <__smakebuf_r>:
 802172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802172e:	2602      	movs	r6, #2
 8021730:	898b      	ldrh	r3, [r1, #12]
 8021732:	0005      	movs	r5, r0
 8021734:	000c      	movs	r4, r1
 8021736:	b085      	sub	sp, #20
 8021738:	4233      	tst	r3, r6
 802173a:	d007      	beq.n	802174c <__smakebuf_r+0x20>
 802173c:	0023      	movs	r3, r4
 802173e:	3347      	adds	r3, #71	@ 0x47
 8021740:	6023      	str	r3, [r4, #0]
 8021742:	6123      	str	r3, [r4, #16]
 8021744:	2301      	movs	r3, #1
 8021746:	6163      	str	r3, [r4, #20]
 8021748:	b005      	add	sp, #20
 802174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802174c:	ab03      	add	r3, sp, #12
 802174e:	aa02      	add	r2, sp, #8
 8021750:	f7ff ffc2 	bl	80216d8 <__swhatbuf_r>
 8021754:	9f02      	ldr	r7, [sp, #8]
 8021756:	9001      	str	r0, [sp, #4]
 8021758:	0039      	movs	r1, r7
 802175a:	0028      	movs	r0, r5
 802175c:	f7fe feee 	bl	802053c <_malloc_r>
 8021760:	2800      	cmp	r0, #0
 8021762:	d108      	bne.n	8021776 <__smakebuf_r+0x4a>
 8021764:	220c      	movs	r2, #12
 8021766:	5ea3      	ldrsh	r3, [r4, r2]
 8021768:	059a      	lsls	r2, r3, #22
 802176a:	d4ed      	bmi.n	8021748 <__smakebuf_r+0x1c>
 802176c:	2203      	movs	r2, #3
 802176e:	4393      	bics	r3, r2
 8021770:	431e      	orrs	r6, r3
 8021772:	81a6      	strh	r6, [r4, #12]
 8021774:	e7e2      	b.n	802173c <__smakebuf_r+0x10>
 8021776:	2380      	movs	r3, #128	@ 0x80
 8021778:	89a2      	ldrh	r2, [r4, #12]
 802177a:	6020      	str	r0, [r4, #0]
 802177c:	4313      	orrs	r3, r2
 802177e:	81a3      	strh	r3, [r4, #12]
 8021780:	9b03      	ldr	r3, [sp, #12]
 8021782:	6120      	str	r0, [r4, #16]
 8021784:	6167      	str	r7, [r4, #20]
 8021786:	2b00      	cmp	r3, #0
 8021788:	d00c      	beq.n	80217a4 <__smakebuf_r+0x78>
 802178a:	0028      	movs	r0, r5
 802178c:	230e      	movs	r3, #14
 802178e:	5ee1      	ldrsh	r1, [r4, r3]
 8021790:	f000 f832 	bl	80217f8 <_isatty_r>
 8021794:	2800      	cmp	r0, #0
 8021796:	d005      	beq.n	80217a4 <__smakebuf_r+0x78>
 8021798:	2303      	movs	r3, #3
 802179a:	89a2      	ldrh	r2, [r4, #12]
 802179c:	439a      	bics	r2, r3
 802179e:	3b02      	subs	r3, #2
 80217a0:	4313      	orrs	r3, r2
 80217a2:	81a3      	strh	r3, [r4, #12]
 80217a4:	89a3      	ldrh	r3, [r4, #12]
 80217a6:	9a01      	ldr	r2, [sp, #4]
 80217a8:	4313      	orrs	r3, r2
 80217aa:	81a3      	strh	r3, [r4, #12]
 80217ac:	e7cc      	b.n	8021748 <__smakebuf_r+0x1c>

080217ae <memmove>:
 80217ae:	b510      	push	{r4, lr}
 80217b0:	4288      	cmp	r0, r1
 80217b2:	d806      	bhi.n	80217c2 <memmove+0x14>
 80217b4:	2300      	movs	r3, #0
 80217b6:	429a      	cmp	r2, r3
 80217b8:	d008      	beq.n	80217cc <memmove+0x1e>
 80217ba:	5ccc      	ldrb	r4, [r1, r3]
 80217bc:	54c4      	strb	r4, [r0, r3]
 80217be:	3301      	adds	r3, #1
 80217c0:	e7f9      	b.n	80217b6 <memmove+0x8>
 80217c2:	188b      	adds	r3, r1, r2
 80217c4:	4298      	cmp	r0, r3
 80217c6:	d2f5      	bcs.n	80217b4 <memmove+0x6>
 80217c8:	3a01      	subs	r2, #1
 80217ca:	d200      	bcs.n	80217ce <memmove+0x20>
 80217cc:	bd10      	pop	{r4, pc}
 80217ce:	5c8b      	ldrb	r3, [r1, r2]
 80217d0:	5483      	strb	r3, [r0, r2]
 80217d2:	e7f9      	b.n	80217c8 <memmove+0x1a>

080217d4 <_fstat_r>:
 80217d4:	2300      	movs	r3, #0
 80217d6:	b570      	push	{r4, r5, r6, lr}
 80217d8:	4d06      	ldr	r5, [pc, #24]	@ (80217f4 <_fstat_r+0x20>)
 80217da:	0004      	movs	r4, r0
 80217dc:	0008      	movs	r0, r1
 80217de:	0011      	movs	r1, r2
 80217e0:	602b      	str	r3, [r5, #0]
 80217e2:	f7eb f98f 	bl	800cb04 <_fstat>
 80217e6:	1c43      	adds	r3, r0, #1
 80217e8:	d103      	bne.n	80217f2 <_fstat_r+0x1e>
 80217ea:	682b      	ldr	r3, [r5, #0]
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d000      	beq.n	80217f2 <_fstat_r+0x1e>
 80217f0:	6023      	str	r3, [r4, #0]
 80217f2:	bd70      	pop	{r4, r5, r6, pc}
 80217f4:	200038f0 	.word	0x200038f0

080217f8 <_isatty_r>:
 80217f8:	2300      	movs	r3, #0
 80217fa:	b570      	push	{r4, r5, r6, lr}
 80217fc:	4d06      	ldr	r5, [pc, #24]	@ (8021818 <_isatty_r+0x20>)
 80217fe:	0004      	movs	r4, r0
 8021800:	0008      	movs	r0, r1
 8021802:	602b      	str	r3, [r5, #0]
 8021804:	f7eb f98c 	bl	800cb20 <_isatty>
 8021808:	1c43      	adds	r3, r0, #1
 802180a:	d103      	bne.n	8021814 <_isatty_r+0x1c>
 802180c:	682b      	ldr	r3, [r5, #0]
 802180e:	2b00      	cmp	r3, #0
 8021810:	d000      	beq.n	8021814 <_isatty_r+0x1c>
 8021812:	6023      	str	r3, [r4, #0]
 8021814:	bd70      	pop	{r4, r5, r6, pc}
 8021816:	46c0      	nop			@ (mov r8, r8)
 8021818:	200038f0 	.word	0x200038f0

0802181c <_sbrk_r>:
 802181c:	2300      	movs	r3, #0
 802181e:	b570      	push	{r4, r5, r6, lr}
 8021820:	4d06      	ldr	r5, [pc, #24]	@ (802183c <_sbrk_r+0x20>)
 8021822:	0004      	movs	r4, r0
 8021824:	0008      	movs	r0, r1
 8021826:	602b      	str	r3, [r5, #0]
 8021828:	f7eb f98e 	bl	800cb48 <_sbrk>
 802182c:	1c43      	adds	r3, r0, #1
 802182e:	d103      	bne.n	8021838 <_sbrk_r+0x1c>
 8021830:	682b      	ldr	r3, [r5, #0]
 8021832:	2b00      	cmp	r3, #0
 8021834:	d000      	beq.n	8021838 <_sbrk_r+0x1c>
 8021836:	6023      	str	r3, [r4, #0]
 8021838:	bd70      	pop	{r4, r5, r6, pc}
 802183a:	46c0      	nop			@ (mov r8, r8)
 802183c:	200038f0 	.word	0x200038f0

08021840 <__assert_func>:
 8021840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021842:	0014      	movs	r4, r2
 8021844:	001a      	movs	r2, r3
 8021846:	4b09      	ldr	r3, [pc, #36]	@ (802186c <__assert_func+0x2c>)
 8021848:	0005      	movs	r5, r0
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	000e      	movs	r6, r1
 802184e:	68d8      	ldr	r0, [r3, #12]
 8021850:	4b07      	ldr	r3, [pc, #28]	@ (8021870 <__assert_func+0x30>)
 8021852:	2c00      	cmp	r4, #0
 8021854:	d101      	bne.n	802185a <__assert_func+0x1a>
 8021856:	4b07      	ldr	r3, [pc, #28]	@ (8021874 <__assert_func+0x34>)
 8021858:	001c      	movs	r4, r3
 802185a:	4907      	ldr	r1, [pc, #28]	@ (8021878 <__assert_func+0x38>)
 802185c:	9301      	str	r3, [sp, #4]
 802185e:	9402      	str	r4, [sp, #8]
 8021860:	002b      	movs	r3, r5
 8021862:	9600      	str	r6, [sp, #0]
 8021864:	f000 f866 	bl	8021934 <fiprintf>
 8021868:	f000 f874 	bl	8021954 <abort>
 802186c:	200003c8 	.word	0x200003c8
 8021870:	080244f1 	.word	0x080244f1
 8021874:	0802452c 	.word	0x0802452c
 8021878:	080244fe 	.word	0x080244fe

0802187c <_calloc_r>:
 802187c:	b570      	push	{r4, r5, r6, lr}
 802187e:	0c0b      	lsrs	r3, r1, #16
 8021880:	0c15      	lsrs	r5, r2, #16
 8021882:	2b00      	cmp	r3, #0
 8021884:	d11e      	bne.n	80218c4 <_calloc_r+0x48>
 8021886:	2d00      	cmp	r5, #0
 8021888:	d10c      	bne.n	80218a4 <_calloc_r+0x28>
 802188a:	b289      	uxth	r1, r1
 802188c:	b294      	uxth	r4, r2
 802188e:	434c      	muls	r4, r1
 8021890:	0021      	movs	r1, r4
 8021892:	f7fe fe53 	bl	802053c <_malloc_r>
 8021896:	1e05      	subs	r5, r0, #0
 8021898:	d01a      	beq.n	80218d0 <_calloc_r+0x54>
 802189a:	0022      	movs	r2, r4
 802189c:	2100      	movs	r1, #0
 802189e:	f7fd fb0f 	bl	801eec0 <memset>
 80218a2:	e016      	b.n	80218d2 <_calloc_r+0x56>
 80218a4:	1c2b      	adds	r3, r5, #0
 80218a6:	1c0c      	adds	r4, r1, #0
 80218a8:	b289      	uxth	r1, r1
 80218aa:	b292      	uxth	r2, r2
 80218ac:	434a      	muls	r2, r1
 80218ae:	b29b      	uxth	r3, r3
 80218b0:	b2a1      	uxth	r1, r4
 80218b2:	4359      	muls	r1, r3
 80218b4:	0c14      	lsrs	r4, r2, #16
 80218b6:	190c      	adds	r4, r1, r4
 80218b8:	0c23      	lsrs	r3, r4, #16
 80218ba:	d107      	bne.n	80218cc <_calloc_r+0x50>
 80218bc:	0424      	lsls	r4, r4, #16
 80218be:	b292      	uxth	r2, r2
 80218c0:	4314      	orrs	r4, r2
 80218c2:	e7e5      	b.n	8021890 <_calloc_r+0x14>
 80218c4:	2d00      	cmp	r5, #0
 80218c6:	d101      	bne.n	80218cc <_calloc_r+0x50>
 80218c8:	1c14      	adds	r4, r2, #0
 80218ca:	e7ed      	b.n	80218a8 <_calloc_r+0x2c>
 80218cc:	230c      	movs	r3, #12
 80218ce:	6003      	str	r3, [r0, #0]
 80218d0:	2500      	movs	r5, #0
 80218d2:	0028      	movs	r0, r5
 80218d4:	bd70      	pop	{r4, r5, r6, pc}

080218d6 <_realloc_r>:
 80218d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80218d8:	0006      	movs	r6, r0
 80218da:	000c      	movs	r4, r1
 80218dc:	0015      	movs	r5, r2
 80218de:	2900      	cmp	r1, #0
 80218e0:	d105      	bne.n	80218ee <_realloc_r+0x18>
 80218e2:	0011      	movs	r1, r2
 80218e4:	f7fe fe2a 	bl	802053c <_malloc_r>
 80218e8:	0004      	movs	r4, r0
 80218ea:	0020      	movs	r0, r4
 80218ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80218ee:	2a00      	cmp	r2, #0
 80218f0:	d103      	bne.n	80218fa <_realloc_r+0x24>
 80218f2:	f7fe fa53 	bl	801fd9c <_free_r>
 80218f6:	2400      	movs	r4, #0
 80218f8:	e7f7      	b.n	80218ea <_realloc_r+0x14>
 80218fa:	f000 f832 	bl	8021962 <_malloc_usable_size_r>
 80218fe:	0007      	movs	r7, r0
 8021900:	4285      	cmp	r5, r0
 8021902:	d802      	bhi.n	802190a <_realloc_r+0x34>
 8021904:	0843      	lsrs	r3, r0, #1
 8021906:	42ab      	cmp	r3, r5
 8021908:	d3ef      	bcc.n	80218ea <_realloc_r+0x14>
 802190a:	0029      	movs	r1, r5
 802190c:	0030      	movs	r0, r6
 802190e:	f7fe fe15 	bl	802053c <_malloc_r>
 8021912:	9001      	str	r0, [sp, #4]
 8021914:	2800      	cmp	r0, #0
 8021916:	d0ee      	beq.n	80218f6 <_realloc_r+0x20>
 8021918:	002a      	movs	r2, r5
 802191a:	42bd      	cmp	r5, r7
 802191c:	d900      	bls.n	8021920 <_realloc_r+0x4a>
 802191e:	003a      	movs	r2, r7
 8021920:	0021      	movs	r1, r4
 8021922:	9801      	ldr	r0, [sp, #4]
 8021924:	f7fd fba8 	bl	801f078 <memcpy>
 8021928:	0021      	movs	r1, r4
 802192a:	0030      	movs	r0, r6
 802192c:	f7fe fa36 	bl	801fd9c <_free_r>
 8021930:	9c01      	ldr	r4, [sp, #4]
 8021932:	e7da      	b.n	80218ea <_realloc_r+0x14>

08021934 <fiprintf>:
 8021934:	b40e      	push	{r1, r2, r3}
 8021936:	b517      	push	{r0, r1, r2, r4, lr}
 8021938:	4c05      	ldr	r4, [pc, #20]	@ (8021950 <fiprintf+0x1c>)
 802193a:	ab05      	add	r3, sp, #20
 802193c:	cb04      	ldmia	r3!, {r2}
 802193e:	0001      	movs	r1, r0
 8021940:	6820      	ldr	r0, [r4, #0]
 8021942:	9301      	str	r3, [sp, #4]
 8021944:	f7ff fcfa 	bl	802133c <_vfiprintf_r>
 8021948:	bc1e      	pop	{r1, r2, r3, r4}
 802194a:	bc08      	pop	{r3}
 802194c:	b003      	add	sp, #12
 802194e:	4718      	bx	r3
 8021950:	200003c8 	.word	0x200003c8

08021954 <abort>:
 8021954:	2006      	movs	r0, #6
 8021956:	b510      	push	{r4, lr}
 8021958:	f000 f834 	bl	80219c4 <raise>
 802195c:	2001      	movs	r0, #1
 802195e:	f7eb f89d 	bl	800ca9c <_exit>

08021962 <_malloc_usable_size_r>:
 8021962:	1f0b      	subs	r3, r1, #4
 8021964:	681b      	ldr	r3, [r3, #0]
 8021966:	1f18      	subs	r0, r3, #4
 8021968:	2b00      	cmp	r3, #0
 802196a:	da01      	bge.n	8021970 <_malloc_usable_size_r+0xe>
 802196c:	580b      	ldr	r3, [r1, r0]
 802196e:	18c0      	adds	r0, r0, r3
 8021970:	4770      	bx	lr

08021972 <_raise_r>:
 8021972:	b570      	push	{r4, r5, r6, lr}
 8021974:	0004      	movs	r4, r0
 8021976:	000d      	movs	r5, r1
 8021978:	291f      	cmp	r1, #31
 802197a:	d904      	bls.n	8021986 <_raise_r+0x14>
 802197c:	2316      	movs	r3, #22
 802197e:	6003      	str	r3, [r0, #0]
 8021980:	2001      	movs	r0, #1
 8021982:	4240      	negs	r0, r0
 8021984:	bd70      	pop	{r4, r5, r6, pc}
 8021986:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8021988:	2b00      	cmp	r3, #0
 802198a:	d004      	beq.n	8021996 <_raise_r+0x24>
 802198c:	008a      	lsls	r2, r1, #2
 802198e:	189b      	adds	r3, r3, r2
 8021990:	681a      	ldr	r2, [r3, #0]
 8021992:	2a00      	cmp	r2, #0
 8021994:	d108      	bne.n	80219a8 <_raise_r+0x36>
 8021996:	0020      	movs	r0, r4
 8021998:	f000 f830 	bl	80219fc <_getpid_r>
 802199c:	002a      	movs	r2, r5
 802199e:	0001      	movs	r1, r0
 80219a0:	0020      	movs	r0, r4
 80219a2:	f000 f819 	bl	80219d8 <_kill_r>
 80219a6:	e7ed      	b.n	8021984 <_raise_r+0x12>
 80219a8:	2a01      	cmp	r2, #1
 80219aa:	d009      	beq.n	80219c0 <_raise_r+0x4e>
 80219ac:	1c51      	adds	r1, r2, #1
 80219ae:	d103      	bne.n	80219b8 <_raise_r+0x46>
 80219b0:	2316      	movs	r3, #22
 80219b2:	6003      	str	r3, [r0, #0]
 80219b4:	2001      	movs	r0, #1
 80219b6:	e7e5      	b.n	8021984 <_raise_r+0x12>
 80219b8:	2100      	movs	r1, #0
 80219ba:	0028      	movs	r0, r5
 80219bc:	6019      	str	r1, [r3, #0]
 80219be:	4790      	blx	r2
 80219c0:	2000      	movs	r0, #0
 80219c2:	e7df      	b.n	8021984 <_raise_r+0x12>

080219c4 <raise>:
 80219c4:	b510      	push	{r4, lr}
 80219c6:	4b03      	ldr	r3, [pc, #12]	@ (80219d4 <raise+0x10>)
 80219c8:	0001      	movs	r1, r0
 80219ca:	6818      	ldr	r0, [r3, #0]
 80219cc:	f7ff ffd1 	bl	8021972 <_raise_r>
 80219d0:	bd10      	pop	{r4, pc}
 80219d2:	46c0      	nop			@ (mov r8, r8)
 80219d4:	200003c8 	.word	0x200003c8

080219d8 <_kill_r>:
 80219d8:	2300      	movs	r3, #0
 80219da:	b570      	push	{r4, r5, r6, lr}
 80219dc:	4d06      	ldr	r5, [pc, #24]	@ (80219f8 <_kill_r+0x20>)
 80219de:	0004      	movs	r4, r0
 80219e0:	0008      	movs	r0, r1
 80219e2:	0011      	movs	r1, r2
 80219e4:	602b      	str	r3, [r5, #0]
 80219e6:	f7eb f849 	bl	800ca7c <_kill>
 80219ea:	1c43      	adds	r3, r0, #1
 80219ec:	d103      	bne.n	80219f6 <_kill_r+0x1e>
 80219ee:	682b      	ldr	r3, [r5, #0]
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d000      	beq.n	80219f6 <_kill_r+0x1e>
 80219f4:	6023      	str	r3, [r4, #0]
 80219f6:	bd70      	pop	{r4, r5, r6, pc}
 80219f8:	200038f0 	.word	0x200038f0

080219fc <_getpid_r>:
 80219fc:	b510      	push	{r4, lr}
 80219fe:	f7eb f837 	bl	800ca70 <_getpid>
 8021a02:	bd10      	pop	{r4, pc}

08021a04 <expf>:
 8021a04:	b570      	push	{r4, r5, r6, lr}
 8021a06:	1c04      	adds	r4, r0, #0
 8021a08:	f000 f8e6 	bl	8021bd8 <__ieee754_expf>
 8021a0c:	1c05      	adds	r5, r0, #0
 8021a0e:	1c20      	adds	r0, r4, #0
 8021a10:	f000 f83c 	bl	8021a8c <finitef>
 8021a14:	2800      	cmp	r0, #0
 8021a16:	d00b      	beq.n	8021a30 <expf+0x2c>
 8021a18:	490c      	ldr	r1, [pc, #48]	@ (8021a4c <expf+0x48>)
 8021a1a:	1c20      	adds	r0, r4, #0
 8021a1c:	f7de fd9c 	bl	8000558 <__aeabi_fcmpgt>
 8021a20:	2800      	cmp	r0, #0
 8021a22:	d007      	beq.n	8021a34 <expf+0x30>
 8021a24:	f7fd faf0 	bl	801f008 <__errno>
 8021a28:	25ff      	movs	r5, #255	@ 0xff
 8021a2a:	2322      	movs	r3, #34	@ 0x22
 8021a2c:	05ed      	lsls	r5, r5, #23
 8021a2e:	6003      	str	r3, [r0, #0]
 8021a30:	1c28      	adds	r0, r5, #0
 8021a32:	bd70      	pop	{r4, r5, r6, pc}
 8021a34:	4906      	ldr	r1, [pc, #24]	@ (8021a50 <expf+0x4c>)
 8021a36:	1c20      	adds	r0, r4, #0
 8021a38:	f7de fd7a 	bl	8000530 <__aeabi_fcmplt>
 8021a3c:	2800      	cmp	r0, #0
 8021a3e:	d0f7      	beq.n	8021a30 <expf+0x2c>
 8021a40:	f7fd fae2 	bl	801f008 <__errno>
 8021a44:	2322      	movs	r3, #34	@ 0x22
 8021a46:	2500      	movs	r5, #0
 8021a48:	6003      	str	r3, [r0, #0]
 8021a4a:	e7f1      	b.n	8021a30 <expf+0x2c>
 8021a4c:	42b17217 	.word	0x42b17217
 8021a50:	c2cff1b5 	.word	0xc2cff1b5

08021a54 <sqrtf>:
 8021a54:	b570      	push	{r4, r5, r6, lr}
 8021a56:	1c05      	adds	r5, r0, #0
 8021a58:	f000 f822 	bl	8021aa0 <__ieee754_sqrtf>
 8021a5c:	1c29      	adds	r1, r5, #0
 8021a5e:	1c04      	adds	r4, r0, #0
 8021a60:	1c28      	adds	r0, r5, #0
 8021a62:	f7df fd7f 	bl	8001564 <__aeabi_fcmpun>
 8021a66:	2800      	cmp	r0, #0
 8021a68:	d10e      	bne.n	8021a88 <sqrtf+0x34>
 8021a6a:	2100      	movs	r1, #0
 8021a6c:	1c28      	adds	r0, r5, #0
 8021a6e:	f7de fd5f 	bl	8000530 <__aeabi_fcmplt>
 8021a72:	2800      	cmp	r0, #0
 8021a74:	d008      	beq.n	8021a88 <sqrtf+0x34>
 8021a76:	f7fd fac7 	bl	801f008 <__errno>
 8021a7a:	2321      	movs	r3, #33	@ 0x21
 8021a7c:	2100      	movs	r1, #0
 8021a7e:	6003      	str	r3, [r0, #0]
 8021a80:	1c08      	adds	r0, r1, #0
 8021a82:	f7df f8a7 	bl	8000bd4 <__aeabi_fdiv>
 8021a86:	1c04      	adds	r4, r0, #0
 8021a88:	1c20      	adds	r0, r4, #0
 8021a8a:	bd70      	pop	{r4, r5, r6, pc}

08021a8c <finitef>:
 8021a8c:	22ff      	movs	r2, #255	@ 0xff
 8021a8e:	0043      	lsls	r3, r0, #1
 8021a90:	085b      	lsrs	r3, r3, #1
 8021a92:	2001      	movs	r0, #1
 8021a94:	05d2      	lsls	r2, r2, #23
 8021a96:	4293      	cmp	r3, r2
 8021a98:	db00      	blt.n	8021a9c <finitef+0x10>
 8021a9a:	2000      	movs	r0, #0
 8021a9c:	4770      	bx	lr
	...

08021aa0 <__ieee754_sqrtf>:
 8021aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021aa2:	0003      	movs	r3, r0
 8021aa4:	0042      	lsls	r2, r0, #1
 8021aa6:	1c04      	adds	r4, r0, #0
 8021aa8:	20ff      	movs	r0, #255	@ 0xff
 8021aaa:	0852      	lsrs	r2, r2, #1
 8021aac:	05c0      	lsls	r0, r0, #23
 8021aae:	4282      	cmp	r2, r0
 8021ab0:	d30a      	bcc.n	8021ac8 <__ieee754_sqrtf+0x28>
 8021ab2:	1c21      	adds	r1, r4, #0
 8021ab4:	1c20      	adds	r0, r4, #0
 8021ab6:	f7df fa73 	bl	8000fa0 <__aeabi_fmul>
 8021aba:	1c01      	adds	r1, r0, #0
 8021abc:	1c20      	adds	r0, r4, #0
 8021abe:	f7de feff 	bl	80008c0 <__aeabi_fadd>
 8021ac2:	1c04      	adds	r4, r0, #0
 8021ac4:	1c20      	adds	r0, r4, #0
 8021ac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021ac8:	2a00      	cmp	r2, #0
 8021aca:	d0fb      	beq.n	8021ac4 <__ieee754_sqrtf+0x24>
 8021acc:	2c00      	cmp	r4, #0
 8021ace:	da07      	bge.n	8021ae0 <__ieee754_sqrtf+0x40>
 8021ad0:	1c21      	adds	r1, r4, #0
 8021ad2:	1c20      	adds	r0, r4, #0
 8021ad4:	f7df fba2 	bl	800121c <__aeabi_fsub>
 8021ad8:	1c01      	adds	r1, r0, #0
 8021ada:	f7df f87b 	bl	8000bd4 <__aeabi_fdiv>
 8021ade:	e7f0      	b.n	8021ac2 <__ieee754_sqrtf+0x22>
 8021ae0:	0022      	movs	r2, r4
 8021ae2:	15e1      	asrs	r1, r4, #23
 8021ae4:	4002      	ands	r2, r0
 8021ae6:	4204      	tst	r4, r0
 8021ae8:	d046      	beq.n	8021b78 <__ieee754_sqrtf+0xd8>
 8021aea:	2280      	movs	r2, #128	@ 0x80
 8021aec:	000f      	movs	r7, r1
 8021aee:	025b      	lsls	r3, r3, #9
 8021af0:	0a5b      	lsrs	r3, r3, #9
 8021af2:	0412      	lsls	r2, r2, #16
 8021af4:	3f7f      	subs	r7, #127	@ 0x7f
 8021af6:	4313      	orrs	r3, r2
 8021af8:	07c9      	lsls	r1, r1, #31
 8021afa:	d400      	bmi.n	8021afe <__ieee754_sqrtf+0x5e>
 8021afc:	005b      	lsls	r3, r3, #1
 8021afe:	2400      	movs	r4, #0
 8021b00:	2180      	movs	r1, #128	@ 0x80
 8021b02:	2019      	movs	r0, #25
 8021b04:	0026      	movs	r6, r4
 8021b06:	107f      	asrs	r7, r7, #1
 8021b08:	005b      	lsls	r3, r3, #1
 8021b0a:	0449      	lsls	r1, r1, #17
 8021b0c:	1875      	adds	r5, r6, r1
 8021b0e:	001a      	movs	r2, r3
 8021b10:	429d      	cmp	r5, r3
 8021b12:	dc02      	bgt.n	8021b1a <__ieee754_sqrtf+0x7a>
 8021b14:	186e      	adds	r6, r5, r1
 8021b16:	1b5a      	subs	r2, r3, r5
 8021b18:	1864      	adds	r4, r4, r1
 8021b1a:	3801      	subs	r0, #1
 8021b1c:	0053      	lsls	r3, r2, #1
 8021b1e:	0849      	lsrs	r1, r1, #1
 8021b20:	2800      	cmp	r0, #0
 8021b22:	d1f3      	bne.n	8021b0c <__ieee754_sqrtf+0x6c>
 8021b24:	2a00      	cmp	r2, #0
 8021b26:	d019      	beq.n	8021b5c <__ieee754_sqrtf+0xbc>
 8021b28:	4d17      	ldr	r5, [pc, #92]	@ (8021b88 <__ieee754_sqrtf+0xe8>)
 8021b2a:	4e18      	ldr	r6, [pc, #96]	@ (8021b8c <__ieee754_sqrtf+0xec>)
 8021b2c:	6828      	ldr	r0, [r5, #0]
 8021b2e:	6831      	ldr	r1, [r6, #0]
 8021b30:	682b      	ldr	r3, [r5, #0]
 8021b32:	9301      	str	r3, [sp, #4]
 8021b34:	f7df fb72 	bl	800121c <__aeabi_fsub>
 8021b38:	1c01      	adds	r1, r0, #0
 8021b3a:	9801      	ldr	r0, [sp, #4]
 8021b3c:	f7de fd02 	bl	8000544 <__aeabi_fcmple>
 8021b40:	2800      	cmp	r0, #0
 8021b42:	d00b      	beq.n	8021b5c <__ieee754_sqrtf+0xbc>
 8021b44:	6828      	ldr	r0, [r5, #0]
 8021b46:	6831      	ldr	r1, [r6, #0]
 8021b48:	f7de feba 	bl	80008c0 <__aeabi_fadd>
 8021b4c:	682d      	ldr	r5, [r5, #0]
 8021b4e:	1c01      	adds	r1, r0, #0
 8021b50:	1c28      	adds	r0, r5, #0
 8021b52:	f7de fced 	bl	8000530 <__aeabi_fcmplt>
 8021b56:	2800      	cmp	r0, #0
 8021b58:	d011      	beq.n	8021b7e <__ieee754_sqrtf+0xde>
 8021b5a:	3402      	adds	r4, #2
 8021b5c:	23fc      	movs	r3, #252	@ 0xfc
 8021b5e:	1064      	asrs	r4, r4, #1
 8021b60:	059b      	lsls	r3, r3, #22
 8021b62:	18e3      	adds	r3, r4, r3
 8021b64:	05fc      	lsls	r4, r7, #23
 8021b66:	18e4      	adds	r4, r4, r3
 8021b68:	e7ac      	b.n	8021ac4 <__ieee754_sqrtf+0x24>
 8021b6a:	005b      	lsls	r3, r3, #1
 8021b6c:	3201      	adds	r2, #1
 8021b6e:	4203      	tst	r3, r0
 8021b70:	d0fb      	beq.n	8021b6a <__ieee754_sqrtf+0xca>
 8021b72:	3a01      	subs	r2, #1
 8021b74:	1a89      	subs	r1, r1, r2
 8021b76:	e7b8      	b.n	8021aea <__ieee754_sqrtf+0x4a>
 8021b78:	2080      	movs	r0, #128	@ 0x80
 8021b7a:	0400      	lsls	r0, r0, #16
 8021b7c:	e7f7      	b.n	8021b6e <__ieee754_sqrtf+0xce>
 8021b7e:	2301      	movs	r3, #1
 8021b80:	3401      	adds	r4, #1
 8021b82:	439c      	bics	r4, r3
 8021b84:	e7ea      	b.n	8021b5c <__ieee754_sqrtf+0xbc>
 8021b86:	46c0      	nop			@ (mov r8, r8)
 8021b88:	2000041c 	.word	0x2000041c
 8021b8c:	20000418 	.word	0x20000418

08021b90 <roundf>:
 8021b90:	0dc3      	lsrs	r3, r0, #23
 8021b92:	b2db      	uxtb	r3, r3
 8021b94:	3b7f      	subs	r3, #127	@ 0x7f
 8021b96:	0002      	movs	r2, r0
 8021b98:	b510      	push	{r4, lr}
 8021b9a:	2b16      	cmp	r3, #22
 8021b9c:	dc13      	bgt.n	8021bc6 <roundf+0x36>
 8021b9e:	2b00      	cmp	r3, #0
 8021ba0:	da07      	bge.n	8021bb2 <roundf+0x22>
 8021ba2:	0fc2      	lsrs	r2, r0, #31
 8021ba4:	07d0      	lsls	r0, r2, #31
 8021ba6:	3301      	adds	r3, #1
 8021ba8:	d102      	bne.n	8021bb0 <roundf+0x20>
 8021baa:	23fe      	movs	r3, #254	@ 0xfe
 8021bac:	059b      	lsls	r3, r3, #22
 8021bae:	4318      	orrs	r0, r3
 8021bb0:	bd10      	pop	{r4, pc}
 8021bb2:	4908      	ldr	r1, [pc, #32]	@ (8021bd4 <roundf+0x44>)
 8021bb4:	4119      	asrs	r1, r3
 8021bb6:	4208      	tst	r0, r1
 8021bb8:	d0fa      	beq.n	8021bb0 <roundf+0x20>
 8021bba:	2080      	movs	r0, #128	@ 0x80
 8021bbc:	03c0      	lsls	r0, r0, #15
 8021bbe:	4118      	asrs	r0, r3
 8021bc0:	1880      	adds	r0, r0, r2
 8021bc2:	4388      	bics	r0, r1
 8021bc4:	e7f4      	b.n	8021bb0 <roundf+0x20>
 8021bc6:	2b80      	cmp	r3, #128	@ 0x80
 8021bc8:	d1f2      	bne.n	8021bb0 <roundf+0x20>
 8021bca:	1c01      	adds	r1, r0, #0
 8021bcc:	f7de fe78 	bl	80008c0 <__aeabi_fadd>
 8021bd0:	e7ee      	b.n	8021bb0 <roundf+0x20>
 8021bd2:	46c0      	nop			@ (mov r8, r8)
 8021bd4:	007fffff 	.word	0x007fffff

08021bd8 <__ieee754_expf>:
 8021bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021bda:	21ff      	movs	r1, #255	@ 0xff
 8021bdc:	0043      	lsls	r3, r0, #1
 8021bde:	1c04      	adds	r4, r0, #0
 8021be0:	085b      	lsrs	r3, r3, #1
 8021be2:	05c9      	lsls	r1, r1, #23
 8021be4:	428b      	cmp	r3, r1
 8021be6:	d904      	bls.n	8021bf2 <__ieee754_expf+0x1a>
 8021be8:	1c01      	adds	r1, r0, #0
 8021bea:	1c20      	adds	r0, r4, #0
 8021bec:	f7de fe68 	bl	80008c0 <__aeabi_fadd>
 8021bf0:	e00d      	b.n	8021c0e <__ieee754_expf+0x36>
 8021bf2:	0fc6      	lsrs	r6, r0, #31
 8021bf4:	428b      	cmp	r3, r1
 8021bf6:	d104      	bne.n	8021c02 <__ieee754_expf+0x2a>
 8021bf8:	2e00      	cmp	r6, #0
 8021bfa:	d000      	beq.n	8021bfe <__ieee754_expf+0x26>
 8021bfc:	e0ba      	b.n	8021d74 <__ieee754_expf+0x19c>
 8021bfe:	1c20      	adds	r0, r4, #0
 8021c00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021c02:	495d      	ldr	r1, [pc, #372]	@ (8021d78 <__ieee754_expf+0x1a0>)
 8021c04:	4288      	cmp	r0, r1
 8021c06:	dd04      	ble.n	8021c12 <__ieee754_expf+0x3a>
 8021c08:	2000      	movs	r0, #0
 8021c0a:	f000 f8f1 	bl	8021df0 <__math_oflowf>
 8021c0e:	1c04      	adds	r4, r0, #0
 8021c10:	e7f5      	b.n	8021bfe <__ieee754_expf+0x26>
 8021c12:	2800      	cmp	r0, #0
 8021c14:	da06      	bge.n	8021c24 <__ieee754_expf+0x4c>
 8021c16:	4a59      	ldr	r2, [pc, #356]	@ (8021d7c <__ieee754_expf+0x1a4>)
 8021c18:	4293      	cmp	r3, r2
 8021c1a:	d903      	bls.n	8021c24 <__ieee754_expf+0x4c>
 8021c1c:	2000      	movs	r0, #0
 8021c1e:	f000 f8e1 	bl	8021de4 <__math_uflowf>
 8021c22:	e7f4      	b.n	8021c0e <__ieee754_expf+0x36>
 8021c24:	4a56      	ldr	r2, [pc, #344]	@ (8021d80 <__ieee754_expf+0x1a8>)
 8021c26:	4293      	cmp	r3, r2
 8021c28:	d96e      	bls.n	8021d08 <__ieee754_expf+0x130>
 8021c2a:	4a56      	ldr	r2, [pc, #344]	@ (8021d84 <__ieee754_expf+0x1ac>)
 8021c2c:	00b5      	lsls	r5, r6, #2
 8021c2e:	4293      	cmp	r3, r2
 8021c30:	d84e      	bhi.n	8021cd0 <__ieee754_expf+0xf8>
 8021c32:	4b55      	ldr	r3, [pc, #340]	@ (8021d88 <__ieee754_expf+0x1b0>)
 8021c34:	1c20      	adds	r0, r4, #0
 8021c36:	5959      	ldr	r1, [r3, r5]
 8021c38:	f7df faf0 	bl	800121c <__aeabi_fsub>
 8021c3c:	4b53      	ldr	r3, [pc, #332]	@ (8021d8c <__ieee754_expf+0x1b4>)
 8021c3e:	1c07      	adds	r7, r0, #0
 8021c40:	595b      	ldr	r3, [r3, r5]
 8021c42:	2501      	movs	r5, #1
 8021c44:	1bad      	subs	r5, r5, r6
 8021c46:	9300      	str	r3, [sp, #0]
 8021c48:	1bad      	subs	r5, r5, r6
 8021c4a:	9900      	ldr	r1, [sp, #0]
 8021c4c:	1c38      	adds	r0, r7, #0
 8021c4e:	f7df fae5 	bl	800121c <__aeabi_fsub>
 8021c52:	1c04      	adds	r4, r0, #0
 8021c54:	1c21      	adds	r1, r4, #0
 8021c56:	1c20      	adds	r0, r4, #0
 8021c58:	f7df f9a2 	bl	8000fa0 <__aeabi_fmul>
 8021c5c:	494c      	ldr	r1, [pc, #304]	@ (8021d90 <__ieee754_expf+0x1b8>)
 8021c5e:	1c06      	adds	r6, r0, #0
 8021c60:	f7df f99e 	bl	8000fa0 <__aeabi_fmul>
 8021c64:	494b      	ldr	r1, [pc, #300]	@ (8021d94 <__ieee754_expf+0x1bc>)
 8021c66:	f7df fad9 	bl	800121c <__aeabi_fsub>
 8021c6a:	1c31      	adds	r1, r6, #0
 8021c6c:	f7df f998 	bl	8000fa0 <__aeabi_fmul>
 8021c70:	4949      	ldr	r1, [pc, #292]	@ (8021d98 <__ieee754_expf+0x1c0>)
 8021c72:	f7de fe25 	bl	80008c0 <__aeabi_fadd>
 8021c76:	1c31      	adds	r1, r6, #0
 8021c78:	f7df f992 	bl	8000fa0 <__aeabi_fmul>
 8021c7c:	4947      	ldr	r1, [pc, #284]	@ (8021d9c <__ieee754_expf+0x1c4>)
 8021c7e:	f7df facd 	bl	800121c <__aeabi_fsub>
 8021c82:	1c31      	adds	r1, r6, #0
 8021c84:	f7df f98c 	bl	8000fa0 <__aeabi_fmul>
 8021c88:	4945      	ldr	r1, [pc, #276]	@ (8021da0 <__ieee754_expf+0x1c8>)
 8021c8a:	f7de fe19 	bl	80008c0 <__aeabi_fadd>
 8021c8e:	1c31      	adds	r1, r6, #0
 8021c90:	f7df f986 	bl	8000fa0 <__aeabi_fmul>
 8021c94:	1c01      	adds	r1, r0, #0
 8021c96:	1c20      	adds	r0, r4, #0
 8021c98:	f7df fac0 	bl	800121c <__aeabi_fsub>
 8021c9c:	1c01      	adds	r1, r0, #0
 8021c9e:	1c06      	adds	r6, r0, #0
 8021ca0:	1c20      	adds	r0, r4, #0
 8021ca2:	f7df f97d 	bl	8000fa0 <__aeabi_fmul>
 8021ca6:	9001      	str	r0, [sp, #4]
 8021ca8:	2d00      	cmp	r5, #0
 8021caa:	d140      	bne.n	8021d2e <__ieee754_expf+0x156>
 8021cac:	2180      	movs	r1, #128	@ 0x80
 8021cae:	1c30      	adds	r0, r6, #0
 8021cb0:	05c9      	lsls	r1, r1, #23
 8021cb2:	f7df fab3 	bl	800121c <__aeabi_fsub>
 8021cb6:	1c01      	adds	r1, r0, #0
 8021cb8:	9801      	ldr	r0, [sp, #4]
 8021cba:	f7de ff8b 	bl	8000bd4 <__aeabi_fdiv>
 8021cbe:	1c21      	adds	r1, r4, #0
 8021cc0:	f7df faac 	bl	800121c <__aeabi_fsub>
 8021cc4:	1c01      	adds	r1, r0, #0
 8021cc6:	20fe      	movs	r0, #254	@ 0xfe
 8021cc8:	0580      	lsls	r0, r0, #22
 8021cca:	f7df faa7 	bl	800121c <__aeabi_fsub>
 8021cce:	e79e      	b.n	8021c0e <__ieee754_expf+0x36>
 8021cd0:	4934      	ldr	r1, [pc, #208]	@ (8021da4 <__ieee754_expf+0x1cc>)
 8021cd2:	1c20      	adds	r0, r4, #0
 8021cd4:	f7df f964 	bl	8000fa0 <__aeabi_fmul>
 8021cd8:	4b33      	ldr	r3, [pc, #204]	@ (8021da8 <__ieee754_expf+0x1d0>)
 8021cda:	5959      	ldr	r1, [r3, r5]
 8021cdc:	f7de fdf0 	bl	80008c0 <__aeabi_fadd>
 8021ce0:	f7df fc56 	bl	8001590 <__aeabi_f2iz>
 8021ce4:	0005      	movs	r5, r0
 8021ce6:	f7df fc73 	bl	80015d0 <__aeabi_i2f>
 8021cea:	4930      	ldr	r1, [pc, #192]	@ (8021dac <__ieee754_expf+0x1d4>)
 8021cec:	1c06      	adds	r6, r0, #0
 8021cee:	f7df f957 	bl	8000fa0 <__aeabi_fmul>
 8021cf2:	1c01      	adds	r1, r0, #0
 8021cf4:	1c20      	adds	r0, r4, #0
 8021cf6:	f7df fa91 	bl	800121c <__aeabi_fsub>
 8021cfa:	492d      	ldr	r1, [pc, #180]	@ (8021db0 <__ieee754_expf+0x1d8>)
 8021cfc:	1c07      	adds	r7, r0, #0
 8021cfe:	1c30      	adds	r0, r6, #0
 8021d00:	f7df f94e 	bl	8000fa0 <__aeabi_fmul>
 8021d04:	9000      	str	r0, [sp, #0]
 8021d06:	e7a0      	b.n	8021c4a <__ieee754_expf+0x72>
 8021d08:	22d0      	movs	r2, #208	@ 0xd0
 8021d0a:	0592      	lsls	r2, r2, #22
 8021d0c:	4293      	cmp	r3, r2
 8021d0e:	d20c      	bcs.n	8021d2a <__ieee754_expf+0x152>
 8021d10:	4928      	ldr	r1, [pc, #160]	@ (8021db4 <__ieee754_expf+0x1dc>)
 8021d12:	1c20      	adds	r0, r4, #0
 8021d14:	f7de fdd4 	bl	80008c0 <__aeabi_fadd>
 8021d18:	21fe      	movs	r1, #254	@ 0xfe
 8021d1a:	0589      	lsls	r1, r1, #22
 8021d1c:	f7de fc1c 	bl	8000558 <__aeabi_fcmpgt>
 8021d20:	1e05      	subs	r5, r0, #0
 8021d22:	d097      	beq.n	8021c54 <__ieee754_expf+0x7c>
 8021d24:	21fe      	movs	r1, #254	@ 0xfe
 8021d26:	0589      	lsls	r1, r1, #22
 8021d28:	e75f      	b.n	8021bea <__ieee754_expf+0x12>
 8021d2a:	2500      	movs	r5, #0
 8021d2c:	e792      	b.n	8021c54 <__ieee754_expf+0x7c>
 8021d2e:	2080      	movs	r0, #128	@ 0x80
 8021d30:	1c31      	adds	r1, r6, #0
 8021d32:	05c0      	lsls	r0, r0, #23
 8021d34:	f7df fa72 	bl	800121c <__aeabi_fsub>
 8021d38:	1c01      	adds	r1, r0, #0
 8021d3a:	9801      	ldr	r0, [sp, #4]
 8021d3c:	f7de ff4a 	bl	8000bd4 <__aeabi_fdiv>
 8021d40:	1c01      	adds	r1, r0, #0
 8021d42:	9800      	ldr	r0, [sp, #0]
 8021d44:	f7df fa6a 	bl	800121c <__aeabi_fsub>
 8021d48:	1c39      	adds	r1, r7, #0
 8021d4a:	f7df fa67 	bl	800121c <__aeabi_fsub>
 8021d4e:	1c01      	adds	r1, r0, #0
 8021d50:	20fe      	movs	r0, #254	@ 0xfe
 8021d52:	0580      	lsls	r0, r0, #22
 8021d54:	f7df fa62 	bl	800121c <__aeabi_fsub>
 8021d58:	002b      	movs	r3, r5
 8021d5a:	337d      	adds	r3, #125	@ 0x7d
 8021d5c:	db02      	blt.n	8021d64 <__ieee754_expf+0x18c>
 8021d5e:	05ec      	lsls	r4, r5, #23
 8021d60:	1824      	adds	r4, r4, r0
 8021d62:	e74c      	b.n	8021bfe <__ieee754_expf+0x26>
 8021d64:	21d8      	movs	r1, #216	@ 0xd8
 8021d66:	3564      	adds	r5, #100	@ 0x64
 8021d68:	05ed      	lsls	r5, r5, #23
 8021d6a:	1828      	adds	r0, r5, r0
 8021d6c:	0509      	lsls	r1, r1, #20
 8021d6e:	f7df f917 	bl	8000fa0 <__aeabi_fmul>
 8021d72:	e74c      	b.n	8021c0e <__ieee754_expf+0x36>
 8021d74:	2400      	movs	r4, #0
 8021d76:	e742      	b.n	8021bfe <__ieee754_expf+0x26>
 8021d78:	42b17217 	.word	0x42b17217
 8021d7c:	42cff1b5 	.word	0x42cff1b5
 8021d80:	3eb17218 	.word	0x3eb17218
 8021d84:	3f851591 	.word	0x3f851591
 8021d88:	08024538 	.word	0x08024538
 8021d8c:	08024530 	.word	0x08024530
 8021d90:	3331bb4c 	.word	0x3331bb4c
 8021d94:	35ddea0e 	.word	0x35ddea0e
 8021d98:	388ab355 	.word	0x388ab355
 8021d9c:	3b360b61 	.word	0x3b360b61
 8021da0:	3e2aaaab 	.word	0x3e2aaaab
 8021da4:	3fb8aa3b 	.word	0x3fb8aa3b
 8021da8:	08024540 	.word	0x08024540
 8021dac:	3f317180 	.word	0x3f317180
 8021db0:	3717f7d1 	.word	0x3717f7d1
 8021db4:	7149f2ca 	.word	0x7149f2ca

08021db8 <with_errnof>:
 8021db8:	b570      	push	{r4, r5, r6, lr}
 8021dba:	000d      	movs	r5, r1
 8021dbc:	1c04      	adds	r4, r0, #0
 8021dbe:	f7fd f923 	bl	801f008 <__errno>
 8021dc2:	6005      	str	r5, [r0, #0]
 8021dc4:	1c20      	adds	r0, r4, #0
 8021dc6:	bd70      	pop	{r4, r5, r6, pc}

08021dc8 <xflowf>:
 8021dc8:	b510      	push	{r4, lr}
 8021dca:	1c0b      	adds	r3, r1, #0
 8021dcc:	2800      	cmp	r0, #0
 8021dce:	d002      	beq.n	8021dd6 <xflowf+0xe>
 8021dd0:	2380      	movs	r3, #128	@ 0x80
 8021dd2:	061b      	lsls	r3, r3, #24
 8021dd4:	18cb      	adds	r3, r1, r3
 8021dd6:	1c18      	adds	r0, r3, #0
 8021dd8:	f7df f8e2 	bl	8000fa0 <__aeabi_fmul>
 8021ddc:	2122      	movs	r1, #34	@ 0x22
 8021dde:	f7ff ffeb 	bl	8021db8 <with_errnof>
 8021de2:	bd10      	pop	{r4, pc}

08021de4 <__math_uflowf>:
 8021de4:	2180      	movs	r1, #128	@ 0x80
 8021de6:	b510      	push	{r4, lr}
 8021de8:	0549      	lsls	r1, r1, #21
 8021dea:	f7ff ffed 	bl	8021dc8 <xflowf>
 8021dee:	bd10      	pop	{r4, pc}

08021df0 <__math_oflowf>:
 8021df0:	21e0      	movs	r1, #224	@ 0xe0
 8021df2:	b510      	push	{r4, lr}
 8021df4:	05c9      	lsls	r1, r1, #23
 8021df6:	f7ff ffe7 	bl	8021dc8 <xflowf>
 8021dfa:	bd10      	pop	{r4, pc}

08021dfc <_init>:
 8021dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021dfe:	46c0      	nop			@ (mov r8, r8)
 8021e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e02:	bc08      	pop	{r3}
 8021e04:	469e      	mov	lr, r3
 8021e06:	4770      	bx	lr

08021e08 <_fini>:
 8021e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e0a:	46c0      	nop			@ (mov r8, r8)
 8021e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e0e:	bc08      	pop	{r3}
 8021e10:	469e      	mov	lr, r3
 8021e12:	4770      	bx	lr
