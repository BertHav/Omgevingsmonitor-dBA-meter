
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021570  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026a8  08021630  08021630  00022630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023cd8  08023cd8  00025424  2**0
                  CONTENTS
  4 .ARM          00000008  08023cd8  08023cd8  00024cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023ce0  08023ce0  00025424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023ce0  08023ce0  00024ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023ce4  08023ce4  00024ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08023ce8  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  20000424  0802410c  00025424  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003904  0802410c  00025904  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025424  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003427a  00000000  00000000  0002544c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000969f  00000000  00000000  000596c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002aa8  00000000  00000000  00062d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f86  00000000  00000000  00065810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023167  00000000  00000000  00067796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042d68  00000000  00000000  0008a8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02d0  00000000  00000000  000cd665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016d935  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000acc4  00000000  00000000  0016d9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001786ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00178719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017ac95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08021618 	.word	0x08021618

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	08021618 	.word	0x08021618

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08022f1c 	.word	0x08022f1c
 8000e0c:	08022f5c 	.word	0x08022f5c
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08022f98 	.word	0x08022f98
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00a ffaa 	bl	800e5bc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b f801 	bl	800e68c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00a ffb4 	bl	800e618 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00a ff30 	bl	800e5bc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00a ff5f 	bl	800e634 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00a ff43 	bl	800e618 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setCharges>:
void setCharges(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037b4:	f002 fb8e 	bl	8005ed4 <ReadBatteryVoltage>
 80037b8:	1c02      	adds	r2, r0, #0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <setCharges+0x20>)
 80037bc:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037be:	f002 fbeb 	bl	8005f98 <ReadSolarVoltage>
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <setCharges+0x24>)
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000570 	.word	0x20000570
 80037d4:	20000574 	.word	0x20000574

080037d8 <checkEEprom>:
bool checkEEprom(){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <checkEEprom+0x5c>)
 80037e0:	4815      	ldr	r0, [pc, #84]	@ (8003838 <checkEEprom+0x60>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	0019      	movs	r1, r3
 80037e6:	f7ff ff87 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00e      	b.n	8003810 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <checkEEprom+0x5c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <checkEEprom+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <checkEEprom+0x64>)
 8003804:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	3201      	adds	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b0b      	cmp	r3, #11
 8003816:	d9ec      	bls.n	80037f2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <checkEEprom+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <checkEEprom+0x68>)
 8003824:	701a      	strb	r2, [r3, #0]
  return test;
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <checkEEprom+0x68>)
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	200009a8 	.word	0x200009a8
 8003838:	0808000c 	.word	0x0808000c
 800383c:	200009b4 	.word	0x200009b4
 8003840:	200009b8 	.word	0x200009b8

08003844 <checkName>:
bool checkName(){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <checkName+0x5c>)
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <checkName+0x60>)
 800384e:	221e      	movs	r2, #30
 8003850:	0019      	movs	r1, r3
 8003852:	f7ff ff51 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00e      	b.n	800387c <checkName+0x38>
    configSum += nameConfig[i];
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <checkName+0x5c>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	001a      	movs	r2, r3
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <checkName+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <checkName+0x64>)
 8003870:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	3201      	adds	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d9ec      	bls.n	800385e <checkName+0x1a>
  }
  test = (configSum != 0);
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <checkName+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	4193      	sbcs	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <checkName+0x68>)
 8003890:	701a      	strb	r2, [r3, #0]
  return test;
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <checkName+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	200009bc 	.word	0x200009bc
 80038a4:	08080090 	.word	0x08080090
 80038a8:	200009dc 	.word	0x200009dc
 80038ac:	200009e0 	.word	0x200009e0

080038b0 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <ESP_GetHT+0x20>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <ESP_GetHT+0x24>)
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	20000568 	.word	0x20000568
 80038d4:	2000056c 	.word	0x2000056c

080038d8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	1dbb      	adds	r3, r7, #6
 80038e4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <setMeasurement+0x2c>)
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <setMeasurement+0x30>)
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setMeasurement+0x34>)
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000568 	.word	0x20000568
 8003908:	2000056c 	.word	0x2000056c
 800390c:	20000578 	.word	0x20000578

08003910 <setMic>:
void setMic(float dB){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <setMic+0x18>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	2000057c 	.word	0x2000057c

0800392c <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	0002      	movs	r2, r0
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	1c0a      	adds	r2, r1, #0
 800393c:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 800393e:	1dbb      	adds	r3, r7, #6
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	0018      	movs	r0, r3
 8003944:	f7fd fe44 	bl	80015d0 <__aeabi_i2f>
 8003948:	1c03      	adds	r3, r0, #0
 800394a:	490d      	ldr	r1, [pc, #52]	@ (8003980 <setPMs+0x54>)
 800394c:	1c18      	adds	r0, r3, #0
 800394e:	f7fd f941 	bl	8000bd4 <__aeabi_fdiv>
 8003952:	1c03      	adds	r3, r0, #0
 8003954:	1c1a      	adds	r2, r3, #0
 8003956:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <setPMs+0x58>)
 8003958:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	f7fd fe36 	bl	80015d0 <__aeabi_i2f>
 8003964:	1c03      	adds	r3, r0, #0
 8003966:	4906      	ldr	r1, [pc, #24]	@ (8003980 <setPMs+0x54>)
 8003968:	1c18      	adds	r0, r3, #0
 800396a:	f7fd f933 	bl	8000bd4 <__aeabi_fdiv>
 800396e:	1c03      	adds	r3, r0, #0
 8003970:	1c1a      	adds	r2, r3, #0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <setPMs+0x5c>)
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	41200000 	.word	0x41200000
 8003984:	20000580 	.word	0x20000580
 8003988:	20000584 	.word	0x20000584

0800398c <SetConfigMode>:

void SetConfigMode(){
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003990:	4b02      	ldr	r3, [pc, #8]	@ (800399c <SetConfigMode+0x10>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000054f 	.word	0x2000054f

080039a0 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039a4:	f009 fe34 	bl	800d610 <HAL_GetUIDw0>
 80039a8:	0002      	movs	r2, r0
 80039aa:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <ESP_GetUID+0x28>)
 80039ac:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039ae:	f009 fe39 	bl	800d624 <HAL_GetUIDw1>
 80039b2:	0002      	movs	r2, r0
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <ESP_GetUID+0x28>)
 80039b6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039b8:	f009 fe3e 	bl	800d638 <HAL_GetUIDw2>
 80039bc:	0002      	movs	r2, r0
 80039be:	4b02      	ldr	r3, [pc, #8]	@ (80039c8 <ESP_GetUID+0x28>)
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000554 	.word	0x20000554

080039cc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039d4:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <ESP_Init+0x2c>)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <ESP_Init+0x30>)
 80039dc:	2202      	movs	r2, #2
 80039de:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039e0:	f7ff ffde 	bl	80039a0 <ESP_GetUID>
  beurs = checkEEprom();
 80039e4:	f7ff fef8 	bl	80037d8 <checkEEprom>
 80039e8:	0003      	movs	r3, r0
 80039ea:	001a      	movs	r2, r3
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <ESP_Init+0x34>)
 80039ee:	701a      	strb	r2, [r3, #0]
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000444 	.word	0x20000444
 80039fc:	20000028 	.word	0x20000028
 8003a00:	20000552 	.word	0x20000552

08003a04 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	000a      	movs	r2, r1
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <ESP_Send+0x54>)
 8003a16:	4911      	ldr	r1, [pc, #68]	@ (8003a5c <ESP_Send+0x58>)
 8003a18:	2003      	movs	r0, #3
 8003a1a:	f009 fa2f 	bl	800ce7c <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <ESP_Send+0x5c>)
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	250f      	movs	r5, #15
 8003a24:	197c      	adds	r4, r7, r5
 8003a26:	1cbb      	adds	r3, r7, #2
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	f011 ff27 	bl	8015880 <HAL_UART_Transmit_DMA>
 8003a32:	0003      	movs	r3, r0
 8003a34:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a36:	197b      	adds	r3, r7, r5
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a3e:	4a09      	ldr	r2, [pc, #36]	@ (8003a64 <ESP_Send+0x60>)
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <ESP_Send+0x64>)
 8003a42:	0019      	movs	r1, r3
 8003a44:	2001      	movs	r0, #1
 8003a46:	f009 fa19 	bl	800ce7c <CreateLine>
    return false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <ESP_Send+0x4c>
  }
  return true;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b004      	add	sp, #16
 8003a56:	bdb0      	pop	{r4, r5, r7, pc}
 8003a58:	08021630 	.word	0x08021630
 8003a5c:	08021640 	.word	0x08021640
 8003a60:	20000444 	.word	0x20000444
 8003a64:	08021644 	.word	0x08021644
 8003a68:	08021664 	.word	0x08021664

08003a6c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a6c:	b5b0      	push	{r4, r5, r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	000a      	movs	r2, r1
 8003a76:	1cbb      	adds	r3, r7, #2
 8003a78:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <ESP_Receive+0x5c>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <ESP_Receive+0x60>)
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	250f      	movs	r5, #15
 8003a86:	197c      	adds	r4, r7, r5
 8003a88:	1cbb      	adds	r3, r7, #2
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0019      	movs	r1, r3
 8003a90:	f011 ff86 	bl	80159a0 <HAL_UART_Receive_DMA>
 8003a94:	0003      	movs	r3, r0
 8003a96:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a98:	197b      	adds	r3, r7, r5
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <ESP_Receive+0x60>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2284      	movs	r2, #132	@ 0x84
 8003aa6:	589b      	ldr	r3, [r3, r2]
 8003aa8:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <ESP_Receive+0x64>)
 8003aaa:	490a      	ldr	r1, [pc, #40]	@ (8003ad4 <ESP_Receive+0x68>)
 8003aac:	2001      	movs	r0, #1
 8003aae:	f009 f9e5 	bl	800ce7c <CreateLine>
    RxComplete = true;
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <ESP_Receive+0x5c>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
    return false;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <ESP_Receive+0x52>
  }
  return true;
 8003abc:	2301      	movs	r3, #1
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	20000448 	.word	0x20000448
 8003acc:	20000444 	.word	0x20000444
 8003ad0:	08021668 	.word	0x08021668
 8003ad4:	08021664 	.word	0x08021664

08003ad8 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <HAL_UART_ErrorCallback+0x2c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d107      	bne.n	8003afa <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2284      	movs	r2, #132	@ 0x84
 8003aee:	589b      	ldr	r3, [r3, r2]
 8003af0:	4a05      	ldr	r2, [pc, #20]	@ (8003b08 <HAL_UART_ErrorCallback+0x30>)
 8003af2:	4906      	ldr	r1, [pc, #24]	@ (8003b0c <HAL_UART_ErrorCallback+0x34>)
 8003af4:	2003      	movs	r0, #3
 8003af6:	f009 f9c1 	bl	800ce7c <CreateLine>
  }
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	20000444 	.word	0x20000444
 8003b08:	08021698 	.word	0x08021698
 8003b0c:	08021640 	.word	0x08021640

08003b10 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e010      	b.n	8003b42 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	001a      	movs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1898      	adds	r0, r3, r2
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	001a      	movs	r2, r3
 8003b34:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <uint8ArrayToString+0x44>)
 8003b36:	0019      	movs	r1, r3
 8003b38:	f01a fc8c 	bl	801e454 <siprintf>
  for (int i = 0; i < 12; i++)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b0b      	cmp	r3, #11
 8003b46:	ddeb      	ble.n	8003b20 <uint8ArrayToString+0x10>
  }
}
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	080216c4 	.word	0x080216c4

08003b58 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5a:	b089      	sub	sp, #36	@ 0x24
 8003b5c:	af04      	add	r7, sp, #16
 8003b5e:	0002      	movs	r2, r0
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b64:	4be5      	ldr	r3, [pc, #916]	@ (8003efc <CreateMessage+0x3a4>)
 8003b66:	48e6      	ldr	r0, [pc, #920]	@ (8003f00 <CreateMessage+0x3a8>)
 8003b68:	220c      	movs	r2, #12
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	f7ff fdc4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b70:	4be4      	ldr	r3, [pc, #912]	@ (8003f04 <CreateMessage+0x3ac>)
 8003b72:	48e5      	ldr	r0, [pc, #916]	@ (8003f08 <CreateMessage+0x3b0>)
 8003b74:	220c      	movs	r2, #12
 8003b76:	0019      	movs	r1, r3
 8003b78:	f7ff fdbe 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b7c:	4be3      	ldr	r3, [pc, #908]	@ (8003f0c <CreateMessage+0x3b4>)
 8003b7e:	48e4      	ldr	r0, [pc, #912]	@ (8003f10 <CreateMessage+0x3b8>)
 8003b80:	220c      	movs	r2, #12
 8003b82:	0019      	movs	r1, r3
 8003b84:	f7ff fdb8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b88:	4be2      	ldr	r3, [pc, #904]	@ (8003f14 <CreateMessage+0x3bc>)
 8003b8a:	48e3      	ldr	r0, [pc, #908]	@ (8003f18 <CreateMessage+0x3c0>)
 8003b8c:	220c      	movs	r2, #12
 8003b8e:	0019      	movs	r1, r3
 8003b90:	f7ff fdb2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b94:	4be1      	ldr	r3, [pc, #900]	@ (8003f1c <CreateMessage+0x3c4>)
 8003b96:	48e2      	ldr	r0, [pc, #904]	@ (8003f20 <CreateMessage+0x3c8>)
 8003b98:	220c      	movs	r2, #12
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	f7ff fdac 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003ba0:	4be0      	ldr	r3, [pc, #896]	@ (8003f24 <CreateMessage+0x3cc>)
 8003ba2:	48e1      	ldr	r0, [pc, #900]	@ (8003f28 <CreateMessage+0x3d0>)
 8003ba4:	220c      	movs	r2, #12
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	f7ff fda6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003bac:	4bdf      	ldr	r3, [pc, #892]	@ (8003f2c <CreateMessage+0x3d4>)
 8003bae:	48e0      	ldr	r0, [pc, #896]	@ (8003f30 <CreateMessage+0x3d8>)
 8003bb0:	220c      	movs	r2, #12
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	f7ff fda0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003bb8:	4bde      	ldr	r3, [pc, #888]	@ (8003f34 <CreateMessage+0x3dc>)
 8003bba:	48df      	ldr	r0, [pc, #892]	@ (8003f38 <CreateMessage+0x3e0>)
 8003bbc:	220c      	movs	r2, #12
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	f7ff fd9a 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003bc4:	f7ff fe3e 	bl	8003844 <checkName>
 8003bc8:	1e03      	subs	r3, r0, #0
 8003bca:	d006      	beq.n	8003bda <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003bcc:	4bdb      	ldr	r3, [pc, #876]	@ (8003f3c <CreateMessage+0x3e4>)
 8003bce:	48dc      	ldr	r0, [pc, #880]	@ (8003f40 <CreateMessage+0x3e8>)
 8003bd0:	221e      	movs	r2, #30
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	f7ff fd90 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003bd8:	e005      	b.n	8003be6 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003bda:	4bd8      	ldr	r3, [pc, #864]	@ (8003f3c <CreateMessage+0x3e4>)
 8003bdc:	4ad9      	ldr	r2, [pc, #868]	@ (8003f44 <CreateMessage+0x3ec>)
 8003bde:	6811      	ldr	r1, [r2, #0]
 8003be0:	6019      	str	r1, [r3, #0]
 8003be2:	7912      	ldrb	r2, [r2, #4]
 8003be4:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003be6:	f7ff fde3 	bl	80037b0 <setCharges>

  memset(message, '\0', 1024);
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	00da      	lsls	r2, r3, #3
 8003bee:	4bd6      	ldr	r3, [pc, #856]	@ (8003f48 <CreateMessage+0x3f0>)
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f01a fd72 	bl	801e6dc <memset>
  uint16_t index = 0;
 8003bf8:	260e      	movs	r6, #14
 8003bfa:	19bb      	adds	r3, r7, r6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003c00:	19bb      	adds	r3, r7, r6
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	4bd0      	ldr	r3, [pc, #832]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	4ad0      	ldr	r2, [pc, #832]	@ (8003f4c <CreateMessage+0x3f4>)
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f01a fc21 	bl	801e454 <siprintf>
  index = strlen(message);
 8003c12:	4bcd      	ldr	r3, [pc, #820]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7fc faa9 	bl	800016c <strlen>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	19bb      	adds	r3, r7, r6
 8003c1e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003c20:	4ab6      	ldr	r2, [pc, #728]	@ (8003efc <CreateMessage+0x3a4>)
 8003c22:	4bcb      	ldr	r3, [pc, #812]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7ff ff72 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003c2c:	19bb      	adds	r3, r7, r6
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	4bc5      	ldr	r3, [pc, #788]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c32:	18d4      	adds	r4, r2, r3
 8003c34:	4bc7      	ldr	r3, [pc, #796]	@ (8003f54 <CreateMessage+0x3fc>)
 8003c36:	689d      	ldr	r5, [r3, #8]
 8003c38:	4bc7      	ldr	r3, [pc, #796]	@ (8003f58 <CreateMessage+0x400>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c18      	adds	r0, r3, #0
 8003c3e:	f7ff fc11 	bl	8003464 <__aeabi_f2d>
 8003c42:	0002      	movs	r2, r0
 8003c44:	000b      	movs	r3, r1
 8003c46:	48bd      	ldr	r0, [pc, #756]	@ (8003f3c <CreateMessage+0x3e4>)
 8003c48:	49c4      	ldr	r1, [pc, #784]	@ (8003f5c <CreateMessage+0x404>)
 8003c4a:	9202      	str	r2, [sp, #8]
 8003c4c:	9303      	str	r3, [sp, #12]
 8003c4e:	4bc0      	ldr	r3, [pc, #768]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	0003      	movs	r3, r0
 8003c54:	002a      	movs	r2, r5
 8003c56:	0020      	movs	r0, r4
 8003c58:	f01a fbfc 	bl	801e454 <siprintf>
  index = strlen(message);
 8003c5c:	4bba      	ldr	r3, [pc, #744]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7fc fa84 	bl	800016c <strlen>
 8003c64:	0002      	movs	r2, r0
 8003c66:	19bb      	adds	r3, r7, r6
 8003c68:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003c6a:	4aa6      	ldr	r2, [pc, #664]	@ (8003f04 <CreateMessage+0x3ac>)
 8003c6c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c6e:	0011      	movs	r1, r2
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7ff ff4d 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003c76:	19bb      	adds	r3, r7, r6
 8003c78:	881a      	ldrh	r2, [r3, #0]
 8003c7a:	4bb3      	ldr	r3, [pc, #716]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c7c:	18d4      	adds	r4, r2, r3
 8003c7e:	4bb5      	ldr	r3, [pc, #724]	@ (8003f54 <CreateMessage+0x3fc>)
 8003c80:	689d      	ldr	r5, [r3, #8]
 8003c82:	4bb7      	ldr	r3, [pc, #732]	@ (8003f60 <CreateMessage+0x408>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1c18      	adds	r0, r3, #0
 8003c88:	f7ff fbec 	bl	8003464 <__aeabi_f2d>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	000b      	movs	r3, r1
 8003c90:	48aa      	ldr	r0, [pc, #680]	@ (8003f3c <CreateMessage+0x3e4>)
 8003c92:	49b4      	ldr	r1, [pc, #720]	@ (8003f64 <CreateMessage+0x40c>)
 8003c94:	9202      	str	r2, [sp, #8]
 8003c96:	9303      	str	r3, [sp, #12]
 8003c98:	4bad      	ldr	r3, [pc, #692]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	002a      	movs	r2, r5
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	f01a fbd7 	bl	801e454 <siprintf>
  index = strlen(message);
 8003ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8003f48 <CreateMessage+0x3f0>)
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fc fa5f 	bl	800016c <strlen>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	19bb      	adds	r3, r7, r6
 8003cb2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003cb4:	4a95      	ldr	r2, [pc, #596]	@ (8003f0c <CreateMessage+0x3b4>)
 8003cb6:	4ba6      	ldr	r3, [pc, #664]	@ (8003f50 <CreateMessage+0x3f8>)
 8003cb8:	0011      	movs	r1, r2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff ff28 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003cc0:	19bb      	adds	r3, r7, r6
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f48 <CreateMessage+0x3f0>)
 8003cc6:	18d4      	adds	r4, r2, r3
 8003cc8:	4ba2      	ldr	r3, [pc, #648]	@ (8003f54 <CreateMessage+0x3fc>)
 8003cca:	689d      	ldr	r5, [r3, #8]
 8003ccc:	4ba6      	ldr	r3, [pc, #664]	@ (8003f68 <CreateMessage+0x410>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c18      	adds	r0, r3, #0
 8003cd2:	f7ff fbc7 	bl	8003464 <__aeabi_f2d>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	000b      	movs	r3, r1
 8003cda:	4898      	ldr	r0, [pc, #608]	@ (8003f3c <CreateMessage+0x3e4>)
 8003cdc:	49a3      	ldr	r1, [pc, #652]	@ (8003f6c <CreateMessage+0x414>)
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9303      	str	r3, [sp, #12]
 8003ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8003f50 <CreateMessage+0x3f8>)
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	002a      	movs	r2, r5
 8003cea:	0020      	movs	r0, r4
 8003cec:	f01a fbb2 	bl	801e454 <siprintf>
  index = strlen(message);
 8003cf0:	4b95      	ldr	r3, [pc, #596]	@ (8003f48 <CreateMessage+0x3f0>)
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fc fa3a 	bl	800016c <strlen>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	19bb      	adds	r3, r7, r6
 8003cfc:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003cfe:	4a85      	ldr	r2, [pc, #532]	@ (8003f14 <CreateMessage+0x3bc>)
 8003d00:	4b93      	ldr	r3, [pc, #588]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d02:	0011      	movs	r1, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff ff03 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003d0a:	19bb      	adds	r3, r7, r6
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d10:	18d0      	adds	r0, r2, r3
 8003d12:	4b90      	ldr	r3, [pc, #576]	@ (8003f54 <CreateMessage+0x3fc>)
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	4b96      	ldr	r3, [pc, #600]	@ (8003f70 <CreateMessage+0x418>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	4c88      	ldr	r4, [pc, #544]	@ (8003f3c <CreateMessage+0x3e4>)
 8003d1c:	4995      	ldr	r1, [pc, #596]	@ (8003f74 <CreateMessage+0x41c>)
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	4b8b      	ldr	r3, [pc, #556]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	0023      	movs	r3, r4
 8003d26:	f01a fb95 	bl	801e454 <siprintf>
  index = strlen(message);
 8003d2a:	4b87      	ldr	r3, [pc, #540]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc fa1d 	bl	800016c <strlen>
 8003d32:	0002      	movs	r2, r0
 8003d34:	19bb      	adds	r3, r7, r6
 8003d36:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4053      	eors	r3, r2
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d100      	bne.n	8003d48 <CreateMessage+0x1f0>
 8003d46:	e094      	b.n	8003e72 <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003d48:	4a74      	ldr	r2, [pc, #464]	@ (8003f1c <CreateMessage+0x3c4>)
 8003d4a:	4b81      	ldr	r3, [pc, #516]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff fede 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d54:	19bb      	adds	r3, r7, r6
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	4b7b      	ldr	r3, [pc, #492]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d5a:	18d4      	adds	r4, r2, r3
 8003d5c:	4b7d      	ldr	r3, [pc, #500]	@ (8003f54 <CreateMessage+0x3fc>)
 8003d5e:	689d      	ldr	r5, [r3, #8]
 8003d60:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <CreateMessage+0x420>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1c18      	adds	r0, r3, #0
 8003d66:	f7ff fb7d 	bl	8003464 <__aeabi_f2d>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	000b      	movs	r3, r1
 8003d6e:	4873      	ldr	r0, [pc, #460]	@ (8003f3c <CreateMessage+0x3e4>)
 8003d70:	4982      	ldr	r1, [pc, #520]	@ (8003f7c <CreateMessage+0x424>)
 8003d72:	9202      	str	r2, [sp, #8]
 8003d74:	9303      	str	r3, [sp, #12]
 8003d76:	4b76      	ldr	r3, [pc, #472]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	002a      	movs	r2, r5
 8003d7e:	0020      	movs	r0, r4
 8003d80:	f01a fb68 	bl	801e454 <siprintf>
    index = strlen(message);
 8003d84:	4b70      	ldr	r3, [pc, #448]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fc f9f0 	bl	800016c <strlen>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	19bb      	adds	r3, r7, r6
 8003d90:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d92:	4a64      	ldr	r2, [pc, #400]	@ (8003f24 <CreateMessage+0x3cc>)
 8003d94:	4b6e      	ldr	r3, [pc, #440]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d96:	0011      	movs	r1, r2
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff feb9 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d9e:	19bb      	adds	r3, r7, r6
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	4b69      	ldr	r3, [pc, #420]	@ (8003f48 <CreateMessage+0x3f0>)
 8003da4:	18d4      	adds	r4, r2, r3
 8003da6:	4b6b      	ldr	r3, [pc, #428]	@ (8003f54 <CreateMessage+0x3fc>)
 8003da8:	689d      	ldr	r5, [r3, #8]
 8003daa:	4b75      	ldr	r3, [pc, #468]	@ (8003f80 <CreateMessage+0x428>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	1c18      	adds	r0, r3, #0
 8003db0:	f7ff fb58 	bl	8003464 <__aeabi_f2d>
 8003db4:	0002      	movs	r2, r0
 8003db6:	000b      	movs	r3, r1
 8003db8:	4860      	ldr	r0, [pc, #384]	@ (8003f3c <CreateMessage+0x3e4>)
 8003dba:	4972      	ldr	r1, [pc, #456]	@ (8003f84 <CreateMessage+0x42c>)
 8003dbc:	9202      	str	r2, [sp, #8]
 8003dbe:	9303      	str	r3, [sp, #12]
 8003dc0:	4b63      	ldr	r3, [pc, #396]	@ (8003f50 <CreateMessage+0x3f8>)
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	002a      	movs	r2, r5
 8003dc8:	0020      	movs	r0, r4
 8003dca:	f01a fb43 	bl	801e454 <siprintf>
    index = strlen(message);
 8003dce:	4b5e      	ldr	r3, [pc, #376]	@ (8003f48 <CreateMessage+0x3f0>)
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7fc f9cb 	bl	800016c <strlen>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	19bb      	adds	r3, r7, r6
 8003dda:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003ddc:	4a53      	ldr	r2, [pc, #332]	@ (8003f2c <CreateMessage+0x3d4>)
 8003dde:	4b5c      	ldr	r3, [pc, #368]	@ (8003f50 <CreateMessage+0x3f8>)
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff fe94 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003de8:	19bb      	adds	r3, r7, r6
 8003dea:	881a      	ldrh	r2, [r3, #0]
 8003dec:	4b56      	ldr	r3, [pc, #344]	@ (8003f48 <CreateMessage+0x3f0>)
 8003dee:	18d4      	adds	r4, r2, r3
 8003df0:	4b58      	ldr	r3, [pc, #352]	@ (8003f54 <CreateMessage+0x3fc>)
 8003df2:	689d      	ldr	r5, [r3, #8]
 8003df4:	4b64      	ldr	r3, [pc, #400]	@ (8003f88 <CreateMessage+0x430>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1c18      	adds	r0, r3, #0
 8003dfa:	f7ff fb33 	bl	8003464 <__aeabi_f2d>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	000b      	movs	r3, r1
 8003e02:	484e      	ldr	r0, [pc, #312]	@ (8003f3c <CreateMessage+0x3e4>)
 8003e04:	4961      	ldr	r1, [pc, #388]	@ (8003f8c <CreateMessage+0x434>)
 8003e06:	9202      	str	r2, [sp, #8]
 8003e08:	9303      	str	r3, [sp, #12]
 8003e0a:	4b51      	ldr	r3, [pc, #324]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	0003      	movs	r3, r0
 8003e10:	002a      	movs	r2, r5
 8003e12:	0020      	movs	r0, r4
 8003e14:	f01a fb1e 	bl	801e454 <siprintf>
    index = strlen(message);
 8003e18:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f7fc f9a6 	bl	800016c <strlen>
 8003e20:	0002      	movs	r2, r0
 8003e22:	19bb      	adds	r3, r7, r6
 8003e24:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003e26:	4a43      	ldr	r2, [pc, #268]	@ (8003f34 <CreateMessage+0x3dc>)
 8003e28:	4b49      	ldr	r3, [pc, #292]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fe6f 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003e32:	19bb      	adds	r3, r7, r6
 8003e34:	881a      	ldrh	r2, [r3, #0]
 8003e36:	4b44      	ldr	r3, [pc, #272]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e38:	18d4      	adds	r4, r2, r3
 8003e3a:	4b46      	ldr	r3, [pc, #280]	@ (8003f54 <CreateMessage+0x3fc>)
 8003e3c:	689d      	ldr	r5, [r3, #8]
 8003e3e:	4b54      	ldr	r3, [pc, #336]	@ (8003f90 <CreateMessage+0x438>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	1c18      	adds	r0, r3, #0
 8003e44:	f7ff fb0e 	bl	8003464 <__aeabi_f2d>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	000b      	movs	r3, r1
 8003e4c:	483b      	ldr	r0, [pc, #236]	@ (8003f3c <CreateMessage+0x3e4>)
 8003e4e:	4951      	ldr	r1, [pc, #324]	@ (8003f94 <CreateMessage+0x43c>)
 8003e50:	9202      	str	r2, [sp, #8]
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	0003      	movs	r3, r0
 8003e5a:	002a      	movs	r2, r5
 8003e5c:	0020      	movs	r0, r4
 8003e5e:	f01a faf9 	bl	801e454 <siprintf>
    index = strlen(message);
 8003e62:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7fc f981 	bl	800016c <strlen>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	19bb      	adds	r3, r7, r6
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e025      	b.n	8003ebe <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003e72:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <CreateMessage+0x3c4>)
 8003e74:	4b36      	ldr	r3, [pc, #216]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff fe49 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003e7e:	260e      	movs	r6, #14
 8003e80:	19bb      	adds	r3, r7, r6
 8003e82:	881a      	ldrh	r2, [r3, #0]
 8003e84:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e86:	18d4      	adds	r4, r2, r3
 8003e88:	4b32      	ldr	r3, [pc, #200]	@ (8003f54 <CreateMessage+0x3fc>)
 8003e8a:	689d      	ldr	r5, [r3, #8]
 8003e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f78 <CreateMessage+0x420>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c18      	adds	r0, r3, #0
 8003e92:	f7ff fae7 	bl	8003464 <__aeabi_f2d>
 8003e96:	0002      	movs	r2, r0
 8003e98:	000b      	movs	r3, r1
 8003e9a:	4828      	ldr	r0, [pc, #160]	@ (8003f3c <CreateMessage+0x3e4>)
 8003e9c:	493e      	ldr	r1, [pc, #248]	@ (8003f98 <CreateMessage+0x440>)
 8003e9e:	9202      	str	r2, [sp, #8]
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <CreateMessage+0x3f8>)
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	002a      	movs	r2, r5
 8003eaa:	0020      	movs	r0, r4
 8003eac:	f01a fad2 	bl	801e454 <siprintf>
    index = strlen(message);
 8003eb0:	4b25      	ldr	r3, [pc, #148]	@ (8003f48 <CreateMessage+0x3f0>)
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f95a 	bl	800016c <strlen>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	19bb      	adds	r3, r7, r6
 8003ebc:	801a      	strh	r2, [r3, #0]
  }

  Debug("Length of datagram: %d", index);
 8003ebe:	240e      	movs	r4, #14
 8003ec0:	193b      	adds	r3, r7, r4
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	4a35      	ldr	r2, [pc, #212]	@ (8003f9c <CreateMessage+0x444>)
 8003ec6:	4936      	ldr	r1, [pc, #216]	@ (8003fa0 <CreateMessage+0x448>)
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f008 ffd7 	bl	800ce7c <CreateLine>
  index = sprintf(&message[index], "]");
 8003ece:	193b      	adds	r3, r7, r4
 8003ed0:	881a      	ldrh	r2, [r3, #0]
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <CreateMessage+0x3f0>)
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	4a33      	ldr	r2, [pc, #204]	@ (8003fa4 <CreateMessage+0x44c>)
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f01a faba 	bl	801e454 <siprintf>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	193b      	adds	r3, r7, r4
 8003ee4:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003ee6:	4b18      	ldr	r3, [pc, #96]	@ (8003f48 <CreateMessage+0x3f0>)
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f93f 	bl	800016c <strlen>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	b29b      	uxth	r3, r3
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b005      	add	sp, #20
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	200009e4 	.word	0x200009e4
 8003f00:	0808000c 	.word	0x0808000c
 8003f04:	200009f0 	.word	0x200009f0
 8003f08:	08080018 	.word	0x08080018
 8003f0c:	200009fc 	.word	0x200009fc
 8003f10:	08080048 	.word	0x08080048
 8003f14:	20000a08 	.word	0x20000a08
 8003f18:	08080030 	.word	0x08080030
 8003f1c:	20000a14 	.word	0x20000a14
 8003f20:	0808006c 	.word	0x0808006c
 8003f24:	20000a20 	.word	0x20000a20
 8003f28:	08080078 	.word	0x08080078
 8003f2c:	20000a2c 	.word	0x20000a2c
 8003f30:	08080054 	.word	0x08080054
 8003f34:	20000a38 	.word	0x20000a38
 8003f38:	08080060 	.word	0x08080060
 8003f3c:	20000a44 	.word	0x20000a44
 8003f40:	08080090 	.word	0x08080090
 8003f44:	08022ffc 	.word	0x08022ffc
 8003f48:	20000588 	.word	0x20000588
 8003f4c:	080216cc 	.word	0x080216cc
 8003f50:	20000a64 	.word	0x20000a64
 8003f54:	20000554 	.word	0x20000554
 8003f58:	20000568 	.word	0x20000568
 8003f5c:	080216d0 	.word	0x080216d0
 8003f60:	2000056c 	.word	0x2000056c
 8003f64:	08021724 	.word	0x08021724
 8003f68:	2000057c 	.word	0x2000057c
 8003f6c:	0802177c 	.word	0x0802177c
 8003f70:	20000578 	.word	0x20000578
 8003f74:	080217d8 	.word	0x080217d8
 8003f78:	20000570 	.word	0x20000570
 8003f7c:	0802182c 	.word	0x0802182c
 8003f80:	20000574 	.word	0x20000574
 8003f84:	0802188c 	.word	0x0802188c
 8003f88:	20000580 	.word	0x20000580
 8003f8c:	080218ec 	.word	0x080218ec
 8003f90:	20000584 	.word	0x20000584
 8003f94:	08021948 	.word	0x08021948
 8003f98:	080219a0 	.word	0x080219a0
 8003f9c:	080219f8 	.word	0x080219f8
 8003fa0:	08021640 	.word	0x08021640
 8003fa4:	08021a10 	.word	0x08021a10

08003fa8 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003fac:	2064      	movs	r0, #100	@ 0x64
 8003fae:	f009 fb0b 	bl	800d5c8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003fb2:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <StartProg+0x60>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f00a fd5a 	bl	800ea72 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003fbe:	2064      	movs	r0, #100	@ 0x64
 8003fc0:	f009 fb02 	bl	800d5c8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003fc4:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <StartProg+0x60>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2102      	movs	r1, #2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f00a fd51 	bl	800ea72 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003fd0:	23fa      	movs	r3, #250	@ 0xfa
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f009 faf7 	bl	800d5c8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003fda:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <StartProg+0x60>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2101      	movs	r1, #1
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f00a fd46 	bl	800ea72 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003fe6:	23fa      	movs	r3, #250	@ 0xfa
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	0018      	movs	r0, r3
 8003fec:	f009 faec 	bl	800d5c8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <StartProg+0x60>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f00a fd3b 	bl	800ea72 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ffc:	2028      	movs	r0, #40	@ 0x28
 8003ffe:	f009 fae3 	bl	800d5c8 <HAL_Delay>
}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	50001c00 	.word	0x50001c00

0800400c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b0d9      	sub	sp, #356	@ 0x164
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	0008      	movs	r0, r1
 8004016:	0011      	movs	r1, r2
 8004018:	4ba1      	ldr	r3, [pc, #644]	@ (80042a0 <ParseBuffer+0x294>)
 800401a:	24b0      	movs	r4, #176	@ 0xb0
 800401c:	0064      	lsls	r4, r4, #1
 800401e:	191b      	adds	r3, r3, r4
 8004020:	19db      	adds	r3, r3, r7
 8004022:	1c02      	adds	r2, r0, #0
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	4b9f      	ldr	r3, [pc, #636]	@ (80042a4 <ParseBuffer+0x298>)
 8004028:	191b      	adds	r3, r3, r4
 800402a:	19db      	adds	r3, r3, r7
 800402c:	1c0a      	adds	r2, r1, #0
 800402e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	005a      	lsls	r2, r3, #1
 8004034:	2348      	movs	r3, #72	@ 0x48
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2100      	movs	r1, #0
 800403a:	0018      	movs	r0, r3
 800403c:	f01a fb4e 	bl	801e6dc <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004040:	2360      	movs	r3, #96	@ 0x60
 8004042:	33ff      	adds	r3, #255	@ 0xff
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2203      	movs	r2, #3
 8004048:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800404a:	23ae      	movs	r3, #174	@ 0xae
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2200      	movs	r2, #0
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e013      	b.n	800407e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004056:	20ae      	movs	r0, #174	@ 0xae
 8004058:	0040      	lsls	r0, r0, #1
 800405a:	183b      	adds	r3, r7, r0
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	18d2      	adds	r2, r2, r3
 8004062:	183b      	adds	r3, r7, r0
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	7811      	ldrb	r1, [r2, #0]
 8004068:	4a8f      	ldr	r2, [pc, #572]	@ (80042a8 <ParseBuffer+0x29c>)
 800406a:	24b0      	movs	r4, #176	@ 0xb0
 800406c:	0064      	lsls	r4, r4, #1
 800406e:	1912      	adds	r2, r2, r4
 8004070:	19d2      	adds	r2, r2, r7
 8004072:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004074:	183b      	adds	r3, r7, r0
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	183b      	adds	r3, r7, r0
 800407a:	3201      	adds	r2, #1
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	23ae      	movs	r3, #174	@ 0xae
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	18fa      	adds	r2, r7, r3
 8004084:	4b86      	ldr	r3, [pc, #536]	@ (80042a0 <ParseBuffer+0x294>)
 8004086:	24b0      	movs	r4, #176	@ 0xb0
 8004088:	0064      	lsls	r4, r4, #1
 800408a:	191b      	adds	r3, r3, r4
 800408c:	19db      	adds	r3, r3, r7
 800408e:	8812      	ldrh	r2, [r2, #0]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3df      	bcc.n	8004056 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8004096:	4b82      	ldr	r3, [pc, #520]	@ (80042a0 <ParseBuffer+0x294>)
 8004098:	191b      	adds	r3, r3, r4
 800409a:	19db      	adds	r3, r3, r7
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	4a82      	ldr	r2, [pc, #520]	@ (80042a8 <ParseBuffer+0x29c>)
 80040a0:	1912      	adds	r2, r2, r4
 80040a2:	19d2      	adds	r2, r2, r7
 80040a4:	2100      	movs	r1, #0
 80040a6:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80040a8:	2648      	movs	r6, #72	@ 0x48
 80040aa:	19bb      	adds	r3, r7, r6
 80040ac:	4a7f      	ldr	r2, [pc, #508]	@ (80042ac <ParseBuffer+0x2a0>)
 80040ae:	4980      	ldr	r1, [pc, #512]	@ (80042b0 <ParseBuffer+0x2a4>)
 80040b0:	2003      	movs	r0, #3
 80040b2:	f008 fee3 	bl	800ce7c <CreateLine>
#endif
  char * ParsePoint = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	22ac      	movs	r2, #172	@ 0xac
 80040ba:	0052      	lsls	r2, r2, #1
 80040bc:	18b9      	adds	r1, r7, r2
 80040be:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80040c0:	4b7c      	ldr	r3, [pc, #496]	@ (80042b4 <ParseBuffer+0x2a8>)
 80040c2:	0025      	movs	r5, r4
 80040c4:	195b      	adds	r3, r3, r5
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	4a7b      	ldr	r2, [pc, #492]	@ (80042b8 <ParseBuffer+0x2ac>)
 80040ca:	8811      	ldrh	r1, [r2, #0]
 80040cc:	8019      	strh	r1, [r3, #0]
 80040ce:	7892      	ldrb	r2, [r2, #2]
 80040d0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80040d2:	4b7a      	ldr	r3, [pc, #488]	@ (80042bc <ParseBuffer+0x2b0>)
 80040d4:	195b      	adds	r3, r3, r5
 80040d6:	19db      	adds	r3, r3, r7
 80040d8:	4a79      	ldr	r2, [pc, #484]	@ (80042c0 <ParseBuffer+0x2b4>)
 80040da:	6811      	ldr	r1, [r2, #0]
 80040dc:	6019      	str	r1, [r3, #0]
 80040de:	8892      	ldrh	r2, [r2, #4]
 80040e0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80040e2:	4b78      	ldr	r3, [pc, #480]	@ (80042c4 <ParseBuffer+0x2b8>)
 80040e4:	195b      	adds	r3, r3, r5
 80040e6:	19db      	adds	r3, r3, r7
 80040e8:	4a77      	ldr	r2, [pc, #476]	@ (80042c8 <ParseBuffer+0x2bc>)
 80040ea:	6811      	ldr	r1, [r2, #0]
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	7912      	ldrb	r2, [r2, #4]
 80040f0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80040f2:	4b76      	ldr	r3, [pc, #472]	@ (80042cc <ParseBuffer+0x2c0>)
 80040f4:	195b      	adds	r3, r3, r5
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	4a75      	ldr	r2, [pc, #468]	@ (80042d0 <ParseBuffer+0x2c4>)
 80040fa:	6811      	ldr	r1, [r2, #0]
 80040fc:	6019      	str	r1, [r3, #0]
 80040fe:	8892      	ldrh	r2, [r2, #4]
 8004100:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004102:	4b74      	ldr	r3, [pc, #464]	@ (80042d4 <ParseBuffer+0x2c8>)
 8004104:	195b      	adds	r3, r3, r5
 8004106:	19db      	adds	r3, r3, r7
 8004108:	223e      	movs	r2, #62	@ 0x3e
 800410a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800410c:	4b72      	ldr	r3, [pc, #456]	@ (80042d8 <ParseBuffer+0x2cc>)
 800410e:	195b      	adds	r3, r3, r5
 8004110:	19db      	adds	r3, r3, r7
 8004112:	4a72      	ldr	r2, [pc, #456]	@ (80042dc <ParseBuffer+0x2d0>)
 8004114:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004116:	c313      	stmia	r3!, {r0, r1, r4}
 8004118:	8811      	ldrh	r1, [r2, #0]
 800411a:	8019      	strh	r1, [r3, #0]
 800411c:	7892      	ldrb	r2, [r2, #2]
 800411e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004120:	4b6f      	ldr	r3, [pc, #444]	@ (80042e0 <ParseBuffer+0x2d4>)
 8004122:	195b      	adds	r3, r3, r5
 8004124:	19db      	adds	r3, r3, r7
 8004126:	4a6f      	ldr	r2, [pc, #444]	@ (80042e4 <ParseBuffer+0x2d8>)
 8004128:	ca13      	ldmia	r2!, {r0, r1, r4}
 800412a:	c313      	stmia	r3!, {r0, r1, r4}
 800412c:	8812      	ldrh	r2, [r2, #0]
 800412e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004130:	4b5c      	ldr	r3, [pc, #368]	@ (80042a4 <ParseBuffer+0x298>)
 8004132:	195b      	adds	r3, r3, r5
 8004134:	19db      	adds	r3, r3, r7
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 800413c:	2344      	movs	r3, #68	@ 0x44
 800413e:	18fa      	adds	r2, r7, r3
 8004140:	19bb      	adds	r3, r7, r6
 8004142:	0011      	movs	r1, r2
 8004144:	0018      	movs	r0, r3
 8004146:	f01a fb04 	bl	801e752 <strstr>
 800414a:	0003      	movs	r3, r0
 800414c:	22ac      	movs	r2, #172	@ 0xac
 800414e:	0052      	lsls	r2, r2, #1
 8004150:	18ba      	adds	r2, r7, r2
 8004152:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <ParseBuffer+0x298>)
 8004156:	22b0      	movs	r2, #176	@ 0xb0
 8004158:	0052      	lsls	r2, r2, #1
 800415a:	189b      	adds	r3, r3, r2
 800415c:	19db      	adds	r3, r3, r7
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10c      	bne.n	800417e <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004164:	232c      	movs	r3, #44	@ 0x2c
 8004166:	18fa      	adds	r2, r7, r3
 8004168:	2348      	movs	r3, #72	@ 0x48
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	0011      	movs	r1, r2
 800416e:	0018      	movs	r0, r3
 8004170:	f01a faef 	bl	801e752 <strstr>
 8004174:	0003      	movs	r3, r0
 8004176:	22ac      	movs	r2, #172	@ 0xac
 8004178:	0052      	lsls	r2, r2, #1
 800417a:	18ba      	adds	r2, r7, r2
 800417c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800417e:	4b49      	ldr	r3, [pc, #292]	@ (80042a4 <ParseBuffer+0x298>)
 8004180:	22b0      	movs	r2, #176	@ 0xb0
 8004182:	0052      	lsls	r2, r2, #1
 8004184:	189b      	adds	r3, r3, r2
 8004186:	19db      	adds	r3, r3, r7
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d10c      	bne.n	80041a8 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800418e:	2328      	movs	r3, #40	@ 0x28
 8004190:	18fa      	adds	r2, r7, r3
 8004192:	2348      	movs	r3, #72	@ 0x48
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	0011      	movs	r1, r2
 8004198:	0018      	movs	r0, r3
 800419a:	f01a fada 	bl	801e752 <strstr>
 800419e:	0003      	movs	r3, r0
 80041a0:	22ac      	movs	r2, #172	@ 0xac
 80041a2:	0052      	lsls	r2, r2, #1
 80041a4:	18ba      	adds	r2, r7, r2
 80041a6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80041a8:	4b3e      	ldr	r3, [pc, #248]	@ (80042a4 <ParseBuffer+0x298>)
 80041aa:	22b0      	movs	r2, #176	@ 0xb0
 80041ac:	0052      	lsls	r2, r2, #1
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	19db      	adds	r3, r3, r7
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d10c      	bne.n	80041d2 <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80041b8:	2308      	movs	r3, #8
 80041ba:	18fa      	adds	r2, r7, r3
 80041bc:	2348      	movs	r3, #72	@ 0x48
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f01a fac5 	bl	801e752 <strstr>
 80041c8:	0003      	movs	r3, r0
 80041ca:	22ac      	movs	r2, #172	@ 0xac
 80041cc:	0052      	lsls	r2, r2, #1
 80041ce:	18ba      	adds	r2, r7, r2
 80041d0:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80041d2:	233c      	movs	r3, #60	@ 0x3c
 80041d4:	18fa      	adds	r2, r7, r3
 80041d6:	2448      	movs	r4, #72	@ 0x48
 80041d8:	193b      	adds	r3, r7, r4
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f01a fab8 	bl	801e752 <strstr>
 80041e2:	0003      	movs	r3, r0
 80041e4:	22aa      	movs	r2, #170	@ 0xaa
 80041e6:	0052      	lsls	r2, r2, #1
 80041e8:	18ba      	adds	r2, r7, r2
 80041ea:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80041ec:	2318      	movs	r3, #24
 80041ee:	18fa      	adds	r2, r7, r3
 80041f0:	193b      	adds	r3, r7, r4
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f01a faac 	bl	801e752 <strstr>
 80041fa:	0003      	movs	r3, r0
 80041fc:	22a8      	movs	r2, #168	@ 0xa8
 80041fe:	0052      	lsls	r2, r2, #1
 8004200:	18ba      	adds	r2, r7, r2
 8004202:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004204:	4a38      	ldr	r2, [pc, #224]	@ (80042e8 <ParseBuffer+0x2dc>)
 8004206:	193b      	adds	r3, r7, r4
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f01a faa1 	bl	801e752 <strstr>
 8004210:	0003      	movs	r3, r0
 8004212:	22a6      	movs	r2, #166	@ 0xa6
 8004214:	0052      	lsls	r2, r2, #1
 8004216:	18ba      	adds	r2, r7, r2
 8004218:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800421a:	2334      	movs	r3, #52	@ 0x34
 800421c:	18fa      	adds	r2, r7, r3
 800421e:	193b      	adds	r3, r7, r4
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f01a fa95 	bl	801e752 <strstr>
 8004228:	0003      	movs	r3, r0
 800422a:	22a4      	movs	r2, #164	@ 0xa4
 800422c:	0052      	lsls	r2, r2, #1
 800422e:	18ba      	adds	r2, r7, r2
 8004230:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004232:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <ParseBuffer+0x294>)
 8004234:	21b0      	movs	r1, #176	@ 0xb0
 8004236:	0049      	lsls	r1, r1, #1
 8004238:	185b      	adds	r3, r3, r1
 800423a:	19db      	adds	r3, r3, r7
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d800      	bhi.n	8004244 <ParseBuffer+0x238>
 8004242:	e0c0      	b.n	80043c6 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004244:	22ac      	movs	r2, #172	@ 0xac
 8004246:	0052      	lsls	r2, r2, #1
 8004248:	18bb      	adds	r3, r7, r2
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d053      	beq.n	80042f8 <ParseBuffer+0x2ec>
 8004250:	18bb      	adds	r3, r7, r2
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b4f      	cmp	r3, #79	@ 0x4f
 8004258:	d14e      	bne.n	80042f8 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800425a:	2360      	movs	r3, #96	@ 0x60
 800425c:	33ff      	adds	r3, #255	@ 0xff
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004264:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <ParseBuffer+0x2e0>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b12      	cmp	r3, #18
 800426a:	d145      	bne.n	80042f8 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <ParseBuffer+0x294>)
 800426e:	185b      	adds	r3, r3, r1
 8004270:	19db      	adds	r3, r3, r7
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	2b2b      	cmp	r3, #43	@ 0x2b
 8004276:	d10b      	bne.n	8004290 <ParseBuffer+0x284>
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <ParseBuffer+0x29c>)
 800427a:	185b      	adds	r3, r3, r1
 800427c:	19db      	adds	r3, r3, r7
 800427e:	2221      	movs	r2, #33	@ 0x21
 8004280:	5c9b      	ldrb	r3, [r3, r2]
 8004282:	2b32      	cmp	r3, #50	@ 0x32
 8004284:	d104      	bne.n	8004290 <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004286:	193b      	adds	r3, r7, r4
 8004288:	0018      	movs	r0, r3
 800428a:	f002 f86f 	bl	800636c <ParseTime>
 800428e:	e033      	b.n	80042f8 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 8004290:	4a17      	ldr	r2, [pc, #92]	@ (80042f0 <ParseBuffer+0x2e4>)
 8004292:	4b18      	ldr	r3, [pc, #96]	@ (80042f4 <ParseBuffer+0x2e8>)
 8004294:	0019      	movs	r1, r3
 8004296:	2001      	movs	r0, #1
 8004298:	f008 fdf0 	bl	800ce7c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800429c:	2306      	movs	r3, #6
 800429e:	e096      	b.n	80043ce <ParseBuffer+0x3c2>
 80042a0:	fffffea2 	.word	0xfffffea2
 80042a4:	fffffea1 	.word	0xfffffea1
 80042a8:	fffffee8 	.word	0xfffffee8
 80042ac:	08021a14 	.word	0x08021a14
 80042b0:	08021640 	.word	0x08021640
 80042b4:	fffffee4 	.word	0xfffffee4
 80042b8:	08021a40 	.word	0x08021a40
 80042bc:	fffffedc 	.word	0xfffffedc
 80042c0:	08021a44 	.word	0x08021a44
 80042c4:	fffffed4 	.word	0xfffffed4
 80042c8:	08021a4c 	.word	0x08021a4c
 80042cc:	fffffecc 	.word	0xfffffecc
 80042d0:	08021a54 	.word	0x08021a54
 80042d4:	fffffec8 	.word	0xfffffec8
 80042d8:	fffffeb8 	.word	0xfffffeb8
 80042dc:	08021a5c 	.word	0x08021a5c
 80042e0:	fffffea8 	.word	0xfffffea8
 80042e4:	08021a6c 	.word	0x08021a6c
 80042e8:	08022fd8 	.word	0x08022fd8
 80042ec:	200009a2 	.word	0x200009a2
 80042f0:	08021a2c 	.word	0x08021a2c
 80042f4:	08021664 	.word	0x08021664
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80042f8:	22ac      	movs	r2, #172	@ 0xac
 80042fa:	0052      	lsls	r2, r2, #1
 80042fc:	18bb      	adds	r3, r7, r2
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <ParseBuffer+0x30c>
 8004304:	18bb      	adds	r3, r7, r2
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b72      	cmp	r3, #114	@ 0x72
 800430c:	d104      	bne.n	8004318 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800430e:	2360      	movs	r3, #96	@ 0x60
 8004310:	33ff      	adds	r3, #255	@ 0xff
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2202      	movs	r2, #2
 8004316:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004318:	22ac      	movs	r2, #172	@ 0xac
 800431a:	0052      	lsls	r2, r2, #1
 800431c:	18bb      	adds	r3, r7, r2
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <ParseBuffer+0x32c>
 8004324:	18bb      	adds	r3, r7, r2
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b3e      	cmp	r3, #62	@ 0x3e
 800432c:	d104      	bne.n	8004338 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800432e:	2360      	movs	r3, #96	@ 0x60
 8004330:	33ff      	adds	r3, #255	@ 0xff
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	2205      	movs	r2, #5
 8004336:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004338:	22ac      	movs	r2, #172	@ 0xac
 800433a:	0052      	lsls	r2, r2, #1
 800433c:	18bb      	adds	r3, r7, r2
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <ParseBuffer+0x34c>
 8004344:	18bb      	adds	r3, r7, r2
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b2b      	cmp	r3, #43	@ 0x2b
 800434c:	d104      	bne.n	8004358 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800434e:	2360      	movs	r3, #96	@ 0x60
 8004350:	33ff      	adds	r3, #255	@ 0xff
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	220b      	movs	r2, #11
 8004356:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004358:	22aa      	movs	r2, #170	@ 0xaa
 800435a:	0052      	lsls	r2, r2, #1
 800435c:	18bb      	adds	r3, r7, r2
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <ParseBuffer+0x362>
 8004364:	18bb      	adds	r3, r7, r2
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b45      	cmp	r3, #69	@ 0x45
 800436c:	d00a      	beq.n	8004384 <ParseBuffer+0x378>
 800436e:	22a4      	movs	r2, #164	@ 0xa4
 8004370:	0052      	lsls	r2, r2, #1
 8004372:	18bb      	adds	r3, r7, r2
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <ParseBuffer+0x382>
 800437a:	18bb      	adds	r3, r7, r2
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b46      	cmp	r3, #70	@ 0x46
 8004382:	d104      	bne.n	800438e <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 8004384:	2360      	movs	r3, #96	@ 0x60
 8004386:	33ff      	adds	r3, #255	@ 0xff
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800438e:	22a8      	movs	r2, #168	@ 0xa8
 8004390:	0052      	lsls	r2, r2, #1
 8004392:	18bb      	adds	r3, r7, r2
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <ParseBuffer+0x39e>
 800439a:	18bb      	adds	r3, r7, r2
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b57      	cmp	r3, #87	@ 0x57
 80043a2:	d102      	bne.n	80043aa <ParseBuffer+0x39e>
      ConnectionMade = true;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	@ (80043d8 <ParseBuffer+0x3cc>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80043aa:	22a6      	movs	r2, #166	@ 0xa6
 80043ac:	0052      	lsls	r2, r2, #1
 80043ae:	18bb      	adds	r3, r7, r2
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <ParseBuffer+0x3ba>
 80043b6:	18bb      	adds	r3, r7, r2
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b32      	cmp	r3, #50	@ 0x32
 80043be:	d102      	bne.n	80043c6 <ParseBuffer+0x3ba>
      beurs = true;
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <ParseBuffer+0x3d0>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80043c6:	2360      	movs	r3, #96	@ 0x60
 80043c8:	33ff      	adds	r3, #255	@ 0xff
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	781b      	ldrb	r3, [r3, #0]

}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b059      	add	sp, #356	@ 0x164
 80043d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	20000550 	.word	0x20000550
 80043dc:	20000552 	.word	0x20000552

080043e0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80043e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <PollAwake+0x34>)
 80043e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f7fb febd 	bl	800016c <strlen>
 80043f2:	0003      	movs	r3, r0
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7ff fb02 	bl	8003a04 <ESP_Send>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d001      	beq.n	8004408 <PollAwake+0x28>
    return true;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <PollAwake+0x2a>
  }
  else{
    return false;
 8004408:	2300      	movs	r3, #0
  }
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	08021a7c 	.word	0x08021a7c

08004418 <RFPower>:
bool RFPower(){
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800441e:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <RFPower+0x34>)
 8004420:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0018      	movs	r0, r3
 8004426:	f7fb fea1 	bl	800016c <strlen>
 800442a:	0003      	movs	r3, r0
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0011      	movs	r1, r2
 8004432:	0018      	movs	r0, r3
 8004434:	f7ff fae6 	bl	8003a04 <ESP_Send>
 8004438:	1e03      	subs	r3, r0, #0
 800443a:	d001      	beq.n	8004440 <RFPower+0x28>
    return true;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <RFPower+0x2a>
  }
  else{
    return false;
 8004440:	2300      	movs	r3, #0
  }
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b002      	add	sp, #8
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	08021a84 	.word	0x08021a84

08004450 <CheckRFPower>:
bool CheckRFPower(){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <CheckRFPower+0x34>)
 8004458:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0018      	movs	r0, r3
 800445e:	f7fb fe85 	bl	800016c <strlen>
 8004462:	0003      	movs	r3, r0
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0011      	movs	r1, r2
 800446a:	0018      	movs	r0, r3
 800446c:	f7ff faca 	bl	8003a04 <ESP_Send>
 8004470:	1e03      	subs	r3, r0, #0
 8004472:	d001      	beq.n	8004478 <CheckRFPower+0x28>
    return true;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004478:	2300      	movs	r3, #0
  }
}
 800447a:	0018      	movs	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	b002      	add	sp, #8
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	08021a94 	.word	0x08021a94

08004488 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <ATRestore+0x34>)
 8004490:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f7fb fe69 	bl	800016c <strlen>
 800449a:	0003      	movs	r3, r0
 800449c:	b29a      	uxth	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0011      	movs	r1, r2
 80044a2:	0018      	movs	r0, r3
 80044a4:	f7ff faae 	bl	8003a04 <ESP_Send>
 80044a8:	1e03      	subs	r3, r0, #0
 80044aa:	d001      	beq.n	80044b0 <ATRestore+0x28>
    return true;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <ATRestore+0x2a>
  }
  else{
    return false;
 80044b0:	2300      	movs	r3, #0
  }
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b002      	add	sp, #8
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	08021aa4 	.word	0x08021aa4

080044c0 <CWINIT>:
bool CWINIT(){
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <CWINIT+0x34>)
 80044c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7fb fe4d 	bl	800016c <strlen>
 80044d2:	0003      	movs	r3, r0
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f7ff fa92 	bl	8003a04 <ESP_Send>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d001      	beq.n	80044e8 <CWINIT+0x28>
    return true;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <CWINIT+0x2a>
  }
  else{
    return false;
 80044e8:	2300      	movs	r3, #0
  }
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b002      	add	sp, #8
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	08021ab4 	.word	0x08021ab4

080044f8 <CWMODE1>:
bool CWMODE1(){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80044fe:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <CWMODE1+0x34>)
 8004500:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fb fe31 	bl	800016c <strlen>
 800450a:	0003      	movs	r3, r0
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0011      	movs	r1, r2
 8004512:	0018      	movs	r0, r3
 8004514:	f7ff fa76 	bl	8003a04 <ESP_Send>
 8004518:	1e03      	subs	r3, r0, #0
 800451a:	d001      	beq.n	8004520 <CWMODE1+0x28>
    return true;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004520:	2300      	movs	r3, #0
  }
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	08021ac4 	.word	0x08021ac4

08004530 <CWMODE2>:
bool CWMODE2(){
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004536:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <CWMODE2+0x34>)
 8004538:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f7fb fe15 	bl	800016c <strlen>
 8004542:	0003      	movs	r3, r0
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0011      	movs	r1, r2
 800454a:	0018      	movs	r0, r3
 800454c:	f7ff fa5a 	bl	8003a04 <ESP_Send>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <CWMODE2+0x28>
    return true;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004558:	2300      	movs	r3, #0
  }
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b002      	add	sp, #8
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	08021ad4 	.word	0x08021ad4

08004568 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <CWAUTOCONN+0x34>)
 8004570:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f7fb fdf9 	bl	800016c <strlen>
 800457a:	0003      	movs	r3, r0
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0011      	movs	r1, r2
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff fa3e 	bl	8003a04 <ESP_Send>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d001      	beq.n	8004590 <CWAUTOCONN+0x28>
    return true;
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004590:	2300      	movs	r3, #0
  }
}
 8004592:	0018      	movs	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	b002      	add	sp, #8
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	08021ae4 	.word	0x08021ae4

080045a0 <CWJAP>:
bool CWJAP(){
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a2:	46c6      	mov	lr, r8
 80045a4:	b500      	push	{lr}
 80045a6:	b0a2      	sub	sp, #136	@ 0x88
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	466b      	mov	r3, sp
 80045ac:	4698      	mov	r8, r3
  beursTest = true;
 80045ae:	4b39      	ldr	r3, [pc, #228]	@ (8004694 <CWJAP+0xf4>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80045b4:	2618      	movs	r6, #24
 80045b6:	19bb      	adds	r3, r7, r6
 80045b8:	2264      	movs	r2, #100	@ 0x64
 80045ba:	2100      	movs	r1, #0
 80045bc:	0018      	movs	r0, r3
 80045be:	f01a f88d 	bl	801e6dc <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80045c2:	4b35      	ldr	r3, [pc, #212]	@ (8004698 <CWJAP+0xf8>)
 80045c4:	4a35      	ldr	r2, [pc, #212]	@ (800469c <CWJAP+0xfc>)
 80045c6:	4936      	ldr	r1, [pc, #216]	@ (80046a0 <CWJAP+0x100>)
 80045c8:	19b8      	adds	r0, r7, r6
 80045ca:	f019 ff43 	bl	801e454 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80045ce:	19bb      	adds	r3, r7, r6
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7fb fdcb 	bl	800016c <strlen>
 80045d6:	0002      	movs	r2, r0
 80045d8:	216f      	movs	r1, #111	@ 0x6f
 80045da:	0030      	movs	r0, r6
 80045dc:	180b      	adds	r3, r1, r0
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80045e2:	180b      	adds	r3, r1, r0
 80045e4:	19db      	adds	r3, r3, r7
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	2180      	movs	r1, #128	@ 0x80
 80045ee:	1879      	adds	r1, r7, r1
 80045f0:	600a      	str	r2, [r1, #0]
 80045f2:	001a      	movs	r2, r3
 80045f4:	60ba      	str	r2, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	60fa      	str	r2, [r7, #12]
 80045fa:	68b8      	ldr	r0, [r7, #8]
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	0002      	movs	r2, r0
 8004600:	0f52      	lsrs	r2, r2, #29
 8004602:	000e      	movs	r6, r1
 8004604:	00f6      	lsls	r6, r6, #3
 8004606:	617e      	str	r6, [r7, #20]
 8004608:	697e      	ldr	r6, [r7, #20]
 800460a:	4316      	orrs	r6, r2
 800460c:	617e      	str	r6, [r7, #20]
 800460e:	0002      	movs	r2, r0
 8004610:	00d2      	lsls	r2, r2, #3
 8004612:	613a      	str	r2, [r7, #16]
 8004614:	001a      	movs	r2, r3
 8004616:	603a      	str	r2, [r7, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	0002      	movs	r2, r0
 8004622:	0f52      	lsrs	r2, r2, #29
 8004624:	000e      	movs	r6, r1
 8004626:	00f5      	lsls	r5, r6, #3
 8004628:	4315      	orrs	r5, r2
 800462a:	0002      	movs	r2, r0
 800462c:	00d4      	lsls	r4, r2, #3
 800462e:	3307      	adds	r3, #7
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	466a      	mov	r2, sp
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	469d      	mov	sp, r3
 800463a:	466b      	mov	r3, sp
 800463c:	3300      	adds	r3, #0
 800463e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004640:	246f      	movs	r4, #111	@ 0x6f
 8004642:	2518      	movs	r5, #24
 8004644:	1963      	adds	r3, r4, r5
 8004646:	19db      	adds	r3, r3, r7
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	001a      	movs	r2, r3
 800464e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004650:	2100      	movs	r1, #0
 8004652:	0018      	movs	r0, r3
 8004654:	f01a f842 	bl	801e6dc <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004658:	1963      	adds	r3, r4, r5
 800465a:	19db      	adds	r3, r3, r7
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	1979      	adds	r1, r7, r5
 8004660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004662:	0018      	movs	r0, r3
 8004664:	f01a f861 	bl	801e72a <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004668:	1963      	adds	r3, r4, r5
 800466a:	19db      	adds	r3, r3, r7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b29a      	uxth	r2, r3
 8004670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004672:	0011      	movs	r1, r2
 8004674:	0018      	movs	r0, r3
 8004676:	f7ff f9c5 	bl	8003a04 <ESP_Send>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d001      	beq.n	8004682 <CWJAP+0xe2>
    return true;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <CWJAP+0xe4>
  }
  else{
    return false;
 8004682:	2300      	movs	r3, #0
 8004684:	46c5      	mov	sp, r8
  }
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b022      	add	sp, #136	@ 0x88
 800468c:	bc80      	pop	{r7}
 800468e:	46b8      	mov	r8, r7
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	20000551 	.word	0x20000551
 8004698:	08022fe4 	.word	0x08022fe4
 800469c:	08022fd8 	.word	0x08022fd8
 80046a0:	08021af8 	.word	0x08021af8

080046a4 <CWMODE3>:
bool CWMODE3(){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <CWMODE3+0x34>)
 80046ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fb fd5b 	bl	800016c <strlen>
 80046b6:	0003      	movs	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0011      	movs	r1, r2
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff f9a0 	bl	8003a04 <ESP_Send>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d001      	beq.n	80046cc <CWMODE3+0x28>
    return true;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <CWMODE3+0x2a>
  }
  else{
    return false;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	08021b10 	.word	0x08021b10

080046dc <CWSTATE>:
bool CWSTATE(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <CWSTATE+0x34>)
 80046e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7fb fd3f 	bl	800016c <strlen>
 80046ee:	0003      	movs	r3, r0
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0011      	movs	r1, r2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff f984 	bl	8003a04 <ESP_Send>
 80046fc:	1e03      	subs	r3, r0, #0
 80046fe:	d001      	beq.n	8004704 <CWSTATE+0x28>
    return true;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004704:	2300      	movs	r3, #0
  }
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	08021b20 	.word	0x08021b20

08004714 <CWSAP>:
bool CWSAP(){
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <CWSAP+0x34>)
 800471c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f7fb fd23 	bl	800016c <strlen>
 8004726:	0003      	movs	r3, r0
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff f968 	bl	8003a04 <ESP_Send>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <CWSAP+0x28>
    return true;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <CWSAP+0x2a>
  }
  else{
    return false;
 800473c:	2300      	movs	r3, #0
  }
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	08021b30 	.word	0x08021b30

0800474c <CIPMUX>:
bool CIPMUX(){
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <CIPMUX+0x34>)
 8004754:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fd07 	bl	800016c <strlen>
 800475e:	0003      	movs	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff f94c 	bl	8003a04 <ESP_Send>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d001      	beq.n	8004774 <CIPMUX+0x28>
    return true;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004774:	2300      	movs	r3, #0
  }
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b002      	add	sp, #8
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			@ (mov r8, r8)
 8004780:	08021b54 	.word	0x08021b54

08004784 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800478a:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <WEBSERVER+0x34>)
 800478c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0018      	movs	r0, r3
 8004792:	f7fb fceb 	bl	800016c <strlen>
 8004796:	0003      	movs	r3, r0
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0011      	movs	r1, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f7ff f930 	bl	8003a04 <ESP_Send>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d001      	beq.n	80047ac <WEBSERVER+0x28>
    return true;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <WEBSERVER+0x2a>
  }
  else{
    return false;
 80047ac:	2300      	movs	r3, #0
  }
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	08021b64 	.word	0x08021b64

080047bc <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b0c5      	sub	sp, #276	@ 0x114
 80047c0:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	005a      	lsls	r2, r3, #1
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	2100      	movs	r1, #0
 80047ca:	0018      	movs	r0, r3
 80047cc:	f019 ff86 	bl	801e6dc <memset>
  uint16_t length = CreateMessage(beurs);
 80047d0:	4b22      	ldr	r3, [pc, #136]	@ (800485c <HTTPCPOST+0xa0>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	1dfc      	adds	r4, r7, #7
 80047d6:	34ff      	adds	r4, #255	@ 0xff
 80047d8:	0018      	movs	r0, r3
 80047da:	f7ff f9bd 	bl	8003b58 <CreateMessage>
 80047de:	0003      	movs	r3, r0
 80047e0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HTTPCPOST+0xa0>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80047ea:	1dfb      	adds	r3, r7, #7
 80047ec:	33ff      	adds	r3, #255	@ 0xff
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004860 <HTTPCPOST+0xa4>)
 80047f2:	491c      	ldr	r1, [pc, #112]	@ (8004864 <HTTPCPOST+0xa8>)
 80047f4:	1d38      	adds	r0, r7, #4
 80047f6:	f019 fe2d 	bl	801e454 <siprintf>
 80047fa:	e016      	b.n	800482a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80047fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <HTTPCPOST+0xac>)
 80047fe:	481b      	ldr	r0, [pc, #108]	@ (800486c <HTTPCPOST+0xb0>)
 8004800:	220c      	movs	r2, #12
 8004802:	0019      	movs	r1, r3
 8004804:	f7fe ff78 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004808:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <HTTPCPOST+0xac>)
 800480a:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HTTPCPOST+0xb4>)
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f97e 	bl	8003b10 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	33ff      	adds	r3, #255	@ 0xff
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	4c15      	ldr	r4, [pc, #84]	@ (8004870 <HTTPCPOST+0xb4>)
 800481c:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <HTTPCPOST+0xb8>)
 800481e:	4916      	ldr	r1, [pc, #88]	@ (8004878 <HTTPCPOST+0xbc>)
 8004820:	1d38      	adds	r0, r7, #4
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	0023      	movs	r3, r4
 8004826:	f019 fe15 	bl	801e454 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	0018      	movs	r0, r3
 800482e:	f7fb fc9d 	bl	800016c <strlen>
 8004832:	0002      	movs	r2, r0
 8004834:	1d7b      	adds	r3, r7, #5
 8004836:	33ff      	adds	r3, #255	@ 0xff
 8004838:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800483a:	1d7b      	adds	r3, r7, #5
 800483c:	33ff      	adds	r3, #255	@ 0xff
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	0011      	movs	r1, r2
 8004844:	0018      	movs	r0, r3
 8004846:	f7ff f8dd 	bl	8003a04 <ESP_Send>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d001      	beq.n	8004852 <HTTPCPOST+0x96>
    return true;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004852:	2300      	movs	r3, #0
  }
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b043      	add	sp, #268	@ 0x10c
 800485a:	bd90      	pop	{r4, r7, pc}
 800485c:	20000552 	.word	0x20000552
 8004860:	08023004 	.word	0x08023004
 8004864:	08021b7c 	.word	0x08021b7c
 8004868:	20000a80 	.word	0x20000a80
 800486c:	08080000 	.word	0x08080000
 8004870:	20000a8c 	.word	0x20000a8c
 8004874:	08023040 	.word	0x08023040
 8004878:	08021bb4 	.word	0x08021bb4

0800487c <SENDDATA>:
bool SENDDATA(){
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <SENDDATA+0x34>)
 8004884:	0018      	movs	r0, r3
 8004886:	f7fb fc71 	bl	800016c <strlen>
 800488a:	0002      	movs	r2, r0
 800488c:	1dbb      	adds	r3, r7, #6
 800488e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004890:	1dbb      	adds	r3, r7, #6
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <SENDDATA+0x34>)
 8004896:	0011      	movs	r1, r2
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff f8b3 	bl	8003a04 <ESP_Send>
 800489e:	1e03      	subs	r3, r0, #0
 80048a0:	d001      	beq.n	80048a6 <SENDDATA+0x2a>
    return true;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <SENDDATA+0x2c>
  }
  else{
    return false;
 80048a6:	2300      	movs	r3, #0
  }
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000588 	.word	0x20000588

080048b4 <SLEEP>:
bool SLEEP(){
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <SLEEP+0x34>)
 80048bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fb fc53 	bl	800016c <strlen>
 80048c6:	0003      	movs	r3, r0
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0011      	movs	r1, r2
 80048ce:	0018      	movs	r0, r3
 80048d0:	f7ff f898 	bl	8003a04 <ESP_Send>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d001      	beq.n	80048dc <SLEEP+0x28>
    return true;
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <SLEEP+0x2a>
  }
  else{
    return false;
 80048dc:	2300      	movs	r3, #0
  }
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b002      	add	sp, #8
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	08021bf4 	.word	0x08021bf4

080048ec <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <CIPSNTPCFG+0x3c>)
 80048f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fb fc37 	bl	800016c <strlen>
 80048fe:	0003      	movs	r3, r0
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f7ff f87c 	bl	8003a04 <ESP_Send>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d006      	beq.n	800491e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004910:	23fa      	movs	r3, #250	@ 0xfa
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	0018      	movs	r0, r3
 8004916:	f008 fe57 	bl	800d5c8 <HAL_Delay>
    return true;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800491e:	2300      	movs	r3, #0
  }
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08021c04 	.word	0x08021c04

0800492c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <CIPSNTPTIME+0x34>)
 8004934:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7fb fc17 	bl	800016c <strlen>
 800493e:	0003      	movs	r3, r0
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0011      	movs	r1, r2
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff f85c 	bl	8003a04 <ESP_Send>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d001      	beq.n	8004954 <CIPSNTPTIME+0x28>
    return true;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004954:	2300      	movs	r3, #0
  }
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b002      	add	sp, #8
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	08021c54 	.word	0x08021c54

08004964 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <CIPSNTPINTV+0x34>)
 800496c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0018      	movs	r0, r3
 8004972:	f7fb fbfb 	bl	800016c <strlen>
 8004976:	0003      	movs	r3, r0
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0011      	movs	r1, r2
 800497e:	0018      	movs	r0, r3
 8004980:	f7ff f840 	bl	8003a04 <ESP_Send>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d001      	beq.n	800498c <CIPSNTPINTV+0x28>
    return true;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 800498c:	2300      	movs	r3, #0
  }
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b002      	add	sp, #8
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	08021c68 	.word	0x08021c68

0800499c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 800499c:	b5b0      	push	{r4, r5, r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	0002      	movs	r2, r0
 80049a4:	1dfb      	adds	r3, r7, #7
 80049a6:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80049a8:	4b73      	ldr	r3, [pc, #460]	@ (8004b78 <DMA_ProcessBuffer+0x1dc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	200e      	movs	r0, #14
 80049b2:	183b      	adds	r3, r7, r0
 80049b4:	2180      	movs	r1, #128	@ 0x80
 80049b6:	0049      	lsls	r1, r1, #1
 80049b8:	1a8a      	subs	r2, r1, r2
 80049ba:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 80049bc:	230d      	movs	r3, #13
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	2203      	movs	r2, #3
 80049c2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 80049c4:	183b      	adds	r3, r7, r0
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	2380      	movs	r3, #128	@ 0x80
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d903      	bls.n	80049d8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 80049d0:	183b      	adds	r3, r7, r0
 80049d2:	2280      	movs	r2, #128	@ 0x80
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 80049d8:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	001a      	movs	r2, r3
 80049e0:	230e      	movs	r3, #14
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d131      	bne.n	8004a4e <DMA_ProcessBuffer+0xb2>
      if(retry > 30){
 80049ea:	4b65      	ldr	r3, [pc, #404]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b1e      	cmp	r3, #30
 80049f0:	d91b      	bls.n	8004a2a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80049f2:	4b63      	ldr	r3, [pc, #396]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80049f8:	4b62      	ldr	r3, [pc, #392]	@ (8004b84 <DMA_ProcessBuffer+0x1e8>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <DMA_ProcessBuffer+0x74>
 8004a00:	4b61      	ldr	r3, [pc, #388]	@ (8004b88 <DMA_ProcessBuffer+0x1ec>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004a08:	230d      	movs	r3, #13
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004a10:	4b5c      	ldr	r3, [pc, #368]	@ (8004b84 <DMA_ProcessBuffer+0x1e8>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d103      	bne.n	8004a20 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004a18:	4b5c      	ldr	r3, [pc, #368]	@ (8004b8c <DMA_ProcessBuffer+0x1f0>)
 8004a1a:	220b      	movs	r2, #11
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e016      	b.n	8004a4e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004a20:	230d      	movs	r3, #13
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2206      	movs	r2, #6
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	e011      	b.n	8004a4e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004a2a:	4b55      	ldr	r3, [pc, #340]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4b53      	ldr	r3, [pc, #332]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 8004a34:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004a36:	f008 fdbd 	bl	800d5b4 <HAL_GetTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	33f5      	adds	r3, #245	@ 0xf5
 8004a3e:	33ff      	adds	r3, #255	@ 0xff
 8004a40:	001a      	movs	r2, r3
 8004a42:	4b53      	ldr	r3, [pc, #332]	@ (8004b90 <DMA_ProcessBuffer+0x1f4>)
 8004a44:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004a46:	230d      	movs	r3, #13
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	001a      	movs	r2, r3
 8004a56:	210e      	movs	r1, #14
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <DMA_ProcessBuffer+0xc6>
 8004a60:	e082      	b.n	8004b68 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004a62:	4b47      	ldr	r3, [pc, #284]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004a68:	4b4a      	ldr	r3, [pc, #296]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4b43      	ldr	r3, [pc, #268]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d109      	bne.n	8004a8c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b45      	ldr	r3, [pc, #276]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004a80:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004a82:	230d      	movs	r3, #13
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	220a      	movs	r2, #10
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e06d      	b.n	8004b68 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004a8c:	4b41      	ldr	r3, [pc, #260]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	001a      	movs	r2, r3
 8004a94:	210e      	movs	r1, #14
 8004a96:	187b      	adds	r3, r7, r1
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004aa6:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004aa8:	230d      	movs	r3, #13
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	220a      	movs	r2, #10
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e05a      	b.n	8004b68 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004ab2:	4b32      	ldr	r3, [pc, #200]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	001a      	movs	r2, r3
 8004aba:	210e      	movs	r1, #14
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d917      	bls.n	8004af4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	001a      	movs	r2, r3
 8004acc:	4b32      	ldr	r3, [pc, #200]	@ (8004b98 <DMA_ProcessBuffer+0x1fc>)
 8004ace:	18d0      	adds	r0, r2, r3
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	001a      	movs	r2, r3
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	b299      	uxth	r1, r3
 8004ae0:	230d      	movs	r3, #13
 8004ae2:	18fc      	adds	r4, r7, r3
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	001a      	movs	r2, r3
 8004aea:	f7ff fa8f 	bl	800400c <ParseBuffer>
 8004aee:	0003      	movs	r3, r0
 8004af0:	7023      	strb	r3, [r4, #0]
 8004af2:	e026      	b.n	8004b42 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004af4:	4b21      	ldr	r3, [pc, #132]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	001a      	movs	r2, r3
 8004afc:	4b26      	ldr	r3, [pc, #152]	@ (8004b98 <DMA_ProcessBuffer+0x1fc>)
 8004afe:	18d0      	adds	r0, r2, r3
 8004b00:	4b1e      	ldr	r3, [pc, #120]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	001a      	movs	r2, r3
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	b299      	uxth	r1, r3
 8004b10:	250d      	movs	r5, #13
 8004b12:	197c      	adds	r4, r7, r5
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	001a      	movs	r2, r3
 8004b1a:	f7ff fa77 	bl	800400c <ParseBuffer>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004b22:	210e      	movs	r1, #14
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004b2c:	197c      	adds	r4, r7, r5
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	8819      	ldrh	r1, [r3, #0]
 8004b36:	4b18      	ldr	r3, [pc, #96]	@ (8004b98 <DMA_ProcessBuffer+0x1fc>)
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fa67 	bl	800400c <ParseBuffer>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004b42:	4b0e      	ldr	r3, [pc, #56]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	0018      	movs	r0, r3
 8004b4a:	240e      	movs	r4, #14
 8004b4c:	193b      	adds	r3, r7, r4
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <DMA_ProcessBuffer+0x200>)
 8004b52:	4913      	ldr	r1, [pc, #76]	@ (8004ba0 <DMA_ProcessBuffer+0x204>)
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	0003      	movs	r3, r0
 8004b58:	2003      	movs	r0, #3
 8004b5a:	f008 f98f 	bl	800ce7c <CreateLine>
          OldPos = pos;
 8004b5e:	193b      	adds	r3, r7, r4
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004b66:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004b68:	230d      	movs	r3, #13
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	781b      	ldrb	r3, [r3, #0]
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bdb0      	pop	{r4, r5, r7, pc}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	20002454 	.word	0x20002454
 8004b7c:	20000aa5 	.word	0x20000aa5
 8004b80:	200009a0 	.word	0x200009a0
 8004b84:	200009a2 	.word	0x200009a2
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	20000028 	.word	0x20000028
 8004b90:	20000994 	.word	0x20000994
 8004b94:	20000aa6 	.word	0x20000aa6
 8004b98:	2000044c 	.word	0x2000044c
 8004b9c:	08021c80 	.word	0x08021c80
 8004ba0:	08021640 	.word	0x08021640

08004ba4 <clearDMABuffer>:

void clearDMABuffer(){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	005a      	lsls	r2, r3, #1
 8004bac:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <clearDMABuffer+0x18>)
 8004bae:	2100      	movs	r1, #0
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f019 fd93 	bl	801e6dc <memset>
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2000044c 	.word	0x2000044c

08004bc0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	1dfb      	adds	r3, r7, #7
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	1c0a      	adds	r2, r1, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004bd2:	210f      	movs	r1, #15
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004bda:	1dbb      	adds	r3, r7, #6
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	1dfa      	adds	r2, r7, #7
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	4251      	negs	r1, r2
 8004bea:	414a      	adcs	r2, r1
 8004bec:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004bee:	1dbb      	adds	r3, r7, #6
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004bf6:	230f      	movs	r3, #15
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	1dfa      	adds	r2, r7, #7
 8004bfc:	7812      	ldrb	r2, [r2, #0]
 8004bfe:	3a02      	subs	r2, #2
 8004c00:	4251      	negs	r1, r2
 8004c02:	414a      	adcs	r2, r1
 8004c04:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d107      	bne.n	8004c1e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004c0e:	230f      	movs	r3, #15
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	1dfa      	adds	r2, r7, #7
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	3a05      	subs	r2, #5
 8004c18:	4251      	negs	r1, r2
 8004c1a:	414a      	adcs	r2, r1
 8004c1c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004c1e:	1dbb      	adds	r3, r7, #6
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d107      	bne.n	8004c36 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004c26:	230f      	movs	r3, #15
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	1dfa      	adds	r2, r7, #7
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	3a0b      	subs	r2, #11
 8004c30:	4251      	negs	r1, r2
 8004c32:	414a      	adcs	r2, r1
 8004c34:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004c36:	230f      	movs	r3, #15
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b004      	add	sp, #16
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	1dfb      	adds	r3, r7, #7
 8004c4e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004c50:	230f      	movs	r3, #15
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004c58:	1dfb      	adds	r3, r7, #7
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b13      	cmp	r3, #19
 8004c5e:	d900      	bls.n	8004c62 <AT_Send+0x1e>
 8004c60:	e18a      	b.n	8004f78 <AT_Send+0x334>
 8004c62:	009a      	lsls	r2, r3, #2
 8004c64:	4bc8      	ldr	r3, [pc, #800]	@ (8004f88 <AT_Send+0x344>)
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004c6c:	4bc7      	ldr	r3, [pc, #796]	@ (8004f8c <AT_Send+0x348>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f008 f8ad 	bl	800cdd0 <TimestampIsReached>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d100      	bne.n	8004c7c <AT_Send+0x38>
 8004c7a:	e17c      	b.n	8004f76 <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	18fc      	adds	r4, r7, r3
 8004c80:	f7ff fbae 	bl	80043e0 <PollAwake>
 8004c84:	0003      	movs	r3, r0
 8004c86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004c88:	f008 fc94 	bl	800d5b4 <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	3332      	adds	r3, #50	@ 0x32
 8004c90:	001a      	movs	r2, r3
 8004c92:	4bbe      	ldr	r3, [pc, #760]	@ (8004f8c <AT_Send+0x348>)
 8004c94:	601a      	str	r2, [r3, #0]
  }
  break;
 8004c96:	e16e      	b.n	8004f76 <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004c98:	4abd      	ldr	r2, [pc, #756]	@ (8004f90 <AT_Send+0x34c>)
 8004c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8004f94 <AT_Send+0x350>)
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	2003      	movs	r0, #3
 8004ca0:	f008 f8ec 	bl	800ce7c <CreateLine>
    ATCommandSend = RFPower();
 8004ca4:	230f      	movs	r3, #15
 8004ca6:	18fc      	adds	r4, r7, r3
 8004ca8:	f7ff fbb6 	bl	8004418 <RFPower>
 8004cac:	0003      	movs	r3, r0
 8004cae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cb0:	f008 fc80 	bl	800d5b4 <HAL_GetTick>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	330a      	adds	r3, #10
 8004cb8:	001a      	movs	r2, r3
 8004cba:	4bb4      	ldr	r3, [pc, #720]	@ (8004f8c <AT_Send+0x348>)
 8004cbc:	601a      	str	r2, [r3, #0]
    break;
 8004cbe:	e15b      	b.n	8004f78 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004cc0:	4ab5      	ldr	r2, [pc, #724]	@ (8004f98 <AT_Send+0x354>)
 8004cc2:	4bb4      	ldr	r3, [pc, #720]	@ (8004f94 <AT_Send+0x350>)
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	2003      	movs	r0, #3
 8004cc8:	f008 f8d8 	bl	800ce7c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004ccc:	230f      	movs	r3, #15
 8004cce:	18fc      	adds	r4, r7, r3
 8004cd0:	f7ff fbbe 	bl	8004450 <CheckRFPower>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cd8:	f008 fc6c 	bl	800d5b4 <HAL_GetTick>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	330a      	adds	r3, #10
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	4baa      	ldr	r3, [pc, #680]	@ (8004f8c <AT_Send+0x348>)
 8004ce4:	601a      	str	r2, [r3, #0]
    break;
 8004ce6:	e147      	b.n	8004f78 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004ce8:	4aac      	ldr	r2, [pc, #688]	@ (8004f9c <AT_Send+0x358>)
 8004cea:	4baa      	ldr	r3, [pc, #680]	@ (8004f94 <AT_Send+0x350>)
 8004cec:	0019      	movs	r1, r3
 8004cee:	2003      	movs	r0, #3
 8004cf0:	f008 f8c4 	bl	800ce7c <CreateLine>
    ATCommandSend = ATRestore();
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	18fc      	adds	r4, r7, r3
 8004cf8:	f7ff fbc6 	bl	8004488 <ATRestore>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d00:	f008 fc58 	bl	800d5b4 <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	3332      	adds	r3, #50	@ 0x32
 8004d08:	001a      	movs	r2, r3
 8004d0a:	4ba0      	ldr	r3, [pc, #640]	@ (8004f8c <AT_Send+0x348>)
 8004d0c:	601a      	str	r2, [r3, #0]
    break;
 8004d0e:	e133      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004d10:	4aa3      	ldr	r2, [pc, #652]	@ (8004fa0 <AT_Send+0x35c>)
 8004d12:	4ba0      	ldr	r3, [pc, #640]	@ (8004f94 <AT_Send+0x350>)
 8004d14:	0019      	movs	r1, r3
 8004d16:	2003      	movs	r0, #3
 8004d18:	f008 f8b0 	bl	800ce7c <CreateLine>
    ATCommandSend = CWINIT();
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fc      	adds	r4, r7, r3
 8004d20:	f7ff fbce 	bl	80044c0 <CWINIT>
 8004d24:	0003      	movs	r3, r0
 8004d26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d28:	f008 fc44 	bl	800d5b4 <HAL_GetTick>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	33f5      	adds	r3, #245	@ 0xf5
 8004d30:	33ff      	adds	r3, #255	@ 0xff
 8004d32:	001a      	movs	r2, r3
 8004d34:	4b95      	ldr	r3, [pc, #596]	@ (8004f8c <AT_Send+0x348>)
 8004d36:	601a      	str	r2, [r3, #0]
    break;
 8004d38:	e11e      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004d3a:	4a9a      	ldr	r2, [pc, #616]	@ (8004fa4 <AT_Send+0x360>)
 8004d3c:	4b95      	ldr	r3, [pc, #596]	@ (8004f94 <AT_Send+0x350>)
 8004d3e:	0019      	movs	r1, r3
 8004d40:	2003      	movs	r0, #3
 8004d42:	f008 f89b 	bl	800ce7c <CreateLine>
    ATCommandSend = CWSTATE();
 8004d46:	230f      	movs	r3, #15
 8004d48:	18fc      	adds	r4, r7, r3
 8004d4a:	f7ff fcc7 	bl	80046dc <CWSTATE>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d52:	f008 fc2f 	bl	800d5b4 <HAL_GetTick>
 8004d56:	0003      	movs	r3, r0
 8004d58:	33f5      	adds	r3, #245	@ 0xf5
 8004d5a:	33ff      	adds	r3, #255	@ 0xff
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f8c <AT_Send+0x348>)
 8004d60:	601a      	str	r2, [r3, #0]
    break;
 8004d62:	e109      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004d64:	4a90      	ldr	r2, [pc, #576]	@ (8004fa8 <AT_Send+0x364>)
 8004d66:	4b8b      	ldr	r3, [pc, #556]	@ (8004f94 <AT_Send+0x350>)
 8004d68:	0019      	movs	r1, r3
 8004d6a:	2003      	movs	r0, #3
 8004d6c:	f008 f886 	bl	800ce7c <CreateLine>
    ATCommandSend = CWMODE1();
 8004d70:	230f      	movs	r3, #15
 8004d72:	18fc      	adds	r4, r7, r3
 8004d74:	f7ff fbc0 	bl	80044f8 <CWMODE1>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d7c:	f008 fc1a 	bl	800d5b4 <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	330a      	adds	r3, #10
 8004d84:	001a      	movs	r2, r3
 8004d86:	4b81      	ldr	r3, [pc, #516]	@ (8004f8c <AT_Send+0x348>)
 8004d88:	601a      	str	r2, [r3, #0]
    break;
 8004d8a:	e0f5      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004d8c:	4a86      	ldr	r2, [pc, #536]	@ (8004fa8 <AT_Send+0x364>)
 8004d8e:	4b81      	ldr	r3, [pc, #516]	@ (8004f94 <AT_Send+0x350>)
 8004d90:	0019      	movs	r1, r3
 8004d92:	2003      	movs	r0, #3
 8004d94:	f008 f872 	bl	800ce7c <CreateLine>
    ATCommandSend = CWMODE2();
 8004d98:	230f      	movs	r3, #15
 8004d9a:	18fc      	adds	r4, r7, r3
 8004d9c:	f7ff fbc8 	bl	8004530 <CWMODE2>
 8004da0:	0003      	movs	r3, r0
 8004da2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004da4:	f008 fc06 	bl	800d5b4 <HAL_GetTick>
 8004da8:	0003      	movs	r3, r0
 8004daa:	330a      	adds	r3, #10
 8004dac:	001a      	movs	r2, r3
 8004dae:	4b77      	ldr	r3, [pc, #476]	@ (8004f8c <AT_Send+0x348>)
 8004db0:	601a      	str	r2, [r3, #0]
    break;
 8004db2:	e0e1      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004db4:	4a7d      	ldr	r2, [pc, #500]	@ (8004fac <AT_Send+0x368>)
 8004db6:	4b77      	ldr	r3, [pc, #476]	@ (8004f94 <AT_Send+0x350>)
 8004db8:	0019      	movs	r1, r3
 8004dba:	2003      	movs	r0, #3
 8004dbc:	f008 f85e 	bl	800ce7c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004dc0:	230f      	movs	r3, #15
 8004dc2:	18fc      	adds	r4, r7, r3
 8004dc4:	f7ff fbd0 	bl	8004568 <CWAUTOCONN>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dcc:	f008 fbf2 	bl	800d5b4 <HAL_GetTick>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	330a      	adds	r3, #10
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f8c <AT_Send+0x348>)
 8004dd8:	601a      	str	r2, [r3, #0]
    break;
 8004dda:	e0cd      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004ddc:	4a74      	ldr	r2, [pc, #464]	@ (8004fb0 <AT_Send+0x36c>)
 8004dde:	4b6d      	ldr	r3, [pc, #436]	@ (8004f94 <AT_Send+0x350>)
 8004de0:	0019      	movs	r1, r3
 8004de2:	2003      	movs	r0, #3
 8004de4:	f008 f84a 	bl	800ce7c <CreateLine>
    ATCommandSend = CWJAP();
 8004de8:	230f      	movs	r3, #15
 8004dea:	18fc      	adds	r4, r7, r3
 8004dec:	f7ff fbd8 	bl	80045a0 <CWJAP>
 8004df0:	0003      	movs	r3, r0
 8004df2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004df4:	f008 fbde 	bl	800d5b4 <HAL_GetTick>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	3332      	adds	r3, #50	@ 0x32
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	4b63      	ldr	r3, [pc, #396]	@ (8004f8c <AT_Send+0x348>)
 8004e00:	601a      	str	r2, [r3, #0]
    break;
 8004e02:	e0b9      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004e04:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb4 <AT_Send+0x370>)
 8004e06:	4b63      	ldr	r3, [pc, #396]	@ (8004f94 <AT_Send+0x350>)
 8004e08:	0019      	movs	r1, r3
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	f008 f836 	bl	800ce7c <CreateLine>
    ATCommandSend = CWMODE3();
 8004e10:	230f      	movs	r3, #15
 8004e12:	18fc      	adds	r4, r7, r3
 8004e14:	f7ff fc46 	bl	80046a4 <CWMODE3>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e1c:	f008 fbca 	bl	800d5b4 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	330a      	adds	r3, #10
 8004e24:	001a      	movs	r2, r3
 8004e26:	4b59      	ldr	r3, [pc, #356]	@ (8004f8c <AT_Send+0x348>)
 8004e28:	601a      	str	r2, [r3, #0]
    break;
 8004e2a:	e0a5      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004e2c:	4a62      	ldr	r2, [pc, #392]	@ (8004fb8 <AT_Send+0x374>)
 8004e2e:	4b59      	ldr	r3, [pc, #356]	@ (8004f94 <AT_Send+0x350>)
 8004e30:	0019      	movs	r1, r3
 8004e32:	2003      	movs	r0, #3
 8004e34:	f008 f822 	bl	800ce7c <CreateLine>
    ATCommandSend = CWSAP();
 8004e38:	230f      	movs	r3, #15
 8004e3a:	18fc      	adds	r4, r7, r3
 8004e3c:	f7ff fc6a 	bl	8004714 <CWSAP>
 8004e40:	0003      	movs	r3, r0
 8004e42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e44:	f008 fbb6 	bl	800d5b4 <HAL_GetTick>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	330a      	adds	r3, #10
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f8c <AT_Send+0x348>)
 8004e50:	601a      	str	r2, [r3, #0]
    break;
 8004e52:	e091      	b.n	8004f78 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004e54:	230f      	movs	r3, #15
 8004e56:	18fc      	adds	r4, r7, r3
 8004e58:	f7ff fc78 	bl	800474c <CIPMUX>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e60:	f008 fba8 	bl	800d5b4 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	330a      	adds	r3, #10
 8004e68:	001a      	movs	r2, r3
 8004e6a:	4b48      	ldr	r3, [pc, #288]	@ (8004f8c <AT_Send+0x348>)
 8004e6c:	601a      	str	r2, [r3, #0]
    break;
 8004e6e:	e083      	b.n	8004f78 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fc      	adds	r4, r7, r3
 8004e74:	f7ff fc86 	bl	8004784 <WEBSERVER>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e7c:	f008 fb9a 	bl	800d5b4 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	330a      	adds	r3, #10
 8004e84:	001a      	movs	r2, r3
 8004e86:	4b41      	ldr	r3, [pc, #260]	@ (8004f8c <AT_Send+0x348>)
 8004e88:	601a      	str	r2, [r3, #0]
    break;
 8004e8a:	e075      	b.n	8004f78 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004e8c:	230f      	movs	r3, #15
 8004e8e:	18fc      	adds	r4, r7, r3
 8004e90:	f7ff fc94 	bl	80047bc <HTTPCPOST>
 8004e94:	0003      	movs	r3, r0
 8004e96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e98:	f008 fb8c 	bl	800d5b4 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	33f5      	adds	r3, #245	@ 0xf5
 8004ea0:	33ff      	adds	r3, #255	@ 0xff
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	4b39      	ldr	r3, [pc, #228]	@ (8004f8c <AT_Send+0x348>)
 8004ea6:	601a      	str	r2, [r3, #0]
    break;
 8004ea8:	e066      	b.n	8004f78 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004eaa:	4a44      	ldr	r2, [pc, #272]	@ (8004fbc <AT_Send+0x378>)
 8004eac:	4b39      	ldr	r3, [pc, #228]	@ (8004f94 <AT_Send+0x350>)
 8004eae:	0019      	movs	r1, r3
 8004eb0:	2003      	movs	r0, #3
 8004eb2:	f007 ffe3 	bl	800ce7c <CreateLine>
    ATCommandSend = SENDDATA();
 8004eb6:	230f      	movs	r3, #15
 8004eb8:	18fc      	adds	r4, r7, r3
 8004eba:	f7ff fcdf 	bl	800487c <SENDDATA>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004ec2:	f008 fb77 	bl	800d5b4 <HAL_GetTick>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	33f5      	adds	r3, #245	@ 0xf5
 8004eca:	33ff      	adds	r3, #255	@ 0xff
 8004ecc:	001a      	movs	r2, r3
 8004ece:	4b2f      	ldr	r3, [pc, #188]	@ (8004f8c <AT_Send+0x348>)
 8004ed0:	601a      	str	r2, [r3, #0]
    break;
 8004ed2:	e051      	b.n	8004f78 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc0 <AT_Send+0x37c>)
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f94 <AT_Send+0x350>)
 8004ed8:	0019      	movs	r1, r3
 8004eda:	2003      	movs	r0, #3
 8004edc:	f007 ffce 	bl	800ce7c <CreateLine>
    ATCommandSend = SLEEP();
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	18fc      	adds	r4, r7, r3
 8004ee4:	f7ff fce6 	bl	80048b4 <SLEEP>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004eec:	f008 fb62 	bl	800d5b4 <HAL_GetTick>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	330a      	adds	r3, #10
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <AT_Send+0x348>)
 8004ef8:	601a      	str	r2, [r3, #0]
    break;
 8004efa:	e03d      	b.n	8004f78 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004efc:	4a31      	ldr	r2, [pc, #196]	@ (8004fc4 <AT_Send+0x380>)
 8004efe:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <AT_Send+0x350>)
 8004f00:	0019      	movs	r1, r3
 8004f02:	2003      	movs	r0, #3
 8004f04:	f007 ffba 	bl	800ce7c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004f08:	230f      	movs	r3, #15
 8004f0a:	18fc      	adds	r4, r7, r3
 8004f0c:	f7ff fcee 	bl	80048ec <CIPSNTPCFG>
 8004f10:	0003      	movs	r3, r0
 8004f12:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f14:	f008 fb4e 	bl	800d5b4 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	330a      	adds	r3, #10
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f8c <AT_Send+0x348>)
 8004f20:	601a      	str	r2, [r3, #0]
    break;
 8004f22:	e029      	b.n	8004f78 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004f24:	4a28      	ldr	r2, [pc, #160]	@ (8004fc8 <AT_Send+0x384>)
 8004f26:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <AT_Send+0x350>)
 8004f28:	0019      	movs	r1, r3
 8004f2a:	2003      	movs	r0, #3
 8004f2c:	f007 ffa6 	bl	800ce7c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004f30:	230f      	movs	r3, #15
 8004f32:	18fc      	adds	r4, r7, r3
 8004f34:	f7ff fcfa 	bl	800492c <CIPSNTPTIME>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f3c:	f008 fb3a 	bl	800d5b4 <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	33f5      	adds	r3, #245	@ 0xf5
 8004f44:	33ff      	adds	r3, #255	@ 0xff
 8004f46:	001a      	movs	r2, r3
 8004f48:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <AT_Send+0x348>)
 8004f4a:	601a      	str	r2, [r3, #0]
    break;
 8004f4c:	e014      	b.n	8004f78 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <AT_Send+0x388>)
 8004f50:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <AT_Send+0x350>)
 8004f52:	0019      	movs	r1, r3
 8004f54:	2003      	movs	r0, #3
 8004f56:	f007 ff91 	bl	800ce7c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	18fc      	adds	r4, r7, r3
 8004f5e:	f7ff fd01 	bl	8004964 <CIPSNTPINTV>
 8004f62:	0003      	movs	r3, r0
 8004f64:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f66:	f008 fb25 	bl	800d5b4 <HAL_GetTick>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	330a      	adds	r3, #10
 8004f6e:	001a      	movs	r2, r3
 8004f70:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <AT_Send+0x348>)
 8004f72:	601a      	str	r2, [r3, #0]
    break;
 8004f74:	e000      	b.n	8004f78 <AT_Send+0x334>
  break;
 8004f76:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004f78:	230f      	movs	r3, #15
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	781b      	ldrb	r3, [r3, #0]
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b005      	add	sp, #20
 8004f84:	bd90      	pop	{r4, r7, pc}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	08023068 	.word	0x08023068
 8004f8c:	20000994 	.word	0x20000994
 8004f90:	08021ca8 	.word	0x08021ca8
 8004f94:	08021640 	.word	0x08021640
 8004f98:	08021cbc 	.word	0x08021cbc
 8004f9c:	08021cd0 	.word	0x08021cd0
 8004fa0:	08021ce0 	.word	0x08021ce0
 8004fa4:	08021cf4 	.word	0x08021cf4
 8004fa8:	08021d0c 	.word	0x08021d0c
 8004fac:	08021d24 	.word	0x08021d24
 8004fb0:	08021d3c 	.word	0x08021d3c
 8004fb4:	08021d50 	.word	0x08021d50
 8004fb8:	08021d6c 	.word	0x08021d6c
 8004fbc:	08021d88 	.word	0x08021d88
 8004fc0:	08021d98 	.word	0x08021d98
 8004fc4:	08021dbc 	.word	0x08021dbc
 8004fc8:	08021dd0 	.word	0x08021dd0
 8004fcc:	08021de8 	.word	0x08021de8

08004fd0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004fd6:	1dfb      	adds	r3, r7, #7
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004fdc:	4b7a      	ldr	r3, [pc, #488]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	d900      	bls.n	8004fe6 <ESP_WakeTest+0x16>
 8004fe4:	e0d6      	b.n	8005194 <ESP_WakeTest+0x1c4>
 8004fe6:	009a      	lsls	r2, r3, #2
 8004fe8:	4b78      	ldr	r3, [pc, #480]	@ (80051cc <ESP_WakeTest+0x1fc>)
 8004fea:	18d3      	adds	r3, r2, r3
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004ff0:	4b77      	ldr	r3, [pc, #476]	@ (80051d0 <ESP_WakeTest+0x200>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	4053      	eors	r3, r2
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d036      	beq.n	800506c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	4874      	ldr	r0, [pc, #464]	@ (80051d4 <ESP_WakeTest+0x204>)
 8005004:	2200      	movs	r2, #0
 8005006:	0019      	movs	r1, r3
 8005008:	f009 fd33 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800500c:	2032      	movs	r0, #50	@ 0x32
 800500e:	f008 fadb 	bl	800d5c8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005012:	2380      	movs	r3, #128	@ 0x80
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	486f      	ldr	r0, [pc, #444]	@ (80051d4 <ESP_WakeTest+0x204>)
 8005018:	2201      	movs	r2, #1
 800501a:	0019      	movs	r1, r3
 800501c:	f009 fd29 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005020:	200a      	movs	r0, #10
 8005022:	f008 fad1 	bl	800d5c8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005026:	4b6c      	ldr	r3, [pc, #432]	@ (80051d8 <ESP_WakeTest+0x208>)
 8005028:	2200      	movs	r2, #0
 800502a:	2101      	movs	r1, #1
 800502c:	0018      	movs	r0, r3
 800502e:	f009 fd20 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005032:	200a      	movs	r0, #10
 8005034:	f008 fac8 	bl	800d5c8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005038:	4b67      	ldr	r3, [pc, #412]	@ (80051d8 <ESP_WakeTest+0x208>)
 800503a:	2201      	movs	r2, #1
 800503c:	2102      	movs	r1, #2
 800503e:	0018      	movs	r0, r3
 8005040:	f009 fd17 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005044:	200a      	movs	r0, #10
 8005046:	f008 fabf 	bl	800d5c8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800504a:	4b63      	ldr	r3, [pc, #396]	@ (80051d8 <ESP_WakeTest+0x208>)
 800504c:	2201      	movs	r2, #1
 800504e:	2101      	movs	r1, #1
 8005050:	0018      	movs	r0, r3
 8005052:	f009 fd0e 	bl	800ea72 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005056:	f008 faad 	bl	800d5b4 <HAL_GetTick>
 800505a:	0003      	movs	r3, r0
 800505c:	22af      	movs	r2, #175	@ 0xaf
 800505e:	0092      	lsls	r2, r2, #2
 8005060:	189a      	adds	r2, r3, r2
 8005062:	4b5e      	ldr	r3, [pc, #376]	@ (80051dc <ESP_WakeTest+0x20c>)
 8005064:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005066:	4b5a      	ldr	r3, [pc, #360]	@ (80051d0 <ESP_WakeTest+0x200>)
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	005a      	lsls	r2, r3, #1
 8005070:	4b5b      	ldr	r3, [pc, #364]	@ (80051e0 <ESP_WakeTest+0x210>)
 8005072:	0011      	movs	r1, r2
 8005074:	0018      	movs	r0, r3
 8005076:	f7fe fcf9 	bl	8003a6c <ESP_Receive>
 800507a:	1e03      	subs	r3, r0, #0
 800507c:	d100      	bne.n	8005080 <ESP_WakeTest+0xb0>
 800507e:	e099      	b.n	80051b4 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005080:	4b51      	ldr	r3, [pc, #324]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005086:	e095      	b.n	80051b4 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005088:	4b54      	ldr	r3, [pc, #336]	@ (80051dc <ESP_WakeTest+0x20c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0018      	movs	r0, r3
 800508e:	f007 fe9f 	bl	800cdd0 <TimestampIsReached>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d100      	bne.n	8005098 <ESP_WakeTest+0xc8>
 8005096:	e08f      	b.n	80051b8 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8005098:	4b52      	ldr	r3, [pc, #328]	@ (80051e4 <ESP_WakeTest+0x214>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	1dfc      	adds	r4, r7, #7
 800509e:	0018      	movs	r0, r3
 80050a0:	f7ff fdd0 	bl	8004c44 <AT_Send>
 80050a4:	0003      	movs	r3, r0
 80050a6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80050a8:	1dfb      	adds	r3, r7, #7
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d100      	bne.n	80050b2 <ESP_WakeTest+0xe2>
 80050b0:	e082      	b.n	80051b8 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80050b2:	4b45      	ldr	r3, [pc, #276]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 80050b4:	2202      	movs	r2, #2
 80050b6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80050b8:	e07e      	b.n	80051b8 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80050ba:	4b48      	ldr	r3, [pc, #288]	@ (80051dc <ESP_WakeTest+0x20c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	0018      	movs	r0, r3
 80050c0:	f007 fe86 	bl	800cdd0 <TimestampIsReached>
 80050c4:	1e03      	subs	r3, r0, #0
 80050c6:	d100      	bne.n	80050ca <ESP_WakeTest+0xfa>
 80050c8:	e078      	b.n	80051bc <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80050ca:	4b47      	ldr	r3, [pc, #284]	@ (80051e8 <ESP_WakeTest+0x218>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f7ff fc64 	bl	800499c <DMA_ProcessBuffer>
 80050d4:	0003      	movs	r3, r0
 80050d6:	001a      	movs	r2, r3
 80050d8:	4b44      	ldr	r3, [pc, #272]	@ (80051ec <ESP_WakeTest+0x21c>)
 80050da:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80050dc:	4b43      	ldr	r3, [pc, #268]	@ (80051ec <ESP_WakeTest+0x21c>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	4b41      	ldr	r3, [pc, #260]	@ (80051e8 <ESP_WakeTest+0x218>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	1dbc      	adds	r4, r7, #6
 80050e6:	0019      	movs	r1, r3
 80050e8:	0010      	movs	r0, r2
 80050ea:	f7ff fd69 	bl	8004bc0 <ATCompare>
 80050ee:	0003      	movs	r3, r0
 80050f0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80050f2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ec <ESP_WakeTest+0x21c>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d102      	bne.n	8005100 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80050fa:	4b33      	ldr	r3, [pc, #204]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005100:	4b3a      	ldr	r3, [pc, #232]	@ (80051ec <ESP_WakeTest+0x21c>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b07      	cmp	r3, #7
 8005106:	d104      	bne.n	8005112 <ESP_WakeTest+0x142>
          StartProg();
 8005108:	f7fe ff4e 	bl	8003fa8 <StartProg>
          TestState = ESP_TEST_BOOT;
 800510c:	4b2e      	ldr	r3, [pc, #184]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 800510e:	2205      	movs	r2, #5
 8005110:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005112:	4b36      	ldr	r3, [pc, #216]	@ (80051ec <ESP_WakeTest+0x21c>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d109      	bne.n	800512e <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800511a:	f008 fa4b 	bl	800d5b4 <HAL_GetTick>
 800511e:	0003      	movs	r3, r0
 8005120:	3332      	adds	r3, #50	@ 0x32
 8005122:	001a      	movs	r2, r3
 8005124:	4b2d      	ldr	r3, [pc, #180]	@ (80051dc <ESP_WakeTest+0x20c>)
 8005126:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8005128:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800512e:	1dbb      	adds	r3, r7, #6
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d042      	beq.n	80051bc <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005138:	2203      	movs	r2, #3
 800513a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800513c:	e03e      	b.n	80051bc <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800513e:	4b2c      	ldr	r3, [pc, #176]	@ (80051f0 <ESP_WakeTest+0x220>)
 8005140:	22fa      	movs	r2, #250	@ 0xfa
 8005142:	0112      	lsls	r2, r2, #4
 8005144:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8005146:	4b2a      	ldr	r3, [pc, #168]	@ (80051f0 <ESP_WakeTest+0x220>)
 8005148:	4a2a      	ldr	r2, [pc, #168]	@ (80051f4 <ESP_WakeTest+0x224>)
 800514a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 800514c:	4b28      	ldr	r3, [pc, #160]	@ (80051f0 <ESP_WakeTest+0x220>)
 800514e:	22fa      	movs	r2, #250	@ 0xfa
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005154:	4b1c      	ldr	r3, [pc, #112]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005156:	2204      	movs	r2, #4
 8005158:	701a      	strb	r2, [r3, #0]

      break;
 800515a:	e030      	b.n	80051be <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 800515c:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <ESP_WakeTest+0x228>)
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005162:	4b1b      	ldr	r3, [pc, #108]	@ (80051d0 <ESP_WakeTest+0x200>)
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <ESP_WakeTest+0x208>)
 800516a:	2200      	movs	r2, #0
 800516c:	2101      	movs	r1, #1
 800516e:	0018      	movs	r0, r3
 8005170:	f009 fc7f 	bl	800ea72 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	4816      	ldr	r0, [pc, #88]	@ (80051d4 <ESP_WakeTest+0x204>)
 800517a:	2200      	movs	r2, #0
 800517c:	0019      	movs	r1, r3
 800517e:	f009 fc78 	bl	800ea72 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005182:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <ESP_WakeTest+0x208>)
 8005184:	2200      	movs	r2, #0
 8005186:	2102      	movs	r1, #2
 8005188:	0018      	movs	r0, r3
 800518a:	f009 fc72 	bl	800ea72 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 800518e:	f002 fedf 	bl	8007f50 <SetESPMeasurementDone>
      break;
 8005192:	e014      	b.n	80051be <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 8005194:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
      break;
 800519a:	e010      	b.n	80051be <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 800519c:	4b14      	ldr	r3, [pc, #80]	@ (80051f0 <ESP_WakeTest+0x220>)
 800519e:	22fa      	movs	r2, #250	@ 0xfa
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80051a4:	4b12      	ldr	r3, [pc, #72]	@ (80051f0 <ESP_WakeTest+0x220>)
 80051a6:	22fa      	movs	r2, #250	@ 0xfa
 80051a8:	0112      	lsls	r2, r2, #4
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80051ac:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <ESP_WakeTest+0x220>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80051b2:	e004      	b.n	80051be <ESP_WakeTest+0x1ee>
      break;
 80051b4:	46c0      	nop			@ (mov r8, r8)
 80051b6:	e002      	b.n	80051be <ESP_WakeTest+0x1ee>
      break;
 80051b8:	46c0      	nop			@ (mov r8, r8)
 80051ba:	e000      	b.n	80051be <ESP_WakeTest+0x1ee>
      break;
 80051bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b003      	add	sp, #12
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	200009a4 	.word	0x200009a4
 80051cc:	080230b8 	.word	0x080230b8
 80051d0:	2000054c 	.word	0x2000054c
 80051d4:	50000800 	.word	0x50000800
 80051d8:	50001c00 	.word	0x50001c00
 80051dc:	20000994 	.word	0x20000994
 80051e0:	2000044c 	.word	0x2000044c
 80051e4:	200009a2 	.word	0x200009a2
 80051e8:	200009a1 	.word	0x200009a1
 80051ec:	20000029 	.word	0x20000029
 80051f0:	40000400 	.word	0x40000400
 80051f4:	00000bb8 	.word	0x00000bb8
 80051f8:	20000000 	.word	0x20000000

080051fc <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005202:	1dfb      	adds	r3, r7, #7
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 8005208:	4bda      	ldr	r3, [pc, #872]	@ (8005574 <ESP_Upkeep+0x378>)
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	4bda      	ldr	r3, [pc, #872]	@ (8005578 <ESP_Upkeep+0x37c>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d01f      	beq.n	8005254 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005214:	4bd7      	ldr	r3, [pc, #860]	@ (8005574 <ESP_Upkeep+0x378>)
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	4bd7      	ldr	r3, [pc, #860]	@ (8005578 <ESP_Upkeep+0x37c>)
 800521a:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800521c:	4bd6      	ldr	r3, [pc, #856]	@ (8005578 <ESP_Upkeep+0x37c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d103      	bne.n	800522c <ESP_Upkeep+0x30>
 8005224:	4bd5      	ldr	r3, [pc, #852]	@ (800557c <ESP_Upkeep+0x380>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b0e      	cmp	r3, #14
 800522a:	d013      	beq.n	8005254 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800522c:	4bd2      	ldr	r3, [pc, #840]	@ (8005578 <ESP_Upkeep+0x37c>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	001d      	movs	r5, r3
 8005232:	4bd2      	ldr	r3, [pc, #840]	@ (800557c <ESP_Upkeep+0x380>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	0018      	movs	r0, r3
 8005238:	4bd1      	ldr	r3, [pc, #836]	@ (8005580 <ESP_Upkeep+0x384>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	001c      	movs	r4, r3
 800523e:	4bd1      	ldr	r3, [pc, #836]	@ (8005584 <ESP_Upkeep+0x388>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	4ad1      	ldr	r2, [pc, #836]	@ (8005588 <ESP_Upkeep+0x38c>)
 8005244:	49d1      	ldr	r1, [pc, #836]	@ (800558c <ESP_Upkeep+0x390>)
 8005246:	9302      	str	r3, [sp, #8]
 8005248:	9401      	str	r4, [sp, #4]
 800524a:	9000      	str	r0, [sp, #0]
 800524c:	002b      	movs	r3, r5
 800524e:	2003      	movs	r0, #3
 8005250:	f007 fe14 	bl	800ce7c <CreateLine>
    }
  }

  switch (EspState) {
 8005254:	4bc7      	ldr	r3, [pc, #796]	@ (8005574 <ESP_Upkeep+0x378>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d900      	bls.n	800525e <ESP_Upkeep+0x62>
 800525c:	e355      	b.n	800590a <ESP_Upkeep+0x70e>
 800525e:	009a      	lsls	r2, r3, #2
 8005260:	4bcb      	ldr	r3, [pc, #812]	@ (8005590 <ESP_Upkeep+0x394>)
 8005262:	18d3      	adds	r3, r2, r3
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005268:	4bc2      	ldr	r3, [pc, #776]	@ (8005574 <ESP_Upkeep+0x378>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
      break;
 800526e:	f000 fba4 	bl	80059ba <ESP_Upkeep+0x7be>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005272:	4bc8      	ldr	r3, [pc, #800]	@ (8005594 <ESP_Upkeep+0x398>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	4053      	eors	r3, r2
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d036      	beq.n	80052ee <ESP_Upkeep+0xf2>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	48c4      	ldr	r0, [pc, #784]	@ (8005598 <ESP_Upkeep+0x39c>)
 8005286:	2200      	movs	r2, #0
 8005288:	0019      	movs	r1, r3
 800528a:	f009 fbf2 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800528e:	2001      	movs	r0, #1
 8005290:	f008 f99a 	bl	800d5c8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005294:	2380      	movs	r3, #128	@ 0x80
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	48bf      	ldr	r0, [pc, #764]	@ (8005598 <ESP_Upkeep+0x39c>)
 800529a:	2201      	movs	r2, #1
 800529c:	0019      	movs	r1, r3
 800529e:	f009 fbe8 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f008 f990 	bl	800d5c8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052a8:	4bbc      	ldr	r3, [pc, #752]	@ (800559c <ESP_Upkeep+0x3a0>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	2101      	movs	r1, #1
 80052ae:	0018      	movs	r0, r3
 80052b0:	f009 fbdf 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052b4:	2001      	movs	r0, #1
 80052b6:	f008 f987 	bl	800d5c8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052ba:	4bb8      	ldr	r3, [pc, #736]	@ (800559c <ESP_Upkeep+0x3a0>)
 80052bc:	2201      	movs	r2, #1
 80052be:	2102      	movs	r1, #2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f009 fbd6 	bl	800ea72 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052c6:	2001      	movs	r0, #1
 80052c8:	f008 f97e 	bl	800d5c8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052cc:	4bb3      	ldr	r3, [pc, #716]	@ (800559c <ESP_Upkeep+0x3a0>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	2101      	movs	r1, #1
 80052d2:	0018      	movs	r0, r3
 80052d4:	f009 fbcd 	bl	800ea72 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80052d8:	f008 f96c 	bl	800d5b4 <HAL_GetTick>
 80052dc:	0003      	movs	r3, r0
 80052de:	22af      	movs	r2, #175	@ 0xaf
 80052e0:	0092      	lsls	r2, r2, #2
 80052e2:	189a      	adds	r2, r3, r2
 80052e4:	4bae      	ldr	r3, [pc, #696]	@ (80055a0 <ESP_Upkeep+0x3a4>)
 80052e6:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80052e8:	4baa      	ldr	r3, [pc, #680]	@ (8005594 <ESP_Upkeep+0x398>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	005a      	lsls	r2, r3, #1
 80052f2:	4bac      	ldr	r3, [pc, #688]	@ (80055a4 <ESP_Upkeep+0x3a8>)
 80052f4:	0011      	movs	r1, r2
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7fe fbb8 	bl	8003a6c <ESP_Receive>
 80052fc:	1e03      	subs	r3, r0, #0
 80052fe:	d100      	bne.n	8005302 <ESP_Upkeep+0x106>
 8005300:	e30f      	b.n	8005922 <ESP_Upkeep+0x726>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005302:	4b9c      	ldr	r3, [pc, #624]	@ (8005574 <ESP_Upkeep+0x378>)
 8005304:	220f      	movs	r2, #15
 8005306:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005308:	f008 f954 	bl	800d5b4 <HAL_GetTick>
 800530c:	0003      	movs	r3, r0
 800530e:	22fa      	movs	r2, #250	@ 0xfa
 8005310:	00d2      	lsls	r2, r2, #3
 8005312:	189a      	adds	r2, r3, r2
 8005314:	4ba4      	ldr	r3, [pc, #656]	@ (80055a8 <ESP_Upkeep+0x3ac>)
 8005316:	601a      	str	r2, [r3, #0]
      }
      break;
 8005318:	e303      	b.n	8005922 <ESP_Upkeep+0x726>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800531a:	2001      	movs	r0, #1
 800531c:	f7ff fb3e 	bl	800499c <DMA_ProcessBuffer>
 8005320:	0003      	movs	r3, r0
 8005322:	001a      	movs	r2, r3
 8005324:	4ba1      	ldr	r3, [pc, #644]	@ (80055ac <ESP_Upkeep+0x3b0>)
 8005326:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005328:	4ba0      	ldr	r3, [pc, #640]	@ (80055ac <ESP_Upkeep+0x3b0>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	1dbc      	adds	r4, r7, #6
 800532e:	2101      	movs	r1, #1
 8005330:	0018      	movs	r0, r3
 8005332:	f7ff fc45 	bl	8004bc0 <ATCompare>
 8005336:	0003      	movs	r3, r0
 8005338:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800533a:	1dbb      	adds	r3, r7, #6
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d107      	bne.n	8005352 <ESP_Upkeep+0x156>
 8005342:	4b99      	ldr	r3, [pc, #612]	@ (80055a8 <ESP_Upkeep+0x3ac>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	0018      	movs	r0, r3
 8005348:	f007 fd42 	bl	800cdd0 <TimestampIsReached>
 800534c:	1e03      	subs	r3, r0, #0
 800534e:	d100      	bne.n	8005352 <ESP_Upkeep+0x156>
 8005350:	e2e9      	b.n	8005926 <ESP_Upkeep+0x72a>
          EspState = ESP_STATE_MODE_SELECT;
 8005352:	4b88      	ldr	r3, [pc, #544]	@ (8005574 <ESP_Upkeep+0x378>)
 8005354:	220b      	movs	r2, #11
 8005356:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005358:	e2e5      	b.n	8005926 <ESP_Upkeep+0x72a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 800535a:	4b95      	ldr	r3, [pc, #596]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800535c:	2209      	movs	r2, #9
 800535e:	2114      	movs	r1, #20
 8005360:	0018      	movs	r0, r3
 8005362:	f019 f9bb 	bl	801e6dc <memset>
      if(!InitIsDone || WifiReset){
 8005366:	4b93      	ldr	r3, [pc, #588]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	4053      	eors	r3, r2
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <ESP_Upkeep+0x180>
 8005374:	4b90      	ldr	r3, [pc, #576]	@ (80055b8 <ESP_Upkeep+0x3bc>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01a      	beq.n	80053b2 <ESP_Upkeep+0x1b6>
        memcpy(ATCommandArray, AT_INIT, 7);
 800537c:	4b8c      	ldr	r3, [pc, #560]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800537e:	4a8f      	ldr	r2, [pc, #572]	@ (80055bc <ESP_Upkeep+0x3c0>)
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	6019      	str	r1, [r3, #0]
 8005384:	8891      	ldrh	r1, [r2, #4]
 8005386:	8099      	strh	r1, [r3, #4]
 8005388:	7992      	ldrb	r2, [r2, #6]
 800538a:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 800538c:	4b79      	ldr	r3, [pc, #484]	@ (8005574 <ESP_Upkeep+0x378>)
 800538e:	2204      	movs	r2, #4
 8005390:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005392:	4b8b      	ldr	r3, [pc, #556]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005398:	4b79      	ldr	r3, [pc, #484]	@ (8005580 <ESP_Upkeep+0x384>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800539e:	4b88      	ldr	r3, [pc, #544]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	001a      	movs	r2, r3
 80053a4:	4b82      	ldr	r3, [pc, #520]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80053a6:	5c9a      	ldrb	r2, [r3, r2]
 80053a8:	4b74      	ldr	r3, [pc, #464]	@ (800557c <ESP_Upkeep+0x380>)
 80053aa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053ac:	4b75      	ldr	r3, [pc, #468]	@ (8005584 <ESP_Upkeep+0x388>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80053b2:	4b80      	ldr	r3, [pc, #512]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01f      	beq.n	80053fa <ESP_Upkeep+0x1fe>
 80053ba:	4b82      	ldr	r3, [pc, #520]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	4053      	eors	r3, r2
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d018      	beq.n	80053fa <ESP_Upkeep+0x1fe>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80053c8:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80053ca:	4a7f      	ldr	r2, [pc, #508]	@ (80055c8 <ESP_Upkeep+0x3cc>)
 80053cc:	6811      	ldr	r1, [r2, #0]
 80053ce:	6019      	str	r1, [r3, #0]
 80053d0:	8892      	ldrh	r2, [r2, #4]
 80053d2:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80053d4:	4b67      	ldr	r3, [pc, #412]	@ (8005574 <ESP_Upkeep+0x378>)
 80053d6:	2204      	movs	r2, #4
 80053d8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053da:	4b79      	ldr	r3, [pc, #484]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80053e0:	4b67      	ldr	r3, [pc, #412]	@ (8005580 <ESP_Upkeep+0x384>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80053e6:	4b76      	ldr	r3, [pc, #472]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	001a      	movs	r2, r3
 80053ec:	4b70      	ldr	r3, [pc, #448]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80053ee:	5c9a      	ldrb	r2, [r3, r2]
 80053f0:	4b62      	ldr	r3, [pc, #392]	@ (800557c <ESP_Upkeep+0x380>)
 80053f2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053f4:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <ESP_Upkeep+0x388>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80053fa:	4b6e      	ldr	r3, [pc, #440]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d021      	beq.n	8005446 <ESP_Upkeep+0x24a>
 8005402:	4b70      	ldr	r3, [pc, #448]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01d      	beq.n	8005446 <ESP_Upkeep+0x24a>
 800540a:	4b70      	ldr	r3, [pc, #448]	@ (80055cc <ESP_Upkeep+0x3d0>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	4053      	eors	r3, r2
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d016      	beq.n	8005446 <ESP_Upkeep+0x24a>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005418:	4b6d      	ldr	r3, [pc, #436]	@ (80055d0 <ESP_Upkeep+0x3d4>)
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	4b64      	ldr	r3, [pc, #400]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800541e:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005420:	4b54      	ldr	r3, [pc, #336]	@ (8005574 <ESP_Upkeep+0x378>)
 8005422:	2204      	movs	r2, #4
 8005424:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005426:	4b66      	ldr	r3, [pc, #408]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800542c:	4b54      	ldr	r3, [pc, #336]	@ (8005580 <ESP_Upkeep+0x384>)
 800542e:	2204      	movs	r2, #4
 8005430:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005432:	4b63      	ldr	r3, [pc, #396]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	001a      	movs	r2, r3
 8005438:	4b5d      	ldr	r3, [pc, #372]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800543a:	5c9a      	ldrb	r2, [r3, r2]
 800543c:	4b4f      	ldr	r3, [pc, #316]	@ (800557c <ESP_Upkeep+0x380>)
 800543e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005440:	4b50      	ldr	r3, [pc, #320]	@ (8005584 <ESP_Upkeep+0x388>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005446:	4b5b      	ldr	r3, [pc, #364]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d02e      	beq.n	80054ac <ESP_Upkeep+0x2b0>
 800544e:	4b5d      	ldr	r3, [pc, #372]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d02a      	beq.n	80054ac <ESP_Upkeep+0x2b0>
 8005456:	4b5d      	ldr	r3, [pc, #372]	@ (80055cc <ESP_Upkeep+0x3d0>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d026      	beq.n	80054ac <ESP_Upkeep+0x2b0>
 800545e:	4b5d      	ldr	r3, [pc, #372]	@ (80055d4 <ESP_Upkeep+0x3d8>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2201      	movs	r2, #1
 8005464:	4053      	eors	r3, r2
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01f      	beq.n	80054ac <ESP_Upkeep+0x2b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 800546c:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800546e:	4a5a      	ldr	r2, [pc, #360]	@ (80055d8 <ESP_Upkeep+0x3dc>)
 8005470:	8811      	ldrh	r1, [r2, #0]
 8005472:	8019      	strh	r1, [r3, #0]
 8005474:	7892      	ldrb	r2, [r2, #2]
 8005476:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005478:	4b3e      	ldr	r3, [pc, #248]	@ (8005574 <ESP_Upkeep+0x378>)
 800547a:	2204      	movs	r2, #4
 800547c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800547e:	4b50      	ldr	r3, [pc, #320]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005484:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <ESP_Upkeep+0x384>)
 8005486:	2202      	movs	r2, #2
 8005488:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800548a:	f008 f893 	bl	800d5b4 <HAL_GetTick>
 800548e:	0002      	movs	r2, r0
 8005490:	4b52      	ldr	r3, [pc, #328]	@ (80055dc <ESP_Upkeep+0x3e0>)
 8005492:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005494:	f006 fe62 	bl	800c15c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005498:	4b49      	ldr	r3, [pc, #292]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	001a      	movs	r2, r3
 800549e:	4b44      	ldr	r3, [pc, #272]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80054a0:	5c9a      	ldrb	r2, [r3, r2]
 80054a2:	4b36      	ldr	r3, [pc, #216]	@ (800557c <ESP_Upkeep+0x380>)
 80054a4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054a6:	4b37      	ldr	r3, [pc, #220]	@ (8005584 <ESP_Upkeep+0x388>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80054ac:	4b4c      	ldr	r3, [pc, #304]	@ (80055e0 <ESP_Upkeep+0x3e4>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01a      	beq.n	80054ea <ESP_Upkeep+0x2ee>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80054b4:	4b3e      	ldr	r3, [pc, #248]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80054b6:	4a4b      	ldr	r2, [pc, #300]	@ (80055e4 <ESP_Upkeep+0x3e8>)
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	6019      	str	r1, [r3, #0]
 80054bc:	7912      	ldrb	r2, [r2, #4]
 80054be:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005574 <ESP_Upkeep+0x378>)
 80054c2:	2204      	movs	r2, #4
 80054c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054c6:	4b3e      	ldr	r3, [pc, #248]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80054cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005580 <ESP_Upkeep+0x384>)
 80054ce:	2203      	movs	r2, #3
 80054d0:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80054d2:	f006 fe43 	bl	800c15c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80054d6:	4b3a      	ldr	r3, [pc, #232]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	001a      	movs	r2, r3
 80054dc:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80054de:	5c9a      	ldrb	r2, [r3, r2]
 80054e0:	4b26      	ldr	r3, [pc, #152]	@ (800557c <ESP_Upkeep+0x380>)
 80054e2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054e4:	4b27      	ldr	r3, [pc, #156]	@ (8005584 <ESP_Upkeep+0x388>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80054ea:	4b32      	ldr	r3, [pc, #200]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d100      	bne.n	80054f4 <ESP_Upkeep+0x2f8>
 80054f2:	e21a      	b.n	800592a <ESP_Upkeep+0x72e>
 80054f4:	4b33      	ldr	r3, [pc, #204]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d100      	bne.n	80054fe <ESP_Upkeep+0x302>
 80054fc:	e215      	b.n	800592a <ESP_Upkeep+0x72e>
 80054fe:	4b33      	ldr	r3, [pc, #204]	@ (80055cc <ESP_Upkeep+0x3d0>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d100      	bne.n	8005508 <ESP_Upkeep+0x30c>
 8005506:	e210      	b.n	800592a <ESP_Upkeep+0x72e>
 8005508:	4b32      	ldr	r3, [pc, #200]	@ (80055d4 <ESP_Upkeep+0x3d8>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d100      	bne.n	8005512 <ESP_Upkeep+0x316>
 8005510:	e20b      	b.n	800592a <ESP_Upkeep+0x72e>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005512:	4b35      	ldr	r3, [pc, #212]	@ (80055e8 <ESP_Upkeep+0x3ec>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b26      	ldr	r3, [pc, #152]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 8005518:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800551a:	4b16      	ldr	r3, [pc, #88]	@ (8005574 <ESP_Upkeep+0x378>)
 800551c:	2204      	movs	r2, #4
 800551e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005520:	4b27      	ldr	r3, [pc, #156]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005526:	4b16      	ldr	r3, [pc, #88]	@ (8005580 <ESP_Upkeep+0x384>)
 8005528:	2205      	movs	r2, #5
 800552a:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800552c:	f008 f842 	bl	800d5b4 <HAL_GetTick>
 8005530:	0002      	movs	r2, r0
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <ESP_Upkeep+0x3e0>)
 8005534:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005536:	f006 fe11 	bl	800c15c <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800553a:	4b21      	ldr	r3, [pc, #132]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	001a      	movs	r2, r3
 8005540:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 8005542:	5c9a      	ldrb	r2, [r3, r2]
 8005544:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <ESP_Upkeep+0x380>)
 8005546:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005548:	4b0e      	ldr	r3, [pc, #56]	@ (8005584 <ESP_Upkeep+0x388>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
      }
    break;
 800554e:	e1ec      	b.n	800592a <ESP_Upkeep+0x72e>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005550:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <ESP_Upkeep+0x380>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	1dfc      	adds	r4, r7, #7
 8005556:	0018      	movs	r0, r3
 8005558:	f7ff fb74 	bl	8004c44 <AT_Send>
 800555c:	0003      	movs	r3, r0
 800555e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005560:	1dfb      	adds	r3, r7, #7
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d100      	bne.n	800556a <ESP_Upkeep+0x36e>
 8005568:	e1e1      	b.n	800592e <ESP_Upkeep+0x732>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800556a:	4b02      	ldr	r3, [pc, #8]	@ (8005574 <ESP_Upkeep+0x378>)
 800556c:	2203      	movs	r2, #3
 800556e:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005570:	e1dd      	b.n	800592e <ESP_Upkeep+0x732>
 8005572:	46c0      	nop			@ (mov r8, r8)
 8005574:	20000028 	.word	0x20000028
 8005578:	20000002 	.word	0x20000002
 800557c:	200009a2 	.word	0x200009a2
 8005580:	200009a3 	.word	0x200009a3
 8005584:	200009a1 	.word	0x200009a1
 8005588:	08021e08 	.word	0x08021e08
 800558c:	08021640 	.word	0x08021640
 8005590:	080230d0 	.word	0x080230d0
 8005594:	2000054c 	.word	0x2000054c
 8005598:	50000800 	.word	0x50000800
 800559c:	50001c00 	.word	0x50001c00
 80055a0:	20000994 	.word	0x20000994
 80055a4:	2000044c 	.word	0x2000044c
 80055a8:	20000aa8 	.word	0x20000aa8
 80055ac:	2000002a 	.word	0x2000002a
 80055b0:	20000988 	.word	0x20000988
 80055b4:	2000054d 	.word	0x2000054d
 80055b8:	2000054e 	.word	0x2000054e
 80055bc:	20000004 	.word	0x20000004
 80055c0:	20000992 	.word	0x20000992
 80055c4:	20000550 	.word	0x20000550
 80055c8:	20000014 	.word	0x20000014
 80055cc:	20000551 	.word	0x20000551
 80055d0:	20000010 	.word	0x20000010
 80055d4:	20000001 	.word	0x20000001
 80055d8:	2000000c 	.word	0x2000000c
 80055dc:	20000560 	.word	0x20000560
 80055e0:	2000054f 	.word	0x2000054f
 80055e4:	2000001c 	.word	0x2000001c
 80055e8:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80055ec:	4bd3      	ldr	r3, [pc, #844]	@ (800593c <ESP_Upkeep+0x740>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f007 fbed 	bl	800cdd0 <TimestampIsReached>
 80055f6:	1e03      	subs	r3, r0, #0
 80055f8:	d100      	bne.n	80055fc <ESP_Upkeep+0x400>
 80055fa:	e19a      	b.n	8005932 <ESP_Upkeep+0x736>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80055fc:	4bd0      	ldr	r3, [pc, #832]	@ (8005940 <ESP_Upkeep+0x744>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	0018      	movs	r0, r3
 8005602:	f7ff f9cb 	bl	800499c <DMA_ProcessBuffer>
 8005606:	0003      	movs	r3, r0
 8005608:	001a      	movs	r2, r3
 800560a:	4bce      	ldr	r3, [pc, #824]	@ (8005944 <ESP_Upkeep+0x748>)
 800560c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800560e:	4bcd      	ldr	r3, [pc, #820]	@ (8005944 <ESP_Upkeep+0x748>)
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	4bcb      	ldr	r3, [pc, #812]	@ (8005940 <ESP_Upkeep+0x744>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	1d7c      	adds	r4, r7, #5
 8005618:	0019      	movs	r1, r3
 800561a:	0010      	movs	r0, r2
 800561c:	f7ff fad0 	bl	8004bc0 <ATCompare>
 8005620:	0003      	movs	r3, r0
 8005622:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005624:	4bc7      	ldr	r3, [pc, #796]	@ (8005944 <ESP_Upkeep+0x748>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d10f      	bne.n	800564c <ESP_Upkeep+0x450>
          if(ATCommand == AT_SENDDATA){
 800562c:	4bc6      	ldr	r3, [pc, #792]	@ (8005948 <ESP_Upkeep+0x74c>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d108      	bne.n	8005646 <ESP_Upkeep+0x44a>
            ATCommand = AT_HTTPCPOST;
 8005634:	4bc4      	ldr	r3, [pc, #784]	@ (8005948 <ESP_Upkeep+0x74c>)
 8005636:	220e      	movs	r2, #14
 8005638:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800563a:	4bc1      	ldr	r3, [pc, #772]	@ (8005940 <ESP_Upkeep+0x744>)
 800563c:	2202      	movs	r2, #2
 800563e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005640:	4bc2      	ldr	r3, [pc, #776]	@ (800594c <ESP_Upkeep+0x750>)
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005646:	4bc2      	ldr	r3, [pc, #776]	@ (8005950 <ESP_Upkeep+0x754>)
 8005648:	2204      	movs	r2, #4
 800564a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800564c:	4bbd      	ldr	r3, [pc, #756]	@ (8005944 <ESP_Upkeep+0x748>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d106      	bne.n	8005662 <ESP_Upkeep+0x466>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005654:	f007 ffae 	bl	800d5b4 <HAL_GetTick>
 8005658:	0003      	movs	r3, r0
 800565a:	330a      	adds	r3, #10
 800565c:	001a      	movs	r2, r3
 800565e:	4bb7      	ldr	r3, [pc, #732]	@ (800593c <ESP_Upkeep+0x740>)
 8005660:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005662:	4bb8      	ldr	r3, [pc, #736]	@ (8005944 <ESP_Upkeep+0x748>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b0a      	cmp	r3, #10
 8005668:	d106      	bne.n	8005678 <ESP_Upkeep+0x47c>
          ESPTimeStamp = HAL_GetTick() + 10;
 800566a:	f007 ffa3 	bl	800d5b4 <HAL_GetTick>
 800566e:	0003      	movs	r3, r0
 8005670:	330a      	adds	r3, #10
 8005672:	001a      	movs	r2, r3
 8005674:	4bb1      	ldr	r3, [pc, #708]	@ (800593c <ESP_Upkeep+0x740>)
 8005676:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005678:	4bb2      	ldr	r3, [pc, #712]	@ (8005944 <ESP_Upkeep+0x748>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b06      	cmp	r3, #6
 800567e:	d116      	bne.n	80056ae <ESP_Upkeep+0x4b2>
          if(ATCommand != AT_SENDDATA){
 8005680:	4bb1      	ldr	r3, [pc, #708]	@ (8005948 <ESP_Upkeep+0x74c>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b0f      	cmp	r3, #15
 8005686:	d003      	beq.n	8005690 <ESP_Upkeep+0x494>
            EspState = ESP_STATE_SEND;
 8005688:	4bb1      	ldr	r3, [pc, #708]	@ (8005950 <ESP_Upkeep+0x754>)
 800568a:	2204      	movs	r2, #4
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e00e      	b.n	80056ae <ESP_Upkeep+0x4b2>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005690:	4bad      	ldr	r3, [pc, #692]	@ (8005948 <ESP_Upkeep+0x74c>)
 8005692:	220e      	movs	r2, #14
 8005694:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005696:	4bad      	ldr	r3, [pc, #692]	@ (800594c <ESP_Upkeep+0x750>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	3b01      	subs	r3, #1
 800569c:	b2da      	uxtb	r2, r3
 800569e:	4bab      	ldr	r3, [pc, #684]	@ (800594c <ESP_Upkeep+0x750>)
 80056a0:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80056a2:	4ba7      	ldr	r3, [pc, #668]	@ (8005940 <ESP_Upkeep+0x744>)
 80056a4:	2202      	movs	r2, #2
 80056a6:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80056a8:	4ba9      	ldr	r3, [pc, #676]	@ (8005950 <ESP_Upkeep+0x754>)
 80056aa:	2204      	movs	r2, #4
 80056ac:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80056ae:	1d7b      	adds	r3, r7, #5
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d100      	bne.n	80056b8 <ESP_Upkeep+0x4bc>
 80056b6:	e13c      	b.n	8005932 <ESP_Upkeep+0x736>
          EspState = ESP_STATE_NEXT_AT;
 80056b8:	4ba5      	ldr	r3, [pc, #660]	@ (8005950 <ESP_Upkeep+0x754>)
 80056ba:	2205      	movs	r2, #5
 80056bc:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80056be:	e138      	b.n	8005932 <ESP_Upkeep+0x736>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 80056c0:	4ba2      	ldr	r3, [pc, #648]	@ (800594c <ESP_Upkeep+0x750>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	4ba0      	ldr	r3, [pc, #640]	@ (800594c <ESP_Upkeep+0x750>)
 80056ca:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 80056cc:	4b9f      	ldr	r3, [pc, #636]	@ (800594c <ESP_Upkeep+0x750>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	001a      	movs	r2, r3
 80056d2:	4ba0      	ldr	r3, [pc, #640]	@ (8005954 <ESP_Upkeep+0x758>)
 80056d4:	5c9a      	ldrb	r2, [r3, r2]
 80056d6:	4b9c      	ldr	r3, [pc, #624]	@ (8005948 <ESP_Upkeep+0x74c>)
 80056d8:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80056da:	4b9b      	ldr	r3, [pc, #620]	@ (8005948 <ESP_Upkeep+0x74c>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d102      	bne.n	80056e8 <ESP_Upkeep+0x4ec>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80056e2:	4b97      	ldr	r3, [pc, #604]	@ (8005940 <ESP_Upkeep+0x744>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80056e8:	4b97      	ldr	r3, [pc, #604]	@ (8005948 <ESP_Upkeep+0x74c>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b0e      	cmp	r3, #14
 80056ee:	d102      	bne.n	80056f6 <ESP_Upkeep+0x4fa>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80056f0:	4b93      	ldr	r3, [pc, #588]	@ (8005940 <ESP_Upkeep+0x744>)
 80056f2:	2202      	movs	r2, #2
 80056f4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80056f6:	4b94      	ldr	r3, [pc, #592]	@ (8005948 <ESP_Upkeep+0x74c>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b0e      	cmp	r3, #14
 80056fc:	d006      	beq.n	800570c <ESP_Upkeep+0x510>
 80056fe:	4b92      	ldr	r3, [pc, #584]	@ (8005948 <ESP_Upkeep+0x74c>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d002      	beq.n	800570c <ESP_Upkeep+0x510>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005706:	4b8e      	ldr	r3, [pc, #568]	@ (8005940 <ESP_Upkeep+0x744>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 800570c:	4b8e      	ldr	r3, [pc, #568]	@ (8005948 <ESP_Upkeep+0x74c>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b11      	cmp	r3, #17
 8005712:	d102      	bne.n	800571a <ESP_Upkeep+0x51e>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005714:	4b8a      	ldr	r3, [pc, #552]	@ (8005940 <ESP_Upkeep+0x744>)
 8005716:	2205      	movs	r2, #5
 8005718:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 800571a:	4b8d      	ldr	r3, [pc, #564]	@ (8005950 <ESP_Upkeep+0x754>)
 800571c:	2204      	movs	r2, #4
 800571e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005720:	4b89      	ldr	r3, [pc, #548]	@ (8005948 <ESP_Upkeep+0x74c>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b14      	cmp	r3, #20
 8005726:	d000      	beq.n	800572a <ESP_Upkeep+0x52e>
 8005728:	e105      	b.n	8005936 <ESP_Upkeep+0x73a>
        if(Mode == AT_MODE_SEND){
 800572a:	4b8b      	ldr	r3, [pc, #556]	@ (8005958 <ESP_Upkeep+0x75c>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d11d      	bne.n	800576e <ESP_Upkeep+0x572>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005732:	f007 ff3f 	bl	800d5b4 <HAL_GetTick>
 8005736:	0003      	movs	r3, r0
 8005738:	4a88      	ldr	r2, [pc, #544]	@ (800595c <ESP_Upkeep+0x760>)
 800573a:	189a      	adds	r2, r3, r2
 800573c:	4b7f      	ldr	r3, [pc, #508]	@ (800593c <ESP_Upkeep+0x740>)
 800573e:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005740:	f006 fd24 	bl	800c18c <ResetESPIndicator>
          clearDMABuffer();
 8005744:	f7ff fa2e 	bl	8004ba4 <clearDMABuffer>
          stop = HAL_GetTick();
 8005748:	f007 ff34 	bl	800d5b4 <HAL_GetTick>
 800574c:	0002      	movs	r2, r0
 800574e:	4b84      	ldr	r3, [pc, #528]	@ (8005960 <ESP_Upkeep+0x764>)
 8005750:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 8005752:	4b83      	ldr	r3, [pc, #524]	@ (8005960 <ESP_Upkeep+0x764>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b83      	ldr	r3, [pc, #524]	@ (8005964 <ESP_Upkeep+0x768>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	4a82      	ldr	r2, [pc, #520]	@ (8005968 <ESP_Upkeep+0x76c>)
 800575e:	4983      	ldr	r1, [pc, #524]	@ (800596c <ESP_Upkeep+0x770>)
 8005760:	2003      	movs	r0, #3
 8005762:	f007 fb8b 	bl	800ce7c <CreateLine>
          EspState = ESP_STATE_DEINIT;
 8005766:	4b7a      	ldr	r3, [pc, #488]	@ (8005950 <ESP_Upkeep+0x754>)
 8005768:	220d      	movs	r2, #13
 800576a:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 800576c:	e0e3      	b.n	8005936 <ESP_Upkeep+0x73a>
        else if (Mode == AT_MODE_GETTIME) {
 800576e:	4b7a      	ldr	r3, [pc, #488]	@ (8005958 <ESP_Upkeep+0x75c>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b05      	cmp	r3, #5
 8005774:	d12e      	bne.n	80057d4 <ESP_Upkeep+0x5d8>
            setTime = false;
 8005776:	4b7e      	ldr	r3, [pc, #504]	@ (8005970 <ESP_Upkeep+0x774>)
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 800577c:	f007 ff1a 	bl	800d5b4 <HAL_GetTick>
 8005780:	0003      	movs	r3, r0
 8005782:	4a7c      	ldr	r2, [pc, #496]	@ (8005974 <ESP_Upkeep+0x778>)
 8005784:	189a      	adds	r2, r3, r2
 8005786:	4b7c      	ldr	r3, [pc, #496]	@ (8005978 <ESP_Upkeep+0x77c>)
 8005788:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 800578a:	4b7b      	ldr	r3, [pc, #492]	@ (8005978 <ESP_Upkeep+0x77c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a7b      	ldr	r2, [pc, #492]	@ (800597c <ESP_Upkeep+0x780>)
 8005790:	4976      	ldr	r1, [pc, #472]	@ (800596c <ESP_Upkeep+0x770>)
 8005792:	2003      	movs	r0, #3
 8005794:	f007 fb72 	bl	800ce7c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005798:	4b79      	ldr	r3, [pc, #484]	@ (8005980 <ESP_Upkeep+0x784>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b67      	ldr	r3, [pc, #412]	@ (800593c <ESP_Upkeep+0x740>)
 800579e:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 80057a0:	f006 fcf4 	bl	800c18c <ResetESPIndicator>
            clearDMABuffer();
 80057a4:	f7ff f9fe 	bl	8004ba4 <clearDMABuffer>
            stop = HAL_GetTick();
 80057a8:	f007 ff04 	bl	800d5b4 <HAL_GetTick>
 80057ac:	0002      	movs	r2, r0
 80057ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005960 <ESP_Upkeep+0x764>)
 80057b0:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 80057b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005960 <ESP_Upkeep+0x764>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b6b      	ldr	r3, [pc, #428]	@ (8005964 <ESP_Upkeep+0x768>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	4a71      	ldr	r2, [pc, #452]	@ (8005984 <ESP_Upkeep+0x788>)
 80057be:	496b      	ldr	r1, [pc, #428]	@ (800596c <ESP_Upkeep+0x770>)
 80057c0:	2003      	movs	r0, #3
 80057c2:	f007 fb5b 	bl	800ce7c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80057c6:	4b62      	ldr	r3, [pc, #392]	@ (8005950 <ESP_Upkeep+0x754>)
 80057c8:	220d      	movs	r2, #13
 80057ca:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 80057cc:	4b62      	ldr	r3, [pc, #392]	@ (8005958 <ESP_Upkeep+0x75c>)
 80057ce:	2202      	movs	r2, #2
 80057d0:	701a      	strb	r2, [r3, #0]
    break;
 80057d2:	e0b0      	b.n	8005936 <ESP_Upkeep+0x73a>
          EspState = ESP_STATE_RESET;
 80057d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005950 <ESP_Upkeep+0x754>)
 80057d6:	2209      	movs	r2, #9
 80057d8:	701a      	strb	r2, [r3, #0]
    break;
 80057da:	e0ac      	b.n	8005936 <ESP_Upkeep+0x73a>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80057dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005988 <ESP_Upkeep+0x78c>)
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80057e2:	4b6a      	ldr	r3, [pc, #424]	@ (800598c <ESP_Upkeep+0x790>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	2101      	movs	r1, #1
 80057e8:	0018      	movs	r0, r3
 80057ea:	f009 f942 	bl	800ea72 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f007 feea 	bl	800d5c8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	4865      	ldr	r0, [pc, #404]	@ (8005990 <ESP_Upkeep+0x794>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	0019      	movs	r1, r3
 80057fe:	f009 f938 	bl	800ea72 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005802:	2001      	movs	r0, #1
 8005804:	f007 fee0 	bl	800d5c8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005808:	4b60      	ldr	r3, [pc, #384]	@ (800598c <ESP_Upkeep+0x790>)
 800580a:	2200      	movs	r2, #0
 800580c:	2102      	movs	r1, #2
 800580e:	0018      	movs	r0, r3
 8005810:	f009 f92f 	bl	800ea72 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005814:	4b4e      	ldr	r3, [pc, #312]	@ (8005950 <ESP_Upkeep+0x754>)
 8005816:	2209      	movs	r2, #9
 8005818:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 800581a:	2001      	movs	r0, #1
 800581c:	f007 fed4 	bl	800d5c8 <HAL_Delay>
      break;
 8005820:	e0cb      	b.n	80059ba <ESP_Upkeep+0x7be>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005822:	4b46      	ldr	r3, [pc, #280]	@ (800593c <ESP_Upkeep+0x740>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	0018      	movs	r0, r3
 8005828:	f007 fad2 	bl	800cdd0 <TimestampIsReached>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d103      	bne.n	8005838 <ESP_Upkeep+0x63c>
 8005830:	4b58      	ldr	r3, [pc, #352]	@ (8005994 <ESP_Upkeep+0x798>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d035      	beq.n	80058a4 <ESP_Upkeep+0x6a8>
        if(Mode == AT_MODE_INIT){
 8005838:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <ESP_Upkeep+0x75c>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <ESP_Upkeep+0x650>
          InitIsDone = true;
 8005840:	4b55      	ldr	r3, [pc, #340]	@ (8005998 <ESP_Upkeep+0x79c>)
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005846:	4b42      	ldr	r3, [pc, #264]	@ (8005950 <ESP_Upkeep+0x754>)
 8005848:	220b      	movs	r2, #11
 800584a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 800584c:	4b42      	ldr	r3, [pc, #264]	@ (8005958 <ESP_Upkeep+0x75c>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d108      	bne.n	8005866 <ESP_Upkeep+0x66a>
          ConnectionMade = true;
 8005854:	4b51      	ldr	r3, [pc, #324]	@ (800599c <ESP_Upkeep+0x7a0>)
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
          beurs = true;
 800585a:	4b51      	ldr	r3, [pc, #324]	@ (80059a0 <ESP_Upkeep+0x7a4>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005860:	4b3b      	ldr	r3, [pc, #236]	@ (8005950 <ESP_Upkeep+0x754>)
 8005862:	220b      	movs	r2, #11
 8005864:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005866:	4b3c      	ldr	r3, [pc, #240]	@ (8005958 <ESP_Upkeep+0x75c>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d102      	bne.n	8005874 <ESP_Upkeep+0x678>
          EspState = ESP_STATE_INIT;
 800586e:	4b38      	ldr	r3, [pc, #224]	@ (8005950 <ESP_Upkeep+0x754>)
 8005870:	2202      	movs	r2, #2
 8005872:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005874:	4b38      	ldr	r3, [pc, #224]	@ (8005958 <ESP_Upkeep+0x75c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d108      	bne.n	800588e <ESP_Upkeep+0x692>
          EspState = ESP_STATE_CONFIG;
 800587c:	4b34      	ldr	r3, [pc, #208]	@ (8005950 <ESP_Upkeep+0x754>)
 800587e:	220e      	movs	r2, #14
 8005880:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005882:	4a48      	ldr	r2, [pc, #288]	@ (80059a4 <ESP_Upkeep+0x7a8>)
 8005884:	4b39      	ldr	r3, [pc, #228]	@ (800596c <ESP_Upkeep+0x770>)
 8005886:	0019      	movs	r1, r3
 8005888:	2003      	movs	r0, #3
 800588a:	f007 faf7 	bl	800ce7c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800588e:	4b32      	ldr	r3, [pc, #200]	@ (8005958 <ESP_Upkeep+0x75c>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	2b04      	cmp	r3, #4
 8005894:	d127      	bne.n	80058e6 <ESP_Upkeep+0x6ea>
          EspState = ESP_STATE_MODE_SELECT;
 8005896:	4b2e      	ldr	r3, [pc, #184]	@ (8005950 <ESP_Upkeep+0x754>)
 8005898:	220b      	movs	r2, #11
 800589a:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 800589c:	4b42      	ldr	r3, [pc, #264]	@ (80059a8 <ESP_Upkeep+0x7ac>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 80058a2:	e020      	b.n	80058e6 <ESP_Upkeep+0x6ea>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 80058a4:	4b34      	ldr	r3, [pc, #208]	@ (8005978 <ESP_Upkeep+0x77c>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f007 fa91 	bl	800cdd0 <TimestampIsReached>
 80058ae:	1e03      	subs	r3, r0, #0
 80058b0:	d100      	bne.n	80058b4 <ESP_Upkeep+0x6b8>
 80058b2:	e081      	b.n	80059b8 <ESP_Upkeep+0x7bc>
        if(Mode == AT_MODE_SEND ) {
 80058b4:	4b28      	ldr	r3, [pc, #160]	@ (8005958 <ESP_Upkeep+0x75c>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d000      	beq.n	80058be <ESP_Upkeep+0x6c2>
 80058bc:	e07c      	b.n	80059b8 <ESP_Upkeep+0x7bc>
            Mode = AT_MODE_GETTIME;
 80058be:	4b26      	ldr	r3, [pc, #152]	@ (8005958 <ESP_Upkeep+0x75c>)
 80058c0:	2205      	movs	r2, #5
 80058c2:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 80058c4:	4b22      	ldr	r3, [pc, #136]	@ (8005950 <ESP_Upkeep+0x754>)
 80058c6:	2202      	movs	r2, #2
 80058c8:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 80058ca:	4b1c      	ldr	r3, [pc, #112]	@ (800593c <ESP_Upkeep+0x740>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005980 <ESP_Upkeep+0x784>)
 80058d0:	601a      	str	r2, [r3, #0]
         setTime = true;
 80058d2:	4b27      	ldr	r3, [pc, #156]	@ (8005970 <ESP_Upkeep+0x774>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 80058d8:	4a34      	ldr	r2, [pc, #208]	@ (80059ac <ESP_Upkeep+0x7b0>)
 80058da:	4b24      	ldr	r3, [pc, #144]	@ (800596c <ESP_Upkeep+0x770>)
 80058dc:	0019      	movs	r1, r3
 80058de:	2003      	movs	r0, #3
 80058e0:	f007 facc 	bl	800ce7c <CreateLine>
        }
      }
      break;
 80058e4:	e068      	b.n	80059b8 <ESP_Upkeep+0x7bc>
 80058e6:	e067      	b.n	80059b8 <ESP_Upkeep+0x7bc>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 80058e8:	f015 fce0 	bl	801b2ac <GetUsbRxPointer>
 80058ec:	0003      	movs	r3, r0
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f8de 	bl	8005ab0 <Process_PC_Config>
      break;
 80058f4:	e061      	b.n	80059ba <ESP_Upkeep+0x7be>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80058f6:	4a2e      	ldr	r2, [pc, #184]	@ (80059b0 <ESP_Upkeep+0x7b4>)
 80058f8:	4b1c      	ldr	r3, [pc, #112]	@ (800596c <ESP_Upkeep+0x770>)
 80058fa:	0019      	movs	r1, r3
 80058fc:	2003      	movs	r0, #3
 80058fe:	f007 fabd 	bl	800ce7c <CreateLine>
      EspState = ESP_STATE_INIT;
 8005902:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <ESP_Upkeep+0x754>)
 8005904:	2202      	movs	r2, #2
 8005906:	701a      	strb	r2, [r3, #0]
      break;
 8005908:	e057      	b.n	80059ba <ESP_Upkeep+0x7be>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 800590a:	4a2a      	ldr	r2, [pc, #168]	@ (80059b4 <ESP_Upkeep+0x7b8>)
 800590c:	4b17      	ldr	r3, [pc, #92]	@ (800596c <ESP_Upkeep+0x770>)
 800590e:	0019      	movs	r1, r3
 8005910:	2003      	movs	r0, #3
 8005912:	f007 fab3 	bl	800ce7c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005916:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <ESP_Upkeep+0x754>)
 8005918:	2207      	movs	r2, #7
 800591a:	701a      	strb	r2, [r3, #0]
      break;
 800591c:	e04d      	b.n	80059ba <ESP_Upkeep+0x7be>
      break;
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	e04b      	b.n	80059ba <ESP_Upkeep+0x7be>
      break;
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	e049      	b.n	80059ba <ESP_Upkeep+0x7be>
        break;
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	e047      	b.n	80059ba <ESP_Upkeep+0x7be>
    break;
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	e045      	b.n	80059ba <ESP_Upkeep+0x7be>
    break;
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	e043      	b.n	80059ba <ESP_Upkeep+0x7be>
      break;
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	e041      	b.n	80059ba <ESP_Upkeep+0x7be>
    break;
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	e03f      	b.n	80059ba <ESP_Upkeep+0x7be>
 800593a:	46c0      	nop			@ (mov r8, r8)
 800593c:	20000994 	.word	0x20000994
 8005940:	200009a1 	.word	0x200009a1
 8005944:	2000002a 	.word	0x2000002a
 8005948:	200009a2 	.word	0x200009a2
 800594c:	20000992 	.word	0x20000992
 8005950:	20000028 	.word	0x20000028
 8005954:	20000988 	.word	0x20000988
 8005958:	200009a3 	.word	0x200009a3
 800595c:	000493e0 	.word	0x000493e0
 8005960:	20000564 	.word	0x20000564
 8005964:	20000560 	.word	0x20000560
 8005968:	08021e34 	.word	0x08021e34
 800596c:	08021640 	.word	0x08021640
 8005970:	20000001 	.word	0x20000001
 8005974:	002c4020 	.word	0x002c4020
 8005978:	20000998 	.word	0x20000998
 800597c:	08021e4c 	.word	0x08021e4c
 8005980:	2000099c 	.word	0x2000099c
 8005984:	08021e90 	.word	0x08021e90
 8005988:	2000054c 	.word	0x2000054c
 800598c:	50001c00 	.word	0x50001c00
 8005990:	50000800 	.word	0x50000800
 8005994:	2000054f 	.word	0x2000054f
 8005998:	2000054d 	.word	0x2000054d
 800599c:	20000550 	.word	0x20000550
 80059a0:	20000552 	.word	0x20000552
 80059a4:	08021eb0 	.word	0x08021eb0
 80059a8:	20000551 	.word	0x20000551
 80059ac:	08021ec8 	.word	0x08021ec8
 80059b0:	08021ed8 	.word	0x08021ed8
 80059b4:	08021eec 	.word	0x08021eec
      break;
 80059b8:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80059ba:	4b03      	ldr	r3, [pc, #12]	@ (80059c8 <ESP_Upkeep+0x7cc>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
}
 80059be:	0018      	movs	r0, r3
 80059c0:	46bd      	mov	sp, r7
 80059c2:	b002      	add	sp, #8
 80059c4:	bdb0      	pop	{r4, r5, r7, pc}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	20000028 	.word	0x20000028

080059cc <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80059d4:	4b09      	ldr	r3, [pc, #36]	@ (80059fc <I2CSensors_Init+0x30>)
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80059da:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <I2CSensors_Init+0x34>)
 80059dc:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <I2CSensors_Init+0x38>)
 80059de:	0011      	movs	r1, r2
 80059e0:	0018      	movs	r0, r3
 80059e2:	f001 f9a7 	bl	8006d34 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80059e6:	4a06      	ldr	r2, [pc, #24]	@ (8005a00 <I2CSensors_Init+0x34>)
 80059e8:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <I2CSensors_Init+0x38>)
 80059ea:	0011      	movs	r1, r2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f001 f811 	bl	8006a14 <Gas_Init>
}
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b002      	add	sp, #8
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	20000aac 	.word	0x20000aac
 8005a00:	08005a5d 	.word	0x08005a5d
 8005a04:	08005a09 	.word	0x08005a09

08005a08 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005a08:	b5b0      	push	{r4, r5, r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6039      	str	r1, [r7, #0]
 8005a10:	0011      	movs	r1, r2
 8005a12:	1dfb      	adds	r3, r7, #7
 8005a14:	1c02      	adds	r2, r0, #0
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	1dbb      	adds	r3, r7, #6
 8005a1a:	1c0a      	adds	r2, r1, #0
 8005a1c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a58 <ReadI2C+0x50>)
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	1dfb      	adds	r3, r7, #7
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	18db      	adds	r3, r3, r3
 8005a2a:	b299      	uxth	r1, r3
 8005a2c:	1dbb      	adds	r3, r7, #6
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	250f      	movs	r5, #15
 8005a34:	197c      	adds	r4, r7, r5
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	f009 fbe4 	bl	800f204 <HAL_I2C_Master_Receive_DMA>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005a40:	197b      	adds	r3, r7, r5
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <ReadI2C+0x44>
        return false;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <ReadI2C+0x46>
    }
    return true;
 8005a4c:	2301      	movs	r3, #1
}
 8005a4e:	0018      	movs	r0, r3
 8005a50:	46bd      	mov	sp, r7
 8005a52:	b004      	add	sp, #16
 8005a54:	bdb0      	pop	{r4, r5, r7, pc}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	20000aac 	.word	0x20000aac

08005a5c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005a5c:	b5b0      	push	{r4, r5, r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6039      	str	r1, [r7, #0]
 8005a64:	0011      	movs	r1, r2
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	1c02      	adds	r2, r0, #0
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	1dbb      	adds	r3, r7, #6
 8005a6e:	1c0a      	adds	r2, r1, #0
 8005a70:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005a72:	4b0e      	ldr	r3, [pc, #56]	@ (8005aac <WriteI2C+0x50>)
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	1dfb      	adds	r3, r7, #7
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	18db      	adds	r3, r3, r3
 8005a7e:	b299      	uxth	r1, r3
 8005a80:	1dbb      	adds	r3, r7, #6
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	250f      	movs	r5, #15
 8005a88:	197c      	adds	r4, r7, r5
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	f009 fab4 	bl	800eff8 <HAL_I2C_Master_Transmit_DMA>
 8005a90:	0003      	movs	r3, r0
 8005a92:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005a94:	197b      	adds	r3, r7, r5
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <WriteI2C+0x44>
        return false;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e000      	b.n	8005aa2 <WriteI2C+0x46>
    }
    return true;
 8005aa0:	2301      	movs	r3, #1
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	20000aac 	.word	0x20000aac

08005ab0 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b0c3      	sub	sp, #268	@ 0x10c
 8005ab4:	af3e      	add	r7, sp, #248	@ 0xf8
 8005ab6:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005ab8:	f015 fc18 	bl	801b2ec <GetUsbRxDataSize>
 8005abc:	0003      	movs	r3, r0
 8005abe:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d971      	bls.n	8005baa <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2123      	movs	r1, #35	@ 0x23
 8005aca:	0018      	movs	r0, r3
 8005acc:	f018 fe0e 	bl	801e6ec <strchr>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d065      	beq.n	8005ba6 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	785a      	ldrb	r2, [r3, #1]
 8005ade:	4b34      	ldr	r3, [pc, #208]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005ae0:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	789a      	ldrb	r2, [r3, #2]
 8005ae6:	4b32      	ldr	r3, [pc, #200]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005ae8:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005aea:	4b31      	ldr	r3, [pc, #196]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	3305      	adds	r3, #5
 8005af0:	001a      	movs	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d351      	bcc.n	8005b9c <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	1cd9      	adds	r1, r3, #3
 8005afc:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	001a      	movs	r2, r3
 8005b02:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb4 <Process_PC_Config+0x104>)
 8005b04:	0018      	movs	r0, r3
 8005b06:	f018 fec5 	bl	801e894 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005b0a:	4b29      	ldr	r3, [pc, #164]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	3303      	adds	r3, #3
 8005b10:	001a      	movs	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	189b      	adds	r3, r3, r2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	b21a      	sxth	r2, r3
 8005b1c:	4b24      	ldr	r3, [pc, #144]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	3304      	adds	r3, #4
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	18cb      	adds	r3, r1, r3
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b21b      	sxth	r3, r3
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	b299      	uxth	r1, r3
 8005b30:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b32:	2381      	movs	r3, #129	@ 0x81
 8005b34:	005b      	lsls	r3, r3, #1
 8005b36:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005b38:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b3a:	2381      	movs	r3, #129	@ 0x81
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	5ad4      	ldrh	r4, [r2, r3]
 8005b40:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	3303      	adds	r3, #3
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	0011      	movs	r1, r2
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f000 f975 	bl	8005e3c <CRC16_ARC>
 8005b52:	0003      	movs	r3, r0
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d007      	beq.n	8005b68 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005b58:	4b15      	ldr	r3, [pc, #84]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b5a:	785a      	ldrb	r2, [r3, #1]
 8005b5c:	4b15      	ldr	r3, [pc, #84]	@ (8005bb4 <Process_PC_Config+0x104>)
 8005b5e:	0019      	movs	r1, r3
 8005b60:	2001      	movs	r0, #1
 8005b62:	f000 f919 	bl	8005d98 <Create_Message>
 8005b66:	e016      	b.n	8005b96 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005b68:	4c11      	ldr	r4, [pc, #68]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b6a:	466b      	mov	r3, sp
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	0023      	movs	r3, r4
 8005b70:	3310      	adds	r3, #16
 8005b72:	22f4      	movs	r2, #244	@ 0xf4
 8005b74:	0019      	movs	r1, r3
 8005b76:	f018 fe8d 	bl	801e894 <memcpy>
 8005b7a:	6820      	ldr	r0, [r4, #0]
 8005b7c:	6861      	ldr	r1, [r4, #4]
 8005b7e:	68a2      	ldr	r2, [r4, #8]
 8005b80:	68e3      	ldr	r3, [r4, #12]
 8005b82:	f000 f819 	bl	8005bb8 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b88:	7818      	ldrb	r0, [r3, #0]
 8005b8a:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <Process_PC_Config+0x100>)
 8005b8c:	785a      	ldrb	r2, [r3, #1]
 8005b8e:	4b09      	ldr	r3, [pc, #36]	@ (8005bb4 <Process_PC_Config+0x104>)
 8005b90:	0019      	movs	r1, r3
 8005b92:	f000 f901 	bl	8005d98 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005b96:	f015 fb91 	bl	801b2bc <ResetUsbRxDataSize>
                return;
 8005b9a:	e006      	b.n	8005baa <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f015 fbae 	bl	801b300 <GetUsbRxNextChunk>
 8005ba4:	e001      	b.n	8005baa <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005ba6:	f015 fb89 	bl	801b2bc <ResetUsbRxDataSize>
        }
    }
}
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b005      	add	sp, #20
 8005bae:	bd90      	pop	{r4, r7, pc}
 8005bb0:	20000ab0 	.word	0x20000ab0
 8005bb4:	20000ab2 	.word	0x20000ab2

08005bb8 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005bb8:	b084      	sub	sp, #16
 8005bba:	b5b0      	push	{r4, r5, r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	2518      	movs	r5, #24
 8005bc2:	197c      	adds	r4, r7, r5
 8005bc4:	6020      	str	r0, [r4, #0]
 8005bc6:	6061      	str	r1, [r4, #4]
 8005bc8:	60a2      	str	r2, [r4, #8]
 8005bca:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005bcc:	197b      	adds	r3, r7, r5
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2bfe      	cmp	r3, #254	@ 0xfe
 8005bd2:	d100      	bne.n	8005bd6 <ProcessCmd+0x1e>
 8005bd4:	e09c      	b.n	8005d10 <ProcessCmd+0x158>
 8005bd6:	dd00      	ble.n	8005bda <ProcessCmd+0x22>
 8005bd8:	e0bc      	b.n	8005d54 <ProcessCmd+0x19c>
 8005bda:	2b0c      	cmp	r3, #12
 8005bdc:	dc0a      	bgt.n	8005bf4 <ProcessCmd+0x3c>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	da00      	bge.n	8005be4 <ProcessCmd+0x2c>
 8005be2:	e0b7      	b.n	8005d54 <ProcessCmd+0x19c>
 8005be4:	2b0c      	cmp	r3, #12
 8005be6:	d900      	bls.n	8005bea <ProcessCmd+0x32>
 8005be8:	e0b4      	b.n	8005d54 <ProcessCmd+0x19c>
 8005bea:	009a      	lsls	r2, r3, #2
 8005bec:	4b5d      	ldr	r3, [pc, #372]	@ (8005d64 <ProcessCmd+0x1ac>)
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	469f      	mov	pc, r3
 8005bf4:	2bfd      	cmp	r3, #253	@ 0xfd
 8005bf6:	d100      	bne.n	8005bfa <ProcessCmd+0x42>
 8005bf8:	e084      	b.n	8005d04 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005bfa:	e0ab      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005bfc:	2118      	movs	r1, #24
 8005bfe:	187b      	adds	r3, r7, r1
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	001a      	movs	r2, r3
 8005c04:	187b      	adds	r3, r7, r1
 8005c06:	1c99      	adds	r1, r3, #2
 8005c08:	4857      	ldr	r0, [pc, #348]	@ (8005d68 <ProcessCmd+0x1b0>)
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	f7fd fd58 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c10:	e0a0      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c12:	2118      	movs	r1, #24
 8005c14:	187b      	adds	r3, r7, r1
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	001a      	movs	r2, r3
 8005c1a:	187b      	adds	r3, r7, r1
 8005c1c:	1c99      	adds	r1, r3, #2
 8005c1e:	4853      	ldr	r0, [pc, #332]	@ (8005d6c <ProcessCmd+0x1b4>)
 8005c20:	230c      	movs	r3, #12
 8005c22:	f7fd fd4d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c26:	e095      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c28:	2118      	movs	r1, #24
 8005c2a:	187b      	adds	r3, r7, r1
 8005c2c:	785b      	ldrb	r3, [r3, #1]
 8005c2e:	001a      	movs	r2, r3
 8005c30:	187b      	adds	r3, r7, r1
 8005c32:	1c99      	adds	r1, r3, #2
 8005c34:	484e      	ldr	r0, [pc, #312]	@ (8005d70 <ProcessCmd+0x1b8>)
 8005c36:	230c      	movs	r3, #12
 8005c38:	f7fd fd42 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c3c:	e08a      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c3e:	2118      	movs	r1, #24
 8005c40:	187b      	adds	r3, r7, r1
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	001a      	movs	r2, r3
 8005c46:	187b      	adds	r3, r7, r1
 8005c48:	1c99      	adds	r1, r3, #2
 8005c4a:	484a      	ldr	r0, [pc, #296]	@ (8005d74 <ProcessCmd+0x1bc>)
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	f7fd fd37 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c52:	e07f      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c54:	2118      	movs	r1, #24
 8005c56:	187b      	adds	r3, r7, r1
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	001a      	movs	r2, r3
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	1c99      	adds	r1, r3, #2
 8005c60:	4845      	ldr	r0, [pc, #276]	@ (8005d78 <ProcessCmd+0x1c0>)
 8005c62:	230c      	movs	r3, #12
 8005c64:	f7fd fd2c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c68:	e074      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c6a:	2118      	movs	r1, #24
 8005c6c:	187b      	adds	r3, r7, r1
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	001a      	movs	r2, r3
 8005c72:	187b      	adds	r3, r7, r1
 8005c74:	1c99      	adds	r1, r3, #2
 8005c76:	4841      	ldr	r0, [pc, #260]	@ (8005d7c <ProcessCmd+0x1c4>)
 8005c78:	230c      	movs	r3, #12
 8005c7a:	f7fd fd21 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c7e:	e069      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c80:	2118      	movs	r1, #24
 8005c82:	187b      	adds	r3, r7, r1
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	001a      	movs	r2, r3
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	1c99      	adds	r1, r3, #2
 8005c8c:	483c      	ldr	r0, [pc, #240]	@ (8005d80 <ProcessCmd+0x1c8>)
 8005c8e:	230c      	movs	r3, #12
 8005c90:	f7fd fd16 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c94:	e05e      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005c96:	2118      	movs	r1, #24
 8005c98:	187b      	adds	r3, r7, r1
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	187b      	adds	r3, r7, r1
 8005ca0:	1c99      	adds	r1, r3, #2
 8005ca2:	4838      	ldr	r0, [pc, #224]	@ (8005d84 <ProcessCmd+0x1cc>)
 8005ca4:	231e      	movs	r3, #30
 8005ca6:	f7fd fd0b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005caa:	e053      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cac:	2118      	movs	r1, #24
 8005cae:	187b      	adds	r3, r7, r1
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	1c99      	adds	r1, r3, #2
 8005cb8:	4833      	ldr	r0, [pc, #204]	@ (8005d88 <ProcessCmd+0x1d0>)
 8005cba:	230c      	movs	r3, #12
 8005cbc:	f7fd fd00 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cc0:	e048      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cc2:	2118      	movs	r1, #24
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	001a      	movs	r2, r3
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	1c99      	adds	r1, r3, #2
 8005cce:	482f      	ldr	r0, [pc, #188]	@ (8005d8c <ProcessCmd+0x1d4>)
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	f7fd fcf5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cd6:	e03d      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cd8:	2118      	movs	r1, #24
 8005cda:	187b      	adds	r3, r7, r1
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	001a      	movs	r2, r3
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	1c99      	adds	r1, r3, #2
 8005ce4:	482a      	ldr	r0, [pc, #168]	@ (8005d90 <ProcessCmd+0x1d8>)
 8005ce6:	230c      	movs	r3, #12
 8005ce8:	f7fd fcea 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cec:	e032      	b.n	8005d54 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cee:	2118      	movs	r1, #24
 8005cf0:	187b      	adds	r3, r7, r1
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	1c99      	adds	r1, r3, #2
 8005cfa:	4826      	ldr	r0, [pc, #152]	@ (8005d94 <ProcessCmd+0x1dc>)
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	f7fd fcdf 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d02:	e027      	b.n	8005d54 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005d04:	4b18      	ldr	r3, [pc, #96]	@ (8005d68 <ProcessCmd+0x1b0>)
 8005d06:	21ba      	movs	r1, #186	@ 0xba
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7fd fd1e 	bl	800374a <ClearEEprom>
        break;
 8005d0e:	e021      	b.n	8005d54 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005d10:	2118      	movs	r1, #24
 8005d12:	187b      	adds	r3, r7, r1
 8005d14:	789b      	ldrb	r3, [r3, #2]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	b21a      	sxth	r2, r3
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	78db      	ldrb	r3, [r3, #3]
 8005d1e:	b21b      	sxth	r3, r3
 8005d20:	4313      	orrs	r3, r2
 8005d22:	b21a      	sxth	r2, r3
 8005d24:	1dbb      	adds	r3, r7, #6
 8005d26:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005d28:	1dbb      	adds	r3, r7, #6
 8005d2a:	881a      	ldrh	r2, [r3, #0]
 8005d2c:	23c0      	movs	r3, #192	@ 0xc0
 8005d2e:	015b      	lsls	r3, r3, #5
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d207      	bcs.n	8005d44 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005d34:	1dbb      	adds	r3, r7, #6
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	4a0b      	ldr	r2, [pc, #44]	@ (8005d68 <ProcessCmd+0x1b0>)
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	0010      	movs	r0, r2
 8005d3e:	f7fd fd04 	bl	800374a <ClearEEprom>
            break;
 8005d42:	e006      	b.n	8005d52 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005d44:	23c0      	movs	r3, #192	@ 0xc0
 8005d46:	015b      	lsls	r3, r3, #5
 8005d48:	4a07      	ldr	r2, [pc, #28]	@ (8005d68 <ProcessCmd+0x1b0>)
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	0010      	movs	r0, r2
 8005d4e:	f7fd fcfc 	bl	800374a <ClearEEprom>
            break;
 8005d52:	46c0      	nop			@ (mov r8, r8)
}
 8005d54:	46c0      	nop			@ (mov r8, r8)
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b002      	add	sp, #8
 8005d5a:	bcb0      	pop	{r4, r5, r7}
 8005d5c:	bc08      	pop	{r3}
 8005d5e:	b004      	add	sp, #16
 8005d60:	4718      	bx	r3
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	08023110 	.word	0x08023110
 8005d68:	08080000 	.word	0x08080000
 8005d6c:	0808000c 	.word	0x0808000c
 8005d70:	08080018 	.word	0x08080018
 8005d74:	08080024 	.word	0x08080024
 8005d78:	08080030 	.word	0x08080030
 8005d7c:	0808003c 	.word	0x0808003c
 8005d80:	08080048 	.word	0x08080048
 8005d84:	08080090 	.word	0x08080090
 8005d88:	08080078 	.word	0x08080078
 8005d8c:	0808006c 	.word	0x0808006c
 8005d90:	08080060 	.word	0x08080060
 8005d94:	08080054 	.word	0x08080054

08005d98 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6039      	str	r1, [r7, #0]
 8005da0:	0011      	movs	r1, r2
 8005da2:	1dfb      	adds	r3, r7, #7
 8005da4:	1c02      	adds	r2, r0, #0
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	1dbb      	adds	r3, r7, #6
 8005daa:	1c0a      	adds	r2, r1, #0
 8005dac:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005dae:	2223      	movs	r2, #35	@ 0x23
 8005db0:	4b20      	ldr	r3, [pc, #128]	@ (8005e34 <Create_Message+0x9c>)
 8005db2:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005db4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e34 <Create_Message+0x9c>)
 8005db6:	1dfa      	adds	r2, r7, #7
 8005db8:	7812      	ldrb	r2, [r2, #0]
 8005dba:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <Create_Message+0x9c>)
 8005dbe:	1dba      	adds	r2, r7, #6
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005dc4:	1dbb      	adds	r3, r7, #6
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4b1b      	ldr	r3, [pc, #108]	@ (8005e38 <Create_Message+0xa0>)
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f018 fd61 	bl	801e894 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005dd2:	1dbb      	adds	r3, r7, #6
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	250e      	movs	r5, #14
 8005dda:	197b      	adds	r3, r7, r5
 8005ddc:	3203      	adds	r2, #3
 8005dde:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005de0:	260c      	movs	r6, #12
 8005de2:	19bc      	adds	r4, r7, r6
 8005de4:	197b      	adds	r3, r7, r5
 8005de6:	881a      	ldrh	r2, [r3, #0]
 8005de8:	4b12      	ldr	r3, [pc, #72]	@ (8005e34 <Create_Message+0x9c>)
 8005dea:	0011      	movs	r1, r2
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 f825 	bl	8005e3c <CRC16_ARC>
 8005df2:	0003      	movs	r3, r0
 8005df4:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005df6:	0030      	movs	r0, r6
 8005df8:	183b      	adds	r3, r7, r0
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	197b      	adds	r3, r7, r5
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b2d1      	uxtb	r1, r2
 8005e06:	4a0b      	ldr	r2, [pc, #44]	@ (8005e34 <Create_Message+0x9c>)
 8005e08:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005e0a:	197b      	adds	r3, r7, r5
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	183a      	adds	r2, r7, r0
 8005e12:	8812      	ldrh	r2, [r2, #0]
 8005e14:	b2d1      	uxtb	r1, r2
 8005e16:	4a07      	ldr	r2, [pc, #28]	@ (8005e34 <Create_Message+0x9c>)
 8005e18:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005e1a:	197b      	adds	r3, r7, r5
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	3302      	adds	r3, #2
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	4b04      	ldr	r3, [pc, #16]	@ (8005e34 <Create_Message+0x9c>)
 8005e24:	0011      	movs	r1, r2
 8005e26:	0018      	movs	r0, r3
 8005e28:	f015 fa06 	bl	801b238 <CDC_Transmit_FS>
}
 8005e2c:	46c0      	nop			@ (mov r8, r8)
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b005      	add	sp, #20
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e34:	20000bb4 	.word	0x20000bb4
 8005e38:	20000bb7 	.word	0x20000bb7

08005e3c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	000a      	movs	r2, r1
 8005e46:	1cbb      	adds	r3, r7, #2
 8005e48:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005e4a:	2316      	movs	r3, #22
 8005e4c:	18fb      	adds	r3, r7, r3
 8005e4e:	2200      	movs	r2, #0
 8005e50:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	e02e      	b.n	8005eb6 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	18d3      	adds	r3, r2, r3
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	0019      	movs	r1, r3
 8005e62:	2216      	movs	r2, #22
 8005e64:	18bb      	adds	r3, r7, r2
 8005e66:	18ba      	adds	r2, r7, r2
 8005e68:	8812      	ldrh	r2, [r2, #0]
 8005e6a:	404a      	eors	r2, r1
 8005e6c:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e01a      	b.n	8005eaa <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005e74:	2116      	movs	r1, #22
 8005e76:	187b      	adds	r3, r7, r1
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	d00b      	beq.n	8005e98 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005e80:	187b      	adds	r3, r7, r1
 8005e82:	187a      	adds	r2, r7, r1
 8005e84:	8812      	ldrh	r2, [r2, #0]
 8005e86:	0852      	lsrs	r2, r2, #1
 8005e88:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005e8a:	187b      	adds	r3, r7, r1
 8005e8c:	187a      	adds	r2, r7, r1
 8005e8e:	8812      	ldrh	r2, [r2, #0]
 8005e90:	490f      	ldr	r1, [pc, #60]	@ (8005ed0 <CRC16_ARC+0x94>)
 8005e92:	404a      	eors	r2, r1
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	e005      	b.n	8005ea4 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005e98:	2216      	movs	r2, #22
 8005e9a:	18bb      	adds	r3, r7, r2
 8005e9c:	18ba      	adds	r2, r7, r2
 8005e9e:	8812      	ldrh	r2, [r2, #0]
 8005ea0:	0852      	lsrs	r2, r2, #1
 8005ea2:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b07      	cmp	r3, #7
 8005eae:	dde1      	ble.n	8005e74 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	1cbb      	adds	r3, r7, #2
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	dbcb      	blt.n	8005e58 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005ec0:	2316      	movs	r3, #22
 8005ec2:	18fb      	adds	r3, r7, r3
 8005ec4:	881b      	ldrh	r3, [r3, #0]
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b006      	add	sp, #24
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			@ (mov r8, r8)
 8005ed0:	ffffa001 	.word	0xffffa001

08005ed4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005ed8:	4b26      	ldr	r3, [pc, #152]	@ (8005f74 <ReadBatteryVoltage+0xa0>)
 8005eda:	4a27      	ldr	r2, [pc, #156]	@ (8005f78 <ReadBatteryVoltage+0xa4>)
 8005edc:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005ede:	4b25      	ldr	r3, [pc, #148]	@ (8005f74 <ReadBatteryVoltage+0xa0>)
 8005ee0:	2280      	movs	r2, #128	@ 0x80
 8005ee2:	0152      	lsls	r2, r2, #5
 8005ee4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005ee6:	4a23      	ldr	r2, [pc, #140]	@ (8005f74 <ReadBatteryVoltage+0xa0>)
 8005ee8:	4b24      	ldr	r3, [pc, #144]	@ (8005f7c <ReadBatteryVoltage+0xa8>)
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f007 fe1d 	bl	800db2c <HAL_ADC_ConfigChannel>
 8005ef2:	1e03      	subs	r3, r0, #0
 8005ef4:	d001      	beq.n	8005efa <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005ef6:	f001 fbf3 	bl	80076e0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005efa:	4b20      	ldr	r3, [pc, #128]	@ (8005f7c <ReadBatteryVoltage+0xa8>)
 8005efc:	0018      	movs	r0, r3
 8005efe:	f007 fd19 	bl	800d934 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005f02:	4b1e      	ldr	r3, [pc, #120]	@ (8005f7c <ReadBatteryVoltage+0xa8>)
 8005f04:	2101      	movs	r1, #1
 8005f06:	0018      	movs	r0, r3
 8005f08:	f007 fd68 	bl	800d9dc <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f7c <ReadBatteryVoltage+0xa8>)
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f007 fe00 	bl	800db14 <HAL_ADC_GetValue>
 8005f14:	0002      	movs	r2, r0
 8005f16:	4b1a      	ldr	r3, [pc, #104]	@ (8005f80 <ReadBatteryVoltage+0xac>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4353      	muls	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4919      	ldr	r1, [pc, #100]	@ (8005f84 <ReadBatteryVoltage+0xb0>)
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7fa f93f 	bl	80001a4 <__udivsi3>
 8005f26:	0003      	movs	r3, r0
 8005f28:	001a      	movs	r2, r3
 8005f2a:	4b17      	ldr	r3, [pc, #92]	@ (8005f88 <ReadBatteryVoltage+0xb4>)
 8005f2c:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005f2e:	4b16      	ldr	r3, [pc, #88]	@ (8005f88 <ReadBatteryVoltage+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	0018      	movs	r0, r3
 8005f34:	f7fb fb98 	bl	8001668 <__aeabi_ui2f>
 8005f38:	1c03      	adds	r3, r0, #0
 8005f3a:	4914      	ldr	r1, [pc, #80]	@ (8005f8c <ReadBatteryVoltage+0xb8>)
 8005f3c:	1c18      	adds	r0, r3, #0
 8005f3e:	f7fa fe49 	bl	8000bd4 <__aeabi_fdiv>
 8005f42:	1c03      	adds	r3, r0, #0
 8005f44:	1c1a      	adds	r2, r3, #0
 8005f46:	4b12      	ldr	r3, [pc, #72]	@ (8005f90 <ReadBatteryVoltage+0xbc>)
 8005f48:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <ReadBatteryVoltage+0xa0>)
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f78 <ReadBatteryVoltage+0xa4>)
 8005f4e:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005f50:	4b08      	ldr	r3, [pc, #32]	@ (8005f74 <ReadBatteryVoltage+0xa0>)
 8005f52:	4a10      	ldr	r2, [pc, #64]	@ (8005f94 <ReadBatteryVoltage+0xc0>)
 8005f54:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005f56:	4a07      	ldr	r2, [pc, #28]	@ (8005f74 <ReadBatteryVoltage+0xa0>)
 8005f58:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <ReadBatteryVoltage+0xa8>)
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f007 fde5 	bl	800db2c <HAL_ADC_ConfigChannel>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d001      	beq.n	8005f6a <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005f66:	f001 fbbb 	bl	80076e0 <Error_Handler>
   }
   return trueValue;
 8005f6a:	4b09      	ldr	r3, [pc, #36]	@ (8005f90 <ReadBatteryVoltage+0xbc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 }
 8005f6e:	1c18      	adds	r0, r3, #0
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20000cbc 	.word	0x20000cbc
 8005f78:	38004000 	.word	0x38004000
 8005f7c:	20000ce0 	.word	0x20000ce0
 8005f80:	2000002c 	.word	0x2000002c
 8005f84:	00000fff 	.word	0x00000fff
 8005f88:	20000cc4 	.word	0x20000cc4
 8005f8c:	447a0000 	.word	0x447a0000
 8005f90:	20000cc8 	.word	0x20000cc8
 8005f94:	00001001 	.word	0x00001001

08005f98 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005f9c:	4b27      	ldr	r3, [pc, #156]	@ (800603c <ReadSolarVoltage+0xa4>)
 8005f9e:	4a28      	ldr	r2, [pc, #160]	@ (8006040 <ReadSolarVoltage+0xa8>)
 8005fa0:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005fa2:	4b26      	ldr	r3, [pc, #152]	@ (800603c <ReadSolarVoltage+0xa4>)
 8005fa4:	2280      	movs	r2, #128	@ 0x80
 8005fa6:	0152      	lsls	r2, r2, #5
 8005fa8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005faa:	4a24      	ldr	r2, [pc, #144]	@ (800603c <ReadSolarVoltage+0xa4>)
 8005fac:	4b25      	ldr	r3, [pc, #148]	@ (8006044 <ReadSolarVoltage+0xac>)
 8005fae:	0011      	movs	r1, r2
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f007 fdbb 	bl	800db2c <HAL_ADC_ConfigChannel>
 8005fb6:	1e03      	subs	r3, r0, #0
 8005fb8:	d001      	beq.n	8005fbe <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005fba:	f001 fb91 	bl	80076e0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005fbe:	4b21      	ldr	r3, [pc, #132]	@ (8006044 <ReadSolarVoltage+0xac>)
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f007 fcb7 	bl	800d934 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006044 <ReadSolarVoltage+0xac>)
 8005fc8:	2101      	movs	r1, #1
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f007 fd06 	bl	800d9dc <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8006044 <ReadSolarVoltage+0xac>)
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f007 fd9e 	bl	800db14 <HAL_ADC_GetValue>
 8005fd8:	0002      	movs	r2, r0
 8005fda:	4b1b      	ldr	r3, [pc, #108]	@ (8006048 <ReadSolarVoltage+0xb0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	435a      	muls	r2, r3
 8005fe0:	0013      	movs	r3, r2
 8005fe2:	005b      	lsls	r3, r3, #1
 8005fe4:	189b      	adds	r3, r3, r2
 8005fe6:	4919      	ldr	r1, [pc, #100]	@ (800604c <ReadSolarVoltage+0xb4>)
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7fa f8db 	bl	80001a4 <__udivsi3>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	4b17      	ldr	r3, [pc, #92]	@ (8006050 <ReadSolarVoltage+0xb8>)
 8005ff4:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005ff6:	4b16      	ldr	r3, [pc, #88]	@ (8006050 <ReadSolarVoltage+0xb8>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7fb fb34 	bl	8001668 <__aeabi_ui2f>
 8006000:	1c03      	adds	r3, r0, #0
 8006002:	4914      	ldr	r1, [pc, #80]	@ (8006054 <ReadSolarVoltage+0xbc>)
 8006004:	1c18      	adds	r0, r3, #0
 8006006:	f7fa fde5 	bl	8000bd4 <__aeabi_fdiv>
 800600a:	1c03      	adds	r3, r0, #0
 800600c:	1c1a      	adds	r2, r3, #0
 800600e:	4b12      	ldr	r3, [pc, #72]	@ (8006058 <ReadSolarVoltage+0xc0>)
 8006010:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8006012:	4b0a      	ldr	r3, [pc, #40]	@ (800603c <ReadSolarVoltage+0xa4>)
 8006014:	4a0a      	ldr	r2, [pc, #40]	@ (8006040 <ReadSolarVoltage+0xa8>)
 8006016:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8006018:	4b08      	ldr	r3, [pc, #32]	@ (800603c <ReadSolarVoltage+0xa4>)
 800601a:	4a10      	ldr	r2, [pc, #64]	@ (800605c <ReadSolarVoltage+0xc4>)
 800601c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800601e:	4a07      	ldr	r2, [pc, #28]	@ (800603c <ReadSolarVoltage+0xa4>)
 8006020:	4b08      	ldr	r3, [pc, #32]	@ (8006044 <ReadSolarVoltage+0xac>)
 8006022:	0011      	movs	r1, r2
 8006024:	0018      	movs	r0, r3
 8006026:	f007 fd81 	bl	800db2c <HAL_ADC_ConfigChannel>
 800602a:	1e03      	subs	r3, r0, #0
 800602c:	d001      	beq.n	8006032 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 800602e:	f001 fb57 	bl	80076e0 <Error_Handler>
   }
   return trueValue;
 8006032:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <ReadSolarVoltage+0xc0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 }
 8006036:	1c18      	adds	r0, r3, #0
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000cbc 	.word	0x20000cbc
 8006040:	3c008000 	.word	0x3c008000
 8006044:	20000ce0 	.word	0x20000ce0
 8006048:	2000002c 	.word	0x2000002c
 800604c:	00000fff 	.word	0x00000fff
 8006050:	20000ccc 	.word	0x20000ccc
 8006054:	447a0000 	.word	0x447a0000
 8006058:	20000cd0 	.word	0x20000cd0
 800605c:	00001001 	.word	0x00001001

08006060 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006064:	23a0      	movs	r3, #160	@ 0xa0
 8006066:	05db      	lsls	r3, r3, #23
 8006068:	2180      	movs	r1, #128	@ 0x80
 800606a:	0018      	movs	r0, r3
 800606c:	f008 fce4 	bl	800ea38 <HAL_GPIO_ReadPin>
 8006070:	0003      	movs	r3, r0
 8006072:	1e5a      	subs	r2, r3, #1
 8006074:	4193      	sbcs	r3, r2
 8006076:	b2db      	uxtb	r3, r3
}
 8006078:	0018      	movs	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800607e:	b580      	push	{r7, lr}
 8006080:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	021a      	lsls	r2, r3, #8
 8006086:	23a0      	movs	r3, #160	@ 0xa0
 8006088:	05db      	lsls	r3, r3, #23
 800608a:	0011      	movs	r1, r2
 800608c:	0018      	movs	r0, r3
 800608e:	f008 fcd3 	bl	800ea38 <HAL_GPIO_ReadPin>
 8006092:	0003      	movs	r3, r0
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	4193      	sbcs	r3, r2
 8006098:	b2db      	uxtb	r3, r3
}
 800609a:	0018      	movs	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 80060a4:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <UserButton_Pressed+0x1c>)
 80060a6:	2104      	movs	r1, #4
 80060a8:	0018      	movs	r0, r3
 80060aa:	f008 fcc5 	bl	800ea38 <HAL_GPIO_ReadPin>
 80060ae:	0003      	movs	r3, r0
 80060b0:	425a      	negs	r2, r3
 80060b2:	4153      	adcs	r3, r2
 80060b4:	b2db      	uxtb	r3, r3
}
 80060b6:	0018      	movs	r0, r3
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	50000c00 	.word	0x50000c00

080060c0 <showTime>:
uint8_t iMinute = 0;
uint8_t myUptimeminute = 0;
uint8_t myUptimehour = 0;
uint16_t myUptimeday = 0;

void showTime() {
 80060c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c2:	46ce      	mov	lr, r9
 80060c4:	4647      	mov	r7, r8
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b08d      	sub	sp, #52	@ 0x34
 80060ca:	af06      	add	r7, sp, #24
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80060cc:	003a      	movs	r2, r7
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	0011      	movs	r1, r2
 80060d2:	0018      	movs	r0, r3
 80060d4:	f000 fa16 	bl	8006504 <RTC_GetTime>
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 80060d8:	003b      	movs	r3, r7
 80060da:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 80060dc:	469c      	mov	ip, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 80060de:	003b      	movs	r3, r7
 80060e0:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 80060e2:	4698      	mov	r8, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 80060e4:	003b      	movs	r3, r7
 80060e6:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 80060e8:	4699      	mov	r9, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 80060ea:	1d3b      	adds	r3, r7, #4
 80060ec:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 80060ee:	001a      	movs	r2, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 80060f0:	1d3b      	adds	r3, r7, #4
 80060f2:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 80060f4:	0019      	movs	r1, r3
      currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 80060f6:	1d3b      	adds	r3, r7, #4
 80060f8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 80060fa:	001c      	movs	r4, r3
 80060fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <showTime+0x74>)
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	001d      	movs	r5, r3
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <showTime+0x78>)
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	001e      	movs	r6, r3
 8006108:	4b0c      	ldr	r3, [pc, #48]	@ (800613c <showTime+0x7c>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	480c      	ldr	r0, [pc, #48]	@ (8006140 <showTime+0x80>)
 800610e:	9305      	str	r3, [sp, #20]
 8006110:	9604      	str	r6, [sp, #16]
 8006112:	9503      	str	r5, [sp, #12]
 8006114:	9402      	str	r4, [sp, #8]
 8006116:	9101      	str	r1, [sp, #4]
 8006118:	9200      	str	r2, [sp, #0]
 800611a:	464b      	mov	r3, r9
 800611c:	4642      	mov	r2, r8
 800611e:	4661      	mov	r1, ip
 8006120:	f018 f928 	bl	801e374 <iprintf>
}
 8006124:	46c0      	nop			@ (mov r8, r8)
 8006126:	46bd      	mov	sp, r7
 8006128:	b007      	add	sp, #28
 800612a:	bcc0      	pop	{r6, r7}
 800612c:	46b9      	mov	r9, r7
 800612e:	46b0      	mov	r8, r6
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	20000cdc 	.word	0x20000cdc
 8006138:	20000cda 	.word	0x20000cda
 800613c:	20000cd9 	.word	0x20000cd9
 8006140:	08021f50 	.word	0x08021f50

08006144 <setiMinute>:

void setiMinute(uint8_t minute) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	0002      	movs	r2, r0
 800614c:	1dfb      	adds	r3, r7, #7
 800614e:	701a      	strb	r2, [r3, #0]
  iMinute = minute;
 8006150:	4b07      	ldr	r3, [pc, #28]	@ (8006170 <setiMinute+0x2c>)
 8006152:	1dfa      	adds	r2, r7, #7
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	701a      	strb	r2, [r3, #0]
  Debug("iMinute set to: %d", iMinute);
 8006158:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <setiMinute+0x2c>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	4a05      	ldr	r2, [pc, #20]	@ (8006174 <setiMinute+0x30>)
 800615e:	4906      	ldr	r1, [pc, #24]	@ (8006178 <setiMinute+0x34>)
 8006160:	2003      	movs	r0, #3
 8006162:	f006 fe8b 	bl	800ce7c <CreateLine>
}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b002      	add	sp, #8
 800616c:	bd80      	pop	{r7, pc}
 800616e:	46c0      	nop			@ (mov r8, r8)
 8006170:	20000cd8 	.word	0x20000cd8
 8006174:	08021fa4 	.word	0x08021fa4
 8006178:	08021fb8 	.word	0x08021fb8

0800617c <UpdateSystemUptime>:

void UpdateSystemUptime() {
 800617c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617e:	b08d      	sub	sp, #52	@ 0x34
 8006180:	af06      	add	r7, sp, #24
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006182:	003a      	movs	r2, r7
 8006184:	1d3b      	adds	r3, r7, #4
 8006186:	0011      	movs	r1, r2
 8006188:	0018      	movs	r0, r3
 800618a:	f000 f9bb 	bl	8006504 <RTC_GetTime>
  if (iMinute != currentTime.Minutes) {
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	785a      	ldrb	r2, [r3, #1]
 8006192:	4b24      	ldr	r3, [pc, #144]	@ (8006224 <UpdateSystemUptime+0xa8>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d009      	beq.n	80061ae <UpdateSystemUptime+0x32>
    iMinute = currentTime.Minutes;
 800619a:	1d3b      	adds	r3, r7, #4
 800619c:	785a      	ldrb	r2, [r3, #1]
 800619e:	4b21      	ldr	r3, [pc, #132]	@ (8006224 <UpdateSystemUptime+0xa8>)
 80061a0:	701a      	strb	r2, [r3, #0]
    myUptimeminute++;
 80061a2:	4b21      	ldr	r3, [pc, #132]	@ (8006228 <UpdateSystemUptime+0xac>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006228 <UpdateSystemUptime+0xac>)
 80061ac:	701a      	strb	r2, [r3, #0]
  }
  if (myUptimeminute == 60) {
 80061ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006228 <UpdateSystemUptime+0xac>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80061b4:	d115      	bne.n	80061e2 <UpdateSystemUptime+0x66>
    myUptimeminute = 0;
 80061b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006228 <UpdateSystemUptime+0xac>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
    myUptimehour++;
 80061bc:	4b1b      	ldr	r3, [pc, #108]	@ (800622c <UpdateSystemUptime+0xb0>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	4b19      	ldr	r3, [pc, #100]	@ (800622c <UpdateSystemUptime+0xb0>)
 80061c6:	701a      	strb	r2, [r3, #0]
    if (myUptimehour == 24) {
 80061c8:	4b18      	ldr	r3, [pc, #96]	@ (800622c <UpdateSystemUptime+0xb0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b18      	cmp	r3, #24
 80061ce:	d108      	bne.n	80061e2 <UpdateSystemUptime+0x66>
      myUptimehour = 0;
 80061d0:	4b16      	ldr	r3, [pc, #88]	@ (800622c <UpdateSystemUptime+0xb0>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	701a      	strb	r2, [r3, #0]
      myUptimeday++;
 80061d6:	4b16      	ldr	r3, [pc, #88]	@ (8006230 <UpdateSystemUptime+0xb4>)
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	4b14      	ldr	r3, [pc, #80]	@ (8006230 <UpdateSystemUptime+0xb4>)
 80061e0:	801a      	strh	r2, [r3, #0]
    }
  }
  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm",
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	469c      	mov	ip, r3
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	0018      	movs	r0, r3
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	789b      	ldrb	r3, [r3, #2]
 80061f2:	001c      	movs	r4, r3
 80061f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006230 <UpdateSystemUptime+0xb4>)
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	001d      	movs	r5, r3
 80061fa:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <UpdateSystemUptime+0xb0>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	001e      	movs	r6, r3
 8006200:	4b09      	ldr	r3, [pc, #36]	@ (8006228 <UpdateSystemUptime+0xac>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	4a0b      	ldr	r2, [pc, #44]	@ (8006234 <UpdateSystemUptime+0xb8>)
 8006206:	490c      	ldr	r1, [pc, #48]	@ (8006238 <UpdateSystemUptime+0xbc>)
 8006208:	9304      	str	r3, [sp, #16]
 800620a:	9603      	str	r6, [sp, #12]
 800620c:	9502      	str	r5, [sp, #8]
 800620e:	9401      	str	r4, [sp, #4]
 8006210:	9000      	str	r0, [sp, #0]
 8006212:	4663      	mov	r3, ip
 8006214:	2002      	movs	r0, #2
 8006216:	f006 fe31 	bl	800ce7c <CreateLine>
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
}
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	46bd      	mov	sp, r7
 800621e:	b007      	add	sp, #28
 8006220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006222:	46c0      	nop			@ (mov r8, r8)
 8006224:	20000cd8 	.word	0x20000cd8
 8006228:	20000cd9 	.word	0x20000cd9
 800622c:	20000cda 	.word	0x20000cda
 8006230:	20000cdc 	.word	0x20000cdc
 8006234:	08021fbc 	.word	0x08021fbc
 8006238:	08022000 	.word	0x08022000

0800623c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800623c:	b590      	push	{r4, r7, lr}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	0008      	movs	r0, r1
 8006246:	0011      	movs	r1, r2
 8006248:	1cfb      	adds	r3, r7, #3
 800624a:	1c02      	adds	r2, r0, #0
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	1cbb      	adds	r3, r7, #2
 8006250:	1c0a      	adds	r2, r1, #0
 8006252:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006254:	230e      	movs	r3, #14
 8006256:	18fb      	adds	r3, r7, r3
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800625c:	230f      	movs	r3, #15
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	1cfa      	adds	r2, r7, #3
 8006262:	7812      	ldrb	r2, [r2, #0]
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e015      	b.n	8006294 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006268:	200f      	movs	r0, #15
 800626a:	183b      	adds	r3, r7, r0
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	18d2      	adds	r2, r2, r3
 8006272:	240e      	movs	r4, #14
 8006274:	193b      	adds	r3, r7, r4
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	7811      	ldrb	r1, [r2, #0]
 800627a:	2208      	movs	r2, #8
 800627c:	18ba      	adds	r2, r7, r2
 800627e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006280:	193b      	adds	r3, r7, r4
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	193b      	adds	r3, r7, r4
 8006286:	3201      	adds	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800628a:	183b      	adds	r3, r7, r0
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	183b      	adds	r3, r7, r0
 8006290:	3201      	adds	r2, #1
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	200f      	movs	r0, #15
 8006296:	183a      	adds	r2, r7, r0
 8006298:	1cbb      	adds	r3, r7, #2
 800629a:	7812      	ldrb	r2, [r2, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d9e2      	bls.n	8006268 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 80062a2:	230e      	movs	r3, #14
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2208      	movs	r2, #8
 80062aa:	18ba      	adds	r2, r7, r2
 80062ac:	2100      	movs	r1, #0
 80062ae:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80062b0:	1cfb      	adds	r3, r7, #3
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b13      	cmp	r3, #19
 80062b6:	d849      	bhi.n	800634c <aBuff2int+0x110>
    if (start == 17) { //month
 80062b8:	1cfb      	adds	r3, r7, #3
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b11      	cmp	r3, #17
 80062be:	d122      	bne.n	8006306 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80062c0:	183b      	adds	r3, r7, r0
 80062c2:	2200      	movs	r2, #0
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e018      	b.n	80062fa <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80062c8:	240f      	movs	r4, #15
 80062ca:	193b      	adds	r3, r7, r4
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	4b25      	ldr	r3, [pc, #148]	@ (8006364 <aBuff2int+0x128>)
 80062d0:	0092      	lsls	r2, r2, #2
 80062d2:	58d2      	ldr	r2, [r2, r3]
 80062d4:	2308      	movs	r3, #8
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	0011      	movs	r1, r2
 80062da:	0018      	movs	r0, r3
 80062dc:	f7f9 ff3c 	bl	8000158 <strcmp>
 80062e0:	1e03      	subs	r3, r0, #0
 80062e2:	d104      	bne.n	80062ee <aBuff2int+0xb2>
          return i+1;
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	e035      	b.n	800635a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80062ee:	210f      	movs	r1, #15
 80062f0:	187b      	adds	r3, r7, r1
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	187b      	adds	r3, r7, r1
 80062f6:	3201      	adds	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	230f      	movs	r3, #15
 80062fc:	18fb      	adds	r3, r7, r3
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b0b      	cmp	r3, #11
 8006302:	d9e1      	bls.n	80062c8 <aBuff2int+0x8c>
 8006304:	e022      	b.n	800634c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006306:	230f      	movs	r3, #15
 8006308:	18fb      	adds	r3, r7, r3
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	e018      	b.n	8006342 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006310:	240f      	movs	r4, #15
 8006312:	193b      	adds	r3, r7, r4
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	4b14      	ldr	r3, [pc, #80]	@ (8006368 <aBuff2int+0x12c>)
 8006318:	0092      	lsls	r2, r2, #2
 800631a:	58d2      	ldr	r2, [r2, r3]
 800631c:	2308      	movs	r3, #8
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	0011      	movs	r1, r2
 8006322:	0018      	movs	r0, r3
 8006324:	f7f9 ff18 	bl	8000158 <strcmp>
 8006328:	1e03      	subs	r3, r0, #0
 800632a:	d104      	bne.n	8006336 <aBuff2int+0xfa>
          return i+1;
 800632c:	193b      	adds	r3, r7, r4
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	b2db      	uxtb	r3, r3
 8006334:	e011      	b.n	800635a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006336:	210f      	movs	r1, #15
 8006338:	187b      	adds	r3, r7, r1
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	187b      	adds	r3, r7, r1
 800633e:	3201      	adds	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	230f      	movs	r3, #15
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b06      	cmp	r3, #6
 800634a:	d9e1      	bls.n	8006310 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800634c:	2308      	movs	r3, #8
 800634e:	18fb      	adds	r3, r7, r3
 8006350:	0018      	movs	r0, r3
 8006352:	f016 fc34 	bl	801cbbe <atoi>
 8006356:	0003      	movs	r3, r0
 8006358:	b2db      	uxtb	r3, r3
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b005      	add	sp, #20
 8006360:	bd90      	pop	{r4, r7, pc}
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	20000050 	.word	0x20000050
 8006368:	20000034 	.word	0x20000034

0800636c <ParseTime>:

void ParseTime(char* buffer) {
 800636c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636e:	b08b      	sub	sp, #44	@ 0x2c
 8006370:	af02      	add	r7, sp, #8
 8006372:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006374:	2508      	movs	r5, #8
 8006376:	197a      	adds	r2, r7, r5
 8006378:	240c      	movs	r4, #12
 800637a:	193b      	adds	r3, r7, r4
 800637c:	0011      	movs	r1, r2
 800637e:	0018      	movs	r0, r3
 8006380:	f000 f8c0 	bl	8006504 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2219      	movs	r2, #25
 8006388:	2118      	movs	r1, #24
 800638a:	0018      	movs	r0, r3
 800638c:	f7ff ff56 	bl	800623c <aBuff2int>
 8006390:	0003      	movs	r3, r0
 8006392:	001a      	movs	r2, r3
 8006394:	193b      	adds	r3, r7, r4
 8006396:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	221c      	movs	r2, #28
 800639c:	211b      	movs	r1, #27
 800639e:	0018      	movs	r0, r3
 80063a0:	f7ff ff4c 	bl	800623c <aBuff2int>
 80063a4:	0003      	movs	r3, r0
 80063a6:	001a      	movs	r2, r3
 80063a8:	193b      	adds	r3, r7, r4
 80063aa:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	221f      	movs	r2, #31
 80063b0:	211e      	movs	r1, #30
 80063b2:	0018      	movs	r0, r3
 80063b4:	f7ff ff42 	bl	800623c <aBuff2int>
 80063b8:	0003      	movs	r3, r0
 80063ba:	001a      	movs	r2, r3
 80063bc:	193b      	adds	r3, r7, r4
 80063be:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2224      	movs	r2, #36	@ 0x24
 80063c4:	2123      	movs	r1, #35	@ 0x23
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7ff ff38 	bl	800623c <aBuff2int>
 80063cc:	0003      	movs	r3, r0
 80063ce:	001a      	movs	r2, r3
 80063d0:	002e      	movs	r6, r5
 80063d2:	19bb      	adds	r3, r7, r6
 80063d4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2213      	movs	r2, #19
 80063da:	2111      	movs	r1, #17
 80063dc:	0018      	movs	r0, r3
 80063de:	f7ff ff2d 	bl	800623c <aBuff2int>
 80063e2:	0003      	movs	r3, r0
 80063e4:	001a      	movs	r2, r3
 80063e6:	19bb      	adds	r3, r7, r6
 80063e8:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2216      	movs	r2, #22
 80063ee:	2115      	movs	r1, #21
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7ff ff23 	bl	800623c <aBuff2int>
 80063f6:	0003      	movs	r3, r0
 80063f8:	001a      	movs	r2, r3
 80063fa:	19bb      	adds	r3, r7, r6
 80063fc:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	220f      	movs	r2, #15
 8006402:	210d      	movs	r1, #13
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff ff19 	bl	800623c <aBuff2int>
 800640a:	0003      	movs	r3, r0
 800640c:	001a      	movs	r2, r3
 800640e:	19bb      	adds	r3, r7, r6
 8006410:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006412:	0025      	movs	r5, r4
 8006414:	197b      	adds	r3, r7, r5
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	001c      	movs	r4, r3
 800641a:	197b      	adds	r3, r7, r5
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	0018      	movs	r0, r3
 8006420:	197b      	adds	r3, r7, r5
 8006422:	789b      	ldrb	r3, [r3, #2]
 8006424:	4a0c      	ldr	r2, [pc, #48]	@ (8006458 <ParseTime+0xec>)
 8006426:	490d      	ldr	r1, [pc, #52]	@ (800645c <ParseTime+0xf0>)
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	9000      	str	r0, [sp, #0]
 800642c:	0023      	movs	r3, r4
 800642e:	2003      	movs	r0, #3
 8006430:	f006 fd24 	bl	800ce7c <CreateLine>
  RTC_SetTime(&currentTime);
 8006434:	197b      	adds	r3, r7, r5
 8006436:	0018      	movs	r0, r3
 8006438:	f000 f812 	bl	8006460 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800643c:	19bb      	adds	r3, r7, r6
 800643e:	0018      	movs	r0, r3
 8006440:	f000 f842 	bl	80064c8 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006444:	19bb      	adds	r3, r7, r6
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b02      	cmp	r3, #2
 800644a:	d101      	bne.n	8006450 <ParseTime+0xe4>
    reset_fanCleaningDone();
 800644c:	f001 ffa4 	bl	8008398 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 8006450:	46c0      	nop			@ (mov r8, r8)
 8006452:	46bd      	mov	sp, r7
 8006454:	b009      	add	sp, #36	@ 0x24
 8006456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006458:	08022004 	.word	0x08022004
 800645c:	08021fb8 	.word	0x08021fb8

08006460 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800647a:	4b0f      	ldr	r3, [pc, #60]	@ (80064b8 <RTC_SetTime+0x58>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	0018      	movs	r0, r3
 8006484:	f00e f8e6 	bl	8014654 <HAL_RTC_SetTime>
 8006488:	1e03      	subs	r3, r0, #0
 800648a:	d005      	beq.n	8006498 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 800648c:	4a0b      	ldr	r2, [pc, #44]	@ (80064bc <RTC_SetTime+0x5c>)
 800648e:	4b0c      	ldr	r3, [pc, #48]	@ (80064c0 <RTC_SetTime+0x60>)
 8006490:	0019      	movs	r1, r3
 8006492:	2001      	movs	r0, #1
 8006494:	f006 fcf2 	bl	800ce7c <CreateLine>
    }
    if (firstTimeUpdate) {
 8006498:	4b0a      	ldr	r3, [pc, #40]	@ (80064c4 <RTC_SetTime+0x64>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <RTC_SetTime+0x50>
      firstTimeUpdate = false;
 80064a0:	4b08      	ldr	r3, [pc, #32]	@ (80064c4 <RTC_SetTime+0x64>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	701a      	strb	r2, [r3, #0]
      setiMinute(sTime->Minutes);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7ff fe4a 	bl	8006144 <setiMinute>
    }
}
 80064b0:	46c0      	nop			@ (mov r8, r8)
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20000cd4 	.word	0x20000cd4
 80064bc:	0802203c 	.word	0x0802203c
 80064c0:	08022058 	.word	0x08022058
 80064c4:	20000030 	.word	0x20000030

080064c8 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80064d0:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <RTC_SetDate+0x30>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	0018      	movs	r0, r3
 80064da:	f00e f9c3 	bl	8014864 <HAL_RTC_SetDate>
 80064de:	1e03      	subs	r3, r0, #0
 80064e0:	d005      	beq.n	80064ee <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80064e2:	4a06      	ldr	r2, [pc, #24]	@ (80064fc <RTC_SetDate+0x34>)
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <RTC_SetDate+0x38>)
 80064e6:	0019      	movs	r1, r3
 80064e8:	2001      	movs	r0, #1
 80064ea:	f006 fcc7 	bl	800ce7c <CreateLine>
    }
}
 80064ee:	46c0      	nop			@ (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b002      	add	sp, #8
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	20000cd4 	.word	0x20000cd4
 80064fc:	0802205c 	.word	0x0802205c
 8006500:	08022058 	.word	0x08022058

08006504 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800650e:	4b11      	ldr	r3, [pc, #68]	@ (8006554 <RTC_GetTime+0x50>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	0018      	movs	r0, r3
 8006518:	f00e f946 	bl	80147a8 <HAL_RTC_GetTime>
 800651c:	1e03      	subs	r3, r0, #0
 800651e:	d005      	beq.n	800652c <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 8006520:	4a0d      	ldr	r2, [pc, #52]	@ (8006558 <RTC_GetTime+0x54>)
 8006522:	4b0e      	ldr	r3, [pc, #56]	@ (800655c <RTC_GetTime+0x58>)
 8006524:	0019      	movs	r1, r3
 8006526:	2001      	movs	r0, #1
 8006528:	f006 fca8 	bl	800ce7c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800652c:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <RTC_GetTime+0x50>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	0018      	movs	r0, r3
 8006536:	f00e fa29 	bl	801498c <HAL_RTC_GetDate>
 800653a:	1e03      	subs	r3, r0, #0
 800653c:	d005      	beq.n	800654a <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 800653e:	4a08      	ldr	r2, [pc, #32]	@ (8006560 <RTC_GetTime+0x5c>)
 8006540:	4b06      	ldr	r3, [pc, #24]	@ (800655c <RTC_GetTime+0x58>)
 8006542:	0019      	movs	r1, r3
 8006544:	2001      	movs	r0, #1
 8006546:	f006 fc99 	bl	800ce7c <CreateLine>
    }
}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	b002      	add	sp, #8
 8006550:	bd80      	pop	{r7, pc}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	20000cd4 	.word	0x20000cd4
 8006558:	08022078 	.word	0x08022078
 800655c:	08022058 	.word	0x08022058
 8006560:	08022094 	.word	0x08022094

08006564 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800656a:	003a      	movs	r2, r7
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	0011      	movs	r1, r2
 8006570:	0018      	movs	r0, r3
 8006572:	f7ff ffc7 	bl	8006504 <RTC_GetTime>
  return currentDate.WeekDay;
 8006576:	003b      	movs	r3, r7
 8006578:	781b      	ldrb	r3, [r3, #0]
}
 800657a:	0018      	movs	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	b006      	add	sp, #24
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <InitClock>:

    // Instellen op Stop mode met low-power regulator
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
}

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800658c:	4b03      	ldr	r3, [pc, #12]	@ (800659c <InitClock+0x18>)
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
}
 8006592:	46c0      	nop			@ (mov r8, r8)
 8006594:	46bd      	mov	sp, r7
 8006596:	b002      	add	sp, #8
 8006598:	bd80      	pop	{r7, pc}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	20000cd4 	.word	0x20000cd4

080065a0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80065a6:	003b      	movs	r3, r7
 80065a8:	0018      	movs	r0, r3
 80065aa:	2308      	movs	r3, #8
 80065ac:	001a      	movs	r2, r3
 80065ae:	2100      	movs	r1, #0
 80065b0:	f018 f894 	bl	801e6dc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80065b4:	4b30      	ldr	r3, [pc, #192]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065b6:	4a31      	ldr	r2, [pc, #196]	@ (800667c <MX_ADC_Init+0xdc>)
 80065b8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80065ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065bc:	2200      	movs	r2, #0
 80065be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80065c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065c2:	22c0      	movs	r2, #192	@ 0xc0
 80065c4:	0612      	lsls	r2, r2, #24
 80065c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80065c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80065ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80065d4:	4b28      	ldr	r3, [pc, #160]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065d6:	2201      	movs	r2, #1
 80065d8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80065da:	4b27      	ldr	r3, [pc, #156]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065dc:	2200      	movs	r2, #0
 80065de:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80065e0:	4b25      	ldr	r3, [pc, #148]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065e2:	2220      	movs	r2, #32
 80065e4:	2100      	movs	r1, #0
 80065e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80065e8:	4b23      	ldr	r3, [pc, #140]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065ea:	2221      	movs	r2, #33	@ 0x21
 80065ec:	2101      	movs	r1, #1
 80065ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80065f0:	4b21      	ldr	r3, [pc, #132]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80065f6:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <MX_ADC_Init+0xd8>)
 80065f8:	22c2      	movs	r2, #194	@ 0xc2
 80065fa:	32ff      	adds	r2, #255	@ 0xff
 80065fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80065fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006678 <MX_ADC_Init+0xd8>)
 8006600:	222c      	movs	r2, #44	@ 0x2c
 8006602:	2100      	movs	r1, #0
 8006604:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006606:	4b1c      	ldr	r3, [pc, #112]	@ (8006678 <MX_ADC_Init+0xd8>)
 8006608:	2204      	movs	r2, #4
 800660a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800660c:	4b1a      	ldr	r3, [pc, #104]	@ (8006678 <MX_ADC_Init+0xd8>)
 800660e:	2200      	movs	r2, #0
 8006610:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006612:	4b19      	ldr	r3, [pc, #100]	@ (8006678 <MX_ADC_Init+0xd8>)
 8006614:	2200      	movs	r2, #0
 8006616:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006618:	4b17      	ldr	r3, [pc, #92]	@ (8006678 <MX_ADC_Init+0xd8>)
 800661a:	2200      	movs	r2, #0
 800661c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800661e:	4b16      	ldr	r3, [pc, #88]	@ (8006678 <MX_ADC_Init+0xd8>)
 8006620:	2200      	movs	r2, #0
 8006622:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006624:	4b14      	ldr	r3, [pc, #80]	@ (8006678 <MX_ADC_Init+0xd8>)
 8006626:	0018      	movs	r0, r3
 8006628:	f007 f810 	bl	800d64c <HAL_ADC_Init>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d001      	beq.n	8006634 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006630:	f001 f856 	bl	80076e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006634:	003b      	movs	r3, r7
 8006636:	4a12      	ldr	r2, [pc, #72]	@ (8006680 <MX_ADC_Init+0xe0>)
 8006638:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800663a:	003b      	movs	r3, r7
 800663c:	2280      	movs	r2, #128	@ 0x80
 800663e:	0152      	lsls	r2, r2, #5
 8006640:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006642:	003a      	movs	r2, r7
 8006644:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <MX_ADC_Init+0xd8>)
 8006646:	0011      	movs	r1, r2
 8006648:	0018      	movs	r0, r3
 800664a:	f007 fa6f 	bl	800db2c <HAL_ADC_ConfigChannel>
 800664e:	1e03      	subs	r3, r0, #0
 8006650:	d001      	beq.n	8006656 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006652:	f001 f845 	bl	80076e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006656:	003b      	movs	r3, r7
 8006658:	4a0a      	ldr	r2, [pc, #40]	@ (8006684 <MX_ADC_Init+0xe4>)
 800665a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800665c:	003a      	movs	r2, r7
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <MX_ADC_Init+0xd8>)
 8006660:	0011      	movs	r1, r2
 8006662:	0018      	movs	r0, r3
 8006664:	f007 fa62 	bl	800db2c <HAL_ADC_ConfigChannel>
 8006668:	1e03      	subs	r3, r0, #0
 800666a:	d001      	beq.n	8006670 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800666c:	f001 f838 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006670:	46c0      	nop			@ (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20000ce0 	.word	0x20000ce0
 800667c:	40012400 	.word	0x40012400
 8006680:	38004000 	.word	0x38004000
 8006684:	3c008000 	.word	0x3c008000

08006688 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	240c      	movs	r4, #12
 8006692:	193b      	adds	r3, r7, r4
 8006694:	0018      	movs	r0, r3
 8006696:	2314      	movs	r3, #20
 8006698:	001a      	movs	r2, r3
 800669a:	2100      	movs	r1, #0
 800669c:	f018 f81e 	bl	801e6dc <memset>
  if(adcHandle->Instance==ADC1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a14      	ldr	r2, [pc, #80]	@ (80066f8 <HAL_ADC_MspInit+0x70>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d121      	bne.n	80066ee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80066aa:	4b14      	ldr	r3, [pc, #80]	@ (80066fc <HAL_ADC_MspInit+0x74>)
 80066ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066ae:	4b13      	ldr	r3, [pc, #76]	@ (80066fc <HAL_ADC_MspInit+0x74>)
 80066b0:	2180      	movs	r1, #128	@ 0x80
 80066b2:	0089      	lsls	r1, r1, #2
 80066b4:	430a      	orrs	r2, r1
 80066b6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066b8:	4b10      	ldr	r3, [pc, #64]	@ (80066fc <HAL_ADC_MspInit+0x74>)
 80066ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066bc:	4b0f      	ldr	r3, [pc, #60]	@ (80066fc <HAL_ADC_MspInit+0x74>)
 80066be:	2104      	movs	r1, #4
 80066c0:	430a      	orrs	r2, r1
 80066c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80066c4:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <HAL_ADC_MspInit+0x74>)
 80066c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c8:	2204      	movs	r2, #4
 80066ca:	4013      	ands	r3, r2
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80066d0:	193b      	adds	r3, r7, r4
 80066d2:	2230      	movs	r2, #48	@ 0x30
 80066d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80066d6:	193b      	adds	r3, r7, r4
 80066d8:	2203      	movs	r2, #3
 80066da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066dc:	193b      	adds	r3, r7, r4
 80066de:	2200      	movs	r2, #0
 80066e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066e2:	193b      	adds	r3, r7, r4
 80066e4:	4a06      	ldr	r2, [pc, #24]	@ (8006700 <HAL_ADC_MspInit+0x78>)
 80066e6:	0019      	movs	r1, r3
 80066e8:	0010      	movs	r0, r2
 80066ea:	f008 f827 	bl	800e73c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	46bd      	mov	sp, r7
 80066f2:	b009      	add	sp, #36	@ 0x24
 80066f4:	bd90      	pop	{r4, r7, pc}
 80066f6:	46c0      	nop			@ (mov r8, r8)
 80066f8:	40012400 	.word	0x40012400
 80066fc:	40021000 	.word	0x40021000
 8006700:	50000800 	.word	0x50000800

08006704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800670a:	4b10      	ldr	r3, [pc, #64]	@ (800674c <MX_DMA_Init+0x48>)
 800670c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800670e:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <MX_DMA_Init+0x48>)
 8006710:	2101      	movs	r1, #1
 8006712:	430a      	orrs	r2, r1
 8006714:	631a      	str	r2, [r3, #48]	@ 0x30
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <MX_DMA_Init+0x48>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	2201      	movs	r2, #1
 800671c:	4013      	ands	r3, r2
 800671e:	607b      	str	r3, [r7, #4]
 8006720:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006722:	2200      	movs	r2, #0
 8006724:	2100      	movs	r1, #0
 8006726:	200a      	movs	r0, #10
 8006728:	f007 fbba 	bl	800dea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800672c:	200a      	movs	r0, #10
 800672e:	f007 fbcc 	bl	800deca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006732:	2200      	movs	r2, #0
 8006734:	2103      	movs	r1, #3
 8006736:	200b      	movs	r0, #11
 8006738:	f007 fbb2 	bl	800dea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800673c:	200b      	movs	r0, #11
 800673e:	f007 fbc4 	bl	800deca <HAL_NVIC_EnableIRQ>

}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	46bd      	mov	sp, r7
 8006746:	b002      	add	sp, #8
 8006748:	bd80      	pop	{r7, pc}
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	40021000 	.word	0x40021000

08006750 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006760:	d901      	bls.n	8006766 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006762:	237f      	movs	r3, #127	@ 0x7f
 8006764:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006766:	2017      	movs	r0, #23
 8006768:	183b      	adds	r3, r7, r0
 800676a:	490d      	ldr	r1, [pc, #52]	@ (80067a0 <accessLUT10log10+0x50>)
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	188a      	adds	r2, r1, r2
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006774:	0001      	movs	r1, r0
 8006776:	187b      	adds	r3, r7, r1
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2206      	movs	r2, #6
 800677c:	4113      	asrs	r3, r2
 800677e:	001a      	movs	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006784:	187b      	adds	r3, r7, r1
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2106      	movs	r1, #6
 800678e:	408b      	lsls	r3, r1
 8006790:	1ad2      	subs	r2, r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
}
 8006796:	46c0      	nop			@ (mov r8, r8)
 8006798:	46bd      	mov	sp, r7
 800679a:	b006      	add	sp, #24
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	08023144 	.word	0x08023144

080067a4 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80067a4:	b5b0      	push	{r4, r5, r7, lr}
 80067a6:	b090      	sub	sp, #64	@ 0x40
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6138      	str	r0, [r7, #16]
 80067ac:	6179      	str	r1, [r7, #20]
 80067ae:	60fa      	str	r2, [r7, #12]
 80067b0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80067b2:	2308      	movs	r3, #8
 80067b4:	001a      	movs	r2, r3
 80067b6:	3a20      	subs	r2, #32
 80067b8:	2a00      	cmp	r2, #0
 80067ba:	db03      	blt.n	80067c4 <efficient10log10+0x20>
 80067bc:	2101      	movs	r1, #1
 80067be:	4091      	lsls	r1, r2
 80067c0:	000d      	movs	r5, r1
 80067c2:	e008      	b.n	80067d6 <efficient10log10+0x32>
 80067c4:	2220      	movs	r2, #32
 80067c6:	1ad2      	subs	r2, r2, r3
 80067c8:	2101      	movs	r1, #1
 80067ca:	40d1      	lsrs	r1, r2
 80067cc:	000a      	movs	r2, r1
 80067ce:	2100      	movs	r1, #0
 80067d0:	4099      	lsls	r1, r3
 80067d2:	000d      	movs	r5, r1
 80067d4:	4315      	orrs	r5, r2
 80067d6:	2201      	movs	r2, #1
 80067d8:	409a      	lsls	r2, r3
 80067da:	0014      	movs	r4, r2
 80067dc:	2201      	movs	r2, #1
 80067de:	4252      	negs	r2, r2
 80067e0:	17d3      	asrs	r3, r2, #31
 80067e2:	1912      	adds	r2, r2, r4
 80067e4:	416b      	adcs	r3, r5
 80067e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80067ea:	2336      	movs	r3, #54	@ 0x36
 80067ec:	2208      	movs	r2, #8
 80067ee:	189b      	adds	r3, r3, r2
 80067f0:	19db      	adds	r3, r3, r7
 80067f2:	2200      	movs	r2, #0
 80067f4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80067f6:	e017      	b.n	8006828 <efficient10log10+0x84>
    {
        P = P >> 1;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	07db      	lsls	r3, r3, #31
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	0852      	lsrs	r2, r2, #1
 8006800:	603a      	str	r2, [r7, #0]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	431a      	orrs	r2, r3
 8006806:	603a      	str	r2, [r7, #0]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	687c      	ldr	r4, [r7, #4]
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	617c      	str	r4, [r7, #20]
        bShift++;
 8006816:	2136      	movs	r1, #54	@ 0x36
 8006818:	2008      	movs	r0, #8
 800681a:	180b      	adds	r3, r1, r0
 800681c:	19db      	adds	r3, r3, r7
 800681e:	881a      	ldrh	r2, [r3, #0]
 8006820:	180b      	adds	r3, r1, r0
 8006822:	19db      	adds	r3, r3, r7
 8006824:	3201      	adds	r2, #1
 8006826:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800682c:	429a      	cmp	r2, r3
 800682e:	d8e3      	bhi.n	80067f8 <efficient10log10+0x54>
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006834:	429a      	cmp	r2, r3
 8006836:	d103      	bne.n	8006840 <efficient10log10+0x9c>
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	429a      	cmp	r2, r3
 800683e:	d8db      	bhi.n	80067f8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	2308      	movs	r3, #8
 8006844:	3b01      	subs	r3, #1
 8006846:	2101      	movs	r1, #1
 8006848:	4099      	lsls	r1, r3
 800684a:	000b      	movs	r3, r1
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8006858:	231c      	movs	r3, #28
 800685a:	2408      	movs	r4, #8
 800685c:	191b      	adds	r3, r3, r4
 800685e:	19da      	adds	r2, r3, r7
 8006860:	2320      	movs	r3, #32
 8006862:	191b      	adds	r3, r3, r4
 8006864:	19d9      	adds	r1, r3, r7
 8006866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006868:	0018      	movs	r0, r3
 800686a:	f7ff ff71 	bl	8006750 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800686e:	2215      	movs	r2, #21
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8006874:	2036      	movs	r0, #54	@ 0x36
 8006876:	1902      	adds	r2, r0, r4
 8006878:	19d2      	adds	r2, r2, r7
 800687a:	8812      	ldrh	r2, [r2, #0]
 800687c:	2103      	movs	r1, #3
 800687e:	434a      	muls	r2, r1
 8006880:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006882:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006884:	0021      	movs	r1, r4
 8006886:	1843      	adds	r3, r0, r1
 8006888:	19db      	adds	r3, r3, r7
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	2201      	movs	r2, #1
 800688e:	4353      	muls	r3, r2
 8006890:	2203      	movs	r2, #3
 8006892:	4113      	asrs	r3, r2
 8006894:	001a      	movs	r2, r3
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800689a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800689c:	2314      	movs	r3, #20
 800689e:	185b      	adds	r3, r3, r1
 80068a0:	19da      	adds	r2, r3, r7
 80068a2:	2318      	movs	r3, #24
 80068a4:	185b      	adds	r3, r3, r1
 80068a6:	19db      	adds	r3, r3, r7
 80068a8:	0011      	movs	r1, r2
 80068aa:	0018      	movs	r0, r3
 80068ac:	f000 f80a 	bl	80068c4 <correctIntFracNumber>
    integerPart[0] = intPart;
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	601a      	str	r2, [r3, #0]
}
 80068bc:	46c0      	nop			@ (mov r8, r8)
 80068be:	46bd      	mov	sp, r7
 80068c0:	b010      	add	sp, #64	@ 0x40
 80068c2:	bdb0      	pop	{r4, r5, r7, pc}

080068c4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80068ce:	e00a      	b.n	80068e6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3b0a      	subs	r3, #10
 80068e0:	001a      	movs	r2, r3
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	dcf0      	bgt.n	80068d0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80068ee:	e00a      	b.n	8006906 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	1e5a      	subs	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330a      	adds	r3, #10
 8006900:	001a      	movs	r2, r3
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3309      	adds	r3, #9
 800690c:	dbf0      	blt.n	80068f0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	da0f      	bge.n	8006936 <correctIntFracNumber+0x72>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	dd0b      	ble.n	8006936 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b0a      	subs	r3, #10
 800692e:	001a      	movs	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006934:	e012      	b.n	800695c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	dd0e      	ble.n	800695c <correctIntFracNumber+0x98>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	da0a      	bge.n	800695c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	1e5a      	subs	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330a      	adds	r3, #10
 8006956:	001a      	movs	r2, r3
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]
}
 800695c:	46c0      	nop			@ (mov r8, r8)
 800695e:	46bd      	mov	sp, r7
 8006960:	b002      	add	sp, #8
 8006962:	bd80      	pop	{r7, pc}

08006964 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8006972:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <Gadget_Init+0x40>)
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	f001 fa9d 	bl	8007eb4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	0018      	movs	r0, r3
 8006982:	f000 ff11 	bl	80077a8 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	0018      	movs	r0, r3
 800698a:	f7fd f81f 	bl	80039cc <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800698e:	4a06      	ldr	r2, [pc, #24]	@ (80069a8 <Gadget_Init+0x44>)
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <Gadget_Init+0x48>)
 8006992:	0019      	movs	r1, r3
 8006994:	2003      	movs	r0, #3
 8006996:	f006 fa71 	bl	800ce7c <CreateLine>
}
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	46bd      	mov	sp, r7
 800699e:	b004      	add	sp, #16
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	46c0      	nop			@ (mov r8, r8)
 80069a4:	20000080 	.word	0x20000080
 80069a8:	080220e0 	.word	0x080220e0
 80069ac:	080220f4 	.word	0x080220f4

080069b0 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 80069b0:	b580      	push	{r7, lr}
 80069b2:	af00      	add	r7, sp, #0
  Meas_Test();
 80069b4:	f001 f830 	bl	8007a18 <Meas_Test>
}
 80069b8:	46c0      	nop			@ (mov r8, r8)
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <UpkeepGadget>:

bool UpkeepGadget() {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 80069c6:	f001 f9e5 	bl	8007d94 <Meas_Upkeep>
 80069ca:	0003      	movs	r3, r0
 80069cc:	001a      	movs	r2, r3
 80069ce:	4b0f      	ldr	r3, [pc, #60]	@ (8006a0c <UpkeepGadget+0x4c>)
 80069d0:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 80069d2:	f001 f8c5 	bl	8007b60 <Mic_Upkeep>
 80069d6:	0003      	movs	r3, r0
 80069d8:	001a      	movs	r2, r3
 80069da:	4b0d      	ldr	r3, [pc, #52]	@ (8006a10 <UpkeepGadget+0x50>)
 80069dc:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 80069de:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <UpkeepGadget+0x4c>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d103      	bne.n	80069ee <UpkeepGadget+0x2e>
 80069e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <UpkeepGadget+0x50>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d001      	beq.n	80069f2 <UpkeepGadget+0x32>
 80069ee:	2201      	movs	r2, #1
 80069f0:	e000      	b.n	80069f4 <UpkeepGadget+0x34>
 80069f2:	2200      	movs	r2, #0
 80069f4:	1dfb      	adds	r3, r7, #7
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	2101      	movs	r1, #1
 80069fc:	400a      	ands	r2, r1
 80069fe:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006a00:	1dfb      	adds	r3, r7, #7
 8006a02:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006a04:	0018      	movs	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b002      	add	sp, #8
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20000d3c 	.word	0x20000d3c
 8006a10:	20000d3d 	.word	0x20000d3d

08006a14 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0011      	movs	r1, r2
 8006a24:	0018      	movs	r0, r3
 8006a26:	f003 fe11 	bl	800a64c <SGP_Init>
}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b002      	add	sp, #8
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006a32:	b580      	push	{r7, lr}
 8006a34:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006a36:	f003 fe23 	bl	800a680 <SGP_StartMeasurement>
}
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f003 fe88 	bl	800a760 <SGP_GetMeasurementValues>
 8006a50:	0003      	movs	r3, r0
}
 8006a52:	0018      	movs	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	b002      	add	sp, #8
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8006a5e:	f004 f895 	bl	800ab8c <SGP_DeviceConnected>
 8006a62:	0003      	movs	r3, r0
}
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006a6c:	b590      	push	{r4, r7, lr}
 8006a6e:	b08b      	sub	sp, #44	@ 0x2c
 8006a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a72:	2414      	movs	r4, #20
 8006a74:	193b      	adds	r3, r7, r4
 8006a76:	0018      	movs	r0, r3
 8006a78:	2314      	movs	r3, #20
 8006a7a:	001a      	movs	r2, r3
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	f017 fe2d 	bl	801e6dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a82:	4b7c      	ldr	r3, [pc, #496]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a86:	4b7b      	ldr	r3, [pc, #492]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006a88:	2104      	movs	r1, #4
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006a8e:	4b79      	ldr	r3, [pc, #484]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	2204      	movs	r2, #4
 8006a94:	4013      	ands	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a9a:	4b76      	ldr	r3, [pc, #472]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a9e:	4b75      	ldr	r3, [pc, #468]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006aa0:	2180      	movs	r1, #128	@ 0x80
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006aa6:	4b73      	ldr	r3, [pc, #460]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	2280      	movs	r2, #128	@ 0x80
 8006aac:	4013      	ands	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ab2:	4b70      	ldr	r3, [pc, #448]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006ab8:	2101      	movs	r1, #1
 8006aba:	430a      	orrs	r2, r1
 8006abc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006abe:	4b6d      	ldr	r3, [pc, #436]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aca:	4b6a      	ldr	r3, [pc, #424]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ace:	4b69      	ldr	r3, [pc, #420]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006ad0:	2102      	movs	r1, #2
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ad6:	4b67      	ldr	r3, [pc, #412]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	2202      	movs	r2, #2
 8006adc:	4013      	ands	r3, r2
 8006ade:	607b      	str	r3, [r7, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ae2:	4b64      	ldr	r3, [pc, #400]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae6:	4b63      	ldr	r3, [pc, #396]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006ae8:	2108      	movs	r1, #8
 8006aea:	430a      	orrs	r2, r1
 8006aec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006aee:	4b61      	ldr	r3, [pc, #388]	@ (8006c74 <MX_GPIO_Init+0x208>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	2208      	movs	r2, #8
 8006af4:	4013      	ands	r3, r2
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006afa:	4b5f      	ldr	r3, [pc, #380]	@ (8006c78 <MX_GPIO_Init+0x20c>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	2101      	movs	r1, #1
 8006b00:	0018      	movs	r0, r3
 8006b02:	f007 ffb6 	bl	800ea72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006b06:	4b5c      	ldr	r3, [pc, #368]	@ (8006c78 <MX_GPIO_Init+0x20c>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f007 ffb0 	bl	800ea72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006b12:	495a      	ldr	r1, [pc, #360]	@ (8006c7c <MX_GPIO_Init+0x210>)
 8006b14:	4b5a      	ldr	r3, [pc, #360]	@ (8006c80 <MX_GPIO_Init+0x214>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f007 ffaa 	bl	800ea72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006b1e:	2380      	movs	r3, #128	@ 0x80
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	4858      	ldr	r0, [pc, #352]	@ (8006c84 <MX_GPIO_Init+0x218>)
 8006b24:	2201      	movs	r2, #1
 8006b26:	0019      	movs	r1, r3
 8006b28:	f007 ffa3 	bl	800ea72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006b2c:	2380      	movs	r3, #128	@ 0x80
 8006b2e:	015b      	lsls	r3, r3, #5
 8006b30:	4854      	ldr	r0, [pc, #336]	@ (8006c84 <MX_GPIO_Init+0x218>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	0019      	movs	r1, r3
 8006b36:	f007 ff9c 	bl	800ea72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8006b3a:	193b      	adds	r3, r7, r4
 8006b3c:	4a52      	ldr	r2, [pc, #328]	@ (8006c88 <MX_GPIO_Init+0x21c>)
 8006b3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b40:	193b      	adds	r3, r7, r4
 8006b42:	2203      	movs	r2, #3
 8006b44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b46:	193b      	adds	r3, r7, r4
 8006b48:	2200      	movs	r2, #0
 8006b4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b4c:	193b      	adds	r3, r7, r4
 8006b4e:	4a4d      	ldr	r2, [pc, #308]	@ (8006c84 <MX_GPIO_Init+0x218>)
 8006b50:	0019      	movs	r1, r3
 8006b52:	0010      	movs	r0, r2
 8006b54:	f007 fdf2 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006b58:	193b      	adds	r3, r7, r4
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b5e:	193b      	adds	r3, r7, r4
 8006b60:	2201      	movs	r2, #1
 8006b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b64:	193b      	adds	r3, r7, r4
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b6a:	193b      	adds	r3, r7, r4
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006b70:	193b      	adds	r3, r7, r4
 8006b72:	4a41      	ldr	r2, [pc, #260]	@ (8006c78 <MX_GPIO_Init+0x20c>)
 8006b74:	0019      	movs	r1, r3
 8006b76:	0010      	movs	r0, r2
 8006b78:	f007 fde0 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006b7c:	193b      	adds	r3, r7, r4
 8006b7e:	2270      	movs	r2, #112	@ 0x70
 8006b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b82:	193b      	adds	r3, r7, r4
 8006b84:	2203      	movs	r2, #3
 8006b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b88:	193b      	adds	r3, r7, r4
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b8e:	193a      	adds	r2, r7, r4
 8006b90:	23a0      	movs	r3, #160	@ 0xa0
 8006b92:	05db      	lsls	r3, r3, #23
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f007 fdd0 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8006b9c:	193b      	adds	r3, r7, r4
 8006b9e:	4a3b      	ldr	r2, [pc, #236]	@ (8006c8c <MX_GPIO_Init+0x220>)
 8006ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ba2:	193b      	adds	r3, r7, r4
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba8:	193b      	adds	r3, r7, r4
 8006baa:	2200      	movs	r2, #0
 8006bac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bae:	193a      	adds	r2, r7, r4
 8006bb0:	23a0      	movs	r3, #160	@ 0xa0
 8006bb2:	05db      	lsls	r3, r3, #23
 8006bb4:	0011      	movs	r1, r2
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f007 fdc0 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8006bbc:	193b      	adds	r3, r7, r4
 8006bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8006c7c <MX_GPIO_Init+0x210>)
 8006bc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bc2:	193b      	adds	r3, r7, r4
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc8:	193b      	adds	r3, r7, r4
 8006bca:	2200      	movs	r2, #0
 8006bcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bce:	193b      	adds	r3, r7, r4
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bd4:	193b      	adds	r3, r7, r4
 8006bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8006c80 <MX_GPIO_Init+0x214>)
 8006bd8:	0019      	movs	r1, r3
 8006bda:	0010      	movs	r0, r2
 8006bdc:	f007 fdae 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8006be0:	193b      	adds	r3, r7, r4
 8006be2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c90 <MX_GPIO_Init+0x224>)
 8006be4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006be6:	193b      	adds	r3, r7, r4
 8006be8:	2203      	movs	r2, #3
 8006bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bec:	193b      	adds	r3, r7, r4
 8006bee:	2200      	movs	r2, #0
 8006bf0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bf2:	193b      	adds	r3, r7, r4
 8006bf4:	4a22      	ldr	r2, [pc, #136]	@ (8006c80 <MX_GPIO_Init+0x214>)
 8006bf6:	0019      	movs	r1, r3
 8006bf8:	0010      	movs	r0, r2
 8006bfa:	f007 fd9f 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006bfe:	0021      	movs	r1, r4
 8006c00:	187b      	adds	r3, r7, r1
 8006c02:	2280      	movs	r2, #128	@ 0x80
 8006c04:	0092      	lsls	r2, r2, #2
 8006c06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c08:	000c      	movs	r4, r1
 8006c0a:	193b      	adds	r3, r7, r4
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c10:	193b      	adds	r3, r7, r4
 8006c12:	2200      	movs	r2, #0
 8006c14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006c16:	193b      	adds	r3, r7, r4
 8006c18:	4a1a      	ldr	r2, [pc, #104]	@ (8006c84 <MX_GPIO_Init+0x218>)
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	0010      	movs	r0, r2
 8006c1e:	f007 fd8d 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006c22:	0021      	movs	r1, r4
 8006c24:	187b      	adds	r3, r7, r1
 8006c26:	22c0      	movs	r2, #192	@ 0xc0
 8006c28:	0152      	lsls	r2, r2, #5
 8006c2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c2c:	000c      	movs	r4, r1
 8006c2e:	193b      	adds	r3, r7, r4
 8006c30:	2201      	movs	r2, #1
 8006c32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c34:	193b      	adds	r3, r7, r4
 8006c36:	2200      	movs	r2, #0
 8006c38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c3a:	193b      	adds	r3, r7, r4
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c40:	193b      	adds	r3, r7, r4
 8006c42:	4a10      	ldr	r2, [pc, #64]	@ (8006c84 <MX_GPIO_Init+0x218>)
 8006c44:	0019      	movs	r1, r3
 8006c46:	0010      	movs	r0, r2
 8006c48:	f007 fd78 	bl	800e73c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006c4c:	0021      	movs	r1, r4
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	2204      	movs	r2, #4
 8006c52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c54:	187b      	adds	r3, r7, r1
 8006c56:	2200      	movs	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c5a:	187b      	adds	r3, r7, r1
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006c60:	187b      	adds	r3, r7, r1
 8006c62:	4a0c      	ldr	r2, [pc, #48]	@ (8006c94 <MX_GPIO_Init+0x228>)
 8006c64:	0019      	movs	r1, r3
 8006c66:	0010      	movs	r0, r2
 8006c68:	f007 fd68 	bl	800e73c <HAL_GPIO_Init>

}
 8006c6c:	46c0      	nop			@ (mov r8, r8)
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	b00b      	add	sp, #44	@ 0x2c
 8006c72:	bd90      	pop	{r4, r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	50001c00 	.word	0x50001c00
 8006c7c:	00000301 	.word	0x00000301
 8006c80:	50000400 	.word	0x50000400
 8006c84:	50000800 	.word	0x50000800
 8006c88:	0000200c 	.word	0x0000200c
 8006c8c:	00008180 	.word	0x00008180
 8006c90:	0000403e 	.word	0x0000403e
 8006c94:	50000c00 	.word	0x50000c00

08006c98 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f00e f92c 	bl	8014f04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2108      	movs	r1, #8
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f00e f927 	bl	8014f04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	210c      	movs	r1, #12
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f00e f922 	bl	8014f04 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006cc0:	2380      	movs	r3, #128	@ 0x80
 8006cc2:	05db      	lsls	r3, r3, #23
 8006cc4:	22fa      	movs	r2, #250	@ 0xfa
 8006cc6:	0112      	lsls	r2, r2, #4
 8006cc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006cca:	2380      	movs	r3, #128	@ 0x80
 8006ccc:	05db      	lsls	r3, r3, #23
 8006cce:	22fa      	movs	r2, #250	@ 0xfa
 8006cd0:	0112      	lsls	r2, r2, #4
 8006cd2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006cd4:	2380      	movs	r3, #128	@ 0x80
 8006cd6:	05db      	lsls	r3, r3, #23
 8006cd8:	22fa      	movs	r2, #250	@ 0xfa
 8006cda:	0112      	lsls	r2, r2, #4
 8006cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006cde:	2380      	movs	r3, #128	@ 0x80
 8006ce0:	05db      	lsls	r3, r3, #23
 8006ce2:	22fa      	movs	r2, #250	@ 0xfa
 8006ce4:	0112      	lsls	r2, r2, #4
 8006ce6:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2100      	movs	r1, #0
 8006cec:	0018      	movs	r0, r3
 8006cee:	f00e f909 	bl	8014f04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2104      	movs	r1, #4
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f00e f904 	bl	8014f04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2108      	movs	r1, #8
 8006d00:	0018      	movs	r0, r3
 8006d02:	f00e f8ff 	bl	8014f04 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <GPIO_InitPWMLEDs+0x98>)
 8006d08:	22fa      	movs	r2, #250	@ 0xfa
 8006d0a:	0112      	lsls	r2, r2, #4
 8006d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <GPIO_InitPWMLEDs+0x98>)
 8006d10:	22fa      	movs	r2, #250	@ 0xfa
 8006d12:	0112      	lsls	r2, r2, #4
 8006d14:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006d16:	4b06      	ldr	r3, [pc, #24]	@ (8006d30 <GPIO_InitPWMLEDs+0x98>)
 8006d18:	22fa      	movs	r2, #250	@ 0xfa
 8006d1a:	0112      	lsls	r2, r2, #4
 8006d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006d1e:	4b04      	ldr	r3, [pc, #16]	@ (8006d30 <GPIO_InitPWMLEDs+0x98>)
 8006d20:	22fa      	movs	r2, #250	@ 0xfa
 8006d22:	0112      	lsls	r2, r2, #4
 8006d24:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006d26:	46c0      	nop			@ (mov r8, r8)
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b002      	add	sp, #8
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	40000400 	.word	0x40000400

08006d34 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	0011      	movs	r1, r2
 8006d44:	0018      	movs	r0, r3
 8006d46:	f006 f9f9 	bl	800d13c <HIDS_Init>
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b002      	add	sp, #8
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006d52:	b580      	push	{r7, lr}
 8006d54:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006d56:	f006 fa13 	bl	800d180 <HIDS_StartMeasurement>
}
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	0011      	movs	r1, r2
 8006d70:	0018      	movs	r0, r3
 8006d72:	f006 faeb 	bl	800d34c <HIDS_GetMeasurementValues>
 8006d76:	0003      	movs	r3, r0
}
 8006d78:	0018      	movs	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006d84:	f006 fa86 	bl	800d294 <HIDS_DeviceConnected>
 8006d88:	0003      	movs	r3, r0
}
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006d94:	4b1b      	ldr	r3, [pc, #108]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006d96:	4a1c      	ldr	r2, [pc, #112]	@ (8006e08 <MX_I2C1_Init+0x78>)
 8006d98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e0c <MX_I2C1_Init+0x7c>)
 8006d9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006da0:	4b18      	ldr	r3, [pc, #96]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006da6:	4b17      	ldr	r3, [pc, #92]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006dac:	4b15      	ldr	r3, [pc, #84]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006db2:	4b14      	ldr	r3, [pc, #80]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006db8:	4b12      	ldr	r3, [pc, #72]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006dbe:	4b11      	ldr	r3, [pc, #68]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006dca:	4b0e      	ldr	r3, [pc, #56]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f007 fe6d 	bl	800eaac <HAL_I2C_Init>
 8006dd2:	1e03      	subs	r3, r0, #0
 8006dd4:	d001      	beq.n	8006dda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006dd6:	f000 fc83 	bl	80076e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006dda:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006ddc:	2100      	movs	r1, #0
 8006dde:	0018      	movs	r0, r3
 8006de0:	f00a fa3e 	bl	8011260 <HAL_I2CEx_ConfigAnalogFilter>
 8006de4:	1e03      	subs	r3, r0, #0
 8006de6:	d001      	beq.n	8006dec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006de8:	f000 fc7a 	bl	80076e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006dec:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <MX_I2C1_Init+0x74>)
 8006dee:	2100      	movs	r1, #0
 8006df0:	0018      	movs	r0, r3
 8006df2:	f00a fa81 	bl	80112f8 <HAL_I2CEx_ConfigDigitalFilter>
 8006df6:	1e03      	subs	r3, r0, #0
 8006df8:	d001      	beq.n	8006dfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006dfa:	f000 fc71 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000d40 	.word	0x20000d40
 8006e08:	40005400 	.word	0x40005400
 8006e0c:	00503d58 	.word	0x00503d58

08006e10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e14:	4b1b      	ldr	r3, [pc, #108]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e16:	4a1c      	ldr	r2, [pc, #112]	@ (8006e88 <MX_I2C2_Init+0x78>)
 8006e18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e8c <MX_I2C2_Init+0x7c>)
 8006e1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006e20:	4b18      	ldr	r3, [pc, #96]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e26:	4b17      	ldr	r3, [pc, #92]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e2c:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006e32:	4b14      	ldr	r3, [pc, #80]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e38:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e3e:	4b11      	ldr	r3, [pc, #68]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e44:	4b0f      	ldr	r3, [pc, #60]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f007 fe2d 	bl	800eaac <HAL_I2C_Init>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d001      	beq.n	8006e5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006e56:	f000 fc43 	bl	80076e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f00a f9fe 	bl	8011260 <HAL_I2CEx_ConfigAnalogFilter>
 8006e64:	1e03      	subs	r3, r0, #0
 8006e66:	d001      	beq.n	8006e6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006e68:	f000 fc3a 	bl	80076e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006e6c:	4b05      	ldr	r3, [pc, #20]	@ (8006e84 <MX_I2C2_Init+0x74>)
 8006e6e:	2100      	movs	r1, #0
 8006e70:	0018      	movs	r0, r3
 8006e72:	f00a fa41 	bl	80112f8 <HAL_I2CEx_ConfigDigitalFilter>
 8006e76:	1e03      	subs	r3, r0, #0
 8006e78:	d001      	beq.n	8006e7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006e7a:	f000 fc31 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000d94 	.word	0x20000d94
 8006e88:	40005800 	.word	0x40005800
 8006e8c:	00503d58 	.word	0x00503d58

08006e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006e90:	b590      	push	{r4, r7, lr}
 8006e92:	b08b      	sub	sp, #44	@ 0x2c
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e98:	2414      	movs	r4, #20
 8006e9a:	193b      	adds	r3, r7, r4
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	2314      	movs	r3, #20
 8006ea0:	001a      	movs	r2, r3
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	f017 fc1a 	bl	801e6dc <memset>
  if(i2cHandle->Instance==I2C1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a5d      	ldr	r2, [pc, #372]	@ (8007024 <HAL_I2C_MspInit+0x194>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d000      	beq.n	8006eb4 <HAL_I2C_MspInit+0x24>
 8006eb2:	e083      	b.n	8006fbc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eb4:	4b5c      	ldr	r3, [pc, #368]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006eba:	2102      	movs	r1, #2
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ec0:	4b59      	ldr	r3, [pc, #356]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ecc:	0021      	movs	r1, r4
 8006ece:	187b      	adds	r3, r7, r1
 8006ed0:	22c0      	movs	r2, #192	@ 0xc0
 8006ed2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ed4:	187b      	adds	r3, r7, r1
 8006ed6:	2212      	movs	r2, #18
 8006ed8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eda:	187b      	adds	r3, r7, r1
 8006edc:	2200      	movs	r2, #0
 8006ede:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ee0:	187b      	adds	r3, r7, r1
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006ee6:	187b      	adds	r3, r7, r1
 8006ee8:	2201      	movs	r2, #1
 8006eea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eec:	187b      	adds	r3, r7, r1
 8006eee:	4a4f      	ldr	r2, [pc, #316]	@ (800702c <HAL_I2C_MspInit+0x19c>)
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	0010      	movs	r0, r2
 8006ef4:	f007 fc22 	bl	800e73c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006efc:	4b4a      	ldr	r3, [pc, #296]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006efe:	2180      	movs	r1, #128	@ 0x80
 8006f00:	0389      	lsls	r1, r1, #14
 8006f02:	430a      	orrs	r2, r1
 8006f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006f06:	4b4a      	ldr	r3, [pc, #296]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f08:	4a4a      	ldr	r2, [pc, #296]	@ (8007034 <HAL_I2C_MspInit+0x1a4>)
 8006f0a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006f0c:	4b48      	ldr	r3, [pc, #288]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f0e:	2206      	movs	r2, #6
 8006f10:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f12:	4b47      	ldr	r3, [pc, #284]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f18:	4b45      	ldr	r3, [pc, #276]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f1e:	4b44      	ldr	r3, [pc, #272]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f20:	2280      	movs	r2, #128	@ 0x80
 8006f22:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f24:	4b42      	ldr	r3, [pc, #264]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f2a:	4b41      	ldr	r3, [pc, #260]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006f30:	4b3f      	ldr	r3, [pc, #252]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f36:	4b3e      	ldr	r3, [pc, #248]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f3e:	0018      	movs	r0, r3
 8006f40:	f006 ffe0 	bl	800df04 <HAL_DMA_Init>
 8006f44:	1e03      	subs	r3, r0, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006f48:	f000 fbca 	bl	80076e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a38      	ldr	r2, [pc, #224]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006f52:	4b37      	ldr	r3, [pc, #220]	@ (8007030 <HAL_I2C_MspInit+0x1a0>)
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006f58:	4b37      	ldr	r3, [pc, #220]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f5a:	4a38      	ldr	r2, [pc, #224]	@ (800703c <HAL_I2C_MspInit+0x1ac>)
 8006f5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006f5e:	4b36      	ldr	r3, [pc, #216]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f60:	2206      	movs	r2, #6
 8006f62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f64:	4b34      	ldr	r3, [pc, #208]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f66:	2210      	movs	r2, #16
 8006f68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f6a:	4b33      	ldr	r3, [pc, #204]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f70:	4b31      	ldr	r3, [pc, #196]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f72:	2280      	movs	r2, #128	@ 0x80
 8006f74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f76:	4b30      	ldr	r3, [pc, #192]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006f82:	4b2d      	ldr	r3, [pc, #180]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006f88:	4b2b      	ldr	r3, [pc, #172]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006f90:	0018      	movs	r0, r3
 8006f92:	f006 ffb7 	bl	800df04 <HAL_DMA_Init>
 8006f96:	1e03      	subs	r3, r0, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006f9a:	f000 fba1 	bl	80076e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a25      	ldr	r2, [pc, #148]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006fa2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006fa4:	4b24      	ldr	r3, [pc, #144]	@ (8007038 <HAL_I2C_MspInit+0x1a8>)
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006faa:	2200      	movs	r2, #0
 8006fac:	2100      	movs	r1, #0
 8006fae:	2017      	movs	r0, #23
 8006fb0:	f006 ff76 	bl	800dea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006fb4:	2017      	movs	r0, #23
 8006fb6:	f006 ff88 	bl	800deca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006fba:	e02e      	b.n	800701a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8007040 <HAL_I2C_MspInit+0x1b0>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d129      	bne.n	800701a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fc6:	4b18      	ldr	r3, [pc, #96]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fca:	4b17      	ldr	r3, [pc, #92]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006fcc:	2102      	movs	r1, #2
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006fd2:	4b15      	ldr	r3, [pc, #84]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8006fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	4013      	ands	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006fde:	2114      	movs	r1, #20
 8006fe0:	187b      	adds	r3, r7, r1
 8006fe2:	22c0      	movs	r2, #192	@ 0xc0
 8006fe4:	0112      	lsls	r2, r2, #4
 8006fe6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fe8:	187b      	adds	r3, r7, r1
 8006fea:	2212      	movs	r2, #18
 8006fec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006ffa:	187b      	adds	r3, r7, r1
 8006ffc:	2206      	movs	r2, #6
 8006ffe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007000:	187b      	adds	r3, r7, r1
 8007002:	4a0a      	ldr	r2, [pc, #40]	@ (800702c <HAL_I2C_MspInit+0x19c>)
 8007004:	0019      	movs	r1, r3
 8007006:	0010      	movs	r0, r2
 8007008:	f007 fb98 	bl	800e73c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800700c:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 800700e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007010:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <HAL_I2C_MspInit+0x198>)
 8007012:	2180      	movs	r1, #128	@ 0x80
 8007014:	03c9      	lsls	r1, r1, #15
 8007016:	430a      	orrs	r2, r1
 8007018:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	46bd      	mov	sp, r7
 800701e:	b00b      	add	sp, #44	@ 0x2c
 8007020:	bd90      	pop	{r4, r7, pc}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	40005400 	.word	0x40005400
 8007028:	40021000 	.word	0x40021000
 800702c:	50000400 	.word	0x50000400
 8007030:	20000de8 	.word	0x20000de8
 8007034:	40020030 	.word	0x40020030
 8007038:	20000e30 	.word	0x20000e30
 800703c:	4002001c 	.word	0x4002001c
 8007040:	40005800 	.word	0x40005800

08007044 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007048:	4b10      	ldr	r3, [pc, #64]	@ (800708c <MX_I2S2_Init+0x48>)
 800704a:	4a11      	ldr	r2, [pc, #68]	@ (8007090 <MX_I2S2_Init+0x4c>)
 800704c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800704e:	4b0f      	ldr	r3, [pc, #60]	@ (800708c <MX_I2S2_Init+0x48>)
 8007050:	22c0      	movs	r2, #192	@ 0xc0
 8007052:	0092      	lsls	r2, r2, #2
 8007054:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <MX_I2S2_Init+0x48>)
 8007058:	2200      	movs	r2, #0
 800705a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800705c:	4b0b      	ldr	r3, [pc, #44]	@ (800708c <MX_I2S2_Init+0x48>)
 800705e:	2203      	movs	r2, #3
 8007060:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007062:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <MX_I2S2_Init+0x48>)
 8007064:	2200      	movs	r2, #0
 8007066:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007068:	4b08      	ldr	r3, [pc, #32]	@ (800708c <MX_I2S2_Init+0x48>)
 800706a:	22fa      	movs	r2, #250	@ 0xfa
 800706c:	0192      	lsls	r2, r2, #6
 800706e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007070:	4b06      	ldr	r3, [pc, #24]	@ (800708c <MX_I2S2_Init+0x48>)
 8007072:	2200      	movs	r2, #0
 8007074:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007076:	4b05      	ldr	r3, [pc, #20]	@ (800708c <MX_I2S2_Init+0x48>)
 8007078:	0018      	movs	r0, r3
 800707a:	f00a f989 	bl	8011390 <HAL_I2S_Init>
 800707e:	1e03      	subs	r3, r0, #0
 8007080:	d001      	beq.n	8007086 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007082:	f000 fb2d 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000e78 	.word	0x20000e78
 8007090:	40003800 	.word	0x40003800

08007094 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007094:	b590      	push	{r4, r7, lr}
 8007096:	b089      	sub	sp, #36	@ 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800709c:	240c      	movs	r4, #12
 800709e:	193b      	adds	r3, r7, r4
 80070a0:	0018      	movs	r0, r3
 80070a2:	2314      	movs	r3, #20
 80070a4:	001a      	movs	r2, r3
 80070a6:	2100      	movs	r1, #0
 80070a8:	f017 fb18 	bl	801e6dc <memset>
  if(i2sHandle->Instance==SPI2)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007168 <HAL_I2S_MspInit+0xd4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d154      	bne.n	8007160 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80070b6:	4b2d      	ldr	r3, [pc, #180]	@ (800716c <HAL_I2S_MspInit+0xd8>)
 80070b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ba:	4b2c      	ldr	r3, [pc, #176]	@ (800716c <HAL_I2S_MspInit+0xd8>)
 80070bc:	2180      	movs	r1, #128	@ 0x80
 80070be:	01c9      	lsls	r1, r1, #7
 80070c0:	430a      	orrs	r2, r1
 80070c2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070c4:	4b29      	ldr	r3, [pc, #164]	@ (800716c <HAL_I2S_MspInit+0xd8>)
 80070c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c8:	4b28      	ldr	r3, [pc, #160]	@ (800716c <HAL_I2S_MspInit+0xd8>)
 80070ca:	2102      	movs	r1, #2
 80070cc:	430a      	orrs	r2, r1
 80070ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80070d0:	4b26      	ldr	r3, [pc, #152]	@ (800716c <HAL_I2S_MspInit+0xd8>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d4:	2202      	movs	r2, #2
 80070d6:	4013      	ands	r3, r2
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80070dc:	193b      	adds	r3, r7, r4
 80070de:	22b0      	movs	r2, #176	@ 0xb0
 80070e0:	0212      	lsls	r2, r2, #8
 80070e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e4:	0021      	movs	r1, r4
 80070e6:	187b      	adds	r3, r7, r1
 80070e8:	2202      	movs	r2, #2
 80070ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	2200      	movs	r2, #0
 80070f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070f2:	187b      	adds	r3, r7, r1
 80070f4:	2200      	movs	r2, #0
 80070f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80070f8:	187b      	adds	r3, r7, r1
 80070fa:	2200      	movs	r2, #0
 80070fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070fe:	187b      	adds	r3, r7, r1
 8007100:	4a1b      	ldr	r2, [pc, #108]	@ (8007170 <HAL_I2S_MspInit+0xdc>)
 8007102:	0019      	movs	r1, r3
 8007104:	0010      	movs	r0, r2
 8007106:	f007 fb19 	bl	800e73c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800710a:	4b1a      	ldr	r3, [pc, #104]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 800710c:	4a1a      	ldr	r2, [pc, #104]	@ (8007178 <HAL_I2S_MspInit+0xe4>)
 800710e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007110:	4b18      	ldr	r3, [pc, #96]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 8007112:	2202      	movs	r2, #2
 8007114:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007116:	4b17      	ldr	r3, [pc, #92]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 8007118:	2200      	movs	r2, #0
 800711a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800711c:	4b15      	ldr	r3, [pc, #84]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 800711e:	2200      	movs	r2, #0
 8007120:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007122:	4b14      	ldr	r3, [pc, #80]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 8007124:	2280      	movs	r2, #128	@ 0x80
 8007126:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007128:	4b12      	ldr	r3, [pc, #72]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 800712a:	2280      	movs	r2, #128	@ 0x80
 800712c:	0052      	lsls	r2, r2, #1
 800712e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007130:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 8007132:	2280      	movs	r2, #128	@ 0x80
 8007134:	00d2      	lsls	r2, r2, #3
 8007136:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007138:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 800713a:	2220      	movs	r2, #32
 800713c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800713e:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 8007140:	2200      	movs	r2, #0
 8007142:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007144:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 8007146:	0018      	movs	r0, r3
 8007148:	f006 fedc 	bl	800df04 <HAL_DMA_Init>
 800714c:	1e03      	subs	r3, r0, #0
 800714e:	d001      	beq.n	8007154 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007150:	f000 fac6 	bl	80076e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a07      	ldr	r2, [pc, #28]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 8007158:	631a      	str	r2, [r3, #48]	@ 0x30
 800715a:	4b06      	ldr	r3, [pc, #24]	@ (8007174 <HAL_I2S_MspInit+0xe0>)
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007160:	46c0      	nop			@ (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b009      	add	sp, #36	@ 0x24
 8007166:	bd90      	pop	{r4, r7, pc}
 8007168:	40003800 	.word	0x40003800
 800716c:	40021000 	.word	0x40021000
 8007170:	50000400 	.word	0x50000400
 8007174:	20000eb4 	.word	0x20000eb4
 8007178:	40020044 	.word	0x40020044

0800717c <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  testDone = true;
 8007180:	4b1e      	ldr	r3, [pc, #120]	@ (80071fc <SetTestDone+0x80>)
 8007182:	2201      	movs	r2, #1
 8007184:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8007186:	23fa      	movs	r3, #250	@ 0xfa
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	0018      	movs	r0, r3
 800718c:	f006 fa1c 	bl	800d5c8 <HAL_Delay>
  SetDBLED(false, false, true);
 8007190:	2201      	movs	r2, #1
 8007192:	2100      	movs	r1, #0
 8007194:	2000      	movs	r0, #0
 8007196:	f004 ff07 	bl	800bfa8 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 800719a:	4a19      	ldr	r2, [pc, #100]	@ (8007200 <SetTestDone+0x84>)
 800719c:	23fa      	movs	r3, #250	@ 0xfa
 800719e:	0119      	lsls	r1, r3, #4
 80071a0:	23fa      	movs	r3, #250	@ 0xfa
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	0018      	movs	r0, r3
 80071a6:	f004 fecb 	bl	800bf40 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 80071aa:	4a15      	ldr	r2, [pc, #84]	@ (8007200 <SetTestDone+0x84>)
 80071ac:	23fa      	movs	r3, #250	@ 0xfa
 80071ae:	0119      	lsls	r1, r3, #4
 80071b0:	23fa      	movs	r3, #250	@ 0xfa
 80071b2:	011b      	lsls	r3, r3, #4
 80071b4:	0018      	movs	r0, r3
 80071b6:	f004 ff41 	bl	800c03c <SetVocLED>
  HAL_Delay(1000);
 80071ba:	23fa      	movs	r3, #250	@ 0xfa
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	0018      	movs	r0, r3
 80071c0:	f006 fa02 	bl	800d5c8 <HAL_Delay>
  SetDBLED(false, false, false);
 80071c4:	2200      	movs	r2, #0
 80071c6:	2100      	movs	r1, #0
 80071c8:	2000      	movs	r0, #0
 80071ca:	f004 feed 	bl	800bfa8 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 80071ce:	23fa      	movs	r3, #250	@ 0xfa
 80071d0:	011a      	lsls	r2, r3, #4
 80071d2:	23fa      	movs	r3, #250	@ 0xfa
 80071d4:	0119      	lsls	r1, r3, #4
 80071d6:	23fa      	movs	r3, #250	@ 0xfa
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	0018      	movs	r0, r3
 80071dc:	f004 feb0 	bl	800bf40 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 80071e0:	23fa      	movs	r3, #250	@ 0xfa
 80071e2:	011a      	lsls	r2, r3, #4
 80071e4:	23fa      	movs	r3, #250	@ 0xfa
 80071e6:	0119      	lsls	r1, r3, #4
 80071e8:	23fa      	movs	r3, #250	@ 0xfa
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	0018      	movs	r0, r3
 80071ee:	f004 ff25 	bl	800c03c <SetVocLED>
  InitDone();
 80071f2:	f004 fe4f 	bl	800be94 <InitDone>
}
 80071f6:	46c0      	nop			@ (mov r8, r8)
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	20000efc 	.word	0x20000efc
 8007200:	00000bb8 	.word	0x00000bb8

08007204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007208:	f006 f96e 	bl	800d4e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800720c:	f000 f930 	bl	8007470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007210:	f7ff fc2c 	bl	8006a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8007214:	f7ff fa76 	bl	8006704 <MX_DMA_Init>
  MX_I2C1_Init();
 8007218:	f7ff fdba 	bl	8006d90 <MX_I2C1_Init>
  MX_I2S2_Init();
 800721c:	f7ff ff12 	bl	8007044 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007220:	f005 fc3a 	bl	800ca98 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007224:	f7ff fdf4 	bl	8006e10 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007228:	f005 fa2e 	bl	800c688 <MX_TIM2_Init>
  MX_TIM3_Init();
 800722c:	f005 faa0 	bl	800c770 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007230:	f005 fc66 	bl	800cb00 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007234:	f7ff f9b4 	bl	80065a0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007238:	f013 ff5e 	bl	801b0f8 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800723c:	f001 f806 	bl	800824c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007240:	f005 fbf4 	bl	800ca2c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007244:	f005 fb12 	bl	800c86c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007248:	4a6c      	ldr	r2, [pc, #432]	@ (80073fc <main+0x1f8>)
 800724a:	4b6d      	ldr	r3, [pc, #436]	@ (8007400 <main+0x1fc>)
 800724c:	0011      	movs	r1, r2
 800724e:	0018      	movs	r0, r3
 8007250:	f7ff fd22 	bl	8006c98 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007254:	f7fe ff24 	bl	80060a0 <UserButton_Pressed>
 8007258:	1e03      	subs	r3, r0, #0
 800725a:	d004      	beq.n	8007266 <main+0x62>
    EnableESPProg();
 800725c:	f014 f81c 	bl	801b298 <EnableESPProg>
    ESP_Programming = true;
 8007260:	4b68      	ldr	r3, [pc, #416]	@ (8007404 <main+0x200>)
 8007262:	2201      	movs	r2, #1
 8007264:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007266:	2003      	movs	r0, #3
 8007268:	f005 fe72 	bl	800cf50 <SetVerboseLevel>
  BinaryReleaseInfo();
 800726c:	f005 fe88 	bl	800cf80 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007270:	4965      	ldr	r1, [pc, #404]	@ (8007408 <main+0x204>)
 8007272:	4b66      	ldr	r3, [pc, #408]	@ (800740c <main+0x208>)
 8007274:	2201      	movs	r2, #1
 8007276:	0018      	movs	r0, r3
 8007278:	f00e faa4 	bl	80157c4 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800727c:	4b64      	ldr	r3, [pc, #400]	@ (8007410 <main+0x20c>)
 800727e:	0018      	movs	r0, r3
 8007280:	f7ff f980 	bl	8006584 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007284:	4a63      	ldr	r2, [pc, #396]	@ (8007414 <main+0x210>)
 8007286:	4964      	ldr	r1, [pc, #400]	@ (8007418 <main+0x214>)
 8007288:	4864      	ldr	r0, [pc, #400]	@ (800741c <main+0x218>)
 800728a:	230b      	movs	r3, #11
 800728c:	f003 ff78 	bl	800b180 <soundInit>
 8007290:	0003      	movs	r3, r0
 8007292:	001a      	movs	r2, r3
 8007294:	2301      	movs	r3, #1
 8007296:	4053      	eors	r3, r2
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d005      	beq.n	80072aa <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 800729e:	4a60      	ldr	r2, [pc, #384]	@ (8007420 <main+0x21c>)
 80072a0:	4b60      	ldr	r3, [pc, #384]	@ (8007424 <main+0x220>)
 80072a2:	21db      	movs	r1, #219	@ 0xdb
 80072a4:	0018      	movs	r0, r3
 80072a6:	f005 fe9d 	bl	800cfe4 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80072aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007428 <main+0x224>)
 80072ac:	4a5f      	ldr	r2, [pc, #380]	@ (800742c <main+0x228>)
 80072ae:	495a      	ldr	r1, [pc, #360]	@ (8007418 <main+0x214>)
 80072b0:	485f      	ldr	r0, [pc, #380]	@ (8007430 <main+0x22c>)
 80072b2:	f7ff fb57 	bl	8006964 <Gadget_Init>
  Debug("Clock init done");
 80072b6:	4a5f      	ldr	r2, [pc, #380]	@ (8007434 <main+0x230>)
 80072b8:	4b5f      	ldr	r3, [pc, #380]	@ (8007438 <main+0x234>)
 80072ba:	0019      	movs	r1, r3
 80072bc:	2003      	movs	r0, #3
 80072be:	f005 fddd 	bl	800ce7c <CreateLine>
  if (!probe_sen5x()) {
 80072c2:	f001 f873 	bl	80083ac <probe_sen5x>
 80072c6:	1e03      	subs	r3, r0, #0
 80072c8:	d10a      	bne.n	80072e0 <main+0xdc>
    sen5x_Present = true; // not present
 80072ca:	4b5c      	ldr	r3, [pc, #368]	@ (800743c <main+0x238>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	701a      	strb	r2, [r3, #0]
    sen5x_Power_Off();      // switch off buck converter
 80072d0:	f001 f854 	bl	800837c <sen5x_Power_Off>
    Debug("sen5x sensor not detected, polling disabled.");
 80072d4:	4a5a      	ldr	r2, [pc, #360]	@ (8007440 <main+0x23c>)
 80072d6:	4b58      	ldr	r3, [pc, #352]	@ (8007438 <main+0x234>)
 80072d8:	0019      	movs	r1, r3
 80072da:	2003      	movs	r0, #3
 80072dc:	f005 fdce 	bl	800ce7c <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 80072e0:	4b58      	ldr	r3, [pc, #352]	@ (8007444 <main+0x240>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d019      	beq.n	800731c <main+0x118>
 80072e8:	4b46      	ldr	r3, [pc, #280]	@ (8007404 <main+0x200>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2201      	movs	r2, #1
 80072ee:	4053      	eors	r3, r2
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d012      	beq.n	800731c <main+0x118>
 80072f6:	4b54      	ldr	r3, [pc, #336]	@ (8007448 <main+0x244>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2201      	movs	r2, #1
 80072fc:	4053      	eors	r3, r2
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <main+0x118>
      MeasurementBusy = UpkeepGadget();
 8007304:	f7ff fb5c 	bl	80069c0 <UpkeepGadget>
 8007308:	0003      	movs	r3, r0
 800730a:	001a      	movs	r2, r3
 800730c:	4b4f      	ldr	r3, [pc, #316]	@ (800744c <main+0x248>)
 800730e:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007310:	f7fd ff74 	bl	80051fc <ESP_Upkeep>
 8007314:	0003      	movs	r3, r0
 8007316:	001a      	movs	r2, r3
 8007318:	4b4d      	ldr	r3, [pc, #308]	@ (8007450 <main+0x24c>)
 800731a:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800731c:	4b49      	ldr	r3, [pc, #292]	@ (8007444 <main+0x240>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2201      	movs	r2, #1
 8007322:	4053      	eors	r3, r2
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00f      	beq.n	800734a <main+0x146>
 800732a:	4b36      	ldr	r3, [pc, #216]	@ (8007404 <main+0x200>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2201      	movs	r2, #1
 8007330:	4053      	eors	r3, r2
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <main+0x146>
 8007338:	4b43      	ldr	r3, [pc, #268]	@ (8007448 <main+0x244>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2201      	movs	r2, #1
 800733e:	4053      	eors	r3, r2
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <main+0x146>
      Gadget_Test();
 8007346:	f7ff fb33 	bl	80069b0 <Gadget_Test>
    }
    Status_Upkeep();
 800734a:	f005 f847 	bl	800c3dc <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 800734e:	4b41      	ldr	r3, [pc, #260]	@ (8007454 <main+0x250>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	0018      	movs	r0, r3
 8007354:	f005 fd3c 	bl	800cdd0 <TimestampIsReached>
 8007358:	1e03      	subs	r3, r0, #0
 800735a:	d00c      	beq.n	8007376 <main+0x172>
      charge = Battery_Upkeep();
 800735c:	f005 f845 	bl	800c3ea <Battery_Upkeep>
 8007360:	0003      	movs	r3, r0
 8007362:	001a      	movs	r2, r3
 8007364:	4b3c      	ldr	r3, [pc, #240]	@ (8007458 <main+0x254>)
 8007366:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 8007368:	f006 f924 	bl	800d5b4 <HAL_GetTick>
 800736c:	0003      	movs	r3, r0
 800736e:	4a3b      	ldr	r2, [pc, #236]	@ (800745c <main+0x258>)
 8007370:	189a      	adds	r2, r3, r2
 8007372:	4b38      	ldr	r3, [pc, #224]	@ (8007454 <main+0x250>)
 8007374:	601a      	str	r2, [r3, #0]
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8007376:	4b38      	ldr	r3, [pc, #224]	@ (8007458 <main+0x254>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d107      	bne.n	800738e <main+0x18a>
 800737e:	4b34      	ldr	r3, [pc, #208]	@ (8007450 <main+0x24c>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b09      	cmp	r3, #9
 8007384:	d103      	bne.n	800738e <main+0x18a>
      batteryEmpty = true;
 8007386:	4b30      	ldr	r3, [pc, #192]	@ (8007448 <main+0x244>)
 8007388:	2201      	movs	r2, #1
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	e002      	b.n	8007394 <main+0x190>
    }
    else{
      batteryEmpty = false;
 800738e:	4b2e      	ldr	r3, [pc, #184]	@ (8007448 <main+0x244>)
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]
    }
    if(charge == BATTERY_FULL){

    }
    if(TimestampIsReached(timeReadTimer)){
 8007394:	4b32      	ldr	r3, [pc, #200]	@ (8007460 <main+0x25c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	0018      	movs	r0, r3
 800739a:	f005 fd19 	bl	800cdd0 <TimestampIsReached>
 800739e:	1e03      	subs	r3, r0, #0
 80073a0:	d008      	beq.n	80073b4 <main+0x1b0>
      UpdateSystemUptime();
 80073a2:	f7fe feeb 	bl	800617c <UpdateSystemUptime>
      timeReadTimer  = HAL_GetTick() + 30000;
 80073a6:	f006 f905 	bl	800d5b4 <HAL_GetTick>
 80073aa:	0003      	movs	r3, r0
 80073ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007464 <main+0x260>)
 80073ae:	189a      	adds	r2, r3, r2
 80073b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007460 <main+0x25c>)
 80073b2:	601a      	str	r2, [r3, #0]
    }

    if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && sen5x_Present) {
 80073b4:	4b28      	ldr	r3, [pc, #160]	@ (8007458 <main+0x254>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d803      	bhi.n	80073c4 <main+0x1c0>
 80073bc:	4b26      	ldr	r3, [pc, #152]	@ (8007458 <main+0x254>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d18d      	bne.n	80072e0 <main+0xdc>
 80073c4:	4b1d      	ldr	r3, [pc, #116]	@ (800743c <main+0x238>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d089      	beq.n	80072e0 <main+0xdc>
      if  (charge > BATTERY_LOW) {
 80073cc:	4b22      	ldr	r3, [pc, #136]	@ (8007458 <main+0x254>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d903      	bls.n	80073dc <main+0x1d8>
        sen5x_statemachine(0);
 80073d4:	2000      	movs	r0, #0
 80073d6:	f001 fb7f 	bl	8008ad8 <sen5x_statemachine>
 80073da:	e781      	b.n	80072e0 <main+0xdc>
      }
      else {
        if (charge == USB_PLUGGED_IN) {
 80073dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <main+0x254>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d103      	bne.n	80073ec <main+0x1e8>
          sen5x_statemachine(USB_PLUGGED_IN);
 80073e4:	2001      	movs	r0, #1
 80073e6:	f001 fb77 	bl	8008ad8 <sen5x_statemachine>
 80073ea:	e779      	b.n	80072e0 <main+0xdc>
        }
        else  {
          Info("Battery level insufficient for sen5x operation");
 80073ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007468 <main+0x264>)
 80073ee:	4b1f      	ldr	r3, [pc, #124]	@ (800746c <main+0x268>)
 80073f0:	0019      	movs	r1, r3
 80073f2:	2002      	movs	r0, #2
 80073f4:	f005 fd42 	bl	800ce7c <CreateLine>
    if(testDone && !ESP_Programming && !batteryEmpty){
 80073f8:	e772      	b.n	80072e0 <main+0xdc>
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	200021ac 	.word	0x200021ac
 8007400:	2000216c 	.word	0x2000216c
 8007404:	20000efd 	.word	0x20000efd
 8007408:	20000f10 	.word	0x20000f10
 800740c:	200022e4 	.word	0x200022e4
 8007410:	200011c0 	.word	0x200011c0
 8007414:	200021ec 	.word	0x200021ec
 8007418:	20000e78 	.word	0x20000e78
 800741c:	20000eb4 	.word	0x20000eb4
 8007420:	080220f8 	.word	0x080220f8
 8007424:	08023214 	.word	0x08023214
 8007428:	20000ce0 	.word	0x20000ce0
 800742c:	2000239c 	.word	0x2000239c
 8007430:	20000d40 	.word	0x20000d40
 8007434:	0802210c 	.word	0x0802210c
 8007438:	0802211c 	.word	0x0802211c
 800743c:	20000f00 	.word	0x20000f00
 8007440:	08022120 	.word	0x08022120
 8007444:	20000efc 	.word	0x20000efc
 8007448:	20000efe 	.word	0x20000efe
 800744c:	20000eff 	.word	0x20000eff
 8007450:	20000f0d 	.word	0x20000f0d
 8007454:	20000f04 	.word	0x20000f04
 8007458:	20000f0c 	.word	0x20000f0c
 800745c:	0000ea60 	.word	0x0000ea60
 8007460:	20000f08 	.word	0x20000f08
 8007464:	00007530 	.word	0x00007530
 8007468:	08022150 	.word	0x08022150
 800746c:	08022180 	.word	0x08022180

08007470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007470:	b590      	push	{r4, r7, lr}
 8007472:	b09d      	sub	sp, #116	@ 0x74
 8007474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007476:	2438      	movs	r4, #56	@ 0x38
 8007478:	193b      	adds	r3, r7, r4
 800747a:	0018      	movs	r0, r3
 800747c:	2338      	movs	r3, #56	@ 0x38
 800747e:	001a      	movs	r2, r3
 8007480:	2100      	movs	r1, #0
 8007482:	f017 f92b 	bl	801e6dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007486:	2324      	movs	r3, #36	@ 0x24
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	0018      	movs	r0, r3
 800748c:	2314      	movs	r3, #20
 800748e:	001a      	movs	r2, r3
 8007490:	2100      	movs	r1, #0
 8007492:	f017 f923 	bl	801e6dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007496:	003b      	movs	r3, r7
 8007498:	0018      	movs	r0, r3
 800749a:	2324      	movs	r3, #36	@ 0x24
 800749c:	001a      	movs	r2, r3
 800749e:	2100      	movs	r1, #0
 80074a0:	f017 f91c 	bl	801e6dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80074a4:	4b34      	ldr	r3, [pc, #208]	@ (8007578 <SystemClock_Config+0x108>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a34      	ldr	r2, [pc, #208]	@ (800757c <SystemClock_Config+0x10c>)
 80074aa:	401a      	ands	r2, r3
 80074ac:	4b32      	ldr	r3, [pc, #200]	@ (8007578 <SystemClock_Config+0x108>)
 80074ae:	2180      	movs	r1, #128	@ 0x80
 80074b0:	0109      	lsls	r1, r1, #4
 80074b2:	430a      	orrs	r2, r1
 80074b4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80074b6:	f00c f8cf 	bl	8013658 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80074ba:	4b31      	ldr	r3, [pc, #196]	@ (8007580 <SystemClock_Config+0x110>)
 80074bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074be:	4a2f      	ldr	r2, [pc, #188]	@ (800757c <SystemClock_Config+0x10c>)
 80074c0:	401a      	ands	r2, r3
 80074c2:	4b2f      	ldr	r3, [pc, #188]	@ (8007580 <SystemClock_Config+0x110>)
 80074c4:	2180      	movs	r1, #128	@ 0x80
 80074c6:	0149      	lsls	r1, r1, #5
 80074c8:	430a      	orrs	r2, r1
 80074ca:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80074cc:	193b      	adds	r3, r7, r4
 80074ce:	2226      	movs	r2, #38	@ 0x26
 80074d0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80074d2:	193b      	adds	r3, r7, r4
 80074d4:	2280      	movs	r2, #128	@ 0x80
 80074d6:	0052      	lsls	r2, r2, #1
 80074d8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80074da:	0021      	movs	r1, r4
 80074dc:	187b      	adds	r3, r7, r1
 80074de:	2201      	movs	r2, #1
 80074e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80074e2:	187b      	adds	r3, r7, r1
 80074e4:	2210      	movs	r2, #16
 80074e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80074e8:	187b      	adds	r3, r7, r1
 80074ea:	2201      	movs	r2, #1
 80074ec:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80074ee:	187b      	adds	r3, r7, r1
 80074f0:	2200      	movs	r2, #0
 80074f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80074f4:	187b      	adds	r3, r7, r1
 80074f6:	0018      	movs	r0, r3
 80074f8:	f00c f8bc 	bl	8013674 <HAL_RCC_OscConfig>
 80074fc:	1e03      	subs	r3, r0, #0
 80074fe:	d001      	beq.n	8007504 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007500:	f000 f8ee 	bl	80076e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007504:	2124      	movs	r1, #36	@ 0x24
 8007506:	187b      	adds	r3, r7, r1
 8007508:	220f      	movs	r2, #15
 800750a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800750c:	187b      	adds	r3, r7, r1
 800750e:	2201      	movs	r2, #1
 8007510:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007512:	187b      	adds	r3, r7, r1
 8007514:	2200      	movs	r2, #0
 8007516:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007518:	187b      	adds	r3, r7, r1
 800751a:	2200      	movs	r2, #0
 800751c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800751e:	187b      	adds	r3, r7, r1
 8007520:	2200      	movs	r2, #0
 8007522:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007524:	187b      	adds	r3, r7, r1
 8007526:	2100      	movs	r1, #0
 8007528:	0018      	movs	r0, r3
 800752a:	f00c fc77 	bl	8013e1c <HAL_RCC_ClockConfig>
 800752e:	1e03      	subs	r3, r0, #0
 8007530:	d001      	beq.n	8007536 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007532:	f000 f8d5 	bl	80076e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007536:	003b      	movs	r3, r7
 8007538:	226d      	movs	r2, #109	@ 0x6d
 800753a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800753c:	003b      	movs	r3, r7
 800753e:	2200      	movs	r2, #0
 8007540:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007542:	003b      	movs	r3, r7
 8007544:	2200      	movs	r2, #0
 8007546:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007548:	003b      	movs	r3, r7
 800754a:	2200      	movs	r2, #0
 800754c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800754e:	003b      	movs	r3, r7
 8007550:	2280      	movs	r2, #128	@ 0x80
 8007552:	0252      	lsls	r2, r2, #9
 8007554:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007556:	003b      	movs	r3, r7
 8007558:	2280      	movs	r2, #128	@ 0x80
 800755a:	04d2      	lsls	r2, r2, #19
 800755c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800755e:	003b      	movs	r3, r7
 8007560:	0018      	movs	r0, r3
 8007562:	f00c fe7f 	bl	8014264 <HAL_RCCEx_PeriphCLKConfig>
 8007566:	1e03      	subs	r3, r0, #0
 8007568:	d001      	beq.n	800756e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800756a:	f000 f8b9 	bl	80076e0 <Error_Handler>
  }
}
 800756e:	46c0      	nop			@ (mov r8, r8)
 8007570:	46bd      	mov	sp, r7
 8007572:	b01d      	add	sp, #116	@ 0x74
 8007574:	bd90      	pop	{r4, r7, pc}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	40007000 	.word	0x40007000
 800757c:	ffffe7ff 	.word	0xffffe7ff
 8007580:	40021000 	.word	0x40021000

08007584 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007584:	b590      	push	{r4, r7, lr}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	000a      	movs	r2, r1
 800758e:	1cbb      	adds	r3, r7, #2
 8007590:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8007592:	4c06      	ldr	r4, [pc, #24]	@ (80075ac <printString+0x28>)
 8007594:	1cbb      	adds	r3, r7, #2
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4805      	ldr	r0, [pc, #20]	@ (80075b0 <printString+0x2c>)
 800759c:	0023      	movs	r3, r4
 800759e:	f00e f871 	bl	8015684 <HAL_UART_Transmit>
}
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	46bd      	mov	sp, r7
 80075a6:	b003      	add	sp, #12
 80075a8:	bd90      	pop	{r4, r7, pc}
 80075aa:	46c0      	nop			@ (mov r8, r8)
 80075ac:	0000ffff 	.word	0x0000ffff
 80075b0:	200022e4 	.word	0x200022e4

080075b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80075bc:	4936      	ldr	r1, [pc, #216]	@ (8007698 <HAL_UART_RxCpltCallback+0xe4>)
 80075be:	4b37      	ldr	r3, [pc, #220]	@ (800769c <HAL_UART_RxCpltCallback+0xe8>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	0018      	movs	r0, r3
 80075c4:	f00e f8fe 	bl	80157c4 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 80075c8:	4b33      	ldr	r3, [pc, #204]	@ (8007698 <HAL_UART_RxCpltCallback+0xe4>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	3b61      	subs	r3, #97	@ 0x61
 80075ce:	2b13      	cmp	r3, #19
 80075d0:	d830      	bhi.n	8007634 <HAL_UART_RxCpltCallback+0x80>
 80075d2:	009a      	lsls	r2, r3, #2
 80075d4:	4b32      	ldr	r3, [pc, #200]	@ (80076a0 <HAL_UART_RxCpltCallback+0xec>)
 80075d6:	18d3      	adds	r3, r2, r3
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80075dc:	4b31      	ldr	r3, [pc, #196]	@ (80076a4 <HAL_UART_RxCpltCallback+0xf0>)
 80075de:	0018      	movs	r0, r3
 80075e0:	f016 ff2e 	bl	801e440 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80075e4:	2003      	movs	r0, #3
 80075e6:	f005 fcb3 	bl	800cf50 <SetVerboseLevel>
      break;
 80075ea:	e04a      	b.n	8007682 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 80075ec:	f7fc f8d6 	bl	800379c <forceNTPupdate>
    break;
 80075f0:	e047      	b.n	8007682 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 80075f2:	4b2d      	ldr	r3, [pc, #180]	@ (80076a8 <HAL_UART_RxCpltCallback+0xf4>)
 80075f4:	0018      	movs	r0, r3
 80075f6:	f016 ff23 	bl	801e440 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 80075fa:	2002      	movs	r0, #2
 80075fc:	f005 fca8 	bl	800cf50 <SetVerboseLevel>
      break;
 8007600:	e03f      	b.n	8007682 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007602:	4b2a      	ldr	r3, [pc, #168]	@ (80076ac <HAL_UART_RxCpltCallback+0xf8>)
 8007604:	0018      	movs	r0, r3
 8007606:	f016 ff1b 	bl	801e440 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800760a:	2001      	movs	r0, #1
 800760c:	f005 fca0 	bl	800cf50 <SetVerboseLevel>
      break;
 8007610:	e037      	b.n	8007682 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007612:	4b27      	ldr	r3, [pc, #156]	@ (80076b0 <HAL_UART_RxCpltCallback+0xfc>)
 8007614:	0018      	movs	r0, r3
 8007616:	f016 ff13 	bl	801e440 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800761a:	2000      	movs	r0, #0
 800761c:	f005 fc98 	bl	800cf50 <SetVerboseLevel>
      break;
 8007620:	e02f      	b.n	8007682 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007622:	f005 ffc7 	bl	800d5b4 <HAL_GetTick>
 8007626:	0002      	movs	r2, r0
 8007628:	4b22      	ldr	r3, [pc, #136]	@ (80076b4 <HAL_UART_RxCpltCallback+0x100>)
 800762a:	601a      	str	r2, [r3, #0]
      break;
 800762c:	e029      	b.n	8007682 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800762e:	f7fe fd47 	bl	80060c0 <showTime>
      break;
 8007632:	e026      	b.n	8007682 <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007634:	4a20      	ldr	r2, [pc, #128]	@ (80076b8 <HAL_UART_RxCpltCallback+0x104>)
 8007636:	4b21      	ldr	r3, [pc, #132]	@ (80076bc <HAL_UART_RxCpltCallback+0x108>)
 8007638:	0019      	movs	r1, r3
 800763a:	2001      	movs	r0, #1
 800763c:	f005 fc1e 	bl	800ce7c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8007640:	4b1f      	ldr	r3, [pc, #124]	@ (80076c0 <HAL_UART_RxCpltCallback+0x10c>)
 8007642:	0018      	movs	r0, r3
 8007644:	f016 fefc 	bl	801e440 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8007648:	4b1e      	ldr	r3, [pc, #120]	@ (80076c4 <HAL_UART_RxCpltCallback+0x110>)
 800764a:	0018      	movs	r0, r3
 800764c:	f016 fef8 	bl	801e440 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8007650:	4b1d      	ldr	r3, [pc, #116]	@ (80076c8 <HAL_UART_RxCpltCallback+0x114>)
 8007652:	0018      	movs	r0, r3
 8007654:	f016 fef4 	bl	801e440 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8007658:	4b1c      	ldr	r3, [pc, #112]	@ (80076cc <HAL_UART_RxCpltCallback+0x118>)
 800765a:	0018      	movs	r0, r3
 800765c:	f016 fef0 	bl	801e440 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8007660:	4b1b      	ldr	r3, [pc, #108]	@ (80076d0 <HAL_UART_RxCpltCallback+0x11c>)
 8007662:	0018      	movs	r0, r3
 8007664:	f016 feec 	bl	801e440 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8007668:	4b1a      	ldr	r3, [pc, #104]	@ (80076d4 <HAL_UART_RxCpltCallback+0x120>)
 800766a:	0018      	movs	r0, r3
 800766c:	f016 fee8 	bl	801e440 <puts>
      printf("s - Start particle measurement\r\n");
 8007670:	4b19      	ldr	r3, [pc, #100]	@ (80076d8 <HAL_UART_RxCpltCallback+0x124>)
 8007672:	0018      	movs	r0, r3
 8007674:	f016 fee4 	bl	801e440 <puts>
      printf("t - Show actual systemtime\r\n");
 8007678:	4b18      	ldr	r3, [pc, #96]	@ (80076dc <HAL_UART_RxCpltCallback+0x128>)
 800767a:	0018      	movs	r0, r3
 800767c:	f016 fee0 	bl	801e440 <puts>
  break;
 8007680:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007682:	4905      	ldr	r1, [pc, #20]	@ (8007698 <HAL_UART_RxCpltCallback+0xe4>)
 8007684:	4b05      	ldr	r3, [pc, #20]	@ (800769c <HAL_UART_RxCpltCallback+0xe8>)
 8007686:	2201      	movs	r2, #1
 8007688:	0018      	movs	r0, r3
 800768a:	f00e f89b 	bl	80157c4 <HAL_UART_Receive_IT>
}
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	b002      	add	sp, #8
 8007694:	bd80      	pop	{r7, pc}
 8007696:	46c0      	nop			@ (mov r8, r8)
 8007698:	20000f10 	.word	0x20000f10
 800769c:	200022e4 	.word	0x200022e4
 80076a0:	080231c4 	.word	0x080231c4
 80076a4:	08022184 	.word	0x08022184
 80076a8:	080221a0 	.word	0x080221a0
 80076ac:	080221bc 	.word	0x080221bc
 80076b0:	080221dc 	.word	0x080221dc
 80076b4:	200011e8 	.word	0x200011e8
 80076b8:	080221f8 	.word	0x080221f8
 80076bc:	08022228 	.word	0x08022228
 80076c0:	0802222c 	.word	0x0802222c
 80076c4:	08022244 	.word	0x08022244
 80076c8:	08022264 	.word	0x08022264
 80076cc:	08022288 	.word	0x08022288
 80076d0:	080222a8 	.word	0x080222a8
 80076d4:	080222cc 	.word	0x080222cc
 80076d8:	080222ec 	.word	0x080222ec
 80076dc:	0802230c 	.word	0x0802230c

080076e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 80076e4:	4a04      	ldr	r2, [pc, #16]	@ (80076f8 <Error_Handler+0x18>)
 80076e6:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <Error_Handler+0x1c>)
 80076e8:	0019      	movs	r1, r3
 80076ea:	2001      	movs	r0, #1
 80076ec:	f005 fbc6 	bl	800ce7c <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076f0:	b672      	cpsid	i
}
 80076f2:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 80076f4:	46c0      	nop			@ (mov r8, r8)
 80076f6:	e7fd      	b.n	80076f4 <Error_Handler+0x14>
 80076f8:	08022328 	.word	0x08022328
 80076fc:	08022228 	.word	0x08022228

08007700 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007704:	f7ff fb25 	bl	8006d52 <HT_StartMeasurement>
}
 8007708:	46c0      	nop			@ (mov r8, r8)
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007714:	4a04      	ldr	r2, [pc, #16]	@ (8007728 <HT_IsMeasurementDoneWrapper+0x18>)
 8007716:	4b05      	ldr	r3, [pc, #20]	@ (800772c <HT_IsMeasurementDoneWrapper+0x1c>)
 8007718:	0011      	movs	r1, r2
 800771a:	0018      	movs	r0, r3
 800771c:	f7ff fb20 	bl	8006d60 <HT_GetMeasurementValues>
 8007720:	0003      	movs	r3, r0
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000f24 	.word	0x20000f24
 800772c:	20000f20 	.word	0x20000f20

08007730 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007734:	f7ff f97d 	bl	8006a32 <Gas_StartMeasurement>
}
 8007738:	46c0      	nop			@ (mov r8, r8)
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8007744:	4b03      	ldr	r3, [pc, #12]	@ (8007754 <VOC_IsMeasurementDoneWrapper+0x14>)
 8007746:	0018      	movs	r0, r3
 8007748:	f7ff f97a 	bl	8006a40 <Gas_GetMeasurementValues>
 800774c:	0003      	movs	r3, r0
}
 800774e:	0018      	movs	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000f28 	.word	0x20000f28

08007758 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
}
 800775c:	46c0      	nop			@ (mov r8, r8)
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8007762:	b580      	push	{r7, lr}
 8007764:	af00      	add	r7, sp, #0
  return true;
 8007766:	2301      	movs	r3, #1
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 800776e:	b580      	push	{r7, lr}
 8007770:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8007772:	f000 fd19 	bl	80081a8 <MIC_TestMeasurementDone>
 8007776:	0003      	movs	r3, r0
}
 8007778:	0018      	movs	r0, r3
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <testInit>:

void testInit(){
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8007784:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <testInit+0x24>)
 8007786:	2200      	movs	r2, #0
 8007788:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 800778a:	4b06      	ldr	r3, [pc, #24]	@ (80077a4 <testInit+0x24>)
 800778c:	2200      	movs	r2, #0
 800778e:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 8007790:	4b04      	ldr	r3, [pc, #16]	@ (80077a4 <testInit+0x24>)
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8007796:	4b03      	ldr	r3, [pc, #12]	@ (80077a4 <testInit+0x24>)
 8007798:	2200      	movs	r2, #0
 800779a:	705a      	strb	r2, [r3, #1]
}
 800779c:	46c0      	nop			@ (mov r8, r8)
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	20000f64 	.word	0x20000f64

080077a8 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80077a8:	b5b0      	push	{r4, r5, r7, lr}
 80077aa:	b092      	sub	sp, #72	@ 0x48
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 80077b4:	f7ff ffe4 	bl	8007780 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80077b8:	4b6e      	ldr	r3, [pc, #440]	@ (8007974 <Meas_Init+0x1cc>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <Meas_Init+0x20>
 80077c0:	4b6c      	ldr	r3, [pc, #432]	@ (8007974 <Meas_Init+0x1cc>)
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d068      	beq.n	800789a <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7fe f8fe 	bl	80059cc <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80077d0:	f7ff fad6 	bl	8006d80 <HT_DeviceConnected>
 80077d4:	0003      	movs	r3, r0
 80077d6:	001a      	movs	r2, r3
 80077d8:	2301      	movs	r3, #1
 80077da:	4053      	eors	r3, r2
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00c      	beq.n	80077fc <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 80077e2:	4a65      	ldr	r2, [pc, #404]	@ (8007978 <Meas_Init+0x1d0>)
 80077e4:	4b65      	ldr	r3, [pc, #404]	@ (800797c <Meas_Init+0x1d4>)
 80077e6:	0019      	movs	r1, r3
 80077e8:	2001      	movs	r0, #1
 80077ea:	f005 fb47 	bl	800ce7c <CreateLine>
       MeasTest.HT_Tested = false;
 80077ee:	4b64      	ldr	r3, [pc, #400]	@ (8007980 <Meas_Init+0x1d8>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 80077f4:	4b5f      	ldr	r3, [pc, #380]	@ (8007974 <Meas_Init+0x1cc>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	e008      	b.n	800780e <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 80077fc:	4b60      	ldr	r3, [pc, #384]	@ (8007980 <Meas_Init+0x1d8>)
 80077fe:	2201      	movs	r2, #1
 8007800:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8007802:	4a60      	ldr	r2, [pc, #384]	@ (8007984 <Meas_Init+0x1dc>)
 8007804:	4b60      	ldr	r3, [pc, #384]	@ (8007988 <Meas_Init+0x1e0>)
 8007806:	0019      	movs	r1, r3
 8007808:	2003      	movs	r0, #3
 800780a:	f005 fb37 	bl	800ce7c <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 800780e:	f7ff f924 	bl	8006a5a <Gas_DeviceConnected>
 8007812:	0003      	movs	r3, r0
 8007814:	001a      	movs	r2, r3
 8007816:	2301      	movs	r3, #1
 8007818:	4053      	eors	r3, r2
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00c      	beq.n	800783a <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8007820:	4b57      	ldr	r3, [pc, #348]	@ (8007980 <Meas_Init+0x1d8>)
 8007822:	2200      	movs	r2, #0
 8007824:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8007826:	4a59      	ldr	r2, [pc, #356]	@ (800798c <Meas_Init+0x1e4>)
 8007828:	4b54      	ldr	r3, [pc, #336]	@ (800797c <Meas_Init+0x1d4>)
 800782a:	0019      	movs	r1, r3
 800782c:	2001      	movs	r0, #1
 800782e:	f005 fb25 	bl	800ce7c <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8007832:	4b50      	ldr	r3, [pc, #320]	@ (8007974 <Meas_Init+0x1cc>)
 8007834:	2200      	movs	r2, #0
 8007836:	705a      	strb	r2, [r3, #1]
 8007838:	e008      	b.n	800784c <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 800783a:	4b51      	ldr	r3, [pc, #324]	@ (8007980 <Meas_Init+0x1d8>)
 800783c:	2201      	movs	r2, #1
 800783e:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8007840:	4a53      	ldr	r2, [pc, #332]	@ (8007990 <Meas_Init+0x1e8>)
 8007842:	4b51      	ldr	r3, [pc, #324]	@ (8007988 <Meas_Init+0x1e0>)
 8007844:	0019      	movs	r1, r3
 8007846:	2003      	movs	r0, #3
 8007848:	f005 fb18 	bl	800ce7c <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 800784c:	4b4c      	ldr	r3, [pc, #304]	@ (8007980 <Meas_Init+0x1d8>)
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d009      	beq.n	8007868 <Meas_Init+0xc0>
 8007854:	4b4a      	ldr	r3, [pc, #296]	@ (8007980 <Meas_Init+0x1d8>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 800785c:	2200      	movs	r2, #0
 800785e:	2101      	movs	r1, #1
 8007860:	2000      	movs	r0, #0
 8007862:	f004 fba1 	bl	800bfa8 <SetDBLED>
 8007866:	e018      	b.n	800789a <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8007868:	2200      	movs	r2, #0
 800786a:	2100      	movs	r1, #0
 800786c:	2001      	movs	r0, #1
 800786e:	f004 fb9b 	bl	800bfa8 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8007872:	4b48      	ldr	r3, [pc, #288]	@ (8007994 <Meas_Init+0x1ec>)
 8007874:	2200      	movs	r2, #0
 8007876:	2101      	movs	r1, #1
 8007878:	0018      	movs	r0, r3
 800787a:	f007 f8fa 	bl	800ea72 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800787e:	2380      	movs	r3, #128	@ 0x80
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	4844      	ldr	r0, [pc, #272]	@ (8007994 <Meas_Init+0x1ec>)
 8007884:	2201      	movs	r2, #1
 8007886:	0019      	movs	r1, r3
 8007888:	f007 f8f3 	bl	800ea72 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800788c:	2380      	movs	r3, #128	@ 0x80
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4840      	ldr	r0, [pc, #256]	@ (8007994 <Meas_Init+0x1ec>)
 8007892:	2201      	movs	r2, #1
 8007894:	0019      	movs	r1, r3
 8007896:	f007 f8ec 	bl	800ea72 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 800789a:	4b36      	ldr	r3, [pc, #216]	@ (8007974 <Meas_Init+0x1cc>)
 800789c:	78db      	ldrb	r3, [r3, #3]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d008      	beq.n	80078b4 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 80078a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007998 <Meas_Init+0x1f0>)
 80078a4:	4b3d      	ldr	r3, [pc, #244]	@ (800799c <Meas_Init+0x1f4>)
 80078a6:	0019      	movs	r1, r3
 80078a8:	2002      	movs	r0, #2
 80078aa:	f005 fae7 	bl	800ce7c <CreateLine>
          enableMicrophone(true);
 80078ae:	2001      	movs	r0, #1
 80078b0:	f003 fcce 	bl	800b250 <enableMicrophone>

  }
  uint8_t offset = 0;
 80078b4:	2547      	movs	r5, #71	@ 0x47
 80078b6:	197b      	adds	r3, r7, r5
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80078bc:	197b      	adds	r3, r7, r5
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	197a      	adds	r2, r7, r5
 80078c2:	1c59      	adds	r1, r3, #1
 80078c4:	7011      	strb	r1, [r2, #0]
 80078c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007974 <Meas_Init+0x1cc>)
 80078c8:	7814      	ldrb	r4, [r2, #0]
 80078ca:	4a35      	ldr	r2, [pc, #212]	@ (80079a0 <Meas_Init+0x1f8>)
 80078cc:	0119      	lsls	r1, r3, #4
 80078ce:	4835      	ldr	r0, [pc, #212]	@ (80079a4 <Meas_Init+0x1fc>)
 80078d0:	5088      	str	r0, [r1, r2]
 80078d2:	4933      	ldr	r1, [pc, #204]	@ (80079a0 <Meas_Init+0x1f8>)
 80078d4:	011a      	lsls	r2, r3, #4
 80078d6:	188a      	adds	r2, r1, r2
 80078d8:	3204      	adds	r2, #4
 80078da:	4933      	ldr	r1, [pc, #204]	@ (80079a8 <Meas_Init+0x200>)
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	4930      	ldr	r1, [pc, #192]	@ (80079a0 <Meas_Init+0x1f8>)
 80078e0:	011a      	lsls	r2, r3, #4
 80078e2:	188a      	adds	r2, r1, r2
 80078e4:	3208      	adds	r2, #8
 80078e6:	4931      	ldr	r1, [pc, #196]	@ (80079ac <Meas_Init+0x204>)
 80078e8:	6011      	str	r1, [r2, #0]
 80078ea:	4a2d      	ldr	r2, [pc, #180]	@ (80079a0 <Meas_Init+0x1f8>)
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	18d3      	adds	r3, r2, r3
 80078f0:	330c      	adds	r3, #12
 80078f2:	1c22      	adds	r2, r4, #0
 80078f4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80078f6:	197b      	adds	r3, r7, r5
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	197a      	adds	r2, r7, r5
 80078fc:	1c59      	adds	r1, r3, #1
 80078fe:	7011      	strb	r1, [r2, #0]
 8007900:	4a1c      	ldr	r2, [pc, #112]	@ (8007974 <Meas_Init+0x1cc>)
 8007902:	7854      	ldrb	r4, [r2, #1]
 8007904:	4a26      	ldr	r2, [pc, #152]	@ (80079a0 <Meas_Init+0x1f8>)
 8007906:	0119      	lsls	r1, r3, #4
 8007908:	4829      	ldr	r0, [pc, #164]	@ (80079b0 <Meas_Init+0x208>)
 800790a:	5088      	str	r0, [r1, r2]
 800790c:	4924      	ldr	r1, [pc, #144]	@ (80079a0 <Meas_Init+0x1f8>)
 800790e:	011a      	lsls	r2, r3, #4
 8007910:	188a      	adds	r2, r1, r2
 8007912:	3204      	adds	r2, #4
 8007914:	4927      	ldr	r1, [pc, #156]	@ (80079b4 <Meas_Init+0x20c>)
 8007916:	6011      	str	r1, [r2, #0]
 8007918:	4921      	ldr	r1, [pc, #132]	@ (80079a0 <Meas_Init+0x1f8>)
 800791a:	011a      	lsls	r2, r3, #4
 800791c:	188a      	adds	r2, r1, r2
 800791e:	3208      	adds	r2, #8
 8007920:	4925      	ldr	r1, [pc, #148]	@ (80079b8 <Meas_Init+0x210>)
 8007922:	6011      	str	r1, [r2, #0]
 8007924:	4a1e      	ldr	r2, [pc, #120]	@ (80079a0 <Meas_Init+0x1f8>)
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	18d3      	adds	r3, r2, r3
 800792a:	330c      	adds	r3, #12
 800792c:	1c22      	adds	r2, r4, #0
 800792e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8007930:	197b      	adds	r3, r7, r5
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	197a      	adds	r2, r7, r5
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	7011      	strb	r1, [r2, #0]
 800793a:	4a0e      	ldr	r2, [pc, #56]	@ (8007974 <Meas_Init+0x1cc>)
 800793c:	7894      	ldrb	r4, [r2, #2]
 800793e:	4a18      	ldr	r2, [pc, #96]	@ (80079a0 <Meas_Init+0x1f8>)
 8007940:	0119      	lsls	r1, r3, #4
 8007942:	481e      	ldr	r0, [pc, #120]	@ (80079bc <Meas_Init+0x214>)
 8007944:	5088      	str	r0, [r1, r2]
 8007946:	4916      	ldr	r1, [pc, #88]	@ (80079a0 <Meas_Init+0x1f8>)
 8007948:	011a      	lsls	r2, r3, #4
 800794a:	188a      	adds	r2, r1, r2
 800794c:	3204      	adds	r2, #4
 800794e:	491c      	ldr	r1, [pc, #112]	@ (80079c0 <Meas_Init+0x218>)
 8007950:	6011      	str	r1, [r2, #0]
 8007952:	4913      	ldr	r1, [pc, #76]	@ (80079a0 <Meas_Init+0x1f8>)
 8007954:	011a      	lsls	r2, r3, #4
 8007956:	188a      	adds	r2, r1, r2
 8007958:	3208      	adds	r2, #8
 800795a:	491a      	ldr	r1, [pc, #104]	@ (80079c4 <Meas_Init+0x21c>)
 800795c:	6011      	str	r1, [r2, #0]
 800795e:	4a10      	ldr	r2, [pc, #64]	@ (80079a0 <Meas_Init+0x1f8>)
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	18d3      	adds	r3, r2, r3
 8007964:	330c      	adds	r3, #12
 8007966:	1c22      	adds	r2, r4, #0
 8007968:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 800796a:	46c0      	nop			@ (mov r8, r8)
 800796c:	46bd      	mov	sp, r7
 800796e:	b012      	add	sp, #72	@ 0x48
 8007970:	bdb0      	pop	{r4, r5, r7, pc}
 8007972:	46c0      	nop			@ (mov r8, r8)
 8007974:	20000f60 	.word	0x20000f60
 8007978:	08022354 	.word	0x08022354
 800797c:	08022384 	.word	0x08022384
 8007980:	20000f64 	.word	0x20000f64
 8007984:	08022388 	.word	0x08022388
 8007988:	080223b4 	.word	0x080223b4
 800798c:	080223b8 	.word	0x080223b8
 8007990:	080223d4 	.word	0x080223d4
 8007994:	50000400 	.word	0x50000400
 8007998:	080223ec 	.word	0x080223ec
 800799c:	08022410 	.word	0x08022410
 80079a0:	20000f30 	.word	0x20000f30
 80079a4:	08007701 	.word	0x08007701
 80079a8:	08007711 	.word	0x08007711
 80079ac:	20000f2c 	.word	0x20000f2c
 80079b0:	08007731 	.word	0x08007731
 80079b4:	08007741 	.word	0x08007741
 80079b8:	20000f2d 	.word	0x20000f2d
 80079bc:	08007759 	.word	0x08007759
 80079c0:	08007763 	.word	0x08007763
 80079c4:	20000f2e 	.word	0x20000f2e

080079c8 <StartMeasurements>:

void StartMeasurements(void) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80079cc:	4b10      	ldr	r3, [pc, #64]	@ (8007a10 <StartMeasurements+0x48>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	e015      	b.n	8007a00 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80079d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a10 <StartMeasurements+0x48>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	4a0e      	ldr	r2, [pc, #56]	@ (8007a14 <StartMeasurements+0x4c>)
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	18d3      	adds	r3, r2, r3
 80079de:	330c      	adds	r3, #12
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d006      	beq.n	80079f4 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80079e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a10 <StartMeasurements+0x48>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	001a      	movs	r2, r3
 80079ec:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <StartMeasurements+0x4c>)
 80079ee:	0112      	lsls	r2, r2, #4
 80079f0:	58d3      	ldr	r3, [r2, r3]
 80079f2:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80079f4:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <StartMeasurements+0x48>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <StartMeasurements+0x48>)
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	4b03      	ldr	r3, [pc, #12]	@ (8007a10 <StartMeasurements+0x48>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d9e5      	bls.n	80079d4 <StartMeasurements+0xc>
    }
  }
}
 8007a08:	46c0      	nop			@ (mov r8, r8)
 8007a0a:	46c0      	nop			@ (mov r8, r8)
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000f68 	.word	0x20000f68
 8007a14:	20000f30 	.word	0x20000f30

08007a18 <Meas_Test>:

void Meas_Test(){
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007a1c:	4b23      	ldr	r3, [pc, #140]	@ (8007aac <Meas_Test+0x94>)
 8007a1e:	78db      	ldrb	r3, [r3, #3]
 8007a20:	2201      	movs	r2, #1
 8007a22:	4053      	eors	r3, r2
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <Meas_Test+0x16>
    ESP_WakeTest();
 8007a2a:	f7fd fad1 	bl	8004fd0 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007aac <Meas_Test+0x94>)
 8007a30:	789b      	ldrb	r3, [r3, #2]
 8007a32:	2201      	movs	r2, #1
 8007a34:	4053      	eors	r3, r2
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01b      	beq.n	8007a74 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007a3c:	f7ff fe97 	bl	800776e <MIC_IsTestMeasurementDoneWrapper>
 8007a40:	1e03      	subs	r3, r0, #0
 8007a42:	d00b      	beq.n	8007a5c <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8007a44:	4b19      	ldr	r3, [pc, #100]	@ (8007aac <Meas_Test+0x94>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007a4a:	23fa      	movs	r3, #250	@ 0xfa
 8007a4c:	011a      	lsls	r2, r3, #4
 8007a4e:	4918      	ldr	r1, [pc, #96]	@ (8007ab0 <Meas_Test+0x98>)
 8007a50:	23fa      	movs	r3, #250	@ 0xfa
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	0018      	movs	r0, r3
 8007a56:	f004 fa73 	bl	800bf40 <SetStatusLED>
 8007a5a:	e00b      	b.n	8007a74 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007a5c:	f003 fbd4 	bl	800b208 <micSettlingComplete>
 8007a60:	1e03      	subs	r3, r0, #0
 8007a62:	d007      	beq.n	8007a74 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007a64:	23fa      	movs	r3, #250	@ 0xfa
 8007a66:	011a      	lsls	r2, r3, #4
 8007a68:	23fa      	movs	r3, #250	@ 0xfa
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	4810      	ldr	r0, [pc, #64]	@ (8007ab0 <Meas_Test+0x98>)
 8007a6e:	0019      	movs	r1, r3
 8007a70:	f004 fa66 	bl	800bf40 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8007a74:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <Meas_Test+0x94>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d013      	beq.n	8007aa4 <Meas_Test+0x8c>
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <Meas_Test+0x94>)
 8007a7e:	785b      	ldrb	r3, [r3, #1]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00f      	beq.n	8007aa4 <Meas_Test+0x8c>
 8007a84:	4b09      	ldr	r3, [pc, #36]	@ (8007aac <Meas_Test+0x94>)
 8007a86:	78db      	ldrb	r3, [r3, #3]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <Meas_Test+0x8c>
 8007a8c:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <Meas_Test+0x94>)
 8007a8e:	789b      	ldrb	r3, [r3, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d007      	beq.n	8007aa4 <Meas_Test+0x8c>
    Info("Test completed");
 8007a94:	4a07      	ldr	r2, [pc, #28]	@ (8007ab4 <Meas_Test+0x9c>)
 8007a96:	4b08      	ldr	r3, [pc, #32]	@ (8007ab8 <Meas_Test+0xa0>)
 8007a98:	0019      	movs	r1, r3
 8007a9a:	2002      	movs	r0, #2
 8007a9c:	f005 f9ee 	bl	800ce7c <CreateLine>
    SetTestDone();
 8007aa0:	f7ff fb6c 	bl	800717c <SetTestDone>
  }
}
 8007aa4:	46c0      	nop			@ (mov r8, r8)
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	46c0      	nop			@ (mov r8, r8)
 8007aac:	20000f64 	.word	0x20000f64
 8007ab0:	00000bb8 	.word	0x00000bb8
 8007ab4:	08022414 	.word	0x08022414
 8007ab8:	08022410 	.word	0x08022410

08007abc <ResetMeasurements>:
void ResetMeasurements(void) {
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8007aec <ResetMeasurements+0x30>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8007ac6:	4b09      	ldr	r3, [pc, #36]	@ (8007aec <ResetMeasurements+0x30>)
 8007ac8:	2200      	movs	r2, #0
 8007aca:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <ResetMeasurements+0x30>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8007ad2:	4b06      	ldr	r3, [pc, #24]	@ (8007aec <ResetMeasurements+0x30>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8007ad8:	4b04      	ldr	r3, [pc, #16]	@ (8007aec <ResetMeasurements+0x30>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8007ade:	4b03      	ldr	r3, [pc, #12]	@ (8007aec <ResetMeasurements+0x30>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	739a      	strb	r2, [r3, #14]
//  MeasurementCtx.MIC_measurementDone = false;
}
 8007ae4:	46c0      	nop			@ (mov r8, r8)
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	20000f20 	.word	0x20000f20

08007af0 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007af4:	4b18      	ldr	r3, [pc, #96]	@ (8007b58 <MeasurementsCompleted+0x68>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e024      	b.n	8007b46 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007afc:	4b16      	ldr	r3, [pc, #88]	@ (8007b58 <MeasurementsCompleted+0x68>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	4a16      	ldr	r2, [pc, #88]	@ (8007b5c <MeasurementsCompleted+0x6c>)
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	18d3      	adds	r3, r2, r3
 8007b06:	330c      	adds	r3, #12
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d015      	beq.n	8007b3a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8007b0e:	4b12      	ldr	r3, [pc, #72]	@ (8007b58 <MeasurementsCompleted+0x68>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	4a12      	ldr	r2, [pc, #72]	@ (8007b5c <MeasurementsCompleted+0x6c>)
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	18d3      	adds	r3, r2, r3
 8007b18:	3304      	adds	r3, #4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4798      	blx	r3
 8007b1e:	1e03      	subs	r3, r0, #0
 8007b20:	d009      	beq.n	8007b36 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8007b22:	4b0d      	ldr	r3, [pc, #52]	@ (8007b58 <MeasurementsCompleted+0x68>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	4a0d      	ldr	r2, [pc, #52]	@ (8007b5c <MeasurementsCompleted+0x6c>)
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	18d3      	adds	r3, r2, r3
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2201      	movs	r2, #1
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e001      	b.n	8007b3a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e00a      	b.n	8007b50 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007b3a:	4b07      	ldr	r3, [pc, #28]	@ (8007b58 <MeasurementsCompleted+0x68>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	4b05      	ldr	r3, [pc, #20]	@ (8007b58 <MeasurementsCompleted+0x68>)
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	4b04      	ldr	r3, [pc, #16]	@ (8007b58 <MeasurementsCompleted+0x68>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d9d6      	bls.n	8007afc <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8007b4e:	2301      	movs	r3, #1
}
 8007b50:	0018      	movs	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	46c0      	nop			@ (mov r8, r8)
 8007b58:	20000f68 	.word	0x20000f68
 8007b5c:	20000f30 	.word	0x20000f30

08007b60 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8007b60:	b590      	push	{r4, r7, lr}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8007b66:	4b7d      	ldr	r3, [pc, #500]	@ (8007d5c <Mic_Upkeep+0x1fc>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d100      	bne.n	8007b70 <Mic_Upkeep+0x10>
 8007b6e:	e0c0      	b.n	8007cf2 <Mic_Upkeep+0x192>
 8007b70:	dd00      	ble.n	8007b74 <Mic_Upkeep+0x14>
 8007b72:	e0dd      	b.n	8007d30 <Mic_Upkeep+0x1d0>
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d037      	beq.n	8007be8 <Mic_Upkeep+0x88>
 8007b78:	dd00      	ble.n	8007b7c <Mic_Upkeep+0x1c>
 8007b7a:	e0d9      	b.n	8007d30 <Mic_Upkeep+0x1d0>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <Mic_Upkeep+0x26>
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d014      	beq.n	8007bae <Mic_Upkeep+0x4e>
 8007b84:	e0d4      	b.n	8007d30 <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007b86:	2001      	movs	r0, #1
 8007b88:	f003 fb62 	bl	800b250 <enableMicrophone>
 8007b8c:	0003      	movs	r3, r0
 8007b8e:	001a      	movs	r2, r3
 8007b90:	2301      	movs	r3, #1
 8007b92:	4053      	eors	r3, r2
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8007b9a:	4a71      	ldr	r2, [pc, #452]	@ (8007d60 <Mic_Upkeep+0x200>)
 8007b9c:	4b71      	ldr	r3, [pc, #452]	@ (8007d64 <Mic_Upkeep+0x204>)
 8007b9e:	21d4      	movs	r1, #212	@ 0xd4
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f005 fa1f 	bl	800cfe4 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8007ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8007d5c <Mic_Upkeep+0x1fc>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 8007bac:	e0cf      	b.n	8007d4e <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 8007bae:	f003 fb2b 	bl	800b208 <micSettlingComplete>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d105      	bne.n	8007bc2 <Mic_Upkeep+0x62>
 8007bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8007d68 <Mic_Upkeep+0x208>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d100      	bne.n	8007bc2 <Mic_Upkeep+0x62>
 8007bc0:	e0c0      	b.n	8007d44 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 8007bc2:	f003 fbaf 	bl	800b324 <startSPLcalculation>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	001a      	movs	r2, r3
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4053      	eors	r3, r2
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 8007bd4:	4a62      	ldr	r2, [pc, #392]	@ (8007d60 <Mic_Upkeep+0x200>)
 8007bd6:	4b63      	ldr	r3, [pc, #396]	@ (8007d64 <Mic_Upkeep+0x204>)
 8007bd8:	21e0      	movs	r1, #224	@ 0xe0
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f005 fa02 	bl	800cfe4 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8007be0:	4b5e      	ldr	r3, [pc, #376]	@ (8007d5c <Mic_Upkeep+0x1fc>)
 8007be2:	2202      	movs	r2, #2
 8007be4:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 8007be6:	e0ad      	b.n	8007d44 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 8007be8:	4b60      	ldr	r3, [pc, #384]	@ (8007d6c <Mic_Upkeep+0x20c>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	2101      	movs	r1, #1
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f003 f9ec 	bl	800afcc <getSoundData>
 8007bf4:	1e03      	subs	r3, r0, #0
 8007bf6:	d100      	bne.n	8007bfa <Mic_Upkeep+0x9a>
 8007bf8:	e0a6      	b.n	8007d48 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 8007bfa:	f003 fae5 	bl	800b1c8 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8007d6c <Mic_Upkeep+0x20c>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007c04:	4b59      	ldr	r3, [pc, #356]	@ (8007d6c <Mic_Upkeep+0x20c>)
 8007c06:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007c08:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007c0a:	4b58      	ldr	r3, [pc, #352]	@ (8007d6c <Mic_Upkeep+0x20c>)
 8007c0c:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007c0e:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8007c10:	4b56      	ldr	r3, [pc, #344]	@ (8007d6c <Mic_Upkeep+0x20c>)
 8007c12:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007c14:	4856      	ldr	r0, [pc, #344]	@ (8007d70 <Mic_Upkeep+0x210>)
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	0023      	movs	r3, r4
 8007c1a:	f000 faf5 	bl	8008208 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8007c1e:	4b53      	ldr	r3, [pc, #332]	@ (8007d6c <Mic_Upkeep+0x20c>)
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	001a      	movs	r2, r3
 8007c24:	4b51      	ldr	r3, [pc, #324]	@ (8007d6c <Mic_Upkeep+0x20c>)
 8007c26:	785b      	ldrb	r3, [r3, #1]
 8007c28:	4952      	ldr	r1, [pc, #328]	@ (8007d74 <Mic_Upkeep+0x214>)
 8007c2a:	0038      	movs	r0, r7
 8007c2c:	f016 fc12 	bl	801e454 <siprintf>

      dBValue = atof(dBbuffer);
 8007c30:	003b      	movs	r3, r7
 8007c32:	0018      	movs	r0, r3
 8007c34:	f014 ffbe 	bl	801cbb4 <atof>
 8007c38:	0002      	movs	r2, r0
 8007c3a:	000b      	movs	r3, r1
 8007c3c:	0010      	movs	r0, r2
 8007c3e:	0019      	movs	r1, r3
 8007c40:	f7fb fc58 	bl	80034f4 <__aeabi_d2f>
 8007c44:	1c02      	adds	r2, r0, #0
 8007c46:	4b4c      	ldr	r3, [pc, #304]	@ (8007d78 <Mic_Upkeep+0x218>)
 8007c48:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8007c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007d78 <Mic_Upkeep+0x218>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	494b      	ldr	r1, [pc, #300]	@ (8007d7c <Mic_Upkeep+0x21c>)
 8007c50:	1c18      	adds	r0, r3, #0
 8007c52:	f7f9 f9a5 	bl	8000fa0 <__aeabi_fmul>
 8007c56:	1c03      	adds	r3, r0, #0
 8007c58:	1c18      	adds	r0, r3, #0
 8007c5a:	f7fb fc03 	bl	8003464 <__aeabi_f2d>
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4b47      	ldr	r3, [pc, #284]	@ (8007d80 <Mic_Upkeep+0x220>)
 8007c62:	f7f9 fd43 	bl	80016ec <__aeabi_dadd>
 8007c66:	0002      	movs	r2, r0
 8007c68:	000b      	movs	r3, r1
 8007c6a:	0010      	movs	r0, r2
 8007c6c:	0019      	movs	r1, r3
 8007c6e:	f7fb fb6b 	bl	8003348 <__aeabi_d2iz>
 8007c72:	0003      	movs	r3, r0
 8007c74:	0018      	movs	r0, r3
 8007c76:	f7fb fba3 	bl	80033c0 <__aeabi_i2d>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4b41      	ldr	r3, [pc, #260]	@ (8007d84 <Mic_Upkeep+0x224>)
 8007c7e:	f7fa f899 	bl	8001db4 <__aeabi_ddiv>
 8007c82:	0002      	movs	r2, r0
 8007c84:	000b      	movs	r3, r1
 8007c86:	0010      	movs	r0, r2
 8007c88:	0019      	movs	r1, r3
 8007c8a:	f7fb fc33 	bl	80034f4 <__aeabi_d2f>
 8007c8e:	1c02      	adds	r2, r0, #0
 8007c90:	4b39      	ldr	r3, [pc, #228]	@ (8007d78 <Mic_Upkeep+0x218>)
 8007c92:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8007c94:	f000 f966 	bl	8007f64 <MIC_Print>
      if (!startSPLcalculation()) {
 8007c98:	f003 fb44 	bl	800b324 <startSPLcalculation>
 8007c9c:	0003      	movs	r3, r0
 8007c9e:	001a      	movs	r2, r3
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4053      	eors	r3, r2
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 8007caa:	4a2d      	ldr	r2, [pc, #180]	@ (8007d60 <Mic_Upkeep+0x200>)
 8007cac:	4b2d      	ldr	r3, [pc, #180]	@ (8007d64 <Mic_Upkeep+0x204>)
 8007cae:	21f9      	movs	r1, #249	@ 0xf9
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f005 f997 	bl	800cfe4 <errorHandler>
      }
      if (!enableMicrophone(false))
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	f003 faca 	bl	800b250 <enableMicrophone>
 8007cbc:	0003      	movs	r3, r0
 8007cbe:	001a      	movs	r2, r3
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4053      	eors	r3, r2
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007cca:	4a25      	ldr	r2, [pc, #148]	@ (8007d60 <Mic_Upkeep+0x200>)
 8007ccc:	4b25      	ldr	r3, [pc, #148]	@ (8007d64 <Mic_Upkeep+0x204>)
 8007cce:	21fd      	movs	r1, #253	@ 0xfd
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f005 f987 	bl	800cfe4 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 8007cd6:	f005 fc6d 	bl	800d5b4 <HAL_GetTick>
 8007cda:	0003      	movs	r3, r0
 8007cdc:	22fa      	movs	r2, #250	@ 0xfa
 8007cde:	0092      	lsls	r2, r2, #2
 8007ce0:	189a      	adds	r2, r3, r2
 8007ce2:	4b29      	ldr	r3, [pc, #164]	@ (8007d88 <Mic_Upkeep+0x228>)
 8007ce4:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8007ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d5c <Mic_Upkeep+0x1fc>)
 8007ce8:	2203      	movs	r2, #3
 8007cea:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8007cec:	f004 fa20 	bl	800c130 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 8007cf0:	e02a      	b.n	8007d48 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007cf2:	4b25      	ldr	r3, [pc, #148]	@ (8007d88 <Mic_Upkeep+0x228>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f005 f86a 	bl	800cdd0 <TimestampIsReached>
 8007cfc:	1e03      	subs	r3, r0, #0
 8007cfe:	d025      	beq.n	8007d4c <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 8007d00:	2001      	movs	r0, #1
 8007d02:	f003 faa5 	bl	800b250 <enableMicrophone>
 8007d06:	0003      	movs	r3, r0
 8007d08:	001a      	movs	r2, r3
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4053      	eors	r3, r2
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d007      	beq.n	8007d24 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007d14:	4a12      	ldr	r2, [pc, #72]	@ (8007d60 <Mic_Upkeep+0x200>)
 8007d16:	230c      	movs	r3, #12
 8007d18:	33ff      	adds	r3, #255	@ 0xff
 8007d1a:	0019      	movs	r1, r3
 8007d1c:	4b11      	ldr	r3, [pc, #68]	@ (8007d64 <Mic_Upkeep+0x204>)
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f005 f960 	bl	800cfe4 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007d24:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <Mic_Upkeep+0x1fc>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007d2a:	f004 f9e9 	bl	800c100 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 8007d2e:	e00d      	b.n	8007d4c <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 8007d30:	4a16      	ldr	r2, [pc, #88]	@ (8007d8c <Mic_Upkeep+0x22c>)
 8007d32:	4b17      	ldr	r3, [pc, #92]	@ (8007d90 <Mic_Upkeep+0x230>)
 8007d34:	0019      	movs	r1, r3
 8007d36:	2003      	movs	r0, #3
 8007d38:	f005 f8a0 	bl	800ce7c <CreateLine>
    MicState = MIC_STATE_INIT;
 8007d3c:	4b07      	ldr	r3, [pc, #28]	@ (8007d5c <Mic_Upkeep+0x1fc>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 8007d42:	e004      	b.n	8007d4e <Mic_Upkeep+0x1ee>
    break;
 8007d44:	46c0      	nop			@ (mov r8, r8)
 8007d46:	e002      	b.n	8007d4e <Mic_Upkeep+0x1ee>
    break;
 8007d48:	46c0      	nop			@ (mov r8, r8)
 8007d4a:	e000      	b.n	8007d4e <Mic_Upkeep+0x1ee>
    break;
 8007d4c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007d4e:	4b03      	ldr	r3, [pc, #12]	@ (8007d5c <Mic_Upkeep+0x1fc>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
}
 8007d52:	0018      	movs	r0, r3
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b003      	add	sp, #12
 8007d58:	bd90      	pop	{r4, r7, pc}
 8007d5a:	46c0      	nop			@ (mov r8, r8)
 8007d5c:	20000f86 	.word	0x20000f86
 8007d60:	08022424 	.word	0x08022424
 8007d64:	08023238 	.word	0x08023238
 8007d68:	200012c4 	.word	0x200012c4
 8007d6c:	20000f74 	.word	0x20000f74
 8007d70:	08022440 	.word	0x08022440
 8007d74:	0802246c 	.word	0x0802246c
 8007d78:	20000fb8 	.word	0x20000fb8
 8007d7c:	42c80000 	.word	0x42c80000
 8007d80:	3fe00000 	.word	0x3fe00000
 8007d84:	40590000 	.word	0x40590000
 8007d88:	20000f70 	.word	0x20000f70
 8007d8c:	08022474 	.word	0x08022474
 8007d90:	080223b4 	.word	0x080223b4

08007d94 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007d94:	b5b0      	push	{r4, r5, r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b06      	cmp	r3, #6
 8007da0:	d868      	bhi.n	8007e74 <Meas_Upkeep+0xe0>
 8007da2:	009a      	lsls	r2, r3, #2
 8007da4:	4b3a      	ldr	r3, [pc, #232]	@ (8007e90 <Meas_Upkeep+0xfc>)
 8007da6:	18d3      	adds	r3, r2, r3
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007dac:	4a39      	ldr	r2, [pc, #228]	@ (8007e94 <Meas_Upkeep+0x100>)
 8007dae:	4b3a      	ldr	r3, [pc, #232]	@ (8007e98 <Meas_Upkeep+0x104>)
 8007db0:	0019      	movs	r1, r3
 8007db2:	2003      	movs	r0, #3
 8007db4:	f005 f862 	bl	800ce7c <CreateLine>
    break;
 8007db8:	e063      	b.n	8007e82 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007dba:	f7ff fe7f 	bl	8007abc <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8007dbe:	4b33      	ldr	r3, [pc, #204]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	701a      	strb	r2, [r3, #0]
    break;
 8007dc4:	e05d      	b.n	8007e82 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8007dc6:	f7ff fdff 	bl	80079c8 <StartMeasurements>
    SetMeasurementIndicator();
 8007dca:	f004 f96b 	bl	800c0a4 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8007dce:	4b2f      	ldr	r3, [pc, #188]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	701a      	strb	r2, [r3, #0]
   break;
 8007dd4:	e055      	b.n	8007e82 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8007dd6:	f7ff fe8b 	bl	8007af0 <MeasurementsCompleted>
 8007dda:	1e03      	subs	r3, r0, #0
 8007ddc:	d04e      	beq.n	8007e7c <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007dde:	4b2b      	ldr	r3, [pc, #172]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007de0:	2203      	movs	r2, #3
 8007de2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007de4:	e04a      	b.n	8007e7c <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8007de6:	4a2d      	ldr	r2, [pc, #180]	@ (8007e9c <Meas_Upkeep+0x108>)
 8007de8:	4b2b      	ldr	r3, [pc, #172]	@ (8007e98 <Meas_Upkeep+0x104>)
 8007dea:	0019      	movs	r1, r3
 8007dec:	2003      	movs	r0, #3
 8007dee:	f005 f845 	bl	800ce7c <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007df2:	4b2b      	ldr	r3, [pc, #172]	@ (8007ea0 <Meas_Upkeep+0x10c>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	4a2b      	ldr	r2, [pc, #172]	@ (8007ea4 <Meas_Upkeep+0x110>)
 8007df8:	4927      	ldr	r1, [pc, #156]	@ (8007e98 <Meas_Upkeep+0x104>)
 8007dfa:	2003      	movs	r0, #3
 8007dfc:	f005 f83e 	bl	800ce7c <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007e00:	4b27      	ldr	r3, [pc, #156]	@ (8007ea0 <Meas_Upkeep+0x10c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	1c18      	adds	r0, r3, #0
 8007e06:	f7fb fb2d 	bl	8003464 <__aeabi_f2d>
 8007e0a:	0004      	movs	r4, r0
 8007e0c:	000d      	movs	r5, r1
 8007e0e:	4b24      	ldr	r3, [pc, #144]	@ (8007ea0 <Meas_Upkeep+0x10c>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	1c18      	adds	r0, r3, #0
 8007e14:	f7fb fb26 	bl	8003464 <__aeabi_f2d>
 8007e18:	0002      	movs	r2, r0
 8007e1a:	000b      	movs	r3, r1
 8007e1c:	4822      	ldr	r0, [pc, #136]	@ (8007ea8 <Meas_Upkeep+0x114>)
 8007e1e:	491e      	ldr	r1, [pc, #120]	@ (8007e98 <Meas_Upkeep+0x104>)
 8007e20:	9202      	str	r2, [sp, #8]
 8007e22:	9303      	str	r3, [sp, #12]
 8007e24:	9400      	str	r4, [sp, #0]
 8007e26:	9501      	str	r5, [sp, #4]
 8007e28:	0002      	movs	r2, r0
 8007e2a:	2003      	movs	r0, #3
 8007e2c:	f005 f826 	bl	800ce7c <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007e30:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea0 <Meas_Upkeep+0x10c>)
 8007e32:	6858      	ldr	r0, [r3, #4]
 8007e34:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea0 <Meas_Upkeep+0x10c>)
 8007e36:	6819      	ldr	r1, [r3, #0]
 8007e38:	4b19      	ldr	r3, [pc, #100]	@ (8007ea0 <Meas_Upkeep+0x10c>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	001a      	movs	r2, r3
 8007e40:	f7fb fd4a 	bl	80038d8 <setMeasurement>
    ResetMeasurementIndicator();
 8007e44:	f004 f946 	bl	800c0d4 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007e48:	f005 fbb4 	bl	800d5b4 <HAL_GetTick>
 8007e4c:	0003      	movs	r3, r0
 8007e4e:	4a17      	ldr	r2, [pc, #92]	@ (8007eac <Meas_Upkeep+0x118>)
 8007e50:	189a      	adds	r2, r3, r2
 8007e52:	4b17      	ldr	r3, [pc, #92]	@ (8007eb0 <Meas_Upkeep+0x11c>)
 8007e54:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007e56:	4b0d      	ldr	r3, [pc, #52]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007e58:	2206      	movs	r2, #6
 8007e5a:	701a      	strb	r2, [r3, #0]
    break;
 8007e5c:	e011      	b.n	8007e82 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007e5e:	4b14      	ldr	r3, [pc, #80]	@ (8007eb0 <Meas_Upkeep+0x11c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	0018      	movs	r0, r3
 8007e64:	f004 ffb4 	bl	800cdd0 <TimestampIsReached>
 8007e68:	1e03      	subs	r3, r0, #0
 8007e6a:	d009      	beq.n	8007e80 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007e6c:	4b07      	ldr	r3, [pc, #28]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007e72:	e005      	b.n	8007e80 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007e74:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]
    break;
 8007e7a:	e002      	b.n	8007e82 <Meas_Upkeep+0xee>
    break;
 8007e7c:	46c0      	nop			@ (mov r8, r8)
 8007e7e:	e000      	b.n	8007e82 <Meas_Upkeep+0xee>
    break;
 8007e80:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007e82:	4b02      	ldr	r3, [pc, #8]	@ (8007e8c <Meas_Upkeep+0xf8>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
}
 8007e86:	0018      	movs	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e8c:	20000f87 	.word	0x20000f87
 8007e90:	0802321c 	.word	0x0802321c
 8007e94:	08022494 	.word	0x08022494
 8007e98:	080223b4 	.word	0x080223b4
 8007e9c:	080224b4 	.word	0x080224b4
 8007ea0:	20000f20 	.word	0x20000f20
 8007ea4:	080224c8 	.word	0x080224c8
 8007ea8:	080224e0 	.word	0x080224e0
 8007eac:	00002710 	.word	0x00002710
 8007eb0:	20000f6c 	.word	0x20000f6c

08007eb4 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007eb4:	b590      	push	{r4, r7, lr}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007ebe:	240f      	movs	r4, #15
 8007ec0:	193b      	adds	r3, r7, r4
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007ec6:	4b20      	ldr	r3, [pc, #128]	@ (8007f48 <Meas_SetEnabledSensors+0x94>)
 8007ec8:	1d3a      	adds	r2, r7, #4
 8007eca:	6812      	ldr	r2, [r2, #0]
 8007ecc:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007ece:	193b      	adds	r3, r7, r4
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	193a      	adds	r2, r7, r4
 8007ed4:	1c59      	adds	r1, r3, #1
 8007ed6:	7011      	strb	r1, [r2, #0]
 8007ed8:	0018      	movs	r0, r3
 8007eda:	1d3b      	adds	r3, r7, #4
 8007edc:	7819      	ldrb	r1, [r3, #0]
 8007ede:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <Meas_SetEnabledSensors+0x98>)
 8007ee0:	0103      	lsls	r3, r0, #4
 8007ee2:	18d3      	adds	r3, r2, r3
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	1c0a      	adds	r2, r1, #0
 8007ee8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007eea:	193b      	adds	r3, r7, r4
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	193a      	adds	r2, r7, r4
 8007ef0:	1c59      	adds	r1, r3, #1
 8007ef2:	7011      	strb	r1, [r2, #0]
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	1d3b      	adds	r3, r7, #4
 8007ef8:	7859      	ldrb	r1, [r3, #1]
 8007efa:	4a14      	ldr	r2, [pc, #80]	@ (8007f4c <Meas_SetEnabledSensors+0x98>)
 8007efc:	0103      	lsls	r3, r0, #4
 8007efe:	18d3      	adds	r3, r2, r3
 8007f00:	330c      	adds	r3, #12
 8007f02:	1c0a      	adds	r2, r1, #0
 8007f04:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007f06:	193b      	adds	r3, r7, r4
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	193a      	adds	r2, r7, r4
 8007f0c:	1c59      	adds	r1, r3, #1
 8007f0e:	7011      	strb	r1, [r2, #0]
 8007f10:	0018      	movs	r0, r3
 8007f12:	1d3b      	adds	r3, r7, #4
 8007f14:	7899      	ldrb	r1, [r3, #2]
 8007f16:	4a0d      	ldr	r2, [pc, #52]	@ (8007f4c <Meas_SetEnabledSensors+0x98>)
 8007f18:	0103      	lsls	r3, r0, #4
 8007f1a:	18d3      	adds	r3, r2, r3
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	1c0a      	adds	r2, r1, #0
 8007f20:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007f22:	193b      	adds	r3, r7, r4
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	193a      	adds	r2, r7, r4
 8007f28:	1c59      	adds	r1, r3, #1
 8007f2a:	7011      	strb	r1, [r2, #0]
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	1d3b      	adds	r3, r7, #4
 8007f30:	78d9      	ldrb	r1, [r3, #3]
 8007f32:	4a06      	ldr	r2, [pc, #24]	@ (8007f4c <Meas_SetEnabledSensors+0x98>)
 8007f34:	0103      	lsls	r3, r0, #4
 8007f36:	18d3      	adds	r3, r2, r3
 8007f38:	330c      	adds	r3, #12
 8007f3a:	1c0a      	adds	r2, r1, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
}
 8007f3e:	46c0      	nop			@ (mov r8, r8)
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b005      	add	sp, #20
 8007f44:	bd90      	pop	{r4, r7, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	20000f60 	.word	0x20000f60
 8007f4c:	20000f30 	.word	0x20000f30

08007f50 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007f54:	4b02      	ldr	r3, [pc, #8]	@ (8007f60 <SetESPMeasurementDone+0x10>)
 8007f56:	2201      	movs	r2, #1
 8007f58:	70da      	strb	r2, [r3, #3]
}
 8007f5a:	46c0      	nop			@ (mov r8, r8)
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000f64 	.word	0x20000f64

08007f64 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007f6a:	4b81      	ldr	r3, [pc, #516]	@ (8008170 <MIC_Print+0x20c>)
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b81      	ldr	r3, [pc, #516]	@ (8008174 <MIC_Print+0x210>)
 8007f70:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007f72:	4b81      	ldr	r3, [pc, #516]	@ (8008178 <MIC_Print+0x214>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b09      	cmp	r3, #9
 8007f78:	d80e      	bhi.n	8007f98 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8008178 <MIC_Print+0x214>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	001a      	movs	r2, r3
 8007f80:	4b7c      	ldr	r3, [pc, #496]	@ (8008174 <MIC_Print+0x210>)
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	4b7d      	ldr	r3, [pc, #500]	@ (800817c <MIC_Print+0x218>)
 8007f86:	0092      	lsls	r2, r2, #2
 8007f88:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007f8a:	4b7b      	ldr	r3, [pc, #492]	@ (8008178 <MIC_Print+0x214>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	4b79      	ldr	r3, [pc, #484]	@ (8008178 <MIC_Print+0x214>)
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	e013      	b.n	8007fc0 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007f98:	4b77      	ldr	r3, [pc, #476]	@ (8008178 <MIC_Print+0x214>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007f9e:	4b76      	ldr	r3, [pc, #472]	@ (8008178 <MIC_Print+0x214>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	001a      	movs	r2, r3
 8007fa4:	4b73      	ldr	r3, [pc, #460]	@ (8008174 <MIC_Print+0x210>)
 8007fa6:	6819      	ldr	r1, [r3, #0]
 8007fa8:	4b74      	ldr	r3, [pc, #464]	@ (800817c <MIC_Print+0x218>)
 8007faa:	0092      	lsls	r2, r2, #2
 8007fac:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007fae:	4b72      	ldr	r3, [pc, #456]	@ (8008178 <MIC_Print+0x214>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4b70      	ldr	r3, [pc, #448]	@ (8008178 <MIC_Print+0x214>)
 8007fb8:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007fba:	4b71      	ldr	r3, [pc, #452]	@ (8008180 <MIC_Print+0x21c>)
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8007fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8008180 <MIC_Print+0x21c>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	4053      	eors	r3, r2
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 8007fce:	4b69      	ldr	r3, [pc, #420]	@ (8008174 <MIC_Print+0x210>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	1c18      	adds	r0, r3, #0
 8007fd4:	f7fb fc9c 	bl	8003910 <setMic>
 8007fd8:	e02d      	b.n	8008036 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8007fda:	4b6a      	ldr	r3, [pc, #424]	@ (8008184 <MIC_Print+0x220>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007fe0:	1dfb      	adds	r3, r7, #7
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
 8007fe6:	e013      	b.n	8008010 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8007fe8:	1dfb      	adds	r3, r7, #7
 8007fea:	781a      	ldrb	r2, [r3, #0]
 8007fec:	4b63      	ldr	r3, [pc, #396]	@ (800817c <MIC_Print+0x218>)
 8007fee:	0092      	lsls	r2, r2, #2
 8007ff0:	58d2      	ldr	r2, [r2, r3]
 8007ff2:	4b64      	ldr	r3, [pc, #400]	@ (8008184 <MIC_Print+0x220>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	1c19      	adds	r1, r3, #0
 8007ff8:	1c10      	adds	r0, r2, #0
 8007ffa:	f7f8 fc61 	bl	80008c0 <__aeabi_fadd>
 8007ffe:	1c03      	adds	r3, r0, #0
 8008000:	1c1a      	adds	r2, r3, #0
 8008002:	4b60      	ldr	r3, [pc, #384]	@ (8008184 <MIC_Print+0x220>)
 8008004:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8008006:	1dfb      	adds	r3, r7, #7
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	1dfb      	adds	r3, r7, #7
 800800c:	3201      	adds	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	1dfb      	adds	r3, r7, #7
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b09      	cmp	r3, #9
 8008016:	d9e7      	bls.n	8007fe8 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8008018:	4b5a      	ldr	r3, [pc, #360]	@ (8008184 <MIC_Print+0x220>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	495a      	ldr	r1, [pc, #360]	@ (8008188 <MIC_Print+0x224>)
 800801e:	1c18      	adds	r0, r3, #0
 8008020:	f7f8 fdd8 	bl	8000bd4 <__aeabi_fdiv>
 8008024:	1c03      	adds	r3, r0, #0
 8008026:	1c1a      	adds	r2, r3, #0
 8008028:	4b56      	ldr	r3, [pc, #344]	@ (8008184 <MIC_Print+0x220>)
 800802a:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 800802c:	4b55      	ldr	r3, [pc, #340]	@ (8008184 <MIC_Print+0x220>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	1c18      	adds	r0, r3, #0
 8008032:	f7fb fc6d 	bl	8003910 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8008036:	4b4f      	ldr	r3, [pc, #316]	@ (8008174 <MIC_Print+0x210>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4954      	ldr	r1, [pc, #336]	@ (800818c <MIC_Print+0x228>)
 800803c:	1c18      	adds	r0, r3, #0
 800803e:	f7f8 fa95 	bl	800056c <__aeabi_fcmpge>
 8008042:	1e03      	subs	r3, r0, #0
 8008044:	d004      	beq.n	8008050 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8008046:	2201      	movs	r2, #1
 8008048:	2101      	movs	r1, #1
 800804a:	2001      	movs	r0, #1
 800804c:	f003 ffac 	bl	800bfa8 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8008050:	4b48      	ldr	r3, [pc, #288]	@ (8008174 <MIC_Print+0x210>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	494d      	ldr	r1, [pc, #308]	@ (800818c <MIC_Print+0x228>)
 8008056:	1c18      	adds	r0, r3, #0
 8008058:	f7f8 fa6a 	bl	8000530 <__aeabi_fcmplt>
 800805c:	1e03      	subs	r3, r0, #0
 800805e:	d00c      	beq.n	800807a <MIC_Print+0x116>
 8008060:	4b44      	ldr	r3, [pc, #272]	@ (8008174 <MIC_Print+0x210>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	494a      	ldr	r1, [pc, #296]	@ (8008190 <MIC_Print+0x22c>)
 8008066:	1c18      	adds	r0, r3, #0
 8008068:	f7f8 fa80 	bl	800056c <__aeabi_fcmpge>
 800806c:	1e03      	subs	r3, r0, #0
 800806e:	d004      	beq.n	800807a <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8008070:	2200      	movs	r2, #0
 8008072:	2100      	movs	r1, #0
 8008074:	2001      	movs	r0, #1
 8008076:	f003 ff97 	bl	800bfa8 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 800807a:	4b3e      	ldr	r3, [pc, #248]	@ (8008174 <MIC_Print+0x210>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4944      	ldr	r1, [pc, #272]	@ (8008190 <MIC_Print+0x22c>)
 8008080:	1c18      	adds	r0, r3, #0
 8008082:	f7f8 fa55 	bl	8000530 <__aeabi_fcmplt>
 8008086:	1e03      	subs	r3, r0, #0
 8008088:	d00c      	beq.n	80080a4 <MIC_Print+0x140>
 800808a:	4b3a      	ldr	r3, [pc, #232]	@ (8008174 <MIC_Print+0x210>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4941      	ldr	r1, [pc, #260]	@ (8008194 <MIC_Print+0x230>)
 8008090:	1c18      	adds	r0, r3, #0
 8008092:	f7f8 fa6b 	bl	800056c <__aeabi_fcmpge>
 8008096:	1e03      	subs	r3, r0, #0
 8008098:	d004      	beq.n	80080a4 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 800809a:	2200      	movs	r2, #0
 800809c:	2101      	movs	r1, #1
 800809e:	2001      	movs	r0, #1
 80080a0:	f003 ff82 	bl	800bfa8 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 80080a4:	4b33      	ldr	r3, [pc, #204]	@ (8008174 <MIC_Print+0x210>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	493a      	ldr	r1, [pc, #232]	@ (8008194 <MIC_Print+0x230>)
 80080aa:	1c18      	adds	r0, r3, #0
 80080ac:	f7f8 fa40 	bl	8000530 <__aeabi_fcmplt>
 80080b0:	1e03      	subs	r3, r0, #0
 80080b2:	d00c      	beq.n	80080ce <MIC_Print+0x16a>
 80080b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008174 <MIC_Print+0x210>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4937      	ldr	r1, [pc, #220]	@ (8008198 <MIC_Print+0x234>)
 80080ba:	1c18      	adds	r0, r3, #0
 80080bc:	f7f8 fa56 	bl	800056c <__aeabi_fcmpge>
 80080c0:	1e03      	subs	r3, r0, #0
 80080c2:	d004      	beq.n	80080ce <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 80080c4:	2200      	movs	r2, #0
 80080c6:	2101      	movs	r1, #1
 80080c8:	2000      	movs	r0, #0
 80080ca:	f003 ff6d 	bl	800bfa8 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 80080ce:	4b29      	ldr	r3, [pc, #164]	@ (8008174 <MIC_Print+0x210>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4931      	ldr	r1, [pc, #196]	@ (8008198 <MIC_Print+0x234>)
 80080d4:	1c18      	adds	r0, r3, #0
 80080d6:	f7f8 fa2b 	bl	8000530 <__aeabi_fcmplt>
 80080da:	1e03      	subs	r3, r0, #0
 80080dc:	d00c      	beq.n	80080f8 <MIC_Print+0x194>
 80080de:	4b25      	ldr	r3, [pc, #148]	@ (8008174 <MIC_Print+0x210>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	492e      	ldr	r1, [pc, #184]	@ (800819c <MIC_Print+0x238>)
 80080e4:	1c18      	adds	r0, r3, #0
 80080e6:	f7f8 fa41 	bl	800056c <__aeabi_fcmpge>
 80080ea:	1e03      	subs	r3, r0, #0
 80080ec:	d004      	beq.n	80080f8 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 80080ee:	2201      	movs	r2, #1
 80080f0:	2100      	movs	r1, #0
 80080f2:	2000      	movs	r0, #0
 80080f4:	f003 ff58 	bl	800bfa8 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 80080f8:	4b1e      	ldr	r3, [pc, #120]	@ (8008174 <MIC_Print+0x210>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4927      	ldr	r1, [pc, #156]	@ (800819c <MIC_Print+0x238>)
 80080fe:	1c18      	adds	r0, r3, #0
 8008100:	f7f8 fa16 	bl	8000530 <__aeabi_fcmplt>
 8008104:	1e03      	subs	r3, r0, #0
 8008106:	d00c      	beq.n	8008122 <MIC_Print+0x1be>
 8008108:	4b1a      	ldr	r3, [pc, #104]	@ (8008174 <MIC_Print+0x210>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4924      	ldr	r1, [pc, #144]	@ (80081a0 <MIC_Print+0x23c>)
 800810e:	1c18      	adds	r0, r3, #0
 8008110:	f7f8 fa2c 	bl	800056c <__aeabi_fcmpge>
 8008114:	1e03      	subs	r3, r0, #0
 8008116:	d004      	beq.n	8008122 <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8008118:	2201      	movs	r2, #1
 800811a:	2101      	movs	r1, #1
 800811c:	2000      	movs	r0, #0
 800811e:	f003 ff43 	bl	800bfa8 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 8008122:	4b14      	ldr	r3, [pc, #80]	@ (8008174 <MIC_Print+0x210>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	491e      	ldr	r1, [pc, #120]	@ (80081a0 <MIC_Print+0x23c>)
 8008128:	1c18      	adds	r0, r3, #0
 800812a:	f7f8 fa01 	bl	8000530 <__aeabi_fcmplt>
 800812e:	1e03      	subs	r3, r0, #0
 8008130:	d00c      	beq.n	800814c <MIC_Print+0x1e8>
 8008132:	4b10      	ldr	r3, [pc, #64]	@ (8008174 <MIC_Print+0x210>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	491b      	ldr	r1, [pc, #108]	@ (80081a4 <MIC_Print+0x240>)
 8008138:	1c18      	adds	r0, r3, #0
 800813a:	f7f8 fa17 	bl	800056c <__aeabi_fcmpge>
 800813e:	1e03      	subs	r3, r0, #0
 8008140:	d004      	beq.n	800814c <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 8008142:	2201      	movs	r2, #1
 8008144:	2100      	movs	r1, #0
 8008146:	2001      	movs	r0, #1
 8008148:	f003 ff2e 	bl	800bfa8 <SetDBLED>
  }
  if(dBc < 35){//off
 800814c:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <MIC_Print+0x210>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4914      	ldr	r1, [pc, #80]	@ (80081a4 <MIC_Print+0x240>)
 8008152:	1c18      	adds	r0, r3, #0
 8008154:	f7f8 f9ec 	bl	8000530 <__aeabi_fcmplt>
 8008158:	1e03      	subs	r3, r0, #0
 800815a:	d100      	bne.n	800815e <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 800815c:	e004      	b.n	8008168 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	2000      	movs	r0, #0
 8008164:	f003 ff20 	bl	800bfa8 <SetDBLED>
}
 8008168:	46c0      	nop			@ (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	b002      	add	sp, #8
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20000fb8 	.word	0x20000fb8
 8008174:	20000f88 	.word	0x20000f88
 8008178:	20000fbc 	.word	0x20000fbc
 800817c:	20000f8c 	.word	0x20000f8c
 8008180:	20000fbd 	.word	0x20000fbd
 8008184:	20000fb4 	.word	0x20000fb4
 8008188:	41200000 	.word	0x41200000
 800818c:	42b40000 	.word	0x42b40000
 8008190:	42a00000 	.word	0x42a00000
 8008194:	428c0000 	.word	0x428c0000
 8008198:	42700000 	.word	0x42700000
 800819c:	42480000 	.word	0x42480000
 80081a0:	42200000 	.word	0x42200000
 80081a4:	420c0000 	.word	0x420c0000

080081a8 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80081ae:	4b11      	ldr	r3, [pc, #68]	@ (80081f4 <MIC_TestMeasurementDone+0x4c>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	4a10      	ldr	r2, [pc, #64]	@ (80081f8 <MIC_TestMeasurementDone+0x50>)
 80081b6:	4911      	ldr	r1, [pc, #68]	@ (80081fc <MIC_TestMeasurementDone+0x54>)
 80081b8:	2002      	movs	r0, #2
 80081ba:	f004 fe5f 	bl	800ce7c <CreateLine>
  if(DataReady) {
 80081be:	4b0d      	ldr	r3, [pc, #52]	@ (80081f4 <MIC_TestMeasurementDone+0x4c>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d010      	beq.n	80081ea <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 80081c8:	1dfb      	adds	r3, r7, #7
 80081ca:	4a0d      	ldr	r2, [pc, #52]	@ (8008200 <MIC_TestMeasurementDone+0x58>)
 80081cc:	7812      	ldrb	r2, [r2, #0]
 80081ce:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80081d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <MIC_TestMeasurementDone+0x58>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	4a0b      	ldr	r2, [pc, #44]	@ (8008204 <MIC_TestMeasurementDone+0x5c>)
 80081d8:	4908      	ldr	r1, [pc, #32]	@ (80081fc <MIC_TestMeasurementDone+0x54>)
 80081da:	2002      	movs	r0, #2
 80081dc:	f004 fe4e 	bl	800ce7c <CreateLine>
    ResetMICIndicator();
 80081e0:	f003 ffa6 	bl	800c130 <ResetMICIndicator>
    return Check;
 80081e4:	1dfb      	adds	r3, r7, #7
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	e000      	b.n	80081ec <MIC_TestMeasurementDone+0x44>
  }
  return false;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b002      	add	sp, #8
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	200012c4 	.word	0x200012c4
 80081f8:	08022514 	.word	0x08022514
 80081fc:	08022540 	.word	0x08022540
 8008200:	200012c5 	.word	0x200012c5
 8008204:	08022544 	.word	0x08022544

08008208 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008208:	b40f      	push	{r0, r1, r2, r3}
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008210:	2314      	movs	r3, #20
 8008212:	18fb      	adds	r3, r7, r3
 8008214:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	2180      	movs	r1, #128	@ 0x80
 800821c:	0089      	lsls	r1, r1, #2
 800821e:	480a      	ldr	r0, [pc, #40]	@ (8008248 <print+0x40>)
 8008220:	f016 f9b0 	bl	801e584 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008224:	4b08      	ldr	r3, [pc, #32]	@ (8008248 <print+0x40>)
 8008226:	0018      	movs	r0, r3
 8008228:	f7f7 ffa0 	bl	800016c <strlen>
 800822c:	0003      	movs	r3, r0
 800822e:	b29a      	uxth	r2, r3
 8008230:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <print+0x40>)
 8008232:	0011      	movs	r1, r2
 8008234:	0018      	movs	r0, r3
 8008236:	f7ff f9a5 	bl	8007584 <printString>
}
 800823a:	46c0      	nop			@ (mov r8, r8)
 800823c:	46bd      	mov	sp, r7
 800823e:	b002      	add	sp, #8
 8008240:	bc80      	pop	{r7}
 8008242:	bc08      	pop	{r3}
 8008244:	b004      	add	sp, #16
 8008246:	4718      	bx	r3
 8008248:	20000fc0 	.word	0x20000fc0

0800824c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008252:	1d3b      	adds	r3, r7, #4
 8008254:	0018      	movs	r0, r3
 8008256:	2314      	movs	r3, #20
 8008258:	001a      	movs	r2, r3
 800825a:	2100      	movs	r1, #0
 800825c:	f016 fa3e 	bl	801e6dc <memset>
  RTC_DateTypeDef sDate = {0};
 8008260:	003b      	movs	r3, r7
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008266:	4b2e      	ldr	r3, [pc, #184]	@ (8008320 <MX_RTC_Init+0xd4>)
 8008268:	4a2e      	ldr	r2, [pc, #184]	@ (8008324 <MX_RTC_Init+0xd8>)
 800826a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800826c:	4b2c      	ldr	r3, [pc, #176]	@ (8008320 <MX_RTC_Init+0xd4>)
 800826e:	2200      	movs	r2, #0
 8008270:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008272:	4b2b      	ldr	r3, [pc, #172]	@ (8008320 <MX_RTC_Init+0xd4>)
 8008274:	227f      	movs	r2, #127	@ 0x7f
 8008276:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008278:	4b29      	ldr	r3, [pc, #164]	@ (8008320 <MX_RTC_Init+0xd4>)
 800827a:	22ff      	movs	r2, #255	@ 0xff
 800827c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800827e:	4b28      	ldr	r3, [pc, #160]	@ (8008320 <MX_RTC_Init+0xd4>)
 8008280:	2200      	movs	r2, #0
 8008282:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008284:	4b26      	ldr	r3, [pc, #152]	@ (8008320 <MX_RTC_Init+0xd4>)
 8008286:	2200      	movs	r2, #0
 8008288:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800828a:	4b25      	ldr	r3, [pc, #148]	@ (8008320 <MX_RTC_Init+0xd4>)
 800828c:	2200      	movs	r2, #0
 800828e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008290:	4b23      	ldr	r3, [pc, #140]	@ (8008320 <MX_RTC_Init+0xd4>)
 8008292:	2200      	movs	r2, #0
 8008294:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008296:	4b22      	ldr	r3, [pc, #136]	@ (8008320 <MX_RTC_Init+0xd4>)
 8008298:	0018      	movs	r0, r3
 800829a:	f00c f93f 	bl	801451c <HAL_RTC_Init>
 800829e:	1e03      	subs	r3, r0, #0
 80082a0:	d001      	beq.n	80082a6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80082a2:	f7ff fa1d 	bl	80076e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80082a6:	1d3b      	adds	r3, r7, #4
 80082a8:	220d      	movs	r2, #13
 80082aa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80082ac:	1d3b      	adds	r3, r7, #4
 80082ae:	2200      	movs	r2, #0
 80082b0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80082b2:	1d3b      	adds	r3, r7, #4
 80082b4:	2200      	movs	r2, #0
 80082b6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80082b8:	1d3b      	adds	r3, r7, #4
 80082ba:	2200      	movs	r2, #0
 80082bc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	2200      	movs	r2, #0
 80082c2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80082c4:	1d39      	adds	r1, r7, #4
 80082c6:	4b16      	ldr	r3, [pc, #88]	@ (8008320 <MX_RTC_Init+0xd4>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	0018      	movs	r0, r3
 80082cc:	f00c f9c2 	bl	8014654 <HAL_RTC_SetTime>
 80082d0:	1e03      	subs	r3, r0, #0
 80082d2:	d001      	beq.n	80082d8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80082d4:	f7ff fa04 	bl	80076e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80082d8:	003b      	movs	r3, r7
 80082da:	2206      	movs	r2, #6
 80082dc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80082de:	003b      	movs	r3, r7
 80082e0:	2211      	movs	r2, #17
 80082e2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 80082e4:	003b      	movs	r3, r7
 80082e6:	2217      	movs	r2, #23
 80082e8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 80082ea:	003b      	movs	r3, r7
 80082ec:	2218      	movs	r2, #24
 80082ee:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80082f0:	0039      	movs	r1, r7
 80082f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008320 <MX_RTC_Init+0xd4>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	0018      	movs	r0, r3
 80082f8:	f00c fab4 	bl	8014864 <HAL_RTC_SetDate>
 80082fc:	1e03      	subs	r3, r0, #0
 80082fe:	d001      	beq.n	8008304 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008300:	f7ff f9ee 	bl	80076e0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008304:	4b06      	ldr	r3, [pc, #24]	@ (8008320 <MX_RTC_Init+0xd4>)
 8008306:	2200      	movs	r2, #0
 8008308:	2100      	movs	r1, #0
 800830a:	0018      	movs	r0, r3
 800830c:	f00c fc64 	bl	8014bd8 <HAL_RTCEx_SetWakeUpTimer>
 8008310:	1e03      	subs	r3, r0, #0
 8008312:	d001      	beq.n	8008318 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008314:	f7ff f9e4 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008318:	46c0      	nop			@ (mov r8, r8)
 800831a:	46bd      	mov	sp, r7
 800831c:	b006      	add	sp, #24
 800831e:	bd80      	pop	{r7, pc}
 8008320:	200011c0 	.word	0x200011c0
 8008324:	40002800 	.word	0x40002800

08008328 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a06      	ldr	r2, [pc, #24]	@ (8008350 <HAL_RTC_MspInit+0x28>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d106      	bne.n	8008348 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800833a:	4b06      	ldr	r3, [pc, #24]	@ (8008354 <HAL_RTC_MspInit+0x2c>)
 800833c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800833e:	4b05      	ldr	r3, [pc, #20]	@ (8008354 <HAL_RTC_MspInit+0x2c>)
 8008340:	2180      	movs	r1, #128	@ 0x80
 8008342:	02c9      	lsls	r1, r1, #11
 8008344:	430a      	orrs	r2, r1
 8008346:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008348:	46c0      	nop			@ (mov r8, r8)
 800834a:	46bd      	mov	sp, r7
 800834c:	b002      	add	sp, #8
 800834e:	bd80      	pop	{r7, pc}
 8008350:	40002800 	.word	0x40002800
 8008354:	40021000 	.word	0x40021000

08008358 <sen5x_Power_On>:
static sen5x_states samplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;



void sen5x_Power_On(void) {
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
//  Debug("executing sen5x_Power_On");
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800835c:	2380      	movs	r3, #128	@ 0x80
 800835e:	015b      	lsls	r3, r3, #5
 8008360:	4805      	ldr	r0, [pc, #20]	@ (8008378 <sen5x_Power_On+0x20>)
 8008362:	2201      	movs	r2, #1
 8008364:	0019      	movs	r1, r3
 8008366:	f006 fb84 	bl	800ea72 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800836a:	20c8      	movs	r0, #200	@ 0xc8
 800836c:	f005 f92c 	bl	800d5c8 <HAL_Delay>
  return;
 8008370:	46c0      	nop			@ (mov r8, r8)
}
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	46c0      	nop			@ (mov r8, r8)
 8008378:	50000800 	.word	0x50000800

0800837c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
//  Debug("executing sen5x_Power_Off");
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008380:	2380      	movs	r3, #128	@ 0x80
 8008382:	015b      	lsls	r3, r3, #5
 8008384:	4803      	ldr	r0, [pc, #12]	@ (8008394 <sen5x_Power_Off+0x18>)
 8008386:	2200      	movs	r2, #0
 8008388:	0019      	movs	r1, r3
 800838a:	f006 fb72 	bl	800ea72 <HAL_GPIO_WritePin>
  return;
 800838e:	46c0      	nop			@ (mov r8, r8)
}
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	50000800 	.word	0x50000800

08008398 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800839c:	4b02      	ldr	r3, [pc, #8]	@ (80083a8 <reset_fanCleaningDone+0x10>)
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]
}
 80083a2:	46c0      	nop			@ (mov r8, r8)
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200011e4 	.word	0x200011e4

080083ac <probe_sen5x>:

int16_t probe_sen5x(void) {
 80083ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ae:	b09b      	sub	sp, #108	@ 0x6c
 80083b0:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 80083b2:	2456      	movs	r4, #86	@ 0x56
 80083b4:	193b      	adds	r3, r7, r4
 80083b6:	2200      	movs	r2, #0
 80083b8:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 80083ba:	2355      	movs	r3, #85	@ 0x55
 80083bc:	18fb      	adds	r3, r7, r3
 80083be:	2220      	movs	r2, #32
 80083c0:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 80083c2:	2354      	movs	r3, #84	@ 0x54
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	2220      	movs	r2, #32
 80083c8:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 80083ca:	f7ff ffc5 	bl	8008358 <sen5x_Power_On>

  error = sen5x_device_reset();
 80083ce:	0025      	movs	r5, r4
 80083d0:	193c      	adds	r4, r7, r4
 80083d2:	f000 ffe1 	bl	8009398 <sen5x_device_reset>
 80083d6:	0003      	movs	r3, r0
 80083d8:	8023      	strh	r3, [r4, #0]
  if (error) {
 80083da:	002c      	movs	r4, r5
 80083dc:	193b      	adds	r3, r7, r4
 80083de:	2200      	movs	r2, #0
 80083e0:	5e9b      	ldrsh	r3, [r3, r2]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00b      	beq.n	80083fe <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80083e6:	193b      	adds	r3, r7, r4
 80083e8:	2200      	movs	r2, #0
 80083ea:	5e9b      	ldrsh	r3, [r3, r2]
 80083ec:	4a6d      	ldr	r2, [pc, #436]	@ (80085a4 <probe_sen5x+0x1f8>)
 80083ee:	496e      	ldr	r1, [pc, #440]	@ (80085a8 <probe_sen5x+0x1fc>)
 80083f0:	2001      	movs	r0, #1
 80083f2:	f004 fd43 	bl	800ce7c <CreateLine>
      return error;
 80083f6:	193b      	adds	r3, r7, r4
 80083f8:	2200      	movs	r2, #0
 80083fa:	5e9b      	ldrsh	r3, [r3, r2]
 80083fc:	e0ce      	b.n	800859c <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80083fe:	2556      	movs	r5, #86	@ 0x56
 8008400:	197c      	adds	r4, r7, r5
 8008402:	2355      	movs	r3, #85	@ 0x55
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	781a      	ldrb	r2, [r3, #0]
 8008408:	232c      	movs	r3, #44	@ 0x2c
 800840a:	18fb      	adds	r3, r7, r3
 800840c:	0011      	movs	r1, r2
 800840e:	0018      	movs	r0, r3
 8008410:	f000 feae 	bl	8009170 <sen5x_get_serial_number>
 8008414:	0003      	movs	r3, r0
 8008416:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008418:	197b      	adds	r3, r7, r5
 800841a:	2200      	movs	r2, #0
 800841c:	5e9b      	ldrsh	r3, [r3, r2]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008422:	197b      	adds	r3, r7, r5
 8008424:	2200      	movs	r2, #0
 8008426:	5e9a      	ldrsh	r2, [r3, r2]
 8008428:	4b60      	ldr	r3, [pc, #384]	@ (80085ac <probe_sen5x+0x200>)
 800842a:	0011      	movs	r1, r2
 800842c:	0018      	movs	r0, r3
 800842e:	f015 ffa1 	bl	801e374 <iprintf>
      return error;
 8008432:	197b      	adds	r3, r7, r5
 8008434:	2200      	movs	r2, #0
 8008436:	5e9b      	ldrsh	r3, [r3, r2]
 8008438:	e0b0      	b.n	800859c <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800843a:	232c      	movs	r3, #44	@ 0x2c
 800843c:	18fa      	adds	r2, r7, r3
 800843e:	4b5c      	ldr	r3, [pc, #368]	@ (80085b0 <probe_sen5x+0x204>)
 8008440:	0011      	movs	r1, r2
 8008442:	0018      	movs	r0, r3
 8008444:	f015 ff96 	bl	801e374 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008448:	2556      	movs	r5, #86	@ 0x56
 800844a:	197c      	adds	r4, r7, r5
 800844c:	2354      	movs	r3, #84	@ 0x54
 800844e:	18fb      	adds	r3, r7, r3
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	230c      	movs	r3, #12
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	0011      	movs	r1, r2
 8008458:	0018      	movs	r0, r3
 800845a:	f000 fe33 	bl	80090c4 <sen5x_get_product_name>
 800845e:	0003      	movs	r3, r0
 8008460:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008462:	197b      	adds	r3, r7, r5
 8008464:	2200      	movs	r2, #0
 8008466:	5e9b      	ldrsh	r3, [r3, r2]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d00b      	beq.n	8008484 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800846c:	197b      	adds	r3, r7, r5
 800846e:	2200      	movs	r2, #0
 8008470:	5e9a      	ldrsh	r2, [r3, r2]
 8008472:	4b50      	ldr	r3, [pc, #320]	@ (80085b4 <probe_sen5x+0x208>)
 8008474:	0011      	movs	r1, r2
 8008476:	0018      	movs	r0, r3
 8008478:	f015 ff7c 	bl	801e374 <iprintf>
      return error;
 800847c:	197b      	adds	r3, r7, r5
 800847e:	2200      	movs	r2, #0
 8008480:	5e9b      	ldrsh	r3, [r3, r2]
 8008482:	e08b      	b.n	800859c <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008484:	230c      	movs	r3, #12
 8008486:	18fa      	adds	r2, r7, r3
 8008488:	4b4b      	ldr	r3, [pc, #300]	@ (80085b8 <probe_sen5x+0x20c>)
 800848a:	0011      	movs	r1, r2
 800848c:	0018      	movs	r0, r3
 800848e:	f015 ff71 	bl	801e374 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008492:	2656      	movs	r6, #86	@ 0x56
 8008494:	19bc      	adds	r4, r7, r6
 8008496:	2308      	movs	r3, #8
 8008498:	18fd      	adds	r5, r7, r3
 800849a:	2309      	movs	r3, #9
 800849c:	18fa      	adds	r2, r7, r3
 800849e:	230a      	movs	r3, #10
 80084a0:	18f9      	adds	r1, r7, r3
 80084a2:	230b      	movs	r3, #11
 80084a4:	18f8      	adds	r0, r7, r3
 80084a6:	1d7b      	adds	r3, r7, #5
 80084a8:	9302      	str	r3, [sp, #8]
 80084aa:	1dbb      	adds	r3, r7, #6
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	1dfb      	adds	r3, r7, #7
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	002b      	movs	r3, r5
 80084b4:	f000 feb2 	bl	800921c <sen5x_get_version>
 80084b8:	0003      	movs	r3, r0
 80084ba:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 80084bc:	19bb      	adds	r3, r7, r6
 80084be:	2200      	movs	r2, #0
 80084c0:	5e9b      	ldrsh	r3, [r3, r2]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00b      	beq.n	80084de <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 80084c6:	19bb      	adds	r3, r7, r6
 80084c8:	2200      	movs	r2, #0
 80084ca:	5e9a      	ldrsh	r2, [r3, r2]
 80084cc:	4b3b      	ldr	r3, [pc, #236]	@ (80085bc <probe_sen5x+0x210>)
 80084ce:	0011      	movs	r1, r2
 80084d0:	0018      	movs	r0, r3
 80084d2:	f015 ff4f 	bl	801e374 <iprintf>
      return error;
 80084d6:	19bb      	adds	r3, r7, r6
 80084d8:	2200      	movs	r2, #0
 80084da:	5e9b      	ldrsh	r3, [r3, r2]
 80084dc:	e05e      	b.n	800859c <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 80084de:	230b      	movs	r3, #11
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	0019      	movs	r1, r3
 80084e6:	230a      	movs	r3, #10
 80084e8:	18fb      	adds	r3, r7, r3
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	001a      	movs	r2, r3
 80084ee:	2308      	movs	r3, #8
 80084f0:	18fb      	adds	r3, r7, r3
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	001c      	movs	r4, r3
 80084f6:	1dfb      	adds	r3, r7, #7
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	4831      	ldr	r0, [pc, #196]	@ (80085c0 <probe_sen5x+0x214>)
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	0023      	movs	r3, r4
 8008500:	f015 ff38 	bl	801e374 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008504:	2300      	movs	r3, #0
 8008506:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008508:	264e      	movs	r6, #78	@ 0x4e
 800850a:	19bb      	adds	r3, r7, r6
 800850c:	2200      	movs	r2, #0
 800850e:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008510:	234c      	movs	r3, #76	@ 0x4c
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	2200      	movs	r2, #0
 8008516:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008518:	492a      	ldr	r1, [pc, #168]	@ (80085c4 <probe_sen5x+0x218>)
 800851a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800851c:	f7f8 fd40 	bl	8000fa0 <__aeabi_fmul>
 8008520:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008522:	1c18      	adds	r0, r3, #0
 8008524:	f7f9 f834 	bl	8001590 <__aeabi_f2iz>
 8008528:	0003      	movs	r3, r0
 800852a:	b218      	sxth	r0, r3
 800852c:	2556      	movs	r5, #86	@ 0x56
 800852e:	197c      	adds	r4, r7, r5
 8008530:	234c      	movs	r3, #76	@ 0x4c
 8008532:	18fb      	adds	r3, r7, r3
 8008534:	881a      	ldrh	r2, [r3, #0]
 8008536:	19bb      	adds	r3, r7, r6
 8008538:	2100      	movs	r1, #0
 800853a:	5e5b      	ldrsh	r3, [r3, r1]
 800853c:	0019      	movs	r1, r3
 800853e:	f000 fd5d 	bl	8008ffc <sen5x_set_temperature_offset_parameters>
 8008542:	0003      	movs	r3, r0
 8008544:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008546:	197b      	adds	r3, r7, r5
 8008548:	2200      	movs	r2, #0
 800854a:	5e9b      	ldrsh	r3, [r3, r2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00b      	beq.n	8008568 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008550:	197b      	adds	r3, r7, r5
 8008552:	2200      	movs	r2, #0
 8008554:	5e9b      	ldrsh	r3, [r3, r2]
 8008556:	4a1c      	ldr	r2, [pc, #112]	@ (80085c8 <probe_sen5x+0x21c>)
 8008558:	4913      	ldr	r1, [pc, #76]	@ (80085a8 <probe_sen5x+0x1fc>)
 800855a:	2001      	movs	r0, #1
 800855c:	f004 fc8e 	bl	800ce7c <CreateLine>
      return error;
 8008560:	197b      	adds	r3, r7, r5
 8008562:	2200      	movs	r2, #0
 8008564:	5e9b      	ldrsh	r3, [r3, r2]
 8008566:	e019      	b.n	800859c <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008568:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800856a:	f7fa ff7b 	bl	8003464 <__aeabi_f2d>
 800856e:	0002      	movs	r2, r0
 8008570:	000b      	movs	r3, r1
 8008572:	4816      	ldr	r0, [pc, #88]	@ (80085cc <probe_sen5x+0x220>)
 8008574:	4916      	ldr	r1, [pc, #88]	@ (80085d0 <probe_sen5x+0x224>)
 8008576:	9200      	str	r2, [sp, #0]
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	0002      	movs	r2, r0
 800857c:	2002      	movs	r0, #2
 800857e:	f004 fc7d 	bl	800ce7c <CreateLine>
  }
  sen5x_Power_Off();
 8008582:	f7ff fefb 	bl	800837c <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008586:	f005 f815 	bl	800d5b4 <HAL_GetTick>
 800858a:	0003      	movs	r3, r0
 800858c:	4a11      	ldr	r2, [pc, #68]	@ (80085d4 <probe_sen5x+0x228>)
 800858e:	189a      	adds	r2, r3, r2
 8008590:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <probe_sen5x+0x22c>)
 8008592:	601a      	str	r2, [r3, #0]
  return error;
 8008594:	2356      	movs	r3, #86	@ 0x56
 8008596:	18fb      	adds	r3, r7, r3
 8008598:	2200      	movs	r2, #0
 800859a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800859c:	0018      	movs	r0, r3
 800859e:	46bd      	mov	sp, r7
 80085a0:	b017      	add	sp, #92	@ 0x5c
 80085a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a4:	0802255c 	.word	0x0802255c
 80085a8:	08022588 	.word	0x08022588
 80085ac:	0802258c 	.word	0x0802258c
 80085b0:	080225bc 	.word	0x080225bc
 80085b4:	080225d0 	.word	0x080225d0
 80085b8:	08022600 	.word	0x08022600
 80085bc:	08022614 	.word	0x08022614
 80085c0:	08022640 	.word	0x08022640
 80085c4:	43480000 	.word	0x43480000
 80085c8:	08022664 	.word	0x08022664
 80085cc:	080226a4 	.word	0x080226a4
 80085d0:	080226dc 	.word	0x080226dc
 80085d4:	000061a8 	.word	0x000061a8
 80085d8:	200011e8 	.word	0x200011e8

080085dc <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 80085dc:	b590      	push	{r4, r7, lr}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80085e2:	1dbb      	adds	r3, r7, #6
 80085e4:	2200      	movs	r2, #0
 80085e6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 80085e8:	1dbc      	adds	r4, r7, #6
 80085ea:	f000 fb93 	bl	8008d14 <sen5x_start_measurement>
 80085ee:	0003      	movs	r3, r0
 80085f0:	8023      	strh	r3, [r4, #0]
  if (error) {
 80085f2:	1dbb      	adds	r3, r7, #6
 80085f4:	2200      	movs	r2, #0
 80085f6:	5e9b      	ldrsh	r3, [r3, r2]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 80085fc:	1dbb      	adds	r3, r7, #6
 80085fe:	2200      	movs	r2, #0
 8008600:	5e9b      	ldrsh	r3, [r3, r2]
 8008602:	4a06      	ldr	r2, [pc, #24]	@ (800861c <sen5x_lightup_measurement+0x40>)
 8008604:	4906      	ldr	r1, [pc, #24]	@ (8008620 <sen5x_lightup_measurement+0x44>)
 8008606:	2001      	movs	r0, #1
 8008608:	f004 fc38 	bl	800ce7c <CreateLine>
  }
  return error;
 800860c:	1dbb      	adds	r3, r7, #6
 800860e:	2200      	movs	r2, #0
 8008610:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008612:	0018      	movs	r0, r3
 8008614:	46bd      	mov	sp, r7
 8008616:	b003      	add	sp, #12
 8008618:	bd90      	pop	{r4, r7, pc}
 800861a:	46c0      	nop			@ (mov r8, r8)
 800861c:	080226e0 	.word	0x080226e0
 8008620:	08022588 	.word	0x08022588

08008624 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008624:	b590      	push	{r4, r7, lr}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 800862a:	1dbb      	adds	r3, r7, #6
 800862c:	2200      	movs	r2, #0
 800862e:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008630:	1dbc      	adds	r4, r7, #6
 8008632:	f000 fb9d 	bl	8008d70 <sen5x_stop_measurement>
 8008636:	0003      	movs	r3, r0
 8008638:	8023      	strh	r3, [r4, #0]
  if (error) {
 800863a:	1dbb      	adds	r3, r7, #6
 800863c:	2200      	movs	r2, #0
 800863e:	5e9b      	ldrsh	r3, [r3, r2]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008644:	1dbb      	adds	r3, r7, #6
 8008646:	2200      	movs	r2, #0
 8008648:	5e9b      	ldrsh	r3, [r3, r2]
 800864a:	4a06      	ldr	r2, [pc, #24]	@ (8008664 <sen5x_extinguish_measurement+0x40>)
 800864c:	4906      	ldr	r1, [pc, #24]	@ (8008668 <sen5x_extinguish_measurement+0x44>)
 800864e:	2001      	movs	r0, #1
 8008650:	f004 fc14 	bl	800ce7c <CreateLine>
  }
  return error;
 8008654:	1dbb      	adds	r3, r7, #6
 8008656:	2200      	movs	r2, #0
 8008658:	5e9b      	ldrsh	r3, [r3, r2]
}
 800865a:	0018      	movs	r0, r3
 800865c:	46bd      	mov	sp, r7
 800865e:	b003      	add	sp, #12
 8008660:	bd90      	pop	{r4, r7, pc}
 8008662:	46c0      	nop			@ (mov r8, r8)
 8008664:	08022710 	.word	0x08022710
 8008668:	08022588 	.word	0x08022588

0800866c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800866c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800866e:	b08d      	sub	sp, #52	@ 0x34
 8008670:	af04      	add	r7, sp, #16
 8008672:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8008674:	261e      	movs	r6, #30
 8008676:	19bb      	adds	r3, r7, r6
 8008678:	2200      	movs	r2, #0
 800867a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800867c:	19bc      	adds	r4, r7, r6
 800867e:	2316      	movs	r3, #22
 8008680:	18fd      	adds	r5, r7, r3
 8008682:	2318      	movs	r3, #24
 8008684:	18fa      	adds	r2, r7, r3
 8008686:	231a      	movs	r3, #26
 8008688:	18f9      	adds	r1, r7, r3
 800868a:	231c      	movs	r3, #28
 800868c:	18f8      	adds	r0, r7, r3
 800868e:	230e      	movs	r3, #14
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	9303      	str	r3, [sp, #12]
 8008694:	2310      	movs	r3, #16
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	9302      	str	r3, [sp, #8]
 800869a:	2312      	movs	r3, #18
 800869c:	18fb      	adds	r3, r7, r3
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	2314      	movs	r3, #20
 80086a2:	18fb      	adds	r3, r7, r3
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	002b      	movs	r3, r5
 80086a8:	f000 fbe4 	bl	8008e74 <sen5x_read_measured_values>
 80086ac:	0003      	movs	r3, r0
 80086ae:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 80086b0:	19bb      	adds	r3, r7, r6
 80086b2:	2200      	movs	r2, #0
 80086b4:	5e9b      	ldrsh	r3, [r3, r2]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <sen5x_read_measurement+0x56>
    return error;
 80086ba:	19bb      	adds	r3, r7, r6
 80086bc:	2200      	movs	r2, #0
 80086be:	5e9b      	ldrsh	r3, [r3, r2]
 80086c0:	e034      	b.n	800872c <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 80086c2:	231c      	movs	r3, #28
 80086c4:	18fb      	adds	r3, r7, r3
 80086c6:	881a      	ldrh	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 80086cc:	211a      	movs	r1, #26
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	881a      	ldrh	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 80086d6:	2318      	movs	r3, #24
 80086d8:	18fb      	adds	r3, r7, r3
 80086da:	881a      	ldrh	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 80086e0:	2016      	movs	r0, #22
 80086e2:	183b      	adds	r3, r7, r0
 80086e4:	881a      	ldrh	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 80086ea:	2314      	movs	r3, #20
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	2200      	movs	r2, #0
 80086f0:	5e9a      	ldrsh	r2, [r3, r2]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 80086f6:	2312      	movs	r3, #18
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	2200      	movs	r2, #0
 80086fc:	5e9a      	ldrsh	r2, [r3, r2]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8008702:	2310      	movs	r3, #16
 8008704:	18fb      	adds	r3, r7, r3
 8008706:	2200      	movs	r2, #0
 8008708:	5e9a      	ldrsh	r2, [r3, r2]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800870e:	230e      	movs	r3, #14
 8008710:	18fb      	adds	r3, r7, r3
 8008712:	2200      	movs	r2, #0
 8008714:	5e9a      	ldrsh	r2, [r3, r2]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 800871a:	187b      	adds	r3, r7, r1
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	183b      	adds	r3, r7, r0
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	0019      	movs	r1, r3
 8008724:	0010      	movs	r0, r2
 8008726:	f7fb f901 	bl	800392c <setPMs>
  return 0;
 800872a:	2300      	movs	r3, #0
}
 800872c:	0018      	movs	r0, r3
 800872e:	46bd      	mov	sp, r7
 8008730:	b009      	add	sp, #36	@ 0x24
 8008732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008734 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 800873a:	1dbb      	adds	r3, r7, #6
 800873c:	2200      	movs	r2, #0
 800873e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
    if (sen5x_read_measurement(&sen5x_data)) {
 8008740:	4b6b      	ldr	r3, [pc, #428]	@ (80088f0 <sen5x_measurement+0x1bc>)
 8008742:	0018      	movs	r0, r3
 8008744:	f7ff ff92 	bl	800866c <sen5x_read_measurement>
 8008748:	1e03      	subs	r3, r0, #0
 800874a:	d008      	beq.n	800875e <sen5x_measurement+0x2a>
      Error("Error executing sen5x_read_measured_values(): %i", error);
 800874c:	1dbb      	adds	r3, r7, #6
 800874e:	2200      	movs	r2, #0
 8008750:	5e9b      	ldrsh	r3, [r3, r2]
 8008752:	4a68      	ldr	r2, [pc, #416]	@ (80088f4 <sen5x_measurement+0x1c0>)
 8008754:	4968      	ldr	r1, [pc, #416]	@ (80088f8 <sen5x_measurement+0x1c4>)
 8008756:	2001      	movs	r0, #1
 8008758:	f004 fb90 	bl	800ce7c <CreateLine>
 800875c:	e0c1      	b.n	80088e2 <sen5x_measurement+0x1ae>
    }
    else {
      if (sen5xSamples == 0) {
 800875e:	4b67      	ldr	r3, [pc, #412]	@ (80088fc <sen5x_measurement+0x1c8>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <sen5x_measurement+0x36>
      return 0; // first sample reads zero's
 8008766:	2300      	movs	r3, #0
 8008768:	e0be      	b.n	80088e8 <sen5x_measurement+0x1b4>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800876a:	4b61      	ldr	r3, [pc, #388]	@ (80088f0 <sen5x_measurement+0x1bc>)
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	0018      	movs	r0, r3
 8008770:	f7f8 ff2e 	bl	80015d0 <__aeabi_i2f>
 8008774:	1c03      	adds	r3, r0, #0
 8008776:	4962      	ldr	r1, [pc, #392]	@ (8008900 <sen5x_measurement+0x1cc>)
 8008778:	1c18      	adds	r0, r3, #0
 800877a:	f7f8 fa2b 	bl	8000bd4 <__aeabi_fdiv>
 800877e:	1c03      	adds	r3, r0, #0
 8008780:	1c18      	adds	r0, r3, #0
 8008782:	f7fa fe6f 	bl	8003464 <__aeabi_f2d>
 8008786:	0002      	movs	r2, r0
 8008788:	000b      	movs	r3, r1
 800878a:	495e      	ldr	r1, [pc, #376]	@ (8008904 <sen5x_measurement+0x1d0>)
 800878c:	0008      	movs	r0, r1
 800878e:	f015 fdf1 	bl	801e374 <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8008792:	4b57      	ldr	r3, [pc, #348]	@ (80088f0 <sen5x_measurement+0x1bc>)
 8008794:	885b      	ldrh	r3, [r3, #2]
 8008796:	0018      	movs	r0, r3
 8008798:	f7f8 ff1a 	bl	80015d0 <__aeabi_i2f>
 800879c:	1c03      	adds	r3, r0, #0
 800879e:	4958      	ldr	r1, [pc, #352]	@ (8008900 <sen5x_measurement+0x1cc>)
 80087a0:	1c18      	adds	r0, r3, #0
 80087a2:	f7f8 fa17 	bl	8000bd4 <__aeabi_fdiv>
 80087a6:	1c03      	adds	r3, r0, #0
 80087a8:	1c18      	adds	r0, r3, #0
 80087aa:	f7fa fe5b 	bl	8003464 <__aeabi_f2d>
 80087ae:	0002      	movs	r2, r0
 80087b0:	000b      	movs	r3, r1
 80087b2:	4955      	ldr	r1, [pc, #340]	@ (8008908 <sen5x_measurement+0x1d4>)
 80087b4:	0008      	movs	r0, r1
 80087b6:	f015 fddd 	bl	801e374 <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 80087ba:	4b4d      	ldr	r3, [pc, #308]	@ (80088f0 <sen5x_measurement+0x1bc>)
 80087bc:	889b      	ldrh	r3, [r3, #4]
 80087be:	0018      	movs	r0, r3
 80087c0:	f7f8 ff06 	bl	80015d0 <__aeabi_i2f>
 80087c4:	1c03      	adds	r3, r0, #0
 80087c6:	494e      	ldr	r1, [pc, #312]	@ (8008900 <sen5x_measurement+0x1cc>)
 80087c8:	1c18      	adds	r0, r3, #0
 80087ca:	f7f8 fa03 	bl	8000bd4 <__aeabi_fdiv>
 80087ce:	1c03      	adds	r3, r0, #0
 80087d0:	1c18      	adds	r0, r3, #0
 80087d2:	f7fa fe47 	bl	8003464 <__aeabi_f2d>
 80087d6:	0002      	movs	r2, r0
 80087d8:	000b      	movs	r3, r1
 80087da:	494c      	ldr	r1, [pc, #304]	@ (800890c <sen5x_measurement+0x1d8>)
 80087dc:	0008      	movs	r0, r1
 80087de:	f015 fdc9 	bl	801e374 <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 80087e2:	4b43      	ldr	r3, [pc, #268]	@ (80088f0 <sen5x_measurement+0x1bc>)
 80087e4:	88db      	ldrh	r3, [r3, #6]
 80087e6:	0018      	movs	r0, r3
 80087e8:	f7f8 fef2 	bl	80015d0 <__aeabi_i2f>
 80087ec:	1c03      	adds	r3, r0, #0
 80087ee:	4944      	ldr	r1, [pc, #272]	@ (8008900 <sen5x_measurement+0x1cc>)
 80087f0:	1c18      	adds	r0, r3, #0
 80087f2:	f7f8 f9ef 	bl	8000bd4 <__aeabi_fdiv>
 80087f6:	1c03      	adds	r3, r0, #0
 80087f8:	1c18      	adds	r0, r3, #0
 80087fa:	f7fa fe33 	bl	8003464 <__aeabi_f2d>
 80087fe:	0002      	movs	r2, r0
 8008800:	000b      	movs	r3, r1
 8008802:	4943      	ldr	r1, [pc, #268]	@ (8008910 <sen5x_measurement+0x1dc>)
 8008804:	0008      	movs	r0, r1
 8008806:	f015 fdb5 	bl	801e374 <iprintf>
    if (sen5x_data.ambient_humidity != 0x7fff) {
 800880a:	4b39      	ldr	r3, [pc, #228]	@ (80088f0 <sen5x_measurement+0x1bc>)
 800880c:	2208      	movs	r2, #8
 800880e:	5e9b      	ldrsh	r3, [r3, r2]
 8008810:	4a40      	ldr	r2, [pc, #256]	@ (8008914 <sen5x_measurement+0x1e0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d014      	beq.n	8008840 <sen5x_measurement+0x10c>
      printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8008816:	4b36      	ldr	r3, [pc, #216]	@ (80088f0 <sen5x_measurement+0x1bc>)
 8008818:	2208      	movs	r2, #8
 800881a:	5e9b      	ldrsh	r3, [r3, r2]
 800881c:	0018      	movs	r0, r3
 800881e:	f7f8 fed7 	bl	80015d0 <__aeabi_i2f>
 8008822:	1c03      	adds	r3, r0, #0
 8008824:	493c      	ldr	r1, [pc, #240]	@ (8008918 <sen5x_measurement+0x1e4>)
 8008826:	1c18      	adds	r0, r3, #0
 8008828:	f7f8 f9d4 	bl	8000bd4 <__aeabi_fdiv>
 800882c:	1c03      	adds	r3, r0, #0
 800882e:	1c18      	adds	r0, r3, #0
 8008830:	f7fa fe18 	bl	8003464 <__aeabi_f2d>
 8008834:	0002      	movs	r2, r0
 8008836:	000b      	movs	r3, r1
 8008838:	4938      	ldr	r1, [pc, #224]	@ (800891c <sen5x_measurement+0x1e8>)
 800883a:	0008      	movs	r0, r1
 800883c:	f015 fd9a 	bl	801e374 <iprintf>
    }
    if (sen5x_data.ambient_temperature != 0x7fff) {
 8008840:	4b2b      	ldr	r3, [pc, #172]	@ (80088f0 <sen5x_measurement+0x1bc>)
 8008842:	220a      	movs	r2, #10
 8008844:	5e9b      	ldrsh	r3, [r3, r2]
 8008846:	4a33      	ldr	r2, [pc, #204]	@ (8008914 <sen5x_measurement+0x1e0>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d014      	beq.n	8008876 <sen5x_measurement+0x142>
      printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800884c:	4b28      	ldr	r3, [pc, #160]	@ (80088f0 <sen5x_measurement+0x1bc>)
 800884e:	220a      	movs	r2, #10
 8008850:	5e9b      	ldrsh	r3, [r3, r2]
 8008852:	0018      	movs	r0, r3
 8008854:	f7f8 febc 	bl	80015d0 <__aeabi_i2f>
 8008858:	1c03      	adds	r3, r0, #0
 800885a:	4931      	ldr	r1, [pc, #196]	@ (8008920 <sen5x_measurement+0x1ec>)
 800885c:	1c18      	adds	r0, r3, #0
 800885e:	f7f8 f9b9 	bl	8000bd4 <__aeabi_fdiv>
 8008862:	1c03      	adds	r3, r0, #0
 8008864:	1c18      	adds	r0, r3, #0
 8008866:	f7fa fdfd 	bl	8003464 <__aeabi_f2d>
 800886a:	0002      	movs	r2, r0
 800886c:	000b      	movs	r3, r1
 800886e:	492d      	ldr	r1, [pc, #180]	@ (8008924 <sen5x_measurement+0x1f0>)
 8008870:	0008      	movs	r0, r1
 8008872:	f015 fd7f 	bl	801e374 <iprintf>
    }
    if (sen5x_data.voc_index != 0x7fff) {
 8008876:	4b1e      	ldr	r3, [pc, #120]	@ (80088f0 <sen5x_measurement+0x1bc>)
 8008878:	220c      	movs	r2, #12
 800887a:	5e9b      	ldrsh	r3, [r3, r2]
 800887c:	4a25      	ldr	r2, [pc, #148]	@ (8008914 <sen5x_measurement+0x1e0>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d014      	beq.n	80088ac <sen5x_measurement+0x178>
      printf("Voc index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8008882:	4b1b      	ldr	r3, [pc, #108]	@ (80088f0 <sen5x_measurement+0x1bc>)
 8008884:	220c      	movs	r2, #12
 8008886:	5e9b      	ldrsh	r3, [r3, r2]
 8008888:	0018      	movs	r0, r3
 800888a:	f7f8 fea1 	bl	80015d0 <__aeabi_i2f>
 800888e:	1c03      	adds	r3, r0, #0
 8008890:	491b      	ldr	r1, [pc, #108]	@ (8008900 <sen5x_measurement+0x1cc>)
 8008892:	1c18      	adds	r0, r3, #0
 8008894:	f7f8 f99e 	bl	8000bd4 <__aeabi_fdiv>
 8008898:	1c03      	adds	r3, r0, #0
 800889a:	1c18      	adds	r0, r3, #0
 800889c:	f7fa fde2 	bl	8003464 <__aeabi_f2d>
 80088a0:	0002      	movs	r2, r0
 80088a2:	000b      	movs	r3, r1
 80088a4:	4920      	ldr	r1, [pc, #128]	@ (8008928 <sen5x_measurement+0x1f4>)
 80088a6:	0008      	movs	r0, r1
 80088a8:	f015 fd64 	bl	801e374 <iprintf>
    }
    if (sen5x_data.nox_index != 0x7fff) {
 80088ac:	4b10      	ldr	r3, [pc, #64]	@ (80088f0 <sen5x_measurement+0x1bc>)
 80088ae:	220e      	movs	r2, #14
 80088b0:	5e9b      	ldrsh	r3, [r3, r2]
 80088b2:	4a18      	ldr	r2, [pc, #96]	@ (8008914 <sen5x_measurement+0x1e0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d014      	beq.n	80088e2 <sen5x_measurement+0x1ae>
      printf("Nox index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 80088b8:	4b0d      	ldr	r3, [pc, #52]	@ (80088f0 <sen5x_measurement+0x1bc>)
 80088ba:	220e      	movs	r2, #14
 80088bc:	5e9b      	ldrsh	r3, [r3, r2]
 80088be:	0018      	movs	r0, r3
 80088c0:	f7f8 fe86 	bl	80015d0 <__aeabi_i2f>
 80088c4:	1c03      	adds	r3, r0, #0
 80088c6:	490e      	ldr	r1, [pc, #56]	@ (8008900 <sen5x_measurement+0x1cc>)
 80088c8:	1c18      	adds	r0, r3, #0
 80088ca:	f7f8 f983 	bl	8000bd4 <__aeabi_fdiv>
 80088ce:	1c03      	adds	r3, r0, #0
 80088d0:	1c18      	adds	r0, r3, #0
 80088d2:	f7fa fdc7 	bl	8003464 <__aeabi_f2d>
 80088d6:	0002      	movs	r2, r0
 80088d8:	000b      	movs	r3, r1
 80088da:	4914      	ldr	r1, [pc, #80]	@ (800892c <sen5x_measurement+0x1f8>)
 80088dc:	0008      	movs	r0, r1
 80088de:	f015 fd49 	bl	801e374 <iprintf>
    }
  }
  return error;
 80088e2:	1dbb      	adds	r3, r7, #6
 80088e4:	2200      	movs	r2, #0
 80088e6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80088e8:	0018      	movs	r0, r3
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b002      	add	sp, #8
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	200011f0 	.word	0x200011f0
 80088f4:	08022740 	.word	0x08022740
 80088f8:	08022588 	.word	0x08022588
 80088fc:	200011ec 	.word	0x200011ec
 8008900:	41200000 	.word	0x41200000
 8008904:	08022774 	.word	0x08022774
 8008908:	080227a0 	.word	0x080227a0
 800890c:	080227cc 	.word	0x080227cc
 8008910:	080227f8 	.word	0x080227f8
 8008914:	00007fff 	.word	0x00007fff
 8008918:	42c80000 	.word	0x42c80000
 800891c:	08022824 	.word	0x08022824
 8008920:	43480000 	.word	0x43480000
 8008924:	08022844 	.word	0x08022844
 8008928:	08022864 	.word	0x08022864
 800892c:	08022878 	.word	0x08022878

08008930 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8008930:	b590      	push	{r4, r7, lr}
 8008932:	b085      	sub	sp, #20
 8008934:	af02      	add	r7, sp, #8
 8008936:	6039      	str	r1, [r7, #0]
 8008938:	0011      	movs	r1, r2
 800893a:	1dfb      	adds	r3, r7, #7
 800893c:	1c02      	adds	r2, r0, #0
 800893e:	701a      	strb	r2, [r3, #0]
 8008940:	1d3b      	adds	r3, r7, #4
 8008942:	1c0a      	adds	r2, r1, #0
 8008944:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8008946:	1dfb      	adds	r3, r7, #7
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	18db      	adds	r3, r3, r3
 800894e:	b299      	uxth	r1, r3
 8008950:	1d3b      	adds	r3, r7, #4
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	4805      	ldr	r0, [pc, #20]	@ (800896c <sensirion_i2c_hal_read+0x3c>)
 8008958:	2464      	movs	r4, #100	@ 0x64
 800895a:	9400      	str	r4, [sp, #0]
 800895c:	f006 fa44 	bl	800ede8 <HAL_I2C_Master_Receive>
 8008960:	0003      	movs	r3, r0
 8008962:	b25b      	sxtb	r3, r3
}
 8008964:	0018      	movs	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	b003      	add	sp, #12
 800896a:	bd90      	pop	{r4, r7, pc}
 800896c:	20000d94 	.word	0x20000d94

08008970 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b085      	sub	sp, #20
 8008974:	af02      	add	r7, sp, #8
 8008976:	6039      	str	r1, [r7, #0]
 8008978:	0011      	movs	r1, r2
 800897a:	1dfb      	adds	r3, r7, #7
 800897c:	1c02      	adds	r2, r0, #0
 800897e:	701a      	strb	r2, [r3, #0]
 8008980:	1d3b      	adds	r3, r7, #4
 8008982:	1c0a      	adds	r2, r1, #0
 8008984:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8008986:	1dfb      	adds	r3, r7, #7
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b29b      	uxth	r3, r3
 800898c:	18db      	adds	r3, r3, r3
 800898e:	b299      	uxth	r1, r3
 8008990:	1d3b      	adds	r3, r7, #4
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	4805      	ldr	r0, [pc, #20]	@ (80089ac <sensirion_i2c_hal_write+0x3c>)
 8008998:	2464      	movs	r4, #100	@ 0x64
 800899a:	9400      	str	r4, [sp, #0]
 800899c:	f006 f91c 	bl	800ebd8 <HAL_I2C_Master_Transmit>
 80089a0:	0003      	movs	r3, r0
 80089a2:	b25b      	sxtb	r3, r3
}
 80089a4:	0018      	movs	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	b003      	add	sp, #12
 80089aa:	bd90      	pop	{r4, r7, pc}
 80089ac:	20000d94 	.word	0x20000d94

080089b0 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	22fa      	movs	r2, #250	@ 0xfa
 80089bc:	0091      	lsls	r1, r2, #2
 80089be:	0018      	movs	r0, r3
 80089c0:	f7f7 fbf0 	bl	80001a4 <__udivsi3>
 80089c4:	0003      	movs	r3, r0
 80089c6:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	22fa      	movs	r2, #250	@ 0xfa
 80089cc:	0091      	lsls	r1, r2, #2
 80089ce:	0018      	movs	r0, r3
 80089d0:	f7f7 fc6e 	bl	80002b0 <__aeabi_uidivmod>
 80089d4:	1e0b      	subs	r3, r1, #0
 80089d6:	d002      	beq.n	80089de <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	0018      	movs	r0, r3
 80089e2:	f004 fdf1 	bl	800d5c8 <HAL_Delay>
}
 80089e6:	46c0      	nop			@ (mov r8, r8)
 80089e8:	46bd      	mov	sp, r7
 80089ea:	b004      	add	sp, #16
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	0018      	movs	r0, r3
 80089fe:	f000 fc79 	bl	80092f4 <sen5x_read_device_status>
 8008a02:	1e03      	subs	r3, r0, #0
 8008a04:	d005      	beq.n	8008a12 <sen5x_check_for_errors+0x22>
    Error("Error reading sen5x device status register");
 8008a06:	4a2a      	ldr	r2, [pc, #168]	@ (8008ab0 <sen5x_check_for_errors+0xc0>)
 8008a08:	4b2a      	ldr	r3, [pc, #168]	@ (8008ab4 <sen5x_check_for_errors+0xc4>)
 8008a0a:	0019      	movs	r1, r3
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f004 fa35 	bl	800ce7c <CreateLine>
  }
  if (device_status == 0) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d107      	bne.n	8008a28 <sen5x_check_for_errors+0x38>
    Debug("sen5x operates normal");
 8008a18:	4a27      	ldr	r2, [pc, #156]	@ (8008ab8 <sen5x_check_for_errors+0xc8>)
 8008a1a:	4b28      	ldr	r3, [pc, #160]	@ (8008abc <sen5x_check_for_errors+0xcc>)
 8008a1c:	0019      	movs	r1, r3
 8008a1e:	2003      	movs	r0, #3
 8008a20:	f004 fa2c 	bl	800ce7c <CreateLine>
    return 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e03e      	b.n	8008aa6 <sen5x_check_for_errors+0xb6>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	2380      	movs	r3, #128	@ 0x80
 8008a2c:	039b      	lsls	r3, r3, #14
 8008a2e:	4013      	ands	r3, r2
 8008a30:	d005      	beq.n	8008a3e <sen5x_check_for_errors+0x4e>
    Debug("sen5x Fan speed out of range");
 8008a32:	4a23      	ldr	r2, [pc, #140]	@ (8008ac0 <sen5x_check_for_errors+0xd0>)
 8008a34:	4b21      	ldr	r3, [pc, #132]	@ (8008abc <sen5x_check_for_errors+0xcc>)
 8008a36:	0019      	movs	r1, r3
 8008a38:	2003      	movs	r0, #3
 8008a3a:	f004 fa1f 	bl	800ce7c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	2380      	movs	r3, #128	@ 0x80
 8008a42:	031b      	lsls	r3, r3, #12
 8008a44:	4013      	ands	r3, r2
 8008a46:	d005      	beq.n	8008a54 <sen5x_check_for_errors+0x64>
    Debug("sen5x Fan cleaning active");
 8008a48:	4a1e      	ldr	r2, [pc, #120]	@ (8008ac4 <sen5x_check_for_errors+0xd4>)
 8008a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008abc <sen5x_check_for_errors+0xcc>)
 8008a4c:	0019      	movs	r1, r3
 8008a4e:	2003      	movs	r0, #3
 8008a50:	f004 fa14 	bl	800ce7c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2280      	movs	r2, #128	@ 0x80
 8008a58:	4013      	ands	r3, r2
 8008a5a:	d005      	beq.n	8008a68 <sen5x_check_for_errors+0x78>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8008a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ac8 <sen5x_check_for_errors+0xd8>)
 8008a5e:	4b17      	ldr	r3, [pc, #92]	@ (8008abc <sen5x_check_for_errors+0xcc>)
 8008a60:	0019      	movs	r1, r3
 8008a62:	2003      	movs	r0, #3
 8008a64:	f004 fa0a 	bl	800ce7c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2240      	movs	r2, #64	@ 0x40
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	d005      	beq.n	8008a7c <sen5x_check_for_errors+0x8c>
    Debug("sen5x RHT communication error");
 8008a70:	4a16      	ldr	r2, [pc, #88]	@ (8008acc <sen5x_check_for_errors+0xdc>)
 8008a72:	4b12      	ldr	r3, [pc, #72]	@ (8008abc <sen5x_check_for_errors+0xcc>)
 8008a74:	0019      	movs	r1, r3
 8008a76:	2003      	movs	r0, #3
 8008a78:	f004 fa00 	bl	800ce7c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	4013      	ands	r3, r2
 8008a82:	d005      	beq.n	8008a90 <sen5x_check_for_errors+0xa0>
    Debug("sen5x Laser failure");
 8008a84:	4a12      	ldr	r2, [pc, #72]	@ (8008ad0 <sen5x_check_for_errors+0xe0>)
 8008a86:	4b0d      	ldr	r3, [pc, #52]	@ (8008abc <sen5x_check_for_errors+0xcc>)
 8008a88:	0019      	movs	r1, r3
 8008a8a:	2003      	movs	r0, #3
 8008a8c:	f004 f9f6 	bl	800ce7c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2210      	movs	r2, #16
 8008a94:	4013      	ands	r3, r2
 8008a96:	d005      	beq.n	8008aa4 <sen5x_check_for_errors+0xb4>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8008a98:	4a0e      	ldr	r2, [pc, #56]	@ (8008ad4 <sen5x_check_for_errors+0xe4>)
 8008a9a:	4b08      	ldr	r3, [pc, #32]	@ (8008abc <sen5x_check_for_errors+0xcc>)
 8008a9c:	0019      	movs	r1, r3
 8008a9e:	2003      	movs	r0, #3
 8008aa0:	f004 f9ec 	bl	800ce7c <CreateLine>
  }
  return 1;
 8008aa4:	2301      	movs	r3, #1
}
 8008aa6:	0018      	movs	r0, r3
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	b002      	add	sp, #8
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	46c0      	nop			@ (mov r8, r8)
 8008ab0:	0802288c 	.word	0x0802288c
 8008ab4:	08022588 	.word	0x08022588
 8008ab8:	080228b8 	.word	0x080228b8
 8008abc:	080228d0 	.word	0x080228d0
 8008ac0:	080228d4 	.word	0x080228d4
 8008ac4:	080228f4 	.word	0x080228f4
 8008ac8:	08022910 	.word	0x08022910
 8008acc:	08022934 	.word	0x08022934
 8008ad0:	08022954 	.word	0x08022954
 8008ad4:	08022968 	.word	0x08022968

08008ad8 <sen5x_statemachine>:

void sen5x_statemachine(uint8_t delayfactor) {
 8008ad8:	b590      	push	{r4, r7, lr}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	0002      	movs	r2, r0
 8008ae0:	1dfb      	adds	r3, r7, #7
 8008ae2:	701a      	strb	r2, [r3, #0]
  bool data_ready = false;
 8008ae4:	230f      	movs	r3, #15
 8008ae6:	18fb      	adds	r3, r7, r3
 8008ae8:	2200      	movs	r2, #0
 8008aea:	701a      	strb	r2, [r3, #0]
  if (delayfactor == USB_PLUGGED_IN) {
 8008aec:	1dfb      	adds	r3, r7, #7
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d103      	bne.n	8008afc <sen5x_statemachine+0x24>
    delayfactor =100;
 8008af4:	1dfb      	adds	r3, r7, #7
 8008af6:	2264      	movs	r2, #100	@ 0x64
 8008af8:	701a      	strb	r2, [r3, #0]
 8008afa:	e002      	b.n	8008b02 <sen5x_statemachine+0x2a>
  }
  else {
    delayfactor = 1;
 8008afc:	1dfb      	adds	r3, r7, #7
 8008afe:	2201      	movs	r2, #1
 8008b00:	701a      	strb	r2, [r3, #0]
  }
  if (TimestampIsReached(sen5xReadTimer)) {
 8008b02:	4b71      	ldr	r3, [pc, #452]	@ (8008cc8 <sen5x_statemachine+0x1f0>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	0018      	movs	r0, r3
 8008b08:	f004 f962 	bl	800cdd0 <TimestampIsReached>
 8008b0c:	1e03      	subs	r3, r0, #0
 8008b0e:	d100      	bne.n	8008b12 <sen5x_statemachine+0x3a>
 8008b10:	e0d5      	b.n	8008cbe <sen5x_statemachine+0x1e6>
    switch (samplesState) {
 8008b12:	4b6e      	ldr	r3, [pc, #440]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	d900      	bls.n	8008b1c <sen5x_statemachine+0x44>
 8008b1a:	e0d0      	b.n	8008cbe <sen5x_statemachine+0x1e6>
 8008b1c:	009a      	lsls	r2, r3, #2
 8008b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8008cd0 <sen5x_statemachine+0x1f8>)
 8008b20:	18d3      	adds	r3, r2, r3
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8008b26:	4a6b      	ldr	r2, [pc, #428]	@ (8008cd4 <sen5x_statemachine+0x1fc>)
 8008b28:	4b6b      	ldr	r3, [pc, #428]	@ (8008cd8 <sen5x_statemachine+0x200>)
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f004 f9a5 	bl	800ce7c <CreateLine>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8008b32:	f004 fd3f 	bl	800d5b4 <HAL_GetTick>
 8008b36:	0004      	movs	r4, r0
 8008b38:	1dfb      	adds	r3, r7, #7
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	4867      	ldr	r0, [pc, #412]	@ (8008cdc <sen5x_statemachine+0x204>)
 8008b40:	f7f7 fbba 	bl	80002b8 <__divsi3>
 8008b44:	0003      	movs	r3, r0
 8008b46:	18e2      	adds	r2, r4, r3
 8008b48:	4b5f      	ldr	r3, [pc, #380]	@ (8008cc8 <sen5x_statemachine+0x1f0>)
 8008b4a:	601a      	str	r2, [r3, #0]
      break;
 8008b4c:	e0b7      	b.n	8008cbe <sen5x_statemachine+0x1e6>
    case LIGHT_OUT:
//      Debug(" state is LIGHT_OUT");
      sen5x_Power_On();
 8008b4e:	f7ff fc03 	bl	8008358 <sen5x_Power_On>
      Debug("sen5x powered on, warming up for 30 sec.");
 8008b52:	4a63      	ldr	r2, [pc, #396]	@ (8008ce0 <sen5x_statemachine+0x208>)
 8008b54:	4b63      	ldr	r3, [pc, #396]	@ (8008ce4 <sen5x_statemachine+0x20c>)
 8008b56:	0019      	movs	r1, r3
 8008b58:	2003      	movs	r0, #3
 8008b5a:	f004 f98f 	bl	800ce7c <CreateLine>
      if (sen5x_lightup_measurement()) {
 8008b5e:	f7ff fd3d 	bl	80085dc <sen5x_lightup_measurement>
 8008b62:	1e03      	subs	r3, r0, #0
 8008b64:	d005      	beq.n	8008b72 <sen5x_statemachine+0x9a>
        Error("Error executing sen5x_lightup_measurement()");
 8008b66:	4a60      	ldr	r2, [pc, #384]	@ (8008ce8 <sen5x_statemachine+0x210>)
 8008b68:	4b5b      	ldr	r3, [pc, #364]	@ (8008cd8 <sen5x_statemachine+0x200>)
 8008b6a:	0019      	movs	r1, r3
 8008b6c:	2001      	movs	r0, #1
 8008b6e:	f004 f985 	bl	800ce7c <CreateLine>
      }
      samplesState = CHECK_SEN5X;
 8008b72:	4b56      	ldr	r3, [pc, #344]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008b74:	2203      	movs	r2, #3
 8008b76:	701a      	strb	r2, [r3, #0]
      sen5xReadTimer = HAL_GetTick() + 30000;
 8008b78:	f004 fd1c 	bl	800d5b4 <HAL_GetTick>
 8008b7c:	0003      	movs	r3, r0
 8008b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8008cec <sen5x_statemachine+0x214>)
 8008b80:	189a      	adds	r2, r3, r2
 8008b82:	4b51      	ldr	r3, [pc, #324]	@ (8008cc8 <sen5x_statemachine+0x1f0>)
 8008b84:	601a      	str	r2, [r3, #0]
      break;
 8008b86:	e09a      	b.n	8008cbe <sen5x_statemachine+0x1e6>
    case CHECK_SEN5X:
      samplesState = LIGHT_ON;
 8008b88:	4b50      	ldr	r3, [pc, #320]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8008b8e:	4b58      	ldr	r3, [pc, #352]	@ (8008cf0 <sen5x_statemachine+0x218>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d905      	bls.n	8008ba2 <sen5x_statemachine+0xca>
        samplesState = S5X_DISABLED;
 8008b96:	4b4d      	ldr	r3, [pc, #308]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8008b9c:	f7ff fbee 	bl	800837c <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8008ba0:	e08c      	b.n	8008cbc <sen5x_statemachine+0x1e4>
        if (sen5x_check_for_errors()) {
 8008ba2:	f7ff ff25 	bl	80089f0 <sen5x_check_for_errors>
 8008ba6:	1e03      	subs	r3, r0, #0
 8008ba8:	d100      	bne.n	8008bac <sen5x_statemachine+0xd4>
 8008baa:	e087      	b.n	8008cbc <sen5x_statemachine+0x1e4>
          if (sen5x_device_reset()) {
 8008bac:	f000 fbf4 	bl	8009398 <sen5x_device_reset>
 8008bb0:	1e03      	subs	r3, r0, #0
 8008bb2:	d006      	beq.n	8008bc2 <sen5x_statemachine+0xea>
            Error("Error resetting sen5x");
 8008bb4:	4a4f      	ldr	r2, [pc, #316]	@ (8008cf4 <sen5x_statemachine+0x21c>)
 8008bb6:	4b48      	ldr	r3, [pc, #288]	@ (8008cd8 <sen5x_statemachine+0x200>)
 8008bb8:	0019      	movs	r1, r3
 8008bba:	2001      	movs	r0, #1
 8008bbc:	f004 f95e 	bl	800ce7c <CreateLine>
 8008bc0:	e005      	b.n	8008bce <sen5x_statemachine+0xf6>
            Info("sen5x reset executed");
 8008bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8008cf8 <sen5x_statemachine+0x220>)
 8008bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8008cfc <sen5x_statemachine+0x224>)
 8008bc6:	0019      	movs	r1, r3
 8008bc8:	2002      	movs	r0, #2
 8008bca:	f004 f957 	bl	800ce7c <CreateLine>
          sen5xErrors++;
 8008bce:	4b48      	ldr	r3, [pc, #288]	@ (8008cf0 <sen5x_statemachine+0x218>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	4b46      	ldr	r3, [pc, #280]	@ (8008cf0 <sen5x_statemachine+0x218>)
 8008bd8:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8008bda:	f004 fceb 	bl	800d5b4 <HAL_GetTick>
 8008bde:	0003      	movs	r3, r0
 8008be0:	3396      	adds	r3, #150	@ 0x96
 8008be2:	001a      	movs	r2, r3
 8008be4:	4b38      	ldr	r3, [pc, #224]	@ (8008cc8 <sen5x_statemachine+0x1f0>)
 8008be6:	601a      	str	r2, [r3, #0]
      break;
 8008be8:	e068      	b.n	8008cbc <sen5x_statemachine+0x1e4>
    case LIGHT_ON:
//      Debug(" state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 8008bea:	240f      	movs	r4, #15
 8008bec:	193b      	adds	r3, r7, r4
 8008bee:	0018      	movs	r0, r3
 8008bf0:	f000 f8ee 	bl	8008dd0 <sen5x_read_data_ready>
      if (data_ready) {
 8008bf4:	193b      	adds	r3, r7, r4
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d026      	beq.n	8008c4a <sen5x_statemachine+0x172>
        if (sen5x_measurement()) {
 8008bfc:	f7ff fd9a 	bl	8008734 <sen5x_measurement>
 8008c00:	1e03      	subs	r3, r0, #0
 8008c02:	d005      	beq.n	8008c10 <sen5x_statemachine+0x138>
          Error("Error executing sen5x_measurement()");
 8008c04:	4a3e      	ldr	r2, [pc, #248]	@ (8008d00 <sen5x_statemachine+0x228>)
 8008c06:	4b34      	ldr	r3, [pc, #208]	@ (8008cd8 <sen5x_statemachine+0x200>)
 8008c08:	0019      	movs	r1, r3
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	f004 f936 	bl	800ce7c <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 8008c10:	4b3c      	ldr	r3, [pc, #240]	@ (8008d04 <sen5x_statemachine+0x22c>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d012      	beq.n	8008c3e <sen5x_statemachine+0x166>
          if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8008c18:	f7fd fca4 	bl	8006564 <RTC_GetWeekday>
 8008c1c:	0003      	movs	r3, r0
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d10a      	bne.n	8008c38 <sen5x_statemachine+0x160>
 8008c22:	4b39      	ldr	r3, [pc, #228]	@ (8008d08 <sen5x_statemachine+0x230>)
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2201      	movs	r2, #1
 8008c28:	4053      	eors	r3, r2
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <sen5x_statemachine+0x160>
            samplesState = CLEAN_FAN;
 8008c30:	4b26      	ldr	r3, [pc, #152]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008c32:	2204      	movs	r2, #4
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e002      	b.n	8008c3e <sen5x_statemachine+0x166>
          }
          else {
            samplesState = SAMPLES_TAKEN;
 8008c38:	4b24      	ldr	r3, [pc, #144]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008c3a:	2205      	movs	r2, #5
 8008c3c:	701a      	strb	r2, [r3, #0]
          }
        }
        sen5xSamples++;
 8008c3e:	4b31      	ldr	r3, [pc, #196]	@ (8008d04 <sen5x_statemachine+0x22c>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	4b2f      	ldr	r3, [pc, #188]	@ (8008d04 <sen5x_statemachine+0x22c>)
 8008c48:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 8008c4a:	f004 fcb3 	bl	800d5b4 <HAL_GetTick>
 8008c4e:	0003      	movs	r3, r0
 8008c50:	22fa      	movs	r2, #250	@ 0xfa
 8008c52:	0092      	lsls	r2, r2, #2
 8008c54:	189a      	adds	r2, r3, r2
 8008c56:	4b1c      	ldr	r3, [pc, #112]	@ (8008cc8 <sen5x_statemachine+0x1f0>)
 8008c58:	601a      	str	r2, [r3, #0]
      break;
 8008c5a:	e030      	b.n	8008cbe <sen5x_statemachine+0x1e6>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      sen5x_start_fan_cleaning();
 8008c5c:	f000 f99e 	bl	8008f9c <sen5x_start_fan_cleaning>
      sen5xReadTimer = HAL_GetTick() + 11000;
 8008c60:	f004 fca8 	bl	800d5b4 <HAL_GetTick>
 8008c64:	0003      	movs	r3, r0
 8008c66:	4a29      	ldr	r2, [pc, #164]	@ (8008d0c <sen5x_statemachine+0x234>)
 8008c68:	189a      	adds	r2, r3, r2
 8008c6a:	4b17      	ldr	r3, [pc, #92]	@ (8008cc8 <sen5x_statemachine+0x1f0>)
 8008c6c:	601a      	str	r2, [r3, #0]
      fanCleaningDone = true;
 8008c6e:	4b26      	ldr	r3, [pc, #152]	@ (8008d08 <sen5x_statemachine+0x230>)
 8008c70:	2201      	movs	r2, #1
 8008c72:	701a      	strb	r2, [r3, #0]
      samplesState = SAMPLES_TAKEN;
 8008c74:	4b15      	ldr	r3, [pc, #84]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008c76:	2205      	movs	r2, #5
 8008c78:	701a      	strb	r2, [r3, #0]
      break;
 8008c7a:	e020      	b.n	8008cbe <sen5x_statemachine+0x1e6>

    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      sen5xSamples = 0;
 8008c7c:	4b21      	ldr	r3, [pc, #132]	@ (8008d04 <sen5x_statemachine+0x22c>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 8008c82:	f7ff fccf 	bl	8008624 <sen5x_extinguish_measurement>
 8008c86:	1e03      	subs	r3, r0, #0
 8008c88:	d005      	beq.n	8008c96 <sen5x_statemachine+0x1be>
        Error("Error executing sen5x_extinguish_measurement()");
 8008c8a:	4a21      	ldr	r2, [pc, #132]	@ (8008d10 <sen5x_statemachine+0x238>)
 8008c8c:	4b12      	ldr	r3, [pc, #72]	@ (8008cd8 <sen5x_statemachine+0x200>)
 8008c8e:	0019      	movs	r1, r3
 8008c90:	2001      	movs	r0, #1
 8008c92:	f004 f8f3 	bl	800ce7c <CreateLine>
      }
      sen5x_Power_Off();
 8008c96:	f7ff fb71 	bl	800837c <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8008c9a:	f004 fc8b 	bl	800d5b4 <HAL_GetTick>
 8008c9e:	0004      	movs	r4, r0
 8008ca0:	1dfb      	adds	r3, r7, #7
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	0019      	movs	r1, r3
 8008ca6:	480d      	ldr	r0, [pc, #52]	@ (8008cdc <sen5x_statemachine+0x204>)
 8008ca8:	f7f7 fb06 	bl	80002b8 <__divsi3>
 8008cac:	0003      	movs	r3, r0
 8008cae:	18e2      	adds	r2, r4, r3
 8008cb0:	4b05      	ldr	r3, [pc, #20]	@ (8008cc8 <sen5x_statemachine+0x1f0>)
 8008cb2:	601a      	str	r2, [r3, #0]
      samplesState = LIGHT_OUT;
 8008cb4:	4b05      	ldr	r3, [pc, #20]	@ (8008ccc <sen5x_statemachine+0x1f4>)
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8008cba:	e000      	b.n	8008cbe <sen5x_statemachine+0x1e6>
      break;
 8008cbc:	46c0      	nop			@ (mov r8, r8)
}
 8008cbe:	46c0      	nop			@ (mov r8, r8)
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	b005      	add	sp, #20
 8008cc4:	bd90      	pop	{r4, r7, pc}
 8008cc6:	46c0      	nop			@ (mov r8, r8)
 8008cc8:	200011e8 	.word	0x200011e8
 8008ccc:	20000084 	.word	0x20000084
 8008cd0:	08023244 	.word	0x08023244
 8008cd4:	080229a4 	.word	0x080229a4
 8008cd8:	08022588 	.word	0x08022588
 8008cdc:	002fefd8 	.word	0x002fefd8
 8008ce0:	080229d4 	.word	0x080229d4
 8008ce4:	080228d0 	.word	0x080228d0
 8008ce8:	08022a00 	.word	0x08022a00
 8008cec:	00007530 	.word	0x00007530
 8008cf0:	200011ed 	.word	0x200011ed
 8008cf4:	08022a2c 	.word	0x08022a2c
 8008cf8:	08022a44 	.word	0x08022a44
 8008cfc:	080226dc 	.word	0x080226dc
 8008d00:	08022a5c 	.word	0x08022a5c
 8008d04:	200011ec 	.word	0x200011ec
 8008d08:	200011e4 	.word	0x200011e4
 8008d0c:	00002af8 	.word	0x00002af8
 8008d10:	08022a80 	.word	0x08022a80

08008d14 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8008d14:	b590      	push	{r4, r7, lr}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008d1a:	1dbb      	adds	r3, r7, #6
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8008d20:	1dbc      	adds	r4, r7, #6
 8008d22:	1dbb      	adds	r3, r7, #6
 8008d24:	8819      	ldrh	r1, [r3, #0]
 8008d26:	003b      	movs	r3, r7
 8008d28:	2221      	movs	r2, #33	@ 0x21
 8008d2a:	0018      	movs	r0, r3
 8008d2c:	f001 fb26 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8008d30:	0003      	movs	r3, r0
 8008d32:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008d34:	1d3c      	adds	r4, r7, #4
 8008d36:	1dbb      	adds	r3, r7, #6
 8008d38:	881a      	ldrh	r2, [r3, #0]
 8008d3a:	003b      	movs	r3, r7
 8008d3c:	0019      	movs	r1, r3
 8008d3e:	2069      	movs	r0, #105	@ 0x69
 8008d40:	f001 fba0 	bl	800a484 <sensirion_i2c_write_data>
 8008d44:	0003      	movs	r3, r0
 8008d46:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	5e9b      	ldrsh	r3, [r3, r2]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <sen5x_start_measurement+0x46>
        return error;
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	2200      	movs	r2, #0
 8008d56:	5e9b      	ldrsh	r3, [r3, r2]
 8008d58:	e004      	b.n	8008d64 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8008d5a:	4b04      	ldr	r3, [pc, #16]	@ (8008d6c <sen5x_start_measurement+0x58>)
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f7ff fe27 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	0018      	movs	r0, r3
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b003      	add	sp, #12
 8008d6a:	bd90      	pop	{r4, r7, pc}
 8008d6c:	0000c350 	.word	0x0000c350

08008d70 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008d76:	1dbb      	adds	r3, r7, #6
 8008d78:	2200      	movs	r2, #0
 8008d7a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8008d7c:	1dbc      	adds	r4, r7, #6
 8008d7e:	2382      	movs	r3, #130	@ 0x82
 8008d80:	005a      	lsls	r2, r3, #1
 8008d82:	1dbb      	adds	r3, r7, #6
 8008d84:	8819      	ldrh	r1, [r3, #0]
 8008d86:	003b      	movs	r3, r7
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f001 faf7 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8008d8e:	0003      	movs	r3, r0
 8008d90:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008d92:	1d3c      	adds	r4, r7, #4
 8008d94:	1dbb      	adds	r3, r7, #6
 8008d96:	881a      	ldrh	r2, [r3, #0]
 8008d98:	003b      	movs	r3, r7
 8008d9a:	0019      	movs	r1, r3
 8008d9c:	2069      	movs	r0, #105	@ 0x69
 8008d9e:	f001 fb71 	bl	800a484 <sensirion_i2c_write_data>
 8008da2:	0003      	movs	r3, r0
 8008da4:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008da6:	1d3b      	adds	r3, r7, #4
 8008da8:	2200      	movs	r2, #0
 8008daa:	5e9b      	ldrsh	r3, [r3, r2]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <sen5x_stop_measurement+0x48>
        return error;
 8008db0:	1d3b      	adds	r3, r7, #4
 8008db2:	2200      	movs	r2, #0
 8008db4:	5e9b      	ldrsh	r3, [r3, r2]
 8008db6:	e004      	b.n	8008dc2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8008db8:	4b04      	ldr	r3, [pc, #16]	@ (8008dcc <sen5x_stop_measurement+0x5c>)
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f7ff fdf8 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	b003      	add	sp, #12
 8008dc8:	bd90      	pop	{r4, r7, pc}
 8008dca:	46c0      	nop			@ (mov r8, r8)
 8008dcc:	00030d40 	.word	0x00030d40

08008dd0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8008dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8008dd8:	250e      	movs	r5, #14
 8008dda:	197b      	adds	r3, r7, r5
 8008ddc:	2200      	movs	r2, #0
 8008dde:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8008de0:	197c      	adds	r4, r7, r5
 8008de2:	4a22      	ldr	r2, [pc, #136]	@ (8008e6c <sen5x_read_data_ready+0x9c>)
 8008de4:	197b      	adds	r3, r7, r5
 8008de6:	8819      	ldrh	r1, [r3, #0]
 8008de8:	2308      	movs	r3, #8
 8008dea:	18fb      	adds	r3, r7, r3
 8008dec:	0018      	movs	r0, r3
 8008dee:	f001 fac5 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8008df2:	0003      	movs	r3, r0
 8008df4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008df6:	260c      	movs	r6, #12
 8008df8:	19bc      	adds	r4, r7, r6
 8008dfa:	197b      	adds	r3, r7, r5
 8008dfc:	881a      	ldrh	r2, [r3, #0]
 8008dfe:	2308      	movs	r3, #8
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	0019      	movs	r1, r3
 8008e04:	2069      	movs	r0, #105	@ 0x69
 8008e06:	f001 fb3d 	bl	800a484 <sensirion_i2c_write_data>
 8008e0a:	0003      	movs	r3, r0
 8008e0c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008e0e:	19bb      	adds	r3, r7, r6
 8008e10:	2200      	movs	r2, #0
 8008e12:	5e9b      	ldrsh	r3, [r3, r2]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <sen5x_read_data_ready+0x50>
        return error;
 8008e18:	19bb      	adds	r3, r7, r6
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	5e9b      	ldrsh	r3, [r3, r2]
 8008e1e:	e020      	b.n	8008e62 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8008e20:	4b13      	ldr	r3, [pc, #76]	@ (8008e70 <sen5x_read_data_ready+0xa0>)
 8008e22:	0018      	movs	r0, r3
 8008e24:	f7ff fdc4 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8008e28:	250c      	movs	r5, #12
 8008e2a:	197c      	adds	r4, r7, r5
 8008e2c:	2308      	movs	r3, #8
 8008e2e:	18fb      	adds	r3, r7, r3
 8008e30:	2202      	movs	r2, #2
 8008e32:	0019      	movs	r1, r3
 8008e34:	2069      	movs	r0, #105	@ 0x69
 8008e36:	f001 fb3d 	bl	800a4b4 <sensirion_i2c_read_data_inplace>
 8008e3a:	0003      	movs	r3, r0
 8008e3c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008e3e:	197b      	adds	r3, r7, r5
 8008e40:	2200      	movs	r2, #0
 8008e42:	5e9b      	ldrsh	r3, [r3, r2]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <sen5x_read_data_ready+0x80>
        return error;
 8008e48:	197b      	adds	r3, r7, r5
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	5e9b      	ldrsh	r3, [r3, r2]
 8008e4e:	e008      	b.n	8008e62 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8008e50:	2308      	movs	r3, #8
 8008e52:	18fb      	adds	r3, r7, r3
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	1e5a      	subs	r2, r3, #1
 8008e58:	4193      	sbcs	r3, r2
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	0018      	movs	r0, r3
 8008e64:	46bd      	mov	sp, r7
 8008e66:	b005      	add	sp, #20
 8008e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e6a:	46c0      	nop			@ (mov r8, r8)
 8008e6c:	00000202 	.word	0x00000202
 8008e70:	00004e20 	.word	0x00004e20

08008e74 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8008e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e76:	b08d      	sub	sp, #52	@ 0x34
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8008e82:	252e      	movs	r5, #46	@ 0x2e
 8008e84:	197b      	adds	r3, r7, r5
 8008e86:	2200      	movs	r2, #0
 8008e88:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8008e8a:	197c      	adds	r4, r7, r5
 8008e8c:	23f1      	movs	r3, #241	@ 0xf1
 8008e8e:	009a      	lsls	r2, r3, #2
 8008e90:	197b      	adds	r3, r7, r5
 8008e92:	8819      	ldrh	r1, [r3, #0]
 8008e94:	2314      	movs	r3, #20
 8008e96:	18fb      	adds	r3, r7, r3
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f001 fa6f 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008ea2:	262c      	movs	r6, #44	@ 0x2c
 8008ea4:	19bc      	adds	r4, r7, r6
 8008ea6:	197b      	adds	r3, r7, r5
 8008ea8:	881a      	ldrh	r2, [r3, #0]
 8008eaa:	2314      	movs	r3, #20
 8008eac:	18fb      	adds	r3, r7, r3
 8008eae:	0019      	movs	r1, r3
 8008eb0:	2069      	movs	r0, #105	@ 0x69
 8008eb2:	f001 fae7 	bl	800a484 <sensirion_i2c_write_data>
 8008eb6:	0003      	movs	r3, r0
 8008eb8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008eba:	19bb      	adds	r3, r7, r6
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	5e9b      	ldrsh	r3, [r3, r2]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <sen5x_read_measured_values+0x58>
        return error;
 8008ec4:	19bb      	adds	r3, r7, r6
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	5e9b      	ldrsh	r3, [r3, r2]
 8008eca:	e060      	b.n	8008f8e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8008ecc:	4b32      	ldr	r3, [pc, #200]	@ (8008f98 <sen5x_read_measured_values+0x124>)
 8008ece:	0018      	movs	r0, r3
 8008ed0:	f7ff fd6e 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8008ed4:	252c      	movs	r5, #44	@ 0x2c
 8008ed6:	197c      	adds	r4, r7, r5
 8008ed8:	2314      	movs	r3, #20
 8008eda:	18fb      	adds	r3, r7, r3
 8008edc:	2210      	movs	r2, #16
 8008ede:	0019      	movs	r1, r3
 8008ee0:	2069      	movs	r0, #105	@ 0x69
 8008ee2:	f001 fae7 	bl	800a4b4 <sensirion_i2c_read_data_inplace>
 8008ee6:	0003      	movs	r3, r0
 8008ee8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008eea:	197b      	adds	r3, r7, r5
 8008eec:	2200      	movs	r2, #0
 8008eee:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <sen5x_read_measured_values+0x88>
        return error;
 8008ef4:	197b      	adds	r3, r7, r5
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	5e9b      	ldrsh	r3, [r3, r2]
 8008efa:	e048      	b.n	8008f8e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8008efc:	2414      	movs	r4, #20
 8008efe:	193b      	adds	r3, r7, r4
 8008f00:	0018      	movs	r0, r3
 8008f02:	f000 fa79 	bl	80093f8 <sensirion_common_bytes_to_uint16_t>
 8008f06:	0003      	movs	r3, r0
 8008f08:	001a      	movs	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8008f0e:	193b      	adds	r3, r7, r4
 8008f10:	3302      	adds	r3, #2
 8008f12:	0018      	movs	r0, r3
 8008f14:	f000 fa70 	bl	80093f8 <sensirion_common_bytes_to_uint16_t>
 8008f18:	0003      	movs	r3, r0
 8008f1a:	001a      	movs	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8008f20:	193b      	adds	r3, r7, r4
 8008f22:	3304      	adds	r3, #4
 8008f24:	0018      	movs	r0, r3
 8008f26:	f000 fa67 	bl	80093f8 <sensirion_common_bytes_to_uint16_t>
 8008f2a:	0003      	movs	r3, r0
 8008f2c:	001a      	movs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8008f32:	193b      	adds	r3, r7, r4
 8008f34:	3306      	adds	r3, #6
 8008f36:	0018      	movs	r0, r3
 8008f38:	f000 fa5e 	bl	80093f8 <sensirion_common_bytes_to_uint16_t>
 8008f3c:	0003      	movs	r3, r0
 8008f3e:	001a      	movs	r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8008f44:	193b      	adds	r3, r7, r4
 8008f46:	3308      	adds	r3, #8
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f000 fa81 	bl	8009450 <sensirion_common_bytes_to_int16_t>
 8008f4e:	0003      	movs	r3, r0
 8008f50:	001a      	movs	r2, r3
 8008f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f54:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8008f56:	193b      	adds	r3, r7, r4
 8008f58:	330a      	adds	r3, #10
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f000 fa78 	bl	8009450 <sensirion_common_bytes_to_int16_t>
 8008f60:	0003      	movs	r3, r0
 8008f62:	001a      	movs	r2, r3
 8008f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f66:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8008f68:	193b      	adds	r3, r7, r4
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f000 fa6f 	bl	8009450 <sensirion_common_bytes_to_int16_t>
 8008f72:	0003      	movs	r3, r0
 8008f74:	001a      	movs	r2, r3
 8008f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f78:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8008f7a:	193b      	adds	r3, r7, r4
 8008f7c:	330e      	adds	r3, #14
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f000 fa66 	bl	8009450 <sensirion_common_bytes_to_int16_t>
 8008f84:	0003      	movs	r3, r0
 8008f86:	001a      	movs	r2, r3
 8008f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f8a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	0018      	movs	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	b00d      	add	sp, #52	@ 0x34
 8008f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f96:	46c0      	nop			@ (mov r8, r8)
 8008f98:	00004e20 	.word	0x00004e20

08008f9c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8008f9c:	b590      	push	{r4, r7, lr}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008fa2:	1dbb      	adds	r3, r7, #6
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8008fa8:	1dbc      	adds	r4, r7, #6
 8008faa:	4a12      	ldr	r2, [pc, #72]	@ (8008ff4 <sen5x_start_fan_cleaning+0x58>)
 8008fac:	1dbb      	adds	r3, r7, #6
 8008fae:	8819      	ldrh	r1, [r3, #0]
 8008fb0:	003b      	movs	r3, r7
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f001 f9e2 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8008fb8:	0003      	movs	r3, r0
 8008fba:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008fbc:	1d3c      	adds	r4, r7, #4
 8008fbe:	1dbb      	adds	r3, r7, #6
 8008fc0:	881a      	ldrh	r2, [r3, #0]
 8008fc2:	003b      	movs	r3, r7
 8008fc4:	0019      	movs	r1, r3
 8008fc6:	2069      	movs	r0, #105	@ 0x69
 8008fc8:	f001 fa5c 	bl	800a484 <sensirion_i2c_write_data>
 8008fcc:	0003      	movs	r3, r0
 8008fce:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008fd0:	1d3b      	adds	r3, r7, #4
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <sen5x_start_fan_cleaning+0x46>
        return error;
 8008fda:	1d3b      	adds	r3, r7, #4
 8008fdc:	2200      	movs	r2, #0
 8008fde:	5e9b      	ldrsh	r3, [r3, r2]
 8008fe0:	e004      	b.n	8008fec <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8008fe2:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <sen5x_start_fan_cleaning+0x5c>)
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7ff fce3 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	0018      	movs	r0, r3
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	b003      	add	sp, #12
 8008ff2:	bd90      	pop	{r4, r7, pc}
 8008ff4:	00005607 	.word	0x00005607
 8008ff8:	00004e20 	.word	0x00004e20

08008ffc <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8008ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	0004      	movs	r4, r0
 8009004:	0008      	movs	r0, r1
 8009006:	0011      	movs	r1, r2
 8009008:	1dbb      	adds	r3, r7, #6
 800900a:	1c22      	adds	r2, r4, #0
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	1d3b      	adds	r3, r7, #4
 8009010:	1c02      	adds	r2, r0, #0
 8009012:	801a      	strh	r2, [r3, #0]
 8009014:	1cbb      	adds	r3, r7, #2
 8009016:	1c0a      	adds	r2, r1, #0
 8009018:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800901a:	2516      	movs	r5, #22
 800901c:	197b      	adds	r3, r7, r5
 800901e:	2200      	movs	r2, #0
 8009020:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 8009022:	197c      	adds	r4, r7, r5
 8009024:	4a25      	ldr	r2, [pc, #148]	@ (80090bc <sen5x_set_temperature_offset_parameters+0xc0>)
 8009026:	197b      	adds	r3, r7, r5
 8009028:	8819      	ldrh	r1, [r3, #0]
 800902a:	2608      	movs	r6, #8
 800902c:	19bb      	adds	r3, r7, r6
 800902e:	0018      	movs	r0, r3
 8009030:	f001 f9a4 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8009034:	0003      	movs	r3, r0
 8009036:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009038:	197c      	adds	r4, r7, r5
 800903a:	1dbb      	adds	r3, r7, #6
 800903c:	2200      	movs	r2, #0
 800903e:	5e9a      	ldrsh	r2, [r3, r2]
 8009040:	197b      	adds	r3, r7, r5
 8009042:	8819      	ldrh	r1, [r3, #0]
 8009044:	19bb      	adds	r3, r7, r6
 8009046:	0018      	movs	r0, r3
 8009048:	f001 fa03 	bl	800a452 <sensirion_i2c_add_int16_t_to_buffer>
 800904c:	0003      	movs	r3, r0
 800904e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009050:	197c      	adds	r4, r7, r5
 8009052:	1d3b      	adds	r3, r7, #4
 8009054:	2200      	movs	r2, #0
 8009056:	5e9a      	ldrsh	r2, [r3, r2]
 8009058:	197b      	adds	r3, r7, r5
 800905a:	8819      	ldrh	r1, [r3, #0]
 800905c:	19bb      	adds	r3, r7, r6
 800905e:	0018      	movs	r0, r3
 8009060:	f001 f9f7 	bl	800a452 <sensirion_i2c_add_int16_t_to_buffer>
 8009064:	0003      	movs	r3, r0
 8009066:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009068:	197c      	adds	r4, r7, r5
 800906a:	1cbb      	adds	r3, r7, #2
 800906c:	881a      	ldrh	r2, [r3, #0]
 800906e:	197b      	adds	r3, r7, r5
 8009070:	8819      	ldrh	r1, [r3, #0]
 8009072:	19bb      	adds	r3, r7, r6
 8009074:	0018      	movs	r0, r3
 8009076:	f001 f9ad 	bl	800a3d4 <sensirion_i2c_add_uint16_t_to_buffer>
 800907a:	0003      	movs	r3, r0
 800907c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800907e:	2214      	movs	r2, #20
 8009080:	18bc      	adds	r4, r7, r2
 8009082:	197b      	adds	r3, r7, r5
 8009084:	881a      	ldrh	r2, [r3, #0]
 8009086:	19bb      	adds	r3, r7, r6
 8009088:	0019      	movs	r1, r3
 800908a:	2069      	movs	r0, #105	@ 0x69
 800908c:	f001 f9fa 	bl	800a484 <sensirion_i2c_write_data>
 8009090:	0003      	movs	r3, r0
 8009092:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009094:	2214      	movs	r2, #20
 8009096:	18bb      	adds	r3, r7, r2
 8009098:	2100      	movs	r1, #0
 800909a:	5e5b      	ldrsh	r3, [r3, r1]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 80090a0:	18bb      	adds	r3, r7, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	5e9b      	ldrsh	r3, [r3, r2]
 80090a6:	e004      	b.n	80090b2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80090a8:	4b05      	ldr	r3, [pc, #20]	@ (80090c0 <sen5x_set_temperature_offset_parameters+0xc4>)
 80090aa:	0018      	movs	r0, r3
 80090ac:	f7ff fc80 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	0018      	movs	r0, r3
 80090b4:	46bd      	mov	sp, r7
 80090b6:	b007      	add	sp, #28
 80090b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ba:	46c0      	nop			@ (mov r8, r8)
 80090bc:	000060b2 	.word	0x000060b2
 80090c0:	00004e20 	.word	0x00004e20

080090c4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 80090c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c6:	b091      	sub	sp, #68	@ 0x44
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	000a      	movs	r2, r1
 80090ce:	1cfb      	adds	r3, r7, #3
 80090d0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 80090d2:	253e      	movs	r5, #62	@ 0x3e
 80090d4:	197b      	adds	r3, r7, r5
 80090d6:	2200      	movs	r2, #0
 80090d8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 80090da:	197c      	adds	r4, r7, r5
 80090dc:	4a22      	ldr	r2, [pc, #136]	@ (8009168 <sen5x_get_product_name+0xa4>)
 80090de:	197b      	adds	r3, r7, r5
 80090e0:	8819      	ldrh	r1, [r3, #0]
 80090e2:	230c      	movs	r3, #12
 80090e4:	18fb      	adds	r3, r7, r3
 80090e6:	0018      	movs	r0, r3
 80090e8:	f001 f948 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 80090ec:	0003      	movs	r3, r0
 80090ee:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80090f0:	263c      	movs	r6, #60	@ 0x3c
 80090f2:	19bc      	adds	r4, r7, r6
 80090f4:	197b      	adds	r3, r7, r5
 80090f6:	881a      	ldrh	r2, [r3, #0]
 80090f8:	230c      	movs	r3, #12
 80090fa:	18fb      	adds	r3, r7, r3
 80090fc:	0019      	movs	r1, r3
 80090fe:	2069      	movs	r0, #105	@ 0x69
 8009100:	f001 f9c0 	bl	800a484 <sensirion_i2c_write_data>
 8009104:	0003      	movs	r3, r0
 8009106:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009108:	19bb      	adds	r3, r7, r6
 800910a:	2200      	movs	r2, #0
 800910c:	5e9b      	ldrsh	r3, [r3, r2]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <sen5x_get_product_name+0x56>
        return error;
 8009112:	19bb      	adds	r3, r7, r6
 8009114:	2200      	movs	r2, #0
 8009116:	5e9b      	ldrsh	r3, [r3, r2]
 8009118:	e021      	b.n	800915e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800911a:	4b14      	ldr	r3, [pc, #80]	@ (800916c <sen5x_get_product_name+0xa8>)
 800911c:	0018      	movs	r0, r3
 800911e:	f7ff fc47 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009122:	253c      	movs	r5, #60	@ 0x3c
 8009124:	197c      	adds	r4, r7, r5
 8009126:	230c      	movs	r3, #12
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	2220      	movs	r2, #32
 800912c:	0019      	movs	r1, r3
 800912e:	2069      	movs	r0, #105	@ 0x69
 8009130:	f001 f9c0 	bl	800a4b4 <sensirion_i2c_read_data_inplace>
 8009134:	0003      	movs	r3, r0
 8009136:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009138:	197b      	adds	r3, r7, r5
 800913a:	2200      	movs	r2, #0
 800913c:	5e9b      	ldrsh	r3, [r3, r2]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <sen5x_get_product_name+0x86>
        return error;
 8009142:	197b      	adds	r3, r7, r5
 8009144:	2200      	movs	r2, #0
 8009146:	5e9b      	ldrsh	r3, [r3, r2]
 8009148:	e009      	b.n	800915e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800914a:	1cfb      	adds	r3, r7, #3
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	b29a      	uxth	r2, r3
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	230c      	movs	r3, #12
 8009154:	18fb      	adds	r3, r7, r3
 8009156:	0018      	movs	r0, r3
 8009158:	f000 f988 	bl	800946c <sensirion_common_copy_bytes>
    return NO_ERROR;
 800915c:	2300      	movs	r3, #0
}
 800915e:	0018      	movs	r0, r3
 8009160:	46bd      	mov	sp, r7
 8009162:	b011      	add	sp, #68	@ 0x44
 8009164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	0000d014 	.word	0x0000d014
 800916c:	0000c350 	.word	0x0000c350

08009170 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009172:	b091      	sub	sp, #68	@ 0x44
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	000a      	movs	r2, r1
 800917a:	1cfb      	adds	r3, r7, #3
 800917c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800917e:	253e      	movs	r5, #62	@ 0x3e
 8009180:	197b      	adds	r3, r7, r5
 8009182:	2200      	movs	r2, #0
 8009184:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009186:	197c      	adds	r4, r7, r5
 8009188:	4a22      	ldr	r2, [pc, #136]	@ (8009214 <sen5x_get_serial_number+0xa4>)
 800918a:	197b      	adds	r3, r7, r5
 800918c:	8819      	ldrh	r1, [r3, #0]
 800918e:	230c      	movs	r3, #12
 8009190:	18fb      	adds	r3, r7, r3
 8009192:	0018      	movs	r0, r3
 8009194:	f001 f8f2 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8009198:	0003      	movs	r3, r0
 800919a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800919c:	263c      	movs	r6, #60	@ 0x3c
 800919e:	19bc      	adds	r4, r7, r6
 80091a0:	197b      	adds	r3, r7, r5
 80091a2:	881a      	ldrh	r2, [r3, #0]
 80091a4:	230c      	movs	r3, #12
 80091a6:	18fb      	adds	r3, r7, r3
 80091a8:	0019      	movs	r1, r3
 80091aa:	2069      	movs	r0, #105	@ 0x69
 80091ac:	f001 f96a 	bl	800a484 <sensirion_i2c_write_data>
 80091b0:	0003      	movs	r3, r0
 80091b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 80091b4:	19bb      	adds	r3, r7, r6
 80091b6:	2200      	movs	r2, #0
 80091b8:	5e9b      	ldrsh	r3, [r3, r2]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <sen5x_get_serial_number+0x56>
        return error;
 80091be:	19bb      	adds	r3, r7, r6
 80091c0:	2200      	movs	r2, #0
 80091c2:	5e9b      	ldrsh	r3, [r3, r2]
 80091c4:	e021      	b.n	800920a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 80091c6:	4b14      	ldr	r3, [pc, #80]	@ (8009218 <sen5x_get_serial_number+0xa8>)
 80091c8:	0018      	movs	r0, r3
 80091ca:	f7ff fbf1 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 80091ce:	253c      	movs	r5, #60	@ 0x3c
 80091d0:	197c      	adds	r4, r7, r5
 80091d2:	230c      	movs	r3, #12
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	2220      	movs	r2, #32
 80091d8:	0019      	movs	r1, r3
 80091da:	2069      	movs	r0, #105	@ 0x69
 80091dc:	f001 f96a 	bl	800a4b4 <sensirion_i2c_read_data_inplace>
 80091e0:	0003      	movs	r3, r0
 80091e2:	8023      	strh	r3, [r4, #0]
    if (error) {
 80091e4:	197b      	adds	r3, r7, r5
 80091e6:	2200      	movs	r2, #0
 80091e8:	5e9b      	ldrsh	r3, [r3, r2]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <sen5x_get_serial_number+0x86>
        return error;
 80091ee:	197b      	adds	r3, r7, r5
 80091f0:	2200      	movs	r2, #0
 80091f2:	5e9b      	ldrsh	r3, [r3, r2]
 80091f4:	e009      	b.n	800920a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 80091f6:	1cfb      	adds	r3, r7, #3
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	230c      	movs	r3, #12
 8009200:	18fb      	adds	r3, r7, r3
 8009202:	0018      	movs	r0, r3
 8009204:	f000 f932 	bl	800946c <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009208:	2300      	movs	r3, #0
}
 800920a:	0018      	movs	r0, r3
 800920c:	46bd      	mov	sp, r7
 800920e:	b011      	add	sp, #68	@ 0x44
 8009210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009212:	46c0      	nop			@ (mov r8, r8)
 8009214:	0000d033 	.word	0x0000d033
 8009218:	0000c350 	.word	0x0000c350

0800921c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800921c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800921e:	b089      	sub	sp, #36	@ 0x24
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800922a:	251e      	movs	r5, #30
 800922c:	197b      	adds	r3, r7, r5
 800922e:	2200      	movs	r2, #0
 8009230:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009232:	197c      	adds	r4, r7, r5
 8009234:	23d1      	movs	r3, #209	@ 0xd1
 8009236:	021a      	lsls	r2, r3, #8
 8009238:	197b      	adds	r3, r7, r5
 800923a:	8819      	ldrh	r1, [r3, #0]
 800923c:	2310      	movs	r3, #16
 800923e:	18fb      	adds	r3, r7, r3
 8009240:	0018      	movs	r0, r3
 8009242:	f001 f89b 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8009246:	0003      	movs	r3, r0
 8009248:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800924a:	261c      	movs	r6, #28
 800924c:	19bc      	adds	r4, r7, r6
 800924e:	197b      	adds	r3, r7, r5
 8009250:	881a      	ldrh	r2, [r3, #0]
 8009252:	2310      	movs	r3, #16
 8009254:	18fb      	adds	r3, r7, r3
 8009256:	0019      	movs	r1, r3
 8009258:	2069      	movs	r0, #105	@ 0x69
 800925a:	f001 f913 	bl	800a484 <sensirion_i2c_write_data>
 800925e:	0003      	movs	r3, r0
 8009260:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009262:	19bb      	adds	r3, r7, r6
 8009264:	2200      	movs	r2, #0
 8009266:	5e9b      	ldrsh	r3, [r3, r2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <sen5x_get_version+0x58>
        return error;
 800926c:	19bb      	adds	r3, r7, r6
 800926e:	2200      	movs	r2, #0
 8009270:	5e9b      	ldrsh	r3, [r3, r2]
 8009272:	e038      	b.n	80092e6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009274:	4b1e      	ldr	r3, [pc, #120]	@ (80092f0 <sen5x_get_version+0xd4>)
 8009276:	0018      	movs	r0, r3
 8009278:	f7ff fb9a 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800927c:	251c      	movs	r5, #28
 800927e:	197c      	adds	r4, r7, r5
 8009280:	2310      	movs	r3, #16
 8009282:	18fb      	adds	r3, r7, r3
 8009284:	2208      	movs	r2, #8
 8009286:	0019      	movs	r1, r3
 8009288:	2069      	movs	r0, #105	@ 0x69
 800928a:	f001 f913 	bl	800a4b4 <sensirion_i2c_read_data_inplace>
 800928e:	0003      	movs	r3, r0
 8009290:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009292:	197b      	adds	r3, r7, r5
 8009294:	2200      	movs	r2, #0
 8009296:	5e9b      	ldrsh	r3, [r3, r2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <sen5x_get_version+0x88>
        return error;
 800929c:	197b      	adds	r3, r7, r5
 800929e:	2200      	movs	r2, #0
 80092a0:	5e9b      	ldrsh	r3, [r3, r2]
 80092a2:	e020      	b.n	80092e6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 80092a4:	2110      	movs	r1, #16
 80092a6:	187b      	adds	r3, r7, r1
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 80092ae:	187b      	adds	r3, r7, r1
 80092b0:	785a      	ldrb	r2, [r3, #1]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 80092b6:	187b      	adds	r3, r7, r1
 80092b8:	789b      	ldrb	r3, [r3, #2]
 80092ba:	1e5a      	subs	r2, r3, #1
 80092bc:	4193      	sbcs	r3, r2
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 80092c4:	187b      	adds	r3, r7, r1
 80092c6:	78da      	ldrb	r2, [r3, #3]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 80092cc:	187b      	adds	r3, r7, r1
 80092ce:	791a      	ldrb	r2, [r3, #4]
 80092d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 80092d4:	187b      	adds	r3, r7, r1
 80092d6:	795a      	ldrb	r2, [r3, #5]
 80092d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092da:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 80092dc:	187b      	adds	r3, r7, r1
 80092de:	799a      	ldrb	r2, [r3, #6]
 80092e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	0018      	movs	r0, r3
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b009      	add	sp, #36	@ 0x24
 80092ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092ee:	46c0      	nop			@ (mov r8, r8)
 80092f0:	00004e20 	.word	0x00004e20

080092f4 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 80092f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 80092fc:	2516      	movs	r5, #22
 80092fe:	197b      	adds	r3, r7, r5
 8009300:	2200      	movs	r2, #0
 8009302:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009304:	197c      	adds	r4, r7, r5
 8009306:	4a22      	ldr	r2, [pc, #136]	@ (8009390 <sen5x_read_device_status+0x9c>)
 8009308:	197b      	adds	r3, r7, r5
 800930a:	8819      	ldrh	r1, [r3, #0]
 800930c:	230c      	movs	r3, #12
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	0018      	movs	r0, r3
 8009312:	f001 f833 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 8009316:	0003      	movs	r3, r0
 8009318:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800931a:	2614      	movs	r6, #20
 800931c:	19bc      	adds	r4, r7, r6
 800931e:	197b      	adds	r3, r7, r5
 8009320:	881a      	ldrh	r2, [r3, #0]
 8009322:	230c      	movs	r3, #12
 8009324:	18fb      	adds	r3, r7, r3
 8009326:	0019      	movs	r1, r3
 8009328:	2069      	movs	r0, #105	@ 0x69
 800932a:	f001 f8ab 	bl	800a484 <sensirion_i2c_write_data>
 800932e:	0003      	movs	r3, r0
 8009330:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009332:	19bb      	adds	r3, r7, r6
 8009334:	2200      	movs	r2, #0
 8009336:	5e9b      	ldrsh	r3, [r3, r2]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <sen5x_read_device_status+0x50>
        return error;
 800933c:	19bb      	adds	r3, r7, r6
 800933e:	2200      	movs	r2, #0
 8009340:	5e9b      	ldrsh	r3, [r3, r2]
 8009342:	e020      	b.n	8009386 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009344:	4b13      	ldr	r3, [pc, #76]	@ (8009394 <sen5x_read_device_status+0xa0>)
 8009346:	0018      	movs	r0, r3
 8009348:	f7ff fb32 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800934c:	2514      	movs	r5, #20
 800934e:	197c      	adds	r4, r7, r5
 8009350:	230c      	movs	r3, #12
 8009352:	18fb      	adds	r3, r7, r3
 8009354:	2204      	movs	r2, #4
 8009356:	0019      	movs	r1, r3
 8009358:	2069      	movs	r0, #105	@ 0x69
 800935a:	f001 f8ab 	bl	800a4b4 <sensirion_i2c_read_data_inplace>
 800935e:	0003      	movs	r3, r0
 8009360:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009362:	197b      	adds	r3, r7, r5
 8009364:	2200      	movs	r2, #0
 8009366:	5e9b      	ldrsh	r3, [r3, r2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <sen5x_read_device_status+0x80>
        return error;
 800936c:	197b      	adds	r3, r7, r5
 800936e:	2200      	movs	r2, #0
 8009370:	5e9b      	ldrsh	r3, [r3, r2]
 8009372:	e008      	b.n	8009386 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009374:	230c      	movs	r3, #12
 8009376:	18fb      	adds	r3, r7, r3
 8009378:	0018      	movs	r0, r3
 800937a:	f000 f850 	bl	800941e <sensirion_common_bytes_to_uint32_t>
 800937e:	0002      	movs	r2, r0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009384:	2300      	movs	r3, #0
}
 8009386:	0018      	movs	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	b007      	add	sp, #28
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800938e:	46c0      	nop			@ (mov r8, r8)
 8009390:	0000d206 	.word	0x0000d206
 8009394:	00004e20 	.word	0x00004e20

08009398 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009398:	b590      	push	{r4, r7, lr}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800939e:	1dbb      	adds	r3, r7, #6
 80093a0:	2200      	movs	r2, #0
 80093a2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 80093a4:	1dbc      	adds	r4, r7, #6
 80093a6:	4a12      	ldr	r2, [pc, #72]	@ (80093f0 <sen5x_device_reset+0x58>)
 80093a8:	1dbb      	adds	r3, r7, #6
 80093aa:	8819      	ldrh	r1, [r3, #0]
 80093ac:	003b      	movs	r3, r7
 80093ae:	0018      	movs	r0, r3
 80093b0:	f000 ffe4 	bl	800a37c <sensirion_i2c_add_command_to_buffer>
 80093b4:	0003      	movs	r3, r0
 80093b6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80093b8:	1d3c      	adds	r4, r7, #4
 80093ba:	1dbb      	adds	r3, r7, #6
 80093bc:	881a      	ldrh	r2, [r3, #0]
 80093be:	003b      	movs	r3, r7
 80093c0:	0019      	movs	r1, r3
 80093c2:	2069      	movs	r0, #105	@ 0x69
 80093c4:	f001 f85e 	bl	800a484 <sensirion_i2c_write_data>
 80093c8:	0003      	movs	r3, r0
 80093ca:	8023      	strh	r3, [r4, #0]
    if (error) {
 80093cc:	1d3b      	adds	r3, r7, #4
 80093ce:	2200      	movs	r2, #0
 80093d0:	5e9b      	ldrsh	r3, [r3, r2]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <sen5x_device_reset+0x46>
        return error;
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	2200      	movs	r2, #0
 80093da:	5e9b      	ldrsh	r3, [r3, r2]
 80093dc:	e004      	b.n	80093e8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 80093de:	4b05      	ldr	r3, [pc, #20]	@ (80093f4 <sen5x_device_reset+0x5c>)
 80093e0:	0018      	movs	r0, r3
 80093e2:	f7ff fae5 	bl	80089b0 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	0018      	movs	r0, r3
 80093ea:	46bd      	mov	sp, r7
 80093ec:	b003      	add	sp, #12
 80093ee:	bd90      	pop	{r4, r7, pc}
 80093f0:	0000d304 	.word	0x0000d304
 80093f4:	00030d40 	.word	0x00030d40

080093f8 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	021b      	lsls	r3, r3, #8
 8009406:	b21a      	sxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3301      	adds	r3, #1
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	b21b      	sxth	r3, r3
 8009410:	4313      	orrs	r3, r2
 8009412:	b21b      	sxth	r3, r3
 8009414:	b29b      	uxth	r3, r3
}
 8009416:	0018      	movs	r0, r3
 8009418:	46bd      	mov	sp, r7
 800941a:	b002      	add	sp, #8
 800941c:	bd80      	pop	{r7, pc}

0800941e <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	061a      	lsls	r2, r3, #24
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3301      	adds	r3, #1
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	041b      	lsls	r3, r3, #16
 8009434:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3302      	adds	r3, #2
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800943e:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	3203      	adds	r2, #3
 8009444:	7812      	ldrb	r2, [r2, #0]
 8009446:	4313      	orrs	r3, r2
}
 8009448:	0018      	movs	r0, r3
 800944a:	46bd      	mov	sp, r7
 800944c:	b002      	add	sp, #8
 800944e:	bd80      	pop	{r7, pc}

08009450 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	0018      	movs	r0, r3
 800945c:	f7ff ffcc 	bl	80093f8 <sensirion_common_bytes_to_uint16_t>
 8009460:	0003      	movs	r3, r0
 8009462:	b21b      	sxth	r3, r3
}
 8009464:	0018      	movs	r0, r3
 8009466:	46bd      	mov	sp, r7
 8009468:	b002      	add	sp, #8
 800946a:	bd80      	pop	{r7, pc}

0800946c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	1dbb      	adds	r3, r7, #6
 8009478:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800947a:	2316      	movs	r3, #22
 800947c:	18fb      	adds	r3, r7, r3
 800947e:	2200      	movs	r2, #0
 8009480:	801a      	strh	r2, [r3, #0]
 8009482:	e00f      	b.n	80094a4 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009484:	2016      	movs	r0, #22
 8009486:	183b      	adds	r3, r7, r0
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	18d2      	adds	r2, r2, r3
 800948e:	183b      	adds	r3, r7, r0
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	18cb      	adds	r3, r1, r3
 8009496:	7812      	ldrb	r2, [r2, #0]
 8009498:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800949a:	183b      	adds	r3, r7, r0
 800949c:	881a      	ldrh	r2, [r3, #0]
 800949e:	183b      	adds	r3, r7, r0
 80094a0:	3201      	adds	r2, #1
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	2316      	movs	r3, #22
 80094a6:	18fa      	adds	r2, r7, r3
 80094a8:	1dbb      	adds	r3, r7, #6
 80094aa:	8812      	ldrh	r2, [r2, #0]
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d3e8      	bcc.n	8009484 <sensirion_common_copy_bytes+0x18>
    }
}
 80094b2:	46c0      	nop			@ (mov r8, r8)
 80094b4:	46c0      	nop			@ (mov r8, r8)
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b006      	add	sp, #24
 80094ba:	bd80      	pop	{r7, pc}

080094bc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d113      	bne.n	8009502 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	22fe      	movs	r2, #254	@ 0xfe
 80094de:	0592      	lsls	r2, r2, #22
 80094e0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	4a1a      	ldr	r2, [pc, #104]	@ (8009550 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80094e6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009554 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 80094ec:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	4a19      	ldr	r2, [pc, #100]	@ (8009558 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80094f2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4a19      	ldr	r2, [pc, #100]	@ (800955c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80094f8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	4a18      	ldr	r2, [pc, #96]	@ (8009560 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80094fe:	61da      	str	r2, [r3, #28]
 8009500:	e011      	b.n	8009526 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	4a17      	ldr	r2, [pc, #92]	@ (8009564 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009506:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4a17      	ldr	r2, [pc, #92]	@ (8009568 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800950c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4a16      	ldr	r2, [pc, #88]	@ (800956c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009512:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4a16      	ldr	r2, [pc, #88]	@ (8009570 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009518:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4a15      	ldr	r2, [pc, #84]	@ (8009574 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800951e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a15      	ldr	r2, [pc, #84]	@ (8009578 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009524:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4a14      	ldr	r2, [pc, #80]	@ (800957c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800952a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4a14      	ldr	r2, [pc, #80]	@ (8009580 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009530:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4a12      	ldr	r2, [pc, #72]	@ (8009580 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009536:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a12      	ldr	r2, [pc, #72]	@ (8009584 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800953c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	0018      	movs	r0, r3
 8009542:	f000 f831 	bl	80095a8 <GasIndexAlgorithm_reset>
}
 8009546:	46c0      	nop			@ (mov r8, r8)
 8009548:	46bd      	mov	sp, r7
 800954a:	b004      	add	sp, #16
 800954c:	bd80      	pop	{r7, pc}
 800954e:	46c0      	nop			@ (mov r8, r8)
 8009550:	00002710 	.word	0x00002710
 8009554:	44340000 	.word	0x44340000
 8009558:	46859800 	.word	0x46859800
 800955c:	46a05000 	.word	0x46a05000
 8009560:	41f00000 	.word	0x41f00000
 8009564:	42c80000 	.word	0x42c80000
 8009568:	00004e20 	.word	0x00004e20
 800956c:	43340000 	.word	0x43340000
 8009570:	4528c000 	.word	0x4528c000
 8009574:	45a32000 	.word	0x45a32000
 8009578:	43aa0000 	.word	0x43aa0000
 800957c:	43660000 	.word	0x43660000
 8009580:	41400000 	.word	0x41400000
 8009584:	42480000 	.word	0x42480000

08009588 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009592:	22fe      	movs	r2, #254	@ 0xfe
 8009594:	0592      	lsls	r2, r2, #22
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	0018      	movs	r0, r3
 800959c:	f7ff ff8e 	bl	80094bc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80095a0:	46c0      	nop			@ (mov r8, r8)
 80095a2:	46bd      	mov	sp, r7
 80095a4:	b002      	add	sp, #8
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	0018      	movs	r0, r3
 80095c6:	f000 f805 	bl	80095d4 <GasIndexAlgorithm__init_instances>
}
 80095ca:	46c0      	nop			@ (mov r8, r8)
 80095cc:	46bd      	mov	sp, r7
 80095ce:	b002      	add	sp, #8
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80095d4:	b590      	push	{r4, r7, lr}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	0018      	movs	r0, r3
 80095e0:	f000 f8e8 	bl	80097b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	0018      	movs	r0, r3
 80095e8:	f000 f9a6 	bl	8009938 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80095ec:	1c04      	adds	r4, r0, #0
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	0018      	movs	r0, r3
 80095f2:	f000 f9ab 	bl	800994c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80095f6:	1c02      	adds	r2, r0, #0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	1c21      	adds	r1, r4, #0
 80095fc:	0018      	movs	r0, r3
 80095fe:	f000 fc3b 	bl	8009e78 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d107      	bne.n	800961a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800960a:	23fe      	movs	r3, #254	@ 0xfe
 800960c:	059b      	lsls	r3, r3, #22
 800960e:	4a0a      	ldr	r2, [pc, #40]	@ (8009638 <GasIndexAlgorithm__init_instances+0x64>)
 8009610:	490a      	ldr	r1, [pc, #40]	@ (800963c <GasIndexAlgorithm__init_instances+0x68>)
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fc86 	bl	8009f24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8009618:	e005      	b.n	8009626 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800961a:	4b09      	ldr	r3, [pc, #36]	@ (8009640 <GasIndexAlgorithm__init_instances+0x6c>)
 800961c:	4a09      	ldr	r2, [pc, #36]	@ (8009644 <GasIndexAlgorithm__init_instances+0x70>)
 800961e:	490a      	ldr	r1, [pc, #40]	@ (8009648 <GasIndexAlgorithm__init_instances+0x74>)
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fc7f 	bl	8009f24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0018      	movs	r0, r3
 800962a:	f000 fd35 	bl	800a098 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800962e:	46c0      	nop			@ (mov r8, r8)
 8009630:	46bd      	mov	sp, r7
 8009632:	b003      	add	sp, #12
 8009634:	bd90      	pop	{r4, r7, pc}
 8009636:	46c0      	nop			@ (mov r8, r8)
 8009638:	bc257a78 	.word	0xbc257a78
 800963c:	44198000 	.word	0x44198000
 8009640:	42c80000 	.word	0x42c80000
 8009644:	bbd4fdf4 	.word	0xbbd4fdf4
 8009648:	43550000 	.word	0x43550000

0800964c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800964c:	b590      	push	{r4, r7, lr}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800965c:	4952      	ldr	r1, [pc, #328]	@ (80097a8 <GasIndexAlgorithm_process+0x15c>)
 800965e:	1c18      	adds	r0, r3, #0
 8009660:	f7f6 ff70 	bl	8000544 <__aeabi_fcmple>
 8009664:	1e03      	subs	r3, r0, #0
 8009666:	d00c      	beq.n	8009682 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	1c19      	adds	r1, r3, #0
 8009672:	1c10      	adds	r0, r2, #0
 8009674:	f7f7 f924 	bl	80008c0 <__aeabi_fadd>
 8009678:	1c03      	adds	r3, r0, #0
 800967a:	1c1a      	adds	r2, r3, #0
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009680:	e080      	b.n	8009784 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd25      	ble.n	80096d4 <GasIndexAlgorithm_process+0x88>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	4a48      	ldr	r2, [pc, #288]	@ (80097ac <GasIndexAlgorithm_process+0x160>)
 800968c:	4293      	cmp	r3, r2
 800968e:	dc21      	bgt.n	80096d4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	429a      	cmp	r2, r3
 8009698:	dc04      	bgt.n	80096a4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	3301      	adds	r3, #1
 80096a0:	60bb      	str	r3, [r7, #8]
 80096a2:	e00d      	b.n	80096c0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a41      	ldr	r2, [pc, #260]	@ (80097b0 <GasIndexAlgorithm_process+0x164>)
 80096aa:	4694      	mov	ip, r2
 80096ac:	4463      	add	r3, ip
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	dd05      	ble.n	80096c0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	4a3d      	ldr	r2, [pc, #244]	@ (80097b0 <GasIndexAlgorithm_process+0x164>)
 80096ba:	4694      	mov	ip, r2
 80096bc:	4463      	add	r3, ip
 80096be:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	0018      	movs	r0, r3
 80096ca:	f7f7 ff81 	bl	80015d0 <__aeabi_i2f>
 80096ce:	1c02      	adds	r2, r0, #0
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d005      	beq.n	80096e8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	0018      	movs	r0, r3
 80096e0:	f000 f945 	bl	800996e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80096e4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80096e6:	d014      	beq.n	8009712 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	1c11      	adds	r1, r2, #0
 80096f0:	0018      	movs	r0, r3
 80096f2:	f000 fbd1 	bl	8009e98 <GasIndexAlgorithm__mox_model__process>
 80096f6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	1c11      	adds	r1, r2, #0
 8009704:	0018      	movs	r0, r3
 8009706:	f000 fc25 	bl	8009f54 <GasIndexAlgorithm__sigmoid_scaled__process>
 800970a:	1c02      	adds	r2, r0, #0
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009710:	e003      	b.n	800971a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1c11      	adds	r1, r2, #0
 8009722:	0018      	movs	r0, r3
 8009724:	f000 fcec 	bl	800a100 <GasIndexAlgorithm__adaptive_lowpass__process>
 8009728:	1c02      	adds	r2, r0, #0
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009732:	21fc      	movs	r1, #252	@ 0xfc
 8009734:	0589      	lsls	r1, r1, #22
 8009736:	1c18      	adds	r0, r3, #0
 8009738:	f7f6 fefa 	bl	8000530 <__aeabi_fcmplt>
 800973c:	1e03      	subs	r3, r0, #0
 800973e:	d003      	beq.n	8009748 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	22fc      	movs	r2, #252	@ 0xfc
 8009744:	0592      	lsls	r2, r2, #22
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974c:	2100      	movs	r1, #0
 800974e:	1c18      	adds	r0, r3, #0
 8009750:	f7f6 ff02 	bl	8000558 <__aeabi_fcmpgt>
 8009754:	1e03      	subs	r3, r0, #0
 8009756:	d015      	beq.n	8009784 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	1c11      	adds	r1, r2, #0
 8009760:	0018      	movs	r0, r3
 8009762:	f000 fa4f 	bl	8009c04 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	0018      	movs	r0, r3
 800976a:	f000 f8e5 	bl	8009938 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800976e:	1c04      	adds	r4, r0, #0
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	0018      	movs	r0, r3
 8009774:	f000 f8ea 	bl	800994c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009778:	1c02      	adds	r2, r0, #0
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	1c21      	adds	r1, r4, #0
 800977e:	0018      	movs	r0, r3
 8009780:	f000 fb7a 	bl	8009e78 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009788:	21fc      	movs	r1, #252	@ 0xfc
 800978a:	0589      	lsls	r1, r1, #22
 800978c:	1c18      	adds	r0, r3, #0
 800978e:	f7f7 f897 	bl	80008c0 <__aeabi_fadd>
 8009792:	1c03      	adds	r3, r0, #0
 8009794:	1c18      	adds	r0, r3, #0
 8009796:	f7f7 fefb 	bl	8001590 <__aeabi_f2iz>
 800979a:	0002      	movs	r2, r0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	601a      	str	r2, [r3, #0]
    return;
 80097a0:	46c0      	nop			@ (mov r8, r8)
}
 80097a2:	46bd      	mov	sp, r7
 80097a4:	b005      	add	sp, #20
 80097a6:	bd90      	pop	{r4, r7, pc}
 80097a8:	42340000 	.word	0x42340000
 80097ac:	0000fde7 	.word	0x0000fde7
 80097b0:	00007fff 	.word	0x00007fff

080097b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80097b4:	b5b0      	push	{r4, r5, r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	223c      	movs	r2, #60	@ 0x3c
 80097c0:	2100      	movs	r1, #0
 80097c2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4952      	ldr	r1, [pc, #328]	@ (8009928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80097de:	1c18      	adds	r0, r3, #0
 80097e0:	f7f7 f9f8 	bl	8000bd4 <__aeabi_fdiv>
 80097e4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80097e6:	2188      	movs	r1, #136	@ 0x88
 80097e8:	05c9      	lsls	r1, r1, #23
 80097ea:	1c18      	adds	r0, r3, #0
 80097ec:	f7f7 fbd8 	bl	8000fa0 <__aeabi_fmul>
 80097f0:	1c03      	adds	r3, r0, #0
 80097f2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	494a      	ldr	r1, [pc, #296]	@ (8009928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80097fe:	1c18      	adds	r0, r3, #0
 8009800:	f7f7 f9e8 	bl	8000bd4 <__aeabi_fdiv>
 8009804:	1c03      	adds	r3, r0, #0
 8009806:	1c19      	adds	r1, r3, #0
 8009808:	1c20      	adds	r0, r4, #0
 800980a:	f7f7 f859 	bl	80008c0 <__aeabi_fadd>
 800980e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8009810:	1c19      	adds	r1, r3, #0
 8009812:	1c28      	adds	r0, r5, #0
 8009814:	f7f7 f9de 	bl	8000bd4 <__aeabi_fdiv>
 8009818:	1c03      	adds	r3, r0, #0
 800981a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4940      	ldr	r1, [pc, #256]	@ (8009928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009826:	1c18      	adds	r0, r3, #0
 8009828:	f7f7 f9d4 	bl	8000bd4 <__aeabi_fdiv>
 800982c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800982e:	2185      	movs	r1, #133	@ 0x85
 8009830:	05c9      	lsls	r1, r1, #23
 8009832:	1c18      	adds	r0, r3, #0
 8009834:	f7f7 fbb4 	bl	8000fa0 <__aeabi_fmul>
 8009838:	1c03      	adds	r3, r0, #0
 800983a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	4938      	ldr	r1, [pc, #224]	@ (8009928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009846:	1c18      	adds	r0, r3, #0
 8009848:	f7f7 f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800984c:	1c03      	adds	r3, r0, #0
 800984e:	1c19      	adds	r1, r3, #0
 8009850:	1c20      	adds	r0, r4, #0
 8009852:	f7f7 f835 	bl	80008c0 <__aeabi_fadd>
 8009856:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8009858:	1c19      	adds	r1, r3, #0
 800985a:	1c28      	adds	r0, r5, #0
 800985c:	f7f7 f9ba 	bl	8000bd4 <__aeabi_fdiv>
 8009860:	1c03      	adds	r3, r0, #0
 8009862:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d118      	bne.n	80098a2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009874:	2188      	movs	r1, #136	@ 0x88
 8009876:	05c9      	lsls	r1, r1, #23
 8009878:	1c18      	adds	r0, r3, #0
 800987a:	f7f7 fb91 	bl	8000fa0 <__aeabi_fmul>
 800987e:	1c03      	adds	r3, r0, #0
 8009880:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8009886:	4929      	ldr	r1, [pc, #164]	@ (800992c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8009888:	1c18      	adds	r0, r3, #0
 800988a:	f7f7 f819 	bl	80008c0 <__aeabi_fadd>
 800988e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8009890:	1c19      	adds	r1, r3, #0
 8009892:	1c20      	adds	r0, r4, #0
 8009894:	f7f7 f99e 	bl	8000bd4 <__aeabi_fdiv>
 8009898:	1c03      	adds	r3, r0, #0
 800989a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	655a      	str	r2, [r3, #84]	@ 0x54
 80098a0:	e017      	b.n	80098d2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80098a6:	2188      	movs	r1, #136	@ 0x88
 80098a8:	05c9      	lsls	r1, r1, #23
 80098aa:	1c18      	adds	r0, r3, #0
 80098ac:	f7f7 fb78 	bl	8000fa0 <__aeabi_fmul>
 80098b0:	1c03      	adds	r3, r0, #0
 80098b2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80098b8:	491d      	ldr	r1, [pc, #116]	@ (8009930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80098ba:	1c18      	adds	r0, r3, #0
 80098bc:	f7f7 f800 	bl	80008c0 <__aeabi_fadd>
 80098c0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80098c2:	1c19      	adds	r1, r3, #0
 80098c4:	1c20      	adds	r0, r4, #0
 80098c6:	f7f7 f985 	bl	8000bd4 <__aeabi_fdiv>
 80098ca:	1c03      	adds	r3, r0, #0
 80098cc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80098d6:	2185      	movs	r1, #133	@ 0x85
 80098d8:	05c9      	lsls	r1, r1, #23
 80098da:	1c18      	adds	r0, r3, #0
 80098dc:	f7f7 fb60 	bl	8000fa0 <__aeabi_fmul>
 80098e0:	1c03      	adds	r3, r0, #0
 80098e2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	4912      	ldr	r1, [pc, #72]	@ (8009934 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80098ea:	1c18      	adds	r0, r3, #0
 80098ec:	f7f6 ffe8 	bl	80008c0 <__aeabi_fadd>
 80098f0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80098f2:	1c19      	adds	r1, r3, #0
 80098f4:	1c20      	adds	r0, r4, #0
 80098f6:	f7f7 f96d 	bl	8000bd4 <__aeabi_fdiv>
 80098fa:	1c03      	adds	r3, r0, #0
 80098fc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8009920:	46c0      	nop			@ (mov r8, r8)
 8009922:	46bd      	mov	sp, r7
 8009924:	b002      	add	sp, #8
 8009926:	bdb0      	pop	{r4, r5, r7, pc}
 8009928:	45610000 	.word	0x45610000
 800992c:	44960000 	.word	0x44960000
 8009930:	41a00000 	.word	0x41a00000
 8009934:	451c4000 	.word	0x451c4000

08009938 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8009944:	1c18      	adds	r0, r3, #0
 8009946:	46bd      	mov	sp, r7
 8009948:	b002      	add	sp, #8
 800994a:	bd80      	pop	{r7, pc}

0800994c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800995c:	1c19      	adds	r1, r3, #0
 800995e:	1c10      	adds	r0, r2, #0
 8009960:	f7f6 ffae 	bl	80008c0 <__aeabi_fadd>
 8009964:	1c03      	adds	r3, r0, #0
}
 8009966:	1c18      	adds	r0, r3, #0
 8009968:	46bd      	mov	sp, r7
 800996a:	b002      	add	sp, #8
 800996c:	bd80      	pop	{r7, pc}

0800996e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800996e:	b580      	push	{r7, lr}
 8009970:	b082      	sub	sp, #8
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	223c      	movs	r2, #60	@ 0x3c
 800997a:	5c9b      	ldrb	r3, [r3, r2]
}
 800997c:	0018      	movs	r0, r3
 800997e:	46bd      	mov	sp, r7
 8009980:	b002      	add	sp, #8
 8009982:	bd80      	pop	{r7, pc}

08009984 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8009984:	b5b0      	push	{r4, r5, r7, lr}
 8009986:	b08c      	sub	sp, #48	@ 0x30
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8009990:	1c19      	adds	r1, r3, #0
 8009992:	4895      	ldr	r0, [pc, #596]	@ (8009be8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8009994:	f7f7 fc42 	bl	800121c <__aeabi_fsub>
 8009998:	1c03      	adds	r3, r0, #0
 800999a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099a0:	1c19      	adds	r1, r3, #0
 80099a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099a4:	f7f6 fdd8 	bl	8000558 <__aeabi_fcmpgt>
 80099a8:	1e03      	subs	r3, r0, #0
 80099aa:	d00b      	beq.n	80099c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80099b4:	1c19      	adds	r1, r3, #0
 80099b6:	1c10      	adds	r0, r2, #0
 80099b8:	f7f6 ff82 	bl	80008c0 <__aeabi_fadd>
 80099bc:	1c03      	adds	r3, r0, #0
 80099be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099c8:	1c19      	adds	r1, r3, #0
 80099ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099cc:	f7f6 fdc4 	bl	8000558 <__aeabi_fcmpgt>
 80099d0:	1e03      	subs	r3, r0, #0
 80099d2:	d00b      	beq.n	80099ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80099dc:	1c19      	adds	r1, r3, #0
 80099de:	1c10      	adds	r0, r2, #0
 80099e0:	f7f6 ff6e 	bl	80008c0 <__aeabi_fadd>
 80099e4:	1c03      	adds	r3, r0, #0
 80099e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6959      	ldr	r1, [r3, #20]
 80099f0:	4a7e      	ldr	r2, [pc, #504]	@ (8009bec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	0018      	movs	r0, r3
 80099f6:	f000 f9f1 	bl	8009ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	1c11      	adds	r1, r2, #0
 8009a02:	0018      	movs	r0, r3
 8009a04:	f000 f9fa 	bl	8009dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009a08:	1c03      	adds	r3, r0, #0
 8009a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009a18:	1c19      	adds	r1, r3, #0
 8009a1a:	1c10      	adds	r0, r2, #0
 8009a1c:	f7f7 fbfe 	bl	800121c <__aeabi_fsub>
 8009a20:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009a22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a24:	1c18      	adds	r0, r3, #0
 8009a26:	f7f7 fabb 	bl	8000fa0 <__aeabi_fmul>
 8009a2a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009a2c:	1c19      	adds	r1, r3, #0
 8009a2e:	1c20      	adds	r0, r4, #0
 8009a30:	f7f6 ff46 	bl	80008c0 <__aeabi_fadd>
 8009a34:	1c03      	adds	r3, r0, #0
 8009a36:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8009a40:	1c19      	adds	r1, r3, #0
 8009a42:	486b      	ldr	r0, [pc, #428]	@ (8009bf0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8009a44:	f7f7 fbea 	bl	800121c <__aeabi_fsub>
 8009a48:	1c03      	adds	r3, r0, #0
 8009a4a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	1c11      	adds	r1, r2, #0
 8009a54:	0018      	movs	r0, r3
 8009a56:	f000 f9d1 	bl	8009dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009a5a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8009a5c:	1c19      	adds	r1, r3, #0
 8009a5e:	1c28      	adds	r0, r5, #0
 8009a60:	f7f7 fa9e 	bl	8000fa0 <__aeabi_fmul>
 8009a64:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8009a66:	1c19      	adds	r1, r3, #0
 8009a68:	1c20      	adds	r0, r4, #0
 8009a6a:	f7f6 ff29 	bl	80008c0 <__aeabi_fadd>
 8009a6e:	1c03      	adds	r3, r0, #0
 8009a70:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009a72:	4a60      	ldr	r2, [pc, #384]	@ (8009bf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8009a74:	6a39      	ldr	r1, [r7, #32]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	0018      	movs	r0, r3
 8009a7a:	f000 f9af 	bl	8009ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	1c11      	adds	r1, r2, #0
 8009a86:	0018      	movs	r0, r3
 8009a88:	f000 f9b8 	bl	8009dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009a8c:	1c03      	adds	r3, r0, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8009a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a92:	69f8      	ldr	r0, [r7, #28]
 8009a94:	f7f7 fa84 	bl	8000fa0 <__aeabi_fmul>
 8009a98:	1c03      	adds	r3, r0, #0
 8009a9a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6999      	ldr	r1, [r3, #24]
 8009aa4:	4a51      	ldr	r2, [pc, #324]	@ (8009bec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f000 f997 	bl	8009ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	1c11      	adds	r1, r2, #0
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f000 f9a0 	bl	8009dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009abc:	1c03      	adds	r3, r0, #0
 8009abe:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8009acc:	1c19      	adds	r1, r3, #0
 8009ace:	1c10      	adds	r0, r2, #0
 8009ad0:	f7f7 fba4 	bl	800121c <__aeabi_fsub>
 8009ad4:	1c03      	adds	r3, r0, #0
 8009ad6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8009ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ada:	69b8      	ldr	r0, [r7, #24]
 8009adc:	f7f7 fb9e 	bl	800121c <__aeabi_fsub>
 8009ae0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8009ae2:	1c19      	adds	r1, r3, #0
 8009ae4:	1c28      	adds	r0, r5, #0
 8009ae6:	f7f7 fa5b 	bl	8000fa0 <__aeabi_fmul>
 8009aea:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8009aec:	1c19      	adds	r1, r3, #0
 8009aee:	1c20      	adds	r0, r4, #0
 8009af0:	f7f6 fee6 	bl	80008c0 <__aeabi_fadd>
 8009af4:	1c03      	adds	r3, r0, #0
 8009af6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8009b00:	1c19      	adds	r1, r3, #0
 8009b02:	483b      	ldr	r0, [pc, #236]	@ (8009bf0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8009b04:	f7f7 fb8a 	bl	800121c <__aeabi_fsub>
 8009b08:	1c03      	adds	r3, r0, #0
 8009b0a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	1c11      	adds	r1, r2, #0
 8009b14:	0018      	movs	r0, r3
 8009b16:	f000 f971 	bl	8009dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b1a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8009b1c:	1c19      	adds	r1, r3, #0
 8009b1e:	1c28      	adds	r0, r5, #0
 8009b20:	f7f7 fa3e 	bl	8000fa0 <__aeabi_fmul>
 8009b24:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8009b26:	1c19      	adds	r1, r3, #0
 8009b28:	1c20      	adds	r0, r4, #0
 8009b2a:	f7f6 fec9 	bl	80008c0 <__aeabi_fadd>
 8009b2e:	1c03      	adds	r3, r0, #0
 8009b30:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009b32:	4a30      	ldr	r2, [pc, #192]	@ (8009bf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8009b34:	6939      	ldr	r1, [r7, #16]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f000 f94f 	bl	8009ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	1c11      	adds	r1, r2, #0
 8009b46:	0018      	movs	r0, r3
 8009b48:	f000 f958 	bl	8009dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b4c:	1c03      	adds	r3, r0, #0
 8009b4e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8009b50:	6979      	ldr	r1, [r7, #20]
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7f7 fa24 	bl	8000fa0 <__aeabi_fmul>
 8009b58:	1c03      	adds	r3, r0, #0
 8009b5a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	4923      	ldr	r1, [pc, #140]	@ (8009bf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8009b6a:	1c18      	adds	r0, r3, #0
 8009b6c:	f7f7 f832 	bl	8000bd4 <__aeabi_fdiv>
 8009b70:	1c03      	adds	r3, r0, #0
 8009b72:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8009b74:	69f9      	ldr	r1, [r7, #28]
 8009b76:	20fe      	movs	r0, #254	@ 0xfe
 8009b78:	0580      	lsls	r0, r0, #22
 8009b7a:	f7f7 fb4f 	bl	800121c <__aeabi_fsub>
 8009b7e:	1c03      	adds	r3, r0, #0
 8009b80:	491e      	ldr	r1, [pc, #120]	@ (8009bfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8009b82:	1c18      	adds	r0, r3, #0
 8009b84:	f7f7 fa0c 	bl	8000fa0 <__aeabi_fmul>
 8009b88:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8009b8a:	491d      	ldr	r1, [pc, #116]	@ (8009c00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8009b8c:	1c18      	adds	r0, r3, #0
 8009b8e:	f7f7 fb45 	bl	800121c <__aeabi_fsub>
 8009b92:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8009b94:	1c19      	adds	r1, r3, #0
 8009b96:	1c28      	adds	r0, r5, #0
 8009b98:	f7f7 fa02 	bl	8000fa0 <__aeabi_fmul>
 8009b9c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009b9e:	1c19      	adds	r1, r3, #0
 8009ba0:	1c20      	adds	r0, r4, #0
 8009ba2:	f7f6 fe8d 	bl	80008c0 <__aeabi_fadd>
 8009ba6:	1c03      	adds	r3, r0, #0
 8009ba8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	1c18      	adds	r0, r3, #0
 8009bb6:	f7f6 fcbb 	bl	8000530 <__aeabi_fcmplt>
 8009bba:	1e03      	subs	r3, r0, #0
 8009bbc:	d002      	beq.n	8009bc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8009bcc:	1c19      	adds	r1, r3, #0
 8009bce:	1c10      	adds	r0, r2, #0
 8009bd0:	f7f6 fcc2 	bl	8000558 <__aeabi_fcmpgt>
 8009bd4:	1e03      	subs	r3, r0, #0
 8009bd6:	d100      	bne.n	8009bda <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8009bd8:	e002      	b.n	8009be0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009be0:	46c0      	nop			@ (mov r8, r8)
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b00c      	add	sp, #48	@ 0x30
 8009be6:	bdb0      	pop	{r4, r5, r7, pc}
 8009be8:	46fffe00 	.word	0x46fffe00
 8009bec:	3c23d70a 	.word	0x3c23d70a
 8009bf0:	43ff0000 	.word	0x43ff0000
 8009bf4:	3db851ec 	.word	0x3db851ec
 8009bf8:	42700000 	.word	0x42700000
 8009bfc:	3fa66666 	.word	0x3fa66666
 8009c00:	3e99999a 	.word	0x3e99999a

08009c04 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	223c      	movs	r2, #60	@ 0x3c
 8009c12:	5c9b      	ldrb	r3, [r3, r2]
 8009c14:	2201      	movs	r2, #1
 8009c16:	4053      	eors	r3, r2
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00a      	beq.n	8009c34 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	223c      	movs	r2, #60	@ 0x3c
 8009c22:	2101      	movs	r1, #1
 8009c24:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8009c32:	e0c8      	b.n	8009dc6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c38:	4965      	ldr	r1, [pc, #404]	@ (8009dd0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8009c3a:	1c18      	adds	r0, r3, #0
 8009c3c:	f7f6 fc96 	bl	800056c <__aeabi_fcmpge>
 8009c40:	1e03      	subs	r3, r0, #0
 8009c42:	d107      	bne.n	8009c54 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8009c48:	4962      	ldr	r1, [pc, #392]	@ (8009dd4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8009c4a:	1c18      	adds	r0, r3, #0
 8009c4c:	f7f6 fc7a 	bl	8000544 <__aeabi_fcmple>
 8009c50:	1e03      	subs	r3, r0, #0
 8009c52:	d00e      	beq.n	8009c72 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8009c5c:	1c19      	adds	r1, r3, #0
 8009c5e:	1c10      	adds	r0, r2, #0
 8009c60:	f7f6 fe2e 	bl	80008c0 <__aeabi_fadd>
 8009c64:	1c03      	adds	r3, r0, #0
 8009c66:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c76:	1c19      	adds	r1, r3, #0
 8009c78:	6838      	ldr	r0, [r7, #0]
 8009c7a:	f7f7 facf 	bl	800121c <__aeabi_fsub>
 8009c7e:	1c03      	adds	r3, r0, #0
 8009c80:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	0018      	movs	r0, r3
 8009c86:	f7ff fe7d 	bl	8009984 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c8e:	1c19      	adds	r1, r3, #0
 8009c90:	6838      	ldr	r0, [r7, #0]
 8009c92:	f7f7 fac3 	bl	800121c <__aeabi_fsub>
 8009c96:	1c03      	adds	r3, r0, #0
 8009c98:	2185      	movs	r1, #133	@ 0x85
 8009c9a:	05c9      	lsls	r1, r1, #23
 8009c9c:	1c18      	adds	r0, r3, #0
 8009c9e:	f7f6 ff99 	bl	8000bd4 <__aeabi_fdiv>
 8009ca2:	1c03      	adds	r3, r0, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7f6 fc41 	bl	8000530 <__aeabi_fcmplt>
 8009cae:	1e03      	subs	r3, r0, #0
 8009cb0:	d008      	beq.n	8009cc4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	1c18      	adds	r0, r3, #0
 8009cba:	f7f7 faaf 	bl	800121c <__aeabi_fsub>
 8009cbe:	1c03      	adds	r3, r0, #0
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	e007      	b.n	8009cd4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cc8:	1c19      	adds	r1, r3, #0
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f7f6 fdf8 	bl	80008c0 <__aeabi_fadd>
 8009cd0:	1c03      	adds	r3, r0, #0
 8009cd2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8009cd4:	23fe      	movs	r3, #254	@ 0xfe
 8009cd6:	059b      	lsls	r3, r3, #22
 8009cd8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8009cda:	493f      	ldr	r1, [pc, #252]	@ (8009dd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8009cdc:	6978      	ldr	r0, [r7, #20]
 8009cde:	f7f6 fc3b 	bl	8000558 <__aeabi_fcmpgt>
 8009ce2:	1e03      	subs	r3, r0, #0
 8009ce4:	d010      	beq.n	8009d08 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8009ce6:	493c      	ldr	r1, [pc, #240]	@ (8009dd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8009ce8:	6978      	ldr	r0, [r7, #20]
 8009cea:	f7f6 ff73 	bl	8000bd4 <__aeabi_fdiv>
 8009cee:	1c03      	adds	r3, r0, #0
 8009cf0:	1c1c      	adds	r4, r3, #0
 8009cf2:	4939      	ldr	r1, [pc, #228]	@ (8009dd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8009cf4:	6978      	ldr	r0, [r7, #20]
 8009cf6:	f7f6 ff6d 	bl	8000bd4 <__aeabi_fdiv>
 8009cfa:	1c03      	adds	r3, r0, #0
 8009cfc:	1c19      	adds	r1, r3, #0
 8009cfe:	1c20      	adds	r0, r4, #0
 8009d00:	f7f7 f94e 	bl	8000fa0 <__aeabi_fmul>
 8009d04:	1c03      	adds	r3, r0, #0
 8009d06:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8009d0c:	1c19      	adds	r1, r3, #0
 8009d0e:	2085      	movs	r0, #133	@ 0x85
 8009d10:	05c0      	lsls	r0, r0, #23
 8009d12:	f7f7 fa83 	bl	800121c <__aeabi_fsub>
 8009d16:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8009d18:	6939      	ldr	r1, [r7, #16]
 8009d1a:	1c18      	adds	r0, r3, #0
 8009d1c:	f7f7 f940 	bl	8000fa0 <__aeabi_fmul>
 8009d20:	1c03      	adds	r3, r0, #0
 8009d22:	1c18      	adds	r0, r3, #0
 8009d24:	f017 faa4 	bl	8021270 <sqrtf>
 8009d28:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009d32:	2185      	movs	r1, #133	@ 0x85
 8009d34:	05c9      	lsls	r1, r1, #23
 8009d36:	6938      	ldr	r0, [r7, #16]
 8009d38:	f7f7 f932 	bl	8000fa0 <__aeabi_fmul>
 8009d3c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8009d3e:	1c19      	adds	r1, r3, #0
 8009d40:	1c28      	adds	r0, r5, #0
 8009d42:	f7f6 ff47 	bl	8000bd4 <__aeabi_fdiv>
 8009d46:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8009d48:	1c19      	adds	r1, r3, #0
 8009d4a:	1c20      	adds	r0, r4, #0
 8009d4c:	f7f7 f928 	bl	8000fa0 <__aeabi_fmul>
 8009d50:	1c03      	adds	r3, r0, #0
 8009d52:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d58:	68f9      	ldr	r1, [r7, #12]
 8009d5a:	1c18      	adds	r0, r3, #0
 8009d5c:	f7f7 f920 	bl	8000fa0 <__aeabi_fmul>
 8009d60:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8009d62:	6939      	ldr	r1, [r7, #16]
 8009d64:	1c18      	adds	r0, r3, #0
 8009d66:	f7f6 ff35 	bl	8000bd4 <__aeabi_fdiv>
 8009d6a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8009d6c:	68f9      	ldr	r1, [r7, #12]
 8009d6e:	1c18      	adds	r0, r3, #0
 8009d70:	f7f7 f916 	bl	8000fa0 <__aeabi_fmul>
 8009d74:	1c03      	adds	r3, r0, #0
             sqrtf(
 8009d76:	1c19      	adds	r1, r3, #0
 8009d78:	1c20      	adds	r0, r4, #0
 8009d7a:	f7f6 fda1 	bl	80008c0 <__aeabi_fadd>
 8009d7e:	1c03      	adds	r3, r0, #0
 8009d80:	1c18      	adds	r0, r3, #0
 8009d82:	f017 fa75 	bl	8021270 <sqrtf>
 8009d86:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8009d88:	1c19      	adds	r1, r3, #0
 8009d8a:	1c30      	adds	r0, r6, #0
 8009d8c:	f7f7 f908 	bl	8000fa0 <__aeabi_fmul>
 8009d90:	1c03      	adds	r3, r0, #0
 8009d92:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009da0:	68f9      	ldr	r1, [r7, #12]
 8009da2:	1c18      	adds	r0, r3, #0
 8009da4:	f7f7 f8fc 	bl	8000fa0 <__aeabi_fmul>
 8009da8:	1c03      	adds	r3, r0, #0
 8009daa:	2182      	movs	r1, #130	@ 0x82
 8009dac:	05c9      	lsls	r1, r1, #23
 8009dae:	1c18      	adds	r0, r3, #0
 8009db0:	f7f6 ff10 	bl	8000bd4 <__aeabi_fdiv>
 8009db4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8009db6:	1c19      	adds	r1, r3, #0
 8009db8:	1c20      	adds	r0, r4, #0
 8009dba:	f7f6 fd81 	bl	80008c0 <__aeabi_fadd>
 8009dbe:	1c03      	adds	r3, r0, #0
 8009dc0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009dc6:	46c0      	nop			@ (mov r8, r8)
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	b007      	add	sp, #28
 8009dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dce:	46c0      	nop			@ (mov r8, r8)
 8009dd0:	42c80000 	.word	0x42c80000
 8009dd4:	c2c80000 	.word	0xc2c80000
 8009dd8:	44b40000 	.word	0x44b40000

08009ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009df4:	46c0      	nop			@ (mov r8, r8)
 8009df6:	46bd      	mov	sp, r7
 8009df8:	b004      	add	sp, #16
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8009dfc:	b590      	push	{r4, r7, lr}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e0e:	1c19      	adds	r1, r3, #0
 8009e10:	6838      	ldr	r0, [r7, #0]
 8009e12:	f7f7 fa03 	bl	800121c <__aeabi_fsub>
 8009e16:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8009e18:	1c19      	adds	r1, r3, #0
 8009e1a:	1c20      	adds	r0, r4, #0
 8009e1c:	f7f7 f8c0 	bl	8000fa0 <__aeabi_fmul>
 8009e20:	1c03      	adds	r3, r0, #0
 8009e22:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8009e24:	4912      	ldr	r1, [pc, #72]	@ (8009e70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7f6 fb82 	bl	8000530 <__aeabi_fcmplt>
 8009e2c:	1e03      	subs	r3, r0, #0
 8009e2e:	d002      	beq.n	8009e36 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8009e30:	23fe      	movs	r3, #254	@ 0xfe
 8009e32:	059b      	lsls	r3, r3, #22
 8009e34:	e018      	b.n	8009e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8009e36:	490f      	ldr	r1, [pc, #60]	@ (8009e74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7f6 fb8d 	bl	8000558 <__aeabi_fcmpgt>
 8009e3e:	1e03      	subs	r3, r0, #0
 8009e40:	d001      	beq.n	8009e46 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8009e42:	2300      	movs	r3, #0
 8009e44:	e010      	b.n	8009e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	1c18      	adds	r0, r3, #0
 8009e4a:	f017 f9e9 	bl	8021220 <expf>
 8009e4e:	1c03      	adds	r3, r0, #0
 8009e50:	21fe      	movs	r1, #254	@ 0xfe
 8009e52:	0589      	lsls	r1, r1, #22
 8009e54:	1c18      	adds	r0, r3, #0
 8009e56:	f7f6 fd33 	bl	80008c0 <__aeabi_fadd>
 8009e5a:	1c03      	adds	r3, r0, #0
 8009e5c:	1c19      	adds	r1, r3, #0
 8009e5e:	20fe      	movs	r0, #254	@ 0xfe
 8009e60:	0580      	lsls	r0, r0, #22
 8009e62:	f7f6 feb7 	bl	8000bd4 <__aeabi_fdiv>
 8009e66:	1c03      	adds	r3, r0, #0
    }
}
 8009e68:	1c18      	adds	r0, r3, #0
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	b005      	add	sp, #20
 8009e6e:	bd90      	pop	{r4, r7, pc}
 8009e70:	c2480000 	.word	0xc2480000
 8009e74:	42480000 	.word	0x42480000

08009e78 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009e90:	46c0      	nop			@ (mov r8, r8)
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b004      	add	sp, #16
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d114      	bne.n	8009ed4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eae:	1c19      	adds	r1, r3, #0
 8009eb0:	6838      	ldr	r0, [r7, #0]
 8009eb2:	f7f7 f9b3 	bl	800121c <__aeabi_fsub>
 8009eb6:	1c03      	adds	r3, r0, #0
 8009eb8:	4918      	ldr	r1, [pc, #96]	@ (8009f1c <GasIndexAlgorithm__mox_model__process+0x84>)
 8009eba:	1c18      	adds	r0, r3, #0
 8009ebc:	f7f6 fe8a 	bl	8000bd4 <__aeabi_fdiv>
 8009ec0:	1c03      	adds	r3, r0, #0
 8009ec2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8009ec8:	1c19      	adds	r1, r3, #0
 8009eca:	1c10      	adds	r0, r2, #0
 8009ecc:	f7f7 f868 	bl	8000fa0 <__aeabi_fmul>
 8009ed0:	1c03      	adds	r3, r0, #0
 8009ed2:	e01f      	b.n	8009f14 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ed8:	1c19      	adds	r1, r3, #0
 8009eda:	6838      	ldr	r0, [r7, #0]
 8009edc:	f7f7 f99e 	bl	800121c <__aeabi_fsub>
 8009ee0:	1c03      	adds	r3, r0, #0
 8009ee2:	1c1a      	adds	r2, r3, #0
 8009ee4:	2380      	movs	r3, #128	@ 0x80
 8009ee6:	061b      	lsls	r3, r3, #24
 8009ee8:	4053      	eors	r3, r2
 8009eea:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ef0:	490b      	ldr	r1, [pc, #44]	@ (8009f20 <GasIndexAlgorithm__mox_model__process+0x88>)
 8009ef2:	1c18      	adds	r0, r3, #0
 8009ef4:	f7f6 fce4 	bl	80008c0 <__aeabi_fadd>
 8009ef8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8009efa:	1c19      	adds	r1, r3, #0
 8009efc:	1c20      	adds	r0, r4, #0
 8009efe:	f7f6 fe69 	bl	8000bd4 <__aeabi_fdiv>
 8009f02:	1c03      	adds	r3, r0, #0
 8009f04:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8009f0a:	1c19      	adds	r1, r3, #0
 8009f0c:	1c10      	adds	r0, r2, #0
 8009f0e:	f7f7 f847 	bl	8000fa0 <__aeabi_fmul>
 8009f12:	1c03      	adds	r3, r0, #0
    }
}
 8009f14:	1c18      	adds	r0, r3, #0
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b003      	add	sp, #12
 8009f1a:	bd90      	pop	{r4, r7, pc}
 8009f1c:	44fa0000 	.word	0x44fa0000
 8009f20:	435c0000 	.word	0x435c0000

08009f24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2180      	movs	r1, #128	@ 0x80
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2184      	movs	r1, #132	@ 0x84
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2188      	movs	r1, #136	@ 0x88
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	505a      	str	r2, [r3, r1]
}
 8009f4a:	46c0      	nop			@ (mov r8, r8)
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b004      	add	sp, #16
 8009f50:	bd80      	pop	{r7, pc}
	...

08009f54 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8009f54:	b590      	push	{r4, r7, lr}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2280      	movs	r2, #128	@ 0x80
 8009f62:	589c      	ldr	r4, [r3, r2]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2284      	movs	r2, #132	@ 0x84
 8009f68:	589b      	ldr	r3, [r3, r2]
 8009f6a:	1c19      	adds	r1, r3, #0
 8009f6c:	6838      	ldr	r0, [r7, #0]
 8009f6e:	f7f7 f955 	bl	800121c <__aeabi_fsub>
 8009f72:	1c03      	adds	r3, r0, #0
 8009f74:	1c19      	adds	r1, r3, #0
 8009f76:	1c20      	adds	r0, r4, #0
 8009f78:	f7f7 f812 	bl	8000fa0 <__aeabi_fmul>
 8009f7c:	1c03      	adds	r3, r0, #0
 8009f7e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8009f80:	4940      	ldr	r1, [pc, #256]	@ (800a084 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8009f82:	68b8      	ldr	r0, [r7, #8]
 8009f84:	f7f6 fad4 	bl	8000530 <__aeabi_fcmplt>
 8009f88:	1e03      	subs	r3, r0, #0
 8009f8a:	d001      	beq.n	8009f90 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8009f8c:	4b3e      	ldr	r3, [pc, #248]	@ (800a088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8009f8e:	e075      	b.n	800a07c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8009f90:	493e      	ldr	r1, [pc, #248]	@ (800a08c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8009f92:	68b8      	ldr	r0, [r7, #8]
 8009f94:	f7f6 fae0 	bl	8000558 <__aeabi_fcmpgt>
 8009f98:	1e03      	subs	r3, r0, #0
 8009f9a:	d001      	beq.n	8009fa0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e06d      	b.n	800a07c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	6838      	ldr	r0, [r7, #0]
 8009fa4:	f7f6 fae2 	bl	800056c <__aeabi_fcmpge>
 8009fa8:	1e03      	subs	r3, r0, #0
 8009faa:	d047      	beq.n	800a03c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2288      	movs	r2, #136	@ 0x88
 8009fb0:	589b      	ldr	r3, [r3, r2]
 8009fb2:	21fe      	movs	r1, #254	@ 0xfe
 8009fb4:	0589      	lsls	r1, r1, #22
 8009fb6:	1c18      	adds	r0, r3, #0
 8009fb8:	f7f6 fab4 	bl	8000524 <__aeabi_fcmpeq>
 8009fbc:	1e03      	subs	r3, r0, #0
 8009fbe:	d00e      	beq.n	8009fde <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	1c19      	adds	r1, r3, #0
 8009fc6:	20fe      	movs	r0, #254	@ 0xfe
 8009fc8:	0580      	lsls	r0, r0, #22
 8009fca:	f7f7 f927 	bl	800121c <__aeabi_fsub>
 8009fce:	1c03      	adds	r3, r0, #0
 8009fd0:	492f      	ldr	r1, [pc, #188]	@ (800a090 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8009fd2:	1c18      	adds	r0, r3, #0
 8009fd4:	f7f6 ffe4 	bl	8000fa0 <__aeabi_fmul>
 8009fd8:	1c03      	adds	r3, r0, #0
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	e012      	b.n	800a004 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	492c      	ldr	r1, [pc, #176]	@ (800a094 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8009fe4:	1c18      	adds	r0, r3, #0
 8009fe6:	f7f6 ffdb 	bl	8000fa0 <__aeabi_fmul>
 8009fea:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8009fec:	1c19      	adds	r1, r3, #0
 8009fee:	4826      	ldr	r0, [pc, #152]	@ (800a088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8009ff0:	f7f7 f914 	bl	800121c <__aeabi_fsub>
 8009ff4:	1c03      	adds	r3, r0, #0
 8009ff6:	2181      	movs	r1, #129	@ 0x81
 8009ff8:	05c9      	lsls	r1, r1, #23
 8009ffa:	1c18      	adds	r0, r3, #0
 8009ffc:	f7f6 fdea 	bl	8000bd4 <__aeabi_fdiv>
 800a000:	1c03      	adds	r3, r0, #0
 800a002:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a004:	4920      	ldr	r1, [pc, #128]	@ (800a088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f7f6 fc5a 	bl	80008c0 <__aeabi_fadd>
 800a00c:	1c03      	adds	r3, r0, #0
 800a00e:	1c1c      	adds	r4, r3, #0
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	1c18      	adds	r0, r3, #0
 800a014:	f017 f904 	bl	8021220 <expf>
 800a018:	1c03      	adds	r3, r0, #0
 800a01a:	21fe      	movs	r1, #254	@ 0xfe
 800a01c:	0589      	lsls	r1, r1, #22
 800a01e:	1c18      	adds	r0, r3, #0
 800a020:	f7f6 fc4e 	bl	80008c0 <__aeabi_fadd>
 800a024:	1c03      	adds	r3, r0, #0
 800a026:	1c19      	adds	r1, r3, #0
 800a028:	1c20      	adds	r0, r4, #0
 800a02a:	f7f6 fdd3 	bl	8000bd4 <__aeabi_fdiv>
 800a02e:	1c03      	adds	r3, r0, #0
 800a030:	68f9      	ldr	r1, [r7, #12]
 800a032:	1c18      	adds	r0, r3, #0
 800a034:	f7f7 f8f2 	bl	800121c <__aeabi_fsub>
 800a038:	1c03      	adds	r3, r0, #0
 800a03a:	e01f      	b.n	800a07c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2188      	movs	r1, #136	@ 0x88
 800a044:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800a046:	1c19      	adds	r1, r3, #0
 800a048:	1c10      	adds	r0, r2, #0
 800a04a:	f7f6 fdc3 	bl	8000bd4 <__aeabi_fdiv>
 800a04e:	1c03      	adds	r3, r0, #0
 800a050:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	1c18      	adds	r0, r3, #0
 800a056:	f017 f8e3 	bl	8021220 <expf>
 800a05a:	1c03      	adds	r3, r0, #0
 800a05c:	21fe      	movs	r1, #254	@ 0xfe
 800a05e:	0589      	lsls	r1, r1, #22
 800a060:	1c18      	adds	r0, r3, #0
 800a062:	f7f6 fc2d 	bl	80008c0 <__aeabi_fadd>
 800a066:	1c03      	adds	r3, r0, #0
 800a068:	1c19      	adds	r1, r3, #0
 800a06a:	4807      	ldr	r0, [pc, #28]	@ (800a088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a06c:	f7f6 fdb2 	bl	8000bd4 <__aeabi_fdiv>
 800a070:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a072:	1c19      	adds	r1, r3, #0
 800a074:	1c20      	adds	r0, r4, #0
 800a076:	f7f6 ff93 	bl	8000fa0 <__aeabi_fmul>
 800a07a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800a07c:	1c18      	adds	r0, r3, #0
 800a07e:	46bd      	mov	sp, r7
 800a080:	b005      	add	sp, #20
 800a082:	bd90      	pop	{r4, r7, pc}
 800a084:	c2480000 	.word	0xc2480000
 800a088:	43fa0000 	.word	0x43fa0000
 800a08c:	42480000 	.word	0x42480000
 800a090:	3f8041ab 	.word	0x3f8041ab
 800a094:	40a00000 	.word	0x40a00000

0800a098 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a098:	b590      	push	{r4, r7, lr}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	4913      	ldr	r1, [pc, #76]	@ (800a0f8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800a0aa:	1c18      	adds	r0, r3, #0
 800a0ac:	f7f6 fc08 	bl	80008c0 <__aeabi_fadd>
 800a0b0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a0b2:	1c19      	adds	r1, r3, #0
 800a0b4:	1c20      	adds	r0, r4, #0
 800a0b6:	f7f6 fd8d 	bl	8000bd4 <__aeabi_fdiv>
 800a0ba:	1c03      	adds	r3, r0, #0
 800a0bc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	228c      	movs	r2, #140	@ 0x8c
 800a0c2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	490b      	ldr	r1, [pc, #44]	@ (800a0fc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800a0ce:	1c18      	adds	r0, r3, #0
 800a0d0:	f7f6 fbf6 	bl	80008c0 <__aeabi_fadd>
 800a0d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a0d6:	1c19      	adds	r1, r3, #0
 800a0d8:	1c20      	adds	r0, r4, #0
 800a0da:	f7f6 fd7b 	bl	8000bd4 <__aeabi_fdiv>
 800a0de:	1c03      	adds	r3, r0, #0
 800a0e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2290      	movs	r2, #144	@ 0x90
 800a0e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2294      	movs	r2, #148	@ 0x94
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	5499      	strb	r1, [r3, r2]
}
 800a0f0:	46c0      	nop			@ (mov r8, r8)
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	b003      	add	sp, #12
 800a0f6:	bd90      	pop	{r4, r7, pc}
 800a0f8:	41a00000 	.word	0x41a00000
 800a0fc:	43fa0000 	.word	0x43fa0000

0800a100 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800a100:	b590      	push	{r4, r7, lr}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2294      	movs	r2, #148	@ 0x94
 800a10e:	5c9b      	ldrb	r3, [r3, r2]
 800a110:	2201      	movs	r2, #1
 800a112:	4053      	eors	r3, r2
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00f      	beq.n	800a13a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2198      	movs	r1, #152	@ 0x98
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	219c      	movs	r1, #156	@ 0x9c
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	21a0      	movs	r1, #160	@ 0xa0
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2294      	movs	r2, #148	@ 0x94
 800a136:	2101      	movs	r1, #1
 800a138:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	228c      	movs	r2, #140	@ 0x8c
 800a13e:	589b      	ldr	r3, [r3, r2]
 800a140:	1c19      	adds	r1, r3, #0
 800a142:	20fe      	movs	r0, #254	@ 0xfe
 800a144:	0580      	lsls	r0, r0, #22
 800a146:	f7f7 f869 	bl	800121c <__aeabi_fsub>
 800a14a:	1c03      	adds	r3, r0, #0
 800a14c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2298      	movs	r2, #152	@ 0x98
 800a152:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a154:	1c19      	adds	r1, r3, #0
 800a156:	f7f6 ff23 	bl	8000fa0 <__aeabi_fmul>
 800a15a:	1c03      	adds	r3, r0, #0
 800a15c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	228c      	movs	r2, #140	@ 0x8c
 800a162:	589b      	ldr	r3, [r3, r2]
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	1c18      	adds	r0, r3, #0
 800a168:	f7f6 ff1a 	bl	8000fa0 <__aeabi_fmul>
 800a16c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800a16e:	1c19      	adds	r1, r3, #0
 800a170:	1c20      	adds	r0, r4, #0
 800a172:	f7f6 fba5 	bl	80008c0 <__aeabi_fadd>
 800a176:	1c03      	adds	r3, r0, #0
 800a178:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2298      	movs	r2, #152	@ 0x98
 800a17e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2290      	movs	r2, #144	@ 0x90
 800a184:	589b      	ldr	r3, [r3, r2]
 800a186:	1c19      	adds	r1, r3, #0
 800a188:	20fe      	movs	r0, #254	@ 0xfe
 800a18a:	0580      	lsls	r0, r0, #22
 800a18c:	f7f7 f846 	bl	800121c <__aeabi_fsub>
 800a190:	1c03      	adds	r3, r0, #0
 800a192:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	229c      	movs	r2, #156	@ 0x9c
 800a198:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a19a:	1c19      	adds	r1, r3, #0
 800a19c:	f7f6 ff00 	bl	8000fa0 <__aeabi_fmul>
 800a1a0:	1c03      	adds	r3, r0, #0
 800a1a2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2290      	movs	r2, #144	@ 0x90
 800a1a8:	589b      	ldr	r3, [r3, r2]
 800a1aa:	6839      	ldr	r1, [r7, #0]
 800a1ac:	1c18      	adds	r0, r3, #0
 800a1ae:	f7f6 fef7 	bl	8000fa0 <__aeabi_fmul>
 800a1b2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800a1b4:	1c19      	adds	r1, r3, #0
 800a1b6:	1c20      	adds	r0, r4, #0
 800a1b8:	f7f6 fb82 	bl	80008c0 <__aeabi_fadd>
 800a1bc:	1c03      	adds	r3, r0, #0
 800a1be:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	229c      	movs	r2, #156	@ 0x9c
 800a1c4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2298      	movs	r2, #152	@ 0x98
 800a1ca:	589a      	ldr	r2, [r3, r2]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	219c      	movs	r1, #156	@ 0x9c
 800a1d0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800a1d2:	1c19      	adds	r1, r3, #0
 800a1d4:	1c10      	adds	r0, r2, #0
 800a1d6:	f7f7 f821 	bl	800121c <__aeabi_fsub>
 800a1da:	1c03      	adds	r3, r0, #0
 800a1dc:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800a1de:	2100      	movs	r1, #0
 800a1e0:	6978      	ldr	r0, [r7, #20]
 800a1e2:	f7f6 f9a5 	bl	8000530 <__aeabi_fcmplt>
 800a1e6:	1e03      	subs	r3, r0, #0
 800a1e8:	d004      	beq.n	800a1f4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2280      	movs	r2, #128	@ 0x80
 800a1ee:	0612      	lsls	r2, r2, #24
 800a1f0:	4053      	eors	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800a1f4:	4923      	ldr	r1, [pc, #140]	@ (800a284 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800a1f6:	6978      	ldr	r0, [r7, #20]
 800a1f8:	f7f6 fed2 	bl	8000fa0 <__aeabi_fmul>
 800a1fc:	1c03      	adds	r3, r0, #0
 800a1fe:	1c18      	adds	r0, r3, #0
 800a200:	f017 f80e 	bl	8021220 <expf>
 800a204:	1c03      	adds	r3, r0, #0
 800a206:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800a208:	491f      	ldr	r1, [pc, #124]	@ (800a288 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800a20a:	6938      	ldr	r0, [r7, #16]
 800a20c:	f7f6 fec8 	bl	8000fa0 <__aeabi_fmul>
 800a210:	1c03      	adds	r3, r0, #0
 800a212:	491e      	ldr	r1, [pc, #120]	@ (800a28c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800a214:	1c18      	adds	r0, r3, #0
 800a216:	f7f6 fb53 	bl	80008c0 <__aeabi_fadd>
 800a21a:	1c03      	adds	r3, r0, #0
 800a21c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685c      	ldr	r4, [r3, #4]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	68f9      	ldr	r1, [r7, #12]
 800a228:	1c18      	adds	r0, r3, #0
 800a22a:	f7f6 fb49 	bl	80008c0 <__aeabi_fadd>
 800a22e:	1c03      	adds	r3, r0, #0
 800a230:	1c19      	adds	r1, r3, #0
 800a232:	1c20      	adds	r0, r4, #0
 800a234:	f7f6 fcce 	bl	8000bd4 <__aeabi_fdiv>
 800a238:	1c03      	adds	r3, r0, #0
 800a23a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800a23c:	68b9      	ldr	r1, [r7, #8]
 800a23e:	20fe      	movs	r0, #254	@ 0xfe
 800a240:	0580      	lsls	r0, r0, #22
 800a242:	f7f6 ffeb 	bl	800121c <__aeabi_fsub>
 800a246:	1c03      	adds	r3, r0, #0
 800a248:	1c18      	adds	r0, r3, #0
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	22a0      	movs	r2, #160	@ 0xa0
 800a24e:	589b      	ldr	r3, [r3, r2]
 800a250:	1c19      	adds	r1, r3, #0
 800a252:	f7f6 fea5 	bl	8000fa0 <__aeabi_fmul>
 800a256:	1c03      	adds	r3, r0, #0
 800a258:	1c1c      	adds	r4, r3, #0
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	68b8      	ldr	r0, [r7, #8]
 800a25e:	f7f6 fe9f 	bl	8000fa0 <__aeabi_fmul>
 800a262:	1c03      	adds	r3, r0, #0
 800a264:	1c19      	adds	r1, r3, #0
 800a266:	1c20      	adds	r0, r4, #0
 800a268:	f7f6 fb2a 	bl	80008c0 <__aeabi_fadd>
 800a26c:	1c03      	adds	r3, r0, #0
 800a26e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	22a0      	movs	r2, #160	@ 0xa0
 800a274:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	22a0      	movs	r2, #160	@ 0xa0
 800a27a:	589b      	ldr	r3, [r3, r2]
}
 800a27c:	1c18      	adds	r0, r3, #0
 800a27e:	46bd      	mov	sp, r7
 800a280:	b007      	add	sp, #28
 800a282:	bd90      	pop	{r4, r7, pc}
 800a284:	be4ccccd 	.word	0xbe4ccccd
 800a288:	43f00000 	.word	0x43f00000
 800a28c:	41a00000 	.word	0x41a00000

0800a290 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	000a      	movs	r2, r1
 800a29a:	1cbb      	adds	r3, r7, #2
 800a29c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800a29e:	230d      	movs	r3, #13
 800a2a0:	18fb      	adds	r3, r7, r3
 800a2a2:	22ff      	movs	r2, #255	@ 0xff
 800a2a4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a2a6:	230e      	movs	r3, #14
 800a2a8:	18fb      	adds	r3, r7, r3
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	801a      	strh	r2, [r3, #0]
 800a2ae:	e037      	b.n	800a320 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800a2b0:	230e      	movs	r3, #14
 800a2b2:	18fb      	adds	r3, r7, r3
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	18d3      	adds	r3, r2, r3
 800a2ba:	7819      	ldrb	r1, [r3, #0]
 800a2bc:	220d      	movs	r2, #13
 800a2be:	18bb      	adds	r3, r7, r2
 800a2c0:	18ba      	adds	r2, r7, r2
 800a2c2:	7812      	ldrb	r2, [r2, #0]
 800a2c4:	404a      	eors	r2, r1
 800a2c6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a2c8:	230c      	movs	r3, #12
 800a2ca:	18fb      	adds	r3, r7, r3
 800a2cc:	2208      	movs	r2, #8
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	e01b      	b.n	800a30a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800a2d2:	210d      	movs	r1, #13
 800a2d4:	187b      	adds	r3, r7, r1
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	b25b      	sxtb	r3, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	da09      	bge.n	800a2f2 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800a2de:	187b      	adds	r3, r7, r1
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	b25b      	sxtb	r3, r3
 800a2e6:	2231      	movs	r2, #49	@ 0x31
 800a2e8:	4053      	eors	r3, r2
 800a2ea:	b25a      	sxtb	r2, r3
 800a2ec:	187b      	adds	r3, r7, r1
 800a2ee:	701a      	strb	r2, [r3, #0]
 800a2f0:	e005      	b.n	800a2fe <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800a2f2:	230d      	movs	r3, #13
 800a2f4:	18fa      	adds	r2, r7, r3
 800a2f6:	18fb      	adds	r3, r7, r3
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	18db      	adds	r3, r3, r3
 800a2fc:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a2fe:	220c      	movs	r2, #12
 800a300:	18bb      	adds	r3, r7, r2
 800a302:	18ba      	adds	r2, r7, r2
 800a304:	7812      	ldrb	r2, [r2, #0]
 800a306:	3a01      	subs	r2, #1
 800a308:	701a      	strb	r2, [r3, #0]
 800a30a:	230c      	movs	r3, #12
 800a30c:	18fb      	adds	r3, r7, r3
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1de      	bne.n	800a2d2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a314:	220e      	movs	r2, #14
 800a316:	18bb      	adds	r3, r7, r2
 800a318:	18ba      	adds	r2, r7, r2
 800a31a:	8812      	ldrh	r2, [r2, #0]
 800a31c:	3201      	adds	r2, #1
 800a31e:	801a      	strh	r2, [r3, #0]
 800a320:	230e      	movs	r3, #14
 800a322:	18fa      	adds	r2, r7, r3
 800a324:	1cbb      	adds	r3, r7, #2
 800a326:	8812      	ldrh	r2, [r2, #0]
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d3c0      	bcc.n	800a2b0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800a32e:	230d      	movs	r3, #13
 800a330:	18fb      	adds	r3, r7, r3
 800a332:	781b      	ldrb	r3, [r3, #0]
}
 800a334:	0018      	movs	r0, r3
 800a336:	46bd      	mov	sp, r7
 800a338:	b004      	add	sp, #16
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	0008      	movs	r0, r1
 800a346:	0011      	movs	r1, r2
 800a348:	1cbb      	adds	r3, r7, #2
 800a34a:	1c02      	adds	r2, r0, #0
 800a34c:	801a      	strh	r2, [r3, #0]
 800a34e:	1c7b      	adds	r3, r7, #1
 800a350:	1c0a      	adds	r2, r1, #0
 800a352:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800a354:	1cbb      	adds	r3, r7, #2
 800a356:	881a      	ldrh	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	0011      	movs	r1, r2
 800a35c:	0018      	movs	r0, r3
 800a35e:	f7ff ff97 	bl	800a290 <sensirion_i2c_generate_crc>
 800a362:	0003      	movs	r3, r0
 800a364:	001a      	movs	r2, r3
 800a366:	1c7b      	adds	r3, r7, #1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d001      	beq.n	800a372 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800a372:	2300      	movs	r3, #0
}
 800a374:	0018      	movs	r0, r3
 800a376:	46bd      	mov	sp, r7
 800a378:	b002      	add	sp, #8
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	0008      	movs	r0, r1
 800a386:	0011      	movs	r1, r2
 800a388:	1cbb      	adds	r3, r7, #2
 800a38a:	1c02      	adds	r2, r0, #0
 800a38c:	801a      	strh	r2, [r3, #0]
 800a38e:	003b      	movs	r3, r7
 800a390:	1c0a      	adds	r2, r1, #0
 800a392:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800a394:	003b      	movs	r3, r7
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	0a1b      	lsrs	r3, r3, #8
 800a39a:	b299      	uxth	r1, r3
 800a39c:	1cbb      	adds	r3, r7, #2
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	1cba      	adds	r2, r7, #2
 800a3a2:	1c58      	adds	r0, r3, #1
 800a3a4:	8010      	strh	r0, [r2, #0]
 800a3a6:	001a      	movs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	189b      	adds	r3, r3, r2
 800a3ac:	b2ca      	uxtb	r2, r1
 800a3ae:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800a3b0:	1cbb      	adds	r3, r7, #2
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	1cba      	adds	r2, r7, #2
 800a3b6:	1c59      	adds	r1, r3, #1
 800a3b8:	8011      	strh	r1, [r2, #0]
 800a3ba:	001a      	movs	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	189b      	adds	r3, r3, r2
 800a3c0:	003a      	movs	r2, r7
 800a3c2:	8812      	ldrh	r2, [r2, #0]
 800a3c4:	b2d2      	uxtb	r2, r2
 800a3c6:	701a      	strb	r2, [r3, #0]
    return offset;
 800a3c8:	1cbb      	adds	r3, r7, #2
 800a3ca:	881b      	ldrh	r3, [r3, #0]
}
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	b002      	add	sp, #8
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800a3d4:	b590      	push	{r4, r7, lr}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	0008      	movs	r0, r1
 800a3de:	0011      	movs	r1, r2
 800a3e0:	1cbb      	adds	r3, r7, #2
 800a3e2:	1c02      	adds	r2, r0, #0
 800a3e4:	801a      	strh	r2, [r3, #0]
 800a3e6:	003b      	movs	r3, r7
 800a3e8:	1c0a      	adds	r2, r1, #0
 800a3ea:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800a3ec:	003b      	movs	r3, r7
 800a3ee:	881b      	ldrh	r3, [r3, #0]
 800a3f0:	0a1b      	lsrs	r3, r3, #8
 800a3f2:	b299      	uxth	r1, r3
 800a3f4:	1cbb      	adds	r3, r7, #2
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	1cba      	adds	r2, r7, #2
 800a3fa:	1c58      	adds	r0, r3, #1
 800a3fc:	8010      	strh	r0, [r2, #0]
 800a3fe:	001a      	movs	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	189b      	adds	r3, r3, r2
 800a404:	b2ca      	uxtb	r2, r1
 800a406:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800a408:	1cbb      	adds	r3, r7, #2
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	1cba      	adds	r2, r7, #2
 800a40e:	1c59      	adds	r1, r3, #1
 800a410:	8011      	strh	r1, [r2, #0]
 800a412:	001a      	movs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	189b      	adds	r3, r3, r2
 800a418:	003a      	movs	r2, r7
 800a41a:	8812      	ldrh	r2, [r2, #0]
 800a41c:	b2d2      	uxtb	r2, r2
 800a41e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800a420:	1cbb      	adds	r3, r7, #2
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	3b02      	subs	r3, #2
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800a42a:	1cbb      	adds	r3, r7, #2
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	18d4      	adds	r4, r2, r3
 800a432:	2102      	movs	r1, #2
 800a434:	f7ff ff2c 	bl	800a290 <sensirion_i2c_generate_crc>
 800a438:	0003      	movs	r3, r0
 800a43a:	7023      	strb	r3, [r4, #0]
    offset++;
 800a43c:	1cbb      	adds	r3, r7, #2
 800a43e:	881a      	ldrh	r2, [r3, #0]
 800a440:	1cbb      	adds	r3, r7, #2
 800a442:	3201      	adds	r2, #1
 800a444:	801a      	strh	r2, [r3, #0]

    return offset;
 800a446:	1cbb      	adds	r3, r7, #2
 800a448:	881b      	ldrh	r3, [r3, #0]
}
 800a44a:	0018      	movs	r0, r3
 800a44c:	46bd      	mov	sp, r7
 800a44e:	b003      	add	sp, #12
 800a450:	bd90      	pop	{r4, r7, pc}

0800a452 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	0008      	movs	r0, r1
 800a45c:	0011      	movs	r1, r2
 800a45e:	1cbb      	adds	r3, r7, #2
 800a460:	1c02      	adds	r2, r0, #0
 800a462:	801a      	strh	r2, [r3, #0]
 800a464:	003b      	movs	r3, r7
 800a466:	1c0a      	adds	r2, r1, #0
 800a468:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800a46a:	003b      	movs	r3, r7
 800a46c:	881a      	ldrh	r2, [r3, #0]
 800a46e:	1cbb      	adds	r3, r7, #2
 800a470:	8819      	ldrh	r1, [r3, #0]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	0018      	movs	r0, r3
 800a476:	f7ff ffad 	bl	800a3d4 <sensirion_i2c_add_uint16_t_to_buffer>
 800a47a:	0003      	movs	r3, r0
}
 800a47c:	0018      	movs	r0, r3
 800a47e:	46bd      	mov	sp, r7
 800a480:	b002      	add	sp, #8
 800a482:	bd80      	pop	{r7, pc}

0800a484 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6039      	str	r1, [r7, #0]
 800a48c:	0011      	movs	r1, r2
 800a48e:	1dfb      	adds	r3, r7, #7
 800a490:	1c02      	adds	r2, r0, #0
 800a492:	701a      	strb	r2, [r3, #0]
 800a494:	1d3b      	adds	r3, r7, #4
 800a496:	1c0a      	adds	r2, r1, #0
 800a498:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800a49a:	1d3b      	adds	r3, r7, #4
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	1dfb      	adds	r3, r7, #7
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f7fe fa63 	bl	8008970 <sensirion_i2c_hal_write>
 800a4aa:	0003      	movs	r3, r0
}
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	b002      	add	sp, #8
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800a4b4:	b5b0      	push	{r4, r5, r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6039      	str	r1, [r7, #0]
 800a4bc:	0011      	movs	r1, r2
 800a4be:	1dfb      	adds	r3, r7, #7
 800a4c0:	1c02      	adds	r2, r0, #0
 800a4c2:	701a      	strb	r2, [r3, #0]
 800a4c4:	1d3b      	adds	r3, r7, #4
 800a4c6:	1c0a      	adds	r2, r1, #0
 800a4c8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800a4ca:	1d3b      	adds	r3, r7, #4
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	085b      	lsrs	r3, r3, #1
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	220a      	movs	r2, #10
 800a4d4:	18ba      	adds	r2, r7, r2
 800a4d6:	1c19      	adds	r1, r3, #0
 800a4d8:	1c0b      	adds	r3, r1, #0
 800a4da:	18db      	adds	r3, r3, r3
 800a4dc:	185b      	adds	r3, r3, r1
 800a4de:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800a4e0:	1d3b      	adds	r3, r7, #4
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800a4ee:	2304      	movs	r3, #4
 800a4f0:	e06b      	b.n	800a5ca <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800a4f2:	230a      	movs	r3, #10
 800a4f4:	18fb      	adds	r3, r7, r3
 800a4f6:	881a      	ldrh	r2, [r3, #0]
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	1dfb      	adds	r3, r7, #7
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	0018      	movs	r0, r3
 800a500:	f7fe fa16 	bl	8008930 <sensirion_i2c_hal_read>
 800a504:	0003      	movs	r3, r0
 800a506:	001a      	movs	r2, r3
 800a508:	2108      	movs	r1, #8
 800a50a:	187b      	adds	r3, r7, r1
 800a50c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800a50e:	000a      	movs	r2, r1
 800a510:	18bb      	adds	r3, r7, r2
 800a512:	2100      	movs	r1, #0
 800a514:	5e5b      	ldrsh	r3, [r3, r1]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800a51a:	18bb      	adds	r3, r7, r2
 800a51c:	2200      	movs	r2, #0
 800a51e:	5e9b      	ldrsh	r3, [r3, r2]
 800a520:	e053      	b.n	800a5ca <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800a522:	230e      	movs	r3, #14
 800a524:	18fb      	adds	r3, r7, r3
 800a526:	2200      	movs	r2, #0
 800a528:	801a      	strh	r2, [r3, #0]
 800a52a:	230c      	movs	r3, #12
 800a52c:	18fb      	adds	r3, r7, r3
 800a52e:	2200      	movs	r2, #0
 800a530:	801a      	strh	r2, [r3, #0]
 800a532:	e041      	b.n	800a5b8 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800a534:	210e      	movs	r1, #14
 800a536:	187b      	adds	r3, r7, r1
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800a53e:	187b      	adds	r3, r7, r1
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	3302      	adds	r3, #2
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	001a      	movs	r2, r3
 800a54c:	2102      	movs	r1, #2
 800a54e:	f7ff fef5 	bl	800a33c <sensirion_i2c_check_crc>
 800a552:	0003      	movs	r3, r0
 800a554:	001a      	movs	r2, r3
 800a556:	2108      	movs	r1, #8
 800a558:	187b      	adds	r3, r7, r1
 800a55a:	801a      	strh	r2, [r3, #0]
        if (error) {
 800a55c:	000a      	movs	r2, r1
 800a55e:	18bb      	adds	r3, r7, r2
 800a560:	2100      	movs	r1, #0
 800a562:	5e5b      	ldrsh	r3, [r3, r1]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800a568:	18bb      	adds	r3, r7, r2
 800a56a:	2200      	movs	r2, #0
 800a56c:	5e9b      	ldrsh	r3, [r3, r2]
 800a56e:	e02c      	b.n	800a5ca <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800a570:	240e      	movs	r4, #14
 800a572:	193b      	adds	r3, r7, r4
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	18d2      	adds	r2, r2, r3
 800a57a:	250c      	movs	r5, #12
 800a57c:	197b      	adds	r3, r7, r5
 800a57e:	881b      	ldrh	r3, [r3, #0]
 800a580:	1979      	adds	r1, r7, r5
 800a582:	1c58      	adds	r0, r3, #1
 800a584:	8008      	strh	r0, [r1, #0]
 800a586:	0019      	movs	r1, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	185b      	adds	r3, r3, r1
 800a58c:	7812      	ldrb	r2, [r2, #0]
 800a58e:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800a590:	193b      	adds	r3, r7, r4
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	3301      	adds	r3, #1
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	18d2      	adds	r2, r2, r3
 800a59a:	197b      	adds	r3, r7, r5
 800a59c:	881b      	ldrh	r3, [r3, #0]
 800a59e:	1979      	adds	r1, r7, r5
 800a5a0:	1c58      	adds	r0, r3, #1
 800a5a2:	8008      	strh	r0, [r1, #0]
 800a5a4:	0019      	movs	r1, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	185b      	adds	r3, r3, r1
 800a5aa:	7812      	ldrb	r2, [r2, #0]
 800a5ac:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800a5ae:	193b      	adds	r3, r7, r4
 800a5b0:	193a      	adds	r2, r7, r4
 800a5b2:	8812      	ldrh	r2, [r2, #0]
 800a5b4:	3203      	adds	r2, #3
 800a5b6:	801a      	strh	r2, [r3, #0]
 800a5b8:	230e      	movs	r3, #14
 800a5ba:	18fa      	adds	r2, r7, r3
 800a5bc:	230a      	movs	r3, #10
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	8812      	ldrh	r2, [r2, #0]
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d3b5      	bcc.n	800a534 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	0018      	movs	r0, r3
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b004      	add	sp, #16
 800a5d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a5d4 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6039      	str	r1, [r7, #0]
 800a5dc:	0011      	movs	r1, r2
 800a5de:	1dfb      	adds	r3, r7, #7
 800a5e0:	1c02      	adds	r2, r0, #0
 800a5e2:	701a      	strb	r2, [r3, #0]
 800a5e4:	1dbb      	adds	r3, r7, #6
 800a5e6:	1c0a      	adds	r2, r1, #0
 800a5e8:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a5ea:	4b08      	ldr	r3, [pc, #32]	@ (800a60c <ReadRegister+0x38>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d008      	beq.n	800a604 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800a5f2:	4b06      	ldr	r3, [pc, #24]	@ (800a60c <ReadRegister+0x38>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	1dba      	adds	r2, r7, #6
 800a5f8:	7814      	ldrb	r4, [r2, #0]
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	1dfa      	adds	r2, r7, #7
 800a5fe:	7810      	ldrb	r0, [r2, #0]
 800a600:	0022      	movs	r2, r4
 800a602:	4798      	blx	r3
  }
}
 800a604:	46c0      	nop			@ (mov r8, r8)
 800a606:	46bd      	mov	sp, r7
 800a608:	b003      	add	sp, #12
 800a60a:	bd90      	pop	{r4, r7, pc}
 800a60c:	20001200 	.word	0x20001200

0800a610 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800a610:	b590      	push	{r4, r7, lr}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6039      	str	r1, [r7, #0]
 800a618:	0011      	movs	r1, r2
 800a61a:	1dfb      	adds	r3, r7, #7
 800a61c:	1c02      	adds	r2, r0, #0
 800a61e:	701a      	strb	r2, [r3, #0]
 800a620:	1dbb      	adds	r3, r7, #6
 800a622:	1c0a      	adds	r2, r1, #0
 800a624:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a626:	4b08      	ldr	r3, [pc, #32]	@ (800a648 <WriteRegister+0x38>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d008      	beq.n	800a640 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800a62e:	4b06      	ldr	r3, [pc, #24]	@ (800a648 <WriteRegister+0x38>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	1dba      	adds	r2, r7, #6
 800a634:	7814      	ldrb	r4, [r2, #0]
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	1dfa      	adds	r2, r7, #7
 800a63a:	7810      	ldrb	r0, [r2, #0]
 800a63c:	0022      	movs	r2, r4
 800a63e:	4798      	blx	r3
  }
}
 800a640:	46c0      	nop			@ (mov r8, r8)
 800a642:	46bd      	mov	sp, r7
 800a644:	b003      	add	sp, #12
 800a646:	bd90      	pop	{r4, r7, pc}
 800a648:	20001204 	.word	0x20001204

0800a64c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800a656:	4b07      	ldr	r3, [pc, #28]	@ (800a674 <SGP_Init+0x28>)
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a65c:	4b06      	ldr	r3, [pc, #24]	@ (800a678 <SGP_Init+0x2c>)
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800a662:	4b06      	ldr	r3, [pc, #24]	@ (800a67c <SGP_Init+0x30>)
 800a664:	2100      	movs	r1, #0
 800a666:	0018      	movs	r0, r3
 800a668:	f7fe ff8e 	bl	8009588 <GasIndexAlgorithm_init>
}
 800a66c:	46c0      	nop			@ (mov r8, r8)
 800a66e:	46bd      	mov	sp, r7
 800a670:	b002      	add	sp, #8
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20001200 	.word	0x20001200
 800a678:	20001204 	.word	0x20001204
 800a67c:	20001214 	.word	0x20001214

0800a680 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800a680:	b580      	push	{r7, lr}
 800a682:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800a684:	4b13      	ldr	r3, [pc, #76]	@ (800a6d4 <SGP_StartMeasurement+0x54>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00d      	beq.n	800a6a8 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a68c:	4b12      	ldr	r3, [pc, #72]	@ (800a6d8 <SGP_StartMeasurement+0x58>)
 800a68e:	2208      	movs	r2, #8
 800a690:	0019      	movs	r1, r3
 800a692:	2059      	movs	r0, #89	@ 0x59
 800a694:	f7ff ffbc 	bl	800a610 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a698:	f002 fc6a 	bl	800cf70 <GetCurrentHalTicks>
 800a69c:	0003      	movs	r3, r0
 800a69e:	331e      	adds	r3, #30
 800a6a0:	001a      	movs	r2, r3
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a6dc <SGP_StartMeasurement+0x5c>)
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	e00c      	b.n	800a6c2 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a6a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e0 <SGP_StartMeasurement+0x60>)
 800a6aa:	2208      	movs	r2, #8
 800a6ac:	0019      	movs	r1, r3
 800a6ae:	2059      	movs	r0, #89	@ 0x59
 800a6b0:	f7ff ffae 	bl	800a610 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800a6b4:	f002 fc5c 	bl	800cf70 <GetCurrentHalTicks>
 800a6b8:	0003      	movs	r3, r0
 800a6ba:	33aa      	adds	r3, #170	@ 0xaa
 800a6bc:	001a      	movs	r2, r3
 800a6be:	4b09      	ldr	r3, [pc, #36]	@ (800a6e4 <SGP_StartMeasurement+0x64>)
 800a6c0:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800a6c2:	4b09      	ldr	r3, [pc, #36]	@ (800a6e8 <SGP_StartMeasurement+0x68>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800a6c8:	4b08      	ldr	r3, [pc, #32]	@ (800a6ec <SGP_StartMeasurement+0x6c>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
}
 800a6ce:	46c0      	nop			@ (mov r8, r8)
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	200012bc 	.word	0x200012bc
 800a6d8:	20000098 	.word	0x20000098
 800a6dc:	200000ac 	.word	0x200000ac
 800a6e0:	20000090 	.word	0x20000090
 800a6e4:	200000a4 	.word	0x200000a4
 800a6e8:	20001212 	.word	0x20001212
 800a6ec:	20001213 	.word	0x20001213

0800a6f0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	4b04      	ldr	r3, [pc, #16]	@ (800a708 <SGP_HeatedUp+0x18>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f002 fb69 	bl	800cdd0 <TimestampIsReached>
 800a6fe:	0003      	movs	r3, r0
 800a700:	0018      	movs	r0, r3
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	46c0      	nop			@ (mov r8, r8)
 800a708:	200000a4 	.word	0x200000a4

0800a70c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800a710:	4b04      	ldr	r3, [pc, #16]	@ (800a724 <SGP_MeasurementReady+0x18>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	0018      	movs	r0, r3
 800a716:	f002 fb5b 	bl	800cdd0 <TimestampIsReached>
 800a71a:	0003      	movs	r3, r0
}
 800a71c:	0018      	movs	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	46c0      	nop			@ (mov r8, r8)
 800a724:	200000ac 	.word	0x200000ac

0800a728 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800a72c:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <SGP_MeasurementDone+0x18>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	0018      	movs	r0, r3
 800a732:	f002 fb4d 	bl	800cdd0 <TimestampIsReached>
 800a736:	0003      	movs	r3, r0
}
 800a738:	0018      	movs	r0, r3
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	46c0      	nop			@ (mov r8, r8)
 800a740:	200000a8 	.word	0x200000a8

0800a744 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800a748:	4b04      	ldr	r3, [pc, #16]	@ (800a75c <SGP_TurnHeaterOff+0x18>)
 800a74a:	2202      	movs	r2, #2
 800a74c:	0019      	movs	r1, r3
 800a74e:	2059      	movs	r0, #89	@ 0x59
 800a750:	f7ff ff5e 	bl	800a610 <WriteRegister>
}
 800a754:	46c0      	nop			@ (mov r8, r8)
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	46c0      	nop			@ (mov r8, r8)
 800a75c:	20000088 	.word	0x20000088

0800a760 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800a760:	b5b0      	push	{r4, r5, r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af02      	add	r7, sp, #8
 800a766:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800a768:	f7ff ffc2 	bl	800a6f0 <SGP_HeatedUp>
 800a76c:	1e03      	subs	r3, r0, #0
 800a76e:	d038      	beq.n	800a7e2 <SGP_GetMeasurementValues+0x82>
 800a770:	4bd5      	ldr	r3, [pc, #852]	@ (800aac8 <SGP_GetMeasurementValues+0x368>)
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	2201      	movs	r2, #1
 800a776:	4053      	eors	r3, r2
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d031      	beq.n	800a7e2 <SGP_GetMeasurementValues+0x82>
 800a77e:	4bd3      	ldr	r3, [pc, #844]	@ (800aacc <SGP_GetMeasurementValues+0x36c>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2201      	movs	r2, #1
 800a784:	4053      	eors	r3, r2
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d02a      	beq.n	800a7e2 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 800a78c:	4ad0      	ldr	r2, [pc, #832]	@ (800aad0 <SGP_GetMeasurementValues+0x370>)
 800a78e:	4bd1      	ldr	r3, [pc, #836]	@ (800aad4 <SGP_GetMeasurementValues+0x374>)
 800a790:	0019      	movs	r1, r3
 800a792:	2003      	movs	r0, #3
 800a794:	f002 fb72 	bl	800ce7c <CreateLine>
    HeatUpIsDone = true;
 800a798:	4bcb      	ldr	r3, [pc, #812]	@ (800aac8 <SGP_GetMeasurementValues+0x368>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800a79e:	4bce      	ldr	r3, [pc, #824]	@ (800aad8 <SGP_GetMeasurementValues+0x378>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00d      	beq.n	800a7c2 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a7a6:	4bcd      	ldr	r3, [pc, #820]	@ (800aadc <SGP_GetMeasurementValues+0x37c>)
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	0019      	movs	r1, r3
 800a7ac:	2059      	movs	r0, #89	@ 0x59
 800a7ae:	f7ff ff2f 	bl	800a610 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a7b2:	f002 fbdd 	bl	800cf70 <GetCurrentHalTicks>
 800a7b6:	0003      	movs	r3, r0
 800a7b8:	331e      	adds	r3, #30
 800a7ba:	001a      	movs	r2, r3
 800a7bc:	4bc8      	ldr	r3, [pc, #800]	@ (800aae0 <SGP_GetMeasurementValues+0x380>)
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	e00c      	b.n	800a7dc <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a7c2:	4bc8      	ldr	r3, [pc, #800]	@ (800aae4 <SGP_GetMeasurementValues+0x384>)
 800a7c4:	2208      	movs	r2, #8
 800a7c6:	0019      	movs	r1, r3
 800a7c8:	2059      	movs	r0, #89	@ 0x59
 800a7ca:	f7ff ff21 	bl	800a610 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a7ce:	f002 fbcf 	bl	800cf70 <GetCurrentHalTicks>
 800a7d2:	0003      	movs	r3, r0
 800a7d4:	331e      	adds	r3, #30
 800a7d6:	001a      	movs	r2, r3
 800a7d8:	4bc1      	ldr	r3, [pc, #772]	@ (800aae0 <SGP_GetMeasurementValues+0x380>)
 800a7da:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800a7dc:	4bbb      	ldr	r3, [pc, #748]	@ (800aacc <SGP_GetMeasurementValues+0x36c>)
 800a7de:	2201      	movs	r2, #1
 800a7e0:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800a7e2:	4bb9      	ldr	r3, [pc, #740]	@ (800aac8 <SGP_GetMeasurementValues+0x368>)
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d100      	bne.n	800a7ec <SGP_GetMeasurementValues+0x8c>
 800a7ea:	e1a9      	b.n	800ab40 <SGP_GetMeasurementValues+0x3e0>
 800a7ec:	f7ff ff8e 	bl	800a70c <SGP_MeasurementReady>
 800a7f0:	1e03      	subs	r3, r0, #0
 800a7f2:	d100      	bne.n	800a7f6 <SGP_GetMeasurementValues+0x96>
 800a7f4:	e1a4      	b.n	800ab40 <SGP_GetMeasurementValues+0x3e0>
 800a7f6:	4bbc      	ldr	r3, [pc, #752]	@ (800aae8 <SGP_GetMeasurementValues+0x388>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	4053      	eors	r3, r2
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	d100      	bne.n	800a806 <SGP_GetMeasurementValues+0xa6>
 800a804:	e19c      	b.n	800ab40 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800a806:	4bb9      	ldr	r3, [pc, #740]	@ (800aaec <SGP_GetMeasurementValues+0x38c>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	3301      	adds	r3, #1
 800a80c:	4ab8      	ldr	r2, [pc, #736]	@ (800aaf0 <SGP_GetMeasurementValues+0x390>)
 800a80e:	49b1      	ldr	r1, [pc, #708]	@ (800aad4 <SGP_GetMeasurementValues+0x374>)
 800a810:	2003      	movs	r0, #3
 800a812:	f002 fb33 	bl	800ce7c <CreateLine>
    MeasurementIsReady = true;
 800a816:	4bb4      	ldr	r3, [pc, #720]	@ (800aae8 <SGP_GetMeasurementValues+0x388>)
 800a818:	2201      	movs	r2, #1
 800a81a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800a81c:	4bb5      	ldr	r3, [pc, #724]	@ (800aaf4 <SGP_GetMeasurementValues+0x394>)
 800a81e:	2203      	movs	r2, #3
 800a820:	0019      	movs	r1, r3
 800a822:	2059      	movs	r0, #89	@ 0x59
 800a824:	f7ff fed6 	bl	800a5d4 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800a828:	4bb2      	ldr	r3, [pc, #712]	@ (800aaf4 <SGP_GetMeasurementValues+0x394>)
 800a82a:	2203      	movs	r2, #3
 800a82c:	2103      	movs	r1, #3
 800a82e:	0018      	movs	r0, r3
 800a830:	f000 f9ec 	bl	800ac0c <CheckCRC>
 800a834:	0003      	movs	r3, r0
 800a836:	001a      	movs	r2, r3
 800a838:	2301      	movs	r3, #1
 800a83a:	4053      	eors	r3, r2
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d02a      	beq.n	800a898 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800a842:	4aad      	ldr	r2, [pc, #692]	@ (800aaf8 <SGP_GetMeasurementValues+0x398>)
 800a844:	4bad      	ldr	r3, [pc, #692]	@ (800aafc <SGP_GetMeasurementValues+0x39c>)
 800a846:	0019      	movs	r1, r3
 800a848:	2001      	movs	r0, #1
 800a84a:	f002 fb17 	bl	800ce7c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800a84e:	4aac      	ldr	r2, [pc, #688]	@ (800ab00 <SGP_GetMeasurementValues+0x3a0>)
 800a850:	4bac      	ldr	r3, [pc, #688]	@ (800ab04 <SGP_GetMeasurementValues+0x3a4>)
 800a852:	0019      	movs	r1, r3
 800a854:	2002      	movs	r0, #2
 800a856:	f002 fb11 	bl	800ce7c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800a85a:	230f      	movs	r3, #15
 800a85c:	18fb      	adds	r3, r7, r3
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]
 800a862:	e012      	b.n	800a88a <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800a864:	240f      	movs	r4, #15
 800a866:	193b      	adds	r3, r7, r4
 800a868:	7818      	ldrb	r0, [r3, #0]
 800a86a:	193b      	adds	r3, r7, r4
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	4aa1      	ldr	r2, [pc, #644]	@ (800aaf4 <SGP_GetMeasurementValues+0x394>)
 800a870:	5cd3      	ldrb	r3, [r2, r3]
 800a872:	4aa5      	ldr	r2, [pc, #660]	@ (800ab08 <SGP_GetMeasurementValues+0x3a8>)
 800a874:	4997      	ldr	r1, [pc, #604]	@ (800aad4 <SGP_GetMeasurementValues+0x374>)
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	0003      	movs	r3, r0
 800a87a:	2003      	movs	r0, #3
 800a87c:	f002 fafe 	bl	800ce7c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800a880:	193b      	adds	r3, r7, r4
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	193b      	adds	r3, r7, r4
 800a886:	3201      	adds	r2, #1
 800a888:	701a      	strb	r2, [r3, #0]
 800a88a:	230f      	movs	r3, #15
 800a88c:	18fb      	adds	r3, r7, r3
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d9e7      	bls.n	800a864 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800a894:	2300      	movs	r3, #0
 800a896:	e16b      	b.n	800ab70 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800a898:	f002 fb6a 	bl	800cf70 <GetCurrentHalTicks>
 800a89c:	0003      	movs	r3, r0
 800a89e:	22fa      	movs	r2, #250	@ 0xfa
 800a8a0:	0092      	lsls	r2, r2, #2
 800a8a2:	189a      	adds	r2, r3, r2
 800a8a4:	4b99      	ldr	r3, [pc, #612]	@ (800ab0c <SGP_GetMeasurementValues+0x3ac>)
 800a8a6:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800a8a8:	f7ff ff4c 	bl	800a744 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 800a8ac:	4b8f      	ldr	r3, [pc, #572]	@ (800aaec <SGP_GetMeasurementValues+0x38c>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	4b8d      	ldr	r3, [pc, #564]	@ (800aaec <SGP_GetMeasurementValues+0x38c>)
 800a8b6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800a8b8:	4b8c      	ldr	r3, [pc, #560]	@ (800aaec <SGP_GetMeasurementValues+0x38c>)
 800a8ba:	781a      	ldrb	r2, [r3, #0]
 800a8bc:	4b94      	ldr	r3, [pc, #592]	@ (800ab10 <SGP_GetMeasurementValues+0x3b0>)
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d200      	bcs.n	800a8c6 <SGP_GetMeasurementValues+0x166>
 800a8c4:	e13c      	b.n	800ab40 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800a8c6:	4b8b      	ldr	r3, [pc, #556]	@ (800aaf4 <SGP_GetMeasurementValues+0x394>)
 800a8c8:	785b      	ldrb	r3, [r3, #1]
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	b21a      	sxth	r2, r3
 800a8ce:	4b89      	ldr	r3, [pc, #548]	@ (800aaf4 <SGP_GetMeasurementValues+0x394>)
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	b21b      	sxth	r3, r3
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	b21a      	sxth	r2, r3
 800a8d8:	240c      	movs	r4, #12
 800a8da:	193b      	adds	r3, r7, r4
 800a8dc:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800a8de:	193b      	adds	r3, r7, r4
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	4a8c      	ldr	r2, [pc, #560]	@ (800ab14 <SGP_GetMeasurementValues+0x3b4>)
 800a8e4:	497b      	ldr	r1, [pc, #492]	@ (800aad4 <SGP_GetMeasurementValues+0x374>)
 800a8e6:	2003      	movs	r0, #3
 800a8e8:	f002 fac8 	bl	800ce7c <CreateLine>
      int32_t tempVocIndex = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800a8f0:	193b      	adds	r3, r7, r4
 800a8f2:	8819      	ldrh	r1, [r3, #0]
 800a8f4:	2308      	movs	r3, #8
 800a8f6:	18fa      	adds	r2, r7, r3
 800a8f8:	4b87      	ldr	r3, [pc, #540]	@ (800ab18 <SGP_GetMeasurementValues+0x3b8>)
 800a8fa:	0018      	movs	r0, r3
 800a8fc:	f7fe fea6 	bl	800964c <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	4a86      	ldr	r2, [pc, #536]	@ (800ab1c <SGP_GetMeasurementValues+0x3bc>)
 800a904:	4973      	ldr	r1, [pc, #460]	@ (800aad4 <SGP_GetMeasurementValues+0x374>)
 800a906:	2003      	movs	r0, #3
 800a908:	f002 fab8 	bl	800ce7c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800a90c:	68ba      	ldr	r2, [r7, #8]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	dd5a      	ble.n	800a9d0 <SGP_GetMeasurementValues+0x270>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b64      	cmp	r3, #100	@ 0x64
 800a920:	dc56      	bgt.n	800a9d0 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	0018      	movs	r0, r3
 800a928:	f7f8 fd4a 	bl	80033c0 <__aeabi_i2d>
 800a92c:	2200      	movs	r2, #0
 800a92e:	4b7c      	ldr	r3, [pc, #496]	@ (800ab20 <SGP_GetMeasurementValues+0x3c0>)
 800a930:	f7f7 fa40 	bl	8001db4 <__aeabi_ddiv>
 800a934:	0002      	movs	r2, r0
 800a936:	000b      	movs	r3, r1
 800a938:	2000      	movs	r0, #0
 800a93a:	497a      	ldr	r1, [pc, #488]	@ (800ab24 <SGP_GetMeasurementValues+0x3c4>)
 800a93c:	f7f8 f946 	bl	8002bcc <__aeabi_dsub>
 800a940:	0002      	movs	r2, r0
 800a942:	000b      	movs	r3, r1
 800a944:	0014      	movs	r4, r2
 800a946:	001d      	movs	r5, r3
 800a948:	4b77      	ldr	r3, [pc, #476]	@ (800ab28 <SGP_GetMeasurementValues+0x3c8>)
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	0018      	movs	r0, r3
 800a94e:	f7f8 fd37 	bl	80033c0 <__aeabi_i2d>
 800a952:	0002      	movs	r2, r0
 800a954:	000b      	movs	r3, r1
 800a956:	0020      	movs	r0, r4
 800a958:	0029      	movs	r1, r5
 800a95a:	f7f7 fe6f 	bl	800263c <__aeabi_dmul>
 800a95e:	0002      	movs	r2, r0
 800a960:	000b      	movs	r3, r1
 800a962:	0010      	movs	r0, r2
 800a964:	0019      	movs	r1, r3
 800a966:	f7f5 fe71 	bl	800064c <__aeabi_d2uiz>
 800a96a:	0003      	movs	r3, r0
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	4b6f      	ldr	r3, [pc, #444]	@ (800ab2c <SGP_GetMeasurementValues+0x3cc>)
 800a970:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	0018      	movs	r0, r3
 800a978:	f7f8 fd22 	bl	80033c0 <__aeabi_i2d>
 800a97c:	2200      	movs	r2, #0
 800a97e:	4b68      	ldr	r3, [pc, #416]	@ (800ab20 <SGP_GetMeasurementValues+0x3c0>)
 800a980:	f7f7 fa18 	bl	8001db4 <__aeabi_ddiv>
 800a984:	0002      	movs	r2, r0
 800a986:	000b      	movs	r3, r1
 800a988:	0014      	movs	r4, r2
 800a98a:	001d      	movs	r5, r3
 800a98c:	4b66      	ldr	r3, [pc, #408]	@ (800ab28 <SGP_GetMeasurementValues+0x3c8>)
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	0018      	movs	r0, r3
 800a992:	f7f8 fd15 	bl	80033c0 <__aeabi_i2d>
 800a996:	0002      	movs	r2, r0
 800a998:	000b      	movs	r3, r1
 800a99a:	0020      	movs	r0, r4
 800a99c:	0029      	movs	r1, r5
 800a99e:	f7f7 fe4d 	bl	800263c <__aeabi_dmul>
 800a9a2:	0002      	movs	r2, r0
 800a9a4:	000b      	movs	r3, r1
 800a9a6:	0010      	movs	r0, r2
 800a9a8:	0019      	movs	r1, r3
 800a9aa:	f7f5 fe4f 	bl	800064c <__aeabi_d2uiz>
 800a9ae:	0003      	movs	r3, r0
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	4b5f      	ldr	r3, [pc, #380]	@ (800ab30 <SGP_GetMeasurementValues+0x3d0>)
 800a9b4:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800a9b6:	4b5c      	ldr	r3, [pc, #368]	@ (800ab28 <SGP_GetMeasurementValues+0x3c8>)
 800a9b8:	881a      	ldrh	r2, [r3, #0]
 800a9ba:	4b5e      	ldr	r3, [pc, #376]	@ (800ab34 <SGP_GetMeasurementValues+0x3d4>)
 800a9bc:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800a9be:	4b5d      	ldr	r3, [pc, #372]	@ (800ab34 <SGP_GetMeasurementValues+0x3d4>)
 800a9c0:	8818      	ldrh	r0, [r3, #0]
 800a9c2:	4b5a      	ldr	r3, [pc, #360]	@ (800ab2c <SGP_GetMeasurementValues+0x3cc>)
 800a9c4:	8819      	ldrh	r1, [r3, #0]
 800a9c6:	4b5a      	ldr	r3, [pc, #360]	@ (800ab30 <SGP_GetMeasurementValues+0x3d0>)
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	001a      	movs	r2, r3
 800a9cc:	f001 fb36 	bl	800c03c <SetVocLED>
      }
      if(*vocIndex > 100){
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b64      	cmp	r3, #100	@ 0x64
 800a9d6:	dd66      	ble.n	800aaa6 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	0018      	movs	r0, r3
 800a9de:	f7f8 fcef 	bl	80033c0 <__aeabi_i2d>
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	4b4e      	ldr	r3, [pc, #312]	@ (800ab20 <SGP_GetMeasurementValues+0x3c0>)
 800a9e6:	f7f8 f8f1 	bl	8002bcc <__aeabi_dsub>
 800a9ea:	0002      	movs	r2, r0
 800a9ec:	000b      	movs	r3, r1
 800a9ee:	0010      	movs	r0, r2
 800a9f0:	0019      	movs	r1, r3
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	4b50      	ldr	r3, [pc, #320]	@ (800ab38 <SGP_GetMeasurementValues+0x3d8>)
 800a9f6:	f7f7 f9dd 	bl	8001db4 <__aeabi_ddiv>
 800a9fa:	0002      	movs	r2, r0
 800a9fc:	000b      	movs	r3, r1
 800a9fe:	0014      	movs	r4, r2
 800aa00:	001d      	movs	r5, r3
 800aa02:	4b49      	ldr	r3, [pc, #292]	@ (800ab28 <SGP_GetMeasurementValues+0x3c8>)
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	0018      	movs	r0, r3
 800aa08:	f7f8 fcda 	bl	80033c0 <__aeabi_i2d>
 800aa0c:	0002      	movs	r2, r0
 800aa0e:	000b      	movs	r3, r1
 800aa10:	0020      	movs	r0, r4
 800aa12:	0029      	movs	r1, r5
 800aa14:	f7f7 fe12 	bl	800263c <__aeabi_dmul>
 800aa18:	0002      	movs	r2, r0
 800aa1a:	000b      	movs	r3, r1
 800aa1c:	0010      	movs	r0, r2
 800aa1e:	0019      	movs	r1, r3
 800aa20:	f7f5 fe14 	bl	800064c <__aeabi_d2uiz>
 800aa24:	0003      	movs	r3, r0
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	4b40      	ldr	r3, [pc, #256]	@ (800ab2c <SGP_GetMeasurementValues+0x3cc>)
 800aa2a:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	0018      	movs	r0, r3
 800aa32:	f7f8 fcc5 	bl	80033c0 <__aeabi_i2d>
 800aa36:	2200      	movs	r2, #0
 800aa38:	4b39      	ldr	r3, [pc, #228]	@ (800ab20 <SGP_GetMeasurementValues+0x3c0>)
 800aa3a:	f7f8 f8c7 	bl	8002bcc <__aeabi_dsub>
 800aa3e:	0002      	movs	r2, r0
 800aa40:	000b      	movs	r3, r1
 800aa42:	0010      	movs	r0, r2
 800aa44:	0019      	movs	r1, r3
 800aa46:	2200      	movs	r2, #0
 800aa48:	4b3b      	ldr	r3, [pc, #236]	@ (800ab38 <SGP_GetMeasurementValues+0x3d8>)
 800aa4a:	f7f7 f9b3 	bl	8001db4 <__aeabi_ddiv>
 800aa4e:	0002      	movs	r2, r0
 800aa50:	000b      	movs	r3, r1
 800aa52:	2000      	movs	r0, #0
 800aa54:	4933      	ldr	r1, [pc, #204]	@ (800ab24 <SGP_GetMeasurementValues+0x3c4>)
 800aa56:	f7f8 f8b9 	bl	8002bcc <__aeabi_dsub>
 800aa5a:	0002      	movs	r2, r0
 800aa5c:	000b      	movs	r3, r1
 800aa5e:	0014      	movs	r4, r2
 800aa60:	001d      	movs	r5, r3
 800aa62:	4b31      	ldr	r3, [pc, #196]	@ (800ab28 <SGP_GetMeasurementValues+0x3c8>)
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	0018      	movs	r0, r3
 800aa68:	f7f8 fcaa 	bl	80033c0 <__aeabi_i2d>
 800aa6c:	0002      	movs	r2, r0
 800aa6e:	000b      	movs	r3, r1
 800aa70:	0020      	movs	r0, r4
 800aa72:	0029      	movs	r1, r5
 800aa74:	f7f7 fde2 	bl	800263c <__aeabi_dmul>
 800aa78:	0002      	movs	r2, r0
 800aa7a:	000b      	movs	r3, r1
 800aa7c:	0010      	movs	r0, r2
 800aa7e:	0019      	movs	r1, r3
 800aa80:	f7f5 fde4 	bl	800064c <__aeabi_d2uiz>
 800aa84:	0003      	movs	r3, r0
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	4b2a      	ldr	r3, [pc, #168]	@ (800ab34 <SGP_GetMeasurementValues+0x3d4>)
 800aa8a:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800aa8c:	4b26      	ldr	r3, [pc, #152]	@ (800ab28 <SGP_GetMeasurementValues+0x3c8>)
 800aa8e:	881a      	ldrh	r2, [r3, #0]
 800aa90:	4b27      	ldr	r3, [pc, #156]	@ (800ab30 <SGP_GetMeasurementValues+0x3d0>)
 800aa92:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800aa94:	4b27      	ldr	r3, [pc, #156]	@ (800ab34 <SGP_GetMeasurementValues+0x3d4>)
 800aa96:	8818      	ldrh	r0, [r3, #0]
 800aa98:	4b24      	ldr	r3, [pc, #144]	@ (800ab2c <SGP_GetMeasurementValues+0x3cc>)
 800aa9a:	8819      	ldrh	r1, [r3, #0]
 800aa9c:	4b24      	ldr	r3, [pc, #144]	@ (800ab30 <SGP_GetMeasurementValues+0x3d0>)
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	001a      	movs	r2, r3
 800aaa2:	f001 facb 	bl	800c03c <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800aaa6:	4b11      	ldr	r3, [pc, #68]	@ (800aaec <SGP_GetMeasurementValues+0x38c>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 800aaac:	4a23      	ldr	r2, [pc, #140]	@ (800ab3c <SGP_GetMeasurementValues+0x3dc>)
 800aaae:	4b09      	ldr	r3, [pc, #36]	@ (800aad4 <SGP_GetMeasurementValues+0x374>)
 800aab0:	0019      	movs	r1, r3
 800aab2:	2003      	movs	r0, #3
 800aab4:	f002 f9e2 	bl	800ce7c <CreateLine>
      HT_MeasurementReceived = false;
 800aab8:	4b07      	ldr	r3, [pc, #28]	@ (800aad8 <SGP_GetMeasurementValues+0x378>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800aabe:	4b03      	ldr	r3, [pc, #12]	@ (800aacc <SGP_GetMeasurementValues+0x36c>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e053      	b.n	800ab70 <SGP_GetMeasurementValues+0x410>
 800aac8:	20001212 	.word	0x20001212
 800aacc:	200012bd 	.word	0x200012bd
 800aad0:	08022ab0 	.word	0x08022ab0
 800aad4:	08022adc 	.word	0x08022adc
 800aad8:	200012bc 	.word	0x200012bc
 800aadc:	20000098 	.word	0x20000098
 800aae0:	200000ac 	.word	0x200000ac
 800aae4:	20000090 	.word	0x20000090
 800aae8:	20001213 	.word	0x20001213
 800aaec:	20001211 	.word	0x20001211
 800aaf0:	08022ae0 	.word	0x08022ae0
 800aaf4:	20001208 	.word	0x20001208
 800aaf8:	08022b10 	.word	0x08022b10
 800aafc:	08022b34 	.word	0x08022b34
 800ab00:	08022b38 	.word	0x08022b38
 800ab04:	08022b58 	.word	0x08022b58
 800ab08:	08022b5c 	.word	0x08022b5c
 800ab0c:	200000a8 	.word	0x200000a8
 800ab10:	200000a0 	.word	0x200000a0
 800ab14:	08022b7c 	.word	0x08022b7c
 800ab18:	20001214 	.word	0x20001214
 800ab1c:	08022b90 	.word	0x08022b90
 800ab20:	40590000 	.word	0x40590000
 800ab24:	3ff00000 	.word	0x3ff00000
 800ab28:	200000b0 	.word	0x200000b0
 800ab2c:	200012c2 	.word	0x200012c2
 800ab30:	200012c0 	.word	0x200012c0
 800ab34:	200012be 	.word	0x200012be
 800ab38:	40790000 	.word	0x40790000
 800ab3c:	08022ba4 	.word	0x08022ba4
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800ab40:	f7ff fdf2 	bl	800a728 <SGP_MeasurementDone>
 800ab44:	1e03      	subs	r3, r0, #0
 800ab46:	d012      	beq.n	800ab6e <SGP_GetMeasurementValues+0x40e>
 800ab48:	4b0b      	ldr	r3, [pc, #44]	@ (800ab78 <SGP_GetMeasurementValues+0x418>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00e      	beq.n	800ab6e <SGP_GetMeasurementValues+0x40e>
 800ab50:	4b0a      	ldr	r3, [pc, #40]	@ (800ab7c <SGP_GetMeasurementValues+0x41c>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00a      	beq.n	800ab6e <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800ab58:	4a09      	ldr	r2, [pc, #36]	@ (800ab80 <SGP_GetMeasurementValues+0x420>)
 800ab5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab84 <SGP_GetMeasurementValues+0x424>)
 800ab5c:	0019      	movs	r1, r3
 800ab5e:	2003      	movs	r0, #3
 800ab60:	f002 f98c 	bl	800ce7c <CreateLine>
    SGP_StartMeasurement();
 800ab64:	f7ff fd8c 	bl	800a680 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800ab68:	4b07      	ldr	r3, [pc, #28]	@ (800ab88 <SGP_GetMeasurementValues+0x428>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	0018      	movs	r0, r3
 800ab72:	46bd      	mov	sp, r7
 800ab74:	b004      	add	sp, #16
 800ab76:	bdb0      	pop	{r4, r5, r7, pc}
 800ab78:	20001212 	.word	0x20001212
 800ab7c:	20001213 	.word	0x20001213
 800ab80:	08022bc8 	.word	0x08022bc8
 800ab84:	08022adc 	.word	0x08022adc
 800ab88:	200012bd 	.word	0x200012bd

0800ab8c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800ab92:	4b1a      	ldr	r3, [pc, #104]	@ (800abfc <SGP_DeviceConnected+0x70>)
 800ab94:	2202      	movs	r2, #2
 800ab96:	0019      	movs	r1, r3
 800ab98:	2059      	movs	r0, #89	@ 0x59
 800ab9a:	f7ff fd39 	bl	800a610 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800ab9e:	2001      	movs	r0, #1
 800aba0:	f002 fd12 	bl	800d5c8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800aba4:	4b16      	ldr	r3, [pc, #88]	@ (800ac00 <SGP_DeviceConnected+0x74>)
 800aba6:	2209      	movs	r2, #9
 800aba8:	0019      	movs	r1, r3
 800abaa:	2059      	movs	r0, #89	@ 0x59
 800abac:	f7ff fd12 	bl	800a5d4 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800abb0:	1dfb      	adds	r3, r7, #7
 800abb2:	2200      	movs	r2, #0
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	e011      	b.n	800abdc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800abb8:	1dfb      	adds	r3, r7, #7
 800abba:	7818      	ldrb	r0, [r3, #0]
 800abbc:	1dfb      	adds	r3, r7, #7
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	4a0f      	ldr	r2, [pc, #60]	@ (800ac00 <SGP_DeviceConnected+0x74>)
 800abc2:	5cd3      	ldrb	r3, [r2, r3]
 800abc4:	4a0f      	ldr	r2, [pc, #60]	@ (800ac04 <SGP_DeviceConnected+0x78>)
 800abc6:	4910      	ldr	r1, [pc, #64]	@ (800ac08 <SGP_DeviceConnected+0x7c>)
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	0003      	movs	r3, r0
 800abcc:	2002      	movs	r0, #2
 800abce:	f002 f955 	bl	800ce7c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800abd2:	1dfb      	adds	r3, r7, #7
 800abd4:	781a      	ldrb	r2, [r3, #0]
 800abd6:	1dfb      	adds	r3, r7, #7
 800abd8:	3201      	adds	r2, #1
 800abda:	701a      	strb	r2, [r3, #0]
 800abdc:	1dfb      	adds	r3, r7, #7
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b08      	cmp	r3, #8
 800abe2:	d9e9      	bls.n	800abb8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800abe4:	4b06      	ldr	r3, [pc, #24]	@ (800ac00 <SGP_DeviceConnected+0x74>)
 800abe6:	2203      	movs	r2, #3
 800abe8:	2109      	movs	r1, #9
 800abea:	0018      	movs	r0, r3
 800abec:	f000 f80e 	bl	800ac0c <CheckCRC>
 800abf0:	0003      	movs	r3, r0
}
 800abf2:	0018      	movs	r0, r3
 800abf4:	46bd      	mov	sp, r7
 800abf6:	b002      	add	sp, #8
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	46c0      	nop			@ (mov r8, r8)
 800abfc:	2000008c 	.word	0x2000008c
 800ac00:	20001208 	.word	0x20001208
 800ac04:	08022be8 	.word	0x08022be8
 800ac08:	08022b58 	.word	0x08022b58

0800ac0c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0e:	b08f      	sub	sp, #60	@ 0x3c
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac14:	0008      	movs	r0, r1
 800ac16:	0011      	movs	r1, r2
 800ac18:	2323      	movs	r3, #35	@ 0x23
 800ac1a:	18fb      	adds	r3, r7, r3
 800ac1c:	1c02      	adds	r2, r0, #0
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	2322      	movs	r3, #34	@ 0x22
 800ac22:	18fb      	adds	r3, r7, r3
 800ac24:	1c0a      	adds	r2, r1, #0
 800ac26:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ac28:	2317      	movs	r3, #23
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	189b      	adds	r3, r3, r2
 800ac2e:	19db      	adds	r3, r3, r7
 800ac30:	2200      	movs	r2, #0
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	e09f      	b.n	800ad76 <CheckCRC+0x16a>
 800ac36:	466b      	mov	r3, sp
 800ac38:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800ac3a:	2322      	movs	r3, #34	@ 0x22
 800ac3c:	18fb      	adds	r3, r7, r3
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	001a      	movs	r2, r3
 800ac42:	3a01      	subs	r2, #1
 800ac44:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac46:	60bb      	str	r3, [r7, #8]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	60fa      	str	r2, [r7, #12]
 800ac4c:	68b8      	ldr	r0, [r7, #8]
 800ac4e:	68f9      	ldr	r1, [r7, #12]
 800ac50:	0002      	movs	r2, r0
 800ac52:	0f52      	lsrs	r2, r2, #29
 800ac54:	000c      	movs	r4, r1
 800ac56:	00e4      	lsls	r4, r4, #3
 800ac58:	61fc      	str	r4, [r7, #28]
 800ac5a:	69fc      	ldr	r4, [r7, #28]
 800ac5c:	4314      	orrs	r4, r2
 800ac5e:	61fc      	str	r4, [r7, #28]
 800ac60:	0002      	movs	r2, r0
 800ac62:	00d2      	lsls	r2, r2, #3
 800ac64:	61ba      	str	r2, [r7, #24]
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	6838      	ldr	r0, [r7, #0]
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	0002      	movs	r2, r0
 800ac72:	0f52      	lsrs	r2, r2, #29
 800ac74:	000c      	movs	r4, r1
 800ac76:	00e4      	lsls	r4, r4, #3
 800ac78:	617c      	str	r4, [r7, #20]
 800ac7a:	697c      	ldr	r4, [r7, #20]
 800ac7c:	4314      	orrs	r4, r2
 800ac7e:	617c      	str	r4, [r7, #20]
 800ac80:	0002      	movs	r2, r0
 800ac82:	00d2      	lsls	r2, r2, #3
 800ac84:	613a      	str	r2, [r7, #16]
 800ac86:	3307      	adds	r3, #7
 800ac88:	08db      	lsrs	r3, r3, #3
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	466a      	mov	r2, sp
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	469d      	mov	sp, r3
 800ac92:	466b      	mov	r3, sp
 800ac94:	3300      	adds	r3, #0
 800ac96:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800ac98:	2316      	movs	r3, #22
 800ac9a:	2220      	movs	r2, #32
 800ac9c:	189b      	adds	r3, r3, r2
 800ac9e:	19db      	adds	r3, r3, r7
 800aca0:	2200      	movs	r2, #0
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	e01e      	b.n	800ace4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800aca6:	2317      	movs	r3, #23
 800aca8:	2220      	movs	r2, #32
 800acaa:	189b      	adds	r3, r3, r2
 800acac:	19db      	adds	r3, r3, r7
 800acae:	781a      	ldrb	r2, [r3, #0]
 800acb0:	2116      	movs	r1, #22
 800acb2:	2320      	movs	r3, #32
 800acb4:	18cb      	adds	r3, r1, r3
 800acb6:	19db      	adds	r3, r3, r7
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	18d3      	adds	r3, r2, r3
 800acbc:	001a      	movs	r2, r3
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	189a      	adds	r2, r3, r2
 800acc2:	0008      	movs	r0, r1
 800acc4:	2320      	movs	r3, #32
 800acc6:	18cb      	adds	r3, r1, r3
 800acc8:	19db      	adds	r3, r3, r7
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	7811      	ldrb	r1, [r2, #0]
 800acce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acd0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800acd2:	2320      	movs	r3, #32
 800acd4:	18c3      	adds	r3, r0, r3
 800acd6:	19db      	adds	r3, r3, r7
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	2320      	movs	r3, #32
 800acdc:	18c3      	adds	r3, r0, r3
 800acde:	19db      	adds	r3, r3, r7
 800ace0:	3201      	adds	r2, #1
 800ace2:	701a      	strb	r2, [r3, #0]
 800ace4:	2316      	movs	r3, #22
 800ace6:	2220      	movs	r2, #32
 800ace8:	189b      	adds	r3, r3, r2
 800acea:	19da      	adds	r2, r3, r7
 800acec:	2322      	movs	r3, #34	@ 0x22
 800acee:	18fb      	adds	r3, r7, r3
 800acf0:	7812      	ldrb	r2, [r2, #0]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d3d6      	bcc.n	800aca6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800acf8:	2417      	movs	r4, #23
 800acfa:	2320      	movs	r3, #32
 800acfc:	18e3      	adds	r3, r4, r3
 800acfe:	19db      	adds	r3, r3, r7
 800ad00:	781a      	ldrb	r2, [r3, #0]
 800ad02:	2322      	movs	r3, #34	@ 0x22
 800ad04:	18fb      	adds	r3, r7, r3
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	18d3      	adds	r3, r2, r3
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad0e:	18d2      	adds	r2, r2, r3
 800ad10:	250b      	movs	r5, #11
 800ad12:	2320      	movs	r3, #32
 800ad14:	18eb      	adds	r3, r5, r3
 800ad16:	19db      	adds	r3, r3, r7
 800ad18:	7812      	ldrb	r2, [r2, #0]
 800ad1a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800ad1c:	2322      	movs	r3, #34	@ 0x22
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad28:	0011      	movs	r1, r2
 800ad2a:	0018      	movs	r0, r3
 800ad2c:	f000 f838 	bl	800ada0 <CalculateCRC>
 800ad30:	0003      	movs	r3, r0
 800ad32:	001a      	movs	r2, r3
 800ad34:	2320      	movs	r3, #32
 800ad36:	18eb      	adds	r3, r5, r3
 800ad38:	19db      	adds	r3, r3, r7
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d00c      	beq.n	800ad5a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800ad40:	2320      	movs	r3, #32
 800ad42:	18e3      	adds	r3, r4, r3
 800ad44:	19db      	adds	r3, r3, r7
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	4a13      	ldr	r2, [pc, #76]	@ (800ad98 <CheckCRC+0x18c>)
 800ad4c:	4913      	ldr	r1, [pc, #76]	@ (800ad9c <CheckCRC+0x190>)
 800ad4e:	2001      	movs	r0, #1
 800ad50:	f002 f894 	bl	800ce7c <CreateLine>
      return false;
 800ad54:	2300      	movs	r3, #0
 800ad56:	46b5      	mov	sp, r6
 800ad58:	e019      	b.n	800ad8e <CheckCRC+0x182>
 800ad5a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ad5c:	2217      	movs	r2, #23
 800ad5e:	2320      	movs	r3, #32
 800ad60:	18d3      	adds	r3, r2, r3
 800ad62:	19db      	adds	r3, r3, r7
 800ad64:	2120      	movs	r1, #32
 800ad66:	1852      	adds	r2, r2, r1
 800ad68:	19d1      	adds	r1, r2, r7
 800ad6a:	2222      	movs	r2, #34	@ 0x22
 800ad6c:	18ba      	adds	r2, r7, r2
 800ad6e:	7809      	ldrb	r1, [r1, #0]
 800ad70:	7812      	ldrb	r2, [r2, #0]
 800ad72:	188a      	adds	r2, r1, r2
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	2317      	movs	r3, #23
 800ad78:	2220      	movs	r2, #32
 800ad7a:	189b      	adds	r3, r3, r2
 800ad7c:	19da      	adds	r2, r3, r7
 800ad7e:	2323      	movs	r3, #35	@ 0x23
 800ad80:	18fb      	adds	r3, r7, r3
 800ad82:	7812      	ldrb	r2, [r2, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d200      	bcs.n	800ad8c <CheckCRC+0x180>
 800ad8a:	e754      	b.n	800ac36 <CheckCRC+0x2a>
    }
  }
  return true;
 800ad8c:	2301      	movs	r3, #1
}
 800ad8e:	0018      	movs	r0, r3
 800ad90:	46bd      	mov	sp, r7
 800ad92:	b00f      	add	sp, #60	@ 0x3c
 800ad94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad96:	46c0      	nop			@ (mov r8, r8)
 800ad98:	08022c08 	.word	0x08022c08
 800ad9c:	08022b34 	.word	0x08022b34

0800ada0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	000a      	movs	r2, r1
 800adaa:	1cfb      	adds	r3, r7, #3
 800adac:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800adae:	230f      	movs	r3, #15
 800adb0:	18fb      	adds	r3, r7, r3
 800adb2:	22ff      	movs	r2, #255	@ 0xff
 800adb4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800adb6:	230e      	movs	r3, #14
 800adb8:	18fb      	adds	r3, r7, r3
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e037      	b.n	800ae30 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800adc0:	230e      	movs	r3, #14
 800adc2:	18fb      	adds	r3, r7, r3
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	18d3      	adds	r3, r2, r3
 800adca:	7819      	ldrb	r1, [r3, #0]
 800adcc:	220f      	movs	r2, #15
 800adce:	18bb      	adds	r3, r7, r2
 800add0:	18ba      	adds	r2, r7, r2
 800add2:	7812      	ldrb	r2, [r2, #0]
 800add4:	404a      	eors	r2, r1
 800add6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800add8:	230d      	movs	r3, #13
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	e01b      	b.n	800ae1a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800ade2:	210f      	movs	r1, #15
 800ade4:	187b      	adds	r3, r7, r1
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	b25b      	sxtb	r3, r3
 800adea:	2b00      	cmp	r3, #0
 800adec:	da09      	bge.n	800ae02 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800adee:	187b      	adds	r3, r7, r1
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	2231      	movs	r2, #49	@ 0x31
 800adf8:	4053      	eors	r3, r2
 800adfa:	b25a      	sxtb	r2, r3
 800adfc:	187b      	adds	r3, r7, r1
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e005      	b.n	800ae0e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800ae02:	230f      	movs	r3, #15
 800ae04:	18fa      	adds	r2, r7, r3
 800ae06:	18fb      	adds	r3, r7, r3
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	18db      	adds	r3, r3, r3
 800ae0c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800ae0e:	210d      	movs	r1, #13
 800ae10:	187b      	adds	r3, r7, r1
 800ae12:	781a      	ldrb	r2, [r3, #0]
 800ae14:	187b      	adds	r3, r7, r1
 800ae16:	3201      	adds	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
 800ae1a:	230d      	movs	r3, #13
 800ae1c:	18fb      	adds	r3, r7, r3
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b07      	cmp	r3, #7
 800ae22:	d9de      	bls.n	800ade2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800ae24:	210e      	movs	r1, #14
 800ae26:	187b      	adds	r3, r7, r1
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	187b      	adds	r3, r7, r1
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	701a      	strb	r2, [r3, #0]
 800ae30:	230e      	movs	r3, #14
 800ae32:	18fa      	adds	r2, r7, r3
 800ae34:	1cfb      	adds	r3, r7, #3
 800ae36:	7812      	ldrb	r2, [r2, #0]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d3c0      	bcc.n	800adc0 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800ae3e:	230f      	movs	r3, #15
 800ae40:	18fb      	adds	r3, r7, r3
 800ae42:	781b      	ldrb	r3, [r3, #0]
}
 800ae44:	0018      	movs	r0, r3
 800ae46:	46bd      	mov	sp, r7
 800ae48:	b004      	add	sp, #16
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4936      	ldr	r1, [pc, #216]	@ (800af34 <SGP_GetHT+0xe8>)
 800ae5c:	1c18      	adds	r0, r3, #0
 800ae5e:	f7f5 fd2f 	bl	80008c0 <__aeabi_fadd>
 800ae62:	1c03      	adds	r3, r0, #0
 800ae64:	4934      	ldr	r1, [pc, #208]	@ (800af38 <SGP_GetHT+0xec>)
 800ae66:	1c18      	adds	r0, r3, #0
 800ae68:	f7f5 feb4 	bl	8000bd4 <__aeabi_fdiv>
 800ae6c:	1c03      	adds	r3, r0, #0
 800ae6e:	4933      	ldr	r1, [pc, #204]	@ (800af3c <SGP_GetHT+0xf0>)
 800ae70:	1c18      	adds	r0, r3, #0
 800ae72:	f7f6 f895 	bl	8000fa0 <__aeabi_fmul>
 800ae76:	1c03      	adds	r3, r0, #0
 800ae78:	1c18      	adds	r0, r3, #0
 800ae7a:	f7f5 fbcf 	bl	800061c <__aeabi_f2uiz>
 800ae7e:	0003      	movs	r3, r0
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	4b2f      	ldr	r3, [pc, #188]	@ (800af40 <SGP_GetHT+0xf4>)
 800ae84:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	492e      	ldr	r1, [pc, #184]	@ (800af44 <SGP_GetHT+0xf8>)
 800ae8c:	1c18      	adds	r0, r3, #0
 800ae8e:	f7f5 fea1 	bl	8000bd4 <__aeabi_fdiv>
 800ae92:	1c03      	adds	r3, r0, #0
 800ae94:	4929      	ldr	r1, [pc, #164]	@ (800af3c <SGP_GetHT+0xf0>)
 800ae96:	1c18      	adds	r0, r3, #0
 800ae98:	f7f6 f882 	bl	8000fa0 <__aeabi_fmul>
 800ae9c:	1c03      	adds	r3, r0, #0
 800ae9e:	1c18      	adds	r0, r3, #0
 800aea0:	f7f5 fbbc 	bl	800061c <__aeabi_f2uiz>
 800aea4:	0003      	movs	r3, r0
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	4b27      	ldr	r3, [pc, #156]	@ (800af48 <SGP_GetHT+0xfc>)
 800aeaa:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800aeac:	4b26      	ldr	r3, [pc, #152]	@ (800af48 <SGP_GetHT+0xfc>)
 800aeae:	881b      	ldrh	r3, [r3, #0]
 800aeb0:	0a1b      	lsrs	r3, r3, #8
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	4b25      	ldr	r3, [pc, #148]	@ (800af4c <SGP_GetHT+0x100>)
 800aeb8:	709a      	strb	r2, [r3, #2]
 800aeba:	4b24      	ldr	r3, [pc, #144]	@ (800af4c <SGP_GetHT+0x100>)
 800aebc:	789a      	ldrb	r2, [r3, #2]
 800aebe:	210c      	movs	r1, #12
 800aec0:	187b      	adds	r3, r7, r1
 800aec2:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800aec4:	4b20      	ldr	r3, [pc, #128]	@ (800af48 <SGP_GetHT+0xfc>)
 800aec6:	881b      	ldrh	r3, [r3, #0]
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b20      	ldr	r3, [pc, #128]	@ (800af4c <SGP_GetHT+0x100>)
 800aecc:	70da      	strb	r2, [r3, #3]
 800aece:	4b1f      	ldr	r3, [pc, #124]	@ (800af4c <SGP_GetHT+0x100>)
 800aed0:	78da      	ldrb	r2, [r3, #3]
 800aed2:	187b      	adds	r3, r7, r1
 800aed4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800aed6:	187b      	adds	r3, r7, r1
 800aed8:	2102      	movs	r1, #2
 800aeda:	0018      	movs	r0, r3
 800aedc:	f7ff ff60 	bl	800ada0 <CalculateCRC>
 800aee0:	0003      	movs	r3, r0
 800aee2:	001a      	movs	r2, r3
 800aee4:	4b19      	ldr	r3, [pc, #100]	@ (800af4c <SGP_GetHT+0x100>)
 800aee6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800aee8:	4b15      	ldr	r3, [pc, #84]	@ (800af40 <SGP_GetHT+0xf4>)
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	0a1b      	lsrs	r3, r3, #8
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	4b16      	ldr	r3, [pc, #88]	@ (800af4c <SGP_GetHT+0x100>)
 800aef4:	715a      	strb	r2, [r3, #5]
 800aef6:	4b15      	ldr	r3, [pc, #84]	@ (800af4c <SGP_GetHT+0x100>)
 800aef8:	795a      	ldrb	r2, [r3, #5]
 800aefa:	2108      	movs	r1, #8
 800aefc:	187b      	adds	r3, r7, r1
 800aefe:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800af00:	4b0f      	ldr	r3, [pc, #60]	@ (800af40 <SGP_GetHT+0xf4>)
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b2da      	uxtb	r2, r3
 800af06:	4b11      	ldr	r3, [pc, #68]	@ (800af4c <SGP_GetHT+0x100>)
 800af08:	719a      	strb	r2, [r3, #6]
 800af0a:	4b10      	ldr	r3, [pc, #64]	@ (800af4c <SGP_GetHT+0x100>)
 800af0c:	799a      	ldrb	r2, [r3, #6]
 800af0e:	187b      	adds	r3, r7, r1
 800af10:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800af12:	187b      	adds	r3, r7, r1
 800af14:	2102      	movs	r1, #2
 800af16:	0018      	movs	r0, r3
 800af18:	f7ff ff42 	bl	800ada0 <CalculateCRC>
 800af1c:	0003      	movs	r3, r0
 800af1e:	001a      	movs	r2, r3
 800af20:	4b0a      	ldr	r3, [pc, #40]	@ (800af4c <SGP_GetHT+0x100>)
 800af22:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800af24:	4b0a      	ldr	r3, [pc, #40]	@ (800af50 <SGP_GetHT+0x104>)
 800af26:	2201      	movs	r2, #1
 800af28:	701a      	strb	r2, [r3, #0]
}
 800af2a:	46c0      	nop			@ (mov r8, r8)
 800af2c:	46bd      	mov	sp, r7
 800af2e:	b004      	add	sp, #16
 800af30:	bd80      	pop	{r7, pc}
 800af32:	46c0      	nop			@ (mov r8, r8)
 800af34:	42340000 	.word	0x42340000
 800af38:	432f0000 	.word	0x432f0000
 800af3c:	477fff00 	.word	0x477fff00
 800af40:	200012ba 	.word	0x200012ba
 800af44:	42c80000 	.word	0x42c80000
 800af48:	200012b8 	.word	0x200012b8
 800af4c:	20000098 	.word	0x20000098
 800af50:	200012bc 	.word	0x200012bc

0800af54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	0002      	movs	r2, r0
 800af5c:	1dfb      	adds	r3, r7, #7
 800af5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800af60:	1dfb      	adds	r3, r7, #7
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b7f      	cmp	r3, #127	@ 0x7f
 800af66:	d809      	bhi.n	800af7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af68:	1dfb      	adds	r3, r7, #7
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	001a      	movs	r2, r3
 800af6e:	231f      	movs	r3, #31
 800af70:	401a      	ands	r2, r3
 800af72:	4b04      	ldr	r3, [pc, #16]	@ (800af84 <__NVIC_EnableIRQ+0x30>)
 800af74:	2101      	movs	r1, #1
 800af76:	4091      	lsls	r1, r2
 800af78:	000a      	movs	r2, r1
 800af7a:	601a      	str	r2, [r3, #0]
  }
}
 800af7c:	46c0      	nop			@ (mov r8, r8)
 800af7e:	46bd      	mov	sp, r7
 800af80:	b002      	add	sp, #8
 800af82:	bd80      	pop	{r7, pc}
 800af84:	e000e100 	.word	0xe000e100

0800af88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	0002      	movs	r2, r0
 800af90:	1dfb      	adds	r3, r7, #7
 800af92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800af94:	1dfb      	adds	r3, r7, #7
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	2b7f      	cmp	r3, #127	@ 0x7f
 800af9a:	d810      	bhi.n	800afbe <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af9c:	1dfb      	adds	r3, r7, #7
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	001a      	movs	r2, r3
 800afa2:	231f      	movs	r3, #31
 800afa4:	4013      	ands	r3, r2
 800afa6:	4908      	ldr	r1, [pc, #32]	@ (800afc8 <__NVIC_DisableIRQ+0x40>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	409a      	lsls	r2, r3
 800afac:	0013      	movs	r3, r2
 800afae:	2280      	movs	r2, #128	@ 0x80
 800afb0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800afb2:	f3bf 8f4f 	dsb	sy
}
 800afb6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800afb8:	f3bf 8f6f 	isb	sy
}
 800afbc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800afbe:	46c0      	nop			@ (mov r8, r8)
 800afc0:	46bd      	mov	sp, r7
 800afc2:	b002      	add	sp, #8
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	46c0      	nop			@ (mov r8, r8)
 800afc8:	e000e100 	.word	0xe000e100

0800afcc <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800afcc:	b5b0      	push	{r4, r5, r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af02      	add	r7, sp, #8
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	0008      	movs	r0, r1
 800afd6:	0011      	movs	r1, r2
 800afd8:	1cfb      	adds	r3, r7, #3
 800afda:	1c02      	adds	r2, r0, #0
 800afdc:	701a      	strb	r2, [r3, #0]
 800afde:	1cbb      	adds	r3, r7, #2
 800afe0:	1c0a      	adds	r2, r1, #0
 800afe2:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800afe4:	4b5b      	ldr	r3, [pc, #364]	@ (800b154 <getSoundData+0x188>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2201      	movs	r2, #1
 800afec:	4053      	eors	r3, r2
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d107      	bne.n	800b004 <getSoundData+0x38>
 800aff4:	4b58      	ldr	r3, [pc, #352]	@ (800b158 <getSoundData+0x18c>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2201      	movs	r2, #1
 800affc:	4053      	eors	r3, r2
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <getSoundData+0x3c>
    {
        return false;
 800b004:	2300      	movs	r3, #0
 800b006:	e0a0      	b.n	800b14a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800b008:	4b54      	ldr	r3, [pc, #336]	@ (800b15c <getSoundData+0x190>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b012:	4b53      	ldr	r3, [pc, #332]	@ (800b160 <getSoundData+0x194>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	b25b      	sxtb	r3, r3
 800b018:	0018      	movs	r0, r3
 800b01a:	f7ff ffb5 	bl	800af88 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800b01e:	f3bf 8f4f 	dsb	sy
}
 800b022:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b024:	f3bf 8f6f 	isb	sy
}
 800b028:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800b02a:	1cfb      	adds	r3, r7, #3
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d04c      	beq.n	800b0cc <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800b032:	4b4c      	ldr	r3, [pc, #304]	@ (800b164 <getSoundData+0x198>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d11b      	bne.n	800b072 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]
 800b04a:	e00e      	b.n	800b06a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	18d3      	adds	r3, r2, r3
 800b052:	3302      	adds	r3, #2
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	18d3      	adds	r3, r2, r3
 800b05e:	3308      	adds	r3, #8
 800b060:	2200      	movs	r2, #0
 800b062:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3301      	adds	r3, #1
 800b068:	617b      	str	r3, [r7, #20]
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b05      	cmp	r3, #5
 800b06e:	d9ed      	bls.n	800b04c <getSoundData+0x80>
 800b070:	e02c      	b.n	800b0cc <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	1c59      	adds	r1, r3, #1
 800b078:	4b3b      	ldr	r3, [pc, #236]	@ (800b168 <getSoundData+0x19c>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	4b3b      	ldr	r3, [pc, #236]	@ (800b16c <getSoundData+0x1a0>)
 800b07e:	681c      	ldr	r4, [r3, #0]
 800b080:	4b38      	ldr	r3, [pc, #224]	@ (800b164 <getSoundData+0x198>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	0023      	movs	r3, r4
 800b088:	f000 fde8 	bl	800bc5c <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b08c:	2300      	movs	r3, #0
 800b08e:	613b      	str	r3, [r7, #16]
 800b090:	e019      	b.n	800b0c6 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	18d3      	adds	r3, r2, r3
 800b098:	1c98      	adds	r0, r3, #2
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	3308      	adds	r3, #8
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800b0a2:	4b33      	ldr	r3, [pc, #204]	@ (800b170 <getSoundData+0x1a4>)
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	0092      	lsls	r2, r2, #2
 800b0a8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800b0aa:	4b32      	ldr	r3, [pc, #200]	@ (800b174 <getSoundData+0x1a8>)
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	0092      	lsls	r2, r2, #2
 800b0b0:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b0b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b164 <getSoundData+0x198>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	0013      	movs	r3, r2
 800b0ba:	0022      	movs	r2, r4
 800b0bc:	f000 fdce 	bl	800bc5c <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	613b      	str	r3, [r7, #16]
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	2b05      	cmp	r3, #5
 800b0ca:	d9e2      	bls.n	800b092 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800b0cc:	1cbb      	adds	r3, r7, #2
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d028      	beq.n	800b126 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800b0d4:	240e      	movs	r4, #14
 800b0d6:	193b      	adds	r3, r7, r4
 800b0d8:	2200      	movs	r2, #0
 800b0da:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800b0dc:	250d      	movs	r5, #13
 800b0de:	197b      	adds	r3, r7, r5
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800b0e4:	4b24      	ldr	r3, [pc, #144]	@ (800b178 <getSoundData+0x1ac>)
 800b0e6:	6818      	ldr	r0, [r3, #0]
 800b0e8:	4924      	ldr	r1, [pc, #144]	@ (800b17c <getSoundData+0x1b0>)
 800b0ea:	197b      	adds	r3, r7, r5
 800b0ec:	193a      	adds	r2, r7, r4
 800b0ee:	f000 fe59 	bl	800bda4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800b0f2:	193b      	adds	r3, r7, r4
 800b0f4:	881a      	ldrh	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	21ff      	movs	r1, #255	@ 0xff
 800b0fa:	4011      	ands	r1, r2
 800b0fc:	000c      	movs	r4, r1
 800b0fe:	7b99      	ldrb	r1, [r3, #14]
 800b100:	2000      	movs	r0, #0
 800b102:	4001      	ands	r1, r0
 800b104:	1c08      	adds	r0, r1, #0
 800b106:	1c21      	adds	r1, r4, #0
 800b108:	4301      	orrs	r1, r0
 800b10a:	7399      	strb	r1, [r3, #14]
 800b10c:	0a12      	lsrs	r2, r2, #8
 800b10e:	b290      	uxth	r0, r2
 800b110:	7bda      	ldrb	r2, [r3, #15]
 800b112:	2100      	movs	r1, #0
 800b114:	400a      	ands	r2, r1
 800b116:	1c11      	adds	r1, r2, #0
 800b118:	1c02      	adds	r2, r0, #0
 800b11a:	430a      	orrs	r2, r1
 800b11c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800b11e:	197b      	adds	r3, r7, r5
 800b120:	781a      	ldrb	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800b126:	f000 f86f 	bl	800b208 <micSettlingComplete>
 800b12a:	0003      	movs	r3, r0
 800b12c:	001a      	movs	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800b132:	4b0a      	ldr	r3, [pc, #40]	@ (800b15c <getSoundData+0x190>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d005      	beq.n	800b148 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b13c:	4b08      	ldr	r3, [pc, #32]	@ (800b160 <getSoundData+0x194>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b25b      	sxtb	r3, r3
 800b142:	0018      	movs	r0, r3
 800b144:	f7ff ff06 	bl	800af54 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800b148:	2301      	movs	r3, #1
}
 800b14a:	0018      	movs	r0, r3
 800b14c:	46bd      	mov	sp, r7
 800b14e:	b006      	add	sp, #24
 800b150:	bdb0      	pop	{r4, r5, r7, pc}
 800b152:	46c0      	nop			@ (mov r8, r8)
 800b154:	200012c5 	.word	0x200012c5
 800b158:	200012c8 	.word	0x200012c8
 800b15c:	200012c7 	.word	0x200012c7
 800b160:	20001d18 	.word	0x20001d18
 800b164:	20001d54 	.word	0x20001d54
 800b168:	20001d1c 	.word	0x20001d1c
 800b16c:	20001d20 	.word	0x20001d20
 800b170:	20001d24 	.word	0x20001d24
 800b174:	20001d3c 	.word	0x20001d3c
 800b178:	200012d0 	.word	0x200012d0
 800b17c:	3b5c7333 	.word	0x3b5c7333

0800b180 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	001a      	movs	r2, r3
 800b18e:	1cfb      	adds	r3, r7, #3
 800b190:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800b192:	4b09      	ldr	r3, [pc, #36]	@ (800b1b8 <soundInit+0x38>)
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800b198:	4b08      	ldr	r3, [pc, #32]	@ (800b1bc <soundInit+0x3c>)
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800b19e:	4b08      	ldr	r3, [pc, #32]	@ (800b1c0 <soundInit+0x40>)
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800b1a4:	4b07      	ldr	r3, [pc, #28]	@ (800b1c4 <soundInit+0x44>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	569a      	ldrsb	r2, [r3, r2]
 800b1aa:	4b06      	ldr	r3, [pc, #24]	@ (800b1c4 <soundInit+0x44>)
 800b1ac:	701a      	strb	r2, [r3, #0]

    return true;
 800b1ae:	2301      	movs	r3, #1
}
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	b004      	add	sp, #16
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	20001d10 	.word	0x20001d10
 800b1bc:	20001d0c 	.word	0x20001d0c
 800b1c0:	20001d14 	.word	0x20001d14
 800b1c4:	20001d18 	.word	0x20001d18

0800b1c8 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800b1cc:	4b02      	ldr	r3, [pc, #8]	@ (800b1d8 <clearMaximumAmplitude+0x10>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]
}
 800b1d2:	46c0      	nop			@ (mov r8, r8)
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200012d0 	.word	0x200012d0

0800b1dc <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800b1e0:	4b08      	ldr	r3, [pc, #32]	@ (800b204 <startMicSettlingPeriod+0x28>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800b1ea:	4b06      	ldr	r3, [pc, #24]	@ (800b204 <startMicSettlingPeriod+0x28>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	f009 fde0 	bl	8014db4 <HAL_TIM_Base_Start>
 800b1f4:	1e03      	subs	r3, r0, #0
 800b1f6:	d001      	beq.n	800b1fc <startMicSettlingPeriod+0x20>
    {
        return false;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e000      	b.n	800b1fe <startMicSettlingPeriod+0x22>
    }
    return true;
 800b1fc:	2301      	movs	r3, #1
}
 800b1fe:	0018      	movs	r0, r3
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20001d0c 	.word	0x20001d0c

0800b208 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800b20e:	4b0e      	ldr	r3, [pc, #56]	@ (800b248 <micSettlingComplete+0x40>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	2201      	movs	r2, #1
 800b218:	401a      	ands	r2, r3
 800b21a:	1dfb      	adds	r3, r7, #7
 800b21c:	3a01      	subs	r2, #1
 800b21e:	4251      	negs	r1, r2
 800b220:	414a      	adcs	r2, r1
 800b222:	701a      	strb	r2, [r3, #0]
    if (complete)
 800b224:	1dfb      	adds	r3, r7, #7
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d007      	beq.n	800b23c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800b22c:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <micSettlingComplete+0x40>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	0018      	movs	r0, r3
 800b232:	f009 fe09 	bl	8014e48 <HAL_TIM_Base_Stop>
      DataReady = true;
 800b236:	4b05      	ldr	r3, [pc, #20]	@ (800b24c <micSettlingComplete+0x44>)
 800b238:	2201      	movs	r2, #1
 800b23a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800b23c:	1dfb      	adds	r3, r7, #7
 800b23e:	781b      	ldrb	r3, [r3, #0]
}
 800b240:	0018      	movs	r0, r3
 800b242:	46bd      	mov	sp, r7
 800b244:	b002      	add	sp, #8
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20001d0c 	.word	0x20001d0c
 800b24c:	200012c4 	.word	0x200012c4

0800b250 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	0002      	movs	r2, r0
 800b258:	1dfb      	adds	r3, r7, #7
 800b25a:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800b25c:	4b29      	ldr	r3, [pc, #164]	@ (800b304 <enableMicrophone+0xb4>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	1dfa      	adds	r2, r7, #7
 800b264:	7812      	ldrb	r2, [r2, #0]
 800b266:	429a      	cmp	r2, r3
 800b268:	d101      	bne.n	800b26e <enableMicrophone+0x1e>
    {
        return true;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e045      	b.n	800b2fa <enableMicrophone+0xaa>
    }
    if (bEnable)
 800b26e:	1dfb      	adds	r3, r7, #7
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d025      	beq.n	800b2c2 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800b276:	f7ff ffb1 	bl	800b1dc <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800b27a:	4b23      	ldr	r3, [pc, #140]	@ (800b308 <enableMicrophone+0xb8>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2280      	movs	r2, #128	@ 0x80
 800b280:	0092      	lsls	r2, r2, #2
 800b282:	4922      	ldr	r1, [pc, #136]	@ (800b30c <enableMicrophone+0xbc>)
 800b284:	0018      	movs	r0, r3
 800b286:	f006 f975 	bl	8011574 <HAL_I2S_Receive_DMA>
 800b28a:	1e03      	subs	r3, r0, #0
 800b28c:	d001      	beq.n	800b292 <enableMicrophone+0x42>
        {
            return false;
 800b28e:	2300      	movs	r3, #0
 800b290:	e033      	b.n	800b2fa <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800b292:	f7ff ff99 	bl	800b1c8 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800b296:	4b1e      	ldr	r3, [pc, #120]	@ (800b310 <enableMicrophone+0xc0>)
 800b298:	2200      	movs	r2, #0
 800b29a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b29c:	4b1d      	ldr	r3, [pc, #116]	@ (800b314 <enableMicrophone+0xc4>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	b25b      	sxtb	r3, r3
 800b2a2:	0018      	movs	r0, r3
 800b2a4:	f7ff fe56 	bl	800af54 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800b2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b318 <enableMicrophone+0xc8>)
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800b2ae:	4b15      	ldr	r3, [pc, #84]	@ (800b304 <enableMicrophone+0xb4>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b2b4:	4b19      	ldr	r3, [pc, #100]	@ (800b31c <enableMicrophone+0xcc>)
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b2ba:	4b19      	ldr	r3, [pc, #100]	@ (800b320 <enableMicrophone+0xd0>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	e01a      	b.n	800b2f8 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b2c2:	4b14      	ldr	r3, [pc, #80]	@ (800b314 <enableMicrophone+0xc4>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	b25b      	sxtb	r3, r3
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f7ff fe5d 	bl	800af88 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800b2ce:	4b12      	ldr	r3, [pc, #72]	@ (800b318 <enableMicrophone+0xc8>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b2d4:	4b11      	ldr	r3, [pc, #68]	@ (800b31c <enableMicrophone+0xcc>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b2da:	4b11      	ldr	r3, [pc, #68]	@ (800b320 <enableMicrophone+0xd0>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800b2e0:	4b09      	ldr	r3, [pc, #36]	@ (800b308 <enableMicrophone+0xb8>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f006 fa07 	bl	80116f8 <HAL_I2S_DMAStop>
 800b2ea:	1e03      	subs	r3, r0, #0
 800b2ec:	d001      	beq.n	800b2f2 <enableMicrophone+0xa2>
        {
            return false;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e003      	b.n	800b2fa <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800b2f2:	4b04      	ldr	r3, [pc, #16]	@ (800b304 <enableMicrophone+0xb4>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800b2f8:	2301      	movs	r3, #1
}
 800b2fa:	0018      	movs	r0, r3
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	b002      	add	sp, #8
 800b300:	bd80      	pop	{r7, pc}
 800b302:	46c0      	nop			@ (mov r8, r8)
 800b304:	200012c5 	.word	0x200012c5
 800b308:	20001d10 	.word	0x20001d10
 800b30c:	2000130c 	.word	0x2000130c
 800b310:	200012cc 	.word	0x200012cc
 800b314:	20001d18 	.word	0x20001d18
 800b318:	200012c7 	.word	0x200012c7
 800b31c:	200012c6 	.word	0x200012c6
 800b320:	200012c8 	.word	0x200012c8

0800b324 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800b328:	4b0c      	ldr	r3, [pc, #48]	@ (800b35c <startSPLcalculation+0x38>)
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2201      	movs	r2, #1
 800b330:	4053      	eors	r3, r2
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <startSPLcalculation+0x18>
    {
        return false;
 800b338:	2300      	movs	r3, #0
 800b33a:	e00c      	b.n	800b356 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800b33c:	4b08      	ldr	r3, [pc, #32]	@ (800b360 <startSPLcalculation+0x3c>)
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <startSPLcalculation+0x26>
    {
        return true;
 800b346:	2301      	movs	r3, #1
 800b348:	e005      	b.n	800b356 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800b34a:	f000 fb63 	bl	800ba14 <resetSPLstate>
    SPLcalcEnabled = true;
 800b34e:	4b04      	ldr	r3, [pc, #16]	@ (800b360 <startSPLcalculation+0x3c>)
 800b350:	2201      	movs	r2, #1
 800b352:	701a      	strb	r2, [r3, #0]
    return true;
 800b354:	2301      	movs	r3, #1
}
 800b356:	0018      	movs	r0, r3
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	200012c5 	.word	0x200012c5
 800b360:	200012c6 	.word	0x200012c6

0800b364 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b36c:	4b05      	ldr	r3, [pc, #20]	@ (800b384 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	429a      	cmp	r2, r3
 800b374:	d102      	bne.n	800b37c <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800b376:	2000      	movs	r0, #0
 800b378:	f000 f81a 	bl	800b3b0 <processHalfDMAbuffer>
  }
}
 800b37c:	46c0      	nop			@ (mov r8, r8)
 800b37e:	46bd      	mov	sp, r7
 800b380:	b002      	add	sp, #8
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20001d10 	.word	0x20001d10

0800b388 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b390:	4b06      	ldr	r3, [pc, #24]	@ (800b3ac <HAL_I2S_RxCpltCallback+0x24>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	429a      	cmp	r2, r3
 800b398:	d104      	bne.n	800b3a4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800b39a:	2380      	movs	r3, #128	@ 0x80
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	0018      	movs	r0, r3
 800b3a0:	f000 f806 	bl	800b3b0 <processHalfDMAbuffer>
  }
}
 800b3a4:	46c0      	nop			@ (mov r8, r8)
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	b002      	add	sp, #8
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	20001d10 	.word	0x20001d10

0800b3b0 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	005a      	lsls	r2, r3, #1
 800b3bc:	4b15      	ldr	r3, [pc, #84]	@ (800b414 <processHalfDMAbuffer+0x64>)
 800b3be:	18d3      	adds	r3, r2, r3
 800b3c0:	4a15      	ldr	r2, [pc, #84]	@ (800b418 <processHalfDMAbuffer+0x68>)
 800b3c2:	2180      	movs	r1, #128	@ 0x80
 800b3c4:	0089      	lsls	r1, r1, #2
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f000 fd35 	bl	800be36 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800b3cc:	4b13      	ldr	r3, [pc, #76]	@ (800b41c <processHalfDMAbuffer+0x6c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	425a      	negs	r2, r3
 800b3d2:	4153      	adcs	r3, r2
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <processHalfDMAbuffer+0x6c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2109      	movs	r1, #9
 800b3dc:	4299      	cmp	r1, r3
 800b3de:	419b      	sbcs	r3, r3
 800b3e0:	425b      	negs	r3, r3
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	480c      	ldr	r0, [pc, #48]	@ (800b418 <processHalfDMAbuffer+0x68>)
 800b3e6:	2180      	movs	r1, #128	@ 0x80
 800b3e8:	f000 fb46 	bl	800ba78 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b41c <processHalfDMAbuffer+0x6c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b09      	cmp	r3, #9
 800b3f2:	d804      	bhi.n	800b3fe <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800b3f4:	4b09      	ldr	r3, [pc, #36]	@ (800b41c <processHalfDMAbuffer+0x6c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	4b08      	ldr	r3, [pc, #32]	@ (800b41c <processHalfDMAbuffer+0x6c>)
 800b3fc:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800b3fe:	4b08      	ldr	r3, [pc, #32]	@ (800b420 <processHalfDMAbuffer+0x70>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	2b00      	cmp	r3, #0
 800b406:	d001      	beq.n	800b40c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800b408:	f000 f826 	bl	800b458 <calculateSPLQ31>
    }
}
 800b40c:	46c0      	nop			@ (mov r8, r8)
 800b40e:	46bd      	mov	sp, r7
 800b410:	b002      	add	sp, #8
 800b412:	bd80      	pop	{r7, pc}
 800b414:	2000130c 	.word	0x2000130c
 800b418:	20001b0c 	.word	0x20001b0c
 800b41c:	200012cc 	.word	0x200012cc
 800b420:	200012c6 	.word	0x200012c6

0800b424 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b42c:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <HAL_I2S_ErrorCallback+0x28>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d106      	bne.n	800b444 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800b436:	4a06      	ldr	r2, [pc, #24]	@ (800b450 <HAL_I2S_ErrorCallback+0x2c>)
 800b438:	239f      	movs	r3, #159	@ 0x9f
 800b43a:	0059      	lsls	r1, r3, #1
 800b43c:	4b05      	ldr	r3, [pc, #20]	@ (800b454 <HAL_I2S_ErrorCallback+0x30>)
 800b43e:	0018      	movs	r0, r3
 800b440:	f001 fdd0 	bl	800cfe4 <errorHandler>
  }
}
 800b444:	46c0      	nop			@ (mov r8, r8)
 800b446:	46bd      	mov	sp, r7
 800b448:	b002      	add	sp, #8
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20001d10 	.word	0x20001d10
 800b450:	08022cb0 	.word	0x08022cb0
 800b454:	0802332c 	.word	0x0802332c

0800b458 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800b458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45a:	b0b3      	sub	sp, #204	@ 0xcc
 800b45c:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800b45e:	4ae2      	ldr	r2, [pc, #904]	@ (800b7e8 <calculateSPLQ31+0x390>)
 800b460:	2338      	movs	r3, #56	@ 0x38
 800b462:	2030      	movs	r0, #48	@ 0x30
 800b464:	181b      	adds	r3, r3, r0
 800b466:	19d9      	adds	r1, r3, r7
 800b468:	2334      	movs	r3, #52	@ 0x34
 800b46a:	181b      	adds	r3, r3, r0
 800b46c:	19d8      	adds	r0, r3, r7
 800b46e:	2380      	movs	r3, #128	@ 0x80
 800b470:	f000 fc36 	bl	800bce0 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800b474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b476:	2b00      	cmp	r3, #0
 800b478:	da00      	bge.n	800b47c <calculateSPLQ31+0x24>
 800b47a:	3301      	adds	r3, #1
 800b47c:	105b      	asrs	r3, r3, #1
 800b47e:	001a      	movs	r2, r3
 800b480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b482:	2b00      	cmp	r3, #0
 800b484:	da00      	bge.n	800b488 <calculateSPLQ31+0x30>
 800b486:	3301      	adds	r3, #1
 800b488:	105b      	asrs	r3, r3, #1
 800b48a:	18d3      	adds	r3, r2, r3
 800b48c:	2188      	movs	r1, #136	@ 0x88
 800b48e:	187a      	adds	r2, r7, r1
 800b490:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800b492:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b494:	187b      	adds	r3, r7, r1
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	3304      	adds	r3, #4
 800b49c:	2284      	movs	r2, #132	@ 0x84
 800b49e:	18b9      	adds	r1, r7, r2
 800b4a0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800b4a2:	18bb      	adds	r3, r7, r2
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4ad1      	ldr	r2, [pc, #836]	@ (800b7ec <calculateSPLQ31+0x394>)
 800b4a8:	0019      	movs	r1, r3
 800b4aa:	0010      	movs	r0, r2
 800b4ac:	f000 fc58 	bl	800bd60 <getPo2factor>
 800b4b0:	0003      	movs	r3, r0
 800b4b2:	2280      	movs	r2, #128	@ 0x80
 800b4b4:	18ba      	adds	r2, r7, r2
 800b4b6:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	2284      	movs	r2, #132	@ 0x84
 800b4bc:	2130      	movs	r1, #48	@ 0x30
 800b4be:	1852      	adds	r2, r2, r1
 800b4c0:	19d2      	adds	r2, r2, r7
 800b4c2:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2280      	movs	r2, #128	@ 0x80
 800b4c8:	1852      	adds	r2, r2, r1
 800b4ca:	19d2      	adds	r2, r2, r7
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	e032      	b.n	800b536 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800b4d0:	4ac5      	ldr	r2, [pc, #788]	@ (800b7e8 <calculateSPLQ31+0x390>)
 800b4d2:	2680      	movs	r6, #128	@ 0x80
 800b4d4:	2330      	movs	r3, #48	@ 0x30
 800b4d6:	18f1      	adds	r1, r6, r3
 800b4d8:	19cb      	adds	r3, r1, r7
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	589a      	ldr	r2, [r3, r2]
 800b4e0:	2188      	movs	r1, #136	@ 0x88
 800b4e2:	1879      	adds	r1, r7, r1
 800b4e4:	680b      	ldr	r3, [r1, #0]
 800b4e6:	1ad2      	subs	r2, r2, r3
 800b4e8:	2180      	movs	r1, #128	@ 0x80
 800b4ea:	1879      	adds	r1, r7, r1
 800b4ec:	680b      	ldr	r3, [r1, #0]
 800b4ee:	409a      	lsls	r2, r3
 800b4f0:	0011      	movs	r1, r2
 800b4f2:	4abf      	ldr	r2, [pc, #764]	@ (800b7f0 <calculateSPLQ31+0x398>)
 800b4f4:	2084      	movs	r0, #132	@ 0x84
 800b4f6:	2330      	movs	r3, #48	@ 0x30
 800b4f8:	18c3      	adds	r3, r0, r3
 800b4fa:	19db      	adds	r3, r3, r7
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800b502:	2230      	movs	r2, #48	@ 0x30
 800b504:	1883      	adds	r3, r0, r2
 800b506:	19db      	adds	r3, r3, r7
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	49b8      	ldr	r1, [pc, #736]	@ (800b7f0 <calculateSPLQ31+0x398>)
 800b50e:	009a      	lsls	r2, r3, #2
 800b510:	2300      	movs	r3, #0
 800b512:	5053      	str	r3, [r2, r1]
        count += 2;
 800b514:	2230      	movs	r2, #48	@ 0x30
 800b516:	1883      	adds	r3, r0, r2
 800b518:	19db      	adds	r3, r3, r7
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3302      	adds	r3, #2
 800b51e:	0011      	movs	r1, r2
 800b520:	1882      	adds	r2, r0, r2
 800b522:	19d2      	adds	r2, r2, r7
 800b524:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800b526:	000a      	movs	r2, r1
 800b528:	18b3      	adds	r3, r6, r2
 800b52a:	19db      	adds	r3, r3, r7
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	18b2      	adds	r2, r6, r2
 800b532:	19d2      	adds	r2, r2, r7
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	2380      	movs	r3, #128	@ 0x80
 800b538:	2630      	movs	r6, #48	@ 0x30
 800b53a:	199b      	adds	r3, r3, r6
 800b53c:	19db      	adds	r3, r3, r7
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b7f      	cmp	r3, #127	@ 0x7f
 800b542:	d9c5      	bls.n	800b4d0 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800b544:	4bab      	ldr	r3, [pc, #684]	@ (800b7f4 <calculateSPLQ31+0x39c>)
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	49a9      	ldr	r1, [pc, #676]	@ (800b7f0 <calculateSPLQ31+0x398>)
 800b54a:	2301      	movs	r3, #1
 800b54c:	2200      	movs	r2, #0
 800b54e:	f010 fcf7 	bl	801bf40 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800b552:	4aa9      	ldr	r2, [pc, #676]	@ (800b7f8 <calculateSPLQ31+0x3a0>)
 800b554:	2338      	movs	r3, #56	@ 0x38
 800b556:	199b      	adds	r3, r3, r6
 800b558:	19d9      	adds	r1, r3, r7
 800b55a:	2334      	movs	r3, #52	@ 0x34
 800b55c:	199b      	adds	r3, r3, r6
 800b55e:	19d8      	adds	r0, r3, r7
 800b560:	237e      	movs	r3, #126	@ 0x7e
 800b562:	f000 fbbd 	bl	800bce0 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800b566:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b568:	2380      	movs	r3, #128	@ 0x80
 800b56a:	061b      	lsls	r3, r3, #24
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d101      	bne.n	800b574 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800b570:	4b9e      	ldr	r3, [pc, #632]	@ (800b7ec <calculateSPLQ31+0x394>)
 800b572:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800b574:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b576:	2380      	movs	r3, #128	@ 0x80
 800b578:	061b      	lsls	r3, r3, #24
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d101      	bne.n	800b582 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800b57e:	4b9b      	ldr	r3, [pc, #620]	@ (800b7ec <calculateSPLQ31+0x394>)
 800b580:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800b582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b584:	17da      	asrs	r2, r3, #31
 800b586:	189b      	adds	r3, r3, r2
 800b588:	4053      	eors	r3, r2
 800b58a:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800b58c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b58e:	17da      	asrs	r2, r3, #31
 800b590:	189b      	adds	r3, r3, r2
 800b592:	4053      	eors	r3, r2
 800b594:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800b596:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b59a:	429a      	cmp	r2, r3
 800b59c:	dd01      	ble.n	800b5a2 <calculateSPLQ31+0x14a>
    {
        max = min;
 800b59e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800b5a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800b5a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5aa:	4a90      	ldr	r2, [pc, #576]	@ (800b7ec <calculateSPLQ31+0x394>)
 800b5ac:	0019      	movs	r1, r3
 800b5ae:	0010      	movs	r0, r2
 800b5b0:	f000 fbd6 	bl	800bd60 <getPo2factor>
 800b5b4:	0003      	movs	r3, r0
 800b5b6:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	22ac      	movs	r2, #172	@ 0xac
 800b5bc:	18ba      	adds	r2, r7, r2
 800b5be:	6013      	str	r3, [r2, #0]
 800b5c0:	e012      	b.n	800b5e8 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800b5c2:	4a8b      	ldr	r2, [pc, #556]	@ (800b7f0 <calculateSPLQ31+0x398>)
 800b5c4:	20ac      	movs	r0, #172	@ 0xac
 800b5c6:	183b      	adds	r3, r7, r0
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	589a      	ldr	r2, [r3, r2]
 800b5ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5d0:	409a      	lsls	r2, r3
 800b5d2:	0011      	movs	r1, r2
 800b5d4:	4a86      	ldr	r2, [pc, #536]	@ (800b7f0 <calculateSPLQ31+0x398>)
 800b5d6:	183b      	adds	r3, r7, r0
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800b5de:	183b      	adds	r3, r7, r0
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	183a      	adds	r2, r7, r0
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	23ac      	movs	r3, #172	@ 0xac
 800b5ea:	18fb      	adds	r3, r7, r3
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5f0:	d9e7      	bls.n	800b5c2 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800b5f2:	4b7d      	ldr	r3, [pc, #500]	@ (800b7e8 <calculateSPLQ31+0x390>)
 800b5f4:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800b5f6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800b5f8:	4b7d      	ldr	r3, [pc, #500]	@ (800b7f0 <calculateSPLQ31+0x398>)
 800b5fa:	2240      	movs	r2, #64	@ 0x40
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	f011 fa49 	bl	801ca94 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800b602:	2330      	movs	r3, #48	@ 0x30
 800b604:	18fb      	adds	r3, r7, r3
 800b606:	0018      	movs	r0, r3
 800b608:	2330      	movs	r3, #48	@ 0x30
 800b60a:	001a      	movs	r2, r3
 800b60c:	2100      	movs	r1, #0
 800b60e:	f013 f865 	bl	801e6dc <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800b612:	2200      	movs	r2, #0
 800b614:	2300      	movs	r3, #0
 800b616:	21a0      	movs	r1, #160	@ 0xa0
 800b618:	1879      	adds	r1, r7, r1
 800b61a:	600a      	str	r2, [r1, #0]
 800b61c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800b61e:	2301      	movs	r3, #1
 800b620:	229c      	movs	r2, #156	@ 0x9c
 800b622:	18ba      	adds	r2, r7, r2
 800b624:	6013      	str	r3, [r2, #0]
 800b626:	e05b      	b.n	800b6e0 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800b628:	269c      	movs	r6, #156	@ 0x9c
 800b62a:	19bb      	adds	r3, r7, r6
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	009a      	lsls	r2, r3, #2
 800b630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b632:	189b      	adds	r3, r3, r2
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	613b      	str	r3, [r7, #16]
 800b638:	17db      	asrs	r3, r3, #31
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	4b6f      	ldr	r3, [pc, #444]	@ (800b7fc <calculateSPLQ31+0x3a4>)
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	19bb      	adds	r3, r7, r6
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	18d3      	adds	r3, r2, r3
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	60bb      	str	r3, [r7, #8]
 800b64c:	2300      	movs	r3, #0
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6938      	ldr	r0, [r7, #16]
 800b656:	6979      	ldr	r1, [r7, #20]
 800b658:	f7f4 ffb2 	bl	80005c0 <__aeabi_lmul>
 800b65c:	0002      	movs	r2, r0
 800b65e:	000b      	movs	r3, r1
 800b660:	0010      	movs	r0, r2
 800b662:	0019      	movs	r1, r3
 800b664:	23a0      	movs	r3, #160	@ 0xa0
 800b666:	18fa      	adds	r2, r7, r3
 800b668:	6853      	ldr	r3, [r2, #4]
 800b66a:	6812      	ldr	r2, [r2, #0]
 800b66c:	1812      	adds	r2, r2, r0
 800b66e:	414b      	adcs	r3, r1
 800b670:	21a0      	movs	r1, #160	@ 0xa0
 800b672:	1879      	adds	r1, r7, r1
 800b674:	600a      	str	r2, [r1, #0]
 800b676:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800b678:	4b61      	ldr	r3, [pc, #388]	@ (800b800 <calculateSPLQ31+0x3a8>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	19bb      	adds	r3, r7, r6
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	18d3      	adds	r3, r2, r3
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b06      	cmp	r3, #6
 800b686:	d025      	beq.n	800b6d4 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800b688:	4b5d      	ldr	r3, [pc, #372]	@ (800b800 <calculateSPLQ31+0x3a8>)
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	19bb      	adds	r3, r7, r6
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	18d3      	adds	r3, r2, r3
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	2230      	movs	r2, #48	@ 0x30
 800b696:	18ba      	adds	r2, r7, r2
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	18d3      	adds	r3, r2, r3
 800b69c:	6818      	ldr	r0, [r3, #0]
 800b69e:	6859      	ldr	r1, [r3, #4]
 800b6a0:	19bb      	adds	r3, r7, r6
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	009a      	lsls	r2, r3, #2
 800b6a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6a8:	189b      	adds	r3, r3, r2
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	603b      	str	r3, [r7, #0]
 800b6ae:	17db      	asrs	r3, r3, #31
 800b6b0:	607b      	str	r3, [r7, #4]
 800b6b2:	4b53      	ldr	r3, [pc, #332]	@ (800b800 <calculateSPLQ31+0x3a8>)
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	19be      	adds	r6, r7, r6
 800b6b8:	6833      	ldr	r3, [r6, #0]
 800b6ba:	18d3      	adds	r3, r2, r3
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	001e      	movs	r6, r3
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	1880      	adds	r0, r0, r2
 800b6c6:	4159      	adcs	r1, r3
 800b6c8:	2330      	movs	r3, #48	@ 0x30
 800b6ca:	18fa      	adds	r2, r7, r3
 800b6cc:	00f3      	lsls	r3, r6, #3
 800b6ce:	18d3      	adds	r3, r2, r3
 800b6d0:	6018      	str	r0, [r3, #0]
 800b6d2:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800b6d4:	229c      	movs	r2, #156	@ 0x9c
 800b6d6:	18bb      	adds	r3, r7, r2
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	18ba      	adds	r2, r7, r2
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	239c      	movs	r3, #156	@ 0x9c
 800b6e2:	18fb      	adds	r3, r7, r3
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b3f      	cmp	r3, #63	@ 0x3f
 800b6e8:	d99e      	bls.n	800b628 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800b6ea:	2380      	movs	r3, #128	@ 0x80
 800b6ec:	18fb      	adds	r3, r7, r3
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	001a      	movs	r2, r3
 800b6f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6f6:	005b      	lsls	r3, r3, #1
 800b6f8:	18d3      	adds	r3, r2, r3
 800b6fa:	3b22      	subs	r3, #34	@ 0x22
 800b6fc:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800b6fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b700:	17da      	asrs	r2, r3, #31
 800b702:	189b      	adds	r3, r3, r2
 800b704:	4053      	eors	r3, r2
 800b706:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800b708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	da62      	bge.n	800b7d4 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800b70e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b710:	3b20      	subs	r3, #32
 800b712:	2b00      	cmp	r3, #0
 800b714:	db05      	blt.n	800b722 <calculateSPLQ31+0x2ca>
 800b716:	22a0      	movs	r2, #160	@ 0xa0
 800b718:	18ba      	adds	r2, r7, r2
 800b71a:	6812      	ldr	r2, [r2, #0]
 800b71c:	409a      	lsls	r2, r3
 800b71e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b720:	e010      	b.n	800b744 <calculateSPLQ31+0x2ec>
 800b722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b724:	2220      	movs	r2, #32
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	22a0      	movs	r2, #160	@ 0xa0
 800b72a:	18ba      	adds	r2, r7, r2
 800b72c:	6812      	ldr	r2, [r2, #0]
 800b72e:	40da      	lsrs	r2, r3
 800b730:	0013      	movs	r3, r2
 800b732:	22a4      	movs	r2, #164	@ 0xa4
 800b734:	18ba      	adds	r2, r7, r2
 800b736:	6811      	ldr	r1, [r2, #0]
 800b738:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b73a:	4091      	lsls	r1, r2
 800b73c:	6279      	str	r1, [r7, #36]	@ 0x24
 800b73e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b740:	431a      	orrs	r2, r3
 800b742:	627a      	str	r2, [r7, #36]	@ 0x24
 800b744:	21a0      	movs	r1, #160	@ 0xa0
 800b746:	187b      	adds	r3, r7, r1
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b74c:	409a      	lsls	r2, r3
 800b74e:	623a      	str	r2, [r7, #32]
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800b754:	187a      	adds	r2, r7, r1
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b75a:	2300      	movs	r3, #0
 800b75c:	2298      	movs	r2, #152	@ 0x98
 800b75e:	18ba      	adds	r2, r7, r2
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	e031      	b.n	800b7c8 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800b764:	2330      	movs	r3, #48	@ 0x30
 800b766:	18fa      	adds	r2, r7, r3
 800b768:	2398      	movs	r3, #152	@ 0x98
 800b76a:	18fb      	adds	r3, r7, r3
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	18d3      	adds	r3, r2, r3
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b778:	3920      	subs	r1, #32
 800b77a:	2900      	cmp	r1, #0
 800b77c:	db03      	blt.n	800b786 <calculateSPLQ31+0x32e>
 800b77e:	0010      	movs	r0, r2
 800b780:	4088      	lsls	r0, r1
 800b782:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b784:	e00c      	b.n	800b7a0 <calculateSPLQ31+0x348>
 800b786:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b788:	2020      	movs	r0, #32
 800b78a:	1a41      	subs	r1, r0, r1
 800b78c:	0010      	movs	r0, r2
 800b78e:	40c8      	lsrs	r0, r1
 800b790:	0001      	movs	r1, r0
 800b792:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b794:	001c      	movs	r4, r3
 800b796:	4084      	lsls	r4, r0
 800b798:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800b79a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b79c:	4308      	orrs	r0, r1
 800b79e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b7a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b7a2:	0013      	movs	r3, r2
 800b7a4:	408b      	lsls	r3, r1
 800b7a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7a8:	2330      	movs	r3, #48	@ 0x30
 800b7aa:	18fa      	adds	r2, r7, r3
 800b7ac:	2098      	movs	r0, #152	@ 0x98
 800b7ae:	183b      	adds	r3, r7, r0
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	00db      	lsls	r3, r3, #3
 800b7b4:	18d3      	adds	r3, r2, r3
 800b7b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7ba:	6019      	str	r1, [r3, #0]
 800b7bc:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b7be:	183b      	adds	r3, r7, r0
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	183a      	adds	r2, r7, r0
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	2398      	movs	r3, #152	@ 0x98
 800b7ca:	18fb      	adds	r3, r7, r3
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b05      	cmp	r3, #5
 800b7d0:	d9c8      	bls.n	800b764 <calculateSPLQ31+0x30c>
 800b7d2:	e06b      	b.n	800b8ac <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800b7d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7d6:	3b20      	subs	r3, #32
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	db13      	blt.n	800b804 <calculateSPLQ31+0x3ac>
 800b7dc:	22a4      	movs	r2, #164	@ 0xa4
 800b7de:	18ba      	adds	r2, r7, r2
 800b7e0:	6812      	ldr	r2, [r2, #0]
 800b7e2:	40da      	lsrs	r2, r3
 800b7e4:	61ba      	str	r2, [r7, #24]
 800b7e6:	e01e      	b.n	800b826 <calculateSPLQ31+0x3ce>
 800b7e8:	20001b0c 	.word	0x20001b0c
 800b7ec:	7fffffff 	.word	0x7fffffff
 800b7f0:	20001d58 	.word	0x20001d58
 800b7f4:	200000b4 	.word	0x200000b4
 800b7f8:	20001d60 	.word	0x20001d60
 800b7fc:	200000b8 	.word	0x200000b8
 800b800:	200000c4 	.word	0x200000c4
 800b804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b806:	2220      	movs	r2, #32
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	22a4      	movs	r2, #164	@ 0xa4
 800b80c:	18ba      	adds	r2, r7, r2
 800b80e:	6812      	ldr	r2, [r2, #0]
 800b810:	409a      	lsls	r2, r3
 800b812:	0013      	movs	r3, r2
 800b814:	22a0      	movs	r2, #160	@ 0xa0
 800b816:	18ba      	adds	r2, r7, r2
 800b818:	6811      	ldr	r1, [r2, #0]
 800b81a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b81c:	40d1      	lsrs	r1, r2
 800b81e:	61b9      	str	r1, [r7, #24]
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	431a      	orrs	r2, r3
 800b824:	61ba      	str	r2, [r7, #24]
 800b826:	23a4      	movs	r3, #164	@ 0xa4
 800b828:	18fb      	adds	r3, r7, r3
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b82e:	40da      	lsrs	r2, r3
 800b830:	61fa      	str	r2, [r7, #28]
 800b832:	69ba      	ldr	r2, [r7, #24]
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	21a0      	movs	r1, #160	@ 0xa0
 800b838:	1879      	adds	r1, r7, r1
 800b83a:	600a      	str	r2, [r1, #0]
 800b83c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b83e:	2300      	movs	r3, #0
 800b840:	2294      	movs	r2, #148	@ 0x94
 800b842:	18ba      	adds	r2, r7, r2
 800b844:	6013      	str	r3, [r2, #0]
 800b846:	e02c      	b.n	800b8a2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800b848:	2330      	movs	r3, #48	@ 0x30
 800b84a:	18fa      	adds	r2, r7, r3
 800b84c:	2394      	movs	r3, #148	@ 0x94
 800b84e:	18fb      	adds	r3, r7, r3
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	00db      	lsls	r3, r3, #3
 800b854:	18d3      	adds	r3, r2, r3
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b85c:	3920      	subs	r1, #32
 800b85e:	2900      	cmp	r1, #0
 800b860:	db03      	blt.n	800b86a <calculateSPLQ31+0x412>
 800b862:	0018      	movs	r0, r3
 800b864:	40c8      	lsrs	r0, r1
 800b866:	0004      	movs	r4, r0
 800b868:	e00a      	b.n	800b880 <calculateSPLQ31+0x428>
 800b86a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b86c:	2020      	movs	r0, #32
 800b86e:	1a41      	subs	r1, r0, r1
 800b870:	0018      	movs	r0, r3
 800b872:	4088      	lsls	r0, r1
 800b874:	0001      	movs	r1, r0
 800b876:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b878:	0016      	movs	r6, r2
 800b87a:	40c6      	lsrs	r6, r0
 800b87c:	0034      	movs	r4, r6
 800b87e:	430c      	orrs	r4, r1
 800b880:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b882:	40cb      	lsrs	r3, r1
 800b884:	001d      	movs	r5, r3
 800b886:	2330      	movs	r3, #48	@ 0x30
 800b888:	18fa      	adds	r2, r7, r3
 800b88a:	2194      	movs	r1, #148	@ 0x94
 800b88c:	187b      	adds	r3, r7, r1
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	00db      	lsls	r3, r3, #3
 800b892:	18d3      	adds	r3, r2, r3
 800b894:	601c      	str	r4, [r3, #0]
 800b896:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b898:	187b      	adds	r3, r7, r1
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3301      	adds	r3, #1
 800b89e:	187a      	adds	r2, r7, r1
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	2394      	movs	r3, #148	@ 0x94
 800b8a4:	18fb      	adds	r3, r7, r3
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b05      	cmp	r3, #5
 800b8aa:	d9cd      	bls.n	800b848 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800b8ac:	230f      	movs	r3, #15
 800b8ae:	425d      	negs	r5, r3
 800b8b0:	2305      	movs	r3, #5
 800b8b2:	425e      	negs	r6, r3
 800b8b4:	4b4a      	ldr	r3, [pc, #296]	@ (800b9e0 <calculateSPLQ31+0x588>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	4b4a      	ldr	r3, [pc, #296]	@ (800b9e4 <calculateSPLQ31+0x58c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	21a0      	movs	r1, #160	@ 0xa0
 800b8c2:	1879      	adds	r1, r7, r1
 800b8c4:	6808      	ldr	r0, [r1, #0]
 800b8c6:	6849      	ldr	r1, [r1, #4]
 800b8c8:	4c47      	ldr	r4, [pc, #284]	@ (800b9e8 <calculateSPLQ31+0x590>)
 800b8ca:	9403      	str	r4, [sp, #12]
 800b8cc:	4c47      	ldr	r4, [pc, #284]	@ (800b9ec <calculateSPLQ31+0x594>)
 800b8ce:	9402      	str	r4, [sp, #8]
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	9200      	str	r2, [sp, #0]
 800b8d4:	0033      	movs	r3, r6
 800b8d6:	002a      	movs	r2, r5
 800b8d8:	f000 fa86 	bl	800bde8 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	2290      	movs	r2, #144	@ 0x90
 800b8e0:	18ba      	adds	r2, r7, r2
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	e026      	b.n	800b934 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800b8e6:	2330      	movs	r3, #48	@ 0x30
 800b8e8:	18fa      	adds	r2, r7, r3
 800b8ea:	2490      	movs	r4, #144	@ 0x90
 800b8ec:	193b      	adds	r3, r7, r4
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	18d3      	adds	r3, r2, r3
 800b8f4:	6818      	ldr	r0, [r3, #0]
 800b8f6:	6859      	ldr	r1, [r3, #4]
 800b8f8:	230f      	movs	r3, #15
 800b8fa:	425d      	negs	r5, r3
 800b8fc:	2305      	movs	r3, #5
 800b8fe:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800b900:	193b      	adds	r3, r7, r4
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	009a      	lsls	r2, r3, #2
 800b906:	4b3a      	ldr	r3, [pc, #232]	@ (800b9f0 <calculateSPLQ31+0x598>)
 800b908:	18d3      	adds	r3, r2, r3
 800b90a:	193a      	adds	r2, r7, r4
 800b90c:	6812      	ldr	r2, [r2, #0]
 800b90e:	0094      	lsls	r4, r2, #2
 800b910:	4a38      	ldr	r2, [pc, #224]	@ (800b9f4 <calculateSPLQ31+0x59c>)
 800b912:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800b914:	9203      	str	r2, [sp, #12]
 800b916:	9302      	str	r3, [sp, #8]
 800b918:	2300      	movs	r3, #0
 800b91a:	9301      	str	r3, [sp, #4]
 800b91c:	2300      	movs	r3, #0
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	0033      	movs	r3, r6
 800b922:	002a      	movs	r2, r5
 800b924:	f000 fa60 	bl	800bde8 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b928:	2490      	movs	r4, #144	@ 0x90
 800b92a:	193b      	adds	r3, r7, r4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3301      	adds	r3, #1
 800b930:	193a      	adds	r2, r7, r4
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	2390      	movs	r3, #144	@ 0x90
 800b936:	18fb      	adds	r3, r7, r3
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b05      	cmp	r3, #5
 800b93c:	d9d3      	bls.n	800b8e6 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800b93e:	4b2b      	ldr	r3, [pc, #172]	@ (800b9ec <calculateSPLQ31+0x594>)
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b2d      	ldr	r3, [pc, #180]	@ (800b9f8 <calculateSPLQ31+0x5a0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	18d2      	adds	r2, r2, r3
 800b948:	4b2b      	ldr	r3, [pc, #172]	@ (800b9f8 <calculateSPLQ31+0x5a0>)
 800b94a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800b94c:	4b26      	ldr	r3, [pc, #152]	@ (800b9e8 <calculateSPLQ31+0x590>)
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	4b2a      	ldr	r3, [pc, #168]	@ (800b9fc <calculateSPLQ31+0x5a4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	18d2      	adds	r2, r2, r3
 800b956:	4b29      	ldr	r3, [pc, #164]	@ (800b9fc <calculateSPLQ31+0x5a4>)
 800b958:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b95a:	2300      	movs	r3, #0
 800b95c:	228c      	movs	r2, #140	@ 0x8c
 800b95e:	18ba      	adds	r2, r7, r2
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	e025      	b.n	800b9b0 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800b964:	4b22      	ldr	r3, [pc, #136]	@ (800b9f0 <calculateSPLQ31+0x598>)
 800b966:	208c      	movs	r0, #140	@ 0x8c
 800b968:	183a      	adds	r2, r7, r0
 800b96a:	6812      	ldr	r2, [r2, #0]
 800b96c:	0092      	lsls	r2, r2, #2
 800b96e:	58d2      	ldr	r2, [r2, r3]
 800b970:	4b23      	ldr	r3, [pc, #140]	@ (800ba00 <calculateSPLQ31+0x5a8>)
 800b972:	1839      	adds	r1, r7, r0
 800b974:	6809      	ldr	r1, [r1, #0]
 800b976:	0089      	lsls	r1, r1, #2
 800b978:	58cb      	ldr	r3, [r1, r3]
 800b97a:	18d1      	adds	r1, r2, r3
 800b97c:	4b20      	ldr	r3, [pc, #128]	@ (800ba00 <calculateSPLQ31+0x5a8>)
 800b97e:	183a      	adds	r2, r7, r0
 800b980:	6812      	ldr	r2, [r2, #0]
 800b982:	0092      	lsls	r2, r2, #2
 800b984:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800b986:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f4 <calculateSPLQ31+0x59c>)
 800b988:	183a      	adds	r2, r7, r0
 800b98a:	6812      	ldr	r2, [r2, #0]
 800b98c:	0092      	lsls	r2, r2, #2
 800b98e:	58d2      	ldr	r2, [r2, r3]
 800b990:	4b1c      	ldr	r3, [pc, #112]	@ (800ba04 <calculateSPLQ31+0x5ac>)
 800b992:	1839      	adds	r1, r7, r0
 800b994:	6809      	ldr	r1, [r1, #0]
 800b996:	0089      	lsls	r1, r1, #2
 800b998:	58cb      	ldr	r3, [r1, r3]
 800b99a:	18d1      	adds	r1, r2, r3
 800b99c:	4b19      	ldr	r3, [pc, #100]	@ (800ba04 <calculateSPLQ31+0x5ac>)
 800b99e:	183a      	adds	r2, r7, r0
 800b9a0:	6812      	ldr	r2, [r2, #0]
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b9a6:	183b      	adds	r3, r7, r0
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	183a      	adds	r2, r7, r0
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	238c      	movs	r3, #140	@ 0x8c
 800b9b2:	18fb      	adds	r3, r7, r3
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b05      	cmp	r3, #5
 800b9b8:	d9d4      	bls.n	800b964 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800b9ba:	4b13      	ldr	r3, [pc, #76]	@ (800ba08 <calculateSPLQ31+0x5b0>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	1c5a      	adds	r2, r3, #1
 800b9c0:	4b11      	ldr	r3, [pc, #68]	@ (800ba08 <calculateSPLQ31+0x5b0>)
 800b9c2:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800b9c4:	4b10      	ldr	r3, [pc, #64]	@ (800ba08 <calculateSPLQ31+0x5b0>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b0f      	cmp	r3, #15
 800b9ca:	d905      	bls.n	800b9d8 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800b9cc:	4b0f      	ldr	r3, [pc, #60]	@ (800ba0c <calculateSPLQ31+0x5b4>)
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b9d2:	4b0f      	ldr	r3, [pc, #60]	@ (800ba10 <calculateSPLQ31+0x5b8>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	701a      	strb	r2, [r3, #0]
    }
}
 800b9d8:	46c0      	nop			@ (mov r8, r8)
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	b02f      	add	sp, #188	@ 0xbc
 800b9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9e0:	200000bc 	.word	0x200000bc
 800b9e4:	200000c0 	.word	0x200000c0
 800b9e8:	200012d8 	.word	0x200012d8
 800b9ec:	200012d4 	.word	0x200012d4
 800b9f0:	200012dc 	.word	0x200012dc
 800b9f4:	200012f4 	.word	0x200012f4
 800b9f8:	20001d1c 	.word	0x20001d1c
 800b9fc:	20001d20 	.word	0x20001d20
 800ba00:	20001d24 	.word	0x20001d24
 800ba04:	20001d3c 	.word	0x20001d3c
 800ba08:	20001d54 	.word	0x20001d54
 800ba0c:	200012c8 	.word	0x200012c8
 800ba10:	200012c6 	.word	0x200012c6

0800ba14 <resetSPLstate>:

static void resetSPLstate(void)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800ba1a:	4b11      	ldr	r3, [pc, #68]	@ (800ba60 <resetSPLstate+0x4c>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800ba20:	4b10      	ldr	r3, [pc, #64]	@ (800ba64 <resetSPLstate+0x50>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800ba26:	4b10      	ldr	r3, [pc, #64]	@ (800ba68 <resetSPLstate+0x54>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	e00c      	b.n	800ba4c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800ba32:	4b0e      	ldr	r3, [pc, #56]	@ (800ba6c <resetSPLstate+0x58>)
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	0092      	lsls	r2, r2, #2
 800ba38:	2100      	movs	r1, #0
 800ba3a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800ba3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ba70 <resetSPLstate+0x5c>)
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	0092      	lsls	r2, r2, #2
 800ba42:	2100      	movs	r1, #0
 800ba44:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b05      	cmp	r3, #5
 800ba50:	d9ef      	bls.n	800ba32 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800ba52:	4b08      	ldr	r3, [pc, #32]	@ (800ba74 <resetSPLstate+0x60>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
}
 800ba58:	46c0      	nop			@ (mov r8, r8)
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	b002      	add	sp, #8
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	20001d1c 	.word	0x20001d1c
 800ba64:	20001d20 	.word	0x20001d20
 800ba68:	20001d54 	.word	0x20001d54
 800ba6c:	20001d24 	.word	0x20001d24
 800ba70:	20001d3c 	.word	0x20001d3c
 800ba74:	200012c8 	.word	0x200012c8

0800ba78 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800ba78:	b5b0      	push	{r4, r5, r7, lr}
 800ba7a:	b090      	sub	sp, #64	@ 0x40
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	0019      	movs	r1, r3
 800ba84:	1dfb      	adds	r3, r7, #7
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	1dbb      	adds	r3, r7, #6
 800ba8a:	1c0a      	adds	r2, r1, #0
 800ba8c:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800ba8e:	1dfb      	adds	r3, r7, #7
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d005      	beq.n	800baa2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800ba96:	4b3b      	ldr	r3, [pc, #236]	@ (800bb84 <getFilteredMaxAmplitudeQ31+0x10c>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800ba9c:	4b3a      	ldr	r3, [pc, #232]	@ (800bb88 <getFilteredMaxAmplitudeQ31+0x110>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800baaa:	2305      	movs	r3, #5
 800baac:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800baae:	2300      	movs	r3, #0
 800bab0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bab2:	e040      	b.n	800bb36 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800bab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	18d3      	adds	r3, r2, r3
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac0:	409a      	lsls	r2, r3
 800bac2:	0013      	movs	r3, r2
 800bac4:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800bac6:	4b30      	ldr	r3, [pc, #192]	@ (800bb88 <getFilteredMaxAmplitudeQ31+0x110>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	425a      	negs	r2, r3
 800bacc:	4b2e      	ldr	r3, [pc, #184]	@ (800bb88 <getFilteredMaxAmplitudeQ31+0x110>)
 800bace:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800bad0:	2418      	movs	r4, #24
 800bad2:	193a      	adds	r2, r7, r4
 800bad4:	492c      	ldr	r1, [pc, #176]	@ (800bb88 <getFilteredMaxAmplitudeQ31+0x110>)
 800bad6:	231c      	movs	r3, #28
 800bad8:	18f8      	adds	r0, r7, r3
 800bada:	2301      	movs	r3, #1
 800badc:	f011 f832 	bl	801cb44 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800bae0:	2514      	movs	r5, #20
 800bae2:	197a      	adds	r2, r7, r5
 800bae4:	1939      	adds	r1, r7, r4
 800bae6:	4829      	ldr	r0, [pc, #164]	@ (800bb8c <getFilteredMaxAmplitudeQ31+0x114>)
 800bae8:	2301      	movs	r3, #1
 800baea:	f010 fff9 	bl	801cae0 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800baee:	2410      	movs	r4, #16
 800baf0:	193a      	adds	r2, r7, r4
 800baf2:	4924      	ldr	r1, [pc, #144]	@ (800bb84 <getFilteredMaxAmplitudeQ31+0x10c>)
 800baf4:	4826      	ldr	r0, [pc, #152]	@ (800bb90 <getFilteredMaxAmplitudeQ31+0x118>)
 800baf6:	2301      	movs	r3, #1
 800baf8:	f010 fff2 	bl	801cae0 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800bafc:	4a21      	ldr	r2, [pc, #132]	@ (800bb84 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bafe:	1939      	adds	r1, r7, r4
 800bb00:	1978      	adds	r0, r7, r5
 800bb02:	2301      	movs	r3, #1
 800bb04:	f011 f81e 	bl	801cb44 <arm_add_q31>

        lastData = fx;
 800bb08:	69fa      	ldr	r2, [r7, #28]
 800bb0a:	4b1f      	ldr	r3, [pc, #124]	@ (800bb88 <getFilteredMaxAmplitudeQ31+0x110>)
 800bb0c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800bb0e:	4b1d      	ldr	r3, [pc, #116]	@ (800bb84 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb14:	429a      	cmp	r2, r3
 800bb16:	da03      	bge.n	800bb20 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800bb18:	4b1a      	ldr	r3, [pc, #104]	@ (800bb84 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb1e:	e007      	b.n	800bb30 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800bb20:	4b18      	ldr	r3, [pc, #96]	@ (800bb84 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb26:	429a      	cmp	r2, r3
 800bb28:	dd02      	ble.n	800bb30 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800bb2a:	4b16      	ldr	r3, [pc, #88]	@ (800bb84 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800bb30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb32:	3301      	adds	r3, #1
 800bb34:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d3ba      	bcc.n	800bab4 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb40:	17da      	asrs	r2, r3, #31
 800bb42:	189b      	adds	r3, r3, r2
 800bb44:	4053      	eors	r3, r2
 800bb46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800bb48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800bb4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d200      	bcs.n	800bb56 <getFilteredMaxAmplitudeQ31+0xde>
 800bb54:	0013      	movs	r3, r2
 800bb56:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800bb58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5c:	40da      	lsrs	r2, r3
 800bb5e:	0013      	movs	r3, r2
 800bb60:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800bb62:	1dbb      	adds	r3, r7, #6
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d007      	beq.n	800bb7a <getFilteredMaxAmplitudeQ31+0x102>
 800bb6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb94 <getFilteredMaxAmplitudeQ31+0x11c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	6a3a      	ldr	r2, [r7, #32]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d902      	bls.n	800bb7a <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800bb74:	4b07      	ldr	r3, [pc, #28]	@ (800bb94 <getFilteredMaxAmplitudeQ31+0x11c>)
 800bb76:	6a3a      	ldr	r2, [r7, #32]
 800bb78:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
}
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	b010      	add	sp, #64	@ 0x40
 800bb82:	bdb0      	pop	{r4, r5, r7, pc}
 800bb84:	20002158 	.word	0x20002158
 800bb88:	2000215c 	.word	0x2000215c
 800bb8c:	08023324 	.word	0x08023324
 800bb90:	08023328 	.word	0x08023328
 800bb94:	200012d0 	.word	0x200012d0

0800bb98 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800bba4:	4913      	ldr	r1, [pc, #76]	@ (800bbf4 <floatToIntAndFrac2dp+0x5c>)
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7f5 f9fa 	bl	8000fa0 <__aeabi_fmul>
 800bbac:	1c03      	adds	r3, r0, #0
 800bbae:	1c18      	adds	r0, r3, #0
 800bbb0:	f015 fbfc 	bl	80213ac <roundf>
 800bbb4:	1c03      	adds	r3, r0, #0
 800bbb6:	1c18      	adds	r0, r3, #0
 800bbb8:	f7f4 fd30 	bl	800061c <__aeabi_f2uiz>
 800bbbc:	0003      	movs	r3, r0
 800bbbe:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2164      	movs	r1, #100	@ 0x64
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f7f4 faed 	bl	80001a4 <__udivsi3>
 800bbca:	0003      	movs	r3, r0
 800bbcc:	001a      	movs	r2, r3
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	2164      	movs	r1, #100	@ 0x64
 800bbde:	434b      	muls	r3, r1
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	701a      	strb	r2, [r3, #0]
}
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	46bd      	mov	sp, r7
 800bbee:	b006      	add	sp, #24
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	46c0      	nop			@ (mov r8, r8)
 800bbf4:	42c80000 	.word	0x42c80000

0800bbf8 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800bc04:	4914      	ldr	r1, [pc, #80]	@ (800bc58 <floatToIntAndFrac1dp+0x60>)
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f7f5 f9ca 	bl	8000fa0 <__aeabi_fmul>
 800bc0c:	1c03      	adds	r3, r0, #0
 800bc0e:	1c18      	adds	r0, r3, #0
 800bc10:	f015 fbcc 	bl	80213ac <roundf>
 800bc14:	1c03      	adds	r3, r0, #0
 800bc16:	1c18      	adds	r0, r3, #0
 800bc18:	f7f4 fd00 	bl	800061c <__aeabi_f2uiz>
 800bc1c:	0003      	movs	r3, r0
 800bc1e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	210a      	movs	r1, #10
 800bc24:	0018      	movs	r0, r3
 800bc26:	f7f4 fabd 	bl	80001a4 <__udivsi3>
 800bc2a:	0003      	movs	r3, r0
 800bc2c:	001a      	movs	r2, r3
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	1c19      	adds	r1, r3, #0
 800bc3e:	0089      	lsls	r1, r1, #2
 800bc40:	18cb      	adds	r3, r1, r3
 800bc42:	18db      	adds	r3, r3, r3
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	701a      	strb	r2, [r3, #0]
}
 800bc4e:	46c0      	nop			@ (mov r8, r8)
 800bc50:	46bd      	mov	sp, r7
 800bc52:	b006      	add	sp, #24
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	46c0      	nop			@ (mov r8, r8)
 800bc58:	41200000 	.word	0x41200000

0800bc5c <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800bc5c:	b590      	push	{r4, r7, lr}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f7f5 fcb0 	bl	80015d0 <__aeabi_i2f>
 800bc70:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800bc72:	6838      	ldr	r0, [r7, #0]
 800bc74:	f7f5 fcac 	bl	80015d0 <__aeabi_i2f>
 800bc78:	1c03      	adds	r3, r0, #0
 800bc7a:	4918      	ldr	r1, [pc, #96]	@ (800bcdc <sumToIntAverage+0x80>)
 800bc7c:	1c18      	adds	r0, r3, #0
 800bc7e:	f7f4 ffa9 	bl	8000bd4 <__aeabi_fdiv>
 800bc82:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800bc84:	1c19      	adds	r1, r3, #0
 800bc86:	1c20      	adds	r0, r4, #0
 800bc88:	f7f4 fe1a 	bl	80008c0 <__aeabi_fadd>
 800bc8c:	1c03      	adds	r3, r0, #0
 800bc8e:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800bc90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc92:	f7f5 fce9 	bl	8001668 <__aeabi_ui2f>
 800bc96:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800bc98:	1c19      	adds	r1, r3, #0
 800bc9a:	1c20      	adds	r0, r4, #0
 800bc9c:	f7f4 ff9a 	bl	8000bd4 <__aeabi_fdiv>
 800bca0:	1c03      	adds	r3, r0, #0
 800bca2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	2310      	movs	r3, #16
 800bcac:	18f9      	adds	r1, r7, r3
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	1c18      	adds	r0, r3, #0
 800bcb2:	f7ff ffa1 	bl	800bbf8 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2bff      	cmp	r3, #255	@ 0xff
 800bcba:	d906      	bls.n	800bcca <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	22ff      	movs	r2, #255	@ 0xff
 800bcc0:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2209      	movs	r2, #9
 800bcc6:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800bcc8:	e003      	b.n	800bcd2 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	701a      	strb	r2, [r3, #0]
}
 800bcd2:	46c0      	nop			@ (mov r8, r8)
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	b007      	add	sp, #28
 800bcd8:	bd90      	pop	{r4, r7, pc}
 800bcda:	46c0      	nop			@ (mov r8, r8)
 800bcdc:	41200000 	.word	0x41200000

0800bce0 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2280      	movs	r2, #128	@ 0x80
 800bcf2:	0612      	lsls	r2, r2, #24
 800bcf4:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	4a18      	ldr	r2, [pc, #96]	@ (800bd5c <findMinMax+0x7c>)
 800bcfa:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	e022      	b.n	800bd48 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	18d3      	adds	r3, r2, r3
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	da06      	bge.n	800bd22 <findMinMax+0x42>
        {
            min[0] = array[i];
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	687a      	ldr	r2, [r7, #4]
 800bd1a:	18d3      	adds	r3, r2, r3
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	18d3      	adds	r3, r2, r3
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	dd06      	ble.n	800bd42 <findMinMax+0x62>
        {
            max[0] = array[i];
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	18d3      	adds	r3, r2, r3
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	3301      	adds	r3, #1
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	697a      	ldr	r2, [r7, #20]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d3d8      	bcc.n	800bd02 <findMinMax+0x22>
        }
    }
}
 800bd50:	46c0      	nop			@ (mov r8, r8)
 800bd52:	46c0      	nop			@ (mov r8, r8)
 800bd54:	46bd      	mov	sp, r7
 800bd56:	b006      	add	sp, #24
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	46c0      	nop			@ (mov r8, r8)
 800bd5c:	7fffffff 	.word	0x7fffffff

0800bd60 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d302      	bcc.n	800bd7c <getPo2factor+0x1c>
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d107      	bne.n	800bd8c <getPo2factor+0x2c>
    {
        return 0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	e00d      	b.n	800bd9c <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	085b      	lsrs	r3, r3, #1
 800bd84:	607b      	str	r3, [r7, #4]
        bitShift++;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d2f5      	bcs.n	800bd80 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
}
 800bd9c:	0018      	movs	r0, r3
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	b004      	add	sp, #16
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f7f5 fc58 	bl	8001668 <__aeabi_ui2f>
 800bdb8:	1c03      	adds	r3, r0, #0
 800bdba:	1c19      	adds	r1, r3, #0
 800bdbc:	68b8      	ldr	r0, [r7, #8]
 800bdbe:	f7f5 f8ef 	bl	8000fa0 <__aeabi_fmul>
 800bdc2:	1c03      	adds	r3, r0, #0
 800bdc4:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	2310      	movs	r3, #16
 800bdce:	18f9      	adds	r1, r7, r3
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	1c18      	adds	r0, r3, #0
 800bdd4:	f7ff fee0 	bl	800bb98 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	801a      	strh	r2, [r3, #0]
}
 800bde0:	46c0      	nop			@ (mov r8, r8)
 800bde2:	46bd      	mov	sp, r7
 800bde4:	b006      	add	sp, #24
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60b8      	str	r0, [r7, #8]
 800bdf0:	60f9      	str	r1, [r7, #12]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf8:	6a3a      	ldr	r2, [r7, #32]
 800bdfa:	68b8      	ldr	r0, [r7, #8]
 800bdfc:	68f9      	ldr	r1, [r7, #12]
 800bdfe:	f7fa fcd1 	bl	80067a4 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	18d2      	adds	r2, r2, r3
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	18d2      	adds	r2, r2, r3
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800be12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	18d2      	adds	r2, r2, r3
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	18d2      	adds	r2, r2, r3
 800be1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be20:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800be22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be24:	6a3b      	ldr	r3, [r7, #32]
 800be26:	0011      	movs	r1, r2
 800be28:	0018      	movs	r0, r3
 800be2a:	f7fa fd4b 	bl	80068c4 <correctIntFracNumber>
}
 800be2e:	46c0      	nop			@ (mov r8, r8)
 800be30:	46bd      	mov	sp, r7
 800be32:	b004      	add	sp, #16
 800be34:	bd80      	pop	{r7, pc}

0800be36 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b086      	sub	sp, #24
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	60f8      	str	r0, [r7, #12]
 800be3e:	60b9      	str	r1, [r7, #8]
 800be40:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
 800be4a:	e019      	b.n	800be80 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	18d3      	adds	r3, r2, r3
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	3201      	adds	r2, #1
 800be5c:	0052      	lsls	r2, r2, #1
 800be5e:	68f9      	ldr	r1, [r7, #12]
 800be60:	188a      	adds	r2, r1, r2
 800be62:	8812      	ldrh	r2, [r2, #0]
 800be64:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800be66:	0019      	movs	r1, r3
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800be70:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800be72:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	3301      	adds	r3, #1
 800be78:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	3304      	adds	r3, #4
 800be7e:	613b      	str	r3, [r7, #16]
 800be80:	693a      	ldr	r2, [r7, #16]
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	429a      	cmp	r2, r3
 800be86:	d3e1      	bcc.n	800be4c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800be88:	46c0      	nop			@ (mov r8, r8)
 800be8a:	46c0      	nop			@ (mov r8, r8)
 800be8c:	46bd      	mov	sp, r7
 800be8e:	b006      	add	sp, #24
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
  init = false;
 800be98:	4b02      	ldr	r3, [pc, #8]	@ (800bea4 <InitDone+0x10>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	701a      	strb	r2, [r3, #0]
}
 800be9e:	46c0      	nop			@ (mov r8, r8)
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	200000c8 	.word	0x200000c8

0800bea8 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800beae:	f7fa f811 	bl	8005ed4 <ReadBatteryVoltage>
 800beb2:	1c03      	adds	r3, r0, #0
 800beb4:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800beb6:	491f      	ldr	r1, [pc, #124]	@ (800bf34 <batteryChargeCheck+0x8c>)
 800beb8:	6838      	ldr	r0, [r7, #0]
 800beba:	f7f4 fb39 	bl	8000530 <__aeabi_fcmplt>
 800bebe:	1e03      	subs	r3, r0, #0
 800bec0:	d002      	beq.n	800bec8 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800bec2:	1dfb      	adds	r3, r7, #7
 800bec4:	2200      	movs	r2, #0
 800bec6:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800bec8:	6838      	ldr	r0, [r7, #0]
 800beca:	f7f7 facb 	bl	8003464 <__aeabi_f2d>
 800bece:	4a1a      	ldr	r2, [pc, #104]	@ (800bf38 <batteryChargeCheck+0x90>)
 800bed0:	4b1a      	ldr	r3, [pc, #104]	@ (800bf3c <batteryChargeCheck+0x94>)
 800bed2:	f7f4 faf3 	bl	80004bc <__aeabi_dcmplt>
 800bed6:	1e03      	subs	r3, r0, #0
 800bed8:	d008      	beq.n	800beec <batteryChargeCheck+0x44>
 800beda:	4916      	ldr	r1, [pc, #88]	@ (800bf34 <batteryChargeCheck+0x8c>)
 800bedc:	6838      	ldr	r0, [r7, #0]
 800bede:	f7f4 fb45 	bl	800056c <__aeabi_fcmpge>
 800bee2:	1e03      	subs	r3, r0, #0
 800bee4:	d002      	beq.n	800beec <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800bee6:	1dfb      	adds	r3, r7, #7
 800bee8:	2202      	movs	r2, #2
 800beea:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800beec:	2181      	movs	r1, #129	@ 0x81
 800beee:	05c9      	lsls	r1, r1, #23
 800bef0:	6838      	ldr	r0, [r7, #0]
 800bef2:	f7f4 fb1d 	bl	8000530 <__aeabi_fcmplt>
 800bef6:	1e03      	subs	r3, r0, #0
 800bef8:	d00b      	beq.n	800bf12 <batteryChargeCheck+0x6a>
 800befa:	6838      	ldr	r0, [r7, #0]
 800befc:	f7f7 fab2 	bl	8003464 <__aeabi_f2d>
 800bf00:	4a0d      	ldr	r2, [pc, #52]	@ (800bf38 <batteryChargeCheck+0x90>)
 800bf02:	4b0e      	ldr	r3, [pc, #56]	@ (800bf3c <batteryChargeCheck+0x94>)
 800bf04:	f7f4 faf8 	bl	80004f8 <__aeabi_dcmpge>
 800bf08:	1e03      	subs	r3, r0, #0
 800bf0a:	d002      	beq.n	800bf12 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800bf0c:	1dfb      	adds	r3, r7, #7
 800bf0e:	2203      	movs	r2, #3
 800bf10:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800bf12:	2181      	movs	r1, #129	@ 0x81
 800bf14:	05c9      	lsls	r1, r1, #23
 800bf16:	6838      	ldr	r0, [r7, #0]
 800bf18:	f7f4 fb28 	bl	800056c <__aeabi_fcmpge>
 800bf1c:	1e03      	subs	r3, r0, #0
 800bf1e:	d002      	beq.n	800bf26 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800bf20:	1dfb      	adds	r3, r7, #7
 800bf22:	2204      	movs	r2, #4
 800bf24:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800bf26:	1dfb      	adds	r3, r7, #7
 800bf28:	781b      	ldrb	r3, [r3, #0]
}
 800bf2a:	0018      	movs	r0, r3
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	b002      	add	sp, #8
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	46c0      	nop			@ (mov r8, r8)
 800bf34:	40600000 	.word	0x40600000
 800bf38:	9999999a 	.word	0x9999999a
 800bf3c:	400d9999 	.word	0x400d9999

0800bf40 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800bf40:	b590      	push	{r4, r7, lr}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	0004      	movs	r4, r0
 800bf48:	0008      	movs	r0, r1
 800bf4a:	0011      	movs	r1, r2
 800bf4c:	1dbb      	adds	r3, r7, #6
 800bf4e:	1c22      	adds	r2, r4, #0
 800bf50:	801a      	strh	r2, [r3, #0]
 800bf52:	1d3b      	adds	r3, r7, #4
 800bf54:	1c02      	adds	r2, r0, #0
 800bf56:	801a      	strh	r2, [r3, #0]
 800bf58:	1cbb      	adds	r3, r7, #2
 800bf5a:	1c0a      	adds	r2, r1, #0
 800bf5c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800bf5e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf9c <SetStatusLED+0x5c>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d107      	bne.n	800bf76 <SetStatusLED+0x36>
 800bf66:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa0 <SetStatusLED+0x60>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d103      	bne.n	800bf76 <SetStatusLED+0x36>
 800bf6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa4 <SetStatusLED+0x64>)
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00e      	beq.n	800bf94 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800bf76:	2380      	movs	r3, #128	@ 0x80
 800bf78:	05db      	lsls	r3, r3, #23
 800bf7a:	1dba      	adds	r2, r7, #6
 800bf7c:	8812      	ldrh	r2, [r2, #0]
 800bf7e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800bf80:	2380      	movs	r3, #128	@ 0x80
 800bf82:	05db      	lsls	r3, r3, #23
 800bf84:	1d3a      	adds	r2, r7, #4
 800bf86:	8812      	ldrh	r2, [r2, #0]
 800bf88:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800bf8a:	2380      	movs	r3, #128	@ 0x80
 800bf8c:	05db      	lsls	r3, r3, #23
 800bf8e:	1cba      	adds	r2, r7, #2
 800bf90:	8812      	ldrh	r2, [r2, #0]
 800bf92:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800bf94:	46c0      	nop			@ (mov r8, r8)
 800bf96:	46bd      	mov	sp, r7
 800bf98:	b003      	add	sp, #12
 800bf9a:	bd90      	pop	{r4, r7, pc}
 800bf9c:	20002161 	.word	0x20002161
 800bfa0:	200000c8 	.word	0x200000c8
 800bfa4:	20002162 	.word	0x20002162

0800bfa8 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800bfa8:	b590      	push	{r4, r7, lr}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	0004      	movs	r4, r0
 800bfb0:	0008      	movs	r0, r1
 800bfb2:	0011      	movs	r1, r2
 800bfb4:	1dfb      	adds	r3, r7, #7
 800bfb6:	1c22      	adds	r2, r4, #0
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	1dbb      	adds	r3, r7, #6
 800bfbc:	1c02      	adds	r2, r0, #0
 800bfbe:	701a      	strb	r2, [r3, #0]
 800bfc0:	1d7b      	adds	r3, r7, #5
 800bfc2:	1c0a      	adds	r2, r1, #0
 800bfc4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800bfc6:	4b19      	ldr	r3, [pc, #100]	@ (800c02c <SetDBLED+0x84>)
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d107      	bne.n	800bfde <SetDBLED+0x36>
 800bfce:	4b18      	ldr	r3, [pc, #96]	@ (800c030 <SetDBLED+0x88>)
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d103      	bne.n	800bfde <SetDBLED+0x36>
 800bfd6:	4b17      	ldr	r3, [pc, #92]	@ (800c034 <SetDBLED+0x8c>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d022      	beq.n	800c024 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800bfde:	1dfb      	adds	r3, r7, #7
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	4053      	eors	r3, r2
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	001a      	movs	r2, r3
 800bfea:	4b13      	ldr	r3, [pc, #76]	@ (800c038 <SetDBLED+0x90>)
 800bfec:	2101      	movs	r1, #1
 800bfee:	0018      	movs	r0, r3
 800bff0:	f002 fd3f 	bl	800ea72 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800bff4:	1dbb      	adds	r3, r7, #6
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	2201      	movs	r2, #1
 800bffa:	4053      	eors	r3, r2
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	001a      	movs	r2, r3
 800c000:	2380      	movs	r3, #128	@ 0x80
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	480c      	ldr	r0, [pc, #48]	@ (800c038 <SetDBLED+0x90>)
 800c006:	0019      	movs	r1, r3
 800c008:	f002 fd33 	bl	800ea72 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800c00c:	1d7b      	adds	r3, r7, #5
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2201      	movs	r2, #1
 800c012:	4053      	eors	r3, r2
 800c014:	b2db      	uxtb	r3, r3
 800c016:	001a      	movs	r2, r3
 800c018:	2380      	movs	r3, #128	@ 0x80
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4806      	ldr	r0, [pc, #24]	@ (800c038 <SetDBLED+0x90>)
 800c01e:	0019      	movs	r1, r3
 800c020:	f002 fd27 	bl	800ea72 <HAL_GPIO_WritePin>
  }
}
 800c024:	46c0      	nop			@ (mov r8, r8)
 800c026:	46bd      	mov	sp, r7
 800c028:	b003      	add	sp, #12
 800c02a:	bd90      	pop	{r4, r7, pc}
 800c02c:	20002161 	.word	0x20002161
 800c030:	200000c8 	.word	0x200000c8
 800c034:	20002162 	.word	0x20002162
 800c038:	50000400 	.word	0x50000400

0800c03c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800c03c:	b590      	push	{r4, r7, lr}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	0004      	movs	r4, r0
 800c044:	0008      	movs	r0, r1
 800c046:	0011      	movs	r1, r2
 800c048:	1dbb      	adds	r3, r7, #6
 800c04a:	1c22      	adds	r2, r4, #0
 800c04c:	801a      	strh	r2, [r3, #0]
 800c04e:	1d3b      	adds	r3, r7, #4
 800c050:	1c02      	adds	r2, r0, #0
 800c052:	801a      	strh	r2, [r3, #0]
 800c054:	1cbb      	adds	r3, r7, #2
 800c056:	1c0a      	adds	r2, r1, #0
 800c058:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c05a:	4b0e      	ldr	r3, [pc, #56]	@ (800c094 <SetVocLED+0x58>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d107      	bne.n	800c072 <SetVocLED+0x36>
 800c062:	4b0d      	ldr	r3, [pc, #52]	@ (800c098 <SetVocLED+0x5c>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d103      	bne.n	800c072 <SetVocLED+0x36>
 800c06a:	4b0c      	ldr	r3, [pc, #48]	@ (800c09c <SetVocLED+0x60>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00b      	beq.n	800c08a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800c072:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a0 <SetVocLED+0x64>)
 800c074:	1dba      	adds	r2, r7, #6
 800c076:	8812      	ldrh	r2, [r2, #0]
 800c078:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800c07a:	4b09      	ldr	r3, [pc, #36]	@ (800c0a0 <SetVocLED+0x64>)
 800c07c:	1d3a      	adds	r2, r7, #4
 800c07e:	8812      	ldrh	r2, [r2, #0]
 800c080:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800c082:	4b07      	ldr	r3, [pc, #28]	@ (800c0a0 <SetVocLED+0x64>)
 800c084:	1cba      	adds	r2, r7, #2
 800c086:	8812      	ldrh	r2, [r2, #0]
 800c088:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c08a:	46c0      	nop			@ (mov r8, r8)
 800c08c:	46bd      	mov	sp, r7
 800c08e:	b003      	add	sp, #12
 800c090:	bd90      	pop	{r4, r7, pc}
 800c092:	46c0      	nop			@ (mov r8, r8)
 800c094:	20002161 	.word	0x20002161
 800c098:	200000c8 	.word	0x200000c8
 800c09c:	20002162 	.word	0x20002162
 800c0a0:	40000400 	.word	0x40000400

0800c0a4 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c0a8:	4b07      	ldr	r3, [pc, #28]	@ (800c0c8 <SetMeasurementIndicator+0x24>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d103      	bne.n	800c0b8 <SetMeasurementIndicator+0x14>
 800c0b0:	4b06      	ldr	r3, [pc, #24]	@ (800c0cc <SetMeasurementIndicator+0x28>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d003      	beq.n	800c0c0 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800c0b8:	2380      	movs	r3, #128	@ 0x80
 800c0ba:	05db      	lsls	r3, r3, #23
 800c0bc:	4a04      	ldr	r2, [pc, #16]	@ (800c0d0 <SetMeasurementIndicator+0x2c>)
 800c0be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c0c0:	46c0      	nop			@ (mov r8, r8)
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	46c0      	nop			@ (mov r8, r8)
 800c0c8:	20002161 	.word	0x20002161
 800c0cc:	20002162 	.word	0x20002162
 800c0d0:	00000bb8 	.word	0x00000bb8

0800c0d4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c0d8:	4b07      	ldr	r3, [pc, #28]	@ (800c0f8 <ResetMeasurementIndicator+0x24>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d103      	bne.n	800c0e8 <ResetMeasurementIndicator+0x14>
 800c0e0:	4b06      	ldr	r3, [pc, #24]	@ (800c0fc <ResetMeasurementIndicator+0x28>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d004      	beq.n	800c0f2 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800c0e8:	2380      	movs	r3, #128	@ 0x80
 800c0ea:	05db      	lsls	r3, r3, #23
 800c0ec:	22fa      	movs	r2, #250	@ 0xfa
 800c0ee:	0112      	lsls	r2, r2, #4
 800c0f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c0f2:	46c0      	nop			@ (mov r8, r8)
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	20002161 	.word	0x20002161
 800c0fc:	20002162 	.word	0x20002162

0800c100 <SetMICIndicator>:
void SetMICIndicator(){
 800c100:	b580      	push	{r7, lr}
 800c102:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c104:	4b07      	ldr	r3, [pc, #28]	@ (800c124 <SetMICIndicator+0x24>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d103      	bne.n	800c114 <SetMICIndicator+0x14>
 800c10c:	4b06      	ldr	r3, [pc, #24]	@ (800c128 <SetMICIndicator+0x28>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d003      	beq.n	800c11c <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800c114:	2380      	movs	r3, #128	@ 0x80
 800c116:	05db      	lsls	r3, r3, #23
 800c118:	4a04      	ldr	r2, [pc, #16]	@ (800c12c <SetMICIndicator+0x2c>)
 800c11a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c11c:	46c0      	nop			@ (mov r8, r8)
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	46c0      	nop			@ (mov r8, r8)
 800c124:	20002161 	.word	0x20002161
 800c128:	20002162 	.word	0x20002162
 800c12c:	00000bb8 	.word	0x00000bb8

0800c130 <ResetMICIndicator>:
void ResetMICIndicator(){
 800c130:	b580      	push	{r7, lr}
 800c132:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c134:	4b07      	ldr	r3, [pc, #28]	@ (800c154 <ResetMICIndicator+0x24>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d103      	bne.n	800c144 <ResetMICIndicator+0x14>
 800c13c:	4b06      	ldr	r3, [pc, #24]	@ (800c158 <ResetMICIndicator+0x28>)
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d004      	beq.n	800c14e <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800c144:	2380      	movs	r3, #128	@ 0x80
 800c146:	05db      	lsls	r3, r3, #23
 800c148:	22fa      	movs	r2, #250	@ 0xfa
 800c14a:	0112      	lsls	r2, r2, #4
 800c14c:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c14e:	46c0      	nop			@ (mov r8, r8)
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	20002161 	.word	0x20002161
 800c158:	20002162 	.word	0x20002162

0800c15c <SetESPIndicator>:
void SetESPIndicator(){
 800c15c:	b580      	push	{r7, lr}
 800c15e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c160:	4b07      	ldr	r3, [pc, #28]	@ (800c180 <SetESPIndicator+0x24>)
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d103      	bne.n	800c170 <SetESPIndicator+0x14>
 800c168:	4b06      	ldr	r3, [pc, #24]	@ (800c184 <SetESPIndicator+0x28>)
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800c170:	2380      	movs	r3, #128	@ 0x80
 800c172:	05db      	lsls	r3, r3, #23
 800c174:	4a04      	ldr	r2, [pc, #16]	@ (800c188 <SetESPIndicator+0x2c>)
 800c176:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c178:	46c0      	nop			@ (mov r8, r8)
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	20002161 	.word	0x20002161
 800c184:	20002162 	.word	0x20002162
 800c188:	00000bb8 	.word	0x00000bb8

0800c18c <ResetESPIndicator>:
void ResetESPIndicator(){
 800c18c:	b580      	push	{r7, lr}
 800c18e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c190:	4b07      	ldr	r3, [pc, #28]	@ (800c1b0 <ResetESPIndicator+0x24>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d103      	bne.n	800c1a0 <ResetESPIndicator+0x14>
 800c198:	4b06      	ldr	r3, [pc, #24]	@ (800c1b4 <ResetESPIndicator+0x28>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d004      	beq.n	800c1aa <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800c1a0:	2380      	movs	r3, #128	@ 0x80
 800c1a2:	05db      	lsls	r3, r3, #23
 800c1a4:	22fa      	movs	r2, #250	@ 0xfa
 800c1a6:	0112      	lsls	r2, r2, #4
 800c1a8:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c1aa:	46c0      	nop			@ (mov r8, r8)
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	20002161 	.word	0x20002161
 800c1b4:	20002162 	.word	0x20002162

0800c1b8 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800c1bc:	23fa      	movs	r3, #250	@ 0xfa
 800c1be:	011a      	lsls	r2, r3, #4
 800c1c0:	23fa      	movs	r3, #250	@ 0xfa
 800c1c2:	0119      	lsls	r1, r3, #4
 800c1c4:	23fa      	movs	r3, #250	@ 0xfa
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	0018      	movs	r0, r3
 800c1ca:	f7ff feb9 	bl	800bf40 <SetStatusLED>
  SetDBLED(false,false,false);
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	f7ff fee8 	bl	800bfa8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800c1d8:	23fa      	movs	r3, #250	@ 0xfa
 800c1da:	011a      	lsls	r2, r3, #4
 800c1dc:	23fa      	movs	r3, #250	@ 0xfa
 800c1de:	0119      	lsls	r1, r3, #4
 800c1e0:	23fa      	movs	r3, #250	@ 0xfa
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	0018      	movs	r0, r3
 800c1e6:	f7ff ff29 	bl	800c03c <SetVocLED>
return;
 800c1ea:	46c0      	nop			@ (mov r8, r8)
}
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <powerCheck>:

Battery_Status powerCheck(){
 800c1f0:	b590      	push	{r4, r7, lr}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800c1f6:	f7f9 ff33 	bl	8006060 <Check_USB_PowerOn>
 800c1fa:	0003      	movs	r3, r0
 800c1fc:	001a      	movs	r2, r3
 800c1fe:	2301      	movs	r3, #1
 800c200:	4053      	eors	r3, r2
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b00      	cmp	r3, #0
 800c206:	d005      	beq.n	800c214 <powerCheck+0x24>
    status = batteryChargeCheck();
 800c208:	1dfc      	adds	r4, r7, #7
 800c20a:	f7ff fe4d 	bl	800bea8 <batteryChargeCheck>
 800c20e:	0003      	movs	r3, r0
 800c210:	7023      	strb	r3, [r4, #0]
 800c212:	e002      	b.n	800c21a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800c214:	1dfb      	adds	r3, r7, #7
 800c216:	2201      	movs	r2, #1
 800c218:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c21a:	1dfb      	adds	r3, r7, #7
 800c21c:	781b      	ldrb	r3, [r3, #0]
}
 800c21e:	0018      	movs	r0, r3
 800c220:	46bd      	mov	sp, r7
 800c222:	b003      	add	sp, #12
 800c224:	bd90      	pop	{r4, r7, pc}
	...

0800c228 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	0002      	movs	r2, r0
 800c230:	1dfb      	adds	r3, r7, #7
 800c232:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800c234:	1dfb      	adds	r3, r7, #7
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d105      	bne.n	800c248 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800c23c:	4a18      	ldr	r2, [pc, #96]	@ (800c2a0 <powerDisplay+0x78>)
 800c23e:	4b19      	ldr	r3, [pc, #100]	@ (800c2a4 <powerDisplay+0x7c>)
 800c240:	0019      	movs	r1, r3
 800c242:	2003      	movs	r0, #3
 800c244:	f000 fe1a 	bl	800ce7c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800c248:	1dfb      	adds	r3, r7, #7
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d105      	bne.n	800c25c <powerDisplay+0x34>
    Debug("Battery fully charged");
 800c250:	4a15      	ldr	r2, [pc, #84]	@ (800c2a8 <powerDisplay+0x80>)
 800c252:	4b14      	ldr	r3, [pc, #80]	@ (800c2a4 <powerDisplay+0x7c>)
 800c254:	0019      	movs	r1, r3
 800c256:	2003      	movs	r0, #3
 800c258:	f000 fe10 	bl	800ce7c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800c25c:	1dfb      	adds	r3, r7, #7
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b03      	cmp	r3, #3
 800c262:	d105      	bne.n	800c270 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800c264:	4a11      	ldr	r2, [pc, #68]	@ (800c2ac <powerDisplay+0x84>)
 800c266:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a4 <powerDisplay+0x7c>)
 800c268:	0019      	movs	r1, r3
 800c26a:	2003      	movs	r0, #3
 800c26c:	f000 fe06 	bl	800ce7c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800c270:	1dfb      	adds	r3, r7, #7
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b02      	cmp	r3, #2
 800c276:	d105      	bne.n	800c284 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800c278:	4a0d      	ldr	r2, [pc, #52]	@ (800c2b0 <powerDisplay+0x88>)
 800c27a:	4b0a      	ldr	r3, [pc, #40]	@ (800c2a4 <powerDisplay+0x7c>)
 800c27c:	0019      	movs	r1, r3
 800c27e:	2003      	movs	r0, #3
 800c280:	f000 fdfc 	bl	800ce7c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800c284:	1dfb      	adds	r3, r7, #7
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d105      	bne.n	800c298 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800c28c:	4a09      	ldr	r2, [pc, #36]	@ (800c2b4 <powerDisplay+0x8c>)
 800c28e:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <powerDisplay+0x7c>)
 800c290:	0019      	movs	r1, r3
 800c292:	2003      	movs	r0, #3
 800c294:	f000 fdf2 	bl	800ce7c <CreateLine>
  }
}
 800c298:	46c0      	nop			@ (mov r8, r8)
 800c29a:	46bd      	mov	sp, r7
 800c29c:	b002      	add	sp, #8
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	08022cd0 	.word	0x08022cd0
 800c2a4:	08022ce0 	.word	0x08022ce0
 800c2a8:	08022ce4 	.word	0x08022ce4
 800c2ac:	08022cfc 	.word	0x08022cfc
 800c2b0:	08022d1c 	.word	0x08022d1c
 800c2b4:	08022d34 	.word	0x08022d34

0800c2b8 <configCheck>:

void configCheck(){
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800c2bc:	f7f9 fedf 	bl	800607e <BootButton_Pressed>
 800c2c0:	1e03      	subs	r3, r0, #0
 800c2c2:	d007      	beq.n	800c2d4 <configCheck+0x1c>
 800c2c4:	f7f9 feec 	bl	80060a0 <UserButton_Pressed>
 800c2c8:	1e03      	subs	r3, r0, #0
 800c2ca:	d003      	beq.n	800c2d4 <configCheck+0x1c>
    configSet = true;
 800c2cc:	4b3d      	ldr	r3, [pc, #244]	@ (800c3c4 <configCheck+0x10c>)
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	701a      	strb	r2, [r3, #0]
 800c2d2:	e00a      	b.n	800c2ea <configCheck+0x32>
  }
  else{
    configSet = false;
 800c2d4:	4b3b      	ldr	r3, [pc, #236]	@ (800c3c4 <configCheck+0x10c>)
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800c2da:	f001 f96b 	bl	800d5b4 <HAL_GetTick>
 800c2de:	0003      	movs	r3, r0
 800c2e0:	22fa      	movs	r2, #250	@ 0xfa
 800c2e2:	00d2      	lsls	r2, r2, #3
 800c2e4:	189a      	adds	r2, r3, r2
 800c2e6:	4b38      	ldr	r3, [pc, #224]	@ (800c3c8 <configCheck+0x110>)
 800c2e8:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800c2ea:	4b36      	ldr	r3, [pc, #216]	@ (800c3c4 <configCheck+0x10c>)
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00d      	beq.n	800c30e <configCheck+0x56>
 800c2f2:	4b35      	ldr	r3, [pc, #212]	@ (800c3c8 <configCheck+0x110>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f000 fd6a 	bl	800cdd0 <TimestampIsReached>
 800c2fc:	1e03      	subs	r3, r0, #0
 800c2fe:	d006      	beq.n	800c30e <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800c300:	f7f7 fb44 	bl	800398c <SetConfigMode>
    SetDBLED(true, true, true);
 800c304:	2201      	movs	r2, #1
 800c306:	2101      	movs	r1, #1
 800c308:	2001      	movs	r0, #1
 800c30a:	f7ff fe4d 	bl	800bfa8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800c30e:	f7f9 feb6 	bl	800607e <BootButton_Pressed>
 800c312:	0003      	movs	r3, r0
 800c314:	001a      	movs	r2, r3
 800c316:	2301      	movs	r3, #1
 800c318:	4053      	eors	r3, r2
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d01d      	beq.n	800c35c <configCheck+0xa4>
 800c320:	f7f9 febe 	bl	80060a0 <UserButton_Pressed>
 800c324:	1e03      	subs	r3, r0, #0
 800c326:	d019      	beq.n	800c35c <configCheck+0xa4>
 800c328:	4b28      	ldr	r3, [pc, #160]	@ (800c3cc <configCheck+0x114>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2201      	movs	r2, #1
 800c32e:	4053      	eors	r3, r2
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d012      	beq.n	800c35c <configCheck+0xa4>
    SetLEDsOff();
 800c336:	f7ff ff3f 	bl	800c1b8 <SetLEDsOff>
    userToggle = !userToggle;
 800c33a:	4b25      	ldr	r3, [pc, #148]	@ (800c3d0 <configCheck+0x118>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	1e5a      	subs	r2, r3, #1
 800c340:	4193      	sbcs	r3, r2
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2201      	movs	r2, #1
 800c346:	4053      	eors	r3, r2
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	1c1a      	adds	r2, r3, #0
 800c34c:	2301      	movs	r3, #1
 800c34e:	4013      	ands	r3, r2
 800c350:	b2da      	uxtb	r2, r3
 800c352:	4b1f      	ldr	r3, [pc, #124]	@ (800c3d0 <configCheck+0x118>)
 800c354:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800c356:	4b1d      	ldr	r3, [pc, #116]	@ (800c3cc <configCheck+0x114>)
 800c358:	2201      	movs	r2, #1
 800c35a:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800c35c:	f7f9 fe8f 	bl	800607e <BootButton_Pressed>
 800c360:	0003      	movs	r3, r0
 800c362:	001a      	movs	r2, r3
 800c364:	2301      	movs	r3, #1
 800c366:	4053      	eors	r3, r2
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00b      	beq.n	800c386 <configCheck+0xce>
 800c36e:	f7f9 fe97 	bl	80060a0 <UserButton_Pressed>
 800c372:	0003      	movs	r3, r0
 800c374:	001a      	movs	r2, r3
 800c376:	2301      	movs	r3, #1
 800c378:	4053      	eors	r3, r2
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <configCheck+0xce>
    buttonHeld = false;
 800c380:	4b12      	ldr	r3, [pc, #72]	@ (800c3cc <configCheck+0x114>)
 800c382:	2200      	movs	r2, #0
 800c384:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800c386:	f7f9 fe6b 	bl	8006060 <Check_USB_PowerOn>
 800c38a:	1e03      	subs	r3, r0, #0
 800c38c:	d003      	beq.n	800c396 <configCheck+0xde>
    usbPluggedIn = true;
 800c38e:	4b11      	ldr	r3, [pc, #68]	@ (800c3d4 <configCheck+0x11c>)
 800c390:	2201      	movs	r2, #1
 800c392:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800c394:	e012      	b.n	800c3bc <configCheck+0x104>
    if(!userToggle && !init){
 800c396:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d0 <configCheck+0x118>)
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	2201      	movs	r2, #1
 800c39c:	4053      	eors	r3, r2
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d008      	beq.n	800c3b6 <configCheck+0xfe>
 800c3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c3d8 <configCheck+0x120>)
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	4053      	eors	r3, r2
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <configCheck+0xfe>
      SetLEDsOff();
 800c3b2:	f7ff ff01 	bl	800c1b8 <SetLEDsOff>
    usbPluggedIn = false;
 800c3b6:	4b07      	ldr	r3, [pc, #28]	@ (800c3d4 <configCheck+0x11c>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	701a      	strb	r2, [r3, #0]
}
 800c3bc:	46c0      	nop			@ (mov r8, r8)
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	46c0      	nop			@ (mov r8, r8)
 800c3c4:	20002160 	.word	0x20002160
 800c3c8:	20002164 	.word	0x20002164
 800c3cc:	20002163 	.word	0x20002163
 800c3d0:	20002162 	.word	0x20002162
 800c3d4:	20002161 	.word	0x20002161
 800c3d8:	200000c8 	.word	0x200000c8

0800c3dc <Status_Upkeep>:
  RTC_SetWakeUpTimer(sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0
  configCheck();
 800c3e0:	f7ff ff6a 	bl	800c2b8 <configCheck>
}
 800c3e4:	46c0      	nop			@ (mov r8, r8)
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800c3ea:	b590      	push	{r4, r7, lr}
 800c3ec:	b083      	sub	sp, #12
 800c3ee:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800c3f0:	1dfc      	adds	r4, r7, #7
 800c3f2:	f7ff fefd 	bl	800c1f0 <powerCheck>
 800c3f6:	0003      	movs	r3, r0
 800c3f8:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800c3fa:	1dfb      	adds	r3, r7, #7
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	0018      	movs	r0, r3
 800c400:	f7ff ff12 	bl	800c228 <powerDisplay>
  return status;
 800c404:	1dfb      	adds	r3, r7, #7
 800c406:	781b      	ldrb	r3, [r3, #0]

}
 800c408:	0018      	movs	r0, r3
 800c40a:	46bd      	mov	sp, r7
 800c40c:	b003      	add	sp, #12
 800c40e:	bd90      	pop	{r4, r7, pc}

0800c410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c414:	4b07      	ldr	r3, [pc, #28]	@ (800c434 <HAL_MspInit+0x24>)
 800c416:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c418:	4b06      	ldr	r3, [pc, #24]	@ (800c434 <HAL_MspInit+0x24>)
 800c41a:	2101      	movs	r1, #1
 800c41c:	430a      	orrs	r2, r1
 800c41e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800c420:	4b04      	ldr	r3, [pc, #16]	@ (800c434 <HAL_MspInit+0x24>)
 800c422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c424:	4b03      	ldr	r3, [pc, #12]	@ (800c434 <HAL_MspInit+0x24>)
 800c426:	2180      	movs	r1, #128	@ 0x80
 800c428:	0549      	lsls	r1, r1, #21
 800c42a:	430a      	orrs	r2, r1
 800c42c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c42e:	46c0      	nop			@ (mov r8, r8)
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	40021000 	.word	0x40021000

0800c438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c43c:	46c0      	nop			@ (mov r8, r8)
 800c43e:	e7fd      	b.n	800c43c <NMI_Handler+0x4>

0800c440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c444:	46c0      	nop			@ (mov r8, r8)
 800c446:	e7fd      	b.n	800c444 <HardFault_Handler+0x4>

0800c448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800c44c:	46c0      	nop			@ (mov r8, r8)
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c456:	46c0      	nop			@ (mov r8, r8)
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c460:	f001 f896 	bl	800d590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c464:	46c0      	nop			@ (mov r8, r8)
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
	...

0800c46c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c470:	4b05      	ldr	r3, [pc, #20]	@ (800c488 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800c472:	0018      	movs	r0, r3
 800c474:	f001 feab 	bl	800e1ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c478:	4b04      	ldr	r3, [pc, #16]	@ (800c48c <DMA1_Channel2_3_IRQHandler+0x20>)
 800c47a:	0018      	movs	r0, r3
 800c47c:	f001 fea7 	bl	800e1ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c480:	46c0      	nop			@ (mov r8, r8)
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	46c0      	nop			@ (mov r8, r8)
 800c488:	20000e30 	.word	0x20000e30
 800c48c:	20000de8 	.word	0x20000de8

0800c490 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800c494:	4b07      	ldr	r3, [pc, #28]	@ (800c4b4 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800c496:	0018      	movs	r0, r3
 800c498:	f001 fe99 	bl	800e1ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800c49c:	4b06      	ldr	r3, [pc, #24]	@ (800c4b8 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800c49e:	0018      	movs	r0, r3
 800c4a0:	f001 fe95 	bl	800e1ce <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800c4a4:	4b05      	ldr	r3, [pc, #20]	@ (800c4bc <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800c4a6:	0018      	movs	r0, r3
 800c4a8:	f001 fe91 	bl	800e1ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800c4ac:	46c0      	nop			@ (mov r8, r8)
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	46c0      	nop			@ (mov r8, r8)
 800c4b4:	20000eb4 	.word	0x20000eb4
 800c4b8:	20002454 	.word	0x20002454
 800c4bc:	2000249c 	.word	0x2000249c

0800c4c0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c4c4:	4b03      	ldr	r3, [pc, #12]	@ (800c4d4 <USART4_5_IRQHandler+0x14>)
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f009 fac8 	bl	8015a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800c4cc:	46c0      	nop			@ (mov r8, r8)
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	46c0      	nop			@ (mov r8, r8)
 800c4d4:	2000239c 	.word	0x2000239c

0800c4d8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800c4dc:	4b09      	ldr	r3, [pc, #36]	@ (800c504 <I2C1_IRQHandler+0x2c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	699a      	ldr	r2, [r3, #24]
 800c4e2:	23e0      	movs	r3, #224	@ 0xe0
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	d004      	beq.n	800c4f4 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800c4ea:	4b06      	ldr	r3, [pc, #24]	@ (800c504 <I2C1_IRQHandler+0x2c>)
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	f002 ffa9 	bl	800f444 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800c4f2:	e003      	b.n	800c4fc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c4f4:	4b03      	ldr	r3, [pc, #12]	@ (800c504 <I2C1_IRQHandler+0x2c>)
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	f002 ff8a 	bl	800f410 <HAL_I2C_EV_IRQHandler>
}
 800c4fc:	46c0      	nop			@ (mov r8, r8)
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	46c0      	nop			@ (mov r8, r8)
 800c504:	20000d40 	.word	0x20000d40

0800c508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c50c:	4b03      	ldr	r3, [pc, #12]	@ (800c51c <USART1_IRQHandler+0x14>)
 800c50e:	0018      	movs	r0, r3
 800c510:	f009 faa4 	bl	8015a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c514:	46c0      	nop			@ (mov r8, r8)
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	46c0      	nop			@ (mov r8, r8)
 800c51c:	200022e4 	.word	0x200022e4

0800c520 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800c524:	4b03      	ldr	r3, [pc, #12]	@ (800c534 <USB_IRQHandler+0x14>)
 800c526:	0018      	movs	r0, r3
 800c528:	f005 fb6a 	bl	8011c00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800c52c:	46c0      	nop			@ (mov r8, r8)
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	46c0      	nop			@ (mov r8, r8)
 800c534:	200032a4 	.word	0x200032a4

0800c538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
  return 1;
 800c53c:	2301      	movs	r3, #1
}
 800c53e:	0018      	movs	r0, r3
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <_kill>:

int _kill(int pid, int sig)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b082      	sub	sp, #8
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c54e:	f012 f969 	bl	801e824 <__errno>
 800c552:	0003      	movs	r3, r0
 800c554:	2216      	movs	r2, #22
 800c556:	601a      	str	r2, [r3, #0]
  return -1;
 800c558:	2301      	movs	r3, #1
 800c55a:	425b      	negs	r3, r3
}
 800c55c:	0018      	movs	r0, r3
 800c55e:	46bd      	mov	sp, r7
 800c560:	b002      	add	sp, #8
 800c562:	bd80      	pop	{r7, pc}

0800c564 <_exit>:

void _exit (int status)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c56c:	2301      	movs	r3, #1
 800c56e:	425a      	negs	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	0011      	movs	r1, r2
 800c574:	0018      	movs	r0, r3
 800c576:	f7ff ffe5 	bl	800c544 <_kill>
  while (1) {}    /* Make sure we hang here */
 800c57a:	46c0      	nop			@ (mov r8, r8)
 800c57c:	e7fd      	b.n	800c57a <_exit+0x16>

0800c57e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b086      	sub	sp, #24
 800c582:	af00      	add	r7, sp, #0
 800c584:	60f8      	str	r0, [r7, #12]
 800c586:	60b9      	str	r1, [r7, #8]
 800c588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	e00a      	b.n	800c5a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c590:	e000      	b.n	800c594 <_read+0x16>
 800c592:	bf00      	nop
 800c594:	0001      	movs	r1, r0
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	60ba      	str	r2, [r7, #8]
 800c59c:	b2ca      	uxtb	r2, r1
 800c59e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	697a      	ldr	r2, [r7, #20]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	dbf0      	blt.n	800c590 <_read+0x12>
  }

  return len;
 800c5ae:	687b      	ldr	r3, [r7, #4]
}
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	b006      	add	sp, #24
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <_close>:
  }
  return len;
}

int _close(int file)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	425b      	negs	r3, r3
}
 800c5c4:	0018      	movs	r0, r3
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	b002      	add	sp, #8
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2280      	movs	r2, #128	@ 0x80
 800c5da:	0192      	lsls	r2, r2, #6
 800c5dc:	605a      	str	r2, [r3, #4]
  return 0;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	b002      	add	sp, #8
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <_isatty>:

int _isatty(int file)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c5f0:	2301      	movs	r3, #1
}
 800c5f2:	0018      	movs	r0, r3
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	b002      	add	sp, #8
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b084      	sub	sp, #16
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	60f8      	str	r0, [r7, #12]
 800c602:	60b9      	str	r1, [r7, #8]
 800c604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c606:	2300      	movs	r3, #0
}
 800c608:	0018      	movs	r0, r3
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b004      	add	sp, #16
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c618:	4a14      	ldr	r2, [pc, #80]	@ (800c66c <_sbrk+0x5c>)
 800c61a:	4b15      	ldr	r3, [pc, #84]	@ (800c670 <_sbrk+0x60>)
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c624:	4b13      	ldr	r3, [pc, #76]	@ (800c674 <_sbrk+0x64>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d102      	bne.n	800c632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c62c:	4b11      	ldr	r3, [pc, #68]	@ (800c674 <_sbrk+0x64>)
 800c62e:	4a12      	ldr	r2, [pc, #72]	@ (800c678 <_sbrk+0x68>)
 800c630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c632:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <_sbrk+0x64>)
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	18d3      	adds	r3, r2, r3
 800c63a:	693a      	ldr	r2, [r7, #16]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d207      	bcs.n	800c650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c640:	f012 f8f0 	bl	801e824 <__errno>
 800c644:	0003      	movs	r3, r0
 800c646:	220c      	movs	r2, #12
 800c648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c64a:	2301      	movs	r3, #1
 800c64c:	425b      	negs	r3, r3
 800c64e:	e009      	b.n	800c664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c650:	4b08      	ldr	r3, [pc, #32]	@ (800c674 <_sbrk+0x64>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c656:	4b07      	ldr	r3, [pc, #28]	@ (800c674 <_sbrk+0x64>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	18d2      	adds	r2, r2, r3
 800c65e:	4b05      	ldr	r3, [pc, #20]	@ (800c674 <_sbrk+0x64>)
 800c660:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c662:	68fb      	ldr	r3, [r7, #12]
}
 800c664:	0018      	movs	r0, r3
 800c666:	46bd      	mov	sp, r7
 800c668:	b006      	add	sp, #24
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20005000 	.word	0x20005000
 800c670:	00000400 	.word	0x00000400
 800c674:	20002168 	.word	0x20002168
 800c678:	20003908 	.word	0x20003908

0800c67c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c680:	46c0      	nop			@ (mov r8, r8)
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
	...

0800c688 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c68e:	2310      	movs	r3, #16
 800c690:	18fb      	adds	r3, r7, r3
 800c692:	0018      	movs	r0, r3
 800c694:	2308      	movs	r3, #8
 800c696:	001a      	movs	r2, r3
 800c698:	2100      	movs	r1, #0
 800c69a:	f012 f81f 	bl	801e6dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c69e:	003b      	movs	r3, r7
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	2310      	movs	r3, #16
 800c6a4:	001a      	movs	r2, r3
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	f012 f818 	bl	801e6dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c6ac:	4b2e      	ldr	r3, [pc, #184]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6ae:	2280      	movs	r2, #128	@ 0x80
 800c6b0:	05d2      	lsls	r2, r2, #23
 800c6b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c6b4:	4b2c      	ldr	r3, [pc, #176]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6ba:	4b2b      	ldr	r3, [pc, #172]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800c6c0:	4b29      	ldr	r3, [pc, #164]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c76c <MX_TIM2_Init+0xe4>)
 800c6c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c6c6:	4b28      	ldr	r3, [pc, #160]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c6cc:	4b26      	ldr	r3, [pc, #152]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c6d2:	4b25      	ldr	r3, [pc, #148]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6d4:	0018      	movs	r0, r3
 800c6d6:	f008 fbd5 	bl	8014e84 <HAL_TIM_PWM_Init>
 800c6da:	1e03      	subs	r3, r0, #0
 800c6dc:	d001      	beq.n	800c6e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800c6de:	f7fa ffff 	bl	80076e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c6e2:	2110      	movs	r1, #16
 800c6e4:	187b      	adds	r3, r7, r1
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c6ea:	187b      	adds	r3, r7, r1
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c6f0:	187a      	adds	r2, r7, r1
 800c6f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c6f4:	0011      	movs	r1, r2
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f008 fee2 	bl	80154c0 <HAL_TIMEx_MasterConfigSynchronization>
 800c6fc:	1e03      	subs	r3, r0, #0
 800c6fe:	d001      	beq.n	800c704 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800c700:	f7fa ffee 	bl	80076e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c704:	003b      	movs	r3, r7
 800c706:	2260      	movs	r2, #96	@ 0x60
 800c708:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800c70a:	003b      	movs	r3, r7
 800c70c:	2200      	movs	r2, #0
 800c70e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c710:	003b      	movs	r3, r7
 800c712:	2200      	movs	r2, #0
 800c714:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c716:	003b      	movs	r3, r7
 800c718:	2200      	movs	r2, #0
 800c71a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c71c:	0039      	movs	r1, r7
 800c71e:	4b12      	ldr	r3, [pc, #72]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c720:	2200      	movs	r2, #0
 800c722:	0018      	movs	r0, r3
 800c724:	f008 fc80 	bl	8015028 <HAL_TIM_PWM_ConfigChannel>
 800c728:	1e03      	subs	r3, r0, #0
 800c72a:	d001      	beq.n	800c730 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800c72c:	f7fa ffd8 	bl	80076e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c730:	0039      	movs	r1, r7
 800c732:	4b0d      	ldr	r3, [pc, #52]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c734:	2208      	movs	r2, #8
 800c736:	0018      	movs	r0, r3
 800c738:	f008 fc76 	bl	8015028 <HAL_TIM_PWM_ConfigChannel>
 800c73c:	1e03      	subs	r3, r0, #0
 800c73e:	d001      	beq.n	800c744 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800c740:	f7fa ffce 	bl	80076e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c744:	0039      	movs	r1, r7
 800c746:	4b08      	ldr	r3, [pc, #32]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c748:	220c      	movs	r2, #12
 800c74a:	0018      	movs	r0, r3
 800c74c:	f008 fc6c 	bl	8015028 <HAL_TIM_PWM_ConfigChannel>
 800c750:	1e03      	subs	r3, r0, #0
 800c752:	d001      	beq.n	800c758 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800c754:	f7fa ffc4 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800c758:	4b03      	ldr	r3, [pc, #12]	@ (800c768 <MX_TIM2_Init+0xe0>)
 800c75a:	0018      	movs	r0, r3
 800c75c:	f000 f8fe 	bl	800c95c <HAL_TIM_MspPostInit>

}
 800c760:	46c0      	nop			@ (mov r8, r8)
 800c762:	46bd      	mov	sp, r7
 800c764:	b006      	add	sp, #24
 800c766:	bd80      	pop	{r7, pc}
 800c768:	2000216c 	.word	0x2000216c
 800c76c:	0000ffff 	.word	0x0000ffff

0800c770 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c776:	2310      	movs	r3, #16
 800c778:	18fb      	adds	r3, r7, r3
 800c77a:	0018      	movs	r0, r3
 800c77c:	2308      	movs	r3, #8
 800c77e:	001a      	movs	r2, r3
 800c780:	2100      	movs	r1, #0
 800c782:	f011 ffab 	bl	801e6dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c786:	003b      	movs	r3, r7
 800c788:	0018      	movs	r0, r3
 800c78a:	2310      	movs	r3, #16
 800c78c:	001a      	movs	r2, r3
 800c78e:	2100      	movs	r1, #0
 800c790:	f011 ffa4 	bl	801e6dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c794:	4b32      	ldr	r3, [pc, #200]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c796:	4a33      	ldr	r2, [pc, #204]	@ (800c864 <MX_TIM3_Init+0xf4>)
 800c798:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800c79a:	4b31      	ldr	r3, [pc, #196]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7a0:	4b2f      	ldr	r3, [pc, #188]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800c7a6:	4b2e      	ldr	r3, [pc, #184]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c7a8:	4a2f      	ldr	r2, [pc, #188]	@ (800c868 <MX_TIM3_Init+0xf8>)
 800c7aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c7ac:	4b2c      	ldr	r3, [pc, #176]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7b2:	4b2b      	ldr	r3, [pc, #172]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800c7b8:	4b29      	ldr	r3, [pc, #164]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c7ba:	0018      	movs	r0, r3
 800c7bc:	f008 fb62 	bl	8014e84 <HAL_TIM_PWM_Init>
 800c7c0:	1e03      	subs	r3, r0, #0
 800c7c2:	d001      	beq.n	800c7c8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800c7c4:	f7fa ff8c 	bl	80076e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7c8:	2110      	movs	r1, #16
 800c7ca:	187b      	adds	r3, r7, r1
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7d0:	187b      	adds	r3, r7, r1
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c7d6:	187a      	adds	r2, r7, r1
 800c7d8:	4b21      	ldr	r3, [pc, #132]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c7da:	0011      	movs	r1, r2
 800c7dc:	0018      	movs	r0, r3
 800c7de:	f008 fe6f 	bl	80154c0 <HAL_TIMEx_MasterConfigSynchronization>
 800c7e2:	1e03      	subs	r3, r0, #0
 800c7e4:	d001      	beq.n	800c7ea <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800c7e6:	f7fa ff7b 	bl	80076e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c7ea:	003b      	movs	r3, r7
 800c7ec:	2260      	movs	r2, #96	@ 0x60
 800c7ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800c7f0:	003b      	movs	r3, r7
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c7f6:	003b      	movs	r3, r7
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c7fc:	003b      	movs	r3, r7
 800c7fe:	2200      	movs	r2, #0
 800c800:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c802:	0039      	movs	r1, r7
 800c804:	4b16      	ldr	r3, [pc, #88]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c806:	2200      	movs	r2, #0
 800c808:	0018      	movs	r0, r3
 800c80a:	f008 fc0d 	bl	8015028 <HAL_TIM_PWM_ConfigChannel>
 800c80e:	1e03      	subs	r3, r0, #0
 800c810:	d001      	beq.n	800c816 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800c812:	f7fa ff65 	bl	80076e0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800c816:	4b12      	ldr	r3, [pc, #72]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c818:	2104      	movs	r1, #4
 800c81a:	0018      	movs	r0, r3
 800c81c:	f008 feae 	bl	801557c <HAL_TIMEx_RemapConfig>
 800c820:	1e03      	subs	r3, r0, #0
 800c822:	d001      	beq.n	800c828 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800c824:	f7fa ff5c 	bl	80076e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c828:	0039      	movs	r1, r7
 800c82a:	4b0d      	ldr	r3, [pc, #52]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c82c:	2204      	movs	r2, #4
 800c82e:	0018      	movs	r0, r3
 800c830:	f008 fbfa 	bl	8015028 <HAL_TIM_PWM_ConfigChannel>
 800c834:	1e03      	subs	r3, r0, #0
 800c836:	d001      	beq.n	800c83c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800c838:	f7fa ff52 	bl	80076e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c83c:	0039      	movs	r1, r7
 800c83e:	4b08      	ldr	r3, [pc, #32]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c840:	2208      	movs	r2, #8
 800c842:	0018      	movs	r0, r3
 800c844:	f008 fbf0 	bl	8015028 <HAL_TIM_PWM_ConfigChannel>
 800c848:	1e03      	subs	r3, r0, #0
 800c84a:	d001      	beq.n	800c850 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800c84c:	f7fa ff48 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800c850:	4b03      	ldr	r3, [pc, #12]	@ (800c860 <MX_TIM3_Init+0xf0>)
 800c852:	0018      	movs	r0, r3
 800c854:	f000 f882 	bl	800c95c <HAL_TIM_MspPostInit>

}
 800c858:	46c0      	nop			@ (mov r8, r8)
 800c85a:	46bd      	mov	sp, r7
 800c85c:	b006      	add	sp, #24
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	200021ac 	.word	0x200021ac
 800c864:	40000400 	.word	0x40000400
 800c868:	0000ffff 	.word	0x0000ffff

0800c86c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c872:	003b      	movs	r3, r7
 800c874:	0018      	movs	r0, r3
 800c876:	2308      	movs	r3, #8
 800c878:	001a      	movs	r2, r3
 800c87a:	2100      	movs	r1, #0
 800c87c:	f011 ff2e 	bl	801e6dc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800c880:	4b15      	ldr	r3, [pc, #84]	@ (800c8d8 <MX_TIM6_Init+0x6c>)
 800c882:	4a16      	ldr	r2, [pc, #88]	@ (800c8dc <MX_TIM6_Init+0x70>)
 800c884:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800c886:	4b14      	ldr	r3, [pc, #80]	@ (800c8d8 <MX_TIM6_Init+0x6c>)
 800c888:	220a      	movs	r2, #10
 800c88a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c88c:	4b12      	ldr	r3, [pc, #72]	@ (800c8d8 <MX_TIM6_Init+0x6c>)
 800c88e:	2200      	movs	r2, #0
 800c890:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800c892:	4b11      	ldr	r3, [pc, #68]	@ (800c8d8 <MX_TIM6_Init+0x6c>)
 800c894:	4a12      	ldr	r2, [pc, #72]	@ (800c8e0 <MX_TIM6_Init+0x74>)
 800c896:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c898:	4b0f      	ldr	r3, [pc, #60]	@ (800c8d8 <MX_TIM6_Init+0x6c>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c89e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d8 <MX_TIM6_Init+0x6c>)
 800c8a0:	0018      	movs	r0, r3
 800c8a2:	f008 fa47 	bl	8014d34 <HAL_TIM_Base_Init>
 800c8a6:	1e03      	subs	r3, r0, #0
 800c8a8:	d001      	beq.n	800c8ae <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800c8aa:	f7fa ff19 	bl	80076e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c8ae:	003b      	movs	r3, r7
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8b4:	003b      	movs	r3, r7
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c8ba:	003a      	movs	r2, r7
 800c8bc:	4b06      	ldr	r3, [pc, #24]	@ (800c8d8 <MX_TIM6_Init+0x6c>)
 800c8be:	0011      	movs	r1, r2
 800c8c0:	0018      	movs	r0, r3
 800c8c2:	f008 fdfd 	bl	80154c0 <HAL_TIMEx_MasterConfigSynchronization>
 800c8c6:	1e03      	subs	r3, r0, #0
 800c8c8:	d001      	beq.n	800c8ce <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800c8ca:	f7fa ff09 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800c8ce:	46c0      	nop			@ (mov r8, r8)
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	b002      	add	sp, #8
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	46c0      	nop			@ (mov r8, r8)
 800c8d8:	200021ec 	.word	0x200021ec
 800c8dc:	40001000 	.word	0x40001000
 800c8e0:	0000ffff 	.word	0x0000ffff

0800c8e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	2380      	movs	r3, #128	@ 0x80
 800c8f2:	05db      	lsls	r3, r3, #23
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d106      	bne.n	800c906 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c924 <HAL_TIM_PWM_MspInit+0x40>)
 800c8fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8fc:	4b09      	ldr	r3, [pc, #36]	@ (800c924 <HAL_TIM_PWM_MspInit+0x40>)
 800c8fe:	2101      	movs	r1, #1
 800c900:	430a      	orrs	r2, r1
 800c902:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800c904:	e00a      	b.n	800c91c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a07      	ldr	r2, [pc, #28]	@ (800c928 <HAL_TIM_PWM_MspInit+0x44>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d105      	bne.n	800c91c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c910:	4b04      	ldr	r3, [pc, #16]	@ (800c924 <HAL_TIM_PWM_MspInit+0x40>)
 800c912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c914:	4b03      	ldr	r3, [pc, #12]	@ (800c924 <HAL_TIM_PWM_MspInit+0x40>)
 800c916:	2102      	movs	r1, #2
 800c918:	430a      	orrs	r2, r1
 800c91a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c91c:	46c0      	nop			@ (mov r8, r8)
 800c91e:	46bd      	mov	sp, r7
 800c920:	b002      	add	sp, #8
 800c922:	bd80      	pop	{r7, pc}
 800c924:	40021000 	.word	0x40021000
 800c928:	40000400 	.word	0x40000400

0800c92c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a06      	ldr	r2, [pc, #24]	@ (800c954 <HAL_TIM_Base_MspInit+0x28>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d105      	bne.n	800c94a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c93e:	4b06      	ldr	r3, [pc, #24]	@ (800c958 <HAL_TIM_Base_MspInit+0x2c>)
 800c940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c942:	4b05      	ldr	r3, [pc, #20]	@ (800c958 <HAL_TIM_Base_MspInit+0x2c>)
 800c944:	2110      	movs	r1, #16
 800c946:	430a      	orrs	r2, r1
 800c948:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	46bd      	mov	sp, r7
 800c94e:	b002      	add	sp, #8
 800c950:	bd80      	pop	{r7, pc}
 800c952:	46c0      	nop			@ (mov r8, r8)
 800c954:	40001000 	.word	0x40001000
 800c958:	40021000 	.word	0x40021000

0800c95c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b08b      	sub	sp, #44	@ 0x2c
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c964:	2414      	movs	r4, #20
 800c966:	193b      	adds	r3, r7, r4
 800c968:	0018      	movs	r0, r3
 800c96a:	2314      	movs	r3, #20
 800c96c:	001a      	movs	r2, r3
 800c96e:	2100      	movs	r1, #0
 800c970:	f011 feb4 	bl	801e6dc <memset>
  if(timHandle->Instance==TIM2)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	2380      	movs	r3, #128	@ 0x80
 800c97a:	05db      	lsls	r3, r3, #23
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d123      	bne.n	800c9c8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c980:	4b27      	ldr	r3, [pc, #156]	@ (800ca20 <HAL_TIM_MspPostInit+0xc4>)
 800c982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c984:	4b26      	ldr	r3, [pc, #152]	@ (800ca20 <HAL_TIM_MspPostInit+0xc4>)
 800c986:	2101      	movs	r1, #1
 800c988:	430a      	orrs	r2, r1
 800c98a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c98c:	4b24      	ldr	r3, [pc, #144]	@ (800ca20 <HAL_TIM_MspPostInit+0xc4>)
 800c98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c990:	2201      	movs	r2, #1
 800c992:	4013      	ands	r3, r2
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800c998:	0021      	movs	r1, r4
 800c99a:	187b      	adds	r3, r7, r1
 800c99c:	220d      	movs	r2, #13
 800c99e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9a0:	187b      	adds	r3, r7, r1
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9a6:	187b      	adds	r3, r7, r1
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9ac:	187b      	adds	r3, r7, r1
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800c9b2:	187b      	adds	r3, r7, r1
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9b8:	187a      	adds	r2, r7, r1
 800c9ba:	23a0      	movs	r3, #160	@ 0xa0
 800c9bc:	05db      	lsls	r3, r3, #23
 800c9be:	0011      	movs	r1, r2
 800c9c0:	0018      	movs	r0, r3
 800c9c2:	f001 febb 	bl	800e73c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c9c6:	e027      	b.n	800ca18 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a15      	ldr	r2, [pc, #84]	@ (800ca24 <HAL_TIM_MspPostInit+0xc8>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d122      	bne.n	800ca18 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c9d2:	4b13      	ldr	r3, [pc, #76]	@ (800ca20 <HAL_TIM_MspPostInit+0xc4>)
 800c9d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9d6:	4b12      	ldr	r3, [pc, #72]	@ (800ca20 <HAL_TIM_MspPostInit+0xc4>)
 800c9d8:	2104      	movs	r1, #4
 800c9da:	430a      	orrs	r2, r1
 800c9dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9de:	4b10      	ldr	r3, [pc, #64]	@ (800ca20 <HAL_TIM_MspPostInit+0xc4>)
 800c9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800c9ea:	2114      	movs	r1, #20
 800c9ec:	187b      	adds	r3, r7, r1
 800c9ee:	22e0      	movs	r2, #224	@ 0xe0
 800c9f0:	0052      	lsls	r2, r2, #1
 800c9f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9f4:	187b      	adds	r3, r7, r1
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9fa:	187b      	adds	r3, r7, r1
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca00:	187b      	adds	r3, r7, r1
 800ca02:	2200      	movs	r2, #0
 800ca04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ca06:	187b      	adds	r3, r7, r1
 800ca08:	2202      	movs	r2, #2
 800ca0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ca0c:	187b      	adds	r3, r7, r1
 800ca0e:	4a06      	ldr	r2, [pc, #24]	@ (800ca28 <HAL_TIM_MspPostInit+0xcc>)
 800ca10:	0019      	movs	r1, r3
 800ca12:	0010      	movs	r0, r2
 800ca14:	f001 fe92 	bl	800e73c <HAL_GPIO_Init>
}
 800ca18:	46c0      	nop			@ (mov r8, r8)
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	b00b      	add	sp, #44	@ 0x2c
 800ca1e:	bd90      	pop	{r4, r7, pc}
 800ca20:	40021000 	.word	0x40021000
 800ca24:	40000400 	.word	0x40000400
 800ca28:	50000800 	.word	0x50000800

0800ca2c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800ca30:	4b17      	ldr	r3, [pc, #92]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca32:	4a18      	ldr	r2, [pc, #96]	@ (800ca94 <MX_LPUART1_UART_Init+0x68>)
 800ca34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800ca36:	4b16      	ldr	r3, [pc, #88]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca38:	22e1      	movs	r2, #225	@ 0xe1
 800ca3a:	0252      	lsls	r2, r2, #9
 800ca3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ca3e:	4b14      	ldr	r3, [pc, #80]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800ca44:	4b12      	ldr	r3, [pc, #72]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800ca4a:	4b11      	ldr	r3, [pc, #68]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800ca50:	4b0f      	ldr	r3, [pc, #60]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca52:	220c      	movs	r2, #12
 800ca54:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca56:	4b0e      	ldr	r3, [pc, #56]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ca5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800ca62:	4b0b      	ldr	r3, [pc, #44]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca64:	2218      	movs	r2, #24
 800ca66:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800ca68:	4b09      	ldr	r3, [pc, #36]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca6a:	2280      	movs	r2, #128	@ 0x80
 800ca6c:	0212      	lsls	r2, r2, #8
 800ca6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800ca70:	4b07      	ldr	r3, [pc, #28]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca72:	2280      	movs	r2, #128	@ 0x80
 800ca74:	0152      	lsls	r2, r2, #5
 800ca76:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800ca78:	4b05      	ldr	r3, [pc, #20]	@ (800ca90 <MX_LPUART1_UART_Init+0x64>)
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	f008 fd9c 	bl	80155b8 <HAL_UART_Init>
 800ca80:	1e03      	subs	r3, r0, #0
 800ca82:	d001      	beq.n	800ca88 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800ca84:	f7fa fe2c 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800ca88:	46c0      	nop			@ (mov r8, r8)
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	46c0      	nop			@ (mov r8, r8)
 800ca90:	2000222c 	.word	0x2000222c
 800ca94:	40004800 	.word	0x40004800

0800ca98 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ca9c:	4b16      	ldr	r3, [pc, #88]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800ca9e:	4a17      	ldr	r2, [pc, #92]	@ (800cafc <MX_USART1_UART_Init+0x64>)
 800caa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800caa2:	4b15      	ldr	r3, [pc, #84]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800caa4:	22e1      	movs	r2, #225	@ 0xe1
 800caa6:	0252      	lsls	r2, r2, #9
 800caa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800caaa:	4b13      	ldr	r3, [pc, #76]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800caac:	2200      	movs	r2, #0
 800caae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cab0:	4b11      	ldr	r3, [pc, #68]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cab6:	4b10      	ldr	r3, [pc, #64]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cab8:	2200      	movs	r2, #0
 800caba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cabc:	4b0e      	ldr	r3, [pc, #56]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cabe:	220c      	movs	r2, #12
 800cac0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cac2:	4b0d      	ldr	r3, [pc, #52]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cac8:	4b0b      	ldr	r3, [pc, #44]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800caca:	2200      	movs	r2, #0
 800cacc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cace:	4b0a      	ldr	r3, [pc, #40]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cad4:	4b08      	ldr	r3, [pc, #32]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cad6:	2208      	movs	r2, #8
 800cad8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800cada:	4b07      	ldr	r3, [pc, #28]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cadc:	2280      	movs	r2, #128	@ 0x80
 800cade:	0212      	lsls	r2, r2, #8
 800cae0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cae2:	4b05      	ldr	r3, [pc, #20]	@ (800caf8 <MX_USART1_UART_Init+0x60>)
 800cae4:	0018      	movs	r0, r3
 800cae6:	f008 fd67 	bl	80155b8 <HAL_UART_Init>
 800caea:	1e03      	subs	r3, r0, #0
 800caec:	d001      	beq.n	800caf2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800caee:	f7fa fdf7 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800caf2:	46c0      	nop			@ (mov r8, r8)
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	200022e4 	.word	0x200022e4
 800cafc:	40013800 	.word	0x40013800

0800cb00 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800cb04:	4b14      	ldr	r3, [pc, #80]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb06:	4a15      	ldr	r2, [pc, #84]	@ (800cb5c <MX_USART4_UART_Init+0x5c>)
 800cb08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800cb0a:	4b13      	ldr	r3, [pc, #76]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb0c:	22e1      	movs	r2, #225	@ 0xe1
 800cb0e:	0252      	lsls	r2, r2, #9
 800cb10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800cb12:	4b11      	ldr	r3, [pc, #68]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800cb18:	4b0f      	ldr	r3, [pc, #60]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800cb1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800cb24:	4b0c      	ldr	r3, [pc, #48]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb26:	220c      	movs	r2, #12
 800cb28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb2a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb30:	4b09      	ldr	r3, [pc, #36]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cb36:	4b08      	ldr	r3, [pc, #32]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb38:	2200      	movs	r2, #0
 800cb3a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb3c:	4b06      	ldr	r3, [pc, #24]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800cb42:	4b05      	ldr	r3, [pc, #20]	@ (800cb58 <MX_USART4_UART_Init+0x58>)
 800cb44:	0018      	movs	r0, r3
 800cb46:	f008 fd37 	bl	80155b8 <HAL_UART_Init>
 800cb4a:	1e03      	subs	r3, r0, #0
 800cb4c:	d001      	beq.n	800cb52 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800cb4e:	f7fa fdc7 	bl	80076e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800cb52:	46c0      	nop			@ (mov r8, r8)
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	2000239c 	.word	0x2000239c
 800cb5c:	40004c00 	.word	0x40004c00

0800cb60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b08d      	sub	sp, #52	@ 0x34
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb68:	241c      	movs	r4, #28
 800cb6a:	193b      	adds	r3, r7, r4
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	2314      	movs	r3, #20
 800cb70:	001a      	movs	r2, r3
 800cb72:	2100      	movs	r1, #0
 800cb74:	f011 fdb2 	bl	801e6dc <memset>
  if(uartHandle->Instance==LPUART1)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a8b      	ldr	r2, [pc, #556]	@ (800cdac <HAL_UART_MspInit+0x24c>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d129      	bne.n	800cbd6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800cb82:	4b8b      	ldr	r3, [pc, #556]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cb84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb86:	4b8a      	ldr	r3, [pc, #552]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cb88:	2180      	movs	r1, #128	@ 0x80
 800cb8a:	02c9      	lsls	r1, r1, #11
 800cb8c:	430a      	orrs	r2, r1
 800cb8e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb90:	4b87      	ldr	r3, [pc, #540]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb94:	4b86      	ldr	r3, [pc, #536]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cb96:	2104      	movs	r1, #4
 800cb98:	430a      	orrs	r2, r1
 800cb9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cb9c:	4b84      	ldr	r3, [pc, #528]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cba0:	2204      	movs	r2, #4
 800cba2:	4013      	ands	r3, r2
 800cba4:	61bb      	str	r3, [r7, #24]
 800cba6:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cba8:	0021      	movs	r1, r4
 800cbaa:	187b      	adds	r3, r7, r1
 800cbac:	2203      	movs	r2, #3
 800cbae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbb0:	187b      	adds	r3, r7, r1
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbb6:	187b      	adds	r3, r7, r1
 800cbb8:	2200      	movs	r2, #0
 800cbba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbbc:	187b      	adds	r3, r7, r1
 800cbbe:	2203      	movs	r2, #3
 800cbc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800cbc2:	187b      	adds	r3, r7, r1
 800cbc4:	2206      	movs	r2, #6
 800cbc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbc8:	187b      	adds	r3, r7, r1
 800cbca:	4a7a      	ldr	r2, [pc, #488]	@ (800cdb4 <HAL_UART_MspInit+0x254>)
 800cbcc:	0019      	movs	r1, r3
 800cbce:	0010      	movs	r0, r2
 800cbd0:	f001 fdb4 	bl	800e73c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800cbd4:	e0e5      	b.n	800cda2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a77      	ldr	r2, [pc, #476]	@ (800cdb8 <HAL_UART_MspInit+0x258>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d133      	bne.n	800cc48 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800cbe0:	4b73      	ldr	r3, [pc, #460]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cbe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbe4:	4b72      	ldr	r3, [pc, #456]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cbe6:	2180      	movs	r1, #128	@ 0x80
 800cbe8:	01c9      	lsls	r1, r1, #7
 800cbea:	430a      	orrs	r2, r1
 800cbec:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cbee:	4b70      	ldr	r3, [pc, #448]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cbf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbf2:	4b6f      	ldr	r3, [pc, #444]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cbf4:	2101      	movs	r1, #1
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cbfa:	4b6d      	ldr	r3, [pc, #436]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbfe:	2201      	movs	r2, #1
 800cc00:	4013      	ands	r3, r2
 800cc02:	617b      	str	r3, [r7, #20]
 800cc04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cc06:	211c      	movs	r1, #28
 800cc08:	187b      	adds	r3, r7, r1
 800cc0a:	22c0      	movs	r2, #192	@ 0xc0
 800cc0c:	00d2      	lsls	r2, r2, #3
 800cc0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc10:	187b      	adds	r3, r7, r1
 800cc12:	2202      	movs	r2, #2
 800cc14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc16:	187b      	adds	r3, r7, r1
 800cc18:	2200      	movs	r2, #0
 800cc1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc1c:	187b      	adds	r3, r7, r1
 800cc1e:	2203      	movs	r2, #3
 800cc20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800cc22:	187b      	adds	r3, r7, r1
 800cc24:	2204      	movs	r2, #4
 800cc26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc28:	187a      	adds	r2, r7, r1
 800cc2a:	23a0      	movs	r3, #160	@ 0xa0
 800cc2c:	05db      	lsls	r3, r3, #23
 800cc2e:	0011      	movs	r1, r2
 800cc30:	0018      	movs	r0, r3
 800cc32:	f001 fd83 	bl	800e73c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800cc36:	2200      	movs	r2, #0
 800cc38:	2100      	movs	r1, #0
 800cc3a:	201b      	movs	r0, #27
 800cc3c:	f001 f930 	bl	800dea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cc40:	201b      	movs	r0, #27
 800cc42:	f001 f942 	bl	800deca <HAL_NVIC_EnableIRQ>
}
 800cc46:	e0ac      	b.n	800cda2 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a5b      	ldr	r2, [pc, #364]	@ (800cdbc <HAL_UART_MspInit+0x25c>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d000      	beq.n	800cc54 <HAL_UART_MspInit+0xf4>
 800cc52:	e0a6      	b.n	800cda2 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800cc54:	4b56      	ldr	r3, [pc, #344]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc58:	4b55      	ldr	r3, [pc, #340]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc5a:	2180      	movs	r1, #128	@ 0x80
 800cc5c:	0309      	lsls	r1, r1, #12
 800cc5e:	430a      	orrs	r2, r1
 800cc60:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc62:	4b53      	ldr	r3, [pc, #332]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc66:	4b52      	ldr	r3, [pc, #328]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc68:	2101      	movs	r1, #1
 800cc6a:	430a      	orrs	r2, r1
 800cc6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cc6e:	4b50      	ldr	r3, [pc, #320]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc72:	2201      	movs	r2, #1
 800cc74:	4013      	ands	r3, r2
 800cc76:	613b      	str	r3, [r7, #16]
 800cc78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cc7a:	4b4d      	ldr	r3, [pc, #308]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc7e:	4b4c      	ldr	r3, [pc, #304]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc80:	2104      	movs	r1, #4
 800cc82:	430a      	orrs	r2, r1
 800cc84:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cc86:	4b4a      	ldr	r3, [pc, #296]	@ (800cdb0 <HAL_UART_MspInit+0x250>)
 800cc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8a:	2204      	movs	r2, #4
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]
 800cc90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800cc92:	241c      	movs	r4, #28
 800cc94:	193b      	adds	r3, r7, r4
 800cc96:	2202      	movs	r2, #2
 800cc98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc9a:	193b      	adds	r3, r7, r4
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cca0:	193b      	adds	r3, r7, r4
 800cca2:	2200      	movs	r2, #0
 800cca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cca6:	193b      	adds	r3, r7, r4
 800cca8:	2203      	movs	r2, #3
 800ccaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ccac:	193b      	adds	r3, r7, r4
 800ccae:	2206      	movs	r2, #6
 800ccb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccb2:	193a      	adds	r2, r7, r4
 800ccb4:	23a0      	movs	r3, #160	@ 0xa0
 800ccb6:	05db      	lsls	r3, r3, #23
 800ccb8:	0011      	movs	r1, r2
 800ccba:	0018      	movs	r0, r3
 800ccbc:	f001 fd3e 	bl	800e73c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ccc0:	0021      	movs	r1, r4
 800ccc2:	187b      	adds	r3, r7, r1
 800ccc4:	2280      	movs	r2, #128	@ 0x80
 800ccc6:	00d2      	lsls	r2, r2, #3
 800ccc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccca:	187b      	adds	r3, r7, r1
 800cccc:	2202      	movs	r2, #2
 800ccce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccd0:	187b      	adds	r3, r7, r1
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ccd6:	187b      	adds	r3, r7, r1
 800ccd8:	2203      	movs	r2, #3
 800ccda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800ccdc:	187b      	adds	r3, r7, r1
 800ccde:	2206      	movs	r2, #6
 800cce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cce2:	187b      	adds	r3, r7, r1
 800cce4:	4a33      	ldr	r2, [pc, #204]	@ (800cdb4 <HAL_UART_MspInit+0x254>)
 800cce6:	0019      	movs	r1, r3
 800cce8:	0010      	movs	r0, r2
 800ccea:	f001 fd27 	bl	800e73c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800ccee:	4b34      	ldr	r3, [pc, #208]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800ccf0:	4a34      	ldr	r2, [pc, #208]	@ (800cdc4 <HAL_UART_MspInit+0x264>)
 800ccf2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800ccf4:	4b32      	ldr	r3, [pc, #200]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800ccf6:	220c      	movs	r2, #12
 800ccf8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ccfa:	4b31      	ldr	r3, [pc, #196]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd00:	4b2f      	ldr	r3, [pc, #188]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cd06:	4b2e      	ldr	r3, [pc, #184]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd08:	2280      	movs	r2, #128	@ 0x80
 800cd0a:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd0c:	4b2c      	ldr	r3, [pc, #176]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cd12:	4b2b      	ldr	r3, [pc, #172]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800cd18:	4b29      	ldr	r3, [pc, #164]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cd1e:	4b28      	ldr	r3, [pc, #160]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800cd24:	4b26      	ldr	r3, [pc, #152]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd26:	0018      	movs	r0, r3
 800cd28:	f001 f8ec 	bl	800df04 <HAL_DMA_Init>
 800cd2c:	1e03      	subs	r3, r0, #0
 800cd2e:	d001      	beq.n	800cd34 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800cd30:	f7fa fcd6 	bl	80076e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a22      	ldr	r2, [pc, #136]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd38:	675a      	str	r2, [r3, #116]	@ 0x74
 800cd3a:	4b21      	ldr	r3, [pc, #132]	@ (800cdc0 <HAL_UART_MspInit+0x260>)
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800cd40:	4b21      	ldr	r3, [pc, #132]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd42:	4a22      	ldr	r2, [pc, #136]	@ (800cdcc <HAL_UART_MspInit+0x26c>)
 800cd44:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800cd46:	4b20      	ldr	r3, [pc, #128]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd48:	220c      	movs	r2, #12
 800cd4a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cd4c:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd4e:	2210      	movs	r2, #16
 800cd50:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd52:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cd58:	4b1b      	ldr	r3, [pc, #108]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd5a:	2280      	movs	r2, #128	@ 0x80
 800cd5c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd5e:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cd64:	4b18      	ldr	r3, [pc, #96]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800cd6a:	4b17      	ldr	r3, [pc, #92]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cd70:	4b15      	ldr	r3, [pc, #84]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd72:	2200      	movs	r2, #0
 800cd74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800cd76:	4b14      	ldr	r3, [pc, #80]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd78:	0018      	movs	r0, r3
 800cd7a:	f001 f8c3 	bl	800df04 <HAL_DMA_Init>
 800cd7e:	1e03      	subs	r3, r0, #0
 800cd80:	d001      	beq.n	800cd86 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800cd82:	f7fa fcad 	bl	80076e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	4a0f      	ldr	r2, [pc, #60]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd8a:	671a      	str	r2, [r3, #112]	@ 0x70
 800cd8c:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc8 <HAL_UART_MspInit+0x268>)
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800cd92:	2200      	movs	r2, #0
 800cd94:	2100      	movs	r1, #0
 800cd96:	200e      	movs	r0, #14
 800cd98:	f001 f882 	bl	800dea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800cd9c:	200e      	movs	r0, #14
 800cd9e:	f001 f894 	bl	800deca <HAL_NVIC_EnableIRQ>
}
 800cda2:	46c0      	nop			@ (mov r8, r8)
 800cda4:	46bd      	mov	sp, r7
 800cda6:	b00d      	add	sp, #52	@ 0x34
 800cda8:	bd90      	pop	{r4, r7, pc}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	40004800 	.word	0x40004800
 800cdb0:	40021000 	.word	0x40021000
 800cdb4:	50000800 	.word	0x50000800
 800cdb8:	40013800 	.word	0x40013800
 800cdbc:	40004c00 	.word	0x40004c00
 800cdc0:	20002454 	.word	0x20002454
 800cdc4:	4002006c 	.word	0x4002006c
 800cdc8:	2000249c 	.word	0x2000249c
 800cdcc:	40020080 	.word	0x40020080

0800cdd0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b086      	sub	sp, #24
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800cdd8:	f000 fbec 	bl	800d5b4 <HAL_GetTick>
 800cddc:	0003      	movs	r3, r0
 800cdde:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800cde0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce54 <TimestampIsReached+0x84>)
 800cde2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d307      	bcc.n	800cdfc <TimestampIsReached+0x2c>
 800cdec:	697a      	ldr	r2, [r7, #20]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d901      	bls.n	800cdfc <TimestampIsReached+0x2c>
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	e000      	b.n	800cdfe <TimestampIsReached+0x2e>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	230f      	movs	r3, #15
 800ce00:	18fb      	adds	r3, r7, r3
 800ce02:	701a      	strb	r2, [r3, #0]
 800ce04:	781a      	ldrb	r2, [r3, #0]
 800ce06:	2101      	movs	r1, #1
 800ce08:	400a      	ands	r2, r1
 800ce0a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800ce0c:	697a      	ldr	r2, [r7, #20]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d207      	bcs.n	800ce24 <TimestampIsReached+0x54>
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d201      	bcs.n	800ce24 <TimestampIsReached+0x54>
 800ce20:	2201      	movs	r2, #1
 800ce22:	e000      	b.n	800ce26 <TimestampIsReached+0x56>
 800ce24:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800ce26:	200e      	movs	r0, #14
 800ce28:	183b      	adds	r3, r7, r0
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	781a      	ldrb	r2, [r3, #0]
 800ce2e:	2101      	movs	r1, #1
 800ce30:	400a      	ands	r2, r1
 800ce32:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800ce34:	230f      	movs	r3, #15
 800ce36:	18fb      	adds	r3, r7, r3
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d103      	bne.n	800ce46 <TimestampIsReached+0x76>
 800ce3e:	183b      	adds	r3, r7, r0
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d001      	beq.n	800ce4a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e000      	b.n	800ce4c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	0018      	movs	r0, r3
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	b006      	add	sp, #24
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	7fffffff 	.word	0x7fffffff

0800ce58 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800ce60:	f000 fba8 	bl	800d5b4 <HAL_GetTick>
 800ce64:	0002      	movs	r2, r0
 800ce66:	4904      	ldr	r1, [pc, #16]	@ (800ce78 <AddTimestamp+0x20>)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	0018      	movs	r0, r3
 800ce6c:	f011 faf2 	bl	801e454 <siprintf>
}
 800ce70:	46c0      	nop			@ (mov r8, r8)
 800ce72:	46bd      	mov	sp, r7
 800ce74:	b002      	add	sp, #8
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	08022d58 	.word	0x08022d58

0800ce7c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800ce7c:	b40c      	push	{r2, r3}
 800ce7e:	b5b0      	push	{r4, r5, r7, lr}
 800ce80:	b0a4      	sub	sp, #144	@ 0x90
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	0002      	movs	r2, r0
 800ce86:	6039      	str	r1, [r7, #0]
 800ce88:	1dfb      	adds	r3, r7, #7
 800ce8a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800ce8c:	4b23      	ldr	r3, [pc, #140]	@ (800cf1c <CreateLine+0xa0>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	1dfa      	adds	r2, r7, #7
 800ce92:	7812      	ldrb	r2, [r2, #0]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d839      	bhi.n	800cf0c <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	4921      	ldr	r1, [pc, #132]	@ (800cf20 <CreateLine+0xa4>)
 800ce9c:	240c      	movs	r4, #12
 800ce9e:	193b      	adds	r3, r7, r4
 800cea0:	0018      	movs	r0, r3
 800cea2:	f011 fad7 	bl	801e454 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800cea6:	4b1d      	ldr	r3, [pc, #116]	@ (800cf1c <CreateLine+0xa0>)
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d909      	bls.n	800cec2 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800ceae:	193b      	adds	r3, r7, r4
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f7f3 f95b 	bl	800016c <strlen>
 800ceb6:	0002      	movs	r2, r0
 800ceb8:	193b      	adds	r3, r7, r4
 800ceba:	189b      	adds	r3, r3, r2
 800cebc:	0018      	movs	r0, r3
 800cebe:	f7ff ffcb 	bl	800ce58 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800cec2:	240c      	movs	r4, #12
 800cec4:	193b      	adds	r3, r7, r4
 800cec6:	0018      	movs	r0, r3
 800cec8:	f7f3 f950 	bl	800016c <strlen>
 800cecc:	0003      	movs	r3, r0
 800cece:	218c      	movs	r1, #140	@ 0x8c
 800ced0:	187a      	adds	r2, r7, r1
 800ced2:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800ced4:	239c      	movs	r3, #156	@ 0x9c
 800ced6:	2508      	movs	r5, #8
 800ced8:	195b      	adds	r3, r3, r5
 800ceda:	19db      	adds	r3, r3, r7
 800cedc:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800cede:	193a      	adds	r2, r7, r4
 800cee0:	187b      	adds	r3, r7, r1
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	18d0      	adds	r0, r2, r3
 800cee6:	187b      	adds	r3, r7, r1
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2280      	movs	r2, #128	@ 0x80
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	0019      	movs	r1, r3
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	2298      	movs	r2, #152	@ 0x98
 800cef4:	1952      	adds	r2, r2, r5
 800cef6:	19d2      	adds	r2, r2, r7
 800cef8:	6812      	ldr	r2, [r2, #0]
 800cefa:	f011 fb43 	bl	801e584 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800cefe:	193a      	adds	r2, r7, r4
 800cf00:	4b08      	ldr	r3, [pc, #32]	@ (800cf24 <CreateLine+0xa8>)
 800cf02:	0011      	movs	r1, r2
 800cf04:	0018      	movs	r0, r3
 800cf06:	f011 fa35 	bl	801e374 <iprintf>
 800cf0a:	e000      	b.n	800cf0e <CreateLine+0x92>
    return;
 800cf0c:	46c0      	nop			@ (mov r8, r8)
}
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	b024      	add	sp, #144	@ 0x90
 800cf12:	bcb0      	pop	{r4, r5, r7}
 800cf14:	bc08      	pop	{r3}
 800cf16:	b002      	add	sp, #8
 800cf18:	4718      	bx	r3
 800cf1a:	46c0      	nop			@ (mov r8, r8)
 800cf1c:	200000d0 	.word	0x200000d0
 800cf20:	08022d64 	.word	0x08022d64
 800cf24:	08022d68 	.word	0x08022d68

0800cf28 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	68b9      	ldr	r1, [r7, #8]
 800cf3a:	4804      	ldr	r0, [pc, #16]	@ (800cf4c <_write+0x24>)
 800cf3c:	2364      	movs	r3, #100	@ 0x64
 800cf3e:	f008 fba1 	bl	8015684 <HAL_UART_Transmit>
  return count;
 800cf42:	687b      	ldr	r3, [r7, #4]
}
 800cf44:	0018      	movs	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	b004      	add	sp, #16
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	200022e4 	.word	0x200022e4

0800cf50 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	0002      	movs	r2, r0
 800cf58:	1dfb      	adds	r3, r7, #7
 800cf5a:	701a      	strb	r2, [r3, #0]
 800cf5c:	4b03      	ldr	r3, [pc, #12]	@ (800cf6c <SetVerboseLevel+0x1c>)
 800cf5e:	1dfa      	adds	r2, r7, #7
 800cf60:	7812      	ldrb	r2, [r2, #0]
 800cf62:	701a      	strb	r2, [r3, #0]
 800cf64:	46c0      	nop			@ (mov r8, r8)
 800cf66:	46bd      	mov	sp, r7
 800cf68:	b002      	add	sp, #8
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	200000d0 	.word	0x200000d0

0800cf70 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cf74:	f000 fb1e 	bl	800d5b4 <HAL_GetTick>
 800cf78:	0003      	movs	r3, r0
}
 800cf7a:	0018      	movs	r0, r3
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cf86:	4a0f      	ldr	r2, [pc, #60]	@ (800cfc4 <BinaryReleaseInfo+0x44>)
 800cf88:	4b0f      	ldr	r3, [pc, #60]	@ (800cfc8 <BinaryReleaseInfo+0x48>)
 800cf8a:	0019      	movs	r1, r3
 800cf8c:	2002      	movs	r0, #2
 800cf8e:	f7ff ff75 	bl	800ce7c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800cf92:	480e      	ldr	r0, [pc, #56]	@ (800cfcc <BinaryReleaseInfo+0x4c>)
 800cf94:	4a0e      	ldr	r2, [pc, #56]	@ (800cfd0 <BinaryReleaseInfo+0x50>)
 800cf96:	490c      	ldr	r1, [pc, #48]	@ (800cfc8 <BinaryReleaseInfo+0x48>)
 800cf98:	4b0e      	ldr	r3, [pc, #56]	@ (800cfd4 <BinaryReleaseInfo+0x54>)
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	0003      	movs	r3, r0
 800cf9e:	2002      	movs	r0, #2
 800cfa0:	f7ff ff6c 	bl	800ce7c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w49");
 800cfa4:	4a0c      	ldr	r2, [pc, #48]	@ (800cfd8 <BinaryReleaseInfo+0x58>)
 800cfa6:	4b08      	ldr	r3, [pc, #32]	@ (800cfc8 <BinaryReleaseInfo+0x48>)
 800cfa8:	0019      	movs	r1, r3
 800cfaa:	2002      	movs	r0, #2
 800cfac:	f7ff ff66 	bl	800ce7c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800cfb0:	4b0a      	ldr	r3, [pc, #40]	@ (800cfdc <BinaryReleaseInfo+0x5c>)
 800cfb2:	4a0b      	ldr	r2, [pc, #44]	@ (800cfe0 <BinaryReleaseInfo+0x60>)
 800cfb4:	4904      	ldr	r1, [pc, #16]	@ (800cfc8 <BinaryReleaseInfo+0x48>)
 800cfb6:	2002      	movs	r0, #2
 800cfb8:	f7ff ff60 	bl	800ce7c <CreateLine>
}
 800cfbc:	46c0      	nop			@ (mov r8, r8)
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	46c0      	nop			@ (mov r8, r8)
 800cfc4:	08022d70 	.word	0x08022d70
 800cfc8:	08022d9c 	.word	0x08022d9c
 800cfcc:	08022da0 	.word	0x08022da0
 800cfd0:	08022dac 	.word	0x08022dac
 800cfd4:	08022dc0 	.word	0x08022dc0
 800cfd8:	08022dcc 	.word	0x08022dcc
 800cfdc:	08022dd8 	.word	0x08022dd8
 800cfe0:	08022de0 	.word	0x08022de0

0800cfe4 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68ba      	ldr	r2, [r7, #8]
 800cff4:	68f9      	ldr	r1, [r7, #12]
 800cff6:	4803      	ldr	r0, [pc, #12]	@ (800d004 <errorHandler+0x20>)
 800cff8:	f011 f9bc 	bl	801e374 <iprintf>
//    while (true)
//    {
//    }
}
 800cffc:	46c0      	nop			@ (mov r8, r8)
 800cffe:	46bd      	mov	sp, r7
 800d000:	b004      	add	sp, #16
 800d002:	bd80      	pop	{r7, pc}
 800d004:	08022df8 	.word	0x08022df8

0800d008 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d008:	b590      	push	{r4, r7, lr}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6039      	str	r1, [r7, #0]
 800d010:	0011      	movs	r1, r2
 800d012:	1dfb      	adds	r3, r7, #7
 800d014:	1c02      	adds	r2, r0, #0
 800d016:	701a      	strb	r2, [r3, #0]
 800d018:	1dbb      	adds	r3, r7, #6
 800d01a:	1c0a      	adds	r2, r1, #0
 800d01c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800d01e:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <ReadRegister+0x40>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00a      	beq.n	800d03c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800d026:	4b08      	ldr	r3, [pc, #32]	@ (800d048 <ReadRegister+0x40>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	1dba      	adds	r2, r7, #6
 800d02c:	7814      	ldrb	r4, [r2, #0]
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	1dfa      	adds	r2, r7, #7
 800d032:	7810      	ldrb	r0, [r2, #0]
 800d034:	0022      	movs	r2, r4
 800d036:	4798      	blx	r3
 800d038:	0003      	movs	r3, r0
 800d03a:	e000      	b.n	800d03e <ReadRegister+0x36>
	}
	return false;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	0018      	movs	r0, r3
 800d040:	46bd      	mov	sp, r7
 800d042:	b003      	add	sp, #12
 800d044:	bd90      	pop	{r4, r7, pc}
 800d046:	46c0      	nop			@ (mov r8, r8)
 800d048:	200024e4 	.word	0x200024e4

0800d04c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d04c:	b590      	push	{r4, r7, lr}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6039      	str	r1, [r7, #0]
 800d054:	0011      	movs	r1, r2
 800d056:	1dfb      	adds	r3, r7, #7
 800d058:	1c02      	adds	r2, r0, #0
 800d05a:	701a      	strb	r2, [r3, #0]
 800d05c:	1dbb      	adds	r3, r7, #6
 800d05e:	1c0a      	adds	r2, r1, #0
 800d060:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d062:	4b0a      	ldr	r3, [pc, #40]	@ (800d08c <WriteRegister+0x40>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800d06a:	4b08      	ldr	r3, [pc, #32]	@ (800d08c <WriteRegister+0x40>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	1dba      	adds	r2, r7, #6
 800d070:	7814      	ldrb	r4, [r2, #0]
 800d072:	6839      	ldr	r1, [r7, #0]
 800d074:	1dfa      	adds	r2, r7, #7
 800d076:	7810      	ldrb	r0, [r2, #0]
 800d078:	0022      	movs	r2, r4
 800d07a:	4798      	blx	r3
 800d07c:	0003      	movs	r3, r0
 800d07e:	e000      	b.n	800d082 <WriteRegister+0x36>
  }
  return false;
 800d080:	2300      	movs	r3, #0
}
 800d082:	0018      	movs	r0, r3
 800d084:	46bd      	mov	sp, r7
 800d086:	b003      	add	sp, #12
 800d088:	bd90      	pop	{r4, r7, pc}
 800d08a:	46c0      	nop			@ (mov r8, r8)
 800d08c:	200024e8 	.word	0x200024e8

0800d090 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	000a      	movs	r2, r1
 800d09a:	1cfb      	adds	r3, r7, #3
 800d09c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800d09e:	230f      	movs	r3, #15
 800d0a0:	18fb      	adds	r3, r7, r3
 800d0a2:	22ff      	movs	r2, #255	@ 0xff
 800d0a4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800d0a6:	230e      	movs	r3, #14
 800d0a8:	18fb      	adds	r3, r7, r3
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	701a      	strb	r2, [r3, #0]
 800d0ae:	e037      	b.n	800d120 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800d0b0:	230e      	movs	r3, #14
 800d0b2:	18fb      	adds	r3, r7, r3
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	18d3      	adds	r3, r2, r3
 800d0ba:	7819      	ldrb	r1, [r3, #0]
 800d0bc:	220f      	movs	r2, #15
 800d0be:	18bb      	adds	r3, r7, r2
 800d0c0:	18ba      	adds	r2, r7, r2
 800d0c2:	7812      	ldrb	r2, [r2, #0]
 800d0c4:	404a      	eors	r2, r1
 800d0c6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800d0c8:	230d      	movs	r3, #13
 800d0ca:	18fb      	adds	r3, r7, r3
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	701a      	strb	r2, [r3, #0]
 800d0d0:	e01b      	b.n	800d10a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800d0d2:	210f      	movs	r1, #15
 800d0d4:	187b      	adds	r3, r7, r1
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	b25b      	sxtb	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	da09      	bge.n	800d0f2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800d0de:	187b      	adds	r3, r7, r1
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	b25b      	sxtb	r3, r3
 800d0e6:	2231      	movs	r2, #49	@ 0x31
 800d0e8:	4053      	eors	r3, r2
 800d0ea:	b25a      	sxtb	r2, r3
 800d0ec:	187b      	adds	r3, r7, r1
 800d0ee:	701a      	strb	r2, [r3, #0]
 800d0f0:	e005      	b.n	800d0fe <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800d0f2:	230f      	movs	r3, #15
 800d0f4:	18fa      	adds	r2, r7, r3
 800d0f6:	18fb      	adds	r3, r7, r3
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	18db      	adds	r3, r3, r3
 800d0fc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800d0fe:	210d      	movs	r1, #13
 800d100:	187b      	adds	r3, r7, r1
 800d102:	781a      	ldrb	r2, [r3, #0]
 800d104:	187b      	adds	r3, r7, r1
 800d106:	3201      	adds	r2, #1
 800d108:	701a      	strb	r2, [r3, #0]
 800d10a:	230d      	movs	r3, #13
 800d10c:	18fb      	adds	r3, r7, r3
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b07      	cmp	r3, #7
 800d112:	d9de      	bls.n	800d0d2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800d114:	210e      	movs	r1, #14
 800d116:	187b      	adds	r3, r7, r1
 800d118:	781a      	ldrb	r2, [r3, #0]
 800d11a:	187b      	adds	r3, r7, r1
 800d11c:	3201      	adds	r2, #1
 800d11e:	701a      	strb	r2, [r3, #0]
 800d120:	230e      	movs	r3, #14
 800d122:	18fa      	adds	r2, r7, r3
 800d124:	1cfb      	adds	r3, r7, #3
 800d126:	7812      	ldrb	r2, [r2, #0]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d3c0      	bcc.n	800d0b0 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800d12e:	230f      	movs	r3, #15
 800d130:	18fb      	adds	r3, r7, r3
 800d132:	781b      	ldrb	r3, [r3, #0]
}
 800d134:	0018      	movs	r0, r3
 800d136:	46bd      	mov	sp, r7
 800d138:	b004      	add	sp, #16
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800d146:	4b0a      	ldr	r3, [pc, #40]	@ (800d170 <HIDS_Init+0x34>)
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800d14c:	4b09      	ldr	r3, [pc, #36]	@ (800d174 <HIDS_Init+0x38>)
 800d14e:	683a      	ldr	r2, [r7, #0]
 800d150:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800d152:	4b09      	ldr	r3, [pc, #36]	@ (800d178 <HIDS_Init+0x3c>)
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	0018      	movs	r0, r3
 800d158:	f000 f8da 	bl	800d310 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800d15c:	4b07      	ldr	r3, [pc, #28]	@ (800d17c <HIDS_Init+0x40>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	0018      	movs	r0, r3
 800d162:	f000 f82b 	bl	800d1bc <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800d166:	46c0      	nop			@ (mov r8, r8)
 800d168:	46bd      	mov	sp, r7
 800d16a:	b002      	add	sp, #8
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	46c0      	nop			@ (mov r8, r8)
 800d170:	200024e4 	.word	0x200024e4
 800d174:	200024e8 	.word	0x200024e8
 800d178:	200000d2 	.word	0x200000d2
 800d17c:	200000d1 	.word	0x200000d1

0800d180 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800d180:	b580      	push	{r7, lr}
 800d182:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800d184:	f7ff fef4 	bl	800cf70 <GetCurrentHalTicks>
 800d188:	0002      	movs	r2, r0
 800d18a:	4b08      	ldr	r3, [pc, #32]	@ (800d1ac <HIDS_StartMeasurement+0x2c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	18d2      	adds	r2, r2, r3
 800d190:	4b07      	ldr	r3, [pc, #28]	@ (800d1b0 <HIDS_StartMeasurement+0x30>)
 800d192:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800d194:	4b07      	ldr	r3, [pc, #28]	@ (800d1b4 <HIDS_StartMeasurement+0x34>)
 800d196:	2201      	movs	r2, #1
 800d198:	0019      	movs	r1, r3
 800d19a:	2044      	movs	r0, #68	@ 0x44
 800d19c:	f7ff ff56 	bl	800d04c <WriteRegister>
  MeasurementDone = false;
 800d1a0:	4b05      	ldr	r3, [pc, #20]	@ (800d1b8 <HIDS_StartMeasurement+0x38>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	701a      	strb	r2, [r3, #0]
}
 800d1a6:	46c0      	nop			@ (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	200000d8 	.word	0x200000d8
 800d1b0:	200000d4 	.word	0x200000d4
 800d1b4:	200000d2 	.word	0x200000d2
 800d1b8:	200024fa 	.word	0x200024fa

0800d1bc <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	0002      	movs	r2, r0
 800d1c4:	1dfb      	adds	r3, r7, #7
 800d1c6:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800d1c8:	4b03      	ldr	r3, [pc, #12]	@ (800d1d8 <HIDS_SetHeaterMode+0x1c>)
 800d1ca:	1dfa      	adds	r2, r7, #7
 800d1cc:	7812      	ldrb	r2, [r2, #0]
 800d1ce:	701a      	strb	r2, [r3, #0]
}
 800d1d0:	46c0      	nop			@ (mov r8, r8)
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	b002      	add	sp, #8
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	200000d1 	.word	0x200000d1

0800d1dc <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800d1dc:	b590      	push	{r4, r7, lr}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	781a      	ldrb	r2, [r3, #0]
 800d1e8:	210c      	movs	r1, #12
 800d1ea:	187b      	adds	r3, r7, r1
 800d1ec:	701a      	strb	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	785a      	ldrb	r2, [r3, #1]
 800d1f2:	187b      	adds	r3, r7, r1
 800d1f4:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800d1f6:	240f      	movs	r4, #15
 800d1f8:	193b      	adds	r3, r7, r4
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	7892      	ldrb	r2, [r2, #2]
 800d1fe:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800d200:	187b      	adds	r3, r7, r1
 800d202:	2102      	movs	r1, #2
 800d204:	0018      	movs	r0, r3
 800d206:	f7ff ff43 	bl	800d090 <CalculateCRC>
 800d20a:	0003      	movs	r3, r0
 800d20c:	001a      	movs	r2, r3
 800d20e:	193b      	adds	r3, r7, r4
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	4293      	cmp	r3, r2
 800d214:	d007      	beq.n	800d226 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800d216:	4a1a      	ldr	r2, [pc, #104]	@ (800d280 <CheckCRC+0xa4>)
 800d218:	4b1a      	ldr	r3, [pc, #104]	@ (800d284 <CheckCRC+0xa8>)
 800d21a:	0019      	movs	r1, r3
 800d21c:	2001      	movs	r0, #1
 800d21e:	f7ff fe2d 	bl	800ce7c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800d222:	2300      	movs	r3, #0
 800d224:	e027      	b.n	800d276 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	78da      	ldrb	r2, [r3, #3]
 800d22a:	2108      	movs	r1, #8
 800d22c:	187b      	adds	r3, r7, r1
 800d22e:	701a      	strb	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	791a      	ldrb	r2, [r3, #4]
 800d234:	187b      	adds	r3, r7, r1
 800d236:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800d238:	240e      	movs	r4, #14
 800d23a:	193b      	adds	r3, r7, r4
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	7952      	ldrb	r2, [r2, #5]
 800d240:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800d242:	187b      	adds	r3, r7, r1
 800d244:	2102      	movs	r1, #2
 800d246:	0018      	movs	r0, r3
 800d248:	f7ff ff22 	bl	800d090 <CalculateCRC>
 800d24c:	0003      	movs	r3, r0
 800d24e:	001a      	movs	r2, r3
 800d250:	193b      	adds	r3, r7, r4
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	4293      	cmp	r3, r2
 800d256:	d00d      	beq.n	800d274 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800d258:	4a0b      	ldr	r2, [pc, #44]	@ (800d288 <CheckCRC+0xac>)
 800d25a:	4b0a      	ldr	r3, [pc, #40]	@ (800d284 <CheckCRC+0xa8>)
 800d25c:	0019      	movs	r1, r3
 800d25e:	2001      	movs	r0, #1
 800d260:	f7ff fe0c 	bl	800ce7c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800d264:	4a09      	ldr	r2, [pc, #36]	@ (800d28c <CheckCRC+0xb0>)
 800d266:	4b0a      	ldr	r3, [pc, #40]	@ (800d290 <CheckCRC+0xb4>)
 800d268:	2170      	movs	r1, #112	@ 0x70
 800d26a:	0018      	movs	r0, r3
 800d26c:	f7ff feba 	bl	800cfe4 <errorHandler>
		return false;
 800d270:	2300      	movs	r3, #0
 800d272:	e000      	b.n	800d276 <CheckCRC+0x9a>
	}
	return true;
 800d274:	2301      	movs	r3, #1
}
 800d276:	0018      	movs	r0, r3
 800d278:	46bd      	mov	sp, r7
 800d27a:	b005      	add	sp, #20
 800d27c:	bd90      	pop	{r4, r7, pc}
 800d27e:	46c0      	nop			@ (mov r8, r8)
 800d280:	08022e44 	.word	0x08022e44
 800d284:	08022e6c 	.word	0x08022e6c
 800d288:	08022e70 	.word	0x08022e70
 800d28c:	08022e9c 	.word	0x08022e9c
 800d290:	08023368 	.word	0x08023368

0800d294 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800d29a:	1dbb      	adds	r3, r7, #6
 800d29c:	2289      	movs	r2, #137	@ 0x89
 800d29e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800d2a0:	1dbb      	adds	r3, r7, #6
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	0019      	movs	r1, r3
 800d2a6:	2044      	movs	r0, #68	@ 0x44
 800d2a8:	f7ff fed0 	bl	800d04c <WriteRegister>
	HAL_Delay(30);
 800d2ac:	201e      	movs	r0, #30
 800d2ae:	f000 f98b 	bl	800d5c8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800d2b2:	4b14      	ldr	r3, [pc, #80]	@ (800d304 <HIDS_DeviceConnected+0x70>)
 800d2b4:	2206      	movs	r2, #6
 800d2b6:	0019      	movs	r1, r3
 800d2b8:	2044      	movs	r0, #68	@ 0x44
 800d2ba:	f7ff fea5 	bl	800d008 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d2be:	1dfb      	adds	r3, r7, #7
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]
 800d2c4:	e011      	b.n	800d2ea <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800d2c6:	1dfb      	adds	r3, r7, #7
 800d2c8:	7818      	ldrb	r0, [r3, #0]
 800d2ca:	1dfb      	adds	r3, r7, #7
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	4a0d      	ldr	r2, [pc, #52]	@ (800d304 <HIDS_DeviceConnected+0x70>)
 800d2d0:	5cd3      	ldrb	r3, [r2, r3]
 800d2d2:	4a0d      	ldr	r2, [pc, #52]	@ (800d308 <HIDS_DeviceConnected+0x74>)
 800d2d4:	490d      	ldr	r1, [pc, #52]	@ (800d30c <HIDS_DeviceConnected+0x78>)
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	0003      	movs	r3, r0
 800d2da:	2002      	movs	r0, #2
 800d2dc:	f7ff fdce 	bl	800ce7c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d2e0:	1dfb      	adds	r3, r7, #7
 800d2e2:	781a      	ldrb	r2, [r3, #0]
 800d2e4:	1dfb      	adds	r3, r7, #7
 800d2e6:	3201      	adds	r2, #1
 800d2e8:	701a      	strb	r2, [r3, #0]
 800d2ea:	1dfb      	adds	r3, r7, #7
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b05      	cmp	r3, #5
 800d2f0:	d9e9      	bls.n	800d2c6 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800d2f2:	4b04      	ldr	r3, [pc, #16]	@ (800d304 <HIDS_DeviceConnected+0x70>)
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	f7ff ff71 	bl	800d1dc <CheckCRC>
 800d2fa:	0003      	movs	r3, r0
}
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	46bd      	mov	sp, r7
 800d300:	b002      	add	sp, #8
 800d302:	bd80      	pop	{r7, pc}
 800d304:	200024ec 	.word	0x200024ec
 800d308:	08022eb4 	.word	0x08022eb4
 800d30c:	08022e40 	.word	0x08022e40

0800d310 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	0002      	movs	r2, r0
 800d318:	1dfb      	adds	r3, r7, #7
 800d31a:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800d31c:	4b03      	ldr	r3, [pc, #12]	@ (800d32c <HIDS_SetMeasurementMode+0x1c>)
 800d31e:	1dfa      	adds	r2, r7, #7
 800d320:	7812      	ldrb	r2, [r2, #0]
 800d322:	701a      	strb	r2, [r3, #0]
}
 800d324:	46c0      	nop			@ (mov r8, r8)
 800d326:	46bd      	mov	sp, r7
 800d328:	b002      	add	sp, #8
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	200000d2 	.word	0x200000d2

0800d330 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800d334:	4b04      	ldr	r3, [pc, #16]	@ (800d348 <HIDS_MeasurementReady+0x18>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	0018      	movs	r0, r3
 800d33a:	f7ff fd49 	bl	800cdd0 <TimestampIsReached>
 800d33e:	0003      	movs	r3, r0
}
 800d340:	0018      	movs	r0, r3
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	46c0      	nop			@ (mov r8, r8)
 800d348:	200000d4 	.word	0x200000d4

0800d34c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800d34c:	b590      	push	{r4, r7, lr}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800d356:	4b49      	ldr	r3, [pc, #292]	@ (800d47c <HIDS_GetMeasurementValues+0x130>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <HIDS_GetMeasurementValues+0x16>
 800d35e:	2301      	movs	r3, #1
 800d360:	e087      	b.n	800d472 <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800d362:	f7ff ffe5 	bl	800d330 <HIDS_MeasurementReady>
 800d366:	0003      	movs	r3, r0
 800d368:	001a      	movs	r2, r3
 800d36a:	2301      	movs	r3, #1
 800d36c:	4053      	eors	r3, r2
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <HIDS_GetMeasurementValues+0x2c>
 800d374:	2300      	movs	r3, #0
 800d376:	e07c      	b.n	800d472 <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800d378:	2316      	movs	r3, #22
 800d37a:	18fc      	adds	r4, r7, r3
 800d37c:	4b40      	ldr	r3, [pc, #256]	@ (800d480 <HIDS_GetMeasurementValues+0x134>)
 800d37e:	2206      	movs	r2, #6
 800d380:	0019      	movs	r1, r3
 800d382:	2044      	movs	r0, #68	@ 0x44
 800d384:	f7ff fe40 	bl	800d008 <ReadRegister>
 800d388:	0003      	movs	r3, r0
 800d38a:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800d38c:	4b3c      	ldr	r3, [pc, #240]	@ (800d480 <HIDS_GetMeasurementValues+0x134>)
 800d38e:	0018      	movs	r0, r3
 800d390:	f7ff ff24 	bl	800d1dc <CheckCRC>
 800d394:	0003      	movs	r3, r0
 800d396:	001a      	movs	r2, r3
 800d398:	2301      	movs	r3, #1
 800d39a:	4053      	eors	r3, r2
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d011      	beq.n	800d3c6 <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800d3a2:	2317      	movs	r3, #23
 800d3a4:	18fb      	adds	r3, r7, r3
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	701a      	strb	r2, [r3, #0]
 800d3aa:	e005      	b.n	800d3b8 <HIDS_GetMeasurementValues+0x6c>
 800d3ac:	2117      	movs	r1, #23
 800d3ae:	187b      	adds	r3, r7, r1
 800d3b0:	781a      	ldrb	r2, [r3, #0]
 800d3b2:	187b      	adds	r3, r7, r1
 800d3b4:	3201      	adds	r2, #1
 800d3b6:	701a      	strb	r2, [r3, #0]
 800d3b8:	2317      	movs	r3, #23
 800d3ba:	18fb      	adds	r3, r7, r3
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	2b05      	cmp	r3, #5
 800d3c0:	d9f4      	bls.n	800d3ac <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e055      	b.n	800d472 <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800d3c6:	4b2e      	ldr	r3, [pc, #184]	@ (800d480 <HIDS_GetMeasurementValues+0x134>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	021b      	lsls	r3, r3, #8
 800d3cc:	4a2c      	ldr	r2, [pc, #176]	@ (800d480 <HIDS_GetMeasurementValues+0x134>)
 800d3ce:	7852      	ldrb	r2, [r2, #1]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	22af      	movs	r2, #175	@ 0xaf
 800d3d4:	4353      	muls	r3, r2
 800d3d6:	0018      	movs	r0, r3
 800d3d8:	f7f5 fff2 	bl	80033c0 <__aeabi_i2d>
 800d3dc:	2200      	movs	r2, #0
 800d3de:	4b29      	ldr	r3, [pc, #164]	@ (800d484 <HIDS_GetMeasurementValues+0x138>)
 800d3e0:	f7f4 fce8 	bl	8001db4 <__aeabi_ddiv>
 800d3e4:	0002      	movs	r2, r0
 800d3e6:	000b      	movs	r3, r1
 800d3e8:	0010      	movs	r0, r2
 800d3ea:	0019      	movs	r1, r3
 800d3ec:	f7f6 f882 	bl	80034f4 <__aeabi_d2f>
 800d3f0:	1c03      	adds	r3, r0, #0
 800d3f2:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800d3f4:	4924      	ldr	r1, [pc, #144]	@ (800d488 <HIDS_GetMeasurementValues+0x13c>)
 800d3f6:	6938      	ldr	r0, [r7, #16]
 800d3f8:	f7f3 ff10 	bl	800121c <__aeabi_fsub>
 800d3fc:	1c03      	adds	r3, r0, #0
 800d3fe:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800d400:	4b1f      	ldr	r3, [pc, #124]	@ (800d480 <HIDS_GetMeasurementValues+0x134>)
 800d402:	78db      	ldrb	r3, [r3, #3]
 800d404:	021b      	lsls	r3, r3, #8
 800d406:	4a1e      	ldr	r2, [pc, #120]	@ (800d480 <HIDS_GetMeasurementValues+0x134>)
 800d408:	7912      	ldrb	r2, [r2, #4]
 800d40a:	431a      	orrs	r2, r3
 800d40c:	0013      	movs	r3, r2
 800d40e:	015b      	lsls	r3, r3, #5
 800d410:	1a9b      	subs	r3, r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	189b      	adds	r3, r3, r2
 800d416:	0018      	movs	r0, r3
 800d418:	f7f5 ffd2 	bl	80033c0 <__aeabi_i2d>
 800d41c:	2200      	movs	r2, #0
 800d41e:	4b19      	ldr	r3, [pc, #100]	@ (800d484 <HIDS_GetMeasurementValues+0x138>)
 800d420:	f7f4 fcc8 	bl	8001db4 <__aeabi_ddiv>
 800d424:	0002      	movs	r2, r0
 800d426:	000b      	movs	r3, r1
 800d428:	0010      	movs	r0, r2
 800d42a:	0019      	movs	r1, r3
 800d42c:	f7f6 f862 	bl	80034f4 <__aeabi_d2f>
 800d430:	1c03      	adds	r3, r0, #0
 800d432:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800d434:	4915      	ldr	r1, [pc, #84]	@ (800d48c <HIDS_GetMeasurementValues+0x140>)
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7f3 fef0 	bl	800121c <__aeabi_fsub>
 800d43c:	1c03      	adds	r3, r0, #0
 800d43e:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	693a      	ldr	r2, [r7, #16]
 800d444:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68fa      	ldr	r2, [r7, #12]
 800d44a:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	0011      	movs	r1, r2
 800d452:	0018      	movs	r0, r3
 800d454:	f7fd fcfa 	bl	800ae4c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	1c11      	adds	r1, r2, #0
 800d45e:	1c18      	adds	r0, r3, #0
 800d460:	f7f6 fa26 	bl	80038b0 <ESP_GetHT>

   measurements = 0;
 800d464:	4b0a      	ldr	r3, [pc, #40]	@ (800d490 <HIDS_GetMeasurementValues+0x144>)
 800d466:	2200      	movs	r2, #0
 800d468:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800d46a:	4b04      	ldr	r3, [pc, #16]	@ (800d47c <HIDS_GetMeasurementValues+0x130>)
 800d46c:	2201      	movs	r2, #1
 800d46e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800d470:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800d472:	0018      	movs	r0, r3
 800d474:	46bd      	mov	sp, r7
 800d476:	b007      	add	sp, #28
 800d478:	bd90      	pop	{r4, r7, pc}
 800d47a:	46c0      	nop			@ (mov r8, r8)
 800d47c:	200024fa 	.word	0x200024fa
 800d480:	200024f4 	.word	0x200024f4
 800d484:	40efffe0 	.word	0x40efffe0
 800d488:	42340000 	.word	0x42340000
 800d48c:	40c00000 	.word	0x40c00000
 800d490:	200024fc 	.word	0x200024fc

0800d494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800d494:	480d      	ldr	r0, [pc, #52]	@ (800d4cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800d496:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800d498:	f7ff f8f0 	bl	800c67c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d49c:	480c      	ldr	r0, [pc, #48]	@ (800d4d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800d49e:	490d      	ldr	r1, [pc, #52]	@ (800d4d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d4a0:	4a0d      	ldr	r2, [pc, #52]	@ (800d4d8 <LoopForever+0xe>)
  movs r3, #0
 800d4a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d4a4:	e002      	b.n	800d4ac <LoopCopyDataInit>

0800d4a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d4a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d4a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d4aa:	3304      	adds	r3, #4

0800d4ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d4ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d4ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d4b0:	d3f9      	bcc.n	800d4a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d4b2:	4a0a      	ldr	r2, [pc, #40]	@ (800d4dc <LoopForever+0x12>)
  ldr r4, =_ebss
 800d4b4:	4c0a      	ldr	r4, [pc, #40]	@ (800d4e0 <LoopForever+0x16>)
  movs r3, #0
 800d4b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d4b8:	e001      	b.n	800d4be <LoopFillZerobss>

0800d4ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d4ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d4bc:	3204      	adds	r2, #4

0800d4be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d4be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d4c0:	d3fb      	bcc.n	800d4ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d4c2:	f011 f9b5 	bl	801e830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d4c6:	f7f9 fe9d 	bl	8007204 <main>

0800d4ca <LoopForever>:

LoopForever:
    b LoopForever
 800d4ca:	e7fe      	b.n	800d4ca <LoopForever>
   ldr   r0, =_estack
 800d4cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800d4d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d4d4:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800d4d8:	08023ce8 	.word	0x08023ce8
  ldr r2, =_sbss
 800d4dc:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800d4e0:	20003904 	.word	0x20003904

0800d4e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d4e4:	e7fe      	b.n	800d4e4 <ADC1_COMP_IRQHandler>
	...

0800d4e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d4ee:	1dfb      	adds	r3, r7, #7
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800d4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d524 <HAL_Init+0x3c>)
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d524 <HAL_Init+0x3c>)
 800d4fa:	2140      	movs	r1, #64	@ 0x40
 800d4fc:	430a      	orrs	r2, r1
 800d4fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d500:	2003      	movs	r0, #3
 800d502:	f000 f811 	bl	800d528 <HAL_InitTick>
 800d506:	1e03      	subs	r3, r0, #0
 800d508:	d003      	beq.n	800d512 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800d50a:	1dfb      	adds	r3, r7, #7
 800d50c:	2201      	movs	r2, #1
 800d50e:	701a      	strb	r2, [r3, #0]
 800d510:	e001      	b.n	800d516 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d512:	f7fe ff7d 	bl	800c410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d516:	1dfb      	adds	r3, r7, #7
 800d518:	781b      	ldrb	r3, [r3, #0]
}
 800d51a:	0018      	movs	r0, r3
 800d51c:	46bd      	mov	sp, r7
 800d51e:	b002      	add	sp, #8
 800d520:	bd80      	pop	{r7, pc}
 800d522:	46c0      	nop			@ (mov r8, r8)
 800d524:	40022000 	.word	0x40022000

0800d528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d528:	b590      	push	{r4, r7, lr}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d530:	4b14      	ldr	r3, [pc, #80]	@ (800d584 <HAL_InitTick+0x5c>)
 800d532:	681c      	ldr	r4, [r3, #0]
 800d534:	4b14      	ldr	r3, [pc, #80]	@ (800d588 <HAL_InitTick+0x60>)
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	0019      	movs	r1, r3
 800d53a:	23fa      	movs	r3, #250	@ 0xfa
 800d53c:	0098      	lsls	r0, r3, #2
 800d53e:	f7f2 fe31 	bl	80001a4 <__udivsi3>
 800d542:	0003      	movs	r3, r0
 800d544:	0019      	movs	r1, r3
 800d546:	0020      	movs	r0, r4
 800d548:	f7f2 fe2c 	bl	80001a4 <__udivsi3>
 800d54c:	0003      	movs	r3, r0
 800d54e:	0018      	movs	r0, r3
 800d550:	f000 fccb 	bl	800deea <HAL_SYSTICK_Config>
 800d554:	1e03      	subs	r3, r0, #0
 800d556:	d001      	beq.n	800d55c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	e00f      	b.n	800d57c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d80b      	bhi.n	800d57a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	2301      	movs	r3, #1
 800d566:	425b      	negs	r3, r3
 800d568:	2200      	movs	r2, #0
 800d56a:	0018      	movs	r0, r3
 800d56c:	f000 fc98 	bl	800dea0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d570:	4b06      	ldr	r3, [pc, #24]	@ (800d58c <HAL_InitTick+0x64>)
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	e000      	b.n	800d57c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800d57a:	2301      	movs	r3, #1
}
 800d57c:	0018      	movs	r0, r3
 800d57e:	46bd      	mov	sp, r7
 800d580:	b003      	add	sp, #12
 800d582:	bd90      	pop	{r4, r7, pc}
 800d584:	200000cc 	.word	0x200000cc
 800d588:	200000e0 	.word	0x200000e0
 800d58c:	200000dc 	.word	0x200000dc

0800d590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d594:	4b05      	ldr	r3, [pc, #20]	@ (800d5ac <HAL_IncTick+0x1c>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	001a      	movs	r2, r3
 800d59a:	4b05      	ldr	r3, [pc, #20]	@ (800d5b0 <HAL_IncTick+0x20>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	18d2      	adds	r2, r2, r3
 800d5a0:	4b03      	ldr	r3, [pc, #12]	@ (800d5b0 <HAL_IncTick+0x20>)
 800d5a2:	601a      	str	r2, [r3, #0]
}
 800d5a4:	46c0      	nop			@ (mov r8, r8)
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	46c0      	nop			@ (mov r8, r8)
 800d5ac:	200000e0 	.word	0x200000e0
 800d5b0:	20002500 	.word	0x20002500

0800d5b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	af00      	add	r7, sp, #0
  return uwTick;
 800d5b8:	4b02      	ldr	r3, [pc, #8]	@ (800d5c4 <HAL_GetTick+0x10>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
}
 800d5bc:	0018      	movs	r0, r3
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	46c0      	nop			@ (mov r8, r8)
 800d5c4:	20002500 	.word	0x20002500

0800d5c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d5d0:	f7ff fff0 	bl	800d5b4 <HAL_GetTick>
 800d5d4:	0003      	movs	r3, r0
 800d5d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	d005      	beq.n	800d5ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d60c <HAL_Delay+0x44>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	001a      	movs	r2, r3
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	189b      	adds	r3, r3, r2
 800d5ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d5ee:	46c0      	nop			@ (mov r8, r8)
 800d5f0:	f7ff ffe0 	bl	800d5b4 <HAL_GetTick>
 800d5f4:	0002      	movs	r2, r0
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d8f7      	bhi.n	800d5f0 <HAL_Delay+0x28>
  {
  }
}
 800d600:	46c0      	nop			@ (mov r8, r8)
 800d602:	46c0      	nop			@ (mov r8, r8)
 800d604:	46bd      	mov	sp, r7
 800d606:	b004      	add	sp, #16
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	46c0      	nop			@ (mov r8, r8)
 800d60c:	200000e0 	.word	0x200000e0

0800d610 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800d614:	4b02      	ldr	r3, [pc, #8]	@ (800d620 <HAL_GetUIDw0+0x10>)
 800d616:	681b      	ldr	r3, [r3, #0]
}
 800d618:	0018      	movs	r0, r3
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	46c0      	nop			@ (mov r8, r8)
 800d620:	1ff80050 	.word	0x1ff80050

0800d624 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800d628:	4b02      	ldr	r3, [pc, #8]	@ (800d634 <HAL_GetUIDw1+0x10>)
 800d62a:	681b      	ldr	r3, [r3, #0]
}
 800d62c:	0018      	movs	r0, r3
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	46c0      	nop			@ (mov r8, r8)
 800d634:	1ff80054 	.word	0x1ff80054

0800d638 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800d63c:	4b02      	ldr	r3, [pc, #8]	@ (800d648 <HAL_GetUIDw2+0x10>)
 800d63e:	681b      	ldr	r3, [r3, #0]
}
 800d640:	0018      	movs	r0, r3
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	46c0      	nop			@ (mov r8, r8)
 800d648:	1ff80064 	.word	0x1ff80064

0800d64c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	e159      	b.n	800d912 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10a      	bne.n	800d67c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2250      	movs	r2, #80	@ 0x50
 800d670:	2100      	movs	r1, #0
 800d672:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	0018      	movs	r0, r3
 800d678:	f7f9 f806 	bl	8006688 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d680:	2210      	movs	r2, #16
 800d682:	4013      	ands	r3, r2
 800d684:	2b10      	cmp	r3, #16
 800d686:	d005      	beq.n	800d694 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	2204      	movs	r2, #4
 800d690:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800d692:	d00b      	beq.n	800d6ac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d698:	2210      	movs	r2, #16
 800d69a:	431a      	orrs	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2250      	movs	r2, #80	@ 0x50
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e132      	b.n	800d912 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6b0:	4a9a      	ldr	r2, [pc, #616]	@ (800d91c <HAL_ADC_Init+0x2d0>)
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	2202      	movs	r2, #2
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	2203      	movs	r2, #3
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d108      	bne.n	800d6dc <HAL_ADC_Init+0x90>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d101      	bne.n	800d6dc <HAL_ADC_Init+0x90>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e000      	b.n	800d6de <HAL_ADC_Init+0x92>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d149      	bne.n	800d776 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	685a      	ldr	r2, [r3, #4]
 800d6e6:	23c0      	movs	r3, #192	@ 0xc0
 800d6e8:	061b      	lsls	r3, r3, #24
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d00b      	beq.n	800d706 <HAL_ADC_Init+0xba>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	2380      	movs	r3, #128	@ 0x80
 800d6f4:	05db      	lsls	r3, r3, #23
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d005      	beq.n	800d706 <HAL_ADC_Init+0xba>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	2380      	movs	r3, #128	@ 0x80
 800d700:	061b      	lsls	r3, r3, #24
 800d702:	429a      	cmp	r2, r3
 800d704:	d111      	bne.n	800d72a <HAL_ADC_Init+0xde>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	691a      	ldr	r2, [r3, #16]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	0092      	lsls	r2, r2, #2
 800d712:	0892      	lsrs	r2, r2, #2
 800d714:	611a      	str	r2, [r3, #16]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	6919      	ldr	r1, [r3, #16]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685a      	ldr	r2, [r3, #4]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	430a      	orrs	r2, r1
 800d726:	611a      	str	r2, [r3, #16]
 800d728:	e014      	b.n	800d754 <HAL_ADC_Init+0x108>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	691a      	ldr	r2, [r3, #16]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	0092      	lsls	r2, r2, #2
 800d736:	0892      	lsrs	r2, r2, #2
 800d738:	611a      	str	r2, [r3, #16]
 800d73a:	4b79      	ldr	r3, [pc, #484]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	4b78      	ldr	r3, [pc, #480]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d740:	4978      	ldr	r1, [pc, #480]	@ (800d924 <HAL_ADC_Init+0x2d8>)
 800d742:	400a      	ands	r2, r1
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	4b76      	ldr	r3, [pc, #472]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	685a      	ldr	r2, [r3, #4]
 800d74e:	4b74      	ldr	r3, [pc, #464]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d750:	430a      	orrs	r2, r1
 800d752:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68da      	ldr	r2, [r3, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2118      	movs	r1, #24
 800d760:	438a      	bics	r2, r1
 800d762:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68d9      	ldr	r1, [r3, #12]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	689a      	ldr	r2, [r3, #8]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	430a      	orrs	r2, r1
 800d774:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800d776:	4b6a      	ldr	r3, [pc, #424]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	4b69      	ldr	r3, [pc, #420]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d77c:	496a      	ldr	r1, [pc, #424]	@ (800d928 <HAL_ADC_Init+0x2dc>)
 800d77e:	400a      	ands	r2, r1
 800d780:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800d782:	4b67      	ldr	r3, [pc, #412]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d784:	6819      	ldr	r1, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d78a:	065a      	lsls	r2, r3, #25
 800d78c:	4b64      	ldr	r3, [pc, #400]	@ (800d920 <HAL_ADC_Init+0x2d4>)
 800d78e:	430a      	orrs	r2, r1
 800d790:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	689a      	ldr	r2, [r3, #8]
 800d798:	2380      	movs	r3, #128	@ 0x80
 800d79a:	055b      	lsls	r3, r3, #21
 800d79c:	4013      	ands	r3, r2
 800d79e:	d108      	bne.n	800d7b2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	689a      	ldr	r2, [r3, #8]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2180      	movs	r1, #128	@ 0x80
 800d7ac:	0549      	lsls	r1, r1, #21
 800d7ae:	430a      	orrs	r2, r1
 800d7b0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	68da      	ldr	r2, [r3, #12]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	495b      	ldr	r1, [pc, #364]	@ (800d92c <HAL_ADC_Init+0x2e0>)
 800d7be:	400a      	ands	r2, r1
 800d7c0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68d9      	ldr	r1, [r3, #12]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d101      	bne.n	800d7d8 <HAL_ADC_Init+0x18c>
 800d7d4:	2304      	movs	r3, #4
 800d7d6:	e000      	b.n	800d7da <HAL_ADC_Init+0x18e>
 800d7d8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d7da:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2020      	movs	r0, #32
 800d7e0:	5c1b      	ldrb	r3, [r3, r0]
 800d7e2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800d7e4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	202c      	movs	r0, #44	@ 0x2c
 800d7ea:	5c1b      	ldrb	r3, [r3, r0]
 800d7ec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800d7ee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d7f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800d7fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	69db      	ldr	r3, [r3, #28]
 800d802:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800d804:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d812:	23c2      	movs	r3, #194	@ 0xc2
 800d814:	33ff      	adds	r3, #255	@ 0xff
 800d816:	429a      	cmp	r2, r3
 800d818:	d00b      	beq.n	800d832 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68d9      	ldr	r1, [r3, #12]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800d828:	431a      	orrs	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	430a      	orrs	r2, r1
 800d830:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2221      	movs	r2, #33	@ 0x21
 800d836:	5c9b      	ldrb	r3, [r3, r2]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d11a      	bne.n	800d872 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2220      	movs	r2, #32
 800d840:	5c9b      	ldrb	r3, [r3, r2]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d109      	bne.n	800d85a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	68da      	ldr	r2, [r3, #12]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2180      	movs	r1, #128	@ 0x80
 800d852:	0249      	lsls	r1, r1, #9
 800d854:	430a      	orrs	r2, r1
 800d856:	60da      	str	r2, [r3, #12]
 800d858:	e00b      	b.n	800d872 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d85e:	2220      	movs	r2, #32
 800d860:	431a      	orrs	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d86a:	2201      	movs	r2, #1
 800d86c:	431a      	orrs	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d876:	2b01      	cmp	r3, #1
 800d878:	d11f      	bne.n	800d8ba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	691a      	ldr	r2, [r3, #16]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	492a      	ldr	r1, [pc, #168]	@ (800d930 <HAL_ADC_Init+0x2e4>)
 800d886:	400a      	ands	r2, r1
 800d888:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6919      	ldr	r1, [r3, #16]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d898:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800d89e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	691a      	ldr	r2, [r3, #16]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	611a      	str	r2, [r3, #16]
 800d8b8:	e00e      	b.n	800d8d8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d107      	bne.n	800d8d8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	691a      	ldr	r2, [r3, #16]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2101      	movs	r1, #1
 800d8d4:	438a      	bics	r2, r1
 800d8d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	695a      	ldr	r2, [r3, #20]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2107      	movs	r1, #7
 800d8e4:	438a      	bics	r2, r1
 800d8e6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6959      	ldr	r1, [r3, #20]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d904:	2203      	movs	r2, #3
 800d906:	4393      	bics	r3, r2
 800d908:	2201      	movs	r2, #1
 800d90a:	431a      	orrs	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	0018      	movs	r0, r3
 800d914:	46bd      	mov	sp, r7
 800d916:	b002      	add	sp, #8
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	46c0      	nop			@ (mov r8, r8)
 800d91c:	fffffefd 	.word	0xfffffefd
 800d920:	40012708 	.word	0x40012708
 800d924:	ffc3ffff 	.word	0xffc3ffff
 800d928:	fdffffff 	.word	0xfdffffff
 800d92c:	fffe0219 	.word	0xfffe0219
 800d930:	fffffc03 	.word	0xfffffc03

0800d934 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d93c:	230f      	movs	r3, #15
 800d93e:	18fb      	adds	r3, r7, r3
 800d940:	2200      	movs	r2, #0
 800d942:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	2204      	movs	r2, #4
 800d94c:	4013      	ands	r3, r2
 800d94e:	d138      	bne.n	800d9c2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2250      	movs	r2, #80	@ 0x50
 800d954:	5c9b      	ldrb	r3, [r3, r2]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d101      	bne.n	800d95e <HAL_ADC_Start+0x2a>
 800d95a:	2302      	movs	r3, #2
 800d95c:	e038      	b.n	800d9d0 <HAL_ADC_Start+0x9c>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2250      	movs	r2, #80	@ 0x50
 800d962:	2101      	movs	r1, #1
 800d964:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d007      	beq.n	800d97e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800d96e:	230f      	movs	r3, #15
 800d970:	18fc      	adds	r4, r7, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	0018      	movs	r0, r3
 800d976:	f000 f95f 	bl	800dc38 <ADC_Enable>
 800d97a:	0003      	movs	r3, r0
 800d97c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800d97e:	230f      	movs	r3, #15
 800d980:	18fb      	adds	r3, r7, r3
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d120      	bne.n	800d9ca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d98c:	4a12      	ldr	r2, [pc, #72]	@ (800d9d8 <HAL_ADC_Start+0xa4>)
 800d98e:	4013      	ands	r3, r2
 800d990:	2280      	movs	r2, #128	@ 0x80
 800d992:	0052      	lsls	r2, r2, #1
 800d994:	431a      	orrs	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2250      	movs	r2, #80	@ 0x50
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	221c      	movs	r2, #28
 800d9ae:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	689a      	ldr	r2, [r3, #8]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2104      	movs	r1, #4
 800d9bc:	430a      	orrs	r2, r1
 800d9be:	609a      	str	r2, [r3, #8]
 800d9c0:	e003      	b.n	800d9ca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d9c2:	230f      	movs	r3, #15
 800d9c4:	18fb      	adds	r3, r7, r3
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800d9ca:	230f      	movs	r3, #15
 800d9cc:	18fb      	adds	r3, r7, r3
 800d9ce:	781b      	ldrb	r3, [r3, #0]
}
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	b005      	add	sp, #20
 800d9d6:	bd90      	pop	{r4, r7, pc}
 800d9d8:	fffff0fe 	.word	0xfffff0fe

0800d9dc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	2b08      	cmp	r3, #8
 800d9f4:	d102      	bne.n	800d9fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800d9f6:	2308      	movs	r3, #8
 800d9f8:	60fb      	str	r3, [r7, #12]
 800d9fa:	e014      	b.n	800da26 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	2201      	movs	r2, #1
 800da04:	4013      	ands	r3, r2
 800da06:	2b01      	cmp	r3, #1
 800da08:	d10b      	bne.n	800da22 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da0e:	2220      	movs	r2, #32
 800da10:	431a      	orrs	r2, r3
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2250      	movs	r2, #80	@ 0x50
 800da1a:	2100      	movs	r1, #0
 800da1c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	e072      	b.n	800db08 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800da22:	230c      	movs	r3, #12
 800da24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800da26:	f7ff fdc5 	bl	800d5b4 <HAL_GetTick>
 800da2a:	0003      	movs	r3, r0
 800da2c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800da2e:	e01f      	b.n	800da70 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	3301      	adds	r3, #1
 800da34:	d01c      	beq.n	800da70 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d007      	beq.n	800da4c <HAL_ADC_PollForConversion+0x70>
 800da3c:	f7ff fdba 	bl	800d5b4 <HAL_GetTick>
 800da40:	0002      	movs	r2, r0
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d211      	bcs.n	800da70 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	4013      	ands	r3, r2
 800da56:	d10b      	bne.n	800da70 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da5c:	2204      	movs	r2, #4
 800da5e:	431a      	orrs	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2250      	movs	r2, #80	@ 0x50
 800da68:	2100      	movs	r1, #0
 800da6a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800da6c:	2303      	movs	r3, #3
 800da6e:	e04b      	b.n	800db08 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	4013      	ands	r3, r2
 800da7a:	d0d9      	beq.n	800da30 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da80:	2280      	movs	r2, #128	@ 0x80
 800da82:	0092      	lsls	r2, r2, #2
 800da84:	431a      	orrs	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	68da      	ldr	r2, [r3, #12]
 800da90:	23c0      	movs	r3, #192	@ 0xc0
 800da92:	011b      	lsls	r3, r3, #4
 800da94:	4013      	ands	r3, r2
 800da96:	d12e      	bne.n	800daf6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2220      	movs	r2, #32
 800da9c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d129      	bne.n	800daf6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2208      	movs	r2, #8
 800daaa:	4013      	ands	r3, r2
 800daac:	2b08      	cmp	r3, #8
 800daae:	d122      	bne.n	800daf6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	2204      	movs	r2, #4
 800dab8:	4013      	ands	r3, r2
 800daba:	d110      	bne.n	800dade <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	685a      	ldr	r2, [r3, #4]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	210c      	movs	r1, #12
 800dac8:	438a      	bics	r2, r1
 800daca:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dad0:	4a0f      	ldr	r2, [pc, #60]	@ (800db10 <HAL_ADC_PollForConversion+0x134>)
 800dad2:	4013      	ands	r3, r2
 800dad4:	2201      	movs	r2, #1
 800dad6:	431a      	orrs	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	655a      	str	r2, [r3, #84]	@ 0x54
 800dadc:	e00b      	b.n	800daf6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dae2:	2220      	movs	r2, #32
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daee:	2201      	movs	r2, #1
 800daf0:	431a      	orrs	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d103      	bne.n	800db06 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	220c      	movs	r2, #12
 800db04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	0018      	movs	r0, r3
 800db0a:	46bd      	mov	sp, r7
 800db0c:	b004      	add	sp, #16
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	fffffefe 	.word	0xfffffefe

0800db14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800db22:	0018      	movs	r0, r3
 800db24:	46bd      	mov	sp, r7
 800db26:	b002      	add	sp, #8
 800db28:	bd80      	pop	{r7, pc}
	...

0800db2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2250      	movs	r2, #80	@ 0x50
 800db3a:	5c9b      	ldrb	r3, [r3, r2]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d101      	bne.n	800db44 <HAL_ADC_ConfigChannel+0x18>
 800db40:	2302      	movs	r3, #2
 800db42:	e06c      	b.n	800dc1e <HAL_ADC_ConfigChannel+0xf2>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2250      	movs	r2, #80	@ 0x50
 800db48:	2101      	movs	r1, #1
 800db4a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	2204      	movs	r2, #4
 800db54:	4013      	ands	r3, r2
 800db56:	d00b      	beq.n	800db70 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db5c:	2220      	movs	r2, #32
 800db5e:	431a      	orrs	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2250      	movs	r2, #80	@ 0x50
 800db68:	2100      	movs	r1, #0
 800db6a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	e056      	b.n	800dc1e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	4a2c      	ldr	r2, [pc, #176]	@ (800dc28 <HAL_ADC_ConfigChannel+0xfc>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d028      	beq.n	800dbcc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	035b      	lsls	r3, r3, #13
 800db86:	0b5a      	lsrs	r2, r3, #13
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	430a      	orrs	r2, r1
 800db8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	2380      	movs	r3, #128	@ 0x80
 800db96:	02db      	lsls	r3, r3, #11
 800db98:	4013      	ands	r3, r2
 800db9a:	d009      	beq.n	800dbb0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800db9c:	4b23      	ldr	r3, [pc, #140]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	4b22      	ldr	r3, [pc, #136]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800dba2:	2180      	movs	r1, #128	@ 0x80
 800dba4:	0409      	lsls	r1, r1, #16
 800dba6:	430a      	orrs	r2, r1
 800dba8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800dbaa:	200a      	movs	r0, #10
 800dbac:	f000 f8ac 	bl	800dd08 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	2380      	movs	r3, #128	@ 0x80
 800dbb6:	029b      	lsls	r3, r3, #10
 800dbb8:	4013      	ands	r3, r2
 800dbba:	d02b      	beq.n	800dc14 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800dbbc:	4b1b      	ldr	r3, [pc, #108]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800dbc2:	2180      	movs	r1, #128	@ 0x80
 800dbc4:	03c9      	lsls	r1, r1, #15
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	601a      	str	r2, [r3, #0]
 800dbca:	e023      	b.n	800dc14 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	035b      	lsls	r3, r3, #13
 800dbd8:	0b5b      	lsrs	r3, r3, #13
 800dbda:	43d9      	mvns	r1, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	400a      	ands	r2, r1
 800dbe2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	2380      	movs	r3, #128	@ 0x80
 800dbea:	02db      	lsls	r3, r3, #11
 800dbec:	4013      	ands	r3, r2
 800dbee:	d005      	beq.n	800dbfc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800dbf0:	4b0e      	ldr	r3, [pc, #56]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	4b0d      	ldr	r3, [pc, #52]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800dbf6:	490e      	ldr	r1, [pc, #56]	@ (800dc30 <HAL_ADC_ConfigChannel+0x104>)
 800dbf8:	400a      	ands	r2, r1
 800dbfa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	2380      	movs	r3, #128	@ 0x80
 800dc02:	029b      	lsls	r3, r3, #10
 800dc04:	4013      	ands	r3, r2
 800dc06:	d005      	beq.n	800dc14 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800dc08:	4b08      	ldr	r3, [pc, #32]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	4b07      	ldr	r3, [pc, #28]	@ (800dc2c <HAL_ADC_ConfigChannel+0x100>)
 800dc0e:	4909      	ldr	r1, [pc, #36]	@ (800dc34 <HAL_ADC_ConfigChannel+0x108>)
 800dc10:	400a      	ands	r2, r1
 800dc12:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2250      	movs	r2, #80	@ 0x50
 800dc18:	2100      	movs	r1, #0
 800dc1a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	0018      	movs	r0, r3
 800dc20:	46bd      	mov	sp, r7
 800dc22:	b002      	add	sp, #8
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	46c0      	nop			@ (mov r8, r8)
 800dc28:	00001001 	.word	0x00001001
 800dc2c:	40012708 	.word	0x40012708
 800dc30:	ff7fffff 	.word	0xff7fffff
 800dc34:	ffbfffff 	.word	0xffbfffff

0800dc38 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d108      	bne.n	800dc64 <ADC_Enable+0x2c>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d101      	bne.n	800dc64 <ADC_Enable+0x2c>
 800dc60:	2301      	movs	r3, #1
 800dc62:	e000      	b.n	800dc66 <ADC_Enable+0x2e>
 800dc64:	2300      	movs	r3, #0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d146      	bne.n	800dcf8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	4a24      	ldr	r2, [pc, #144]	@ (800dd04 <ADC_Enable+0xcc>)
 800dc72:	4013      	ands	r3, r2
 800dc74:	d00d      	beq.n	800dc92 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc7a:	2210      	movs	r2, #16
 800dc7c:	431a      	orrs	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc86:	2201      	movs	r2, #1
 800dc88:	431a      	orrs	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e033      	b.n	800dcfa <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	689a      	ldr	r2, [r3, #8]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2101      	movs	r1, #1
 800dc9e:	430a      	orrs	r2, r1
 800dca0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800dca2:	2001      	movs	r0, #1
 800dca4:	f000 f830 	bl	800dd08 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800dca8:	f7ff fc84 	bl	800d5b4 <HAL_GetTick>
 800dcac:	0003      	movs	r3, r0
 800dcae:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800dcb0:	e01b      	b.n	800dcea <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800dcb2:	f7ff fc7f 	bl	800d5b4 <HAL_GetTick>
 800dcb6:	0002      	movs	r2, r0
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	1ad3      	subs	r3, r2, r3
 800dcbc:	2b0a      	cmp	r3, #10
 800dcbe:	d914      	bls.n	800dcea <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	4013      	ands	r3, r2
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d00d      	beq.n	800dcea <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcd2:	2210      	movs	r2, #16
 800dcd4:	431a      	orrs	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcde:	2201      	movs	r2, #1
 800dce0:	431a      	orrs	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	e007      	b.n	800dcfa <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d1dc      	bne.n	800dcb2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	b004      	add	sp, #16
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	46c0      	nop			@ (mov r8, r8)
 800dd04:	80000017 	.word	0x80000017

0800dd08 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800dd10:	4b0b      	ldr	r3, [pc, #44]	@ (800dd40 <ADC_DelayMicroSecond+0x38>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	490b      	ldr	r1, [pc, #44]	@ (800dd44 <ADC_DelayMicroSecond+0x3c>)
 800dd16:	0018      	movs	r0, r3
 800dd18:	f7f2 fa44 	bl	80001a4 <__udivsi3>
 800dd1c:	0003      	movs	r3, r0
 800dd1e:	001a      	movs	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4353      	muls	r3, r2
 800dd24:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800dd26:	e002      	b.n	800dd2e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d1f9      	bne.n	800dd28 <ADC_DelayMicroSecond+0x20>
  }
}
 800dd34:	46c0      	nop			@ (mov r8, r8)
 800dd36:	46c0      	nop			@ (mov r8, r8)
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	b004      	add	sp, #16
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	46c0      	nop			@ (mov r8, r8)
 800dd40:	200000cc 	.word	0x200000cc
 800dd44:	000f4240 	.word	0x000f4240

0800dd48 <__NVIC_EnableIRQ>:
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	0002      	movs	r2, r0
 800dd50:	1dfb      	adds	r3, r7, #7
 800dd52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800dd54:	1dfb      	adds	r3, r7, #7
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd5a:	d809      	bhi.n	800dd70 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd5c:	1dfb      	adds	r3, r7, #7
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	001a      	movs	r2, r3
 800dd62:	231f      	movs	r3, #31
 800dd64:	401a      	ands	r2, r3
 800dd66:	4b04      	ldr	r3, [pc, #16]	@ (800dd78 <__NVIC_EnableIRQ+0x30>)
 800dd68:	2101      	movs	r1, #1
 800dd6a:	4091      	lsls	r1, r2
 800dd6c:	000a      	movs	r2, r1
 800dd6e:	601a      	str	r2, [r3, #0]
}
 800dd70:	46c0      	nop			@ (mov r8, r8)
 800dd72:	46bd      	mov	sp, r7
 800dd74:	b002      	add	sp, #8
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	e000e100 	.word	0xe000e100

0800dd7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800dd7c:	b590      	push	{r4, r7, lr}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	0002      	movs	r2, r0
 800dd84:	6039      	str	r1, [r7, #0]
 800dd86:	1dfb      	adds	r3, r7, #7
 800dd88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800dd8a:	1dfb      	adds	r3, r7, #7
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd90:	d828      	bhi.n	800dde4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dd92:	4a2f      	ldr	r2, [pc, #188]	@ (800de50 <__NVIC_SetPriority+0xd4>)
 800dd94:	1dfb      	adds	r3, r7, #7
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	b25b      	sxtb	r3, r3
 800dd9a:	089b      	lsrs	r3, r3, #2
 800dd9c:	33c0      	adds	r3, #192	@ 0xc0
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	589b      	ldr	r3, [r3, r2]
 800dda2:	1dfa      	adds	r2, r7, #7
 800dda4:	7812      	ldrb	r2, [r2, #0]
 800dda6:	0011      	movs	r1, r2
 800dda8:	2203      	movs	r2, #3
 800ddaa:	400a      	ands	r2, r1
 800ddac:	00d2      	lsls	r2, r2, #3
 800ddae:	21ff      	movs	r1, #255	@ 0xff
 800ddb0:	4091      	lsls	r1, r2
 800ddb2:	000a      	movs	r2, r1
 800ddb4:	43d2      	mvns	r2, r2
 800ddb6:	401a      	ands	r2, r3
 800ddb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	019b      	lsls	r3, r3, #6
 800ddbe:	22ff      	movs	r2, #255	@ 0xff
 800ddc0:	401a      	ands	r2, r3
 800ddc2:	1dfb      	adds	r3, r7, #7
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	0018      	movs	r0, r3
 800ddc8:	2303      	movs	r3, #3
 800ddca:	4003      	ands	r3, r0
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ddd0:	481f      	ldr	r0, [pc, #124]	@ (800de50 <__NVIC_SetPriority+0xd4>)
 800ddd2:	1dfb      	adds	r3, r7, #7
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	b25b      	sxtb	r3, r3
 800ddd8:	089b      	lsrs	r3, r3, #2
 800ddda:	430a      	orrs	r2, r1
 800dddc:	33c0      	adds	r3, #192	@ 0xc0
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800dde2:	e031      	b.n	800de48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800dde4:	4a1b      	ldr	r2, [pc, #108]	@ (800de54 <__NVIC_SetPriority+0xd8>)
 800dde6:	1dfb      	adds	r3, r7, #7
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	0019      	movs	r1, r3
 800ddec:	230f      	movs	r3, #15
 800ddee:	400b      	ands	r3, r1
 800ddf0:	3b08      	subs	r3, #8
 800ddf2:	089b      	lsrs	r3, r3, #2
 800ddf4:	3306      	adds	r3, #6
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	18d3      	adds	r3, r2, r3
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	1dfa      	adds	r2, r7, #7
 800de00:	7812      	ldrb	r2, [r2, #0]
 800de02:	0011      	movs	r1, r2
 800de04:	2203      	movs	r2, #3
 800de06:	400a      	ands	r2, r1
 800de08:	00d2      	lsls	r2, r2, #3
 800de0a:	21ff      	movs	r1, #255	@ 0xff
 800de0c:	4091      	lsls	r1, r2
 800de0e:	000a      	movs	r2, r1
 800de10:	43d2      	mvns	r2, r2
 800de12:	401a      	ands	r2, r3
 800de14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	019b      	lsls	r3, r3, #6
 800de1a:	22ff      	movs	r2, #255	@ 0xff
 800de1c:	401a      	ands	r2, r3
 800de1e:	1dfb      	adds	r3, r7, #7
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	0018      	movs	r0, r3
 800de24:	2303      	movs	r3, #3
 800de26:	4003      	ands	r3, r0
 800de28:	00db      	lsls	r3, r3, #3
 800de2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800de2c:	4809      	ldr	r0, [pc, #36]	@ (800de54 <__NVIC_SetPriority+0xd8>)
 800de2e:	1dfb      	adds	r3, r7, #7
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	001c      	movs	r4, r3
 800de34:	230f      	movs	r3, #15
 800de36:	4023      	ands	r3, r4
 800de38:	3b08      	subs	r3, #8
 800de3a:	089b      	lsrs	r3, r3, #2
 800de3c:	430a      	orrs	r2, r1
 800de3e:	3306      	adds	r3, #6
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	18c3      	adds	r3, r0, r3
 800de44:	3304      	adds	r3, #4
 800de46:	601a      	str	r2, [r3, #0]
}
 800de48:	46c0      	nop			@ (mov r8, r8)
 800de4a:	46bd      	mov	sp, r7
 800de4c:	b003      	add	sp, #12
 800de4e:	bd90      	pop	{r4, r7, pc}
 800de50:	e000e100 	.word	0xe000e100
 800de54:	e000ed00 	.word	0xe000ed00

0800de58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	1e5a      	subs	r2, r3, #1
 800de64:	2380      	movs	r3, #128	@ 0x80
 800de66:	045b      	lsls	r3, r3, #17
 800de68:	429a      	cmp	r2, r3
 800de6a:	d301      	bcc.n	800de70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800de6c:	2301      	movs	r3, #1
 800de6e:	e010      	b.n	800de92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800de70:	4b0a      	ldr	r3, [pc, #40]	@ (800de9c <SysTick_Config+0x44>)
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	3a01      	subs	r2, #1
 800de76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800de78:	2301      	movs	r3, #1
 800de7a:	425b      	negs	r3, r3
 800de7c:	2103      	movs	r1, #3
 800de7e:	0018      	movs	r0, r3
 800de80:	f7ff ff7c 	bl	800dd7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800de84:	4b05      	ldr	r3, [pc, #20]	@ (800de9c <SysTick_Config+0x44>)
 800de86:	2200      	movs	r2, #0
 800de88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800de8a:	4b04      	ldr	r3, [pc, #16]	@ (800de9c <SysTick_Config+0x44>)
 800de8c:	2207      	movs	r2, #7
 800de8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800de90:	2300      	movs	r3, #0
}
 800de92:	0018      	movs	r0, r3
 800de94:	46bd      	mov	sp, r7
 800de96:	b002      	add	sp, #8
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	46c0      	nop			@ (mov r8, r8)
 800de9c:	e000e010 	.word	0xe000e010

0800dea0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	607a      	str	r2, [r7, #4]
 800deaa:	210f      	movs	r1, #15
 800deac:	187b      	adds	r3, r7, r1
 800deae:	1c02      	adds	r2, r0, #0
 800deb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	187b      	adds	r3, r7, r1
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	b25b      	sxtb	r3, r3
 800deba:	0011      	movs	r1, r2
 800debc:	0018      	movs	r0, r3
 800debe:	f7ff ff5d 	bl	800dd7c <__NVIC_SetPriority>
}
 800dec2:	46c0      	nop			@ (mov r8, r8)
 800dec4:	46bd      	mov	sp, r7
 800dec6:	b004      	add	sp, #16
 800dec8:	bd80      	pop	{r7, pc}

0800deca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800deca:	b580      	push	{r7, lr}
 800decc:	b082      	sub	sp, #8
 800dece:	af00      	add	r7, sp, #0
 800ded0:	0002      	movs	r2, r0
 800ded2:	1dfb      	adds	r3, r7, #7
 800ded4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ded6:	1dfb      	adds	r3, r7, #7
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	b25b      	sxtb	r3, r3
 800dedc:	0018      	movs	r0, r3
 800dede:	f7ff ff33 	bl	800dd48 <__NVIC_EnableIRQ>
}
 800dee2:	46c0      	nop			@ (mov r8, r8)
 800dee4:	46bd      	mov	sp, r7
 800dee6:	b002      	add	sp, #8
 800dee8:	bd80      	pop	{r7, pc}

0800deea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800deea:	b580      	push	{r7, lr}
 800deec:	b082      	sub	sp, #8
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	0018      	movs	r0, r3
 800def6:	f7ff ffaf 	bl	800de58 <SysTick_Config>
 800defa:	0003      	movs	r3, r0
}
 800defc:	0018      	movs	r0, r3
 800defe:	46bd      	mov	sp, r7
 800df00:	b002      	add	sp, #8
 800df02:	bd80      	pop	{r7, pc}

0800df04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d101      	bne.n	800df16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800df12:	2301      	movs	r3, #1
 800df14:	e061      	b.n	800dfda <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a32      	ldr	r2, [pc, #200]	@ (800dfe4 <HAL_DMA_Init+0xe0>)
 800df1c:	4694      	mov	ip, r2
 800df1e:	4463      	add	r3, ip
 800df20:	2114      	movs	r1, #20
 800df22:	0018      	movs	r0, r3
 800df24:	f7f2 f93e 	bl	80001a4 <__udivsi3>
 800df28:	0003      	movs	r3, r0
 800df2a:	009a      	lsls	r2, r3, #2
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a2d      	ldr	r2, [pc, #180]	@ (800dfe8 <HAL_DMA_Init+0xe4>)
 800df34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2225      	movs	r2, #37	@ 0x25
 800df3a:	2102      	movs	r1, #2
 800df3c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	4a28      	ldr	r2, [pc, #160]	@ (800dfec <HAL_DMA_Init+0xe8>)
 800df4a:	4013      	ands	r3, r2
 800df4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800df56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a1b      	ldr	r3, [r3, #32]
 800df74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	4313      	orrs	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68fa      	ldr	r2, [r7, #12]
 800df82:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	689a      	ldr	r2, [r3, #8]
 800df88:	2380      	movs	r3, #128	@ 0x80
 800df8a:	01db      	lsls	r3, r3, #7
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d018      	beq.n	800dfc2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800df90:	4b17      	ldr	r3, [pc, #92]	@ (800dff0 <HAL_DMA_Init+0xec>)
 800df92:	681a      	ldr	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df98:	211c      	movs	r1, #28
 800df9a:	400b      	ands	r3, r1
 800df9c:	210f      	movs	r1, #15
 800df9e:	4099      	lsls	r1, r3
 800dfa0:	000b      	movs	r3, r1
 800dfa2:	43d9      	mvns	r1, r3
 800dfa4:	4b12      	ldr	r3, [pc, #72]	@ (800dff0 <HAL_DMA_Init+0xec>)
 800dfa6:	400a      	ands	r2, r1
 800dfa8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800dfaa:	4b11      	ldr	r3, [pc, #68]	@ (800dff0 <HAL_DMA_Init+0xec>)
 800dfac:	6819      	ldr	r1, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	685a      	ldr	r2, [r3, #4]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfb6:	201c      	movs	r0, #28
 800dfb8:	4003      	ands	r3, r0
 800dfba:	409a      	lsls	r2, r3
 800dfbc:	4b0c      	ldr	r3, [pc, #48]	@ (800dff0 <HAL_DMA_Init+0xec>)
 800dfbe:	430a      	orrs	r2, r1
 800dfc0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2225      	movs	r2, #37	@ 0x25
 800dfcc:	2101      	movs	r1, #1
 800dfce:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2224      	movs	r2, #36	@ 0x24
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	0018      	movs	r0, r3
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	b004      	add	sp, #16
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	46c0      	nop			@ (mov r8, r8)
 800dfe4:	bffdfff8 	.word	0xbffdfff8
 800dfe8:	40020000 	.word	0x40020000
 800dfec:	ffff800f 	.word	0xffff800f
 800dff0:	400200a8 	.word	0x400200a8

0800dff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
 800e000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e002:	2317      	movs	r3, #23
 800e004:	18fb      	adds	r3, r7, r3
 800e006:	2200      	movs	r2, #0
 800e008:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2224      	movs	r2, #36	@ 0x24
 800e00e:	5c9b      	ldrb	r3, [r3, r2]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d101      	bne.n	800e018 <HAL_DMA_Start_IT+0x24>
 800e014:	2302      	movs	r3, #2
 800e016:	e04f      	b.n	800e0b8 <HAL_DMA_Start_IT+0xc4>
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2224      	movs	r2, #36	@ 0x24
 800e01c:	2101      	movs	r1, #1
 800e01e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2225      	movs	r2, #37	@ 0x25
 800e024:	5c9b      	ldrb	r3, [r3, r2]
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d13a      	bne.n	800e0a2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2225      	movs	r2, #37	@ 0x25
 800e030:	2102      	movs	r1, #2
 800e032:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	2101      	movs	r1, #1
 800e046:	438a      	bics	r2, r1
 800e048:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	68b9      	ldr	r1, [r7, #8]
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 f976 	bl	800e342 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d008      	beq.n	800e070 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	210e      	movs	r1, #14
 800e06a:	430a      	orrs	r2, r1
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	e00f      	b.n	800e090 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2104      	movs	r1, #4
 800e07c:	438a      	bics	r2, r1
 800e07e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	210a      	movs	r1, #10
 800e08c:	430a      	orrs	r2, r1
 800e08e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2101      	movs	r1, #1
 800e09c:	430a      	orrs	r2, r1
 800e09e:	601a      	str	r2, [r3, #0]
 800e0a0:	e007      	b.n	800e0b2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2224      	movs	r2, #36	@ 0x24
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800e0aa:	2317      	movs	r3, #23
 800e0ac:	18fb      	adds	r3, r7, r3
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800e0b2:	2317      	movs	r3, #23
 800e0b4:	18fb      	adds	r3, r7, r3
 800e0b6:	781b      	ldrb	r3, [r3, #0]
}
 800e0b8:	0018      	movs	r0, r3
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	b006      	add	sp, #24
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0c8:	230f      	movs	r3, #15
 800e0ca:	18fb      	adds	r3, r7, r3
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2225      	movs	r2, #37	@ 0x25
 800e0d4:	5c9b      	ldrb	r3, [r3, r2]
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d008      	beq.n	800e0ee <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2204      	movs	r2, #4
 800e0e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2224      	movs	r2, #36	@ 0x24
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e024      	b.n	800e138 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	210e      	movs	r1, #14
 800e0fa:	438a      	bics	r2, r1
 800e0fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2101      	movs	r1, #1
 800e10a:	438a      	bics	r2, r1
 800e10c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e112:	221c      	movs	r2, #28
 800e114:	401a      	ands	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e11a:	2101      	movs	r1, #1
 800e11c:	4091      	lsls	r1, r2
 800e11e:	000a      	movs	r2, r1
 800e120:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2225      	movs	r2, #37	@ 0x25
 800e126:	2101      	movs	r1, #1
 800e128:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2224      	movs	r2, #36	@ 0x24
 800e12e:	2100      	movs	r1, #0
 800e130:	5499      	strb	r1, [r3, r2]

    return status;
 800e132:	230f      	movs	r3, #15
 800e134:	18fb      	adds	r3, r7, r3
 800e136:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e138:	0018      	movs	r0, r3
 800e13a:	46bd      	mov	sp, r7
 800e13c:	b004      	add	sp, #16
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e148:	210f      	movs	r1, #15
 800e14a:	187b      	adds	r3, r7, r1
 800e14c:	2200      	movs	r2, #0
 800e14e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2225      	movs	r2, #37	@ 0x25
 800e154:	5c9b      	ldrb	r3, [r3, r2]
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d006      	beq.n	800e16a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2204      	movs	r2, #4
 800e160:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800e162:	187b      	adds	r3, r7, r1
 800e164:	2201      	movs	r2, #1
 800e166:	701a      	strb	r2, [r3, #0]
 800e168:	e02a      	b.n	800e1c0 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	210e      	movs	r1, #14
 800e176:	438a      	bics	r2, r1
 800e178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2101      	movs	r1, #1
 800e186:	438a      	bics	r2, r1
 800e188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e18e:	221c      	movs	r2, #28
 800e190:	401a      	ands	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e196:	2101      	movs	r1, #1
 800e198:	4091      	lsls	r1, r2
 800e19a:	000a      	movs	r2, r1
 800e19c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2225      	movs	r2, #37	@ 0x25
 800e1a2:	2101      	movs	r1, #1
 800e1a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2224      	movs	r2, #36	@ 0x24
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d004      	beq.n	800e1c0 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	0010      	movs	r0, r2
 800e1be:	4798      	blx	r3
    }
  }
  return status;
 800e1c0:	230f      	movs	r3, #15
 800e1c2:	18fb      	adds	r3, r7, r3
 800e1c4:	781b      	ldrb	r3, [r3, #0]
}
 800e1c6:	0018      	movs	r0, r3
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	b004      	add	sp, #16
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b084      	sub	sp, #16
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1ea:	221c      	movs	r2, #28
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	2204      	movs	r2, #4
 800e1f0:	409a      	lsls	r2, r3
 800e1f2:	0013      	movs	r3, r2
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	d026      	beq.n	800e248 <HAL_DMA_IRQHandler+0x7a>
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	2204      	movs	r2, #4
 800e1fe:	4013      	ands	r3, r2
 800e200:	d022      	beq.n	800e248 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2220      	movs	r2, #32
 800e20a:	4013      	ands	r3, r2
 800e20c:	d107      	bne.n	800e21e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2104      	movs	r1, #4
 800e21a:	438a      	bics	r2, r1
 800e21c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e222:	221c      	movs	r2, #28
 800e224:	401a      	ands	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e22a:	2104      	movs	r1, #4
 800e22c:	4091      	lsls	r1, r2
 800e22e:	000a      	movs	r2, r1
 800e230:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e236:	2b00      	cmp	r3, #0
 800e238:	d100      	bne.n	800e23c <HAL_DMA_IRQHandler+0x6e>
 800e23a:	e071      	b.n	800e320 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	0010      	movs	r0, r2
 800e244:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800e246:	e06b      	b.n	800e320 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e24c:	221c      	movs	r2, #28
 800e24e:	4013      	ands	r3, r2
 800e250:	2202      	movs	r2, #2
 800e252:	409a      	lsls	r2, r3
 800e254:	0013      	movs	r3, r2
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	4013      	ands	r3, r2
 800e25a:	d02d      	beq.n	800e2b8 <HAL_DMA_IRQHandler+0xea>
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2202      	movs	r2, #2
 800e260:	4013      	ands	r3, r2
 800e262:	d029      	beq.n	800e2b8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2220      	movs	r2, #32
 800e26c:	4013      	ands	r3, r2
 800e26e:	d10b      	bne.n	800e288 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	210a      	movs	r1, #10
 800e27c:	438a      	bics	r2, r1
 800e27e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2225      	movs	r2, #37	@ 0x25
 800e284:	2101      	movs	r1, #1
 800e286:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e28c:	221c      	movs	r2, #28
 800e28e:	401a      	ands	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e294:	2102      	movs	r1, #2
 800e296:	4091      	lsls	r1, r2
 800e298:	000a      	movs	r2, r1
 800e29a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2224      	movs	r2, #36	@ 0x24
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d039      	beq.n	800e320 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	0010      	movs	r0, r2
 800e2b4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e2b6:	e033      	b.n	800e320 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2bc:	221c      	movs	r2, #28
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2208      	movs	r2, #8
 800e2c2:	409a      	lsls	r2, r3
 800e2c4:	0013      	movs	r3, r2
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	4013      	ands	r3, r2
 800e2ca:	d02a      	beq.n	800e322 <HAL_DMA_IRQHandler+0x154>
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	2208      	movs	r2, #8
 800e2d0:	4013      	ands	r3, r2
 800e2d2:	d026      	beq.n	800e322 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	210e      	movs	r1, #14
 800e2e0:	438a      	bics	r2, r1
 800e2e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2e8:	221c      	movs	r2, #28
 800e2ea:	401a      	ands	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2f0:	2101      	movs	r1, #1
 800e2f2:	4091      	lsls	r1, r2
 800e2f4:	000a      	movs	r2, r1
 800e2f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2225      	movs	r2, #37	@ 0x25
 800e302:	2101      	movs	r1, #1
 800e304:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2224      	movs	r2, #36	@ 0x24
 800e30a:	2100      	movs	r1, #0
 800e30c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e312:	2b00      	cmp	r3, #0
 800e314:	d005      	beq.n	800e322 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	0010      	movs	r0, r2
 800e31e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e320:	46c0      	nop			@ (mov r8, r8)
 800e322:	46c0      	nop			@ (mov r8, r8)
}
 800e324:	46bd      	mov	sp, r7
 800e326:	b004      	add	sp, #16
 800e328:	bd80      	pop	{r7, pc}

0800e32a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b082      	sub	sp, #8
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2225      	movs	r2, #37	@ 0x25
 800e336:	5c9b      	ldrb	r3, [r3, r2]
 800e338:	b2db      	uxtb	r3, r3
}
 800e33a:	0018      	movs	r0, r3
 800e33c:	46bd      	mov	sp, r7
 800e33e:	b002      	add	sp, #8
 800e340:	bd80      	pop	{r7, pc}

0800e342 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	60f8      	str	r0, [r7, #12]
 800e34a:	60b9      	str	r1, [r7, #8]
 800e34c:	607a      	str	r2, [r7, #4]
 800e34e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e354:	221c      	movs	r2, #28
 800e356:	401a      	ands	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e35c:	2101      	movs	r1, #1
 800e35e:	4091      	lsls	r1, r2
 800e360:	000a      	movs	r2, r1
 800e362:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	2b10      	cmp	r3, #16
 800e372:	d108      	bne.n	800e386 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e384:	e007      	b.n	800e396 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	60da      	str	r2, [r3, #12]
}
 800e396:	46c0      	nop			@ (mov r8, r8)
 800e398:	46bd      	mov	sp, r7
 800e39a:	b004      	add	sp, #16
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800e3a8:	f7ff f904 	bl	800d5b4 <HAL_GetTick>
 800e3ac:	0003      	movs	r3, r0
 800e3ae:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e3b0:	e00f      	b.n	800e3d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	d00c      	beq.n	800e3d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d007      	beq.n	800e3ce <FLASH_WaitForLastOperation+0x2e>
 800e3be:	f7ff f8f9 	bl	800d5b4 <HAL_GetTick>
 800e3c2:	0002      	movs	r2, r0
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	1ad3      	subs	r3, r2, r3
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d201      	bcs.n	800e3d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800e3ce:	2303      	movs	r3, #3
 800e3d0:	e052      	b.n	800e478 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e3d2:	4b2b      	ldr	r3, [pc, #172]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	4013      	ands	r3, r2
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d0e9      	beq.n	800e3b2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800e3de:	4b28      	ldr	r3, [pc, #160]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e3e0:	699b      	ldr	r3, [r3, #24]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	d102      	bne.n	800e3f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e3ea:	4b25      	ldr	r3, [pc, #148]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e3ec:	2202      	movs	r2, #2
 800e3ee:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e3f0:	4b23      	ldr	r3, [pc, #140]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e3f2:	699a      	ldr	r2, [r3, #24]
 800e3f4:	2380      	movs	r3, #128	@ 0x80
 800e3f6:	005b      	lsls	r3, r3, #1
 800e3f8:	401a      	ands	r2, r3
 800e3fa:	2380      	movs	r3, #128	@ 0x80
 800e3fc:	005b      	lsls	r3, r3, #1
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d035      	beq.n	800e46e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e402:	4b1f      	ldr	r3, [pc, #124]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e404:	699a      	ldr	r2, [r3, #24]
 800e406:	2380      	movs	r3, #128	@ 0x80
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e40c:	2380      	movs	r3, #128	@ 0x80
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	429a      	cmp	r2, r3
 800e412:	d02c      	beq.n	800e46e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e414:	4b1a      	ldr	r3, [pc, #104]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e416:	699a      	ldr	r2, [r3, #24]
 800e418:	2380      	movs	r3, #128	@ 0x80
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e41e:	2380      	movs	r3, #128	@ 0x80
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	429a      	cmp	r2, r3
 800e424:	d023      	beq.n	800e46e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e426:	4b16      	ldr	r3, [pc, #88]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e428:	699a      	ldr	r2, [r3, #24]
 800e42a:	2380      	movs	r3, #128	@ 0x80
 800e42c:	011b      	lsls	r3, r3, #4
 800e42e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e430:	2380      	movs	r3, #128	@ 0x80
 800e432:	011b      	lsls	r3, r3, #4
 800e434:	429a      	cmp	r2, r3
 800e436:	d01a      	beq.n	800e46e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e438:	4b11      	ldr	r3, [pc, #68]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e43a:	699a      	ldr	r2, [r3, #24]
 800e43c:	2380      	movs	r3, #128	@ 0x80
 800e43e:	019b      	lsls	r3, r3, #6
 800e440:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e442:	2380      	movs	r3, #128	@ 0x80
 800e444:	019b      	lsls	r3, r3, #6
 800e446:	429a      	cmp	r2, r3
 800e448:	d011      	beq.n	800e46e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e44a:	4b0d      	ldr	r3, [pc, #52]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e44c:	699a      	ldr	r2, [r3, #24]
 800e44e:	2380      	movs	r3, #128	@ 0x80
 800e450:	029b      	lsls	r3, r3, #10
 800e452:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e454:	2380      	movs	r3, #128	@ 0x80
 800e456:	029b      	lsls	r3, r3, #10
 800e458:	429a      	cmp	r2, r3
 800e45a:	d008      	beq.n	800e46e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800e45c:	4b08      	ldr	r3, [pc, #32]	@ (800e480 <FLASH_WaitForLastOperation+0xe0>)
 800e45e:	699a      	ldr	r2, [r3, #24]
 800e460:	2380      	movs	r3, #128	@ 0x80
 800e462:	025b      	lsls	r3, r3, #9
 800e464:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e466:	2380      	movs	r3, #128	@ 0x80
 800e468:	025b      	lsls	r3, r3, #9
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d103      	bne.n	800e476 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800e46e:	f000 f809 	bl	800e484 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	e000      	b.n	800e478 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	0018      	movs	r0, r3
 800e47a:	46bd      	mov	sp, r7
 800e47c:	b004      	add	sp, #16
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	40022000 	.word	0x40022000

0800e484 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800e48e:	4b49      	ldr	r3, [pc, #292]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e490:	699a      	ldr	r2, [r3, #24]
 800e492:	2380      	movs	r3, #128	@ 0x80
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	401a      	ands	r2, r3
 800e498:	2380      	movs	r3, #128	@ 0x80
 800e49a:	005b      	lsls	r3, r3, #1
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d10a      	bne.n	800e4b6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e4a0:	4b45      	ldr	r3, [pc, #276]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e4a2:	695b      	ldr	r3, [r3, #20]
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	4b43      	ldr	r3, [pc, #268]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e4aa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2280      	movs	r2, #128	@ 0x80
 800e4b0:	0052      	lsls	r2, r2, #1
 800e4b2:	4313      	orrs	r3, r2
 800e4b4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800e4b6:	4b3f      	ldr	r3, [pc, #252]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e4b8:	699a      	ldr	r2, [r3, #24]
 800e4ba:	2380      	movs	r3, #128	@ 0x80
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	401a      	ands	r2, r3
 800e4c0:	2380      	movs	r3, #128	@ 0x80
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d10a      	bne.n	800e4de <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e4c8:	4b3b      	ldr	r3, [pc, #236]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e4ca:	695b      	ldr	r3, [r3, #20]
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	431a      	orrs	r2, r3
 800e4d0:	4b39      	ldr	r3, [pc, #228]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e4d2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2280      	movs	r2, #128	@ 0x80
 800e4d8:	0092      	lsls	r2, r2, #2
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800e4de:	4b35      	ldr	r3, [pc, #212]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e4e0:	699a      	ldr	r2, [r3, #24]
 800e4e2:	2380      	movs	r3, #128	@ 0x80
 800e4e4:	00db      	lsls	r3, r3, #3
 800e4e6:	401a      	ands	r2, r3
 800e4e8:	2380      	movs	r3, #128	@ 0x80
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d10a      	bne.n	800e506 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800e4f0:	4b31      	ldr	r3, [pc, #196]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e4f2:	695b      	ldr	r3, [r3, #20]
 800e4f4:	2208      	movs	r2, #8
 800e4f6:	431a      	orrs	r2, r3
 800e4f8:	4b2f      	ldr	r3, [pc, #188]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e4fa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2280      	movs	r2, #128	@ 0x80
 800e500:	00d2      	lsls	r2, r2, #3
 800e502:	4313      	orrs	r3, r2
 800e504:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800e506:	4b2b      	ldr	r3, [pc, #172]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e508:	699a      	ldr	r2, [r3, #24]
 800e50a:	2380      	movs	r3, #128	@ 0x80
 800e50c:	011b      	lsls	r3, r3, #4
 800e50e:	401a      	ands	r2, r3
 800e510:	2380      	movs	r3, #128	@ 0x80
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	429a      	cmp	r2, r3
 800e516:	d10a      	bne.n	800e52e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800e518:	4b27      	ldr	r3, [pc, #156]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e51a:	695b      	ldr	r3, [r3, #20]
 800e51c:	2204      	movs	r2, #4
 800e51e:	431a      	orrs	r2, r3
 800e520:	4b25      	ldr	r3, [pc, #148]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e522:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2280      	movs	r2, #128	@ 0x80
 800e528:	0112      	lsls	r2, r2, #4
 800e52a:	4313      	orrs	r3, r2
 800e52c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800e52e:	4b21      	ldr	r3, [pc, #132]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e530:	699a      	ldr	r2, [r3, #24]
 800e532:	2380      	movs	r3, #128	@ 0x80
 800e534:	019b      	lsls	r3, r3, #6
 800e536:	401a      	ands	r2, r3
 800e538:	2380      	movs	r3, #128	@ 0x80
 800e53a:	019b      	lsls	r3, r3, #6
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d10a      	bne.n	800e556 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e540:	4b1d      	ldr	r3, [pc, #116]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	2210      	movs	r2, #16
 800e546:	431a      	orrs	r2, r3
 800e548:	4b1b      	ldr	r3, [pc, #108]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e54a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2280      	movs	r2, #128	@ 0x80
 800e550:	0192      	lsls	r2, r2, #6
 800e552:	4313      	orrs	r3, r2
 800e554:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800e556:	4b17      	ldr	r3, [pc, #92]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e558:	699a      	ldr	r2, [r3, #24]
 800e55a:	2380      	movs	r3, #128	@ 0x80
 800e55c:	029b      	lsls	r3, r3, #10
 800e55e:	401a      	ands	r2, r3
 800e560:	2380      	movs	r3, #128	@ 0x80
 800e562:	029b      	lsls	r3, r3, #10
 800e564:	429a      	cmp	r2, r3
 800e566:	d109      	bne.n	800e57c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800e568:	4b13      	ldr	r3, [pc, #76]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	2220      	movs	r2, #32
 800e56e:	431a      	orrs	r2, r3
 800e570:	4b11      	ldr	r3, [pc, #68]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e572:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2220      	movs	r2, #32
 800e578:	4313      	orrs	r3, r2
 800e57a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800e57c:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e57e:	699a      	ldr	r2, [r3, #24]
 800e580:	2380      	movs	r3, #128	@ 0x80
 800e582:	025b      	lsls	r3, r3, #9
 800e584:	401a      	ands	r2, r3
 800e586:	2380      	movs	r3, #128	@ 0x80
 800e588:	025b      	lsls	r3, r3, #9
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d10a      	bne.n	800e5a4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800e58e:	4b0a      	ldr	r3, [pc, #40]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e590:	695b      	ldr	r3, [r3, #20]
 800e592:	2240      	movs	r2, #64	@ 0x40
 800e594:	431a      	orrs	r2, r3
 800e596:	4b08      	ldr	r3, [pc, #32]	@ (800e5b8 <FLASH_SetErrorCode+0x134>)
 800e598:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2280      	movs	r2, #128	@ 0x80
 800e59e:	0252      	lsls	r2, r2, #9
 800e5a0:	4313      	orrs	r3, r2
 800e5a2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800e5a4:	4b03      	ldr	r3, [pc, #12]	@ (800e5b4 <FLASH_SetErrorCode+0x130>)
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	619a      	str	r2, [r3, #24]
}  
 800e5aa:	46c0      	nop			@ (mov r8, r8)
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	b002      	add	sp, #8
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	46c0      	nop			@ (mov r8, r8)
 800e5b4:	40022000 	.word	0x40022000
 800e5b8:	20002504 	.word	0x20002504

0800e5bc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b084      	sub	sp, #16
 800e5c0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800e5c2:	4b12      	ldr	r3, [pc, #72]	@ (800e60c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	d019      	beq.n	800e600 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5cc:	f3ef 8310 	mrs	r3, PRIMASK
 800e5d0:	607b      	str	r3, [r7, #4]
  return(result);
 800e5d2:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800e5d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5d6:	b672      	cpsid	i
}
 800e5d8:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800e5da:	4b0c      	ldr	r3, [pc, #48]	@ (800e60c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e5dc:	4a0c      	ldr	r2, [pc, #48]	@ (800e610 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800e5de:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800e5e0:	4b0a      	ldr	r3, [pc, #40]	@ (800e60c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e5e2:	4a0c      	ldr	r2, [pc, #48]	@ (800e614 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800e5e4:	60da      	str	r2, [r3, #12]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	f383 8810 	msr	PRIMASK, r3
}
 800e5f0:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800e5f2:	4b06      	ldr	r3, [pc, #24]	@ (800e60c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	d001      	beq.n	800e600 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e000      	b.n	800e602 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800e600:	2300      	movs	r3, #0
}
 800e602:	0018      	movs	r0, r3
 800e604:	46bd      	mov	sp, r7
 800e606:	b004      	add	sp, #16
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	46c0      	nop			@ (mov r8, r8)
 800e60c:	40022000 	.word	0x40022000
 800e610:	89abcdef 	.word	0x89abcdef
 800e614:	02030405 	.word	0x02030405

0800e618 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800e61c:	4b04      	ldr	r3, [pc, #16]	@ (800e630 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800e61e:	685a      	ldr	r2, [r3, #4]
 800e620:	4b03      	ldr	r3, [pc, #12]	@ (800e630 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800e622:	2101      	movs	r1, #1
 800e624:	430a      	orrs	r2, r1
 800e626:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800e628:	2300      	movs	r3, #0
}
 800e62a:	0018      	movs	r0, r3
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	40022000 	.word	0x40022000

0800e634 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800e634:	b5b0      	push	{r4, r5, r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e63c:	250f      	movs	r5, #15
 800e63e:	197b      	adds	r3, r7, r5
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e644:	197c      	adds	r4, r7, r5
 800e646:	4b0f      	ldr	r3, [pc, #60]	@ (800e684 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800e648:	0018      	movs	r0, r3
 800e64a:	f7ff fea9 	bl	800e3a0 <FLASH_WaitForLastOperation>
 800e64e:	0003      	movs	r3, r0
 800e650:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800e652:	0029      	movs	r1, r5
 800e654:	187b      	adds	r3, r7, r1
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10c      	bne.n	800e676 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e65c:	4b0a      	ldr	r3, [pc, #40]	@ (800e688 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800e65e:	2200      	movs	r2, #0
 800e660:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2200      	movs	r2, #0
 800e666:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e668:	187c      	adds	r4, r7, r1
 800e66a:	4b06      	ldr	r3, [pc, #24]	@ (800e684 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800e66c:	0018      	movs	r0, r3
 800e66e:	f7ff fe97 	bl	800e3a0 <FLASH_WaitForLastOperation>
 800e672:	0003      	movs	r3, r0
 800e674:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800e676:	230f      	movs	r3, #15
 800e678:	18fb      	adds	r3, r7, r3
 800e67a:	781b      	ldrb	r3, [r3, #0]
}  
 800e67c:	0018      	movs	r0, r3
 800e67e:	46bd      	mov	sp, r7
 800e680:	b004      	add	sp, #16
 800e682:	bdb0      	pop	{r4, r5, r7, pc}
 800e684:	0000c350 	.word	0x0000c350
 800e688:	20002504 	.word	0x20002504

0800e68c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800e68c:	b5b0      	push	{r4, r5, r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e698:	2317      	movs	r3, #23
 800e69a:	18fb      	adds	r3, r7, r3
 800e69c:	2201      	movs	r2, #1
 800e69e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e6a0:	4b24      	ldr	r3, [pc, #144]	@ (800e734 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e6a2:	7c1b      	ldrb	r3, [r3, #16]
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	d101      	bne.n	800e6ac <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	e03e      	b.n	800e72a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800e6ac:	4b21      	ldr	r3, [pc, #132]	@ (800e734 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e6b2:	2517      	movs	r5, #23
 800e6b4:	197c      	adds	r4, r7, r5
 800e6b6:	4b20      	ldr	r3, [pc, #128]	@ (800e738 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800e6b8:	0018      	movs	r0, r3
 800e6ba:	f7ff fe71 	bl	800e3a0 <FLASH_WaitForLastOperation>
 800e6be:	0003      	movs	r3, r0
 800e6c0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800e6c2:	197b      	adds	r3, r7, r5
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d129      	bne.n	800e71e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e6ca:	4b1a      	ldr	r3, [pc, #104]	@ (800e734 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d103      	bne.n	800e6de <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	e013      	b.n	800e706 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d104      	bne.n	800e6ee <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	b292      	uxth	r2, r2
 800e6ea:	801a      	strh	r2, [r3, #0]
 800e6ec:	e00b      	b.n	800e706 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d104      	bne.n	800e6fe <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	701a      	strb	r2, [r3, #0]
 800e6fc:	e003      	b.n	800e706 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800e6fe:	2317      	movs	r3, #23
 800e700:	18fb      	adds	r3, r7, r3
 800e702:	2201      	movs	r2, #1
 800e704:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800e706:	2217      	movs	r2, #23
 800e708:	18bb      	adds	r3, r7, r2
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d106      	bne.n	800e71e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e710:	18bc      	adds	r4, r7, r2
 800e712:	4b09      	ldr	r3, [pc, #36]	@ (800e738 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800e714:	0018      	movs	r0, r3
 800e716:	f7ff fe43 	bl	800e3a0 <FLASH_WaitForLastOperation>
 800e71a:	0003      	movs	r3, r0
 800e71c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e71e:	4b05      	ldr	r3, [pc, #20]	@ (800e734 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e720:	2200      	movs	r2, #0
 800e722:	741a      	strb	r2, [r3, #16]

  return status;
 800e724:	2317      	movs	r3, #23
 800e726:	18fb      	adds	r3, r7, r3
 800e728:	781b      	ldrb	r3, [r3, #0]
}
 800e72a:	0018      	movs	r0, r3
 800e72c:	46bd      	mov	sp, r7
 800e72e:	b006      	add	sp, #24
 800e730:	bdb0      	pop	{r4, r5, r7, pc}
 800e732:	46c0      	nop			@ (mov r8, r8)
 800e734:	20002504 	.word	0x20002504
 800e738:	0000c350 	.word	0x0000c350

0800e73c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b086      	sub	sp, #24
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e74a:	2300      	movs	r3, #0
 800e74c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800e74e:	2300      	movs	r3, #0
 800e750:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800e752:	e155      	b.n	800ea00 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2101      	movs	r1, #1
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	4091      	lsls	r1, r2
 800e75e:	000a      	movs	r2, r1
 800e760:	4013      	ands	r3, r2
 800e762:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d100      	bne.n	800e76c <HAL_GPIO_Init+0x30>
 800e76a:	e146      	b.n	800e9fa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	2203      	movs	r2, #3
 800e772:	4013      	ands	r3, r2
 800e774:	2b01      	cmp	r3, #1
 800e776:	d005      	beq.n	800e784 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	2203      	movs	r2, #3
 800e77e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e780:	2b02      	cmp	r3, #2
 800e782:	d130      	bne.n	800e7e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	2203      	movs	r2, #3
 800e790:	409a      	lsls	r2, r3
 800e792:	0013      	movs	r3, r2
 800e794:	43da      	mvns	r2, r3
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	4013      	ands	r3, r2
 800e79a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	68da      	ldr	r2, [r3, #12]
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	409a      	lsls	r2, r3
 800e7a6:	0013      	movs	r3, r2
 800e7a8:	693a      	ldr	r2, [r7, #16]
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	409a      	lsls	r2, r3
 800e7c0:	0013      	movs	r3, r2
 800e7c2:	43da      	mvns	r2, r3
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	091b      	lsrs	r3, r3, #4
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	401a      	ands	r2, r3
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	409a      	lsls	r2, r3
 800e7d8:	0013      	movs	r3, r2
 800e7da:	693a      	ldr	r2, [r7, #16]
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	693a      	ldr	r2, [r7, #16]
 800e7e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	685b      	ldr	r3, [r3, #4]
 800e7ea:	2203      	movs	r2, #3
 800e7ec:	4013      	ands	r3, r2
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d017      	beq.n	800e822 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	005b      	lsls	r3, r3, #1
 800e7fc:	2203      	movs	r2, #3
 800e7fe:	409a      	lsls	r2, r3
 800e800:	0013      	movs	r3, r2
 800e802:	43da      	mvns	r2, r3
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	4013      	ands	r3, r2
 800e808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	689a      	ldr	r2, [r3, #8]
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	005b      	lsls	r3, r3, #1
 800e812:	409a      	lsls	r2, r3
 800e814:	0013      	movs	r3, r2
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	4313      	orrs	r3, r2
 800e81a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	693a      	ldr	r2, [r7, #16]
 800e820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	2203      	movs	r2, #3
 800e828:	4013      	ands	r3, r2
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	d123      	bne.n	800e876 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	08da      	lsrs	r2, r3, #3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3208      	adds	r2, #8
 800e836:	0092      	lsls	r2, r2, #2
 800e838:	58d3      	ldr	r3, [r2, r3]
 800e83a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	2207      	movs	r2, #7
 800e840:	4013      	ands	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	220f      	movs	r2, #15
 800e846:	409a      	lsls	r2, r3
 800e848:	0013      	movs	r3, r2
 800e84a:	43da      	mvns	r2, r3
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	4013      	ands	r3, r2
 800e850:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	691a      	ldr	r2, [r3, #16]
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	2107      	movs	r1, #7
 800e85a:	400b      	ands	r3, r1
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	409a      	lsls	r2, r3
 800e860:	0013      	movs	r3, r2
 800e862:	693a      	ldr	r2, [r7, #16]
 800e864:	4313      	orrs	r3, r2
 800e866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	08da      	lsrs	r2, r3, #3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3208      	adds	r2, #8
 800e870:	0092      	lsls	r2, r2, #2
 800e872:	6939      	ldr	r1, [r7, #16]
 800e874:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	2203      	movs	r2, #3
 800e882:	409a      	lsls	r2, r3
 800e884:	0013      	movs	r3, r2
 800e886:	43da      	mvns	r2, r3
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	4013      	ands	r3, r2
 800e88c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	2203      	movs	r2, #3
 800e894:	401a      	ands	r2, r3
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	409a      	lsls	r2, r3
 800e89c:	0013      	movs	r3, r2
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	685a      	ldr	r2, [r3, #4]
 800e8ae:	23c0      	movs	r3, #192	@ 0xc0
 800e8b0:	029b      	lsls	r3, r3, #10
 800e8b2:	4013      	ands	r3, r2
 800e8b4:	d100      	bne.n	800e8b8 <HAL_GPIO_Init+0x17c>
 800e8b6:	e0a0      	b.n	800e9fa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e8b8:	4b57      	ldr	r3, [pc, #348]	@ (800ea18 <HAL_GPIO_Init+0x2dc>)
 800e8ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8bc:	4b56      	ldr	r3, [pc, #344]	@ (800ea18 <HAL_GPIO_Init+0x2dc>)
 800e8be:	2101      	movs	r1, #1
 800e8c0:	430a      	orrs	r2, r1
 800e8c2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800e8c4:	4a55      	ldr	r2, [pc, #340]	@ (800ea1c <HAL_GPIO_Init+0x2e0>)
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	089b      	lsrs	r3, r3, #2
 800e8ca:	3302      	adds	r3, #2
 800e8cc:	009b      	lsls	r3, r3, #2
 800e8ce:	589b      	ldr	r3, [r3, r2]
 800e8d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	2203      	movs	r2, #3
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	220f      	movs	r2, #15
 800e8dc:	409a      	lsls	r2, r3
 800e8de:	0013      	movs	r3, r2
 800e8e0:	43da      	mvns	r2, r3
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	23a0      	movs	r3, #160	@ 0xa0
 800e8ec:	05db      	lsls	r3, r3, #23
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d01f      	beq.n	800e932 <HAL_GPIO_Init+0x1f6>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4a4a      	ldr	r2, [pc, #296]	@ (800ea20 <HAL_GPIO_Init+0x2e4>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d019      	beq.n	800e92e <HAL_GPIO_Init+0x1f2>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4a49      	ldr	r2, [pc, #292]	@ (800ea24 <HAL_GPIO_Init+0x2e8>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d013      	beq.n	800e92a <HAL_GPIO_Init+0x1ee>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4a48      	ldr	r2, [pc, #288]	@ (800ea28 <HAL_GPIO_Init+0x2ec>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d00d      	beq.n	800e926 <HAL_GPIO_Init+0x1ea>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4a47      	ldr	r2, [pc, #284]	@ (800ea2c <HAL_GPIO_Init+0x2f0>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d007      	beq.n	800e922 <HAL_GPIO_Init+0x1e6>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	4a46      	ldr	r2, [pc, #280]	@ (800ea30 <HAL_GPIO_Init+0x2f4>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d101      	bne.n	800e91e <HAL_GPIO_Init+0x1e2>
 800e91a:	2305      	movs	r3, #5
 800e91c:	e00a      	b.n	800e934 <HAL_GPIO_Init+0x1f8>
 800e91e:	2306      	movs	r3, #6
 800e920:	e008      	b.n	800e934 <HAL_GPIO_Init+0x1f8>
 800e922:	2304      	movs	r3, #4
 800e924:	e006      	b.n	800e934 <HAL_GPIO_Init+0x1f8>
 800e926:	2303      	movs	r3, #3
 800e928:	e004      	b.n	800e934 <HAL_GPIO_Init+0x1f8>
 800e92a:	2302      	movs	r3, #2
 800e92c:	e002      	b.n	800e934 <HAL_GPIO_Init+0x1f8>
 800e92e:	2301      	movs	r3, #1
 800e930:	e000      	b.n	800e934 <HAL_GPIO_Init+0x1f8>
 800e932:	2300      	movs	r3, #0
 800e934:	697a      	ldr	r2, [r7, #20]
 800e936:	2103      	movs	r1, #3
 800e938:	400a      	ands	r2, r1
 800e93a:	0092      	lsls	r2, r2, #2
 800e93c:	4093      	lsls	r3, r2
 800e93e:	693a      	ldr	r2, [r7, #16]
 800e940:	4313      	orrs	r3, r2
 800e942:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e944:	4935      	ldr	r1, [pc, #212]	@ (800ea1c <HAL_GPIO_Init+0x2e0>)
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	089b      	lsrs	r3, r3, #2
 800e94a:	3302      	adds	r3, #2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e952:	4b38      	ldr	r3, [pc, #224]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	43da      	mvns	r2, r3
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	4013      	ands	r3, r2
 800e960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	685a      	ldr	r2, [r3, #4]
 800e966:	2380      	movs	r3, #128	@ 0x80
 800e968:	035b      	lsls	r3, r3, #13
 800e96a:	4013      	ands	r3, r2
 800e96c:	d003      	beq.n	800e976 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800e96e:	693a      	ldr	r2, [r7, #16]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4313      	orrs	r3, r2
 800e974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800e976:	4b2f      	ldr	r3, [pc, #188]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e978:	693a      	ldr	r2, [r7, #16]
 800e97a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800e97c:	4b2d      	ldr	r3, [pc, #180]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	43da      	mvns	r2, r3
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	4013      	ands	r3, r2
 800e98a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	685a      	ldr	r2, [r3, #4]
 800e990:	2380      	movs	r3, #128	@ 0x80
 800e992:	039b      	lsls	r3, r3, #14
 800e994:	4013      	ands	r3, r2
 800e996:	d003      	beq.n	800e9a0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800e9a0:	4b24      	ldr	r3, [pc, #144]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800e9a6:	4b23      	ldr	r3, [pc, #140]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	43da      	mvns	r2, r3
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	4013      	ands	r3, r2
 800e9b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	685a      	ldr	r2, [r3, #4]
 800e9ba:	2380      	movs	r3, #128	@ 0x80
 800e9bc:	029b      	lsls	r3, r3, #10
 800e9be:	4013      	ands	r3, r2
 800e9c0:	d003      	beq.n	800e9ca <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800e9c2:	693a      	ldr	r2, [r7, #16]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800e9ca:	4b1a      	ldr	r3, [pc, #104]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e9cc:	693a      	ldr	r2, [r7, #16]
 800e9ce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e9d0:	4b18      	ldr	r3, [pc, #96]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	43da      	mvns	r2, r3
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	4013      	ands	r3, r2
 800e9de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	2380      	movs	r3, #128	@ 0x80
 800e9e6:	025b      	lsls	r3, r3, #9
 800e9e8:	4013      	ands	r3, r2
 800e9ea:	d003      	beq.n	800e9f4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800e9ec:	693a      	ldr	r2, [r7, #16]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800e9f4:	4b0f      	ldr	r3, [pc, #60]	@ (800ea34 <HAL_GPIO_Init+0x2f8>)
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	40da      	lsrs	r2, r3
 800ea08:	1e13      	subs	r3, r2, #0
 800ea0a:	d000      	beq.n	800ea0e <HAL_GPIO_Init+0x2d2>
 800ea0c:	e6a2      	b.n	800e754 <HAL_GPIO_Init+0x18>
  }
}
 800ea0e:	46c0      	nop			@ (mov r8, r8)
 800ea10:	46c0      	nop			@ (mov r8, r8)
 800ea12:	46bd      	mov	sp, r7
 800ea14:	b006      	add	sp, #24
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	40021000 	.word	0x40021000
 800ea1c:	40010000 	.word	0x40010000
 800ea20:	50000400 	.word	0x50000400
 800ea24:	50000800 	.word	0x50000800
 800ea28:	50000c00 	.word	0x50000c00
 800ea2c:	50001000 	.word	0x50001000
 800ea30:	50001c00 	.word	0x50001c00
 800ea34:	40010400 	.word	0x40010400

0800ea38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	000a      	movs	r2, r1
 800ea42:	1cbb      	adds	r3, r7, #2
 800ea44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	691b      	ldr	r3, [r3, #16]
 800ea4a:	1cba      	adds	r2, r7, #2
 800ea4c:	8812      	ldrh	r2, [r2, #0]
 800ea4e:	4013      	ands	r3, r2
 800ea50:	d004      	beq.n	800ea5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800ea52:	230f      	movs	r3, #15
 800ea54:	18fb      	adds	r3, r7, r3
 800ea56:	2201      	movs	r2, #1
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	e003      	b.n	800ea64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ea5c:	230f      	movs	r3, #15
 800ea5e:	18fb      	adds	r3, r7, r3
 800ea60:	2200      	movs	r2, #0
 800ea62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800ea64:	230f      	movs	r3, #15
 800ea66:	18fb      	adds	r3, r7, r3
 800ea68:	781b      	ldrb	r3, [r3, #0]
}
 800ea6a:	0018      	movs	r0, r3
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	b004      	add	sp, #16
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b082      	sub	sp, #8
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
 800ea7a:	0008      	movs	r0, r1
 800ea7c:	0011      	movs	r1, r2
 800ea7e:	1cbb      	adds	r3, r7, #2
 800ea80:	1c02      	adds	r2, r0, #0
 800ea82:	801a      	strh	r2, [r3, #0]
 800ea84:	1c7b      	adds	r3, r7, #1
 800ea86:	1c0a      	adds	r2, r1, #0
 800ea88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ea8a:	1c7b      	adds	r3, r7, #1
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d004      	beq.n	800ea9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ea92:	1cbb      	adds	r3, r7, #2
 800ea94:	881a      	ldrh	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800ea9a:	e003      	b.n	800eaa4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800ea9c:	1cbb      	adds	r3, r7, #2
 800ea9e:	881a      	ldrh	r2, [r3, #0]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800eaa4:	46c0      	nop			@ (mov r8, r8)
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	b002      	add	sp, #8
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e082      	b.n	800ebc4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2241      	movs	r2, #65	@ 0x41
 800eac2:	5c9b      	ldrb	r3, [r3, r2]
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d107      	bne.n	800eada <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2240      	movs	r2, #64	@ 0x40
 800eace:	2100      	movs	r1, #0
 800ead0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	0018      	movs	r0, r3
 800ead6:	f7f8 f9db 	bl	8006e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2241      	movs	r2, #65	@ 0x41
 800eade:	2124      	movs	r1, #36	@ 0x24
 800eae0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2101      	movs	r1, #1
 800eaee:	438a      	bics	r2, r1
 800eaf0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4934      	ldr	r1, [pc, #208]	@ (800ebcc <HAL_I2C_Init+0x120>)
 800eafc:	400a      	ands	r2, r1
 800eafe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	689a      	ldr	r2, [r3, #8]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4931      	ldr	r1, [pc, #196]	@ (800ebd0 <HAL_I2C_Init+0x124>)
 800eb0c:	400a      	ands	r2, r1
 800eb0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d108      	bne.n	800eb2a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	689a      	ldr	r2, [r3, #8]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2180      	movs	r1, #128	@ 0x80
 800eb22:	0209      	lsls	r1, r1, #8
 800eb24:	430a      	orrs	r2, r1
 800eb26:	609a      	str	r2, [r3, #8]
 800eb28:	e007      	b.n	800eb3a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689a      	ldr	r2, [r3, #8]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2184      	movs	r1, #132	@ 0x84
 800eb34:	0209      	lsls	r1, r1, #8
 800eb36:	430a      	orrs	r2, r1
 800eb38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	d104      	bne.n	800eb4c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2280      	movs	r2, #128	@ 0x80
 800eb48:	0112      	lsls	r2, r2, #4
 800eb4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	685a      	ldr	r2, [r3, #4]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	491f      	ldr	r1, [pc, #124]	@ (800ebd4 <HAL_I2C_Init+0x128>)
 800eb58:	430a      	orrs	r2, r1
 800eb5a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	68da      	ldr	r2, [r3, #12]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	491a      	ldr	r1, [pc, #104]	@ (800ebd0 <HAL_I2C_Init+0x124>)
 800eb68:	400a      	ands	r2, r1
 800eb6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	691a      	ldr	r2, [r3, #16]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	431a      	orrs	r2, r3
 800eb76:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	699b      	ldr	r3, [r3, #24]
 800eb7c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	430a      	orrs	r2, r1
 800eb84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	69d9      	ldr	r1, [r3, #28]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a1a      	ldr	r2, [r3, #32]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	430a      	orrs	r2, r1
 800eb94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	681a      	ldr	r2, [r3, #0]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2101      	movs	r1, #1
 800eba2:	430a      	orrs	r2, r1
 800eba4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2241      	movs	r2, #65	@ 0x41
 800ebb0:	2120      	movs	r1, #32
 800ebb2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2242      	movs	r2, #66	@ 0x42
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	0018      	movs	r0, r3
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	b002      	add	sp, #8
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	f0ffffff 	.word	0xf0ffffff
 800ebd0:	ffff7fff 	.word	0xffff7fff
 800ebd4:	02008000 	.word	0x02008000

0800ebd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ebd8:	b590      	push	{r4, r7, lr}
 800ebda:	b089      	sub	sp, #36	@ 0x24
 800ebdc:	af02      	add	r7, sp, #8
 800ebde:	60f8      	str	r0, [r7, #12]
 800ebe0:	0008      	movs	r0, r1
 800ebe2:	607a      	str	r2, [r7, #4]
 800ebe4:	0019      	movs	r1, r3
 800ebe6:	230a      	movs	r3, #10
 800ebe8:	18fb      	adds	r3, r7, r3
 800ebea:	1c02      	adds	r2, r0, #0
 800ebec:	801a      	strh	r2, [r3, #0]
 800ebee:	2308      	movs	r3, #8
 800ebf0:	18fb      	adds	r3, r7, r3
 800ebf2:	1c0a      	adds	r2, r1, #0
 800ebf4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2241      	movs	r2, #65	@ 0x41
 800ebfa:	5c9b      	ldrb	r3, [r3, r2]
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b20      	cmp	r3, #32
 800ec00:	d000      	beq.n	800ec04 <HAL_I2C_Master_Transmit+0x2c>
 800ec02:	e0e7      	b.n	800edd4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2240      	movs	r2, #64	@ 0x40
 800ec08:	5c9b      	ldrb	r3, [r3, r2]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d101      	bne.n	800ec12 <HAL_I2C_Master_Transmit+0x3a>
 800ec0e:	2302      	movs	r3, #2
 800ec10:	e0e1      	b.n	800edd6 <HAL_I2C_Master_Transmit+0x1fe>
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2240      	movs	r2, #64	@ 0x40
 800ec16:	2101      	movs	r1, #1
 800ec18:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ec1a:	f7fe fccb 	bl	800d5b4 <HAL_GetTick>
 800ec1e:	0003      	movs	r3, r0
 800ec20:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ec22:	2380      	movs	r3, #128	@ 0x80
 800ec24:	0219      	lsls	r1, r3, #8
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	2319      	movs	r3, #25
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f001 ff98 	bl	8010b64 <I2C_WaitOnFlagUntilTimeout>
 800ec34:	1e03      	subs	r3, r0, #0
 800ec36:	d001      	beq.n	800ec3c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e0cc      	b.n	800edd6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2241      	movs	r2, #65	@ 0x41
 800ec40:	2121      	movs	r1, #33	@ 0x21
 800ec42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2242      	movs	r2, #66	@ 0x42
 800ec48:	2110      	movs	r1, #16
 800ec4a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2208      	movs	r2, #8
 800ec5c:	18ba      	adds	r2, r7, r2
 800ec5e:	8812      	ldrh	r2, [r2, #0]
 800ec60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2200      	movs	r2, #0
 800ec66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	2bff      	cmp	r3, #255	@ 0xff
 800ec70:	d911      	bls.n	800ec96 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	22ff      	movs	r2, #255	@ 0xff
 800ec76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ec7c:	b2da      	uxtb	r2, r3
 800ec7e:	2380      	movs	r3, #128	@ 0x80
 800ec80:	045c      	lsls	r4, r3, #17
 800ec82:	230a      	movs	r3, #10
 800ec84:	18fb      	adds	r3, r7, r3
 800ec86:	8819      	ldrh	r1, [r3, #0]
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	4b55      	ldr	r3, [pc, #340]	@ (800ede0 <HAL_I2C_Master_Transmit+0x208>)
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	0023      	movs	r3, r4
 800ec90:	f002 f9ba 	bl	8011008 <I2C_TransferConfig>
 800ec94:	e075      	b.n	800ed82 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	2380      	movs	r3, #128	@ 0x80
 800eca8:	049c      	lsls	r4, r3, #18
 800ecaa:	230a      	movs	r3, #10
 800ecac:	18fb      	adds	r3, r7, r3
 800ecae:	8819      	ldrh	r1, [r3, #0]
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	4b4b      	ldr	r3, [pc, #300]	@ (800ede0 <HAL_I2C_Master_Transmit+0x208>)
 800ecb4:	9300      	str	r3, [sp, #0]
 800ecb6:	0023      	movs	r3, r4
 800ecb8:	f002 f9a6 	bl	8011008 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ecbc:	e061      	b.n	800ed82 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	f001 ff9b 	bl	8010c00 <I2C_WaitOnTXISFlagUntilTimeout>
 800ecca:	1e03      	subs	r3, r0, #0
 800eccc:	d001      	beq.n	800ecd2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e081      	b.n	800edd6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecd6:	781a      	ldrb	r2, [r3, #0]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ece2:	1c5a      	adds	r2, r3, #1
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	b29a      	uxth	r2, r3
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d03a      	beq.n	800ed82 <HAL_I2C_Master_Transmit+0x1aa>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d136      	bne.n	800ed82 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ed14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	0013      	movs	r3, r2
 800ed1e:	2200      	movs	r2, #0
 800ed20:	2180      	movs	r1, #128	@ 0x80
 800ed22:	f001 ff1f 	bl	8010b64 <I2C_WaitOnFlagUntilTimeout>
 800ed26:	1e03      	subs	r3, r0, #0
 800ed28:	d001      	beq.n	800ed2e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e053      	b.n	800edd6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	2bff      	cmp	r3, #255	@ 0xff
 800ed36:	d911      	bls.n	800ed5c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	22ff      	movs	r2, #255	@ 0xff
 800ed3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	2380      	movs	r3, #128	@ 0x80
 800ed46:	045c      	lsls	r4, r3, #17
 800ed48:	230a      	movs	r3, #10
 800ed4a:	18fb      	adds	r3, r7, r3
 800ed4c:	8819      	ldrh	r1, [r3, #0]
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	2300      	movs	r3, #0
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	0023      	movs	r3, r4
 800ed56:	f002 f957 	bl	8011008 <I2C_TransferConfig>
 800ed5a:	e012      	b.n	800ed82 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	2380      	movs	r3, #128	@ 0x80
 800ed6e:	049c      	lsls	r4, r3, #18
 800ed70:	230a      	movs	r3, #10
 800ed72:	18fb      	adds	r3, r7, r3
 800ed74:	8819      	ldrh	r1, [r3, #0]
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	2300      	movs	r3, #0
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	0023      	movs	r3, r4
 800ed7e:	f002 f943 	bl	8011008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d198      	bne.n	800ecbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ed8c:	697a      	ldr	r2, [r7, #20]
 800ed8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	0018      	movs	r0, r3
 800ed94:	f001 ff7a 	bl	8010c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ed98:	1e03      	subs	r3, r0, #0
 800ed9a:	d001      	beq.n	800eda0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	e01a      	b.n	800edd6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2220      	movs	r2, #32
 800eda6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	685a      	ldr	r2, [r3, #4]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	490c      	ldr	r1, [pc, #48]	@ (800ede4 <HAL_I2C_Master_Transmit+0x20c>)
 800edb4:	400a      	ands	r2, r1
 800edb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2241      	movs	r2, #65	@ 0x41
 800edbc:	2120      	movs	r1, #32
 800edbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2242      	movs	r2, #66	@ 0x42
 800edc4:	2100      	movs	r1, #0
 800edc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2240      	movs	r2, #64	@ 0x40
 800edcc:	2100      	movs	r1, #0
 800edce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	e000      	b.n	800edd6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800edd4:	2302      	movs	r3, #2
  }
}
 800edd6:	0018      	movs	r0, r3
 800edd8:	46bd      	mov	sp, r7
 800edda:	b007      	add	sp, #28
 800eddc:	bd90      	pop	{r4, r7, pc}
 800edde:	46c0      	nop			@ (mov r8, r8)
 800ede0:	80002000 	.word	0x80002000
 800ede4:	fe00e800 	.word	0xfe00e800

0800ede8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ede8:	b590      	push	{r4, r7, lr}
 800edea:	b089      	sub	sp, #36	@ 0x24
 800edec:	af02      	add	r7, sp, #8
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	0008      	movs	r0, r1
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	0019      	movs	r1, r3
 800edf6:	230a      	movs	r3, #10
 800edf8:	18fb      	adds	r3, r7, r3
 800edfa:	1c02      	adds	r2, r0, #0
 800edfc:	801a      	strh	r2, [r3, #0]
 800edfe:	2308      	movs	r3, #8
 800ee00:	18fb      	adds	r3, r7, r3
 800ee02:	1c0a      	adds	r2, r1, #0
 800ee04:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2241      	movs	r2, #65	@ 0x41
 800ee0a:	5c9b      	ldrb	r3, [r3, r2]
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	2b20      	cmp	r3, #32
 800ee10:	d000      	beq.n	800ee14 <HAL_I2C_Master_Receive+0x2c>
 800ee12:	e0e8      	b.n	800efe6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2240      	movs	r2, #64	@ 0x40
 800ee18:	5c9b      	ldrb	r3, [r3, r2]
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d101      	bne.n	800ee22 <HAL_I2C_Master_Receive+0x3a>
 800ee1e:	2302      	movs	r3, #2
 800ee20:	e0e2      	b.n	800efe8 <HAL_I2C_Master_Receive+0x200>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2240      	movs	r2, #64	@ 0x40
 800ee26:	2101      	movs	r1, #1
 800ee28:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ee2a:	f7fe fbc3 	bl	800d5b4 <HAL_GetTick>
 800ee2e:	0003      	movs	r3, r0
 800ee30:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ee32:	2380      	movs	r3, #128	@ 0x80
 800ee34:	0219      	lsls	r1, r3, #8
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	2319      	movs	r3, #25
 800ee3e:	2201      	movs	r2, #1
 800ee40:	f001 fe90 	bl	8010b64 <I2C_WaitOnFlagUntilTimeout>
 800ee44:	1e03      	subs	r3, r0, #0
 800ee46:	d001      	beq.n	800ee4c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e0cd      	b.n	800efe8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2241      	movs	r2, #65	@ 0x41
 800ee50:	2122      	movs	r1, #34	@ 0x22
 800ee52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2242      	movs	r2, #66	@ 0x42
 800ee58:	2110      	movs	r1, #16
 800ee5a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2208      	movs	r2, #8
 800ee6c:	18ba      	adds	r2, r7, r2
 800ee6e:	8812      	ldrh	r2, [r2, #0]
 800ee70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	2200      	movs	r2, #0
 800ee76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	2bff      	cmp	r3, #255	@ 0xff
 800ee80:	d911      	bls.n	800eea6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	22ff      	movs	r2, #255	@ 0xff
 800ee86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	2380      	movs	r3, #128	@ 0x80
 800ee90:	045c      	lsls	r4, r3, #17
 800ee92:	230a      	movs	r3, #10
 800ee94:	18fb      	adds	r3, r7, r3
 800ee96:	8819      	ldrh	r1, [r3, #0]
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	4b55      	ldr	r3, [pc, #340]	@ (800eff0 <HAL_I2C_Master_Receive+0x208>)
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	0023      	movs	r3, r4
 800eea0:	f002 f8b2 	bl	8011008 <I2C_TransferConfig>
 800eea4:	e076      	b.n	800ef94 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	2380      	movs	r3, #128	@ 0x80
 800eeb8:	049c      	lsls	r4, r3, #18
 800eeba:	230a      	movs	r3, #10
 800eebc:	18fb      	adds	r3, r7, r3
 800eebe:	8819      	ldrh	r1, [r3, #0]
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	4b4b      	ldr	r3, [pc, #300]	@ (800eff0 <HAL_I2C_Master_Receive+0x208>)
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	0023      	movs	r3, r4
 800eec8:	f002 f89e 	bl	8011008 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800eecc:	e062      	b.n	800ef94 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eece:	697a      	ldr	r2, [r7, #20]
 800eed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	0018      	movs	r0, r3
 800eed6:	f001 ff1d 	bl	8010d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800eeda:	1e03      	subs	r3, r0, #0
 800eedc:	d001      	beq.n	800eee2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800eede:	2301      	movs	r3, #1
 800eee0:	e082      	b.n	800efe8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeec:	b2d2      	uxtb	r2, r2
 800eeee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eef4:	1c5a      	adds	r2, r3, #1
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eefe:	3b01      	subs	r3, #1
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	b29a      	uxth	r2, r3
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d03a      	beq.n	800ef94 <HAL_I2C_Master_Receive+0x1ac>
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d136      	bne.n	800ef94 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ef26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	0013      	movs	r3, r2
 800ef30:	2200      	movs	r2, #0
 800ef32:	2180      	movs	r1, #128	@ 0x80
 800ef34:	f001 fe16 	bl	8010b64 <I2C_WaitOnFlagUntilTimeout>
 800ef38:	1e03      	subs	r3, r0, #0
 800ef3a:	d001      	beq.n	800ef40 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e053      	b.n	800efe8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	2bff      	cmp	r3, #255	@ 0xff
 800ef48:	d911      	bls.n	800ef6e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	22ff      	movs	r2, #255	@ 0xff
 800ef4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef54:	b2da      	uxtb	r2, r3
 800ef56:	2380      	movs	r3, #128	@ 0x80
 800ef58:	045c      	lsls	r4, r3, #17
 800ef5a:	230a      	movs	r3, #10
 800ef5c:	18fb      	adds	r3, r7, r3
 800ef5e:	8819      	ldrh	r1, [r3, #0]
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	2300      	movs	r3, #0
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	0023      	movs	r3, r4
 800ef68:	f002 f84e 	bl	8011008 <I2C_TransferConfig>
 800ef6c:	e012      	b.n	800ef94 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef7c:	b2da      	uxtb	r2, r3
 800ef7e:	2380      	movs	r3, #128	@ 0x80
 800ef80:	049c      	lsls	r4, r3, #18
 800ef82:	230a      	movs	r3, #10
 800ef84:	18fb      	adds	r3, r7, r3
 800ef86:	8819      	ldrh	r1, [r3, #0]
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	0023      	movs	r3, r4
 800ef90:	f002 f83a 	bl	8011008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d197      	bne.n	800eece <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	0018      	movs	r0, r3
 800efa6:	f001 fe71 	bl	8010c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 800efaa:	1e03      	subs	r3, r0, #0
 800efac:	d001      	beq.n	800efb2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	e01a      	b.n	800efe8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2220      	movs	r2, #32
 800efb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	685a      	ldr	r2, [r3, #4]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	490b      	ldr	r1, [pc, #44]	@ (800eff4 <HAL_I2C_Master_Receive+0x20c>)
 800efc6:	400a      	ands	r2, r1
 800efc8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2241      	movs	r2, #65	@ 0x41
 800efce:	2120      	movs	r1, #32
 800efd0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2242      	movs	r2, #66	@ 0x42
 800efd6:	2100      	movs	r1, #0
 800efd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2240      	movs	r2, #64	@ 0x40
 800efde:	2100      	movs	r1, #0
 800efe0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800efe2:	2300      	movs	r3, #0
 800efe4:	e000      	b.n	800efe8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800efe6:	2302      	movs	r3, #2
  }
}
 800efe8:	0018      	movs	r0, r3
 800efea:	46bd      	mov	sp, r7
 800efec:	b007      	add	sp, #28
 800efee:	bd90      	pop	{r4, r7, pc}
 800eff0:	80002400 	.word	0x80002400
 800eff4:	fe00e800 	.word	0xfe00e800

0800eff8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800eff8:	b5b0      	push	{r4, r5, r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af02      	add	r7, sp, #8
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	0008      	movs	r0, r1
 800f002:	607a      	str	r2, [r7, #4]
 800f004:	0019      	movs	r1, r3
 800f006:	230a      	movs	r3, #10
 800f008:	18fb      	adds	r3, r7, r3
 800f00a:	1c02      	adds	r2, r0, #0
 800f00c:	801a      	strh	r2, [r3, #0]
 800f00e:	2308      	movs	r3, #8
 800f010:	18fb      	adds	r3, r7, r3
 800f012:	1c0a      	adds	r2, r1, #0
 800f014:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2241      	movs	r2, #65	@ 0x41
 800f01a:	5c9b      	ldrb	r3, [r3, r2]
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	2b20      	cmp	r3, #32
 800f020:	d000      	beq.n	800f024 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800f022:	e0dd      	b.n	800f1e0 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	699a      	ldr	r2, [r3, #24]
 800f02a:	2380      	movs	r3, #128	@ 0x80
 800f02c:	021b      	lsls	r3, r3, #8
 800f02e:	401a      	ands	r2, r3
 800f030:	2380      	movs	r3, #128	@ 0x80
 800f032:	021b      	lsls	r3, r3, #8
 800f034:	429a      	cmp	r2, r3
 800f036:	d101      	bne.n	800f03c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800f038:	2302      	movs	r3, #2
 800f03a:	e0d2      	b.n	800f1e2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2240      	movs	r2, #64	@ 0x40
 800f040:	5c9b      	ldrb	r3, [r3, r2]
 800f042:	2b01      	cmp	r3, #1
 800f044:	d101      	bne.n	800f04a <HAL_I2C_Master_Transmit_DMA+0x52>
 800f046:	2302      	movs	r3, #2
 800f048:	e0cb      	b.n	800f1e2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2240      	movs	r2, #64	@ 0x40
 800f04e:	2101      	movs	r1, #1
 800f050:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2241      	movs	r2, #65	@ 0x41
 800f056:	2121      	movs	r1, #33	@ 0x21
 800f058:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2242      	movs	r2, #66	@ 0x42
 800f05e:	2110      	movs	r1, #16
 800f060:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2208      	movs	r2, #8
 800f072:	18ba      	adds	r2, r7, r2
 800f074:	8812      	ldrh	r2, [r2, #0]
 800f076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	4a5c      	ldr	r2, [pc, #368]	@ (800f1ec <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800f07c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	4a5b      	ldr	r2, [pc, #364]	@ (800f1f0 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800f082:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f088:	b29b      	uxth	r3, r3
 800f08a:	2bff      	cmp	r3, #255	@ 0xff
 800f08c:	d906      	bls.n	800f09c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	22ff      	movs	r2, #255	@ 0xff
 800f092:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f094:	2380      	movs	r3, #128	@ 0x80
 800f096:	045b      	lsls	r3, r3, #17
 800f098:	617b      	str	r3, [r7, #20]
 800f09a:	e007      	b.n	800f0ac <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f0a6:	2380      	movs	r3, #128	@ 0x80
 800f0a8:	049b      	lsls	r3, r3, #18
 800f0aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d100      	bne.n	800f0b6 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800f0b4:	e078      	b.n	800f1a8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d023      	beq.n	800f106 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0c2:	4a4c      	ldr	r2, [pc, #304]	@ (800f1f4 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800f0c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ca:	4a4b      	ldr	r2, [pc, #300]	@ (800f1f8 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800f0cc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0da:	2200      	movs	r2, #0
 800f0dc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f0e2:	6879      	ldr	r1, [r7, #4]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	3328      	adds	r3, #40	@ 0x28
 800f0ea:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f0f0:	2513      	movs	r5, #19
 800f0f2:	197c      	adds	r4, r7, r5
 800f0f4:	f7fe ff7e 	bl	800dff4 <HAL_DMA_Start_IT>
 800f0f8:	0003      	movs	r3, r0
 800f0fa:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f0fc:	197b      	adds	r3, r7, r5
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d13d      	bne.n	800f180 <HAL_I2C_Master_Transmit_DMA+0x188>
 800f104:	e013      	b.n	800f12e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	2241      	movs	r2, #65	@ 0x41
 800f10a:	2120      	movs	r1, #32
 800f10c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	2242      	movs	r2, #66	@ 0x42
 800f112:	2100      	movs	r1, #0
 800f114:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f11a:	2280      	movs	r2, #128	@ 0x80
 800f11c:	431a      	orrs	r2, r3
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	2240      	movs	r2, #64	@ 0x40
 800f126:	2100      	movs	r1, #0
 800f128:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e059      	b.n	800f1e2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f132:	b2da      	uxtb	r2, r3
 800f134:	697c      	ldr	r4, [r7, #20]
 800f136:	230a      	movs	r3, #10
 800f138:	18fb      	adds	r3, r7, r3
 800f13a:	8819      	ldrh	r1, [r3, #0]
 800f13c:	68f8      	ldr	r0, [r7, #12]
 800f13e:	4b2f      	ldr	r3, [pc, #188]	@ (800f1fc <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	0023      	movs	r3, r4
 800f144:	f001 ff60 	bl	8011008 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	b29a      	uxth	r2, r3
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2240      	movs	r2, #64	@ 0x40
 800f15e:	2100      	movs	r1, #0
 800f160:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2110      	movs	r1, #16
 800f166:	0018      	movs	r0, r3
 800f168:	f001 ff88 	bl	801107c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2180      	movs	r1, #128	@ 0x80
 800f178:	01c9      	lsls	r1, r1, #7
 800f17a:	430a      	orrs	r2, r1
 800f17c:	601a      	str	r2, [r3, #0]
 800f17e:	e02d      	b.n	800f1dc <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2241      	movs	r2, #65	@ 0x41
 800f184:	2120      	movs	r1, #32
 800f186:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2242      	movs	r2, #66	@ 0x42
 800f18c:	2100      	movs	r1, #0
 800f18e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f194:	2210      	movs	r2, #16
 800f196:	431a      	orrs	r2, r3
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2240      	movs	r2, #64	@ 0x40
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e01c      	b.n	800f1e2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	4a15      	ldr	r2, [pc, #84]	@ (800f200 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800f1ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	2380      	movs	r3, #128	@ 0x80
 800f1b6:	049c      	lsls	r4, r3, #18
 800f1b8:	230a      	movs	r3, #10
 800f1ba:	18fb      	adds	r3, r7, r3
 800f1bc:	8819      	ldrh	r1, [r3, #0]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	4b0e      	ldr	r3, [pc, #56]	@ (800f1fc <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f1c2:	9300      	str	r3, [sp, #0]
 800f1c4:	0023      	movs	r3, r4
 800f1c6:	f001 ff1f 	bl	8011008 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2240      	movs	r2, #64	@ 0x40
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2101      	movs	r1, #1
 800f1d6:	0018      	movs	r0, r3
 800f1d8:	f001 ff50 	bl	801107c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	e000      	b.n	800f1e2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f1e0:	2302      	movs	r3, #2
  }
}
 800f1e2:	0018      	movs	r0, r3
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	b006      	add	sp, #24
 800f1e8:	bdb0      	pop	{r4, r5, r7, pc}
 800f1ea:	46c0      	nop			@ (mov r8, r8)
 800f1ec:	ffff0000 	.word	0xffff0000
 800f1f0:	0800f9fd 	.word	0x0800f9fd
 800f1f4:	080109b5 	.word	0x080109b5
 800f1f8:	08010af5 	.word	0x08010af5
 800f1fc:	80002000 	.word	0x80002000
 800f200:	0800f5a9 	.word	0x0800f5a9

0800f204 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800f204:	b5b0      	push	{r4, r5, r7, lr}
 800f206:	b088      	sub	sp, #32
 800f208:	af02      	add	r7, sp, #8
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	0008      	movs	r0, r1
 800f20e:	607a      	str	r2, [r7, #4]
 800f210:	0019      	movs	r1, r3
 800f212:	230a      	movs	r3, #10
 800f214:	18fb      	adds	r3, r7, r3
 800f216:	1c02      	adds	r2, r0, #0
 800f218:	801a      	strh	r2, [r3, #0]
 800f21a:	2308      	movs	r3, #8
 800f21c:	18fb      	adds	r3, r7, r3
 800f21e:	1c0a      	adds	r2, r1, #0
 800f220:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2241      	movs	r2, #65	@ 0x41
 800f226:	5c9b      	ldrb	r3, [r3, r2]
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	2b20      	cmp	r3, #32
 800f22c:	d000      	beq.n	800f230 <HAL_I2C_Master_Receive_DMA+0x2c>
 800f22e:	e0dd      	b.n	800f3ec <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	699a      	ldr	r2, [r3, #24]
 800f236:	2380      	movs	r3, #128	@ 0x80
 800f238:	021b      	lsls	r3, r3, #8
 800f23a:	401a      	ands	r2, r3
 800f23c:	2380      	movs	r3, #128	@ 0x80
 800f23e:	021b      	lsls	r3, r3, #8
 800f240:	429a      	cmp	r2, r3
 800f242:	d101      	bne.n	800f248 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800f244:	2302      	movs	r3, #2
 800f246:	e0d2      	b.n	800f3ee <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2240      	movs	r2, #64	@ 0x40
 800f24c:	5c9b      	ldrb	r3, [r3, r2]
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d101      	bne.n	800f256 <HAL_I2C_Master_Receive_DMA+0x52>
 800f252:	2302      	movs	r3, #2
 800f254:	e0cb      	b.n	800f3ee <HAL_I2C_Master_Receive_DMA+0x1ea>
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2240      	movs	r2, #64	@ 0x40
 800f25a:	2101      	movs	r1, #1
 800f25c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2241      	movs	r2, #65	@ 0x41
 800f262:	2122      	movs	r1, #34	@ 0x22
 800f264:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2242      	movs	r2, #66	@ 0x42
 800f26a:	2110      	movs	r1, #16
 800f26c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2200      	movs	r2, #0
 800f272:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	687a      	ldr	r2, [r7, #4]
 800f278:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2208      	movs	r2, #8
 800f27e:	18ba      	adds	r2, r7, r2
 800f280:	8812      	ldrh	r2, [r2, #0]
 800f282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	4a5c      	ldr	r2, [pc, #368]	@ (800f3f8 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800f288:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	4a5b      	ldr	r2, [pc, #364]	@ (800f3fc <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800f28e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f294:	b29b      	uxth	r3, r3
 800f296:	2bff      	cmp	r3, #255	@ 0xff
 800f298:	d906      	bls.n	800f2a8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	22ff      	movs	r2, #255	@ 0xff
 800f29e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f2a0:	2380      	movs	r3, #128	@ 0x80
 800f2a2:	045b      	lsls	r3, r3, #17
 800f2a4:	617b      	str	r3, [r7, #20]
 800f2a6:	e007      	b.n	800f2b8 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f2b2:	2380      	movs	r3, #128	@ 0x80
 800f2b4:	049b      	lsls	r3, r3, #18
 800f2b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d100      	bne.n	800f2c2 <HAL_I2C_Master_Receive_DMA+0xbe>
 800f2c0:	e078      	b.n	800f3b4 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d023      	beq.n	800f312 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2ce:	4a4c      	ldr	r2, [pc, #304]	@ (800f400 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800f2d0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2d6:	4a4b      	ldr	r2, [pc, #300]	@ (800f404 <HAL_I2C_Master_Receive_DMA+0x200>)
 800f2d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2de:	2200      	movs	r2, #0
 800f2e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	3324      	adds	r3, #36	@ 0x24
 800f2f4:	0019      	movs	r1, r3
 800f2f6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f2fc:	2513      	movs	r5, #19
 800f2fe:	197c      	adds	r4, r7, r5
 800f300:	f7fe fe78 	bl	800dff4 <HAL_DMA_Start_IT>
 800f304:	0003      	movs	r3, r0
 800f306:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f308:	197b      	adds	r3, r7, r5
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d13d      	bne.n	800f38c <HAL_I2C_Master_Receive_DMA+0x188>
 800f310:	e013      	b.n	800f33a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2241      	movs	r2, #65	@ 0x41
 800f316:	2120      	movs	r1, #32
 800f318:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2242      	movs	r2, #66	@ 0x42
 800f31e:	2100      	movs	r1, #0
 800f320:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f326:	2280      	movs	r2, #128	@ 0x80
 800f328:	431a      	orrs	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2240      	movs	r2, #64	@ 0x40
 800f332:	2100      	movs	r1, #0
 800f334:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f336:	2301      	movs	r3, #1
 800f338:	e059      	b.n	800f3ee <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f33e:	b2da      	uxtb	r2, r3
 800f340:	697c      	ldr	r4, [r7, #20]
 800f342:	230a      	movs	r3, #10
 800f344:	18fb      	adds	r3, r7, r3
 800f346:	8819      	ldrh	r1, [r3, #0]
 800f348:	68f8      	ldr	r0, [r7, #12]
 800f34a:	4b2f      	ldr	r3, [pc, #188]	@ (800f408 <HAL_I2C_Master_Receive_DMA+0x204>)
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	0023      	movs	r3, r4
 800f350:	f001 fe5a 	bl	8011008 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f358:	b29a      	uxth	r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	b29a      	uxth	r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2240      	movs	r2, #64	@ 0x40
 800f36a:	2100      	movs	r1, #0
 800f36c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2110      	movs	r1, #16
 800f372:	0018      	movs	r0, r3
 800f374:	f001 fe82 	bl	801107c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2180      	movs	r1, #128	@ 0x80
 800f384:	0209      	lsls	r1, r1, #8
 800f386:	430a      	orrs	r2, r1
 800f388:	601a      	str	r2, [r3, #0]
 800f38a:	e02d      	b.n	800f3e8 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2241      	movs	r2, #65	@ 0x41
 800f390:	2120      	movs	r1, #32
 800f392:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	2242      	movs	r2, #66	@ 0x42
 800f398:	2100      	movs	r1, #0
 800f39a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3a0:	2210      	movs	r2, #16
 800f3a2:	431a      	orrs	r2, r3
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2240      	movs	r2, #64	@ 0x40
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e01c      	b.n	800f3ee <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	4a15      	ldr	r2, [pc, #84]	@ (800f40c <HAL_I2C_Master_Receive_DMA+0x208>)
 800f3b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3be:	b2da      	uxtb	r2, r3
 800f3c0:	2380      	movs	r3, #128	@ 0x80
 800f3c2:	049c      	lsls	r4, r3, #18
 800f3c4:	230a      	movs	r3, #10
 800f3c6:	18fb      	adds	r3, r7, r3
 800f3c8:	8819      	ldrh	r1, [r3, #0]
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	4b0e      	ldr	r3, [pc, #56]	@ (800f408 <HAL_I2C_Master_Receive_DMA+0x204>)
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	0023      	movs	r3, r4
 800f3d2:	f001 fe19 	bl	8011008 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2240      	movs	r2, #64	@ 0x40
 800f3da:	2100      	movs	r1, #0
 800f3dc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2101      	movs	r1, #1
 800f3e2:	0018      	movs	r0, r3
 800f3e4:	f001 fe4a 	bl	801107c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	e000      	b.n	800f3ee <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f3ec:	2302      	movs	r3, #2
  }
}
 800f3ee:	0018      	movs	r0, r3
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	b006      	add	sp, #24
 800f3f4:	bdb0      	pop	{r4, r5, r7, pc}
 800f3f6:	46c0      	nop			@ (mov r8, r8)
 800f3f8:	ffff0000 	.word	0xffff0000
 800f3fc:	0800f9fd 	.word	0x0800f9fd
 800f400:	08010a55 	.word	0x08010a55
 800f404:	08010af5 	.word	0x08010af5
 800f408:	80002400 	.word	0x80002400
 800f40c:	0800f5a9 	.word	0x0800f5a9

0800f410 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	699b      	ldr	r3, [r3, #24]
 800f41e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d005      	beq.n	800f43c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	68f9      	ldr	r1, [r7, #12]
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	4798      	blx	r3
  }
}
 800f43c:	46c0      	nop			@ (mov r8, r8)
 800f43e:	46bd      	mov	sp, r7
 800f440:	b004      	add	sp, #16
 800f442:	bd80      	pop	{r7, pc}

0800f444 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b086      	sub	sp, #24
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	699b      	ldr	r3, [r3, #24]
 800f452:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f45c:	697a      	ldr	r2, [r7, #20]
 800f45e:	2380      	movs	r3, #128	@ 0x80
 800f460:	005b      	lsls	r3, r3, #1
 800f462:	4013      	ands	r3, r2
 800f464:	d00e      	beq.n	800f484 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	2280      	movs	r2, #128	@ 0x80
 800f46a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f46c:	d00a      	beq.n	800f484 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f472:	2201      	movs	r2, #1
 800f474:	431a      	orrs	r2, r3
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2280      	movs	r2, #128	@ 0x80
 800f480:	0052      	lsls	r2, r2, #1
 800f482:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f484:	697a      	ldr	r2, [r7, #20]
 800f486:	2380      	movs	r3, #128	@ 0x80
 800f488:	00db      	lsls	r3, r3, #3
 800f48a:	4013      	ands	r3, r2
 800f48c:	d00e      	beq.n	800f4ac <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	2280      	movs	r2, #128	@ 0x80
 800f492:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f494:	d00a      	beq.n	800f4ac <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f49a:	2208      	movs	r2, #8
 800f49c:	431a      	orrs	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2280      	movs	r2, #128	@ 0x80
 800f4a8:	00d2      	lsls	r2, r2, #3
 800f4aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f4ac:	697a      	ldr	r2, [r7, #20]
 800f4ae:	2380      	movs	r3, #128	@ 0x80
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4013      	ands	r3, r2
 800f4b4:	d00e      	beq.n	800f4d4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	2280      	movs	r2, #128	@ 0x80
 800f4ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f4bc:	d00a      	beq.n	800f4d4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4c2:	2202      	movs	r2, #2
 800f4c4:	431a      	orrs	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2280      	movs	r2, #128	@ 0x80
 800f4d0:	0092      	lsls	r2, r2, #2
 800f4d2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4d8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	220b      	movs	r2, #11
 800f4de:	4013      	ands	r3, r2
 800f4e0:	d005      	beq.n	800f4ee <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	0011      	movs	r1, r2
 800f4e8:	0018      	movs	r0, r3
 800f4ea:	f001 f915 	bl	8010718 <I2C_ITError>
  }
}
 800f4ee:	46c0      	nop			@ (mov r8, r8)
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	b006      	add	sp, #24
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f4fe:	46c0      	nop			@ (mov r8, r8)
 800f500:	46bd      	mov	sp, r7
 800f502:	b002      	add	sp, #8
 800f504:	bd80      	pop	{r7, pc}

0800f506 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f506:	b580      	push	{r7, lr}
 800f508:	b082      	sub	sp, #8
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f50e:	46c0      	nop			@ (mov r8, r8)
 800f510:	46bd      	mov	sp, r7
 800f512:	b002      	add	sp, #8
 800f514:	bd80      	pop	{r7, pc}

0800f516 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f51e:	46c0      	nop			@ (mov r8, r8)
 800f520:	46bd      	mov	sp, r7
 800f522:	b002      	add	sp, #8
 800f524:	bd80      	pop	{r7, pc}

0800f526 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b082      	sub	sp, #8
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f52e:	46c0      	nop			@ (mov r8, r8)
 800f530:	46bd      	mov	sp, r7
 800f532:	b002      	add	sp, #8
 800f534:	bd80      	pop	{r7, pc}

0800f536 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f536:	b580      	push	{r7, lr}
 800f538:	b082      	sub	sp, #8
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	6078      	str	r0, [r7, #4]
 800f53e:	0008      	movs	r0, r1
 800f540:	0011      	movs	r1, r2
 800f542:	1cfb      	adds	r3, r7, #3
 800f544:	1c02      	adds	r2, r0, #0
 800f546:	701a      	strb	r2, [r3, #0]
 800f548:	003b      	movs	r3, r7
 800f54a:	1c0a      	adds	r2, r1, #0
 800f54c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f54e:	46c0      	nop			@ (mov r8, r8)
 800f550:	46bd      	mov	sp, r7
 800f552:	b002      	add	sp, #8
 800f554:	bd80      	pop	{r7, pc}

0800f556 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b082      	sub	sp, #8
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f55e:	46c0      	nop			@ (mov r8, r8)
 800f560:	46bd      	mov	sp, r7
 800f562:	b002      	add	sp, #8
 800f564:	bd80      	pop	{r7, pc}

0800f566 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b082      	sub	sp, #8
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f56e:	46c0      	nop			@ (mov r8, r8)
 800f570:	46bd      	mov	sp, r7
 800f572:	b002      	add	sp, #8
 800f574:	bd80      	pop	{r7, pc}

0800f576 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f57e:	46c0      	nop			@ (mov r8, r8)
 800f580:	46bd      	mov	sp, r7
 800f582:	b002      	add	sp, #8
 800f584:	bd80      	pop	{r7, pc}

0800f586 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f58e:	46c0      	nop			@ (mov r8, r8)
 800f590:	46bd      	mov	sp, r7
 800f592:	b002      	add	sp, #8
 800f594:	bd80      	pop	{r7, pc}

0800f596 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f59e:	46c0      	nop			@ (mov r8, r8)
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	b002      	add	sp, #8
 800f5a4:	bd80      	pop	{r7, pc}
	...

0800f5a8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f5a8:	b590      	push	{r4, r7, lr}
 800f5aa:	b089      	sub	sp, #36	@ 0x24
 800f5ac:	af02      	add	r7, sp, #8
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2240      	movs	r2, #64	@ 0x40
 800f5bc:	5c9b      	ldrb	r3, [r3, r2]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d101      	bne.n	800f5c6 <I2C_Master_ISR_IT+0x1e>
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	e113      	b.n	800f7ee <I2C_Master_ISR_IT+0x246>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2240      	movs	r2, #64	@ 0x40
 800f5ca:	2101      	movs	r1, #1
 800f5cc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2210      	movs	r2, #16
 800f5d2:	4013      	ands	r3, r2
 800f5d4:	d012      	beq.n	800f5fc <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2210      	movs	r2, #16
 800f5da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f5dc:	d00e      	beq.n	800f5fc <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	2210      	movs	r2, #16
 800f5e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5ea:	2204      	movs	r2, #4
 800f5ec:	431a      	orrs	r2, r3
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	0018      	movs	r0, r3
 800f5f6:	f001 f9ba 	bl	801096e <I2C_Flush_TXDR>
 800f5fa:	e0e5      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	2204      	movs	r2, #4
 800f600:	4013      	ands	r3, r2
 800f602:	d021      	beq.n	800f648 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2204      	movs	r2, #4
 800f608:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f60a:	d01d      	beq.n	800f648 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2204      	movs	r2, #4
 800f610:	4393      	bics	r3, r2
 800f612:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f61e:	b2d2      	uxtb	r2, r2
 800f620:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f630:	3b01      	subs	r3, #1
 800f632:	b29a      	uxth	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	3b01      	subs	r3, #1
 800f640:	b29a      	uxth	r2, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f646:	e0bf      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	2202      	movs	r2, #2
 800f64c:	4013      	ands	r3, r2
 800f64e:	d01c      	beq.n	800f68a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2202      	movs	r2, #2
 800f654:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f656:	d018      	beq.n	800f68a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f65c:	781a      	ldrb	r2, [r3, #0]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f668:	1c5a      	adds	r2, r3, #1
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f672:	3b01      	subs	r3, #1
 800f674:	b29a      	uxth	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f67e:	b29b      	uxth	r3, r3
 800f680:	3b01      	subs	r3, #1
 800f682:	b29a      	uxth	r2, r3
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f688:	e09e      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2280      	movs	r2, #128	@ 0x80
 800f68e:	4013      	ands	r3, r2
 800f690:	d100      	bne.n	800f694 <I2C_Master_ISR_IT+0xec>
 800f692:	e069      	b.n	800f768 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2240      	movs	r2, #64	@ 0x40
 800f698:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f69a:	d065      	beq.n	800f768 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d04a      	beq.n	800f73c <I2C_Master_ISR_IT+0x194>
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d146      	bne.n	800f73c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	2112      	movs	r1, #18
 800f6b8:	187b      	adds	r3, r7, r1
 800f6ba:	0592      	lsls	r2, r2, #22
 800f6bc:	0d92      	lsrs	r2, r2, #22
 800f6be:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	2bff      	cmp	r3, #255	@ 0xff
 800f6c8:	d910      	bls.n	800f6ec <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	22ff      	movs	r2, #255	@ 0xff
 800f6ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6d4:	b2da      	uxtb	r2, r3
 800f6d6:	2380      	movs	r3, #128	@ 0x80
 800f6d8:	045c      	lsls	r4, r3, #17
 800f6da:	187b      	adds	r3, r7, r1
 800f6dc:	8819      	ldrh	r1, [r3, #0]
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9300      	str	r3, [sp, #0]
 800f6e4:	0023      	movs	r3, r4
 800f6e6:	f001 fc8f 	bl	8011008 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6ea:	e03c      	b.n	800f766 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6fa:	4a3f      	ldr	r2, [pc, #252]	@ (800f7f8 <I2C_Master_ISR_IT+0x250>)
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d00e      	beq.n	800f71e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f704:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800f70a:	2312      	movs	r3, #18
 800f70c:	18fb      	adds	r3, r7, r3
 800f70e:	8819      	ldrh	r1, [r3, #0]
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	2300      	movs	r3, #0
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	0023      	movs	r3, r4
 800f718:	f001 fc76 	bl	8011008 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f71c:	e023      	b.n	800f766 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f722:	b2da      	uxtb	r2, r3
 800f724:	2380      	movs	r3, #128	@ 0x80
 800f726:	049c      	lsls	r4, r3, #18
 800f728:	2312      	movs	r3, #18
 800f72a:	18fb      	adds	r3, r7, r3
 800f72c:	8819      	ldrh	r1, [r3, #0]
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	2300      	movs	r3, #0
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	0023      	movs	r3, r4
 800f736:	f001 fc67 	bl	8011008 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f73a:	e014      	b.n	800f766 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	685a      	ldr	r2, [r3, #4]
 800f742:	2380      	movs	r3, #128	@ 0x80
 800f744:	049b      	lsls	r3, r3, #18
 800f746:	401a      	ands	r2, r3
 800f748:	2380      	movs	r3, #128	@ 0x80
 800f74a:	049b      	lsls	r3, r3, #18
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d004      	beq.n	800f75a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	0018      	movs	r0, r3
 800f754:	f000 fcf4 	bl	8010140 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f758:	e036      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2140      	movs	r1, #64	@ 0x40
 800f75e:	0018      	movs	r0, r3
 800f760:	f000 ffda 	bl	8010718 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f764:	e030      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
 800f766:	e02f      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2240      	movs	r2, #64	@ 0x40
 800f76c:	4013      	ands	r3, r2
 800f76e:	d02b      	beq.n	800f7c8 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2240      	movs	r2, #64	@ 0x40
 800f774:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f776:	d027      	beq.n	800f7c8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d11d      	bne.n	800f7be <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	685a      	ldr	r2, [r3, #4]
 800f788:	2380      	movs	r3, #128	@ 0x80
 800f78a:	049b      	lsls	r3, r3, #18
 800f78c:	401a      	ands	r2, r3
 800f78e:	2380      	movs	r3, #128	@ 0x80
 800f790:	049b      	lsls	r3, r3, #18
 800f792:	429a      	cmp	r2, r3
 800f794:	d018      	beq.n	800f7c8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f79a:	4a17      	ldr	r2, [pc, #92]	@ (800f7f8 <I2C_Master_ISR_IT+0x250>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d109      	bne.n	800f7b4 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2180      	movs	r1, #128	@ 0x80
 800f7ac:	01c9      	lsls	r1, r1, #7
 800f7ae:	430a      	orrs	r2, r1
 800f7b0:	605a      	str	r2, [r3, #4]
 800f7b2:	e009      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	0018      	movs	r0, r3
 800f7b8:	f000 fcc2 	bl	8010140 <I2C_ITMasterSeqCplt>
 800f7bc:	e004      	b.n	800f7c8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2140      	movs	r1, #64	@ 0x40
 800f7c2:	0018      	movs	r0, r3
 800f7c4:	f000 ffa8 	bl	8010718 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	2220      	movs	r2, #32
 800f7cc:	4013      	ands	r3, r2
 800f7ce:	d009      	beq.n	800f7e4 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2220      	movs	r2, #32
 800f7d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f7d6:	d005      	beq.n	800f7e4 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	0011      	movs	r1, r2
 800f7de:	0018      	movs	r0, r3
 800f7e0:	f000 fd54 	bl	801028c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2240      	movs	r2, #64	@ 0x40
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	0018      	movs	r0, r3
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	b007      	add	sp, #28
 800f7f4:	bd90      	pop	{r4, r7, pc}
 800f7f6:	46c0      	nop			@ (mov r8, r8)
 800f7f8:	ffff0000 	.word	0xffff0000

0800f7fc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b086      	sub	sp, #24
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f80c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2240      	movs	r2, #64	@ 0x40
 800f816:	5c9b      	ldrb	r3, [r3, r2]
 800f818:	2b01      	cmp	r3, #1
 800f81a:	d101      	bne.n	800f820 <I2C_Slave_ISR_IT+0x24>
 800f81c:	2302      	movs	r3, #2
 800f81e:	e0e6      	b.n	800f9ee <I2C_Slave_ISR_IT+0x1f2>
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2240      	movs	r2, #64	@ 0x40
 800f824:	2101      	movs	r1, #1
 800f826:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	2220      	movs	r2, #32
 800f82c:	4013      	ands	r3, r2
 800f82e:	d009      	beq.n	800f844 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2220      	movs	r2, #32
 800f834:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f836:	d005      	beq.n	800f844 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f838:	693a      	ldr	r2, [r7, #16]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	0011      	movs	r1, r2
 800f83e:	0018      	movs	r0, r3
 800f840:	f000 fdf2 	bl	8010428 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	2210      	movs	r2, #16
 800f848:	4013      	ands	r3, r2
 800f84a:	d052      	beq.n	800f8f2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2210      	movs	r2, #16
 800f850:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f852:	d04e      	beq.n	800f8f2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f858:	b29b      	uxth	r3, r3
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d12d      	bne.n	800f8ba <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2241      	movs	r2, #65	@ 0x41
 800f862:	5c9b      	ldrb	r3, [r3, r2]
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b28      	cmp	r3, #40	@ 0x28
 800f868:	d10b      	bne.n	800f882 <I2C_Slave_ISR_IT+0x86>
 800f86a:	697a      	ldr	r2, [r7, #20]
 800f86c:	2380      	movs	r3, #128	@ 0x80
 800f86e:	049b      	lsls	r3, r3, #18
 800f870:	429a      	cmp	r2, r3
 800f872:	d106      	bne.n	800f882 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	0011      	movs	r1, r2
 800f87a:	0018      	movs	r0, r3
 800f87c:	f000 fef4 	bl	8010668 <I2C_ITListenCplt>
 800f880:	e036      	b.n	800f8f0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2241      	movs	r2, #65	@ 0x41
 800f886:	5c9b      	ldrb	r3, [r3, r2]
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b29      	cmp	r3, #41	@ 0x29
 800f88c:	d110      	bne.n	800f8b0 <I2C_Slave_ISR_IT+0xb4>
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	4a59      	ldr	r2, [pc, #356]	@ (800f9f8 <I2C_Slave_ISR_IT+0x1fc>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d00c      	beq.n	800f8b0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2210      	movs	r2, #16
 800f89c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	0018      	movs	r0, r3
 800f8a2:	f001 f864 	bl	801096e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	f000 fc8b 	bl	80101c4 <I2C_ITSlaveSeqCplt>
 800f8ae:	e01f      	b.n	800f8f0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2210      	movs	r2, #16
 800f8b6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f8b8:	e091      	b.n	800f9de <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2210      	movs	r2, #16
 800f8c0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8c6:	2204      	movs	r2, #4
 800f8c8:	431a      	orrs	r2, r3
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d005      	beq.n	800f8e0 <I2C_Slave_ISR_IT+0xe4>
 800f8d4:	697a      	ldr	r2, [r7, #20]
 800f8d6:	2380      	movs	r3, #128	@ 0x80
 800f8d8:	045b      	lsls	r3, r3, #17
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d000      	beq.n	800f8e0 <I2C_Slave_ISR_IT+0xe4>
 800f8de:	e07e      	b.n	800f9de <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	0011      	movs	r1, r2
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	f000 ff15 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f8ee:	e076      	b.n	800f9de <I2C_Slave_ISR_IT+0x1e2>
 800f8f0:	e075      	b.n	800f9de <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	2204      	movs	r2, #4
 800f8f6:	4013      	ands	r3, r2
 800f8f8:	d02f      	beq.n	800f95a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2204      	movs	r2, #4
 800f8fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f900:	d02b      	beq.n	800f95a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f906:	b29b      	uxth	r3, r3
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d018      	beq.n	800f93e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f916:	b2d2      	uxtb	r2, r2
 800f918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f928:	3b01      	subs	r3, #1
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f934:	b29b      	uxth	r3, r3
 800f936:	3b01      	subs	r3, #1
 800f938:	b29a      	uxth	r2, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f942:	b29b      	uxth	r3, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	d14c      	bne.n	800f9e2 <I2C_Slave_ISR_IT+0x1e6>
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	4a2b      	ldr	r2, [pc, #172]	@ (800f9f8 <I2C_Slave_ISR_IT+0x1fc>)
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d048      	beq.n	800f9e2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	0018      	movs	r0, r3
 800f954:	f000 fc36 	bl	80101c4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f958:	e043      	b.n	800f9e2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	2208      	movs	r2, #8
 800f95e:	4013      	ands	r3, r2
 800f960:	d00a      	beq.n	800f978 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2208      	movs	r2, #8
 800f966:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f968:	d006      	beq.n	800f978 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f96a:	693a      	ldr	r2, [r7, #16]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	0011      	movs	r1, r2
 800f970:	0018      	movs	r0, r3
 800f972:	f000 fb41 	bl	800fff8 <I2C_ITAddrCplt>
 800f976:	e035      	b.n	800f9e4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	2202      	movs	r2, #2
 800f97c:	4013      	ands	r3, r2
 800f97e:	d031      	beq.n	800f9e4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2202      	movs	r2, #2
 800f984:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f986:	d02d      	beq.n	800f9e4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d018      	beq.n	800f9c4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f996:	781a      	ldrb	r2, [r3, #0]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9a2:	1c5a      	adds	r2, r3, #1
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f9c2:	e00f      	b.n	800f9e4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	2380      	movs	r3, #128	@ 0x80
 800f9c8:	045b      	lsls	r3, r3, #17
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d002      	beq.n	800f9d4 <I2C_Slave_ISR_IT+0x1d8>
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d107      	bne.n	800f9e4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	0018      	movs	r0, r3
 800f9d8:	f000 fbf4 	bl	80101c4 <I2C_ITSlaveSeqCplt>
 800f9dc:	e002      	b.n	800f9e4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800f9de:	46c0      	nop			@ (mov r8, r8)
 800f9e0:	e000      	b.n	800f9e4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800f9e2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2240      	movs	r2, #64	@ 0x40
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	0018      	movs	r0, r3
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	b006      	add	sp, #24
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	46c0      	nop			@ (mov r8, r8)
 800f9f8:	ffff0000 	.word	0xffff0000

0800f9fc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800f9fc:	b590      	push	{r4, r7, lr}
 800f9fe:	b089      	sub	sp, #36	@ 0x24
 800fa00:	af02      	add	r7, sp, #8
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2240      	movs	r2, #64	@ 0x40
 800fa0c:	5c9b      	ldrb	r3, [r3, r2]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d101      	bne.n	800fa16 <I2C_Master_ISR_DMA+0x1a>
 800fa12:	2302      	movs	r3, #2
 800fa14:	e0e7      	b.n	800fbe6 <I2C_Master_ISR_DMA+0x1ea>
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2240      	movs	r2, #64	@ 0x40
 800fa1a:	2101      	movs	r1, #1
 800fa1c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2210      	movs	r2, #16
 800fa22:	4013      	ands	r3, r2
 800fa24:	d017      	beq.n	800fa56 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2210      	movs	r2, #16
 800fa2a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fa2c:	d013      	beq.n	800fa56 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	2210      	movs	r2, #16
 800fa34:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa3a:	2204      	movs	r2, #4
 800fa3c:	431a      	orrs	r2, r3
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2120      	movs	r1, #32
 800fa46:	0018      	movs	r0, r3
 800fa48:	f001 fb18 	bl	801107c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	0018      	movs	r0, r3
 800fa50:	f000 ff8d 	bl	801096e <I2C_Flush_TXDR>
 800fa54:	e0c2      	b.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	2280      	movs	r2, #128	@ 0x80
 800fa5a:	4013      	ands	r3, r2
 800fa5c:	d100      	bne.n	800fa60 <I2C_Master_ISR_DMA+0x64>
 800fa5e:	e07c      	b.n	800fb5a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2240      	movs	r2, #64	@ 0x40
 800fa64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800fa66:	d100      	bne.n	800fa6a <I2C_Master_ISR_DMA+0x6e>
 800fa68:	e077      	b.n	800fb5a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2140      	movs	r1, #64	@ 0x40
 800fa76:	438a      	bics	r2, r1
 800fa78:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d055      	beq.n	800fb30 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	685b      	ldr	r3, [r3, #4]
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	2312      	movs	r3, #18
 800fa8e:	18fb      	adds	r3, r7, r3
 800fa90:	0592      	lsls	r2, r2, #22
 800fa92:	0d92      	lsrs	r2, r2, #22
 800fa94:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa9a:	b29b      	uxth	r3, r3
 800fa9c:	2bff      	cmp	r3, #255	@ 0xff
 800fa9e:	d906      	bls.n	800faae <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	22ff      	movs	r2, #255	@ 0xff
 800faa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800faa6:	2380      	movs	r3, #128	@ 0x80
 800faa8:	045b      	lsls	r3, r3, #17
 800faaa:	617b      	str	r3, [r7, #20]
 800faac:	e010      	b.n	800fad0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fabc:	4a4c      	ldr	r2, [pc, #304]	@ (800fbf0 <I2C_Master_ISR_DMA+0x1f4>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d003      	beq.n	800faca <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fac6:	617b      	str	r3, [r7, #20]
 800fac8:	e002      	b.n	800fad0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800faca:	2380      	movs	r3, #128	@ 0x80
 800facc:	049b      	lsls	r3, r3, #18
 800face:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fad4:	b2da      	uxtb	r2, r3
 800fad6:	697c      	ldr	r4, [r7, #20]
 800fad8:	2312      	movs	r3, #18
 800fada:	18fb      	adds	r3, r7, r3
 800fadc:	8819      	ldrh	r1, [r3, #0]
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	2300      	movs	r3, #0
 800fae2:	9300      	str	r3, [sp, #0]
 800fae4:	0023      	movs	r3, r4
 800fae6:	f001 fa8f 	bl	8011008 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800faee:	b29a      	uxth	r2, r3
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800faf4:	1ad3      	subs	r3, r2, r3
 800faf6:	b29a      	uxth	r2, r3
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2241      	movs	r2, #65	@ 0x41
 800fb00:	5c9b      	ldrb	r3, [r3, r2]
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	2b22      	cmp	r3, #34	@ 0x22
 800fb06:	d109      	bne.n	800fb1c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2180      	movs	r1, #128	@ 0x80
 800fb14:	0209      	lsls	r1, r1, #8
 800fb16:	430a      	orrs	r2, r1
 800fb18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fb1a:	e05f      	b.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2180      	movs	r1, #128	@ 0x80
 800fb28:	01c9      	lsls	r1, r1, #7
 800fb2a:	430a      	orrs	r2, r1
 800fb2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fb2e:	e055      	b.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	685a      	ldr	r2, [r3, #4]
 800fb36:	2380      	movs	r3, #128	@ 0x80
 800fb38:	049b      	lsls	r3, r3, #18
 800fb3a:	401a      	ands	r2, r3
 800fb3c:	2380      	movs	r3, #128	@ 0x80
 800fb3e:	049b      	lsls	r3, r3, #18
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d004      	beq.n	800fb4e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	0018      	movs	r0, r3
 800fb48:	f000 fafa 	bl	8010140 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800fb4c:	e046      	b.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2140      	movs	r1, #64	@ 0x40
 800fb52:	0018      	movs	r0, r3
 800fb54:	f000 fde0 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800fb58:	e040      	b.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	2240      	movs	r2, #64	@ 0x40
 800fb5e:	4013      	ands	r3, r2
 800fb60:	d02c      	beq.n	800fbbc <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2240      	movs	r2, #64	@ 0x40
 800fb66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fb68:	d028      	beq.n	800fbbc <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d11d      	bne.n	800fbb0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	685a      	ldr	r2, [r3, #4]
 800fb7a:	2380      	movs	r3, #128	@ 0x80
 800fb7c:	049b      	lsls	r3, r3, #18
 800fb7e:	401a      	ands	r2, r3
 800fb80:	2380      	movs	r3, #128	@ 0x80
 800fb82:	049b      	lsls	r3, r3, #18
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d028      	beq.n	800fbda <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8c:	4a18      	ldr	r2, [pc, #96]	@ (800fbf0 <I2C_Master_ISR_DMA+0x1f4>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d109      	bne.n	800fba6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	685a      	ldr	r2, [r3, #4]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2180      	movs	r1, #128	@ 0x80
 800fb9e:	01c9      	lsls	r1, r1, #7
 800fba0:	430a      	orrs	r2, r1
 800fba2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800fba4:	e019      	b.n	800fbda <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	0018      	movs	r0, r3
 800fbaa:	f000 fac9 	bl	8010140 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800fbae:	e014      	b.n	800fbda <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2140      	movs	r1, #64	@ 0x40
 800fbb4:	0018      	movs	r0, r3
 800fbb6:	f000 fdaf 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fbba:	e00e      	b.n	800fbda <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	2220      	movs	r2, #32
 800fbc0:	4013      	ands	r3, r2
 800fbc2:	d00b      	beq.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2220      	movs	r2, #32
 800fbc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fbca:	d007      	beq.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800fbcc:	68ba      	ldr	r2, [r7, #8]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	0011      	movs	r1, r2
 800fbd2:	0018      	movs	r0, r3
 800fbd4:	f000 fb5a 	bl	801028c <I2C_ITMasterCplt>
 800fbd8:	e000      	b.n	800fbdc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800fbda:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2240      	movs	r2, #64	@ 0x40
 800fbe0:	2100      	movs	r1, #0
 800fbe2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	0018      	movs	r0, r3
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	b007      	add	sp, #28
 800fbec:	bd90      	pop	{r4, r7, pc}
 800fbee:	46c0      	nop			@ (mov r8, r8)
 800fbf0:	ffff0000 	.word	0xffff0000

0800fbf4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800fbf4:	b590      	push	{r4, r7, lr}
 800fbf6:	b089      	sub	sp, #36	@ 0x24
 800fbf8:	af02      	add	r7, sp, #8
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800fc00:	4b88      	ldr	r3, [pc, #544]	@ (800fe24 <I2C_Mem_ISR_DMA+0x230>)
 800fc02:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2240      	movs	r2, #64	@ 0x40
 800fc08:	5c9b      	ldrb	r3, [r3, r2]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d101      	bne.n	800fc12 <I2C_Mem_ISR_DMA+0x1e>
 800fc0e:	2302      	movs	r3, #2
 800fc10:	e104      	b.n	800fe1c <I2C_Mem_ISR_DMA+0x228>
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2240      	movs	r2, #64	@ 0x40
 800fc16:	2101      	movs	r1, #1
 800fc18:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	2210      	movs	r2, #16
 800fc1e:	4013      	ands	r3, r2
 800fc20:	d017      	beq.n	800fc52 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2210      	movs	r2, #16
 800fc26:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fc28:	d013      	beq.n	800fc52 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2210      	movs	r2, #16
 800fc30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc36:	2204      	movs	r2, #4
 800fc38:	431a      	orrs	r2, r3
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2120      	movs	r1, #32
 800fc42:	0018      	movs	r0, r3
 800fc44:	f001 fa1a 	bl	801107c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	0018      	movs	r0, r3
 800fc4c:	f000 fe8f 	bl	801096e <I2C_Flush_TXDR>
 800fc50:	e0df      	b.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	2202      	movs	r2, #2
 800fc56:	4013      	ands	r3, r2
 800fc58:	d00d      	beq.n	800fc76 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2202      	movs	r2, #2
 800fc5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fc60:	d009      	beq.n	800fc76 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800fc6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2201      	movs	r2, #1
 800fc70:	4252      	negs	r2, r2
 800fc72:	651a      	str	r2, [r3, #80]	@ 0x50
 800fc74:	e0cd      	b.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	2280      	movs	r2, #128	@ 0x80
 800fc7a:	4013      	ands	r3, r2
 800fc7c:	d05e      	beq.n	800fd3c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2240      	movs	r2, #64	@ 0x40
 800fc82:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800fc84:	d05a      	beq.n	800fd3c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2110      	movs	r1, #16
 800fc8a:	0018      	movs	r0, r3
 800fc8c:	f001 f9f6 	bl	801107c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d04a      	beq.n	800fd30 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	2bff      	cmp	r3, #255	@ 0xff
 800fca2:	d910      	bls.n	800fcc6 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	22ff      	movs	r2, #255	@ 0xff
 800fca8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcae:	b299      	uxth	r1, r3
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcb4:	b2da      	uxtb	r2, r3
 800fcb6:	2380      	movs	r3, #128	@ 0x80
 800fcb8:	045b      	lsls	r3, r3, #17
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	2400      	movs	r4, #0
 800fcbe:	9400      	str	r4, [sp, #0]
 800fcc0:	f001 f9a2 	bl	8011008 <I2C_TransferConfig>
 800fcc4:	e011      	b.n	800fcea <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcca:	b29a      	uxth	r2, r3
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcd4:	b299      	uxth	r1, r3
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcda:	b2da      	uxtb	r2, r3
 800fcdc:	2380      	movs	r3, #128	@ 0x80
 800fcde:	049b      	lsls	r3, r3, #18
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	2400      	movs	r4, #0
 800fce4:	9400      	str	r4, [sp, #0]
 800fce6:	f001 f98f 	bl	8011008 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2241      	movs	r2, #65	@ 0x41
 800fd00:	5c9b      	ldrb	r3, [r3, r2]
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	2b22      	cmp	r3, #34	@ 0x22
 800fd06:	d109      	bne.n	800fd1c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2180      	movs	r1, #128	@ 0x80
 800fd14:	0209      	lsls	r1, r1, #8
 800fd16:	430a      	orrs	r2, r1
 800fd18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fd1a:	e07a      	b.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2180      	movs	r1, #128	@ 0x80
 800fd28:	01c9      	lsls	r1, r1, #7
 800fd2a:	430a      	orrs	r2, r1
 800fd2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fd2e:	e070      	b.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2140      	movs	r1, #64	@ 0x40
 800fd34:	0018      	movs	r0, r3
 800fd36:	f000 fcef 	bl	8010718 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800fd3a:	e06a      	b.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	2240      	movs	r2, #64	@ 0x40
 800fd40:	4013      	ands	r3, r2
 800fd42:	d058      	beq.n	800fdf6 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2240      	movs	r2, #64	@ 0x40
 800fd48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fd4a:	d054      	beq.n	800fdf6 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2241      	movs	r2, #65	@ 0x41
 800fd50:	5c9b      	ldrb	r3, [r3, r2]
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	2b22      	cmp	r3, #34	@ 0x22
 800fd56:	d101      	bne.n	800fd5c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800fd58:	4b33      	ldr	r3, [pc, #204]	@ (800fe28 <I2C_Mem_ISR_DMA+0x234>)
 800fd5a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd60:	b29b      	uxth	r3, r3
 800fd62:	2bff      	cmp	r3, #255	@ 0xff
 800fd64:	d911      	bls.n	800fd8a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	22ff      	movs	r2, #255	@ 0xff
 800fd6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd70:	b299      	uxth	r1, r3
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	2380      	movs	r3, #128	@ 0x80
 800fd7a:	045c      	lsls	r4, r3, #17
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	0023      	movs	r3, r4
 800fd84:	f001 f940 	bl	8011008 <I2C_TransferConfig>
 800fd88:	e012      	b.n	800fdb0 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd98:	b299      	uxth	r1, r3
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd9e:	b2da      	uxtb	r2, r3
 800fda0:	2380      	movs	r3, #128	@ 0x80
 800fda2:	049c      	lsls	r4, r3, #18
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	0023      	movs	r3, r4
 800fdac:	f001 f92c 	bl	8011008 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2241      	movs	r2, #65	@ 0x41
 800fdc6:	5c9b      	ldrb	r3, [r3, r2]
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	2b22      	cmp	r3, #34	@ 0x22
 800fdcc:	d109      	bne.n	800fde2 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	2180      	movs	r1, #128	@ 0x80
 800fdda:	0209      	lsls	r1, r1, #8
 800fddc:	430a      	orrs	r2, r1
 800fdde:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fde0:	e017      	b.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	2180      	movs	r1, #128	@ 0x80
 800fdee:	01c9      	lsls	r1, r1, #7
 800fdf0:	430a      	orrs	r2, r1
 800fdf2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fdf4:	e00d      	b.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	2220      	movs	r2, #32
 800fdfa:	4013      	ands	r3, r2
 800fdfc:	d009      	beq.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2220      	movs	r2, #32
 800fe02:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe04:	d005      	beq.n	800fe12 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	0011      	movs	r1, r2
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f000 fa3d 	bl	801028c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2240      	movs	r2, #64	@ 0x40
 800fe16:	2100      	movs	r1, #0
 800fe18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fe1a:	2300      	movs	r3, #0
}
 800fe1c:	0018      	movs	r0, r3
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	b007      	add	sp, #28
 800fe22:	bd90      	pop	{r4, r7, pc}
 800fe24:	80002000 	.word	0x80002000
 800fe28:	80002400 	.word	0x80002400

0800fe2c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b088      	sub	sp, #32
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe3c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2240      	movs	r2, #64	@ 0x40
 800fe46:	5c9b      	ldrb	r3, [r3, r2]
 800fe48:	2b01      	cmp	r3, #1
 800fe4a:	d101      	bne.n	800fe50 <I2C_Slave_ISR_DMA+0x24>
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	e0cd      	b.n	800ffec <I2C_Slave_ISR_DMA+0x1c0>
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2240      	movs	r2, #64	@ 0x40
 800fe54:	2101      	movs	r1, #1
 800fe56:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	2220      	movs	r2, #32
 800fe5c:	4013      	ands	r3, r2
 800fe5e:	d009      	beq.n	800fe74 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2220      	movs	r2, #32
 800fe64:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe66:	d005      	beq.n	800fe74 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800fe68:	68ba      	ldr	r2, [r7, #8]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	0011      	movs	r1, r2
 800fe6e:	0018      	movs	r0, r3
 800fe70:	f000 fada 	bl	8010428 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2210      	movs	r2, #16
 800fe78:	4013      	ands	r3, r2
 800fe7a:	d100      	bne.n	800fe7e <I2C_Slave_ISR_DMA+0x52>
 800fe7c:	e0a3      	b.n	800ffc6 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2210      	movs	r2, #16
 800fe82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fe84:	d100      	bne.n	800fe88 <I2C_Slave_ISR_DMA+0x5c>
 800fe86:	e09e      	b.n	800ffc6 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	2380      	movs	r3, #128	@ 0x80
 800fe8c:	01db      	lsls	r3, r3, #7
 800fe8e:	4013      	ands	r3, r2
 800fe90:	d105      	bne.n	800fe9e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800fe92:	687a      	ldr	r2, [r7, #4]
 800fe94:	2380      	movs	r3, #128	@ 0x80
 800fe96:	021b      	lsls	r3, r3, #8
 800fe98:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fe9a:	d100      	bne.n	800fe9e <I2C_Slave_ISR_DMA+0x72>
 800fe9c:	e08c      	b.n	800ffb8 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00c      	beq.n	800fec0 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	2380      	movs	r3, #128	@ 0x80
 800feaa:	021b      	lsls	r3, r3, #8
 800feac:	4013      	ands	r3, r2
 800feae:	d007      	beq.n	800fec0 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d101      	bne.n	800fec0 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800febc:	2301      	movs	r3, #1
 800febe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00c      	beq.n	800fee2 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	2380      	movs	r3, #128	@ 0x80
 800fecc:	01db      	lsls	r3, r3, #7
 800fece:	4013      	ands	r3, r2
 800fed0:	d007      	beq.n	800fee2 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800fede:	2301      	movs	r3, #1
 800fee0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d12d      	bne.n	800ff44 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	2241      	movs	r2, #65	@ 0x41
 800feec:	5c9b      	ldrb	r3, [r3, r2]
 800feee:	b2db      	uxtb	r3, r3
 800fef0:	2b28      	cmp	r3, #40	@ 0x28
 800fef2:	d10b      	bne.n	800ff0c <I2C_Slave_ISR_DMA+0xe0>
 800fef4:	69ba      	ldr	r2, [r7, #24]
 800fef6:	2380      	movs	r3, #128	@ 0x80
 800fef8:	049b      	lsls	r3, r3, #18
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d106      	bne.n	800ff0c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	0011      	movs	r1, r2
 800ff04:	0018      	movs	r0, r3
 800ff06:	f000 fbaf 	bl	8010668 <I2C_ITListenCplt>
 800ff0a:	e054      	b.n	800ffb6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2241      	movs	r2, #65	@ 0x41
 800ff10:	5c9b      	ldrb	r3, [r3, r2]
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b29      	cmp	r3, #41	@ 0x29
 800ff16:	d110      	bne.n	800ff3a <I2C_Slave_ISR_DMA+0x10e>
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	4a36      	ldr	r2, [pc, #216]	@ (800fff4 <I2C_Slave_ISR_DMA+0x1c8>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d00c      	beq.n	800ff3a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2210      	movs	r2, #16
 800ff26:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	0018      	movs	r0, r3
 800ff2c:	f000 fd1f 	bl	801096e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	0018      	movs	r0, r3
 800ff34:	f000 f946 	bl	80101c4 <I2C_ITSlaveSeqCplt>
 800ff38:	e03d      	b.n	800ffb6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2210      	movs	r2, #16
 800ff40:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ff42:	e03e      	b.n	800ffc2 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2210      	movs	r2, #16
 800ff4a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff50:	2204      	movs	r2, #4
 800ff52:	431a      	orrs	r2, r3
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ff58:	2317      	movs	r3, #23
 800ff5a:	18fb      	adds	r3, r7, r3
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	2141      	movs	r1, #65	@ 0x41
 800ff60:	5c52      	ldrb	r2, [r2, r1]
 800ff62:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ff64:	69bb      	ldr	r3, [r7, #24]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d004      	beq.n	800ff74 <I2C_Slave_ISR_DMA+0x148>
 800ff6a:	69ba      	ldr	r2, [r7, #24]
 800ff6c:	2380      	movs	r3, #128	@ 0x80
 800ff6e:	045b      	lsls	r3, r3, #17
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d126      	bne.n	800ffc2 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ff74:	2217      	movs	r2, #23
 800ff76:	18bb      	adds	r3, r7, r2
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	2b21      	cmp	r3, #33	@ 0x21
 800ff7c:	d003      	beq.n	800ff86 <I2C_Slave_ISR_DMA+0x15a>
 800ff7e:	18bb      	adds	r3, r7, r2
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	2b29      	cmp	r3, #41	@ 0x29
 800ff84:	d103      	bne.n	800ff8e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2221      	movs	r2, #33	@ 0x21
 800ff8a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff8c:	e00b      	b.n	800ffa6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ff8e:	2217      	movs	r2, #23
 800ff90:	18bb      	adds	r3, r7, r2
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2b22      	cmp	r3, #34	@ 0x22
 800ff96:	d003      	beq.n	800ffa0 <I2C_Slave_ISR_DMA+0x174>
 800ff98:	18bb      	adds	r3, r7, r2
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff9e:	d102      	bne.n	800ffa6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2222      	movs	r2, #34	@ 0x22
 800ffa4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	0011      	movs	r1, r2
 800ffae:	0018      	movs	r0, r3
 800ffb0:	f000 fbb2 	bl	8010718 <I2C_ITError>
      if (treatdmanack == 1U)
 800ffb4:	e005      	b.n	800ffc2 <I2C_Slave_ISR_DMA+0x196>
 800ffb6:	e004      	b.n	800ffc2 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	2210      	movs	r2, #16
 800ffbe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ffc0:	e00f      	b.n	800ffe2 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800ffc2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ffc4:	e00d      	b.n	800ffe2 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	2208      	movs	r2, #8
 800ffca:	4013      	ands	r3, r2
 800ffcc:	d009      	beq.n	800ffe2 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2208      	movs	r2, #8
 800ffd2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ffd4:	d005      	beq.n	800ffe2 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800ffd6:	68ba      	ldr	r2, [r7, #8]
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	0011      	movs	r1, r2
 800ffdc:	0018      	movs	r0, r3
 800ffde:	f000 f80b 	bl	800fff8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2240      	movs	r2, #64	@ 0x40
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	0018      	movs	r0, r3
 800ffee:	46bd      	mov	sp, r7
 800fff0:	b008      	add	sp, #32
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	ffff0000 	.word	0xffff0000

0800fff8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800fff8:	b5b0      	push	{r4, r5, r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2241      	movs	r2, #65	@ 0x41
 8010006:	5c9b      	ldrb	r3, [r3, r2]
 8010008:	b2db      	uxtb	r3, r3
 801000a:	001a      	movs	r2, r3
 801000c:	2328      	movs	r3, #40	@ 0x28
 801000e:	4013      	ands	r3, r2
 8010010:	2b28      	cmp	r3, #40	@ 0x28
 8010012:	d000      	beq.n	8010016 <I2C_ITAddrCplt+0x1e>
 8010014:	e088      	b.n	8010128 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	699b      	ldr	r3, [r3, #24]
 801001c:	0c1b      	lsrs	r3, r3, #16
 801001e:	b2da      	uxtb	r2, r3
 8010020:	250f      	movs	r5, #15
 8010022:	197b      	adds	r3, r7, r5
 8010024:	2101      	movs	r1, #1
 8010026:	400a      	ands	r2, r1
 8010028:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	0c1b      	lsrs	r3, r3, #16
 8010032:	b29a      	uxth	r2, r3
 8010034:	200c      	movs	r0, #12
 8010036:	183b      	adds	r3, r7, r0
 8010038:	21fe      	movs	r1, #254	@ 0xfe
 801003a:	400a      	ands	r2, r1
 801003c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	b29a      	uxth	r2, r3
 8010046:	240a      	movs	r4, #10
 8010048:	193b      	adds	r3, r7, r4
 801004a:	0592      	lsls	r2, r2, #22
 801004c:	0d92      	lsrs	r2, r2, #22
 801004e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	b29a      	uxth	r2, r3
 8010058:	2308      	movs	r3, #8
 801005a:	18fb      	adds	r3, r7, r3
 801005c:	21fe      	movs	r1, #254	@ 0xfe
 801005e:	400a      	ands	r2, r1
 8010060:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	2b02      	cmp	r3, #2
 8010068:	d148      	bne.n	80100fc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 801006a:	0021      	movs	r1, r4
 801006c:	187b      	adds	r3, r7, r1
 801006e:	881b      	ldrh	r3, [r3, #0]
 8010070:	09db      	lsrs	r3, r3, #7
 8010072:	b29a      	uxth	r2, r3
 8010074:	183b      	adds	r3, r7, r0
 8010076:	881b      	ldrh	r3, [r3, #0]
 8010078:	4053      	eors	r3, r2
 801007a:	b29b      	uxth	r3, r3
 801007c:	001a      	movs	r2, r3
 801007e:	2306      	movs	r3, #6
 8010080:	4013      	ands	r3, r2
 8010082:	d120      	bne.n	80100c6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010084:	183b      	adds	r3, r7, r0
 8010086:	187a      	adds	r2, r7, r1
 8010088:	8812      	ldrh	r2, [r2, #0]
 801008a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801009a:	2b02      	cmp	r3, #2
 801009c:	d14c      	bne.n	8010138 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2208      	movs	r2, #8
 80100aa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2240      	movs	r2, #64	@ 0x40
 80100b0:	2100      	movs	r1, #0
 80100b2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80100b4:	183b      	adds	r3, r7, r0
 80100b6:	881a      	ldrh	r2, [r3, #0]
 80100b8:	197b      	adds	r3, r7, r5
 80100ba:	7819      	ldrb	r1, [r3, #0]
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	0018      	movs	r0, r3
 80100c0:	f7ff fa39 	bl	800f536 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80100c4:	e038      	b.n	8010138 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80100c6:	240c      	movs	r4, #12
 80100c8:	193b      	adds	r3, r7, r4
 80100ca:	2208      	movs	r2, #8
 80100cc:	18ba      	adds	r2, r7, r2
 80100ce:	8812      	ldrh	r2, [r2, #0]
 80100d0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80100d2:	2380      	movs	r3, #128	@ 0x80
 80100d4:	021a      	lsls	r2, r3, #8
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	0011      	movs	r1, r2
 80100da:	0018      	movs	r0, r3
 80100dc:	f001 f85c 	bl	8011198 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2240      	movs	r2, #64	@ 0x40
 80100e4:	2100      	movs	r1, #0
 80100e6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80100e8:	193b      	adds	r3, r7, r4
 80100ea:	881a      	ldrh	r2, [r3, #0]
 80100ec:	230f      	movs	r3, #15
 80100ee:	18fb      	adds	r3, r7, r3
 80100f0:	7819      	ldrb	r1, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	0018      	movs	r0, r3
 80100f6:	f7ff fa1e 	bl	800f536 <HAL_I2C_AddrCallback>
}
 80100fa:	e01d      	b.n	8010138 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80100fc:	2380      	movs	r3, #128	@ 0x80
 80100fe:	021a      	lsls	r2, r3, #8
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	0011      	movs	r1, r2
 8010104:	0018      	movs	r0, r3
 8010106:	f001 f847 	bl	8011198 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2240      	movs	r2, #64	@ 0x40
 801010e:	2100      	movs	r1, #0
 8010110:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010112:	230c      	movs	r3, #12
 8010114:	18fb      	adds	r3, r7, r3
 8010116:	881a      	ldrh	r2, [r3, #0]
 8010118:	230f      	movs	r3, #15
 801011a:	18fb      	adds	r3, r7, r3
 801011c:	7819      	ldrb	r1, [r3, #0]
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	0018      	movs	r0, r3
 8010122:	f7ff fa08 	bl	800f536 <HAL_I2C_AddrCallback>
}
 8010126:	e007      	b.n	8010138 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2208      	movs	r2, #8
 801012e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2240      	movs	r2, #64	@ 0x40
 8010134:	2100      	movs	r1, #0
 8010136:	5499      	strb	r1, [r3, r2]
}
 8010138:	46c0      	nop			@ (mov r8, r8)
 801013a:	46bd      	mov	sp, r7
 801013c:	b004      	add	sp, #16
 801013e:	bdb0      	pop	{r4, r5, r7, pc}

08010140 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2242      	movs	r2, #66	@ 0x42
 801014c:	2100      	movs	r1, #0
 801014e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2241      	movs	r2, #65	@ 0x41
 8010154:	5c9b      	ldrb	r3, [r3, r2]
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b21      	cmp	r3, #33	@ 0x21
 801015a:	d117      	bne.n	801018c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2241      	movs	r2, #65	@ 0x41
 8010160:	2120      	movs	r1, #32
 8010162:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2211      	movs	r2, #17
 8010168:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2200      	movs	r2, #0
 801016e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2101      	movs	r1, #1
 8010174:	0018      	movs	r0, r3
 8010176:	f001 f80f 	bl	8011198 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2240      	movs	r2, #64	@ 0x40
 801017e:	2100      	movs	r1, #0
 8010180:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	0018      	movs	r0, r3
 8010186:	f7ff f9b6 	bl	800f4f6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801018a:	e016      	b.n	80101ba <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2241      	movs	r2, #65	@ 0x41
 8010190:	2120      	movs	r1, #32
 8010192:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2212      	movs	r2, #18
 8010198:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2102      	movs	r1, #2
 80101a4:	0018      	movs	r0, r3
 80101a6:	f000 fff7 	bl	8011198 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2240      	movs	r2, #64	@ 0x40
 80101ae:	2100      	movs	r1, #0
 80101b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	0018      	movs	r0, r3
 80101b6:	f7ff f9a6 	bl	800f506 <HAL_I2C_MasterRxCpltCallback>
}
 80101ba:	46c0      	nop			@ (mov r8, r8)
 80101bc:	46bd      	mov	sp, r7
 80101be:	b002      	add	sp, #8
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b084      	sub	sp, #16
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2242      	movs	r2, #66	@ 0x42
 80101d8:	2100      	movs	r1, #0
 80101da:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	2380      	movs	r3, #128	@ 0x80
 80101e0:	01db      	lsls	r3, r3, #7
 80101e2:	4013      	ands	r3, r2
 80101e4:	d008      	beq.n	80101f8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4924      	ldr	r1, [pc, #144]	@ (8010284 <I2C_ITSlaveSeqCplt+0xc0>)
 80101f2:	400a      	ands	r2, r1
 80101f4:	601a      	str	r2, [r3, #0]
 80101f6:	e00c      	b.n	8010212 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	2380      	movs	r3, #128	@ 0x80
 80101fc:	021b      	lsls	r3, r3, #8
 80101fe:	4013      	ands	r3, r2
 8010200:	d007      	beq.n	8010212 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	491e      	ldr	r1, [pc, #120]	@ (8010288 <I2C_ITSlaveSeqCplt+0xc4>)
 801020e:	400a      	ands	r2, r1
 8010210:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2241      	movs	r2, #65	@ 0x41
 8010216:	5c9b      	ldrb	r3, [r3, r2]
 8010218:	b2db      	uxtb	r3, r3
 801021a:	2b29      	cmp	r3, #41	@ 0x29
 801021c:	d114      	bne.n	8010248 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2241      	movs	r2, #65	@ 0x41
 8010222:	2128      	movs	r1, #40	@ 0x28
 8010224:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2221      	movs	r2, #33	@ 0x21
 801022a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2101      	movs	r1, #1
 8010230:	0018      	movs	r0, r3
 8010232:	f000 ffb1 	bl	8011198 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2240      	movs	r2, #64	@ 0x40
 801023a:	2100      	movs	r1, #0
 801023c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	0018      	movs	r0, r3
 8010242:	f7ff f968 	bl	800f516 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010246:	e019      	b.n	801027c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2241      	movs	r2, #65	@ 0x41
 801024c:	5c9b      	ldrb	r3, [r3, r2]
 801024e:	b2db      	uxtb	r3, r3
 8010250:	2b2a      	cmp	r3, #42	@ 0x2a
 8010252:	d113      	bne.n	801027c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2241      	movs	r2, #65	@ 0x41
 8010258:	2128      	movs	r1, #40	@ 0x28
 801025a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2222      	movs	r2, #34	@ 0x22
 8010260:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2102      	movs	r1, #2
 8010266:	0018      	movs	r0, r3
 8010268:	f000 ff96 	bl	8011198 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2240      	movs	r2, #64	@ 0x40
 8010270:	2100      	movs	r1, #0
 8010272:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	0018      	movs	r0, r3
 8010278:	f7ff f955 	bl	800f526 <HAL_I2C_SlaveRxCpltCallback>
}
 801027c:	46c0      	nop			@ (mov r8, r8)
 801027e:	46bd      	mov	sp, r7
 8010280:	b004      	add	sp, #16
 8010282:	bd80      	pop	{r7, pc}
 8010284:	ffffbfff 	.word	0xffffbfff
 8010288:	ffff7fff 	.word	0xffff7fff

0801028c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2220      	movs	r2, #32
 80102a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2241      	movs	r2, #65	@ 0x41
 80102a6:	5c9b      	ldrb	r3, [r3, r2]
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	2b21      	cmp	r3, #33	@ 0x21
 80102ac:	d108      	bne.n	80102c0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2101      	movs	r1, #1
 80102b2:	0018      	movs	r0, r3
 80102b4:	f000 ff70 	bl	8011198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2211      	movs	r2, #17
 80102bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80102be:	e00d      	b.n	80102dc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2241      	movs	r2, #65	@ 0x41
 80102c4:	5c9b      	ldrb	r3, [r3, r2]
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	2b22      	cmp	r3, #34	@ 0x22
 80102ca:	d107      	bne.n	80102dc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2102      	movs	r1, #2
 80102d0:	0018      	movs	r0, r3
 80102d2:	f000 ff61 	bl	8011198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2212      	movs	r2, #18
 80102da:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	685a      	ldr	r2, [r3, #4]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	494e      	ldr	r1, [pc, #312]	@ (8010420 <I2C_ITMasterCplt+0x194>)
 80102e8:	400a      	ands	r2, r1
 80102ea:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a4b      	ldr	r2, [pc, #300]	@ (8010424 <I2C_ITMasterCplt+0x198>)
 80102f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	2210      	movs	r2, #16
 80102fc:	4013      	ands	r3, r2
 80102fe:	d009      	beq.n	8010314 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2210      	movs	r2, #16
 8010306:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801030c:	2204      	movs	r2, #4
 801030e:	431a      	orrs	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2241      	movs	r2, #65	@ 0x41
 8010318:	5c9b      	ldrb	r3, [r3, r2]
 801031a:	b2db      	uxtb	r3, r3
 801031c:	2b60      	cmp	r3, #96	@ 0x60
 801031e:	d109      	bne.n	8010334 <I2C_ITMasterCplt+0xa8>
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	2204      	movs	r2, #4
 8010324:	4013      	ands	r3, r2
 8010326:	d005      	beq.n	8010334 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801032e:	b2db      	uxtb	r3, r3
 8010330:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010332:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	0018      	movs	r0, r3
 8010338:	f000 fb19 	bl	801096e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010340:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2241      	movs	r2, #65	@ 0x41
 8010346:	5c9b      	ldrb	r3, [r3, r2]
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b60      	cmp	r3, #96	@ 0x60
 801034c:	d002      	beq.n	8010354 <I2C_ITMasterCplt+0xc8>
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d007      	beq.n	8010364 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	0011      	movs	r1, r2
 801035c:	0018      	movs	r0, r3
 801035e:	f000 f9db 	bl	8010718 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010362:	e058      	b.n	8010416 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2241      	movs	r2, #65	@ 0x41
 8010368:	5c9b      	ldrb	r3, [r3, r2]
 801036a:	b2db      	uxtb	r3, r3
 801036c:	2b21      	cmp	r3, #33	@ 0x21
 801036e:	d126      	bne.n	80103be <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2241      	movs	r2, #65	@ 0x41
 8010374:	2120      	movs	r1, #32
 8010376:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2242      	movs	r2, #66	@ 0x42
 8010382:	5c9b      	ldrb	r3, [r3, r2]
 8010384:	b2db      	uxtb	r3, r3
 8010386:	2b40      	cmp	r3, #64	@ 0x40
 8010388:	d10c      	bne.n	80103a4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2242      	movs	r2, #66	@ 0x42
 801038e:	2100      	movs	r1, #0
 8010390:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2240      	movs	r2, #64	@ 0x40
 8010396:	2100      	movs	r1, #0
 8010398:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	0018      	movs	r0, r3
 801039e:	f7ff f8e2 	bl	800f566 <HAL_I2C_MemTxCpltCallback>
}
 80103a2:	e038      	b.n	8010416 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2242      	movs	r2, #66	@ 0x42
 80103a8:	2100      	movs	r1, #0
 80103aa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2240      	movs	r2, #64	@ 0x40
 80103b0:	2100      	movs	r1, #0
 80103b2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	0018      	movs	r0, r3
 80103b8:	f7ff f89d 	bl	800f4f6 <HAL_I2C_MasterTxCpltCallback>
}
 80103bc:	e02b      	b.n	8010416 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2241      	movs	r2, #65	@ 0x41
 80103c2:	5c9b      	ldrb	r3, [r3, r2]
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b22      	cmp	r3, #34	@ 0x22
 80103c8:	d125      	bne.n	8010416 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2241      	movs	r2, #65	@ 0x41
 80103ce:	2120      	movs	r1, #32
 80103d0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2242      	movs	r2, #66	@ 0x42
 80103dc:	5c9b      	ldrb	r3, [r3, r2]
 80103de:	b2db      	uxtb	r3, r3
 80103e0:	2b40      	cmp	r3, #64	@ 0x40
 80103e2:	d10c      	bne.n	80103fe <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2242      	movs	r2, #66	@ 0x42
 80103e8:	2100      	movs	r1, #0
 80103ea:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2240      	movs	r2, #64	@ 0x40
 80103f0:	2100      	movs	r1, #0
 80103f2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	0018      	movs	r0, r3
 80103f8:	f7ff f8bd 	bl	800f576 <HAL_I2C_MemRxCpltCallback>
}
 80103fc:	e00b      	b.n	8010416 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2242      	movs	r2, #66	@ 0x42
 8010402:	2100      	movs	r1, #0
 8010404:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2240      	movs	r2, #64	@ 0x40
 801040a:	2100      	movs	r1, #0
 801040c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	0018      	movs	r0, r3
 8010412:	f7ff f878 	bl	800f506 <HAL_I2C_MasterRxCpltCallback>
}
 8010416:	46c0      	nop			@ (mov r8, r8)
 8010418:	46bd      	mov	sp, r7
 801041a:	b006      	add	sp, #24
 801041c:	bd80      	pop	{r7, pc}
 801041e:	46c0      	nop			@ (mov r8, r8)
 8010420:	fe00e800 	.word	0xfe00e800
 8010424:	ffff0000 	.word	0xffff0000

08010428 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b086      	sub	sp, #24
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801043e:	200f      	movs	r0, #15
 8010440:	183b      	adds	r3, r7, r0
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	2141      	movs	r1, #65	@ 0x41
 8010446:	5c52      	ldrb	r2, [r2, r1]
 8010448:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2220      	movs	r2, #32
 8010450:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010452:	183b      	adds	r3, r7, r0
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	2b21      	cmp	r3, #33	@ 0x21
 8010458:	d003      	beq.n	8010462 <I2C_ITSlaveCplt+0x3a>
 801045a:	183b      	adds	r3, r7, r0
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	2b29      	cmp	r3, #41	@ 0x29
 8010460:	d109      	bne.n	8010476 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010462:	4a7b      	ldr	r2, [pc, #492]	@ (8010650 <I2C_ITSlaveCplt+0x228>)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	0011      	movs	r1, r2
 8010468:	0018      	movs	r0, r3
 801046a:	f000 fe95 	bl	8011198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2221      	movs	r2, #33	@ 0x21
 8010472:	631a      	str	r2, [r3, #48]	@ 0x30
 8010474:	e011      	b.n	801049a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010476:	220f      	movs	r2, #15
 8010478:	18bb      	adds	r3, r7, r2
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b22      	cmp	r3, #34	@ 0x22
 801047e:	d003      	beq.n	8010488 <I2C_ITSlaveCplt+0x60>
 8010480:	18bb      	adds	r3, r7, r2
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b2a      	cmp	r3, #42	@ 0x2a
 8010486:	d108      	bne.n	801049a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8010488:	4a72      	ldr	r2, [pc, #456]	@ (8010654 <I2C_ITSlaveCplt+0x22c>)
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	0011      	movs	r1, r2
 801048e:	0018      	movs	r0, r3
 8010490:	f000 fe82 	bl	8011198 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2222      	movs	r2, #34	@ 0x22
 8010498:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	685a      	ldr	r2, [r3, #4]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2180      	movs	r1, #128	@ 0x80
 80104a6:	0209      	lsls	r1, r1, #8
 80104a8:	430a      	orrs	r2, r1
 80104aa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	685a      	ldr	r2, [r3, #4]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4968      	ldr	r1, [pc, #416]	@ (8010658 <I2C_ITSlaveCplt+0x230>)
 80104b8:	400a      	ands	r2, r1
 80104ba:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	0018      	movs	r0, r3
 80104c0:	f000 fa55 	bl	801096e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	2380      	movs	r3, #128	@ 0x80
 80104c8:	01db      	lsls	r3, r3, #7
 80104ca:	4013      	ands	r3, r2
 80104cc:	d013      	beq.n	80104f6 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4960      	ldr	r1, [pc, #384]	@ (801065c <I2C_ITSlaveCplt+0x234>)
 80104da:	400a      	ands	r2, r1
 80104dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d01f      	beq.n	8010526 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	b29a      	uxth	r2, r3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80104f4:	e017      	b.n	8010526 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	2380      	movs	r3, #128	@ 0x80
 80104fa:	021b      	lsls	r3, r3, #8
 80104fc:	4013      	ands	r3, r2
 80104fe:	d012      	beq.n	8010526 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4955      	ldr	r1, [pc, #340]	@ (8010660 <I2C_ITSlaveCplt+0x238>)
 801050c:	400a      	ands	r2, r1
 801050e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010514:	2b00      	cmp	r3, #0
 8010516:	d006      	beq.n	8010526 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	685b      	ldr	r3, [r3, #4]
 8010520:	b29a      	uxth	r2, r3
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	2204      	movs	r2, #4
 801052a:	4013      	ands	r3, r2
 801052c:	d020      	beq.n	8010570 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	2204      	movs	r2, #4
 8010532:	4393      	bics	r3, r2
 8010534:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010540:	b2d2      	uxtb	r2, r2
 8010542:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010548:	1c5a      	adds	r2, r3, #1
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00c      	beq.n	8010570 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801055a:	3b01      	subs	r3, #1
 801055c:	b29a      	uxth	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010566:	b29b      	uxth	r3, r3
 8010568:	3b01      	subs	r3, #1
 801056a:	b29a      	uxth	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010574:	b29b      	uxth	r3, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	d005      	beq.n	8010586 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801057e:	2204      	movs	r2, #4
 8010580:	431a      	orrs	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2242      	movs	r2, #66	@ 0x42
 801058a:	2100      	movs	r1, #0
 801058c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2200      	movs	r2, #0
 8010592:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010598:	2b00      	cmp	r3, #0
 801059a:	d013      	beq.n	80105c4 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	0011      	movs	r1, r2
 80105a4:	0018      	movs	r0, r3
 80105a6:	f000 f8b7 	bl	8010718 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2241      	movs	r2, #65	@ 0x41
 80105ae:	5c9b      	ldrb	r3, [r3, r2]
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b28      	cmp	r3, #40	@ 0x28
 80105b4:	d147      	bne.n	8010646 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	0011      	movs	r1, r2
 80105bc:	0018      	movs	r0, r3
 80105be:	f000 f853 	bl	8010668 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80105c2:	e040      	b.n	8010646 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105c8:	4a26      	ldr	r2, [pc, #152]	@ (8010664 <I2C_ITSlaveCplt+0x23c>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d016      	beq.n	80105fc <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	0018      	movs	r0, r3
 80105d2:	f7ff fdf7 	bl	80101c4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	4a22      	ldr	r2, [pc, #136]	@ (8010664 <I2C_ITSlaveCplt+0x23c>)
 80105da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2241      	movs	r2, #65	@ 0x41
 80105e0:	2120      	movs	r1, #32
 80105e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2240      	movs	r2, #64	@ 0x40
 80105ee:	2100      	movs	r1, #0
 80105f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	0018      	movs	r0, r3
 80105f6:	f7fe ffae 	bl	800f556 <HAL_I2C_ListenCpltCallback>
}
 80105fa:	e024      	b.n	8010646 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2241      	movs	r2, #65	@ 0x41
 8010600:	5c9b      	ldrb	r3, [r3, r2]
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b22      	cmp	r3, #34	@ 0x22
 8010606:	d10f      	bne.n	8010628 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2241      	movs	r2, #65	@ 0x41
 801060c:	2120      	movs	r1, #32
 801060e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2240      	movs	r2, #64	@ 0x40
 801061a:	2100      	movs	r1, #0
 801061c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	0018      	movs	r0, r3
 8010622:	f7fe ff80 	bl	800f526 <HAL_I2C_SlaveRxCpltCallback>
}
 8010626:	e00e      	b.n	8010646 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2241      	movs	r2, #65	@ 0x41
 801062c:	2120      	movs	r1, #32
 801062e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2240      	movs	r2, #64	@ 0x40
 801063a:	2100      	movs	r1, #0
 801063c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	0018      	movs	r0, r3
 8010642:	f7fe ff68 	bl	800f516 <HAL_I2C_SlaveTxCpltCallback>
}
 8010646:	46c0      	nop			@ (mov r8, r8)
 8010648:	46bd      	mov	sp, r7
 801064a:	b006      	add	sp, #24
 801064c:	bd80      	pop	{r7, pc}
 801064e:	46c0      	nop			@ (mov r8, r8)
 8010650:	00008001 	.word	0x00008001
 8010654:	00008002 	.word	0x00008002
 8010658:	fe00e800 	.word	0xfe00e800
 801065c:	ffffbfff 	.word	0xffffbfff
 8010660:	ffff7fff 	.word	0xffff7fff
 8010664:	ffff0000 	.word	0xffff0000

08010668 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4a26      	ldr	r2, [pc, #152]	@ (8010710 <I2C_ITListenCplt+0xa8>)
 8010676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2200      	movs	r2, #0
 801067c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2241      	movs	r2, #65	@ 0x41
 8010682:	2120      	movs	r1, #32
 8010684:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2242      	movs	r2, #66	@ 0x42
 801068a:	2100      	movs	r1, #0
 801068c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2200      	movs	r2, #0
 8010692:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	2204      	movs	r2, #4
 8010698:	4013      	ands	r3, r2
 801069a:	d022      	beq.n	80106e2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106a6:	b2d2      	uxtb	r2, r2
 80106a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ae:	1c5a      	adds	r2, r3, #1
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d012      	beq.n	80106e2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106c0:	3b01      	subs	r3, #1
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	3b01      	subs	r3, #1
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106da:	2204      	movs	r2, #4
 80106dc:	431a      	orrs	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80106e2:	4a0c      	ldr	r2, [pc, #48]	@ (8010714 <I2C_ITListenCplt+0xac>)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	0011      	movs	r1, r2
 80106e8:	0018      	movs	r0, r3
 80106ea:	f000 fd55 	bl	8011198 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2210      	movs	r2, #16
 80106f4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2240      	movs	r2, #64	@ 0x40
 80106fa:	2100      	movs	r1, #0
 80106fc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	0018      	movs	r0, r3
 8010702:	f7fe ff28 	bl	800f556 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010706:	46c0      	nop			@ (mov r8, r8)
 8010708:	46bd      	mov	sp, r7
 801070a:	b002      	add	sp, #8
 801070c:	bd80      	pop	{r7, pc}
 801070e:	46c0      	nop			@ (mov r8, r8)
 8010710:	ffff0000 	.word	0xffff0000
 8010714:	00008003 	.word	0x00008003

08010718 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010722:	200f      	movs	r0, #15
 8010724:	183b      	adds	r3, r7, r0
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	2141      	movs	r1, #65	@ 0x41
 801072a:	5c52      	ldrb	r2, [r2, r1]
 801072c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2242      	movs	r2, #66	@ 0x42
 8010732:	2100      	movs	r1, #0
 8010734:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4a72      	ldr	r2, [pc, #456]	@ (8010904 <I2C_ITError+0x1ec>)
 801073a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	431a      	orrs	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801074e:	183b      	adds	r3, r7, r0
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	2b28      	cmp	r3, #40	@ 0x28
 8010754:	d007      	beq.n	8010766 <I2C_ITError+0x4e>
 8010756:	183b      	adds	r3, r7, r0
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	2b29      	cmp	r3, #41	@ 0x29
 801075c:	d003      	beq.n	8010766 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801075e:	183b      	adds	r3, r7, r0
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	2b2a      	cmp	r3, #42	@ 0x2a
 8010764:	d10c      	bne.n	8010780 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2103      	movs	r1, #3
 801076a:	0018      	movs	r0, r3
 801076c:	f000 fd14 	bl	8011198 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2241      	movs	r2, #65	@ 0x41
 8010774:	2128      	movs	r1, #40	@ 0x28
 8010776:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4a63      	ldr	r2, [pc, #396]	@ (8010908 <I2C_ITError+0x1f0>)
 801077c:	635a      	str	r2, [r3, #52]	@ 0x34
 801077e:	e032      	b.n	80107e6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010780:	4a62      	ldr	r2, [pc, #392]	@ (801090c <I2C_ITError+0x1f4>)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	0011      	movs	r1, r2
 8010786:	0018      	movs	r0, r3
 8010788:	f000 fd06 	bl	8011198 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	0018      	movs	r0, r3
 8010790:	f000 f8ed 	bl	801096e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2241      	movs	r2, #65	@ 0x41
 8010798:	5c9b      	ldrb	r3, [r3, r2]
 801079a:	b2db      	uxtb	r3, r3
 801079c:	2b60      	cmp	r3, #96	@ 0x60
 801079e:	d01f      	beq.n	80107e0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2241      	movs	r2, #65	@ 0x41
 80107a4:	2120      	movs	r1, #32
 80107a6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	699b      	ldr	r3, [r3, #24]
 80107ae:	2220      	movs	r2, #32
 80107b0:	4013      	ands	r3, r2
 80107b2:	2b20      	cmp	r3, #32
 80107b4:	d114      	bne.n	80107e0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	699b      	ldr	r3, [r3, #24]
 80107bc:	2210      	movs	r2, #16
 80107be:	4013      	ands	r3, r2
 80107c0:	2b10      	cmp	r3, #16
 80107c2:	d109      	bne.n	80107d8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2210      	movs	r2, #16
 80107ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107d0:	2204      	movs	r2, #4
 80107d2:	431a      	orrs	r2, r3
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2220      	movs	r2, #32
 80107de:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2200      	movs	r2, #0
 80107e4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d03b      	beq.n	801086c <I2C_ITError+0x154>
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	2b11      	cmp	r3, #17
 80107f8:	d002      	beq.n	8010800 <I2C_ITError+0xe8>
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	2b21      	cmp	r3, #33	@ 0x21
 80107fe:	d135      	bne.n	801086c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	2380      	movs	r3, #128	@ 0x80
 8010808:	01db      	lsls	r3, r3, #7
 801080a:	401a      	ands	r2, r3
 801080c:	2380      	movs	r3, #128	@ 0x80
 801080e:	01db      	lsls	r3, r3, #7
 8010810:	429a      	cmp	r2, r3
 8010812:	d107      	bne.n	8010824 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	493c      	ldr	r1, [pc, #240]	@ (8010910 <I2C_ITError+0x1f8>)
 8010820:	400a      	ands	r2, r1
 8010822:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010828:	0018      	movs	r0, r3
 801082a:	f7fd fd7e 	bl	800e32a <HAL_DMA_GetState>
 801082e:	0003      	movs	r3, r0
 8010830:	2b01      	cmp	r3, #1
 8010832:	d016      	beq.n	8010862 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010838:	4a36      	ldr	r2, [pc, #216]	@ (8010914 <I2C_ITError+0x1fc>)
 801083a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2240      	movs	r2, #64	@ 0x40
 8010840:	2100      	movs	r1, #0
 8010842:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010848:	0018      	movs	r0, r3
 801084a:	f7fd fc79 	bl	800e140 <HAL_DMA_Abort_IT>
 801084e:	1e03      	subs	r3, r0, #0
 8010850:	d051      	beq.n	80108f6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010856:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801085c:	0018      	movs	r0, r3
 801085e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010860:	e049      	b.n	80108f6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	0018      	movs	r0, r3
 8010866:	f000 f859 	bl	801091c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801086a:	e044      	b.n	80108f6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010870:	2b00      	cmp	r3, #0
 8010872:	d03b      	beq.n	80108ec <I2C_ITError+0x1d4>
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	2b12      	cmp	r3, #18
 8010878:	d002      	beq.n	8010880 <I2C_ITError+0x168>
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	2b22      	cmp	r3, #34	@ 0x22
 801087e:	d135      	bne.n	80108ec <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	2380      	movs	r3, #128	@ 0x80
 8010888:	021b      	lsls	r3, r3, #8
 801088a:	401a      	ands	r2, r3
 801088c:	2380      	movs	r3, #128	@ 0x80
 801088e:	021b      	lsls	r3, r3, #8
 8010890:	429a      	cmp	r2, r3
 8010892:	d107      	bne.n	80108a4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	491e      	ldr	r1, [pc, #120]	@ (8010918 <I2C_ITError+0x200>)
 80108a0:	400a      	ands	r2, r1
 80108a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108a8:	0018      	movs	r0, r3
 80108aa:	f7fd fd3e 	bl	800e32a <HAL_DMA_GetState>
 80108ae:	0003      	movs	r3, r0
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d016      	beq.n	80108e2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108b8:	4a16      	ldr	r2, [pc, #88]	@ (8010914 <I2C_ITError+0x1fc>)
 80108ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2240      	movs	r2, #64	@ 0x40
 80108c0:	2100      	movs	r1, #0
 80108c2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108c8:	0018      	movs	r0, r3
 80108ca:	f7fd fc39 	bl	800e140 <HAL_DMA_Abort_IT>
 80108ce:	1e03      	subs	r3, r0, #0
 80108d0:	d013      	beq.n	80108fa <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108dc:	0018      	movs	r0, r3
 80108de:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108e0:	e00b      	b.n	80108fa <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	0018      	movs	r0, r3
 80108e6:	f000 f819 	bl	801091c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108ea:	e006      	b.n	80108fa <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	0018      	movs	r0, r3
 80108f0:	f000 f814 	bl	801091c <I2C_TreatErrorCallback>
  }
}
 80108f4:	e002      	b.n	80108fc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108f6:	46c0      	nop			@ (mov r8, r8)
 80108f8:	e000      	b.n	80108fc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108fa:	46c0      	nop			@ (mov r8, r8)
}
 80108fc:	46c0      	nop			@ (mov r8, r8)
 80108fe:	46bd      	mov	sp, r7
 8010900:	b004      	add	sp, #16
 8010902:	bd80      	pop	{r7, pc}
 8010904:	ffff0000 	.word	0xffff0000
 8010908:	0800f7fd 	.word	0x0800f7fd
 801090c:	00008003 	.word	0x00008003
 8010910:	ffffbfff 	.word	0xffffbfff
 8010914:	08010b27 	.word	0x08010b27
 8010918:	ffff7fff 	.word	0xffff7fff

0801091c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2241      	movs	r2, #65	@ 0x41
 8010928:	5c9b      	ldrb	r3, [r3, r2]
 801092a:	b2db      	uxtb	r3, r3
 801092c:	2b60      	cmp	r3, #96	@ 0x60
 801092e:	d10f      	bne.n	8010950 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2241      	movs	r2, #65	@ 0x41
 8010934:	2120      	movs	r1, #32
 8010936:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2240      	movs	r2, #64	@ 0x40
 8010942:	2100      	movs	r1, #0
 8010944:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	0018      	movs	r0, r3
 801094a:	f7fe fe24 	bl	800f596 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801094e:	e00a      	b.n	8010966 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2240      	movs	r2, #64	@ 0x40
 801095a:	2100      	movs	r1, #0
 801095c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	0018      	movs	r0, r3
 8010962:	f7fe fe10 	bl	800f586 <HAL_I2C_ErrorCallback>
}
 8010966:	46c0      	nop			@ (mov r8, r8)
 8010968:	46bd      	mov	sp, r7
 801096a:	b002      	add	sp, #8
 801096c:	bd80      	pop	{r7, pc}

0801096e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b082      	sub	sp, #8
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	699b      	ldr	r3, [r3, #24]
 801097c:	2202      	movs	r2, #2
 801097e:	4013      	ands	r3, r2
 8010980:	2b02      	cmp	r3, #2
 8010982:	d103      	bne.n	801098c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2200      	movs	r2, #0
 801098a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	699b      	ldr	r3, [r3, #24]
 8010992:	2201      	movs	r2, #1
 8010994:	4013      	ands	r3, r2
 8010996:	2b01      	cmp	r3, #1
 8010998:	d007      	beq.n	80109aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	699a      	ldr	r2, [r3, #24]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2101      	movs	r1, #1
 80109a6:	430a      	orrs	r2, r1
 80109a8:	619a      	str	r2, [r3, #24]
  }
}
 80109aa:	46c0      	nop			@ (mov r8, r8)
 80109ac:	46bd      	mov	sp, r7
 80109ae:	b002      	add	sp, #8
 80109b0:	bd80      	pop	{r7, pc}
	...

080109b4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109c0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4920      	ldr	r1, [pc, #128]	@ (8010a50 <I2C_DMAMasterTransmitCplt+0x9c>)
 80109ce:	400a      	ands	r2, r1
 80109d0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d105      	bne.n	80109e8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2120      	movs	r1, #32
 80109e0:	0018      	movs	r0, r3
 80109e2:	f000 fb4b 	bl	801107c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80109e6:	e02e      	b.n	8010a46 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109ec:	68fa      	ldr	r2, [r7, #12]
 80109ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80109f0:	189a      	adds	r2, r3, r2
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	2bff      	cmp	r3, #255	@ 0xff
 80109fe:	d903      	bls.n	8010a08 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	22ff      	movs	r2, #255	@ 0xff
 8010a04:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010a06:	e004      	b.n	8010a12 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a1a:	0019      	movs	r1, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	3328      	adds	r3, #40	@ 0x28
 8010a22:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8010a28:	f7fd fae4 	bl	800dff4 <HAL_DMA_Start_IT>
 8010a2c:	1e03      	subs	r3, r0, #0
 8010a2e:	d005      	beq.n	8010a3c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	2110      	movs	r1, #16
 8010a34:	0018      	movs	r0, r3
 8010a36:	f7ff fe6f 	bl	8010718 <I2C_ITError>
}
 8010a3a:	e004      	b.n	8010a46 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2140      	movs	r1, #64	@ 0x40
 8010a40:	0018      	movs	r0, r3
 8010a42:	f000 fb1b 	bl	801107c <I2C_Enable_IRQ>
}
 8010a46:	46c0      	nop			@ (mov r8, r8)
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	b004      	add	sp, #16
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	46c0      	nop			@ (mov r8, r8)
 8010a50:	ffffbfff 	.word	0xffffbfff

08010a54 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a60:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	681a      	ldr	r2, [r3, #0]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4920      	ldr	r1, [pc, #128]	@ (8010af0 <I2C_DMAMasterReceiveCplt+0x9c>)
 8010a6e:	400a      	ands	r2, r1
 8010a70:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d105      	bne.n	8010a88 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2120      	movs	r1, #32
 8010a80:	0018      	movs	r0, r3
 8010a82:	f000 fafb 	bl	801107c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8010a86:	e02e      	b.n	8010ae6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010a90:	189a      	adds	r2, r3, r2
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	2bff      	cmp	r3, #255	@ 0xff
 8010a9e:	d903      	bls.n	8010aa8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	22ff      	movs	r2, #255	@ 0xff
 8010aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010aa6:	e004      	b.n	8010ab2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3324      	adds	r3, #36	@ 0x24
 8010abc:	0019      	movs	r1, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ac2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8010ac8:	f7fd fa94 	bl	800dff4 <HAL_DMA_Start_IT>
 8010acc:	1e03      	subs	r3, r0, #0
 8010ace:	d005      	beq.n	8010adc <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	2110      	movs	r1, #16
 8010ad4:	0018      	movs	r0, r3
 8010ad6:	f7ff fe1f 	bl	8010718 <I2C_ITError>
}
 8010ada:	e004      	b.n	8010ae6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2140      	movs	r1, #64	@ 0x40
 8010ae0:	0018      	movs	r0, r3
 8010ae2:	f000 facb 	bl	801107c <I2C_Enable_IRQ>
}
 8010ae6:	46c0      	nop			@ (mov r8, r8)
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	b004      	add	sp, #16
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	46c0      	nop			@ (mov r8, r8)
 8010af0:	ffff7fff 	.word	0xffff7fff

08010af4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b00:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	685a      	ldr	r2, [r3, #4]
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2180      	movs	r1, #128	@ 0x80
 8010b0e:	0209      	lsls	r1, r1, #8
 8010b10:	430a      	orrs	r2, r1
 8010b12:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2110      	movs	r1, #16
 8010b18:	0018      	movs	r0, r3
 8010b1a:	f7ff fdfd 	bl	8010718 <I2C_ITError>
}
 8010b1e:	46c0      	nop			@ (mov r8, r8)
 8010b20:	46bd      	mov	sp, r7
 8010b22:	b004      	add	sp, #16
 8010b24:	bd80      	pop	{r7, pc}

08010b26 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b084      	sub	sp, #16
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b32:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d003      	beq.n	8010b44 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b40:	2200      	movs	r2, #0
 8010b42:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d003      	beq.n	8010b54 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b50:	2200      	movs	r2, #0
 8010b52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	0018      	movs	r0, r3
 8010b58:	f7ff fee0 	bl	801091c <I2C_TreatErrorCallback>
}
 8010b5c:	46c0      	nop			@ (mov r8, r8)
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	b004      	add	sp, #16
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	603b      	str	r3, [r7, #0]
 8010b70:	1dfb      	adds	r3, r7, #7
 8010b72:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010b74:	e030      	b.n	8010bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	d02d      	beq.n	8010bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b7c:	f7fc fd1a 	bl	800d5b4 <HAL_GetTick>
 8010b80:	0002      	movs	r2, r0
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	683a      	ldr	r2, [r7, #0]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d302      	bcc.n	8010b92 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d122      	bne.n	8010bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	699b      	ldr	r3, [r3, #24]
 8010b98:	68ba      	ldr	r2, [r7, #8]
 8010b9a:	4013      	ands	r3, r2
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	1ad3      	subs	r3, r2, r3
 8010ba0:	425a      	negs	r2, r3
 8010ba2:	4153      	adcs	r3, r2
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	001a      	movs	r2, r3
 8010ba8:	1dfb      	adds	r3, r7, #7
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d113      	bne.n	8010bd8 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bb4:	2220      	movs	r2, #32
 8010bb6:	431a      	orrs	r2, r3
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2241      	movs	r2, #65	@ 0x41
 8010bc0:	2120      	movs	r1, #32
 8010bc2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	2242      	movs	r2, #66	@ 0x42
 8010bc8:	2100      	movs	r1, #0
 8010bca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2240      	movs	r2, #64	@ 0x40
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	e00f      	b.n	8010bf8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	68ba      	ldr	r2, [r7, #8]
 8010be0:	4013      	ands	r3, r2
 8010be2:	68ba      	ldr	r2, [r7, #8]
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	425a      	negs	r2, r3
 8010be8:	4153      	adcs	r3, r2
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	001a      	movs	r2, r3
 8010bee:	1dfb      	adds	r3, r7, #7
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d0bf      	beq.n	8010b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010bf6:	2300      	movs	r3, #0
}
 8010bf8:	0018      	movs	r0, r3
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	b004      	add	sp, #16
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b084      	sub	sp, #16
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010c0c:	e032      	b.n	8010c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	68b9      	ldr	r1, [r7, #8]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	0018      	movs	r0, r3
 8010c16:	f000 f8ff 	bl	8010e18 <I2C_IsErrorOccurred>
 8010c1a:	1e03      	subs	r3, r0, #0
 8010c1c:	d001      	beq.n	8010c22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e030      	b.n	8010c84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	3301      	adds	r3, #1
 8010c26:	d025      	beq.n	8010c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c28:	f7fc fcc4 	bl	800d5b4 <HAL_GetTick>
 8010c2c:	0002      	movs	r2, r0
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	68ba      	ldr	r2, [r7, #8]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d302      	bcc.n	8010c3e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d11a      	bne.n	8010c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	2202      	movs	r2, #2
 8010c46:	4013      	ands	r3, r2
 8010c48:	2b02      	cmp	r3, #2
 8010c4a:	d013      	beq.n	8010c74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c50:	2220      	movs	r2, #32
 8010c52:	431a      	orrs	r2, r3
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2241      	movs	r2, #65	@ 0x41
 8010c5c:	2120      	movs	r1, #32
 8010c5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2242      	movs	r2, #66	@ 0x42
 8010c64:	2100      	movs	r1, #0
 8010c66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2240      	movs	r2, #64	@ 0x40
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8010c70:	2301      	movs	r3, #1
 8010c72:	e007      	b.n	8010c84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	699b      	ldr	r3, [r3, #24]
 8010c7a:	2202      	movs	r2, #2
 8010c7c:	4013      	ands	r3, r2
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d1c5      	bne.n	8010c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	0018      	movs	r0, r3
 8010c86:	46bd      	mov	sp, r7
 8010c88:	b004      	add	sp, #16
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010c98:	e02f      	b.n	8010cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	68b9      	ldr	r1, [r7, #8]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	0018      	movs	r0, r3
 8010ca2:	f000 f8b9 	bl	8010e18 <I2C_IsErrorOccurred>
 8010ca6:	1e03      	subs	r3, r0, #0
 8010ca8:	d001      	beq.n	8010cae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010caa:	2301      	movs	r3, #1
 8010cac:	e02d      	b.n	8010d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010cae:	f7fc fc81 	bl	800d5b4 <HAL_GetTick>
 8010cb2:	0002      	movs	r2, r0
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	1ad3      	subs	r3, r2, r3
 8010cb8:	68ba      	ldr	r2, [r7, #8]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d302      	bcc.n	8010cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d11a      	bne.n	8010cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	2220      	movs	r2, #32
 8010ccc:	4013      	ands	r3, r2
 8010cce:	2b20      	cmp	r3, #32
 8010cd0:	d013      	beq.n	8010cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cd6:	2220      	movs	r2, #32
 8010cd8:	431a      	orrs	r2, r3
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2241      	movs	r2, #65	@ 0x41
 8010ce2:	2120      	movs	r1, #32
 8010ce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2242      	movs	r2, #66	@ 0x42
 8010cea:	2100      	movs	r1, #0
 8010cec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	2240      	movs	r2, #64	@ 0x40
 8010cf2:	2100      	movs	r1, #0
 8010cf4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	e007      	b.n	8010d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	699b      	ldr	r3, [r3, #24]
 8010d00:	2220      	movs	r2, #32
 8010d02:	4013      	ands	r3, r2
 8010d04:	2b20      	cmp	r3, #32
 8010d06:	d1c8      	bne.n	8010c9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010d08:	2300      	movs	r3, #0
}
 8010d0a:	0018      	movs	r0, r3
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	b004      	add	sp, #16
 8010d10:	bd80      	pop	{r7, pc}
	...

08010d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010d20:	e06b      	b.n	8010dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d22:	687a      	ldr	r2, [r7, #4]
 8010d24:	68b9      	ldr	r1, [r7, #8]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	0018      	movs	r0, r3
 8010d2a:	f000 f875 	bl	8010e18 <I2C_IsErrorOccurred>
 8010d2e:	1e03      	subs	r3, r0, #0
 8010d30:	d001      	beq.n	8010d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010d32:	2301      	movs	r3, #1
 8010d34:	e069      	b.n	8010e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	699b      	ldr	r3, [r3, #24]
 8010d3c:	2220      	movs	r2, #32
 8010d3e:	4013      	ands	r3, r2
 8010d40:	2b20      	cmp	r3, #32
 8010d42:	d138      	bne.n	8010db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	699b      	ldr	r3, [r3, #24]
 8010d4a:	2204      	movs	r2, #4
 8010d4c:	4013      	ands	r3, r2
 8010d4e:	2b04      	cmp	r3, #4
 8010d50:	d105      	bne.n	8010d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	e055      	b.n	8010e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	699b      	ldr	r3, [r3, #24]
 8010d64:	2210      	movs	r2, #16
 8010d66:	4013      	ands	r3, r2
 8010d68:	2b10      	cmp	r3, #16
 8010d6a:	d107      	bne.n	8010d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2210      	movs	r2, #16
 8010d72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2204      	movs	r2, #4
 8010d78:	645a      	str	r2, [r3, #68]	@ 0x44
 8010d7a:	e002      	b.n	8010d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2220      	movs	r2, #32
 8010d88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	685a      	ldr	r2, [r3, #4]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	491f      	ldr	r1, [pc, #124]	@ (8010e14 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8010d96:	400a      	ands	r2, r1
 8010d98:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	2241      	movs	r2, #65	@ 0x41
 8010d9e:	2120      	movs	r1, #32
 8010da0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2242      	movs	r2, #66	@ 0x42
 8010da6:	2100      	movs	r1, #0
 8010da8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2240      	movs	r2, #64	@ 0x40
 8010dae:	2100      	movs	r1, #0
 8010db0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010db2:	2301      	movs	r3, #1
 8010db4:	e029      	b.n	8010e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010db6:	f7fc fbfd 	bl	800d5b4 <HAL_GetTick>
 8010dba:	0002      	movs	r2, r0
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	68ba      	ldr	r2, [r7, #8]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d302      	bcc.n	8010dcc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d116      	bne.n	8010dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	2204      	movs	r2, #4
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	2b04      	cmp	r3, #4
 8010dd8:	d00f      	beq.n	8010dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010dde:	2220      	movs	r2, #32
 8010de0:	431a      	orrs	r2, r3
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2241      	movs	r2, #65	@ 0x41
 8010dea:	2120      	movs	r1, #32
 8010dec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	2240      	movs	r2, #64	@ 0x40
 8010df2:	2100      	movs	r1, #0
 8010df4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010df6:	2301      	movs	r3, #1
 8010df8:	e007      	b.n	8010e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	699b      	ldr	r3, [r3, #24]
 8010e00:	2204      	movs	r2, #4
 8010e02:	4013      	ands	r3, r2
 8010e04:	2b04      	cmp	r3, #4
 8010e06:	d18c      	bne.n	8010d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010e08:	2300      	movs	r3, #0
}
 8010e0a:	0018      	movs	r0, r3
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	b004      	add	sp, #16
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	46c0      	nop			@ (mov r8, r8)
 8010e14:	fe00e800 	.word	0xfe00e800

08010e18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b08a      	sub	sp, #40	@ 0x28
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e24:	2327      	movs	r3, #39	@ 0x27
 8010e26:	18fb      	adds	r3, r7, r3
 8010e28:	2200      	movs	r2, #0
 8010e2a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	699b      	ldr	r3, [r3, #24]
 8010e32:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010e34:	2300      	movs	r3, #0
 8010e36:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010e3c:	69bb      	ldr	r3, [r7, #24]
 8010e3e:	2210      	movs	r2, #16
 8010e40:	4013      	ands	r3, r2
 8010e42:	d100      	bne.n	8010e46 <I2C_IsErrorOccurred+0x2e>
 8010e44:	e079      	b.n	8010f3a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2210      	movs	r2, #16
 8010e4c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010e4e:	e057      	b.n	8010f00 <I2C_IsErrorOccurred+0xe8>
 8010e50:	2227      	movs	r2, #39	@ 0x27
 8010e52:	18bb      	adds	r3, r7, r2
 8010e54:	18ba      	adds	r2, r7, r2
 8010e56:	7812      	ldrb	r2, [r2, #0]
 8010e58:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	d04f      	beq.n	8010f00 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010e60:	f7fc fba8 	bl	800d5b4 <HAL_GetTick>
 8010e64:	0002      	movs	r2, r0
 8010e66:	69fb      	ldr	r3, [r7, #28]
 8010e68:	1ad3      	subs	r3, r2, r3
 8010e6a:	68ba      	ldr	r2, [r7, #8]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d302      	bcc.n	8010e76 <I2C_IsErrorOccurred+0x5e>
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d144      	bne.n	8010f00 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	685a      	ldr	r2, [r3, #4]
 8010e7c:	2380      	movs	r3, #128	@ 0x80
 8010e7e:	01db      	lsls	r3, r3, #7
 8010e80:	4013      	ands	r3, r2
 8010e82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010e84:	2013      	movs	r0, #19
 8010e86:	183b      	adds	r3, r7, r0
 8010e88:	68fa      	ldr	r2, [r7, #12]
 8010e8a:	2142      	movs	r1, #66	@ 0x42
 8010e8c:	5c52      	ldrb	r2, [r2, r1]
 8010e8e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	699a      	ldr	r2, [r3, #24]
 8010e96:	2380      	movs	r3, #128	@ 0x80
 8010e98:	021b      	lsls	r3, r3, #8
 8010e9a:	401a      	ands	r2, r3
 8010e9c:	2380      	movs	r3, #128	@ 0x80
 8010e9e:	021b      	lsls	r3, r3, #8
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d126      	bne.n	8010ef2 <I2C_IsErrorOccurred+0xda>
 8010ea4:	697a      	ldr	r2, [r7, #20]
 8010ea6:	2380      	movs	r3, #128	@ 0x80
 8010ea8:	01db      	lsls	r3, r3, #7
 8010eaa:	429a      	cmp	r2, r3
 8010eac:	d021      	beq.n	8010ef2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8010eae:	183b      	adds	r3, r7, r0
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	2b20      	cmp	r3, #32
 8010eb4:	d01d      	beq.n	8010ef2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2180      	movs	r1, #128	@ 0x80
 8010ec2:	01c9      	lsls	r1, r1, #7
 8010ec4:	430a      	orrs	r2, r1
 8010ec6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010ec8:	f7fc fb74 	bl	800d5b4 <HAL_GetTick>
 8010ecc:	0003      	movs	r3, r0
 8010ece:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ed0:	e00f      	b.n	8010ef2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010ed2:	f7fc fb6f 	bl	800d5b4 <HAL_GetTick>
 8010ed6:	0002      	movs	r2, r0
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	2b19      	cmp	r3, #25
 8010ede:	d908      	bls.n	8010ef2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010ee0:	6a3b      	ldr	r3, [r7, #32]
 8010ee2:	2220      	movs	r2, #32
 8010ee4:	4313      	orrs	r3, r2
 8010ee6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010ee8:	2327      	movs	r3, #39	@ 0x27
 8010eea:	18fb      	adds	r3, r7, r3
 8010eec:	2201      	movs	r2, #1
 8010eee:	701a      	strb	r2, [r3, #0]

              break;
 8010ef0:	e006      	b.n	8010f00 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	699b      	ldr	r3, [r3, #24]
 8010ef8:	2220      	movs	r2, #32
 8010efa:	4013      	ands	r3, r2
 8010efc:	2b20      	cmp	r3, #32
 8010efe:	d1e8      	bne.n	8010ed2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	699b      	ldr	r3, [r3, #24]
 8010f06:	2220      	movs	r2, #32
 8010f08:	4013      	ands	r3, r2
 8010f0a:	2b20      	cmp	r3, #32
 8010f0c:	d004      	beq.n	8010f18 <I2C_IsErrorOccurred+0x100>
 8010f0e:	2327      	movs	r3, #39	@ 0x27
 8010f10:	18fb      	adds	r3, r7, r3
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d09b      	beq.n	8010e50 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010f18:	2327      	movs	r3, #39	@ 0x27
 8010f1a:	18fb      	adds	r3, r7, r3
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d103      	bne.n	8010f2a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2220      	movs	r2, #32
 8010f28:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010f2a:	6a3b      	ldr	r3, [r7, #32]
 8010f2c:	2204      	movs	r2, #4
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010f32:	2327      	movs	r3, #39	@ 0x27
 8010f34:	18fb      	adds	r3, r7, r3
 8010f36:	2201      	movs	r2, #1
 8010f38:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	699b      	ldr	r3, [r3, #24]
 8010f40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010f42:	69ba      	ldr	r2, [r7, #24]
 8010f44:	2380      	movs	r3, #128	@ 0x80
 8010f46:	005b      	lsls	r3, r3, #1
 8010f48:	4013      	ands	r3, r2
 8010f4a:	d00c      	beq.n	8010f66 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010f4c:	6a3b      	ldr	r3, [r7, #32]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	4313      	orrs	r3, r2
 8010f52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2280      	movs	r2, #128	@ 0x80
 8010f5a:	0052      	lsls	r2, r2, #1
 8010f5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010f5e:	2327      	movs	r3, #39	@ 0x27
 8010f60:	18fb      	adds	r3, r7, r3
 8010f62:	2201      	movs	r2, #1
 8010f64:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010f66:	69ba      	ldr	r2, [r7, #24]
 8010f68:	2380      	movs	r3, #128	@ 0x80
 8010f6a:	00db      	lsls	r3, r3, #3
 8010f6c:	4013      	ands	r3, r2
 8010f6e:	d00c      	beq.n	8010f8a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010f70:	6a3b      	ldr	r3, [r7, #32]
 8010f72:	2208      	movs	r2, #8
 8010f74:	4313      	orrs	r3, r2
 8010f76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2280      	movs	r2, #128	@ 0x80
 8010f7e:	00d2      	lsls	r2, r2, #3
 8010f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010f82:	2327      	movs	r3, #39	@ 0x27
 8010f84:	18fb      	adds	r3, r7, r3
 8010f86:	2201      	movs	r2, #1
 8010f88:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010f8a:	69ba      	ldr	r2, [r7, #24]
 8010f8c:	2380      	movs	r3, #128	@ 0x80
 8010f8e:	009b      	lsls	r3, r3, #2
 8010f90:	4013      	ands	r3, r2
 8010f92:	d00c      	beq.n	8010fae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010f94:	6a3b      	ldr	r3, [r7, #32]
 8010f96:	2202      	movs	r2, #2
 8010f98:	4313      	orrs	r3, r2
 8010f9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	2280      	movs	r2, #128	@ 0x80
 8010fa2:	0092      	lsls	r2, r2, #2
 8010fa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010fa6:	2327      	movs	r3, #39	@ 0x27
 8010fa8:	18fb      	adds	r3, r7, r3
 8010faa:	2201      	movs	r2, #1
 8010fac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8010fae:	2327      	movs	r3, #39	@ 0x27
 8010fb0:	18fb      	adds	r3, r7, r3
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d01d      	beq.n	8010ff4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	0018      	movs	r0, r3
 8010fbc:	f7ff fcd7 	bl	801096e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	490e      	ldr	r1, [pc, #56]	@ (8011004 <I2C_IsErrorOccurred+0x1ec>)
 8010fcc:	400a      	ands	r2, r1
 8010fce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010fd4:	6a3b      	ldr	r3, [r7, #32]
 8010fd6:	431a      	orrs	r2, r3
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2241      	movs	r2, #65	@ 0x41
 8010fe0:	2120      	movs	r1, #32
 8010fe2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	2242      	movs	r2, #66	@ 0x42
 8010fe8:	2100      	movs	r1, #0
 8010fea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2240      	movs	r2, #64	@ 0x40
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8010ff4:	2327      	movs	r3, #39	@ 0x27
 8010ff6:	18fb      	adds	r3, r7, r3
 8010ff8:	781b      	ldrb	r3, [r3, #0]
}
 8010ffa:	0018      	movs	r0, r3
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	b00a      	add	sp, #40	@ 0x28
 8011000:	bd80      	pop	{r7, pc}
 8011002:	46c0      	nop			@ (mov r8, r8)
 8011004:	fe00e800 	.word	0xfe00e800

08011008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011008:	b590      	push	{r4, r7, lr}
 801100a:	b087      	sub	sp, #28
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	0008      	movs	r0, r1
 8011012:	0011      	movs	r1, r2
 8011014:	607b      	str	r3, [r7, #4]
 8011016:	240a      	movs	r4, #10
 8011018:	193b      	adds	r3, r7, r4
 801101a:	1c02      	adds	r2, r0, #0
 801101c:	801a      	strh	r2, [r3, #0]
 801101e:	2009      	movs	r0, #9
 8011020:	183b      	adds	r3, r7, r0
 8011022:	1c0a      	adds	r2, r1, #0
 8011024:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011026:	193b      	adds	r3, r7, r4
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	059b      	lsls	r3, r3, #22
 801102c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801102e:	183b      	adds	r3, r7, r0
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	0419      	lsls	r1, r3, #16
 8011034:	23ff      	movs	r3, #255	@ 0xff
 8011036:	041b      	lsls	r3, r3, #16
 8011038:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801103a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011042:	4313      	orrs	r3, r2
 8011044:	005b      	lsls	r3, r3, #1
 8011046:	085b      	lsrs	r3, r3, #1
 8011048:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011052:	0d51      	lsrs	r1, r2, #21
 8011054:	2280      	movs	r2, #128	@ 0x80
 8011056:	00d2      	lsls	r2, r2, #3
 8011058:	400a      	ands	r2, r1
 801105a:	4907      	ldr	r1, [pc, #28]	@ (8011078 <I2C_TransferConfig+0x70>)
 801105c:	430a      	orrs	r2, r1
 801105e:	43d2      	mvns	r2, r2
 8011060:	401a      	ands	r2, r3
 8011062:	0011      	movs	r1, r2
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	430a      	orrs	r2, r1
 801106c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801106e:	46c0      	nop			@ (mov r8, r8)
 8011070:	46bd      	mov	sp, r7
 8011072:	b007      	add	sp, #28
 8011074:	bd90      	pop	{r4, r7, pc}
 8011076:	46c0      	nop			@ (mov r8, r8)
 8011078:	03ff63ff 	.word	0x03ff63ff

0801107c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	000a      	movs	r2, r1
 8011086:	1cbb      	adds	r3, r7, #2
 8011088:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801108a:	2300      	movs	r3, #0
 801108c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011092:	4b3e      	ldr	r3, [pc, #248]	@ (801118c <I2C_Enable_IRQ+0x110>)
 8011094:	429a      	cmp	r2, r3
 8011096:	d035      	beq.n	8011104 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801109c:	4b3c      	ldr	r3, [pc, #240]	@ (8011190 <I2C_Enable_IRQ+0x114>)
 801109e:	429a      	cmp	r2, r3
 80110a0:	d030      	beq.n	8011104 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80110a6:	4b3b      	ldr	r3, [pc, #236]	@ (8011194 <I2C_Enable_IRQ+0x118>)
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d02b      	beq.n	8011104 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80110ac:	1cbb      	adds	r3, r7, #2
 80110ae:	2200      	movs	r2, #0
 80110b0:	5e9b      	ldrsh	r3, [r3, r2]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	da03      	bge.n	80110be <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	22b8      	movs	r2, #184	@ 0xb8
 80110ba:	4313      	orrs	r3, r2
 80110bc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80110be:	1cbb      	adds	r3, r7, #2
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	2201      	movs	r2, #1
 80110c4:	4013      	ands	r3, r2
 80110c6:	d003      	beq.n	80110d0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	22f2      	movs	r2, #242	@ 0xf2
 80110cc:	4313      	orrs	r3, r2
 80110ce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80110d0:	1cbb      	adds	r3, r7, #2
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	2202      	movs	r2, #2
 80110d6:	4013      	ands	r3, r2
 80110d8:	d003      	beq.n	80110e2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	22f4      	movs	r2, #244	@ 0xf4
 80110de:	4313      	orrs	r3, r2
 80110e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80110e2:	1cbb      	adds	r3, r7, #2
 80110e4:	881b      	ldrh	r3, [r3, #0]
 80110e6:	2b10      	cmp	r3, #16
 80110e8:	d103      	bne.n	80110f2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2290      	movs	r2, #144	@ 0x90
 80110ee:	4313      	orrs	r3, r2
 80110f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80110f2:	1cbb      	adds	r3, r7, #2
 80110f4:	881b      	ldrh	r3, [r3, #0]
 80110f6:	2b20      	cmp	r3, #32
 80110f8:	d13c      	bne.n	8011174 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2220      	movs	r2, #32
 80110fe:	4313      	orrs	r3, r2
 8011100:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011102:	e037      	b.n	8011174 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011104:	1cbb      	adds	r3, r7, #2
 8011106:	2200      	movs	r2, #0
 8011108:	5e9b      	ldrsh	r3, [r3, r2]
 801110a:	2b00      	cmp	r3, #0
 801110c:	da03      	bge.n	8011116 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	22b8      	movs	r2, #184	@ 0xb8
 8011112:	4313      	orrs	r3, r2
 8011114:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011116:	1cbb      	adds	r3, r7, #2
 8011118:	881b      	ldrh	r3, [r3, #0]
 801111a:	2201      	movs	r2, #1
 801111c:	4013      	ands	r3, r2
 801111e:	d003      	beq.n	8011128 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	22f2      	movs	r2, #242	@ 0xf2
 8011124:	4313      	orrs	r3, r2
 8011126:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011128:	1cbb      	adds	r3, r7, #2
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	2202      	movs	r2, #2
 801112e:	4013      	ands	r3, r2
 8011130:	d003      	beq.n	801113a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	22f4      	movs	r2, #244	@ 0xf4
 8011136:	4313      	orrs	r3, r2
 8011138:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801113a:	1cbb      	adds	r3, r7, #2
 801113c:	881b      	ldrh	r3, [r3, #0]
 801113e:	2b10      	cmp	r3, #16
 8011140:	d103      	bne.n	801114a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2290      	movs	r2, #144	@ 0x90
 8011146:	4313      	orrs	r3, r2
 8011148:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801114a:	1cbb      	adds	r3, r7, #2
 801114c:	881b      	ldrh	r3, [r3, #0]
 801114e:	2b20      	cmp	r3, #32
 8011150:	d103      	bne.n	801115a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2260      	movs	r2, #96	@ 0x60
 8011156:	4313      	orrs	r3, r2
 8011158:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801115e:	4b0d      	ldr	r3, [pc, #52]	@ (8011194 <I2C_Enable_IRQ+0x118>)
 8011160:	429a      	cmp	r2, r3
 8011162:	d007      	beq.n	8011174 <I2C_Enable_IRQ+0xf8>
 8011164:	1cbb      	adds	r3, r7, #2
 8011166:	881b      	ldrh	r3, [r3, #0]
 8011168:	2b40      	cmp	r3, #64	@ 0x40
 801116a:	d103      	bne.n	8011174 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2240      	movs	r2, #64	@ 0x40
 8011170:	4313      	orrs	r3, r2
 8011172:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	6819      	ldr	r1, [r3, #0]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	68fa      	ldr	r2, [r7, #12]
 8011180:	430a      	orrs	r2, r1
 8011182:	601a      	str	r2, [r3, #0]
}
 8011184:	46c0      	nop			@ (mov r8, r8)
 8011186:	46bd      	mov	sp, r7
 8011188:	b004      	add	sp, #16
 801118a:	bd80      	pop	{r7, pc}
 801118c:	0800f9fd 	.word	0x0800f9fd
 8011190:	0800fe2d 	.word	0x0800fe2d
 8011194:	0800fbf5 	.word	0x0800fbf5

08011198 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	000a      	movs	r2, r1
 80111a2:	1cbb      	adds	r3, r7, #2
 80111a4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80111a6:	2300      	movs	r3, #0
 80111a8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80111aa:	1cbb      	adds	r3, r7, #2
 80111ac:	881b      	ldrh	r3, [r3, #0]
 80111ae:	2201      	movs	r2, #1
 80111b0:	4013      	ands	r3, r2
 80111b2:	d010      	beq.n	80111d6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2242      	movs	r2, #66	@ 0x42
 80111b8:	4313      	orrs	r3, r2
 80111ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2241      	movs	r2, #65	@ 0x41
 80111c0:	5c9b      	ldrb	r3, [r3, r2]
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	001a      	movs	r2, r3
 80111c6:	2328      	movs	r3, #40	@ 0x28
 80111c8:	4013      	ands	r3, r2
 80111ca:	2b28      	cmp	r3, #40	@ 0x28
 80111cc:	d003      	beq.n	80111d6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	22b0      	movs	r2, #176	@ 0xb0
 80111d2:	4313      	orrs	r3, r2
 80111d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80111d6:	1cbb      	adds	r3, r7, #2
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	2202      	movs	r2, #2
 80111dc:	4013      	ands	r3, r2
 80111de:	d010      	beq.n	8011202 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2244      	movs	r2, #68	@ 0x44
 80111e4:	4313      	orrs	r3, r2
 80111e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2241      	movs	r2, #65	@ 0x41
 80111ec:	5c9b      	ldrb	r3, [r3, r2]
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	001a      	movs	r2, r3
 80111f2:	2328      	movs	r3, #40	@ 0x28
 80111f4:	4013      	ands	r3, r2
 80111f6:	2b28      	cmp	r3, #40	@ 0x28
 80111f8:	d003      	beq.n	8011202 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	22b0      	movs	r2, #176	@ 0xb0
 80111fe:	4313      	orrs	r3, r2
 8011200:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011202:	1cbb      	adds	r3, r7, #2
 8011204:	2200      	movs	r2, #0
 8011206:	5e9b      	ldrsh	r3, [r3, r2]
 8011208:	2b00      	cmp	r3, #0
 801120a:	da03      	bge.n	8011214 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	22b8      	movs	r2, #184	@ 0xb8
 8011210:	4313      	orrs	r3, r2
 8011212:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011214:	1cbb      	adds	r3, r7, #2
 8011216:	881b      	ldrh	r3, [r3, #0]
 8011218:	2b10      	cmp	r3, #16
 801121a:	d103      	bne.n	8011224 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2290      	movs	r2, #144	@ 0x90
 8011220:	4313      	orrs	r3, r2
 8011222:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011224:	1cbb      	adds	r3, r7, #2
 8011226:	881b      	ldrh	r3, [r3, #0]
 8011228:	2b20      	cmp	r3, #32
 801122a:	d103      	bne.n	8011234 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2220      	movs	r2, #32
 8011230:	4313      	orrs	r3, r2
 8011232:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011234:	1cbb      	adds	r3, r7, #2
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	2b40      	cmp	r3, #64	@ 0x40
 801123a:	d103      	bne.n	8011244 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2240      	movs	r2, #64	@ 0x40
 8011240:	4313      	orrs	r3, r2
 8011242:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	681a      	ldr	r2, [r3, #0]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	43d9      	mvns	r1, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	400a      	ands	r2, r1
 8011254:	601a      	str	r2, [r3, #0]
}
 8011256:	46c0      	nop			@ (mov r8, r8)
 8011258:	46bd      	mov	sp, r7
 801125a:	b004      	add	sp, #16
 801125c:	bd80      	pop	{r7, pc}
	...

08011260 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2241      	movs	r2, #65	@ 0x41
 801126e:	5c9b      	ldrb	r3, [r3, r2]
 8011270:	b2db      	uxtb	r3, r3
 8011272:	2b20      	cmp	r3, #32
 8011274:	d138      	bne.n	80112e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2240      	movs	r2, #64	@ 0x40
 801127a:	5c9b      	ldrb	r3, [r3, r2]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d101      	bne.n	8011284 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011280:	2302      	movs	r3, #2
 8011282:	e032      	b.n	80112ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2240      	movs	r2, #64	@ 0x40
 8011288:	2101      	movs	r1, #1
 801128a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2241      	movs	r2, #65	@ 0x41
 8011290:	2124      	movs	r1, #36	@ 0x24
 8011292:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2101      	movs	r1, #1
 80112a0:	438a      	bics	r2, r1
 80112a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	4911      	ldr	r1, [pc, #68]	@ (80112f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80112b0:	400a      	ands	r2, r1
 80112b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	6819      	ldr	r1, [r3, #0]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	683a      	ldr	r2, [r7, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2101      	movs	r1, #1
 80112d0:	430a      	orrs	r2, r1
 80112d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2241      	movs	r2, #65	@ 0x41
 80112d8:	2120      	movs	r1, #32
 80112da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2240      	movs	r2, #64	@ 0x40
 80112e0:	2100      	movs	r1, #0
 80112e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	e000      	b.n	80112ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80112e8:	2302      	movs	r3, #2
  }
}
 80112ea:	0018      	movs	r0, r3
 80112ec:	46bd      	mov	sp, r7
 80112ee:	b002      	add	sp, #8
 80112f0:	bd80      	pop	{r7, pc}
 80112f2:	46c0      	nop			@ (mov r8, r8)
 80112f4:	ffffefff 	.word	0xffffefff

080112f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2241      	movs	r2, #65	@ 0x41
 8011306:	5c9b      	ldrb	r3, [r3, r2]
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b20      	cmp	r3, #32
 801130c:	d139      	bne.n	8011382 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2240      	movs	r2, #64	@ 0x40
 8011312:	5c9b      	ldrb	r3, [r3, r2]
 8011314:	2b01      	cmp	r3, #1
 8011316:	d101      	bne.n	801131c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011318:	2302      	movs	r3, #2
 801131a:	e033      	b.n	8011384 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2240      	movs	r2, #64	@ 0x40
 8011320:	2101      	movs	r1, #1
 8011322:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2241      	movs	r2, #65	@ 0x41
 8011328:	2124      	movs	r1, #36	@ 0x24
 801132a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2101      	movs	r1, #1
 8011338:	438a      	bics	r2, r1
 801133a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	4a11      	ldr	r2, [pc, #68]	@ (801138c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8011348:	4013      	ands	r3, r2
 801134a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	021b      	lsls	r3, r3, #8
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	4313      	orrs	r3, r2
 8011354:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	68fa      	ldr	r2, [r7, #12]
 801135c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	2101      	movs	r1, #1
 801136a:	430a      	orrs	r2, r1
 801136c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2241      	movs	r2, #65	@ 0x41
 8011372:	2120      	movs	r1, #32
 8011374:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2240      	movs	r2, #64	@ 0x40
 801137a:	2100      	movs	r1, #0
 801137c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801137e:	2300      	movs	r3, #0
 8011380:	e000      	b.n	8011384 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011382:	2302      	movs	r3, #2
  }
}
 8011384:	0018      	movs	r0, r3
 8011386:	46bd      	mov	sp, r7
 8011388:	b004      	add	sp, #16
 801138a:	bd80      	pop	{r7, pc}
 801138c:	fffff0ff 	.word	0xfffff0ff

08011390 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b088      	sub	sp, #32
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d101      	bne.n	80113a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 801139e:	2301      	movs	r3, #1
 80113a0:	e0e1      	b.n	8011566 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2235      	movs	r2, #53	@ 0x35
 80113a6:	5c9b      	ldrb	r3, [r3, r2]
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d107      	bne.n	80113be <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2234      	movs	r2, #52	@ 0x34
 80113b2:	2100      	movs	r1, #0
 80113b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	0018      	movs	r0, r3
 80113ba:	f7f5 fe6b 	bl	8007094 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2235      	movs	r2, #53	@ 0x35
 80113c2:	2102      	movs	r1, #2
 80113c4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	69da      	ldr	r2, [r3, #28]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4967      	ldr	r1, [pc, #412]	@ (8011570 <HAL_I2S_Init+0x1e0>)
 80113d2:	400a      	ands	r2, r1
 80113d4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2202      	movs	r2, #2
 80113dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	695b      	ldr	r3, [r3, #20]
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d073      	beq.n	80114ce <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d102      	bne.n	80113f4 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80113ee:	2310      	movs	r3, #16
 80113f0:	617b      	str	r3, [r7, #20]
 80113f2:	e001      	b.n	80113f8 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80113f4:	2320      	movs	r3, #32
 80113f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	2b20      	cmp	r3, #32
 80113fe:	d802      	bhi.n	8011406 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8011406:	f002 fe51 	bl	80140ac <HAL_RCC_GetSysClockFreq>
 801140a:	0003      	movs	r3, r0
 801140c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	691a      	ldr	r2, [r3, #16]
 8011412:	2380      	movs	r3, #128	@ 0x80
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	429a      	cmp	r2, r3
 8011418:	d131      	bne.n	801147e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d016      	beq.n	8011450 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	0019      	movs	r1, r3
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f7ee febb 	bl	80001a4 <__udivsi3>
 801142e:	0003      	movs	r3, r0
 8011430:	001a      	movs	r2, r3
 8011432:	0013      	movs	r3, r2
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	189b      	adds	r3, r3, r2
 8011438:	005b      	lsls	r3, r3, #1
 801143a:	001a      	movs	r2, r3
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	695b      	ldr	r3, [r3, #20]
 8011440:	0019      	movs	r1, r3
 8011442:	0010      	movs	r0, r2
 8011444:	f7ee feae 	bl	80001a4 <__udivsi3>
 8011448:	0003      	movs	r3, r0
 801144a:	3305      	adds	r3, #5
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	e02a      	b.n	80114a6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	00db      	lsls	r3, r3, #3
 8011454:	0019      	movs	r1, r3
 8011456:	68f8      	ldr	r0, [r7, #12]
 8011458:	f7ee fea4 	bl	80001a4 <__udivsi3>
 801145c:	0003      	movs	r3, r0
 801145e:	001a      	movs	r2, r3
 8011460:	0013      	movs	r3, r2
 8011462:	009b      	lsls	r3, r3, #2
 8011464:	189b      	adds	r3, r3, r2
 8011466:	005b      	lsls	r3, r3, #1
 8011468:	001a      	movs	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	695b      	ldr	r3, [r3, #20]
 801146e:	0019      	movs	r1, r3
 8011470:	0010      	movs	r0, r2
 8011472:	f7ee fe97 	bl	80001a4 <__udivsi3>
 8011476:	0003      	movs	r3, r0
 8011478:	3305      	adds	r3, #5
 801147a:	613b      	str	r3, [r7, #16]
 801147c:	e013      	b.n	80114a6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801147e:	6979      	ldr	r1, [r7, #20]
 8011480:	68f8      	ldr	r0, [r7, #12]
 8011482:	f7ee fe8f 	bl	80001a4 <__udivsi3>
 8011486:	0003      	movs	r3, r0
 8011488:	001a      	movs	r2, r3
 801148a:	0013      	movs	r3, r2
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	189b      	adds	r3, r3, r2
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	001a      	movs	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	695b      	ldr	r3, [r3, #20]
 8011498:	0019      	movs	r1, r3
 801149a:	0010      	movs	r0, r2
 801149c:	f7ee fe82 	bl	80001a4 <__udivsi3>
 80114a0:	0003      	movs	r3, r0
 80114a2:	3305      	adds	r3, #5
 80114a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	210a      	movs	r1, #10
 80114aa:	0018      	movs	r0, r3
 80114ac:	f7ee fe7a 	bl	80001a4 <__udivsi3>
 80114b0:	0003      	movs	r3, r0
 80114b2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	2201      	movs	r2, #1
 80114b8:	4013      	ands	r3, r2
 80114ba:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80114bc:	693a      	ldr	r2, [r7, #16]
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	085b      	lsrs	r3, r3, #1
 80114c4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	021b      	lsls	r3, r3, #8
 80114ca:	61bb      	str	r3, [r7, #24]
 80114cc:	e003      	b.n	80114d6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80114ce:	2302      	movs	r3, #2
 80114d0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80114d2:	2300      	movs	r3, #0
 80114d4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	2b01      	cmp	r3, #1
 80114da:	d902      	bls.n	80114e2 <HAL_I2S_Init+0x152>
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	2bff      	cmp	r3, #255	@ 0xff
 80114e0:	d907      	bls.n	80114f2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114e6:	2210      	movs	r2, #16
 80114e8:	431a      	orrs	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80114ee:	2301      	movs	r3, #1
 80114f0:	e039      	b.n	8011566 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	691a      	ldr	r2, [r3, #16]
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	431a      	orrs	r2, r3
 80114fa:	0011      	movs	r1, r2
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	69fa      	ldr	r2, [r7, #28]
 8011502:	430a      	orrs	r2, r1
 8011504:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	69db      	ldr	r3, [r3, #28]
 801150c:	4a18      	ldr	r2, [pc, #96]	@ (8011570 <HAL_I2S_Init+0x1e0>)
 801150e:	401a      	ands	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6859      	ldr	r1, [r3, #4]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	4319      	orrs	r1, r3
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	4319      	orrs	r1, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	699b      	ldr	r3, [r3, #24]
 8011524:	430b      	orrs	r3, r1
 8011526:	431a      	orrs	r2, r3
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2180      	movs	r1, #128	@ 0x80
 801152e:	0109      	lsls	r1, r1, #4
 8011530:	430a      	orrs	r2, r1
 8011532:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	689b      	ldr	r3, [r3, #8]
 8011538:	2b30      	cmp	r3, #48	@ 0x30
 801153a:	d003      	beq.n	8011544 <HAL_I2S_Init+0x1b4>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	689b      	ldr	r3, [r3, #8]
 8011540:	2bb0      	cmp	r3, #176	@ 0xb0
 8011542:	d108      	bne.n	8011556 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	69da      	ldr	r2, [r3, #28]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2180      	movs	r1, #128	@ 0x80
 8011550:	0149      	lsls	r1, r1, #5
 8011552:	430a      	orrs	r2, r1
 8011554:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2235      	movs	r2, #53	@ 0x35
 8011560:	2101      	movs	r1, #1
 8011562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011564:	2300      	movs	r3, #0
}
 8011566:	0018      	movs	r0, r3
 8011568:	46bd      	mov	sp, r7
 801156a:	b008      	add	sp, #32
 801156c:	bd80      	pop	{r7, pc}
 801156e:	46c0      	nop			@ (mov r8, r8)
 8011570:	fffff040 	.word	0xfffff040

08011574 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b086      	sub	sp, #24
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	1dbb      	adds	r3, r7, #6
 8011580:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d003      	beq.n	8011590 <HAL_I2S_Receive_DMA+0x1c>
 8011588:	1dbb      	adds	r3, r7, #6
 801158a:	881b      	ldrh	r3, [r3, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d101      	bne.n	8011594 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8011590:	2301      	movs	r3, #1
 8011592:	e0a6      	b.n	80116e2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2234      	movs	r2, #52	@ 0x34
 8011598:	5c9b      	ldrb	r3, [r3, r2]
 801159a:	b2db      	uxtb	r3, r3
 801159c:	2b01      	cmp	r3, #1
 801159e:	d101      	bne.n	80115a4 <HAL_I2S_Receive_DMA+0x30>
 80115a0:	2302      	movs	r3, #2
 80115a2:	e09e      	b.n	80116e2 <HAL_I2S_Receive_DMA+0x16e>
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	2234      	movs	r2, #52	@ 0x34
 80115a8:	2101      	movs	r1, #1
 80115aa:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2235      	movs	r2, #53	@ 0x35
 80115b0:	5c9b      	ldrb	r3, [r3, r2]
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d005      	beq.n	80115c4 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2234      	movs	r2, #52	@ 0x34
 80115bc:	2100      	movs	r1, #0
 80115be:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80115c0:	2302      	movs	r3, #2
 80115c2:	e08e      	b.n	80116e2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2235      	movs	r2, #53	@ 0x35
 80115c8:	2104      	movs	r1, #4
 80115ca:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2200      	movs	r2, #0
 80115d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	69db      	ldr	r3, [r3, #28]
 80115de:	2207      	movs	r2, #7
 80115e0:	4013      	ands	r3, r2
 80115e2:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	2b03      	cmp	r3, #3
 80115e8:	d002      	beq.n	80115f0 <HAL_I2S_Receive_DMA+0x7c>
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	2b05      	cmp	r3, #5
 80115ee:	d10c      	bne.n	801160a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80115f0:	1dbb      	adds	r3, r7, #6
 80115f2:	881b      	ldrh	r3, [r3, #0]
 80115f4:	18db      	adds	r3, r3, r3
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80115fc:	1dbb      	adds	r3, r7, #6
 80115fe:	881b      	ldrh	r3, [r3, #0]
 8011600:	18db      	adds	r3, r3, r3
 8011602:	b29a      	uxth	r2, r3
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011608:	e007      	b.n	801161a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	1dba      	adds	r2, r7, #6
 801160e:	8812      	ldrh	r2, [r2, #0]
 8011610:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	1dba      	adds	r2, r7, #6
 8011616:	8812      	ldrh	r2, [r2, #0]
 8011618:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801161e:	4a33      	ldr	r2, [pc, #204]	@ (80116ec <HAL_I2S_Receive_DMA+0x178>)
 8011620:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011626:	4a32      	ldr	r2, [pc, #200]	@ (80116f0 <HAL_I2S_Receive_DMA+0x17c>)
 8011628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801162e:	4a31      	ldr	r2, [pc, #196]	@ (80116f4 <HAL_I2S_Receive_DMA+0x180>)
 8011630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	69da      	ldr	r2, [r3, #28]
 8011638:	23c0      	movs	r3, #192	@ 0xc0
 801163a:	009b      	lsls	r3, r3, #2
 801163c:	401a      	ands	r2, r3
 801163e:	23c0      	movs	r3, #192	@ 0xc0
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	429a      	cmp	r2, r3
 8011644:	d10a      	bne.n	801165c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011646:	2300      	movs	r3, #0
 8011648:	613b      	str	r3, [r7, #16]
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	68db      	ldr	r3, [r3, #12]
 8011650:	613b      	str	r3, [r7, #16]
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	689b      	ldr	r3, [r3, #8]
 8011658:	613b      	str	r3, [r7, #16]
 801165a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	330c      	adds	r3, #12
 8011666:	0019      	movs	r1, r3
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011672:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8011674:	f7fc fcbe 	bl	800dff4 <HAL_DMA_Start_IT>
 8011678:	1e03      	subs	r3, r0, #0
 801167a:	d00f      	beq.n	801169c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011680:	2208      	movs	r2, #8
 8011682:	431a      	orrs	r2, r3
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2235      	movs	r2, #53	@ 0x35
 801168c:	2101      	movs	r1, #1
 801168e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2234      	movs	r2, #52	@ 0x34
 8011694:	2100      	movs	r1, #0
 8011696:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8011698:	2301      	movs	r3, #1
 801169a:	e022      	b.n	80116e2 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	69da      	ldr	r2, [r3, #28]
 80116a2:	2380      	movs	r3, #128	@ 0x80
 80116a4:	00db      	lsls	r3, r3, #3
 80116a6:	4013      	ands	r3, r2
 80116a8:	d108      	bne.n	80116bc <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	69da      	ldr	r2, [r3, #28]
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	2180      	movs	r1, #128	@ 0x80
 80116b6:	00c9      	lsls	r1, r1, #3
 80116b8:	430a      	orrs	r2, r1
 80116ba:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	2201      	movs	r2, #1
 80116c4:	4013      	ands	r3, r2
 80116c6:	d107      	bne.n	80116d8 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2101      	movs	r1, #1
 80116d4:	430a      	orrs	r2, r1
 80116d6:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2234      	movs	r2, #52	@ 0x34
 80116dc:	2100      	movs	r1, #0
 80116de:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80116e0:	2300      	movs	r3, #0
}
 80116e2:	0018      	movs	r0, r3
 80116e4:	46bd      	mov	sp, r7
 80116e6:	b006      	add	sp, #24
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	46c0      	nop			@ (mov r8, r8)
 80116ec:	080118d5 	.word	0x080118d5
 80116f0:	08011891 	.word	0x08011891
 80116f4:	080118f3 	.word	0x080118f3

080116f8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011700:	2317      	movs	r3, #23
 8011702:	18fb      	adds	r3, r7, r3
 8011704:	2200      	movs	r2, #0
 8011706:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	685a      	ldr	r2, [r3, #4]
 801170c:	2380      	movs	r3, #128	@ 0x80
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	429a      	cmp	r2, r3
 8011712:	d003      	beq.n	801171c <HAL_I2S_DMAStop+0x24>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d158      	bne.n	80117ce <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011720:	2b00      	cmp	r3, #0
 8011722:	d010      	beq.n	8011746 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011728:	0018      	movs	r0, r3
 801172a:	f7fc fcc9 	bl	800e0c0 <HAL_DMA_Abort>
 801172e:	1e03      	subs	r3, r0, #0
 8011730:	d009      	beq.n	8011746 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011736:	2208      	movs	r2, #8
 8011738:	431a      	orrs	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801173e:	2317      	movs	r3, #23
 8011740:	18fb      	adds	r3, r7, r3
 8011742:	2201      	movs	r2, #1
 8011744:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	2364      	movs	r3, #100	@ 0x64
 801174a:	2201      	movs	r2, #1
 801174c:	2102      	movs	r1, #2
 801174e:	f000 f8f7 	bl	8011940 <I2S_WaitFlagStateUntilTimeout>
 8011752:	1e03      	subs	r3, r0, #0
 8011754:	d00d      	beq.n	8011772 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801175a:	2201      	movs	r2, #1
 801175c:	431a      	orrs	r2, r3
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2235      	movs	r2, #53	@ 0x35
 8011766:	2101      	movs	r1, #1
 8011768:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801176a:	2317      	movs	r3, #23
 801176c:	18fb      	adds	r3, r7, r3
 801176e:	2201      	movs	r2, #1
 8011770:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	2364      	movs	r3, #100	@ 0x64
 8011776:	2200      	movs	r2, #0
 8011778:	2180      	movs	r1, #128	@ 0x80
 801177a:	f000 f8e1 	bl	8011940 <I2S_WaitFlagStateUntilTimeout>
 801177e:	1e03      	subs	r3, r0, #0
 8011780:	d00d      	beq.n	801179e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011786:	2201      	movs	r2, #1
 8011788:	431a      	orrs	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2235      	movs	r2, #53	@ 0x35
 8011792:	2101      	movs	r1, #1
 8011794:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8011796:	2317      	movs	r3, #23
 8011798:	18fb      	adds	r3, r7, r3
 801179a:	2201      	movs	r2, #1
 801179c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	69da      	ldr	r2, [r3, #28]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	4938      	ldr	r1, [pc, #224]	@ (801188c <HAL_I2S_DMAStop+0x194>)
 80117aa:	400a      	ands	r2, r1
 80117ac:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80117ae:	2300      	movs	r3, #0
 80117b0:	613b      	str	r3, [r7, #16]
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	689b      	ldr	r3, [r3, #8]
 80117b8:	613b      	str	r3, [r7, #16]
 80117ba:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	685a      	ldr	r2, [r3, #4]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2102      	movs	r1, #2
 80117c8:	438a      	bics	r2, r1
 80117ca:	605a      	str	r2, [r3, #4]
 80117cc:	e053      	b.n	8011876 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	685a      	ldr	r2, [r3, #4]
 80117d2:	23c0      	movs	r3, #192	@ 0xc0
 80117d4:	009b      	lsls	r3, r3, #2
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d005      	beq.n	80117e6 <HAL_I2S_DMAStop+0xee>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	685a      	ldr	r2, [r3, #4]
 80117de:	2380      	movs	r3, #128	@ 0x80
 80117e0:	005b      	lsls	r3, r3, #1
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d147      	bne.n	8011876 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d010      	beq.n	8011810 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117f2:	0018      	movs	r0, r3
 80117f4:	f7fc fc64 	bl	800e0c0 <HAL_DMA_Abort>
 80117f8:	1e03      	subs	r3, r0, #0
 80117fa:	d009      	beq.n	8011810 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011800:	2208      	movs	r2, #8
 8011802:	431a      	orrs	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8011808:	2317      	movs	r3, #23
 801180a:	18fb      	adds	r3, r7, r3
 801180c:	2201      	movs	r2, #1
 801180e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	69da      	ldr	r2, [r3, #28]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	491c      	ldr	r1, [pc, #112]	@ (801188c <HAL_I2S_DMAStop+0x194>)
 801181c:	400a      	ands	r2, r1
 801181e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011820:	2300      	movs	r3, #0
 8011822:	60fb      	str	r3, [r7, #12]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	60fb      	str	r3, [r7, #12]
 8011834:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	685a      	ldr	r2, [r3, #4]
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2101      	movs	r1, #1
 8011842:	438a      	bics	r2, r1
 8011844:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	685a      	ldr	r2, [r3, #4]
 801184a:	2380      	movs	r3, #128	@ 0x80
 801184c:	005b      	lsls	r3, r3, #1
 801184e:	429a      	cmp	r2, r3
 8011850:	d10e      	bne.n	8011870 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011856:	2240      	movs	r2, #64	@ 0x40
 8011858:	431a      	orrs	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2235      	movs	r2, #53	@ 0x35
 8011862:	2101      	movs	r1, #1
 8011864:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8011866:	2317      	movs	r3, #23
 8011868:	18fb      	adds	r3, r7, r3
 801186a:	2201      	movs	r2, #1
 801186c:	701a      	strb	r2, [r3, #0]
 801186e:	e002      	b.n	8011876 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	2235      	movs	r2, #53	@ 0x35
 801187a:	2101      	movs	r1, #1
 801187c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801187e:	2317      	movs	r3, #23
 8011880:	18fb      	adds	r3, r7, r3
 8011882:	781b      	ldrb	r3, [r3, #0]
}
 8011884:	0018      	movs	r0, r3
 8011886:	46bd      	mov	sp, r7
 8011888:	b006      	add	sp, #24
 801188a:	bd80      	pop	{r7, pc}
 801188c:	fffffbff 	.word	0xfffffbff

08011890 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801189c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	69db      	ldr	r3, [r3, #28]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d10e      	bne.n	80118c4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	685a      	ldr	r2, [r3, #4]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2101      	movs	r1, #1
 80118b2:	438a      	bics	r2, r1
 80118b4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	2200      	movs	r2, #0
 80118ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2235      	movs	r2, #53	@ 0x35
 80118c0:	2101      	movs	r1, #1
 80118c2:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	0018      	movs	r0, r3
 80118c8:	f7f9 fd5e 	bl	800b388 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80118cc:	46c0      	nop			@ (mov r8, r8)
 80118ce:	46bd      	mov	sp, r7
 80118d0:	b004      	add	sp, #16
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	0018      	movs	r0, r3
 80118e6:	f7f9 fd3d 	bl	800b364 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80118ea:	46c0      	nop			@ (mov r8, r8)
 80118ec:	46bd      	mov	sp, r7
 80118ee:	b004      	add	sp, #16
 80118f0:	bd80      	pop	{r7, pc}

080118f2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b084      	sub	sp, #16
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118fe:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	685a      	ldr	r2, [r3, #4]
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	2103      	movs	r1, #3
 801190c:	438a      	bics	r2, r1
 801190e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2200      	movs	r2, #0
 8011914:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2200      	movs	r2, #0
 801191a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2235      	movs	r2, #53	@ 0x35
 8011920:	2101      	movs	r1, #1
 8011922:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011928:	2208      	movs	r2, #8
 801192a:	431a      	orrs	r2, r3
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	0018      	movs	r0, r3
 8011934:	f7f9 fd76 	bl	800b424 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011938:	46c0      	nop			@ (mov r8, r8)
 801193a:	46bd      	mov	sp, r7
 801193c:	b004      	add	sp, #16
 801193e:	bd80      	pop	{r7, pc}

08011940 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b086      	sub	sp, #24
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	603b      	str	r3, [r7, #0]
 801194c:	1dfb      	adds	r3, r7, #7
 801194e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8011950:	f7fb fe30 	bl	800d5b4 <HAL_GetTick>
 8011954:	0003      	movs	r3, r0
 8011956:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011958:	e017      	b.n	801198a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	3301      	adds	r3, #1
 801195e:	d014      	beq.n	801198a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8011960:	f7fb fe28 	bl	800d5b4 <HAL_GetTick>
 8011964:	0002      	movs	r2, r0
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	683a      	ldr	r2, [r7, #0]
 801196c:	429a      	cmp	r2, r3
 801196e:	d902      	bls.n	8011976 <I2S_WaitFlagStateUntilTimeout+0x36>
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d109      	bne.n	801198a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2235      	movs	r2, #53	@ 0x35
 801197a:	2101      	movs	r1, #1
 801197c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2234      	movs	r2, #52	@ 0x34
 8011982:	2100      	movs	r1, #0
 8011984:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011986:	2303      	movs	r3, #3
 8011988:	e00f      	b.n	80119aa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	689b      	ldr	r3, [r3, #8]
 8011990:	68ba      	ldr	r2, [r7, #8]
 8011992:	4013      	ands	r3, r2
 8011994:	68ba      	ldr	r2, [r7, #8]
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	425a      	negs	r2, r3
 801199a:	4153      	adcs	r3, r2
 801199c:	b2db      	uxtb	r3, r3
 801199e:	001a      	movs	r2, r3
 80119a0:	1dfb      	adds	r3, r7, #7
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d1d8      	bne.n	801195a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	0018      	movs	r0, r3
 80119ac:	46bd      	mov	sp, r7
 80119ae:	b006      	add	sp, #24
 80119b0:	bd80      	pop	{r7, pc}
	...

080119b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80119b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119b6:	b08b      	sub	sp, #44	@ 0x2c
 80119b8:	af06      	add	r7, sp, #24
 80119ba:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d101      	bne.n	80119c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80119c2:	2301      	movs	r3, #1
 80119c4:	e0f0      	b.n	8011ba8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	4a79      	ldr	r2, [pc, #484]	@ (8011bb0 <HAL_PCD_Init+0x1fc>)
 80119ca:	5c9b      	ldrb	r3, [r3, r2]
 80119cc:	b2db      	uxtb	r3, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d108      	bne.n	80119e4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	23aa      	movs	r3, #170	@ 0xaa
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	2100      	movs	r1, #0
 80119da:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	0018      	movs	r0, r3
 80119e0:	f009 fdd4 	bl	801b58c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	4a72      	ldr	r2, [pc, #456]	@ (8011bb0 <HAL_PCD_Init+0x1fc>)
 80119e8:	2103      	movs	r1, #3
 80119ea:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	0018      	movs	r0, r3
 80119f2:	f005 fd87 	bl	8017504 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80119f6:	230f      	movs	r3, #15
 80119f8:	18fb      	adds	r3, r7, r3
 80119fa:	2200      	movs	r2, #0
 80119fc:	701a      	strb	r2, [r3, #0]
 80119fe:	e049      	b.n	8011a94 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011a00:	200f      	movs	r0, #15
 8011a02:	183b      	adds	r3, r7, r0
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	6879      	ldr	r1, [r7, #4]
 8011a08:	1c5a      	adds	r2, r3, #1
 8011a0a:	0013      	movs	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	189b      	adds	r3, r3, r2
 8011a10:	00db      	lsls	r3, r3, #3
 8011a12:	18cb      	adds	r3, r1, r3
 8011a14:	3301      	adds	r3, #1
 8011a16:	2201      	movs	r2, #1
 8011a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011a1a:	183b      	adds	r3, r7, r0
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	6879      	ldr	r1, [r7, #4]
 8011a20:	1c5a      	adds	r2, r3, #1
 8011a22:	0013      	movs	r3, r2
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	189b      	adds	r3, r3, r2
 8011a28:	00db      	lsls	r3, r3, #3
 8011a2a:	183a      	adds	r2, r7, r0
 8011a2c:	7812      	ldrb	r2, [r2, #0]
 8011a2e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011a30:	183b      	adds	r3, r7, r0
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	6879      	ldr	r1, [r7, #4]
 8011a36:	1c5a      	adds	r2, r3, #1
 8011a38:	0013      	movs	r3, r2
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	189b      	adds	r3, r3, r2
 8011a3e:	00db      	lsls	r3, r3, #3
 8011a40:	18cb      	adds	r3, r1, r3
 8011a42:	3303      	adds	r3, #3
 8011a44:	2200      	movs	r2, #0
 8011a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011a48:	183b      	adds	r3, r7, r0
 8011a4a:	781a      	ldrb	r2, [r3, #0]
 8011a4c:	6879      	ldr	r1, [r7, #4]
 8011a4e:	0013      	movs	r3, r2
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	189b      	adds	r3, r3, r2
 8011a54:	00db      	lsls	r3, r3, #3
 8011a56:	18cb      	adds	r3, r1, r3
 8011a58:	3338      	adds	r3, #56	@ 0x38
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011a5e:	183b      	adds	r3, r7, r0
 8011a60:	781a      	ldrb	r2, [r3, #0]
 8011a62:	6879      	ldr	r1, [r7, #4]
 8011a64:	0013      	movs	r3, r2
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	189b      	adds	r3, r3, r2
 8011a6a:	00db      	lsls	r3, r3, #3
 8011a6c:	18cb      	adds	r3, r1, r3
 8011a6e:	333c      	adds	r3, #60	@ 0x3c
 8011a70:	2200      	movs	r2, #0
 8011a72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011a74:	183b      	adds	r3, r7, r0
 8011a76:	781a      	ldrb	r2, [r3, #0]
 8011a78:	6879      	ldr	r1, [r7, #4]
 8011a7a:	0013      	movs	r3, r2
 8011a7c:	009b      	lsls	r3, r3, #2
 8011a7e:	189b      	adds	r3, r3, r2
 8011a80:	00db      	lsls	r3, r3, #3
 8011a82:	18cb      	adds	r3, r1, r3
 8011a84:	3340      	adds	r3, #64	@ 0x40
 8011a86:	2200      	movs	r2, #0
 8011a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011a8a:	183b      	adds	r3, r7, r0
 8011a8c:	781a      	ldrb	r2, [r3, #0]
 8011a8e:	183b      	adds	r3, r7, r0
 8011a90:	3201      	adds	r2, #1
 8011a92:	701a      	strb	r2, [r3, #0]
 8011a94:	210f      	movs	r1, #15
 8011a96:	187b      	adds	r3, r7, r1
 8011a98:	781a      	ldrb	r2, [r3, #0]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d3ae      	bcc.n	8011a00 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011aa2:	187b      	adds	r3, r7, r1
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	701a      	strb	r2, [r3, #0]
 8011aa8:	e056      	b.n	8011b58 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011aaa:	240f      	movs	r4, #15
 8011aac:	193b      	adds	r3, r7, r4
 8011aae:	781a      	ldrb	r2, [r3, #0]
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	236a      	movs	r3, #106	@ 0x6a
 8011ab4:	33ff      	adds	r3, #255	@ 0xff
 8011ab6:	0019      	movs	r1, r3
 8011ab8:	0013      	movs	r3, r2
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	189b      	adds	r3, r3, r2
 8011abe:	00db      	lsls	r3, r3, #3
 8011ac0:	18c3      	adds	r3, r0, r3
 8011ac2:	185b      	adds	r3, r3, r1
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011ac8:	193b      	adds	r3, r7, r4
 8011aca:	781a      	ldrb	r2, [r3, #0]
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	23b4      	movs	r3, #180	@ 0xb4
 8011ad0:	0059      	lsls	r1, r3, #1
 8011ad2:	0013      	movs	r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	189b      	adds	r3, r3, r2
 8011ad8:	00db      	lsls	r3, r3, #3
 8011ada:	18c3      	adds	r3, r0, r3
 8011adc:	185b      	adds	r3, r3, r1
 8011ade:	193a      	adds	r2, r7, r4
 8011ae0:	7812      	ldrb	r2, [r2, #0]
 8011ae2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011ae4:	193b      	adds	r3, r7, r4
 8011ae6:	781a      	ldrb	r2, [r3, #0]
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	236c      	movs	r3, #108	@ 0x6c
 8011aec:	33ff      	adds	r3, #255	@ 0xff
 8011aee:	0019      	movs	r1, r3
 8011af0:	0013      	movs	r3, r2
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	189b      	adds	r3, r3, r2
 8011af6:	00db      	lsls	r3, r3, #3
 8011af8:	18c3      	adds	r3, r0, r3
 8011afa:	185b      	adds	r3, r3, r1
 8011afc:	2200      	movs	r2, #0
 8011afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011b00:	193b      	adds	r3, r7, r4
 8011b02:	781a      	ldrb	r2, [r3, #0]
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	23bc      	movs	r3, #188	@ 0xbc
 8011b08:	0059      	lsls	r1, r3, #1
 8011b0a:	0013      	movs	r3, r2
 8011b0c:	009b      	lsls	r3, r3, #2
 8011b0e:	189b      	adds	r3, r3, r2
 8011b10:	00db      	lsls	r3, r3, #3
 8011b12:	18c3      	adds	r3, r0, r3
 8011b14:	185b      	adds	r3, r3, r1
 8011b16:	2200      	movs	r2, #0
 8011b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011b1a:	193b      	adds	r3, r7, r4
 8011b1c:	781a      	ldrb	r2, [r3, #0]
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	23be      	movs	r3, #190	@ 0xbe
 8011b22:	0059      	lsls	r1, r3, #1
 8011b24:	0013      	movs	r3, r2
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	189b      	adds	r3, r3, r2
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	18c3      	adds	r3, r0, r3
 8011b2e:	185b      	adds	r3, r3, r1
 8011b30:	2200      	movs	r2, #0
 8011b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8011b34:	193b      	adds	r3, r7, r4
 8011b36:	781a      	ldrb	r2, [r3, #0]
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	23c0      	movs	r3, #192	@ 0xc0
 8011b3c:	0059      	lsls	r1, r3, #1
 8011b3e:	0013      	movs	r3, r2
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	189b      	adds	r3, r3, r2
 8011b44:	00db      	lsls	r3, r3, #3
 8011b46:	18c3      	adds	r3, r0, r3
 8011b48:	185b      	adds	r3, r3, r1
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011b4e:	193b      	adds	r3, r7, r4
 8011b50:	781a      	ldrb	r2, [r3, #0]
 8011b52:	193b      	adds	r3, r7, r4
 8011b54:	3201      	adds	r2, #1
 8011b56:	701a      	strb	r2, [r3, #0]
 8011b58:	230f      	movs	r3, #15
 8011b5a:	18fb      	adds	r3, r7, r3
 8011b5c:	781a      	ldrb	r2, [r3, #0]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d3a1      	bcc.n	8011aaa <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6818      	ldr	r0, [r3, #0]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	466a      	mov	r2, sp
 8011b6e:	0011      	movs	r1, r2
 8011b70:	001a      	movs	r2, r3
 8011b72:	3210      	adds	r2, #16
 8011b74:	ca70      	ldmia	r2!, {r4, r5, r6}
 8011b76:	c170      	stmia	r1!, {r4, r5, r6}
 8011b78:	ca30      	ldmia	r2!, {r4, r5}
 8011b7a:	c130      	stmia	r1!, {r4, r5}
 8011b7c:	6859      	ldr	r1, [r3, #4]
 8011b7e:	689a      	ldr	r2, [r3, #8]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	f005 fcd9 	bl	8017538 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2224      	movs	r2, #36	@ 0x24
 8011b8a:	2100      	movs	r1, #0
 8011b8c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	4a07      	ldr	r2, [pc, #28]	@ (8011bb0 <HAL_PCD_Init+0x1fc>)
 8011b92:	2101      	movs	r1, #1
 8011b94:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	69db      	ldr	r3, [r3, #28]
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d103      	bne.n	8011ba6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	0018      	movs	r0, r3
 8011ba2:	f001 fd23 	bl	80135ec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	0018      	movs	r0, r3
 8011baa:	46bd      	mov	sp, r7
 8011bac:	b005      	add	sp, #20
 8011bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bb0:	000002a9 	.word	0x000002a9

08011bb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	23aa      	movs	r3, #170	@ 0xaa
 8011bc0:	009b      	lsls	r3, r3, #2
 8011bc2:	5cd3      	ldrb	r3, [r2, r3]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d101      	bne.n	8011bcc <HAL_PCD_Start+0x18>
 8011bc8:	2302      	movs	r3, #2
 8011bca:	e014      	b.n	8011bf6 <HAL_PCD_Start+0x42>
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	23aa      	movs	r3, #170	@ 0xaa
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	0018      	movs	r0, r3
 8011bdc:	f005 fc7c 	bl	80174d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	0018      	movs	r0, r3
 8011be6:	f007 fc7f 	bl	80194e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	23aa      	movs	r3, #170	@ 0xaa
 8011bee:	009b      	lsls	r3, r3, #2
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8011bf4:	2300      	movs	r3, #0
}
 8011bf6:	0018      	movs	r0, r3
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	b002      	add	sp, #8
 8011bfc:	bd80      	pop	{r7, pc}
	...

08011c00 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	0018      	movs	r0, r3
 8011c0e:	f007 fc81 	bl	8019514 <USB_ReadInterrupts>
 8011c12:	0003      	movs	r3, r0
 8011c14:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	2380      	movs	r3, #128	@ 0x80
 8011c1a:	021b      	lsls	r3, r3, #8
 8011c1c:	4013      	ands	r3, r2
 8011c1e:	d004      	beq.n	8011c2a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	0018      	movs	r0, r3
 8011c24:	f000 fb62 	bl	80122ec <PCD_EP_ISR_Handler>

    return;
 8011c28:	e11d      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	2380      	movs	r3, #128	@ 0x80
 8011c2e:	00db      	lsls	r3, r3, #3
 8011c30:	4013      	ands	r3, r2
 8011c32:	d015      	beq.n	8011c60 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2244      	movs	r2, #68	@ 0x44
 8011c3a:	5a9b      	ldrh	r3, [r3, r2]
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	498a      	ldr	r1, [pc, #552]	@ (8011e6c <HAL_PCD_IRQHandler+0x26c>)
 8011c44:	400a      	ands	r2, r1
 8011c46:	b291      	uxth	r1, r2
 8011c48:	2244      	movs	r2, #68	@ 0x44
 8011c4a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	0018      	movs	r0, r3
 8011c50:	f009 fd1f 	bl	801b692 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2100      	movs	r1, #0
 8011c58:	0018      	movs	r0, r3
 8011c5a:	f000 f915 	bl	8011e88 <HAL_PCD_SetAddress>

    return;
 8011c5e:	e102      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8011c60:	68fa      	ldr	r2, [r7, #12]
 8011c62:	2380      	movs	r3, #128	@ 0x80
 8011c64:	01db      	lsls	r3, r3, #7
 8011c66:	4013      	ands	r3, r2
 8011c68:	d00c      	beq.n	8011c84 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2244      	movs	r2, #68	@ 0x44
 8011c70:	5a9b      	ldrh	r3, [r3, r2]
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	497d      	ldr	r1, [pc, #500]	@ (8011e70 <HAL_PCD_IRQHandler+0x270>)
 8011c7a:	400a      	ands	r2, r1
 8011c7c:	b291      	uxth	r1, r2
 8011c7e:	2244      	movs	r2, #68	@ 0x44
 8011c80:	5299      	strh	r1, [r3, r2]

    return;
 8011c82:	e0f0      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8011c84:	68fa      	ldr	r2, [r7, #12]
 8011c86:	2380      	movs	r3, #128	@ 0x80
 8011c88:	019b      	lsls	r3, r3, #6
 8011c8a:	4013      	ands	r3, r2
 8011c8c:	d00c      	beq.n	8011ca8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2244      	movs	r2, #68	@ 0x44
 8011c94:	5a9b      	ldrh	r3, [r3, r2]
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	4975      	ldr	r1, [pc, #468]	@ (8011e74 <HAL_PCD_IRQHandler+0x274>)
 8011c9e:	400a      	ands	r2, r1
 8011ca0:	b291      	uxth	r1, r2
 8011ca2:	2244      	movs	r2, #68	@ 0x44
 8011ca4:	5299      	strh	r1, [r3, r2]

    return;
 8011ca6:	e0de      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	2380      	movs	r3, #128	@ 0x80
 8011cac:	015b      	lsls	r3, r3, #5
 8011cae:	4013      	ands	r3, r2
 8011cb0:	d038      	beq.n	8011d24 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2240      	movs	r2, #64	@ 0x40
 8011cb8:	5a9b      	ldrh	r3, [r3, r2]
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2104      	movs	r1, #4
 8011cc2:	438a      	bics	r2, r1
 8011cc4:	b291      	uxth	r1, r2
 8011cc6:	2240      	movs	r2, #64	@ 0x40
 8011cc8:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2240      	movs	r2, #64	@ 0x40
 8011cd0:	5a9b      	ldrh	r3, [r3, r2]
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2108      	movs	r1, #8
 8011cda:	438a      	bics	r2, r1
 8011cdc:	b291      	uxth	r1, r2
 8011cde:	2240      	movs	r2, #64	@ 0x40
 8011ce0:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	23b8      	movs	r3, #184	@ 0xb8
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	5cd3      	ldrb	r3, [r2, r3]
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	d109      	bne.n	8011d02 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	23b8      	movs	r3, #184	@ 0xb8
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	0018      	movs	r0, r3
 8011cfe:	f001 fc9f 	bl	8013640 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	0018      	movs	r0, r3
 8011d06:	f009 fd05 	bl	801b714 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2244      	movs	r2, #68	@ 0x44
 8011d10:	5a9b      	ldrh	r3, [r3, r2]
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	4957      	ldr	r1, [pc, #348]	@ (8011e78 <HAL_PCD_IRQHandler+0x278>)
 8011d1a:	400a      	ands	r2, r1
 8011d1c:	b291      	uxth	r1, r2
 8011d1e:	2244      	movs	r2, #68	@ 0x44
 8011d20:	5299      	strh	r1, [r3, r2]

    return;
 8011d22:	e0a0      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8011d24:	68fa      	ldr	r2, [r7, #12]
 8011d26:	2380      	movs	r3, #128	@ 0x80
 8011d28:	011b      	lsls	r3, r3, #4
 8011d2a:	4013      	ands	r3, r2
 8011d2c:	d028      	beq.n	8011d80 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2240      	movs	r2, #64	@ 0x40
 8011d34:	5a9b      	ldrh	r3, [r3, r2]
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	2108      	movs	r1, #8
 8011d3e:	430a      	orrs	r2, r1
 8011d40:	b291      	uxth	r1, r2
 8011d42:	2240      	movs	r2, #64	@ 0x40
 8011d44:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2244      	movs	r2, #68	@ 0x44
 8011d4c:	5a9b      	ldrh	r3, [r3, r2]
 8011d4e:	b29a      	uxth	r2, r3
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4949      	ldr	r1, [pc, #292]	@ (8011e7c <HAL_PCD_IRQHandler+0x27c>)
 8011d56:	400a      	ands	r2, r1
 8011d58:	b291      	uxth	r1, r2
 8011d5a:	2244      	movs	r2, #68	@ 0x44
 8011d5c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2240      	movs	r2, #64	@ 0x40
 8011d64:	5a9b      	ldrh	r3, [r3, r2]
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	2104      	movs	r1, #4
 8011d6e:	430a      	orrs	r2, r1
 8011d70:	b291      	uxth	r1, r2
 8011d72:	2240      	movs	r2, #64	@ 0x40
 8011d74:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	0018      	movs	r0, r3
 8011d7a:	f009 fcaf 	bl	801b6dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011d7e:	e072      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2280      	movs	r2, #128	@ 0x80
 8011d84:	4013      	ands	r3, r2
 8011d86:	d046      	beq.n	8011e16 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2244      	movs	r2, #68	@ 0x44
 8011d8e:	5a9b      	ldrh	r3, [r3, r2]
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2180      	movs	r1, #128	@ 0x80
 8011d98:	438a      	bics	r2, r1
 8011d9a:	b291      	uxth	r1, r2
 8011d9c:	2244      	movs	r2, #68	@ 0x44
 8011d9e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	23b8      	movs	r3, #184	@ 0xb8
 8011da4:	009b      	lsls	r3, r3, #2
 8011da6:	5cd3      	ldrb	r3, [r2, r3]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d12f      	bne.n	8011e0c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2240      	movs	r2, #64	@ 0x40
 8011db2:	5a9b      	ldrh	r3, [r3, r2]
 8011db4:	b29a      	uxth	r2, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2104      	movs	r1, #4
 8011dbc:	430a      	orrs	r2, r1
 8011dbe:	b291      	uxth	r1, r2
 8011dc0:	2240      	movs	r2, #64	@ 0x40
 8011dc2:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	2240      	movs	r2, #64	@ 0x40
 8011dca:	5a9b      	ldrh	r3, [r3, r2]
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2108      	movs	r1, #8
 8011dd4:	430a      	orrs	r2, r1
 8011dd6:	b291      	uxth	r1, r2
 8011dd8:	2240      	movs	r2, #64	@ 0x40
 8011dda:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	23b8      	movs	r3, #184	@ 0xb8
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	2101      	movs	r1, #1
 8011de4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2254      	movs	r2, #84	@ 0x54
 8011dec:	5a9b      	ldrh	r3, [r3, r2]
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	089b      	lsrs	r3, r3, #2
 8011df2:	223c      	movs	r2, #60	@ 0x3c
 8011df4:	4013      	ands	r3, r2
 8011df6:	0019      	movs	r1, r3
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	23b9      	movs	r3, #185	@ 0xb9
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2101      	movs	r1, #1
 8011e04:	0018      	movs	r0, r3
 8011e06:	f001 fc1b 	bl	8013640 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8011e0a:	e02c      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	0018      	movs	r0, r3
 8011e10:	f009 fc64 	bl	801b6dc <HAL_PCD_SuspendCallback>
    return;
 8011e14:	e027      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	2380      	movs	r3, #128	@ 0x80
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	4013      	ands	r3, r2
 8011e1e:	d010      	beq.n	8011e42 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2244      	movs	r2, #68	@ 0x44
 8011e26:	5a9b      	ldrh	r3, [r3, r2]
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4914      	ldr	r1, [pc, #80]	@ (8011e80 <HAL_PCD_IRQHandler+0x280>)
 8011e30:	400a      	ands	r2, r1
 8011e32:	b291      	uxth	r1, r2
 8011e34:	2244      	movs	r2, #68	@ 0x44
 8011e36:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	0018      	movs	r0, r3
 8011e3c:	f009 fc1a 	bl	801b674 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011e40:	e011      	b.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8011e42:	68fa      	ldr	r2, [r7, #12]
 8011e44:	2380      	movs	r3, #128	@ 0x80
 8011e46:	005b      	lsls	r3, r3, #1
 8011e48:	4013      	ands	r3, r2
 8011e4a:	d00c      	beq.n	8011e66 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2244      	movs	r2, #68	@ 0x44
 8011e52:	5a9b      	ldrh	r3, [r3, r2]
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	490a      	ldr	r1, [pc, #40]	@ (8011e84 <HAL_PCD_IRQHandler+0x284>)
 8011e5c:	400a      	ands	r2, r1
 8011e5e:	b291      	uxth	r1, r2
 8011e60:	2244      	movs	r2, #68	@ 0x44
 8011e62:	5299      	strh	r1, [r3, r2]

    return;
 8011e64:	46c0      	nop			@ (mov r8, r8)
  }
}
 8011e66:	46bd      	mov	sp, r7
 8011e68:	b004      	add	sp, #16
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	fffffbff 	.word	0xfffffbff
 8011e70:	ffffbfff 	.word	0xffffbfff
 8011e74:	ffffdfff 	.word	0xffffdfff
 8011e78:	ffffefff 	.word	0xffffefff
 8011e7c:	fffff7ff 	.word	0xfffff7ff
 8011e80:	fffffdff 	.word	0xfffffdff
 8011e84:	fffffeff 	.word	0xfffffeff

08011e88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	000a      	movs	r2, r1
 8011e92:	1cfb      	adds	r3, r7, #3
 8011e94:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	23aa      	movs	r3, #170	@ 0xaa
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	5cd3      	ldrb	r3, [r2, r3]
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d101      	bne.n	8011ea6 <HAL_PCD_SetAddress+0x1e>
 8011ea2:	2302      	movs	r3, #2
 8011ea4:	e017      	b.n	8011ed6 <HAL_PCD_SetAddress+0x4e>
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	23aa      	movs	r3, #170	@ 0xaa
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	2101      	movs	r1, #1
 8011eae:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	1cfa      	adds	r2, r7, #3
 8011eb4:	2124      	movs	r1, #36	@ 0x24
 8011eb6:	7812      	ldrb	r2, [r2, #0]
 8011eb8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	1cfb      	adds	r3, r7, #3
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	0019      	movs	r1, r3
 8011ec4:	0010      	movs	r0, r2
 8011ec6:	f007 fafb 	bl	80194c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	23aa      	movs	r3, #170	@ 0xaa
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	2100      	movs	r1, #0
 8011ed2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	0018      	movs	r0, r3
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	b002      	add	sp, #8
 8011edc:	bd80      	pop	{r7, pc}

08011ede <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011ede:	b590      	push	{r4, r7, lr}
 8011ee0:	b085      	sub	sp, #20
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	000c      	movs	r4, r1
 8011ee8:	0010      	movs	r0, r2
 8011eea:	0019      	movs	r1, r3
 8011eec:	1cfb      	adds	r3, r7, #3
 8011eee:	1c22      	adds	r2, r4, #0
 8011ef0:	701a      	strb	r2, [r3, #0]
 8011ef2:	003b      	movs	r3, r7
 8011ef4:	1c02      	adds	r2, r0, #0
 8011ef6:	801a      	strh	r2, [r3, #0]
 8011ef8:	1cbb      	adds	r3, r7, #2
 8011efa:	1c0a      	adds	r2, r1, #0
 8011efc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011efe:	230b      	movs	r3, #11
 8011f00:	18fb      	adds	r3, r7, r3
 8011f02:	2200      	movs	r2, #0
 8011f04:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011f06:	1cfb      	adds	r3, r7, #3
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	b25b      	sxtb	r3, r3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	da0f      	bge.n	8011f30 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011f10:	1cfb      	adds	r3, r7, #3
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	2207      	movs	r2, #7
 8011f16:	4013      	ands	r3, r2
 8011f18:	1c5a      	adds	r2, r3, #1
 8011f1a:	0013      	movs	r3, r2
 8011f1c:	009b      	lsls	r3, r3, #2
 8011f1e:	189b      	adds	r3, r3, r2
 8011f20:	00db      	lsls	r3, r3, #3
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	18d3      	adds	r3, r2, r3
 8011f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	705a      	strb	r2, [r3, #1]
 8011f2e:	e00f      	b.n	8011f50 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011f30:	1cfb      	adds	r3, r7, #3
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	2207      	movs	r2, #7
 8011f36:	401a      	ands	r2, r3
 8011f38:	0013      	movs	r3, r2
 8011f3a:	009b      	lsls	r3, r3, #2
 8011f3c:	189b      	adds	r3, r3, r2
 8011f3e:	00db      	lsls	r3, r3, #3
 8011f40:	3369      	adds	r3, #105	@ 0x69
 8011f42:	33ff      	adds	r3, #255	@ 0xff
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	18d3      	adds	r3, r2, r3
 8011f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	2200      	movs	r2, #0
 8011f4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011f50:	1cfb      	adds	r3, r7, #3
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	2207      	movs	r2, #7
 8011f56:	4013      	ands	r3, r2
 8011f58:	b2da      	uxtb	r2, r3
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011f5e:	003b      	movs	r3, r7
 8011f60:	881a      	ldrh	r2, [r3, #0]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	1cba      	adds	r2, r7, #2
 8011f6a:	7812      	ldrb	r2, [r2, #0]
 8011f6c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011f6e:	1cbb      	adds	r3, r7, #2
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	2b02      	cmp	r3, #2
 8011f74:	d102      	bne.n	8011f7c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	23aa      	movs	r3, #170	@ 0xaa
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	5cd3      	ldrb	r3, [r2, r3]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d101      	bne.n	8011f8c <HAL_PCD_EP_Open+0xae>
 8011f88:	2302      	movs	r3, #2
 8011f8a:	e013      	b.n	8011fb4 <HAL_PCD_EP_Open+0xd6>
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	23aa      	movs	r3, #170	@ 0xaa
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	2101      	movs	r1, #1
 8011f94:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	0011      	movs	r1, r2
 8011f9e:	0018      	movs	r0, r3
 8011fa0:	f005 faf2 	bl	8017588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	23aa      	movs	r3, #170	@ 0xaa
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	2100      	movs	r1, #0
 8011fac:	54d1      	strb	r1, [r2, r3]

  return ret;
 8011fae:	230b      	movs	r3, #11
 8011fb0:	18fb      	adds	r3, r7, r3
 8011fb2:	781b      	ldrb	r3, [r3, #0]
}
 8011fb4:	0018      	movs	r0, r3
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	b005      	add	sp, #20
 8011fba:	bd90      	pop	{r4, r7, pc}

08011fbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	000a      	movs	r2, r1
 8011fc6:	1cfb      	adds	r3, r7, #3
 8011fc8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011fca:	1cfb      	adds	r3, r7, #3
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	b25b      	sxtb	r3, r3
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	da0f      	bge.n	8011ff4 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011fd4:	1cfb      	adds	r3, r7, #3
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2207      	movs	r2, #7
 8011fda:	4013      	ands	r3, r2
 8011fdc:	1c5a      	adds	r2, r3, #1
 8011fde:	0013      	movs	r3, r2
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	189b      	adds	r3, r3, r2
 8011fe4:	00db      	lsls	r3, r3, #3
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	18d3      	adds	r3, r2, r3
 8011fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2201      	movs	r2, #1
 8011ff0:	705a      	strb	r2, [r3, #1]
 8011ff2:	e00f      	b.n	8012014 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011ff4:	1cfb      	adds	r3, r7, #3
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	2207      	movs	r2, #7
 8011ffa:	401a      	ands	r2, r3
 8011ffc:	0013      	movs	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	189b      	adds	r3, r3, r2
 8012002:	00db      	lsls	r3, r3, #3
 8012004:	3369      	adds	r3, #105	@ 0x69
 8012006:	33ff      	adds	r3, #255	@ 0xff
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	18d3      	adds	r3, r2, r3
 801200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2200      	movs	r2, #0
 8012012:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012014:	1cfb      	adds	r3, r7, #3
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	2207      	movs	r2, #7
 801201a:	4013      	ands	r3, r2
 801201c:	b2da      	uxtb	r2, r3
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	23aa      	movs	r3, #170	@ 0xaa
 8012026:	009b      	lsls	r3, r3, #2
 8012028:	5cd3      	ldrb	r3, [r2, r3]
 801202a:	2b01      	cmp	r3, #1
 801202c:	d101      	bne.n	8012032 <HAL_PCD_EP_Close+0x76>
 801202e:	2302      	movs	r3, #2
 8012030:	e011      	b.n	8012056 <HAL_PCD_EP_Close+0x9a>
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	23aa      	movs	r3, #170	@ 0xaa
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	2101      	movs	r1, #1
 801203a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	68fa      	ldr	r2, [r7, #12]
 8012042:	0011      	movs	r1, r2
 8012044:	0018      	movs	r0, r3
 8012046:	f005 fe41 	bl	8017ccc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	23aa      	movs	r3, #170	@ 0xaa
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	2100      	movs	r1, #0
 8012052:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012054:	2300      	movs	r3, #0
}
 8012056:	0018      	movs	r0, r3
 8012058:	46bd      	mov	sp, r7
 801205a:	b004      	add	sp, #16
 801205c:	bd80      	pop	{r7, pc}

0801205e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801205e:	b580      	push	{r7, lr}
 8012060:	b086      	sub	sp, #24
 8012062:	af00      	add	r7, sp, #0
 8012064:	60f8      	str	r0, [r7, #12]
 8012066:	607a      	str	r2, [r7, #4]
 8012068:	603b      	str	r3, [r7, #0]
 801206a:	200b      	movs	r0, #11
 801206c:	183b      	adds	r3, r7, r0
 801206e:	1c0a      	adds	r2, r1, #0
 8012070:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012072:	0001      	movs	r1, r0
 8012074:	187b      	adds	r3, r7, r1
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	2207      	movs	r2, #7
 801207a:	401a      	ands	r2, r3
 801207c:	0013      	movs	r3, r2
 801207e:	009b      	lsls	r3, r3, #2
 8012080:	189b      	adds	r3, r3, r2
 8012082:	00db      	lsls	r3, r3, #3
 8012084:	3369      	adds	r3, #105	@ 0x69
 8012086:	33ff      	adds	r3, #255	@ 0xff
 8012088:	68fa      	ldr	r2, [r7, #12]
 801208a:	18d3      	adds	r3, r2, r3
 801208c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	683a      	ldr	r2, [r7, #0]
 8012098:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	2200      	movs	r2, #0
 801209e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	2200      	movs	r2, #0
 80120a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80120a6:	187b      	adds	r3, r7, r1
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	2207      	movs	r2, #7
 80120ac:	4013      	ands	r3, r2
 80120ae:	b2da      	uxtb	r2, r3
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	697a      	ldr	r2, [r7, #20]
 80120ba:	0011      	movs	r1, r2
 80120bc:	0018      	movs	r0, r3
 80120be:	f005 ffc5 	bl	801804c <USB_EPStartXfer>

  return HAL_OK;
 80120c2:	2300      	movs	r3, #0
}
 80120c4:	0018      	movs	r0, r3
 80120c6:	46bd      	mov	sp, r7
 80120c8:	b006      	add	sp, #24
 80120ca:	bd80      	pop	{r7, pc}

080120cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b082      	sub	sp, #8
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	000a      	movs	r2, r1
 80120d6:	1cfb      	adds	r3, r7, #3
 80120d8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80120da:	1cfb      	adds	r3, r7, #3
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	2207      	movs	r2, #7
 80120e0:	401a      	ands	r2, r3
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	23c2      	movs	r3, #194	@ 0xc2
 80120e6:	0059      	lsls	r1, r3, #1
 80120e8:	0013      	movs	r3, r2
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	189b      	adds	r3, r3, r2
 80120ee:	00db      	lsls	r3, r3, #3
 80120f0:	18c3      	adds	r3, r0, r3
 80120f2:	185b      	adds	r3, r3, r1
 80120f4:	681b      	ldr	r3, [r3, #0]
}
 80120f6:	0018      	movs	r0, r3
 80120f8:	46bd      	mov	sp, r7
 80120fa:	b002      	add	sp, #8
 80120fc:	bd80      	pop	{r7, pc}

080120fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80120fe:	b580      	push	{r7, lr}
 8012100:	b086      	sub	sp, #24
 8012102:	af00      	add	r7, sp, #0
 8012104:	60f8      	str	r0, [r7, #12]
 8012106:	607a      	str	r2, [r7, #4]
 8012108:	603b      	str	r3, [r7, #0]
 801210a:	200b      	movs	r0, #11
 801210c:	183b      	adds	r3, r7, r0
 801210e:	1c0a      	adds	r2, r1, #0
 8012110:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012112:	183b      	adds	r3, r7, r0
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	2207      	movs	r2, #7
 8012118:	4013      	ands	r3, r2
 801211a:	1c5a      	adds	r2, r3, #1
 801211c:	0013      	movs	r3, r2
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	189b      	adds	r3, r3, r2
 8012122:	00db      	lsls	r3, r3, #3
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	18d3      	adds	r3, r2, r3
 8012128:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	687a      	ldr	r2, [r7, #4]
 801212e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	683a      	ldr	r2, [r7, #0]
 8012134:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	2224      	movs	r2, #36	@ 0x24
 801213a:	2101      	movs	r1, #1
 801213c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	683a      	ldr	r2, [r7, #0]
 8012142:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	2200      	movs	r2, #0
 8012148:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	2201      	movs	r2, #1
 801214e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012150:	183b      	adds	r3, r7, r0
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	2207      	movs	r2, #7
 8012156:	4013      	ands	r3, r2
 8012158:	b2da      	uxtb	r2, r3
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	697a      	ldr	r2, [r7, #20]
 8012164:	0011      	movs	r1, r2
 8012166:	0018      	movs	r0, r3
 8012168:	f005 ff70 	bl	801804c <USB_EPStartXfer>

  return HAL_OK;
 801216c:	2300      	movs	r3, #0
}
 801216e:	0018      	movs	r0, r3
 8012170:	46bd      	mov	sp, r7
 8012172:	b006      	add	sp, #24
 8012174:	bd80      	pop	{r7, pc}

08012176 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012176:	b580      	push	{r7, lr}
 8012178:	b084      	sub	sp, #16
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
 801217e:	000a      	movs	r2, r1
 8012180:	1cfb      	adds	r3, r7, #3
 8012182:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012184:	1cfb      	adds	r3, r7, #3
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	2207      	movs	r2, #7
 801218a:	401a      	ands	r2, r3
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	429a      	cmp	r2, r3
 8012192:	d901      	bls.n	8012198 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012194:	2301      	movs	r3, #1
 8012196:	e046      	b.n	8012226 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012198:	1cfb      	adds	r3, r7, #3
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	b25b      	sxtb	r3, r3
 801219e:	2b00      	cmp	r3, #0
 80121a0:	da0f      	bge.n	80121c2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80121a2:	1cfb      	adds	r3, r7, #3
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	2207      	movs	r2, #7
 80121a8:	4013      	ands	r3, r2
 80121aa:	1c5a      	adds	r2, r3, #1
 80121ac:	0013      	movs	r3, r2
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	189b      	adds	r3, r3, r2
 80121b2:	00db      	lsls	r3, r3, #3
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	18d3      	adds	r3, r2, r3
 80121b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2201      	movs	r2, #1
 80121be:	705a      	strb	r2, [r3, #1]
 80121c0:	e00d      	b.n	80121de <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80121c2:	1cfb      	adds	r3, r7, #3
 80121c4:	781a      	ldrb	r2, [r3, #0]
 80121c6:	0013      	movs	r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	189b      	adds	r3, r3, r2
 80121cc:	00db      	lsls	r3, r3, #3
 80121ce:	3369      	adds	r3, #105	@ 0x69
 80121d0:	33ff      	adds	r3, #255	@ 0xff
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	18d3      	adds	r3, r2, r3
 80121d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2200      	movs	r2, #0
 80121dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2201      	movs	r2, #1
 80121e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80121e4:	1cfb      	adds	r3, r7, #3
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	2207      	movs	r2, #7
 80121ea:	4013      	ands	r3, r2
 80121ec:	b2da      	uxtb	r2, r3
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	23aa      	movs	r3, #170	@ 0xaa
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	5cd3      	ldrb	r3, [r2, r3]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d101      	bne.n	8012202 <HAL_PCD_EP_SetStall+0x8c>
 80121fe:	2302      	movs	r3, #2
 8012200:	e011      	b.n	8012226 <HAL_PCD_EP_SetStall+0xb0>
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	23aa      	movs	r3, #170	@ 0xaa
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	2101      	movs	r1, #1
 801220a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	68fa      	ldr	r2, [r7, #12]
 8012212:	0011      	movs	r1, r2
 8012214:	0018      	movs	r0, r3
 8012216:	f007 f851 	bl	80192bc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	23aa      	movs	r3, #170	@ 0xaa
 801221e:	009b      	lsls	r3, r3, #2
 8012220:	2100      	movs	r1, #0
 8012222:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012224:	2300      	movs	r3, #0
}
 8012226:	0018      	movs	r0, r3
 8012228:	46bd      	mov	sp, r7
 801222a:	b004      	add	sp, #16
 801222c:	bd80      	pop	{r7, pc}

0801222e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b084      	sub	sp, #16
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	000a      	movs	r2, r1
 8012238:	1cfb      	adds	r3, r7, #3
 801223a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801223c:	1cfb      	adds	r3, r7, #3
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	220f      	movs	r2, #15
 8012242:	401a      	ands	r2, r3
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	429a      	cmp	r2, r3
 801224a:	d901      	bls.n	8012250 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 801224c:	2301      	movs	r3, #1
 801224e:	e048      	b.n	80122e2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012250:	1cfb      	adds	r3, r7, #3
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	b25b      	sxtb	r3, r3
 8012256:	2b00      	cmp	r3, #0
 8012258:	da0f      	bge.n	801227a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801225a:	1cfb      	adds	r3, r7, #3
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	2207      	movs	r2, #7
 8012260:	4013      	ands	r3, r2
 8012262:	1c5a      	adds	r2, r3, #1
 8012264:	0013      	movs	r3, r2
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	189b      	adds	r3, r3, r2
 801226a:	00db      	lsls	r3, r3, #3
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	18d3      	adds	r3, r2, r3
 8012270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2201      	movs	r2, #1
 8012276:	705a      	strb	r2, [r3, #1]
 8012278:	e00f      	b.n	801229a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801227a:	1cfb      	adds	r3, r7, #3
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	2207      	movs	r2, #7
 8012280:	401a      	ands	r2, r3
 8012282:	0013      	movs	r3, r2
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	189b      	adds	r3, r3, r2
 8012288:	00db      	lsls	r3, r3, #3
 801228a:	3369      	adds	r3, #105	@ 0x69
 801228c:	33ff      	adds	r3, #255	@ 0xff
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	18d3      	adds	r3, r2, r3
 8012292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2200      	movs	r2, #0
 8012298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2200      	movs	r2, #0
 801229e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80122a0:	1cfb      	adds	r3, r7, #3
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2207      	movs	r2, #7
 80122a6:	4013      	ands	r3, r2
 80122a8:	b2da      	uxtb	r2, r3
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80122ae:	687a      	ldr	r2, [r7, #4]
 80122b0:	23aa      	movs	r3, #170	@ 0xaa
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	5cd3      	ldrb	r3, [r2, r3]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d101      	bne.n	80122be <HAL_PCD_EP_ClrStall+0x90>
 80122ba:	2302      	movs	r3, #2
 80122bc:	e011      	b.n	80122e2 <HAL_PCD_EP_ClrStall+0xb4>
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	23aa      	movs	r3, #170	@ 0xaa
 80122c2:	009b      	lsls	r3, r3, #2
 80122c4:	2101      	movs	r1, #1
 80122c6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	68fa      	ldr	r2, [r7, #12]
 80122ce:	0011      	movs	r1, r2
 80122d0:	0018      	movs	r0, r3
 80122d2:	f007 f843 	bl	801935c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	23aa      	movs	r3, #170	@ 0xaa
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	2100      	movs	r1, #0
 80122de:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	0018      	movs	r0, r3
 80122e4:	46bd      	mov	sp, r7
 80122e6:	b004      	add	sp, #16
 80122e8:	bd80      	pop	{r7, pc}
	...

080122ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80122ec:	b5b0      	push	{r4, r5, r7, lr}
 80122ee:	b096      	sub	sp, #88	@ 0x58
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80122f4:	f000 fbec 	bl	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	204e      	movs	r0, #78	@ 0x4e
 80122fe:	183b      	adds	r3, r7, r0
 8012300:	2144      	movs	r1, #68	@ 0x44
 8012302:	5a52      	ldrh	r2, [r2, r1]
 8012304:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8012306:	183b      	adds	r3, r7, r0
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	b2da      	uxtb	r2, r3
 801230c:	244d      	movs	r4, #77	@ 0x4d
 801230e:	193b      	adds	r3, r7, r4
 8012310:	210f      	movs	r1, #15
 8012312:	400a      	ands	r2, r1
 8012314:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8012316:	193b      	adds	r3, r7, r4
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d000      	beq.n	8012320 <PCD_EP_ISR_Handler+0x34>
 801231e:	e18f      	b.n	8012640 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012320:	183b      	adds	r3, r7, r0
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	2210      	movs	r2, #16
 8012326:	4013      	ands	r3, r2
 8012328:	d155      	bne.n	80123d6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	881b      	ldrh	r3, [r3, #0]
 8012330:	b29a      	uxth	r2, r3
 8012332:	200e      	movs	r0, #14
 8012334:	183b      	adds	r3, r7, r0
 8012336:	49bb      	ldr	r1, [pc, #748]	@ (8012624 <PCD_EP_ISR_Handler+0x338>)
 8012338:	400a      	ands	r2, r1
 801233a:	801a      	strh	r2, [r3, #0]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	183a      	adds	r2, r7, r0
 8012342:	8812      	ldrh	r2, [r2, #0]
 8012344:	49b8      	ldr	r1, [pc, #736]	@ (8012628 <PCD_EP_ISR_Handler+0x33c>)
 8012346:	430a      	orrs	r2, r1
 8012348:	b292      	uxth	r2, r2
 801234a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	3328      	adds	r3, #40	@ 0x28
 8012350:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2250      	movs	r2, #80	@ 0x50
 8012358:	5a9b      	ldrh	r3, [r3, r2]
 801235a:	b29b      	uxth	r3, r3
 801235c:	001a      	movs	r2, r3
 801235e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	18d2      	adds	r2, r2, r3
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	18d3      	adds	r3, r2, r3
 801236c:	4aaf      	ldr	r2, [pc, #700]	@ (801262c <PCD_EP_ISR_Handler+0x340>)
 801236e:	4694      	mov	ip, r2
 8012370:	4463      	add	r3, ip
 8012372:	881b      	ldrh	r3, [r3, #0]
 8012374:	059b      	lsls	r3, r3, #22
 8012376:	0d9a      	lsrs	r2, r3, #22
 8012378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801237a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 801237c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801237e:	695a      	ldr	r2, [r3, #20]
 8012380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012382:	69db      	ldr	r3, [r3, #28]
 8012384:	18d2      	adds	r2, r2, r3
 8012386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012388:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2100      	movs	r1, #0
 801238e:	0018      	movs	r0, r3
 8012390:	f009 f952 	bl	801b638 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2224      	movs	r2, #36	@ 0x24
 8012398:	5c9b      	ldrb	r3, [r3, r2]
 801239a:	b2db      	uxtb	r3, r3
 801239c:	2b00      	cmp	r3, #0
 801239e:	d101      	bne.n	80123a4 <PCD_EP_ISR_Handler+0xb8>
 80123a0:	f000 fb96 	bl	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
 80123a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123a6:	699b      	ldr	r3, [r3, #24]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d001      	beq.n	80123b0 <PCD_EP_ISR_Handler+0xc4>
 80123ac:	f000 fb90 	bl	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2224      	movs	r2, #36	@ 0x24
 80123b4:	5c9b      	ldrb	r3, [r3, r2]
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	2280      	movs	r2, #128	@ 0x80
 80123ba:	4252      	negs	r2, r2
 80123bc:	4313      	orrs	r3, r2
 80123be:	b2da      	uxtb	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	0011      	movs	r1, r2
 80123c6:	224c      	movs	r2, #76	@ 0x4c
 80123c8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2224      	movs	r2, #36	@ 0x24
 80123ce:	2100      	movs	r1, #0
 80123d0:	5499      	strb	r1, [r3, r2]
 80123d2:	f000 fb7d 	bl	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	3369      	adds	r3, #105	@ 0x69
 80123da:	33ff      	adds	r3, #255	@ 0xff
 80123dc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	214a      	movs	r1, #74	@ 0x4a
 80123e4:	187b      	adds	r3, r7, r1
 80123e6:	8812      	ldrh	r2, [r2, #0]
 80123e8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80123ea:	187b      	adds	r3, r7, r1
 80123ec:	881a      	ldrh	r2, [r3, #0]
 80123ee:	2380      	movs	r3, #128	@ 0x80
 80123f0:	011b      	lsls	r3, r3, #4
 80123f2:	4013      	ands	r3, r2
 80123f4:	d037      	beq.n	8012466 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2250      	movs	r2, #80	@ 0x50
 80123fc:	5a9b      	ldrh	r3, [r3, r2]
 80123fe:	b29b      	uxth	r3, r3
 8012400:	001a      	movs	r2, r3
 8012402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	00db      	lsls	r3, r3, #3
 8012408:	18d2      	adds	r2, r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	18d3      	adds	r3, r2, r3
 8012410:	4a87      	ldr	r2, [pc, #540]	@ (8012630 <PCD_EP_ISR_Handler+0x344>)
 8012412:	4694      	mov	ip, r2
 8012414:	4463      	add	r3, ip
 8012416:	881b      	ldrh	r3, [r3, #0]
 8012418:	059b      	lsls	r3, r3, #22
 801241a:	0d9a      	lsrs	r2, r3, #22
 801241c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801241e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6818      	ldr	r0, [r3, #0]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	22ac      	movs	r2, #172	@ 0xac
 8012428:	0092      	lsls	r2, r2, #2
 801242a:	1899      	adds	r1, r3, r2
 801242c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801242e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8012430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012432:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012434:	b29b      	uxth	r3, r3
 8012436:	f007 f8c4 	bl	80195c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	881b      	ldrh	r3, [r3, #0]
 8012440:	b29a      	uxth	r2, r3
 8012442:	2010      	movs	r0, #16
 8012444:	183b      	adds	r3, r7, r0
 8012446:	497b      	ldr	r1, [pc, #492]	@ (8012634 <PCD_EP_ISR_Handler+0x348>)
 8012448:	400a      	ands	r2, r1
 801244a:	801a      	strh	r2, [r3, #0]
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	183a      	adds	r2, r7, r0
 8012452:	8812      	ldrh	r2, [r2, #0]
 8012454:	2180      	movs	r1, #128	@ 0x80
 8012456:	430a      	orrs	r2, r1
 8012458:	b292      	uxth	r2, r2
 801245a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	0018      	movs	r0, r3
 8012460:	f009 f8b4 	bl	801b5cc <HAL_PCD_SetupStageCallback>
 8012464:	e334      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012466:	234a      	movs	r3, #74	@ 0x4a
 8012468:	18fb      	adds	r3, r7, r3
 801246a:	2200      	movs	r2, #0
 801246c:	5e9b      	ldrsh	r3, [r3, r2]
 801246e:	2b00      	cmp	r3, #0
 8012470:	db00      	blt.n	8012474 <PCD_EP_ISR_Handler+0x188>
 8012472:	e32d      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	881b      	ldrh	r3, [r3, #0]
 801247a:	b29a      	uxth	r2, r3
 801247c:	201e      	movs	r0, #30
 801247e:	183b      	adds	r3, r7, r0
 8012480:	496c      	ldr	r1, [pc, #432]	@ (8012634 <PCD_EP_ISR_Handler+0x348>)
 8012482:	400a      	ands	r2, r1
 8012484:	801a      	strh	r2, [r3, #0]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	183a      	adds	r2, r7, r0
 801248c:	8812      	ldrh	r2, [r2, #0]
 801248e:	2180      	movs	r1, #128	@ 0x80
 8012490:	430a      	orrs	r2, r1
 8012492:	b292      	uxth	r2, r2
 8012494:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	2250      	movs	r2, #80	@ 0x50
 801249c:	5a9b      	ldrh	r3, [r3, r2]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	001a      	movs	r2, r3
 80124a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124a4:	781b      	ldrb	r3, [r3, #0]
 80124a6:	00db      	lsls	r3, r3, #3
 80124a8:	18d2      	adds	r2, r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	18d3      	adds	r3, r2, r3
 80124b0:	4a5f      	ldr	r2, [pc, #380]	@ (8012630 <PCD_EP_ISR_Handler+0x344>)
 80124b2:	4694      	mov	ip, r2
 80124b4:	4463      	add	r3, ip
 80124b6:	881b      	ldrh	r3, [r3, #0]
 80124b8:	059b      	lsls	r3, r3, #22
 80124ba:	0d9a      	lsrs	r2, r3, #22
 80124bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80124c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124c2:	69db      	ldr	r3, [r3, #28]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d01a      	beq.n	80124fe <PCD_EP_ISR_Handler+0x212>
 80124c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124ca:	695b      	ldr	r3, [r3, #20]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d016      	beq.n	80124fe <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6818      	ldr	r0, [r3, #0]
 80124d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124d6:	6959      	ldr	r1, [r3, #20]
 80124d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80124dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	f007 f86e 	bl	80195c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80124e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124e8:	695a      	ldr	r2, [r3, #20]
 80124ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124ec:	69db      	ldr	r3, [r3, #28]
 80124ee:	18d2      	adds	r2, r2, r3
 80124f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2100      	movs	r1, #0
 80124f8:	0018      	movs	r0, r3
 80124fa:	f009 f87c 	bl	801b5f6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	214a      	movs	r1, #74	@ 0x4a
 8012504:	187b      	adds	r3, r7, r1
 8012506:	8812      	ldrh	r2, [r2, #0]
 8012508:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801250a:	187b      	adds	r3, r7, r1
 801250c:	881a      	ldrh	r2, [r3, #0]
 801250e:	2380      	movs	r3, #128	@ 0x80
 8012510:	011b      	lsls	r3, r3, #4
 8012512:	4013      	ands	r3, r2
 8012514:	d000      	beq.n	8012518 <PCD_EP_ISR_Handler+0x22c>
 8012516:	e2db      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
 8012518:	187b      	adds	r3, r7, r1
 801251a:	881a      	ldrh	r2, [r3, #0]
 801251c:	23c0      	movs	r3, #192	@ 0xc0
 801251e:	019b      	lsls	r3, r3, #6
 8012520:	401a      	ands	r2, r3
 8012522:	23c0      	movs	r3, #192	@ 0xc0
 8012524:	019b      	lsls	r3, r3, #6
 8012526:	429a      	cmp	r2, r3
 8012528:	d100      	bne.n	801252c <PCD_EP_ISR_Handler+0x240>
 801252a:	e2d1      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	61bb      	str	r3, [r7, #24]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	2250      	movs	r2, #80	@ 0x50
 8012538:	5a9b      	ldrh	r3, [r3, r2]
 801253a:	b29b      	uxth	r3, r3
 801253c:	001a      	movs	r2, r3
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	189b      	adds	r3, r3, r2
 8012542:	61bb      	str	r3, [r7, #24]
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	4a3a      	ldr	r2, [pc, #232]	@ (8012630 <PCD_EP_ISR_Handler+0x344>)
 8012548:	4694      	mov	ip, r2
 801254a:	4463      	add	r3, ip
 801254c:	617b      	str	r3, [r7, #20]
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	b29b      	uxth	r3, r3
 8012554:	059b      	lsls	r3, r3, #22
 8012556:	0d9b      	lsrs	r3, r3, #22
 8012558:	b29a      	uxth	r2, r3
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	801a      	strh	r2, [r3, #0]
 801255e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012560:	691b      	ldr	r3, [r3, #16]
 8012562:	2b3e      	cmp	r3, #62	@ 0x3e
 8012564:	d91a      	bls.n	801259c <PCD_EP_ISR_Handler+0x2b0>
 8012566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012568:	691b      	ldr	r3, [r3, #16]
 801256a:	095b      	lsrs	r3, r3, #5
 801256c:	647b      	str	r3, [r7, #68]	@ 0x44
 801256e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012570:	691b      	ldr	r3, [r3, #16]
 8012572:	221f      	movs	r2, #31
 8012574:	4013      	ands	r3, r2
 8012576:	d102      	bne.n	801257e <PCD_EP_ISR_Handler+0x292>
 8012578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801257a:	3b01      	subs	r3, #1
 801257c:	647b      	str	r3, [r7, #68]	@ 0x44
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	881b      	ldrh	r3, [r3, #0]
 8012582:	b29a      	uxth	r2, r3
 8012584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012586:	b29b      	uxth	r3, r3
 8012588:	029b      	lsls	r3, r3, #10
 801258a:	b29b      	uxth	r3, r3
 801258c:	4313      	orrs	r3, r2
 801258e:	b29b      	uxth	r3, r3
 8012590:	4a25      	ldr	r2, [pc, #148]	@ (8012628 <PCD_EP_ISR_Handler+0x33c>)
 8012592:	4313      	orrs	r3, r2
 8012594:	b29a      	uxth	r2, r3
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	801a      	strh	r2, [r3, #0]
 801259a:	e023      	b.n	80125e4 <PCD_EP_ISR_Handler+0x2f8>
 801259c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801259e:	691b      	ldr	r3, [r3, #16]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d108      	bne.n	80125b6 <PCD_EP_ISR_Handler+0x2ca>
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	881b      	ldrh	r3, [r3, #0]
 80125a8:	b29b      	uxth	r3, r3
 80125aa:	4a1f      	ldr	r2, [pc, #124]	@ (8012628 <PCD_EP_ISR_Handler+0x33c>)
 80125ac:	4313      	orrs	r3, r2
 80125ae:	b29a      	uxth	r2, r3
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	801a      	strh	r2, [r3, #0]
 80125b4:	e016      	b.n	80125e4 <PCD_EP_ISR_Handler+0x2f8>
 80125b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125b8:	691b      	ldr	r3, [r3, #16]
 80125ba:	085b      	lsrs	r3, r3, #1
 80125bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80125be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125c0:	691b      	ldr	r3, [r3, #16]
 80125c2:	2201      	movs	r2, #1
 80125c4:	4013      	ands	r3, r2
 80125c6:	d002      	beq.n	80125ce <PCD_EP_ISR_Handler+0x2e2>
 80125c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125ca:	3301      	adds	r3, #1
 80125cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	881b      	ldrh	r3, [r3, #0]
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	029b      	lsls	r3, r3, #10
 80125da:	b29b      	uxth	r3, r3
 80125dc:	4313      	orrs	r3, r2
 80125de:	b29a      	uxth	r2, r3
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	881b      	ldrh	r3, [r3, #0]
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	2012      	movs	r0, #18
 80125ee:	183b      	adds	r3, r7, r0
 80125f0:	4911      	ldr	r1, [pc, #68]	@ (8012638 <PCD_EP_ISR_Handler+0x34c>)
 80125f2:	400a      	ands	r2, r1
 80125f4:	801a      	strh	r2, [r3, #0]
 80125f6:	183b      	adds	r3, r7, r0
 80125f8:	183a      	adds	r2, r7, r0
 80125fa:	8812      	ldrh	r2, [r2, #0]
 80125fc:	2180      	movs	r1, #128	@ 0x80
 80125fe:	0149      	lsls	r1, r1, #5
 8012600:	404a      	eors	r2, r1
 8012602:	801a      	strh	r2, [r3, #0]
 8012604:	183b      	adds	r3, r7, r0
 8012606:	183a      	adds	r2, r7, r0
 8012608:	8812      	ldrh	r2, [r2, #0]
 801260a:	2180      	movs	r1, #128	@ 0x80
 801260c:	0189      	lsls	r1, r1, #6
 801260e:	404a      	eors	r2, r1
 8012610:	801a      	strh	r2, [r3, #0]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	183a      	adds	r2, r7, r0
 8012618:	8812      	ldrh	r2, [r2, #0]
 801261a:	4908      	ldr	r1, [pc, #32]	@ (801263c <PCD_EP_ISR_Handler+0x350>)
 801261c:	430a      	orrs	r2, r1
 801261e:	b292      	uxth	r2, r2
 8012620:	801a      	strh	r2, [r3, #0]
 8012622:	e255      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
 8012624:	ffff8f0f 	.word	0xffff8f0f
 8012628:	ffff8000 	.word	0xffff8000
 801262c:	00000402 	.word	0x00000402
 8012630:	00000406 	.word	0x00000406
 8012634:	00000f8f 	.word	0x00000f8f
 8012638:	ffffbf8f 	.word	0xffffbf8f
 801263c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	001a      	movs	r2, r3
 8012646:	204d      	movs	r0, #77	@ 0x4d
 8012648:	183b      	adds	r3, r7, r0
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	009b      	lsls	r3, r3, #2
 801264e:	18d2      	adds	r2, r2, r3
 8012650:	214a      	movs	r1, #74	@ 0x4a
 8012652:	187b      	adds	r3, r7, r1
 8012654:	8812      	ldrh	r2, [r2, #0]
 8012656:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012658:	187b      	adds	r3, r7, r1
 801265a:	2200      	movs	r2, #0
 801265c:	5e9b      	ldrsh	r3, [r3, r2]
 801265e:	2b00      	cmp	r3, #0
 8012660:	db00      	blt.n	8012664 <PCD_EP_ISR_Handler+0x378>
 8012662:	e0fa      	b.n	801285a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	001a      	movs	r2, r3
 801266a:	183b      	adds	r3, r7, r0
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	009b      	lsls	r3, r3, #2
 8012670:	18d3      	adds	r3, r2, r3
 8012672:	881b      	ldrh	r3, [r3, #0]
 8012674:	b29a      	uxth	r2, r3
 8012676:	2448      	movs	r4, #72	@ 0x48
 8012678:	193b      	adds	r3, r7, r4
 801267a:	49d1      	ldr	r1, [pc, #836]	@ (80129c0 <PCD_EP_ISR_Handler+0x6d4>)
 801267c:	400a      	ands	r2, r1
 801267e:	801a      	strh	r2, [r3, #0]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	001a      	movs	r2, r3
 8012686:	183b      	adds	r3, r7, r0
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	18d3      	adds	r3, r2, r3
 801268e:	193a      	adds	r2, r7, r4
 8012690:	8812      	ldrh	r2, [r2, #0]
 8012692:	2180      	movs	r1, #128	@ 0x80
 8012694:	430a      	orrs	r2, r1
 8012696:	b292      	uxth	r2, r2
 8012698:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801269a:	183b      	adds	r3, r7, r0
 801269c:	781a      	ldrb	r2, [r3, #0]
 801269e:	0013      	movs	r3, r2
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	189b      	adds	r3, r3, r2
 80126a4:	00db      	lsls	r3, r3, #3
 80126a6:	3369      	adds	r3, #105	@ 0x69
 80126a8:	33ff      	adds	r3, #255	@ 0xff
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	18d3      	adds	r3, r2, r3
 80126ae:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80126b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126b2:	7b1b      	ldrb	r3, [r3, #12]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d125      	bne.n	8012704 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	2250      	movs	r2, #80	@ 0x50
 80126be:	5a9b      	ldrh	r3, [r3, r2]
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	001a      	movs	r2, r3
 80126c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	00db      	lsls	r3, r3, #3
 80126ca:	18d2      	adds	r2, r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	18d3      	adds	r3, r2, r3
 80126d2:	4abc      	ldr	r2, [pc, #752]	@ (80129c4 <PCD_EP_ISR_Handler+0x6d8>)
 80126d4:	4694      	mov	ip, r2
 80126d6:	4463      	add	r3, ip
 80126d8:	881a      	ldrh	r2, [r3, #0]
 80126da:	2450      	movs	r4, #80	@ 0x50
 80126dc:	193b      	adds	r3, r7, r4
 80126de:	0592      	lsls	r2, r2, #22
 80126e0:	0d92      	lsrs	r2, r2, #22
 80126e2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80126e4:	193b      	adds	r3, r7, r4
 80126e6:	881b      	ldrh	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d100      	bne.n	80126ee <PCD_EP_ISR_Handler+0x402>
 80126ec:	e08d      	b.n	801280a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6818      	ldr	r0, [r3, #0]
 80126f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126f4:	6959      	ldr	r1, [r3, #20]
 80126f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126f8:	88da      	ldrh	r2, [r3, #6]
 80126fa:	193b      	adds	r3, r7, r4
 80126fc:	881b      	ldrh	r3, [r3, #0]
 80126fe:	f006 ff60 	bl	80195c2 <USB_ReadPMA>
 8012702:	e082      	b.n	801280a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8012704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012706:	78db      	ldrb	r3, [r3, #3]
 8012708:	2b02      	cmp	r3, #2
 801270a:	d10c      	bne.n	8012726 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801270c:	2350      	movs	r3, #80	@ 0x50
 801270e:	18fc      	adds	r4, r7, r3
 8012710:	234a      	movs	r3, #74	@ 0x4a
 8012712:	18fb      	adds	r3, r7, r3
 8012714:	881a      	ldrh	r2, [r3, #0]
 8012716:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	0018      	movs	r0, r3
 801271c:	f000 f9ec 	bl	8012af8 <HAL_PCD_EP_DB_Receive>
 8012720:	0003      	movs	r3, r0
 8012722:	8023      	strh	r3, [r4, #0]
 8012724:	e071      	b.n	801280a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	001a      	movs	r2, r3
 801272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	18d3      	adds	r3, r2, r3
 8012734:	881b      	ldrh	r3, [r3, #0]
 8012736:	b29a      	uxth	r2, r3
 8012738:	2052      	movs	r0, #82	@ 0x52
 801273a:	183b      	adds	r3, r7, r0
 801273c:	49a2      	ldr	r1, [pc, #648]	@ (80129c8 <PCD_EP_ISR_Handler+0x6dc>)
 801273e:	400a      	ands	r2, r1
 8012740:	801a      	strh	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	001a      	movs	r2, r3
 8012748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	009b      	lsls	r3, r3, #2
 801274e:	18d3      	adds	r3, r2, r3
 8012750:	183a      	adds	r2, r7, r0
 8012752:	8812      	ldrh	r2, [r2, #0]
 8012754:	499d      	ldr	r1, [pc, #628]	@ (80129cc <PCD_EP_ISR_Handler+0x6e0>)
 8012756:	430a      	orrs	r2, r1
 8012758:	b292      	uxth	r2, r2
 801275a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	001a      	movs	r2, r3
 8012762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	18d3      	adds	r3, r2, r3
 801276a:	881b      	ldrh	r3, [r3, #0]
 801276c:	b29b      	uxth	r3, r3
 801276e:	001a      	movs	r2, r3
 8012770:	2380      	movs	r3, #128	@ 0x80
 8012772:	01db      	lsls	r3, r3, #7
 8012774:	4013      	ands	r3, r2
 8012776:	d024      	beq.n	80127c2 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2250      	movs	r2, #80	@ 0x50
 801277e:	5a9b      	ldrh	r3, [r3, r2]
 8012780:	b29b      	uxth	r3, r3
 8012782:	001a      	movs	r2, r3
 8012784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	00db      	lsls	r3, r3, #3
 801278a:	18d2      	adds	r2, r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	18d3      	adds	r3, r2, r3
 8012792:	4a8f      	ldr	r2, [pc, #572]	@ (80129d0 <PCD_EP_ISR_Handler+0x6e4>)
 8012794:	4694      	mov	ip, r2
 8012796:	4463      	add	r3, ip
 8012798:	881a      	ldrh	r2, [r3, #0]
 801279a:	2450      	movs	r4, #80	@ 0x50
 801279c:	193b      	adds	r3, r7, r4
 801279e:	0592      	lsls	r2, r2, #22
 80127a0:	0d92      	lsrs	r2, r2, #22
 80127a2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80127a4:	193b      	adds	r3, r7, r4
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d02e      	beq.n	801280a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6818      	ldr	r0, [r3, #0]
 80127b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127b2:	6959      	ldr	r1, [r3, #20]
 80127b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127b6:	891a      	ldrh	r2, [r3, #8]
 80127b8:	193b      	adds	r3, r7, r4
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	f006 ff01 	bl	80195c2 <USB_ReadPMA>
 80127c0:	e023      	b.n	801280a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2250      	movs	r2, #80	@ 0x50
 80127c8:	5a9b      	ldrh	r3, [r3, r2]
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	001a      	movs	r2, r3
 80127ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	00db      	lsls	r3, r3, #3
 80127d4:	18d2      	adds	r2, r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	18d3      	adds	r3, r2, r3
 80127dc:	4a79      	ldr	r2, [pc, #484]	@ (80129c4 <PCD_EP_ISR_Handler+0x6d8>)
 80127de:	4694      	mov	ip, r2
 80127e0:	4463      	add	r3, ip
 80127e2:	881a      	ldrh	r2, [r3, #0]
 80127e4:	2450      	movs	r4, #80	@ 0x50
 80127e6:	193b      	adds	r3, r7, r4
 80127e8:	0592      	lsls	r2, r2, #22
 80127ea:	0d92      	lsrs	r2, r2, #22
 80127ec:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80127ee:	193b      	adds	r3, r7, r4
 80127f0:	881b      	ldrh	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d009      	beq.n	801280a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6818      	ldr	r0, [r3, #0]
 80127fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127fc:	6959      	ldr	r1, [r3, #20]
 80127fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012800:	895a      	ldrh	r2, [r3, #10]
 8012802:	193b      	adds	r3, r7, r4
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	f006 fedc 	bl	80195c2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801280a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801280c:	69da      	ldr	r2, [r3, #28]
 801280e:	2150      	movs	r1, #80	@ 0x50
 8012810:	187b      	adds	r3, r7, r1
 8012812:	881b      	ldrh	r3, [r3, #0]
 8012814:	18d2      	adds	r2, r2, r3
 8012816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012818:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801281a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801281c:	695a      	ldr	r2, [r3, #20]
 801281e:	187b      	adds	r3, r7, r1
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	18d2      	adds	r2, r2, r3
 8012824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012826:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8012828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801282a:	699b      	ldr	r3, [r3, #24]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d005      	beq.n	801283c <PCD_EP_ISR_Handler+0x550>
 8012830:	187b      	adds	r3, r7, r1
 8012832:	881a      	ldrh	r2, [r3, #0]
 8012834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012836:	691b      	ldr	r3, [r3, #16]
 8012838:	429a      	cmp	r2, r3
 801283a:	d207      	bcs.n	801284c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801283c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801283e:	781a      	ldrb	r2, [r3, #0]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	0011      	movs	r1, r2
 8012844:	0018      	movs	r0, r3
 8012846:	f008 fed6 	bl	801b5f6 <HAL_PCD_DataOutStageCallback>
 801284a:	e006      	b.n	801285a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012852:	0011      	movs	r1, r2
 8012854:	0018      	movs	r0, r3
 8012856:	f005 fbf9 	bl	801804c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801285a:	244a      	movs	r4, #74	@ 0x4a
 801285c:	193b      	adds	r3, r7, r4
 801285e:	881b      	ldrh	r3, [r3, #0]
 8012860:	2280      	movs	r2, #128	@ 0x80
 8012862:	4013      	ands	r3, r2
 8012864:	d100      	bne.n	8012868 <PCD_EP_ISR_Handler+0x57c>
 8012866:	e133      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8012868:	204d      	movs	r0, #77	@ 0x4d
 801286a:	183b      	adds	r3, r7, r0
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	1c5a      	adds	r2, r3, #1
 8012870:	0013      	movs	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	189b      	adds	r3, r3, r2
 8012876:	00db      	lsls	r3, r3, #3
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	18d3      	adds	r3, r2, r3
 801287c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	001a      	movs	r2, r3
 8012884:	183b      	adds	r3, r7, r0
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	18d3      	adds	r3, r2, r3
 801288c:	881b      	ldrh	r3, [r3, #0]
 801288e:	b29a      	uxth	r2, r3
 8012890:	2542      	movs	r5, #66	@ 0x42
 8012892:	197b      	adds	r3, r7, r5
 8012894:	494f      	ldr	r1, [pc, #316]	@ (80129d4 <PCD_EP_ISR_Handler+0x6e8>)
 8012896:	400a      	ands	r2, r1
 8012898:	801a      	strh	r2, [r3, #0]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	001a      	movs	r2, r3
 80128a0:	183b      	adds	r3, r7, r0
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	18d3      	adds	r3, r2, r3
 80128a8:	197a      	adds	r2, r7, r5
 80128aa:	8812      	ldrh	r2, [r2, #0]
 80128ac:	494a      	ldr	r1, [pc, #296]	@ (80129d8 <PCD_EP_ISR_Handler+0x6ec>)
 80128ae:	430a      	orrs	r2, r1
 80128b0:	b292      	uxth	r2, r2
 80128b2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80128b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128b6:	78db      	ldrb	r3, [r3, #3]
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d000      	beq.n	80128be <PCD_EP_ISR_Handler+0x5d2>
 80128bc:	e0af      	b.n	8012a1e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80128be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128c0:	2200      	movs	r2, #0
 80128c2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80128c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128c6:	7b1b      	ldrb	r3, [r3, #12]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d100      	bne.n	80128ce <PCD_EP_ISR_Handler+0x5e2>
 80128cc:	e09f      	b.n	8012a0e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80128ce:	193b      	adds	r3, r7, r4
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	2240      	movs	r2, #64	@ 0x40
 80128d4:	4013      	ands	r3, r2
 80128d6:	d046      	beq.n	8012966 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80128d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128da:	785b      	ldrb	r3, [r3, #1]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d125      	bne.n	801292c <PCD_EP_ISR_Handler+0x640>
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	2250      	movs	r2, #80	@ 0x50
 80128ec:	5a9b      	ldrh	r3, [r3, r2]
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	001a      	movs	r2, r3
 80128f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f4:	189b      	adds	r3, r3, r2
 80128f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80128f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	00da      	lsls	r2, r3, #3
 80128fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012900:	18d3      	adds	r3, r2, r3
 8012902:	4a33      	ldr	r2, [pc, #204]	@ (80129d0 <PCD_EP_ISR_Handler+0x6e4>)
 8012904:	4694      	mov	ip, r2
 8012906:	4463      	add	r3, ip
 8012908:	623b      	str	r3, [r7, #32]
 801290a:	6a3b      	ldr	r3, [r7, #32]
 801290c:	881b      	ldrh	r3, [r3, #0]
 801290e:	b29b      	uxth	r3, r3
 8012910:	059b      	lsls	r3, r3, #22
 8012912:	0d9b      	lsrs	r3, r3, #22
 8012914:	b29a      	uxth	r2, r3
 8012916:	6a3b      	ldr	r3, [r7, #32]
 8012918:	801a      	strh	r2, [r3, #0]
 801291a:	6a3b      	ldr	r3, [r7, #32]
 801291c:	881b      	ldrh	r3, [r3, #0]
 801291e:	b29b      	uxth	r3, r3
 8012920:	4a2d      	ldr	r2, [pc, #180]	@ (80129d8 <PCD_EP_ISR_Handler+0x6ec>)
 8012922:	4313      	orrs	r3, r2
 8012924:	b29a      	uxth	r2, r3
 8012926:	6a3b      	ldr	r3, [r7, #32]
 8012928:	801a      	strh	r2, [r3, #0]
 801292a:	e070      	b.n	8012a0e <PCD_EP_ISR_Handler+0x722>
 801292c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801292e:	785b      	ldrb	r3, [r3, #1]
 8012930:	2b01      	cmp	r3, #1
 8012932:	d16c      	bne.n	8012a0e <PCD_EP_ISR_Handler+0x722>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	2250      	movs	r2, #80	@ 0x50
 8012940:	5a9b      	ldrh	r3, [r3, r2]
 8012942:	b29b      	uxth	r3, r3
 8012944:	001a      	movs	r2, r3
 8012946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012948:	189b      	adds	r3, r3, r2
 801294a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801294c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	00da      	lsls	r2, r3, #3
 8012952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012954:	18d3      	adds	r3, r2, r3
 8012956:	4a1e      	ldr	r2, [pc, #120]	@ (80129d0 <PCD_EP_ISR_Handler+0x6e4>)
 8012958:	4694      	mov	ip, r2
 801295a:	4463      	add	r3, ip
 801295c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012960:	2200      	movs	r2, #0
 8012962:	801a      	strh	r2, [r3, #0]
 8012964:	e053      	b.n	8012a0e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801296c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801296e:	785b      	ldrb	r3, [r3, #1]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d133      	bne.n	80129dc <PCD_EP_ISR_Handler+0x6f0>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	637b      	str	r3, [r7, #52]	@ 0x34
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2250      	movs	r2, #80	@ 0x50
 8012980:	5a9b      	ldrh	r3, [r3, r2]
 8012982:	b29b      	uxth	r3, r3
 8012984:	001a      	movs	r2, r3
 8012986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012988:	189b      	adds	r3, r3, r2
 801298a:	637b      	str	r3, [r7, #52]	@ 0x34
 801298c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	00da      	lsls	r2, r3, #3
 8012992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012994:	18d3      	adds	r3, r2, r3
 8012996:	4a0b      	ldr	r2, [pc, #44]	@ (80129c4 <PCD_EP_ISR_Handler+0x6d8>)
 8012998:	4694      	mov	ip, r2
 801299a:	4463      	add	r3, ip
 801299c:	633b      	str	r3, [r7, #48]	@ 0x30
 801299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	059b      	lsls	r3, r3, #22
 80129a6:	0d9b      	lsrs	r3, r3, #22
 80129a8:	b29a      	uxth	r2, r3
 80129aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ac:	801a      	strh	r2, [r3, #0]
 80129ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129b0:	881b      	ldrh	r3, [r3, #0]
 80129b2:	b29b      	uxth	r3, r3
 80129b4:	4a08      	ldr	r2, [pc, #32]	@ (80129d8 <PCD_EP_ISR_Handler+0x6ec>)
 80129b6:	4313      	orrs	r3, r2
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129bc:	801a      	strh	r2, [r3, #0]
 80129be:	e026      	b.n	8012a0e <PCD_EP_ISR_Handler+0x722>
 80129c0:	00000f8f 	.word	0x00000f8f
 80129c4:	00000406 	.word	0x00000406
 80129c8:	ffff8f8f 	.word	0xffff8f8f
 80129cc:	ffff80c0 	.word	0xffff80c0
 80129d0:	00000402 	.word	0x00000402
 80129d4:	ffff8f0f 	.word	0xffff8f0f
 80129d8:	ffff8000 	.word	0xffff8000
 80129dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129de:	785b      	ldrb	r3, [r3, #1]
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d114      	bne.n	8012a0e <PCD_EP_ISR_Handler+0x722>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2250      	movs	r2, #80	@ 0x50
 80129ea:	5a9b      	ldrh	r3, [r3, r2]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	001a      	movs	r2, r3
 80129f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129f2:	189b      	adds	r3, r3, r2
 80129f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129f8:	781b      	ldrb	r3, [r3, #0]
 80129fa:	00da      	lsls	r2, r3, #3
 80129fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129fe:	18d3      	adds	r3, r2, r3
 8012a00:	4a3b      	ldr	r2, [pc, #236]	@ (8012af0 <PCD_EP_ISR_Handler+0x804>)
 8012a02:	4694      	mov	ip, r2
 8012a04:	4463      	add	r3, ip
 8012a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a10:	781a      	ldrb	r2, [r3, #0]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	0011      	movs	r1, r2
 8012a16:	0018      	movs	r0, r3
 8012a18:	f008 fe0e 	bl	801b638 <HAL_PCD_DataInStageCallback>
 8012a1c:	e058      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8012a1e:	234a      	movs	r3, #74	@ 0x4a
 8012a20:	18fb      	adds	r3, r7, r3
 8012a22:	881a      	ldrh	r2, [r3, #0]
 8012a24:	2380      	movs	r3, #128	@ 0x80
 8012a26:	005b      	lsls	r3, r3, #1
 8012a28:	4013      	ands	r3, r2
 8012a2a:	d149      	bne.n	8012ac0 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2250      	movs	r2, #80	@ 0x50
 8012a32:	5a9b      	ldrh	r3, [r3, r2]
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	001a      	movs	r2, r3
 8012a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	00db      	lsls	r3, r3, #3
 8012a3e:	18d2      	adds	r2, r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	18d3      	adds	r3, r2, r3
 8012a46:	4a2b      	ldr	r2, [pc, #172]	@ (8012af4 <PCD_EP_ISR_Handler+0x808>)
 8012a48:	4694      	mov	ip, r2
 8012a4a:	4463      	add	r3, ip
 8012a4c:	881a      	ldrh	r2, [r3, #0]
 8012a4e:	2140      	movs	r1, #64	@ 0x40
 8012a50:	187b      	adds	r3, r7, r1
 8012a52:	0592      	lsls	r2, r2, #22
 8012a54:	0d92      	lsrs	r2, r2, #22
 8012a56:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8012a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a5a:	699a      	ldr	r2, [r3, #24]
 8012a5c:	187b      	adds	r3, r7, r1
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d907      	bls.n	8012a74 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8012a64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a66:	699a      	ldr	r2, [r3, #24]
 8012a68:	187b      	adds	r3, r7, r1
 8012a6a:	881b      	ldrh	r3, [r3, #0]
 8012a6c:	1ad2      	subs	r2, r2, r3
 8012a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a70:	619a      	str	r2, [r3, #24]
 8012a72:	e002      	b.n	8012a7a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8012a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a76:	2200      	movs	r2, #0
 8012a78:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8012a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a7c:	699b      	ldr	r3, [r3, #24]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d107      	bne.n	8012a92 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a84:	781a      	ldrb	r2, [r3, #0]
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	0011      	movs	r1, r2
 8012a8a:	0018      	movs	r0, r3
 8012a8c:	f008 fdd4 	bl	801b638 <HAL_PCD_DataInStageCallback>
 8012a90:	e01e      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8012a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a94:	695a      	ldr	r2, [r3, #20]
 8012a96:	2140      	movs	r1, #64	@ 0x40
 8012a98:	187b      	adds	r3, r7, r1
 8012a9a:	881b      	ldrh	r3, [r3, #0]
 8012a9c:	18d2      	adds	r2, r2, r3
 8012a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aa0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8012aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aa4:	69da      	ldr	r2, [r3, #28]
 8012aa6:	187b      	adds	r3, r7, r1
 8012aa8:	881b      	ldrh	r3, [r3, #0]
 8012aaa:	18d2      	adds	r2, r2, r3
 8012aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012ab6:	0011      	movs	r1, r2
 8012ab8:	0018      	movs	r0, r3
 8012aba:	f005 fac7 	bl	801804c <USB_EPStartXfer>
 8012abe:	e007      	b.n	8012ad0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8012ac0:	234a      	movs	r3, #74	@ 0x4a
 8012ac2:	18fb      	adds	r3, r7, r3
 8012ac4:	881a      	ldrh	r2, [r3, #0]
 8012ac6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	0018      	movs	r0, r3
 8012acc:	f000 f930 	bl	8012d30 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2244      	movs	r2, #68	@ 0x44
 8012ad6:	5a9b      	ldrh	r3, [r3, r2]
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	b21b      	sxth	r3, r3
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	da01      	bge.n	8012ae4 <PCD_EP_ISR_Handler+0x7f8>
 8012ae0:	f7ff fc0a 	bl	80122f8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8012ae4:	2300      	movs	r3, #0
}
 8012ae6:	0018      	movs	r0, r3
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	b016      	add	sp, #88	@ 0x58
 8012aec:	bdb0      	pop	{r4, r5, r7, pc}
 8012aee:	46c0      	nop			@ (mov r8, r8)
 8012af0:	00000406 	.word	0x00000406
 8012af4:	00000402 	.word	0x00000402

08012af8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8012af8:	b590      	push	{r4, r7, lr}
 8012afa:	b089      	sub	sp, #36	@ 0x24
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	60f8      	str	r0, [r7, #12]
 8012b00:	60b9      	str	r1, [r7, #8]
 8012b02:	1dbb      	adds	r3, r7, #6
 8012b04:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012b06:	1dbb      	adds	r3, r7, #6
 8012b08:	881a      	ldrh	r2, [r3, #0]
 8012b0a:	2380      	movs	r3, #128	@ 0x80
 8012b0c:	01db      	lsls	r3, r3, #7
 8012b0e:	4013      	ands	r3, r2
 8012b10:	d100      	bne.n	8012b14 <HAL_PCD_EP_DB_Receive+0x1c>
 8012b12:	e07d      	b.n	8012c10 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2250      	movs	r2, #80	@ 0x50
 8012b1a:	5a9b      	ldrh	r3, [r3, r2]
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	001a      	movs	r2, r3
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	00db      	lsls	r3, r3, #3
 8012b26:	18d2      	adds	r2, r2, r3
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	18d3      	adds	r3, r2, r3
 8012b2e:	4a7a      	ldr	r2, [pc, #488]	@ (8012d18 <HAL_PCD_EP_DB_Receive+0x220>)
 8012b30:	4694      	mov	ip, r2
 8012b32:	4463      	add	r3, ip
 8012b34:	881a      	ldrh	r2, [r3, #0]
 8012b36:	211a      	movs	r1, #26
 8012b38:	187b      	adds	r3, r7, r1
 8012b3a:	0592      	lsls	r2, r2, #22
 8012b3c:	0d92      	lsrs	r2, r2, #22
 8012b3e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	699a      	ldr	r2, [r3, #24]
 8012b44:	187b      	adds	r3, r7, r1
 8012b46:	881b      	ldrh	r3, [r3, #0]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d307      	bcc.n	8012b5c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	699a      	ldr	r2, [r3, #24]
 8012b50:	187b      	adds	r3, r7, r1
 8012b52:	881b      	ldrh	r3, [r3, #0]
 8012b54:	1ad2      	subs	r2, r2, r3
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	619a      	str	r2, [r3, #24]
 8012b5a:	e002      	b.n	8012b62 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	699b      	ldr	r3, [r3, #24]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d121      	bne.n	8012bae <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	001a      	movs	r2, r3
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	18d3      	adds	r3, r2, r3
 8012b78:	881b      	ldrh	r3, [r3, #0]
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	2018      	movs	r0, #24
 8012b7e:	183b      	adds	r3, r7, r0
 8012b80:	4966      	ldr	r1, [pc, #408]	@ (8012d1c <HAL_PCD_EP_DB_Receive+0x224>)
 8012b82:	400a      	ands	r2, r1
 8012b84:	801a      	strh	r2, [r3, #0]
 8012b86:	183b      	adds	r3, r7, r0
 8012b88:	183a      	adds	r2, r7, r0
 8012b8a:	8812      	ldrh	r2, [r2, #0]
 8012b8c:	2180      	movs	r1, #128	@ 0x80
 8012b8e:	0189      	lsls	r1, r1, #6
 8012b90:	404a      	eors	r2, r1
 8012b92:	801a      	strh	r2, [r3, #0]
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	001a      	movs	r2, r3
 8012b9a:	68bb      	ldr	r3, [r7, #8]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	009b      	lsls	r3, r3, #2
 8012ba0:	18d3      	adds	r3, r2, r3
 8012ba2:	183a      	adds	r2, r7, r0
 8012ba4:	8812      	ldrh	r2, [r2, #0]
 8012ba6:	495e      	ldr	r1, [pc, #376]	@ (8012d20 <HAL_PCD_EP_DB_Receive+0x228>)
 8012ba8:	430a      	orrs	r2, r1
 8012baa:	b292      	uxth	r2, r2
 8012bac:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012bae:	1dbb      	adds	r3, r7, #6
 8012bb0:	881b      	ldrh	r3, [r3, #0]
 8012bb2:	2240      	movs	r2, #64	@ 0x40
 8012bb4:	4013      	ands	r3, r2
 8012bb6:	d01a      	beq.n	8012bee <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	001a      	movs	r2, r3
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	009b      	lsls	r3, r3, #2
 8012bc4:	18d3      	adds	r3, r2, r3
 8012bc6:	881b      	ldrh	r3, [r3, #0]
 8012bc8:	b29a      	uxth	r2, r3
 8012bca:	2016      	movs	r0, #22
 8012bcc:	183b      	adds	r3, r7, r0
 8012bce:	4955      	ldr	r1, [pc, #340]	@ (8012d24 <HAL_PCD_EP_DB_Receive+0x22c>)
 8012bd0:	400a      	ands	r2, r1
 8012bd2:	801a      	strh	r2, [r3, #0]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	001a      	movs	r2, r3
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	18d3      	adds	r3, r2, r3
 8012be2:	183a      	adds	r2, r7, r0
 8012be4:	8812      	ldrh	r2, [r2, #0]
 8012be6:	4950      	ldr	r1, [pc, #320]	@ (8012d28 <HAL_PCD_EP_DB_Receive+0x230>)
 8012be8:	430a      	orrs	r2, r1
 8012bea:	b292      	uxth	r2, r2
 8012bec:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8012bee:	241a      	movs	r4, #26
 8012bf0:	193b      	adds	r3, r7, r4
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d100      	bne.n	8012bfa <HAL_PCD_EP_DB_Receive+0x102>
 8012bf8:	e086      	b.n	8012d08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	6818      	ldr	r0, [r3, #0]
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	6959      	ldr	r1, [r3, #20]
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	891a      	ldrh	r2, [r3, #8]
 8012c06:	193b      	adds	r3, r7, r4
 8012c08:	881b      	ldrh	r3, [r3, #0]
 8012c0a:	f006 fcda 	bl	80195c2 <USB_ReadPMA>
 8012c0e:	e07b      	b.n	8012d08 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	2250      	movs	r2, #80	@ 0x50
 8012c16:	5a9b      	ldrh	r3, [r3, r2]
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	001a      	movs	r2, r3
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	00db      	lsls	r3, r3, #3
 8012c22:	18d2      	adds	r2, r2, r3
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	18d3      	adds	r3, r2, r3
 8012c2a:	4a40      	ldr	r2, [pc, #256]	@ (8012d2c <HAL_PCD_EP_DB_Receive+0x234>)
 8012c2c:	4694      	mov	ip, r2
 8012c2e:	4463      	add	r3, ip
 8012c30:	881a      	ldrh	r2, [r3, #0]
 8012c32:	211a      	movs	r1, #26
 8012c34:	187b      	adds	r3, r7, r1
 8012c36:	0592      	lsls	r2, r2, #22
 8012c38:	0d92      	lsrs	r2, r2, #22
 8012c3a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	699a      	ldr	r2, [r3, #24]
 8012c40:	187b      	adds	r3, r7, r1
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d307      	bcc.n	8012c58 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	699a      	ldr	r2, [r3, #24]
 8012c4c:	187b      	adds	r3, r7, r1
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	1ad2      	subs	r2, r2, r3
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	619a      	str	r2, [r3, #24]
 8012c56:	e002      	b.n	8012c5e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	699b      	ldr	r3, [r3, #24]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d121      	bne.n	8012caa <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	001a      	movs	r2, r3
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	009b      	lsls	r3, r3, #2
 8012c72:	18d3      	adds	r3, r2, r3
 8012c74:	881b      	ldrh	r3, [r3, #0]
 8012c76:	b29a      	uxth	r2, r3
 8012c78:	201e      	movs	r0, #30
 8012c7a:	183b      	adds	r3, r7, r0
 8012c7c:	4927      	ldr	r1, [pc, #156]	@ (8012d1c <HAL_PCD_EP_DB_Receive+0x224>)
 8012c7e:	400a      	ands	r2, r1
 8012c80:	801a      	strh	r2, [r3, #0]
 8012c82:	183b      	adds	r3, r7, r0
 8012c84:	183a      	adds	r2, r7, r0
 8012c86:	8812      	ldrh	r2, [r2, #0]
 8012c88:	2180      	movs	r1, #128	@ 0x80
 8012c8a:	0189      	lsls	r1, r1, #6
 8012c8c:	404a      	eors	r2, r1
 8012c8e:	801a      	strh	r2, [r3, #0]
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	001a      	movs	r2, r3
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	18d3      	adds	r3, r2, r3
 8012c9e:	183a      	adds	r2, r7, r0
 8012ca0:	8812      	ldrh	r2, [r2, #0]
 8012ca2:	491f      	ldr	r1, [pc, #124]	@ (8012d20 <HAL_PCD_EP_DB_Receive+0x228>)
 8012ca4:	430a      	orrs	r2, r1
 8012ca6:	b292      	uxth	r2, r2
 8012ca8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8012caa:	1dbb      	adds	r3, r7, #6
 8012cac:	881b      	ldrh	r3, [r3, #0]
 8012cae:	2240      	movs	r2, #64	@ 0x40
 8012cb0:	4013      	ands	r3, r2
 8012cb2:	d11a      	bne.n	8012cea <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	001a      	movs	r2, r3
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	009b      	lsls	r3, r3, #2
 8012cc0:	18d3      	adds	r3, r2, r3
 8012cc2:	881b      	ldrh	r3, [r3, #0]
 8012cc4:	b29a      	uxth	r2, r3
 8012cc6:	201c      	movs	r0, #28
 8012cc8:	183b      	adds	r3, r7, r0
 8012cca:	4916      	ldr	r1, [pc, #88]	@ (8012d24 <HAL_PCD_EP_DB_Receive+0x22c>)
 8012ccc:	400a      	ands	r2, r1
 8012cce:	801a      	strh	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	001a      	movs	r2, r3
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	18d3      	adds	r3, r2, r3
 8012cde:	183a      	adds	r2, r7, r0
 8012ce0:	8812      	ldrh	r2, [r2, #0]
 8012ce2:	4911      	ldr	r1, [pc, #68]	@ (8012d28 <HAL_PCD_EP_DB_Receive+0x230>)
 8012ce4:	430a      	orrs	r2, r1
 8012ce6:	b292      	uxth	r2, r2
 8012ce8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8012cea:	241a      	movs	r4, #26
 8012cec:	193b      	adds	r3, r7, r4
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d009      	beq.n	8012d08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	6818      	ldr	r0, [r3, #0]
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	6959      	ldr	r1, [r3, #20]
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	895a      	ldrh	r2, [r3, #10]
 8012d00:	193b      	adds	r3, r7, r4
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	f006 fc5d 	bl	80195c2 <USB_ReadPMA>
    }
  }

  return count;
 8012d08:	231a      	movs	r3, #26
 8012d0a:	18fb      	adds	r3, r7, r3
 8012d0c:	881b      	ldrh	r3, [r3, #0]
}
 8012d0e:	0018      	movs	r0, r3
 8012d10:	46bd      	mov	sp, r7
 8012d12:	b009      	add	sp, #36	@ 0x24
 8012d14:	bd90      	pop	{r4, r7, pc}
 8012d16:	46c0      	nop			@ (mov r8, r8)
 8012d18:	00000402 	.word	0x00000402
 8012d1c:	ffffbf8f 	.word	0xffffbf8f
 8012d20:	ffff8080 	.word	0xffff8080
 8012d24:	ffff8f8f 	.word	0xffff8f8f
 8012d28:	ffff80c0 	.word	0xffff80c0
 8012d2c:	00000406 	.word	0x00000406

08012d30 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b0a4      	sub	sp, #144	@ 0x90
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	60b9      	str	r1, [r7, #8]
 8012d3a:	1dbb      	adds	r3, r7, #6
 8012d3c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012d3e:	1dbb      	adds	r3, r7, #6
 8012d40:	881b      	ldrh	r3, [r3, #0]
 8012d42:	2240      	movs	r2, #64	@ 0x40
 8012d44:	4013      	ands	r3, r2
 8012d46:	d100      	bne.n	8012d4a <HAL_PCD_EP_DB_Transmit+0x1a>
 8012d48:	e1e4      	b.n	8013114 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2250      	movs	r2, #80	@ 0x50
 8012d50:	5a9b      	ldrh	r3, [r3, r2]
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	001a      	movs	r2, r3
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	00db      	lsls	r3, r3, #3
 8012d5c:	18d2      	adds	r2, r2, r3
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	18d3      	adds	r3, r2, r3
 8012d64:	4ad0      	ldr	r2, [pc, #832]	@ (80130a8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8012d66:	4694      	mov	ip, r2
 8012d68:	4463      	add	r3, ip
 8012d6a:	881a      	ldrh	r2, [r3, #0]
 8012d6c:	2186      	movs	r1, #134	@ 0x86
 8012d6e:	187b      	adds	r3, r7, r1
 8012d70:	0592      	lsls	r2, r2, #22
 8012d72:	0d92      	lsrs	r2, r2, #22
 8012d74:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	699a      	ldr	r2, [r3, #24]
 8012d7a:	187b      	adds	r3, r7, r1
 8012d7c:	881b      	ldrh	r3, [r3, #0]
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d907      	bls.n	8012d92 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	699a      	ldr	r2, [r3, #24]
 8012d86:	187b      	adds	r3, r7, r1
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	1ad2      	subs	r2, r2, r3
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	619a      	str	r2, [r3, #24]
 8012d90:	e002      	b.n	8012d98 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	2200      	movs	r2, #0
 8012d96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	699b      	ldr	r3, [r3, #24]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d000      	beq.n	8012da2 <HAL_PCD_EP_DB_Transmit+0x72>
 8012da0:	e0b5      	b.n	8012f0e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	785b      	ldrb	r3, [r3, #1]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d125      	bne.n	8012df6 <HAL_PCD_EP_DB_Transmit+0xc6>
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	2250      	movs	r2, #80	@ 0x50
 8012db6:	5a9b      	ldrh	r3, [r3, r2]
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	001a      	movs	r2, r3
 8012dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dbe:	189b      	adds	r3, r3, r2
 8012dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	781b      	ldrb	r3, [r3, #0]
 8012dc6:	00da      	lsls	r2, r3, #3
 8012dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dca:	18d3      	adds	r3, r2, r3
 8012dcc:	4ab6      	ldr	r2, [pc, #728]	@ (80130a8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8012dce:	4694      	mov	ip, r2
 8012dd0:	4463      	add	r3, ip
 8012dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dd6:	881b      	ldrh	r3, [r3, #0]
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	059b      	lsls	r3, r3, #22
 8012ddc:	0d9b      	lsrs	r3, r3, #22
 8012dde:	b29a      	uxth	r2, r3
 8012de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012de2:	801a      	strh	r2, [r3, #0]
 8012de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012de6:	881b      	ldrh	r3, [r3, #0]
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	4ab0      	ldr	r2, [pc, #704]	@ (80130ac <HAL_PCD_EP_DB_Transmit+0x37c>)
 8012dec:	4313      	orrs	r3, r2
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012df2:	801a      	strh	r2, [r3, #0]
 8012df4:	e01b      	b.n	8012e2e <HAL_PCD_EP_DB_Transmit+0xfe>
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	785b      	ldrb	r3, [r3, #1]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d117      	bne.n	8012e2e <HAL_PCD_EP_DB_Transmit+0xfe>
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	2250      	movs	r2, #80	@ 0x50
 8012e0a:	5a9b      	ldrh	r3, [r3, r2]
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	001a      	movs	r2, r3
 8012e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e12:	189b      	adds	r3, r3, r2
 8012e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	00da      	lsls	r2, r3, #3
 8012e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e1e:	18d3      	adds	r3, r2, r3
 8012e20:	4aa1      	ldr	r2, [pc, #644]	@ (80130a8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8012e22:	4694      	mov	ip, r2
 8012e24:	4463      	add	r3, ip
 8012e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	785b      	ldrb	r3, [r3, #1]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d125      	bne.n	8012e88 <HAL_PCD_EP_DB_Transmit+0x158>
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	61fb      	str	r3, [r7, #28]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2250      	movs	r2, #80	@ 0x50
 8012e48:	5a9b      	ldrh	r3, [r3, r2]
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	001a      	movs	r2, r3
 8012e4e:	69fb      	ldr	r3, [r7, #28]
 8012e50:	189b      	adds	r3, r3, r2
 8012e52:	61fb      	str	r3, [r7, #28]
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	00da      	lsls	r2, r3, #3
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	18d3      	adds	r3, r2, r3
 8012e5e:	4a94      	ldr	r2, [pc, #592]	@ (80130b0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8012e60:	4694      	mov	ip, r2
 8012e62:	4463      	add	r3, ip
 8012e64:	61bb      	str	r3, [r7, #24]
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	881b      	ldrh	r3, [r3, #0]
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	059b      	lsls	r3, r3, #22
 8012e6e:	0d9b      	lsrs	r3, r3, #22
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	801a      	strh	r2, [r3, #0]
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	881b      	ldrh	r3, [r3, #0]
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	4a8b      	ldr	r2, [pc, #556]	@ (80130ac <HAL_PCD_EP_DB_Transmit+0x37c>)
 8012e7e:	4313      	orrs	r3, r2
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	801a      	strh	r2, [r3, #0]
 8012e86:	e018      	b.n	8012eba <HAL_PCD_EP_DB_Transmit+0x18a>
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	785b      	ldrb	r3, [r3, #1]
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	d114      	bne.n	8012eba <HAL_PCD_EP_DB_Transmit+0x18a>
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2250      	movs	r2, #80	@ 0x50
 8012e96:	5a9b      	ldrh	r3, [r3, r2]
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	001a      	movs	r2, r3
 8012e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e9e:	189b      	adds	r3, r3, r2
 8012ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	00da      	lsls	r2, r3, #3
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eaa:	18d3      	adds	r3, r2, r3
 8012eac:	4a80      	ldr	r2, [pc, #512]	@ (80130b0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8012eae:	4694      	mov	ip, r2
 8012eb0:	4463      	add	r3, ip
 8012eb2:	623b      	str	r3, [r7, #32]
 8012eb4:	6a3b      	ldr	r3, [r7, #32]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	781a      	ldrb	r2, [r3, #0]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	0011      	movs	r1, r2
 8012ec2:	0018      	movs	r0, r3
 8012ec4:	f008 fbb8 	bl	801b638 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012ec8:	1dbb      	adds	r3, r7, #6
 8012eca:	881a      	ldrh	r2, [r3, #0]
 8012ecc:	2380      	movs	r3, #128	@ 0x80
 8012ece:	01db      	lsls	r3, r3, #7
 8012ed0:	4013      	ands	r3, r2
 8012ed2:	d100      	bne.n	8012ed6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8012ed4:	e309      	b.n	80134ea <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	001a      	movs	r2, r3
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	009b      	lsls	r3, r3, #2
 8012ee2:	18d3      	adds	r3, r2, r3
 8012ee4:	881b      	ldrh	r3, [r3, #0]
 8012ee6:	b29a      	uxth	r2, r3
 8012ee8:	2016      	movs	r0, #22
 8012eea:	183b      	adds	r3, r7, r0
 8012eec:	4971      	ldr	r1, [pc, #452]	@ (80130b4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8012eee:	400a      	ands	r2, r1
 8012ef0:	801a      	strh	r2, [r3, #0]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	001a      	movs	r2, r3
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	009b      	lsls	r3, r3, #2
 8012efe:	18d3      	adds	r3, r2, r3
 8012f00:	183a      	adds	r2, r7, r0
 8012f02:	8812      	ldrh	r2, [r2, #0]
 8012f04:	496c      	ldr	r1, [pc, #432]	@ (80130b8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8012f06:	430a      	orrs	r2, r1
 8012f08:	b292      	uxth	r2, r2
 8012f0a:	801a      	strh	r2, [r3, #0]
 8012f0c:	e2ed      	b.n	80134ea <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012f0e:	1dbb      	adds	r3, r7, #6
 8012f10:	881a      	ldrh	r2, [r3, #0]
 8012f12:	2380      	movs	r3, #128	@ 0x80
 8012f14:	01db      	lsls	r3, r3, #7
 8012f16:	4013      	ands	r3, r2
 8012f18:	d01a      	beq.n	8012f50 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	001a      	movs	r2, r3
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	781b      	ldrb	r3, [r3, #0]
 8012f24:	009b      	lsls	r3, r3, #2
 8012f26:	18d3      	adds	r3, r2, r3
 8012f28:	881b      	ldrh	r3, [r3, #0]
 8012f2a:	b29a      	uxth	r2, r3
 8012f2c:	208a      	movs	r0, #138	@ 0x8a
 8012f2e:	183b      	adds	r3, r7, r0
 8012f30:	4960      	ldr	r1, [pc, #384]	@ (80130b4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8012f32:	400a      	ands	r2, r1
 8012f34:	801a      	strh	r2, [r3, #0]
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	001a      	movs	r2, r3
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	009b      	lsls	r3, r3, #2
 8012f42:	18d3      	adds	r3, r2, r3
 8012f44:	183a      	adds	r2, r7, r0
 8012f46:	8812      	ldrh	r2, [r2, #0]
 8012f48:	495b      	ldr	r1, [pc, #364]	@ (80130b8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8012f4a:	430a      	orrs	r2, r1
 8012f4c:	b292      	uxth	r2, r2
 8012f4e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	2224      	movs	r2, #36	@ 0x24
 8012f54:	5c9b      	ldrb	r3, [r3, r2]
 8012f56:	2b01      	cmp	r3, #1
 8012f58:	d000      	beq.n	8012f5c <HAL_PCD_EP_DB_Transmit+0x22c>
 8012f5a:	e2c6      	b.n	80134ea <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	695a      	ldr	r2, [r3, #20]
 8012f60:	2186      	movs	r1, #134	@ 0x86
 8012f62:	187b      	adds	r3, r7, r1
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	18d2      	adds	r2, r2, r3
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	69da      	ldr	r2, [r3, #28]
 8012f70:	187b      	adds	r3, r7, r1
 8012f72:	881b      	ldrh	r3, [r3, #0]
 8012f74:	18d2      	adds	r2, r2, r3
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	6a1a      	ldr	r2, [r3, #32]
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d30c      	bcc.n	8012fa0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	691b      	ldr	r3, [r3, #16]
 8012f8a:	218c      	movs	r1, #140	@ 0x8c
 8012f8c:	187a      	adds	r2, r7, r1
 8012f8e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	6a1a      	ldr	r2, [r3, #32]
 8012f94:	187b      	adds	r3, r7, r1
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	1ad2      	subs	r2, r2, r3
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	621a      	str	r2, [r3, #32]
 8012f9e:	e01a      	b.n	8012fd6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	6a1b      	ldr	r3, [r3, #32]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10a      	bne.n	8012fbe <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8012fa8:	2386      	movs	r3, #134	@ 0x86
 8012faa:	18fb      	adds	r3, r7, r3
 8012fac:	881b      	ldrh	r3, [r3, #0]
 8012fae:	228c      	movs	r2, #140	@ 0x8c
 8012fb0:	18ba      	adds	r2, r7, r2
 8012fb2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	2224      	movs	r2, #36	@ 0x24
 8012fb8:	2100      	movs	r1, #0
 8012fba:	5499      	strb	r1, [r3, r2]
 8012fbc:	e00b      	b.n	8012fd6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	2224      	movs	r2, #36	@ 0x24
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	6a1b      	ldr	r3, [r3, #32]
 8012fca:	228c      	movs	r2, #140	@ 0x8c
 8012fcc:	18ba      	adds	r2, r7, r2
 8012fce:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	785b      	ldrb	r3, [r3, #1]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d000      	beq.n	8012fe0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8012fde:	e06d      	b.n	80130bc <HAL_PCD_EP_DB_Transmit+0x38c>
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	2250      	movs	r2, #80	@ 0x50
 8012fec:	5a9b      	ldrh	r3, [r3, r2]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	001a      	movs	r2, r3
 8012ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ff4:	189b      	adds	r3, r3, r2
 8012ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	00da      	lsls	r2, r3, #3
 8012ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013000:	18d3      	adds	r3, r2, r3
 8013002:	4a29      	ldr	r2, [pc, #164]	@ (80130a8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013004:	4694      	mov	ip, r2
 8013006:	4463      	add	r3, ip
 8013008:	63bb      	str	r3, [r7, #56]	@ 0x38
 801300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801300c:	881b      	ldrh	r3, [r3, #0]
 801300e:	b29b      	uxth	r3, r3
 8013010:	059b      	lsls	r3, r3, #22
 8013012:	0d9b      	lsrs	r3, r3, #22
 8013014:	b29a      	uxth	r2, r3
 8013016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013018:	801a      	strh	r2, [r3, #0]
 801301a:	228c      	movs	r2, #140	@ 0x8c
 801301c:	18bb      	adds	r3, r7, r2
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	2b3e      	cmp	r3, #62	@ 0x3e
 8013022:	d91a      	bls.n	801305a <HAL_PCD_EP_DB_Transmit+0x32a>
 8013024:	18bb      	adds	r3, r7, r2
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	095b      	lsrs	r3, r3, #5
 801302a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801302c:	18bb      	adds	r3, r7, r2
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	221f      	movs	r2, #31
 8013032:	4013      	ands	r3, r2
 8013034:	d102      	bne.n	801303c <HAL_PCD_EP_DB_Transmit+0x30c>
 8013036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013038:	3b01      	subs	r3, #1
 801303a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801303c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801303e:	881b      	ldrh	r3, [r3, #0]
 8013040:	b29a      	uxth	r2, r3
 8013042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013044:	b29b      	uxth	r3, r3
 8013046:	029b      	lsls	r3, r3, #10
 8013048:	b29b      	uxth	r3, r3
 801304a:	4313      	orrs	r3, r2
 801304c:	b29b      	uxth	r3, r3
 801304e:	4a17      	ldr	r2, [pc, #92]	@ (80130ac <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013050:	4313      	orrs	r3, r2
 8013052:	b29a      	uxth	r2, r3
 8013054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013056:	801a      	strh	r2, [r3, #0]
 8013058:	e04f      	b.n	80130fa <HAL_PCD_EP_DB_Transmit+0x3ca>
 801305a:	238c      	movs	r3, #140	@ 0x8c
 801305c:	18fb      	adds	r3, r7, r3
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d108      	bne.n	8013076 <HAL_PCD_EP_DB_Transmit+0x346>
 8013064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013066:	881b      	ldrh	r3, [r3, #0]
 8013068:	b29b      	uxth	r3, r3
 801306a:	4a10      	ldr	r2, [pc, #64]	@ (80130ac <HAL_PCD_EP_DB_Transmit+0x37c>)
 801306c:	4313      	orrs	r3, r2
 801306e:	b29a      	uxth	r2, r3
 8013070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013072:	801a      	strh	r2, [r3, #0]
 8013074:	e041      	b.n	80130fa <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013076:	228c      	movs	r2, #140	@ 0x8c
 8013078:	18bb      	adds	r3, r7, r2
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	085b      	lsrs	r3, r3, #1
 801307e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013080:	18bb      	adds	r3, r7, r2
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2201      	movs	r2, #1
 8013086:	4013      	ands	r3, r2
 8013088:	d002      	beq.n	8013090 <HAL_PCD_EP_DB_Transmit+0x360>
 801308a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801308c:	3301      	adds	r3, #1
 801308e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	b29a      	uxth	r2, r3
 8013096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013098:	b29b      	uxth	r3, r3
 801309a:	029b      	lsls	r3, r3, #10
 801309c:	b29b      	uxth	r3, r3
 801309e:	4313      	orrs	r3, r2
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130a4:	801a      	strh	r2, [r3, #0]
 80130a6:	e028      	b.n	80130fa <HAL_PCD_EP_DB_Transmit+0x3ca>
 80130a8:	00000402 	.word	0x00000402
 80130ac:	ffff8000 	.word	0xffff8000
 80130b0:	00000406 	.word	0x00000406
 80130b4:	ffff8f8f 	.word	0xffff8f8f
 80130b8:	ffffc080 	.word	0xffffc080
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	785b      	ldrb	r3, [r3, #1]
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	d11a      	bne.n	80130fa <HAL_PCD_EP_DB_Transmit+0x3ca>
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	2250      	movs	r2, #80	@ 0x50
 80130d0:	5a9b      	ldrh	r3, [r3, r2]
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	001a      	movs	r2, r3
 80130d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130d8:	189b      	adds	r3, r3, r2
 80130da:	647b      	str	r3, [r7, #68]	@ 0x44
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	00da      	lsls	r2, r3, #3
 80130e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130e4:	18d3      	adds	r3, r2, r3
 80130e6:	4adb      	ldr	r2, [pc, #876]	@ (8013454 <HAL_PCD_EP_DB_Transmit+0x724>)
 80130e8:	4694      	mov	ip, r2
 80130ea:	4463      	add	r3, ip
 80130ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80130ee:	238c      	movs	r3, #140	@ 0x8c
 80130f0:	18fb      	adds	r3, r7, r3
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130f8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	6818      	ldr	r0, [r3, #0]
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	6959      	ldr	r1, [r3, #20]
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	891a      	ldrh	r2, [r3, #8]
 8013106:	238c      	movs	r3, #140	@ 0x8c
 8013108:	18fb      	adds	r3, r7, r3
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	b29b      	uxth	r3, r3
 801310e:	f006 fa0f 	bl	8019530 <USB_WritePMA>
 8013112:	e1ea      	b.n	80134ea <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	2250      	movs	r2, #80	@ 0x50
 801311a:	5a9b      	ldrh	r3, [r3, r2]
 801311c:	b29b      	uxth	r3, r3
 801311e:	001a      	movs	r2, r3
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	00db      	lsls	r3, r3, #3
 8013126:	18d2      	adds	r2, r2, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	18d3      	adds	r3, r2, r3
 801312e:	4aca      	ldr	r2, [pc, #808]	@ (8013458 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013130:	4694      	mov	ip, r2
 8013132:	4463      	add	r3, ip
 8013134:	881a      	ldrh	r2, [r3, #0]
 8013136:	2186      	movs	r1, #134	@ 0x86
 8013138:	187b      	adds	r3, r7, r1
 801313a:	0592      	lsls	r2, r2, #22
 801313c:	0d92      	lsrs	r2, r2, #22
 801313e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	699a      	ldr	r2, [r3, #24]
 8013144:	187b      	adds	r3, r7, r1
 8013146:	881b      	ldrh	r3, [r3, #0]
 8013148:	429a      	cmp	r2, r3
 801314a:	d307      	bcc.n	801315c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	699a      	ldr	r2, [r3, #24]
 8013150:	187b      	adds	r3, r7, r1
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	1ad2      	subs	r2, r2, r3
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	619a      	str	r2, [r3, #24]
 801315a:	e002      	b.n	8013162 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	2200      	movs	r2, #0
 8013160:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	699b      	ldr	r3, [r3, #24]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d000      	beq.n	801316c <HAL_PCD_EP_DB_Transmit+0x43c>
 801316a:	e0bb      	b.n	80132e4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	785b      	ldrb	r3, [r3, #1]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d125      	bne.n	80131c0 <HAL_PCD_EP_DB_Transmit+0x490>
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	2250      	movs	r2, #80	@ 0x50
 8013180:	5a9b      	ldrh	r3, [r3, r2]
 8013182:	b29b      	uxth	r3, r3
 8013184:	001a      	movs	r2, r3
 8013186:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013188:	189b      	adds	r3, r3, r2
 801318a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	00da      	lsls	r2, r3, #3
 8013192:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013194:	18d3      	adds	r3, r2, r3
 8013196:	4aaf      	ldr	r2, [pc, #700]	@ (8013454 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013198:	4694      	mov	ip, r2
 801319a:	4463      	add	r3, ip
 801319c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801319e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131a0:	881b      	ldrh	r3, [r3, #0]
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	059b      	lsls	r3, r3, #22
 80131a6:	0d9b      	lsrs	r3, r3, #22
 80131a8:	b29a      	uxth	r2, r3
 80131aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131ac:	801a      	strh	r2, [r3, #0]
 80131ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131b0:	881b      	ldrh	r3, [r3, #0]
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	4aa9      	ldr	r2, [pc, #676]	@ (801345c <HAL_PCD_EP_DB_Transmit+0x72c>)
 80131b6:	4313      	orrs	r3, r2
 80131b8:	b29a      	uxth	r2, r3
 80131ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131bc:	801a      	strh	r2, [r3, #0]
 80131be:	e01b      	b.n	80131f8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	785b      	ldrb	r3, [r3, #1]
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d117      	bne.n	80131f8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2250      	movs	r2, #80	@ 0x50
 80131d4:	5a9b      	ldrh	r3, [r3, r2]
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	001a      	movs	r2, r3
 80131da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80131dc:	189b      	adds	r3, r3, r2
 80131de:	667b      	str	r3, [r7, #100]	@ 0x64
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	00da      	lsls	r2, r3, #3
 80131e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80131e8:	18d3      	adds	r3, r2, r3
 80131ea:	4a9a      	ldr	r2, [pc, #616]	@ (8013454 <HAL_PCD_EP_DB_Transmit+0x724>)
 80131ec:	4694      	mov	ip, r2
 80131ee:	4463      	add	r3, ip
 80131f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80131f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80131f4:	2200      	movs	r2, #0
 80131f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	785b      	ldrb	r3, [r3, #1]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d12b      	bne.n	801325e <HAL_PCD_EP_DB_Transmit+0x52e>
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	2250      	movs	r2, #80	@ 0x50
 8013212:	5a9b      	ldrh	r3, [r3, r2]
 8013214:	b29b      	uxth	r3, r3
 8013216:	001a      	movs	r2, r3
 8013218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801321a:	189b      	adds	r3, r3, r2
 801321c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	00da      	lsls	r2, r3, #3
 8013224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013226:	18d3      	adds	r3, r2, r3
 8013228:	4a8b      	ldr	r2, [pc, #556]	@ (8013458 <HAL_PCD_EP_DB_Transmit+0x728>)
 801322a:	4694      	mov	ip, r2
 801322c:	4463      	add	r3, ip
 801322e:	2180      	movs	r1, #128	@ 0x80
 8013230:	187a      	adds	r2, r7, r1
 8013232:	6013      	str	r3, [r2, #0]
 8013234:	187b      	adds	r3, r7, r1
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	881b      	ldrh	r3, [r3, #0]
 801323a:	b29b      	uxth	r3, r3
 801323c:	059b      	lsls	r3, r3, #22
 801323e:	0d9b      	lsrs	r3, r3, #22
 8013240:	b29a      	uxth	r2, r3
 8013242:	187b      	adds	r3, r7, r1
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	801a      	strh	r2, [r3, #0]
 8013248:	187b      	adds	r3, r7, r1
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	881b      	ldrh	r3, [r3, #0]
 801324e:	b29b      	uxth	r3, r3
 8013250:	4a82      	ldr	r2, [pc, #520]	@ (801345c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013252:	4313      	orrs	r3, r2
 8013254:	b29a      	uxth	r2, r3
 8013256:	187b      	adds	r3, r7, r1
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	801a      	strh	r2, [r3, #0]
 801325c:	e018      	b.n	8013290 <HAL_PCD_EP_DB_Transmit+0x560>
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	785b      	ldrb	r3, [r3, #1]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d114      	bne.n	8013290 <HAL_PCD_EP_DB_Transmit+0x560>
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2250      	movs	r2, #80	@ 0x50
 801326c:	5a9b      	ldrh	r3, [r3, r2]
 801326e:	b29b      	uxth	r3, r3
 8013270:	001a      	movs	r2, r3
 8013272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013274:	189b      	adds	r3, r3, r2
 8013276:	677b      	str	r3, [r7, #116]	@ 0x74
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	00da      	lsls	r2, r3, #3
 801327e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013280:	18d3      	adds	r3, r2, r3
 8013282:	4a75      	ldr	r2, [pc, #468]	@ (8013458 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013284:	4694      	mov	ip, r2
 8013286:	4463      	add	r3, ip
 8013288:	673b      	str	r3, [r7, #112]	@ 0x70
 801328a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801328c:	2200      	movs	r2, #0
 801328e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	781a      	ldrb	r2, [r3, #0]
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	0011      	movs	r1, r2
 8013298:	0018      	movs	r0, r3
 801329a:	f008 f9cd 	bl	801b638 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801329e:	1dbb      	adds	r3, r7, #6
 80132a0:	881a      	ldrh	r2, [r3, #0]
 80132a2:	2380      	movs	r3, #128	@ 0x80
 80132a4:	01db      	lsls	r3, r3, #7
 80132a6:	4013      	ands	r3, r2
 80132a8:	d000      	beq.n	80132ac <HAL_PCD_EP_DB_Transmit+0x57c>
 80132aa:	e11e      	b.n	80134ea <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	001a      	movs	r2, r3
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	18d3      	adds	r3, r2, r3
 80132ba:	881b      	ldrh	r3, [r3, #0]
 80132bc:	b29a      	uxth	r2, r3
 80132be:	2088      	movs	r0, #136	@ 0x88
 80132c0:	183b      	adds	r3, r7, r0
 80132c2:	4967      	ldr	r1, [pc, #412]	@ (8013460 <HAL_PCD_EP_DB_Transmit+0x730>)
 80132c4:	400a      	ands	r2, r1
 80132c6:	801a      	strh	r2, [r3, #0]
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	001a      	movs	r2, r3
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	18d3      	adds	r3, r2, r3
 80132d6:	183a      	adds	r2, r7, r0
 80132d8:	8812      	ldrh	r2, [r2, #0]
 80132da:	4962      	ldr	r1, [pc, #392]	@ (8013464 <HAL_PCD_EP_DB_Transmit+0x734>)
 80132dc:	430a      	orrs	r2, r1
 80132de:	b292      	uxth	r2, r2
 80132e0:	801a      	strh	r2, [r3, #0]
 80132e2:	e102      	b.n	80134ea <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80132e4:	1dbb      	adds	r3, r7, #6
 80132e6:	881a      	ldrh	r2, [r3, #0]
 80132e8:	2380      	movs	r3, #128	@ 0x80
 80132ea:	01db      	lsls	r3, r3, #7
 80132ec:	4013      	ands	r3, r2
 80132ee:	d11a      	bne.n	8013326 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	001a      	movs	r2, r3
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	009b      	lsls	r3, r3, #2
 80132fc:	18d3      	adds	r3, r2, r3
 80132fe:	881b      	ldrh	r3, [r3, #0]
 8013300:	b29a      	uxth	r2, r3
 8013302:	204e      	movs	r0, #78	@ 0x4e
 8013304:	183b      	adds	r3, r7, r0
 8013306:	4956      	ldr	r1, [pc, #344]	@ (8013460 <HAL_PCD_EP_DB_Transmit+0x730>)
 8013308:	400a      	ands	r2, r1
 801330a:	801a      	strh	r2, [r3, #0]
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	001a      	movs	r2, r3
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	18d3      	adds	r3, r2, r3
 801331a:	183a      	adds	r2, r7, r0
 801331c:	8812      	ldrh	r2, [r2, #0]
 801331e:	4951      	ldr	r1, [pc, #324]	@ (8013464 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013320:	430a      	orrs	r2, r1
 8013322:	b292      	uxth	r2, r2
 8013324:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	2224      	movs	r2, #36	@ 0x24
 801332a:	5c9b      	ldrb	r3, [r3, r2]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d000      	beq.n	8013332 <HAL_PCD_EP_DB_Transmit+0x602>
 8013330:	e0db      	b.n	80134ea <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	695a      	ldr	r2, [r3, #20]
 8013336:	2186      	movs	r1, #134	@ 0x86
 8013338:	187b      	adds	r3, r7, r1
 801333a:	881b      	ldrh	r3, [r3, #0]
 801333c:	18d2      	adds	r2, r2, r3
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	69da      	ldr	r2, [r3, #28]
 8013346:	187b      	adds	r3, r7, r1
 8013348:	881b      	ldrh	r3, [r3, #0]
 801334a:	18d2      	adds	r2, r2, r3
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	6a1a      	ldr	r2, [r3, #32]
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	691b      	ldr	r3, [r3, #16]
 8013358:	429a      	cmp	r2, r3
 801335a:	d30c      	bcc.n	8013376 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801335c:	68bb      	ldr	r3, [r7, #8]
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	218c      	movs	r1, #140	@ 0x8c
 8013362:	187a      	adds	r2, r7, r1
 8013364:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	6a1a      	ldr	r2, [r3, #32]
 801336a:	187b      	adds	r3, r7, r1
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	1ad2      	subs	r2, r2, r3
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	621a      	str	r2, [r3, #32]
 8013374:	e01a      	b.n	80133ac <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8013376:	68bb      	ldr	r3, [r7, #8]
 8013378:	6a1b      	ldr	r3, [r3, #32]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d10a      	bne.n	8013394 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801337e:	2386      	movs	r3, #134	@ 0x86
 8013380:	18fb      	adds	r3, r7, r3
 8013382:	881b      	ldrh	r3, [r3, #0]
 8013384:	228c      	movs	r2, #140	@ 0x8c
 8013386:	18ba      	adds	r2, r7, r2
 8013388:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	2224      	movs	r2, #36	@ 0x24
 801338e:	2100      	movs	r1, #0
 8013390:	5499      	strb	r1, [r3, r2]
 8013392:	e00b      	b.n	80133ac <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	6a1b      	ldr	r3, [r3, #32]
 8013398:	228c      	movs	r2, #140	@ 0x8c
 801339a:	18ba      	adds	r2, r7, r2
 801339c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	2200      	movs	r2, #0
 80133a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	2224      	movs	r2, #36	@ 0x24
 80133a8:	2100      	movs	r1, #0
 80133aa:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	785b      	ldrb	r3, [r3, #1]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d000      	beq.n	80133bc <HAL_PCD_EP_DB_Transmit+0x68c>
 80133ba:	e06e      	b.n	801349a <HAL_PCD_EP_DB_Transmit+0x76a>
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2250      	movs	r2, #80	@ 0x50
 80133c8:	5a9b      	ldrh	r3, [r3, r2]
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	001a      	movs	r2, r3
 80133ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80133d0:	189b      	adds	r3, r3, r2
 80133d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	00da      	lsls	r2, r3, #3
 80133da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80133dc:	18d3      	adds	r3, r2, r3
 80133de:	4a1e      	ldr	r2, [pc, #120]	@ (8013458 <HAL_PCD_EP_DB_Transmit+0x728>)
 80133e0:	4694      	mov	ip, r2
 80133e2:	4463      	add	r3, ip
 80133e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80133e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133e8:	881b      	ldrh	r3, [r3, #0]
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	059b      	lsls	r3, r3, #22
 80133ee:	0d9b      	lsrs	r3, r3, #22
 80133f0:	b29a      	uxth	r2, r3
 80133f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133f4:	801a      	strh	r2, [r3, #0]
 80133f6:	228c      	movs	r2, #140	@ 0x8c
 80133f8:	18bb      	adds	r3, r7, r2
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80133fe:	d91a      	bls.n	8013436 <HAL_PCD_EP_DB_Transmit+0x706>
 8013400:	18bb      	adds	r3, r7, r2
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	095b      	lsrs	r3, r3, #5
 8013406:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013408:	18bb      	adds	r3, r7, r2
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	221f      	movs	r2, #31
 801340e:	4013      	ands	r3, r2
 8013410:	d102      	bne.n	8013418 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8013412:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013414:	3b01      	subs	r3, #1
 8013416:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	b29a      	uxth	r2, r3
 801341e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013420:	b29b      	uxth	r3, r3
 8013422:	029b      	lsls	r3, r3, #10
 8013424:	b29b      	uxth	r3, r3
 8013426:	4313      	orrs	r3, r2
 8013428:	b29b      	uxth	r3, r3
 801342a:	4a0c      	ldr	r2, [pc, #48]	@ (801345c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801342c:	4313      	orrs	r3, r2
 801342e:	b29a      	uxth	r2, r3
 8013430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013432:	801a      	strh	r2, [r3, #0]
 8013434:	e04d      	b.n	80134d2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013436:	238c      	movs	r3, #140	@ 0x8c
 8013438:	18fb      	adds	r3, r7, r3
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d113      	bne.n	8013468 <HAL_PCD_EP_DB_Transmit+0x738>
 8013440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013442:	881b      	ldrh	r3, [r3, #0]
 8013444:	b29b      	uxth	r3, r3
 8013446:	4a05      	ldr	r2, [pc, #20]	@ (801345c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013448:	4313      	orrs	r3, r2
 801344a:	b29a      	uxth	r2, r3
 801344c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801344e:	801a      	strh	r2, [r3, #0]
 8013450:	e03f      	b.n	80134d2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013452:	46c0      	nop			@ (mov r8, r8)
 8013454:	00000402 	.word	0x00000402
 8013458:	00000406 	.word	0x00000406
 801345c:	ffff8000 	.word	0xffff8000
 8013460:	ffff8f8f 	.word	0xffff8f8f
 8013464:	ffffc080 	.word	0xffffc080
 8013468:	228c      	movs	r2, #140	@ 0x8c
 801346a:	18bb      	adds	r3, r7, r2
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	085b      	lsrs	r3, r3, #1
 8013470:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013472:	18bb      	adds	r3, r7, r2
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	2201      	movs	r2, #1
 8013478:	4013      	ands	r3, r2
 801347a:	d002      	beq.n	8013482 <HAL_PCD_EP_DB_Transmit+0x752>
 801347c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801347e:	3301      	adds	r3, #1
 8013480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013484:	881b      	ldrh	r3, [r3, #0]
 8013486:	b29a      	uxth	r2, r3
 8013488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801348a:	b29b      	uxth	r3, r3
 801348c:	029b      	lsls	r3, r3, #10
 801348e:	b29b      	uxth	r3, r3
 8013490:	4313      	orrs	r3, r2
 8013492:	b29a      	uxth	r2, r3
 8013494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013496:	801a      	strh	r2, [r3, #0]
 8013498:	e01b      	b.n	80134d2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	785b      	ldrb	r3, [r3, #1]
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d117      	bne.n	80134d2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2250      	movs	r2, #80	@ 0x50
 80134a8:	5a9b      	ldrh	r3, [r3, r2]
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	001a      	movs	r2, r3
 80134ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b0:	189b      	adds	r3, r3, r2
 80134b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	00da      	lsls	r2, r3, #3
 80134ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134bc:	18d3      	adds	r3, r2, r3
 80134be:	4a21      	ldr	r2, [pc, #132]	@ (8013544 <HAL_PCD_EP_DB_Transmit+0x814>)
 80134c0:	4694      	mov	ip, r2
 80134c2:	4463      	add	r3, ip
 80134c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80134c6:	238c      	movs	r3, #140	@ 0x8c
 80134c8:	18fb      	adds	r3, r7, r3
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	b29a      	uxth	r2, r3
 80134ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134d0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	6818      	ldr	r0, [r3, #0]
 80134d6:	68bb      	ldr	r3, [r7, #8]
 80134d8:	6959      	ldr	r1, [r3, #20]
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	895a      	ldrh	r2, [r3, #10]
 80134de:	238c      	movs	r3, #140	@ 0x8c
 80134e0:	18fb      	adds	r3, r7, r3
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	b29b      	uxth	r3, r3
 80134e6:	f006 f823 	bl	8019530 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	001a      	movs	r2, r3
 80134f0:	68bb      	ldr	r3, [r7, #8]
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	18d3      	adds	r3, r2, r3
 80134f8:	881b      	ldrh	r3, [r3, #0]
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	2014      	movs	r0, #20
 80134fe:	183b      	adds	r3, r7, r0
 8013500:	4911      	ldr	r1, [pc, #68]	@ (8013548 <HAL_PCD_EP_DB_Transmit+0x818>)
 8013502:	400a      	ands	r2, r1
 8013504:	801a      	strh	r2, [r3, #0]
 8013506:	183b      	adds	r3, r7, r0
 8013508:	183a      	adds	r2, r7, r0
 801350a:	8812      	ldrh	r2, [r2, #0]
 801350c:	2110      	movs	r1, #16
 801350e:	404a      	eors	r2, r1
 8013510:	801a      	strh	r2, [r3, #0]
 8013512:	183b      	adds	r3, r7, r0
 8013514:	183a      	adds	r2, r7, r0
 8013516:	8812      	ldrh	r2, [r2, #0]
 8013518:	2120      	movs	r1, #32
 801351a:	404a      	eors	r2, r1
 801351c:	801a      	strh	r2, [r3, #0]
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	001a      	movs	r2, r3
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	18d3      	adds	r3, r2, r3
 801352c:	183a      	adds	r2, r7, r0
 801352e:	8812      	ldrh	r2, [r2, #0]
 8013530:	4906      	ldr	r1, [pc, #24]	@ (801354c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8013532:	430a      	orrs	r2, r1
 8013534:	b292      	uxth	r2, r2
 8013536:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8013538:	2300      	movs	r3, #0
}
 801353a:	0018      	movs	r0, r3
 801353c:	46bd      	mov	sp, r7
 801353e:	b024      	add	sp, #144	@ 0x90
 8013540:	bd80      	pop	{r7, pc}
 8013542:	46c0      	nop			@ (mov r8, r8)
 8013544:	00000406 	.word	0x00000406
 8013548:	ffff8fbf 	.word	0xffff8fbf
 801354c:	ffff8080 	.word	0xffff8080

08013550 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8013550:	b590      	push	{r4, r7, lr}
 8013552:	b087      	sub	sp, #28
 8013554:	af00      	add	r7, sp, #0
 8013556:	60f8      	str	r0, [r7, #12]
 8013558:	0008      	movs	r0, r1
 801355a:	0011      	movs	r1, r2
 801355c:	607b      	str	r3, [r7, #4]
 801355e:	240a      	movs	r4, #10
 8013560:	193b      	adds	r3, r7, r4
 8013562:	1c02      	adds	r2, r0, #0
 8013564:	801a      	strh	r2, [r3, #0]
 8013566:	2308      	movs	r3, #8
 8013568:	18fb      	adds	r3, r7, r3
 801356a:	1c0a      	adds	r2, r1, #0
 801356c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801356e:	0021      	movs	r1, r4
 8013570:	187b      	adds	r3, r7, r1
 8013572:	881b      	ldrh	r3, [r3, #0]
 8013574:	2280      	movs	r2, #128	@ 0x80
 8013576:	4013      	ands	r3, r2
 8013578:	b29b      	uxth	r3, r3
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00c      	beq.n	8013598 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801357e:	187b      	adds	r3, r7, r1
 8013580:	881b      	ldrh	r3, [r3, #0]
 8013582:	2207      	movs	r2, #7
 8013584:	4013      	ands	r3, r2
 8013586:	1c5a      	adds	r2, r3, #1
 8013588:	0013      	movs	r3, r2
 801358a:	009b      	lsls	r3, r3, #2
 801358c:	189b      	adds	r3, r3, r2
 801358e:	00db      	lsls	r3, r3, #3
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	18d3      	adds	r3, r2, r3
 8013594:	617b      	str	r3, [r7, #20]
 8013596:	e00b      	b.n	80135b0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013598:	230a      	movs	r3, #10
 801359a:	18fb      	adds	r3, r7, r3
 801359c:	881a      	ldrh	r2, [r3, #0]
 801359e:	0013      	movs	r3, r2
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	189b      	adds	r3, r3, r2
 80135a4:	00db      	lsls	r3, r3, #3
 80135a6:	3369      	adds	r3, #105	@ 0x69
 80135a8:	33ff      	adds	r3, #255	@ 0xff
 80135aa:	68fa      	ldr	r2, [r7, #12]
 80135ac:	18d3      	adds	r3, r2, r3
 80135ae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80135b0:	2308      	movs	r3, #8
 80135b2:	18fb      	adds	r3, r7, r3
 80135b4:	881b      	ldrh	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d107      	bne.n	80135ca <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	2200      	movs	r2, #0
 80135be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	80da      	strh	r2, [r3, #6]
 80135c8:	e00b      	b.n	80135e2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	2201      	movs	r2, #1
 80135ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	b29a      	uxth	r2, r3
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	0c1b      	lsrs	r3, r3, #16
 80135dc:	b29a      	uxth	r2, r3
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80135e2:	2300      	movs	r3, #0
}
 80135e4:	0018      	movs	r0, r3
 80135e6:	46bd      	mov	sp, r7
 80135e8:	b007      	add	sp, #28
 80135ea:	bd90      	pop	{r4, r7, pc}

080135ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	23ba      	movs	r3, #186	@ 0xba
 80135fe:	009b      	lsls	r3, r3, #2
 8013600:	2101      	movs	r1, #1
 8013602:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8013604:	687a      	ldr	r2, [r7, #4]
 8013606:	23b8      	movs	r3, #184	@ 0xb8
 8013608:	009b      	lsls	r3, r3, #2
 801360a:	2100      	movs	r1, #0
 801360c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2254      	movs	r2, #84	@ 0x54
 8013612:	5a9b      	ldrh	r3, [r3, r2]
 8013614:	b29b      	uxth	r3, r3
 8013616:	2201      	movs	r2, #1
 8013618:	4313      	orrs	r3, r2
 801361a:	b299      	uxth	r1, r3
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2254      	movs	r2, #84	@ 0x54
 8013620:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2254      	movs	r2, #84	@ 0x54
 8013626:	5a9b      	ldrh	r3, [r3, r2]
 8013628:	b29b      	uxth	r3, r3
 801362a:	2202      	movs	r2, #2
 801362c:	4313      	orrs	r3, r2
 801362e:	b299      	uxth	r1, r3
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	2254      	movs	r2, #84	@ 0x54
 8013634:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013636:	2300      	movs	r3, #0
}
 8013638:	0018      	movs	r0, r3
 801363a:	46bd      	mov	sp, r7
 801363c:	b004      	add	sp, #16
 801363e:	bd80      	pop	{r7, pc}

08013640 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
 8013648:	000a      	movs	r2, r1
 801364a:	1cfb      	adds	r3, r7, #3
 801364c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801364e:	46c0      	nop			@ (mov r8, r8)
 8013650:	46bd      	mov	sp, r7
 8013652:	b002      	add	sp, #8
 8013654:	bd80      	pop	{r7, pc}
	...

08013658 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801365c:	4b04      	ldr	r3, [pc, #16]	@ (8013670 <HAL_PWR_EnableBkUpAccess+0x18>)
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	4b03      	ldr	r3, [pc, #12]	@ (8013670 <HAL_PWR_EnableBkUpAccess+0x18>)
 8013662:	2180      	movs	r1, #128	@ 0x80
 8013664:	0049      	lsls	r1, r1, #1
 8013666:	430a      	orrs	r2, r1
 8013668:	601a      	str	r2, [r3, #0]
}
 801366a:	46c0      	nop			@ (mov r8, r8)
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	40007000 	.word	0x40007000

08013674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013674:	b5b0      	push	{r4, r5, r7, lr}
 8013676:	b08a      	sub	sp, #40	@ 0x28
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d102      	bne.n	8013688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8013682:	2301      	movs	r3, #1
 8013684:	f000 fbbf 	bl	8013e06 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013688:	4bc9      	ldr	r3, [pc, #804]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	220c      	movs	r2, #12
 801368e:	4013      	ands	r3, r2
 8013690:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013692:	4bc7      	ldr	r3, [pc, #796]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013694:	68da      	ldr	r2, [r3, #12]
 8013696:	2380      	movs	r3, #128	@ 0x80
 8013698:	025b      	lsls	r3, r3, #9
 801369a:	4013      	ands	r3, r2
 801369c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2201      	movs	r2, #1
 80136a4:	4013      	ands	r3, r2
 80136a6:	d100      	bne.n	80136aa <HAL_RCC_OscConfig+0x36>
 80136a8:	e07e      	b.n	80137a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	2b08      	cmp	r3, #8
 80136ae:	d007      	beq.n	80136c0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80136b0:	69fb      	ldr	r3, [r7, #28]
 80136b2:	2b0c      	cmp	r3, #12
 80136b4:	d112      	bne.n	80136dc <HAL_RCC_OscConfig+0x68>
 80136b6:	69ba      	ldr	r2, [r7, #24]
 80136b8:	2380      	movs	r3, #128	@ 0x80
 80136ba:	025b      	lsls	r3, r3, #9
 80136bc:	429a      	cmp	r2, r3
 80136be:	d10d      	bne.n	80136dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80136c0:	4bbb      	ldr	r3, [pc, #748]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	2380      	movs	r3, #128	@ 0x80
 80136c6:	029b      	lsls	r3, r3, #10
 80136c8:	4013      	ands	r3, r2
 80136ca:	d100      	bne.n	80136ce <HAL_RCC_OscConfig+0x5a>
 80136cc:	e06b      	b.n	80137a6 <HAL_RCC_OscConfig+0x132>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d167      	bne.n	80137a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80136d6:	2301      	movs	r3, #1
 80136d8:	f000 fb95 	bl	8013e06 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	685a      	ldr	r2, [r3, #4]
 80136e0:	2380      	movs	r3, #128	@ 0x80
 80136e2:	025b      	lsls	r3, r3, #9
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d107      	bne.n	80136f8 <HAL_RCC_OscConfig+0x84>
 80136e8:	4bb1      	ldr	r3, [pc, #708]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	4bb0      	ldr	r3, [pc, #704]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80136ee:	2180      	movs	r1, #128	@ 0x80
 80136f0:	0249      	lsls	r1, r1, #9
 80136f2:	430a      	orrs	r2, r1
 80136f4:	601a      	str	r2, [r3, #0]
 80136f6:	e027      	b.n	8013748 <HAL_RCC_OscConfig+0xd4>
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	685a      	ldr	r2, [r3, #4]
 80136fc:	23a0      	movs	r3, #160	@ 0xa0
 80136fe:	02db      	lsls	r3, r3, #11
 8013700:	429a      	cmp	r2, r3
 8013702:	d10e      	bne.n	8013722 <HAL_RCC_OscConfig+0xae>
 8013704:	4baa      	ldr	r3, [pc, #680]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	4ba9      	ldr	r3, [pc, #676]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801370a:	2180      	movs	r1, #128	@ 0x80
 801370c:	02c9      	lsls	r1, r1, #11
 801370e:	430a      	orrs	r2, r1
 8013710:	601a      	str	r2, [r3, #0]
 8013712:	4ba7      	ldr	r3, [pc, #668]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	4ba6      	ldr	r3, [pc, #664]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013718:	2180      	movs	r1, #128	@ 0x80
 801371a:	0249      	lsls	r1, r1, #9
 801371c:	430a      	orrs	r2, r1
 801371e:	601a      	str	r2, [r3, #0]
 8013720:	e012      	b.n	8013748 <HAL_RCC_OscConfig+0xd4>
 8013722:	4ba3      	ldr	r3, [pc, #652]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	4ba2      	ldr	r3, [pc, #648]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013728:	49a2      	ldr	r1, [pc, #648]	@ (80139b4 <HAL_RCC_OscConfig+0x340>)
 801372a:	400a      	ands	r2, r1
 801372c:	601a      	str	r2, [r3, #0]
 801372e:	4ba0      	ldr	r3, [pc, #640]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	2380      	movs	r3, #128	@ 0x80
 8013734:	025b      	lsls	r3, r3, #9
 8013736:	4013      	ands	r3, r2
 8013738:	60fb      	str	r3, [r7, #12]
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	4b9c      	ldr	r3, [pc, #624]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801373e:	681a      	ldr	r2, [r3, #0]
 8013740:	4b9b      	ldr	r3, [pc, #620]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013742:	499d      	ldr	r1, [pc, #628]	@ (80139b8 <HAL_RCC_OscConfig+0x344>)
 8013744:	400a      	ands	r2, r1
 8013746:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d015      	beq.n	801377c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013750:	f7f9 ff30 	bl	800d5b4 <HAL_GetTick>
 8013754:	0003      	movs	r3, r0
 8013756:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013758:	e009      	b.n	801376e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801375a:	f7f9 ff2b 	bl	800d5b4 <HAL_GetTick>
 801375e:	0002      	movs	r2, r0
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	1ad3      	subs	r3, r2, r3
 8013764:	2b64      	cmp	r3, #100	@ 0x64
 8013766:	d902      	bls.n	801376e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013768:	2303      	movs	r3, #3
 801376a:	f000 fb4c 	bl	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801376e:	4b90      	ldr	r3, [pc, #576]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	2380      	movs	r3, #128	@ 0x80
 8013774:	029b      	lsls	r3, r3, #10
 8013776:	4013      	ands	r3, r2
 8013778:	d0ef      	beq.n	801375a <HAL_RCC_OscConfig+0xe6>
 801377a:	e015      	b.n	80137a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801377c:	f7f9 ff1a 	bl	800d5b4 <HAL_GetTick>
 8013780:	0003      	movs	r3, r0
 8013782:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013784:	e008      	b.n	8013798 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013786:	f7f9 ff15 	bl	800d5b4 <HAL_GetTick>
 801378a:	0002      	movs	r2, r0
 801378c:	697b      	ldr	r3, [r7, #20]
 801378e:	1ad3      	subs	r3, r2, r3
 8013790:	2b64      	cmp	r3, #100	@ 0x64
 8013792:	d901      	bls.n	8013798 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8013794:	2303      	movs	r3, #3
 8013796:	e336      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013798:	4b85      	ldr	r3, [pc, #532]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801379a:	681a      	ldr	r2, [r3, #0]
 801379c:	2380      	movs	r3, #128	@ 0x80
 801379e:	029b      	lsls	r3, r3, #10
 80137a0:	4013      	ands	r3, r2
 80137a2:	d1f0      	bne.n	8013786 <HAL_RCC_OscConfig+0x112>
 80137a4:	e000      	b.n	80137a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80137a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2202      	movs	r2, #2
 80137ae:	4013      	ands	r3, r2
 80137b0:	d100      	bne.n	80137b4 <HAL_RCC_OscConfig+0x140>
 80137b2:	e099      	b.n	80138e8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80137ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137bc:	2220      	movs	r2, #32
 80137be:	4013      	ands	r3, r2
 80137c0:	d009      	beq.n	80137d6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80137c2:	4b7b      	ldr	r3, [pc, #492]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	4b7a      	ldr	r3, [pc, #488]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80137c8:	2120      	movs	r1, #32
 80137ca:	430a      	orrs	r2, r1
 80137cc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80137ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d0:	2220      	movs	r2, #32
 80137d2:	4393      	bics	r3, r2
 80137d4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	2b04      	cmp	r3, #4
 80137da:	d005      	beq.n	80137e8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80137dc:	69fb      	ldr	r3, [r7, #28]
 80137de:	2b0c      	cmp	r3, #12
 80137e0:	d13e      	bne.n	8013860 <HAL_RCC_OscConfig+0x1ec>
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d13b      	bne.n	8013860 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80137e8:	4b71      	ldr	r3, [pc, #452]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2204      	movs	r2, #4
 80137ee:	4013      	ands	r3, r2
 80137f0:	d004      	beq.n	80137fc <HAL_RCC_OscConfig+0x188>
 80137f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d101      	bne.n	80137fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80137f8:	2301      	movs	r3, #1
 80137fa:	e304      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80137fc:	4b6c      	ldr	r3, [pc, #432]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	4a6e      	ldr	r2, [pc, #440]	@ (80139bc <HAL_RCC_OscConfig+0x348>)
 8013802:	4013      	ands	r3, r2
 8013804:	0019      	movs	r1, r3
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	691b      	ldr	r3, [r3, #16]
 801380a:	021a      	lsls	r2, r3, #8
 801380c:	4b68      	ldr	r3, [pc, #416]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801380e:	430a      	orrs	r2, r1
 8013810:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8013812:	4b67      	ldr	r3, [pc, #412]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	2209      	movs	r2, #9
 8013818:	4393      	bics	r3, r2
 801381a:	0019      	movs	r1, r3
 801381c:	4b64      	ldr	r3, [pc, #400]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801381e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013820:	430a      	orrs	r2, r1
 8013822:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013824:	f000 fc42 	bl	80140ac <HAL_RCC_GetSysClockFreq>
 8013828:	0001      	movs	r1, r0
 801382a:	4b61      	ldr	r3, [pc, #388]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	091b      	lsrs	r3, r3, #4
 8013830:	220f      	movs	r2, #15
 8013832:	4013      	ands	r3, r2
 8013834:	4a62      	ldr	r2, [pc, #392]	@ (80139c0 <HAL_RCC_OscConfig+0x34c>)
 8013836:	5cd3      	ldrb	r3, [r2, r3]
 8013838:	000a      	movs	r2, r1
 801383a:	40da      	lsrs	r2, r3
 801383c:	4b61      	ldr	r3, [pc, #388]	@ (80139c4 <HAL_RCC_OscConfig+0x350>)
 801383e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8013840:	4b61      	ldr	r3, [pc, #388]	@ (80139c8 <HAL_RCC_OscConfig+0x354>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2513      	movs	r5, #19
 8013846:	197c      	adds	r4, r7, r5
 8013848:	0018      	movs	r0, r3
 801384a:	f7f9 fe6d 	bl	800d528 <HAL_InitTick>
 801384e:	0003      	movs	r3, r0
 8013850:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8013852:	197b      	adds	r3, r7, r5
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d046      	beq.n	80138e8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801385a:	197b      	adds	r3, r7, r5
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	e2d2      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8013860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013862:	2b00      	cmp	r3, #0
 8013864:	d027      	beq.n	80138b6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8013866:	4b52      	ldr	r3, [pc, #328]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2209      	movs	r2, #9
 801386c:	4393      	bics	r3, r2
 801386e:	0019      	movs	r1, r3
 8013870:	4b4f      	ldr	r3, [pc, #316]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013874:	430a      	orrs	r2, r1
 8013876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013878:	f7f9 fe9c 	bl	800d5b4 <HAL_GetTick>
 801387c:	0003      	movs	r3, r0
 801387e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013880:	e008      	b.n	8013894 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013882:	f7f9 fe97 	bl	800d5b4 <HAL_GetTick>
 8013886:	0002      	movs	r2, r0
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	2b02      	cmp	r3, #2
 801388e:	d901      	bls.n	8013894 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8013890:	2303      	movs	r3, #3
 8013892:	e2b8      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013894:	4b46      	ldr	r3, [pc, #280]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	2204      	movs	r2, #4
 801389a:	4013      	ands	r3, r2
 801389c:	d0f1      	beq.n	8013882 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801389e:	4b44      	ldr	r3, [pc, #272]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	4a46      	ldr	r2, [pc, #280]	@ (80139bc <HAL_RCC_OscConfig+0x348>)
 80138a4:	4013      	ands	r3, r2
 80138a6:	0019      	movs	r1, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	691b      	ldr	r3, [r3, #16]
 80138ac:	021a      	lsls	r2, r3, #8
 80138ae:	4b40      	ldr	r3, [pc, #256]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80138b0:	430a      	orrs	r2, r1
 80138b2:	605a      	str	r2, [r3, #4]
 80138b4:	e018      	b.n	80138e8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80138b6:	4b3e      	ldr	r3, [pc, #248]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80138b8:	681a      	ldr	r2, [r3, #0]
 80138ba:	4b3d      	ldr	r3, [pc, #244]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80138bc:	2101      	movs	r1, #1
 80138be:	438a      	bics	r2, r1
 80138c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80138c2:	f7f9 fe77 	bl	800d5b4 <HAL_GetTick>
 80138c6:	0003      	movs	r3, r0
 80138c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80138ca:	e008      	b.n	80138de <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80138cc:	f7f9 fe72 	bl	800d5b4 <HAL_GetTick>
 80138d0:	0002      	movs	r2, r0
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	1ad3      	subs	r3, r2, r3
 80138d6:	2b02      	cmp	r3, #2
 80138d8:	d901      	bls.n	80138de <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80138da:	2303      	movs	r3, #3
 80138dc:	e293      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80138de:	4b34      	ldr	r3, [pc, #208]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2204      	movs	r2, #4
 80138e4:	4013      	ands	r3, r2
 80138e6:	d1f1      	bne.n	80138cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	2210      	movs	r2, #16
 80138ee:	4013      	ands	r3, r2
 80138f0:	d100      	bne.n	80138f4 <HAL_RCC_OscConfig+0x280>
 80138f2:	e0a2      	b.n	8013a3a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d140      	bne.n	801397c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80138fa:	4b2d      	ldr	r3, [pc, #180]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	2380      	movs	r3, #128	@ 0x80
 8013900:	009b      	lsls	r3, r3, #2
 8013902:	4013      	ands	r3, r2
 8013904:	d005      	beq.n	8013912 <HAL_RCC_OscConfig+0x29e>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	69db      	ldr	r3, [r3, #28]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d101      	bne.n	8013912 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801390e:	2301      	movs	r3, #1
 8013910:	e279      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013912:	4b27      	ldr	r3, [pc, #156]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	4a2d      	ldr	r2, [pc, #180]	@ (80139cc <HAL_RCC_OscConfig+0x358>)
 8013918:	4013      	ands	r3, r2
 801391a:	0019      	movs	r1, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013920:	4b23      	ldr	r3, [pc, #140]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013922:	430a      	orrs	r2, r1
 8013924:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013926:	4b22      	ldr	r3, [pc, #136]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	021b      	lsls	r3, r3, #8
 801392c:	0a19      	lsrs	r1, r3, #8
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a1b      	ldr	r3, [r3, #32]
 8013932:	061a      	lsls	r2, r3, #24
 8013934:	4b1e      	ldr	r3, [pc, #120]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013936:	430a      	orrs	r2, r1
 8013938:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801393e:	0b5b      	lsrs	r3, r3, #13
 8013940:	3301      	adds	r3, #1
 8013942:	2280      	movs	r2, #128	@ 0x80
 8013944:	0212      	lsls	r2, r2, #8
 8013946:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8013948:	4b19      	ldr	r3, [pc, #100]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	091b      	lsrs	r3, r3, #4
 801394e:	210f      	movs	r1, #15
 8013950:	400b      	ands	r3, r1
 8013952:	491b      	ldr	r1, [pc, #108]	@ (80139c0 <HAL_RCC_OscConfig+0x34c>)
 8013954:	5ccb      	ldrb	r3, [r1, r3]
 8013956:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8013958:	4b1a      	ldr	r3, [pc, #104]	@ (80139c4 <HAL_RCC_OscConfig+0x350>)
 801395a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801395c:	4b1a      	ldr	r3, [pc, #104]	@ (80139c8 <HAL_RCC_OscConfig+0x354>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2513      	movs	r5, #19
 8013962:	197c      	adds	r4, r7, r5
 8013964:	0018      	movs	r0, r3
 8013966:	f7f9 fddf 	bl	800d528 <HAL_InitTick>
 801396a:	0003      	movs	r3, r0
 801396c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801396e:	197b      	adds	r3, r7, r5
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d061      	beq.n	8013a3a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8013976:	197b      	adds	r3, r7, r5
 8013978:	781b      	ldrb	r3, [r3, #0]
 801397a:	e244      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	69db      	ldr	r3, [r3, #28]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d040      	beq.n	8013a06 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8013984:	4b0a      	ldr	r3, [pc, #40]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 8013986:	681a      	ldr	r2, [r3, #0]
 8013988:	4b09      	ldr	r3, [pc, #36]	@ (80139b0 <HAL_RCC_OscConfig+0x33c>)
 801398a:	2180      	movs	r1, #128	@ 0x80
 801398c:	0049      	lsls	r1, r1, #1
 801398e:	430a      	orrs	r2, r1
 8013990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013992:	f7f9 fe0f 	bl	800d5b4 <HAL_GetTick>
 8013996:	0003      	movs	r3, r0
 8013998:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801399a:	e019      	b.n	80139d0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801399c:	f7f9 fe0a 	bl	800d5b4 <HAL_GetTick>
 80139a0:	0002      	movs	r2, r0
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	1ad3      	subs	r3, r2, r3
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	d912      	bls.n	80139d0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80139aa:	2303      	movs	r3, #3
 80139ac:	e22b      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
 80139ae:	46c0      	nop			@ (mov r8, r8)
 80139b0:	40021000 	.word	0x40021000
 80139b4:	fffeffff 	.word	0xfffeffff
 80139b8:	fffbffff 	.word	0xfffbffff
 80139bc:	ffffe0ff 	.word	0xffffe0ff
 80139c0:	08023344 	.word	0x08023344
 80139c4:	200000cc 	.word	0x200000cc
 80139c8:	200000dc 	.word	0x200000dc
 80139cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80139d0:	4bca      	ldr	r3, [pc, #808]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 80139d2:	681a      	ldr	r2, [r3, #0]
 80139d4:	2380      	movs	r3, #128	@ 0x80
 80139d6:	009b      	lsls	r3, r3, #2
 80139d8:	4013      	ands	r3, r2
 80139da:	d0df      	beq.n	801399c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80139dc:	4bc7      	ldr	r3, [pc, #796]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	4ac7      	ldr	r2, [pc, #796]	@ (8013d00 <HAL_RCC_OscConfig+0x68c>)
 80139e2:	4013      	ands	r3, r2
 80139e4:	0019      	movs	r1, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80139ea:	4bc4      	ldr	r3, [pc, #784]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 80139ec:	430a      	orrs	r2, r1
 80139ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80139f0:	4bc2      	ldr	r3, [pc, #776]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	021b      	lsls	r3, r3, #8
 80139f6:	0a19      	lsrs	r1, r3, #8
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6a1b      	ldr	r3, [r3, #32]
 80139fc:	061a      	lsls	r2, r3, #24
 80139fe:	4bbf      	ldr	r3, [pc, #764]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a00:	430a      	orrs	r2, r1
 8013a02:	605a      	str	r2, [r3, #4]
 8013a04:	e019      	b.n	8013a3a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8013a06:	4bbd      	ldr	r3, [pc, #756]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	4bbc      	ldr	r3, [pc, #752]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a0c:	49bd      	ldr	r1, [pc, #756]	@ (8013d04 <HAL_RCC_OscConfig+0x690>)
 8013a0e:	400a      	ands	r2, r1
 8013a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a12:	f7f9 fdcf 	bl	800d5b4 <HAL_GetTick>
 8013a16:	0003      	movs	r3, r0
 8013a18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8013a1a:	e008      	b.n	8013a2e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013a1c:	f7f9 fdca 	bl	800d5b4 <HAL_GetTick>
 8013a20:	0002      	movs	r2, r0
 8013a22:	697b      	ldr	r3, [r7, #20]
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	2b02      	cmp	r3, #2
 8013a28:	d901      	bls.n	8013a2e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8013a2a:	2303      	movs	r3, #3
 8013a2c:	e1eb      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8013a2e:	4bb3      	ldr	r3, [pc, #716]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	2380      	movs	r3, #128	@ 0x80
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	4013      	ands	r3, r2
 8013a38:	d1f0      	bne.n	8013a1c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2208      	movs	r2, #8
 8013a40:	4013      	ands	r3, r2
 8013a42:	d036      	beq.n	8013ab2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	695b      	ldr	r3, [r3, #20]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d019      	beq.n	8013a80 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013a4c:	4bab      	ldr	r3, [pc, #684]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a50:	4baa      	ldr	r3, [pc, #680]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a52:	2101      	movs	r1, #1
 8013a54:	430a      	orrs	r2, r1
 8013a56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013a58:	f7f9 fdac 	bl	800d5b4 <HAL_GetTick>
 8013a5c:	0003      	movs	r3, r0
 8013a5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013a60:	e008      	b.n	8013a74 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013a62:	f7f9 fda7 	bl	800d5b4 <HAL_GetTick>
 8013a66:	0002      	movs	r2, r0
 8013a68:	697b      	ldr	r3, [r7, #20]
 8013a6a:	1ad3      	subs	r3, r2, r3
 8013a6c:	2b02      	cmp	r3, #2
 8013a6e:	d901      	bls.n	8013a74 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8013a70:	2303      	movs	r3, #3
 8013a72:	e1c8      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013a74:	4ba1      	ldr	r3, [pc, #644]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013a78:	2202      	movs	r2, #2
 8013a7a:	4013      	ands	r3, r2
 8013a7c:	d0f1      	beq.n	8013a62 <HAL_RCC_OscConfig+0x3ee>
 8013a7e:	e018      	b.n	8013ab2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013a80:	4b9e      	ldr	r3, [pc, #632]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a84:	4b9d      	ldr	r3, [pc, #628]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013a86:	2101      	movs	r1, #1
 8013a88:	438a      	bics	r2, r1
 8013a8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013a8c:	f7f9 fd92 	bl	800d5b4 <HAL_GetTick>
 8013a90:	0003      	movs	r3, r0
 8013a92:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013a94:	e008      	b.n	8013aa8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013a96:	f7f9 fd8d 	bl	800d5b4 <HAL_GetTick>
 8013a9a:	0002      	movs	r2, r0
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	1ad3      	subs	r3, r2, r3
 8013aa0:	2b02      	cmp	r3, #2
 8013aa2:	d901      	bls.n	8013aa8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8013aa4:	2303      	movs	r3, #3
 8013aa6:	e1ae      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013aa8:	4b94      	ldr	r3, [pc, #592]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013aac:	2202      	movs	r2, #2
 8013aae:	4013      	ands	r3, r2
 8013ab0:	d1f1      	bne.n	8013a96 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	2204      	movs	r2, #4
 8013ab8:	4013      	ands	r3, r2
 8013aba:	d100      	bne.n	8013abe <HAL_RCC_OscConfig+0x44a>
 8013abc:	e0ae      	b.n	8013c1c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013abe:	2023      	movs	r0, #35	@ 0x23
 8013ac0:	183b      	adds	r3, r7, r0
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013aca:	2380      	movs	r3, #128	@ 0x80
 8013acc:	055b      	lsls	r3, r3, #21
 8013ace:	4013      	ands	r3, r2
 8013ad0:	d109      	bne.n	8013ae6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013ad2:	4b8a      	ldr	r3, [pc, #552]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013ad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013ad6:	4b89      	ldr	r3, [pc, #548]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013ad8:	2180      	movs	r1, #128	@ 0x80
 8013ada:	0549      	lsls	r1, r1, #21
 8013adc:	430a      	orrs	r2, r1
 8013ade:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8013ae0:	183b      	adds	r3, r7, r0
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013ae6:	4b88      	ldr	r3, [pc, #544]	@ (8013d08 <HAL_RCC_OscConfig+0x694>)
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	2380      	movs	r3, #128	@ 0x80
 8013aec:	005b      	lsls	r3, r3, #1
 8013aee:	4013      	ands	r3, r2
 8013af0:	d11a      	bne.n	8013b28 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013af2:	4b85      	ldr	r3, [pc, #532]	@ (8013d08 <HAL_RCC_OscConfig+0x694>)
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	4b84      	ldr	r3, [pc, #528]	@ (8013d08 <HAL_RCC_OscConfig+0x694>)
 8013af8:	2180      	movs	r1, #128	@ 0x80
 8013afa:	0049      	lsls	r1, r1, #1
 8013afc:	430a      	orrs	r2, r1
 8013afe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013b00:	f7f9 fd58 	bl	800d5b4 <HAL_GetTick>
 8013b04:	0003      	movs	r3, r0
 8013b06:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b08:	e008      	b.n	8013b1c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013b0a:	f7f9 fd53 	bl	800d5b4 <HAL_GetTick>
 8013b0e:	0002      	movs	r2, r0
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	1ad3      	subs	r3, r2, r3
 8013b14:	2b64      	cmp	r3, #100	@ 0x64
 8013b16:	d901      	bls.n	8013b1c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8013b18:	2303      	movs	r3, #3
 8013b1a:	e174      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b1c:	4b7a      	ldr	r3, [pc, #488]	@ (8013d08 <HAL_RCC_OscConfig+0x694>)
 8013b1e:	681a      	ldr	r2, [r3, #0]
 8013b20:	2380      	movs	r3, #128	@ 0x80
 8013b22:	005b      	lsls	r3, r3, #1
 8013b24:	4013      	ands	r3, r2
 8013b26:	d0f0      	beq.n	8013b0a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	689a      	ldr	r2, [r3, #8]
 8013b2c:	2380      	movs	r3, #128	@ 0x80
 8013b2e:	005b      	lsls	r3, r3, #1
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d107      	bne.n	8013b44 <HAL_RCC_OscConfig+0x4d0>
 8013b34:	4b71      	ldr	r3, [pc, #452]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b38:	4b70      	ldr	r3, [pc, #448]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b3a:	2180      	movs	r1, #128	@ 0x80
 8013b3c:	0049      	lsls	r1, r1, #1
 8013b3e:	430a      	orrs	r2, r1
 8013b40:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b42:	e031      	b.n	8013ba8 <HAL_RCC_OscConfig+0x534>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	689b      	ldr	r3, [r3, #8]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10c      	bne.n	8013b66 <HAL_RCC_OscConfig+0x4f2>
 8013b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b50:	4b6a      	ldr	r3, [pc, #424]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b52:	496c      	ldr	r1, [pc, #432]	@ (8013d04 <HAL_RCC_OscConfig+0x690>)
 8013b54:	400a      	ands	r2, r1
 8013b56:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b58:	4b68      	ldr	r3, [pc, #416]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b5c:	4b67      	ldr	r3, [pc, #412]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b5e:	496b      	ldr	r1, [pc, #428]	@ (8013d0c <HAL_RCC_OscConfig+0x698>)
 8013b60:	400a      	ands	r2, r1
 8013b62:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b64:	e020      	b.n	8013ba8 <HAL_RCC_OscConfig+0x534>
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	689a      	ldr	r2, [r3, #8]
 8013b6a:	23a0      	movs	r3, #160	@ 0xa0
 8013b6c:	00db      	lsls	r3, r3, #3
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d10e      	bne.n	8013b90 <HAL_RCC_OscConfig+0x51c>
 8013b72:	4b62      	ldr	r3, [pc, #392]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b76:	4b61      	ldr	r3, [pc, #388]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b78:	2180      	movs	r1, #128	@ 0x80
 8013b7a:	00c9      	lsls	r1, r1, #3
 8013b7c:	430a      	orrs	r2, r1
 8013b7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b80:	4b5e      	ldr	r3, [pc, #376]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b84:	4b5d      	ldr	r3, [pc, #372]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b86:	2180      	movs	r1, #128	@ 0x80
 8013b88:	0049      	lsls	r1, r1, #1
 8013b8a:	430a      	orrs	r2, r1
 8013b8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b8e:	e00b      	b.n	8013ba8 <HAL_RCC_OscConfig+0x534>
 8013b90:	4b5a      	ldr	r3, [pc, #360]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b94:	4b59      	ldr	r3, [pc, #356]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b96:	495b      	ldr	r1, [pc, #364]	@ (8013d04 <HAL_RCC_OscConfig+0x690>)
 8013b98:	400a      	ands	r2, r1
 8013b9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b9c:	4b57      	ldr	r3, [pc, #348]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013b9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013ba0:	4b56      	ldr	r3, [pc, #344]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013ba2:	495a      	ldr	r1, [pc, #360]	@ (8013d0c <HAL_RCC_OscConfig+0x698>)
 8013ba4:	400a      	ands	r2, r1
 8013ba6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	689b      	ldr	r3, [r3, #8]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d015      	beq.n	8013bdc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013bb0:	f7f9 fd00 	bl	800d5b4 <HAL_GetTick>
 8013bb4:	0003      	movs	r3, r0
 8013bb6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013bb8:	e009      	b.n	8013bce <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013bba:	f7f9 fcfb 	bl	800d5b4 <HAL_GetTick>
 8013bbe:	0002      	movs	r2, r0
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	1ad3      	subs	r3, r2, r3
 8013bc4:	4a52      	ldr	r2, [pc, #328]	@ (8013d10 <HAL_RCC_OscConfig+0x69c>)
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	d901      	bls.n	8013bce <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8013bca:	2303      	movs	r3, #3
 8013bcc:	e11b      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013bce:	4b4b      	ldr	r3, [pc, #300]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013bd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bd2:	2380      	movs	r3, #128	@ 0x80
 8013bd4:	009b      	lsls	r3, r3, #2
 8013bd6:	4013      	ands	r3, r2
 8013bd8:	d0ef      	beq.n	8013bba <HAL_RCC_OscConfig+0x546>
 8013bda:	e014      	b.n	8013c06 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013bdc:	f7f9 fcea 	bl	800d5b4 <HAL_GetTick>
 8013be0:	0003      	movs	r3, r0
 8013be2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013be4:	e009      	b.n	8013bfa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013be6:	f7f9 fce5 	bl	800d5b4 <HAL_GetTick>
 8013bea:	0002      	movs	r2, r0
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	4a47      	ldr	r2, [pc, #284]	@ (8013d10 <HAL_RCC_OscConfig+0x69c>)
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d901      	bls.n	8013bfa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8013bf6:	2303      	movs	r3, #3
 8013bf8:	e105      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013bfa:	4b40      	ldr	r3, [pc, #256]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013bfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bfe:	2380      	movs	r3, #128	@ 0x80
 8013c00:	009b      	lsls	r3, r3, #2
 8013c02:	4013      	ands	r3, r2
 8013c04:	d1ef      	bne.n	8013be6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8013c06:	2323      	movs	r3, #35	@ 0x23
 8013c08:	18fb      	adds	r3, r7, r3
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d105      	bne.n	8013c1c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013c10:	4b3a      	ldr	r3, [pc, #232]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c14:	4b39      	ldr	r3, [pc, #228]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c16:	493f      	ldr	r1, [pc, #252]	@ (8013d14 <HAL_RCC_OscConfig+0x6a0>)
 8013c18:	400a      	ands	r2, r1
 8013c1a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2220      	movs	r2, #32
 8013c22:	4013      	ands	r3, r2
 8013c24:	d049      	beq.n	8013cba <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	699b      	ldr	r3, [r3, #24]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d026      	beq.n	8013c7c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8013c2e:	4b33      	ldr	r3, [pc, #204]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c30:	689a      	ldr	r2, [r3, #8]
 8013c32:	4b32      	ldr	r3, [pc, #200]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c34:	2101      	movs	r1, #1
 8013c36:	430a      	orrs	r2, r1
 8013c38:	609a      	str	r2, [r3, #8]
 8013c3a:	4b30      	ldr	r3, [pc, #192]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c40:	2101      	movs	r1, #1
 8013c42:	430a      	orrs	r2, r1
 8013c44:	635a      	str	r2, [r3, #52]	@ 0x34
 8013c46:	4b34      	ldr	r3, [pc, #208]	@ (8013d18 <HAL_RCC_OscConfig+0x6a4>)
 8013c48:	6a1a      	ldr	r2, [r3, #32]
 8013c4a:	4b33      	ldr	r3, [pc, #204]	@ (8013d18 <HAL_RCC_OscConfig+0x6a4>)
 8013c4c:	2180      	movs	r1, #128	@ 0x80
 8013c4e:	0189      	lsls	r1, r1, #6
 8013c50:	430a      	orrs	r2, r1
 8013c52:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c54:	f7f9 fcae 	bl	800d5b4 <HAL_GetTick>
 8013c58:	0003      	movs	r3, r0
 8013c5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013c5c:	e008      	b.n	8013c70 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013c5e:	f7f9 fca9 	bl	800d5b4 <HAL_GetTick>
 8013c62:	0002      	movs	r2, r0
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	1ad3      	subs	r3, r2, r3
 8013c68:	2b02      	cmp	r3, #2
 8013c6a:	d901      	bls.n	8013c70 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8013c6c:	2303      	movs	r3, #3
 8013c6e:	e0ca      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013c70:	4b22      	ldr	r3, [pc, #136]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c72:	689b      	ldr	r3, [r3, #8]
 8013c74:	2202      	movs	r2, #2
 8013c76:	4013      	ands	r3, r2
 8013c78:	d0f1      	beq.n	8013c5e <HAL_RCC_OscConfig+0x5ea>
 8013c7a:	e01e      	b.n	8013cba <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8013c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c7e:	689a      	ldr	r2, [r3, #8]
 8013c80:	4b1e      	ldr	r3, [pc, #120]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013c82:	2101      	movs	r1, #1
 8013c84:	438a      	bics	r2, r1
 8013c86:	609a      	str	r2, [r3, #8]
 8013c88:	4b23      	ldr	r3, [pc, #140]	@ (8013d18 <HAL_RCC_OscConfig+0x6a4>)
 8013c8a:	6a1a      	ldr	r2, [r3, #32]
 8013c8c:	4b22      	ldr	r3, [pc, #136]	@ (8013d18 <HAL_RCC_OscConfig+0x6a4>)
 8013c8e:	4923      	ldr	r1, [pc, #140]	@ (8013d1c <HAL_RCC_OscConfig+0x6a8>)
 8013c90:	400a      	ands	r2, r1
 8013c92:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c94:	f7f9 fc8e 	bl	800d5b4 <HAL_GetTick>
 8013c98:	0003      	movs	r3, r0
 8013c9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013c9c:	e008      	b.n	8013cb0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013c9e:	f7f9 fc89 	bl	800d5b4 <HAL_GetTick>
 8013ca2:	0002      	movs	r2, r0
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	2b02      	cmp	r3, #2
 8013caa:	d901      	bls.n	8013cb0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8013cac:	2303      	movs	r3, #3
 8013cae:	e0aa      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013cb0:	4b12      	ldr	r3, [pc, #72]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013cb2:	689b      	ldr	r3, [r3, #8]
 8013cb4:	2202      	movs	r2, #2
 8013cb6:	4013      	ands	r3, r2
 8013cb8:	d1f1      	bne.n	8013c9e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d100      	bne.n	8013cc4 <HAL_RCC_OscConfig+0x650>
 8013cc2:	e09f      	b.n	8013e04 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	2b0c      	cmp	r3, #12
 8013cc8:	d100      	bne.n	8013ccc <HAL_RCC_OscConfig+0x658>
 8013cca:	e078      	b.n	8013dbe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cd0:	2b02      	cmp	r3, #2
 8013cd2:	d159      	bne.n	8013d88 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013cd4:	4b09      	ldr	r3, [pc, #36]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	4b08      	ldr	r3, [pc, #32]	@ (8013cfc <HAL_RCC_OscConfig+0x688>)
 8013cda:	4911      	ldr	r1, [pc, #68]	@ (8013d20 <HAL_RCC_OscConfig+0x6ac>)
 8013cdc:	400a      	ands	r2, r1
 8013cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ce0:	f7f9 fc68 	bl	800d5b4 <HAL_GetTick>
 8013ce4:	0003      	movs	r3, r0
 8013ce6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013ce8:	e01c      	b.n	8013d24 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013cea:	f7f9 fc63 	bl	800d5b4 <HAL_GetTick>
 8013cee:	0002      	movs	r2, r0
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	1ad3      	subs	r3, r2, r3
 8013cf4:	2b02      	cmp	r3, #2
 8013cf6:	d915      	bls.n	8013d24 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8013cf8:	2303      	movs	r3, #3
 8013cfa:	e084      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
 8013cfc:	40021000 	.word	0x40021000
 8013d00:	ffff1fff 	.word	0xffff1fff
 8013d04:	fffffeff 	.word	0xfffffeff
 8013d08:	40007000 	.word	0x40007000
 8013d0c:	fffffbff 	.word	0xfffffbff
 8013d10:	00001388 	.word	0x00001388
 8013d14:	efffffff 	.word	0xefffffff
 8013d18:	40010000 	.word	0x40010000
 8013d1c:	ffffdfff 	.word	0xffffdfff
 8013d20:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013d24:	4b3a      	ldr	r3, [pc, #232]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	2380      	movs	r3, #128	@ 0x80
 8013d2a:	049b      	lsls	r3, r3, #18
 8013d2c:	4013      	ands	r3, r2
 8013d2e:	d1dc      	bne.n	8013cea <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013d30:	4b37      	ldr	r3, [pc, #220]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d32:	68db      	ldr	r3, [r3, #12]
 8013d34:	4a37      	ldr	r2, [pc, #220]	@ (8013e14 <HAL_RCC_OscConfig+0x7a0>)
 8013d36:	4013      	ands	r3, r2
 8013d38:	0019      	movs	r1, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d42:	431a      	orrs	r2, r3
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d48:	431a      	orrs	r2, r3
 8013d4a:	4b31      	ldr	r3, [pc, #196]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d4c:	430a      	orrs	r2, r1
 8013d4e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013d50:	4b2f      	ldr	r3, [pc, #188]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	4b2e      	ldr	r3, [pc, #184]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d56:	2180      	movs	r1, #128	@ 0x80
 8013d58:	0449      	lsls	r1, r1, #17
 8013d5a:	430a      	orrs	r2, r1
 8013d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d5e:	f7f9 fc29 	bl	800d5b4 <HAL_GetTick>
 8013d62:	0003      	movs	r3, r0
 8013d64:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8013d66:	e008      	b.n	8013d7a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013d68:	f7f9 fc24 	bl	800d5b4 <HAL_GetTick>
 8013d6c:	0002      	movs	r2, r0
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	1ad3      	subs	r3, r2, r3
 8013d72:	2b02      	cmp	r3, #2
 8013d74:	d901      	bls.n	8013d7a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8013d76:	2303      	movs	r3, #3
 8013d78:	e045      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8013d7a:	4b25      	ldr	r3, [pc, #148]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	2380      	movs	r3, #128	@ 0x80
 8013d80:	049b      	lsls	r3, r3, #18
 8013d82:	4013      	ands	r3, r2
 8013d84:	d0f0      	beq.n	8013d68 <HAL_RCC_OscConfig+0x6f4>
 8013d86:	e03d      	b.n	8013e04 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013d88:	4b21      	ldr	r3, [pc, #132]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	4b20      	ldr	r3, [pc, #128]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013d8e:	4922      	ldr	r1, [pc, #136]	@ (8013e18 <HAL_RCC_OscConfig+0x7a4>)
 8013d90:	400a      	ands	r2, r1
 8013d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d94:	f7f9 fc0e 	bl	800d5b4 <HAL_GetTick>
 8013d98:	0003      	movs	r3, r0
 8013d9a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013d9c:	e008      	b.n	8013db0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013d9e:	f7f9 fc09 	bl	800d5b4 <HAL_GetTick>
 8013da2:	0002      	movs	r2, r0
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	1ad3      	subs	r3, r2, r3
 8013da8:	2b02      	cmp	r3, #2
 8013daa:	d901      	bls.n	8013db0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8013dac:	2303      	movs	r3, #3
 8013dae:	e02a      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013db0:	4b17      	ldr	r3, [pc, #92]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	2380      	movs	r3, #128	@ 0x80
 8013db6:	049b      	lsls	r3, r3, #18
 8013db8:	4013      	ands	r3, r2
 8013dba:	d1f0      	bne.n	8013d9e <HAL_RCC_OscConfig+0x72a>
 8013dbc:	e022      	b.n	8013e04 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d101      	bne.n	8013dca <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	e01d      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8013dca:	4b11      	ldr	r3, [pc, #68]	@ (8013e10 <HAL_RCC_OscConfig+0x79c>)
 8013dcc:	68db      	ldr	r3, [r3, #12]
 8013dce:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013dd0:	69ba      	ldr	r2, [r7, #24]
 8013dd2:	2380      	movs	r3, #128	@ 0x80
 8013dd4:	025b      	lsls	r3, r3, #9
 8013dd6:	401a      	ands	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d10f      	bne.n	8013e00 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8013de0:	69ba      	ldr	r2, [r7, #24]
 8013de2:	23f0      	movs	r3, #240	@ 0xf0
 8013de4:	039b      	lsls	r3, r3, #14
 8013de6:	401a      	ands	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d107      	bne.n	8013e00 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8013df0:	69ba      	ldr	r2, [r7, #24]
 8013df2:	23c0      	movs	r3, #192	@ 0xc0
 8013df4:	041b      	lsls	r3, r3, #16
 8013df6:	401a      	ands	r2, r3
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d001      	beq.n	8013e04 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8013e00:	2301      	movs	r3, #1
 8013e02:	e000      	b.n	8013e06 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8013e04:	2300      	movs	r3, #0
}
 8013e06:	0018      	movs	r0, r3
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	b00a      	add	sp, #40	@ 0x28
 8013e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8013e0e:	46c0      	nop			@ (mov r8, r8)
 8013e10:	40021000 	.word	0x40021000
 8013e14:	ff02ffff 	.word	0xff02ffff
 8013e18:	feffffff 	.word	0xfeffffff

08013e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013e1c:	b5b0      	push	{r4, r5, r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d101      	bne.n	8013e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e128      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013e30:	4b96      	ldr	r3, [pc, #600]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	2201      	movs	r2, #1
 8013e36:	4013      	ands	r3, r2
 8013e38:	683a      	ldr	r2, [r7, #0]
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d91e      	bls.n	8013e7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013e3e:	4b93      	ldr	r3, [pc, #588]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	2201      	movs	r2, #1
 8013e44:	4393      	bics	r3, r2
 8013e46:	0019      	movs	r1, r3
 8013e48:	4b90      	ldr	r3, [pc, #576]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013e4a:	683a      	ldr	r2, [r7, #0]
 8013e4c:	430a      	orrs	r2, r1
 8013e4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8013e50:	f7f9 fbb0 	bl	800d5b4 <HAL_GetTick>
 8013e54:	0003      	movs	r3, r0
 8013e56:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013e58:	e009      	b.n	8013e6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013e5a:	f7f9 fbab 	bl	800d5b4 <HAL_GetTick>
 8013e5e:	0002      	movs	r2, r0
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	1ad3      	subs	r3, r2, r3
 8013e64:	4a8a      	ldr	r2, [pc, #552]	@ (8014090 <HAL_RCC_ClockConfig+0x274>)
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d901      	bls.n	8013e6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8013e6a:	2303      	movs	r3, #3
 8013e6c:	e109      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013e6e:	4b87      	ldr	r3, [pc, #540]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2201      	movs	r2, #1
 8013e74:	4013      	ands	r3, r2
 8013e76:	683a      	ldr	r2, [r7, #0]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d1ee      	bne.n	8013e5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2202      	movs	r2, #2
 8013e82:	4013      	ands	r3, r2
 8013e84:	d009      	beq.n	8013e9a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013e86:	4b83      	ldr	r3, [pc, #524]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	22f0      	movs	r2, #240	@ 0xf0
 8013e8c:	4393      	bics	r3, r2
 8013e8e:	0019      	movs	r1, r3
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	689a      	ldr	r2, [r3, #8]
 8013e94:	4b7f      	ldr	r3, [pc, #508]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013e96:	430a      	orrs	r2, r1
 8013e98:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2201      	movs	r2, #1
 8013ea0:	4013      	ands	r3, r2
 8013ea2:	d100      	bne.n	8013ea6 <HAL_RCC_ClockConfig+0x8a>
 8013ea4:	e089      	b.n	8013fba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	685b      	ldr	r3, [r3, #4]
 8013eaa:	2b02      	cmp	r3, #2
 8013eac:	d107      	bne.n	8013ebe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013eae:	4b79      	ldr	r3, [pc, #484]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013eb0:	681a      	ldr	r2, [r3, #0]
 8013eb2:	2380      	movs	r3, #128	@ 0x80
 8013eb4:	029b      	lsls	r3, r3, #10
 8013eb6:	4013      	ands	r3, r2
 8013eb8:	d120      	bne.n	8013efc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013eba:	2301      	movs	r3, #1
 8013ebc:	e0e1      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	685b      	ldr	r3, [r3, #4]
 8013ec2:	2b03      	cmp	r3, #3
 8013ec4:	d107      	bne.n	8013ed6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013ec6:	4b73      	ldr	r3, [pc, #460]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	2380      	movs	r3, #128	@ 0x80
 8013ecc:	049b      	lsls	r3, r3, #18
 8013ece:	4013      	ands	r3, r2
 8013ed0:	d114      	bne.n	8013efc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	e0d5      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	d106      	bne.n	8013eec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013ede:	4b6d      	ldr	r3, [pc, #436]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2204      	movs	r2, #4
 8013ee4:	4013      	ands	r3, r2
 8013ee6:	d109      	bne.n	8013efc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013ee8:	2301      	movs	r3, #1
 8013eea:	e0ca      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8013eec:	4b69      	ldr	r3, [pc, #420]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013eee:	681a      	ldr	r2, [r3, #0]
 8013ef0:	2380      	movs	r3, #128	@ 0x80
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	4013      	ands	r3, r2
 8013ef6:	d101      	bne.n	8013efc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	e0c2      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013efc:	4b65      	ldr	r3, [pc, #404]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	2203      	movs	r2, #3
 8013f02:	4393      	bics	r3, r2
 8013f04:	0019      	movs	r1, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	685a      	ldr	r2, [r3, #4]
 8013f0a:	4b62      	ldr	r3, [pc, #392]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013f0c:	430a      	orrs	r2, r1
 8013f0e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013f10:	f7f9 fb50 	bl	800d5b4 <HAL_GetTick>
 8013f14:	0003      	movs	r3, r0
 8013f16:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	2b02      	cmp	r3, #2
 8013f1e:	d111      	bne.n	8013f44 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013f20:	e009      	b.n	8013f36 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f22:	f7f9 fb47 	bl	800d5b4 <HAL_GetTick>
 8013f26:	0002      	movs	r2, r0
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	4a58      	ldr	r2, [pc, #352]	@ (8014090 <HAL_RCC_ClockConfig+0x274>)
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	d901      	bls.n	8013f36 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8013f32:	2303      	movs	r3, #3
 8013f34:	e0a5      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013f36:	4b57      	ldr	r3, [pc, #348]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013f38:	68db      	ldr	r3, [r3, #12]
 8013f3a:	220c      	movs	r2, #12
 8013f3c:	4013      	ands	r3, r2
 8013f3e:	2b08      	cmp	r3, #8
 8013f40:	d1ef      	bne.n	8013f22 <HAL_RCC_ClockConfig+0x106>
 8013f42:	e03a      	b.n	8013fba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	685b      	ldr	r3, [r3, #4]
 8013f48:	2b03      	cmp	r3, #3
 8013f4a:	d111      	bne.n	8013f70 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013f4c:	e009      	b.n	8013f62 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f4e:	f7f9 fb31 	bl	800d5b4 <HAL_GetTick>
 8013f52:	0002      	movs	r2, r0
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	1ad3      	subs	r3, r2, r3
 8013f58:	4a4d      	ldr	r2, [pc, #308]	@ (8014090 <HAL_RCC_ClockConfig+0x274>)
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d901      	bls.n	8013f62 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8013f5e:	2303      	movs	r3, #3
 8013f60:	e08f      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013f62:	4b4c      	ldr	r3, [pc, #304]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013f64:	68db      	ldr	r3, [r3, #12]
 8013f66:	220c      	movs	r2, #12
 8013f68:	4013      	ands	r3, r2
 8013f6a:	2b0c      	cmp	r3, #12
 8013f6c:	d1ef      	bne.n	8013f4e <HAL_RCC_ClockConfig+0x132>
 8013f6e:	e024      	b.n	8013fba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	d11b      	bne.n	8013fb0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013f78:	e009      	b.n	8013f8e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f7a:	f7f9 fb1b 	bl	800d5b4 <HAL_GetTick>
 8013f7e:	0002      	movs	r2, r0
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	1ad3      	subs	r3, r2, r3
 8013f84:	4a42      	ldr	r2, [pc, #264]	@ (8014090 <HAL_RCC_ClockConfig+0x274>)
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d901      	bls.n	8013f8e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8013f8a:	2303      	movs	r3, #3
 8013f8c:	e079      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013f8e:	4b41      	ldr	r3, [pc, #260]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013f90:	68db      	ldr	r3, [r3, #12]
 8013f92:	220c      	movs	r2, #12
 8013f94:	4013      	ands	r3, r2
 8013f96:	2b04      	cmp	r3, #4
 8013f98:	d1ef      	bne.n	8013f7a <HAL_RCC_ClockConfig+0x15e>
 8013f9a:	e00e      	b.n	8013fba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f9c:	f7f9 fb0a 	bl	800d5b4 <HAL_GetTick>
 8013fa0:	0002      	movs	r2, r0
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	1ad3      	subs	r3, r2, r3
 8013fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8014090 <HAL_RCC_ClockConfig+0x274>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d901      	bls.n	8013fb0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8013fac:	2303      	movs	r3, #3
 8013fae:	e068      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8013fb0:	4b38      	ldr	r3, [pc, #224]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	220c      	movs	r2, #12
 8013fb6:	4013      	ands	r3, r2
 8013fb8:	d1f0      	bne.n	8013f9c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013fba:	4b34      	ldr	r3, [pc, #208]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	4013      	ands	r3, r2
 8013fc2:	683a      	ldr	r2, [r7, #0]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d21e      	bcs.n	8014006 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013fc8:	4b30      	ldr	r3, [pc, #192]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2201      	movs	r2, #1
 8013fce:	4393      	bics	r3, r2
 8013fd0:	0019      	movs	r1, r3
 8013fd2:	4b2e      	ldr	r3, [pc, #184]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013fd4:	683a      	ldr	r2, [r7, #0]
 8013fd6:	430a      	orrs	r2, r1
 8013fd8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8013fda:	f7f9 faeb 	bl	800d5b4 <HAL_GetTick>
 8013fde:	0003      	movs	r3, r0
 8013fe0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013fe2:	e009      	b.n	8013ff8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013fe4:	f7f9 fae6 	bl	800d5b4 <HAL_GetTick>
 8013fe8:	0002      	movs	r2, r0
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	1ad3      	subs	r3, r2, r3
 8013fee:	4a28      	ldr	r2, [pc, #160]	@ (8014090 <HAL_RCC_ClockConfig+0x274>)
 8013ff0:	4293      	cmp	r3, r2
 8013ff2:	d901      	bls.n	8013ff8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8013ff4:	2303      	movs	r3, #3
 8013ff6:	e044      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013ff8:	4b24      	ldr	r3, [pc, #144]	@ (801408c <HAL_RCC_ClockConfig+0x270>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	4013      	ands	r3, r2
 8014000:	683a      	ldr	r2, [r7, #0]
 8014002:	429a      	cmp	r2, r3
 8014004:	d1ee      	bne.n	8013fe4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	2204      	movs	r2, #4
 801400c:	4013      	ands	r3, r2
 801400e:	d009      	beq.n	8014024 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014010:	4b20      	ldr	r3, [pc, #128]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	4a20      	ldr	r2, [pc, #128]	@ (8014098 <HAL_RCC_ClockConfig+0x27c>)
 8014016:	4013      	ands	r3, r2
 8014018:	0019      	movs	r1, r3
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	68da      	ldr	r2, [r3, #12]
 801401e:	4b1d      	ldr	r3, [pc, #116]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8014020:	430a      	orrs	r2, r1
 8014022:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	2208      	movs	r2, #8
 801402a:	4013      	ands	r3, r2
 801402c:	d00a      	beq.n	8014044 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801402e:	4b19      	ldr	r3, [pc, #100]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	4a1a      	ldr	r2, [pc, #104]	@ (801409c <HAL_RCC_ClockConfig+0x280>)
 8014034:	4013      	ands	r3, r2
 8014036:	0019      	movs	r1, r3
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	691b      	ldr	r3, [r3, #16]
 801403c:	00da      	lsls	r2, r3, #3
 801403e:	4b15      	ldr	r3, [pc, #84]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 8014040:	430a      	orrs	r2, r1
 8014042:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014044:	f000 f832 	bl	80140ac <HAL_RCC_GetSysClockFreq>
 8014048:	0001      	movs	r1, r0
 801404a:	4b12      	ldr	r3, [pc, #72]	@ (8014094 <HAL_RCC_ClockConfig+0x278>)
 801404c:	68db      	ldr	r3, [r3, #12]
 801404e:	091b      	lsrs	r3, r3, #4
 8014050:	220f      	movs	r2, #15
 8014052:	4013      	ands	r3, r2
 8014054:	4a12      	ldr	r2, [pc, #72]	@ (80140a0 <HAL_RCC_ClockConfig+0x284>)
 8014056:	5cd3      	ldrb	r3, [r2, r3]
 8014058:	000a      	movs	r2, r1
 801405a:	40da      	lsrs	r2, r3
 801405c:	4b11      	ldr	r3, [pc, #68]	@ (80140a4 <HAL_RCC_ClockConfig+0x288>)
 801405e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014060:	4b11      	ldr	r3, [pc, #68]	@ (80140a8 <HAL_RCC_ClockConfig+0x28c>)
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	250b      	movs	r5, #11
 8014066:	197c      	adds	r4, r7, r5
 8014068:	0018      	movs	r0, r3
 801406a:	f7f9 fa5d 	bl	800d528 <HAL_InitTick>
 801406e:	0003      	movs	r3, r0
 8014070:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8014072:	197b      	adds	r3, r7, r5
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d002      	beq.n	8014080 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801407a:	197b      	adds	r3, r7, r5
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	e000      	b.n	8014082 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8014080:	2300      	movs	r3, #0
}
 8014082:	0018      	movs	r0, r3
 8014084:	46bd      	mov	sp, r7
 8014086:	b004      	add	sp, #16
 8014088:	bdb0      	pop	{r4, r5, r7, pc}
 801408a:	46c0      	nop			@ (mov r8, r8)
 801408c:	40022000 	.word	0x40022000
 8014090:	00001388 	.word	0x00001388
 8014094:	40021000 	.word	0x40021000
 8014098:	fffff8ff 	.word	0xfffff8ff
 801409c:	ffffc7ff 	.word	0xffffc7ff
 80140a0:	08023344 	.word	0x08023344
 80140a4:	200000cc 	.word	0x200000cc
 80140a8:	200000dc 	.word	0x200000dc

080140ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80140ac:	b5b0      	push	{r4, r5, r7, lr}
 80140ae:	b08e      	sub	sp, #56	@ 0x38
 80140b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80140b2:	4b4c      	ldr	r3, [pc, #304]	@ (80141e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80140b4:	68db      	ldr	r3, [r3, #12]
 80140b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80140b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140ba:	230c      	movs	r3, #12
 80140bc:	4013      	ands	r3, r2
 80140be:	2b0c      	cmp	r3, #12
 80140c0:	d014      	beq.n	80140ec <HAL_RCC_GetSysClockFreq+0x40>
 80140c2:	d900      	bls.n	80140c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80140c4:	e07b      	b.n	80141be <HAL_RCC_GetSysClockFreq+0x112>
 80140c6:	2b04      	cmp	r3, #4
 80140c8:	d002      	beq.n	80140d0 <HAL_RCC_GetSysClockFreq+0x24>
 80140ca:	2b08      	cmp	r3, #8
 80140cc:	d00b      	beq.n	80140e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80140ce:	e076      	b.n	80141be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80140d0:	4b44      	ldr	r3, [pc, #272]	@ (80141e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	2210      	movs	r2, #16
 80140d6:	4013      	ands	r3, r2
 80140d8:	d002      	beq.n	80140e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80140da:	4b43      	ldr	r3, [pc, #268]	@ (80141e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80140dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80140de:	e07c      	b.n	80141da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80140e0:	4b42      	ldr	r3, [pc, #264]	@ (80141ec <HAL_RCC_GetSysClockFreq+0x140>)
 80140e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80140e4:	e079      	b.n	80141da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80140e6:	4b42      	ldr	r3, [pc, #264]	@ (80141f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80140e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80140ea:	e076      	b.n	80141da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80140ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ee:	0c9a      	lsrs	r2, r3, #18
 80140f0:	230f      	movs	r3, #15
 80140f2:	401a      	ands	r2, r3
 80140f4:	4b3f      	ldr	r3, [pc, #252]	@ (80141f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80140f6:	5c9b      	ldrb	r3, [r3, r2]
 80140f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80140fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140fc:	0d9a      	lsrs	r2, r3, #22
 80140fe:	2303      	movs	r3, #3
 8014100:	4013      	ands	r3, r2
 8014102:	3301      	adds	r3, #1
 8014104:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014106:	4b37      	ldr	r3, [pc, #220]	@ (80141e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8014108:	68da      	ldr	r2, [r3, #12]
 801410a:	2380      	movs	r3, #128	@ 0x80
 801410c:	025b      	lsls	r3, r3, #9
 801410e:	4013      	ands	r3, r2
 8014110:	d01a      	beq.n	8014148 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014114:	61bb      	str	r3, [r7, #24]
 8014116:	2300      	movs	r3, #0
 8014118:	61fb      	str	r3, [r7, #28]
 801411a:	4a35      	ldr	r2, [pc, #212]	@ (80141f0 <HAL_RCC_GetSysClockFreq+0x144>)
 801411c:	2300      	movs	r3, #0
 801411e:	69b8      	ldr	r0, [r7, #24]
 8014120:	69f9      	ldr	r1, [r7, #28]
 8014122:	f7ec fa4d 	bl	80005c0 <__aeabi_lmul>
 8014126:	0002      	movs	r2, r0
 8014128:	000b      	movs	r3, r1
 801412a:	0010      	movs	r0, r2
 801412c:	0019      	movs	r1, r3
 801412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014130:	613b      	str	r3, [r7, #16]
 8014132:	2300      	movs	r3, #0
 8014134:	617b      	str	r3, [r7, #20]
 8014136:	693a      	ldr	r2, [r7, #16]
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	f7ec fa21 	bl	8000580 <__aeabi_uldivmod>
 801413e:	0002      	movs	r2, r0
 8014140:	000b      	movs	r3, r1
 8014142:	0013      	movs	r3, r2
 8014144:	637b      	str	r3, [r7, #52]	@ 0x34
 8014146:	e037      	b.n	80141b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014148:	4b26      	ldr	r3, [pc, #152]	@ (80141e4 <HAL_RCC_GetSysClockFreq+0x138>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2210      	movs	r2, #16
 801414e:	4013      	ands	r3, r2
 8014150:	d01a      	beq.n	8014188 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8014152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014154:	60bb      	str	r3, [r7, #8]
 8014156:	2300      	movs	r3, #0
 8014158:	60fb      	str	r3, [r7, #12]
 801415a:	4a23      	ldr	r2, [pc, #140]	@ (80141e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 801415c:	2300      	movs	r3, #0
 801415e:	68b8      	ldr	r0, [r7, #8]
 8014160:	68f9      	ldr	r1, [r7, #12]
 8014162:	f7ec fa2d 	bl	80005c0 <__aeabi_lmul>
 8014166:	0002      	movs	r2, r0
 8014168:	000b      	movs	r3, r1
 801416a:	0010      	movs	r0, r2
 801416c:	0019      	movs	r1, r3
 801416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014170:	603b      	str	r3, [r7, #0]
 8014172:	2300      	movs	r3, #0
 8014174:	607b      	str	r3, [r7, #4]
 8014176:	683a      	ldr	r2, [r7, #0]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f7ec fa01 	bl	8000580 <__aeabi_uldivmod>
 801417e:	0002      	movs	r2, r0
 8014180:	000b      	movs	r3, r1
 8014182:	0013      	movs	r3, r2
 8014184:	637b      	str	r3, [r7, #52]	@ 0x34
 8014186:	e017      	b.n	80141b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801418a:	0018      	movs	r0, r3
 801418c:	2300      	movs	r3, #0
 801418e:	0019      	movs	r1, r3
 8014190:	4a16      	ldr	r2, [pc, #88]	@ (80141ec <HAL_RCC_GetSysClockFreq+0x140>)
 8014192:	2300      	movs	r3, #0
 8014194:	f7ec fa14 	bl	80005c0 <__aeabi_lmul>
 8014198:	0002      	movs	r2, r0
 801419a:	000b      	movs	r3, r1
 801419c:	0010      	movs	r0, r2
 801419e:	0019      	movs	r1, r3
 80141a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141a2:	001c      	movs	r4, r3
 80141a4:	2300      	movs	r3, #0
 80141a6:	001d      	movs	r5, r3
 80141a8:	0022      	movs	r2, r4
 80141aa:	002b      	movs	r3, r5
 80141ac:	f7ec f9e8 	bl	8000580 <__aeabi_uldivmod>
 80141b0:	0002      	movs	r2, r0
 80141b2:	000b      	movs	r3, r1
 80141b4:	0013      	movs	r3, r2
 80141b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80141b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80141bc:	e00d      	b.n	80141da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80141be:	4b09      	ldr	r3, [pc, #36]	@ (80141e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	0b5b      	lsrs	r3, r3, #13
 80141c4:	2207      	movs	r2, #7
 80141c6:	4013      	ands	r3, r2
 80141c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80141ca:	6a3b      	ldr	r3, [r7, #32]
 80141cc:	3301      	adds	r3, #1
 80141ce:	2280      	movs	r2, #128	@ 0x80
 80141d0:	0212      	lsls	r2, r2, #8
 80141d2:	409a      	lsls	r2, r3
 80141d4:	0013      	movs	r3, r2
 80141d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80141d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80141da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80141dc:	0018      	movs	r0, r3
 80141de:	46bd      	mov	sp, r7
 80141e0:	b00e      	add	sp, #56	@ 0x38
 80141e2:	bdb0      	pop	{r4, r5, r7, pc}
 80141e4:	40021000 	.word	0x40021000
 80141e8:	003d0900 	.word	0x003d0900
 80141ec:	00f42400 	.word	0x00f42400
 80141f0:	007a1200 	.word	0x007a1200
 80141f4:	0802335c 	.word	0x0802335c

080141f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80141fc:	4b02      	ldr	r3, [pc, #8]	@ (8014208 <HAL_RCC_GetHCLKFreq+0x10>)
 80141fe:	681b      	ldr	r3, [r3, #0]
}
 8014200:	0018      	movs	r0, r3
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}
 8014206:	46c0      	nop			@ (mov r8, r8)
 8014208:	200000cc 	.word	0x200000cc

0801420c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014210:	f7ff fff2 	bl	80141f8 <HAL_RCC_GetHCLKFreq>
 8014214:	0001      	movs	r1, r0
 8014216:	4b06      	ldr	r3, [pc, #24]	@ (8014230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014218:	68db      	ldr	r3, [r3, #12]
 801421a:	0a1b      	lsrs	r3, r3, #8
 801421c:	2207      	movs	r2, #7
 801421e:	4013      	ands	r3, r2
 8014220:	4a04      	ldr	r2, [pc, #16]	@ (8014234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014222:	5cd3      	ldrb	r3, [r2, r3]
 8014224:	40d9      	lsrs	r1, r3
 8014226:	000b      	movs	r3, r1
}
 8014228:	0018      	movs	r0, r3
 801422a:	46bd      	mov	sp, r7
 801422c:	bd80      	pop	{r7, pc}
 801422e:	46c0      	nop			@ (mov r8, r8)
 8014230:	40021000 	.word	0x40021000
 8014234:	08023354 	.word	0x08023354

08014238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801423c:	f7ff ffdc 	bl	80141f8 <HAL_RCC_GetHCLKFreq>
 8014240:	0001      	movs	r1, r0
 8014242:	4b06      	ldr	r3, [pc, #24]	@ (801425c <HAL_RCC_GetPCLK2Freq+0x24>)
 8014244:	68db      	ldr	r3, [r3, #12]
 8014246:	0adb      	lsrs	r3, r3, #11
 8014248:	2207      	movs	r2, #7
 801424a:	4013      	ands	r3, r2
 801424c:	4a04      	ldr	r2, [pc, #16]	@ (8014260 <HAL_RCC_GetPCLK2Freq+0x28>)
 801424e:	5cd3      	ldrb	r3, [r2, r3]
 8014250:	40d9      	lsrs	r1, r3
 8014252:	000b      	movs	r3, r1
}
 8014254:	0018      	movs	r0, r3
 8014256:	46bd      	mov	sp, r7
 8014258:	bd80      	pop	{r7, pc}
 801425a:	46c0      	nop			@ (mov r8, r8)
 801425c:	40021000 	.word	0x40021000
 8014260:	08023354 	.word	0x08023354

08014264 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b086      	sub	sp, #24
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801426c:	2017      	movs	r0, #23
 801426e:	183b      	adds	r3, r7, r0
 8014270:	2200      	movs	r2, #0
 8014272:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	2220      	movs	r2, #32
 801427a:	4013      	ands	r3, r2
 801427c:	d100      	bne.n	8014280 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801427e:	e0c7      	b.n	8014410 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014280:	4b9b      	ldr	r3, [pc, #620]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014284:	2380      	movs	r3, #128	@ 0x80
 8014286:	055b      	lsls	r3, r3, #21
 8014288:	4013      	ands	r3, r2
 801428a:	d109      	bne.n	80142a0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801428c:	4b98      	ldr	r3, [pc, #608]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801428e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014290:	4b97      	ldr	r3, [pc, #604]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014292:	2180      	movs	r1, #128	@ 0x80
 8014294:	0549      	lsls	r1, r1, #21
 8014296:	430a      	orrs	r2, r1
 8014298:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801429a:	183b      	adds	r3, r7, r0
 801429c:	2201      	movs	r2, #1
 801429e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80142a0:	4b94      	ldr	r3, [pc, #592]	@ (80144f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80142a2:	681a      	ldr	r2, [r3, #0]
 80142a4:	2380      	movs	r3, #128	@ 0x80
 80142a6:	005b      	lsls	r3, r3, #1
 80142a8:	4013      	ands	r3, r2
 80142aa:	d11a      	bne.n	80142e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80142ac:	4b91      	ldr	r3, [pc, #580]	@ (80144f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	4b90      	ldr	r3, [pc, #576]	@ (80144f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80142b2:	2180      	movs	r1, #128	@ 0x80
 80142b4:	0049      	lsls	r1, r1, #1
 80142b6:	430a      	orrs	r2, r1
 80142b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80142ba:	f7f9 f97b 	bl	800d5b4 <HAL_GetTick>
 80142be:	0003      	movs	r3, r0
 80142c0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80142c2:	e008      	b.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80142c4:	f7f9 f976 	bl	800d5b4 <HAL_GetTick>
 80142c8:	0002      	movs	r2, r0
 80142ca:	693b      	ldr	r3, [r7, #16]
 80142cc:	1ad3      	subs	r3, r2, r3
 80142ce:	2b64      	cmp	r3, #100	@ 0x64
 80142d0:	d901      	bls.n	80142d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80142d2:	2303      	movs	r3, #3
 80142d4:	e107      	b.n	80144e6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80142d6:	4b87      	ldr	r3, [pc, #540]	@ (80144f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80142d8:	681a      	ldr	r2, [r3, #0]
 80142da:	2380      	movs	r3, #128	@ 0x80
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	4013      	ands	r3, r2
 80142e0:	d0f0      	beq.n	80142c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80142e2:	4b83      	ldr	r3, [pc, #524]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80142e4:	681a      	ldr	r2, [r3, #0]
 80142e6:	23c0      	movs	r3, #192	@ 0xc0
 80142e8:	039b      	lsls	r3, r3, #14
 80142ea:	4013      	ands	r3, r2
 80142ec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	685a      	ldr	r2, [r3, #4]
 80142f2:	23c0      	movs	r3, #192	@ 0xc0
 80142f4:	039b      	lsls	r3, r3, #14
 80142f6:	4013      	ands	r3, r2
 80142f8:	68fa      	ldr	r2, [r7, #12]
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d013      	beq.n	8014326 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	685a      	ldr	r2, [r3, #4]
 8014302:	23c0      	movs	r3, #192	@ 0xc0
 8014304:	029b      	lsls	r3, r3, #10
 8014306:	401a      	ands	r2, r3
 8014308:	23c0      	movs	r3, #192	@ 0xc0
 801430a:	029b      	lsls	r3, r3, #10
 801430c:	429a      	cmp	r2, r3
 801430e:	d10a      	bne.n	8014326 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014310:	4b77      	ldr	r3, [pc, #476]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	2380      	movs	r3, #128	@ 0x80
 8014316:	029b      	lsls	r3, r3, #10
 8014318:	401a      	ands	r2, r3
 801431a:	2380      	movs	r3, #128	@ 0x80
 801431c:	029b      	lsls	r3, r3, #10
 801431e:	429a      	cmp	r2, r3
 8014320:	d101      	bne.n	8014326 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8014322:	2301      	movs	r3, #1
 8014324:	e0df      	b.n	80144e6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8014326:	4b72      	ldr	r3, [pc, #456]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014328:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801432a:	23c0      	movs	r3, #192	@ 0xc0
 801432c:	029b      	lsls	r3, r3, #10
 801432e:	4013      	ands	r3, r2
 8014330:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d03b      	beq.n	80143b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	685a      	ldr	r2, [r3, #4]
 801433c:	23c0      	movs	r3, #192	@ 0xc0
 801433e:	029b      	lsls	r3, r3, #10
 8014340:	4013      	ands	r3, r2
 8014342:	68fa      	ldr	r2, [r7, #12]
 8014344:	429a      	cmp	r2, r3
 8014346:	d033      	beq.n	80143b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	2220      	movs	r2, #32
 801434e:	4013      	ands	r3, r2
 8014350:	d02e      	beq.n	80143b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8014352:	4b67      	ldr	r3, [pc, #412]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014356:	4a68      	ldr	r2, [pc, #416]	@ (80144f8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014358:	4013      	ands	r3, r2
 801435a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801435c:	4b64      	ldr	r3, [pc, #400]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801435e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014360:	4b63      	ldr	r3, [pc, #396]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014362:	2180      	movs	r1, #128	@ 0x80
 8014364:	0309      	lsls	r1, r1, #12
 8014366:	430a      	orrs	r2, r1
 8014368:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801436a:	4b61      	ldr	r3, [pc, #388]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801436c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801436e:	4b60      	ldr	r3, [pc, #384]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014370:	4962      	ldr	r1, [pc, #392]	@ (80144fc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8014372:	400a      	ands	r2, r1
 8014374:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8014376:	4b5e      	ldr	r3, [pc, #376]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014378:	68fa      	ldr	r2, [r7, #12]
 801437a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801437c:	68fa      	ldr	r2, [r7, #12]
 801437e:	2380      	movs	r3, #128	@ 0x80
 8014380:	005b      	lsls	r3, r3, #1
 8014382:	4013      	ands	r3, r2
 8014384:	d014      	beq.n	80143b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014386:	f7f9 f915 	bl	800d5b4 <HAL_GetTick>
 801438a:	0003      	movs	r3, r0
 801438c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801438e:	e009      	b.n	80143a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014390:	f7f9 f910 	bl	800d5b4 <HAL_GetTick>
 8014394:	0002      	movs	r2, r0
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	1ad3      	subs	r3, r2, r3
 801439a:	4a59      	ldr	r2, [pc, #356]	@ (8014500 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801439c:	4293      	cmp	r3, r2
 801439e:	d901      	bls.n	80143a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80143a0:	2303      	movs	r3, #3
 80143a2:	e0a0      	b.n	80144e6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80143a4:	4b52      	ldr	r3, [pc, #328]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80143a8:	2380      	movs	r3, #128	@ 0x80
 80143aa:	009b      	lsls	r3, r3, #2
 80143ac:	4013      	ands	r3, r2
 80143ae:	d0ef      	beq.n	8014390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2220      	movs	r2, #32
 80143b6:	4013      	ands	r3, r2
 80143b8:	d01f      	beq.n	80143fa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	685a      	ldr	r2, [r3, #4]
 80143be:	23c0      	movs	r3, #192	@ 0xc0
 80143c0:	029b      	lsls	r3, r3, #10
 80143c2:	401a      	ands	r2, r3
 80143c4:	23c0      	movs	r3, #192	@ 0xc0
 80143c6:	029b      	lsls	r3, r3, #10
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d10c      	bne.n	80143e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80143cc:	4b48      	ldr	r3, [pc, #288]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4a4c      	ldr	r2, [pc, #304]	@ (8014504 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80143d2:	4013      	ands	r3, r2
 80143d4:	0019      	movs	r1, r3
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	685a      	ldr	r2, [r3, #4]
 80143da:	23c0      	movs	r3, #192	@ 0xc0
 80143dc:	039b      	lsls	r3, r3, #14
 80143de:	401a      	ands	r2, r3
 80143e0:	4b43      	ldr	r3, [pc, #268]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143e2:	430a      	orrs	r2, r1
 80143e4:	601a      	str	r2, [r3, #0]
 80143e6:	4b42      	ldr	r3, [pc, #264]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	685a      	ldr	r2, [r3, #4]
 80143ee:	23c0      	movs	r3, #192	@ 0xc0
 80143f0:	029b      	lsls	r3, r3, #10
 80143f2:	401a      	ands	r2, r3
 80143f4:	4b3e      	ldr	r3, [pc, #248]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143f6:	430a      	orrs	r2, r1
 80143f8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80143fa:	2317      	movs	r3, #23
 80143fc:	18fb      	adds	r3, r7, r3
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	2b01      	cmp	r3, #1
 8014402:	d105      	bne.n	8014410 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014404:	4b3a      	ldr	r3, [pc, #232]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014408:	4b39      	ldr	r3, [pc, #228]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801440a:	493f      	ldr	r1, [pc, #252]	@ (8014508 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801440c:	400a      	ands	r2, r1
 801440e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	2201      	movs	r2, #1
 8014416:	4013      	ands	r3, r2
 8014418:	d009      	beq.n	801442e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801441a:	4b35      	ldr	r3, [pc, #212]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801441c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801441e:	2203      	movs	r2, #3
 8014420:	4393      	bics	r3, r2
 8014422:	0019      	movs	r1, r3
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	689a      	ldr	r2, [r3, #8]
 8014428:	4b31      	ldr	r3, [pc, #196]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801442a:	430a      	orrs	r2, r1
 801442c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2202      	movs	r2, #2
 8014434:	4013      	ands	r3, r2
 8014436:	d009      	beq.n	801444c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014438:	4b2d      	ldr	r3, [pc, #180]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801443a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801443c:	220c      	movs	r2, #12
 801443e:	4393      	bics	r3, r2
 8014440:	0019      	movs	r1, r3
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	68da      	ldr	r2, [r3, #12]
 8014446:	4b2a      	ldr	r3, [pc, #168]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014448:	430a      	orrs	r2, r1
 801444a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	2204      	movs	r2, #4
 8014452:	4013      	ands	r3, r2
 8014454:	d009      	beq.n	801446a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014456:	4b26      	ldr	r3, [pc, #152]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801445a:	4a2c      	ldr	r2, [pc, #176]	@ (801450c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801445c:	4013      	ands	r3, r2
 801445e:	0019      	movs	r1, r3
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	691a      	ldr	r2, [r3, #16]
 8014464:	4b22      	ldr	r3, [pc, #136]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014466:	430a      	orrs	r2, r1
 8014468:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2208      	movs	r2, #8
 8014470:	4013      	ands	r3, r2
 8014472:	d009      	beq.n	8014488 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8014474:	4b1e      	ldr	r3, [pc, #120]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014478:	4a25      	ldr	r2, [pc, #148]	@ (8014510 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801447a:	4013      	ands	r3, r2
 801447c:	0019      	movs	r1, r3
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	695a      	ldr	r2, [r3, #20]
 8014482:	4b1b      	ldr	r3, [pc, #108]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014484:	430a      	orrs	r2, r1
 8014486:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	2380      	movs	r3, #128	@ 0x80
 801448e:	005b      	lsls	r3, r3, #1
 8014490:	4013      	ands	r3, r2
 8014492:	d009      	beq.n	80144a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014494:	4b16      	ldr	r3, [pc, #88]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014498:	4a17      	ldr	r2, [pc, #92]	@ (80144f8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801449a:	4013      	ands	r3, r2
 801449c:	0019      	movs	r1, r3
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	699a      	ldr	r2, [r3, #24]
 80144a2:	4b13      	ldr	r3, [pc, #76]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144a4:	430a      	orrs	r2, r1
 80144a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2240      	movs	r2, #64	@ 0x40
 80144ae:	4013      	ands	r3, r2
 80144b0:	d009      	beq.n	80144c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80144b2:	4b0f      	ldr	r3, [pc, #60]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144b6:	4a17      	ldr	r2, [pc, #92]	@ (8014514 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80144b8:	4013      	ands	r3, r2
 80144ba:	0019      	movs	r1, r3
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6a1a      	ldr	r2, [r3, #32]
 80144c0:	4b0b      	ldr	r3, [pc, #44]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144c2:	430a      	orrs	r2, r1
 80144c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	2280      	movs	r2, #128	@ 0x80
 80144cc:	4013      	ands	r3, r2
 80144ce:	d009      	beq.n	80144e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80144d0:	4b07      	ldr	r3, [pc, #28]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144d4:	4a10      	ldr	r2, [pc, #64]	@ (8014518 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80144d6:	4013      	ands	r3, r2
 80144d8:	0019      	movs	r1, r3
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	69da      	ldr	r2, [r3, #28]
 80144de:	4b04      	ldr	r3, [pc, #16]	@ (80144f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144e0:	430a      	orrs	r2, r1
 80144e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80144e4:	2300      	movs	r3, #0
}
 80144e6:	0018      	movs	r0, r3
 80144e8:	46bd      	mov	sp, r7
 80144ea:	b006      	add	sp, #24
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	46c0      	nop			@ (mov r8, r8)
 80144f0:	40021000 	.word	0x40021000
 80144f4:	40007000 	.word	0x40007000
 80144f8:	fffcffff 	.word	0xfffcffff
 80144fc:	fff7ffff 	.word	0xfff7ffff
 8014500:	00001388 	.word	0x00001388
 8014504:	ffcfffff 	.word	0xffcfffff
 8014508:	efffffff 	.word	0xefffffff
 801450c:	fffff3ff 	.word	0xfffff3ff
 8014510:	ffffcfff 	.word	0xffffcfff
 8014514:	fbffffff 	.word	0xfbffffff
 8014518:	fff3ffff 	.word	0xfff3ffff

0801451c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801451c:	b5b0      	push	{r4, r5, r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014524:	230f      	movs	r3, #15
 8014526:	18fb      	adds	r3, r7, r3
 8014528:	2201      	movs	r2, #1
 801452a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d101      	bne.n	8014536 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8014532:	2301      	movs	r3, #1
 8014534:	e088      	b.n	8014648 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2221      	movs	r2, #33	@ 0x21
 801453a:	5c9b      	ldrb	r3, [r3, r2]
 801453c:	b2db      	uxtb	r3, r3
 801453e:	2b00      	cmp	r3, #0
 8014540:	d107      	bne.n	8014552 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2220      	movs	r2, #32
 8014546:	2100      	movs	r1, #0
 8014548:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	0018      	movs	r0, r3
 801454e:	f7f3 feeb 	bl	8008328 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	2221      	movs	r2, #33	@ 0x21
 8014556:	2102      	movs	r1, #2
 8014558:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	2210      	movs	r2, #16
 8014562:	4013      	ands	r3, r2
 8014564:	2b10      	cmp	r3, #16
 8014566:	d05f      	beq.n	8014628 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	22ca      	movs	r2, #202	@ 0xca
 801456e:	625a      	str	r2, [r3, #36]	@ 0x24
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	2253      	movs	r2, #83	@ 0x53
 8014576:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8014578:	250f      	movs	r5, #15
 801457a:	197c      	adds	r4, r7, r5
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	0018      	movs	r0, r3
 8014580:	f000 fa7c 	bl	8014a7c <RTC_EnterInitMode>
 8014584:	0003      	movs	r3, r0
 8014586:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8014588:	0028      	movs	r0, r5
 801458a:	183b      	adds	r3, r7, r0
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d12c      	bne.n	80145ec <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	689a      	ldr	r2, [r3, #8]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	492c      	ldr	r1, [pc, #176]	@ (8014650 <HAL_RTC_Init+0x134>)
 801459e:	400a      	ands	r2, r1
 80145a0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	6899      	ldr	r1, [r3, #8]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	685a      	ldr	r2, [r3, #4]
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	691b      	ldr	r3, [r3, #16]
 80145b0:	431a      	orrs	r2, r3
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	699b      	ldr	r3, [r3, #24]
 80145b6:	431a      	orrs	r2, r3
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	430a      	orrs	r2, r1
 80145be:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	68d2      	ldr	r2, [r2, #12]
 80145c8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	6919      	ldr	r1, [r3, #16]
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	689b      	ldr	r3, [r3, #8]
 80145d4:	041a      	lsls	r2, r3, #16
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	430a      	orrs	r2, r1
 80145dc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80145de:	183c      	adds	r4, r7, r0
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	0018      	movs	r0, r3
 80145e4:	f000 fa8e 	bl	8014b04 <RTC_ExitInitMode>
 80145e8:	0003      	movs	r3, r0
 80145ea:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80145ec:	230f      	movs	r3, #15
 80145ee:	18fb      	adds	r3, r7, r3
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d113      	bne.n	801461e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2103      	movs	r1, #3
 8014602:	438a      	bics	r2, r1
 8014604:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	69da      	ldr	r2, [r3, #28]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	695b      	ldr	r3, [r3, #20]
 8014614:	431a      	orrs	r2, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	430a      	orrs	r2, r1
 801461c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	22ff      	movs	r2, #255	@ 0xff
 8014624:	625a      	str	r2, [r3, #36]	@ 0x24
 8014626:	e003      	b.n	8014630 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8014628:	230f      	movs	r3, #15
 801462a:	18fb      	adds	r3, r7, r3
 801462c:	2200      	movs	r2, #0
 801462e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8014630:	230f      	movs	r3, #15
 8014632:	18fb      	adds	r3, r7, r3
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d103      	bne.n	8014642 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2221      	movs	r2, #33	@ 0x21
 801463e:	2101      	movs	r1, #1
 8014640:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8014642:	230f      	movs	r3, #15
 8014644:	18fb      	adds	r3, r7, r3
 8014646:	781b      	ldrb	r3, [r3, #0]
}
 8014648:	0018      	movs	r0, r3
 801464a:	46bd      	mov	sp, r7
 801464c:	b004      	add	sp, #16
 801464e:	bdb0      	pop	{r4, r5, r7, pc}
 8014650:	ff8fffbf 	.word	0xff8fffbf

08014654 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014654:	b5b0      	push	{r4, r5, r7, lr}
 8014656:	b086      	sub	sp, #24
 8014658:	af00      	add	r7, sp, #0
 801465a:	60f8      	str	r0, [r7, #12]
 801465c:	60b9      	str	r1, [r7, #8]
 801465e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8014660:	2300      	movs	r3, #0
 8014662:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	2220      	movs	r2, #32
 8014668:	5c9b      	ldrb	r3, [r3, r2]
 801466a:	2b01      	cmp	r3, #1
 801466c:	d101      	bne.n	8014672 <HAL_RTC_SetTime+0x1e>
 801466e:	2302      	movs	r3, #2
 8014670:	e092      	b.n	8014798 <HAL_RTC_SetTime+0x144>
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	2220      	movs	r2, #32
 8014676:	2101      	movs	r1, #1
 8014678:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	2221      	movs	r2, #33	@ 0x21
 801467e:	2102      	movs	r1, #2
 8014680:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d125      	bne.n	80146d4 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	689b      	ldr	r3, [r3, #8]
 801468e:	2240      	movs	r2, #64	@ 0x40
 8014690:	4013      	ands	r3, r2
 8014692:	d102      	bne.n	801469a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	2200      	movs	r2, #0
 8014698:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801469a:	68bb      	ldr	r3, [r7, #8]
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	0018      	movs	r0, r3
 80146a0:	f000 fa5a 	bl	8014b58 <RTC_ByteToBcd2>
 80146a4:	0003      	movs	r3, r0
 80146a6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	785b      	ldrb	r3, [r3, #1]
 80146ac:	0018      	movs	r0, r3
 80146ae:	f000 fa53 	bl	8014b58 <RTC_ByteToBcd2>
 80146b2:	0003      	movs	r3, r0
 80146b4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80146b6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	789b      	ldrb	r3, [r3, #2]
 80146bc:	0018      	movs	r0, r3
 80146be:	f000 fa4b 	bl	8014b58 <RTC_ByteToBcd2>
 80146c2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80146c4:	0022      	movs	r2, r4
 80146c6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	78db      	ldrb	r3, [r3, #3]
 80146cc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80146ce:	4313      	orrs	r3, r2
 80146d0:	617b      	str	r3, [r7, #20]
 80146d2:	e017      	b.n	8014704 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	2240      	movs	r2, #64	@ 0x40
 80146dc:	4013      	ands	r3, r2
 80146de:	d102      	bne.n	80146e6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	2200      	movs	r2, #0
 80146e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	781b      	ldrb	r3, [r3, #0]
 80146ea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	785b      	ldrb	r3, [r3, #1]
 80146f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80146f2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80146f4:	68ba      	ldr	r2, [r7, #8]
 80146f6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80146f8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	78db      	ldrb	r3, [r3, #3]
 80146fe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014700:	4313      	orrs	r3, r2
 8014702:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	22ca      	movs	r2, #202	@ 0xca
 801470a:	625a      	str	r2, [r3, #36]	@ 0x24
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	2253      	movs	r2, #83	@ 0x53
 8014712:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014714:	2513      	movs	r5, #19
 8014716:	197c      	adds	r4, r7, r5
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	0018      	movs	r0, r3
 801471c:	f000 f9ae 	bl	8014a7c <RTC_EnterInitMode>
 8014720:	0003      	movs	r3, r0
 8014722:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014724:	0028      	movs	r0, r5
 8014726:	183b      	adds	r3, r7, r0
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d120      	bne.n	8014770 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	697a      	ldr	r2, [r7, #20]
 8014734:	491a      	ldr	r1, [pc, #104]	@ (80147a0 <HAL_RTC_SetTime+0x14c>)
 8014736:	400a      	ands	r2, r1
 8014738:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	689a      	ldr	r2, [r3, #8]
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4917      	ldr	r1, [pc, #92]	@ (80147a4 <HAL_RTC_SetTime+0x150>)
 8014746:	400a      	ands	r2, r1
 8014748:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	6899      	ldr	r1, [r3, #8]
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	68da      	ldr	r2, [r3, #12]
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	691b      	ldr	r3, [r3, #16]
 8014758:	431a      	orrs	r2, r3
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	430a      	orrs	r2, r1
 8014760:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014762:	183c      	adds	r4, r7, r0
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	0018      	movs	r0, r3
 8014768:	f000 f9cc 	bl	8014b04 <RTC_ExitInitMode>
 801476c:	0003      	movs	r3, r0
 801476e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014770:	2313      	movs	r3, #19
 8014772:	18fb      	adds	r3, r7, r3
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d103      	bne.n	8014782 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2221      	movs	r2, #33	@ 0x21
 801477e:	2101      	movs	r1, #1
 8014780:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	22ff      	movs	r2, #255	@ 0xff
 8014788:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2220      	movs	r2, #32
 801478e:	2100      	movs	r1, #0
 8014790:	5499      	strb	r1, [r3, r2]

  return status;
 8014792:	2313      	movs	r3, #19
 8014794:	18fb      	adds	r3, r7, r3
 8014796:	781b      	ldrb	r3, [r3, #0]
}
 8014798:	0018      	movs	r0, r3
 801479a:	46bd      	mov	sp, r7
 801479c:	b006      	add	sp, #24
 801479e:	bdb0      	pop	{r4, r5, r7, pc}
 80147a0:	007f7f7f 	.word	0x007f7f7f
 80147a4:	fffbffff 	.word	0xfffbffff

080147a8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b086      	sub	sp, #24
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80147b4:	2300      	movs	r3, #0
 80147b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	691b      	ldr	r3, [r3, #16]
 80147c8:	045b      	lsls	r3, r3, #17
 80147ca:	0c5a      	lsrs	r2, r3, #17
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4a22      	ldr	r2, [pc, #136]	@ (8014860 <HAL_RTC_GetTime+0xb8>)
 80147d8:	4013      	ands	r3, r2
 80147da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	0c1b      	lsrs	r3, r3, #16
 80147e0:	b2db      	uxtb	r3, r3
 80147e2:	223f      	movs	r2, #63	@ 0x3f
 80147e4:	4013      	ands	r3, r2
 80147e6:	b2da      	uxtb	r2, r3
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	0a1b      	lsrs	r3, r3, #8
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	227f      	movs	r2, #127	@ 0x7f
 80147f4:	4013      	ands	r3, r2
 80147f6:	b2da      	uxtb	r2, r3
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	b2db      	uxtb	r3, r3
 8014800:	227f      	movs	r2, #127	@ 0x7f
 8014802:	4013      	ands	r3, r2
 8014804:	b2da      	uxtb	r2, r3
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	0d9b      	lsrs	r3, r3, #22
 801480e:	b2db      	uxtb	r3, r3
 8014810:	2201      	movs	r2, #1
 8014812:	4013      	ands	r3, r2
 8014814:	b2da      	uxtb	r2, r3
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d11a      	bne.n	8014856 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014820:	68bb      	ldr	r3, [r7, #8]
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	0018      	movs	r0, r3
 8014826:	f000 f9b8 	bl	8014b9a <RTC_Bcd2ToByte>
 801482a:	0003      	movs	r3, r0
 801482c:	001a      	movs	r2, r3
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	785b      	ldrb	r3, [r3, #1]
 8014836:	0018      	movs	r0, r3
 8014838:	f000 f9af 	bl	8014b9a <RTC_Bcd2ToByte>
 801483c:	0003      	movs	r3, r0
 801483e:	001a      	movs	r2, r3
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	789b      	ldrb	r3, [r3, #2]
 8014848:	0018      	movs	r0, r3
 801484a:	f000 f9a6 	bl	8014b9a <RTC_Bcd2ToByte>
 801484e:	0003      	movs	r3, r0
 8014850:	001a      	movs	r2, r3
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8014856:	2300      	movs	r3, #0
}
 8014858:	0018      	movs	r0, r3
 801485a:	46bd      	mov	sp, r7
 801485c:	b006      	add	sp, #24
 801485e:	bd80      	pop	{r7, pc}
 8014860:	007f7f7f 	.word	0x007f7f7f

08014864 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014864:	b5b0      	push	{r4, r5, r7, lr}
 8014866:	b086      	sub	sp, #24
 8014868:	af00      	add	r7, sp, #0
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014870:	2300      	movs	r3, #0
 8014872:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2220      	movs	r2, #32
 8014878:	5c9b      	ldrb	r3, [r3, r2]
 801487a:	2b01      	cmp	r3, #1
 801487c:	d101      	bne.n	8014882 <HAL_RTC_SetDate+0x1e>
 801487e:	2302      	movs	r3, #2
 8014880:	e07e      	b.n	8014980 <HAL_RTC_SetDate+0x11c>
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	2220      	movs	r2, #32
 8014886:	2101      	movs	r1, #1
 8014888:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	2221      	movs	r2, #33	@ 0x21
 801488e:	2102      	movs	r1, #2
 8014890:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d10e      	bne.n	80148b6 <HAL_RTC_SetDate+0x52>
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	785b      	ldrb	r3, [r3, #1]
 801489c:	001a      	movs	r2, r3
 801489e:	2310      	movs	r3, #16
 80148a0:	4013      	ands	r3, r2
 80148a2:	d008      	beq.n	80148b6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	785b      	ldrb	r3, [r3, #1]
 80148a8:	2210      	movs	r2, #16
 80148aa:	4393      	bics	r3, r2
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	330a      	adds	r3, #10
 80148b0:	b2da      	uxtb	r2, r3
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d11c      	bne.n	80148f6 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	78db      	ldrb	r3, [r3, #3]
 80148c0:	0018      	movs	r0, r3
 80148c2:	f000 f949 	bl	8014b58 <RTC_ByteToBcd2>
 80148c6:	0003      	movs	r3, r0
 80148c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	785b      	ldrb	r3, [r3, #1]
 80148ce:	0018      	movs	r0, r3
 80148d0:	f000 f942 	bl	8014b58 <RTC_ByteToBcd2>
 80148d4:	0003      	movs	r3, r0
 80148d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80148d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	789b      	ldrb	r3, [r3, #2]
 80148de:	0018      	movs	r0, r3
 80148e0:	f000 f93a 	bl	8014b58 <RTC_ByteToBcd2>
 80148e4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80148e6:	0022      	movs	r2, r4
 80148e8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80148f0:	4313      	orrs	r3, r2
 80148f2:	617b      	str	r3, [r7, #20]
 80148f4:	e00e      	b.n	8014914 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	78db      	ldrb	r3, [r3, #3]
 80148fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	785b      	ldrb	r3, [r3, #1]
 8014900:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014902:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8014904:	68ba      	ldr	r2, [r7, #8]
 8014906:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014908:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014910:	4313      	orrs	r3, r2
 8014912:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	22ca      	movs	r2, #202	@ 0xca
 801491a:	625a      	str	r2, [r3, #36]	@ 0x24
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	2253      	movs	r2, #83	@ 0x53
 8014922:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014924:	2513      	movs	r5, #19
 8014926:	197c      	adds	r4, r7, r5
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	0018      	movs	r0, r3
 801492c:	f000 f8a6 	bl	8014a7c <RTC_EnterInitMode>
 8014930:	0003      	movs	r3, r0
 8014932:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014934:	0028      	movs	r0, r5
 8014936:	183b      	adds	r3, r7, r0
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d10c      	bne.n	8014958 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	697a      	ldr	r2, [r7, #20]
 8014944:	4910      	ldr	r1, [pc, #64]	@ (8014988 <HAL_RTC_SetDate+0x124>)
 8014946:	400a      	ands	r2, r1
 8014948:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801494a:	183c      	adds	r4, r7, r0
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	0018      	movs	r0, r3
 8014950:	f000 f8d8 	bl	8014b04 <RTC_ExitInitMode>
 8014954:	0003      	movs	r3, r0
 8014956:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014958:	2313      	movs	r3, #19
 801495a:	18fb      	adds	r3, r7, r3
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d103      	bne.n	801496a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2221      	movs	r2, #33	@ 0x21
 8014966:	2101      	movs	r1, #1
 8014968:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	22ff      	movs	r2, #255	@ 0xff
 8014970:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	2220      	movs	r2, #32
 8014976:	2100      	movs	r1, #0
 8014978:	5499      	strb	r1, [r3, r2]

  return status;
 801497a:	2313      	movs	r3, #19
 801497c:	18fb      	adds	r3, r7, r3
 801497e:	781b      	ldrb	r3, [r3, #0]
}
 8014980:	0018      	movs	r0, r3
 8014982:	46bd      	mov	sp, r7
 8014984:	b006      	add	sp, #24
 8014986:	bdb0      	pop	{r4, r5, r7, pc}
 8014988:	00ffff3f 	.word	0x00ffff3f

0801498c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014998:	2300      	movs	r3, #0
 801499a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	685b      	ldr	r3, [r3, #4]
 80149a2:	4a21      	ldr	r2, [pc, #132]	@ (8014a28 <HAL_RTC_GetDate+0x9c>)
 80149a4:	4013      	ands	r3, r2
 80149a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	0c1b      	lsrs	r3, r3, #16
 80149ac:	b2da      	uxtb	r2, r3
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	0a1b      	lsrs	r3, r3, #8
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	221f      	movs	r2, #31
 80149ba:	4013      	ands	r3, r2
 80149bc:	b2da      	uxtb	r2, r3
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	b2db      	uxtb	r3, r3
 80149c6:	223f      	movs	r2, #63	@ 0x3f
 80149c8:	4013      	ands	r3, r2
 80149ca:	b2da      	uxtb	r2, r3
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	0b5b      	lsrs	r3, r3, #13
 80149d4:	b2db      	uxtb	r3, r3
 80149d6:	2207      	movs	r2, #7
 80149d8:	4013      	ands	r3, r2
 80149da:	b2da      	uxtb	r2, r3
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d11a      	bne.n	8014a1c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	78db      	ldrb	r3, [r3, #3]
 80149ea:	0018      	movs	r0, r3
 80149ec:	f000 f8d5 	bl	8014b9a <RTC_Bcd2ToByte>
 80149f0:	0003      	movs	r3, r0
 80149f2:	001a      	movs	r2, r3
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	785b      	ldrb	r3, [r3, #1]
 80149fc:	0018      	movs	r0, r3
 80149fe:	f000 f8cc 	bl	8014b9a <RTC_Bcd2ToByte>
 8014a02:	0003      	movs	r3, r0
 8014a04:	001a      	movs	r2, r3
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	789b      	ldrb	r3, [r3, #2]
 8014a0e:	0018      	movs	r0, r3
 8014a10:	f000 f8c3 	bl	8014b9a <RTC_Bcd2ToByte>
 8014a14:	0003      	movs	r3, r0
 8014a16:	001a      	movs	r2, r3
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8014a1c:	2300      	movs	r3, #0
}
 8014a1e:	0018      	movs	r0, r3
 8014a20:	46bd      	mov	sp, r7
 8014a22:	b006      	add	sp, #24
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	46c0      	nop			@ (mov r8, r8)
 8014a28:	00ffff3f 	.word	0x00ffff3f

08014a2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014a34:	2300      	movs	r3, #0
 8014a36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8014a78 <HAL_RTC_WaitForSynchro+0x4c>)
 8014a3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014a40:	f7f8 fdb8 	bl	800d5b4 <HAL_GetTick>
 8014a44:	0003      	movs	r3, r0
 8014a46:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014a48:	e00a      	b.n	8014a60 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014a4a:	f7f8 fdb3 	bl	800d5b4 <HAL_GetTick>
 8014a4e:	0002      	movs	r2, r0
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	1ad2      	subs	r2, r2, r3
 8014a54:	23fa      	movs	r3, #250	@ 0xfa
 8014a56:	009b      	lsls	r3, r3, #2
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	d901      	bls.n	8014a60 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8014a5c:	2303      	movs	r3, #3
 8014a5e:	e006      	b.n	8014a6e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	68db      	ldr	r3, [r3, #12]
 8014a66:	2220      	movs	r2, #32
 8014a68:	4013      	ands	r3, r2
 8014a6a:	d0ee      	beq.n	8014a4a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8014a6c:	2300      	movs	r3, #0
}
 8014a6e:	0018      	movs	r0, r3
 8014a70:	46bd      	mov	sp, r7
 8014a72:	b004      	add	sp, #16
 8014a74:	bd80      	pop	{r7, pc}
 8014a76:	46c0      	nop			@ (mov r8, r8)
 8014a78:	0001ff5f 	.word	0x0001ff5f

08014a7c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014a84:	2300      	movs	r3, #0
 8014a86:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8014a88:	230f      	movs	r3, #15
 8014a8a:	18fb      	adds	r3, r7, r3
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	2240      	movs	r2, #64	@ 0x40
 8014a98:	4013      	ands	r3, r2
 8014a9a:	d12c      	bne.n	8014af6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	68da      	ldr	r2, [r3, #12]
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	2180      	movs	r1, #128	@ 0x80
 8014aa8:	430a      	orrs	r2, r1
 8014aaa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014aac:	f7f8 fd82 	bl	800d5b4 <HAL_GetTick>
 8014ab0:	0003      	movs	r3, r0
 8014ab2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014ab4:	e014      	b.n	8014ae0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014ab6:	f7f8 fd7d 	bl	800d5b4 <HAL_GetTick>
 8014aba:	0002      	movs	r2, r0
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	1ad2      	subs	r2, r2, r3
 8014ac0:	200f      	movs	r0, #15
 8014ac2:	183b      	adds	r3, r7, r0
 8014ac4:	1839      	adds	r1, r7, r0
 8014ac6:	7809      	ldrb	r1, [r1, #0]
 8014ac8:	7019      	strb	r1, [r3, #0]
 8014aca:	23fa      	movs	r3, #250	@ 0xfa
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d906      	bls.n	8014ae0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2221      	movs	r2, #33	@ 0x21
 8014ad6:	2104      	movs	r1, #4
 8014ad8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8014ada:	183b      	adds	r3, r7, r0
 8014adc:	2201      	movs	r2, #1
 8014ade:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	2240      	movs	r2, #64	@ 0x40
 8014ae8:	4013      	ands	r3, r2
 8014aea:	d104      	bne.n	8014af6 <RTC_EnterInitMode+0x7a>
 8014aec:	230f      	movs	r3, #15
 8014aee:	18fb      	adds	r3, r7, r3
 8014af0:	781b      	ldrb	r3, [r3, #0]
 8014af2:	2b01      	cmp	r3, #1
 8014af4:	d1df      	bne.n	8014ab6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8014af6:	230f      	movs	r3, #15
 8014af8:	18fb      	adds	r3, r7, r3
 8014afa:	781b      	ldrb	r3, [r3, #0]
}
 8014afc:	0018      	movs	r0, r3
 8014afe:	46bd      	mov	sp, r7
 8014b00:	b004      	add	sp, #16
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8014b04:	b590      	push	{r4, r7, lr}
 8014b06:	b085      	sub	sp, #20
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014b0c:	240f      	movs	r4, #15
 8014b0e:	193b      	adds	r3, r7, r4
 8014b10:	2200      	movs	r2, #0
 8014b12:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	68da      	ldr	r2, [r3, #12]
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	2180      	movs	r1, #128	@ 0x80
 8014b20:	438a      	bics	r2, r1
 8014b22:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	689b      	ldr	r3, [r3, #8]
 8014b2a:	2220      	movs	r2, #32
 8014b2c:	4013      	ands	r3, r2
 8014b2e:	d10c      	bne.n	8014b4a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	0018      	movs	r0, r3
 8014b34:	f7ff ff7a 	bl	8014a2c <HAL_RTC_WaitForSynchro>
 8014b38:	1e03      	subs	r3, r0, #0
 8014b3a:	d006      	beq.n	8014b4a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	2221      	movs	r2, #33	@ 0x21
 8014b40:	2104      	movs	r1, #4
 8014b42:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8014b44:	193b      	adds	r3, r7, r4
 8014b46:	2201      	movs	r2, #1
 8014b48:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8014b4a:	230f      	movs	r3, #15
 8014b4c:	18fb      	adds	r3, r7, r3
 8014b4e:	781b      	ldrb	r3, [r3, #0]
}
 8014b50:	0018      	movs	r0, r3
 8014b52:	46bd      	mov	sp, r7
 8014b54:	b005      	add	sp, #20
 8014b56:	bd90      	pop	{r4, r7, pc}

08014b58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	0002      	movs	r2, r0
 8014b60:	1dfb      	adds	r3, r7, #7
 8014b62:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8014b64:	2300      	movs	r3, #0
 8014b66:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8014b68:	e007      	b.n	8014b7a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8014b70:	1dfb      	adds	r3, r7, #7
 8014b72:	1dfa      	adds	r2, r7, #7
 8014b74:	7812      	ldrb	r2, [r2, #0]
 8014b76:	3a0a      	subs	r2, #10
 8014b78:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8014b7a:	1dfb      	adds	r3, r7, #7
 8014b7c:	781b      	ldrb	r3, [r3, #0]
 8014b7e:	2b09      	cmp	r3, #9
 8014b80:	d8f3      	bhi.n	8014b6a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	b2db      	uxtb	r3, r3
 8014b86:	011b      	lsls	r3, r3, #4
 8014b88:	b2da      	uxtb	r2, r3
 8014b8a:	1dfb      	adds	r3, r7, #7
 8014b8c:	781b      	ldrb	r3, [r3, #0]
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	b2db      	uxtb	r3, r3
}
 8014b92:	0018      	movs	r0, r3
 8014b94:	46bd      	mov	sp, r7
 8014b96:	b004      	add	sp, #16
 8014b98:	bd80      	pop	{r7, pc}

08014b9a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b084      	sub	sp, #16
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	0002      	movs	r2, r0
 8014ba2:	1dfb      	adds	r3, r7, #7
 8014ba4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8014baa:	1dfb      	adds	r3, r7, #7
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	091b      	lsrs	r3, r3, #4
 8014bb0:	b2db      	uxtb	r3, r3
 8014bb2:	001a      	movs	r2, r3
 8014bb4:	0013      	movs	r3, r2
 8014bb6:	009b      	lsls	r3, r3, #2
 8014bb8:	189b      	adds	r3, r3, r2
 8014bba:	005b      	lsls	r3, r3, #1
 8014bbc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	b2da      	uxtb	r2, r3
 8014bc2:	1dfb      	adds	r3, r7, #7
 8014bc4:	781b      	ldrb	r3, [r3, #0]
 8014bc6:	210f      	movs	r1, #15
 8014bc8:	400b      	ands	r3, r1
 8014bca:	b2db      	uxtb	r3, r3
 8014bcc:	18d3      	adds	r3, r2, r3
 8014bce:	b2db      	uxtb	r3, r3
}
 8014bd0:	0018      	movs	r0, r3
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	b004      	add	sp, #16
 8014bd6:	bd80      	pop	{r7, pc}

08014bd8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b086      	sub	sp, #24
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	60f8      	str	r0, [r7, #12]
 8014be0:	60b9      	str	r1, [r7, #8]
 8014be2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8014be4:	2300      	movs	r3, #0
 8014be6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2220      	movs	r2, #32
 8014bec:	5c9b      	ldrb	r3, [r3, r2]
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d101      	bne.n	8014bf6 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8014bf2:	2302      	movs	r3, #2
 8014bf4:	e096      	b.n	8014d24 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2220      	movs	r2, #32
 8014bfa:	2101      	movs	r1, #1
 8014bfc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2221      	movs	r2, #33	@ 0x21
 8014c02:	2102      	movs	r1, #2
 8014c04:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	22ca      	movs	r2, #202	@ 0xca
 8014c0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2253      	movs	r2, #83	@ 0x53
 8014c14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	689a      	ldr	r2, [r3, #8]
 8014c1c:	2380      	movs	r3, #128	@ 0x80
 8014c1e:	00db      	lsls	r3, r3, #3
 8014c20:	4013      	ands	r3, r2
 8014c22:	d021      	beq.n	8014c68 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8014c24:	f7f8 fcc6 	bl	800d5b4 <HAL_GetTick>
 8014c28:	0003      	movs	r3, r0
 8014c2a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8014c2c:	e016      	b.n	8014c5c <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014c2e:	f7f8 fcc1 	bl	800d5b4 <HAL_GetTick>
 8014c32:	0002      	movs	r2, r0
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	1ad2      	subs	r2, r2, r3
 8014c38:	23fa      	movs	r3, #250	@ 0xfa
 8014c3a:	009b      	lsls	r3, r3, #2
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d90d      	bls.n	8014c5c <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	22ff      	movs	r2, #255	@ 0xff
 8014c46:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2221      	movs	r2, #33	@ 0x21
 8014c4c:	2103      	movs	r1, #3
 8014c4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	2220      	movs	r2, #32
 8014c54:	2100      	movs	r1, #0
 8014c56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	e063      	b.n	8014d24 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	2204      	movs	r2, #4
 8014c64:	4013      	ands	r3, r2
 8014c66:	d1e2      	bne.n	8014c2e <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	689a      	ldr	r2, [r3, #8]
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	492e      	ldr	r1, [pc, #184]	@ (8014d2c <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8014c74:	400a      	ands	r2, r1
 8014c76:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	22ff      	movs	r2, #255	@ 0xff
 8014c80:	401a      	ands	r2, r3
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	492a      	ldr	r1, [pc, #168]	@ (8014d30 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8014c88:	430a      	orrs	r2, r1
 8014c8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014c8c:	f7f8 fc92 	bl	800d5b4 <HAL_GetTick>
 8014c90:	0003      	movs	r3, r0
 8014c92:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8014c94:	e016      	b.n	8014cc4 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014c96:	f7f8 fc8d 	bl	800d5b4 <HAL_GetTick>
 8014c9a:	0002      	movs	r2, r0
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	1ad2      	subs	r2, r2, r3
 8014ca0:	23fa      	movs	r3, #250	@ 0xfa
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d90d      	bls.n	8014cc4 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	22ff      	movs	r2, #255	@ 0xff
 8014cae:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2221      	movs	r2, #33	@ 0x21
 8014cb4:	2103      	movs	r1, #3
 8014cb6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	2220      	movs	r2, #32
 8014cbc:	2100      	movs	r1, #0
 8014cbe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8014cc0:	2303      	movs	r3, #3
 8014cc2:	e02f      	b.n	8014d24 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	68db      	ldr	r3, [r3, #12]
 8014cca:	2204      	movs	r2, #4
 8014ccc:	4013      	ands	r3, r2
 8014cce:	d0e2      	beq.n	8014c96 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	689a      	ldr	r2, [r3, #8]
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	2107      	movs	r1, #7
 8014cdc:	438a      	bics	r2, r1
 8014cde:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	6899      	ldr	r1, [r3, #8]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	687a      	ldr	r2, [r7, #4]
 8014cec:	430a      	orrs	r2, r1
 8014cee:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	68ba      	ldr	r2, [r7, #8]
 8014cf6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	689a      	ldr	r2, [r3, #8]
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2180      	movs	r1, #128	@ 0x80
 8014d04:	00c9      	lsls	r1, r1, #3
 8014d06:	430a      	orrs	r2, r1
 8014d08:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	22ff      	movs	r2, #255	@ 0xff
 8014d10:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2221      	movs	r2, #33	@ 0x21
 8014d16:	2101      	movs	r1, #1
 8014d18:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2220      	movs	r2, #32
 8014d1e:	2100      	movs	r1, #0
 8014d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014d22:	2300      	movs	r3, #0
}
 8014d24:	0018      	movs	r0, r3
 8014d26:	46bd      	mov	sp, r7
 8014d28:	b006      	add	sp, #24
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	fffffbff 	.word	0xfffffbff
 8014d30:	fffffb7f 	.word	0xfffffb7f

08014d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d101      	bne.n	8014d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014d42:	2301      	movs	r3, #1
 8014d44:	e032      	b.n	8014dac <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2239      	movs	r2, #57	@ 0x39
 8014d4a:	5c9b      	ldrb	r3, [r3, r2]
 8014d4c:	b2db      	uxtb	r3, r3
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d107      	bne.n	8014d62 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2238      	movs	r2, #56	@ 0x38
 8014d56:	2100      	movs	r1, #0
 8014d58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	0018      	movs	r0, r3
 8014d5e:	f7f7 fde5 	bl	800c92c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2239      	movs	r2, #57	@ 0x39
 8014d66:	2102      	movs	r1, #2
 8014d68:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681a      	ldr	r2, [r3, #0]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	3304      	adds	r3, #4
 8014d72:	0019      	movs	r1, r3
 8014d74:	0010      	movs	r0, r2
 8014d76:	f000 fa1d 	bl	80151b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	223e      	movs	r2, #62	@ 0x3e
 8014d7e:	2101      	movs	r1, #1
 8014d80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	223a      	movs	r2, #58	@ 0x3a
 8014d86:	2101      	movs	r1, #1
 8014d88:	5499      	strb	r1, [r3, r2]
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	223b      	movs	r2, #59	@ 0x3b
 8014d8e:	2101      	movs	r1, #1
 8014d90:	5499      	strb	r1, [r3, r2]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	223c      	movs	r2, #60	@ 0x3c
 8014d96:	2101      	movs	r1, #1
 8014d98:	5499      	strb	r1, [r3, r2]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	223d      	movs	r2, #61	@ 0x3d
 8014d9e:	2101      	movs	r1, #1
 8014da0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2239      	movs	r2, #57	@ 0x39
 8014da6:	2101      	movs	r1, #1
 8014da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014daa:	2300      	movs	r3, #0
}
 8014dac:	0018      	movs	r0, r3
 8014dae:	46bd      	mov	sp, r7
 8014db0:	b002      	add	sp, #8
 8014db2:	bd80      	pop	{r7, pc}

08014db4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2239      	movs	r2, #57	@ 0x39
 8014dc0:	5c9b      	ldrb	r3, [r3, r2]
 8014dc2:	b2db      	uxtb	r3, r3
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d001      	beq.n	8014dcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e033      	b.n	8014e34 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2239      	movs	r2, #57	@ 0x39
 8014dd0:	2102      	movs	r1, #2
 8014dd2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	2380      	movs	r3, #128	@ 0x80
 8014dda:	05db      	lsls	r3, r3, #23
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d00e      	beq.n	8014dfe <HAL_TIM_Base_Start+0x4a>
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	4a15      	ldr	r2, [pc, #84]	@ (8014e3c <HAL_TIM_Base_Start+0x88>)
 8014de6:	4293      	cmp	r3, r2
 8014de8:	d009      	beq.n	8014dfe <HAL_TIM_Base_Start+0x4a>
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	4a14      	ldr	r2, [pc, #80]	@ (8014e40 <HAL_TIM_Base_Start+0x8c>)
 8014df0:	4293      	cmp	r3, r2
 8014df2:	d004      	beq.n	8014dfe <HAL_TIM_Base_Start+0x4a>
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	4a12      	ldr	r2, [pc, #72]	@ (8014e44 <HAL_TIM_Base_Start+0x90>)
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	d111      	bne.n	8014e22 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	689b      	ldr	r3, [r3, #8]
 8014e04:	2207      	movs	r2, #7
 8014e06:	4013      	ands	r3, r2
 8014e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	2b06      	cmp	r3, #6
 8014e0e:	d010      	beq.n	8014e32 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	681a      	ldr	r2, [r3, #0]
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	2101      	movs	r1, #1
 8014e1c:	430a      	orrs	r2, r1
 8014e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e20:	e007      	b.n	8014e32 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	681a      	ldr	r2, [r3, #0]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	2101      	movs	r1, #1
 8014e2e:	430a      	orrs	r2, r1
 8014e30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e32:	2300      	movs	r3, #0
}
 8014e34:	0018      	movs	r0, r3
 8014e36:	46bd      	mov	sp, r7
 8014e38:	b004      	add	sp, #16
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	40000400 	.word	0x40000400
 8014e40:	40010800 	.word	0x40010800
 8014e44:	40011400 	.word	0x40011400

08014e48 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	6a1b      	ldr	r3, [r3, #32]
 8014e56:	4a0a      	ldr	r2, [pc, #40]	@ (8014e80 <HAL_TIM_Base_Stop+0x38>)
 8014e58:	4013      	ands	r3, r2
 8014e5a:	d107      	bne.n	8014e6c <HAL_TIM_Base_Stop+0x24>
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	681a      	ldr	r2, [r3, #0]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	2101      	movs	r1, #1
 8014e68:	438a      	bics	r2, r1
 8014e6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2239      	movs	r2, #57	@ 0x39
 8014e70:	2101      	movs	r1, #1
 8014e72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014e74:	2300      	movs	r3, #0
}
 8014e76:	0018      	movs	r0, r3
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	b002      	add	sp, #8
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	46c0      	nop			@ (mov r8, r8)
 8014e80:	00001111 	.word	0x00001111

08014e84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d101      	bne.n	8014e96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014e92:	2301      	movs	r3, #1
 8014e94:	e032      	b.n	8014efc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	2239      	movs	r2, #57	@ 0x39
 8014e9a:	5c9b      	ldrb	r3, [r3, r2]
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d107      	bne.n	8014eb2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2238      	movs	r2, #56	@ 0x38
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	0018      	movs	r0, r3
 8014eae:	f7f7 fd19 	bl	800c8e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2239      	movs	r2, #57	@ 0x39
 8014eb6:	2102      	movs	r1, #2
 8014eb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	3304      	adds	r3, #4
 8014ec2:	0019      	movs	r1, r3
 8014ec4:	0010      	movs	r0, r2
 8014ec6:	f000 f975 	bl	80151b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	223e      	movs	r2, #62	@ 0x3e
 8014ece:	2101      	movs	r1, #1
 8014ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	223a      	movs	r2, #58	@ 0x3a
 8014ed6:	2101      	movs	r1, #1
 8014ed8:	5499      	strb	r1, [r3, r2]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	223b      	movs	r2, #59	@ 0x3b
 8014ede:	2101      	movs	r1, #1
 8014ee0:	5499      	strb	r1, [r3, r2]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	223c      	movs	r2, #60	@ 0x3c
 8014ee6:	2101      	movs	r1, #1
 8014ee8:	5499      	strb	r1, [r3, r2]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	223d      	movs	r2, #61	@ 0x3d
 8014eee:	2101      	movs	r1, #1
 8014ef0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2239      	movs	r2, #57	@ 0x39
 8014ef6:	2101      	movs	r1, #1
 8014ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014efa:	2300      	movs	r3, #0
}
 8014efc:	0018      	movs	r0, r3
 8014efe:	46bd      	mov	sp, r7
 8014f00:	b002      	add	sp, #8
 8014f02:	bd80      	pop	{r7, pc}

08014f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	b084      	sub	sp, #16
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
 8014f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d108      	bne.n	8014f26 <HAL_TIM_PWM_Start+0x22>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	223a      	movs	r2, #58	@ 0x3a
 8014f18:	5c9b      	ldrb	r3, [r3, r2]
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	3b01      	subs	r3, #1
 8014f1e:	1e5a      	subs	r2, r3, #1
 8014f20:	4193      	sbcs	r3, r2
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	e01f      	b.n	8014f66 <HAL_TIM_PWM_Start+0x62>
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	2b04      	cmp	r3, #4
 8014f2a:	d108      	bne.n	8014f3e <HAL_TIM_PWM_Start+0x3a>
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	223b      	movs	r2, #59	@ 0x3b
 8014f30:	5c9b      	ldrb	r3, [r3, r2]
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	3b01      	subs	r3, #1
 8014f36:	1e5a      	subs	r2, r3, #1
 8014f38:	4193      	sbcs	r3, r2
 8014f3a:	b2db      	uxtb	r3, r3
 8014f3c:	e013      	b.n	8014f66 <HAL_TIM_PWM_Start+0x62>
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	2b08      	cmp	r3, #8
 8014f42:	d108      	bne.n	8014f56 <HAL_TIM_PWM_Start+0x52>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	223c      	movs	r2, #60	@ 0x3c
 8014f48:	5c9b      	ldrb	r3, [r3, r2]
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	3b01      	subs	r3, #1
 8014f4e:	1e5a      	subs	r2, r3, #1
 8014f50:	4193      	sbcs	r3, r2
 8014f52:	b2db      	uxtb	r3, r3
 8014f54:	e007      	b.n	8014f66 <HAL_TIM_PWM_Start+0x62>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	223d      	movs	r2, #61	@ 0x3d
 8014f5a:	5c9b      	ldrb	r3, [r3, r2]
 8014f5c:	b2db      	uxtb	r3, r3
 8014f5e:	3b01      	subs	r3, #1
 8014f60:	1e5a      	subs	r2, r3, #1
 8014f62:	4193      	sbcs	r3, r2
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d001      	beq.n	8014f6e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	e052      	b.n	8015014 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d104      	bne.n	8014f7e <HAL_TIM_PWM_Start+0x7a>
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	223a      	movs	r2, #58	@ 0x3a
 8014f78:	2102      	movs	r1, #2
 8014f7a:	5499      	strb	r1, [r3, r2]
 8014f7c:	e013      	b.n	8014fa6 <HAL_TIM_PWM_Start+0xa2>
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	2b04      	cmp	r3, #4
 8014f82:	d104      	bne.n	8014f8e <HAL_TIM_PWM_Start+0x8a>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	223b      	movs	r2, #59	@ 0x3b
 8014f88:	2102      	movs	r1, #2
 8014f8a:	5499      	strb	r1, [r3, r2]
 8014f8c:	e00b      	b.n	8014fa6 <HAL_TIM_PWM_Start+0xa2>
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	2b08      	cmp	r3, #8
 8014f92:	d104      	bne.n	8014f9e <HAL_TIM_PWM_Start+0x9a>
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	223c      	movs	r2, #60	@ 0x3c
 8014f98:	2102      	movs	r1, #2
 8014f9a:	5499      	strb	r1, [r3, r2]
 8014f9c:	e003      	b.n	8014fa6 <HAL_TIM_PWM_Start+0xa2>
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	223d      	movs	r2, #61	@ 0x3d
 8014fa2:	2102      	movs	r1, #2
 8014fa4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	6839      	ldr	r1, [r7, #0]
 8014fac:	2201      	movs	r2, #1
 8014fae:	0018      	movs	r0, r3
 8014fb0:	f000 fa62 	bl	8015478 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	2380      	movs	r3, #128	@ 0x80
 8014fba:	05db      	lsls	r3, r3, #23
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d00e      	beq.n	8014fde <HAL_TIM_PWM_Start+0xda>
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	4a15      	ldr	r2, [pc, #84]	@ (801501c <HAL_TIM_PWM_Start+0x118>)
 8014fc6:	4293      	cmp	r3, r2
 8014fc8:	d009      	beq.n	8014fde <HAL_TIM_PWM_Start+0xda>
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	4a14      	ldr	r2, [pc, #80]	@ (8015020 <HAL_TIM_PWM_Start+0x11c>)
 8014fd0:	4293      	cmp	r3, r2
 8014fd2:	d004      	beq.n	8014fde <HAL_TIM_PWM_Start+0xda>
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	4a12      	ldr	r2, [pc, #72]	@ (8015024 <HAL_TIM_PWM_Start+0x120>)
 8014fda:	4293      	cmp	r3, r2
 8014fdc:	d111      	bne.n	8015002 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	689b      	ldr	r3, [r3, #8]
 8014fe4:	2207      	movs	r2, #7
 8014fe6:	4013      	ands	r3, r2
 8014fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2b06      	cmp	r3, #6
 8014fee:	d010      	beq.n	8015012 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	681a      	ldr	r2, [r3, #0]
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	2101      	movs	r1, #1
 8014ffc:	430a      	orrs	r2, r1
 8014ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015000:	e007      	b.n	8015012 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	2101      	movs	r1, #1
 801500e:	430a      	orrs	r2, r1
 8015010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015012:	2300      	movs	r3, #0
}
 8015014:	0018      	movs	r0, r3
 8015016:	46bd      	mov	sp, r7
 8015018:	b004      	add	sp, #16
 801501a:	bd80      	pop	{r7, pc}
 801501c:	40000400 	.word	0x40000400
 8015020:	40010800 	.word	0x40010800
 8015024:	40011400 	.word	0x40011400

08015028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b086      	sub	sp, #24
 801502c:	af00      	add	r7, sp, #0
 801502e:	60f8      	str	r0, [r7, #12]
 8015030:	60b9      	str	r1, [r7, #8]
 8015032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015034:	2317      	movs	r3, #23
 8015036:	18fb      	adds	r3, r7, r3
 8015038:	2200      	movs	r2, #0
 801503a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	2238      	movs	r2, #56	@ 0x38
 8015040:	5c9b      	ldrb	r3, [r3, r2]
 8015042:	2b01      	cmp	r3, #1
 8015044:	d101      	bne.n	801504a <HAL_TIM_PWM_ConfigChannel+0x22>
 8015046:	2302      	movs	r3, #2
 8015048:	e0ad      	b.n	80151a6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	2238      	movs	r2, #56	@ 0x38
 801504e:	2101      	movs	r1, #1
 8015050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2b0c      	cmp	r3, #12
 8015056:	d100      	bne.n	801505a <HAL_TIM_PWM_ConfigChannel+0x32>
 8015058:	e076      	b.n	8015148 <HAL_TIM_PWM_ConfigChannel+0x120>
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b0c      	cmp	r3, #12
 801505e:	d900      	bls.n	8015062 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8015060:	e095      	b.n	801518e <HAL_TIM_PWM_ConfigChannel+0x166>
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2b08      	cmp	r3, #8
 8015066:	d04e      	beq.n	8015106 <HAL_TIM_PWM_ConfigChannel+0xde>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	2b08      	cmp	r3, #8
 801506c:	d900      	bls.n	8015070 <HAL_TIM_PWM_ConfigChannel+0x48>
 801506e:	e08e      	b.n	801518e <HAL_TIM_PWM_ConfigChannel+0x166>
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d003      	beq.n	801507e <HAL_TIM_PWM_ConfigChannel+0x56>
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b04      	cmp	r3, #4
 801507a:	d021      	beq.n	80150c0 <HAL_TIM_PWM_ConfigChannel+0x98>
 801507c:	e087      	b.n	801518e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	68ba      	ldr	r2, [r7, #8]
 8015084:	0011      	movs	r1, r2
 8015086:	0018      	movs	r0, r3
 8015088:	f000 f8f2 	bl	8015270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	699a      	ldr	r2, [r3, #24]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	2108      	movs	r1, #8
 8015098:	430a      	orrs	r2, r1
 801509a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	699a      	ldr	r2, [r3, #24]
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	2104      	movs	r1, #4
 80150a8:	438a      	bics	r2, r1
 80150aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	6999      	ldr	r1, [r3, #24]
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	68da      	ldr	r2, [r3, #12]
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	430a      	orrs	r2, r1
 80150bc:	619a      	str	r2, [r3, #24]
      break;
 80150be:	e06b      	b.n	8015198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	68ba      	ldr	r2, [r7, #8]
 80150c6:	0011      	movs	r1, r2
 80150c8:	0018      	movs	r0, r3
 80150ca:	f000 f90d 	bl	80152e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	699a      	ldr	r2, [r3, #24]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2180      	movs	r1, #128	@ 0x80
 80150da:	0109      	lsls	r1, r1, #4
 80150dc:	430a      	orrs	r2, r1
 80150de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	699a      	ldr	r2, [r3, #24]
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	4931      	ldr	r1, [pc, #196]	@ (80151b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80150ec:	400a      	ands	r2, r1
 80150ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	6999      	ldr	r1, [r3, #24]
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	021a      	lsls	r2, r3, #8
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	430a      	orrs	r2, r1
 8015102:	619a      	str	r2, [r3, #24]
      break;
 8015104:	e048      	b.n	8015198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	68ba      	ldr	r2, [r7, #8]
 801510c:	0011      	movs	r1, r2
 801510e:	0018      	movs	r0, r3
 8015110:	f000 f92c 	bl	801536c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	69da      	ldr	r2, [r3, #28]
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2108      	movs	r1, #8
 8015120:	430a      	orrs	r2, r1
 8015122:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	69da      	ldr	r2, [r3, #28]
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	2104      	movs	r1, #4
 8015130:	438a      	bics	r2, r1
 8015132:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	69d9      	ldr	r1, [r3, #28]
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	68da      	ldr	r2, [r3, #12]
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	430a      	orrs	r2, r1
 8015144:	61da      	str	r2, [r3, #28]
      break;
 8015146:	e027      	b.n	8015198 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	68ba      	ldr	r2, [r7, #8]
 801514e:	0011      	movs	r1, r2
 8015150:	0018      	movs	r0, r3
 8015152:	f000 f94b 	bl	80153ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	69da      	ldr	r2, [r3, #28]
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	2180      	movs	r1, #128	@ 0x80
 8015162:	0109      	lsls	r1, r1, #4
 8015164:	430a      	orrs	r2, r1
 8015166:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	69da      	ldr	r2, [r3, #28]
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	490f      	ldr	r1, [pc, #60]	@ (80151b0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015174:	400a      	ands	r2, r1
 8015176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	69d9      	ldr	r1, [r3, #28]
 801517e:	68bb      	ldr	r3, [r7, #8]
 8015180:	68db      	ldr	r3, [r3, #12]
 8015182:	021a      	lsls	r2, r3, #8
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	430a      	orrs	r2, r1
 801518a:	61da      	str	r2, [r3, #28]
      break;
 801518c:	e004      	b.n	8015198 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801518e:	2317      	movs	r3, #23
 8015190:	18fb      	adds	r3, r7, r3
 8015192:	2201      	movs	r2, #1
 8015194:	701a      	strb	r2, [r3, #0]
      break;
 8015196:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2238      	movs	r2, #56	@ 0x38
 801519c:	2100      	movs	r1, #0
 801519e:	5499      	strb	r1, [r3, r2]

  return status;
 80151a0:	2317      	movs	r3, #23
 80151a2:	18fb      	adds	r3, r7, r3
 80151a4:	781b      	ldrb	r3, [r3, #0]
}
 80151a6:	0018      	movs	r0, r3
 80151a8:	46bd      	mov	sp, r7
 80151aa:	b006      	add	sp, #24
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	46c0      	nop			@ (mov r8, r8)
 80151b0:	fffffbff 	.word	0xfffffbff

080151b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b084      	sub	sp, #16
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	2380      	movs	r3, #128	@ 0x80
 80151c8:	05db      	lsls	r3, r3, #23
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d00b      	beq.n	80151e6 <TIM_Base_SetConfig+0x32>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	4a23      	ldr	r2, [pc, #140]	@ (8015260 <TIM_Base_SetConfig+0xac>)
 80151d2:	4293      	cmp	r3, r2
 80151d4:	d007      	beq.n	80151e6 <TIM_Base_SetConfig+0x32>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4a22      	ldr	r2, [pc, #136]	@ (8015264 <TIM_Base_SetConfig+0xb0>)
 80151da:	4293      	cmp	r3, r2
 80151dc:	d003      	beq.n	80151e6 <TIM_Base_SetConfig+0x32>
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	4a21      	ldr	r2, [pc, #132]	@ (8015268 <TIM_Base_SetConfig+0xb4>)
 80151e2:	4293      	cmp	r3, r2
 80151e4:	d108      	bne.n	80151f8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	2270      	movs	r2, #112	@ 0x70
 80151ea:	4393      	bics	r3, r2
 80151ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	685b      	ldr	r3, [r3, #4]
 80151f2:	68fa      	ldr	r2, [r7, #12]
 80151f4:	4313      	orrs	r3, r2
 80151f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80151f8:	687a      	ldr	r2, [r7, #4]
 80151fa:	2380      	movs	r3, #128	@ 0x80
 80151fc:	05db      	lsls	r3, r3, #23
 80151fe:	429a      	cmp	r2, r3
 8015200:	d00b      	beq.n	801521a <TIM_Base_SetConfig+0x66>
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	4a16      	ldr	r2, [pc, #88]	@ (8015260 <TIM_Base_SetConfig+0xac>)
 8015206:	4293      	cmp	r3, r2
 8015208:	d007      	beq.n	801521a <TIM_Base_SetConfig+0x66>
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	4a15      	ldr	r2, [pc, #84]	@ (8015264 <TIM_Base_SetConfig+0xb0>)
 801520e:	4293      	cmp	r3, r2
 8015210:	d003      	beq.n	801521a <TIM_Base_SetConfig+0x66>
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	4a14      	ldr	r2, [pc, #80]	@ (8015268 <TIM_Base_SetConfig+0xb4>)
 8015216:	4293      	cmp	r3, r2
 8015218:	d108      	bne.n	801522c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	4a13      	ldr	r2, [pc, #76]	@ (801526c <TIM_Base_SetConfig+0xb8>)
 801521e:	4013      	ands	r3, r2
 8015220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	68db      	ldr	r3, [r3, #12]
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	4313      	orrs	r3, r2
 801522a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	2280      	movs	r2, #128	@ 0x80
 8015230:	4393      	bics	r3, r2
 8015232:	001a      	movs	r2, r3
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	691b      	ldr	r3, [r3, #16]
 8015238:	4313      	orrs	r3, r2
 801523a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	68fa      	ldr	r2, [r7, #12]
 8015240:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	689a      	ldr	r2, [r3, #8]
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	2201      	movs	r2, #1
 8015256:	615a      	str	r2, [r3, #20]
}
 8015258:	46c0      	nop			@ (mov r8, r8)
 801525a:	46bd      	mov	sp, r7
 801525c:	b004      	add	sp, #16
 801525e:	bd80      	pop	{r7, pc}
 8015260:	40000400 	.word	0x40000400
 8015264:	40010800 	.word	0x40010800
 8015268:	40011400 	.word	0x40011400
 801526c:	fffffcff 	.word	0xfffffcff

08015270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b086      	sub	sp, #24
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a1b      	ldr	r3, [r3, #32]
 801527e:	2201      	movs	r2, #1
 8015280:	4393      	bics	r3, r2
 8015282:	001a      	movs	r2, r3
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6a1b      	ldr	r3, [r3, #32]
 801528c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	685b      	ldr	r3, [r3, #4]
 8015292:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	699b      	ldr	r3, [r3, #24]
 8015298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	2270      	movs	r2, #112	@ 0x70
 801529e:	4393      	bics	r3, r2
 80152a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	2203      	movs	r2, #3
 80152a6:	4393      	bics	r3, r2
 80152a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	68fa      	ldr	r2, [r7, #12]
 80152b0:	4313      	orrs	r3, r2
 80152b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80152b4:	697b      	ldr	r3, [r7, #20]
 80152b6:	2202      	movs	r2, #2
 80152b8:	4393      	bics	r3, r2
 80152ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	689b      	ldr	r3, [r3, #8]
 80152c0:	697a      	ldr	r2, [r7, #20]
 80152c2:	4313      	orrs	r3, r2
 80152c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	693a      	ldr	r2, [r7, #16]
 80152ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	68fa      	ldr	r2, [r7, #12]
 80152d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80152d2:	683b      	ldr	r3, [r7, #0]
 80152d4:	685a      	ldr	r2, [r3, #4]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	697a      	ldr	r2, [r7, #20]
 80152de:	621a      	str	r2, [r3, #32]
}
 80152e0:	46c0      	nop			@ (mov r8, r8)
 80152e2:	46bd      	mov	sp, r7
 80152e4:	b006      	add	sp, #24
 80152e6:	bd80      	pop	{r7, pc}

080152e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6a1b      	ldr	r3, [r3, #32]
 80152f6:	2210      	movs	r2, #16
 80152f8:	4393      	bics	r3, r2
 80152fa:	001a      	movs	r2, r3
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6a1b      	ldr	r3, [r3, #32]
 8015304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	699b      	ldr	r3, [r3, #24]
 8015310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	4a13      	ldr	r2, [pc, #76]	@ (8015364 <TIM_OC2_SetConfig+0x7c>)
 8015316:	4013      	ands	r3, r2
 8015318:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	4a12      	ldr	r2, [pc, #72]	@ (8015368 <TIM_OC2_SetConfig+0x80>)
 801531e:	4013      	ands	r3, r2
 8015320:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	021b      	lsls	r3, r3, #8
 8015328:	68fa      	ldr	r2, [r7, #12]
 801532a:	4313      	orrs	r3, r2
 801532c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801532e:	697b      	ldr	r3, [r7, #20]
 8015330:	2220      	movs	r2, #32
 8015332:	4393      	bics	r3, r2
 8015334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	689b      	ldr	r3, [r3, #8]
 801533a:	011b      	lsls	r3, r3, #4
 801533c:	697a      	ldr	r2, [r7, #20]
 801533e:	4313      	orrs	r3, r2
 8015340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	693a      	ldr	r2, [r7, #16]
 8015346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	68fa      	ldr	r2, [r7, #12]
 801534c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	685a      	ldr	r2, [r3, #4]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	697a      	ldr	r2, [r7, #20]
 801535a:	621a      	str	r2, [r3, #32]
}
 801535c:	46c0      	nop			@ (mov r8, r8)
 801535e:	46bd      	mov	sp, r7
 8015360:	b006      	add	sp, #24
 8015362:	bd80      	pop	{r7, pc}
 8015364:	ffff8fff 	.word	0xffff8fff
 8015368:	fffffcff 	.word	0xfffffcff

0801536c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b086      	sub	sp, #24
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	6a1b      	ldr	r3, [r3, #32]
 801537a:	4a1a      	ldr	r2, [pc, #104]	@ (80153e4 <TIM_OC3_SetConfig+0x78>)
 801537c:	401a      	ands	r2, r3
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	6a1b      	ldr	r3, [r3, #32]
 8015386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	685b      	ldr	r3, [r3, #4]
 801538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	69db      	ldr	r3, [r3, #28]
 8015392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2270      	movs	r2, #112	@ 0x70
 8015398:	4393      	bics	r3, r2
 801539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2203      	movs	r2, #3
 80153a0:	4393      	bics	r3, r2
 80153a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	68fa      	ldr	r2, [r7, #12]
 80153aa:	4313      	orrs	r3, r2
 80153ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	4a0d      	ldr	r2, [pc, #52]	@ (80153e8 <TIM_OC3_SetConfig+0x7c>)
 80153b2:	4013      	ands	r3, r2
 80153b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	689b      	ldr	r3, [r3, #8]
 80153ba:	021b      	lsls	r3, r3, #8
 80153bc:	697a      	ldr	r2, [r7, #20]
 80153be:	4313      	orrs	r3, r2
 80153c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	693a      	ldr	r2, [r7, #16]
 80153c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	68fa      	ldr	r2, [r7, #12]
 80153cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	685a      	ldr	r2, [r3, #4]
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	697a      	ldr	r2, [r7, #20]
 80153da:	621a      	str	r2, [r3, #32]
}
 80153dc:	46c0      	nop			@ (mov r8, r8)
 80153de:	46bd      	mov	sp, r7
 80153e0:	b006      	add	sp, #24
 80153e2:	bd80      	pop	{r7, pc}
 80153e4:	fffffeff 	.word	0xfffffeff
 80153e8:	fffffdff 	.word	0xfffffdff

080153ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b086      	sub	sp, #24
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6a1b      	ldr	r3, [r3, #32]
 80153fa:	4a1b      	ldr	r2, [pc, #108]	@ (8015468 <TIM_OC4_SetConfig+0x7c>)
 80153fc:	401a      	ands	r2, r3
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	6a1b      	ldr	r3, [r3, #32]
 8015406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	69db      	ldr	r3, [r3, #28]
 8015412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	4a15      	ldr	r2, [pc, #84]	@ (801546c <TIM_OC4_SetConfig+0x80>)
 8015418:	4013      	ands	r3, r2
 801541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	4a14      	ldr	r2, [pc, #80]	@ (8015470 <TIM_OC4_SetConfig+0x84>)
 8015420:	4013      	ands	r3, r2
 8015422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	021b      	lsls	r3, r3, #8
 801542a:	68fa      	ldr	r2, [r7, #12]
 801542c:	4313      	orrs	r3, r2
 801542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	4a10      	ldr	r2, [pc, #64]	@ (8015474 <TIM_OC4_SetConfig+0x88>)
 8015434:	4013      	ands	r3, r2
 8015436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	689b      	ldr	r3, [r3, #8]
 801543c:	031b      	lsls	r3, r3, #12
 801543e:	697a      	ldr	r2, [r7, #20]
 8015440:	4313      	orrs	r3, r2
 8015442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	693a      	ldr	r2, [r7, #16]
 8015448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	685a      	ldr	r2, [r3, #4]
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	697a      	ldr	r2, [r7, #20]
 801545c:	621a      	str	r2, [r3, #32]
}
 801545e:	46c0      	nop			@ (mov r8, r8)
 8015460:	46bd      	mov	sp, r7
 8015462:	b006      	add	sp, #24
 8015464:	bd80      	pop	{r7, pc}
 8015466:	46c0      	nop			@ (mov r8, r8)
 8015468:	ffffefff 	.word	0xffffefff
 801546c:	ffff8fff 	.word	0xffff8fff
 8015470:	fffffcff 	.word	0xfffffcff
 8015474:	ffffdfff 	.word	0xffffdfff

08015478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b086      	sub	sp, #24
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	221f      	movs	r2, #31
 8015488:	4013      	ands	r3, r2
 801548a:	2201      	movs	r2, #1
 801548c:	409a      	lsls	r2, r3
 801548e:	0013      	movs	r3, r2
 8015490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	6a1b      	ldr	r3, [r3, #32]
 8015496:	697a      	ldr	r2, [r7, #20]
 8015498:	43d2      	mvns	r2, r2
 801549a:	401a      	ands	r2, r3
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	6a1a      	ldr	r2, [r3, #32]
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	211f      	movs	r1, #31
 80154a8:	400b      	ands	r3, r1
 80154aa:	6879      	ldr	r1, [r7, #4]
 80154ac:	4099      	lsls	r1, r3
 80154ae:	000b      	movs	r3, r1
 80154b0:	431a      	orrs	r2, r3
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	621a      	str	r2, [r3, #32]
}
 80154b6:	46c0      	nop			@ (mov r8, r8)
 80154b8:	46bd      	mov	sp, r7
 80154ba:	b006      	add	sp, #24
 80154bc:	bd80      	pop	{r7, pc}
	...

080154c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2238      	movs	r2, #56	@ 0x38
 80154ce:	5c9b      	ldrb	r3, [r3, r2]
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d101      	bne.n	80154d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80154d4:	2302      	movs	r3, #2
 80154d6:	e047      	b.n	8015568 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	2238      	movs	r2, #56	@ 0x38
 80154dc:	2101      	movs	r1, #1
 80154de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2239      	movs	r2, #57	@ 0x39
 80154e4:	2102      	movs	r1, #2
 80154e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	689b      	ldr	r3, [r3, #8]
 80154f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2270      	movs	r2, #112	@ 0x70
 80154fc:	4393      	bics	r3, r2
 80154fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	4313      	orrs	r3, r2
 8015508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	68fa      	ldr	r2, [r7, #12]
 8015510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681a      	ldr	r2, [r3, #0]
 8015516:	2380      	movs	r3, #128	@ 0x80
 8015518:	05db      	lsls	r3, r3, #23
 801551a:	429a      	cmp	r2, r3
 801551c:	d00e      	beq.n	801553c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	4a13      	ldr	r2, [pc, #76]	@ (8015570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8015524:	4293      	cmp	r3, r2
 8015526:	d009      	beq.n	801553c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	4a11      	ldr	r2, [pc, #68]	@ (8015574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801552e:	4293      	cmp	r3, r2
 8015530:	d004      	beq.n	801553c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	4a10      	ldr	r2, [pc, #64]	@ (8015578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8015538:	4293      	cmp	r3, r2
 801553a:	d10c      	bne.n	8015556 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	2280      	movs	r2, #128	@ 0x80
 8015540:	4393      	bics	r3, r2
 8015542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015544:	683b      	ldr	r3, [r7, #0]
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	68ba      	ldr	r2, [r7, #8]
 801554a:	4313      	orrs	r3, r2
 801554c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	68ba      	ldr	r2, [r7, #8]
 8015554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2239      	movs	r2, #57	@ 0x39
 801555a:	2101      	movs	r1, #1
 801555c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2238      	movs	r2, #56	@ 0x38
 8015562:	2100      	movs	r1, #0
 8015564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015566:	2300      	movs	r3, #0
}
 8015568:	0018      	movs	r0, r3
 801556a:	46bd      	mov	sp, r7
 801556c:	b004      	add	sp, #16
 801556e:	bd80      	pop	{r7, pc}
 8015570:	40000400 	.word	0x40000400
 8015574:	40010800 	.word	0x40010800
 8015578:	40011400 	.word	0x40011400

0801557c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2238      	movs	r2, #56	@ 0x38
 801558a:	5c9b      	ldrb	r3, [r3, r2]
 801558c:	2b01      	cmp	r3, #1
 801558e:	d101      	bne.n	8015594 <HAL_TIMEx_RemapConfig+0x18>
 8015590:	2302      	movs	r3, #2
 8015592:	e00c      	b.n	80155ae <HAL_TIMEx_RemapConfig+0x32>
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2238      	movs	r2, #56	@ 0x38
 8015598:	2101      	movs	r1, #1
 801559a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	683a      	ldr	r2, [r7, #0]
 80155a2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2238      	movs	r2, #56	@ 0x38
 80155a8:	2100      	movs	r1, #0
 80155aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80155ac:	2300      	movs	r3, #0
}
 80155ae:	0018      	movs	r0, r3
 80155b0:	46bd      	mov	sp, r7
 80155b2:	b002      	add	sp, #8
 80155b4:	bd80      	pop	{r7, pc}
	...

080155b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d101      	bne.n	80155ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80155c6:	2301      	movs	r3, #1
 80155c8:	e053      	b.n	8015672 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d116      	bne.n	8015600 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	2278      	movs	r2, #120	@ 0x78
 80155d6:	2100      	movs	r1, #0
 80155d8:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	0018      	movs	r0, r3
 80155de:	f000 fd65 	bl	80160ac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	22b0      	movs	r2, #176	@ 0xb0
 80155e6:	589b      	ldr	r3, [r3, r2]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d103      	bne.n	80155f4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	21b0      	movs	r1, #176	@ 0xb0
 80155f0:	4a22      	ldr	r2, [pc, #136]	@ (801567c <HAL_UART_Init+0xc4>)
 80155f2:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	22b0      	movs	r2, #176	@ 0xb0
 80155f8:	589b      	ldr	r3, [r3, r2]
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	0010      	movs	r0, r2
 80155fe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2224      	movs	r2, #36	@ 0x24
 8015604:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	681a      	ldr	r2, [r3, #0]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	2101      	movs	r1, #1
 8015612:	438a      	bics	r2, r1
 8015614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	0018      	movs	r0, r3
 801561a:	f000 fd8b 	bl	8016134 <UART_SetConfig>
 801561e:	0003      	movs	r3, r0
 8015620:	2b01      	cmp	r3, #1
 8015622:	d101      	bne.n	8015628 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8015624:	2301      	movs	r3, #1
 8015626:	e024      	b.n	8015672 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801562c:	2b00      	cmp	r3, #0
 801562e:	d003      	beq.n	8015638 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	0018      	movs	r0, r3
 8015634:	f001 f81c 	bl	8016670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	685a      	ldr	r2, [r3, #4]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	490f      	ldr	r1, [pc, #60]	@ (8015680 <HAL_UART_Init+0xc8>)
 8015644:	400a      	ands	r2, r1
 8015646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	689a      	ldr	r2, [r3, #8]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	212a      	movs	r1, #42	@ 0x2a
 8015654:	438a      	bics	r2, r1
 8015656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	681a      	ldr	r2, [r3, #0]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	2101      	movs	r1, #1
 8015664:	430a      	orrs	r2, r1
 8015666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	0018      	movs	r0, r3
 801566c:	f001 f8b4 	bl	80167d8 <UART_CheckIdleState>
 8015670:	0003      	movs	r3, r0
}
 8015672:	0018      	movs	r0, r3
 8015674:	46bd      	mov	sp, r7
 8015676:	b002      	add	sp, #8
 8015678:	bd80      	pop	{r7, pc}
 801567a:	46c0      	nop			@ (mov r8, r8)
 801567c:	0800cb61 	.word	0x0800cb61
 8015680:	ffffb7ff 	.word	0xffffb7ff

08015684 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b08a      	sub	sp, #40	@ 0x28
 8015688:	af02      	add	r7, sp, #8
 801568a:	60f8      	str	r0, [r7, #12]
 801568c:	60b9      	str	r1, [r7, #8]
 801568e:	603b      	str	r3, [r7, #0]
 8015690:	1dbb      	adds	r3, r7, #6
 8015692:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015698:	2b20      	cmp	r3, #32
 801569a:	d000      	beq.n	801569e <HAL_UART_Transmit+0x1a>
 801569c:	e08c      	b.n	80157b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d003      	beq.n	80156ac <HAL_UART_Transmit+0x28>
 80156a4:	1dbb      	adds	r3, r7, #6
 80156a6:	881b      	ldrh	r3, [r3, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d101      	bne.n	80156b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80156ac:	2301      	movs	r3, #1
 80156ae:	e084      	b.n	80157ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	689a      	ldr	r2, [r3, #8]
 80156b4:	2380      	movs	r3, #128	@ 0x80
 80156b6:	015b      	lsls	r3, r3, #5
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d109      	bne.n	80156d0 <HAL_UART_Transmit+0x4c>
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	691b      	ldr	r3, [r3, #16]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d105      	bne.n	80156d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80156c4:	68bb      	ldr	r3, [r7, #8]
 80156c6:	2201      	movs	r2, #1
 80156c8:	4013      	ands	r3, r2
 80156ca:	d001      	beq.n	80156d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80156cc:	2301      	movs	r3, #1
 80156ce:	e074      	b.n	80157ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	2284      	movs	r2, #132	@ 0x84
 80156d4:	2100      	movs	r1, #0
 80156d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2221      	movs	r2, #33	@ 0x21
 80156dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80156de:	f7f7 ff69 	bl	800d5b4 <HAL_GetTick>
 80156e2:	0003      	movs	r3, r0
 80156e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	1dba      	adds	r2, r7, #6
 80156ea:	2150      	movs	r1, #80	@ 0x50
 80156ec:	8812      	ldrh	r2, [r2, #0]
 80156ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	1dba      	adds	r2, r7, #6
 80156f4:	2152      	movs	r1, #82	@ 0x52
 80156f6:	8812      	ldrh	r2, [r2, #0]
 80156f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	689a      	ldr	r2, [r3, #8]
 80156fe:	2380      	movs	r3, #128	@ 0x80
 8015700:	015b      	lsls	r3, r3, #5
 8015702:	429a      	cmp	r2, r3
 8015704:	d108      	bne.n	8015718 <HAL_UART_Transmit+0x94>
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	691b      	ldr	r3, [r3, #16]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d104      	bne.n	8015718 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801570e:	2300      	movs	r3, #0
 8015710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	61bb      	str	r3, [r7, #24]
 8015716:	e003      	b.n	8015720 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801571c:	2300      	movs	r3, #0
 801571e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015720:	e02f      	b.n	8015782 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015722:	697a      	ldr	r2, [r7, #20]
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	9300      	str	r3, [sp, #0]
 801572a:	0013      	movs	r3, r2
 801572c:	2200      	movs	r2, #0
 801572e:	2180      	movs	r1, #128	@ 0x80
 8015730:	f001 f8fa 	bl	8016928 <UART_WaitOnFlagUntilTimeout>
 8015734:	1e03      	subs	r3, r0, #0
 8015736:	d004      	beq.n	8015742 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2220      	movs	r2, #32
 801573c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801573e:	2303      	movs	r3, #3
 8015740:	e03b      	b.n	80157ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d10b      	bne.n	8015760 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015748:	69bb      	ldr	r3, [r7, #24]
 801574a:	881b      	ldrh	r3, [r3, #0]
 801574c:	001a      	movs	r2, r3
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	05d2      	lsls	r2, r2, #23
 8015754:	0dd2      	lsrs	r2, r2, #23
 8015756:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	3302      	adds	r3, #2
 801575c:	61bb      	str	r3, [r7, #24]
 801575e:	e007      	b.n	8015770 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015760:	69fb      	ldr	r3, [r7, #28]
 8015762:	781a      	ldrb	r2, [r3, #0]
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	3301      	adds	r3, #1
 801576e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	2252      	movs	r2, #82	@ 0x52
 8015774:	5a9b      	ldrh	r3, [r3, r2]
 8015776:	b29b      	uxth	r3, r3
 8015778:	3b01      	subs	r3, #1
 801577a:	b299      	uxth	r1, r3
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	2252      	movs	r2, #82	@ 0x52
 8015780:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	2252      	movs	r2, #82	@ 0x52
 8015786:	5a9b      	ldrh	r3, [r3, r2]
 8015788:	b29b      	uxth	r3, r3
 801578a:	2b00      	cmp	r3, #0
 801578c:	d1c9      	bne.n	8015722 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801578e:	697a      	ldr	r2, [r7, #20]
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	9300      	str	r3, [sp, #0]
 8015796:	0013      	movs	r3, r2
 8015798:	2200      	movs	r2, #0
 801579a:	2140      	movs	r1, #64	@ 0x40
 801579c:	f001 f8c4 	bl	8016928 <UART_WaitOnFlagUntilTimeout>
 80157a0:	1e03      	subs	r3, r0, #0
 80157a2:	d004      	beq.n	80157ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2220      	movs	r2, #32
 80157a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80157aa:	2303      	movs	r3, #3
 80157ac:	e005      	b.n	80157ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	2220      	movs	r2, #32
 80157b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80157b4:	2300      	movs	r3, #0
 80157b6:	e000      	b.n	80157ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80157b8:	2302      	movs	r3, #2
  }
}
 80157ba:	0018      	movs	r0, r3
 80157bc:	46bd      	mov	sp, r7
 80157be:	b008      	add	sp, #32
 80157c0:	bd80      	pop	{r7, pc}
	...

080157c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b088      	sub	sp, #32
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	1dbb      	adds	r3, r7, #6
 80157d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2280      	movs	r2, #128	@ 0x80
 80157d6:	589b      	ldr	r3, [r3, r2]
 80157d8:	2b20      	cmp	r3, #32
 80157da:	d14a      	bne.n	8015872 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d003      	beq.n	80157ea <HAL_UART_Receive_IT+0x26>
 80157e2:	1dbb      	adds	r3, r7, #6
 80157e4:	881b      	ldrh	r3, [r3, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d101      	bne.n	80157ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80157ea:	2301      	movs	r3, #1
 80157ec:	e042      	b.n	8015874 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	689a      	ldr	r2, [r3, #8]
 80157f2:	2380      	movs	r3, #128	@ 0x80
 80157f4:	015b      	lsls	r3, r3, #5
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d109      	bne.n	801580e <HAL_UART_Receive_IT+0x4a>
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	691b      	ldr	r3, [r3, #16]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d105      	bne.n	801580e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	2201      	movs	r2, #1
 8015806:	4013      	ands	r3, r2
 8015808:	d001      	beq.n	801580e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801580a:	2301      	movs	r3, #1
 801580c:	e032      	b.n	8015874 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	2200      	movs	r2, #0
 8015812:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	4a18      	ldr	r2, [pc, #96]	@ (801587c <HAL_UART_Receive_IT+0xb8>)
 801581a:	4293      	cmp	r3, r2
 801581c:	d020      	beq.n	8015860 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	685a      	ldr	r2, [r3, #4]
 8015824:	2380      	movs	r3, #128	@ 0x80
 8015826:	041b      	lsls	r3, r3, #16
 8015828:	4013      	ands	r3, r2
 801582a:	d019      	beq.n	8015860 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801582c:	f3ef 8310 	mrs	r3, PRIMASK
 8015830:	613b      	str	r3, [r7, #16]
  return(result);
 8015832:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015834:	61fb      	str	r3, [r7, #28]
 8015836:	2301      	movs	r3, #1
 8015838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	f383 8810 	msr	PRIMASK, r3
}
 8015840:	46c0      	nop			@ (mov r8, r8)
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2180      	movs	r1, #128	@ 0x80
 801584e:	04c9      	lsls	r1, r1, #19
 8015850:	430a      	orrs	r2, r1
 8015852:	601a      	str	r2, [r3, #0]
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015858:	69bb      	ldr	r3, [r7, #24]
 801585a:	f383 8810 	msr	PRIMASK, r3
}
 801585e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015860:	1dbb      	adds	r3, r7, #6
 8015862:	881a      	ldrh	r2, [r3, #0]
 8015864:	68b9      	ldr	r1, [r7, #8]
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	0018      	movs	r0, r3
 801586a:	f001 f8c7 	bl	80169fc <UART_Start_Receive_IT>
 801586e:	0003      	movs	r3, r0
 8015870:	e000      	b.n	8015874 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8015872:	2302      	movs	r3, #2
  }
}
 8015874:	0018      	movs	r0, r3
 8015876:	46bd      	mov	sp, r7
 8015878:	b008      	add	sp, #32
 801587a:	bd80      	pop	{r7, pc}
 801587c:	40004800 	.word	0x40004800

08015880 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b088      	sub	sp, #32
 8015884:	af00      	add	r7, sp, #0
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	60b9      	str	r1, [r7, #8]
 801588a:	1dbb      	adds	r3, r7, #6
 801588c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015892:	2b20      	cmp	r3, #32
 8015894:	d000      	beq.n	8015898 <HAL_UART_Transmit_DMA+0x18>
 8015896:	e077      	b.n	8015988 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d003      	beq.n	80158a6 <HAL_UART_Transmit_DMA+0x26>
 801589e:	1dbb      	adds	r3, r7, #6
 80158a0:	881b      	ldrh	r3, [r3, #0]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d101      	bne.n	80158aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80158a6:	2301      	movs	r3, #1
 80158a8:	e06f      	b.n	801598a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	689a      	ldr	r2, [r3, #8]
 80158ae:	2380      	movs	r3, #128	@ 0x80
 80158b0:	015b      	lsls	r3, r3, #5
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d109      	bne.n	80158ca <HAL_UART_Transmit_DMA+0x4a>
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	691b      	ldr	r3, [r3, #16]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d105      	bne.n	80158ca <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	2201      	movs	r2, #1
 80158c2:	4013      	ands	r3, r2
 80158c4:	d001      	beq.n	80158ca <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80158c6:	2301      	movs	r3, #1
 80158c8:	e05f      	b.n	801598a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	68ba      	ldr	r2, [r7, #8]
 80158ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	1dba      	adds	r2, r7, #6
 80158d4:	2150      	movs	r1, #80	@ 0x50
 80158d6:	8812      	ldrh	r2, [r2, #0]
 80158d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	1dba      	adds	r2, r7, #6
 80158de:	2152      	movs	r1, #82	@ 0x52
 80158e0:	8812      	ldrh	r2, [r2, #0]
 80158e2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	2284      	movs	r2, #132	@ 0x84
 80158e8:	2100      	movs	r1, #0
 80158ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	2221      	movs	r2, #33	@ 0x21
 80158f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d027      	beq.n	801594a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158fe:	4a25      	ldr	r2, [pc, #148]	@ (8015994 <HAL_UART_Transmit_DMA+0x114>)
 8015900:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015906:	4a24      	ldr	r2, [pc, #144]	@ (8015998 <HAL_UART_Transmit_DMA+0x118>)
 8015908:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801590e:	4a23      	ldr	r2, [pc, #140]	@ (801599c <HAL_UART_Transmit_DMA+0x11c>)
 8015910:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015916:	2200      	movs	r2, #0
 8015918:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015922:	0019      	movs	r1, r3
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	3328      	adds	r3, #40	@ 0x28
 801592a:	001a      	movs	r2, r3
 801592c:	1dbb      	adds	r3, r7, #6
 801592e:	881b      	ldrh	r3, [r3, #0]
 8015930:	f7f8 fb60 	bl	800dff4 <HAL_DMA_Start_IT>
 8015934:	1e03      	subs	r3, r0, #0
 8015936:	d008      	beq.n	801594a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2284      	movs	r2, #132	@ 0x84
 801593c:	2110      	movs	r1, #16
 801593e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	2220      	movs	r2, #32
 8015944:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8015946:	2301      	movs	r3, #1
 8015948:	e01f      	b.n	801598a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	2240      	movs	r2, #64	@ 0x40
 8015950:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015952:	f3ef 8310 	mrs	r3, PRIMASK
 8015956:	613b      	str	r3, [r7, #16]
  return(result);
 8015958:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801595a:	61fb      	str	r3, [r7, #28]
 801595c:	2301      	movs	r3, #1
 801595e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015960:	697b      	ldr	r3, [r7, #20]
 8015962:	f383 8810 	msr	PRIMASK, r3
}
 8015966:	46c0      	nop			@ (mov r8, r8)
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	689a      	ldr	r2, [r3, #8]
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	2180      	movs	r1, #128	@ 0x80
 8015974:	430a      	orrs	r2, r1
 8015976:	609a      	str	r2, [r3, #8]
 8015978:	69fb      	ldr	r3, [r7, #28]
 801597a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	f383 8810 	msr	PRIMASK, r3
}
 8015982:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8015984:	2300      	movs	r3, #0
 8015986:	e000      	b.n	801598a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8015988:	2302      	movs	r3, #2
  }
}
 801598a:	0018      	movs	r0, r3
 801598c:	46bd      	mov	sp, r7
 801598e:	b008      	add	sp, #32
 8015990:	bd80      	pop	{r7, pc}
 8015992:	46c0      	nop			@ (mov r8, r8)
 8015994:	08016de1 	.word	0x08016de1
 8015998:	08016e7d 	.word	0x08016e7d
 801599c:	0801701d 	.word	0x0801701d

080159a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b088      	sub	sp, #32
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	1dbb      	adds	r3, r7, #6
 80159ac:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	2280      	movs	r2, #128	@ 0x80
 80159b2:	589b      	ldr	r3, [r3, r2]
 80159b4:	2b20      	cmp	r3, #32
 80159b6:	d14a      	bne.n	8015a4e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d003      	beq.n	80159c6 <HAL_UART_Receive_DMA+0x26>
 80159be:	1dbb      	adds	r3, r7, #6
 80159c0:	881b      	ldrh	r3, [r3, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d101      	bne.n	80159ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80159c6:	2301      	movs	r3, #1
 80159c8:	e042      	b.n	8015a50 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	689a      	ldr	r2, [r3, #8]
 80159ce:	2380      	movs	r3, #128	@ 0x80
 80159d0:	015b      	lsls	r3, r3, #5
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d109      	bne.n	80159ea <HAL_UART_Receive_DMA+0x4a>
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	691b      	ldr	r3, [r3, #16]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d105      	bne.n	80159ea <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2201      	movs	r2, #1
 80159e2:	4013      	ands	r3, r2
 80159e4:	d001      	beq.n	80159ea <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80159e6:	2301      	movs	r3, #1
 80159e8:	e032      	b.n	8015a50 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2200      	movs	r2, #0
 80159ee:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	4a18      	ldr	r2, [pc, #96]	@ (8015a58 <HAL_UART_Receive_DMA+0xb8>)
 80159f6:	4293      	cmp	r3, r2
 80159f8:	d020      	beq.n	8015a3c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	685a      	ldr	r2, [r3, #4]
 8015a00:	2380      	movs	r3, #128	@ 0x80
 8015a02:	041b      	lsls	r3, r3, #16
 8015a04:	4013      	ands	r3, r2
 8015a06:	d019      	beq.n	8015a3c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a08:	f3ef 8310 	mrs	r3, PRIMASK
 8015a0c:	613b      	str	r3, [r7, #16]
  return(result);
 8015a0e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015a10:	61fb      	str	r3, [r7, #28]
 8015a12:	2301      	movs	r3, #1
 8015a14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	f383 8810 	msr	PRIMASK, r3
}
 8015a1c:	46c0      	nop			@ (mov r8, r8)
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	681a      	ldr	r2, [r3, #0]
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	2180      	movs	r1, #128	@ 0x80
 8015a2a:	04c9      	lsls	r1, r1, #19
 8015a2c:	430a      	orrs	r2, r1
 8015a2e:	601a      	str	r2, [r3, #0]
 8015a30:	69fb      	ldr	r3, [r7, #28]
 8015a32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	f383 8810 	msr	PRIMASK, r3
}
 8015a3a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015a3c:	1dbb      	adds	r3, r7, #6
 8015a3e:	881a      	ldrh	r2, [r3, #0]
 8015a40:	68b9      	ldr	r1, [r7, #8]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	0018      	movs	r0, r3
 8015a46:	f001 f8a3 	bl	8016b90 <UART_Start_Receive_DMA>
 8015a4a:	0003      	movs	r3, r0
 8015a4c:	e000      	b.n	8015a50 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8015a4e:	2302      	movs	r3, #2
  }
}
 8015a50:	0018      	movs	r0, r3
 8015a52:	46bd      	mov	sp, r7
 8015a54:	b008      	add	sp, #32
 8015a56:	bd80      	pop	{r7, pc}
 8015a58:	40004800 	.word	0x40004800

08015a5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015a5c:	b590      	push	{r4, r7, lr}
 8015a5e:	b0ab      	sub	sp, #172	@ 0xac
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	69db      	ldr	r3, [r3, #28]
 8015a6a:	22a4      	movs	r2, #164	@ 0xa4
 8015a6c:	18b9      	adds	r1, r7, r2
 8015a6e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	20a0      	movs	r0, #160	@ 0xa0
 8015a78:	1839      	adds	r1, r7, r0
 8015a7a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	689b      	ldr	r3, [r3, #8]
 8015a82:	219c      	movs	r1, #156	@ 0x9c
 8015a84:	1879      	adds	r1, r7, r1
 8015a86:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015a88:	0011      	movs	r1, r2
 8015a8a:	18bb      	adds	r3, r7, r2
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	4a9c      	ldr	r2, [pc, #624]	@ (8015d00 <HAL_UART_IRQHandler+0x2a4>)
 8015a90:	4013      	ands	r3, r2
 8015a92:	2298      	movs	r2, #152	@ 0x98
 8015a94:	18bc      	adds	r4, r7, r2
 8015a96:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8015a98:	18bb      	adds	r3, r7, r2
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d114      	bne.n	8015aca <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8015aa0:	187b      	adds	r3, r7, r1
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	2220      	movs	r2, #32
 8015aa6:	4013      	ands	r3, r2
 8015aa8:	d00f      	beq.n	8015aca <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015aaa:	183b      	adds	r3, r7, r0
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2220      	movs	r2, #32
 8015ab0:	4013      	ands	r3, r2
 8015ab2:	d00a      	beq.n	8015aca <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d100      	bne.n	8015abe <HAL_UART_IRQHandler+0x62>
 8015abc:	e2aa      	b.n	8016014 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	0010      	movs	r0, r2
 8015ac6:	4798      	blx	r3
      }
      return;
 8015ac8:	e2a4      	b.n	8016014 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015aca:	2398      	movs	r3, #152	@ 0x98
 8015acc:	18fb      	adds	r3, r7, r3
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d100      	bne.n	8015ad6 <HAL_UART_IRQHandler+0x7a>
 8015ad4:	e11a      	b.n	8015d0c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8015ad6:	239c      	movs	r3, #156	@ 0x9c
 8015ad8:	18fb      	adds	r3, r7, r3
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2201      	movs	r2, #1
 8015ade:	4013      	ands	r3, r2
 8015ae0:	d106      	bne.n	8015af0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8015ae2:	23a0      	movs	r3, #160	@ 0xa0
 8015ae4:	18fb      	adds	r3, r7, r3
 8015ae6:	681b      	ldr	r3, [r3, #0]
 8015ae8:	4a86      	ldr	r2, [pc, #536]	@ (8015d04 <HAL_UART_IRQHandler+0x2a8>)
 8015aea:	4013      	ands	r3, r2
 8015aec:	d100      	bne.n	8015af0 <HAL_UART_IRQHandler+0x94>
 8015aee:	e10d      	b.n	8015d0c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015af0:	23a4      	movs	r3, #164	@ 0xa4
 8015af2:	18fb      	adds	r3, r7, r3
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	2201      	movs	r2, #1
 8015af8:	4013      	ands	r3, r2
 8015afa:	d012      	beq.n	8015b22 <HAL_UART_IRQHandler+0xc6>
 8015afc:	23a0      	movs	r3, #160	@ 0xa0
 8015afe:	18fb      	adds	r3, r7, r3
 8015b00:	681a      	ldr	r2, [r3, #0]
 8015b02:	2380      	movs	r3, #128	@ 0x80
 8015b04:	005b      	lsls	r3, r3, #1
 8015b06:	4013      	ands	r3, r2
 8015b08:	d00b      	beq.n	8015b22 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	2201      	movs	r2, #1
 8015b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2284      	movs	r2, #132	@ 0x84
 8015b16:	589b      	ldr	r3, [r3, r2]
 8015b18:	2201      	movs	r2, #1
 8015b1a:	431a      	orrs	r2, r3
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	2184      	movs	r1, #132	@ 0x84
 8015b20:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b22:	23a4      	movs	r3, #164	@ 0xa4
 8015b24:	18fb      	adds	r3, r7, r3
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	2202      	movs	r2, #2
 8015b2a:	4013      	ands	r3, r2
 8015b2c:	d011      	beq.n	8015b52 <HAL_UART_IRQHandler+0xf6>
 8015b2e:	239c      	movs	r3, #156	@ 0x9c
 8015b30:	18fb      	adds	r3, r7, r3
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	2201      	movs	r2, #1
 8015b36:	4013      	ands	r3, r2
 8015b38:	d00b      	beq.n	8015b52 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2202      	movs	r2, #2
 8015b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2284      	movs	r2, #132	@ 0x84
 8015b46:	589b      	ldr	r3, [r3, r2]
 8015b48:	2204      	movs	r2, #4
 8015b4a:	431a      	orrs	r2, r3
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	2184      	movs	r1, #132	@ 0x84
 8015b50:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b52:	23a4      	movs	r3, #164	@ 0xa4
 8015b54:	18fb      	adds	r3, r7, r3
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	2204      	movs	r2, #4
 8015b5a:	4013      	ands	r3, r2
 8015b5c:	d011      	beq.n	8015b82 <HAL_UART_IRQHandler+0x126>
 8015b5e:	239c      	movs	r3, #156	@ 0x9c
 8015b60:	18fb      	adds	r3, r7, r3
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	2201      	movs	r2, #1
 8015b66:	4013      	ands	r3, r2
 8015b68:	d00b      	beq.n	8015b82 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2204      	movs	r2, #4
 8015b70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	2284      	movs	r2, #132	@ 0x84
 8015b76:	589b      	ldr	r3, [r3, r2]
 8015b78:	2202      	movs	r2, #2
 8015b7a:	431a      	orrs	r2, r3
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	2184      	movs	r1, #132	@ 0x84
 8015b80:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015b82:	23a4      	movs	r3, #164	@ 0xa4
 8015b84:	18fb      	adds	r3, r7, r3
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2208      	movs	r2, #8
 8015b8a:	4013      	ands	r3, r2
 8015b8c:	d017      	beq.n	8015bbe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8015b8e:	23a0      	movs	r3, #160	@ 0xa0
 8015b90:	18fb      	adds	r3, r7, r3
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	2220      	movs	r2, #32
 8015b96:	4013      	ands	r3, r2
 8015b98:	d105      	bne.n	8015ba6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8015b9a:	239c      	movs	r3, #156	@ 0x9c
 8015b9c:	18fb      	adds	r3, r7, r3
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	2201      	movs	r2, #1
 8015ba2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8015ba4:	d00b      	beq.n	8015bbe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2208      	movs	r2, #8
 8015bac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2284      	movs	r2, #132	@ 0x84
 8015bb2:	589b      	ldr	r3, [r3, r2]
 8015bb4:	2208      	movs	r2, #8
 8015bb6:	431a      	orrs	r2, r3
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2184      	movs	r1, #132	@ 0x84
 8015bbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015bbe:	23a4      	movs	r3, #164	@ 0xa4
 8015bc0:	18fb      	adds	r3, r7, r3
 8015bc2:	681a      	ldr	r2, [r3, #0]
 8015bc4:	2380      	movs	r3, #128	@ 0x80
 8015bc6:	011b      	lsls	r3, r3, #4
 8015bc8:	4013      	ands	r3, r2
 8015bca:	d013      	beq.n	8015bf4 <HAL_UART_IRQHandler+0x198>
 8015bcc:	23a0      	movs	r3, #160	@ 0xa0
 8015bce:	18fb      	adds	r3, r7, r3
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	2380      	movs	r3, #128	@ 0x80
 8015bd4:	04db      	lsls	r3, r3, #19
 8015bd6:	4013      	ands	r3, r2
 8015bd8:	d00c      	beq.n	8015bf4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	2280      	movs	r2, #128	@ 0x80
 8015be0:	0112      	lsls	r2, r2, #4
 8015be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	2284      	movs	r2, #132	@ 0x84
 8015be8:	589b      	ldr	r3, [r3, r2]
 8015bea:	2220      	movs	r2, #32
 8015bec:	431a      	orrs	r2, r3
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2184      	movs	r1, #132	@ 0x84
 8015bf2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	2284      	movs	r2, #132	@ 0x84
 8015bf8:	589b      	ldr	r3, [r3, r2]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d100      	bne.n	8015c00 <HAL_UART_IRQHandler+0x1a4>
 8015bfe:	e20b      	b.n	8016018 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8015c00:	23a4      	movs	r3, #164	@ 0xa4
 8015c02:	18fb      	adds	r3, r7, r3
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	2220      	movs	r2, #32
 8015c08:	4013      	ands	r3, r2
 8015c0a:	d00e      	beq.n	8015c2a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015c0c:	23a0      	movs	r3, #160	@ 0xa0
 8015c0e:	18fb      	adds	r3, r7, r3
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2220      	movs	r2, #32
 8015c14:	4013      	ands	r3, r2
 8015c16:	d008      	beq.n	8015c2a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d004      	beq.n	8015c2a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c24:	687a      	ldr	r2, [r7, #4]
 8015c26:	0010      	movs	r0, r2
 8015c28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2284      	movs	r2, #132	@ 0x84
 8015c2e:	589b      	ldr	r3, [r3, r2]
 8015c30:	2194      	movs	r1, #148	@ 0x94
 8015c32:	187a      	adds	r2, r7, r1
 8015c34:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	689b      	ldr	r3, [r3, #8]
 8015c3c:	2240      	movs	r2, #64	@ 0x40
 8015c3e:	4013      	ands	r3, r2
 8015c40:	2b40      	cmp	r3, #64	@ 0x40
 8015c42:	d004      	beq.n	8015c4e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015c44:	187b      	adds	r3, r7, r1
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2228      	movs	r2, #40	@ 0x28
 8015c4a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c4c:	d04b      	beq.n	8015ce6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	0018      	movs	r0, r3
 8015c52:	f001 f861 	bl	8016d18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	689b      	ldr	r3, [r3, #8]
 8015c5c:	2240      	movs	r2, #64	@ 0x40
 8015c5e:	4013      	ands	r3, r2
 8015c60:	2b40      	cmp	r3, #64	@ 0x40
 8015c62:	d139      	bne.n	8015cd8 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c64:	f3ef 8310 	mrs	r3, PRIMASK
 8015c68:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8015c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c6c:	2090      	movs	r0, #144	@ 0x90
 8015c6e:	183a      	adds	r2, r7, r0
 8015c70:	6013      	str	r3, [r2, #0]
 8015c72:	2301      	movs	r3, #1
 8015c74:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015c78:	f383 8810 	msr	PRIMASK, r3
}
 8015c7c:	46c0      	nop			@ (mov r8, r8)
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	689a      	ldr	r2, [r3, #8]
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	2140      	movs	r1, #64	@ 0x40
 8015c8a:	438a      	bics	r2, r1
 8015c8c:	609a      	str	r2, [r3, #8]
 8015c8e:	183b      	adds	r3, r7, r0
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015c96:	f383 8810 	msr	PRIMASK, r3
}
 8015c9a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d012      	beq.n	8015cca <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ca8:	4a17      	ldr	r2, [pc, #92]	@ (8015d08 <HAL_UART_IRQHandler+0x2ac>)
 8015caa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cb0:	0018      	movs	r0, r3
 8015cb2:	f7f8 fa45 	bl	800e140 <HAL_DMA_Abort_IT>
 8015cb6:	1e03      	subs	r3, r0, #0
 8015cb8:	d020      	beq.n	8015cfc <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cc4:	0018      	movs	r0, r3
 8015cc6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cc8:	e018      	b.n	8015cfc <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2298      	movs	r2, #152	@ 0x98
 8015cce:	589b      	ldr	r3, [r3, r2]
 8015cd0:	687a      	ldr	r2, [r7, #4]
 8015cd2:	0010      	movs	r0, r2
 8015cd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cd6:	e011      	b.n	8015cfc <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2298      	movs	r2, #152	@ 0x98
 8015cdc:	589b      	ldr	r3, [r3, r2]
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	0010      	movs	r0, r2
 8015ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ce4:	e00a      	b.n	8015cfc <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2298      	movs	r2, #152	@ 0x98
 8015cea:	589b      	ldr	r3, [r3, r2]
 8015cec:	687a      	ldr	r2, [r7, #4]
 8015cee:	0010      	movs	r0, r2
 8015cf0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2284      	movs	r2, #132	@ 0x84
 8015cf6:	2100      	movs	r1, #0
 8015cf8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8015cfa:	e18d      	b.n	8016018 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cfc:	46c0      	nop			@ (mov r8, r8)
    return;
 8015cfe:	e18b      	b.n	8016018 <HAL_UART_IRQHandler+0x5bc>
 8015d00:	0000080f 	.word	0x0000080f
 8015d04:	04000120 	.word	0x04000120
 8015d08:	080170a5 	.word	0x080170a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015d10:	2b01      	cmp	r3, #1
 8015d12:	d000      	beq.n	8015d16 <HAL_UART_IRQHandler+0x2ba>
 8015d14:	e13d      	b.n	8015f92 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015d16:	23a4      	movs	r3, #164	@ 0xa4
 8015d18:	18fb      	adds	r3, r7, r3
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2210      	movs	r2, #16
 8015d1e:	4013      	ands	r3, r2
 8015d20:	d100      	bne.n	8015d24 <HAL_UART_IRQHandler+0x2c8>
 8015d22:	e136      	b.n	8015f92 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015d24:	23a0      	movs	r3, #160	@ 0xa0
 8015d26:	18fb      	adds	r3, r7, r3
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	2210      	movs	r2, #16
 8015d2c:	4013      	ands	r3, r2
 8015d2e:	d100      	bne.n	8015d32 <HAL_UART_IRQHandler+0x2d6>
 8015d30:	e12f      	b.n	8015f92 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	2210      	movs	r2, #16
 8015d38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	689b      	ldr	r3, [r3, #8]
 8015d40:	2240      	movs	r2, #64	@ 0x40
 8015d42:	4013      	ands	r3, r2
 8015d44:	2b40      	cmp	r3, #64	@ 0x40
 8015d46:	d000      	beq.n	8015d4a <HAL_UART_IRQHandler+0x2ee>
 8015d48:	e0a2      	b.n	8015e90 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	685a      	ldr	r2, [r3, #4]
 8015d52:	217e      	movs	r1, #126	@ 0x7e
 8015d54:	187b      	adds	r3, r7, r1
 8015d56:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8015d58:	187b      	adds	r3, r7, r1
 8015d5a:	881b      	ldrh	r3, [r3, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d100      	bne.n	8015d62 <HAL_UART_IRQHandler+0x306>
 8015d60:	e15c      	b.n	801601c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2258      	movs	r2, #88	@ 0x58
 8015d66:	5a9b      	ldrh	r3, [r3, r2]
 8015d68:	187a      	adds	r2, r7, r1
 8015d6a:	8812      	ldrh	r2, [r2, #0]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d300      	bcc.n	8015d72 <HAL_UART_IRQHandler+0x316>
 8015d70:	e154      	b.n	801601c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	187a      	adds	r2, r7, r1
 8015d76:	215a      	movs	r1, #90	@ 0x5a
 8015d78:	8812      	ldrh	r2, [r2, #0]
 8015d7a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	2220      	movs	r2, #32
 8015d86:	4013      	ands	r3, r2
 8015d88:	d16f      	bne.n	8015e6a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8015d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015d92:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015d94:	2301      	movs	r3, #1
 8015d96:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015d9a:	f383 8810 	msr	PRIMASK, r3
}
 8015d9e:	46c0      	nop			@ (mov r8, r8)
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	681a      	ldr	r2, [r3, #0]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	49a0      	ldr	r1, [pc, #640]	@ (801602c <HAL_UART_IRQHandler+0x5d0>)
 8015dac:	400a      	ands	r2, r1
 8015dae:	601a      	str	r2, [r3, #0]
 8015db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015db2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015db6:	f383 8810 	msr	PRIMASK, r3
}
 8015dba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8015dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8015dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015dc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8015dc6:	2301      	movs	r3, #1
 8015dc8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015dcc:	f383 8810 	msr	PRIMASK, r3
}
 8015dd0:	46c0      	nop			@ (mov r8, r8)
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	689a      	ldr	r2, [r3, #8]
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	2101      	movs	r1, #1
 8015dde:	438a      	bics	r2, r1
 8015de0:	609a      	str	r2, [r3, #8]
 8015de2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015de4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015de8:	f383 8810 	msr	PRIMASK, r3
}
 8015dec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dee:	f3ef 8310 	mrs	r3, PRIMASK
 8015df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8015df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015df6:	673b      	str	r3, [r7, #112]	@ 0x70
 8015df8:	2301      	movs	r3, #1
 8015dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015dfe:	f383 8810 	msr	PRIMASK, r3
}
 8015e02:	46c0      	nop			@ (mov r8, r8)
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	689a      	ldr	r2, [r3, #8]
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	2140      	movs	r1, #64	@ 0x40
 8015e10:	438a      	bics	r2, r1
 8015e12:	609a      	str	r2, [r3, #8]
 8015e14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015e16:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015e1a:	f383 8810 	msr	PRIMASK, r3
}
 8015e1e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2280      	movs	r2, #128	@ 0x80
 8015e24:	2120      	movs	r1, #32
 8015e26:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e32:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8015e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015e38:	2301      	movs	r3, #1
 8015e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015e3e:	f383 8810 	msr	PRIMASK, r3
}
 8015e42:	46c0      	nop			@ (mov r8, r8)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	681a      	ldr	r2, [r3, #0]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2110      	movs	r1, #16
 8015e50:	438a      	bics	r2, r1
 8015e52:	601a      	str	r2, [r3, #0]
 8015e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015e5a:	f383 8810 	msr	PRIMASK, r3
}
 8015e5e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e64:	0018      	movs	r0, r3
 8015e66:	f7f8 f92b 	bl	800e0c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2202      	movs	r2, #2
 8015e6e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	22ac      	movs	r2, #172	@ 0xac
 8015e74:	589b      	ldr	r3, [r3, r2]
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	2158      	movs	r1, #88	@ 0x58
 8015e7a:	5a51      	ldrh	r1, [r2, r1]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	205a      	movs	r0, #90	@ 0x5a
 8015e80:	5a12      	ldrh	r2, [r2, r0]
 8015e82:	b292      	uxth	r2, r2
 8015e84:	1a8a      	subs	r2, r1, r2
 8015e86:	b291      	uxth	r1, r2
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	0010      	movs	r0, r2
 8015e8c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015e8e:	e0c5      	b.n	801601c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2258      	movs	r2, #88	@ 0x58
 8015e94:	5a99      	ldrh	r1, [r3, r2]
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	225a      	movs	r2, #90	@ 0x5a
 8015e9a:	5a9b      	ldrh	r3, [r3, r2]
 8015e9c:	b29a      	uxth	r2, r3
 8015e9e:	208e      	movs	r0, #142	@ 0x8e
 8015ea0:	183b      	adds	r3, r7, r0
 8015ea2:	1a8a      	subs	r2, r1, r2
 8015ea4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	225a      	movs	r2, #90	@ 0x5a
 8015eaa:	5a9b      	ldrh	r3, [r3, r2]
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d100      	bne.n	8015eb4 <HAL_UART_IRQHandler+0x458>
 8015eb2:	e0b5      	b.n	8016020 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8015eb4:	183b      	adds	r3, r7, r0
 8015eb6:	881b      	ldrh	r3, [r3, #0]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d100      	bne.n	8015ebe <HAL_UART_IRQHandler+0x462>
 8015ebc:	e0b0      	b.n	8016020 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8015ec2:	60fb      	str	r3, [r7, #12]
  return(result);
 8015ec4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015ec6:	2488      	movs	r4, #136	@ 0x88
 8015ec8:	193a      	adds	r2, r7, r4
 8015eca:	6013      	str	r3, [r2, #0]
 8015ecc:	2301      	movs	r3, #1
 8015ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	f383 8810 	msr	PRIMASK, r3
}
 8015ed6:	46c0      	nop			@ (mov r8, r8)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	681a      	ldr	r2, [r3, #0]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	4953      	ldr	r1, [pc, #332]	@ (8016030 <HAL_UART_IRQHandler+0x5d4>)
 8015ee4:	400a      	ands	r2, r1
 8015ee6:	601a      	str	r2, [r3, #0]
 8015ee8:	193b      	adds	r3, r7, r4
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	f383 8810 	msr	PRIMASK, r3
}
 8015ef4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8015efa:	61bb      	str	r3, [r7, #24]
  return(result);
 8015efc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015efe:	2484      	movs	r4, #132	@ 0x84
 8015f00:	193a      	adds	r2, r7, r4
 8015f02:	6013      	str	r3, [r2, #0]
 8015f04:	2301      	movs	r3, #1
 8015f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	f383 8810 	msr	PRIMASK, r3
}
 8015f0e:	46c0      	nop			@ (mov r8, r8)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	689a      	ldr	r2, [r3, #8]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	2101      	movs	r1, #1
 8015f1c:	438a      	bics	r2, r1
 8015f1e:	609a      	str	r2, [r3, #8]
 8015f20:	193b      	adds	r3, r7, r4
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f26:	6a3b      	ldr	r3, [r7, #32]
 8015f28:	f383 8810 	msr	PRIMASK, r3
}
 8015f2c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2280      	movs	r2, #128	@ 0x80
 8015f32:	2120      	movs	r1, #32
 8015f34:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2200      	movs	r2, #0
 8015f3a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f42:	f3ef 8310 	mrs	r3, PRIMASK
 8015f46:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f4a:	2480      	movs	r4, #128	@ 0x80
 8015f4c:	193a      	adds	r2, r7, r4
 8015f4e:	6013      	str	r3, [r2, #0]
 8015f50:	2301      	movs	r3, #1
 8015f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f56:	f383 8810 	msr	PRIMASK, r3
}
 8015f5a:	46c0      	nop			@ (mov r8, r8)
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	2110      	movs	r1, #16
 8015f68:	438a      	bics	r2, r1
 8015f6a:	601a      	str	r2, [r3, #0]
 8015f6c:	193b      	adds	r3, r7, r4
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f74:	f383 8810 	msr	PRIMASK, r3
}
 8015f78:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2202      	movs	r2, #2
 8015f7e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	22ac      	movs	r2, #172	@ 0xac
 8015f84:	589b      	ldr	r3, [r3, r2]
 8015f86:	183a      	adds	r2, r7, r0
 8015f88:	8811      	ldrh	r1, [r2, #0]
 8015f8a:	687a      	ldr	r2, [r7, #4]
 8015f8c:	0010      	movs	r0, r2
 8015f8e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015f90:	e046      	b.n	8016020 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8015f92:	23a4      	movs	r3, #164	@ 0xa4
 8015f94:	18fb      	adds	r3, r7, r3
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	2380      	movs	r3, #128	@ 0x80
 8015f9a:	035b      	lsls	r3, r3, #13
 8015f9c:	4013      	ands	r3, r2
 8015f9e:	d012      	beq.n	8015fc6 <HAL_UART_IRQHandler+0x56a>
 8015fa0:	239c      	movs	r3, #156	@ 0x9c
 8015fa2:	18fb      	adds	r3, r7, r3
 8015fa4:	681a      	ldr	r2, [r3, #0]
 8015fa6:	2380      	movs	r3, #128	@ 0x80
 8015fa8:	03db      	lsls	r3, r3, #15
 8015faa:	4013      	ands	r3, r2
 8015fac:	d00b      	beq.n	8015fc6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	2280      	movs	r2, #128	@ 0x80
 8015fb4:	0352      	lsls	r2, r2, #13
 8015fb6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	22a8      	movs	r2, #168	@ 0xa8
 8015fbc:	589b      	ldr	r3, [r3, r2]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	0010      	movs	r0, r2
 8015fc2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015fc4:	e02f      	b.n	8016026 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8015fc6:	23a4      	movs	r3, #164	@ 0xa4
 8015fc8:	18fb      	adds	r3, r7, r3
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	2280      	movs	r2, #128	@ 0x80
 8015fce:	4013      	ands	r3, r2
 8015fd0:	d00f      	beq.n	8015ff2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8015fd2:	23a0      	movs	r3, #160	@ 0xa0
 8015fd4:	18fb      	adds	r3, r7, r3
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	2280      	movs	r2, #128	@ 0x80
 8015fda:	4013      	ands	r3, r2
 8015fdc:	d009      	beq.n	8015ff2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d01e      	beq.n	8016024 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	0010      	movs	r0, r2
 8015fee:	4798      	blx	r3
    }
    return;
 8015ff0:	e018      	b.n	8016024 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8015ff2:	23a4      	movs	r3, #164	@ 0xa4
 8015ff4:	18fb      	adds	r3, r7, r3
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	2240      	movs	r2, #64	@ 0x40
 8015ffa:	4013      	ands	r3, r2
 8015ffc:	d013      	beq.n	8016026 <HAL_UART_IRQHandler+0x5ca>
 8015ffe:	23a0      	movs	r3, #160	@ 0xa0
 8016000:	18fb      	adds	r3, r7, r3
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	2240      	movs	r2, #64	@ 0x40
 8016006:	4013      	ands	r3, r2
 8016008:	d00d      	beq.n	8016026 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	0018      	movs	r0, r3
 801600e:	f001 f862 	bl	80170d6 <UART_EndTransmit_IT>
    return;
 8016012:	e008      	b.n	8016026 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016014:	46c0      	nop			@ (mov r8, r8)
 8016016:	e006      	b.n	8016026 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016018:	46c0      	nop			@ (mov r8, r8)
 801601a:	e004      	b.n	8016026 <HAL_UART_IRQHandler+0x5ca>
      return;
 801601c:	46c0      	nop			@ (mov r8, r8)
 801601e:	e002      	b.n	8016026 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016020:	46c0      	nop			@ (mov r8, r8)
 8016022:	e000      	b.n	8016026 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016024:	46c0      	nop			@ (mov r8, r8)
  }

}
 8016026:	46bd      	mov	sp, r7
 8016028:	b02b      	add	sp, #172	@ 0xac
 801602a:	bd90      	pop	{r4, r7, pc}
 801602c:	fffffeff 	.word	0xfffffeff
 8016030:	fffffedf 	.word	0xfffffedf

08016034 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b082      	sub	sp, #8
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801603c:	46c0      	nop			@ (mov r8, r8)
 801603e:	46bd      	mov	sp, r7
 8016040:	b002      	add	sp, #8
 8016042:	bd80      	pop	{r7, pc}

08016044 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b082      	sub	sp, #8
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801604c:	46c0      	nop			@ (mov r8, r8)
 801604e:	46bd      	mov	sp, r7
 8016050:	b002      	add	sp, #8
 8016052:	bd80      	pop	{r7, pc}

08016054 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801605c:	46c0      	nop			@ (mov r8, r8)
 801605e:	46bd      	mov	sp, r7
 8016060:	b002      	add	sp, #8
 8016062:	bd80      	pop	{r7, pc}

08016064 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801606c:	46c0      	nop			@ (mov r8, r8)
 801606e:	46bd      	mov	sp, r7
 8016070:	b002      	add	sp, #8
 8016072:	bd80      	pop	{r7, pc}

08016074 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801607c:	46c0      	nop			@ (mov r8, r8)
 801607e:	46bd      	mov	sp, r7
 8016080:	b002      	add	sp, #8
 8016082:	bd80      	pop	{r7, pc}

08016084 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801608c:	46c0      	nop			@ (mov r8, r8)
 801608e:	46bd      	mov	sp, r7
 8016090:	b002      	add	sp, #8
 8016092:	bd80      	pop	{r7, pc}

08016094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
 801609c:	000a      	movs	r2, r1
 801609e:	1cbb      	adds	r3, r7, #2
 80160a0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80160a2:	46c0      	nop			@ (mov r8, r8)
 80160a4:	46bd      	mov	sp, r7
 80160a6:	b002      	add	sp, #8
 80160a8:	bd80      	pop	{r7, pc}
	...

080160ac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2188      	movs	r1, #136	@ 0x88
 80160b8:	4a14      	ldr	r2, [pc, #80]	@ (801610c <UART_InitCallbacksToDefault+0x60>)
 80160ba:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	218c      	movs	r1, #140	@ 0x8c
 80160c0:	4a13      	ldr	r2, [pc, #76]	@ (8016110 <UART_InitCallbacksToDefault+0x64>)
 80160c2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2190      	movs	r1, #144	@ 0x90
 80160c8:	4a12      	ldr	r2, [pc, #72]	@ (8016114 <UART_InitCallbacksToDefault+0x68>)
 80160ca:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2194      	movs	r1, #148	@ 0x94
 80160d0:	4a11      	ldr	r2, [pc, #68]	@ (8016118 <UART_InitCallbacksToDefault+0x6c>)
 80160d2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2198      	movs	r1, #152	@ 0x98
 80160d8:	4a10      	ldr	r2, [pc, #64]	@ (801611c <UART_InitCallbacksToDefault+0x70>)
 80160da:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	219c      	movs	r1, #156	@ 0x9c
 80160e0:	4a0f      	ldr	r2, [pc, #60]	@ (8016120 <UART_InitCallbacksToDefault+0x74>)
 80160e2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	21a0      	movs	r1, #160	@ 0xa0
 80160e8:	4a0e      	ldr	r2, [pc, #56]	@ (8016124 <UART_InitCallbacksToDefault+0x78>)
 80160ea:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	21a4      	movs	r1, #164	@ 0xa4
 80160f0:	4a0d      	ldr	r2, [pc, #52]	@ (8016128 <UART_InitCallbacksToDefault+0x7c>)
 80160f2:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	21a8      	movs	r1, #168	@ 0xa8
 80160f8:	4a0c      	ldr	r2, [pc, #48]	@ (801612c <UART_InitCallbacksToDefault+0x80>)
 80160fa:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	21ac      	movs	r1, #172	@ 0xac
 8016100:	4a0b      	ldr	r2, [pc, #44]	@ (8016130 <UART_InitCallbacksToDefault+0x84>)
 8016102:	505a      	str	r2, [r3, r1]

}
 8016104:	46c0      	nop			@ (mov r8, r8)
 8016106:	46bd      	mov	sp, r7
 8016108:	b002      	add	sp, #8
 801610a:	bd80      	pop	{r7, pc}
 801610c:	08016045 	.word	0x08016045
 8016110:	08016035 	.word	0x08016035
 8016114:	08016055 	.word	0x08016055
 8016118:	080075b5 	.word	0x080075b5
 801611c:	08003ad9 	.word	0x08003ad9
 8016120:	08016065 	.word	0x08016065
 8016124:	08016075 	.word	0x08016075
 8016128:	08016085 	.word	0x08016085
 801612c:	080174c9 	.word	0x080174c9
 8016130:	08016095 	.word	0x08016095

08016134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016134:	b5b0      	push	{r4, r5, r7, lr}
 8016136:	b08e      	sub	sp, #56	@ 0x38
 8016138:	af00      	add	r7, sp, #0
 801613a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801613c:	231a      	movs	r3, #26
 801613e:	2218      	movs	r2, #24
 8016140:	189b      	adds	r3, r3, r2
 8016142:	19db      	adds	r3, r3, r7
 8016144:	2200      	movs	r2, #0
 8016146:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016148:	69fb      	ldr	r3, [r7, #28]
 801614a:	689a      	ldr	r2, [r3, #8]
 801614c:	69fb      	ldr	r3, [r7, #28]
 801614e:	691b      	ldr	r3, [r3, #16]
 8016150:	431a      	orrs	r2, r3
 8016152:	69fb      	ldr	r3, [r7, #28]
 8016154:	695b      	ldr	r3, [r3, #20]
 8016156:	431a      	orrs	r2, r3
 8016158:	69fb      	ldr	r3, [r7, #28]
 801615a:	69db      	ldr	r3, [r3, #28]
 801615c:	4313      	orrs	r3, r2
 801615e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016160:	69fb      	ldr	r3, [r7, #28]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	4ac3      	ldr	r2, [pc, #780]	@ (8016474 <UART_SetConfig+0x340>)
 8016168:	4013      	ands	r3, r2
 801616a:	0019      	movs	r1, r3
 801616c:	69fb      	ldr	r3, [r7, #28]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016172:	430a      	orrs	r2, r1
 8016174:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016176:	69fb      	ldr	r3, [r7, #28]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	4abe      	ldr	r2, [pc, #760]	@ (8016478 <UART_SetConfig+0x344>)
 801617e:	4013      	ands	r3, r2
 8016180:	0019      	movs	r1, r3
 8016182:	69fb      	ldr	r3, [r7, #28]
 8016184:	68da      	ldr	r2, [r3, #12]
 8016186:	69fb      	ldr	r3, [r7, #28]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	430a      	orrs	r2, r1
 801618c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801618e:	69fb      	ldr	r3, [r7, #28]
 8016190:	699b      	ldr	r3, [r3, #24]
 8016192:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016194:	69fb      	ldr	r3, [r7, #28]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	4ab8      	ldr	r2, [pc, #736]	@ (801647c <UART_SetConfig+0x348>)
 801619a:	4293      	cmp	r3, r2
 801619c:	d004      	beq.n	80161a8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801619e:	69fb      	ldr	r3, [r7, #28]
 80161a0:	6a1b      	ldr	r3, [r3, #32]
 80161a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161a4:	4313      	orrs	r3, r2
 80161a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80161a8:	69fb      	ldr	r3, [r7, #28]
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	689b      	ldr	r3, [r3, #8]
 80161ae:	4ab4      	ldr	r2, [pc, #720]	@ (8016480 <UART_SetConfig+0x34c>)
 80161b0:	4013      	ands	r3, r2
 80161b2:	0019      	movs	r1, r3
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161ba:	430a      	orrs	r2, r1
 80161bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80161be:	69fb      	ldr	r3, [r7, #28]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	4ab0      	ldr	r2, [pc, #704]	@ (8016484 <UART_SetConfig+0x350>)
 80161c4:	4293      	cmp	r3, r2
 80161c6:	d131      	bne.n	801622c <UART_SetConfig+0xf8>
 80161c8:	4baf      	ldr	r3, [pc, #700]	@ (8016488 <UART_SetConfig+0x354>)
 80161ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161cc:	2203      	movs	r2, #3
 80161ce:	4013      	ands	r3, r2
 80161d0:	2b03      	cmp	r3, #3
 80161d2:	d01d      	beq.n	8016210 <UART_SetConfig+0xdc>
 80161d4:	d823      	bhi.n	801621e <UART_SetConfig+0xea>
 80161d6:	2b02      	cmp	r3, #2
 80161d8:	d00c      	beq.n	80161f4 <UART_SetConfig+0xc0>
 80161da:	d820      	bhi.n	801621e <UART_SetConfig+0xea>
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d002      	beq.n	80161e6 <UART_SetConfig+0xb2>
 80161e0:	2b01      	cmp	r3, #1
 80161e2:	d00e      	beq.n	8016202 <UART_SetConfig+0xce>
 80161e4:	e01b      	b.n	801621e <UART_SetConfig+0xea>
 80161e6:	231b      	movs	r3, #27
 80161e8:	2218      	movs	r2, #24
 80161ea:	189b      	adds	r3, r3, r2
 80161ec:	19db      	adds	r3, r3, r7
 80161ee:	2201      	movs	r2, #1
 80161f0:	701a      	strb	r2, [r3, #0]
 80161f2:	e0b4      	b.n	801635e <UART_SetConfig+0x22a>
 80161f4:	231b      	movs	r3, #27
 80161f6:	2218      	movs	r2, #24
 80161f8:	189b      	adds	r3, r3, r2
 80161fa:	19db      	adds	r3, r3, r7
 80161fc:	2202      	movs	r2, #2
 80161fe:	701a      	strb	r2, [r3, #0]
 8016200:	e0ad      	b.n	801635e <UART_SetConfig+0x22a>
 8016202:	231b      	movs	r3, #27
 8016204:	2218      	movs	r2, #24
 8016206:	189b      	adds	r3, r3, r2
 8016208:	19db      	adds	r3, r3, r7
 801620a:	2204      	movs	r2, #4
 801620c:	701a      	strb	r2, [r3, #0]
 801620e:	e0a6      	b.n	801635e <UART_SetConfig+0x22a>
 8016210:	231b      	movs	r3, #27
 8016212:	2218      	movs	r2, #24
 8016214:	189b      	adds	r3, r3, r2
 8016216:	19db      	adds	r3, r3, r7
 8016218:	2208      	movs	r2, #8
 801621a:	701a      	strb	r2, [r3, #0]
 801621c:	e09f      	b.n	801635e <UART_SetConfig+0x22a>
 801621e:	231b      	movs	r3, #27
 8016220:	2218      	movs	r2, #24
 8016222:	189b      	adds	r3, r3, r2
 8016224:	19db      	adds	r3, r3, r7
 8016226:	2210      	movs	r2, #16
 8016228:	701a      	strb	r2, [r3, #0]
 801622a:	e098      	b.n	801635e <UART_SetConfig+0x22a>
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	4a96      	ldr	r2, [pc, #600]	@ (801648c <UART_SetConfig+0x358>)
 8016232:	4293      	cmp	r3, r2
 8016234:	d131      	bne.n	801629a <UART_SetConfig+0x166>
 8016236:	4b94      	ldr	r3, [pc, #592]	@ (8016488 <UART_SetConfig+0x354>)
 8016238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801623a:	220c      	movs	r2, #12
 801623c:	4013      	ands	r3, r2
 801623e:	2b0c      	cmp	r3, #12
 8016240:	d01d      	beq.n	801627e <UART_SetConfig+0x14a>
 8016242:	d823      	bhi.n	801628c <UART_SetConfig+0x158>
 8016244:	2b08      	cmp	r3, #8
 8016246:	d00c      	beq.n	8016262 <UART_SetConfig+0x12e>
 8016248:	d820      	bhi.n	801628c <UART_SetConfig+0x158>
 801624a:	2b00      	cmp	r3, #0
 801624c:	d002      	beq.n	8016254 <UART_SetConfig+0x120>
 801624e:	2b04      	cmp	r3, #4
 8016250:	d00e      	beq.n	8016270 <UART_SetConfig+0x13c>
 8016252:	e01b      	b.n	801628c <UART_SetConfig+0x158>
 8016254:	231b      	movs	r3, #27
 8016256:	2218      	movs	r2, #24
 8016258:	189b      	adds	r3, r3, r2
 801625a:	19db      	adds	r3, r3, r7
 801625c:	2200      	movs	r2, #0
 801625e:	701a      	strb	r2, [r3, #0]
 8016260:	e07d      	b.n	801635e <UART_SetConfig+0x22a>
 8016262:	231b      	movs	r3, #27
 8016264:	2218      	movs	r2, #24
 8016266:	189b      	adds	r3, r3, r2
 8016268:	19db      	adds	r3, r3, r7
 801626a:	2202      	movs	r2, #2
 801626c:	701a      	strb	r2, [r3, #0]
 801626e:	e076      	b.n	801635e <UART_SetConfig+0x22a>
 8016270:	231b      	movs	r3, #27
 8016272:	2218      	movs	r2, #24
 8016274:	189b      	adds	r3, r3, r2
 8016276:	19db      	adds	r3, r3, r7
 8016278:	2204      	movs	r2, #4
 801627a:	701a      	strb	r2, [r3, #0]
 801627c:	e06f      	b.n	801635e <UART_SetConfig+0x22a>
 801627e:	231b      	movs	r3, #27
 8016280:	2218      	movs	r2, #24
 8016282:	189b      	adds	r3, r3, r2
 8016284:	19db      	adds	r3, r3, r7
 8016286:	2208      	movs	r2, #8
 8016288:	701a      	strb	r2, [r3, #0]
 801628a:	e068      	b.n	801635e <UART_SetConfig+0x22a>
 801628c:	231b      	movs	r3, #27
 801628e:	2218      	movs	r2, #24
 8016290:	189b      	adds	r3, r3, r2
 8016292:	19db      	adds	r3, r3, r7
 8016294:	2210      	movs	r2, #16
 8016296:	701a      	strb	r2, [r3, #0]
 8016298:	e061      	b.n	801635e <UART_SetConfig+0x22a>
 801629a:	69fb      	ldr	r3, [r7, #28]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	4a7c      	ldr	r2, [pc, #496]	@ (8016490 <UART_SetConfig+0x35c>)
 80162a0:	4293      	cmp	r3, r2
 80162a2:	d106      	bne.n	80162b2 <UART_SetConfig+0x17e>
 80162a4:	231b      	movs	r3, #27
 80162a6:	2218      	movs	r2, #24
 80162a8:	189b      	adds	r3, r3, r2
 80162aa:	19db      	adds	r3, r3, r7
 80162ac:	2200      	movs	r2, #0
 80162ae:	701a      	strb	r2, [r3, #0]
 80162b0:	e055      	b.n	801635e <UART_SetConfig+0x22a>
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	4a77      	ldr	r2, [pc, #476]	@ (8016494 <UART_SetConfig+0x360>)
 80162b8:	4293      	cmp	r3, r2
 80162ba:	d106      	bne.n	80162ca <UART_SetConfig+0x196>
 80162bc:	231b      	movs	r3, #27
 80162be:	2218      	movs	r2, #24
 80162c0:	189b      	adds	r3, r3, r2
 80162c2:	19db      	adds	r3, r3, r7
 80162c4:	2200      	movs	r2, #0
 80162c6:	701a      	strb	r2, [r3, #0]
 80162c8:	e049      	b.n	801635e <UART_SetConfig+0x22a>
 80162ca:	69fb      	ldr	r3, [r7, #28]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	4a6b      	ldr	r2, [pc, #428]	@ (801647c <UART_SetConfig+0x348>)
 80162d0:	4293      	cmp	r3, r2
 80162d2:	d13e      	bne.n	8016352 <UART_SetConfig+0x21e>
 80162d4:	4b6c      	ldr	r3, [pc, #432]	@ (8016488 <UART_SetConfig+0x354>)
 80162d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80162d8:	23c0      	movs	r3, #192	@ 0xc0
 80162da:	011b      	lsls	r3, r3, #4
 80162dc:	4013      	ands	r3, r2
 80162de:	22c0      	movs	r2, #192	@ 0xc0
 80162e0:	0112      	lsls	r2, r2, #4
 80162e2:	4293      	cmp	r3, r2
 80162e4:	d027      	beq.n	8016336 <UART_SetConfig+0x202>
 80162e6:	22c0      	movs	r2, #192	@ 0xc0
 80162e8:	0112      	lsls	r2, r2, #4
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d82a      	bhi.n	8016344 <UART_SetConfig+0x210>
 80162ee:	2280      	movs	r2, #128	@ 0x80
 80162f0:	0112      	lsls	r2, r2, #4
 80162f2:	4293      	cmp	r3, r2
 80162f4:	d011      	beq.n	801631a <UART_SetConfig+0x1e6>
 80162f6:	2280      	movs	r2, #128	@ 0x80
 80162f8:	0112      	lsls	r2, r2, #4
 80162fa:	4293      	cmp	r3, r2
 80162fc:	d822      	bhi.n	8016344 <UART_SetConfig+0x210>
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d004      	beq.n	801630c <UART_SetConfig+0x1d8>
 8016302:	2280      	movs	r2, #128	@ 0x80
 8016304:	00d2      	lsls	r2, r2, #3
 8016306:	4293      	cmp	r3, r2
 8016308:	d00e      	beq.n	8016328 <UART_SetConfig+0x1f4>
 801630a:	e01b      	b.n	8016344 <UART_SetConfig+0x210>
 801630c:	231b      	movs	r3, #27
 801630e:	2218      	movs	r2, #24
 8016310:	189b      	adds	r3, r3, r2
 8016312:	19db      	adds	r3, r3, r7
 8016314:	2200      	movs	r2, #0
 8016316:	701a      	strb	r2, [r3, #0]
 8016318:	e021      	b.n	801635e <UART_SetConfig+0x22a>
 801631a:	231b      	movs	r3, #27
 801631c:	2218      	movs	r2, #24
 801631e:	189b      	adds	r3, r3, r2
 8016320:	19db      	adds	r3, r3, r7
 8016322:	2202      	movs	r2, #2
 8016324:	701a      	strb	r2, [r3, #0]
 8016326:	e01a      	b.n	801635e <UART_SetConfig+0x22a>
 8016328:	231b      	movs	r3, #27
 801632a:	2218      	movs	r2, #24
 801632c:	189b      	adds	r3, r3, r2
 801632e:	19db      	adds	r3, r3, r7
 8016330:	2204      	movs	r2, #4
 8016332:	701a      	strb	r2, [r3, #0]
 8016334:	e013      	b.n	801635e <UART_SetConfig+0x22a>
 8016336:	231b      	movs	r3, #27
 8016338:	2218      	movs	r2, #24
 801633a:	189b      	adds	r3, r3, r2
 801633c:	19db      	adds	r3, r3, r7
 801633e:	2208      	movs	r2, #8
 8016340:	701a      	strb	r2, [r3, #0]
 8016342:	e00c      	b.n	801635e <UART_SetConfig+0x22a>
 8016344:	231b      	movs	r3, #27
 8016346:	2218      	movs	r2, #24
 8016348:	189b      	adds	r3, r3, r2
 801634a:	19db      	adds	r3, r3, r7
 801634c:	2210      	movs	r2, #16
 801634e:	701a      	strb	r2, [r3, #0]
 8016350:	e005      	b.n	801635e <UART_SetConfig+0x22a>
 8016352:	231b      	movs	r3, #27
 8016354:	2218      	movs	r2, #24
 8016356:	189b      	adds	r3, r3, r2
 8016358:	19db      	adds	r3, r3, r7
 801635a:	2210      	movs	r2, #16
 801635c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801635e:	69fb      	ldr	r3, [r7, #28]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	4a46      	ldr	r2, [pc, #280]	@ (801647c <UART_SetConfig+0x348>)
 8016364:	4293      	cmp	r3, r2
 8016366:	d000      	beq.n	801636a <UART_SetConfig+0x236>
 8016368:	e09a      	b.n	80164a0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801636a:	231b      	movs	r3, #27
 801636c:	2218      	movs	r2, #24
 801636e:	189b      	adds	r3, r3, r2
 8016370:	19db      	adds	r3, r3, r7
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	2b08      	cmp	r3, #8
 8016376:	d01d      	beq.n	80163b4 <UART_SetConfig+0x280>
 8016378:	dc20      	bgt.n	80163bc <UART_SetConfig+0x288>
 801637a:	2b04      	cmp	r3, #4
 801637c:	d015      	beq.n	80163aa <UART_SetConfig+0x276>
 801637e:	dc1d      	bgt.n	80163bc <UART_SetConfig+0x288>
 8016380:	2b00      	cmp	r3, #0
 8016382:	d002      	beq.n	801638a <UART_SetConfig+0x256>
 8016384:	2b02      	cmp	r3, #2
 8016386:	d005      	beq.n	8016394 <UART_SetConfig+0x260>
 8016388:	e018      	b.n	80163bc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801638a:	f7fd ff3f 	bl	801420c <HAL_RCC_GetPCLK1Freq>
 801638e:	0003      	movs	r3, r0
 8016390:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016392:	e01c      	b.n	80163ce <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016394:	4b3c      	ldr	r3, [pc, #240]	@ (8016488 <UART_SetConfig+0x354>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	2210      	movs	r2, #16
 801639a:	4013      	ands	r3, r2
 801639c:	d002      	beq.n	80163a4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801639e:	4b3e      	ldr	r3, [pc, #248]	@ (8016498 <UART_SetConfig+0x364>)
 80163a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80163a2:	e014      	b.n	80163ce <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80163a4:	4b3d      	ldr	r3, [pc, #244]	@ (801649c <UART_SetConfig+0x368>)
 80163a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80163a8:	e011      	b.n	80163ce <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80163aa:	f7fd fe7f 	bl	80140ac <HAL_RCC_GetSysClockFreq>
 80163ae:	0003      	movs	r3, r0
 80163b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80163b2:	e00c      	b.n	80163ce <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80163b4:	2380      	movs	r3, #128	@ 0x80
 80163b6:	021b      	lsls	r3, r3, #8
 80163b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80163ba:	e008      	b.n	80163ce <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80163bc:	2300      	movs	r3, #0
 80163be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80163c0:	231a      	movs	r3, #26
 80163c2:	2218      	movs	r2, #24
 80163c4:	189b      	adds	r3, r3, r2
 80163c6:	19db      	adds	r3, r3, r7
 80163c8:	2201      	movs	r2, #1
 80163ca:	701a      	strb	r2, [r3, #0]
        break;
 80163cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80163ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d100      	bne.n	80163d6 <UART_SetConfig+0x2a2>
 80163d4:	e133      	b.n	801663e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80163d6:	69fb      	ldr	r3, [r7, #28]
 80163d8:	685a      	ldr	r2, [r3, #4]
 80163da:	0013      	movs	r3, r2
 80163dc:	005b      	lsls	r3, r3, #1
 80163de:	189b      	adds	r3, r3, r2
 80163e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d305      	bcc.n	80163f2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80163e6:	69fb      	ldr	r3, [r7, #28]
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80163ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d906      	bls.n	8016400 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80163f2:	231a      	movs	r3, #26
 80163f4:	2218      	movs	r2, #24
 80163f6:	189b      	adds	r3, r3, r2
 80163f8:	19db      	adds	r3, r3, r7
 80163fa:	2201      	movs	r2, #1
 80163fc:	701a      	strb	r2, [r3, #0]
 80163fe:	e11e      	b.n	801663e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8016400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016402:	613b      	str	r3, [r7, #16]
 8016404:	2300      	movs	r3, #0
 8016406:	617b      	str	r3, [r7, #20]
 8016408:	6939      	ldr	r1, [r7, #16]
 801640a:	697a      	ldr	r2, [r7, #20]
 801640c:	000b      	movs	r3, r1
 801640e:	0e1b      	lsrs	r3, r3, #24
 8016410:	0010      	movs	r0, r2
 8016412:	0205      	lsls	r5, r0, #8
 8016414:	431d      	orrs	r5, r3
 8016416:	000b      	movs	r3, r1
 8016418:	021c      	lsls	r4, r3, #8
 801641a:	69fb      	ldr	r3, [r7, #28]
 801641c:	685b      	ldr	r3, [r3, #4]
 801641e:	085b      	lsrs	r3, r3, #1
 8016420:	60bb      	str	r3, [r7, #8]
 8016422:	2300      	movs	r3, #0
 8016424:	60fb      	str	r3, [r7, #12]
 8016426:	68b8      	ldr	r0, [r7, #8]
 8016428:	68f9      	ldr	r1, [r7, #12]
 801642a:	1900      	adds	r0, r0, r4
 801642c:	4169      	adcs	r1, r5
 801642e:	69fb      	ldr	r3, [r7, #28]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	603b      	str	r3, [r7, #0]
 8016434:	2300      	movs	r3, #0
 8016436:	607b      	str	r3, [r7, #4]
 8016438:	683a      	ldr	r2, [r7, #0]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f7ea f8a0 	bl	8000580 <__aeabi_uldivmod>
 8016440:	0002      	movs	r2, r0
 8016442:	000b      	movs	r3, r1
 8016444:	0013      	movs	r3, r2
 8016446:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801644a:	23c0      	movs	r3, #192	@ 0xc0
 801644c:	009b      	lsls	r3, r3, #2
 801644e:	429a      	cmp	r2, r3
 8016450:	d309      	bcc.n	8016466 <UART_SetConfig+0x332>
 8016452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016454:	2380      	movs	r3, #128	@ 0x80
 8016456:	035b      	lsls	r3, r3, #13
 8016458:	429a      	cmp	r2, r3
 801645a:	d204      	bcs.n	8016466 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016462:	60da      	str	r2, [r3, #12]
 8016464:	e0eb      	b.n	801663e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8016466:	231a      	movs	r3, #26
 8016468:	2218      	movs	r2, #24
 801646a:	189b      	adds	r3, r3, r2
 801646c:	19db      	adds	r3, r3, r7
 801646e:	2201      	movs	r2, #1
 8016470:	701a      	strb	r2, [r3, #0]
 8016472:	e0e4      	b.n	801663e <UART_SetConfig+0x50a>
 8016474:	efff69f3 	.word	0xefff69f3
 8016478:	ffffcfff 	.word	0xffffcfff
 801647c:	40004800 	.word	0x40004800
 8016480:	fffff4ff 	.word	0xfffff4ff
 8016484:	40013800 	.word	0x40013800
 8016488:	40021000 	.word	0x40021000
 801648c:	40004400 	.word	0x40004400
 8016490:	40004c00 	.word	0x40004c00
 8016494:	40005000 	.word	0x40005000
 8016498:	003d0900 	.word	0x003d0900
 801649c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	69da      	ldr	r2, [r3, #28]
 80164a4:	2380      	movs	r3, #128	@ 0x80
 80164a6:	021b      	lsls	r3, r3, #8
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d000      	beq.n	80164ae <UART_SetConfig+0x37a>
 80164ac:	e070      	b.n	8016590 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80164ae:	231b      	movs	r3, #27
 80164b0:	2218      	movs	r2, #24
 80164b2:	189b      	adds	r3, r3, r2
 80164b4:	19db      	adds	r3, r3, r7
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	2b08      	cmp	r3, #8
 80164ba:	d822      	bhi.n	8016502 <UART_SetConfig+0x3ce>
 80164bc:	009a      	lsls	r2, r3, #2
 80164be:	4b67      	ldr	r3, [pc, #412]	@ (801665c <UART_SetConfig+0x528>)
 80164c0:	18d3      	adds	r3, r2, r3
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80164c6:	f7fd fea1 	bl	801420c <HAL_RCC_GetPCLK1Freq>
 80164ca:	0003      	movs	r3, r0
 80164cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80164ce:	e021      	b.n	8016514 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80164d0:	f7fd feb2 	bl	8014238 <HAL_RCC_GetPCLK2Freq>
 80164d4:	0003      	movs	r3, r0
 80164d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80164d8:	e01c      	b.n	8016514 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80164da:	4b61      	ldr	r3, [pc, #388]	@ (8016660 <UART_SetConfig+0x52c>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2210      	movs	r2, #16
 80164e0:	4013      	ands	r3, r2
 80164e2:	d002      	beq.n	80164ea <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80164e4:	4b5f      	ldr	r3, [pc, #380]	@ (8016664 <UART_SetConfig+0x530>)
 80164e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80164e8:	e014      	b.n	8016514 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80164ea:	4b5f      	ldr	r3, [pc, #380]	@ (8016668 <UART_SetConfig+0x534>)
 80164ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80164ee:	e011      	b.n	8016514 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80164f0:	f7fd fddc 	bl	80140ac <HAL_RCC_GetSysClockFreq>
 80164f4:	0003      	movs	r3, r0
 80164f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80164f8:	e00c      	b.n	8016514 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80164fa:	2380      	movs	r3, #128	@ 0x80
 80164fc:	021b      	lsls	r3, r3, #8
 80164fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016500:	e008      	b.n	8016514 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8016502:	2300      	movs	r3, #0
 8016504:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016506:	231a      	movs	r3, #26
 8016508:	2218      	movs	r2, #24
 801650a:	189b      	adds	r3, r3, r2
 801650c:	19db      	adds	r3, r3, r7
 801650e:	2201      	movs	r2, #1
 8016510:	701a      	strb	r2, [r3, #0]
        break;
 8016512:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016516:	2b00      	cmp	r3, #0
 8016518:	d100      	bne.n	801651c <UART_SetConfig+0x3e8>
 801651a:	e090      	b.n	801663e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801651c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801651e:	005a      	lsls	r2, r3, #1
 8016520:	69fb      	ldr	r3, [r7, #28]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	085b      	lsrs	r3, r3, #1
 8016526:	18d2      	adds	r2, r2, r3
 8016528:	69fb      	ldr	r3, [r7, #28]
 801652a:	685b      	ldr	r3, [r3, #4]
 801652c:	0019      	movs	r1, r3
 801652e:	0010      	movs	r0, r2
 8016530:	f7e9 fe38 	bl	80001a4 <__udivsi3>
 8016534:	0003      	movs	r3, r0
 8016536:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801653a:	2b0f      	cmp	r3, #15
 801653c:	d921      	bls.n	8016582 <UART_SetConfig+0x44e>
 801653e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016540:	2380      	movs	r3, #128	@ 0x80
 8016542:	025b      	lsls	r3, r3, #9
 8016544:	429a      	cmp	r2, r3
 8016546:	d21c      	bcs.n	8016582 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801654a:	b29a      	uxth	r2, r3
 801654c:	200e      	movs	r0, #14
 801654e:	2418      	movs	r4, #24
 8016550:	1903      	adds	r3, r0, r4
 8016552:	19db      	adds	r3, r3, r7
 8016554:	210f      	movs	r1, #15
 8016556:	438a      	bics	r2, r1
 8016558:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801655c:	085b      	lsrs	r3, r3, #1
 801655e:	b29b      	uxth	r3, r3
 8016560:	2207      	movs	r2, #7
 8016562:	4013      	ands	r3, r2
 8016564:	b299      	uxth	r1, r3
 8016566:	1903      	adds	r3, r0, r4
 8016568:	19db      	adds	r3, r3, r7
 801656a:	1902      	adds	r2, r0, r4
 801656c:	19d2      	adds	r2, r2, r7
 801656e:	8812      	ldrh	r2, [r2, #0]
 8016570:	430a      	orrs	r2, r1
 8016572:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8016574:	69fb      	ldr	r3, [r7, #28]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	1902      	adds	r2, r0, r4
 801657a:	19d2      	adds	r2, r2, r7
 801657c:	8812      	ldrh	r2, [r2, #0]
 801657e:	60da      	str	r2, [r3, #12]
 8016580:	e05d      	b.n	801663e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8016582:	231a      	movs	r3, #26
 8016584:	2218      	movs	r2, #24
 8016586:	189b      	adds	r3, r3, r2
 8016588:	19db      	adds	r3, r3, r7
 801658a:	2201      	movs	r2, #1
 801658c:	701a      	strb	r2, [r3, #0]
 801658e:	e056      	b.n	801663e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016590:	231b      	movs	r3, #27
 8016592:	2218      	movs	r2, #24
 8016594:	189b      	adds	r3, r3, r2
 8016596:	19db      	adds	r3, r3, r7
 8016598:	781b      	ldrb	r3, [r3, #0]
 801659a:	2b08      	cmp	r3, #8
 801659c:	d822      	bhi.n	80165e4 <UART_SetConfig+0x4b0>
 801659e:	009a      	lsls	r2, r3, #2
 80165a0:	4b32      	ldr	r3, [pc, #200]	@ (801666c <UART_SetConfig+0x538>)
 80165a2:	18d3      	adds	r3, r2, r3
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80165a8:	f7fd fe30 	bl	801420c <HAL_RCC_GetPCLK1Freq>
 80165ac:	0003      	movs	r3, r0
 80165ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80165b0:	e021      	b.n	80165f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80165b2:	f7fd fe41 	bl	8014238 <HAL_RCC_GetPCLK2Freq>
 80165b6:	0003      	movs	r3, r0
 80165b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80165ba:	e01c      	b.n	80165f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80165bc:	4b28      	ldr	r3, [pc, #160]	@ (8016660 <UART_SetConfig+0x52c>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2210      	movs	r2, #16
 80165c2:	4013      	ands	r3, r2
 80165c4:	d002      	beq.n	80165cc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80165c6:	4b27      	ldr	r3, [pc, #156]	@ (8016664 <UART_SetConfig+0x530>)
 80165c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80165ca:	e014      	b.n	80165f6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80165cc:	4b26      	ldr	r3, [pc, #152]	@ (8016668 <UART_SetConfig+0x534>)
 80165ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80165d0:	e011      	b.n	80165f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80165d2:	f7fd fd6b 	bl	80140ac <HAL_RCC_GetSysClockFreq>
 80165d6:	0003      	movs	r3, r0
 80165d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80165da:	e00c      	b.n	80165f6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80165dc:	2380      	movs	r3, #128	@ 0x80
 80165de:	021b      	lsls	r3, r3, #8
 80165e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80165e2:	e008      	b.n	80165f6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80165e4:	2300      	movs	r3, #0
 80165e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80165e8:	231a      	movs	r3, #26
 80165ea:	2218      	movs	r2, #24
 80165ec:	189b      	adds	r3, r3, r2
 80165ee:	19db      	adds	r3, r3, r7
 80165f0:	2201      	movs	r2, #1
 80165f2:	701a      	strb	r2, [r3, #0]
        break;
 80165f4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80165f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d020      	beq.n	801663e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80165fc:	69fb      	ldr	r3, [r7, #28]
 80165fe:	685b      	ldr	r3, [r3, #4]
 8016600:	085a      	lsrs	r2, r3, #1
 8016602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016604:	18d2      	adds	r2, r2, r3
 8016606:	69fb      	ldr	r3, [r7, #28]
 8016608:	685b      	ldr	r3, [r3, #4]
 801660a:	0019      	movs	r1, r3
 801660c:	0010      	movs	r0, r2
 801660e:	f7e9 fdc9 	bl	80001a4 <__udivsi3>
 8016612:	0003      	movs	r3, r0
 8016614:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016618:	2b0f      	cmp	r3, #15
 801661a:	d90a      	bls.n	8016632 <UART_SetConfig+0x4fe>
 801661c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801661e:	2380      	movs	r3, #128	@ 0x80
 8016620:	025b      	lsls	r3, r3, #9
 8016622:	429a      	cmp	r2, r3
 8016624:	d205      	bcs.n	8016632 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016628:	b29a      	uxth	r2, r3
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	60da      	str	r2, [r3, #12]
 8016630:	e005      	b.n	801663e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8016632:	231a      	movs	r3, #26
 8016634:	2218      	movs	r2, #24
 8016636:	189b      	adds	r3, r3, r2
 8016638:	19db      	adds	r3, r3, r7
 801663a:	2201      	movs	r2, #1
 801663c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801663e:	69fb      	ldr	r3, [r7, #28]
 8016640:	2200      	movs	r2, #0
 8016642:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8016644:	69fb      	ldr	r3, [r7, #28]
 8016646:	2200      	movs	r2, #0
 8016648:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801664a:	231a      	movs	r3, #26
 801664c:	2218      	movs	r2, #24
 801664e:	189b      	adds	r3, r3, r2
 8016650:	19db      	adds	r3, r3, r7
 8016652:	781b      	ldrb	r3, [r3, #0]
}
 8016654:	0018      	movs	r0, r3
 8016656:	46bd      	mov	sp, r7
 8016658:	b00e      	add	sp, #56	@ 0x38
 801665a:	bdb0      	pop	{r4, r5, r7, pc}
 801665c:	08023374 	.word	0x08023374
 8016660:	40021000 	.word	0x40021000
 8016664:	003d0900 	.word	0x003d0900
 8016668:	00f42400 	.word	0x00f42400
 801666c:	08023398 	.word	0x08023398

08016670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801667c:	2201      	movs	r2, #1
 801667e:	4013      	ands	r3, r2
 8016680:	d00b      	beq.n	801669a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	685b      	ldr	r3, [r3, #4]
 8016688:	4a4a      	ldr	r2, [pc, #296]	@ (80167b4 <UART_AdvFeatureConfig+0x144>)
 801668a:	4013      	ands	r3, r2
 801668c:	0019      	movs	r1, r3
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	430a      	orrs	r2, r1
 8016698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801669e:	2202      	movs	r2, #2
 80166a0:	4013      	ands	r3, r2
 80166a2:	d00b      	beq.n	80166bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	685b      	ldr	r3, [r3, #4]
 80166aa:	4a43      	ldr	r2, [pc, #268]	@ (80167b8 <UART_AdvFeatureConfig+0x148>)
 80166ac:	4013      	ands	r3, r2
 80166ae:	0019      	movs	r1, r3
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	430a      	orrs	r2, r1
 80166ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166c0:	2204      	movs	r2, #4
 80166c2:	4013      	ands	r3, r2
 80166c4:	d00b      	beq.n	80166de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	685b      	ldr	r3, [r3, #4]
 80166cc:	4a3b      	ldr	r2, [pc, #236]	@ (80167bc <UART_AdvFeatureConfig+0x14c>)
 80166ce:	4013      	ands	r3, r2
 80166d0:	0019      	movs	r1, r3
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	430a      	orrs	r2, r1
 80166dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166e2:	2208      	movs	r2, #8
 80166e4:	4013      	ands	r3, r2
 80166e6:	d00b      	beq.n	8016700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	685b      	ldr	r3, [r3, #4]
 80166ee:	4a34      	ldr	r2, [pc, #208]	@ (80167c0 <UART_AdvFeatureConfig+0x150>)
 80166f0:	4013      	ands	r3, r2
 80166f2:	0019      	movs	r1, r3
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	430a      	orrs	r2, r1
 80166fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016704:	2210      	movs	r2, #16
 8016706:	4013      	ands	r3, r2
 8016708:	d00b      	beq.n	8016722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	689b      	ldr	r3, [r3, #8]
 8016710:	4a2c      	ldr	r2, [pc, #176]	@ (80167c4 <UART_AdvFeatureConfig+0x154>)
 8016712:	4013      	ands	r3, r2
 8016714:	0019      	movs	r1, r3
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	430a      	orrs	r2, r1
 8016720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016726:	2220      	movs	r2, #32
 8016728:	4013      	ands	r3, r2
 801672a:	d00b      	beq.n	8016744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	689b      	ldr	r3, [r3, #8]
 8016732:	4a25      	ldr	r2, [pc, #148]	@ (80167c8 <UART_AdvFeatureConfig+0x158>)
 8016734:	4013      	ands	r3, r2
 8016736:	0019      	movs	r1, r3
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	430a      	orrs	r2, r1
 8016742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016748:	2240      	movs	r2, #64	@ 0x40
 801674a:	4013      	ands	r3, r2
 801674c:	d01d      	beq.n	801678a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	4a1d      	ldr	r2, [pc, #116]	@ (80167cc <UART_AdvFeatureConfig+0x15c>)
 8016756:	4013      	ands	r3, r2
 8016758:	0019      	movs	r1, r3
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	430a      	orrs	r2, r1
 8016764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801676a:	2380      	movs	r3, #128	@ 0x80
 801676c:	035b      	lsls	r3, r3, #13
 801676e:	429a      	cmp	r2, r3
 8016770:	d10b      	bne.n	801678a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	685b      	ldr	r3, [r3, #4]
 8016778:	4a15      	ldr	r2, [pc, #84]	@ (80167d0 <UART_AdvFeatureConfig+0x160>)
 801677a:	4013      	ands	r3, r2
 801677c:	0019      	movs	r1, r3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	430a      	orrs	r2, r1
 8016788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801678e:	2280      	movs	r2, #128	@ 0x80
 8016790:	4013      	ands	r3, r2
 8016792:	d00b      	beq.n	80167ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	4a0e      	ldr	r2, [pc, #56]	@ (80167d4 <UART_AdvFeatureConfig+0x164>)
 801679c:	4013      	ands	r3, r2
 801679e:	0019      	movs	r1, r3
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	430a      	orrs	r2, r1
 80167aa:	605a      	str	r2, [r3, #4]
  }
}
 80167ac:	46c0      	nop			@ (mov r8, r8)
 80167ae:	46bd      	mov	sp, r7
 80167b0:	b002      	add	sp, #8
 80167b2:	bd80      	pop	{r7, pc}
 80167b4:	fffdffff 	.word	0xfffdffff
 80167b8:	fffeffff 	.word	0xfffeffff
 80167bc:	fffbffff 	.word	0xfffbffff
 80167c0:	ffff7fff 	.word	0xffff7fff
 80167c4:	ffffefff 	.word	0xffffefff
 80167c8:	ffffdfff 	.word	0xffffdfff
 80167cc:	ffefffff 	.word	0xffefffff
 80167d0:	ff9fffff 	.word	0xff9fffff
 80167d4:	fff7ffff 	.word	0xfff7ffff

080167d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b092      	sub	sp, #72	@ 0x48
 80167dc:	af02      	add	r7, sp, #8
 80167de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2284      	movs	r2, #132	@ 0x84
 80167e4:	2100      	movs	r1, #0
 80167e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80167e8:	f7f6 fee4 	bl	800d5b4 <HAL_GetTick>
 80167ec:	0003      	movs	r3, r0
 80167ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2208      	movs	r2, #8
 80167f8:	4013      	ands	r3, r2
 80167fa:	2b08      	cmp	r3, #8
 80167fc:	d12c      	bne.n	8016858 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80167fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016800:	2280      	movs	r2, #128	@ 0x80
 8016802:	0391      	lsls	r1, r2, #14
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	4a46      	ldr	r2, [pc, #280]	@ (8016920 <UART_CheckIdleState+0x148>)
 8016808:	9200      	str	r2, [sp, #0]
 801680a:	2200      	movs	r2, #0
 801680c:	f000 f88c 	bl	8016928 <UART_WaitOnFlagUntilTimeout>
 8016810:	1e03      	subs	r3, r0, #0
 8016812:	d021      	beq.n	8016858 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016814:	f3ef 8310 	mrs	r3, PRIMASK
 8016818:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801681c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801681e:	2301      	movs	r3, #1
 8016820:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016824:	f383 8810 	msr	PRIMASK, r3
}
 8016828:	46c0      	nop			@ (mov r8, r8)
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	681a      	ldr	r2, [r3, #0]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	2180      	movs	r1, #128	@ 0x80
 8016836:	438a      	bics	r2, r1
 8016838:	601a      	str	r2, [r3, #0]
 801683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016840:	f383 8810 	msr	PRIMASK, r3
}
 8016844:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	2220      	movs	r2, #32
 801684a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2278      	movs	r2, #120	@ 0x78
 8016850:	2100      	movs	r1, #0
 8016852:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016854:	2303      	movs	r3, #3
 8016856:	e05f      	b.n	8016918 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	2204      	movs	r2, #4
 8016860:	4013      	ands	r3, r2
 8016862:	2b04      	cmp	r3, #4
 8016864:	d146      	bne.n	80168f4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016868:	2280      	movs	r2, #128	@ 0x80
 801686a:	03d1      	lsls	r1, r2, #15
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	4a2c      	ldr	r2, [pc, #176]	@ (8016920 <UART_CheckIdleState+0x148>)
 8016870:	9200      	str	r2, [sp, #0]
 8016872:	2200      	movs	r2, #0
 8016874:	f000 f858 	bl	8016928 <UART_WaitOnFlagUntilTimeout>
 8016878:	1e03      	subs	r3, r0, #0
 801687a:	d03b      	beq.n	80168f4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801687c:	f3ef 8310 	mrs	r3, PRIMASK
 8016880:	60fb      	str	r3, [r7, #12]
  return(result);
 8016882:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016884:	637b      	str	r3, [r7, #52]	@ 0x34
 8016886:	2301      	movs	r3, #1
 8016888:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801688a:	693b      	ldr	r3, [r7, #16]
 801688c:	f383 8810 	msr	PRIMASK, r3
}
 8016890:	46c0      	nop			@ (mov r8, r8)
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	681a      	ldr	r2, [r3, #0]
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	4921      	ldr	r1, [pc, #132]	@ (8016924 <UART_CheckIdleState+0x14c>)
 801689e:	400a      	ands	r2, r1
 80168a0:	601a      	str	r2, [r3, #0]
 80168a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80168a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168a6:	697b      	ldr	r3, [r7, #20]
 80168a8:	f383 8810 	msr	PRIMASK, r3
}
 80168ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168ae:	f3ef 8310 	mrs	r3, PRIMASK
 80168b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80168b4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80168b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80168b8:	2301      	movs	r3, #1
 80168ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168bc:	69fb      	ldr	r3, [r7, #28]
 80168be:	f383 8810 	msr	PRIMASK, r3
}
 80168c2:	46c0      	nop			@ (mov r8, r8)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	689a      	ldr	r2, [r3, #8]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	2101      	movs	r1, #1
 80168d0:	438a      	bics	r2, r1
 80168d2:	609a      	str	r2, [r3, #8]
 80168d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168d8:	6a3b      	ldr	r3, [r7, #32]
 80168da:	f383 8810 	msr	PRIMASK, r3
}
 80168de:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	2280      	movs	r2, #128	@ 0x80
 80168e4:	2120      	movs	r1, #32
 80168e6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2278      	movs	r2, #120	@ 0x78
 80168ec:	2100      	movs	r1, #0
 80168ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80168f0:	2303      	movs	r3, #3
 80168f2:	e011      	b.n	8016918 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2220      	movs	r2, #32
 80168f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2280      	movs	r2, #128	@ 0x80
 80168fe:	2120      	movs	r1, #32
 8016900:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2200      	movs	r2, #0
 8016906:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2200      	movs	r2, #0
 801690c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2278      	movs	r2, #120	@ 0x78
 8016912:	2100      	movs	r1, #0
 8016914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016916:	2300      	movs	r3, #0
}
 8016918:	0018      	movs	r0, r3
 801691a:	46bd      	mov	sp, r7
 801691c:	b010      	add	sp, #64	@ 0x40
 801691e:	bd80      	pop	{r7, pc}
 8016920:	01ffffff 	.word	0x01ffffff
 8016924:	fffffedf 	.word	0xfffffedf

08016928 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b084      	sub	sp, #16
 801692c:	af00      	add	r7, sp, #0
 801692e:	60f8      	str	r0, [r7, #12]
 8016930:	60b9      	str	r1, [r7, #8]
 8016932:	603b      	str	r3, [r7, #0]
 8016934:	1dfb      	adds	r3, r7, #7
 8016936:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016938:	e04b      	b.n	80169d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801693a:	69bb      	ldr	r3, [r7, #24]
 801693c:	3301      	adds	r3, #1
 801693e:	d048      	beq.n	80169d2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016940:	f7f6 fe38 	bl	800d5b4 <HAL_GetTick>
 8016944:	0002      	movs	r2, r0
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	1ad3      	subs	r3, r2, r3
 801694a:	69ba      	ldr	r2, [r7, #24]
 801694c:	429a      	cmp	r2, r3
 801694e:	d302      	bcc.n	8016956 <UART_WaitOnFlagUntilTimeout+0x2e>
 8016950:	69bb      	ldr	r3, [r7, #24]
 8016952:	2b00      	cmp	r3, #0
 8016954:	d101      	bne.n	801695a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8016956:	2303      	movs	r3, #3
 8016958:	e04b      	b.n	80169f2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	2204      	movs	r2, #4
 8016962:	4013      	ands	r3, r2
 8016964:	d035      	beq.n	80169d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	69db      	ldr	r3, [r3, #28]
 801696c:	2208      	movs	r2, #8
 801696e:	4013      	ands	r3, r2
 8016970:	2b08      	cmp	r3, #8
 8016972:	d111      	bne.n	8016998 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	2208      	movs	r2, #8
 801697a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	0018      	movs	r0, r3
 8016980:	f000 f9ca 	bl	8016d18 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	2284      	movs	r2, #132	@ 0x84
 8016988:	2108      	movs	r1, #8
 801698a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2278      	movs	r2, #120	@ 0x78
 8016990:	2100      	movs	r1, #0
 8016992:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8016994:	2301      	movs	r3, #1
 8016996:	e02c      	b.n	80169f2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	69da      	ldr	r2, [r3, #28]
 801699e:	2380      	movs	r3, #128	@ 0x80
 80169a0:	011b      	lsls	r3, r3, #4
 80169a2:	401a      	ands	r2, r3
 80169a4:	2380      	movs	r3, #128	@ 0x80
 80169a6:	011b      	lsls	r3, r3, #4
 80169a8:	429a      	cmp	r2, r3
 80169aa:	d112      	bne.n	80169d2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2280      	movs	r2, #128	@ 0x80
 80169b2:	0112      	lsls	r2, r2, #4
 80169b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	0018      	movs	r0, r3
 80169ba:	f000 f9ad 	bl	8016d18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2284      	movs	r2, #132	@ 0x84
 80169c2:	2120      	movs	r1, #32
 80169c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2278      	movs	r2, #120	@ 0x78
 80169ca:	2100      	movs	r1, #0
 80169cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80169ce:	2303      	movs	r3, #3
 80169d0:	e00f      	b.n	80169f2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	69db      	ldr	r3, [r3, #28]
 80169d8:	68ba      	ldr	r2, [r7, #8]
 80169da:	4013      	ands	r3, r2
 80169dc:	68ba      	ldr	r2, [r7, #8]
 80169de:	1ad3      	subs	r3, r2, r3
 80169e0:	425a      	negs	r2, r3
 80169e2:	4153      	adcs	r3, r2
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	001a      	movs	r2, r3
 80169e8:	1dfb      	adds	r3, r7, #7
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d0a4      	beq.n	801693a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80169f0:	2300      	movs	r3, #0
}
 80169f2:	0018      	movs	r0, r3
 80169f4:	46bd      	mov	sp, r7
 80169f6:	b004      	add	sp, #16
 80169f8:	bd80      	pop	{r7, pc}
	...

080169fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b090      	sub	sp, #64	@ 0x40
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	60b9      	str	r1, [r7, #8]
 8016a06:	1dbb      	adds	r3, r7, #6
 8016a08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	68ba      	ldr	r2, [r7, #8]
 8016a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	1dba      	adds	r2, r7, #6
 8016a14:	2158      	movs	r1, #88	@ 0x58
 8016a16:	8812      	ldrh	r2, [r2, #0]
 8016a18:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	1dba      	adds	r2, r7, #6
 8016a1e:	215a      	movs	r1, #90	@ 0x5a
 8016a20:	8812      	ldrh	r2, [r2, #0]
 8016a22:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	2200      	movs	r2, #0
 8016a28:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	689a      	ldr	r2, [r3, #8]
 8016a2e:	2380      	movs	r3, #128	@ 0x80
 8016a30:	015b      	lsls	r3, r3, #5
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d10d      	bne.n	8016a52 <UART_Start_Receive_IT+0x56>
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	691b      	ldr	r3, [r3, #16]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d104      	bne.n	8016a48 <UART_Start_Receive_IT+0x4c>
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	225c      	movs	r2, #92	@ 0x5c
 8016a42:	4950      	ldr	r1, [pc, #320]	@ (8016b84 <UART_Start_Receive_IT+0x188>)
 8016a44:	5299      	strh	r1, [r3, r2]
 8016a46:	e02e      	b.n	8016aa6 <UART_Start_Receive_IT+0xaa>
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	225c      	movs	r2, #92	@ 0x5c
 8016a4c:	21ff      	movs	r1, #255	@ 0xff
 8016a4e:	5299      	strh	r1, [r3, r2]
 8016a50:	e029      	b.n	8016aa6 <UART_Start_Receive_IT+0xaa>
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	689b      	ldr	r3, [r3, #8]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d10d      	bne.n	8016a76 <UART_Start_Receive_IT+0x7a>
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	691b      	ldr	r3, [r3, #16]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d104      	bne.n	8016a6c <UART_Start_Receive_IT+0x70>
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	225c      	movs	r2, #92	@ 0x5c
 8016a66:	21ff      	movs	r1, #255	@ 0xff
 8016a68:	5299      	strh	r1, [r3, r2]
 8016a6a:	e01c      	b.n	8016aa6 <UART_Start_Receive_IT+0xaa>
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	225c      	movs	r2, #92	@ 0x5c
 8016a70:	217f      	movs	r1, #127	@ 0x7f
 8016a72:	5299      	strh	r1, [r3, r2]
 8016a74:	e017      	b.n	8016aa6 <UART_Start_Receive_IT+0xaa>
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	689a      	ldr	r2, [r3, #8]
 8016a7a:	2380      	movs	r3, #128	@ 0x80
 8016a7c:	055b      	lsls	r3, r3, #21
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	d10d      	bne.n	8016a9e <UART_Start_Receive_IT+0xa2>
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	691b      	ldr	r3, [r3, #16]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d104      	bne.n	8016a94 <UART_Start_Receive_IT+0x98>
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	225c      	movs	r2, #92	@ 0x5c
 8016a8e:	217f      	movs	r1, #127	@ 0x7f
 8016a90:	5299      	strh	r1, [r3, r2]
 8016a92:	e008      	b.n	8016aa6 <UART_Start_Receive_IT+0xaa>
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	225c      	movs	r2, #92	@ 0x5c
 8016a98:	213f      	movs	r1, #63	@ 0x3f
 8016a9a:	5299      	strh	r1, [r3, r2]
 8016a9c:	e003      	b.n	8016aa6 <UART_Start_Receive_IT+0xaa>
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	225c      	movs	r2, #92	@ 0x5c
 8016aa2:	2100      	movs	r1, #0
 8016aa4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	2284      	movs	r2, #132	@ 0x84
 8016aaa:	2100      	movs	r1, #0
 8016aac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	2280      	movs	r2, #128	@ 0x80
 8016ab2:	2122      	movs	r1, #34	@ 0x22
 8016ab4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8016aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8016abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ac6:	f383 8810 	msr	PRIMASK, r3
}
 8016aca:	46c0      	nop			@ (mov r8, r8)
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	689a      	ldr	r2, [r3, #8]
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	2101      	movs	r1, #1
 8016ad8:	430a      	orrs	r2, r1
 8016ada:	609a      	str	r2, [r3, #8]
 8016adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016ade:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ae2:	f383 8810 	msr	PRIMASK, r3
}
 8016ae6:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	689a      	ldr	r2, [r3, #8]
 8016aec:	2380      	movs	r3, #128	@ 0x80
 8016aee:	015b      	lsls	r3, r3, #5
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d107      	bne.n	8016b04 <UART_Start_Receive_IT+0x108>
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	691b      	ldr	r3, [r3, #16]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d103      	bne.n	8016b04 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	4a22      	ldr	r2, [pc, #136]	@ (8016b88 <UART_Start_Receive_IT+0x18c>)
 8016b00:	669a      	str	r2, [r3, #104]	@ 0x68
 8016b02:	e002      	b.n	8016b0a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	4a21      	ldr	r2, [pc, #132]	@ (8016b8c <UART_Start_Receive_IT+0x190>)
 8016b08:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	691b      	ldr	r3, [r3, #16]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d019      	beq.n	8016b46 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b12:	f3ef 8310 	mrs	r3, PRIMASK
 8016b16:	61fb      	str	r3, [r7, #28]
  return(result);
 8016b18:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8016b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b20:	6a3b      	ldr	r3, [r7, #32]
 8016b22:	f383 8810 	msr	PRIMASK, r3
}
 8016b26:	46c0      	nop			@ (mov r8, r8)
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	681a      	ldr	r2, [r3, #0]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2190      	movs	r1, #144	@ 0x90
 8016b34:	0049      	lsls	r1, r1, #1
 8016b36:	430a      	orrs	r2, r1
 8016b38:	601a      	str	r2, [r3, #0]
 8016b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b40:	f383 8810 	msr	PRIMASK, r3
}
 8016b44:	e018      	b.n	8016b78 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b46:	f3ef 8310 	mrs	r3, PRIMASK
 8016b4a:	613b      	str	r3, [r7, #16]
  return(result);
 8016b4c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8016b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016b50:	2301      	movs	r3, #1
 8016b52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b54:	697b      	ldr	r3, [r7, #20]
 8016b56:	f383 8810 	msr	PRIMASK, r3
}
 8016b5a:	46c0      	nop			@ (mov r8, r8)
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	2120      	movs	r1, #32
 8016b68:	430a      	orrs	r2, r1
 8016b6a:	601a      	str	r2, [r3, #0]
 8016b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b70:	69bb      	ldr	r3, [r7, #24]
 8016b72:	f383 8810 	msr	PRIMASK, r3
}
 8016b76:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8016b78:	2300      	movs	r3, #0
}
 8016b7a:	0018      	movs	r0, r3
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	b010      	add	sp, #64	@ 0x40
 8016b80:	bd80      	pop	{r7, pc}
 8016b82:	46c0      	nop			@ (mov r8, r8)
 8016b84:	000001ff 	.word	0x000001ff
 8016b88:	080172fd 	.word	0x080172fd
 8016b8c:	08017131 	.word	0x08017131

08016b90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b090      	sub	sp, #64	@ 0x40
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	1dbb      	adds	r3, r7, #6
 8016b9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	68ba      	ldr	r2, [r7, #8]
 8016ba2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	1dba      	adds	r2, r7, #6
 8016ba8:	2158      	movs	r1, #88	@ 0x58
 8016baa:	8812      	ldrh	r2, [r2, #0]
 8016bac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	2284      	movs	r2, #132	@ 0x84
 8016bb2:	2100      	movs	r1, #0
 8016bb4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2280      	movs	r2, #128	@ 0x80
 8016bba:	2122      	movs	r1, #34	@ 0x22
 8016bbc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d028      	beq.n	8016c18 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bca:	4a3e      	ldr	r2, [pc, #248]	@ (8016cc4 <UART_Start_Receive_DMA+0x134>)
 8016bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8016cc8 <UART_Start_Receive_DMA+0x138>)
 8016bd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bda:	4a3c      	ldr	r2, [pc, #240]	@ (8016ccc <UART_Start_Receive_DMA+0x13c>)
 8016bdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016be2:	2200      	movs	r2, #0
 8016be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	3324      	adds	r3, #36	@ 0x24
 8016bf0:	0019      	movs	r1, r3
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016bf6:	001a      	movs	r2, r3
 8016bf8:	1dbb      	adds	r3, r7, #6
 8016bfa:	881b      	ldrh	r3, [r3, #0]
 8016bfc:	f7f7 f9fa 	bl	800dff4 <HAL_DMA_Start_IT>
 8016c00:	1e03      	subs	r3, r0, #0
 8016c02:	d009      	beq.n	8016c18 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	2284      	movs	r2, #132	@ 0x84
 8016c08:	2110      	movs	r1, #16
 8016c0a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	2280      	movs	r2, #128	@ 0x80
 8016c10:	2120      	movs	r1, #32
 8016c12:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8016c14:	2301      	movs	r3, #1
 8016c16:	e050      	b.n	8016cba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	691b      	ldr	r3, [r3, #16]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d019      	beq.n	8016c54 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c20:	f3ef 8310 	mrs	r3, PRIMASK
 8016c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8016c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016c2a:	2301      	movs	r3, #1
 8016c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c30:	f383 8810 	msr	PRIMASK, r3
}
 8016c34:	46c0      	nop			@ (mov r8, r8)
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	2180      	movs	r1, #128	@ 0x80
 8016c42:	0049      	lsls	r1, r1, #1
 8016c44:	430a      	orrs	r2, r1
 8016c46:	601a      	str	r2, [r3, #0]
 8016c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c4e:	f383 8810 	msr	PRIMASK, r3
}
 8016c52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c54:	f3ef 8310 	mrs	r3, PRIMASK
 8016c58:	613b      	str	r3, [r7, #16]
  return(result);
 8016c5a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016c5e:	2301      	movs	r3, #1
 8016c60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c62:	697b      	ldr	r3, [r7, #20]
 8016c64:	f383 8810 	msr	PRIMASK, r3
}
 8016c68:	46c0      	nop			@ (mov r8, r8)
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	689a      	ldr	r2, [r3, #8]
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2101      	movs	r1, #1
 8016c76:	430a      	orrs	r2, r1
 8016c78:	609a      	str	r2, [r3, #8]
 8016c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c7e:	69bb      	ldr	r3, [r7, #24]
 8016c80:	f383 8810 	msr	PRIMASK, r3
}
 8016c84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c86:	f3ef 8310 	mrs	r3, PRIMASK
 8016c8a:	61fb      	str	r3, [r7, #28]
  return(result);
 8016c8c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8016c90:	2301      	movs	r3, #1
 8016c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c94:	6a3b      	ldr	r3, [r7, #32]
 8016c96:	f383 8810 	msr	PRIMASK, r3
}
 8016c9a:	46c0      	nop			@ (mov r8, r8)
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	689a      	ldr	r2, [r3, #8]
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	2140      	movs	r1, #64	@ 0x40
 8016ca8:	430a      	orrs	r2, r1
 8016caa:	609a      	str	r2, [r3, #8]
 8016cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cb2:	f383 8810 	msr	PRIMASK, r3
}
 8016cb6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8016cb8:	2300      	movs	r3, #0
}
 8016cba:	0018      	movs	r0, r3
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	b010      	add	sp, #64	@ 0x40
 8016cc0:	bd80      	pop	{r7, pc}
 8016cc2:	46c0      	nop			@ (mov r8, r8)
 8016cc4:	08016ea1 	.word	0x08016ea1
 8016cc8:	08016fd5 	.word	0x08016fd5
 8016ccc:	0801701d 	.word	0x0801701d

08016cd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b086      	sub	sp, #24
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8016cdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8016cde:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016ce0:	617b      	str	r3, [r7, #20]
 8016ce2:	2301      	movs	r3, #1
 8016ce4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	f383 8810 	msr	PRIMASK, r3
}
 8016cec:	46c0      	nop			@ (mov r8, r8)
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	21c0      	movs	r1, #192	@ 0xc0
 8016cfa:	438a      	bics	r2, r1
 8016cfc:	601a      	str	r2, [r3, #0]
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d02:	693b      	ldr	r3, [r7, #16]
 8016d04:	f383 8810 	msr	PRIMASK, r3
}
 8016d08:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	2220      	movs	r2, #32
 8016d0e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8016d10:	46c0      	nop			@ (mov r8, r8)
 8016d12:	46bd      	mov	sp, r7
 8016d14:	b006      	add	sp, #24
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b08e      	sub	sp, #56	@ 0x38
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d20:	f3ef 8310 	mrs	r3, PRIMASK
 8016d24:	617b      	str	r3, [r7, #20]
  return(result);
 8016d26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d2e:	69bb      	ldr	r3, [r7, #24]
 8016d30:	f383 8810 	msr	PRIMASK, r3
}
 8016d34:	46c0      	nop			@ (mov r8, r8)
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	681a      	ldr	r2, [r3, #0]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	4926      	ldr	r1, [pc, #152]	@ (8016ddc <UART_EndRxTransfer+0xc4>)
 8016d42:	400a      	ands	r2, r1
 8016d44:	601a      	str	r2, [r3, #0]
 8016d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d4a:	69fb      	ldr	r3, [r7, #28]
 8016d4c:	f383 8810 	msr	PRIMASK, r3
}
 8016d50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d52:	f3ef 8310 	mrs	r3, PRIMASK
 8016d56:	623b      	str	r3, [r7, #32]
  return(result);
 8016d58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8016d5c:	2301      	movs	r3, #1
 8016d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d62:	f383 8810 	msr	PRIMASK, r3
}
 8016d66:	46c0      	nop			@ (mov r8, r8)
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	689a      	ldr	r2, [r3, #8]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	2101      	movs	r1, #1
 8016d74:	438a      	bics	r2, r1
 8016d76:	609a      	str	r2, [r3, #8]
 8016d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d7e:	f383 8810 	msr	PRIMASK, r3
}
 8016d82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d118      	bne.n	8016dbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8016d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8016d92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016d96:	2301      	movs	r3, #1
 8016d98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	f383 8810 	msr	PRIMASK, r3
}
 8016da0:	46c0      	nop			@ (mov r8, r8)
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	2110      	movs	r1, #16
 8016dae:	438a      	bics	r2, r1
 8016db0:	601a      	str	r2, [r3, #0]
 8016db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016db4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	f383 8810 	msr	PRIMASK, r3
}
 8016dbc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2280      	movs	r2, #128	@ 0x80
 8016dc2:	2120      	movs	r1, #32
 8016dc4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8016dd2:	46c0      	nop			@ (mov r8, r8)
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	b00e      	add	sp, #56	@ 0x38
 8016dd8:	bd80      	pop	{r7, pc}
 8016dda:	46c0      	nop			@ (mov r8, r8)
 8016ddc:	fffffedf 	.word	0xfffffedf

08016de0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b08c      	sub	sp, #48	@ 0x30
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016dec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	2220      	movs	r2, #32
 8016df6:	4013      	ands	r3, r2
 8016df8:	d135      	bne.n	8016e66 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8016dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dfc:	2252      	movs	r2, #82	@ 0x52
 8016dfe:	2100      	movs	r1, #0
 8016e00:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e02:	f3ef 8310 	mrs	r3, PRIMASK
 8016e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e08:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e0c:	2301      	movs	r3, #1
 8016e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	f383 8810 	msr	PRIMASK, r3
}
 8016e16:	46c0      	nop			@ (mov r8, r8)
 8016e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	689a      	ldr	r2, [r3, #8]
 8016e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	2180      	movs	r1, #128	@ 0x80
 8016e24:	438a      	bics	r2, r1
 8016e26:	609a      	str	r2, [r3, #8]
 8016e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	f383 8810 	msr	PRIMASK, r3
}
 8016e32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e34:	f3ef 8310 	mrs	r3, PRIMASK
 8016e38:	61bb      	str	r3, [r7, #24]
  return(result);
 8016e3a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e3e:	2301      	movs	r3, #1
 8016e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e42:	69fb      	ldr	r3, [r7, #28]
 8016e44:	f383 8810 	msr	PRIMASK, r3
}
 8016e48:	46c0      	nop			@ (mov r8, r8)
 8016e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	681a      	ldr	r2, [r3, #0]
 8016e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	2140      	movs	r1, #64	@ 0x40
 8016e56:	430a      	orrs	r2, r1
 8016e58:	601a      	str	r2, [r3, #0]
 8016e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e5e:	6a3b      	ldr	r3, [r7, #32]
 8016e60:	f383 8810 	msr	PRIMASK, r3
}
 8016e64:	e006      	b.n	8016e74 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8016e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e68:	228c      	movs	r2, #140	@ 0x8c
 8016e6a:	589b      	ldr	r3, [r3, r2]
 8016e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e6e:	0010      	movs	r0, r2
 8016e70:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016e72:	46c0      	nop			@ (mov r8, r8)
 8016e74:	46c0      	nop			@ (mov r8, r8)
 8016e76:	46bd      	mov	sp, r7
 8016e78:	b00c      	add	sp, #48	@ 0x30
 8016e7a:	bd80      	pop	{r7, pc}

08016e7c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	2288      	movs	r2, #136	@ 0x88
 8016e8e:	589b      	ldr	r3, [r3, r2]
 8016e90:	68fa      	ldr	r2, [r7, #12]
 8016e92:	0010      	movs	r0, r2
 8016e94:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016e96:	46c0      	nop			@ (mov r8, r8)
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	b004      	add	sp, #16
 8016e9c:	bd80      	pop	{r7, pc}
	...

08016ea0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b094      	sub	sp, #80	@ 0x50
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016eac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	2220      	movs	r2, #32
 8016eb6:	4013      	ands	r3, r2
 8016eb8:	d16f      	bne.n	8016f9a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8016eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ebc:	225a      	movs	r2, #90	@ 0x5a
 8016ebe:	2100      	movs	r1, #0
 8016ec0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8016ec6:	61bb      	str	r3, [r7, #24]
  return(result);
 8016ec8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016eca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016ecc:	2301      	movs	r3, #1
 8016ece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	f383 8810 	msr	PRIMASK, r3
}
 8016ed6:	46c0      	nop			@ (mov r8, r8)
 8016ed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	681a      	ldr	r2, [r3, #0]
 8016ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	493b      	ldr	r1, [pc, #236]	@ (8016fd0 <UART_DMAReceiveCplt+0x130>)
 8016ee4:	400a      	ands	r2, r1
 8016ee6:	601a      	str	r2, [r3, #0]
 8016ee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016eea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016eec:	6a3b      	ldr	r3, [r7, #32]
 8016eee:	f383 8810 	msr	PRIMASK, r3
}
 8016ef2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8016ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8016efe:	2301      	movs	r3, #1
 8016f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f04:	f383 8810 	msr	PRIMASK, r3
}
 8016f08:	46c0      	nop			@ (mov r8, r8)
 8016f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	689a      	ldr	r2, [r3, #8]
 8016f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2101      	movs	r1, #1
 8016f16:	438a      	bics	r2, r1
 8016f18:	609a      	str	r2, [r3, #8]
 8016f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f20:	f383 8810 	msr	PRIMASK, r3
}
 8016f24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f26:	f3ef 8310 	mrs	r3, PRIMASK
 8016f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016f30:	2301      	movs	r3, #1
 8016f32:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f36:	f383 8810 	msr	PRIMASK, r3
}
 8016f3a:	46c0      	nop			@ (mov r8, r8)
 8016f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	689a      	ldr	r2, [r3, #8]
 8016f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	2140      	movs	r1, #64	@ 0x40
 8016f48:	438a      	bics	r2, r1
 8016f4a:	609a      	str	r2, [r3, #8]
 8016f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f52:	f383 8810 	msr	PRIMASK, r3
}
 8016f56:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f5a:	2280      	movs	r2, #128	@ 0x80
 8016f5c:	2120      	movs	r1, #32
 8016f5e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016f64:	2b01      	cmp	r3, #1
 8016f66:	d118      	bne.n	8016f9a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f68:	f3ef 8310 	mrs	r3, PRIMASK
 8016f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f6e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016f72:	2301      	movs	r3, #1
 8016f74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f76:	693b      	ldr	r3, [r7, #16]
 8016f78:	f383 8810 	msr	PRIMASK, r3
}
 8016f7c:	46c0      	nop			@ (mov r8, r8)
 8016f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2110      	movs	r1, #16
 8016f8a:	438a      	bics	r2, r1
 8016f8c:	601a      	str	r2, [r3, #0]
 8016f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f92:	697b      	ldr	r3, [r7, #20]
 8016f94:	f383 8810 	msr	PRIMASK, r3
}
 8016f98:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016fa4:	2b01      	cmp	r3, #1
 8016fa6:	d109      	bne.n	8016fbc <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8016fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016faa:	22ac      	movs	r2, #172	@ 0xac
 8016fac:	589b      	ldr	r3, [r3, r2]
 8016fae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016fb0:	2158      	movs	r1, #88	@ 0x58
 8016fb2:	5a51      	ldrh	r1, [r2, r1]
 8016fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016fb6:	0010      	movs	r0, r2
 8016fb8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016fba:	e005      	b.n	8016fc8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8016fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fbe:	2294      	movs	r2, #148	@ 0x94
 8016fc0:	589b      	ldr	r3, [r3, r2]
 8016fc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016fc4:	0010      	movs	r0, r2
 8016fc6:	4798      	blx	r3
}
 8016fc8:	46c0      	nop			@ (mov r8, r8)
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	b014      	add	sp, #80	@ 0x50
 8016fce:	bd80      	pop	{r7, pc}
 8016fd0:	fffffeff 	.word	0xfffffeff

08016fd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b084      	sub	sp, #16
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fe0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016fec:	2b01      	cmp	r3, #1
 8016fee:	d10b      	bne.n	8017008 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	22ac      	movs	r2, #172	@ 0xac
 8016ff4:	589b      	ldr	r3, [r3, r2]
 8016ff6:	68fa      	ldr	r2, [r7, #12]
 8016ff8:	2158      	movs	r1, #88	@ 0x58
 8016ffa:	5a52      	ldrh	r2, [r2, r1]
 8016ffc:	0852      	lsrs	r2, r2, #1
 8016ffe:	b291      	uxth	r1, r2
 8017000:	68fa      	ldr	r2, [r7, #12]
 8017002:	0010      	movs	r0, r2
 8017004:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017006:	e005      	b.n	8017014 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2290      	movs	r2, #144	@ 0x90
 801700c:	589b      	ldr	r3, [r3, r2]
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	0010      	movs	r0, r2
 8017012:	4798      	blx	r3
}
 8017014:	46c0      	nop			@ (mov r8, r8)
 8017016:	46bd      	mov	sp, r7
 8017018:	b004      	add	sp, #16
 801701a:	bd80      	pop	{r7, pc}

0801701c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b086      	sub	sp, #24
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017028:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801702a:	697b      	ldr	r3, [r7, #20]
 801702c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801702e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	2280      	movs	r2, #128	@ 0x80
 8017034:	589b      	ldr	r3, [r3, r2]
 8017036:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	689b      	ldr	r3, [r3, #8]
 801703e:	2280      	movs	r2, #128	@ 0x80
 8017040:	4013      	ands	r3, r2
 8017042:	2b80      	cmp	r3, #128	@ 0x80
 8017044:	d10a      	bne.n	801705c <UART_DMAError+0x40>
 8017046:	693b      	ldr	r3, [r7, #16]
 8017048:	2b21      	cmp	r3, #33	@ 0x21
 801704a:	d107      	bne.n	801705c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	2252      	movs	r2, #82	@ 0x52
 8017050:	2100      	movs	r1, #0
 8017052:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017054:	697b      	ldr	r3, [r7, #20]
 8017056:	0018      	movs	r0, r3
 8017058:	f7ff fe3a 	bl	8016cd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	689b      	ldr	r3, [r3, #8]
 8017062:	2240      	movs	r2, #64	@ 0x40
 8017064:	4013      	ands	r3, r2
 8017066:	2b40      	cmp	r3, #64	@ 0x40
 8017068:	d10a      	bne.n	8017080 <UART_DMAError+0x64>
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	2b22      	cmp	r3, #34	@ 0x22
 801706e:	d107      	bne.n	8017080 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	225a      	movs	r2, #90	@ 0x5a
 8017074:	2100      	movs	r1, #0
 8017076:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	0018      	movs	r0, r3
 801707c:	f7ff fe4c 	bl	8016d18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017080:	697b      	ldr	r3, [r7, #20]
 8017082:	2284      	movs	r2, #132	@ 0x84
 8017084:	589b      	ldr	r3, [r3, r2]
 8017086:	2210      	movs	r2, #16
 8017088:	431a      	orrs	r2, r3
 801708a:	697b      	ldr	r3, [r7, #20]
 801708c:	2184      	movs	r1, #132	@ 0x84
 801708e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	2298      	movs	r2, #152	@ 0x98
 8017094:	589b      	ldr	r3, [r3, r2]
 8017096:	697a      	ldr	r2, [r7, #20]
 8017098:	0010      	movs	r0, r2
 801709a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801709c:	46c0      	nop			@ (mov r8, r8)
 801709e:	46bd      	mov	sp, r7
 80170a0:	b006      	add	sp, #24
 80170a2:	bd80      	pop	{r7, pc}

080170a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b084      	sub	sp, #16
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	225a      	movs	r2, #90	@ 0x5a
 80170b6:	2100      	movs	r1, #0
 80170b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2252      	movs	r2, #82	@ 0x52
 80170be:	2100      	movs	r1, #0
 80170c0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	2298      	movs	r2, #152	@ 0x98
 80170c6:	589b      	ldr	r3, [r3, r2]
 80170c8:	68fa      	ldr	r2, [r7, #12]
 80170ca:	0010      	movs	r0, r2
 80170cc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80170ce:	46c0      	nop			@ (mov r8, r8)
 80170d0:	46bd      	mov	sp, r7
 80170d2:	b004      	add	sp, #16
 80170d4:	bd80      	pop	{r7, pc}

080170d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80170d6:	b580      	push	{r7, lr}
 80170d8:	b086      	sub	sp, #24
 80170da:	af00      	add	r7, sp, #0
 80170dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170de:	f3ef 8310 	mrs	r3, PRIMASK
 80170e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80170e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80170e6:	617b      	str	r3, [r7, #20]
 80170e8:	2301      	movs	r3, #1
 80170ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f383 8810 	msr	PRIMASK, r3
}
 80170f2:	46c0      	nop			@ (mov r8, r8)
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	681a      	ldr	r2, [r3, #0]
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	2140      	movs	r1, #64	@ 0x40
 8017100:	438a      	bics	r2, r1
 8017102:	601a      	str	r2, [r3, #0]
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017108:	693b      	ldr	r3, [r7, #16]
 801710a:	f383 8810 	msr	PRIMASK, r3
}
 801710e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2220      	movs	r2, #32
 8017114:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2200      	movs	r2, #0
 801711a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	228c      	movs	r2, #140	@ 0x8c
 8017120:	589b      	ldr	r3, [r3, r2]
 8017122:	687a      	ldr	r2, [r7, #4]
 8017124:	0010      	movs	r0, r2
 8017126:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017128:	46c0      	nop			@ (mov r8, r8)
 801712a:	46bd      	mov	sp, r7
 801712c:	b006      	add	sp, #24
 801712e:	bd80      	pop	{r7, pc}

08017130 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b094      	sub	sp, #80	@ 0x50
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017138:	204e      	movs	r0, #78	@ 0x4e
 801713a:	183b      	adds	r3, r7, r0
 801713c:	687a      	ldr	r2, [r7, #4]
 801713e:	215c      	movs	r1, #92	@ 0x5c
 8017140:	5a52      	ldrh	r2, [r2, r1]
 8017142:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	2280      	movs	r2, #128	@ 0x80
 8017148:	589b      	ldr	r3, [r3, r2]
 801714a:	2b22      	cmp	r3, #34	@ 0x22
 801714c:	d000      	beq.n	8017150 <UART_RxISR_8BIT+0x20>
 801714e:	e0c2      	b.n	80172d6 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017156:	214c      	movs	r1, #76	@ 0x4c
 8017158:	187b      	adds	r3, r7, r1
 801715a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801715c:	187b      	adds	r3, r7, r1
 801715e:	881b      	ldrh	r3, [r3, #0]
 8017160:	b2da      	uxtb	r2, r3
 8017162:	183b      	adds	r3, r7, r0
 8017164:	881b      	ldrh	r3, [r3, #0]
 8017166:	b2d9      	uxtb	r1, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801716c:	400a      	ands	r2, r1
 801716e:	b2d2      	uxtb	r2, r2
 8017170:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017176:	1c5a      	adds	r2, r3, #1
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	225a      	movs	r2, #90	@ 0x5a
 8017180:	5a9b      	ldrh	r3, [r3, r2]
 8017182:	b29b      	uxth	r3, r3
 8017184:	3b01      	subs	r3, #1
 8017186:	b299      	uxth	r1, r3
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	225a      	movs	r2, #90	@ 0x5a
 801718c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	225a      	movs	r2, #90	@ 0x5a
 8017192:	5a9b      	ldrh	r3, [r3, r2]
 8017194:	b29b      	uxth	r3, r3
 8017196:	2b00      	cmp	r3, #0
 8017198:	d000      	beq.n	801719c <UART_RxISR_8BIT+0x6c>
 801719a:	e0a4      	b.n	80172e6 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801719c:	f3ef 8310 	mrs	r3, PRIMASK
 80171a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80171a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80171a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80171a6:	2301      	movs	r3, #1
 80171a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171ac:	f383 8810 	msr	PRIMASK, r3
}
 80171b0:	46c0      	nop			@ (mov r8, r8)
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	681a      	ldr	r2, [r3, #0]
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	494c      	ldr	r1, [pc, #304]	@ (80172f0 <UART_RxISR_8BIT+0x1c0>)
 80171be:	400a      	ands	r2, r1
 80171c0:	601a      	str	r2, [r3, #0]
 80171c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171c8:	f383 8810 	msr	PRIMASK, r3
}
 80171cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80171ce:	f3ef 8310 	mrs	r3, PRIMASK
 80171d2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80171d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80171d8:	2301      	movs	r3, #1
 80171da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171de:	f383 8810 	msr	PRIMASK, r3
}
 80171e2:	46c0      	nop			@ (mov r8, r8)
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	689a      	ldr	r2, [r3, #8]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	2101      	movs	r1, #1
 80171f0:	438a      	bics	r2, r1
 80171f2:	609a      	str	r2, [r3, #8]
 80171f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80171fa:	f383 8810 	msr	PRIMASK, r3
}
 80171fe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2280      	movs	r2, #128	@ 0x80
 8017204:	2120      	movs	r1, #32
 8017206:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2200      	movs	r2, #0
 801720c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2200      	movs	r2, #0
 8017212:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	4a36      	ldr	r2, [pc, #216]	@ (80172f4 <UART_RxISR_8BIT+0x1c4>)
 801721a:	4293      	cmp	r3, r2
 801721c:	d01f      	beq.n	801725e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	685a      	ldr	r2, [r3, #4]
 8017224:	2380      	movs	r3, #128	@ 0x80
 8017226:	041b      	lsls	r3, r3, #16
 8017228:	4013      	ands	r3, r2
 801722a:	d018      	beq.n	801725e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801722c:	f3ef 8310 	mrs	r3, PRIMASK
 8017230:	61bb      	str	r3, [r7, #24]
  return(result);
 8017232:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017234:	643b      	str	r3, [r7, #64]	@ 0x40
 8017236:	2301      	movs	r3, #1
 8017238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801723a:	69fb      	ldr	r3, [r7, #28]
 801723c:	f383 8810 	msr	PRIMASK, r3
}
 8017240:	46c0      	nop			@ (mov r8, r8)
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	492a      	ldr	r1, [pc, #168]	@ (80172f8 <UART_RxISR_8BIT+0x1c8>)
 801724e:	400a      	ands	r2, r1
 8017250:	601a      	str	r2, [r3, #0]
 8017252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017256:	6a3b      	ldr	r3, [r7, #32]
 8017258:	f383 8810 	msr	PRIMASK, r3
}
 801725c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017262:	2b01      	cmp	r3, #1
 8017264:	d130      	bne.n	80172c8 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	2200      	movs	r2, #0
 801726a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801726c:	f3ef 8310 	mrs	r3, PRIMASK
 8017270:	60fb      	str	r3, [r7, #12]
  return(result);
 8017272:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017276:	2301      	movs	r3, #1
 8017278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	f383 8810 	msr	PRIMASK, r3
}
 8017280:	46c0      	nop			@ (mov r8, r8)
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	681a      	ldr	r2, [r3, #0]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	2110      	movs	r1, #16
 801728e:	438a      	bics	r2, r1
 8017290:	601a      	str	r2, [r3, #0]
 8017292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017296:	697b      	ldr	r3, [r7, #20]
 8017298:	f383 8810 	msr	PRIMASK, r3
}
 801729c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	69db      	ldr	r3, [r3, #28]
 80172a4:	2210      	movs	r2, #16
 80172a6:	4013      	ands	r3, r2
 80172a8:	2b10      	cmp	r3, #16
 80172aa:	d103      	bne.n	80172b4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	2210      	movs	r2, #16
 80172b2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	22ac      	movs	r2, #172	@ 0xac
 80172b8:	589b      	ldr	r3, [r3, r2]
 80172ba:	687a      	ldr	r2, [r7, #4]
 80172bc:	2158      	movs	r1, #88	@ 0x58
 80172be:	5a51      	ldrh	r1, [r2, r1]
 80172c0:	687a      	ldr	r2, [r7, #4]
 80172c2:	0010      	movs	r0, r2
 80172c4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80172c6:	e00e      	b.n	80172e6 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	2294      	movs	r2, #148	@ 0x94
 80172cc:	589b      	ldr	r3, [r3, r2]
 80172ce:	687a      	ldr	r2, [r7, #4]
 80172d0:	0010      	movs	r0, r2
 80172d2:	4798      	blx	r3
}
 80172d4:	e007      	b.n	80172e6 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	699a      	ldr	r2, [r3, #24]
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	2108      	movs	r1, #8
 80172e2:	430a      	orrs	r2, r1
 80172e4:	619a      	str	r2, [r3, #24]
}
 80172e6:	46c0      	nop			@ (mov r8, r8)
 80172e8:	46bd      	mov	sp, r7
 80172ea:	b014      	add	sp, #80	@ 0x50
 80172ec:	bd80      	pop	{r7, pc}
 80172ee:	46c0      	nop			@ (mov r8, r8)
 80172f0:	fffffedf 	.word	0xfffffedf
 80172f4:	40004800 	.word	0x40004800
 80172f8:	fbffffff 	.word	0xfbffffff

080172fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b094      	sub	sp, #80	@ 0x50
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017304:	204e      	movs	r0, #78	@ 0x4e
 8017306:	183b      	adds	r3, r7, r0
 8017308:	687a      	ldr	r2, [r7, #4]
 801730a:	215c      	movs	r1, #92	@ 0x5c
 801730c:	5a52      	ldrh	r2, [r2, r1]
 801730e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	2280      	movs	r2, #128	@ 0x80
 8017314:	589b      	ldr	r3, [r3, r2]
 8017316:	2b22      	cmp	r3, #34	@ 0x22
 8017318:	d000      	beq.n	801731c <UART_RxISR_16BIT+0x20>
 801731a:	e0c2      	b.n	80174a2 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017322:	214c      	movs	r1, #76	@ 0x4c
 8017324:	187b      	adds	r3, r7, r1
 8017326:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801732c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801732e:	187b      	adds	r3, r7, r1
 8017330:	183a      	adds	r2, r7, r0
 8017332:	881b      	ldrh	r3, [r3, #0]
 8017334:	8812      	ldrh	r2, [r2, #0]
 8017336:	4013      	ands	r3, r2
 8017338:	b29a      	uxth	r2, r3
 801733a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801733c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017342:	1c9a      	adds	r2, r3, #2
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	225a      	movs	r2, #90	@ 0x5a
 801734c:	5a9b      	ldrh	r3, [r3, r2]
 801734e:	b29b      	uxth	r3, r3
 8017350:	3b01      	subs	r3, #1
 8017352:	b299      	uxth	r1, r3
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	225a      	movs	r2, #90	@ 0x5a
 8017358:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	225a      	movs	r2, #90	@ 0x5a
 801735e:	5a9b      	ldrh	r3, [r3, r2]
 8017360:	b29b      	uxth	r3, r3
 8017362:	2b00      	cmp	r3, #0
 8017364:	d000      	beq.n	8017368 <UART_RxISR_16BIT+0x6c>
 8017366:	e0a4      	b.n	80174b2 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017368:	f3ef 8310 	mrs	r3, PRIMASK
 801736c:	623b      	str	r3, [r7, #32]
  return(result);
 801736e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017370:	647b      	str	r3, [r7, #68]	@ 0x44
 8017372:	2301      	movs	r3, #1
 8017374:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017378:	f383 8810 	msr	PRIMASK, r3
}
 801737c:	46c0      	nop			@ (mov r8, r8)
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	494c      	ldr	r1, [pc, #304]	@ (80174bc <UART_RxISR_16BIT+0x1c0>)
 801738a:	400a      	ands	r2, r1
 801738c:	601a      	str	r2, [r3, #0]
 801738e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017390:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017394:	f383 8810 	msr	PRIMASK, r3
}
 8017398:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801739a:	f3ef 8310 	mrs	r3, PRIMASK
 801739e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80173a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80173a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80173a4:	2301      	movs	r3, #1
 80173a6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173aa:	f383 8810 	msr	PRIMASK, r3
}
 80173ae:	46c0      	nop			@ (mov r8, r8)
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	689a      	ldr	r2, [r3, #8]
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	2101      	movs	r1, #1
 80173bc:	438a      	bics	r2, r1
 80173be:	609a      	str	r2, [r3, #8]
 80173c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80173c2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173c6:	f383 8810 	msr	PRIMASK, r3
}
 80173ca:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2280      	movs	r2, #128	@ 0x80
 80173d0:	2120      	movs	r1, #32
 80173d2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	2200      	movs	r2, #0
 80173d8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	2200      	movs	r2, #0
 80173de:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	4a36      	ldr	r2, [pc, #216]	@ (80174c0 <UART_RxISR_16BIT+0x1c4>)
 80173e6:	4293      	cmp	r3, r2
 80173e8:	d01f      	beq.n	801742a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	685a      	ldr	r2, [r3, #4]
 80173f0:	2380      	movs	r3, #128	@ 0x80
 80173f2:	041b      	lsls	r3, r3, #16
 80173f4:	4013      	ands	r3, r2
 80173f6:	d018      	beq.n	801742a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173f8:	f3ef 8310 	mrs	r3, PRIMASK
 80173fc:	617b      	str	r3, [r7, #20]
  return(result);
 80173fe:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017402:	2301      	movs	r3, #1
 8017404:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017406:	69bb      	ldr	r3, [r7, #24]
 8017408:	f383 8810 	msr	PRIMASK, r3
}
 801740c:	46c0      	nop			@ (mov r8, r8)
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	681a      	ldr	r2, [r3, #0]
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	492a      	ldr	r1, [pc, #168]	@ (80174c4 <UART_RxISR_16BIT+0x1c8>)
 801741a:	400a      	ands	r2, r1
 801741c:	601a      	str	r2, [r3, #0]
 801741e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	f383 8810 	msr	PRIMASK, r3
}
 8017428:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801742e:	2b01      	cmp	r3, #1
 8017430:	d130      	bne.n	8017494 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2200      	movs	r2, #0
 8017436:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017438:	f3ef 8310 	mrs	r3, PRIMASK
 801743c:	60bb      	str	r3, [r7, #8]
  return(result);
 801743e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017440:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017442:	2301      	movs	r3, #1
 8017444:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	f383 8810 	msr	PRIMASK, r3
}
 801744c:	46c0      	nop			@ (mov r8, r8)
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	681a      	ldr	r2, [r3, #0]
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2110      	movs	r1, #16
 801745a:	438a      	bics	r2, r1
 801745c:	601a      	str	r2, [r3, #0]
 801745e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	f383 8810 	msr	PRIMASK, r3
}
 8017468:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	69db      	ldr	r3, [r3, #28]
 8017470:	2210      	movs	r2, #16
 8017472:	4013      	ands	r3, r2
 8017474:	2b10      	cmp	r3, #16
 8017476:	d103      	bne.n	8017480 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	2210      	movs	r2, #16
 801747e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	22ac      	movs	r2, #172	@ 0xac
 8017484:	589b      	ldr	r3, [r3, r2]
 8017486:	687a      	ldr	r2, [r7, #4]
 8017488:	2158      	movs	r1, #88	@ 0x58
 801748a:	5a51      	ldrh	r1, [r2, r1]
 801748c:	687a      	ldr	r2, [r7, #4]
 801748e:	0010      	movs	r0, r2
 8017490:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017492:	e00e      	b.n	80174b2 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2294      	movs	r2, #148	@ 0x94
 8017498:	589b      	ldr	r3, [r3, r2]
 801749a:	687a      	ldr	r2, [r7, #4]
 801749c:	0010      	movs	r0, r2
 801749e:	4798      	blx	r3
}
 80174a0:	e007      	b.n	80174b2 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	699a      	ldr	r2, [r3, #24]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	2108      	movs	r1, #8
 80174ae:	430a      	orrs	r2, r1
 80174b0:	619a      	str	r2, [r3, #24]
}
 80174b2:	46c0      	nop			@ (mov r8, r8)
 80174b4:	46bd      	mov	sp, r7
 80174b6:	b014      	add	sp, #80	@ 0x50
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	46c0      	nop			@ (mov r8, r8)
 80174bc:	fffffedf 	.word	0xfffffedf
 80174c0:	40004800 	.word	0x40004800
 80174c4:	fbffffff 	.word	0xfbffffff

080174c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80174c8:	b580      	push	{r7, lr}
 80174ca:	b082      	sub	sp, #8
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80174d0:	46c0      	nop			@ (mov r8, r8)
 80174d2:	46bd      	mov	sp, r7
 80174d4:	b002      	add	sp, #8
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b084      	sub	sp, #16
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	2244      	movs	r2, #68	@ 0x44
 80174e4:	2100      	movs	r1, #0
 80174e6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80174e8:	4b05      	ldr	r3, [pc, #20]	@ (8017500 <USB_EnableGlobalInt+0x28>)
 80174ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	b299      	uxth	r1, r3
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2240      	movs	r2, #64	@ 0x40
 80174f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80174f6:	2300      	movs	r3, #0
}
 80174f8:	0018      	movs	r0, r3
 80174fa:	46bd      	mov	sp, r7
 80174fc:	b004      	add	sp, #16
 80174fe:	bd80      	pop	{r7, pc}
 8017500:	0000bf80 	.word	0x0000bf80

08017504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b084      	sub	sp, #16
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801750c:	4b09      	ldr	r3, [pc, #36]	@ (8017534 <USB_DisableGlobalInt+0x30>)
 801750e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2240      	movs	r2, #64	@ 0x40
 8017514:	5a9b      	ldrh	r3, [r3, r2]
 8017516:	b29b      	uxth	r3, r3
 8017518:	68fa      	ldr	r2, [r7, #12]
 801751a:	b292      	uxth	r2, r2
 801751c:	43d2      	mvns	r2, r2
 801751e:	b292      	uxth	r2, r2
 8017520:	4013      	ands	r3, r2
 8017522:	b299      	uxth	r1, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2240      	movs	r2, #64	@ 0x40
 8017528:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801752a:	2300      	movs	r3, #0
}
 801752c:	0018      	movs	r0, r3
 801752e:	46bd      	mov	sp, r7
 8017530:	b004      	add	sp, #16
 8017532:	bd80      	pop	{r7, pc}
 8017534:	0000bf80 	.word	0x0000bf80

08017538 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8017538:	b084      	sub	sp, #16
 801753a:	b590      	push	{r4, r7, lr}
 801753c:	b083      	sub	sp, #12
 801753e:	af00      	add	r7, sp, #0
 8017540:	6078      	str	r0, [r7, #4]
 8017542:	2004      	movs	r0, #4
 8017544:	2410      	movs	r4, #16
 8017546:	1900      	adds	r0, r0, r4
 8017548:	2408      	movs	r4, #8
 801754a:	46a4      	mov	ip, r4
 801754c:	44bc      	add	ip, r7
 801754e:	4460      	add	r0, ip
 8017550:	6001      	str	r1, [r0, #0]
 8017552:	6042      	str	r2, [r0, #4]
 8017554:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2240      	movs	r2, #64	@ 0x40
 801755a:	2101      	movs	r1, #1
 801755c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2240      	movs	r2, #64	@ 0x40
 8017562:	2100      	movs	r1, #0
 8017564:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	2244      	movs	r2, #68	@ 0x44
 801756a:	2100      	movs	r1, #0
 801756c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	2250      	movs	r2, #80	@ 0x50
 8017572:	2100      	movs	r1, #0
 8017574:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017576:	2300      	movs	r3, #0
}
 8017578:	0018      	movs	r0, r3
 801757a:	46bd      	mov	sp, r7
 801757c:	b003      	add	sp, #12
 801757e:	bc90      	pop	{r4, r7}
 8017580:	bc08      	pop	{r3}
 8017582:	b004      	add	sp, #16
 8017584:	4718      	bx	r3
	...

08017588 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b09c      	sub	sp, #112	@ 0x70
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8017592:	236f      	movs	r3, #111	@ 0x6f
 8017594:	18fb      	adds	r3, r7, r3
 8017596:	2200      	movs	r2, #0
 8017598:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	009b      	lsls	r3, r3, #2
 80175a2:	18d3      	adds	r3, r2, r3
 80175a4:	881b      	ldrh	r3, [r3, #0]
 80175a6:	b29a      	uxth	r2, r3
 80175a8:	236c      	movs	r3, #108	@ 0x6c
 80175aa:	18fb      	adds	r3, r7, r3
 80175ac:	49a3      	ldr	r1, [pc, #652]	@ (801783c <USB_ActivateEndpoint+0x2b4>)
 80175ae:	400a      	ands	r2, r1
 80175b0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	78db      	ldrb	r3, [r3, #3]
 80175b6:	2b03      	cmp	r3, #3
 80175b8:	d017      	beq.n	80175ea <USB_ActivateEndpoint+0x62>
 80175ba:	dc28      	bgt.n	801760e <USB_ActivateEndpoint+0x86>
 80175bc:	2b02      	cmp	r3, #2
 80175be:	d00e      	beq.n	80175de <USB_ActivateEndpoint+0x56>
 80175c0:	dc25      	bgt.n	801760e <USB_ActivateEndpoint+0x86>
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d002      	beq.n	80175cc <USB_ActivateEndpoint+0x44>
 80175c6:	2b01      	cmp	r3, #1
 80175c8:	d018      	beq.n	80175fc <USB_ActivateEndpoint+0x74>
 80175ca:	e020      	b.n	801760e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80175cc:	226c      	movs	r2, #108	@ 0x6c
 80175ce:	18bb      	adds	r3, r7, r2
 80175d0:	18ba      	adds	r2, r7, r2
 80175d2:	8812      	ldrh	r2, [r2, #0]
 80175d4:	2180      	movs	r1, #128	@ 0x80
 80175d6:	0089      	lsls	r1, r1, #2
 80175d8:	430a      	orrs	r2, r1
 80175da:	801a      	strh	r2, [r3, #0]
      break;
 80175dc:	e01c      	b.n	8017618 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80175de:	226c      	movs	r2, #108	@ 0x6c
 80175e0:	18bb      	adds	r3, r7, r2
 80175e2:	18ba      	adds	r2, r7, r2
 80175e4:	8812      	ldrh	r2, [r2, #0]
 80175e6:	801a      	strh	r2, [r3, #0]
      break;
 80175e8:	e016      	b.n	8017618 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80175ea:	226c      	movs	r2, #108	@ 0x6c
 80175ec:	18bb      	adds	r3, r7, r2
 80175ee:	18ba      	adds	r2, r7, r2
 80175f0:	8812      	ldrh	r2, [r2, #0]
 80175f2:	21c0      	movs	r1, #192	@ 0xc0
 80175f4:	00c9      	lsls	r1, r1, #3
 80175f6:	430a      	orrs	r2, r1
 80175f8:	801a      	strh	r2, [r3, #0]
      break;
 80175fa:	e00d      	b.n	8017618 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80175fc:	226c      	movs	r2, #108	@ 0x6c
 80175fe:	18bb      	adds	r3, r7, r2
 8017600:	18ba      	adds	r2, r7, r2
 8017602:	8812      	ldrh	r2, [r2, #0]
 8017604:	2180      	movs	r1, #128	@ 0x80
 8017606:	00c9      	lsls	r1, r1, #3
 8017608:	430a      	orrs	r2, r1
 801760a:	801a      	strh	r2, [r3, #0]
      break;
 801760c:	e004      	b.n	8017618 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801760e:	236f      	movs	r3, #111	@ 0x6f
 8017610:	18fb      	adds	r3, r7, r3
 8017612:	2201      	movs	r2, #1
 8017614:	701a      	strb	r2, [r3, #0]
      break;
 8017616:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8017618:	687a      	ldr	r2, [r7, #4]
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	009b      	lsls	r3, r3, #2
 8017620:	18d3      	adds	r3, r2, r3
 8017622:	226c      	movs	r2, #108	@ 0x6c
 8017624:	18ba      	adds	r2, r7, r2
 8017626:	8812      	ldrh	r2, [r2, #0]
 8017628:	4985      	ldr	r1, [pc, #532]	@ (8017840 <USB_ActivateEndpoint+0x2b8>)
 801762a:	430a      	orrs	r2, r1
 801762c:	b292      	uxth	r2, r2
 801762e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	781b      	ldrb	r3, [r3, #0]
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	18d3      	adds	r3, r2, r3
 801763a:	881b      	ldrh	r3, [r3, #0]
 801763c:	b29b      	uxth	r3, r3
 801763e:	b21b      	sxth	r3, r3
 8017640:	4a80      	ldr	r2, [pc, #512]	@ (8017844 <USB_ActivateEndpoint+0x2bc>)
 8017642:	4013      	ands	r3, r2
 8017644:	b21a      	sxth	r2, r3
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	781b      	ldrb	r3, [r3, #0]
 801764a:	b21b      	sxth	r3, r3
 801764c:	4313      	orrs	r3, r2
 801764e:	b21a      	sxth	r2, r3
 8017650:	2166      	movs	r1, #102	@ 0x66
 8017652:	187b      	adds	r3, r7, r1
 8017654:	801a      	strh	r2, [r3, #0]
 8017656:	687a      	ldr	r2, [r7, #4]
 8017658:	683b      	ldr	r3, [r7, #0]
 801765a:	781b      	ldrb	r3, [r3, #0]
 801765c:	009b      	lsls	r3, r3, #2
 801765e:	18d3      	adds	r3, r2, r3
 8017660:	187a      	adds	r2, r7, r1
 8017662:	8812      	ldrh	r2, [r2, #0]
 8017664:	4976      	ldr	r1, [pc, #472]	@ (8017840 <USB_ActivateEndpoint+0x2b8>)
 8017666:	430a      	orrs	r2, r1
 8017668:	b292      	uxth	r2, r2
 801766a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	7b1b      	ldrb	r3, [r3, #12]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d000      	beq.n	8017676 <USB_ActivateEndpoint+0xee>
 8017674:	e178      	b.n	8017968 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	785b      	ldrb	r3, [r3, #1]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d100      	bne.n	8017680 <USB_ActivateEndpoint+0xf8>
 801767e:	e07a      	b.n	8017776 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	61bb      	str	r3, [r7, #24]
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2250      	movs	r2, #80	@ 0x50
 8017688:	5a9b      	ldrh	r3, [r3, r2]
 801768a:	b29b      	uxth	r3, r3
 801768c:	001a      	movs	r2, r3
 801768e:	69bb      	ldr	r3, [r7, #24]
 8017690:	189b      	adds	r3, r3, r2
 8017692:	61bb      	str	r3, [r7, #24]
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	781b      	ldrb	r3, [r3, #0]
 8017698:	00da      	lsls	r2, r3, #3
 801769a:	69bb      	ldr	r3, [r7, #24]
 801769c:	18d3      	adds	r3, r2, r3
 801769e:	2280      	movs	r2, #128	@ 0x80
 80176a0:	00d2      	lsls	r2, r2, #3
 80176a2:	4694      	mov	ip, r2
 80176a4:	4463      	add	r3, ip
 80176a6:	617b      	str	r3, [r7, #20]
 80176a8:	683b      	ldr	r3, [r7, #0]
 80176aa:	88db      	ldrh	r3, [r3, #6]
 80176ac:	085b      	lsrs	r3, r3, #1
 80176ae:	b29b      	uxth	r3, r3
 80176b0:	18db      	adds	r3, r3, r3
 80176b2:	b29a      	uxth	r2, r3
 80176b4:	697b      	ldr	r3, [r7, #20]
 80176b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80176b8:	687a      	ldr	r2, [r7, #4]
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	781b      	ldrb	r3, [r3, #0]
 80176be:	009b      	lsls	r3, r3, #2
 80176c0:	18d2      	adds	r2, r2, r3
 80176c2:	2112      	movs	r1, #18
 80176c4:	187b      	adds	r3, r7, r1
 80176c6:	8812      	ldrh	r2, [r2, #0]
 80176c8:	801a      	strh	r2, [r3, #0]
 80176ca:	187b      	adds	r3, r7, r1
 80176cc:	881b      	ldrh	r3, [r3, #0]
 80176ce:	2240      	movs	r2, #64	@ 0x40
 80176d0:	4013      	ands	r3, r2
 80176d2:	d016      	beq.n	8017702 <USB_ActivateEndpoint+0x17a>
 80176d4:	687a      	ldr	r2, [r7, #4]
 80176d6:	683b      	ldr	r3, [r7, #0]
 80176d8:	781b      	ldrb	r3, [r3, #0]
 80176da:	009b      	lsls	r3, r3, #2
 80176dc:	18d3      	adds	r3, r2, r3
 80176de:	881b      	ldrh	r3, [r3, #0]
 80176e0:	b29a      	uxth	r2, r3
 80176e2:	2010      	movs	r0, #16
 80176e4:	183b      	adds	r3, r7, r0
 80176e6:	4957      	ldr	r1, [pc, #348]	@ (8017844 <USB_ActivateEndpoint+0x2bc>)
 80176e8:	400a      	ands	r2, r1
 80176ea:	801a      	strh	r2, [r3, #0]
 80176ec:	687a      	ldr	r2, [r7, #4]
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	781b      	ldrb	r3, [r3, #0]
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	18d3      	adds	r3, r2, r3
 80176f6:	183a      	adds	r2, r7, r0
 80176f8:	8812      	ldrh	r2, [r2, #0]
 80176fa:	4953      	ldr	r1, [pc, #332]	@ (8017848 <USB_ActivateEndpoint+0x2c0>)
 80176fc:	430a      	orrs	r2, r1
 80176fe:	b292      	uxth	r2, r2
 8017700:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017702:	683b      	ldr	r3, [r7, #0]
 8017704:	78db      	ldrb	r3, [r3, #3]
 8017706:	2b01      	cmp	r3, #1
 8017708:	d01d      	beq.n	8017746 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801770a:	687a      	ldr	r2, [r7, #4]
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	781b      	ldrb	r3, [r3, #0]
 8017710:	009b      	lsls	r3, r3, #2
 8017712:	18d3      	adds	r3, r2, r3
 8017714:	881b      	ldrh	r3, [r3, #0]
 8017716:	b29a      	uxth	r2, r3
 8017718:	200c      	movs	r0, #12
 801771a:	183b      	adds	r3, r7, r0
 801771c:	494b      	ldr	r1, [pc, #300]	@ (801784c <USB_ActivateEndpoint+0x2c4>)
 801771e:	400a      	ands	r2, r1
 8017720:	801a      	strh	r2, [r3, #0]
 8017722:	183b      	adds	r3, r7, r0
 8017724:	183a      	adds	r2, r7, r0
 8017726:	8812      	ldrh	r2, [r2, #0]
 8017728:	2120      	movs	r1, #32
 801772a:	404a      	eors	r2, r1
 801772c:	801a      	strh	r2, [r3, #0]
 801772e:	687a      	ldr	r2, [r7, #4]
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	009b      	lsls	r3, r3, #2
 8017736:	18d3      	adds	r3, r2, r3
 8017738:	183a      	adds	r2, r7, r0
 801773a:	8812      	ldrh	r2, [r2, #0]
 801773c:	4940      	ldr	r1, [pc, #256]	@ (8017840 <USB_ActivateEndpoint+0x2b8>)
 801773e:	430a      	orrs	r2, r1
 8017740:	b292      	uxth	r2, r2
 8017742:	801a      	strh	r2, [r3, #0]
 8017744:	e2b4      	b.n	8017cb0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	683b      	ldr	r3, [r7, #0]
 801774a:	781b      	ldrb	r3, [r3, #0]
 801774c:	009b      	lsls	r3, r3, #2
 801774e:	18d3      	adds	r3, r2, r3
 8017750:	881b      	ldrh	r3, [r3, #0]
 8017752:	b29a      	uxth	r2, r3
 8017754:	200e      	movs	r0, #14
 8017756:	183b      	adds	r3, r7, r0
 8017758:	493c      	ldr	r1, [pc, #240]	@ (801784c <USB_ActivateEndpoint+0x2c4>)
 801775a:	400a      	ands	r2, r1
 801775c:	801a      	strh	r2, [r3, #0]
 801775e:	687a      	ldr	r2, [r7, #4]
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	009b      	lsls	r3, r3, #2
 8017766:	18d3      	adds	r3, r2, r3
 8017768:	183a      	adds	r2, r7, r0
 801776a:	8812      	ldrh	r2, [r2, #0]
 801776c:	4934      	ldr	r1, [pc, #208]	@ (8017840 <USB_ActivateEndpoint+0x2b8>)
 801776e:	430a      	orrs	r2, r1
 8017770:	b292      	uxth	r2, r2
 8017772:	801a      	strh	r2, [r3, #0]
 8017774:	e29c      	b.n	8017cb0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	633b      	str	r3, [r7, #48]	@ 0x30
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2250      	movs	r2, #80	@ 0x50
 801777e:	5a9b      	ldrh	r3, [r3, r2]
 8017780:	b29b      	uxth	r3, r3
 8017782:	001a      	movs	r2, r3
 8017784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017786:	189b      	adds	r3, r3, r2
 8017788:	633b      	str	r3, [r7, #48]	@ 0x30
 801778a:	683b      	ldr	r3, [r7, #0]
 801778c:	781b      	ldrb	r3, [r3, #0]
 801778e:	00da      	lsls	r2, r3, #3
 8017790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017792:	18d3      	adds	r3, r2, r3
 8017794:	4a2e      	ldr	r2, [pc, #184]	@ (8017850 <USB_ActivateEndpoint+0x2c8>)
 8017796:	4694      	mov	ip, r2
 8017798:	4463      	add	r3, ip
 801779a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	88db      	ldrh	r3, [r3, #6]
 80177a0:	085b      	lsrs	r3, r3, #1
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	18db      	adds	r3, r3, r3
 80177a6:	b29a      	uxth	r2, r3
 80177a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2250      	movs	r2, #80	@ 0x50
 80177b4:	5a9b      	ldrh	r3, [r3, r2]
 80177b6:	b29b      	uxth	r3, r3
 80177b8:	001a      	movs	r2, r3
 80177ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177bc:	189b      	adds	r3, r3, r2
 80177be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80177c0:	683b      	ldr	r3, [r7, #0]
 80177c2:	781b      	ldrb	r3, [r3, #0]
 80177c4:	00da      	lsls	r2, r3, #3
 80177c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177c8:	18d3      	adds	r3, r2, r3
 80177ca:	4a22      	ldr	r2, [pc, #136]	@ (8017854 <USB_ActivateEndpoint+0x2cc>)
 80177cc:	4694      	mov	ip, r2
 80177ce:	4463      	add	r3, ip
 80177d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80177d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177d4:	881b      	ldrh	r3, [r3, #0]
 80177d6:	b29b      	uxth	r3, r3
 80177d8:	059b      	lsls	r3, r3, #22
 80177da:	0d9b      	lsrs	r3, r3, #22
 80177dc:	b29a      	uxth	r2, r3
 80177de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177e0:	801a      	strh	r2, [r3, #0]
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	691b      	ldr	r3, [r3, #16]
 80177e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80177e8:	d91a      	bls.n	8017820 <USB_ActivateEndpoint+0x298>
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	691b      	ldr	r3, [r3, #16]
 80177ee:	095b      	lsrs	r3, r3, #5
 80177f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	691b      	ldr	r3, [r3, #16]
 80177f6:	221f      	movs	r2, #31
 80177f8:	4013      	ands	r3, r2
 80177fa:	d102      	bne.n	8017802 <USB_ActivateEndpoint+0x27a>
 80177fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80177fe:	3b01      	subs	r3, #1
 8017800:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017804:	881b      	ldrh	r3, [r3, #0]
 8017806:	b29a      	uxth	r2, r3
 8017808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801780a:	b29b      	uxth	r3, r3
 801780c:	029b      	lsls	r3, r3, #10
 801780e:	b29b      	uxth	r3, r3
 8017810:	4313      	orrs	r3, r2
 8017812:	b29b      	uxth	r3, r3
 8017814:	4a10      	ldr	r2, [pc, #64]	@ (8017858 <USB_ActivateEndpoint+0x2d0>)
 8017816:	4313      	orrs	r3, r2
 8017818:	b29a      	uxth	r2, r3
 801781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801781c:	801a      	strh	r2, [r3, #0]
 801781e:	e034      	b.n	801788a <USB_ActivateEndpoint+0x302>
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	691b      	ldr	r3, [r3, #16]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d119      	bne.n	801785c <USB_ActivateEndpoint+0x2d4>
 8017828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801782a:	881b      	ldrh	r3, [r3, #0]
 801782c:	b29b      	uxth	r3, r3
 801782e:	4a0a      	ldr	r2, [pc, #40]	@ (8017858 <USB_ActivateEndpoint+0x2d0>)
 8017830:	4313      	orrs	r3, r2
 8017832:	b29a      	uxth	r2, r3
 8017834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017836:	801a      	strh	r2, [r3, #0]
 8017838:	e027      	b.n	801788a <USB_ActivateEndpoint+0x302>
 801783a:	46c0      	nop			@ (mov r8, r8)
 801783c:	ffff898f 	.word	0xffff898f
 8017840:	ffff8080 	.word	0xffff8080
 8017844:	ffff8f8f 	.word	0xffff8f8f
 8017848:	ffff80c0 	.word	0xffff80c0
 801784c:	ffff8fbf 	.word	0xffff8fbf
 8017850:	00000404 	.word	0x00000404
 8017854:	00000406 	.word	0x00000406
 8017858:	ffff8000 	.word	0xffff8000
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	691b      	ldr	r3, [r3, #16]
 8017860:	085b      	lsrs	r3, r3, #1
 8017862:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	691b      	ldr	r3, [r3, #16]
 8017868:	2201      	movs	r2, #1
 801786a:	4013      	ands	r3, r2
 801786c:	d002      	beq.n	8017874 <USB_ActivateEndpoint+0x2ec>
 801786e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017870:	3301      	adds	r3, #1
 8017872:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017876:	881b      	ldrh	r3, [r3, #0]
 8017878:	b29a      	uxth	r2, r3
 801787a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801787c:	b29b      	uxth	r3, r3
 801787e:	029b      	lsls	r3, r3, #10
 8017880:	b29b      	uxth	r3, r3
 8017882:	4313      	orrs	r3, r2
 8017884:	b29a      	uxth	r2, r3
 8017886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017888:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801788a:	687a      	ldr	r2, [r7, #4]
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	781b      	ldrb	r3, [r3, #0]
 8017890:	009b      	lsls	r3, r3, #2
 8017892:	18d2      	adds	r2, r2, r3
 8017894:	2122      	movs	r1, #34	@ 0x22
 8017896:	187b      	adds	r3, r7, r1
 8017898:	8812      	ldrh	r2, [r2, #0]
 801789a:	801a      	strh	r2, [r3, #0]
 801789c:	187b      	adds	r3, r7, r1
 801789e:	881a      	ldrh	r2, [r3, #0]
 80178a0:	2380      	movs	r3, #128	@ 0x80
 80178a2:	01db      	lsls	r3, r3, #7
 80178a4:	4013      	ands	r3, r2
 80178a6:	d016      	beq.n	80178d6 <USB_ActivateEndpoint+0x34e>
 80178a8:	687a      	ldr	r2, [r7, #4]
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	781b      	ldrb	r3, [r3, #0]
 80178ae:	009b      	lsls	r3, r3, #2
 80178b0:	18d3      	adds	r3, r2, r3
 80178b2:	881b      	ldrh	r3, [r3, #0]
 80178b4:	b29a      	uxth	r2, r3
 80178b6:	2020      	movs	r0, #32
 80178b8:	183b      	adds	r3, r7, r0
 80178ba:	49dd      	ldr	r1, [pc, #884]	@ (8017c30 <USB_ActivateEndpoint+0x6a8>)
 80178bc:	400a      	ands	r2, r1
 80178be:	801a      	strh	r2, [r3, #0]
 80178c0:	687a      	ldr	r2, [r7, #4]
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	009b      	lsls	r3, r3, #2
 80178c8:	18d3      	adds	r3, r2, r3
 80178ca:	183a      	adds	r2, r7, r0
 80178cc:	8812      	ldrh	r2, [r2, #0]
 80178ce:	49d9      	ldr	r1, [pc, #868]	@ (8017c34 <USB_ActivateEndpoint+0x6ac>)
 80178d0:	430a      	orrs	r2, r1
 80178d2:	b292      	uxth	r2, r2
 80178d4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d125      	bne.n	801792a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80178de:	687a      	ldr	r2, [r7, #4]
 80178e0:	683b      	ldr	r3, [r7, #0]
 80178e2:	781b      	ldrb	r3, [r3, #0]
 80178e4:	009b      	lsls	r3, r3, #2
 80178e6:	18d3      	adds	r3, r2, r3
 80178e8:	881b      	ldrh	r3, [r3, #0]
 80178ea:	b29a      	uxth	r2, r3
 80178ec:	201c      	movs	r0, #28
 80178ee:	183b      	adds	r3, r7, r0
 80178f0:	49d1      	ldr	r1, [pc, #836]	@ (8017c38 <USB_ActivateEndpoint+0x6b0>)
 80178f2:	400a      	ands	r2, r1
 80178f4:	801a      	strh	r2, [r3, #0]
 80178f6:	183b      	adds	r3, r7, r0
 80178f8:	183a      	adds	r2, r7, r0
 80178fa:	8812      	ldrh	r2, [r2, #0]
 80178fc:	2180      	movs	r1, #128	@ 0x80
 80178fe:	0149      	lsls	r1, r1, #5
 8017900:	404a      	eors	r2, r1
 8017902:	801a      	strh	r2, [r3, #0]
 8017904:	183b      	adds	r3, r7, r0
 8017906:	183a      	adds	r2, r7, r0
 8017908:	8812      	ldrh	r2, [r2, #0]
 801790a:	2180      	movs	r1, #128	@ 0x80
 801790c:	0189      	lsls	r1, r1, #6
 801790e:	404a      	eors	r2, r1
 8017910:	801a      	strh	r2, [r3, #0]
 8017912:	687a      	ldr	r2, [r7, #4]
 8017914:	683b      	ldr	r3, [r7, #0]
 8017916:	781b      	ldrb	r3, [r3, #0]
 8017918:	009b      	lsls	r3, r3, #2
 801791a:	18d3      	adds	r3, r2, r3
 801791c:	183a      	adds	r2, r7, r0
 801791e:	8812      	ldrh	r2, [r2, #0]
 8017920:	49c6      	ldr	r1, [pc, #792]	@ (8017c3c <USB_ActivateEndpoint+0x6b4>)
 8017922:	430a      	orrs	r2, r1
 8017924:	b292      	uxth	r2, r2
 8017926:	801a      	strh	r2, [r3, #0]
 8017928:	e1c2      	b.n	8017cb0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	781b      	ldrb	r3, [r3, #0]
 8017930:	009b      	lsls	r3, r3, #2
 8017932:	18d3      	adds	r3, r2, r3
 8017934:	881b      	ldrh	r3, [r3, #0]
 8017936:	b29a      	uxth	r2, r3
 8017938:	201e      	movs	r0, #30
 801793a:	183b      	adds	r3, r7, r0
 801793c:	49be      	ldr	r1, [pc, #760]	@ (8017c38 <USB_ActivateEndpoint+0x6b0>)
 801793e:	400a      	ands	r2, r1
 8017940:	801a      	strh	r2, [r3, #0]
 8017942:	183b      	adds	r3, r7, r0
 8017944:	183a      	adds	r2, r7, r0
 8017946:	8812      	ldrh	r2, [r2, #0]
 8017948:	2180      	movs	r1, #128	@ 0x80
 801794a:	0189      	lsls	r1, r1, #6
 801794c:	404a      	eors	r2, r1
 801794e:	801a      	strh	r2, [r3, #0]
 8017950:	687a      	ldr	r2, [r7, #4]
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	009b      	lsls	r3, r3, #2
 8017958:	18d3      	adds	r3, r2, r3
 801795a:	183a      	adds	r2, r7, r0
 801795c:	8812      	ldrh	r2, [r2, #0]
 801795e:	49b7      	ldr	r1, [pc, #732]	@ (8017c3c <USB_ActivateEndpoint+0x6b4>)
 8017960:	430a      	orrs	r2, r1
 8017962:	b292      	uxth	r2, r2
 8017964:	801a      	strh	r2, [r3, #0]
 8017966:	e1a3      	b.n	8017cb0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	78db      	ldrb	r3, [r3, #3]
 801796c:	2b02      	cmp	r3, #2
 801796e:	d117      	bne.n	80179a0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8017970:	687a      	ldr	r2, [r7, #4]
 8017972:	683b      	ldr	r3, [r7, #0]
 8017974:	781b      	ldrb	r3, [r3, #0]
 8017976:	009b      	lsls	r3, r3, #2
 8017978:	18d3      	adds	r3, r2, r3
 801797a:	881b      	ldrh	r3, [r3, #0]
 801797c:	b29a      	uxth	r2, r3
 801797e:	2062      	movs	r0, #98	@ 0x62
 8017980:	183b      	adds	r3, r7, r0
 8017982:	49ab      	ldr	r1, [pc, #684]	@ (8017c30 <USB_ActivateEndpoint+0x6a8>)
 8017984:	400a      	ands	r2, r1
 8017986:	801a      	strh	r2, [r3, #0]
 8017988:	687a      	ldr	r2, [r7, #4]
 801798a:	683b      	ldr	r3, [r7, #0]
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	009b      	lsls	r3, r3, #2
 8017990:	18d3      	adds	r3, r2, r3
 8017992:	183a      	adds	r2, r7, r0
 8017994:	8812      	ldrh	r2, [r2, #0]
 8017996:	49aa      	ldr	r1, [pc, #680]	@ (8017c40 <USB_ActivateEndpoint+0x6b8>)
 8017998:	430a      	orrs	r2, r1
 801799a:	b292      	uxth	r2, r2
 801799c:	801a      	strh	r2, [r3, #0]
 801799e:	e016      	b.n	80179ce <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80179a0:	687a      	ldr	r2, [r7, #4]
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	781b      	ldrb	r3, [r3, #0]
 80179a6:	009b      	lsls	r3, r3, #2
 80179a8:	18d3      	adds	r3, r2, r3
 80179aa:	881b      	ldrh	r3, [r3, #0]
 80179ac:	b29a      	uxth	r2, r3
 80179ae:	2064      	movs	r0, #100	@ 0x64
 80179b0:	183b      	adds	r3, r7, r0
 80179b2:	49a4      	ldr	r1, [pc, #656]	@ (8017c44 <USB_ActivateEndpoint+0x6bc>)
 80179b4:	400a      	ands	r2, r1
 80179b6:	801a      	strh	r2, [r3, #0]
 80179b8:	687a      	ldr	r2, [r7, #4]
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	781b      	ldrb	r3, [r3, #0]
 80179be:	009b      	lsls	r3, r3, #2
 80179c0:	18d3      	adds	r3, r2, r3
 80179c2:	183a      	adds	r2, r7, r0
 80179c4:	8812      	ldrh	r2, [r2, #0]
 80179c6:	499d      	ldr	r1, [pc, #628]	@ (8017c3c <USB_ActivateEndpoint+0x6b4>)
 80179c8:	430a      	orrs	r2, r1
 80179ca:	b292      	uxth	r2, r2
 80179cc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2250      	movs	r2, #80	@ 0x50
 80179d6:	5a9b      	ldrh	r3, [r3, r2]
 80179d8:	b29b      	uxth	r3, r3
 80179da:	001a      	movs	r2, r3
 80179dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80179de:	189b      	adds	r3, r3, r2
 80179e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80179e2:	683b      	ldr	r3, [r7, #0]
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	00da      	lsls	r2, r3, #3
 80179e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80179ea:	18d3      	adds	r3, r2, r3
 80179ec:	2280      	movs	r2, #128	@ 0x80
 80179ee:	00d2      	lsls	r2, r2, #3
 80179f0:	4694      	mov	ip, r2
 80179f2:	4463      	add	r3, ip
 80179f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	891b      	ldrh	r3, [r3, #8]
 80179fa:	085b      	lsrs	r3, r3, #1
 80179fc:	b29b      	uxth	r3, r3
 80179fe:	18db      	adds	r3, r3, r3
 8017a00:	b29a      	uxth	r2, r3
 8017a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017a04:	801a      	strh	r2, [r3, #0]
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2250      	movs	r2, #80	@ 0x50
 8017a0e:	5a9b      	ldrh	r3, [r3, r2]
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	001a      	movs	r2, r3
 8017a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a16:	189b      	adds	r3, r3, r2
 8017a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	781b      	ldrb	r3, [r3, #0]
 8017a1e:	00da      	lsls	r2, r3, #3
 8017a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a22:	18d3      	adds	r3, r2, r3
 8017a24:	4a88      	ldr	r2, [pc, #544]	@ (8017c48 <USB_ActivateEndpoint+0x6c0>)
 8017a26:	4694      	mov	ip, r2
 8017a28:	4463      	add	r3, ip
 8017a2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8017a2c:	683b      	ldr	r3, [r7, #0]
 8017a2e:	895b      	ldrh	r3, [r3, #10]
 8017a30:	085b      	lsrs	r3, r3, #1
 8017a32:	b29b      	uxth	r3, r3
 8017a34:	18db      	adds	r3, r3, r3
 8017a36:	b29a      	uxth	r2, r3
 8017a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a3a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8017a3c:	683b      	ldr	r3, [r7, #0]
 8017a3e:	785b      	ldrb	r3, [r3, #1]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d000      	beq.n	8017a46 <USB_ActivateEndpoint+0x4be>
 8017a44:	e087      	b.n	8017b56 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017a46:	687a      	ldr	r2, [r7, #4]
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	781b      	ldrb	r3, [r3, #0]
 8017a4c:	009b      	lsls	r3, r3, #2
 8017a4e:	18d2      	adds	r2, r2, r3
 8017a50:	2140      	movs	r1, #64	@ 0x40
 8017a52:	187b      	adds	r3, r7, r1
 8017a54:	8812      	ldrh	r2, [r2, #0]
 8017a56:	801a      	strh	r2, [r3, #0]
 8017a58:	187b      	adds	r3, r7, r1
 8017a5a:	881a      	ldrh	r2, [r3, #0]
 8017a5c:	2380      	movs	r3, #128	@ 0x80
 8017a5e:	01db      	lsls	r3, r3, #7
 8017a60:	4013      	ands	r3, r2
 8017a62:	d016      	beq.n	8017a92 <USB_ActivateEndpoint+0x50a>
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	009b      	lsls	r3, r3, #2
 8017a6c:	18d3      	adds	r3, r2, r3
 8017a6e:	881b      	ldrh	r3, [r3, #0]
 8017a70:	b29a      	uxth	r2, r3
 8017a72:	203e      	movs	r0, #62	@ 0x3e
 8017a74:	183b      	adds	r3, r7, r0
 8017a76:	496e      	ldr	r1, [pc, #440]	@ (8017c30 <USB_ActivateEndpoint+0x6a8>)
 8017a78:	400a      	ands	r2, r1
 8017a7a:	801a      	strh	r2, [r3, #0]
 8017a7c:	687a      	ldr	r2, [r7, #4]
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	781b      	ldrb	r3, [r3, #0]
 8017a82:	009b      	lsls	r3, r3, #2
 8017a84:	18d3      	adds	r3, r2, r3
 8017a86:	183a      	adds	r2, r7, r0
 8017a88:	8812      	ldrh	r2, [r2, #0]
 8017a8a:	496a      	ldr	r1, [pc, #424]	@ (8017c34 <USB_ActivateEndpoint+0x6ac>)
 8017a8c:	430a      	orrs	r2, r1
 8017a8e:	b292      	uxth	r2, r2
 8017a90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017a92:	687a      	ldr	r2, [r7, #4]
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	009b      	lsls	r3, r3, #2
 8017a9a:	18d2      	adds	r2, r2, r3
 8017a9c:	213c      	movs	r1, #60	@ 0x3c
 8017a9e:	187b      	adds	r3, r7, r1
 8017aa0:	8812      	ldrh	r2, [r2, #0]
 8017aa2:	801a      	strh	r2, [r3, #0]
 8017aa4:	187b      	adds	r3, r7, r1
 8017aa6:	881b      	ldrh	r3, [r3, #0]
 8017aa8:	2240      	movs	r2, #64	@ 0x40
 8017aaa:	4013      	ands	r3, r2
 8017aac:	d016      	beq.n	8017adc <USB_ActivateEndpoint+0x554>
 8017aae:	687a      	ldr	r2, [r7, #4]
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	781b      	ldrb	r3, [r3, #0]
 8017ab4:	009b      	lsls	r3, r3, #2
 8017ab6:	18d3      	adds	r3, r2, r3
 8017ab8:	881b      	ldrh	r3, [r3, #0]
 8017aba:	b29a      	uxth	r2, r3
 8017abc:	203a      	movs	r0, #58	@ 0x3a
 8017abe:	183b      	adds	r3, r7, r0
 8017ac0:	495b      	ldr	r1, [pc, #364]	@ (8017c30 <USB_ActivateEndpoint+0x6a8>)
 8017ac2:	400a      	ands	r2, r1
 8017ac4:	801a      	strh	r2, [r3, #0]
 8017ac6:	687a      	ldr	r2, [r7, #4]
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	009b      	lsls	r3, r3, #2
 8017ace:	18d3      	adds	r3, r2, r3
 8017ad0:	183a      	adds	r2, r7, r0
 8017ad2:	8812      	ldrh	r2, [r2, #0]
 8017ad4:	495d      	ldr	r1, [pc, #372]	@ (8017c4c <USB_ActivateEndpoint+0x6c4>)
 8017ad6:	430a      	orrs	r2, r1
 8017ad8:	b292      	uxth	r2, r2
 8017ada:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8017adc:	687a      	ldr	r2, [r7, #4]
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	781b      	ldrb	r3, [r3, #0]
 8017ae2:	009b      	lsls	r3, r3, #2
 8017ae4:	18d3      	adds	r3, r2, r3
 8017ae6:	881b      	ldrh	r3, [r3, #0]
 8017ae8:	b29a      	uxth	r2, r3
 8017aea:	2038      	movs	r0, #56	@ 0x38
 8017aec:	183b      	adds	r3, r7, r0
 8017aee:	4952      	ldr	r1, [pc, #328]	@ (8017c38 <USB_ActivateEndpoint+0x6b0>)
 8017af0:	400a      	ands	r2, r1
 8017af2:	801a      	strh	r2, [r3, #0]
 8017af4:	183b      	adds	r3, r7, r0
 8017af6:	183a      	adds	r2, r7, r0
 8017af8:	8812      	ldrh	r2, [r2, #0]
 8017afa:	2180      	movs	r1, #128	@ 0x80
 8017afc:	0149      	lsls	r1, r1, #5
 8017afe:	404a      	eors	r2, r1
 8017b00:	801a      	strh	r2, [r3, #0]
 8017b02:	183b      	adds	r3, r7, r0
 8017b04:	183a      	adds	r2, r7, r0
 8017b06:	8812      	ldrh	r2, [r2, #0]
 8017b08:	2180      	movs	r1, #128	@ 0x80
 8017b0a:	0189      	lsls	r1, r1, #6
 8017b0c:	404a      	eors	r2, r1
 8017b0e:	801a      	strh	r2, [r3, #0]
 8017b10:	687a      	ldr	r2, [r7, #4]
 8017b12:	683b      	ldr	r3, [r7, #0]
 8017b14:	781b      	ldrb	r3, [r3, #0]
 8017b16:	009b      	lsls	r3, r3, #2
 8017b18:	18d3      	adds	r3, r2, r3
 8017b1a:	183a      	adds	r2, r7, r0
 8017b1c:	8812      	ldrh	r2, [r2, #0]
 8017b1e:	4947      	ldr	r1, [pc, #284]	@ (8017c3c <USB_ActivateEndpoint+0x6b4>)
 8017b20:	430a      	orrs	r2, r1
 8017b22:	b292      	uxth	r2, r2
 8017b24:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017b26:	687a      	ldr	r2, [r7, #4]
 8017b28:	683b      	ldr	r3, [r7, #0]
 8017b2a:	781b      	ldrb	r3, [r3, #0]
 8017b2c:	009b      	lsls	r3, r3, #2
 8017b2e:	18d3      	adds	r3, r2, r3
 8017b30:	881b      	ldrh	r3, [r3, #0]
 8017b32:	b29a      	uxth	r2, r3
 8017b34:	2036      	movs	r0, #54	@ 0x36
 8017b36:	183b      	adds	r3, r7, r0
 8017b38:	4945      	ldr	r1, [pc, #276]	@ (8017c50 <USB_ActivateEndpoint+0x6c8>)
 8017b3a:	400a      	ands	r2, r1
 8017b3c:	801a      	strh	r2, [r3, #0]
 8017b3e:	687a      	ldr	r2, [r7, #4]
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	781b      	ldrb	r3, [r3, #0]
 8017b44:	009b      	lsls	r3, r3, #2
 8017b46:	18d3      	adds	r3, r2, r3
 8017b48:	183a      	adds	r2, r7, r0
 8017b4a:	8812      	ldrh	r2, [r2, #0]
 8017b4c:	493b      	ldr	r1, [pc, #236]	@ (8017c3c <USB_ActivateEndpoint+0x6b4>)
 8017b4e:	430a      	orrs	r2, r1
 8017b50:	b292      	uxth	r2, r2
 8017b52:	801a      	strh	r2, [r3, #0]
 8017b54:	e0ac      	b.n	8017cb0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017b56:	687a      	ldr	r2, [r7, #4]
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	781b      	ldrb	r3, [r3, #0]
 8017b5c:	009b      	lsls	r3, r3, #2
 8017b5e:	18d2      	adds	r2, r2, r3
 8017b60:	214e      	movs	r1, #78	@ 0x4e
 8017b62:	187b      	adds	r3, r7, r1
 8017b64:	8812      	ldrh	r2, [r2, #0]
 8017b66:	801a      	strh	r2, [r3, #0]
 8017b68:	187b      	adds	r3, r7, r1
 8017b6a:	881a      	ldrh	r2, [r3, #0]
 8017b6c:	2380      	movs	r3, #128	@ 0x80
 8017b6e:	01db      	lsls	r3, r3, #7
 8017b70:	4013      	ands	r3, r2
 8017b72:	d016      	beq.n	8017ba2 <USB_ActivateEndpoint+0x61a>
 8017b74:	687a      	ldr	r2, [r7, #4]
 8017b76:	683b      	ldr	r3, [r7, #0]
 8017b78:	781b      	ldrb	r3, [r3, #0]
 8017b7a:	009b      	lsls	r3, r3, #2
 8017b7c:	18d3      	adds	r3, r2, r3
 8017b7e:	881b      	ldrh	r3, [r3, #0]
 8017b80:	b29a      	uxth	r2, r3
 8017b82:	204c      	movs	r0, #76	@ 0x4c
 8017b84:	183b      	adds	r3, r7, r0
 8017b86:	492a      	ldr	r1, [pc, #168]	@ (8017c30 <USB_ActivateEndpoint+0x6a8>)
 8017b88:	400a      	ands	r2, r1
 8017b8a:	801a      	strh	r2, [r3, #0]
 8017b8c:	687a      	ldr	r2, [r7, #4]
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	781b      	ldrb	r3, [r3, #0]
 8017b92:	009b      	lsls	r3, r3, #2
 8017b94:	18d3      	adds	r3, r2, r3
 8017b96:	183a      	adds	r2, r7, r0
 8017b98:	8812      	ldrh	r2, [r2, #0]
 8017b9a:	4926      	ldr	r1, [pc, #152]	@ (8017c34 <USB_ActivateEndpoint+0x6ac>)
 8017b9c:	430a      	orrs	r2, r1
 8017b9e:	b292      	uxth	r2, r2
 8017ba0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017ba2:	687a      	ldr	r2, [r7, #4]
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	781b      	ldrb	r3, [r3, #0]
 8017ba8:	009b      	lsls	r3, r3, #2
 8017baa:	18d2      	adds	r2, r2, r3
 8017bac:	214a      	movs	r1, #74	@ 0x4a
 8017bae:	187b      	adds	r3, r7, r1
 8017bb0:	8812      	ldrh	r2, [r2, #0]
 8017bb2:	801a      	strh	r2, [r3, #0]
 8017bb4:	187b      	adds	r3, r7, r1
 8017bb6:	881b      	ldrh	r3, [r3, #0]
 8017bb8:	2240      	movs	r2, #64	@ 0x40
 8017bba:	4013      	ands	r3, r2
 8017bbc:	d016      	beq.n	8017bec <USB_ActivateEndpoint+0x664>
 8017bbe:	687a      	ldr	r2, [r7, #4]
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	009b      	lsls	r3, r3, #2
 8017bc6:	18d3      	adds	r3, r2, r3
 8017bc8:	881b      	ldrh	r3, [r3, #0]
 8017bca:	b29a      	uxth	r2, r3
 8017bcc:	2048      	movs	r0, #72	@ 0x48
 8017bce:	183b      	adds	r3, r7, r0
 8017bd0:	4917      	ldr	r1, [pc, #92]	@ (8017c30 <USB_ActivateEndpoint+0x6a8>)
 8017bd2:	400a      	ands	r2, r1
 8017bd4:	801a      	strh	r2, [r3, #0]
 8017bd6:	687a      	ldr	r2, [r7, #4]
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	009b      	lsls	r3, r3, #2
 8017bde:	18d3      	adds	r3, r2, r3
 8017be0:	183a      	adds	r2, r7, r0
 8017be2:	8812      	ldrh	r2, [r2, #0]
 8017be4:	4919      	ldr	r1, [pc, #100]	@ (8017c4c <USB_ActivateEndpoint+0x6c4>)
 8017be6:	430a      	orrs	r2, r1
 8017be8:	b292      	uxth	r2, r2
 8017bea:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017bec:	683b      	ldr	r3, [r7, #0]
 8017bee:	78db      	ldrb	r3, [r3, #3]
 8017bf0:	2b01      	cmp	r3, #1
 8017bf2:	d02f      	beq.n	8017c54 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8017bf4:	687a      	ldr	r2, [r7, #4]
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	781b      	ldrb	r3, [r3, #0]
 8017bfa:	009b      	lsls	r3, r3, #2
 8017bfc:	18d3      	adds	r3, r2, r3
 8017bfe:	881b      	ldrh	r3, [r3, #0]
 8017c00:	b29a      	uxth	r2, r3
 8017c02:	2044      	movs	r0, #68	@ 0x44
 8017c04:	183b      	adds	r3, r7, r0
 8017c06:	4912      	ldr	r1, [pc, #72]	@ (8017c50 <USB_ActivateEndpoint+0x6c8>)
 8017c08:	400a      	ands	r2, r1
 8017c0a:	801a      	strh	r2, [r3, #0]
 8017c0c:	183b      	adds	r3, r7, r0
 8017c0e:	183a      	adds	r2, r7, r0
 8017c10:	8812      	ldrh	r2, [r2, #0]
 8017c12:	2120      	movs	r1, #32
 8017c14:	404a      	eors	r2, r1
 8017c16:	801a      	strh	r2, [r3, #0]
 8017c18:	687a      	ldr	r2, [r7, #4]
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	781b      	ldrb	r3, [r3, #0]
 8017c1e:	009b      	lsls	r3, r3, #2
 8017c20:	18d3      	adds	r3, r2, r3
 8017c22:	183a      	adds	r2, r7, r0
 8017c24:	8812      	ldrh	r2, [r2, #0]
 8017c26:	4905      	ldr	r1, [pc, #20]	@ (8017c3c <USB_ActivateEndpoint+0x6b4>)
 8017c28:	430a      	orrs	r2, r1
 8017c2a:	b292      	uxth	r2, r2
 8017c2c:	801a      	strh	r2, [r3, #0]
 8017c2e:	e028      	b.n	8017c82 <USB_ActivateEndpoint+0x6fa>
 8017c30:	ffff8f8f 	.word	0xffff8f8f
 8017c34:	ffffc080 	.word	0xffffc080
 8017c38:	ffffbf8f 	.word	0xffffbf8f
 8017c3c:	ffff8080 	.word	0xffff8080
 8017c40:	ffff8180 	.word	0xffff8180
 8017c44:	ffff8e8f 	.word	0xffff8e8f
 8017c48:	00000404 	.word	0x00000404
 8017c4c:	ffff80c0 	.word	0xffff80c0
 8017c50:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017c54:	687a      	ldr	r2, [r7, #4]
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	009b      	lsls	r3, r3, #2
 8017c5c:	18d3      	adds	r3, r2, r3
 8017c5e:	881b      	ldrh	r3, [r3, #0]
 8017c60:	b29a      	uxth	r2, r3
 8017c62:	2046      	movs	r0, #70	@ 0x46
 8017c64:	183b      	adds	r3, r7, r0
 8017c66:	4916      	ldr	r1, [pc, #88]	@ (8017cc0 <USB_ActivateEndpoint+0x738>)
 8017c68:	400a      	ands	r2, r1
 8017c6a:	801a      	strh	r2, [r3, #0]
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	009b      	lsls	r3, r3, #2
 8017c74:	18d3      	adds	r3, r2, r3
 8017c76:	183a      	adds	r2, r7, r0
 8017c78:	8812      	ldrh	r2, [r2, #0]
 8017c7a:	4912      	ldr	r1, [pc, #72]	@ (8017cc4 <USB_ActivateEndpoint+0x73c>)
 8017c7c:	430a      	orrs	r2, r1
 8017c7e:	b292      	uxth	r2, r2
 8017c80:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017c82:	687a      	ldr	r2, [r7, #4]
 8017c84:	683b      	ldr	r3, [r7, #0]
 8017c86:	781b      	ldrb	r3, [r3, #0]
 8017c88:	009b      	lsls	r3, r3, #2
 8017c8a:	18d3      	adds	r3, r2, r3
 8017c8c:	881b      	ldrh	r3, [r3, #0]
 8017c8e:	b29a      	uxth	r2, r3
 8017c90:	2042      	movs	r0, #66	@ 0x42
 8017c92:	183b      	adds	r3, r7, r0
 8017c94:	490c      	ldr	r1, [pc, #48]	@ (8017cc8 <USB_ActivateEndpoint+0x740>)
 8017c96:	400a      	ands	r2, r1
 8017c98:	801a      	strh	r2, [r3, #0]
 8017c9a:	687a      	ldr	r2, [r7, #4]
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	009b      	lsls	r3, r3, #2
 8017ca2:	18d3      	adds	r3, r2, r3
 8017ca4:	183a      	adds	r2, r7, r0
 8017ca6:	8812      	ldrh	r2, [r2, #0]
 8017ca8:	4906      	ldr	r1, [pc, #24]	@ (8017cc4 <USB_ActivateEndpoint+0x73c>)
 8017caa:	430a      	orrs	r2, r1
 8017cac:	b292      	uxth	r2, r2
 8017cae:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8017cb0:	236f      	movs	r3, #111	@ 0x6f
 8017cb2:	18fb      	adds	r3, r7, r3
 8017cb4:	781b      	ldrb	r3, [r3, #0]
}
 8017cb6:	0018      	movs	r0, r3
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	b01c      	add	sp, #112	@ 0x70
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	46c0      	nop			@ (mov r8, r8)
 8017cc0:	ffff8fbf 	.word	0xffff8fbf
 8017cc4:	ffff8080 	.word	0xffff8080
 8017cc8:	ffffbf8f 	.word	0xffffbf8f

08017ccc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b08c      	sub	sp, #48	@ 0x30
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8017cd6:	683b      	ldr	r3, [r7, #0]
 8017cd8:	7b1b      	ldrb	r3, [r3, #12]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d000      	beq.n	8017ce0 <USB_DeactivateEndpoint+0x14>
 8017cde:	e07e      	b.n	8017dde <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	785b      	ldrb	r3, [r3, #1]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d03c      	beq.n	8017d62 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017ce8:	687a      	ldr	r2, [r7, #4]
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	781b      	ldrb	r3, [r3, #0]
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	18d2      	adds	r2, r2, r3
 8017cf2:	210c      	movs	r1, #12
 8017cf4:	187b      	adds	r3, r7, r1
 8017cf6:	8812      	ldrh	r2, [r2, #0]
 8017cf8:	801a      	strh	r2, [r3, #0]
 8017cfa:	187b      	adds	r3, r7, r1
 8017cfc:	881b      	ldrh	r3, [r3, #0]
 8017cfe:	2240      	movs	r2, #64	@ 0x40
 8017d00:	4013      	ands	r3, r2
 8017d02:	d016      	beq.n	8017d32 <USB_DeactivateEndpoint+0x66>
 8017d04:	687a      	ldr	r2, [r7, #4]
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	781b      	ldrb	r3, [r3, #0]
 8017d0a:	009b      	lsls	r3, r3, #2
 8017d0c:	18d3      	adds	r3, r2, r3
 8017d0e:	881b      	ldrh	r3, [r3, #0]
 8017d10:	b29a      	uxth	r2, r3
 8017d12:	200a      	movs	r0, #10
 8017d14:	183b      	adds	r3, r7, r0
 8017d16:	49c7      	ldr	r1, [pc, #796]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017d18:	400a      	ands	r2, r1
 8017d1a:	801a      	strh	r2, [r3, #0]
 8017d1c:	687a      	ldr	r2, [r7, #4]
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	781b      	ldrb	r3, [r3, #0]
 8017d22:	009b      	lsls	r3, r3, #2
 8017d24:	18d3      	adds	r3, r2, r3
 8017d26:	183a      	adds	r2, r7, r0
 8017d28:	8812      	ldrh	r2, [r2, #0]
 8017d2a:	49c3      	ldr	r1, [pc, #780]	@ (8018038 <USB_DeactivateEndpoint+0x36c>)
 8017d2c:	430a      	orrs	r2, r1
 8017d2e:	b292      	uxth	r2, r2
 8017d30:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017d32:	687a      	ldr	r2, [r7, #4]
 8017d34:	683b      	ldr	r3, [r7, #0]
 8017d36:	781b      	ldrb	r3, [r3, #0]
 8017d38:	009b      	lsls	r3, r3, #2
 8017d3a:	18d3      	adds	r3, r2, r3
 8017d3c:	881b      	ldrh	r3, [r3, #0]
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	2008      	movs	r0, #8
 8017d42:	183b      	adds	r3, r7, r0
 8017d44:	49bd      	ldr	r1, [pc, #756]	@ (801803c <USB_DeactivateEndpoint+0x370>)
 8017d46:	400a      	ands	r2, r1
 8017d48:	801a      	strh	r2, [r3, #0]
 8017d4a:	687a      	ldr	r2, [r7, #4]
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	009b      	lsls	r3, r3, #2
 8017d52:	18d3      	adds	r3, r2, r3
 8017d54:	183a      	adds	r2, r7, r0
 8017d56:	8812      	ldrh	r2, [r2, #0]
 8017d58:	49b9      	ldr	r1, [pc, #740]	@ (8018040 <USB_DeactivateEndpoint+0x374>)
 8017d5a:	430a      	orrs	r2, r1
 8017d5c:	b292      	uxth	r2, r2
 8017d5e:	801a      	strh	r2, [r3, #0]
 8017d60:	e163      	b.n	801802a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	781b      	ldrb	r3, [r3, #0]
 8017d68:	009b      	lsls	r3, r3, #2
 8017d6a:	18d2      	adds	r2, r2, r3
 8017d6c:	2112      	movs	r1, #18
 8017d6e:	187b      	adds	r3, r7, r1
 8017d70:	8812      	ldrh	r2, [r2, #0]
 8017d72:	801a      	strh	r2, [r3, #0]
 8017d74:	187b      	adds	r3, r7, r1
 8017d76:	881a      	ldrh	r2, [r3, #0]
 8017d78:	2380      	movs	r3, #128	@ 0x80
 8017d7a:	01db      	lsls	r3, r3, #7
 8017d7c:	4013      	ands	r3, r2
 8017d7e:	d016      	beq.n	8017dae <USB_DeactivateEndpoint+0xe2>
 8017d80:	687a      	ldr	r2, [r7, #4]
 8017d82:	683b      	ldr	r3, [r7, #0]
 8017d84:	781b      	ldrb	r3, [r3, #0]
 8017d86:	009b      	lsls	r3, r3, #2
 8017d88:	18d3      	adds	r3, r2, r3
 8017d8a:	881b      	ldrh	r3, [r3, #0]
 8017d8c:	b29a      	uxth	r2, r3
 8017d8e:	2010      	movs	r0, #16
 8017d90:	183b      	adds	r3, r7, r0
 8017d92:	49a8      	ldr	r1, [pc, #672]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017d94:	400a      	ands	r2, r1
 8017d96:	801a      	strh	r2, [r3, #0]
 8017d98:	687a      	ldr	r2, [r7, #4]
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	781b      	ldrb	r3, [r3, #0]
 8017d9e:	009b      	lsls	r3, r3, #2
 8017da0:	18d3      	adds	r3, r2, r3
 8017da2:	183a      	adds	r2, r7, r0
 8017da4:	8812      	ldrh	r2, [r2, #0]
 8017da6:	49a7      	ldr	r1, [pc, #668]	@ (8018044 <USB_DeactivateEndpoint+0x378>)
 8017da8:	430a      	orrs	r2, r1
 8017daa:	b292      	uxth	r2, r2
 8017dac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017dae:	687a      	ldr	r2, [r7, #4]
 8017db0:	683b      	ldr	r3, [r7, #0]
 8017db2:	781b      	ldrb	r3, [r3, #0]
 8017db4:	009b      	lsls	r3, r3, #2
 8017db6:	18d3      	adds	r3, r2, r3
 8017db8:	881b      	ldrh	r3, [r3, #0]
 8017dba:	b29a      	uxth	r2, r3
 8017dbc:	200e      	movs	r0, #14
 8017dbe:	183b      	adds	r3, r7, r0
 8017dc0:	49a1      	ldr	r1, [pc, #644]	@ (8018048 <USB_DeactivateEndpoint+0x37c>)
 8017dc2:	400a      	ands	r2, r1
 8017dc4:	801a      	strh	r2, [r3, #0]
 8017dc6:	687a      	ldr	r2, [r7, #4]
 8017dc8:	683b      	ldr	r3, [r7, #0]
 8017dca:	781b      	ldrb	r3, [r3, #0]
 8017dcc:	009b      	lsls	r3, r3, #2
 8017dce:	18d3      	adds	r3, r2, r3
 8017dd0:	183a      	adds	r2, r7, r0
 8017dd2:	8812      	ldrh	r2, [r2, #0]
 8017dd4:	499a      	ldr	r1, [pc, #616]	@ (8018040 <USB_DeactivateEndpoint+0x374>)
 8017dd6:	430a      	orrs	r2, r1
 8017dd8:	b292      	uxth	r2, r2
 8017dda:	801a      	strh	r2, [r3, #0]
 8017ddc:	e125      	b.n	801802a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	785b      	ldrb	r3, [r3, #1]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d000      	beq.n	8017de8 <USB_DeactivateEndpoint+0x11c>
 8017de6:	e090      	b.n	8017f0a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017de8:	687a      	ldr	r2, [r7, #4]
 8017dea:	683b      	ldr	r3, [r7, #0]
 8017dec:	781b      	ldrb	r3, [r3, #0]
 8017dee:	009b      	lsls	r3, r3, #2
 8017df0:	18d2      	adds	r2, r2, r3
 8017df2:	2120      	movs	r1, #32
 8017df4:	187b      	adds	r3, r7, r1
 8017df6:	8812      	ldrh	r2, [r2, #0]
 8017df8:	801a      	strh	r2, [r3, #0]
 8017dfa:	187b      	adds	r3, r7, r1
 8017dfc:	881a      	ldrh	r2, [r3, #0]
 8017dfe:	2380      	movs	r3, #128	@ 0x80
 8017e00:	01db      	lsls	r3, r3, #7
 8017e02:	4013      	ands	r3, r2
 8017e04:	d016      	beq.n	8017e34 <USB_DeactivateEndpoint+0x168>
 8017e06:	687a      	ldr	r2, [r7, #4]
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	781b      	ldrb	r3, [r3, #0]
 8017e0c:	009b      	lsls	r3, r3, #2
 8017e0e:	18d3      	adds	r3, r2, r3
 8017e10:	881b      	ldrh	r3, [r3, #0]
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	201e      	movs	r0, #30
 8017e16:	183b      	adds	r3, r7, r0
 8017e18:	4986      	ldr	r1, [pc, #536]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017e1a:	400a      	ands	r2, r1
 8017e1c:	801a      	strh	r2, [r3, #0]
 8017e1e:	687a      	ldr	r2, [r7, #4]
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	009b      	lsls	r3, r3, #2
 8017e26:	18d3      	adds	r3, r2, r3
 8017e28:	183a      	adds	r2, r7, r0
 8017e2a:	8812      	ldrh	r2, [r2, #0]
 8017e2c:	4985      	ldr	r1, [pc, #532]	@ (8018044 <USB_DeactivateEndpoint+0x378>)
 8017e2e:	430a      	orrs	r2, r1
 8017e30:	b292      	uxth	r2, r2
 8017e32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017e34:	687a      	ldr	r2, [r7, #4]
 8017e36:	683b      	ldr	r3, [r7, #0]
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	18d2      	adds	r2, r2, r3
 8017e3e:	211c      	movs	r1, #28
 8017e40:	187b      	adds	r3, r7, r1
 8017e42:	8812      	ldrh	r2, [r2, #0]
 8017e44:	801a      	strh	r2, [r3, #0]
 8017e46:	187b      	adds	r3, r7, r1
 8017e48:	881b      	ldrh	r3, [r3, #0]
 8017e4a:	2240      	movs	r2, #64	@ 0x40
 8017e4c:	4013      	ands	r3, r2
 8017e4e:	d016      	beq.n	8017e7e <USB_DeactivateEndpoint+0x1b2>
 8017e50:	687a      	ldr	r2, [r7, #4]
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	009b      	lsls	r3, r3, #2
 8017e58:	18d3      	adds	r3, r2, r3
 8017e5a:	881b      	ldrh	r3, [r3, #0]
 8017e5c:	b29a      	uxth	r2, r3
 8017e5e:	201a      	movs	r0, #26
 8017e60:	183b      	adds	r3, r7, r0
 8017e62:	4974      	ldr	r1, [pc, #464]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017e64:	400a      	ands	r2, r1
 8017e66:	801a      	strh	r2, [r3, #0]
 8017e68:	687a      	ldr	r2, [r7, #4]
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	781b      	ldrb	r3, [r3, #0]
 8017e6e:	009b      	lsls	r3, r3, #2
 8017e70:	18d3      	adds	r3, r2, r3
 8017e72:	183a      	adds	r2, r7, r0
 8017e74:	8812      	ldrh	r2, [r2, #0]
 8017e76:	4970      	ldr	r1, [pc, #448]	@ (8018038 <USB_DeactivateEndpoint+0x36c>)
 8017e78:	430a      	orrs	r2, r1
 8017e7a:	b292      	uxth	r2, r2
 8017e7c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8017e7e:	687a      	ldr	r2, [r7, #4]
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	18d3      	adds	r3, r2, r3
 8017e88:	881b      	ldrh	r3, [r3, #0]
 8017e8a:	b29a      	uxth	r2, r3
 8017e8c:	2018      	movs	r0, #24
 8017e8e:	183b      	adds	r3, r7, r0
 8017e90:	4968      	ldr	r1, [pc, #416]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017e92:	400a      	ands	r2, r1
 8017e94:	801a      	strh	r2, [r3, #0]
 8017e96:	687a      	ldr	r2, [r7, #4]
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	009b      	lsls	r3, r3, #2
 8017e9e:	18d3      	adds	r3, r2, r3
 8017ea0:	183a      	adds	r2, r7, r0
 8017ea2:	8812      	ldrh	r2, [r2, #0]
 8017ea4:	4964      	ldr	r1, [pc, #400]	@ (8018038 <USB_DeactivateEndpoint+0x36c>)
 8017ea6:	430a      	orrs	r2, r1
 8017ea8:	b292      	uxth	r2, r2
 8017eaa:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017eac:	687a      	ldr	r2, [r7, #4]
 8017eae:	683b      	ldr	r3, [r7, #0]
 8017eb0:	781b      	ldrb	r3, [r3, #0]
 8017eb2:	009b      	lsls	r3, r3, #2
 8017eb4:	18d3      	adds	r3, r2, r3
 8017eb6:	881b      	ldrh	r3, [r3, #0]
 8017eb8:	b29a      	uxth	r2, r3
 8017eba:	2016      	movs	r0, #22
 8017ebc:	183b      	adds	r3, r7, r0
 8017ebe:	4962      	ldr	r1, [pc, #392]	@ (8018048 <USB_DeactivateEndpoint+0x37c>)
 8017ec0:	400a      	ands	r2, r1
 8017ec2:	801a      	strh	r2, [r3, #0]
 8017ec4:	687a      	ldr	r2, [r7, #4]
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	781b      	ldrb	r3, [r3, #0]
 8017eca:	009b      	lsls	r3, r3, #2
 8017ecc:	18d3      	adds	r3, r2, r3
 8017ece:	183a      	adds	r2, r7, r0
 8017ed0:	8812      	ldrh	r2, [r2, #0]
 8017ed2:	495b      	ldr	r1, [pc, #364]	@ (8018040 <USB_DeactivateEndpoint+0x374>)
 8017ed4:	430a      	orrs	r2, r1
 8017ed6:	b292      	uxth	r2, r2
 8017ed8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017eda:	687a      	ldr	r2, [r7, #4]
 8017edc:	683b      	ldr	r3, [r7, #0]
 8017ede:	781b      	ldrb	r3, [r3, #0]
 8017ee0:	009b      	lsls	r3, r3, #2
 8017ee2:	18d3      	adds	r3, r2, r3
 8017ee4:	881b      	ldrh	r3, [r3, #0]
 8017ee6:	b29a      	uxth	r2, r3
 8017ee8:	2014      	movs	r0, #20
 8017eea:	183b      	adds	r3, r7, r0
 8017eec:	4953      	ldr	r1, [pc, #332]	@ (801803c <USB_DeactivateEndpoint+0x370>)
 8017eee:	400a      	ands	r2, r1
 8017ef0:	801a      	strh	r2, [r3, #0]
 8017ef2:	687a      	ldr	r2, [r7, #4]
 8017ef4:	683b      	ldr	r3, [r7, #0]
 8017ef6:	781b      	ldrb	r3, [r3, #0]
 8017ef8:	009b      	lsls	r3, r3, #2
 8017efa:	18d3      	adds	r3, r2, r3
 8017efc:	183a      	adds	r2, r7, r0
 8017efe:	8812      	ldrh	r2, [r2, #0]
 8017f00:	494f      	ldr	r1, [pc, #316]	@ (8018040 <USB_DeactivateEndpoint+0x374>)
 8017f02:	430a      	orrs	r2, r1
 8017f04:	b292      	uxth	r2, r2
 8017f06:	801a      	strh	r2, [r3, #0]
 8017f08:	e08f      	b.n	801802a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017f0a:	687a      	ldr	r2, [r7, #4]
 8017f0c:	683b      	ldr	r3, [r7, #0]
 8017f0e:	781b      	ldrb	r3, [r3, #0]
 8017f10:	009b      	lsls	r3, r3, #2
 8017f12:	18d2      	adds	r2, r2, r3
 8017f14:	212e      	movs	r1, #46	@ 0x2e
 8017f16:	187b      	adds	r3, r7, r1
 8017f18:	8812      	ldrh	r2, [r2, #0]
 8017f1a:	801a      	strh	r2, [r3, #0]
 8017f1c:	187b      	adds	r3, r7, r1
 8017f1e:	881a      	ldrh	r2, [r3, #0]
 8017f20:	2380      	movs	r3, #128	@ 0x80
 8017f22:	01db      	lsls	r3, r3, #7
 8017f24:	4013      	ands	r3, r2
 8017f26:	d016      	beq.n	8017f56 <USB_DeactivateEndpoint+0x28a>
 8017f28:	687a      	ldr	r2, [r7, #4]
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	009b      	lsls	r3, r3, #2
 8017f30:	18d3      	adds	r3, r2, r3
 8017f32:	881b      	ldrh	r3, [r3, #0]
 8017f34:	b29a      	uxth	r2, r3
 8017f36:	202c      	movs	r0, #44	@ 0x2c
 8017f38:	183b      	adds	r3, r7, r0
 8017f3a:	493e      	ldr	r1, [pc, #248]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017f3c:	400a      	ands	r2, r1
 8017f3e:	801a      	strh	r2, [r3, #0]
 8017f40:	687a      	ldr	r2, [r7, #4]
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	009b      	lsls	r3, r3, #2
 8017f48:	18d3      	adds	r3, r2, r3
 8017f4a:	183a      	adds	r2, r7, r0
 8017f4c:	8812      	ldrh	r2, [r2, #0]
 8017f4e:	493d      	ldr	r1, [pc, #244]	@ (8018044 <USB_DeactivateEndpoint+0x378>)
 8017f50:	430a      	orrs	r2, r1
 8017f52:	b292      	uxth	r2, r2
 8017f54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017f56:	687a      	ldr	r2, [r7, #4]
 8017f58:	683b      	ldr	r3, [r7, #0]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	009b      	lsls	r3, r3, #2
 8017f5e:	18d2      	adds	r2, r2, r3
 8017f60:	212a      	movs	r1, #42	@ 0x2a
 8017f62:	187b      	adds	r3, r7, r1
 8017f64:	8812      	ldrh	r2, [r2, #0]
 8017f66:	801a      	strh	r2, [r3, #0]
 8017f68:	187b      	adds	r3, r7, r1
 8017f6a:	881b      	ldrh	r3, [r3, #0]
 8017f6c:	2240      	movs	r2, #64	@ 0x40
 8017f6e:	4013      	ands	r3, r2
 8017f70:	d016      	beq.n	8017fa0 <USB_DeactivateEndpoint+0x2d4>
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	781b      	ldrb	r3, [r3, #0]
 8017f78:	009b      	lsls	r3, r3, #2
 8017f7a:	18d3      	adds	r3, r2, r3
 8017f7c:	881b      	ldrh	r3, [r3, #0]
 8017f7e:	b29a      	uxth	r2, r3
 8017f80:	2028      	movs	r0, #40	@ 0x28
 8017f82:	183b      	adds	r3, r7, r0
 8017f84:	492b      	ldr	r1, [pc, #172]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017f86:	400a      	ands	r2, r1
 8017f88:	801a      	strh	r2, [r3, #0]
 8017f8a:	687a      	ldr	r2, [r7, #4]
 8017f8c:	683b      	ldr	r3, [r7, #0]
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	009b      	lsls	r3, r3, #2
 8017f92:	18d3      	adds	r3, r2, r3
 8017f94:	183a      	adds	r2, r7, r0
 8017f96:	8812      	ldrh	r2, [r2, #0]
 8017f98:	4927      	ldr	r1, [pc, #156]	@ (8018038 <USB_DeactivateEndpoint+0x36c>)
 8017f9a:	430a      	orrs	r2, r1
 8017f9c:	b292      	uxth	r2, r2
 8017f9e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8017fa0:	687a      	ldr	r2, [r7, #4]
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	781b      	ldrb	r3, [r3, #0]
 8017fa6:	009b      	lsls	r3, r3, #2
 8017fa8:	18d3      	adds	r3, r2, r3
 8017faa:	881b      	ldrh	r3, [r3, #0]
 8017fac:	b29a      	uxth	r2, r3
 8017fae:	2026      	movs	r0, #38	@ 0x26
 8017fb0:	183b      	adds	r3, r7, r0
 8017fb2:	4920      	ldr	r1, [pc, #128]	@ (8018034 <USB_DeactivateEndpoint+0x368>)
 8017fb4:	400a      	ands	r2, r1
 8017fb6:	801a      	strh	r2, [r3, #0]
 8017fb8:	687a      	ldr	r2, [r7, #4]
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	781b      	ldrb	r3, [r3, #0]
 8017fbe:	009b      	lsls	r3, r3, #2
 8017fc0:	18d3      	adds	r3, r2, r3
 8017fc2:	183a      	adds	r2, r7, r0
 8017fc4:	8812      	ldrh	r2, [r2, #0]
 8017fc6:	491f      	ldr	r1, [pc, #124]	@ (8018044 <USB_DeactivateEndpoint+0x378>)
 8017fc8:	430a      	orrs	r2, r1
 8017fca:	b292      	uxth	r2, r2
 8017fcc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	683b      	ldr	r3, [r7, #0]
 8017fd2:	781b      	ldrb	r3, [r3, #0]
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	18d3      	adds	r3, r2, r3
 8017fd8:	881b      	ldrh	r3, [r3, #0]
 8017fda:	b29a      	uxth	r2, r3
 8017fdc:	2024      	movs	r0, #36	@ 0x24
 8017fde:	183b      	adds	r3, r7, r0
 8017fe0:	4916      	ldr	r1, [pc, #88]	@ (801803c <USB_DeactivateEndpoint+0x370>)
 8017fe2:	400a      	ands	r2, r1
 8017fe4:	801a      	strh	r2, [r3, #0]
 8017fe6:	687a      	ldr	r2, [r7, #4]
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	781b      	ldrb	r3, [r3, #0]
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	18d3      	adds	r3, r2, r3
 8017ff0:	183a      	adds	r2, r7, r0
 8017ff2:	8812      	ldrh	r2, [r2, #0]
 8017ff4:	4912      	ldr	r1, [pc, #72]	@ (8018040 <USB_DeactivateEndpoint+0x374>)
 8017ff6:	430a      	orrs	r2, r1
 8017ff8:	b292      	uxth	r2, r2
 8017ffa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017ffc:	687a      	ldr	r2, [r7, #4]
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	781b      	ldrb	r3, [r3, #0]
 8018002:	009b      	lsls	r3, r3, #2
 8018004:	18d3      	adds	r3, r2, r3
 8018006:	881b      	ldrh	r3, [r3, #0]
 8018008:	b29a      	uxth	r2, r3
 801800a:	2022      	movs	r0, #34	@ 0x22
 801800c:	183b      	adds	r3, r7, r0
 801800e:	490e      	ldr	r1, [pc, #56]	@ (8018048 <USB_DeactivateEndpoint+0x37c>)
 8018010:	400a      	ands	r2, r1
 8018012:	801a      	strh	r2, [r3, #0]
 8018014:	687a      	ldr	r2, [r7, #4]
 8018016:	683b      	ldr	r3, [r7, #0]
 8018018:	781b      	ldrb	r3, [r3, #0]
 801801a:	009b      	lsls	r3, r3, #2
 801801c:	18d3      	adds	r3, r2, r3
 801801e:	183a      	adds	r2, r7, r0
 8018020:	8812      	ldrh	r2, [r2, #0]
 8018022:	4907      	ldr	r1, [pc, #28]	@ (8018040 <USB_DeactivateEndpoint+0x374>)
 8018024:	430a      	orrs	r2, r1
 8018026:	b292      	uxth	r2, r2
 8018028:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801802a:	2300      	movs	r3, #0
}
 801802c:	0018      	movs	r0, r3
 801802e:	46bd      	mov	sp, r7
 8018030:	b00c      	add	sp, #48	@ 0x30
 8018032:	bd80      	pop	{r7, pc}
 8018034:	ffff8f8f 	.word	0xffff8f8f
 8018038:	ffff80c0 	.word	0xffff80c0
 801803c:	ffff8fbf 	.word	0xffff8fbf
 8018040:	ffff8080 	.word	0xffff8080
 8018044:	ffffc080 	.word	0xffffc080
 8018048:	ffffbf8f 	.word	0xffffbf8f

0801804c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801804c:	b590      	push	{r4, r7, lr}
 801804e:	b0c3      	sub	sp, #268	@ 0x10c
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	785b      	ldrb	r3, [r3, #1]
 801805a:	2b01      	cmp	r3, #1
 801805c:	d001      	beq.n	8018062 <USB_EPStartXfer+0x16>
 801805e:	f000 fd2d 	bl	8018abc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8018062:	683b      	ldr	r3, [r7, #0]
 8018064:	699a      	ldr	r2, [r3, #24]
 8018066:	683b      	ldr	r3, [r7, #0]
 8018068:	691b      	ldr	r3, [r3, #16]
 801806a:	429a      	cmp	r2, r3
 801806c:	d905      	bls.n	801807a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801806e:	683b      	ldr	r3, [r7, #0]
 8018070:	691b      	ldr	r3, [r3, #16]
 8018072:	1d7a      	adds	r2, r7, #5
 8018074:	32ff      	adds	r2, #255	@ 0xff
 8018076:	6013      	str	r3, [r2, #0]
 8018078:	e004      	b.n	8018084 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801807a:	683b      	ldr	r3, [r7, #0]
 801807c:	699b      	ldr	r3, [r3, #24]
 801807e:	1d7a      	adds	r2, r7, #5
 8018080:	32ff      	adds	r2, #255	@ 0xff
 8018082:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8018084:	683b      	ldr	r3, [r7, #0]
 8018086:	7b1b      	ldrb	r3, [r3, #12]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d125      	bne.n	80180d8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801808c:	683b      	ldr	r3, [r7, #0]
 801808e:	6959      	ldr	r1, [r3, #20]
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	88da      	ldrh	r2, [r3, #6]
 8018094:	1d7b      	adds	r3, r7, #5
 8018096:	33ff      	adds	r3, #255	@ 0xff
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	b29b      	uxth	r3, r3
 801809c:	6878      	ldr	r0, [r7, #4]
 801809e:	f001 fa47 	bl	8019530 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	613b      	str	r3, [r7, #16]
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	2250      	movs	r2, #80	@ 0x50
 80180aa:	5a9b      	ldrh	r3, [r3, r2]
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	001a      	movs	r2, r3
 80180b0:	693b      	ldr	r3, [r7, #16]
 80180b2:	189b      	adds	r3, r3, r2
 80180b4:	613b      	str	r3, [r7, #16]
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	781b      	ldrb	r3, [r3, #0]
 80180ba:	00da      	lsls	r2, r3, #3
 80180bc:	693b      	ldr	r3, [r7, #16]
 80180be:	18d3      	adds	r3, r2, r3
 80180c0:	4ad7      	ldr	r2, [pc, #860]	@ (8018420 <USB_EPStartXfer+0x3d4>)
 80180c2:	4694      	mov	ip, r2
 80180c4:	4463      	add	r3, ip
 80180c6:	60fb      	str	r3, [r7, #12]
 80180c8:	1d7b      	adds	r3, r7, #5
 80180ca:	33ff      	adds	r3, #255	@ 0xff
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	b29a      	uxth	r2, r3
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	801a      	strh	r2, [r3, #0]
 80180d4:	f000 fccd 	bl	8018a72 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80180d8:	683b      	ldr	r3, [r7, #0]
 80180da:	78db      	ldrb	r3, [r3, #3]
 80180dc:	2b02      	cmp	r3, #2
 80180de:	d000      	beq.n	80180e2 <USB_EPStartXfer+0x96>
 80180e0:	e362      	b.n	80187a8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80180e2:	683b      	ldr	r3, [r7, #0]
 80180e4:	6a1a      	ldr	r2, [r3, #32]
 80180e6:	683b      	ldr	r3, [r7, #0]
 80180e8:	691b      	ldr	r3, [r3, #16]
 80180ea:	429a      	cmp	r2, r3
 80180ec:	d800      	bhi.n	80180f0 <USB_EPStartXfer+0xa4>
 80180ee:	e309      	b.n	8018704 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80180f0:	687a      	ldr	r2, [r7, #4]
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	009b      	lsls	r3, r3, #2
 80180f8:	18d3      	adds	r3, r2, r3
 80180fa:	881b      	ldrh	r3, [r3, #0]
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	2056      	movs	r0, #86	@ 0x56
 8018100:	183b      	adds	r3, r7, r0
 8018102:	49c8      	ldr	r1, [pc, #800]	@ (8018424 <USB_EPStartXfer+0x3d8>)
 8018104:	400a      	ands	r2, r1
 8018106:	801a      	strh	r2, [r3, #0]
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	683b      	ldr	r3, [r7, #0]
 801810c:	781b      	ldrb	r3, [r3, #0]
 801810e:	009b      	lsls	r3, r3, #2
 8018110:	18d3      	adds	r3, r2, r3
 8018112:	183a      	adds	r2, r7, r0
 8018114:	8812      	ldrh	r2, [r2, #0]
 8018116:	49c4      	ldr	r1, [pc, #784]	@ (8018428 <USB_EPStartXfer+0x3dc>)
 8018118:	430a      	orrs	r2, r1
 801811a:	b292      	uxth	r2, r2
 801811c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801811e:	683b      	ldr	r3, [r7, #0]
 8018120:	6a1a      	ldr	r2, [r3, #32]
 8018122:	1d7b      	adds	r3, r7, #5
 8018124:	33ff      	adds	r3, #255	@ 0xff
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	1ad2      	subs	r2, r2, r3
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801812e:	687a      	ldr	r2, [r7, #4]
 8018130:	683b      	ldr	r3, [r7, #0]
 8018132:	781b      	ldrb	r3, [r3, #0]
 8018134:	009b      	lsls	r3, r3, #2
 8018136:	18d3      	adds	r3, r2, r3
 8018138:	881b      	ldrh	r3, [r3, #0]
 801813a:	b29b      	uxth	r3, r3
 801813c:	001a      	movs	r2, r3
 801813e:	2340      	movs	r3, #64	@ 0x40
 8018140:	4013      	ands	r3, r2
 8018142:	d100      	bne.n	8018146 <USB_EPStartXfer+0xfa>
 8018144:	e176      	b.n	8018434 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	633b      	str	r3, [r7, #48]	@ 0x30
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	785b      	ldrb	r3, [r3, #1]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d000      	beq.n	8018154 <USB_EPStartXfer+0x108>
 8018152:	e074      	b.n	801823e <USB_EPStartXfer+0x1f2>
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	2250      	movs	r2, #80	@ 0x50
 801815c:	5a9b      	ldrh	r3, [r3, r2]
 801815e:	b29b      	uxth	r3, r3
 8018160:	001a      	movs	r2, r3
 8018162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018164:	189b      	adds	r3, r3, r2
 8018166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018168:	683b      	ldr	r3, [r7, #0]
 801816a:	781b      	ldrb	r3, [r3, #0]
 801816c:	00da      	lsls	r2, r3, #3
 801816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018170:	18d3      	adds	r3, r2, r3
 8018172:	4aae      	ldr	r2, [pc, #696]	@ (801842c <USB_EPStartXfer+0x3e0>)
 8018174:	4694      	mov	ip, r2
 8018176:	4463      	add	r3, ip
 8018178:	627b      	str	r3, [r7, #36]	@ 0x24
 801817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801817c:	881b      	ldrh	r3, [r3, #0]
 801817e:	b29b      	uxth	r3, r3
 8018180:	059b      	lsls	r3, r3, #22
 8018182:	0d9b      	lsrs	r3, r3, #22
 8018184:	b29a      	uxth	r2, r3
 8018186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018188:	801a      	strh	r2, [r3, #0]
 801818a:	1d7b      	adds	r3, r7, #5
 801818c:	33ff      	adds	r3, #255	@ 0xff
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	2b3e      	cmp	r3, #62	@ 0x3e
 8018192:	d924      	bls.n	80181de <USB_EPStartXfer+0x192>
 8018194:	1d7b      	adds	r3, r7, #5
 8018196:	33ff      	adds	r3, #255	@ 0xff
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	095b      	lsrs	r3, r3, #5
 801819c:	1c7a      	adds	r2, r7, #1
 801819e:	32ff      	adds	r2, #255	@ 0xff
 80181a0:	6013      	str	r3, [r2, #0]
 80181a2:	1d7b      	adds	r3, r7, #5
 80181a4:	33ff      	adds	r3, #255	@ 0xff
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	221f      	movs	r2, #31
 80181aa:	4013      	ands	r3, r2
 80181ac:	d106      	bne.n	80181bc <USB_EPStartXfer+0x170>
 80181ae:	1c7b      	adds	r3, r7, #1
 80181b0:	33ff      	adds	r3, #255	@ 0xff
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	3b01      	subs	r3, #1
 80181b6:	1c7a      	adds	r2, r7, #1
 80181b8:	32ff      	adds	r2, #255	@ 0xff
 80181ba:	6013      	str	r3, [r2, #0]
 80181bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181be:	881b      	ldrh	r3, [r3, #0]
 80181c0:	b29a      	uxth	r2, r3
 80181c2:	1c7b      	adds	r3, r7, #1
 80181c4:	33ff      	adds	r3, #255	@ 0xff
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	b29b      	uxth	r3, r3
 80181ca:	029b      	lsls	r3, r3, #10
 80181cc:	b29b      	uxth	r3, r3
 80181ce:	4313      	orrs	r3, r2
 80181d0:	b29b      	uxth	r3, r3
 80181d2:	4a97      	ldr	r2, [pc, #604]	@ (8018430 <USB_EPStartXfer+0x3e4>)
 80181d4:	4313      	orrs	r3, r2
 80181d6:	b29a      	uxth	r2, r3
 80181d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181da:	801a      	strh	r2, [r3, #0]
 80181dc:	e04a      	b.n	8018274 <USB_EPStartXfer+0x228>
 80181de:	1d7b      	adds	r3, r7, #5
 80181e0:	33ff      	adds	r3, #255	@ 0xff
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d108      	bne.n	80181fa <USB_EPStartXfer+0x1ae>
 80181e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181ea:	881b      	ldrh	r3, [r3, #0]
 80181ec:	b29b      	uxth	r3, r3
 80181ee:	4a90      	ldr	r2, [pc, #576]	@ (8018430 <USB_EPStartXfer+0x3e4>)
 80181f0:	4313      	orrs	r3, r2
 80181f2:	b29a      	uxth	r2, r3
 80181f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181f6:	801a      	strh	r2, [r3, #0]
 80181f8:	e03c      	b.n	8018274 <USB_EPStartXfer+0x228>
 80181fa:	1d7b      	adds	r3, r7, #5
 80181fc:	33ff      	adds	r3, #255	@ 0xff
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	085b      	lsrs	r3, r3, #1
 8018202:	1c7a      	adds	r2, r7, #1
 8018204:	32ff      	adds	r2, #255	@ 0xff
 8018206:	6013      	str	r3, [r2, #0]
 8018208:	1d7b      	adds	r3, r7, #5
 801820a:	33ff      	adds	r3, #255	@ 0xff
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	2201      	movs	r2, #1
 8018210:	4013      	ands	r3, r2
 8018212:	d006      	beq.n	8018222 <USB_EPStartXfer+0x1d6>
 8018214:	1c7b      	adds	r3, r7, #1
 8018216:	33ff      	adds	r3, #255	@ 0xff
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	3301      	adds	r3, #1
 801821c:	1c7a      	adds	r2, r7, #1
 801821e:	32ff      	adds	r2, #255	@ 0xff
 8018220:	6013      	str	r3, [r2, #0]
 8018222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018224:	881b      	ldrh	r3, [r3, #0]
 8018226:	b29a      	uxth	r2, r3
 8018228:	1c7b      	adds	r3, r7, #1
 801822a:	33ff      	adds	r3, #255	@ 0xff
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	b29b      	uxth	r3, r3
 8018230:	029b      	lsls	r3, r3, #10
 8018232:	b29b      	uxth	r3, r3
 8018234:	4313      	orrs	r3, r2
 8018236:	b29a      	uxth	r2, r3
 8018238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801823a:	801a      	strh	r2, [r3, #0]
 801823c:	e01a      	b.n	8018274 <USB_EPStartXfer+0x228>
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	785b      	ldrb	r3, [r3, #1]
 8018242:	2b01      	cmp	r3, #1
 8018244:	d116      	bne.n	8018274 <USB_EPStartXfer+0x228>
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	2250      	movs	r2, #80	@ 0x50
 801824a:	5a9b      	ldrh	r3, [r3, r2]
 801824c:	b29b      	uxth	r3, r3
 801824e:	001a      	movs	r2, r3
 8018250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018252:	189b      	adds	r3, r3, r2
 8018254:	633b      	str	r3, [r7, #48]	@ 0x30
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	00da      	lsls	r2, r3, #3
 801825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801825e:	18d3      	adds	r3, r2, r3
 8018260:	4a72      	ldr	r2, [pc, #456]	@ (801842c <USB_EPStartXfer+0x3e0>)
 8018262:	4694      	mov	ip, r2
 8018264:	4463      	add	r3, ip
 8018266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018268:	1d7b      	adds	r3, r7, #5
 801826a:	33ff      	adds	r3, #255	@ 0xff
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	b29a      	uxth	r2, r3
 8018270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018272:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8018274:	2076      	movs	r0, #118	@ 0x76
 8018276:	183b      	adds	r3, r7, r0
 8018278:	683a      	ldr	r2, [r7, #0]
 801827a:	8952      	ldrh	r2, [r2, #10]
 801827c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	6959      	ldr	r1, [r3, #20]
 8018282:	1d7b      	adds	r3, r7, #5
 8018284:	33ff      	adds	r3, #255	@ 0xff
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	b29c      	uxth	r4, r3
 801828a:	183b      	adds	r3, r7, r0
 801828c:	881a      	ldrh	r2, [r3, #0]
 801828e:	6878      	ldr	r0, [r7, #4]
 8018290:	0023      	movs	r3, r4
 8018292:	f001 f94d 	bl	8019530 <USB_WritePMA>
            ep->xfer_buff += len;
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	695a      	ldr	r2, [r3, #20]
 801829a:	1d7b      	adds	r3, r7, #5
 801829c:	33ff      	adds	r3, #255	@ 0xff
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	18d2      	adds	r2, r2, r3
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	6a1a      	ldr	r2, [r3, #32]
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	691b      	ldr	r3, [r3, #16]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	d908      	bls.n	80182c4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80182b2:	683b      	ldr	r3, [r7, #0]
 80182b4:	6a1a      	ldr	r2, [r3, #32]
 80182b6:	1d7b      	adds	r3, r7, #5
 80182b8:	33ff      	adds	r3, #255	@ 0xff
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	1ad2      	subs	r2, r2, r3
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	621a      	str	r2, [r3, #32]
 80182c2:	e007      	b.n	80182d4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80182c4:	683b      	ldr	r3, [r7, #0]
 80182c6:	6a1b      	ldr	r3, [r3, #32]
 80182c8:	1d7a      	adds	r2, r7, #5
 80182ca:	32ff      	adds	r2, #255	@ 0xff
 80182cc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	2200      	movs	r2, #0
 80182d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80182d4:	683b      	ldr	r3, [r7, #0]
 80182d6:	785b      	ldrb	r3, [r3, #1]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d000      	beq.n	80182de <USB_EPStartXfer+0x292>
 80182dc:	e070      	b.n	80183c0 <USB_EPStartXfer+0x374>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	61bb      	str	r3, [r7, #24]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	2250      	movs	r2, #80	@ 0x50
 80182e6:	5a9b      	ldrh	r3, [r3, r2]
 80182e8:	b29b      	uxth	r3, r3
 80182ea:	001a      	movs	r2, r3
 80182ec:	69bb      	ldr	r3, [r7, #24]
 80182ee:	189b      	adds	r3, r3, r2
 80182f0:	61bb      	str	r3, [r7, #24]
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	781b      	ldrb	r3, [r3, #0]
 80182f6:	00da      	lsls	r2, r3, #3
 80182f8:	69bb      	ldr	r3, [r7, #24]
 80182fa:	18d3      	adds	r3, r2, r3
 80182fc:	4a48      	ldr	r2, [pc, #288]	@ (8018420 <USB_EPStartXfer+0x3d4>)
 80182fe:	4694      	mov	ip, r2
 8018300:	4463      	add	r3, ip
 8018302:	617b      	str	r3, [r7, #20]
 8018304:	697b      	ldr	r3, [r7, #20]
 8018306:	881b      	ldrh	r3, [r3, #0]
 8018308:	b29b      	uxth	r3, r3
 801830a:	059b      	lsls	r3, r3, #22
 801830c:	0d9b      	lsrs	r3, r3, #22
 801830e:	b29a      	uxth	r2, r3
 8018310:	697b      	ldr	r3, [r7, #20]
 8018312:	801a      	strh	r2, [r3, #0]
 8018314:	1d7b      	adds	r3, r7, #5
 8018316:	33ff      	adds	r3, #255	@ 0xff
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	2b3e      	cmp	r3, #62	@ 0x3e
 801831c:	d922      	bls.n	8018364 <USB_EPStartXfer+0x318>
 801831e:	1d7b      	adds	r3, r7, #5
 8018320:	33ff      	adds	r3, #255	@ 0xff
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	095b      	lsrs	r3, r3, #5
 8018326:	21fc      	movs	r1, #252	@ 0xfc
 8018328:	187a      	adds	r2, r7, r1
 801832a:	6013      	str	r3, [r2, #0]
 801832c:	1d7b      	adds	r3, r7, #5
 801832e:	33ff      	adds	r3, #255	@ 0xff
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	221f      	movs	r2, #31
 8018334:	4013      	ands	r3, r2
 8018336:	d104      	bne.n	8018342 <USB_EPStartXfer+0x2f6>
 8018338:	187b      	adds	r3, r7, r1
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	3b01      	subs	r3, #1
 801833e:	187a      	adds	r2, r7, r1
 8018340:	6013      	str	r3, [r2, #0]
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	881b      	ldrh	r3, [r3, #0]
 8018346:	b29a      	uxth	r2, r3
 8018348:	23fc      	movs	r3, #252	@ 0xfc
 801834a:	18fb      	adds	r3, r7, r3
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	b29b      	uxth	r3, r3
 8018350:	029b      	lsls	r3, r3, #10
 8018352:	b29b      	uxth	r3, r3
 8018354:	4313      	orrs	r3, r2
 8018356:	b29b      	uxth	r3, r3
 8018358:	4a35      	ldr	r2, [pc, #212]	@ (8018430 <USB_EPStartXfer+0x3e4>)
 801835a:	4313      	orrs	r3, r2
 801835c:	b29a      	uxth	r2, r3
 801835e:	697b      	ldr	r3, [r7, #20]
 8018360:	801a      	strh	r2, [r3, #0]
 8018362:	e04a      	b.n	80183fa <USB_EPStartXfer+0x3ae>
 8018364:	1d7b      	adds	r3, r7, #5
 8018366:	33ff      	adds	r3, #255	@ 0xff
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d108      	bne.n	8018380 <USB_EPStartXfer+0x334>
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	881b      	ldrh	r3, [r3, #0]
 8018372:	b29b      	uxth	r3, r3
 8018374:	4a2e      	ldr	r2, [pc, #184]	@ (8018430 <USB_EPStartXfer+0x3e4>)
 8018376:	4313      	orrs	r3, r2
 8018378:	b29a      	uxth	r2, r3
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	801a      	strh	r2, [r3, #0]
 801837e:	e03c      	b.n	80183fa <USB_EPStartXfer+0x3ae>
 8018380:	1d7b      	adds	r3, r7, #5
 8018382:	33ff      	adds	r3, #255	@ 0xff
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	085b      	lsrs	r3, r3, #1
 8018388:	21fc      	movs	r1, #252	@ 0xfc
 801838a:	187a      	adds	r2, r7, r1
 801838c:	6013      	str	r3, [r2, #0]
 801838e:	1d7b      	adds	r3, r7, #5
 8018390:	33ff      	adds	r3, #255	@ 0xff
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	2201      	movs	r2, #1
 8018396:	4013      	ands	r3, r2
 8018398:	d004      	beq.n	80183a4 <USB_EPStartXfer+0x358>
 801839a:	187b      	adds	r3, r7, r1
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	3301      	adds	r3, #1
 80183a0:	187a      	adds	r2, r7, r1
 80183a2:	6013      	str	r3, [r2, #0]
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	881b      	ldrh	r3, [r3, #0]
 80183a8:	b29a      	uxth	r2, r3
 80183aa:	23fc      	movs	r3, #252	@ 0xfc
 80183ac:	18fb      	adds	r3, r7, r3
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	029b      	lsls	r3, r3, #10
 80183b4:	b29b      	uxth	r3, r3
 80183b6:	4313      	orrs	r3, r2
 80183b8:	b29a      	uxth	r2, r3
 80183ba:	697b      	ldr	r3, [r7, #20]
 80183bc:	801a      	strh	r2, [r3, #0]
 80183be:	e01c      	b.n	80183fa <USB_EPStartXfer+0x3ae>
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	785b      	ldrb	r3, [r3, #1]
 80183c4:	2b01      	cmp	r3, #1
 80183c6:	d118      	bne.n	80183fa <USB_EPStartXfer+0x3ae>
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	623b      	str	r3, [r7, #32]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	2250      	movs	r2, #80	@ 0x50
 80183d0:	5a9b      	ldrh	r3, [r3, r2]
 80183d2:	b29b      	uxth	r3, r3
 80183d4:	001a      	movs	r2, r3
 80183d6:	6a3b      	ldr	r3, [r7, #32]
 80183d8:	189b      	adds	r3, r3, r2
 80183da:	623b      	str	r3, [r7, #32]
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	781b      	ldrb	r3, [r3, #0]
 80183e0:	00da      	lsls	r2, r3, #3
 80183e2:	6a3b      	ldr	r3, [r7, #32]
 80183e4:	18d3      	adds	r3, r2, r3
 80183e6:	4a0e      	ldr	r2, [pc, #56]	@ (8018420 <USB_EPStartXfer+0x3d4>)
 80183e8:	4694      	mov	ip, r2
 80183ea:	4463      	add	r3, ip
 80183ec:	61fb      	str	r3, [r7, #28]
 80183ee:	1d7b      	adds	r3, r7, #5
 80183f0:	33ff      	adds	r3, #255	@ 0xff
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	b29a      	uxth	r2, r3
 80183f6:	69fb      	ldr	r3, [r7, #28]
 80183f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80183fa:	2076      	movs	r0, #118	@ 0x76
 80183fc:	183b      	adds	r3, r7, r0
 80183fe:	683a      	ldr	r2, [r7, #0]
 8018400:	8912      	ldrh	r2, [r2, #8]
 8018402:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018404:	683b      	ldr	r3, [r7, #0]
 8018406:	6959      	ldr	r1, [r3, #20]
 8018408:	1d7b      	adds	r3, r7, #5
 801840a:	33ff      	adds	r3, #255	@ 0xff
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	b29c      	uxth	r4, r3
 8018410:	183b      	adds	r3, r7, r0
 8018412:	881a      	ldrh	r2, [r3, #0]
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	0023      	movs	r3, r4
 8018418:	f001 f88a 	bl	8019530 <USB_WritePMA>
 801841c:	e329      	b.n	8018a72 <USB_EPStartXfer+0xa26>
 801841e:	46c0      	nop			@ (mov r8, r8)
 8018420:	00000402 	.word	0x00000402
 8018424:	ffff8f8f 	.word	0xffff8f8f
 8018428:	ffff8180 	.word	0xffff8180
 801842c:	00000406 	.word	0x00000406
 8018430:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018434:	683b      	ldr	r3, [r7, #0]
 8018436:	785b      	ldrb	r3, [r3, #1]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d000      	beq.n	801843e <USB_EPStartXfer+0x3f2>
 801843c:	e070      	b.n	8018520 <USB_EPStartXfer+0x4d4>
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2250      	movs	r2, #80	@ 0x50
 8018446:	5a9b      	ldrh	r3, [r3, r2]
 8018448:	b29b      	uxth	r3, r3
 801844a:	001a      	movs	r2, r3
 801844c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801844e:	189b      	adds	r3, r3, r2
 8018450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	00da      	lsls	r2, r3, #3
 8018458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801845a:	18d3      	adds	r3, r2, r3
 801845c:	4acd      	ldr	r2, [pc, #820]	@ (8018794 <USB_EPStartXfer+0x748>)
 801845e:	4694      	mov	ip, r2
 8018460:	4463      	add	r3, ip
 8018462:	647b      	str	r3, [r7, #68]	@ 0x44
 8018464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018466:	881b      	ldrh	r3, [r3, #0]
 8018468:	b29b      	uxth	r3, r3
 801846a:	059b      	lsls	r3, r3, #22
 801846c:	0d9b      	lsrs	r3, r3, #22
 801846e:	b29a      	uxth	r2, r3
 8018470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018472:	801a      	strh	r2, [r3, #0]
 8018474:	1d7b      	adds	r3, r7, #5
 8018476:	33ff      	adds	r3, #255	@ 0xff
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	2b3e      	cmp	r3, #62	@ 0x3e
 801847c:	d922      	bls.n	80184c4 <USB_EPStartXfer+0x478>
 801847e:	1d7b      	adds	r3, r7, #5
 8018480:	33ff      	adds	r3, #255	@ 0xff
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	095b      	lsrs	r3, r3, #5
 8018486:	21f8      	movs	r1, #248	@ 0xf8
 8018488:	187a      	adds	r2, r7, r1
 801848a:	6013      	str	r3, [r2, #0]
 801848c:	1d7b      	adds	r3, r7, #5
 801848e:	33ff      	adds	r3, #255	@ 0xff
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	221f      	movs	r2, #31
 8018494:	4013      	ands	r3, r2
 8018496:	d104      	bne.n	80184a2 <USB_EPStartXfer+0x456>
 8018498:	187b      	adds	r3, r7, r1
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	3b01      	subs	r3, #1
 801849e:	187a      	adds	r2, r7, r1
 80184a0:	6013      	str	r3, [r2, #0]
 80184a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184a4:	881b      	ldrh	r3, [r3, #0]
 80184a6:	b29a      	uxth	r2, r3
 80184a8:	23f8      	movs	r3, #248	@ 0xf8
 80184aa:	18fb      	adds	r3, r7, r3
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	029b      	lsls	r3, r3, #10
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	4313      	orrs	r3, r2
 80184b6:	b29b      	uxth	r3, r3
 80184b8:	4ab7      	ldr	r2, [pc, #732]	@ (8018798 <USB_EPStartXfer+0x74c>)
 80184ba:	4313      	orrs	r3, r2
 80184bc:	b29a      	uxth	r2, r3
 80184be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184c0:	801a      	strh	r2, [r3, #0]
 80184c2:	e04a      	b.n	801855a <USB_EPStartXfer+0x50e>
 80184c4:	1d7b      	adds	r3, r7, #5
 80184c6:	33ff      	adds	r3, #255	@ 0xff
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d108      	bne.n	80184e0 <USB_EPStartXfer+0x494>
 80184ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184d0:	881b      	ldrh	r3, [r3, #0]
 80184d2:	b29b      	uxth	r3, r3
 80184d4:	4ab0      	ldr	r2, [pc, #704]	@ (8018798 <USB_EPStartXfer+0x74c>)
 80184d6:	4313      	orrs	r3, r2
 80184d8:	b29a      	uxth	r2, r3
 80184da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184dc:	801a      	strh	r2, [r3, #0]
 80184de:	e03c      	b.n	801855a <USB_EPStartXfer+0x50e>
 80184e0:	1d7b      	adds	r3, r7, #5
 80184e2:	33ff      	adds	r3, #255	@ 0xff
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	085b      	lsrs	r3, r3, #1
 80184e8:	21f8      	movs	r1, #248	@ 0xf8
 80184ea:	187a      	adds	r2, r7, r1
 80184ec:	6013      	str	r3, [r2, #0]
 80184ee:	1d7b      	adds	r3, r7, #5
 80184f0:	33ff      	adds	r3, #255	@ 0xff
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	2201      	movs	r2, #1
 80184f6:	4013      	ands	r3, r2
 80184f8:	d004      	beq.n	8018504 <USB_EPStartXfer+0x4b8>
 80184fa:	187b      	adds	r3, r7, r1
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	3301      	adds	r3, #1
 8018500:	187a      	adds	r2, r7, r1
 8018502:	6013      	str	r3, [r2, #0]
 8018504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018506:	881b      	ldrh	r3, [r3, #0]
 8018508:	b29a      	uxth	r2, r3
 801850a:	23f8      	movs	r3, #248	@ 0xf8
 801850c:	18fb      	adds	r3, r7, r3
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	b29b      	uxth	r3, r3
 8018512:	029b      	lsls	r3, r3, #10
 8018514:	b29b      	uxth	r3, r3
 8018516:	4313      	orrs	r3, r2
 8018518:	b29a      	uxth	r2, r3
 801851a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801851c:	801a      	strh	r2, [r3, #0]
 801851e:	e01c      	b.n	801855a <USB_EPStartXfer+0x50e>
 8018520:	683b      	ldr	r3, [r7, #0]
 8018522:	785b      	ldrb	r3, [r3, #1]
 8018524:	2b01      	cmp	r3, #1
 8018526:	d118      	bne.n	801855a <USB_EPStartXfer+0x50e>
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	653b      	str	r3, [r7, #80]	@ 0x50
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2250      	movs	r2, #80	@ 0x50
 8018530:	5a9b      	ldrh	r3, [r3, r2]
 8018532:	b29b      	uxth	r3, r3
 8018534:	001a      	movs	r2, r3
 8018536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018538:	189b      	adds	r3, r3, r2
 801853a:	653b      	str	r3, [r7, #80]	@ 0x50
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	00da      	lsls	r2, r3, #3
 8018542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018544:	18d3      	adds	r3, r2, r3
 8018546:	4a93      	ldr	r2, [pc, #588]	@ (8018794 <USB_EPStartXfer+0x748>)
 8018548:	4694      	mov	ip, r2
 801854a:	4463      	add	r3, ip
 801854c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801854e:	1d7b      	adds	r3, r7, #5
 8018550:	33ff      	adds	r3, #255	@ 0xff
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	b29a      	uxth	r2, r3
 8018556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018558:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801855a:	2076      	movs	r0, #118	@ 0x76
 801855c:	183b      	adds	r3, r7, r0
 801855e:	683a      	ldr	r2, [r7, #0]
 8018560:	8912      	ldrh	r2, [r2, #8]
 8018562:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	6959      	ldr	r1, [r3, #20]
 8018568:	1d7b      	adds	r3, r7, #5
 801856a:	33ff      	adds	r3, #255	@ 0xff
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	b29c      	uxth	r4, r3
 8018570:	183b      	adds	r3, r7, r0
 8018572:	881a      	ldrh	r2, [r3, #0]
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	0023      	movs	r3, r4
 8018578:	f000 ffda 	bl	8019530 <USB_WritePMA>
            ep->xfer_buff += len;
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	695a      	ldr	r2, [r3, #20]
 8018580:	1d7b      	adds	r3, r7, #5
 8018582:	33ff      	adds	r3, #255	@ 0xff
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	18d2      	adds	r2, r2, r3
 8018588:	683b      	ldr	r3, [r7, #0]
 801858a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	6a1a      	ldr	r2, [r3, #32]
 8018590:	683b      	ldr	r3, [r7, #0]
 8018592:	691b      	ldr	r3, [r3, #16]
 8018594:	429a      	cmp	r2, r3
 8018596:	d908      	bls.n	80185aa <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	6a1a      	ldr	r2, [r3, #32]
 801859c:	1d7b      	adds	r3, r7, #5
 801859e:	33ff      	adds	r3, #255	@ 0xff
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	1ad2      	subs	r2, r2, r3
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	621a      	str	r2, [r3, #32]
 80185a8:	e007      	b.n	80185ba <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	6a1b      	ldr	r3, [r3, #32]
 80185ae:	1d7a      	adds	r2, r7, #5
 80185b0:	32ff      	adds	r2, #255	@ 0xff
 80185b2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	2200      	movs	r2, #0
 80185b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	785b      	ldrb	r3, [r3, #1]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d000      	beq.n	80185c8 <USB_EPStartXfer+0x57c>
 80185c6:	e070      	b.n	80186aa <USB_EPStartXfer+0x65e>
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	2250      	movs	r2, #80	@ 0x50
 80185d0:	5a9b      	ldrh	r3, [r3, r2]
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	001a      	movs	r2, r3
 80185d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185d8:	189b      	adds	r3, r3, r2
 80185da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80185dc:	683b      	ldr	r3, [r7, #0]
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	00da      	lsls	r2, r3, #3
 80185e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185e4:	18d3      	adds	r3, r2, r3
 80185e6:	4a6d      	ldr	r2, [pc, #436]	@ (801879c <USB_EPStartXfer+0x750>)
 80185e8:	4694      	mov	ip, r2
 80185ea:	4463      	add	r3, ip
 80185ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80185ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185f0:	881b      	ldrh	r3, [r3, #0]
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	059b      	lsls	r3, r3, #22
 80185f6:	0d9b      	lsrs	r3, r3, #22
 80185f8:	b29a      	uxth	r2, r3
 80185fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185fc:	801a      	strh	r2, [r3, #0]
 80185fe:	1d7b      	adds	r3, r7, #5
 8018600:	33ff      	adds	r3, #255	@ 0xff
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	2b3e      	cmp	r3, #62	@ 0x3e
 8018606:	d922      	bls.n	801864e <USB_EPStartXfer+0x602>
 8018608:	1d7b      	adds	r3, r7, #5
 801860a:	33ff      	adds	r3, #255	@ 0xff
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	095b      	lsrs	r3, r3, #5
 8018610:	21f4      	movs	r1, #244	@ 0xf4
 8018612:	187a      	adds	r2, r7, r1
 8018614:	6013      	str	r3, [r2, #0]
 8018616:	1d7b      	adds	r3, r7, #5
 8018618:	33ff      	adds	r3, #255	@ 0xff
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	221f      	movs	r2, #31
 801861e:	4013      	ands	r3, r2
 8018620:	d104      	bne.n	801862c <USB_EPStartXfer+0x5e0>
 8018622:	187b      	adds	r3, r7, r1
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	3b01      	subs	r3, #1
 8018628:	187a      	adds	r2, r7, r1
 801862a:	6013      	str	r3, [r2, #0]
 801862c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801862e:	881b      	ldrh	r3, [r3, #0]
 8018630:	b29a      	uxth	r2, r3
 8018632:	23f4      	movs	r3, #244	@ 0xf4
 8018634:	18fb      	adds	r3, r7, r3
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	b29b      	uxth	r3, r3
 801863a:	029b      	lsls	r3, r3, #10
 801863c:	b29b      	uxth	r3, r3
 801863e:	4313      	orrs	r3, r2
 8018640:	b29b      	uxth	r3, r3
 8018642:	4a55      	ldr	r2, [pc, #340]	@ (8018798 <USB_EPStartXfer+0x74c>)
 8018644:	4313      	orrs	r3, r2
 8018646:	b29a      	uxth	r2, r3
 8018648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801864a:	801a      	strh	r2, [r3, #0]
 801864c:	e048      	b.n	80186e0 <USB_EPStartXfer+0x694>
 801864e:	1d7b      	adds	r3, r7, #5
 8018650:	33ff      	adds	r3, #255	@ 0xff
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d108      	bne.n	801866a <USB_EPStartXfer+0x61e>
 8018658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801865a:	881b      	ldrh	r3, [r3, #0]
 801865c:	b29b      	uxth	r3, r3
 801865e:	4a4e      	ldr	r2, [pc, #312]	@ (8018798 <USB_EPStartXfer+0x74c>)
 8018660:	4313      	orrs	r3, r2
 8018662:	b29a      	uxth	r2, r3
 8018664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018666:	801a      	strh	r2, [r3, #0]
 8018668:	e03a      	b.n	80186e0 <USB_EPStartXfer+0x694>
 801866a:	1d7b      	adds	r3, r7, #5
 801866c:	33ff      	adds	r3, #255	@ 0xff
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	085b      	lsrs	r3, r3, #1
 8018672:	21f4      	movs	r1, #244	@ 0xf4
 8018674:	187a      	adds	r2, r7, r1
 8018676:	6013      	str	r3, [r2, #0]
 8018678:	1d7b      	adds	r3, r7, #5
 801867a:	33ff      	adds	r3, #255	@ 0xff
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2201      	movs	r2, #1
 8018680:	4013      	ands	r3, r2
 8018682:	d004      	beq.n	801868e <USB_EPStartXfer+0x642>
 8018684:	187b      	adds	r3, r7, r1
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	3301      	adds	r3, #1
 801868a:	187a      	adds	r2, r7, r1
 801868c:	6013      	str	r3, [r2, #0]
 801868e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018690:	881b      	ldrh	r3, [r3, #0]
 8018692:	b29a      	uxth	r2, r3
 8018694:	23f4      	movs	r3, #244	@ 0xf4
 8018696:	18fb      	adds	r3, r7, r3
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	b29b      	uxth	r3, r3
 801869c:	029b      	lsls	r3, r3, #10
 801869e:	b29b      	uxth	r3, r3
 80186a0:	4313      	orrs	r3, r2
 80186a2:	b29a      	uxth	r2, r3
 80186a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186a6:	801a      	strh	r2, [r3, #0]
 80186a8:	e01a      	b.n	80186e0 <USB_EPStartXfer+0x694>
 80186aa:	683b      	ldr	r3, [r7, #0]
 80186ac:	785b      	ldrb	r3, [r3, #1]
 80186ae:	2b01      	cmp	r3, #1
 80186b0:	d116      	bne.n	80186e0 <USB_EPStartXfer+0x694>
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2250      	movs	r2, #80	@ 0x50
 80186b6:	5a9b      	ldrh	r3, [r3, r2]
 80186b8:	b29b      	uxth	r3, r3
 80186ba:	001a      	movs	r2, r3
 80186bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186be:	189b      	adds	r3, r3, r2
 80186c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	00da      	lsls	r2, r3, #3
 80186c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186ca:	18d3      	adds	r3, r2, r3
 80186cc:	4a33      	ldr	r2, [pc, #204]	@ (801879c <USB_EPStartXfer+0x750>)
 80186ce:	4694      	mov	ip, r2
 80186d0:	4463      	add	r3, ip
 80186d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80186d4:	1d7b      	adds	r3, r7, #5
 80186d6:	33ff      	adds	r3, #255	@ 0xff
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	b29a      	uxth	r2, r3
 80186dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80186e0:	2076      	movs	r0, #118	@ 0x76
 80186e2:	183b      	adds	r3, r7, r0
 80186e4:	683a      	ldr	r2, [r7, #0]
 80186e6:	8952      	ldrh	r2, [r2, #10]
 80186e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	6959      	ldr	r1, [r3, #20]
 80186ee:	1d7b      	adds	r3, r7, #5
 80186f0:	33ff      	adds	r3, #255	@ 0xff
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	b29c      	uxth	r4, r3
 80186f6:	183b      	adds	r3, r7, r0
 80186f8:	881a      	ldrh	r2, [r3, #0]
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	0023      	movs	r3, r4
 80186fe:	f000 ff17 	bl	8019530 <USB_WritePMA>
 8018702:	e1b6      	b.n	8018a72 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8018704:	683b      	ldr	r3, [r7, #0]
 8018706:	6a1b      	ldr	r3, [r3, #32]
 8018708:	1d7a      	adds	r2, r7, #5
 801870a:	32ff      	adds	r2, #255	@ 0xff
 801870c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801870e:	687a      	ldr	r2, [r7, #4]
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	009b      	lsls	r3, r3, #2
 8018716:	18d3      	adds	r3, r2, r3
 8018718:	881b      	ldrh	r3, [r3, #0]
 801871a:	b29a      	uxth	r2, r3
 801871c:	2062      	movs	r0, #98	@ 0x62
 801871e:	183b      	adds	r3, r7, r0
 8018720:	491f      	ldr	r1, [pc, #124]	@ (80187a0 <USB_EPStartXfer+0x754>)
 8018722:	400a      	ands	r2, r1
 8018724:	801a      	strh	r2, [r3, #0]
 8018726:	687a      	ldr	r2, [r7, #4]
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	009b      	lsls	r3, r3, #2
 801872e:	18d3      	adds	r3, r2, r3
 8018730:	183a      	adds	r2, r7, r0
 8018732:	8812      	ldrh	r2, [r2, #0]
 8018734:	491b      	ldr	r1, [pc, #108]	@ (80187a4 <USB_EPStartXfer+0x758>)
 8018736:	430a      	orrs	r2, r1
 8018738:	b292      	uxth	r2, r2
 801873a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2250      	movs	r2, #80	@ 0x50
 8018744:	5a9b      	ldrh	r3, [r3, r2]
 8018746:	b29b      	uxth	r3, r3
 8018748:	001a      	movs	r2, r3
 801874a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801874c:	189b      	adds	r3, r3, r2
 801874e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018750:	683b      	ldr	r3, [r7, #0]
 8018752:	781b      	ldrb	r3, [r3, #0]
 8018754:	00da      	lsls	r2, r3, #3
 8018756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018758:	18d3      	adds	r3, r2, r3
 801875a:	4a0e      	ldr	r2, [pc, #56]	@ (8018794 <USB_EPStartXfer+0x748>)
 801875c:	4694      	mov	ip, r2
 801875e:	4463      	add	r3, ip
 8018760:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018762:	1d7b      	adds	r3, r7, #5
 8018764:	33ff      	adds	r3, #255	@ 0xff
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	b29a      	uxth	r2, r3
 801876a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801876c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801876e:	2076      	movs	r0, #118	@ 0x76
 8018770:	183b      	adds	r3, r7, r0
 8018772:	683a      	ldr	r2, [r7, #0]
 8018774:	8912      	ldrh	r2, [r2, #8]
 8018776:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018778:	683b      	ldr	r3, [r7, #0]
 801877a:	6959      	ldr	r1, [r3, #20]
 801877c:	1d7b      	adds	r3, r7, #5
 801877e:	33ff      	adds	r3, #255	@ 0xff
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	b29c      	uxth	r4, r3
 8018784:	183b      	adds	r3, r7, r0
 8018786:	881a      	ldrh	r2, [r3, #0]
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	0023      	movs	r3, r4
 801878c:	f000 fed0 	bl	8019530 <USB_WritePMA>
 8018790:	e16f      	b.n	8018a72 <USB_EPStartXfer+0xa26>
 8018792:	46c0      	nop			@ (mov r8, r8)
 8018794:	00000402 	.word	0x00000402
 8018798:	ffff8000 	.word	0xffff8000
 801879c:	00000406 	.word	0x00000406
 80187a0:	ffff8e8f 	.word	0xffff8e8f
 80187a4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	6a1a      	ldr	r2, [r3, #32]
 80187ac:	1d7b      	adds	r3, r7, #5
 80187ae:	33ff      	adds	r3, #255	@ 0xff
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	1ad2      	subs	r2, r2, r3
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80187b8:	687a      	ldr	r2, [r7, #4]
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	009b      	lsls	r3, r3, #2
 80187c0:	18d3      	adds	r3, r2, r3
 80187c2:	881b      	ldrh	r3, [r3, #0]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	001a      	movs	r2, r3
 80187c8:	2340      	movs	r3, #64	@ 0x40
 80187ca:	4013      	ands	r3, r2
 80187cc:	d100      	bne.n	80187d0 <USB_EPStartXfer+0x784>
 80187ce:	e0a4      	b.n	801891a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	785b      	ldrb	r3, [r3, #1]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d000      	beq.n	80187de <USB_EPStartXfer+0x792>
 80187dc:	e070      	b.n	80188c0 <USB_EPStartXfer+0x874>
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	2250      	movs	r2, #80	@ 0x50
 80187e6:	5a9b      	ldrh	r3, [r3, r2]
 80187e8:	b29b      	uxth	r3, r3
 80187ea:	001a      	movs	r2, r3
 80187ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80187ee:	189b      	adds	r3, r3, r2
 80187f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	781b      	ldrb	r3, [r3, #0]
 80187f6:	00da      	lsls	r2, r3, #3
 80187f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80187fa:	18d3      	adds	r3, r2, r3
 80187fc:	4abc      	ldr	r2, [pc, #752]	@ (8018af0 <USB_EPStartXfer+0xaa4>)
 80187fe:	4694      	mov	ip, r2
 8018800:	4463      	add	r3, ip
 8018802:	667b      	str	r3, [r7, #100]	@ 0x64
 8018804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018806:	881b      	ldrh	r3, [r3, #0]
 8018808:	b29b      	uxth	r3, r3
 801880a:	059b      	lsls	r3, r3, #22
 801880c:	0d9b      	lsrs	r3, r3, #22
 801880e:	b29a      	uxth	r2, r3
 8018810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018812:	801a      	strh	r2, [r3, #0]
 8018814:	1d7b      	adds	r3, r7, #5
 8018816:	33ff      	adds	r3, #255	@ 0xff
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	2b3e      	cmp	r3, #62	@ 0x3e
 801881c:	d922      	bls.n	8018864 <USB_EPStartXfer+0x818>
 801881e:	1d7b      	adds	r3, r7, #5
 8018820:	33ff      	adds	r3, #255	@ 0xff
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	095b      	lsrs	r3, r3, #5
 8018826:	21f0      	movs	r1, #240	@ 0xf0
 8018828:	187a      	adds	r2, r7, r1
 801882a:	6013      	str	r3, [r2, #0]
 801882c:	1d7b      	adds	r3, r7, #5
 801882e:	33ff      	adds	r3, #255	@ 0xff
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	221f      	movs	r2, #31
 8018834:	4013      	ands	r3, r2
 8018836:	d104      	bne.n	8018842 <USB_EPStartXfer+0x7f6>
 8018838:	187b      	adds	r3, r7, r1
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	3b01      	subs	r3, #1
 801883e:	187a      	adds	r2, r7, r1
 8018840:	6013      	str	r3, [r2, #0]
 8018842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018844:	881b      	ldrh	r3, [r3, #0]
 8018846:	b29a      	uxth	r2, r3
 8018848:	23f0      	movs	r3, #240	@ 0xf0
 801884a:	18fb      	adds	r3, r7, r3
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	b29b      	uxth	r3, r3
 8018850:	029b      	lsls	r3, r3, #10
 8018852:	b29b      	uxth	r3, r3
 8018854:	4313      	orrs	r3, r2
 8018856:	b29b      	uxth	r3, r3
 8018858:	4aa6      	ldr	r2, [pc, #664]	@ (8018af4 <USB_EPStartXfer+0xaa8>)
 801885a:	4313      	orrs	r3, r2
 801885c:	b29a      	uxth	r2, r3
 801885e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018860:	801a      	strh	r2, [r3, #0]
 8018862:	e048      	b.n	80188f6 <USB_EPStartXfer+0x8aa>
 8018864:	1d7b      	adds	r3, r7, #5
 8018866:	33ff      	adds	r3, #255	@ 0xff
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d108      	bne.n	8018880 <USB_EPStartXfer+0x834>
 801886e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018870:	881b      	ldrh	r3, [r3, #0]
 8018872:	b29b      	uxth	r3, r3
 8018874:	4a9f      	ldr	r2, [pc, #636]	@ (8018af4 <USB_EPStartXfer+0xaa8>)
 8018876:	4313      	orrs	r3, r2
 8018878:	b29a      	uxth	r2, r3
 801887a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801887c:	801a      	strh	r2, [r3, #0]
 801887e:	e03a      	b.n	80188f6 <USB_EPStartXfer+0x8aa>
 8018880:	1d7b      	adds	r3, r7, #5
 8018882:	33ff      	adds	r3, #255	@ 0xff
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	085b      	lsrs	r3, r3, #1
 8018888:	21f0      	movs	r1, #240	@ 0xf0
 801888a:	187a      	adds	r2, r7, r1
 801888c:	6013      	str	r3, [r2, #0]
 801888e:	1d7b      	adds	r3, r7, #5
 8018890:	33ff      	adds	r3, #255	@ 0xff
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	2201      	movs	r2, #1
 8018896:	4013      	ands	r3, r2
 8018898:	d004      	beq.n	80188a4 <USB_EPStartXfer+0x858>
 801889a:	187b      	adds	r3, r7, r1
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	3301      	adds	r3, #1
 80188a0:	187a      	adds	r2, r7, r1
 80188a2:	6013      	str	r3, [r2, #0]
 80188a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188a6:	881b      	ldrh	r3, [r3, #0]
 80188a8:	b29a      	uxth	r2, r3
 80188aa:	23f0      	movs	r3, #240	@ 0xf0
 80188ac:	18fb      	adds	r3, r7, r3
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	029b      	lsls	r3, r3, #10
 80188b4:	b29b      	uxth	r3, r3
 80188b6:	4313      	orrs	r3, r2
 80188b8:	b29a      	uxth	r2, r3
 80188ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188bc:	801a      	strh	r2, [r3, #0]
 80188be:	e01a      	b.n	80188f6 <USB_EPStartXfer+0x8aa>
 80188c0:	683b      	ldr	r3, [r7, #0]
 80188c2:	785b      	ldrb	r3, [r3, #1]
 80188c4:	2b01      	cmp	r3, #1
 80188c6:	d116      	bne.n	80188f6 <USB_EPStartXfer+0x8aa>
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2250      	movs	r2, #80	@ 0x50
 80188cc:	5a9b      	ldrh	r3, [r3, r2]
 80188ce:	b29b      	uxth	r3, r3
 80188d0:	001a      	movs	r2, r3
 80188d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80188d4:	189b      	adds	r3, r3, r2
 80188d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80188d8:	683b      	ldr	r3, [r7, #0]
 80188da:	781b      	ldrb	r3, [r3, #0]
 80188dc:	00da      	lsls	r2, r3, #3
 80188de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80188e0:	18d3      	adds	r3, r2, r3
 80188e2:	4a83      	ldr	r2, [pc, #524]	@ (8018af0 <USB_EPStartXfer+0xaa4>)
 80188e4:	4694      	mov	ip, r2
 80188e6:	4463      	add	r3, ip
 80188e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80188ea:	1d7b      	adds	r3, r7, #5
 80188ec:	33ff      	adds	r3, #255	@ 0xff
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	b29a      	uxth	r2, r3
 80188f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80188f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80188f6:	2076      	movs	r0, #118	@ 0x76
 80188f8:	183b      	adds	r3, r7, r0
 80188fa:	683a      	ldr	r2, [r7, #0]
 80188fc:	8952      	ldrh	r2, [r2, #10]
 80188fe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018900:	683b      	ldr	r3, [r7, #0]
 8018902:	6959      	ldr	r1, [r3, #20]
 8018904:	1d7b      	adds	r3, r7, #5
 8018906:	33ff      	adds	r3, #255	@ 0xff
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	b29c      	uxth	r4, r3
 801890c:	183b      	adds	r3, r7, r0
 801890e:	881a      	ldrh	r2, [r3, #0]
 8018910:	6878      	ldr	r0, [r7, #4]
 8018912:	0023      	movs	r3, r4
 8018914:	f000 fe0c 	bl	8019530 <USB_WritePMA>
 8018918:	e0ab      	b.n	8018a72 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	785b      	ldrb	r3, [r3, #1]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d000      	beq.n	8018924 <USB_EPStartXfer+0x8d8>
 8018922:	e070      	b.n	8018a06 <USB_EPStartXfer+0x9ba>
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	2250      	movs	r2, #80	@ 0x50
 801892c:	5a9b      	ldrh	r3, [r3, r2]
 801892e:	b29b      	uxth	r3, r3
 8018930:	001a      	movs	r2, r3
 8018932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018934:	189b      	adds	r3, r3, r2
 8018936:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018938:	683b      	ldr	r3, [r7, #0]
 801893a:	781b      	ldrb	r3, [r3, #0]
 801893c:	00da      	lsls	r2, r3, #3
 801893e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018940:	18d3      	adds	r3, r2, r3
 8018942:	4a6d      	ldr	r2, [pc, #436]	@ (8018af8 <USB_EPStartXfer+0xaac>)
 8018944:	4694      	mov	ip, r2
 8018946:	4463      	add	r3, ip
 8018948:	67bb      	str	r3, [r7, #120]	@ 0x78
 801894a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801894c:	881b      	ldrh	r3, [r3, #0]
 801894e:	b29b      	uxth	r3, r3
 8018950:	059b      	lsls	r3, r3, #22
 8018952:	0d9b      	lsrs	r3, r3, #22
 8018954:	b29a      	uxth	r2, r3
 8018956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018958:	801a      	strh	r2, [r3, #0]
 801895a:	1d7b      	adds	r3, r7, #5
 801895c:	33ff      	adds	r3, #255	@ 0xff
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	2b3e      	cmp	r3, #62	@ 0x3e
 8018962:	d922      	bls.n	80189aa <USB_EPStartXfer+0x95e>
 8018964:	1d7b      	adds	r3, r7, #5
 8018966:	33ff      	adds	r3, #255	@ 0xff
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	095b      	lsrs	r3, r3, #5
 801896c:	21ec      	movs	r1, #236	@ 0xec
 801896e:	187a      	adds	r2, r7, r1
 8018970:	6013      	str	r3, [r2, #0]
 8018972:	1d7b      	adds	r3, r7, #5
 8018974:	33ff      	adds	r3, #255	@ 0xff
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	221f      	movs	r2, #31
 801897a:	4013      	ands	r3, r2
 801897c:	d104      	bne.n	8018988 <USB_EPStartXfer+0x93c>
 801897e:	187b      	adds	r3, r7, r1
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	3b01      	subs	r3, #1
 8018984:	187a      	adds	r2, r7, r1
 8018986:	6013      	str	r3, [r2, #0]
 8018988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801898a:	881b      	ldrh	r3, [r3, #0]
 801898c:	b29a      	uxth	r2, r3
 801898e:	23ec      	movs	r3, #236	@ 0xec
 8018990:	18fb      	adds	r3, r7, r3
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	b29b      	uxth	r3, r3
 8018996:	029b      	lsls	r3, r3, #10
 8018998:	b29b      	uxth	r3, r3
 801899a:	4313      	orrs	r3, r2
 801899c:	b29b      	uxth	r3, r3
 801899e:	4a55      	ldr	r2, [pc, #340]	@ (8018af4 <USB_EPStartXfer+0xaa8>)
 80189a0:	4313      	orrs	r3, r2
 80189a2:	b29a      	uxth	r2, r3
 80189a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80189a6:	801a      	strh	r2, [r3, #0]
 80189a8:	e052      	b.n	8018a50 <USB_EPStartXfer+0xa04>
 80189aa:	1d7b      	adds	r3, r7, #5
 80189ac:	33ff      	adds	r3, #255	@ 0xff
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d108      	bne.n	80189c6 <USB_EPStartXfer+0x97a>
 80189b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80189b6:	881b      	ldrh	r3, [r3, #0]
 80189b8:	b29b      	uxth	r3, r3
 80189ba:	4a4e      	ldr	r2, [pc, #312]	@ (8018af4 <USB_EPStartXfer+0xaa8>)
 80189bc:	4313      	orrs	r3, r2
 80189be:	b29a      	uxth	r2, r3
 80189c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80189c2:	801a      	strh	r2, [r3, #0]
 80189c4:	e044      	b.n	8018a50 <USB_EPStartXfer+0xa04>
 80189c6:	1d7b      	adds	r3, r7, #5
 80189c8:	33ff      	adds	r3, #255	@ 0xff
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	085b      	lsrs	r3, r3, #1
 80189ce:	21ec      	movs	r1, #236	@ 0xec
 80189d0:	187a      	adds	r2, r7, r1
 80189d2:	6013      	str	r3, [r2, #0]
 80189d4:	1d7b      	adds	r3, r7, #5
 80189d6:	33ff      	adds	r3, #255	@ 0xff
 80189d8:	681b      	ldr	r3, [r3, #0]
 80189da:	2201      	movs	r2, #1
 80189dc:	4013      	ands	r3, r2
 80189de:	d004      	beq.n	80189ea <USB_EPStartXfer+0x99e>
 80189e0:	187b      	adds	r3, r7, r1
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	3301      	adds	r3, #1
 80189e6:	187a      	adds	r2, r7, r1
 80189e8:	6013      	str	r3, [r2, #0]
 80189ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80189ec:	881b      	ldrh	r3, [r3, #0]
 80189ee:	b29a      	uxth	r2, r3
 80189f0:	23ec      	movs	r3, #236	@ 0xec
 80189f2:	18fb      	adds	r3, r7, r3
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	b29b      	uxth	r3, r3
 80189f8:	029b      	lsls	r3, r3, #10
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	4313      	orrs	r3, r2
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018a02:	801a      	strh	r2, [r3, #0]
 8018a04:	e024      	b.n	8018a50 <USB_EPStartXfer+0xa04>
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	785b      	ldrb	r3, [r3, #1]
 8018a0a:	2b01      	cmp	r3, #1
 8018a0c:	d120      	bne.n	8018a50 <USB_EPStartXfer+0xa04>
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2184      	movs	r1, #132	@ 0x84
 8018a12:	187a      	adds	r2, r7, r1
 8018a14:	6013      	str	r3, [r2, #0]
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	2250      	movs	r2, #80	@ 0x50
 8018a1a:	5a9b      	ldrh	r3, [r3, r2]
 8018a1c:	b29b      	uxth	r3, r3
 8018a1e:	001a      	movs	r2, r3
 8018a20:	187b      	adds	r3, r7, r1
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	189b      	adds	r3, r3, r2
 8018a26:	187a      	adds	r2, r7, r1
 8018a28:	6013      	str	r3, [r2, #0]
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	00da      	lsls	r2, r3, #3
 8018a30:	187b      	adds	r3, r7, r1
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	18d3      	adds	r3, r2, r3
 8018a36:	4a30      	ldr	r2, [pc, #192]	@ (8018af8 <USB_EPStartXfer+0xaac>)
 8018a38:	4694      	mov	ip, r2
 8018a3a:	4463      	add	r3, ip
 8018a3c:	2180      	movs	r1, #128	@ 0x80
 8018a3e:	187a      	adds	r2, r7, r1
 8018a40:	6013      	str	r3, [r2, #0]
 8018a42:	1d7b      	adds	r3, r7, #5
 8018a44:	33ff      	adds	r3, #255	@ 0xff
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	b29a      	uxth	r2, r3
 8018a4a:	187b      	adds	r3, r7, r1
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8018a50:	2076      	movs	r0, #118	@ 0x76
 8018a52:	183b      	adds	r3, r7, r0
 8018a54:	683a      	ldr	r2, [r7, #0]
 8018a56:	8912      	ldrh	r2, [r2, #8]
 8018a58:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018a5a:	683b      	ldr	r3, [r7, #0]
 8018a5c:	6959      	ldr	r1, [r3, #20]
 8018a5e:	1d7b      	adds	r3, r7, #5
 8018a60:	33ff      	adds	r3, #255	@ 0xff
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	b29c      	uxth	r4, r3
 8018a66:	183b      	adds	r3, r7, r0
 8018a68:	881a      	ldrh	r2, [r3, #0]
 8018a6a:	6878      	ldr	r0, [r7, #4]
 8018a6c:	0023      	movs	r3, r4
 8018a6e:	f000 fd5f 	bl	8019530 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	683b      	ldr	r3, [r7, #0]
 8018a76:	781b      	ldrb	r3, [r3, #0]
 8018a78:	009b      	lsls	r3, r3, #2
 8018a7a:	18d3      	adds	r3, r2, r3
 8018a7c:	881b      	ldrh	r3, [r3, #0]
 8018a7e:	b29a      	uxth	r2, r3
 8018a80:	200a      	movs	r0, #10
 8018a82:	183b      	adds	r3, r7, r0
 8018a84:	491d      	ldr	r1, [pc, #116]	@ (8018afc <USB_EPStartXfer+0xab0>)
 8018a86:	400a      	ands	r2, r1
 8018a88:	801a      	strh	r2, [r3, #0]
 8018a8a:	183b      	adds	r3, r7, r0
 8018a8c:	183a      	adds	r2, r7, r0
 8018a8e:	8812      	ldrh	r2, [r2, #0]
 8018a90:	2110      	movs	r1, #16
 8018a92:	404a      	eors	r2, r1
 8018a94:	801a      	strh	r2, [r3, #0]
 8018a96:	183b      	adds	r3, r7, r0
 8018a98:	183a      	adds	r2, r7, r0
 8018a9a:	8812      	ldrh	r2, [r2, #0]
 8018a9c:	2120      	movs	r1, #32
 8018a9e:	404a      	eors	r2, r1
 8018aa0:	801a      	strh	r2, [r3, #0]
 8018aa2:	687a      	ldr	r2, [r7, #4]
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	18d3      	adds	r3, r2, r3
 8018aac:	183a      	adds	r2, r7, r0
 8018aae:	8812      	ldrh	r2, [r2, #0]
 8018ab0:	4913      	ldr	r1, [pc, #76]	@ (8018b00 <USB_EPStartXfer+0xab4>)
 8018ab2:	430a      	orrs	r2, r1
 8018ab4:	b292      	uxth	r2, r2
 8018ab6:	801a      	strh	r2, [r3, #0]
 8018ab8:	f000 fbf4 	bl	80192a4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	7b1b      	ldrb	r3, [r3, #12]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d000      	beq.n	8018ac6 <USB_EPStartXfer+0xa7a>
 8018ac4:	e0a9      	b.n	8018c1a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	699a      	ldr	r2, [r3, #24]
 8018aca:	683b      	ldr	r3, [r7, #0]
 8018acc:	691b      	ldr	r3, [r3, #16]
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d918      	bls.n	8018b04 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	691b      	ldr	r3, [r3, #16]
 8018ad6:	1d7a      	adds	r2, r7, #5
 8018ad8:	32ff      	adds	r2, #255	@ 0xff
 8018ada:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	699a      	ldr	r2, [r3, #24]
 8018ae0:	1d7b      	adds	r3, r7, #5
 8018ae2:	33ff      	adds	r3, #255	@ 0xff
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	1ad2      	subs	r2, r2, r3
 8018ae8:	683b      	ldr	r3, [r7, #0]
 8018aea:	619a      	str	r2, [r3, #24]
 8018aec:	e012      	b.n	8018b14 <USB_EPStartXfer+0xac8>
 8018aee:	46c0      	nop			@ (mov r8, r8)
 8018af0:	00000406 	.word	0x00000406
 8018af4:	ffff8000 	.word	0xffff8000
 8018af8:	00000402 	.word	0x00000402
 8018afc:	ffff8fbf 	.word	0xffff8fbf
 8018b00:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8018b04:	683b      	ldr	r3, [r7, #0]
 8018b06:	699b      	ldr	r3, [r3, #24]
 8018b08:	1d7a      	adds	r2, r7, #5
 8018b0a:	32ff      	adds	r2, #255	@ 0xff
 8018b0c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	2200      	movs	r2, #0
 8018b12:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2190      	movs	r1, #144	@ 0x90
 8018b18:	187a      	adds	r2, r7, r1
 8018b1a:	6013      	str	r3, [r2, #0]
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2250      	movs	r2, #80	@ 0x50
 8018b20:	5a9b      	ldrh	r3, [r3, r2]
 8018b22:	b29b      	uxth	r3, r3
 8018b24:	001a      	movs	r2, r3
 8018b26:	187b      	adds	r3, r7, r1
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	189b      	adds	r3, r3, r2
 8018b2c:	187a      	adds	r2, r7, r1
 8018b2e:	6013      	str	r3, [r2, #0]
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	781b      	ldrb	r3, [r3, #0]
 8018b34:	00da      	lsls	r2, r3, #3
 8018b36:	187b      	adds	r3, r7, r1
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	18d3      	adds	r3, r2, r3
 8018b3c:	4acf      	ldr	r2, [pc, #828]	@ (8018e7c <USB_EPStartXfer+0xe30>)
 8018b3e:	4694      	mov	ip, r2
 8018b40:	4463      	add	r3, ip
 8018b42:	218c      	movs	r1, #140	@ 0x8c
 8018b44:	187a      	adds	r2, r7, r1
 8018b46:	6013      	str	r3, [r2, #0]
 8018b48:	187b      	adds	r3, r7, r1
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	881b      	ldrh	r3, [r3, #0]
 8018b4e:	b29b      	uxth	r3, r3
 8018b50:	059b      	lsls	r3, r3, #22
 8018b52:	0d9b      	lsrs	r3, r3, #22
 8018b54:	b29a      	uxth	r2, r3
 8018b56:	187b      	adds	r3, r7, r1
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	801a      	strh	r2, [r3, #0]
 8018b5c:	1d7b      	adds	r3, r7, #5
 8018b5e:	33ff      	adds	r3, #255	@ 0xff
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	2b3e      	cmp	r3, #62	@ 0x3e
 8018b64:	d925      	bls.n	8018bb2 <USB_EPStartXfer+0xb66>
 8018b66:	1d7b      	adds	r3, r7, #5
 8018b68:	33ff      	adds	r3, #255	@ 0xff
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	095b      	lsrs	r3, r3, #5
 8018b6e:	21e8      	movs	r1, #232	@ 0xe8
 8018b70:	187a      	adds	r2, r7, r1
 8018b72:	6013      	str	r3, [r2, #0]
 8018b74:	1d7b      	adds	r3, r7, #5
 8018b76:	33ff      	adds	r3, #255	@ 0xff
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	221f      	movs	r2, #31
 8018b7c:	4013      	ands	r3, r2
 8018b7e:	d104      	bne.n	8018b8a <USB_EPStartXfer+0xb3e>
 8018b80:	187b      	adds	r3, r7, r1
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	3b01      	subs	r3, #1
 8018b86:	187a      	adds	r2, r7, r1
 8018b88:	6013      	str	r3, [r2, #0]
 8018b8a:	218c      	movs	r1, #140	@ 0x8c
 8018b8c:	187b      	adds	r3, r7, r1
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	881b      	ldrh	r3, [r3, #0]
 8018b92:	b29a      	uxth	r2, r3
 8018b94:	23e8      	movs	r3, #232	@ 0xe8
 8018b96:	18fb      	adds	r3, r7, r3
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	b29b      	uxth	r3, r3
 8018b9c:	029b      	lsls	r3, r3, #10
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	4313      	orrs	r3, r2
 8018ba2:	b29b      	uxth	r3, r3
 8018ba4:	4ab6      	ldr	r2, [pc, #728]	@ (8018e80 <USB_EPStartXfer+0xe34>)
 8018ba6:	4313      	orrs	r3, r2
 8018ba8:	b29a      	uxth	r2, r3
 8018baa:	187b      	adds	r3, r7, r1
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	801a      	strh	r2, [r3, #0]
 8018bb0:	e353      	b.n	801925a <USB_EPStartXfer+0x120e>
 8018bb2:	1d7b      	adds	r3, r7, #5
 8018bb4:	33ff      	adds	r3, #255	@ 0xff
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d10b      	bne.n	8018bd4 <USB_EPStartXfer+0xb88>
 8018bbc:	218c      	movs	r1, #140	@ 0x8c
 8018bbe:	187b      	adds	r3, r7, r1
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	881b      	ldrh	r3, [r3, #0]
 8018bc4:	b29b      	uxth	r3, r3
 8018bc6:	4aae      	ldr	r2, [pc, #696]	@ (8018e80 <USB_EPStartXfer+0xe34>)
 8018bc8:	4313      	orrs	r3, r2
 8018bca:	b29a      	uxth	r2, r3
 8018bcc:	187b      	adds	r3, r7, r1
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	801a      	strh	r2, [r3, #0]
 8018bd2:	e342      	b.n	801925a <USB_EPStartXfer+0x120e>
 8018bd4:	1d7b      	adds	r3, r7, #5
 8018bd6:	33ff      	adds	r3, #255	@ 0xff
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	085b      	lsrs	r3, r3, #1
 8018bdc:	21e8      	movs	r1, #232	@ 0xe8
 8018bde:	187a      	adds	r2, r7, r1
 8018be0:	6013      	str	r3, [r2, #0]
 8018be2:	1d7b      	adds	r3, r7, #5
 8018be4:	33ff      	adds	r3, #255	@ 0xff
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	2201      	movs	r2, #1
 8018bea:	4013      	ands	r3, r2
 8018bec:	d004      	beq.n	8018bf8 <USB_EPStartXfer+0xbac>
 8018bee:	187b      	adds	r3, r7, r1
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	187a      	adds	r2, r7, r1
 8018bf6:	6013      	str	r3, [r2, #0]
 8018bf8:	218c      	movs	r1, #140	@ 0x8c
 8018bfa:	187b      	adds	r3, r7, r1
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	881b      	ldrh	r3, [r3, #0]
 8018c00:	b29a      	uxth	r2, r3
 8018c02:	23e8      	movs	r3, #232	@ 0xe8
 8018c04:	18fb      	adds	r3, r7, r3
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	b29b      	uxth	r3, r3
 8018c0a:	029b      	lsls	r3, r3, #10
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	4313      	orrs	r3, r2
 8018c10:	b29a      	uxth	r2, r3
 8018c12:	187b      	adds	r3, r7, r1
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	801a      	strh	r2, [r3, #0]
 8018c18:	e31f      	b.n	801925a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8018c1a:	683b      	ldr	r3, [r7, #0]
 8018c1c:	78db      	ldrb	r3, [r3, #3]
 8018c1e:	2b02      	cmp	r3, #2
 8018c20:	d000      	beq.n	8018c24 <USB_EPStartXfer+0xbd8>
 8018c22:	e191      	b.n	8018f48 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8018c24:	683b      	ldr	r3, [r7, #0]
 8018c26:	785b      	ldrb	r3, [r3, #1]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d000      	beq.n	8018c2e <USB_EPStartXfer+0xbe2>
 8018c2c:	e07c      	b.n	8018d28 <USB_EPStartXfer+0xcdc>
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	21ac      	movs	r1, #172	@ 0xac
 8018c32:	187a      	adds	r2, r7, r1
 8018c34:	6013      	str	r3, [r2, #0]
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2250      	movs	r2, #80	@ 0x50
 8018c3a:	5a9b      	ldrh	r3, [r3, r2]
 8018c3c:	b29b      	uxth	r3, r3
 8018c3e:	001a      	movs	r2, r3
 8018c40:	187b      	adds	r3, r7, r1
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	189b      	adds	r3, r3, r2
 8018c46:	187a      	adds	r2, r7, r1
 8018c48:	6013      	str	r3, [r2, #0]
 8018c4a:	683b      	ldr	r3, [r7, #0]
 8018c4c:	781b      	ldrb	r3, [r3, #0]
 8018c4e:	00da      	lsls	r2, r3, #3
 8018c50:	187b      	adds	r3, r7, r1
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	18d3      	adds	r3, r2, r3
 8018c56:	4a8b      	ldr	r2, [pc, #556]	@ (8018e84 <USB_EPStartXfer+0xe38>)
 8018c58:	4694      	mov	ip, r2
 8018c5a:	4463      	add	r3, ip
 8018c5c:	21a8      	movs	r1, #168	@ 0xa8
 8018c5e:	187a      	adds	r2, r7, r1
 8018c60:	6013      	str	r3, [r2, #0]
 8018c62:	187b      	adds	r3, r7, r1
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	881b      	ldrh	r3, [r3, #0]
 8018c68:	b29b      	uxth	r3, r3
 8018c6a:	059b      	lsls	r3, r3, #22
 8018c6c:	0d9b      	lsrs	r3, r3, #22
 8018c6e:	b29a      	uxth	r2, r3
 8018c70:	187b      	adds	r3, r7, r1
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	801a      	strh	r2, [r3, #0]
 8018c76:	683b      	ldr	r3, [r7, #0]
 8018c78:	691b      	ldr	r3, [r3, #16]
 8018c7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8018c7c:	d923      	bls.n	8018cc6 <USB_EPStartXfer+0xc7a>
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	691b      	ldr	r3, [r3, #16]
 8018c82:	095b      	lsrs	r3, r3, #5
 8018c84:	21e4      	movs	r1, #228	@ 0xe4
 8018c86:	187a      	adds	r2, r7, r1
 8018c88:	6013      	str	r3, [r2, #0]
 8018c8a:	683b      	ldr	r3, [r7, #0]
 8018c8c:	691b      	ldr	r3, [r3, #16]
 8018c8e:	221f      	movs	r2, #31
 8018c90:	4013      	ands	r3, r2
 8018c92:	d104      	bne.n	8018c9e <USB_EPStartXfer+0xc52>
 8018c94:	187b      	adds	r3, r7, r1
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	3b01      	subs	r3, #1
 8018c9a:	187a      	adds	r2, r7, r1
 8018c9c:	6013      	str	r3, [r2, #0]
 8018c9e:	21a8      	movs	r1, #168	@ 0xa8
 8018ca0:	187b      	adds	r3, r7, r1
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	881b      	ldrh	r3, [r3, #0]
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	23e4      	movs	r3, #228	@ 0xe4
 8018caa:	18fb      	adds	r3, r7, r3
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	029b      	lsls	r3, r3, #10
 8018cb2:	b29b      	uxth	r3, r3
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	b29b      	uxth	r3, r3
 8018cb8:	4a71      	ldr	r2, [pc, #452]	@ (8018e80 <USB_EPStartXfer+0xe34>)
 8018cba:	4313      	orrs	r3, r2
 8018cbc:	b29a      	uxth	r2, r3
 8018cbe:	187b      	adds	r3, r7, r1
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	801a      	strh	r2, [r3, #0]
 8018cc4:	e054      	b.n	8018d70 <USB_EPStartXfer+0xd24>
 8018cc6:	683b      	ldr	r3, [r7, #0]
 8018cc8:	691b      	ldr	r3, [r3, #16]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d10b      	bne.n	8018ce6 <USB_EPStartXfer+0xc9a>
 8018cce:	21a8      	movs	r1, #168	@ 0xa8
 8018cd0:	187b      	adds	r3, r7, r1
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	881b      	ldrh	r3, [r3, #0]
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	4a69      	ldr	r2, [pc, #420]	@ (8018e80 <USB_EPStartXfer+0xe34>)
 8018cda:	4313      	orrs	r3, r2
 8018cdc:	b29a      	uxth	r2, r3
 8018cde:	187b      	adds	r3, r7, r1
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	801a      	strh	r2, [r3, #0]
 8018ce4:	e044      	b.n	8018d70 <USB_EPStartXfer+0xd24>
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	691b      	ldr	r3, [r3, #16]
 8018cea:	085b      	lsrs	r3, r3, #1
 8018cec:	21e4      	movs	r1, #228	@ 0xe4
 8018cee:	187a      	adds	r2, r7, r1
 8018cf0:	6013      	str	r3, [r2, #0]
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	691b      	ldr	r3, [r3, #16]
 8018cf6:	2201      	movs	r2, #1
 8018cf8:	4013      	ands	r3, r2
 8018cfa:	d004      	beq.n	8018d06 <USB_EPStartXfer+0xcba>
 8018cfc:	187b      	adds	r3, r7, r1
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	3301      	adds	r3, #1
 8018d02:	187a      	adds	r2, r7, r1
 8018d04:	6013      	str	r3, [r2, #0]
 8018d06:	21a8      	movs	r1, #168	@ 0xa8
 8018d08:	187b      	adds	r3, r7, r1
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	881b      	ldrh	r3, [r3, #0]
 8018d0e:	b29a      	uxth	r2, r3
 8018d10:	23e4      	movs	r3, #228	@ 0xe4
 8018d12:	18fb      	adds	r3, r7, r3
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	b29b      	uxth	r3, r3
 8018d18:	029b      	lsls	r3, r3, #10
 8018d1a:	b29b      	uxth	r3, r3
 8018d1c:	4313      	orrs	r3, r2
 8018d1e:	b29a      	uxth	r2, r3
 8018d20:	187b      	adds	r3, r7, r1
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	801a      	strh	r2, [r3, #0]
 8018d26:	e023      	b.n	8018d70 <USB_EPStartXfer+0xd24>
 8018d28:	683b      	ldr	r3, [r7, #0]
 8018d2a:	785b      	ldrb	r3, [r3, #1]
 8018d2c:	2b01      	cmp	r3, #1
 8018d2e:	d11f      	bne.n	8018d70 <USB_EPStartXfer+0xd24>
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	21b4      	movs	r1, #180	@ 0xb4
 8018d34:	187a      	adds	r2, r7, r1
 8018d36:	6013      	str	r3, [r2, #0]
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2250      	movs	r2, #80	@ 0x50
 8018d3c:	5a9b      	ldrh	r3, [r3, r2]
 8018d3e:	b29b      	uxth	r3, r3
 8018d40:	001a      	movs	r2, r3
 8018d42:	187b      	adds	r3, r7, r1
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	189b      	adds	r3, r3, r2
 8018d48:	187a      	adds	r2, r7, r1
 8018d4a:	6013      	str	r3, [r2, #0]
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	781b      	ldrb	r3, [r3, #0]
 8018d50:	00da      	lsls	r2, r3, #3
 8018d52:	187b      	adds	r3, r7, r1
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	18d3      	adds	r3, r2, r3
 8018d58:	4a4a      	ldr	r2, [pc, #296]	@ (8018e84 <USB_EPStartXfer+0xe38>)
 8018d5a:	4694      	mov	ip, r2
 8018d5c:	4463      	add	r3, ip
 8018d5e:	21b0      	movs	r1, #176	@ 0xb0
 8018d60:	187a      	adds	r2, r7, r1
 8018d62:	6013      	str	r3, [r2, #0]
 8018d64:	683b      	ldr	r3, [r7, #0]
 8018d66:	691b      	ldr	r3, [r3, #16]
 8018d68:	b29a      	uxth	r2, r3
 8018d6a:	187b      	adds	r3, r7, r1
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	801a      	strh	r2, [r3, #0]
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	22a4      	movs	r2, #164	@ 0xa4
 8018d74:	18ba      	adds	r2, r7, r2
 8018d76:	6013      	str	r3, [r2, #0]
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	785b      	ldrb	r3, [r3, #1]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d000      	beq.n	8018d82 <USB_EPStartXfer+0xd36>
 8018d80:	e082      	b.n	8018e88 <USB_EPStartXfer+0xe3c>
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	219c      	movs	r1, #156	@ 0x9c
 8018d86:	187a      	adds	r2, r7, r1
 8018d88:	6013      	str	r3, [r2, #0]
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2250      	movs	r2, #80	@ 0x50
 8018d8e:	5a9b      	ldrh	r3, [r3, r2]
 8018d90:	b29b      	uxth	r3, r3
 8018d92:	001a      	movs	r2, r3
 8018d94:	187b      	adds	r3, r7, r1
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	189b      	adds	r3, r3, r2
 8018d9a:	187a      	adds	r2, r7, r1
 8018d9c:	6013      	str	r3, [r2, #0]
 8018d9e:	683b      	ldr	r3, [r7, #0]
 8018da0:	781b      	ldrb	r3, [r3, #0]
 8018da2:	00da      	lsls	r2, r3, #3
 8018da4:	187b      	adds	r3, r7, r1
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	18d3      	adds	r3, r2, r3
 8018daa:	4a34      	ldr	r2, [pc, #208]	@ (8018e7c <USB_EPStartXfer+0xe30>)
 8018dac:	4694      	mov	ip, r2
 8018dae:	4463      	add	r3, ip
 8018db0:	2198      	movs	r1, #152	@ 0x98
 8018db2:	187a      	adds	r2, r7, r1
 8018db4:	6013      	str	r3, [r2, #0]
 8018db6:	187b      	adds	r3, r7, r1
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	881b      	ldrh	r3, [r3, #0]
 8018dbc:	b29b      	uxth	r3, r3
 8018dbe:	059b      	lsls	r3, r3, #22
 8018dc0:	0d9b      	lsrs	r3, r3, #22
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	187b      	adds	r3, r7, r1
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	801a      	strh	r2, [r3, #0]
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	691b      	ldr	r3, [r3, #16]
 8018dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8018dd0:	d923      	bls.n	8018e1a <USB_EPStartXfer+0xdce>
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	691b      	ldr	r3, [r3, #16]
 8018dd6:	095b      	lsrs	r3, r3, #5
 8018dd8:	21e0      	movs	r1, #224	@ 0xe0
 8018dda:	187a      	adds	r2, r7, r1
 8018ddc:	6013      	str	r3, [r2, #0]
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	691b      	ldr	r3, [r3, #16]
 8018de2:	221f      	movs	r2, #31
 8018de4:	4013      	ands	r3, r2
 8018de6:	d104      	bne.n	8018df2 <USB_EPStartXfer+0xda6>
 8018de8:	187b      	adds	r3, r7, r1
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	3b01      	subs	r3, #1
 8018dee:	187a      	adds	r2, r7, r1
 8018df0:	6013      	str	r3, [r2, #0]
 8018df2:	2198      	movs	r1, #152	@ 0x98
 8018df4:	187b      	adds	r3, r7, r1
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	881b      	ldrh	r3, [r3, #0]
 8018dfa:	b29a      	uxth	r2, r3
 8018dfc:	23e0      	movs	r3, #224	@ 0xe0
 8018dfe:	18fb      	adds	r3, r7, r3
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	b29b      	uxth	r3, r3
 8018e04:	029b      	lsls	r3, r3, #10
 8018e06:	b29b      	uxth	r3, r3
 8018e08:	4313      	orrs	r3, r2
 8018e0a:	b29b      	uxth	r3, r3
 8018e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8018e80 <USB_EPStartXfer+0xe34>)
 8018e0e:	4313      	orrs	r3, r2
 8018e10:	b29a      	uxth	r2, r3
 8018e12:	187b      	adds	r3, r7, r1
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	801a      	strh	r2, [r3, #0]
 8018e18:	e057      	b.n	8018eca <USB_EPStartXfer+0xe7e>
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	691b      	ldr	r3, [r3, #16]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d10b      	bne.n	8018e3a <USB_EPStartXfer+0xdee>
 8018e22:	2198      	movs	r1, #152	@ 0x98
 8018e24:	187b      	adds	r3, r7, r1
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	881b      	ldrh	r3, [r3, #0]
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	4a14      	ldr	r2, [pc, #80]	@ (8018e80 <USB_EPStartXfer+0xe34>)
 8018e2e:	4313      	orrs	r3, r2
 8018e30:	b29a      	uxth	r2, r3
 8018e32:	187b      	adds	r3, r7, r1
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	801a      	strh	r2, [r3, #0]
 8018e38:	e047      	b.n	8018eca <USB_EPStartXfer+0xe7e>
 8018e3a:	683b      	ldr	r3, [r7, #0]
 8018e3c:	691b      	ldr	r3, [r3, #16]
 8018e3e:	085b      	lsrs	r3, r3, #1
 8018e40:	21e0      	movs	r1, #224	@ 0xe0
 8018e42:	187a      	adds	r2, r7, r1
 8018e44:	6013      	str	r3, [r2, #0]
 8018e46:	683b      	ldr	r3, [r7, #0]
 8018e48:	691b      	ldr	r3, [r3, #16]
 8018e4a:	2201      	movs	r2, #1
 8018e4c:	4013      	ands	r3, r2
 8018e4e:	d004      	beq.n	8018e5a <USB_EPStartXfer+0xe0e>
 8018e50:	187b      	adds	r3, r7, r1
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	3301      	adds	r3, #1
 8018e56:	187a      	adds	r2, r7, r1
 8018e58:	6013      	str	r3, [r2, #0]
 8018e5a:	2198      	movs	r1, #152	@ 0x98
 8018e5c:	187b      	adds	r3, r7, r1
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	881b      	ldrh	r3, [r3, #0]
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	23e0      	movs	r3, #224	@ 0xe0
 8018e66:	18fb      	adds	r3, r7, r3
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	b29b      	uxth	r3, r3
 8018e6c:	029b      	lsls	r3, r3, #10
 8018e6e:	b29b      	uxth	r3, r3
 8018e70:	4313      	orrs	r3, r2
 8018e72:	b29a      	uxth	r2, r3
 8018e74:	187b      	adds	r3, r7, r1
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	801a      	strh	r2, [r3, #0]
 8018e7a:	e026      	b.n	8018eca <USB_EPStartXfer+0xe7e>
 8018e7c:	00000406 	.word	0x00000406
 8018e80:	ffff8000 	.word	0xffff8000
 8018e84:	00000402 	.word	0x00000402
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	785b      	ldrb	r3, [r3, #1]
 8018e8c:	2b01      	cmp	r3, #1
 8018e8e:	d11c      	bne.n	8018eca <USB_EPStartXfer+0xe7e>
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2250      	movs	r2, #80	@ 0x50
 8018e94:	5a9b      	ldrh	r3, [r3, r2]
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	001a      	movs	r2, r3
 8018e9a:	21a4      	movs	r1, #164	@ 0xa4
 8018e9c:	187b      	adds	r3, r7, r1
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	189b      	adds	r3, r3, r2
 8018ea2:	187a      	adds	r2, r7, r1
 8018ea4:	6013      	str	r3, [r2, #0]
 8018ea6:	683b      	ldr	r3, [r7, #0]
 8018ea8:	781b      	ldrb	r3, [r3, #0]
 8018eaa:	00da      	lsls	r2, r3, #3
 8018eac:	187b      	adds	r3, r7, r1
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	18d3      	adds	r3, r2, r3
 8018eb2:	4ad2      	ldr	r2, [pc, #840]	@ (80191fc <USB_EPStartXfer+0x11b0>)
 8018eb4:	4694      	mov	ip, r2
 8018eb6:	4463      	add	r3, ip
 8018eb8:	21a0      	movs	r1, #160	@ 0xa0
 8018eba:	187a      	adds	r2, r7, r1
 8018ebc:	6013      	str	r3, [r2, #0]
 8018ebe:	683b      	ldr	r3, [r7, #0]
 8018ec0:	691b      	ldr	r3, [r3, #16]
 8018ec2:	b29a      	uxth	r2, r3
 8018ec4:	187b      	adds	r3, r7, r1
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8018eca:	683b      	ldr	r3, [r7, #0]
 8018ecc:	69db      	ldr	r3, [r3, #28]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d100      	bne.n	8018ed4 <USB_EPStartXfer+0xe88>
 8018ed2:	e1c2      	b.n	801925a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8018ed4:	687a      	ldr	r2, [r7, #4]
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	781b      	ldrb	r3, [r3, #0]
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	18d2      	adds	r2, r2, r3
 8018ede:	2196      	movs	r1, #150	@ 0x96
 8018ee0:	187b      	adds	r3, r7, r1
 8018ee2:	8812      	ldrh	r2, [r2, #0]
 8018ee4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8018ee6:	187b      	adds	r3, r7, r1
 8018ee8:	881a      	ldrh	r2, [r3, #0]
 8018eea:	2380      	movs	r3, #128	@ 0x80
 8018eec:	01db      	lsls	r3, r3, #7
 8018eee:	4013      	ands	r3, r2
 8018ef0:	d004      	beq.n	8018efc <USB_EPStartXfer+0xeb0>
 8018ef2:	187b      	adds	r3, r7, r1
 8018ef4:	881b      	ldrh	r3, [r3, #0]
 8018ef6:	2240      	movs	r2, #64	@ 0x40
 8018ef8:	4013      	ands	r3, r2
 8018efa:	d10d      	bne.n	8018f18 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8018efc:	2196      	movs	r1, #150	@ 0x96
 8018efe:	187b      	adds	r3, r7, r1
 8018f00:	881a      	ldrh	r2, [r3, #0]
 8018f02:	2380      	movs	r3, #128	@ 0x80
 8018f04:	01db      	lsls	r3, r3, #7
 8018f06:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8018f08:	d000      	beq.n	8018f0c <USB_EPStartXfer+0xec0>
 8018f0a:	e1a6      	b.n	801925a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8018f0c:	187b      	adds	r3, r7, r1
 8018f0e:	881b      	ldrh	r3, [r3, #0]
 8018f10:	2240      	movs	r2, #64	@ 0x40
 8018f12:	4013      	ands	r3, r2
 8018f14:	d000      	beq.n	8018f18 <USB_EPStartXfer+0xecc>
 8018f16:	e1a0      	b.n	801925a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	009b      	lsls	r3, r3, #2
 8018f20:	18d3      	adds	r3, r2, r3
 8018f22:	881b      	ldrh	r3, [r3, #0]
 8018f24:	b29a      	uxth	r2, r3
 8018f26:	2094      	movs	r0, #148	@ 0x94
 8018f28:	183b      	adds	r3, r7, r0
 8018f2a:	49b5      	ldr	r1, [pc, #724]	@ (8019200 <USB_EPStartXfer+0x11b4>)
 8018f2c:	400a      	ands	r2, r1
 8018f2e:	801a      	strh	r2, [r3, #0]
 8018f30:	687a      	ldr	r2, [r7, #4]
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	781b      	ldrb	r3, [r3, #0]
 8018f36:	009b      	lsls	r3, r3, #2
 8018f38:	18d3      	adds	r3, r2, r3
 8018f3a:	183a      	adds	r2, r7, r0
 8018f3c:	8812      	ldrh	r2, [r2, #0]
 8018f3e:	49b1      	ldr	r1, [pc, #708]	@ (8019204 <USB_EPStartXfer+0x11b8>)
 8018f40:	430a      	orrs	r2, r1
 8018f42:	b292      	uxth	r2, r2
 8018f44:	801a      	strh	r2, [r3, #0]
 8018f46:	e188      	b.n	801925a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	78db      	ldrb	r3, [r3, #3]
 8018f4c:	2b01      	cmp	r3, #1
 8018f4e:	d000      	beq.n	8018f52 <USB_EPStartXfer+0xf06>
 8018f50:	e181      	b.n	8019256 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8018f52:	683b      	ldr	r3, [r7, #0]
 8018f54:	699a      	ldr	r2, [r3, #24]
 8018f56:	683b      	ldr	r3, [r7, #0]
 8018f58:	691b      	ldr	r3, [r3, #16]
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	d90d      	bls.n	8018f7a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	691b      	ldr	r3, [r3, #16]
 8018f62:	1d7a      	adds	r2, r7, #5
 8018f64:	32ff      	adds	r2, #255	@ 0xff
 8018f66:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8018f68:	683b      	ldr	r3, [r7, #0]
 8018f6a:	699a      	ldr	r2, [r3, #24]
 8018f6c:	1d7b      	adds	r3, r7, #5
 8018f6e:	33ff      	adds	r3, #255	@ 0xff
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	1ad2      	subs	r2, r2, r3
 8018f74:	683b      	ldr	r3, [r7, #0]
 8018f76:	619a      	str	r2, [r3, #24]
 8018f78:	e007      	b.n	8018f8a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	699b      	ldr	r3, [r3, #24]
 8018f7e:	1d7a      	adds	r2, r7, #5
 8018f80:	32ff      	adds	r2, #255	@ 0xff
 8018f82:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8018f84:	683b      	ldr	r3, [r7, #0]
 8018f86:	2200      	movs	r2, #0
 8018f88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8018f8a:	683b      	ldr	r3, [r7, #0]
 8018f8c:	785b      	ldrb	r3, [r3, #1]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d000      	beq.n	8018f94 <USB_EPStartXfer+0xf48>
 8018f92:	e082      	b.n	801909a <USB_EPStartXfer+0x104e>
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	21cc      	movs	r1, #204	@ 0xcc
 8018f98:	187a      	adds	r2, r7, r1
 8018f9a:	6013      	str	r3, [r2, #0]
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	2250      	movs	r2, #80	@ 0x50
 8018fa0:	5a9b      	ldrh	r3, [r3, r2]
 8018fa2:	b29b      	uxth	r3, r3
 8018fa4:	001a      	movs	r2, r3
 8018fa6:	187b      	adds	r3, r7, r1
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	189b      	adds	r3, r3, r2
 8018fac:	187a      	adds	r2, r7, r1
 8018fae:	6013      	str	r3, [r2, #0]
 8018fb0:	683b      	ldr	r3, [r7, #0]
 8018fb2:	781b      	ldrb	r3, [r3, #0]
 8018fb4:	00da      	lsls	r2, r3, #3
 8018fb6:	187b      	adds	r3, r7, r1
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	18d3      	adds	r3, r2, r3
 8018fbc:	4a92      	ldr	r2, [pc, #584]	@ (8019208 <USB_EPStartXfer+0x11bc>)
 8018fbe:	4694      	mov	ip, r2
 8018fc0:	4463      	add	r3, ip
 8018fc2:	21c8      	movs	r1, #200	@ 0xc8
 8018fc4:	187a      	adds	r2, r7, r1
 8018fc6:	6013      	str	r3, [r2, #0]
 8018fc8:	187b      	adds	r3, r7, r1
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	881b      	ldrh	r3, [r3, #0]
 8018fce:	b29b      	uxth	r3, r3
 8018fd0:	059b      	lsls	r3, r3, #22
 8018fd2:	0d9b      	lsrs	r3, r3, #22
 8018fd4:	b29a      	uxth	r2, r3
 8018fd6:	187b      	adds	r3, r7, r1
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	801a      	strh	r2, [r3, #0]
 8018fdc:	1d7b      	adds	r3, r7, #5
 8018fde:	33ff      	adds	r3, #255	@ 0xff
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	2b3e      	cmp	r3, #62	@ 0x3e
 8018fe4:	d925      	bls.n	8019032 <USB_EPStartXfer+0xfe6>
 8018fe6:	1d7b      	adds	r3, r7, #5
 8018fe8:	33ff      	adds	r3, #255	@ 0xff
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	095b      	lsrs	r3, r3, #5
 8018fee:	21dc      	movs	r1, #220	@ 0xdc
 8018ff0:	187a      	adds	r2, r7, r1
 8018ff2:	6013      	str	r3, [r2, #0]
 8018ff4:	1d7b      	adds	r3, r7, #5
 8018ff6:	33ff      	adds	r3, #255	@ 0xff
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	221f      	movs	r2, #31
 8018ffc:	4013      	ands	r3, r2
 8018ffe:	d104      	bne.n	801900a <USB_EPStartXfer+0xfbe>
 8019000:	187b      	adds	r3, r7, r1
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	3b01      	subs	r3, #1
 8019006:	187a      	adds	r2, r7, r1
 8019008:	6013      	str	r3, [r2, #0]
 801900a:	21c8      	movs	r1, #200	@ 0xc8
 801900c:	187b      	adds	r3, r7, r1
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	881b      	ldrh	r3, [r3, #0]
 8019012:	b29a      	uxth	r2, r3
 8019014:	23dc      	movs	r3, #220	@ 0xdc
 8019016:	18fb      	adds	r3, r7, r3
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	b29b      	uxth	r3, r3
 801901c:	029b      	lsls	r3, r3, #10
 801901e:	b29b      	uxth	r3, r3
 8019020:	4313      	orrs	r3, r2
 8019022:	b29b      	uxth	r3, r3
 8019024:	4a79      	ldr	r2, [pc, #484]	@ (801920c <USB_EPStartXfer+0x11c0>)
 8019026:	4313      	orrs	r3, r2
 8019028:	b29a      	uxth	r2, r3
 801902a:	187b      	adds	r3, r7, r1
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	801a      	strh	r2, [r3, #0]
 8019030:	e058      	b.n	80190e4 <USB_EPStartXfer+0x1098>
 8019032:	1d7b      	adds	r3, r7, #5
 8019034:	33ff      	adds	r3, #255	@ 0xff
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d10b      	bne.n	8019054 <USB_EPStartXfer+0x1008>
 801903c:	21c8      	movs	r1, #200	@ 0xc8
 801903e:	187b      	adds	r3, r7, r1
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	881b      	ldrh	r3, [r3, #0]
 8019044:	b29b      	uxth	r3, r3
 8019046:	4a71      	ldr	r2, [pc, #452]	@ (801920c <USB_EPStartXfer+0x11c0>)
 8019048:	4313      	orrs	r3, r2
 801904a:	b29a      	uxth	r2, r3
 801904c:	187b      	adds	r3, r7, r1
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	801a      	strh	r2, [r3, #0]
 8019052:	e047      	b.n	80190e4 <USB_EPStartXfer+0x1098>
 8019054:	1d7b      	adds	r3, r7, #5
 8019056:	33ff      	adds	r3, #255	@ 0xff
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	085b      	lsrs	r3, r3, #1
 801905c:	21dc      	movs	r1, #220	@ 0xdc
 801905e:	187a      	adds	r2, r7, r1
 8019060:	6013      	str	r3, [r2, #0]
 8019062:	1d7b      	adds	r3, r7, #5
 8019064:	33ff      	adds	r3, #255	@ 0xff
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	2201      	movs	r2, #1
 801906a:	4013      	ands	r3, r2
 801906c:	d004      	beq.n	8019078 <USB_EPStartXfer+0x102c>
 801906e:	187b      	adds	r3, r7, r1
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	3301      	adds	r3, #1
 8019074:	187a      	adds	r2, r7, r1
 8019076:	6013      	str	r3, [r2, #0]
 8019078:	21c8      	movs	r1, #200	@ 0xc8
 801907a:	187b      	adds	r3, r7, r1
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	881b      	ldrh	r3, [r3, #0]
 8019080:	b29a      	uxth	r2, r3
 8019082:	23dc      	movs	r3, #220	@ 0xdc
 8019084:	18fb      	adds	r3, r7, r3
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	b29b      	uxth	r3, r3
 801908a:	029b      	lsls	r3, r3, #10
 801908c:	b29b      	uxth	r3, r3
 801908e:	4313      	orrs	r3, r2
 8019090:	b29a      	uxth	r2, r3
 8019092:	187b      	adds	r3, r7, r1
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	801a      	strh	r2, [r3, #0]
 8019098:	e024      	b.n	80190e4 <USB_EPStartXfer+0x1098>
 801909a:	683b      	ldr	r3, [r7, #0]
 801909c:	785b      	ldrb	r3, [r3, #1]
 801909e:	2b01      	cmp	r3, #1
 80190a0:	d120      	bne.n	80190e4 <USB_EPStartXfer+0x1098>
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	21d4      	movs	r1, #212	@ 0xd4
 80190a6:	187a      	adds	r2, r7, r1
 80190a8:	6013      	str	r3, [r2, #0]
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	2250      	movs	r2, #80	@ 0x50
 80190ae:	5a9b      	ldrh	r3, [r3, r2]
 80190b0:	b29b      	uxth	r3, r3
 80190b2:	001a      	movs	r2, r3
 80190b4:	187b      	adds	r3, r7, r1
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	189b      	adds	r3, r3, r2
 80190ba:	187a      	adds	r2, r7, r1
 80190bc:	6013      	str	r3, [r2, #0]
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	00da      	lsls	r2, r3, #3
 80190c4:	187b      	adds	r3, r7, r1
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	18d3      	adds	r3, r2, r3
 80190ca:	4a4f      	ldr	r2, [pc, #316]	@ (8019208 <USB_EPStartXfer+0x11bc>)
 80190cc:	4694      	mov	ip, r2
 80190ce:	4463      	add	r3, ip
 80190d0:	21d0      	movs	r1, #208	@ 0xd0
 80190d2:	187a      	adds	r2, r7, r1
 80190d4:	6013      	str	r3, [r2, #0]
 80190d6:	1d7b      	adds	r3, r7, #5
 80190d8:	33ff      	adds	r3, #255	@ 0xff
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	b29a      	uxth	r2, r3
 80190de:	187b      	adds	r3, r7, r1
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	801a      	strh	r2, [r3, #0]
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	22c4      	movs	r2, #196	@ 0xc4
 80190e8:	18ba      	adds	r2, r7, r2
 80190ea:	6013      	str	r3, [r2, #0]
 80190ec:	683b      	ldr	r3, [r7, #0]
 80190ee:	785b      	ldrb	r3, [r3, #1]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d000      	beq.n	80190f6 <USB_EPStartXfer+0x10aa>
 80190f4:	e08c      	b.n	8019210 <USB_EPStartXfer+0x11c4>
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	21bc      	movs	r1, #188	@ 0xbc
 80190fa:	187a      	adds	r2, r7, r1
 80190fc:	6013      	str	r3, [r2, #0]
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	2250      	movs	r2, #80	@ 0x50
 8019102:	5a9b      	ldrh	r3, [r3, r2]
 8019104:	b29b      	uxth	r3, r3
 8019106:	001a      	movs	r2, r3
 8019108:	187b      	adds	r3, r7, r1
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	189b      	adds	r3, r3, r2
 801910e:	187a      	adds	r2, r7, r1
 8019110:	6013      	str	r3, [r2, #0]
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	781b      	ldrb	r3, [r3, #0]
 8019116:	00da      	lsls	r2, r3, #3
 8019118:	187b      	adds	r3, r7, r1
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	18d3      	adds	r3, r2, r3
 801911e:	4a37      	ldr	r2, [pc, #220]	@ (80191fc <USB_EPStartXfer+0x11b0>)
 8019120:	4694      	mov	ip, r2
 8019122:	4463      	add	r3, ip
 8019124:	21b8      	movs	r1, #184	@ 0xb8
 8019126:	187a      	adds	r2, r7, r1
 8019128:	6013      	str	r3, [r2, #0]
 801912a:	187b      	adds	r3, r7, r1
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	881b      	ldrh	r3, [r3, #0]
 8019130:	b29b      	uxth	r3, r3
 8019132:	059b      	lsls	r3, r3, #22
 8019134:	0d9b      	lsrs	r3, r3, #22
 8019136:	b29a      	uxth	r2, r3
 8019138:	187b      	adds	r3, r7, r1
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	801a      	strh	r2, [r3, #0]
 801913e:	1d7b      	adds	r3, r7, #5
 8019140:	33ff      	adds	r3, #255	@ 0xff
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	2b3e      	cmp	r3, #62	@ 0x3e
 8019146:	d925      	bls.n	8019194 <USB_EPStartXfer+0x1148>
 8019148:	1d7b      	adds	r3, r7, #5
 801914a:	33ff      	adds	r3, #255	@ 0xff
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	095b      	lsrs	r3, r3, #5
 8019150:	21d8      	movs	r1, #216	@ 0xd8
 8019152:	187a      	adds	r2, r7, r1
 8019154:	6013      	str	r3, [r2, #0]
 8019156:	1d7b      	adds	r3, r7, #5
 8019158:	33ff      	adds	r3, #255	@ 0xff
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	221f      	movs	r2, #31
 801915e:	4013      	ands	r3, r2
 8019160:	d104      	bne.n	801916c <USB_EPStartXfer+0x1120>
 8019162:	187b      	adds	r3, r7, r1
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	3b01      	subs	r3, #1
 8019168:	187a      	adds	r2, r7, r1
 801916a:	6013      	str	r3, [r2, #0]
 801916c:	21b8      	movs	r1, #184	@ 0xb8
 801916e:	187b      	adds	r3, r7, r1
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	881b      	ldrh	r3, [r3, #0]
 8019174:	b29a      	uxth	r2, r3
 8019176:	23d8      	movs	r3, #216	@ 0xd8
 8019178:	18fb      	adds	r3, r7, r3
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	b29b      	uxth	r3, r3
 801917e:	029b      	lsls	r3, r3, #10
 8019180:	b29b      	uxth	r3, r3
 8019182:	4313      	orrs	r3, r2
 8019184:	b29b      	uxth	r3, r3
 8019186:	4a21      	ldr	r2, [pc, #132]	@ (801920c <USB_EPStartXfer+0x11c0>)
 8019188:	4313      	orrs	r3, r2
 801918a:	b29a      	uxth	r2, r3
 801918c:	187b      	adds	r3, r7, r1
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	801a      	strh	r2, [r3, #0]
 8019192:	e062      	b.n	801925a <USB_EPStartXfer+0x120e>
 8019194:	1d7b      	adds	r3, r7, #5
 8019196:	33ff      	adds	r3, #255	@ 0xff
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d10b      	bne.n	80191b6 <USB_EPStartXfer+0x116a>
 801919e:	21b8      	movs	r1, #184	@ 0xb8
 80191a0:	187b      	adds	r3, r7, r1
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	881b      	ldrh	r3, [r3, #0]
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	4a18      	ldr	r2, [pc, #96]	@ (801920c <USB_EPStartXfer+0x11c0>)
 80191aa:	4313      	orrs	r3, r2
 80191ac:	b29a      	uxth	r2, r3
 80191ae:	187b      	adds	r3, r7, r1
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	801a      	strh	r2, [r3, #0]
 80191b4:	e051      	b.n	801925a <USB_EPStartXfer+0x120e>
 80191b6:	1d7b      	adds	r3, r7, #5
 80191b8:	33ff      	adds	r3, #255	@ 0xff
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	085b      	lsrs	r3, r3, #1
 80191be:	21d8      	movs	r1, #216	@ 0xd8
 80191c0:	187a      	adds	r2, r7, r1
 80191c2:	6013      	str	r3, [r2, #0]
 80191c4:	1d7b      	adds	r3, r7, #5
 80191c6:	33ff      	adds	r3, #255	@ 0xff
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2201      	movs	r2, #1
 80191cc:	4013      	ands	r3, r2
 80191ce:	d004      	beq.n	80191da <USB_EPStartXfer+0x118e>
 80191d0:	187b      	adds	r3, r7, r1
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	3301      	adds	r3, #1
 80191d6:	187a      	adds	r2, r7, r1
 80191d8:	6013      	str	r3, [r2, #0]
 80191da:	21b8      	movs	r1, #184	@ 0xb8
 80191dc:	187b      	adds	r3, r7, r1
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	881b      	ldrh	r3, [r3, #0]
 80191e2:	b29a      	uxth	r2, r3
 80191e4:	23d8      	movs	r3, #216	@ 0xd8
 80191e6:	18fb      	adds	r3, r7, r3
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	b29b      	uxth	r3, r3
 80191ec:	029b      	lsls	r3, r3, #10
 80191ee:	b29b      	uxth	r3, r3
 80191f0:	4313      	orrs	r3, r2
 80191f2:	b29a      	uxth	r2, r3
 80191f4:	187b      	adds	r3, r7, r1
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	801a      	strh	r2, [r3, #0]
 80191fa:	e02e      	b.n	801925a <USB_EPStartXfer+0x120e>
 80191fc:	00000406 	.word	0x00000406
 8019200:	ffff8f8f 	.word	0xffff8f8f
 8019204:	ffff80c0 	.word	0xffff80c0
 8019208:	00000402 	.word	0x00000402
 801920c:	ffff8000 	.word	0xffff8000
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	785b      	ldrb	r3, [r3, #1]
 8019214:	2b01      	cmp	r3, #1
 8019216:	d120      	bne.n	801925a <USB_EPStartXfer+0x120e>
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2250      	movs	r2, #80	@ 0x50
 801921c:	5a9b      	ldrh	r3, [r3, r2]
 801921e:	b29b      	uxth	r3, r3
 8019220:	001a      	movs	r2, r3
 8019222:	21c4      	movs	r1, #196	@ 0xc4
 8019224:	187b      	adds	r3, r7, r1
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	189b      	adds	r3, r3, r2
 801922a:	187a      	adds	r2, r7, r1
 801922c:	6013      	str	r3, [r2, #0]
 801922e:	683b      	ldr	r3, [r7, #0]
 8019230:	781b      	ldrb	r3, [r3, #0]
 8019232:	00da      	lsls	r2, r3, #3
 8019234:	187b      	adds	r3, r7, r1
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	18d3      	adds	r3, r2, r3
 801923a:	4a1d      	ldr	r2, [pc, #116]	@ (80192b0 <USB_EPStartXfer+0x1264>)
 801923c:	4694      	mov	ip, r2
 801923e:	4463      	add	r3, ip
 8019240:	21c0      	movs	r1, #192	@ 0xc0
 8019242:	187a      	adds	r2, r7, r1
 8019244:	6013      	str	r3, [r2, #0]
 8019246:	1d7b      	adds	r3, r7, #5
 8019248:	33ff      	adds	r3, #255	@ 0xff
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	b29a      	uxth	r2, r3
 801924e:	187b      	adds	r3, r7, r1
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	801a      	strh	r2, [r3, #0]
 8019254:	e001      	b.n	801925a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8019256:	2301      	movs	r3, #1
 8019258:	e025      	b.n	80192a6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801925a:	687a      	ldr	r2, [r7, #4]
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	781b      	ldrb	r3, [r3, #0]
 8019260:	009b      	lsls	r3, r3, #2
 8019262:	18d3      	adds	r3, r2, r3
 8019264:	881b      	ldrh	r3, [r3, #0]
 8019266:	b29a      	uxth	r2, r3
 8019268:	208a      	movs	r0, #138	@ 0x8a
 801926a:	183b      	adds	r3, r7, r0
 801926c:	4911      	ldr	r1, [pc, #68]	@ (80192b4 <USB_EPStartXfer+0x1268>)
 801926e:	400a      	ands	r2, r1
 8019270:	801a      	strh	r2, [r3, #0]
 8019272:	183b      	adds	r3, r7, r0
 8019274:	183a      	adds	r2, r7, r0
 8019276:	8812      	ldrh	r2, [r2, #0]
 8019278:	2180      	movs	r1, #128	@ 0x80
 801927a:	0149      	lsls	r1, r1, #5
 801927c:	404a      	eors	r2, r1
 801927e:	801a      	strh	r2, [r3, #0]
 8019280:	183b      	adds	r3, r7, r0
 8019282:	183a      	adds	r2, r7, r0
 8019284:	8812      	ldrh	r2, [r2, #0]
 8019286:	2180      	movs	r1, #128	@ 0x80
 8019288:	0189      	lsls	r1, r1, #6
 801928a:	404a      	eors	r2, r1
 801928c:	801a      	strh	r2, [r3, #0]
 801928e:	687a      	ldr	r2, [r7, #4]
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	781b      	ldrb	r3, [r3, #0]
 8019294:	009b      	lsls	r3, r3, #2
 8019296:	18d3      	adds	r3, r2, r3
 8019298:	183a      	adds	r2, r7, r0
 801929a:	8812      	ldrh	r2, [r2, #0]
 801929c:	4906      	ldr	r1, [pc, #24]	@ (80192b8 <USB_EPStartXfer+0x126c>)
 801929e:	430a      	orrs	r2, r1
 80192a0:	b292      	uxth	r2, r2
 80192a2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80192a4:	2300      	movs	r3, #0
}
 80192a6:	0018      	movs	r0, r3
 80192a8:	46bd      	mov	sp, r7
 80192aa:	b043      	add	sp, #268	@ 0x10c
 80192ac:	bd90      	pop	{r4, r7, pc}
 80192ae:	46c0      	nop			@ (mov r8, r8)
 80192b0:	00000406 	.word	0x00000406
 80192b4:	ffffbf8f 	.word	0xffffbf8f
 80192b8:	ffff8080 	.word	0xffff8080

080192bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	b084      	sub	sp, #16
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
 80192c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80192c6:	683b      	ldr	r3, [r7, #0]
 80192c8:	785b      	ldrb	r3, [r3, #1]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d01d      	beq.n	801930a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	009b      	lsls	r3, r3, #2
 80192d6:	18d3      	adds	r3, r2, r3
 80192d8:	881b      	ldrh	r3, [r3, #0]
 80192da:	b29a      	uxth	r2, r3
 80192dc:	200c      	movs	r0, #12
 80192de:	183b      	adds	r3, r7, r0
 80192e0:	491b      	ldr	r1, [pc, #108]	@ (8019350 <USB_EPSetStall+0x94>)
 80192e2:	400a      	ands	r2, r1
 80192e4:	801a      	strh	r2, [r3, #0]
 80192e6:	183b      	adds	r3, r7, r0
 80192e8:	183a      	adds	r2, r7, r0
 80192ea:	8812      	ldrh	r2, [r2, #0]
 80192ec:	2110      	movs	r1, #16
 80192ee:	404a      	eors	r2, r1
 80192f0:	801a      	strh	r2, [r3, #0]
 80192f2:	687a      	ldr	r2, [r7, #4]
 80192f4:	683b      	ldr	r3, [r7, #0]
 80192f6:	781b      	ldrb	r3, [r3, #0]
 80192f8:	009b      	lsls	r3, r3, #2
 80192fa:	18d3      	adds	r3, r2, r3
 80192fc:	183a      	adds	r2, r7, r0
 80192fe:	8812      	ldrh	r2, [r2, #0]
 8019300:	4914      	ldr	r1, [pc, #80]	@ (8019354 <USB_EPSetStall+0x98>)
 8019302:	430a      	orrs	r2, r1
 8019304:	b292      	uxth	r2, r2
 8019306:	801a      	strh	r2, [r3, #0]
 8019308:	e01d      	b.n	8019346 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801930a:	687a      	ldr	r2, [r7, #4]
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	781b      	ldrb	r3, [r3, #0]
 8019310:	009b      	lsls	r3, r3, #2
 8019312:	18d3      	adds	r3, r2, r3
 8019314:	881b      	ldrh	r3, [r3, #0]
 8019316:	b29a      	uxth	r2, r3
 8019318:	200e      	movs	r0, #14
 801931a:	183b      	adds	r3, r7, r0
 801931c:	490e      	ldr	r1, [pc, #56]	@ (8019358 <USB_EPSetStall+0x9c>)
 801931e:	400a      	ands	r2, r1
 8019320:	801a      	strh	r2, [r3, #0]
 8019322:	183b      	adds	r3, r7, r0
 8019324:	183a      	adds	r2, r7, r0
 8019326:	8812      	ldrh	r2, [r2, #0]
 8019328:	2180      	movs	r1, #128	@ 0x80
 801932a:	0149      	lsls	r1, r1, #5
 801932c:	404a      	eors	r2, r1
 801932e:	801a      	strh	r2, [r3, #0]
 8019330:	687a      	ldr	r2, [r7, #4]
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	781b      	ldrb	r3, [r3, #0]
 8019336:	009b      	lsls	r3, r3, #2
 8019338:	18d3      	adds	r3, r2, r3
 801933a:	183a      	adds	r2, r7, r0
 801933c:	8812      	ldrh	r2, [r2, #0]
 801933e:	4905      	ldr	r1, [pc, #20]	@ (8019354 <USB_EPSetStall+0x98>)
 8019340:	430a      	orrs	r2, r1
 8019342:	b292      	uxth	r2, r2
 8019344:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019346:	2300      	movs	r3, #0
}
 8019348:	0018      	movs	r0, r3
 801934a:	46bd      	mov	sp, r7
 801934c:	b004      	add	sp, #16
 801934e:	bd80      	pop	{r7, pc}
 8019350:	ffff8fbf 	.word	0xffff8fbf
 8019354:	ffff8080 	.word	0xffff8080
 8019358:	ffffbf8f 	.word	0xffffbf8f

0801935c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b086      	sub	sp, #24
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
 8019364:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	7b1b      	ldrb	r3, [r3, #12]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d000      	beq.n	8019370 <USB_EPClearStall+0x14>
 801936e:	e095      	b.n	801949c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	785b      	ldrb	r3, [r3, #1]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d046      	beq.n	8019406 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019378:	687a      	ldr	r2, [r7, #4]
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	781b      	ldrb	r3, [r3, #0]
 801937e:	009b      	lsls	r3, r3, #2
 8019380:	18d2      	adds	r2, r2, r3
 8019382:	2110      	movs	r1, #16
 8019384:	187b      	adds	r3, r7, r1
 8019386:	8812      	ldrh	r2, [r2, #0]
 8019388:	801a      	strh	r2, [r3, #0]
 801938a:	187b      	adds	r3, r7, r1
 801938c:	881b      	ldrh	r3, [r3, #0]
 801938e:	2240      	movs	r2, #64	@ 0x40
 8019390:	4013      	ands	r3, r2
 8019392:	d016      	beq.n	80193c2 <USB_EPClearStall+0x66>
 8019394:	687a      	ldr	r2, [r7, #4]
 8019396:	683b      	ldr	r3, [r7, #0]
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	18d3      	adds	r3, r2, r3
 801939e:	881b      	ldrh	r3, [r3, #0]
 80193a0:	b29a      	uxth	r2, r3
 80193a2:	200e      	movs	r0, #14
 80193a4:	183b      	adds	r3, r7, r0
 80193a6:	4940      	ldr	r1, [pc, #256]	@ (80194a8 <USB_EPClearStall+0x14c>)
 80193a8:	400a      	ands	r2, r1
 80193aa:	801a      	strh	r2, [r3, #0]
 80193ac:	687a      	ldr	r2, [r7, #4]
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	781b      	ldrb	r3, [r3, #0]
 80193b2:	009b      	lsls	r3, r3, #2
 80193b4:	18d3      	adds	r3, r2, r3
 80193b6:	183a      	adds	r2, r7, r0
 80193b8:	8812      	ldrh	r2, [r2, #0]
 80193ba:	493c      	ldr	r1, [pc, #240]	@ (80194ac <USB_EPClearStall+0x150>)
 80193bc:	430a      	orrs	r2, r1
 80193be:	b292      	uxth	r2, r2
 80193c0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	78db      	ldrb	r3, [r3, #3]
 80193c6:	2b01      	cmp	r3, #1
 80193c8:	d068      	beq.n	801949c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80193ca:	687a      	ldr	r2, [r7, #4]
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	781b      	ldrb	r3, [r3, #0]
 80193d0:	009b      	lsls	r3, r3, #2
 80193d2:	18d3      	adds	r3, r2, r3
 80193d4:	881b      	ldrh	r3, [r3, #0]
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	200c      	movs	r0, #12
 80193da:	183b      	adds	r3, r7, r0
 80193dc:	4934      	ldr	r1, [pc, #208]	@ (80194b0 <USB_EPClearStall+0x154>)
 80193de:	400a      	ands	r2, r1
 80193e0:	801a      	strh	r2, [r3, #0]
 80193e2:	183b      	adds	r3, r7, r0
 80193e4:	183a      	adds	r2, r7, r0
 80193e6:	8812      	ldrh	r2, [r2, #0]
 80193e8:	2120      	movs	r1, #32
 80193ea:	404a      	eors	r2, r1
 80193ec:	801a      	strh	r2, [r3, #0]
 80193ee:	687a      	ldr	r2, [r7, #4]
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	781b      	ldrb	r3, [r3, #0]
 80193f4:	009b      	lsls	r3, r3, #2
 80193f6:	18d3      	adds	r3, r2, r3
 80193f8:	183a      	adds	r2, r7, r0
 80193fa:	8812      	ldrh	r2, [r2, #0]
 80193fc:	492d      	ldr	r1, [pc, #180]	@ (80194b4 <USB_EPClearStall+0x158>)
 80193fe:	430a      	orrs	r2, r1
 8019400:	b292      	uxth	r2, r2
 8019402:	801a      	strh	r2, [r3, #0]
 8019404:	e04a      	b.n	801949c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019406:	687a      	ldr	r2, [r7, #4]
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	009b      	lsls	r3, r3, #2
 801940e:	18d2      	adds	r2, r2, r3
 8019410:	2116      	movs	r1, #22
 8019412:	187b      	adds	r3, r7, r1
 8019414:	8812      	ldrh	r2, [r2, #0]
 8019416:	801a      	strh	r2, [r3, #0]
 8019418:	187b      	adds	r3, r7, r1
 801941a:	881a      	ldrh	r2, [r3, #0]
 801941c:	2380      	movs	r3, #128	@ 0x80
 801941e:	01db      	lsls	r3, r3, #7
 8019420:	4013      	ands	r3, r2
 8019422:	d016      	beq.n	8019452 <USB_EPClearStall+0xf6>
 8019424:	687a      	ldr	r2, [r7, #4]
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	781b      	ldrb	r3, [r3, #0]
 801942a:	009b      	lsls	r3, r3, #2
 801942c:	18d3      	adds	r3, r2, r3
 801942e:	881b      	ldrh	r3, [r3, #0]
 8019430:	b29a      	uxth	r2, r3
 8019432:	2014      	movs	r0, #20
 8019434:	183b      	adds	r3, r7, r0
 8019436:	491c      	ldr	r1, [pc, #112]	@ (80194a8 <USB_EPClearStall+0x14c>)
 8019438:	400a      	ands	r2, r1
 801943a:	801a      	strh	r2, [r3, #0]
 801943c:	687a      	ldr	r2, [r7, #4]
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	009b      	lsls	r3, r3, #2
 8019444:	18d3      	adds	r3, r2, r3
 8019446:	183a      	adds	r2, r7, r0
 8019448:	8812      	ldrh	r2, [r2, #0]
 801944a:	491b      	ldr	r1, [pc, #108]	@ (80194b8 <USB_EPClearStall+0x15c>)
 801944c:	430a      	orrs	r2, r1
 801944e:	b292      	uxth	r2, r2
 8019450:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	683b      	ldr	r3, [r7, #0]
 8019456:	781b      	ldrb	r3, [r3, #0]
 8019458:	009b      	lsls	r3, r3, #2
 801945a:	18d3      	adds	r3, r2, r3
 801945c:	881b      	ldrh	r3, [r3, #0]
 801945e:	b29a      	uxth	r2, r3
 8019460:	2012      	movs	r0, #18
 8019462:	183b      	adds	r3, r7, r0
 8019464:	4915      	ldr	r1, [pc, #84]	@ (80194bc <USB_EPClearStall+0x160>)
 8019466:	400a      	ands	r2, r1
 8019468:	801a      	strh	r2, [r3, #0]
 801946a:	183b      	adds	r3, r7, r0
 801946c:	183a      	adds	r2, r7, r0
 801946e:	8812      	ldrh	r2, [r2, #0]
 8019470:	2180      	movs	r1, #128	@ 0x80
 8019472:	0149      	lsls	r1, r1, #5
 8019474:	404a      	eors	r2, r1
 8019476:	801a      	strh	r2, [r3, #0]
 8019478:	183b      	adds	r3, r7, r0
 801947a:	183a      	adds	r2, r7, r0
 801947c:	8812      	ldrh	r2, [r2, #0]
 801947e:	2180      	movs	r1, #128	@ 0x80
 8019480:	0189      	lsls	r1, r1, #6
 8019482:	404a      	eors	r2, r1
 8019484:	801a      	strh	r2, [r3, #0]
 8019486:	687a      	ldr	r2, [r7, #4]
 8019488:	683b      	ldr	r3, [r7, #0]
 801948a:	781b      	ldrb	r3, [r3, #0]
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	18d3      	adds	r3, r2, r3
 8019490:	183a      	adds	r2, r7, r0
 8019492:	8812      	ldrh	r2, [r2, #0]
 8019494:	4907      	ldr	r1, [pc, #28]	@ (80194b4 <USB_EPClearStall+0x158>)
 8019496:	430a      	orrs	r2, r1
 8019498:	b292      	uxth	r2, r2
 801949a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801949c:	2300      	movs	r3, #0
}
 801949e:	0018      	movs	r0, r3
 80194a0:	46bd      	mov	sp, r7
 80194a2:	b006      	add	sp, #24
 80194a4:	bd80      	pop	{r7, pc}
 80194a6:	46c0      	nop			@ (mov r8, r8)
 80194a8:	ffff8f8f 	.word	0xffff8f8f
 80194ac:	ffff80c0 	.word	0xffff80c0
 80194b0:	ffff8fbf 	.word	0xffff8fbf
 80194b4:	ffff8080 	.word	0xffff8080
 80194b8:	ffffc080 	.word	0xffffc080
 80194bc:	ffffbf8f 	.word	0xffffbf8f

080194c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b082      	sub	sp, #8
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
 80194c8:	000a      	movs	r2, r1
 80194ca:	1cfb      	adds	r3, r7, #3
 80194cc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80194ce:	1cfb      	adds	r3, r7, #3
 80194d0:	781b      	ldrb	r3, [r3, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d103      	bne.n	80194de <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	224c      	movs	r2, #76	@ 0x4c
 80194da:	2180      	movs	r1, #128	@ 0x80
 80194dc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80194de:	2300      	movs	r3, #0
}
 80194e0:	0018      	movs	r0, r3
 80194e2:	46bd      	mov	sp, r7
 80194e4:	b002      	add	sp, #8
 80194e6:	bd80      	pop	{r7, pc}

080194e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b082      	sub	sp, #8
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	2258      	movs	r2, #88	@ 0x58
 80194f4:	5a9b      	ldrh	r3, [r3, r2]
 80194f6:	b29b      	uxth	r3, r3
 80194f8:	4a05      	ldr	r2, [pc, #20]	@ (8019510 <USB_DevConnect+0x28>)
 80194fa:	4313      	orrs	r3, r2
 80194fc:	b299      	uxth	r1, r3
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2258      	movs	r2, #88	@ 0x58
 8019502:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019504:	2300      	movs	r3, #0
}
 8019506:	0018      	movs	r0, r3
 8019508:	46bd      	mov	sp, r7
 801950a:	b002      	add	sp, #8
 801950c:	bd80      	pop	{r7, pc}
 801950e:	46c0      	nop			@ (mov r8, r8)
 8019510:	ffff8000 	.word	0xffff8000

08019514 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b084      	sub	sp, #16
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2244      	movs	r2, #68	@ 0x44
 8019520:	5a9b      	ldrh	r3, [r3, r2]
 8019522:	b29b      	uxth	r3, r3
 8019524:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8019526:	68fb      	ldr	r3, [r7, #12]
}
 8019528:	0018      	movs	r0, r3
 801952a:	46bd      	mov	sp, r7
 801952c:	b004      	add	sp, #16
 801952e:	bd80      	pop	{r7, pc}

08019530 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b08a      	sub	sp, #40	@ 0x28
 8019534:	af00      	add	r7, sp, #0
 8019536:	60f8      	str	r0, [r7, #12]
 8019538:	60b9      	str	r1, [r7, #8]
 801953a:	0019      	movs	r1, r3
 801953c:	1dbb      	adds	r3, r7, #6
 801953e:	801a      	strh	r2, [r3, #0]
 8019540:	1d3b      	adds	r3, r7, #4
 8019542:	1c0a      	adds	r2, r1, #0
 8019544:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8019546:	1d3b      	adds	r3, r7, #4
 8019548:	881b      	ldrh	r3, [r3, #0]
 801954a:	3301      	adds	r3, #1
 801954c:	085b      	lsrs	r3, r3, #1
 801954e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019554:	68bb      	ldr	r3, [r7, #8]
 8019556:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8019558:	1dbb      	adds	r3, r7, #6
 801955a:	881a      	ldrh	r2, [r3, #0]
 801955c:	697b      	ldr	r3, [r7, #20]
 801955e:	18d3      	adds	r3, r2, r3
 8019560:	2280      	movs	r2, #128	@ 0x80
 8019562:	00d2      	lsls	r2, r2, #3
 8019564:	4694      	mov	ip, r2
 8019566:	4463      	add	r3, ip
 8019568:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801956a:	69bb      	ldr	r3, [r7, #24]
 801956c:	627b      	str	r3, [r7, #36]	@ 0x24
 801956e:	e020      	b.n	80195b2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8019570:	69fb      	ldr	r3, [r7, #28]
 8019572:	781a      	ldrb	r2, [r3, #0]
 8019574:	2112      	movs	r1, #18
 8019576:	187b      	adds	r3, r7, r1
 8019578:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801957a:	69fb      	ldr	r3, [r7, #28]
 801957c:	3301      	adds	r3, #1
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	021b      	lsls	r3, r3, #8
 8019582:	b21a      	sxth	r2, r3
 8019584:	187b      	adds	r3, r7, r1
 8019586:	2000      	movs	r0, #0
 8019588:	5e1b      	ldrsh	r3, [r3, r0]
 801958a:	4313      	orrs	r3, r2
 801958c:	b21a      	sxth	r2, r3
 801958e:	187b      	adds	r3, r7, r1
 8019590:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8019592:	6a3b      	ldr	r3, [r7, #32]
 8019594:	187a      	adds	r2, r7, r1
 8019596:	8812      	ldrh	r2, [r2, #0]
 8019598:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801959a:	6a3b      	ldr	r3, [r7, #32]
 801959c:	3302      	adds	r3, #2
 801959e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80195a0:	69fb      	ldr	r3, [r7, #28]
 80195a2:	3301      	adds	r3, #1
 80195a4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80195a6:	69fb      	ldr	r3, [r7, #28]
 80195a8:	3301      	adds	r3, #1
 80195aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80195ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195ae:	3b01      	subs	r3, #1
 80195b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80195b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d1db      	bne.n	8019570 <USB_WritePMA+0x40>
  }
}
 80195b8:	46c0      	nop			@ (mov r8, r8)
 80195ba:	46c0      	nop			@ (mov r8, r8)
 80195bc:	46bd      	mov	sp, r7
 80195be:	b00a      	add	sp, #40	@ 0x28
 80195c0:	bd80      	pop	{r7, pc}

080195c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80195c2:	b580      	push	{r7, lr}
 80195c4:	b08a      	sub	sp, #40	@ 0x28
 80195c6:	af00      	add	r7, sp, #0
 80195c8:	60f8      	str	r0, [r7, #12]
 80195ca:	60b9      	str	r1, [r7, #8]
 80195cc:	0019      	movs	r1, r3
 80195ce:	1dbb      	adds	r3, r7, #6
 80195d0:	801a      	strh	r2, [r3, #0]
 80195d2:	1d3b      	adds	r3, r7, #4
 80195d4:	1c0a      	adds	r2, r1, #0
 80195d6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80195d8:	1d3b      	adds	r3, r7, #4
 80195da:	881b      	ldrh	r3, [r3, #0]
 80195dc:	085b      	lsrs	r3, r3, #1
 80195de:	b29b      	uxth	r3, r3
 80195e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80195ea:	1dbb      	adds	r3, r7, #6
 80195ec:	881a      	ldrh	r2, [r3, #0]
 80195ee:	697b      	ldr	r3, [r7, #20]
 80195f0:	18d3      	adds	r3, r2, r3
 80195f2:	2280      	movs	r2, #128	@ 0x80
 80195f4:	00d2      	lsls	r2, r2, #3
 80195f6:	4694      	mov	ip, r2
 80195f8:	4463      	add	r3, ip
 80195fa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80195fc:	69bb      	ldr	r3, [r7, #24]
 80195fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8019600:	e018      	b.n	8019634 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8019602:	6a3b      	ldr	r3, [r7, #32]
 8019604:	881b      	ldrh	r3, [r3, #0]
 8019606:	b29b      	uxth	r3, r3
 8019608:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801960a:	6a3b      	ldr	r3, [r7, #32]
 801960c:	3302      	adds	r3, #2
 801960e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019610:	693b      	ldr	r3, [r7, #16]
 8019612:	b2da      	uxtb	r2, r3
 8019614:	69fb      	ldr	r3, [r7, #28]
 8019616:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019618:	69fb      	ldr	r3, [r7, #28]
 801961a:	3301      	adds	r3, #1
 801961c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801961e:	693b      	ldr	r3, [r7, #16]
 8019620:	0a1b      	lsrs	r3, r3, #8
 8019622:	b2da      	uxtb	r2, r3
 8019624:	69fb      	ldr	r3, [r7, #28]
 8019626:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019628:	69fb      	ldr	r3, [r7, #28]
 801962a:	3301      	adds	r3, #1
 801962c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019630:	3b01      	subs	r3, #1
 8019632:	627b      	str	r3, [r7, #36]	@ 0x24
 8019634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019636:	2b00      	cmp	r3, #0
 8019638:	d1e3      	bne.n	8019602 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801963a:	1d3b      	adds	r3, r7, #4
 801963c:	881b      	ldrh	r3, [r3, #0]
 801963e:	2201      	movs	r2, #1
 8019640:	4013      	ands	r3, r2
 8019642:	b29b      	uxth	r3, r3
 8019644:	2b00      	cmp	r3, #0
 8019646:	d007      	beq.n	8019658 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8019648:	6a3b      	ldr	r3, [r7, #32]
 801964a:	881b      	ldrh	r3, [r3, #0]
 801964c:	b29b      	uxth	r3, r3
 801964e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	b2da      	uxtb	r2, r3
 8019654:	69fb      	ldr	r3, [r7, #28]
 8019656:	701a      	strb	r2, [r3, #0]
  }
}
 8019658:	46c0      	nop			@ (mov r8, r8)
 801965a:	46bd      	mov	sp, r7
 801965c:	b00a      	add	sp, #40	@ 0x28
 801965e:	bd80      	pop	{r7, pc}

08019660 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b084      	sub	sp, #16
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	000a      	movs	r2, r1
 801966a:	1cfb      	adds	r3, r7, #3
 801966c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801966e:	230f      	movs	r3, #15
 8019670:	18fb      	adds	r3, r7, r3
 8019672:	2200      	movs	r2, #0
 8019674:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	7c1b      	ldrb	r3, [r3, #16]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d116      	bne.n	80196ac <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801967e:	2380      	movs	r3, #128	@ 0x80
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	6878      	ldr	r0, [r7, #4]
 8019684:	2202      	movs	r2, #2
 8019686:	2181      	movs	r1, #129	@ 0x81
 8019688:	f002 f8eb 	bl	801b862 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2201      	movs	r2, #1
 8019690:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019692:	2380      	movs	r3, #128	@ 0x80
 8019694:	009b      	lsls	r3, r3, #2
 8019696:	6878      	ldr	r0, [r7, #4]
 8019698:	2202      	movs	r2, #2
 801969a:	2101      	movs	r1, #1
 801969c:	f002 f8e1 	bl	801b862 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80196a0:	687a      	ldr	r2, [r7, #4]
 80196a2:	23b6      	movs	r3, #182	@ 0xb6
 80196a4:	005b      	lsls	r3, r3, #1
 80196a6:	2101      	movs	r1, #1
 80196a8:	50d1      	str	r1, [r2, r3]
 80196aa:	e013      	b.n	80196d4 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	2340      	movs	r3, #64	@ 0x40
 80196b0:	2202      	movs	r2, #2
 80196b2:	2181      	movs	r1, #129	@ 0x81
 80196b4:	f002 f8d5 	bl	801b862 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	2201      	movs	r2, #1
 80196bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80196be:	6878      	ldr	r0, [r7, #4]
 80196c0:	2340      	movs	r3, #64	@ 0x40
 80196c2:	2202      	movs	r2, #2
 80196c4:	2101      	movs	r1, #1
 80196c6:	f002 f8cc 	bl	801b862 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80196ca:	687a      	ldr	r2, [r7, #4]
 80196cc:	23b6      	movs	r3, #182	@ 0xb6
 80196ce:	005b      	lsls	r3, r3, #1
 80196d0:	2101      	movs	r1, #1
 80196d2:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80196d4:	6878      	ldr	r0, [r7, #4]
 80196d6:	2308      	movs	r3, #8
 80196d8:	2203      	movs	r2, #3
 80196da:	2182      	movs	r1, #130	@ 0x82
 80196dc:	f002 f8c1 	bl	801b862 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2201      	movs	r2, #1
 80196e4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80196e6:	2387      	movs	r3, #135	@ 0x87
 80196e8:	009b      	lsls	r3, r3, #2
 80196ea:	0018      	movs	r0, r3
 80196ec:	f002 fa52 	bl	801bb94 <USBD_static_malloc>
 80196f0:	0001      	movs	r1, r0
 80196f2:	687a      	ldr	r2, [r7, #4]
 80196f4:	23ae      	movs	r3, #174	@ 0xae
 80196f6:	009b      	lsls	r3, r3, #2
 80196f8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80196fa:	687a      	ldr	r2, [r7, #4]
 80196fc:	23ae      	movs	r3, #174	@ 0xae
 80196fe:	009b      	lsls	r3, r3, #2
 8019700:	58d3      	ldr	r3, [r2, r3]
 8019702:	2b00      	cmp	r3, #0
 8019704:	d104      	bne.n	8019710 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8019706:	230f      	movs	r3, #15
 8019708:	18fb      	adds	r3, r7, r3
 801970a:	2201      	movs	r2, #1
 801970c:	701a      	strb	r2, [r3, #0]
 801970e:	e02c      	b.n	801976a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019710:	687a      	ldr	r2, [r7, #4]
 8019712:	23ae      	movs	r3, #174	@ 0xae
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	58d3      	ldr	r3, [r2, r3]
 8019718:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801971a:	687a      	ldr	r2, [r7, #4]
 801971c:	23af      	movs	r3, #175	@ 0xaf
 801971e:	009b      	lsls	r3, r3, #2
 8019720:	58d3      	ldr	r3, [r2, r3]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8019726:	68ba      	ldr	r2, [r7, #8]
 8019728:	2385      	movs	r3, #133	@ 0x85
 801972a:	009b      	lsls	r3, r3, #2
 801972c:	2100      	movs	r1, #0
 801972e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8019730:	68ba      	ldr	r2, [r7, #8]
 8019732:	2386      	movs	r3, #134	@ 0x86
 8019734:	009b      	lsls	r3, r3, #2
 8019736:	2100      	movs	r1, #0
 8019738:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	7c1b      	ldrb	r3, [r3, #16]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d10a      	bne.n	8019758 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019742:	68ba      	ldr	r2, [r7, #8]
 8019744:	2381      	movs	r3, #129	@ 0x81
 8019746:	009b      	lsls	r3, r3, #2
 8019748:	58d2      	ldr	r2, [r2, r3]
 801974a:	2380      	movs	r3, #128	@ 0x80
 801974c:	009b      	lsls	r3, r3, #2
 801974e:	6878      	ldr	r0, [r7, #4]
 8019750:	2101      	movs	r1, #1
 8019752:	f002 f9d1 	bl	801baf8 <USBD_LL_PrepareReceive>
 8019756:	e008      	b.n	801976a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019758:	68ba      	ldr	r2, [r7, #8]
 801975a:	2381      	movs	r3, #129	@ 0x81
 801975c:	009b      	lsls	r3, r3, #2
 801975e:	58d2      	ldr	r2, [r2, r3]
 8019760:	6878      	ldr	r0, [r7, #4]
 8019762:	2340      	movs	r3, #64	@ 0x40
 8019764:	2101      	movs	r1, #1
 8019766:	f002 f9c7 	bl	801baf8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801976a:	230f      	movs	r3, #15
 801976c:	18fb      	adds	r3, r7, r3
 801976e:	781b      	ldrb	r3, [r3, #0]
}
 8019770:	0018      	movs	r0, r3
 8019772:	46bd      	mov	sp, r7
 8019774:	b004      	add	sp, #16
 8019776:	bd80      	pop	{r7, pc}

08019778 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b084      	sub	sp, #16
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
 8019780:	000a      	movs	r2, r1
 8019782:	1cfb      	adds	r3, r7, #3
 8019784:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8019786:	230f      	movs	r3, #15
 8019788:	18fb      	adds	r3, r7, r3
 801978a:	2200      	movs	r2, #0
 801978c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	2181      	movs	r1, #129	@ 0x81
 8019792:	0018      	movs	r0, r3
 8019794:	f002 f89c 	bl	801b8d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	2200      	movs	r2, #0
 801979c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	2101      	movs	r1, #1
 80197a2:	0018      	movs	r0, r3
 80197a4:	f002 f894 	bl	801b8d0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80197a8:	687a      	ldr	r2, [r7, #4]
 80197aa:	23b6      	movs	r3, #182	@ 0xb6
 80197ac:	005b      	lsls	r3, r3, #1
 80197ae:	2100      	movs	r1, #0
 80197b0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2182      	movs	r1, #130	@ 0x82
 80197b6:	0018      	movs	r0, r3
 80197b8:	f002 f88a 	bl	801b8d0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	2200      	movs	r2, #0
 80197c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80197c2:	687a      	ldr	r2, [r7, #4]
 80197c4:	23ae      	movs	r3, #174	@ 0xae
 80197c6:	009b      	lsls	r3, r3, #2
 80197c8:	58d3      	ldr	r3, [r2, r3]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d011      	beq.n	80197f2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80197ce:	687a      	ldr	r2, [r7, #4]
 80197d0:	23af      	movs	r3, #175	@ 0xaf
 80197d2:	009b      	lsls	r3, r3, #2
 80197d4:	58d3      	ldr	r3, [r2, r3]
 80197d6:	685b      	ldr	r3, [r3, #4]
 80197d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80197da:	687a      	ldr	r2, [r7, #4]
 80197dc:	23ae      	movs	r3, #174	@ 0xae
 80197de:	009b      	lsls	r3, r3, #2
 80197e0:	58d3      	ldr	r3, [r2, r3]
 80197e2:	0018      	movs	r0, r3
 80197e4:	f002 f9e2 	bl	801bbac <USBD_static_free>
    pdev->pClassData = NULL;
 80197e8:	687a      	ldr	r2, [r7, #4]
 80197ea:	23ae      	movs	r3, #174	@ 0xae
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	2100      	movs	r1, #0
 80197f0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80197f2:	230f      	movs	r3, #15
 80197f4:	18fb      	adds	r3, r7, r3
 80197f6:	781b      	ldrb	r3, [r3, #0]
}
 80197f8:	0018      	movs	r0, r3
 80197fa:	46bd      	mov	sp, r7
 80197fc:	b004      	add	sp, #16
 80197fe:	bd80      	pop	{r7, pc}

08019800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b086      	sub	sp, #24
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
 8019808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801980a:	687a      	ldr	r2, [r7, #4]
 801980c:	23ae      	movs	r3, #174	@ 0xae
 801980e:	009b      	lsls	r3, r3, #2
 8019810:	58d3      	ldr	r3, [r2, r3]
 8019812:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8019814:	230f      	movs	r3, #15
 8019816:	18fb      	adds	r3, r7, r3
 8019818:	2200      	movs	r2, #0
 801981a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801981c:	230c      	movs	r3, #12
 801981e:	18fb      	adds	r3, r7, r3
 8019820:	2200      	movs	r2, #0
 8019822:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8019824:	2317      	movs	r3, #23
 8019826:	18fb      	adds	r3, r7, r3
 8019828:	2200      	movs	r2, #0
 801982a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801982c:	683b      	ldr	r3, [r7, #0]
 801982e:	781b      	ldrb	r3, [r3, #0]
 8019830:	001a      	movs	r2, r3
 8019832:	2360      	movs	r3, #96	@ 0x60
 8019834:	4013      	ands	r3, r2
 8019836:	d03d      	beq.n	80198b4 <USBD_CDC_Setup+0xb4>
 8019838:	2b20      	cmp	r3, #32
 801983a:	d000      	beq.n	801983e <USBD_CDC_Setup+0x3e>
 801983c:	e094      	b.n	8019968 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	88db      	ldrh	r3, [r3, #6]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d02b      	beq.n	801989e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8019846:	683b      	ldr	r3, [r7, #0]
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	b25b      	sxtb	r3, r3
 801984c:	2b00      	cmp	r3, #0
 801984e:	da12      	bge.n	8019876 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019850:	687a      	ldr	r2, [r7, #4]
 8019852:	23af      	movs	r3, #175	@ 0xaf
 8019854:	009b      	lsls	r3, r3, #2
 8019856:	58d3      	ldr	r3, [r2, r3]
 8019858:	689b      	ldr	r3, [r3, #8]
 801985a:	683a      	ldr	r2, [r7, #0]
 801985c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801985e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019860:	683a      	ldr	r2, [r7, #0]
 8019862:	88d2      	ldrh	r2, [r2, #6]
 8019864:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8019866:	6939      	ldr	r1, [r7, #16]
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	88da      	ldrh	r2, [r3, #6]
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	0018      	movs	r0, r3
 8019870:	f001 fbaf 	bl	801afd2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8019874:	e083      	b.n	801997e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8019876:	683b      	ldr	r3, [r7, #0]
 8019878:	7859      	ldrb	r1, [r3, #1]
 801987a:	693a      	ldr	r2, [r7, #16]
 801987c:	2380      	movs	r3, #128	@ 0x80
 801987e:	009b      	lsls	r3, r3, #2
 8019880:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	88db      	ldrh	r3, [r3, #6]
 8019886:	b2d9      	uxtb	r1, r3
 8019888:	693b      	ldr	r3, [r7, #16]
 801988a:	4a40      	ldr	r2, [pc, #256]	@ (801998c <USBD_CDC_Setup+0x18c>)
 801988c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801988e:	6939      	ldr	r1, [r7, #16]
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	88da      	ldrh	r2, [r3, #6]
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	0018      	movs	r0, r3
 8019898:	f001 fbce 	bl	801b038 <USBD_CtlPrepareRx>
      break;
 801989c:	e06f      	b.n	801997e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801989e:	687a      	ldr	r2, [r7, #4]
 80198a0:	23af      	movs	r3, #175	@ 0xaf
 80198a2:	009b      	lsls	r3, r3, #2
 80198a4:	58d3      	ldr	r3, [r2, r3]
 80198a6:	689b      	ldr	r3, [r3, #8]
 80198a8:	683a      	ldr	r2, [r7, #0]
 80198aa:	7850      	ldrb	r0, [r2, #1]
 80198ac:	6839      	ldr	r1, [r7, #0]
 80198ae:	2200      	movs	r2, #0
 80198b0:	4798      	blx	r3
      break;
 80198b2:	e064      	b.n	801997e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80198b4:	683b      	ldr	r3, [r7, #0]
 80198b6:	785b      	ldrb	r3, [r3, #1]
 80198b8:	2b0b      	cmp	r3, #11
 80198ba:	d037      	beq.n	801992c <USBD_CDC_Setup+0x12c>
 80198bc:	dc47      	bgt.n	801994e <USBD_CDC_Setup+0x14e>
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d002      	beq.n	80198c8 <USBD_CDC_Setup+0xc8>
 80198c2:	2b0a      	cmp	r3, #10
 80198c4:	d019      	beq.n	80198fa <USBD_CDC_Setup+0xfa>
 80198c6:	e042      	b.n	801994e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80198c8:	687a      	ldr	r2, [r7, #4]
 80198ca:	23a7      	movs	r3, #167	@ 0xa7
 80198cc:	009b      	lsls	r3, r3, #2
 80198ce:	5cd3      	ldrb	r3, [r2, r3]
 80198d0:	2b03      	cmp	r3, #3
 80198d2:	d107      	bne.n	80198e4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80198d4:	230c      	movs	r3, #12
 80198d6:	18f9      	adds	r1, r7, r3
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2202      	movs	r2, #2
 80198dc:	0018      	movs	r0, r3
 80198de:	f001 fb78 	bl	801afd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80198e2:	e040      	b.n	8019966 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80198e4:	683a      	ldr	r2, [r7, #0]
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	0011      	movs	r1, r2
 80198ea:	0018      	movs	r0, r3
 80198ec:	f001 faf3 	bl	801aed6 <USBD_CtlError>
            ret = USBD_FAIL;
 80198f0:	2317      	movs	r3, #23
 80198f2:	18fb      	adds	r3, r7, r3
 80198f4:	2202      	movs	r2, #2
 80198f6:	701a      	strb	r2, [r3, #0]
          break;
 80198f8:	e035      	b.n	8019966 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80198fa:	687a      	ldr	r2, [r7, #4]
 80198fc:	23a7      	movs	r3, #167	@ 0xa7
 80198fe:	009b      	lsls	r3, r3, #2
 8019900:	5cd3      	ldrb	r3, [r2, r3]
 8019902:	2b03      	cmp	r3, #3
 8019904:	d107      	bne.n	8019916 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8019906:	230f      	movs	r3, #15
 8019908:	18f9      	adds	r1, r7, r3
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	2201      	movs	r2, #1
 801990e:	0018      	movs	r0, r3
 8019910:	f001 fb5f 	bl	801afd2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019914:	e027      	b.n	8019966 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8019916:	683a      	ldr	r2, [r7, #0]
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	0011      	movs	r1, r2
 801991c:	0018      	movs	r0, r3
 801991e:	f001 fada 	bl	801aed6 <USBD_CtlError>
            ret = USBD_FAIL;
 8019922:	2317      	movs	r3, #23
 8019924:	18fb      	adds	r3, r7, r3
 8019926:	2202      	movs	r2, #2
 8019928:	701a      	strb	r2, [r3, #0]
          break;
 801992a:	e01c      	b.n	8019966 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801992c:	687a      	ldr	r2, [r7, #4]
 801992e:	23a7      	movs	r3, #167	@ 0xa7
 8019930:	009b      	lsls	r3, r3, #2
 8019932:	5cd3      	ldrb	r3, [r2, r3]
 8019934:	2b03      	cmp	r3, #3
 8019936:	d015      	beq.n	8019964 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8019938:	683a      	ldr	r2, [r7, #0]
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	0011      	movs	r1, r2
 801993e:	0018      	movs	r0, r3
 8019940:	f001 fac9 	bl	801aed6 <USBD_CtlError>
            ret = USBD_FAIL;
 8019944:	2317      	movs	r3, #23
 8019946:	18fb      	adds	r3, r7, r3
 8019948:	2202      	movs	r2, #2
 801994a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801994c:	e00a      	b.n	8019964 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801994e:	683a      	ldr	r2, [r7, #0]
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	0011      	movs	r1, r2
 8019954:	0018      	movs	r0, r3
 8019956:	f001 fabe 	bl	801aed6 <USBD_CtlError>
          ret = USBD_FAIL;
 801995a:	2317      	movs	r3, #23
 801995c:	18fb      	adds	r3, r7, r3
 801995e:	2202      	movs	r2, #2
 8019960:	701a      	strb	r2, [r3, #0]
          break;
 8019962:	e000      	b.n	8019966 <USBD_CDC_Setup+0x166>
          break;
 8019964:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8019966:	e00a      	b.n	801997e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8019968:	683a      	ldr	r2, [r7, #0]
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	0011      	movs	r1, r2
 801996e:	0018      	movs	r0, r3
 8019970:	f001 fab1 	bl	801aed6 <USBD_CtlError>
      ret = USBD_FAIL;
 8019974:	2317      	movs	r3, #23
 8019976:	18fb      	adds	r3, r7, r3
 8019978:	2202      	movs	r2, #2
 801997a:	701a      	strb	r2, [r3, #0]
      break;
 801997c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801997e:	2317      	movs	r3, #23
 8019980:	18fb      	adds	r3, r7, r3
 8019982:	781b      	ldrb	r3, [r3, #0]
}
 8019984:	0018      	movs	r0, r3
 8019986:	46bd      	mov	sp, r7
 8019988:	b006      	add	sp, #24
 801998a:	bd80      	pop	{r7, pc}
 801998c:	00000201 	.word	0x00000201

08019990 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b084      	sub	sp, #16
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
 8019998:	000a      	movs	r2, r1
 801999a:	1cfb      	adds	r3, r7, #3
 801999c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801999e:	687a      	ldr	r2, [r7, #4]
 80199a0:	23ae      	movs	r3, #174	@ 0xae
 80199a2:	009b      	lsls	r3, r3, #2
 80199a4:	58d3      	ldr	r3, [r2, r3]
 80199a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80199a8:	687a      	ldr	r2, [r7, #4]
 80199aa:	23b0      	movs	r3, #176	@ 0xb0
 80199ac:	009b      	lsls	r3, r3, #2
 80199ae:	58d3      	ldr	r3, [r2, r3]
 80199b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80199b2:	687a      	ldr	r2, [r7, #4]
 80199b4:	23ae      	movs	r3, #174	@ 0xae
 80199b6:	009b      	lsls	r3, r3, #2
 80199b8:	58d3      	ldr	r3, [r2, r3]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d03e      	beq.n	8019a3c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80199be:	1cfb      	adds	r3, r7, #3
 80199c0:	781a      	ldrb	r2, [r3, #0]
 80199c2:	6879      	ldr	r1, [r7, #4]
 80199c4:	0013      	movs	r3, r2
 80199c6:	009b      	lsls	r3, r3, #2
 80199c8:	189b      	adds	r3, r3, r2
 80199ca:	009b      	lsls	r3, r3, #2
 80199cc:	18cb      	adds	r3, r1, r3
 80199ce:	331c      	adds	r3, #28
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d02b      	beq.n	8019a2e <USBD_CDC_DataIn+0x9e>
 80199d6:	1cfb      	adds	r3, r7, #3
 80199d8:	781a      	ldrb	r2, [r3, #0]
 80199da:	6879      	ldr	r1, [r7, #4]
 80199dc:	0013      	movs	r3, r2
 80199de:	009b      	lsls	r3, r3, #2
 80199e0:	189b      	adds	r3, r3, r2
 80199e2:	009b      	lsls	r3, r3, #2
 80199e4:	18cb      	adds	r3, r1, r3
 80199e6:	331c      	adds	r3, #28
 80199e8:	6818      	ldr	r0, [r3, #0]
 80199ea:	1cfb      	adds	r3, r7, #3
 80199ec:	781a      	ldrb	r2, [r3, #0]
 80199ee:	68b9      	ldr	r1, [r7, #8]
 80199f0:	0013      	movs	r3, r2
 80199f2:	009b      	lsls	r3, r3, #2
 80199f4:	189b      	adds	r3, r3, r2
 80199f6:	00db      	lsls	r3, r3, #3
 80199f8:	18cb      	adds	r3, r1, r3
 80199fa:	3338      	adds	r3, #56	@ 0x38
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	0019      	movs	r1, r3
 8019a00:	f7e6 fc56 	bl	80002b0 <__aeabi_uidivmod>
 8019a04:	1e0b      	subs	r3, r1, #0
 8019a06:	d112      	bne.n	8019a2e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8019a08:	1cfb      	adds	r3, r7, #3
 8019a0a:	781a      	ldrb	r2, [r3, #0]
 8019a0c:	6879      	ldr	r1, [r7, #4]
 8019a0e:	0013      	movs	r3, r2
 8019a10:	009b      	lsls	r3, r3, #2
 8019a12:	189b      	adds	r3, r3, r2
 8019a14:	009b      	lsls	r3, r3, #2
 8019a16:	18cb      	adds	r3, r1, r3
 8019a18:	331c      	adds	r3, #28
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8019a1e:	1cfb      	adds	r3, r7, #3
 8019a20:	7819      	ldrb	r1, [r3, #0]
 8019a22:	6878      	ldr	r0, [r7, #4]
 8019a24:	2300      	movs	r3, #0
 8019a26:	2200      	movs	r2, #0
 8019a28:	f002 f82f 	bl	801ba8a <USBD_LL_Transmit>
 8019a2c:	e004      	b.n	8019a38 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8019a2e:	68fa      	ldr	r2, [r7, #12]
 8019a30:	2385      	movs	r3, #133	@ 0x85
 8019a32:	009b      	lsls	r3, r3, #2
 8019a34:	2100      	movs	r1, #0
 8019a36:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8019a38:	2300      	movs	r3, #0
 8019a3a:	e000      	b.n	8019a3e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8019a3c:	2302      	movs	r3, #2
  }
}
 8019a3e:	0018      	movs	r0, r3
 8019a40:	46bd      	mov	sp, r7
 8019a42:	b004      	add	sp, #16
 8019a44:	bd80      	pop	{r7, pc}

08019a46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019a46:	b580      	push	{r7, lr}
 8019a48:	b084      	sub	sp, #16
 8019a4a:	af00      	add	r7, sp, #0
 8019a4c:	6078      	str	r0, [r7, #4]
 8019a4e:	000a      	movs	r2, r1
 8019a50:	1cfb      	adds	r3, r7, #3
 8019a52:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019a54:	687a      	ldr	r2, [r7, #4]
 8019a56:	23ae      	movs	r3, #174	@ 0xae
 8019a58:	009b      	lsls	r3, r3, #2
 8019a5a:	58d3      	ldr	r3, [r2, r3]
 8019a5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8019a5e:	1cfb      	adds	r3, r7, #3
 8019a60:	781a      	ldrb	r2, [r3, #0]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	0011      	movs	r1, r2
 8019a66:	0018      	movs	r0, r3
 8019a68:	f002 f87d 	bl	801bb66 <USBD_LL_GetRxDataSize>
 8019a6c:	0001      	movs	r1, r0
 8019a6e:	68fa      	ldr	r2, [r7, #12]
 8019a70:	2383      	movs	r3, #131	@ 0x83
 8019a72:	009b      	lsls	r3, r3, #2
 8019a74:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8019a76:	687a      	ldr	r2, [r7, #4]
 8019a78:	23ae      	movs	r3, #174	@ 0xae
 8019a7a:	009b      	lsls	r3, r3, #2
 8019a7c:	58d3      	ldr	r3, [r2, r3]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d011      	beq.n	8019aa6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8019a82:	687a      	ldr	r2, [r7, #4]
 8019a84:	23af      	movs	r3, #175	@ 0xaf
 8019a86:	009b      	lsls	r3, r3, #2
 8019a88:	58d3      	ldr	r3, [r2, r3]
 8019a8a:	68da      	ldr	r2, [r3, #12]
 8019a8c:	68f9      	ldr	r1, [r7, #12]
 8019a8e:	2381      	movs	r3, #129	@ 0x81
 8019a90:	009b      	lsls	r3, r3, #2
 8019a92:	58c8      	ldr	r0, [r1, r3]
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	2183      	movs	r1, #131	@ 0x83
 8019a98:	0089      	lsls	r1, r1, #2
 8019a9a:	468c      	mov	ip, r1
 8019a9c:	4463      	add	r3, ip
 8019a9e:	0019      	movs	r1, r3
 8019aa0:	4790      	blx	r2

    return USBD_OK;
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	e000      	b.n	8019aa8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8019aa6:	2302      	movs	r3, #2
  }
}
 8019aa8:	0018      	movs	r0, r3
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	b004      	add	sp, #16
 8019aae:	bd80      	pop	{r7, pc}

08019ab0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019ab0:	b590      	push	{r4, r7, lr}
 8019ab2:	b085      	sub	sp, #20
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019ab8:	687a      	ldr	r2, [r7, #4]
 8019aba:	23ae      	movs	r3, #174	@ 0xae
 8019abc:	009b      	lsls	r3, r3, #2
 8019abe:	58d3      	ldr	r3, [r2, r3]
 8019ac0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8019ac2:	687a      	ldr	r2, [r7, #4]
 8019ac4:	23af      	movs	r3, #175	@ 0xaf
 8019ac6:	009b      	lsls	r3, r3, #2
 8019ac8:	58d3      	ldr	r3, [r2, r3]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d018      	beq.n	8019b00 <USBD_CDC_EP0_RxReady+0x50>
 8019ace:	68fa      	ldr	r2, [r7, #12]
 8019ad0:	2380      	movs	r3, #128	@ 0x80
 8019ad2:	009b      	lsls	r3, r3, #2
 8019ad4:	5cd3      	ldrb	r3, [r2, r3]
 8019ad6:	2bff      	cmp	r3, #255	@ 0xff
 8019ad8:	d012      	beq.n	8019b00 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019ada:	687a      	ldr	r2, [r7, #4]
 8019adc:	23af      	movs	r3, #175	@ 0xaf
 8019ade:	009b      	lsls	r3, r3, #2
 8019ae0:	58d3      	ldr	r3, [r2, r3]
 8019ae2:	689b      	ldr	r3, [r3, #8]
 8019ae4:	68f9      	ldr	r1, [r7, #12]
 8019ae6:	2280      	movs	r2, #128	@ 0x80
 8019ae8:	0092      	lsls	r2, r2, #2
 8019aea:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8019aec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8019aee:	68fa      	ldr	r2, [r7, #12]
 8019af0:	4c06      	ldr	r4, [pc, #24]	@ (8019b0c <USBD_CDC_EP0_RxReady+0x5c>)
 8019af2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019af4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8019af6:	68fa      	ldr	r2, [r7, #12]
 8019af8:	2380      	movs	r3, #128	@ 0x80
 8019afa:	009b      	lsls	r3, r3, #2
 8019afc:	21ff      	movs	r1, #255	@ 0xff
 8019afe:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8019b00:	2300      	movs	r3, #0
}
 8019b02:	0018      	movs	r0, r3
 8019b04:	46bd      	mov	sp, r7
 8019b06:	b005      	add	sp, #20
 8019b08:	bd90      	pop	{r4, r7, pc}
 8019b0a:	46c0      	nop			@ (mov r8, r8)
 8019b0c:	00000201 	.word	0x00000201

08019b10 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b082      	sub	sp, #8
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	2243      	movs	r2, #67	@ 0x43
 8019b1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8019b1e:	4b02      	ldr	r3, [pc, #8]	@ (8019b28 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8019b20:	0018      	movs	r0, r3
 8019b22:	46bd      	mov	sp, r7
 8019b24:	b002      	add	sp, #8
 8019b26:	bd80      	pop	{r7, pc}
 8019b28:	2000016c 	.word	0x2000016c

08019b2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	2243      	movs	r2, #67	@ 0x43
 8019b38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8019b3a:	4b02      	ldr	r3, [pc, #8]	@ (8019b44 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8019b3c:	0018      	movs	r0, r3
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	b002      	add	sp, #8
 8019b42:	bd80      	pop	{r7, pc}
 8019b44:	20000128 	.word	0x20000128

08019b48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b082      	sub	sp, #8
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	2243      	movs	r2, #67	@ 0x43
 8019b54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8019b56:	4b02      	ldr	r3, [pc, #8]	@ (8019b60 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8019b58:	0018      	movs	r0, r3
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	b002      	add	sp, #8
 8019b5e:	bd80      	pop	{r7, pc}
 8019b60:	200001b0 	.word	0x200001b0

08019b64 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b082      	sub	sp, #8
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	220a      	movs	r2, #10
 8019b70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8019b72:	4b02      	ldr	r3, [pc, #8]	@ (8019b7c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8019b74:	0018      	movs	r0, r3
 8019b76:	46bd      	mov	sp, r7
 8019b78:	b002      	add	sp, #8
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	200000e4 	.word	0x200000e4

08019b80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b084      	sub	sp, #16
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
 8019b88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8019b8a:	200f      	movs	r0, #15
 8019b8c:	183b      	adds	r3, r7, r0
 8019b8e:	2202      	movs	r2, #2
 8019b90:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8019b92:	683b      	ldr	r3, [r7, #0]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d007      	beq.n	8019ba8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8019b98:	687a      	ldr	r2, [r7, #4]
 8019b9a:	23af      	movs	r3, #175	@ 0xaf
 8019b9c:	009b      	lsls	r3, r3, #2
 8019b9e:	6839      	ldr	r1, [r7, #0]
 8019ba0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8019ba2:	183b      	adds	r3, r7, r0
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8019ba8:	230f      	movs	r3, #15
 8019baa:	18fb      	adds	r3, r7, r3
 8019bac:	781b      	ldrb	r3, [r3, #0]
}
 8019bae:	0018      	movs	r0, r3
 8019bb0:	46bd      	mov	sp, r7
 8019bb2:	b004      	add	sp, #16
 8019bb4:	bd80      	pop	{r7, pc}

08019bb6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8019bb6:	b580      	push	{r7, lr}
 8019bb8:	b086      	sub	sp, #24
 8019bba:	af00      	add	r7, sp, #0
 8019bbc:	60f8      	str	r0, [r7, #12]
 8019bbe:	60b9      	str	r1, [r7, #8]
 8019bc0:	1dbb      	adds	r3, r7, #6
 8019bc2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019bc4:	68fa      	ldr	r2, [r7, #12]
 8019bc6:	23ae      	movs	r3, #174	@ 0xae
 8019bc8:	009b      	lsls	r3, r3, #2
 8019bca:	58d3      	ldr	r3, [r2, r3]
 8019bcc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8019bce:	697a      	ldr	r2, [r7, #20]
 8019bd0:	2382      	movs	r3, #130	@ 0x82
 8019bd2:	009b      	lsls	r3, r3, #2
 8019bd4:	68b9      	ldr	r1, [r7, #8]
 8019bd6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8019bd8:	1dbb      	adds	r3, r7, #6
 8019bda:	8819      	ldrh	r1, [r3, #0]
 8019bdc:	697a      	ldr	r2, [r7, #20]
 8019bde:	2384      	movs	r3, #132	@ 0x84
 8019be0:	009b      	lsls	r3, r3, #2
 8019be2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8019be4:	2300      	movs	r3, #0
}
 8019be6:	0018      	movs	r0, r3
 8019be8:	46bd      	mov	sp, r7
 8019bea:	b006      	add	sp, #24
 8019bec:	bd80      	pop	{r7, pc}

08019bee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8019bee:	b580      	push	{r7, lr}
 8019bf0:	b084      	sub	sp, #16
 8019bf2:	af00      	add	r7, sp, #0
 8019bf4:	6078      	str	r0, [r7, #4]
 8019bf6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019bf8:	687a      	ldr	r2, [r7, #4]
 8019bfa:	23ae      	movs	r3, #174	@ 0xae
 8019bfc:	009b      	lsls	r3, r3, #2
 8019bfe:	58d3      	ldr	r3, [r2, r3]
 8019c00:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8019c02:	68fa      	ldr	r2, [r7, #12]
 8019c04:	2381      	movs	r3, #129	@ 0x81
 8019c06:	009b      	lsls	r3, r3, #2
 8019c08:	6839      	ldr	r1, [r7, #0]
 8019c0a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8019c0c:	2300      	movs	r3, #0
}
 8019c0e:	0018      	movs	r0, r3
 8019c10:	46bd      	mov	sp, r7
 8019c12:	b004      	add	sp, #16
 8019c14:	bd80      	pop	{r7, pc}

08019c16 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8019c16:	b580      	push	{r7, lr}
 8019c18:	b084      	sub	sp, #16
 8019c1a:	af00      	add	r7, sp, #0
 8019c1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c1e:	687a      	ldr	r2, [r7, #4]
 8019c20:	23ae      	movs	r3, #174	@ 0xae
 8019c22:	009b      	lsls	r3, r3, #2
 8019c24:	58d3      	ldr	r3, [r2, r3]
 8019c26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8019c28:	687a      	ldr	r2, [r7, #4]
 8019c2a:	23ae      	movs	r3, #174	@ 0xae
 8019c2c:	009b      	lsls	r3, r3, #2
 8019c2e:	58d3      	ldr	r3, [r2, r3]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d022      	beq.n	8019c7a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8019c34:	68fa      	ldr	r2, [r7, #12]
 8019c36:	2385      	movs	r3, #133	@ 0x85
 8019c38:	009b      	lsls	r3, r3, #2
 8019c3a:	58d3      	ldr	r3, [r2, r3]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d11a      	bne.n	8019c76 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8019c40:	68fa      	ldr	r2, [r7, #12]
 8019c42:	2385      	movs	r3, #133	@ 0x85
 8019c44:	009b      	lsls	r3, r3, #2
 8019c46:	2101      	movs	r1, #1
 8019c48:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8019c4a:	68fa      	ldr	r2, [r7, #12]
 8019c4c:	2384      	movs	r3, #132	@ 0x84
 8019c4e:	009b      	lsls	r3, r3, #2
 8019c50:	58d2      	ldr	r2, [r2, r3]
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8019c56:	68fa      	ldr	r2, [r7, #12]
 8019c58:	2382      	movs	r3, #130	@ 0x82
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8019c5e:	68fa      	ldr	r2, [r7, #12]
 8019c60:	2384      	movs	r3, #132	@ 0x84
 8019c62:	009b      	lsls	r3, r3, #2
 8019c64:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8019c66:	b29b      	uxth	r3, r3
 8019c68:	6878      	ldr	r0, [r7, #4]
 8019c6a:	000a      	movs	r2, r1
 8019c6c:	2181      	movs	r1, #129	@ 0x81
 8019c6e:	f001 ff0c 	bl	801ba8a <USBD_LL_Transmit>

      return USBD_OK;
 8019c72:	2300      	movs	r3, #0
 8019c74:	e002      	b.n	8019c7c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8019c76:	2301      	movs	r3, #1
 8019c78:	e000      	b.n	8019c7c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8019c7a:	2302      	movs	r3, #2
  }
}
 8019c7c:	0018      	movs	r0, r3
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	b004      	add	sp, #16
 8019c82:	bd80      	pop	{r7, pc}

08019c84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b084      	sub	sp, #16
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c8c:	687a      	ldr	r2, [r7, #4]
 8019c8e:	23ae      	movs	r3, #174	@ 0xae
 8019c90:	009b      	lsls	r3, r3, #2
 8019c92:	58d3      	ldr	r3, [r2, r3]
 8019c94:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8019c96:	687a      	ldr	r2, [r7, #4]
 8019c98:	23ae      	movs	r3, #174	@ 0xae
 8019c9a:	009b      	lsls	r3, r3, #2
 8019c9c:	58d3      	ldr	r3, [r2, r3]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d019      	beq.n	8019cd6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	7c1b      	ldrb	r3, [r3, #16]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d10a      	bne.n	8019cc0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019caa:	68fa      	ldr	r2, [r7, #12]
 8019cac:	2381      	movs	r3, #129	@ 0x81
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	58d2      	ldr	r2, [r2, r3]
 8019cb2:	2380      	movs	r3, #128	@ 0x80
 8019cb4:	009b      	lsls	r3, r3, #2
 8019cb6:	6878      	ldr	r0, [r7, #4]
 8019cb8:	2101      	movs	r1, #1
 8019cba:	f001 ff1d 	bl	801baf8 <USBD_LL_PrepareReceive>
 8019cbe:	e008      	b.n	8019cd2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019cc0:	68fa      	ldr	r2, [r7, #12]
 8019cc2:	2381      	movs	r3, #129	@ 0x81
 8019cc4:	009b      	lsls	r3, r3, #2
 8019cc6:	58d2      	ldr	r2, [r2, r3]
 8019cc8:	6878      	ldr	r0, [r7, #4]
 8019cca:	2340      	movs	r3, #64	@ 0x40
 8019ccc:	2101      	movs	r1, #1
 8019cce:	f001 ff13 	bl	801baf8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	e000      	b.n	8019cd8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8019cd6:	2302      	movs	r3, #2
  }
}
 8019cd8:	0018      	movs	r0, r3
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	b004      	add	sp, #16
 8019cde:	bd80      	pop	{r7, pc}

08019ce0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b084      	sub	sp, #16
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	60b9      	str	r1, [r7, #8]
 8019cea:	1dfb      	adds	r3, r7, #7
 8019cec:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019cee:	68fb      	ldr	r3, [r7, #12]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d101      	bne.n	8019cf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019cf4:	2302      	movs	r3, #2
 8019cf6:	e020      	b.n	8019d3a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8019cf8:	68fa      	ldr	r2, [r7, #12]
 8019cfa:	23ad      	movs	r3, #173	@ 0xad
 8019cfc:	009b      	lsls	r3, r3, #2
 8019cfe:	58d3      	ldr	r3, [r2, r3]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d004      	beq.n	8019d0e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8019d04:	68fa      	ldr	r2, [r7, #12]
 8019d06:	23ad      	movs	r3, #173	@ 0xad
 8019d08:	009b      	lsls	r3, r3, #2
 8019d0a:	2100      	movs	r1, #0
 8019d0c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019d0e:	68bb      	ldr	r3, [r7, #8]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d004      	beq.n	8019d1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8019d14:	68fa      	ldr	r2, [r7, #12]
 8019d16:	23ac      	movs	r3, #172	@ 0xac
 8019d18:	009b      	lsls	r3, r3, #2
 8019d1a:	68b9      	ldr	r1, [r7, #8]
 8019d1c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019d1e:	68fa      	ldr	r2, [r7, #12]
 8019d20:	23a7      	movs	r3, #167	@ 0xa7
 8019d22:	009b      	lsls	r3, r3, #2
 8019d24:	2101      	movs	r1, #1
 8019d26:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	1dfa      	adds	r2, r7, #7
 8019d2c:	7812      	ldrb	r2, [r2, #0]
 8019d2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8019d30:	68fb      	ldr	r3, [r7, #12]
 8019d32:	0018      	movs	r0, r3
 8019d34:	f001 fd0c 	bl	801b750 <USBD_LL_Init>

  return USBD_OK;
 8019d38:	2300      	movs	r3, #0
}
 8019d3a:	0018      	movs	r0, r3
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	b004      	add	sp, #16
 8019d40:	bd80      	pop	{r7, pc}

08019d42 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019d42:	b580      	push	{r7, lr}
 8019d44:	b084      	sub	sp, #16
 8019d46:	af00      	add	r7, sp, #0
 8019d48:	6078      	str	r0, [r7, #4]
 8019d4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8019d4c:	200f      	movs	r0, #15
 8019d4e:	183b      	adds	r3, r7, r0
 8019d50:	2200      	movs	r2, #0
 8019d52:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8019d54:	683b      	ldr	r3, [r7, #0]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d008      	beq.n	8019d6c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8019d5a:	687a      	ldr	r2, [r7, #4]
 8019d5c:	23ad      	movs	r3, #173	@ 0xad
 8019d5e:	009b      	lsls	r3, r3, #2
 8019d60:	6839      	ldr	r1, [r7, #0]
 8019d62:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8019d64:	183b      	adds	r3, r7, r0
 8019d66:	2200      	movs	r2, #0
 8019d68:	701a      	strb	r2, [r3, #0]
 8019d6a:	e003      	b.n	8019d74 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8019d6c:	230f      	movs	r3, #15
 8019d6e:	18fb      	adds	r3, r7, r3
 8019d70:	2202      	movs	r2, #2
 8019d72:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8019d74:	230f      	movs	r3, #15
 8019d76:	18fb      	adds	r3, r7, r3
 8019d78:	781b      	ldrb	r3, [r3, #0]
}
 8019d7a:	0018      	movs	r0, r3
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	b004      	add	sp, #16
 8019d80:	bd80      	pop	{r7, pc}

08019d82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8019d82:	b580      	push	{r7, lr}
 8019d84:	b082      	sub	sp, #8
 8019d86:	af00      	add	r7, sp, #0
 8019d88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	0018      	movs	r0, r3
 8019d8e:	f001 fd43 	bl	801b818 <USBD_LL_Start>

  return USBD_OK;
 8019d92:	2300      	movs	r3, #0
}
 8019d94:	0018      	movs	r0, r3
 8019d96:	46bd      	mov	sp, r7
 8019d98:	b002      	add	sp, #8
 8019d9a:	bd80      	pop	{r7, pc}

08019d9c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019da4:	2300      	movs	r3, #0
}
 8019da6:	0018      	movs	r0, r3
 8019da8:	46bd      	mov	sp, r7
 8019daa:	b002      	add	sp, #8
 8019dac:	bd80      	pop	{r7, pc}

08019dae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8019dae:	b590      	push	{r4, r7, lr}
 8019db0:	b085      	sub	sp, #20
 8019db2:	af00      	add	r7, sp, #0
 8019db4:	6078      	str	r0, [r7, #4]
 8019db6:	000a      	movs	r2, r1
 8019db8:	1cfb      	adds	r3, r7, #3
 8019dba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019dbc:	240f      	movs	r4, #15
 8019dbe:	193b      	adds	r3, r7, r4
 8019dc0:	2202      	movs	r2, #2
 8019dc2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8019dc4:	687a      	ldr	r2, [r7, #4]
 8019dc6:	23ad      	movs	r3, #173	@ 0xad
 8019dc8:	009b      	lsls	r3, r3, #2
 8019dca:	58d3      	ldr	r3, [r2, r3]
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d00e      	beq.n	8019dee <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8019dd0:	687a      	ldr	r2, [r7, #4]
 8019dd2:	23ad      	movs	r3, #173	@ 0xad
 8019dd4:	009b      	lsls	r3, r3, #2
 8019dd6:	58d3      	ldr	r3, [r2, r3]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	1cfa      	adds	r2, r7, #3
 8019ddc:	7811      	ldrb	r1, [r2, #0]
 8019dde:	687a      	ldr	r2, [r7, #4]
 8019de0:	0010      	movs	r0, r2
 8019de2:	4798      	blx	r3
 8019de4:	1e03      	subs	r3, r0, #0
 8019de6:	d102      	bne.n	8019dee <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8019de8:	193b      	adds	r3, r7, r4
 8019dea:	2200      	movs	r2, #0
 8019dec:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8019dee:	230f      	movs	r3, #15
 8019df0:	18fb      	adds	r3, r7, r3
 8019df2:	781b      	ldrb	r3, [r3, #0]
}
 8019df4:	0018      	movs	r0, r3
 8019df6:	46bd      	mov	sp, r7
 8019df8:	b005      	add	sp, #20
 8019dfa:	bd90      	pop	{r4, r7, pc}

08019dfc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b082      	sub	sp, #8
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
 8019e04:	000a      	movs	r2, r1
 8019e06:	1cfb      	adds	r3, r7, #3
 8019e08:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8019e0a:	687a      	ldr	r2, [r7, #4]
 8019e0c:	23ad      	movs	r3, #173	@ 0xad
 8019e0e:	009b      	lsls	r3, r3, #2
 8019e10:	58d3      	ldr	r3, [r2, r3]
 8019e12:	685b      	ldr	r3, [r3, #4]
 8019e14:	1cfa      	adds	r2, r7, #3
 8019e16:	7811      	ldrb	r1, [r2, #0]
 8019e18:	687a      	ldr	r2, [r7, #4]
 8019e1a:	0010      	movs	r0, r2
 8019e1c:	4798      	blx	r3

  return USBD_OK;
 8019e1e:	2300      	movs	r3, #0
}
 8019e20:	0018      	movs	r0, r3
 8019e22:	46bd      	mov	sp, r7
 8019e24:	b002      	add	sp, #8
 8019e26:	bd80      	pop	{r7, pc}

08019e28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019e28:	b580      	push	{r7, lr}
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	af00      	add	r7, sp, #0
 8019e2e:	6078      	str	r0, [r7, #4]
 8019e30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	22aa      	movs	r2, #170	@ 0xaa
 8019e36:	0092      	lsls	r2, r2, #2
 8019e38:	4694      	mov	ip, r2
 8019e3a:	4463      	add	r3, ip
 8019e3c:	683a      	ldr	r2, [r7, #0]
 8019e3e:	0011      	movs	r1, r2
 8019e40:	0018      	movs	r0, r3
 8019e42:	f001 f810 	bl	801ae66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019e46:	687a      	ldr	r2, [r7, #4]
 8019e48:	23a5      	movs	r3, #165	@ 0xa5
 8019e4a:	009b      	lsls	r3, r3, #2
 8019e4c:	2101      	movs	r1, #1
 8019e4e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	4a23      	ldr	r2, [pc, #140]	@ (8019ee0 <USBD_LL_SetupStage+0xb8>)
 8019e54:	5a9b      	ldrh	r3, [r3, r2]
 8019e56:	0019      	movs	r1, r3
 8019e58:	687a      	ldr	r2, [r7, #4]
 8019e5a:	23a6      	movs	r3, #166	@ 0xa6
 8019e5c:	009b      	lsls	r3, r3, #2
 8019e5e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8019e60:	687a      	ldr	r2, [r7, #4]
 8019e62:	23aa      	movs	r3, #170	@ 0xaa
 8019e64:	009b      	lsls	r3, r3, #2
 8019e66:	5cd3      	ldrb	r3, [r2, r3]
 8019e68:	001a      	movs	r2, r3
 8019e6a:	231f      	movs	r3, #31
 8019e6c:	4013      	ands	r3, r2
 8019e6e:	2b02      	cmp	r3, #2
 8019e70:	d019      	beq.n	8019ea6 <USBD_LL_SetupStage+0x7e>
 8019e72:	d822      	bhi.n	8019eba <USBD_LL_SetupStage+0x92>
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d002      	beq.n	8019e7e <USBD_LL_SetupStage+0x56>
 8019e78:	2b01      	cmp	r3, #1
 8019e7a:	d00a      	beq.n	8019e92 <USBD_LL_SetupStage+0x6a>
 8019e7c:	e01d      	b.n	8019eba <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	22aa      	movs	r2, #170	@ 0xaa
 8019e82:	0092      	lsls	r2, r2, #2
 8019e84:	189a      	adds	r2, r3, r2
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	0011      	movs	r1, r2
 8019e8a:	0018      	movs	r0, r3
 8019e8c:	f000 fa10 	bl	801a2b0 <USBD_StdDevReq>
      break;
 8019e90:	e020      	b.n	8019ed4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	22aa      	movs	r2, #170	@ 0xaa
 8019e96:	0092      	lsls	r2, r2, #2
 8019e98:	189a      	adds	r2, r3, r2
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	0011      	movs	r1, r2
 8019e9e:	0018      	movs	r0, r3
 8019ea0:	f000 fa78 	bl	801a394 <USBD_StdItfReq>
      break;
 8019ea4:	e016      	b.n	8019ed4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	22aa      	movs	r2, #170	@ 0xaa
 8019eaa:	0092      	lsls	r2, r2, #2
 8019eac:	189a      	adds	r2, r3, r2
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	0011      	movs	r1, r2
 8019eb2:	0018      	movs	r0, r3
 8019eb4:	f000 fac5 	bl	801a442 <USBD_StdEPReq>
      break;
 8019eb8:	e00c      	b.n	8019ed4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019eba:	687a      	ldr	r2, [r7, #4]
 8019ebc:	23aa      	movs	r3, #170	@ 0xaa
 8019ebe:	009b      	lsls	r3, r3, #2
 8019ec0:	5cd3      	ldrb	r3, [r2, r3]
 8019ec2:	227f      	movs	r2, #127	@ 0x7f
 8019ec4:	4393      	bics	r3, r2
 8019ec6:	b2da      	uxtb	r2, r3
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	0011      	movs	r1, r2
 8019ecc:	0018      	movs	r0, r3
 8019ece:	f001 fd2a 	bl	801b926 <USBD_LL_StallEP>
      break;
 8019ed2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8019ed4:	2300      	movs	r3, #0
}
 8019ed6:	0018      	movs	r0, r3
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	b002      	add	sp, #8
 8019edc:	bd80      	pop	{r7, pc}
 8019ede:	46c0      	nop			@ (mov r8, r8)
 8019ee0:	000002ae 	.word	0x000002ae

08019ee4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b086      	sub	sp, #24
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	60f8      	str	r0, [r7, #12]
 8019eec:	607a      	str	r2, [r7, #4]
 8019eee:	200b      	movs	r0, #11
 8019ef0:	183b      	adds	r3, r7, r0
 8019ef2:	1c0a      	adds	r2, r1, #0
 8019ef4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8019ef6:	183b      	adds	r3, r7, r0
 8019ef8:	781b      	ldrb	r3, [r3, #0]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d154      	bne.n	8019fa8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	3355      	adds	r3, #85	@ 0x55
 8019f02:	33ff      	adds	r3, #255	@ 0xff
 8019f04:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8019f06:	68fa      	ldr	r2, [r7, #12]
 8019f08:	23a5      	movs	r3, #165	@ 0xa5
 8019f0a:	009b      	lsls	r3, r3, #2
 8019f0c:	58d3      	ldr	r3, [r2, r3]
 8019f0e:	2b03      	cmp	r3, #3
 8019f10:	d139      	bne.n	8019f86 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8019f12:	697b      	ldr	r3, [r7, #20]
 8019f14:	68da      	ldr	r2, [r3, #12]
 8019f16:	697b      	ldr	r3, [r7, #20]
 8019f18:	691b      	ldr	r3, [r3, #16]
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d919      	bls.n	8019f52 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8019f1e:	697b      	ldr	r3, [r7, #20]
 8019f20:	68da      	ldr	r2, [r3, #12]
 8019f22:	697b      	ldr	r3, [r7, #20]
 8019f24:	691b      	ldr	r3, [r3, #16]
 8019f26:	1ad2      	subs	r2, r2, r3
 8019f28:	697b      	ldr	r3, [r7, #20]
 8019f2a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	68da      	ldr	r2, [r3, #12]
 8019f30:	697b      	ldr	r3, [r7, #20]
 8019f32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8019f34:	429a      	cmp	r2, r3
 8019f36:	d203      	bcs.n	8019f40 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8019f3c:	b29b      	uxth	r3, r3
 8019f3e:	e002      	b.n	8019f46 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f40:	697b      	ldr	r3, [r7, #20]
 8019f42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8019f44:	b29b      	uxth	r3, r3
 8019f46:	6879      	ldr	r1, [r7, #4]
 8019f48:	68f8      	ldr	r0, [r7, #12]
 8019f4a:	001a      	movs	r2, r3
 8019f4c:	f001 f898 	bl	801b080 <USBD_CtlContinueRx>
 8019f50:	e045      	b.n	8019fde <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8019f52:	68fa      	ldr	r2, [r7, #12]
 8019f54:	23ad      	movs	r3, #173	@ 0xad
 8019f56:	009b      	lsls	r3, r3, #2
 8019f58:	58d3      	ldr	r3, [r2, r3]
 8019f5a:	691b      	ldr	r3, [r3, #16]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d00d      	beq.n	8019f7c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019f60:	68fa      	ldr	r2, [r7, #12]
 8019f62:	23a7      	movs	r3, #167	@ 0xa7
 8019f64:	009b      	lsls	r3, r3, #2
 8019f66:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8019f68:	2b03      	cmp	r3, #3
 8019f6a:	d107      	bne.n	8019f7c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8019f6c:	68fa      	ldr	r2, [r7, #12]
 8019f6e:	23ad      	movs	r3, #173	@ 0xad
 8019f70:	009b      	lsls	r3, r3, #2
 8019f72:	58d3      	ldr	r3, [r2, r3]
 8019f74:	691b      	ldr	r3, [r3, #16]
 8019f76:	68fa      	ldr	r2, [r7, #12]
 8019f78:	0010      	movs	r0, r2
 8019f7a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	0018      	movs	r0, r3
 8019f80:	f001 f891 	bl	801b0a6 <USBD_CtlSendStatus>
 8019f84:	e02b      	b.n	8019fde <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8019f86:	68fa      	ldr	r2, [r7, #12]
 8019f88:	23a5      	movs	r3, #165	@ 0xa5
 8019f8a:	009b      	lsls	r3, r3, #2
 8019f8c:	58d3      	ldr	r3, [r2, r3]
 8019f8e:	2b05      	cmp	r3, #5
 8019f90:	d125      	bne.n	8019fde <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8019f92:	68fa      	ldr	r2, [r7, #12]
 8019f94:	23a5      	movs	r3, #165	@ 0xa5
 8019f96:	009b      	lsls	r3, r3, #2
 8019f98:	2100      	movs	r1, #0
 8019f9a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	2100      	movs	r1, #0
 8019fa0:	0018      	movs	r0, r3
 8019fa2:	f001 fcc0 	bl	801b926 <USBD_LL_StallEP>
 8019fa6:	e01a      	b.n	8019fde <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8019fa8:	68fa      	ldr	r2, [r7, #12]
 8019faa:	23ad      	movs	r3, #173	@ 0xad
 8019fac:	009b      	lsls	r3, r3, #2
 8019fae:	58d3      	ldr	r3, [r2, r3]
 8019fb0:	699b      	ldr	r3, [r3, #24]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	d011      	beq.n	8019fda <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019fb6:	68fa      	ldr	r2, [r7, #12]
 8019fb8:	23a7      	movs	r3, #167	@ 0xa7
 8019fba:	009b      	lsls	r3, r3, #2
 8019fbc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8019fbe:	2b03      	cmp	r3, #3
 8019fc0:	d10b      	bne.n	8019fda <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8019fc2:	68fa      	ldr	r2, [r7, #12]
 8019fc4:	23ad      	movs	r3, #173	@ 0xad
 8019fc6:	009b      	lsls	r3, r3, #2
 8019fc8:	58d3      	ldr	r3, [r2, r3]
 8019fca:	699b      	ldr	r3, [r3, #24]
 8019fcc:	220b      	movs	r2, #11
 8019fce:	18ba      	adds	r2, r7, r2
 8019fd0:	7811      	ldrb	r1, [r2, #0]
 8019fd2:	68fa      	ldr	r2, [r7, #12]
 8019fd4:	0010      	movs	r0, r2
 8019fd6:	4798      	blx	r3
 8019fd8:	e001      	b.n	8019fde <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8019fda:	2302      	movs	r3, #2
 8019fdc:	e000      	b.n	8019fe0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8019fde:	2300      	movs	r3, #0
}
 8019fe0:	0018      	movs	r0, r3
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	b006      	add	sp, #24
 8019fe6:	bd80      	pop	{r7, pc}

08019fe8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8019fe8:	b580      	push	{r7, lr}
 8019fea:	b086      	sub	sp, #24
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	60f8      	str	r0, [r7, #12]
 8019ff0:	607a      	str	r2, [r7, #4]
 8019ff2:	200b      	movs	r0, #11
 8019ff4:	183b      	adds	r3, r7, r0
 8019ff6:	1c0a      	adds	r2, r1, #0
 8019ff8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8019ffa:	183b      	adds	r3, r7, r0
 8019ffc:	781b      	ldrb	r3, [r3, #0]
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d000      	beq.n	801a004 <USBD_LL_DataInStage+0x1c>
 801a002:	e08e      	b.n	801a122 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	3314      	adds	r3, #20
 801a008:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a00a:	68fa      	ldr	r2, [r7, #12]
 801a00c:	23a5      	movs	r3, #165	@ 0xa5
 801a00e:	009b      	lsls	r3, r3, #2
 801a010:	58d3      	ldr	r3, [r2, r3]
 801a012:	2b02      	cmp	r3, #2
 801a014:	d164      	bne.n	801a0e0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801a016:	697b      	ldr	r3, [r7, #20]
 801a018:	68da      	ldr	r2, [r3, #12]
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	691b      	ldr	r3, [r3, #16]
 801a01e:	429a      	cmp	r2, r3
 801a020:	d915      	bls.n	801a04e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801a022:	697b      	ldr	r3, [r7, #20]
 801a024:	68da      	ldr	r2, [r3, #12]
 801a026:	697b      	ldr	r3, [r7, #20]
 801a028:	691b      	ldr	r3, [r3, #16]
 801a02a:	1ad2      	subs	r2, r2, r3
 801a02c:	697b      	ldr	r3, [r7, #20]
 801a02e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801a030:	697b      	ldr	r3, [r7, #20]
 801a032:	68db      	ldr	r3, [r3, #12]
 801a034:	b29a      	uxth	r2, r3
 801a036:	6879      	ldr	r1, [r7, #4]
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	0018      	movs	r0, r3
 801a03c:	f000 ffe9 	bl	801b012 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a040:	68f8      	ldr	r0, [r7, #12]
 801a042:	2300      	movs	r3, #0
 801a044:	2200      	movs	r2, #0
 801a046:	2100      	movs	r1, #0
 801a048:	f001 fd56 	bl	801baf8 <USBD_LL_PrepareReceive>
 801a04c:	e059      	b.n	801a102 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a04e:	697b      	ldr	r3, [r7, #20]
 801a050:	689a      	ldr	r2, [r3, #8]
 801a052:	697b      	ldr	r3, [r7, #20]
 801a054:	691b      	ldr	r3, [r3, #16]
 801a056:	0019      	movs	r1, r3
 801a058:	0010      	movs	r0, r2
 801a05a:	f7e6 f929 	bl	80002b0 <__aeabi_uidivmod>
 801a05e:	1e0b      	subs	r3, r1, #0
 801a060:	d11f      	bne.n	801a0a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801a062:	697b      	ldr	r3, [r7, #20]
 801a064:	689a      	ldr	r2, [r3, #8]
 801a066:	697b      	ldr	r3, [r7, #20]
 801a068:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a06a:	429a      	cmp	r2, r3
 801a06c:	d319      	bcc.n	801a0a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801a06e:	697b      	ldr	r3, [r7, #20]
 801a070:	689a      	ldr	r2, [r3, #8]
 801a072:	68f9      	ldr	r1, [r7, #12]
 801a074:	23a6      	movs	r3, #166	@ 0xa6
 801a076:	009b      	lsls	r3, r3, #2
 801a078:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801a07a:	429a      	cmp	r2, r3
 801a07c:	d211      	bcs.n	801a0a2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	2200      	movs	r2, #0
 801a082:	2100      	movs	r1, #0
 801a084:	0018      	movs	r0, r3
 801a086:	f000 ffc4 	bl	801b012 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a08a:	68fa      	ldr	r2, [r7, #12]
 801a08c:	23a6      	movs	r3, #166	@ 0xa6
 801a08e:	009b      	lsls	r3, r3, #2
 801a090:	2100      	movs	r1, #0
 801a092:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a094:	68f8      	ldr	r0, [r7, #12]
 801a096:	2300      	movs	r3, #0
 801a098:	2200      	movs	r2, #0
 801a09a:	2100      	movs	r1, #0
 801a09c:	f001 fd2c 	bl	801baf8 <USBD_LL_PrepareReceive>
 801a0a0:	e02f      	b.n	801a102 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a0a2:	68fa      	ldr	r2, [r7, #12]
 801a0a4:	23ad      	movs	r3, #173	@ 0xad
 801a0a6:	009b      	lsls	r3, r3, #2
 801a0a8:	58d3      	ldr	r3, [r2, r3]
 801a0aa:	68db      	ldr	r3, [r3, #12]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d00d      	beq.n	801a0cc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a0b0:	68fa      	ldr	r2, [r7, #12]
 801a0b2:	23a7      	movs	r3, #167	@ 0xa7
 801a0b4:	009b      	lsls	r3, r3, #2
 801a0b6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a0b8:	2b03      	cmp	r3, #3
 801a0ba:	d107      	bne.n	801a0cc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801a0bc:	68fa      	ldr	r2, [r7, #12]
 801a0be:	23ad      	movs	r3, #173	@ 0xad
 801a0c0:	009b      	lsls	r3, r3, #2
 801a0c2:	58d3      	ldr	r3, [r2, r3]
 801a0c4:	68db      	ldr	r3, [r3, #12]
 801a0c6:	68fa      	ldr	r2, [r7, #12]
 801a0c8:	0010      	movs	r0, r2
 801a0ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	2180      	movs	r1, #128	@ 0x80
 801a0d0:	0018      	movs	r0, r3
 801a0d2:	f001 fc28 	bl	801b926 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	0018      	movs	r0, r3
 801a0da:	f000 fff8 	bl	801b0ce <USBD_CtlReceiveStatus>
 801a0de:	e010      	b.n	801a102 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a0e0:	68fa      	ldr	r2, [r7, #12]
 801a0e2:	23a5      	movs	r3, #165	@ 0xa5
 801a0e4:	009b      	lsls	r3, r3, #2
 801a0e6:	58d3      	ldr	r3, [r2, r3]
 801a0e8:	2b04      	cmp	r3, #4
 801a0ea:	d005      	beq.n	801a0f8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801a0ec:	68fa      	ldr	r2, [r7, #12]
 801a0ee:	23a5      	movs	r3, #165	@ 0xa5
 801a0f0:	009b      	lsls	r3, r3, #2
 801a0f2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d104      	bne.n	801a102 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	2180      	movs	r1, #128	@ 0x80
 801a0fc:	0018      	movs	r0, r3
 801a0fe:	f001 fc12 	bl	801b926 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801a102:	68fa      	ldr	r2, [r7, #12]
 801a104:	23a8      	movs	r3, #168	@ 0xa8
 801a106:	009b      	lsls	r3, r3, #2
 801a108:	5cd3      	ldrb	r3, [r2, r3]
 801a10a:	2b01      	cmp	r3, #1
 801a10c:	d124      	bne.n	801a158 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	0018      	movs	r0, r3
 801a112:	f7ff fe43 	bl	8019d9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a116:	68fa      	ldr	r2, [r7, #12]
 801a118:	23a8      	movs	r3, #168	@ 0xa8
 801a11a:	009b      	lsls	r3, r3, #2
 801a11c:	2100      	movs	r1, #0
 801a11e:	54d1      	strb	r1, [r2, r3]
 801a120:	e01a      	b.n	801a158 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801a122:	68fa      	ldr	r2, [r7, #12]
 801a124:	23ad      	movs	r3, #173	@ 0xad
 801a126:	009b      	lsls	r3, r3, #2
 801a128:	58d3      	ldr	r3, [r2, r3]
 801a12a:	695b      	ldr	r3, [r3, #20]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d011      	beq.n	801a154 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a130:	68fa      	ldr	r2, [r7, #12]
 801a132:	23a7      	movs	r3, #167	@ 0xa7
 801a134:	009b      	lsls	r3, r3, #2
 801a136:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801a138:	2b03      	cmp	r3, #3
 801a13a:	d10b      	bne.n	801a154 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801a13c:	68fa      	ldr	r2, [r7, #12]
 801a13e:	23ad      	movs	r3, #173	@ 0xad
 801a140:	009b      	lsls	r3, r3, #2
 801a142:	58d3      	ldr	r3, [r2, r3]
 801a144:	695b      	ldr	r3, [r3, #20]
 801a146:	220b      	movs	r2, #11
 801a148:	18ba      	adds	r2, r7, r2
 801a14a:	7811      	ldrb	r1, [r2, #0]
 801a14c:	68fa      	ldr	r2, [r7, #12]
 801a14e:	0010      	movs	r0, r2
 801a150:	4798      	blx	r3
 801a152:	e001      	b.n	801a158 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801a154:	2302      	movs	r3, #2
 801a156:	e000      	b.n	801a15a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801a158:	2300      	movs	r3, #0
}
 801a15a:	0018      	movs	r0, r3
 801a15c:	46bd      	mov	sp, r7
 801a15e:	b006      	add	sp, #24
 801a160:	bd80      	pop	{r7, pc}

0801a162 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a162:	b580      	push	{r7, lr}
 801a164:	b082      	sub	sp, #8
 801a166:	af00      	add	r7, sp, #0
 801a168:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	2340      	movs	r3, #64	@ 0x40
 801a16e:	2200      	movs	r2, #0
 801a170:	2100      	movs	r1, #0
 801a172:	f001 fb76 	bl	801b862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a176:	687a      	ldr	r2, [r7, #4]
 801a178:	23ac      	movs	r3, #172	@ 0xac
 801a17a:	005b      	lsls	r3, r3, #1
 801a17c:	2101      	movs	r1, #1
 801a17e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a180:	687a      	ldr	r2, [r7, #4]
 801a182:	23b2      	movs	r3, #178	@ 0xb2
 801a184:	005b      	lsls	r3, r3, #1
 801a186:	2140      	movs	r1, #64	@ 0x40
 801a188:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a18a:	6878      	ldr	r0, [r7, #4]
 801a18c:	2340      	movs	r3, #64	@ 0x40
 801a18e:	2200      	movs	r2, #0
 801a190:	2180      	movs	r1, #128	@ 0x80
 801a192:	f001 fb66 	bl	801b862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2201      	movs	r2, #1
 801a19a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2240      	movs	r2, #64	@ 0x40
 801a1a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a1a2:	687a      	ldr	r2, [r7, #4]
 801a1a4:	23a7      	movs	r3, #167	@ 0xa7
 801a1a6:	009b      	lsls	r3, r3, #2
 801a1a8:	2101      	movs	r1, #1
 801a1aa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801a1ac:	687a      	ldr	r2, [r7, #4]
 801a1ae:	23a5      	movs	r3, #165	@ 0xa5
 801a1b0:	009b      	lsls	r3, r3, #2
 801a1b2:	2100      	movs	r1, #0
 801a1b4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a1bc:	687a      	ldr	r2, [r7, #4]
 801a1be:	23a9      	movs	r3, #169	@ 0xa9
 801a1c0:	009b      	lsls	r3, r3, #2
 801a1c2:	2100      	movs	r1, #0
 801a1c4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801a1c6:	687a      	ldr	r2, [r7, #4]
 801a1c8:	23ae      	movs	r3, #174	@ 0xae
 801a1ca:	009b      	lsls	r3, r3, #2
 801a1cc:	58d3      	ldr	r3, [r2, r3]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d00a      	beq.n	801a1e8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a1d2:	687a      	ldr	r2, [r7, #4]
 801a1d4:	23ad      	movs	r3, #173	@ 0xad
 801a1d6:	009b      	lsls	r3, r3, #2
 801a1d8:	58d3      	ldr	r3, [r2, r3]
 801a1da:	685a      	ldr	r2, [r3, #4]
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	b2d9      	uxtb	r1, r3
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	0018      	movs	r0, r3
 801a1e6:	4790      	blx	r2
  }

  return USBD_OK;
 801a1e8:	2300      	movs	r3, #0
}
 801a1ea:	0018      	movs	r0, r3
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	b002      	add	sp, #8
 801a1f0:	bd80      	pop	{r7, pc}

0801a1f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a1f2:	b580      	push	{r7, lr}
 801a1f4:	b082      	sub	sp, #8
 801a1f6:	af00      	add	r7, sp, #0
 801a1f8:	6078      	str	r0, [r7, #4]
 801a1fa:	000a      	movs	r2, r1
 801a1fc:	1cfb      	adds	r3, r7, #3
 801a1fe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	1cfa      	adds	r2, r7, #3
 801a204:	7812      	ldrb	r2, [r2, #0]
 801a206:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a208:	2300      	movs	r3, #0
}
 801a20a:	0018      	movs	r0, r3
 801a20c:	46bd      	mov	sp, r7
 801a20e:	b002      	add	sp, #8
 801a210:	bd80      	pop	{r7, pc}
	...

0801a214 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b082      	sub	sp, #8
 801a218:	af00      	add	r7, sp, #0
 801a21a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801a21c:	687a      	ldr	r2, [r7, #4]
 801a21e:	23a7      	movs	r3, #167	@ 0xa7
 801a220:	009b      	lsls	r3, r3, #2
 801a222:	5cd1      	ldrb	r1, [r2, r3]
 801a224:	687b      	ldr	r3, [r7, #4]
 801a226:	4a06      	ldr	r2, [pc, #24]	@ (801a240 <USBD_LL_Suspend+0x2c>)
 801a228:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801a22a:	687a      	ldr	r2, [r7, #4]
 801a22c:	23a7      	movs	r3, #167	@ 0xa7
 801a22e:	009b      	lsls	r3, r3, #2
 801a230:	2104      	movs	r1, #4
 801a232:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801a234:	2300      	movs	r3, #0
}
 801a236:	0018      	movs	r0, r3
 801a238:	46bd      	mov	sp, r7
 801a23a:	b002      	add	sp, #8
 801a23c:	bd80      	pop	{r7, pc}
 801a23e:	46c0      	nop			@ (mov r8, r8)
 801a240:	0000029d 	.word	0x0000029d

0801a244 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a244:	b580      	push	{r7, lr}
 801a246:	b082      	sub	sp, #8
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a24c:	687a      	ldr	r2, [r7, #4]
 801a24e:	23a7      	movs	r3, #167	@ 0xa7
 801a250:	009b      	lsls	r3, r3, #2
 801a252:	5cd3      	ldrb	r3, [r2, r3]
 801a254:	2b04      	cmp	r3, #4
 801a256:	d106      	bne.n	801a266 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	4a05      	ldr	r2, [pc, #20]	@ (801a270 <USBD_LL_Resume+0x2c>)
 801a25c:	5c99      	ldrb	r1, [r3, r2]
 801a25e:	687a      	ldr	r2, [r7, #4]
 801a260:	23a7      	movs	r3, #167	@ 0xa7
 801a262:	009b      	lsls	r3, r3, #2
 801a264:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801a266:	2300      	movs	r3, #0
}
 801a268:	0018      	movs	r0, r3
 801a26a:	46bd      	mov	sp, r7
 801a26c:	b002      	add	sp, #8
 801a26e:	bd80      	pop	{r7, pc}
 801a270:	0000029d 	.word	0x0000029d

0801a274 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a274:	b580      	push	{r7, lr}
 801a276:	b082      	sub	sp, #8
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a27c:	687a      	ldr	r2, [r7, #4]
 801a27e:	23a7      	movs	r3, #167	@ 0xa7
 801a280:	009b      	lsls	r3, r3, #2
 801a282:	5cd3      	ldrb	r3, [r2, r3]
 801a284:	2b03      	cmp	r3, #3
 801a286:	d10e      	bne.n	801a2a6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801a288:	687a      	ldr	r2, [r7, #4]
 801a28a:	23ad      	movs	r3, #173	@ 0xad
 801a28c:	009b      	lsls	r3, r3, #2
 801a28e:	58d3      	ldr	r3, [r2, r3]
 801a290:	69db      	ldr	r3, [r3, #28]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d007      	beq.n	801a2a6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801a296:	687a      	ldr	r2, [r7, #4]
 801a298:	23ad      	movs	r3, #173	@ 0xad
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	58d3      	ldr	r3, [r2, r3]
 801a29e:	69db      	ldr	r3, [r3, #28]
 801a2a0:	687a      	ldr	r2, [r7, #4]
 801a2a2:	0010      	movs	r0, r2
 801a2a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a2a6:	2300      	movs	r3, #0
}
 801a2a8:	0018      	movs	r0, r3
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	b002      	add	sp, #8
 801a2ae:	bd80      	pop	{r7, pc}

0801a2b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b084      	sub	sp, #16
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
 801a2b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a2ba:	230f      	movs	r3, #15
 801a2bc:	18fb      	adds	r3, r7, r3
 801a2be:	2200      	movs	r2, #0
 801a2c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a2c2:	683b      	ldr	r3, [r7, #0]
 801a2c4:	781b      	ldrb	r3, [r3, #0]
 801a2c6:	001a      	movs	r2, r3
 801a2c8:	2360      	movs	r3, #96	@ 0x60
 801a2ca:	4013      	ands	r3, r2
 801a2cc:	2b40      	cmp	r3, #64	@ 0x40
 801a2ce:	d004      	beq.n	801a2da <USBD_StdDevReq+0x2a>
 801a2d0:	d84f      	bhi.n	801a372 <USBD_StdDevReq+0xc2>
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d00b      	beq.n	801a2ee <USBD_StdDevReq+0x3e>
 801a2d6:	2b20      	cmp	r3, #32
 801a2d8:	d14b      	bne.n	801a372 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801a2da:	687a      	ldr	r2, [r7, #4]
 801a2dc:	23ad      	movs	r3, #173	@ 0xad
 801a2de:	009b      	lsls	r3, r3, #2
 801a2e0:	58d3      	ldr	r3, [r2, r3]
 801a2e2:	689b      	ldr	r3, [r3, #8]
 801a2e4:	6839      	ldr	r1, [r7, #0]
 801a2e6:	687a      	ldr	r2, [r7, #4]
 801a2e8:	0010      	movs	r0, r2
 801a2ea:	4798      	blx	r3
      break;
 801a2ec:	e048      	b.n	801a380 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	785b      	ldrb	r3, [r3, #1]
 801a2f2:	2b09      	cmp	r3, #9
 801a2f4:	d835      	bhi.n	801a362 <USBD_StdDevReq+0xb2>
 801a2f6:	009a      	lsls	r2, r3, #2
 801a2f8:	4b25      	ldr	r3, [pc, #148]	@ (801a390 <USBD_StdDevReq+0xe0>)
 801a2fa:	18d3      	adds	r3, r2, r3
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a300:	683a      	ldr	r2, [r7, #0]
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	0011      	movs	r1, r2
 801a306:	0018      	movs	r0, r3
 801a308:	f000 fa52 	bl	801a7b0 <USBD_GetDescriptor>
          break;
 801a30c:	e030      	b.n	801a370 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a30e:	683a      	ldr	r2, [r7, #0]
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	0011      	movs	r1, r2
 801a314:	0018      	movs	r0, r3
 801a316:	f000 fbfd 	bl	801ab14 <USBD_SetAddress>
          break;
 801a31a:	e029      	b.n	801a370 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801a31c:	683a      	ldr	r2, [r7, #0]
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	0011      	movs	r1, r2
 801a322:	0018      	movs	r0, r3
 801a324:	f000 fc4a 	bl	801abbc <USBD_SetConfig>
          break;
 801a328:	e022      	b.n	801a370 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a32a:	683a      	ldr	r2, [r7, #0]
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	0011      	movs	r1, r2
 801a330:	0018      	movs	r0, r3
 801a332:	f000 fce7 	bl	801ad04 <USBD_GetConfig>
          break;
 801a336:	e01b      	b.n	801a370 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a338:	683a      	ldr	r2, [r7, #0]
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	0011      	movs	r1, r2
 801a33e:	0018      	movs	r0, r3
 801a340:	f000 fd1b 	bl	801ad7a <USBD_GetStatus>
          break;
 801a344:	e014      	b.n	801a370 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a346:	683a      	ldr	r2, [r7, #0]
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	0011      	movs	r1, r2
 801a34c:	0018      	movs	r0, r3
 801a34e:	f000 fd4e 	bl	801adee <USBD_SetFeature>
          break;
 801a352:	e00d      	b.n	801a370 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a354:	683a      	ldr	r2, [r7, #0]
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	0011      	movs	r1, r2
 801a35a:	0018      	movs	r0, r3
 801a35c:	f000 fd5d 	bl	801ae1a <USBD_ClrFeature>
          break;
 801a360:	e006      	b.n	801a370 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801a362:	683a      	ldr	r2, [r7, #0]
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	0011      	movs	r1, r2
 801a368:	0018      	movs	r0, r3
 801a36a:	f000 fdb4 	bl	801aed6 <USBD_CtlError>
          break;
 801a36e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a370:	e006      	b.n	801a380 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a372:	683a      	ldr	r2, [r7, #0]
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	0011      	movs	r1, r2
 801a378:	0018      	movs	r0, r3
 801a37a:	f000 fdac 	bl	801aed6 <USBD_CtlError>
      break;
 801a37e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a380:	230f      	movs	r3, #15
 801a382:	18fb      	adds	r3, r7, r3
 801a384:	781b      	ldrb	r3, [r3, #0]
}
 801a386:	0018      	movs	r0, r3
 801a388:	46bd      	mov	sp, r7
 801a38a:	b004      	add	sp, #16
 801a38c:	bd80      	pop	{r7, pc}
 801a38e:	46c0      	nop			@ (mov r8, r8)
 801a390:	080233bc 	.word	0x080233bc

0801a394 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801a394:	b5b0      	push	{r4, r5, r7, lr}
 801a396:	b084      	sub	sp, #16
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a39e:	230f      	movs	r3, #15
 801a3a0:	18fb      	adds	r3, r7, r3
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a3a6:	683b      	ldr	r3, [r7, #0]
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	001a      	movs	r2, r3
 801a3ac:	2360      	movs	r3, #96	@ 0x60
 801a3ae:	4013      	ands	r3, r2
 801a3b0:	2b40      	cmp	r3, #64	@ 0x40
 801a3b2:	d004      	beq.n	801a3be <USBD_StdItfReq+0x2a>
 801a3b4:	d839      	bhi.n	801a42a <USBD_StdItfReq+0x96>
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d001      	beq.n	801a3be <USBD_StdItfReq+0x2a>
 801a3ba:	2b20      	cmp	r3, #32
 801a3bc:	d135      	bne.n	801a42a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a3be:	687a      	ldr	r2, [r7, #4]
 801a3c0:	23a7      	movs	r3, #167	@ 0xa7
 801a3c2:	009b      	lsls	r3, r3, #2
 801a3c4:	5cd3      	ldrb	r3, [r2, r3]
 801a3c6:	3b01      	subs	r3, #1
 801a3c8:	2b02      	cmp	r3, #2
 801a3ca:	d825      	bhi.n	801a418 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	889b      	ldrh	r3, [r3, #4]
 801a3d0:	b2db      	uxtb	r3, r3
 801a3d2:	2b01      	cmp	r3, #1
 801a3d4:	d819      	bhi.n	801a40a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a3d6:	687a      	ldr	r2, [r7, #4]
 801a3d8:	23ad      	movs	r3, #173	@ 0xad
 801a3da:	009b      	lsls	r3, r3, #2
 801a3dc:	58d3      	ldr	r3, [r2, r3]
 801a3de:	689b      	ldr	r3, [r3, #8]
 801a3e0:	250f      	movs	r5, #15
 801a3e2:	197c      	adds	r4, r7, r5
 801a3e4:	6839      	ldr	r1, [r7, #0]
 801a3e6:	687a      	ldr	r2, [r7, #4]
 801a3e8:	0010      	movs	r0, r2
 801a3ea:	4798      	blx	r3
 801a3ec:	0003      	movs	r3, r0
 801a3ee:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a3f0:	683b      	ldr	r3, [r7, #0]
 801a3f2:	88db      	ldrh	r3, [r3, #6]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d116      	bne.n	801a426 <USBD_StdItfReq+0x92>
 801a3f8:	197b      	adds	r3, r7, r5
 801a3fa:	781b      	ldrb	r3, [r3, #0]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d112      	bne.n	801a426 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	0018      	movs	r0, r3
 801a404:	f000 fe4f 	bl	801b0a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a408:	e00d      	b.n	801a426 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801a40a:	683a      	ldr	r2, [r7, #0]
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	0011      	movs	r1, r2
 801a410:	0018      	movs	r0, r3
 801a412:	f000 fd60 	bl	801aed6 <USBD_CtlError>
          break;
 801a416:	e006      	b.n	801a426 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801a418:	683a      	ldr	r2, [r7, #0]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	0011      	movs	r1, r2
 801a41e:	0018      	movs	r0, r3
 801a420:	f000 fd59 	bl	801aed6 <USBD_CtlError>
          break;
 801a424:	e000      	b.n	801a428 <USBD_StdItfReq+0x94>
          break;
 801a426:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a428:	e006      	b.n	801a438 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801a42a:	683a      	ldr	r2, [r7, #0]
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	0011      	movs	r1, r2
 801a430:	0018      	movs	r0, r3
 801a432:	f000 fd50 	bl	801aed6 <USBD_CtlError>
      break;
 801a436:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801a438:	2300      	movs	r3, #0
}
 801a43a:	0018      	movs	r0, r3
 801a43c:	46bd      	mov	sp, r7
 801a43e:	b004      	add	sp, #16
 801a440:	bdb0      	pop	{r4, r5, r7, pc}

0801a442 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801a442:	b5b0      	push	{r4, r5, r7, lr}
 801a444:	b084      	sub	sp, #16
 801a446:	af00      	add	r7, sp, #0
 801a448:	6078      	str	r0, [r7, #4]
 801a44a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a44c:	230f      	movs	r3, #15
 801a44e:	18fb      	adds	r3, r7, r3
 801a450:	2200      	movs	r2, #0
 801a452:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801a454:	683b      	ldr	r3, [r7, #0]
 801a456:	889a      	ldrh	r2, [r3, #4]
 801a458:	230e      	movs	r3, #14
 801a45a:	18fb      	adds	r3, r7, r3
 801a45c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a45e:	683b      	ldr	r3, [r7, #0]
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	001a      	movs	r2, r3
 801a464:	2360      	movs	r3, #96	@ 0x60
 801a466:	4013      	ands	r3, r2
 801a468:	2b40      	cmp	r3, #64	@ 0x40
 801a46a:	d006      	beq.n	801a47a <USBD_StdEPReq+0x38>
 801a46c:	d900      	bls.n	801a470 <USBD_StdEPReq+0x2e>
 801a46e:	e190      	b.n	801a792 <USBD_StdEPReq+0x350>
 801a470:	2b00      	cmp	r3, #0
 801a472:	d00c      	beq.n	801a48e <USBD_StdEPReq+0x4c>
 801a474:	2b20      	cmp	r3, #32
 801a476:	d000      	beq.n	801a47a <USBD_StdEPReq+0x38>
 801a478:	e18b      	b.n	801a792 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801a47a:	687a      	ldr	r2, [r7, #4]
 801a47c:	23ad      	movs	r3, #173	@ 0xad
 801a47e:	009b      	lsls	r3, r3, #2
 801a480:	58d3      	ldr	r3, [r2, r3]
 801a482:	689b      	ldr	r3, [r3, #8]
 801a484:	6839      	ldr	r1, [r7, #0]
 801a486:	687a      	ldr	r2, [r7, #4]
 801a488:	0010      	movs	r0, r2
 801a48a:	4798      	blx	r3
      break;
 801a48c:	e188      	b.n	801a7a0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	781b      	ldrb	r3, [r3, #0]
 801a492:	001a      	movs	r2, r3
 801a494:	2360      	movs	r3, #96	@ 0x60
 801a496:	4013      	ands	r3, r2
 801a498:	2b20      	cmp	r3, #32
 801a49a:	d10f      	bne.n	801a4bc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a49c:	687a      	ldr	r2, [r7, #4]
 801a49e:	23ad      	movs	r3, #173	@ 0xad
 801a4a0:	009b      	lsls	r3, r3, #2
 801a4a2:	58d3      	ldr	r3, [r2, r3]
 801a4a4:	689b      	ldr	r3, [r3, #8]
 801a4a6:	250f      	movs	r5, #15
 801a4a8:	197c      	adds	r4, r7, r5
 801a4aa:	6839      	ldr	r1, [r7, #0]
 801a4ac:	687a      	ldr	r2, [r7, #4]
 801a4ae:	0010      	movs	r0, r2
 801a4b0:	4798      	blx	r3
 801a4b2:	0003      	movs	r3, r0
 801a4b4:	7023      	strb	r3, [r4, #0]

        return ret;
 801a4b6:	197b      	adds	r3, r7, r5
 801a4b8:	781b      	ldrb	r3, [r3, #0]
 801a4ba:	e174      	b.n	801a7a6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801a4bc:	683b      	ldr	r3, [r7, #0]
 801a4be:	785b      	ldrb	r3, [r3, #1]
 801a4c0:	2b03      	cmp	r3, #3
 801a4c2:	d007      	beq.n	801a4d4 <USBD_StdEPReq+0x92>
 801a4c4:	dd00      	ble.n	801a4c8 <USBD_StdEPReq+0x86>
 801a4c6:	e15c      	b.n	801a782 <USBD_StdEPReq+0x340>
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d100      	bne.n	801a4ce <USBD_StdEPReq+0x8c>
 801a4cc:	e092      	b.n	801a5f4 <USBD_StdEPReq+0x1b2>
 801a4ce:	2b01      	cmp	r3, #1
 801a4d0:	d04b      	beq.n	801a56a <USBD_StdEPReq+0x128>
 801a4d2:	e156      	b.n	801a782 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a4d4:	687a      	ldr	r2, [r7, #4]
 801a4d6:	23a7      	movs	r3, #167	@ 0xa7
 801a4d8:	009b      	lsls	r3, r3, #2
 801a4da:	5cd3      	ldrb	r3, [r2, r3]
 801a4dc:	2b02      	cmp	r3, #2
 801a4de:	d002      	beq.n	801a4e6 <USBD_StdEPReq+0xa4>
 801a4e0:	2b03      	cmp	r3, #3
 801a4e2:	d01d      	beq.n	801a520 <USBD_StdEPReq+0xde>
 801a4e4:	e039      	b.n	801a55a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a4e6:	220e      	movs	r2, #14
 801a4e8:	18bb      	adds	r3, r7, r2
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d010      	beq.n	801a512 <USBD_StdEPReq+0xd0>
 801a4f0:	18bb      	adds	r3, r7, r2
 801a4f2:	781b      	ldrb	r3, [r3, #0]
 801a4f4:	2b80      	cmp	r3, #128	@ 0x80
 801a4f6:	d00c      	beq.n	801a512 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801a4f8:	18bb      	adds	r3, r7, r2
 801a4fa:	781a      	ldrb	r2, [r3, #0]
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	0011      	movs	r1, r2
 801a500:	0018      	movs	r0, r3
 801a502:	f001 fa10 	bl	801b926 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	2180      	movs	r1, #128	@ 0x80
 801a50a:	0018      	movs	r0, r3
 801a50c:	f001 fa0b 	bl	801b926 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a510:	e02a      	b.n	801a568 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801a512:	683a      	ldr	r2, [r7, #0]
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	0011      	movs	r1, r2
 801a518:	0018      	movs	r0, r3
 801a51a:	f000 fcdc 	bl	801aed6 <USBD_CtlError>
              break;
 801a51e:	e023      	b.n	801a568 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a520:	683b      	ldr	r3, [r7, #0]
 801a522:	885b      	ldrh	r3, [r3, #2]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d113      	bne.n	801a550 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801a528:	220e      	movs	r2, #14
 801a52a:	18bb      	adds	r3, r7, r2
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d00e      	beq.n	801a550 <USBD_StdEPReq+0x10e>
 801a532:	18bb      	adds	r3, r7, r2
 801a534:	781b      	ldrb	r3, [r3, #0]
 801a536:	2b80      	cmp	r3, #128	@ 0x80
 801a538:	d00a      	beq.n	801a550 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a53a:	683b      	ldr	r3, [r7, #0]
 801a53c:	88db      	ldrh	r3, [r3, #6]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d106      	bne.n	801a550 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801a542:	18bb      	adds	r3, r7, r2
 801a544:	781a      	ldrb	r2, [r3, #0]
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	0011      	movs	r1, r2
 801a54a:	0018      	movs	r0, r3
 801a54c:	f001 f9eb 	bl	801b926 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	0018      	movs	r0, r3
 801a554:	f000 fda7 	bl	801b0a6 <USBD_CtlSendStatus>

              break;
 801a558:	e006      	b.n	801a568 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801a55a:	683a      	ldr	r2, [r7, #0]
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	0011      	movs	r1, r2
 801a560:	0018      	movs	r0, r3
 801a562:	f000 fcb8 	bl	801aed6 <USBD_CtlError>
              break;
 801a566:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801a568:	e112      	b.n	801a790 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a56a:	687a      	ldr	r2, [r7, #4]
 801a56c:	23a7      	movs	r3, #167	@ 0xa7
 801a56e:	009b      	lsls	r3, r3, #2
 801a570:	5cd3      	ldrb	r3, [r2, r3]
 801a572:	2b02      	cmp	r3, #2
 801a574:	d002      	beq.n	801a57c <USBD_StdEPReq+0x13a>
 801a576:	2b03      	cmp	r3, #3
 801a578:	d01d      	beq.n	801a5b6 <USBD_StdEPReq+0x174>
 801a57a:	e032      	b.n	801a5e2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a57c:	220e      	movs	r2, #14
 801a57e:	18bb      	adds	r3, r7, r2
 801a580:	781b      	ldrb	r3, [r3, #0]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d010      	beq.n	801a5a8 <USBD_StdEPReq+0x166>
 801a586:	18bb      	adds	r3, r7, r2
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	2b80      	cmp	r3, #128	@ 0x80
 801a58c:	d00c      	beq.n	801a5a8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801a58e:	18bb      	adds	r3, r7, r2
 801a590:	781a      	ldrb	r2, [r3, #0]
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	0011      	movs	r1, r2
 801a596:	0018      	movs	r0, r3
 801a598:	f001 f9c5 	bl	801b926 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	2180      	movs	r1, #128	@ 0x80
 801a5a0:	0018      	movs	r0, r3
 801a5a2:	f001 f9c0 	bl	801b926 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a5a6:	e024      	b.n	801a5f2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801a5a8:	683a      	ldr	r2, [r7, #0]
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	0011      	movs	r1, r2
 801a5ae:	0018      	movs	r0, r3
 801a5b0:	f000 fc91 	bl	801aed6 <USBD_CtlError>
              break;
 801a5b4:	e01d      	b.n	801a5f2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a5b6:	683b      	ldr	r3, [r7, #0]
 801a5b8:	885b      	ldrh	r3, [r3, #2]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d118      	bne.n	801a5f0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a5be:	210e      	movs	r1, #14
 801a5c0:	187b      	adds	r3, r7, r1
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	227f      	movs	r2, #127	@ 0x7f
 801a5c6:	4013      	ands	r3, r2
 801a5c8:	d006      	beq.n	801a5d8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801a5ca:	187b      	adds	r3, r7, r1
 801a5cc:	781a      	ldrb	r2, [r3, #0]
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	0011      	movs	r1, r2
 801a5d2:	0018      	movs	r0, r3
 801a5d4:	f001 f9d2 	bl	801b97c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	0018      	movs	r0, r3
 801a5dc:	f000 fd63 	bl	801b0a6 <USBD_CtlSendStatus>
              }
              break;
 801a5e0:	e006      	b.n	801a5f0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801a5e2:	683a      	ldr	r2, [r7, #0]
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	0011      	movs	r1, r2
 801a5e8:	0018      	movs	r0, r3
 801a5ea:	f000 fc74 	bl	801aed6 <USBD_CtlError>
              break;
 801a5ee:	e000      	b.n	801a5f2 <USBD_StdEPReq+0x1b0>
              break;
 801a5f0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801a5f2:	e0cd      	b.n	801a790 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a5f4:	687a      	ldr	r2, [r7, #4]
 801a5f6:	23a7      	movs	r3, #167	@ 0xa7
 801a5f8:	009b      	lsls	r3, r3, #2
 801a5fa:	5cd3      	ldrb	r3, [r2, r3]
 801a5fc:	2b02      	cmp	r3, #2
 801a5fe:	d002      	beq.n	801a606 <USBD_StdEPReq+0x1c4>
 801a600:	2b03      	cmp	r3, #3
 801a602:	d03c      	beq.n	801a67e <USBD_StdEPReq+0x23c>
 801a604:	e0b5      	b.n	801a772 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a606:	220e      	movs	r2, #14
 801a608:	18bb      	adds	r3, r7, r2
 801a60a:	781b      	ldrb	r3, [r3, #0]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d00a      	beq.n	801a626 <USBD_StdEPReq+0x1e4>
 801a610:	18bb      	adds	r3, r7, r2
 801a612:	781b      	ldrb	r3, [r3, #0]
 801a614:	2b80      	cmp	r3, #128	@ 0x80
 801a616:	d006      	beq.n	801a626 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801a618:	683a      	ldr	r2, [r7, #0]
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	0011      	movs	r1, r2
 801a61e:	0018      	movs	r0, r3
 801a620:	f000 fc59 	bl	801aed6 <USBD_CtlError>
                break;
 801a624:	e0ac      	b.n	801a780 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a626:	220e      	movs	r2, #14
 801a628:	18bb      	adds	r3, r7, r2
 801a62a:	781b      	ldrb	r3, [r3, #0]
 801a62c:	b25b      	sxtb	r3, r3
 801a62e:	2b00      	cmp	r3, #0
 801a630:	da0c      	bge.n	801a64c <USBD_StdEPReq+0x20a>
 801a632:	18bb      	adds	r3, r7, r2
 801a634:	781b      	ldrb	r3, [r3, #0]
 801a636:	227f      	movs	r2, #127	@ 0x7f
 801a638:	401a      	ands	r2, r3
 801a63a:	0013      	movs	r3, r2
 801a63c:	009b      	lsls	r3, r3, #2
 801a63e:	189b      	adds	r3, r3, r2
 801a640:	009b      	lsls	r3, r3, #2
 801a642:	3310      	adds	r3, #16
 801a644:	687a      	ldr	r2, [r7, #4]
 801a646:	18d3      	adds	r3, r2, r3
 801a648:	3304      	adds	r3, #4
 801a64a:	e00d      	b.n	801a668 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a64c:	230e      	movs	r3, #14
 801a64e:	18fb      	adds	r3, r7, r3
 801a650:	781b      	ldrb	r3, [r3, #0]
 801a652:	227f      	movs	r2, #127	@ 0x7f
 801a654:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a656:	0013      	movs	r3, r2
 801a658:	009b      	lsls	r3, r3, #2
 801a65a:	189b      	adds	r3, r3, r2
 801a65c:	009b      	lsls	r3, r3, #2
 801a65e:	3351      	adds	r3, #81	@ 0x51
 801a660:	33ff      	adds	r3, #255	@ 0xff
 801a662:	687a      	ldr	r2, [r7, #4]
 801a664:	18d3      	adds	r3, r2, r3
 801a666:	3304      	adds	r3, #4
 801a668:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a66a:	68bb      	ldr	r3, [r7, #8]
 801a66c:	2200      	movs	r2, #0
 801a66e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801a670:	68b9      	ldr	r1, [r7, #8]
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	2202      	movs	r2, #2
 801a676:	0018      	movs	r0, r3
 801a678:	f000 fcab 	bl	801afd2 <USBD_CtlSendData>
              break;
 801a67c:	e080      	b.n	801a780 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a67e:	220e      	movs	r2, #14
 801a680:	18bb      	adds	r3, r7, r2
 801a682:	781b      	ldrb	r3, [r3, #0]
 801a684:	b25b      	sxtb	r3, r3
 801a686:	2b00      	cmp	r3, #0
 801a688:	da14      	bge.n	801a6b4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a68a:	18bb      	adds	r3, r7, r2
 801a68c:	781b      	ldrb	r3, [r3, #0]
 801a68e:	220f      	movs	r2, #15
 801a690:	401a      	ands	r2, r3
 801a692:	6879      	ldr	r1, [r7, #4]
 801a694:	0013      	movs	r3, r2
 801a696:	009b      	lsls	r3, r3, #2
 801a698:	189b      	adds	r3, r3, r2
 801a69a:	009b      	lsls	r3, r3, #2
 801a69c:	18cb      	adds	r3, r1, r3
 801a69e:	3318      	adds	r3, #24
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d11e      	bne.n	801a6e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801a6a6:	683a      	ldr	r2, [r7, #0]
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	0011      	movs	r1, r2
 801a6ac:	0018      	movs	r0, r3
 801a6ae:	f000 fc12 	bl	801aed6 <USBD_CtlError>
                  break;
 801a6b2:	e065      	b.n	801a780 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a6b4:	230e      	movs	r3, #14
 801a6b6:	18fb      	adds	r3, r7, r3
 801a6b8:	781b      	ldrb	r3, [r3, #0]
 801a6ba:	220f      	movs	r2, #15
 801a6bc:	401a      	ands	r2, r3
 801a6be:	6878      	ldr	r0, [r7, #4]
 801a6c0:	23ac      	movs	r3, #172	@ 0xac
 801a6c2:	0059      	lsls	r1, r3, #1
 801a6c4:	0013      	movs	r3, r2
 801a6c6:	009b      	lsls	r3, r3, #2
 801a6c8:	189b      	adds	r3, r3, r2
 801a6ca:	009b      	lsls	r3, r3, #2
 801a6cc:	18c3      	adds	r3, r0, r3
 801a6ce:	185b      	adds	r3, r3, r1
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d106      	bne.n	801a6e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801a6d6:	683a      	ldr	r2, [r7, #0]
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	0011      	movs	r1, r2
 801a6dc:	0018      	movs	r0, r3
 801a6de:	f000 fbfa 	bl	801aed6 <USBD_CtlError>
                  break;
 801a6e2:	e04d      	b.n	801a780 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a6e4:	220e      	movs	r2, #14
 801a6e6:	18bb      	adds	r3, r7, r2
 801a6e8:	781b      	ldrb	r3, [r3, #0]
 801a6ea:	b25b      	sxtb	r3, r3
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	da0c      	bge.n	801a70a <USBD_StdEPReq+0x2c8>
 801a6f0:	18bb      	adds	r3, r7, r2
 801a6f2:	781b      	ldrb	r3, [r3, #0]
 801a6f4:	227f      	movs	r2, #127	@ 0x7f
 801a6f6:	401a      	ands	r2, r3
 801a6f8:	0013      	movs	r3, r2
 801a6fa:	009b      	lsls	r3, r3, #2
 801a6fc:	189b      	adds	r3, r3, r2
 801a6fe:	009b      	lsls	r3, r3, #2
 801a700:	3310      	adds	r3, #16
 801a702:	687a      	ldr	r2, [r7, #4]
 801a704:	18d3      	adds	r3, r2, r3
 801a706:	3304      	adds	r3, #4
 801a708:	e00d      	b.n	801a726 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a70a:	230e      	movs	r3, #14
 801a70c:	18fb      	adds	r3, r7, r3
 801a70e:	781b      	ldrb	r3, [r3, #0]
 801a710:	227f      	movs	r2, #127	@ 0x7f
 801a712:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a714:	0013      	movs	r3, r2
 801a716:	009b      	lsls	r3, r3, #2
 801a718:	189b      	adds	r3, r3, r2
 801a71a:	009b      	lsls	r3, r3, #2
 801a71c:	3351      	adds	r3, #81	@ 0x51
 801a71e:	33ff      	adds	r3, #255	@ 0xff
 801a720:	687a      	ldr	r2, [r7, #4]
 801a722:	18d3      	adds	r3, r2, r3
 801a724:	3304      	adds	r3, #4
 801a726:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a728:	220e      	movs	r2, #14
 801a72a:	18bb      	adds	r3, r7, r2
 801a72c:	781b      	ldrb	r3, [r3, #0]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d003      	beq.n	801a73a <USBD_StdEPReq+0x2f8>
 801a732:	18bb      	adds	r3, r7, r2
 801a734:	781b      	ldrb	r3, [r3, #0]
 801a736:	2b80      	cmp	r3, #128	@ 0x80
 801a738:	d103      	bne.n	801a742 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	2200      	movs	r2, #0
 801a73e:	601a      	str	r2, [r3, #0]
 801a740:	e010      	b.n	801a764 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801a742:	230e      	movs	r3, #14
 801a744:	18fb      	adds	r3, r7, r3
 801a746:	781a      	ldrb	r2, [r3, #0]
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	0011      	movs	r1, r2
 801a74c:	0018      	movs	r0, r3
 801a74e:	f001 f940 	bl	801b9d2 <USBD_LL_IsStallEP>
 801a752:	1e03      	subs	r3, r0, #0
 801a754:	d003      	beq.n	801a75e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801a756:	68bb      	ldr	r3, [r7, #8]
 801a758:	2201      	movs	r2, #1
 801a75a:	601a      	str	r2, [r3, #0]
 801a75c:	e002      	b.n	801a764 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801a75e:	68bb      	ldr	r3, [r7, #8]
 801a760:	2200      	movs	r2, #0
 801a762:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801a764:	68b9      	ldr	r1, [r7, #8]
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	2202      	movs	r2, #2
 801a76a:	0018      	movs	r0, r3
 801a76c:	f000 fc31 	bl	801afd2 <USBD_CtlSendData>
              break;
 801a770:	e006      	b.n	801a780 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801a772:	683a      	ldr	r2, [r7, #0]
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	0011      	movs	r1, r2
 801a778:	0018      	movs	r0, r3
 801a77a:	f000 fbac 	bl	801aed6 <USBD_CtlError>
              break;
 801a77e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801a780:	e006      	b.n	801a790 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801a782:	683a      	ldr	r2, [r7, #0]
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	0011      	movs	r1, r2
 801a788:	0018      	movs	r0, r3
 801a78a:	f000 fba4 	bl	801aed6 <USBD_CtlError>
          break;
 801a78e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a790:	e006      	b.n	801a7a0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801a792:	683a      	ldr	r2, [r7, #0]
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	0011      	movs	r1, r2
 801a798:	0018      	movs	r0, r3
 801a79a:	f000 fb9c 	bl	801aed6 <USBD_CtlError>
      break;
 801a79e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a7a0:	230f      	movs	r3, #15
 801a7a2:	18fb      	adds	r3, r7, r3
 801a7a4:	781b      	ldrb	r3, [r3, #0]
}
 801a7a6:	0018      	movs	r0, r3
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	b004      	add	sp, #16
 801a7ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a7b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b084      	sub	sp, #16
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	6078      	str	r0, [r7, #4]
 801a7b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a7ba:	2308      	movs	r3, #8
 801a7bc:	18fb      	adds	r3, r7, r3
 801a7be:	2200      	movs	r2, #0
 801a7c0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a7c6:	230b      	movs	r3, #11
 801a7c8:	18fb      	adds	r3, r7, r3
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	885b      	ldrh	r3, [r3, #2]
 801a7d2:	0a1b      	lsrs	r3, r3, #8
 801a7d4:	b29b      	uxth	r3, r3
 801a7d6:	2b07      	cmp	r3, #7
 801a7d8:	d900      	bls.n	801a7dc <USBD_GetDescriptor+0x2c>
 801a7da:	e159      	b.n	801aa90 <USBD_GetDescriptor+0x2e0>
 801a7dc:	009a      	lsls	r2, r3, #2
 801a7de:	4bcb      	ldr	r3, [pc, #812]	@ (801ab0c <USBD_GetDescriptor+0x35c>)
 801a7e0:	18d3      	adds	r3, r2, r3
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a7e6:	687a      	ldr	r2, [r7, #4]
 801a7e8:	23ac      	movs	r3, #172	@ 0xac
 801a7ea:	009b      	lsls	r3, r3, #2
 801a7ec:	58d3      	ldr	r3, [r2, r3]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	687a      	ldr	r2, [r7, #4]
 801a7f2:	7c12      	ldrb	r2, [r2, #16]
 801a7f4:	2108      	movs	r1, #8
 801a7f6:	1879      	adds	r1, r7, r1
 801a7f8:	0010      	movs	r0, r2
 801a7fa:	4798      	blx	r3
 801a7fc:	0003      	movs	r3, r0
 801a7fe:	60fb      	str	r3, [r7, #12]
      break;
 801a800:	e153      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	7c1b      	ldrb	r3, [r3, #16]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d10f      	bne.n	801a82a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801a80a:	687a      	ldr	r2, [r7, #4]
 801a80c:	23ad      	movs	r3, #173	@ 0xad
 801a80e:	009b      	lsls	r3, r3, #2
 801a810:	58d3      	ldr	r3, [r2, r3]
 801a812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a814:	2208      	movs	r2, #8
 801a816:	18ba      	adds	r2, r7, r2
 801a818:	0010      	movs	r0, r2
 801a81a:	4798      	blx	r3
 801a81c:	0003      	movs	r3, r0
 801a81e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	3301      	adds	r3, #1
 801a824:	2202      	movs	r2, #2
 801a826:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a828:	e13f      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801a82a:	687a      	ldr	r2, [r7, #4]
 801a82c:	23ad      	movs	r3, #173	@ 0xad
 801a82e:	009b      	lsls	r3, r3, #2
 801a830:	58d3      	ldr	r3, [r2, r3]
 801a832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a834:	2208      	movs	r2, #8
 801a836:	18ba      	adds	r2, r7, r2
 801a838:	0010      	movs	r0, r2
 801a83a:	4798      	blx	r3
 801a83c:	0003      	movs	r3, r0
 801a83e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	3301      	adds	r3, #1
 801a844:	2202      	movs	r2, #2
 801a846:	701a      	strb	r2, [r3, #0]
      break;
 801a848:	e12f      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a84a:	683b      	ldr	r3, [r7, #0]
 801a84c:	885b      	ldrh	r3, [r3, #2]
 801a84e:	b2db      	uxtb	r3, r3
 801a850:	2b05      	cmp	r3, #5
 801a852:	d900      	bls.n	801a856 <USBD_GetDescriptor+0xa6>
 801a854:	e0d0      	b.n	801a9f8 <USBD_GetDescriptor+0x248>
 801a856:	009a      	lsls	r2, r3, #2
 801a858:	4bad      	ldr	r3, [pc, #692]	@ (801ab10 <USBD_GetDescriptor+0x360>)
 801a85a:	18d3      	adds	r3, r2, r3
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a860:	687a      	ldr	r2, [r7, #4]
 801a862:	23ac      	movs	r3, #172	@ 0xac
 801a864:	009b      	lsls	r3, r3, #2
 801a866:	58d3      	ldr	r3, [r2, r3]
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d00d      	beq.n	801a88a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a86e:	687a      	ldr	r2, [r7, #4]
 801a870:	23ac      	movs	r3, #172	@ 0xac
 801a872:	009b      	lsls	r3, r3, #2
 801a874:	58d3      	ldr	r3, [r2, r3]
 801a876:	685b      	ldr	r3, [r3, #4]
 801a878:	687a      	ldr	r2, [r7, #4]
 801a87a:	7c12      	ldrb	r2, [r2, #16]
 801a87c:	2108      	movs	r1, #8
 801a87e:	1879      	adds	r1, r7, r1
 801a880:	0010      	movs	r0, r2
 801a882:	4798      	blx	r3
 801a884:	0003      	movs	r3, r0
 801a886:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a888:	e0c3      	b.n	801aa12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a88a:	683a      	ldr	r2, [r7, #0]
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	0011      	movs	r1, r2
 801a890:	0018      	movs	r0, r3
 801a892:	f000 fb20 	bl	801aed6 <USBD_CtlError>
            err++;
 801a896:	210b      	movs	r1, #11
 801a898:	187b      	adds	r3, r7, r1
 801a89a:	781a      	ldrb	r2, [r3, #0]
 801a89c:	187b      	adds	r3, r7, r1
 801a89e:	3201      	adds	r2, #1
 801a8a0:	701a      	strb	r2, [r3, #0]
          break;
 801a8a2:	e0b6      	b.n	801aa12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a8a4:	687a      	ldr	r2, [r7, #4]
 801a8a6:	23ac      	movs	r3, #172	@ 0xac
 801a8a8:	009b      	lsls	r3, r3, #2
 801a8aa:	58d3      	ldr	r3, [r2, r3]
 801a8ac:	689b      	ldr	r3, [r3, #8]
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d00d      	beq.n	801a8ce <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a8b2:	687a      	ldr	r2, [r7, #4]
 801a8b4:	23ac      	movs	r3, #172	@ 0xac
 801a8b6:	009b      	lsls	r3, r3, #2
 801a8b8:	58d3      	ldr	r3, [r2, r3]
 801a8ba:	689b      	ldr	r3, [r3, #8]
 801a8bc:	687a      	ldr	r2, [r7, #4]
 801a8be:	7c12      	ldrb	r2, [r2, #16]
 801a8c0:	2108      	movs	r1, #8
 801a8c2:	1879      	adds	r1, r7, r1
 801a8c4:	0010      	movs	r0, r2
 801a8c6:	4798      	blx	r3
 801a8c8:	0003      	movs	r3, r0
 801a8ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a8cc:	e0a1      	b.n	801aa12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a8ce:	683a      	ldr	r2, [r7, #0]
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	0011      	movs	r1, r2
 801a8d4:	0018      	movs	r0, r3
 801a8d6:	f000 fafe 	bl	801aed6 <USBD_CtlError>
            err++;
 801a8da:	210b      	movs	r1, #11
 801a8dc:	187b      	adds	r3, r7, r1
 801a8de:	781a      	ldrb	r2, [r3, #0]
 801a8e0:	187b      	adds	r3, r7, r1
 801a8e2:	3201      	adds	r2, #1
 801a8e4:	701a      	strb	r2, [r3, #0]
          break;
 801a8e6:	e094      	b.n	801aa12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a8e8:	687a      	ldr	r2, [r7, #4]
 801a8ea:	23ac      	movs	r3, #172	@ 0xac
 801a8ec:	009b      	lsls	r3, r3, #2
 801a8ee:	58d3      	ldr	r3, [r2, r3]
 801a8f0:	68db      	ldr	r3, [r3, #12]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d00d      	beq.n	801a912 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a8f6:	687a      	ldr	r2, [r7, #4]
 801a8f8:	23ac      	movs	r3, #172	@ 0xac
 801a8fa:	009b      	lsls	r3, r3, #2
 801a8fc:	58d3      	ldr	r3, [r2, r3]
 801a8fe:	68db      	ldr	r3, [r3, #12]
 801a900:	687a      	ldr	r2, [r7, #4]
 801a902:	7c12      	ldrb	r2, [r2, #16]
 801a904:	2108      	movs	r1, #8
 801a906:	1879      	adds	r1, r7, r1
 801a908:	0010      	movs	r0, r2
 801a90a:	4798      	blx	r3
 801a90c:	0003      	movs	r3, r0
 801a90e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a910:	e07f      	b.n	801aa12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a912:	683a      	ldr	r2, [r7, #0]
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	0011      	movs	r1, r2
 801a918:	0018      	movs	r0, r3
 801a91a:	f000 fadc 	bl	801aed6 <USBD_CtlError>
            err++;
 801a91e:	210b      	movs	r1, #11
 801a920:	187b      	adds	r3, r7, r1
 801a922:	781a      	ldrb	r2, [r3, #0]
 801a924:	187b      	adds	r3, r7, r1
 801a926:	3201      	adds	r2, #1
 801a928:	701a      	strb	r2, [r3, #0]
          break;
 801a92a:	e072      	b.n	801aa12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a92c:	687a      	ldr	r2, [r7, #4]
 801a92e:	23ac      	movs	r3, #172	@ 0xac
 801a930:	009b      	lsls	r3, r3, #2
 801a932:	58d3      	ldr	r3, [r2, r3]
 801a934:	691b      	ldr	r3, [r3, #16]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d00d      	beq.n	801a956 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a93a:	687a      	ldr	r2, [r7, #4]
 801a93c:	23ac      	movs	r3, #172	@ 0xac
 801a93e:	009b      	lsls	r3, r3, #2
 801a940:	58d3      	ldr	r3, [r2, r3]
 801a942:	691b      	ldr	r3, [r3, #16]
 801a944:	687a      	ldr	r2, [r7, #4]
 801a946:	7c12      	ldrb	r2, [r2, #16]
 801a948:	2108      	movs	r1, #8
 801a94a:	1879      	adds	r1, r7, r1
 801a94c:	0010      	movs	r0, r2
 801a94e:	4798      	blx	r3
 801a950:	0003      	movs	r3, r0
 801a952:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a954:	e05d      	b.n	801aa12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a956:	683a      	ldr	r2, [r7, #0]
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	0011      	movs	r1, r2
 801a95c:	0018      	movs	r0, r3
 801a95e:	f000 faba 	bl	801aed6 <USBD_CtlError>
            err++;
 801a962:	210b      	movs	r1, #11
 801a964:	187b      	adds	r3, r7, r1
 801a966:	781a      	ldrb	r2, [r3, #0]
 801a968:	187b      	adds	r3, r7, r1
 801a96a:	3201      	adds	r2, #1
 801a96c:	701a      	strb	r2, [r3, #0]
          break;
 801a96e:	e050      	b.n	801aa12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801a970:	687a      	ldr	r2, [r7, #4]
 801a972:	23ac      	movs	r3, #172	@ 0xac
 801a974:	009b      	lsls	r3, r3, #2
 801a976:	58d3      	ldr	r3, [r2, r3]
 801a978:	695b      	ldr	r3, [r3, #20]
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d00d      	beq.n	801a99a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801a97e:	687a      	ldr	r2, [r7, #4]
 801a980:	23ac      	movs	r3, #172	@ 0xac
 801a982:	009b      	lsls	r3, r3, #2
 801a984:	58d3      	ldr	r3, [r2, r3]
 801a986:	695b      	ldr	r3, [r3, #20]
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	7c12      	ldrb	r2, [r2, #16]
 801a98c:	2108      	movs	r1, #8
 801a98e:	1879      	adds	r1, r7, r1
 801a990:	0010      	movs	r0, r2
 801a992:	4798      	blx	r3
 801a994:	0003      	movs	r3, r0
 801a996:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a998:	e03b      	b.n	801aa12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a99a:	683a      	ldr	r2, [r7, #0]
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	0011      	movs	r1, r2
 801a9a0:	0018      	movs	r0, r3
 801a9a2:	f000 fa98 	bl	801aed6 <USBD_CtlError>
            err++;
 801a9a6:	210b      	movs	r1, #11
 801a9a8:	187b      	adds	r3, r7, r1
 801a9aa:	781a      	ldrb	r2, [r3, #0]
 801a9ac:	187b      	adds	r3, r7, r1
 801a9ae:	3201      	adds	r2, #1
 801a9b0:	701a      	strb	r2, [r3, #0]
          break;
 801a9b2:	e02e      	b.n	801aa12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801a9b4:	687a      	ldr	r2, [r7, #4]
 801a9b6:	23ac      	movs	r3, #172	@ 0xac
 801a9b8:	009b      	lsls	r3, r3, #2
 801a9ba:	58d3      	ldr	r3, [r2, r3]
 801a9bc:	699b      	ldr	r3, [r3, #24]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d00d      	beq.n	801a9de <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801a9c2:	687a      	ldr	r2, [r7, #4]
 801a9c4:	23ac      	movs	r3, #172	@ 0xac
 801a9c6:	009b      	lsls	r3, r3, #2
 801a9c8:	58d3      	ldr	r3, [r2, r3]
 801a9ca:	699b      	ldr	r3, [r3, #24]
 801a9cc:	687a      	ldr	r2, [r7, #4]
 801a9ce:	7c12      	ldrb	r2, [r2, #16]
 801a9d0:	2108      	movs	r1, #8
 801a9d2:	1879      	adds	r1, r7, r1
 801a9d4:	0010      	movs	r0, r2
 801a9d6:	4798      	blx	r3
 801a9d8:	0003      	movs	r3, r0
 801a9da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a9dc:	e019      	b.n	801aa12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a9de:	683a      	ldr	r2, [r7, #0]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	0011      	movs	r1, r2
 801a9e4:	0018      	movs	r0, r3
 801a9e6:	f000 fa76 	bl	801aed6 <USBD_CtlError>
            err++;
 801a9ea:	210b      	movs	r1, #11
 801a9ec:	187b      	adds	r3, r7, r1
 801a9ee:	781a      	ldrb	r2, [r3, #0]
 801a9f0:	187b      	adds	r3, r7, r1
 801a9f2:	3201      	adds	r2, #1
 801a9f4:	701a      	strb	r2, [r3, #0]
          break;
 801a9f6:	e00c      	b.n	801aa12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801a9f8:	683a      	ldr	r2, [r7, #0]
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	0011      	movs	r1, r2
 801a9fe:	0018      	movs	r0, r3
 801aa00:	f000 fa69 	bl	801aed6 <USBD_CtlError>
          err++;
 801aa04:	210b      	movs	r1, #11
 801aa06:	187b      	adds	r3, r7, r1
 801aa08:	781a      	ldrb	r2, [r3, #0]
 801aa0a:	187b      	adds	r3, r7, r1
 801aa0c:	3201      	adds	r2, #1
 801aa0e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801aa10:	e04b      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>
 801aa12:	e04a      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	7c1b      	ldrb	r3, [r3, #16]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d10b      	bne.n	801aa34 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801aa1c:	687a      	ldr	r2, [r7, #4]
 801aa1e:	23ad      	movs	r3, #173	@ 0xad
 801aa20:	009b      	lsls	r3, r3, #2
 801aa22:	58d3      	ldr	r3, [r2, r3]
 801aa24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa26:	2208      	movs	r2, #8
 801aa28:	18ba      	adds	r2, r7, r2
 801aa2a:	0010      	movs	r0, r2
 801aa2c:	4798      	blx	r3
 801aa2e:	0003      	movs	r3, r0
 801aa30:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aa32:	e03a      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801aa34:	683a      	ldr	r2, [r7, #0]
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	0011      	movs	r1, r2
 801aa3a:	0018      	movs	r0, r3
 801aa3c:	f000 fa4b 	bl	801aed6 <USBD_CtlError>
        err++;
 801aa40:	210b      	movs	r1, #11
 801aa42:	187b      	adds	r3, r7, r1
 801aa44:	781a      	ldrb	r2, [r3, #0]
 801aa46:	187b      	adds	r3, r7, r1
 801aa48:	3201      	adds	r2, #1
 801aa4a:	701a      	strb	r2, [r3, #0]
      break;
 801aa4c:	e02d      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	7c1b      	ldrb	r3, [r3, #16]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d10f      	bne.n	801aa76 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801aa56:	687a      	ldr	r2, [r7, #4]
 801aa58:	23ad      	movs	r3, #173	@ 0xad
 801aa5a:	009b      	lsls	r3, r3, #2
 801aa5c:	58d3      	ldr	r3, [r2, r3]
 801aa5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa60:	2208      	movs	r2, #8
 801aa62:	18ba      	adds	r2, r7, r2
 801aa64:	0010      	movs	r0, r2
 801aa66:	4798      	blx	r3
 801aa68:	0003      	movs	r3, r0
 801aa6a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	3301      	adds	r3, #1
 801aa70:	2207      	movs	r2, #7
 801aa72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aa74:	e019      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801aa76:	683a      	ldr	r2, [r7, #0]
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	0011      	movs	r1, r2
 801aa7c:	0018      	movs	r0, r3
 801aa7e:	f000 fa2a 	bl	801aed6 <USBD_CtlError>
        err++;
 801aa82:	210b      	movs	r1, #11
 801aa84:	187b      	adds	r3, r7, r1
 801aa86:	781a      	ldrb	r2, [r3, #0]
 801aa88:	187b      	adds	r3, r7, r1
 801aa8a:	3201      	adds	r2, #1
 801aa8c:	701a      	strb	r2, [r3, #0]
      break;
 801aa8e:	e00c      	b.n	801aaaa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801aa90:	683a      	ldr	r2, [r7, #0]
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	0011      	movs	r1, r2
 801aa96:	0018      	movs	r0, r3
 801aa98:	f000 fa1d 	bl	801aed6 <USBD_CtlError>
      err++;
 801aa9c:	210b      	movs	r1, #11
 801aa9e:	187b      	adds	r3, r7, r1
 801aaa0:	781a      	ldrb	r2, [r3, #0]
 801aaa2:	187b      	adds	r3, r7, r1
 801aaa4:	3201      	adds	r2, #1
 801aaa6:	701a      	strb	r2, [r3, #0]
      break;
 801aaa8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801aaaa:	230b      	movs	r3, #11
 801aaac:	18fb      	adds	r3, r7, r3
 801aaae:	781b      	ldrb	r3, [r3, #0]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d127      	bne.n	801ab04 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801aab4:	2108      	movs	r1, #8
 801aab6:	187b      	adds	r3, r7, r1
 801aab8:	881b      	ldrh	r3, [r3, #0]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d019      	beq.n	801aaf2 <USBD_GetDescriptor+0x342>
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	88db      	ldrh	r3, [r3, #6]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d015      	beq.n	801aaf2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801aac6:	683b      	ldr	r3, [r7, #0]
 801aac8:	88da      	ldrh	r2, [r3, #6]
 801aaca:	187b      	adds	r3, r7, r1
 801aacc:	881b      	ldrh	r3, [r3, #0]
 801aace:	1c18      	adds	r0, r3, #0
 801aad0:	1c11      	adds	r1, r2, #0
 801aad2:	b28a      	uxth	r2, r1
 801aad4:	b283      	uxth	r3, r0
 801aad6:	429a      	cmp	r2, r3
 801aad8:	d900      	bls.n	801aadc <USBD_GetDescriptor+0x32c>
 801aada:	1c01      	adds	r1, r0, #0
 801aadc:	b28a      	uxth	r2, r1
 801aade:	2108      	movs	r1, #8
 801aae0:	187b      	adds	r3, r7, r1
 801aae2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801aae4:	187b      	adds	r3, r7, r1
 801aae6:	881a      	ldrh	r2, [r3, #0]
 801aae8:	68f9      	ldr	r1, [r7, #12]
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	0018      	movs	r0, r3
 801aaee:	f000 fa70 	bl	801afd2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	88db      	ldrh	r3, [r3, #6]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d105      	bne.n	801ab06 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	0018      	movs	r0, r3
 801aafe:	f000 fad2 	bl	801b0a6 <USBD_CtlSendStatus>
 801ab02:	e000      	b.n	801ab06 <USBD_GetDescriptor+0x356>
    return;
 801ab04:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801ab06:	46bd      	mov	sp, r7
 801ab08:	b004      	add	sp, #16
 801ab0a:	bd80      	pop	{r7, pc}
 801ab0c:	080233e4 	.word	0x080233e4
 801ab10:	08023404 	.word	0x08023404

0801ab14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ab14:	b590      	push	{r4, r7, lr}
 801ab16:	b085      	sub	sp, #20
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	6078      	str	r0, [r7, #4]
 801ab1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ab1e:	683b      	ldr	r3, [r7, #0]
 801ab20:	889b      	ldrh	r3, [r3, #4]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d13d      	bne.n	801aba2 <USBD_SetAddress+0x8e>
 801ab26:	683b      	ldr	r3, [r7, #0]
 801ab28:	88db      	ldrh	r3, [r3, #6]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d139      	bne.n	801aba2 <USBD_SetAddress+0x8e>
 801ab2e:	683b      	ldr	r3, [r7, #0]
 801ab30:	885b      	ldrh	r3, [r3, #2]
 801ab32:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab34:	d835      	bhi.n	801aba2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	885b      	ldrh	r3, [r3, #2]
 801ab3a:	b2da      	uxtb	r2, r3
 801ab3c:	230f      	movs	r3, #15
 801ab3e:	18fb      	adds	r3, r7, r3
 801ab40:	217f      	movs	r1, #127	@ 0x7f
 801ab42:	400a      	ands	r2, r1
 801ab44:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab46:	687a      	ldr	r2, [r7, #4]
 801ab48:	23a7      	movs	r3, #167	@ 0xa7
 801ab4a:	009b      	lsls	r3, r3, #2
 801ab4c:	5cd3      	ldrb	r3, [r2, r3]
 801ab4e:	2b03      	cmp	r3, #3
 801ab50:	d106      	bne.n	801ab60 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ab52:	683a      	ldr	r2, [r7, #0]
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	0011      	movs	r1, r2
 801ab58:	0018      	movs	r0, r3
 801ab5a:	f000 f9bc 	bl	801aed6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab5e:	e027      	b.n	801abb0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	240f      	movs	r4, #15
 801ab64:	193a      	adds	r2, r7, r4
 801ab66:	4914      	ldr	r1, [pc, #80]	@ (801abb8 <USBD_SetAddress+0xa4>)
 801ab68:	7812      	ldrb	r2, [r2, #0]
 801ab6a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ab6c:	193b      	adds	r3, r7, r4
 801ab6e:	781a      	ldrb	r2, [r3, #0]
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	0011      	movs	r1, r2
 801ab74:	0018      	movs	r0, r3
 801ab76:	f000 ff5d 	bl	801ba34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	0018      	movs	r0, r3
 801ab7e:	f000 fa92 	bl	801b0a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ab82:	193b      	adds	r3, r7, r4
 801ab84:	781b      	ldrb	r3, [r3, #0]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d005      	beq.n	801ab96 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ab8a:	687a      	ldr	r2, [r7, #4]
 801ab8c:	23a7      	movs	r3, #167	@ 0xa7
 801ab8e:	009b      	lsls	r3, r3, #2
 801ab90:	2102      	movs	r1, #2
 801ab92:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab94:	e00c      	b.n	801abb0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ab96:	687a      	ldr	r2, [r7, #4]
 801ab98:	23a7      	movs	r3, #167	@ 0xa7
 801ab9a:	009b      	lsls	r3, r3, #2
 801ab9c:	2101      	movs	r1, #1
 801ab9e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aba0:	e006      	b.n	801abb0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801aba2:	683a      	ldr	r2, [r7, #0]
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	0011      	movs	r1, r2
 801aba8:	0018      	movs	r0, r3
 801abaa:	f000 f994 	bl	801aed6 <USBD_CtlError>
  }
}
 801abae:	46c0      	nop			@ (mov r8, r8)
 801abb0:	46c0      	nop			@ (mov r8, r8)
 801abb2:	46bd      	mov	sp, r7
 801abb4:	b005      	add	sp, #20
 801abb6:	bd90      	pop	{r4, r7, pc}
 801abb8:	0000029e 	.word	0x0000029e

0801abbc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	b082      	sub	sp, #8
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
 801abc4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	885b      	ldrh	r3, [r3, #2]
 801abca:	b2da      	uxtb	r2, r3
 801abcc:	4b4c      	ldr	r3, [pc, #304]	@ (801ad00 <USBD_SetConfig+0x144>)
 801abce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801abd0:	4b4b      	ldr	r3, [pc, #300]	@ (801ad00 <USBD_SetConfig+0x144>)
 801abd2:	781b      	ldrb	r3, [r3, #0]
 801abd4:	2b01      	cmp	r3, #1
 801abd6:	d906      	bls.n	801abe6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801abd8:	683a      	ldr	r2, [r7, #0]
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	0011      	movs	r1, r2
 801abde:	0018      	movs	r0, r3
 801abe0:	f000 f979 	bl	801aed6 <USBD_CtlError>
 801abe4:	e088      	b.n	801acf8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801abe6:	687a      	ldr	r2, [r7, #4]
 801abe8:	23a7      	movs	r3, #167	@ 0xa7
 801abea:	009b      	lsls	r3, r3, #2
 801abec:	5cd3      	ldrb	r3, [r2, r3]
 801abee:	2b02      	cmp	r3, #2
 801abf0:	d002      	beq.n	801abf8 <USBD_SetConfig+0x3c>
 801abf2:	2b03      	cmp	r3, #3
 801abf4:	d029      	beq.n	801ac4a <USBD_SetConfig+0x8e>
 801abf6:	e071      	b.n	801acdc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801abf8:	4b41      	ldr	r3, [pc, #260]	@ (801ad00 <USBD_SetConfig+0x144>)
 801abfa:	781b      	ldrb	r3, [r3, #0]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d01f      	beq.n	801ac40 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801ac00:	4b3f      	ldr	r3, [pc, #252]	@ (801ad00 <USBD_SetConfig+0x144>)
 801ac02:	781b      	ldrb	r3, [r3, #0]
 801ac04:	001a      	movs	r2, r3
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ac0a:	687a      	ldr	r2, [r7, #4]
 801ac0c:	23a7      	movs	r3, #167	@ 0xa7
 801ac0e:	009b      	lsls	r3, r3, #2
 801ac10:	2103      	movs	r1, #3
 801ac12:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ac14:	4b3a      	ldr	r3, [pc, #232]	@ (801ad00 <USBD_SetConfig+0x144>)
 801ac16:	781a      	ldrb	r2, [r3, #0]
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	0011      	movs	r1, r2
 801ac1c:	0018      	movs	r0, r3
 801ac1e:	f7ff f8c6 	bl	8019dae <USBD_SetClassConfig>
 801ac22:	0003      	movs	r3, r0
 801ac24:	2b02      	cmp	r3, #2
 801ac26:	d106      	bne.n	801ac36 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801ac28:	683a      	ldr	r2, [r7, #0]
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	0011      	movs	r1, r2
 801ac2e:	0018      	movs	r0, r3
 801ac30:	f000 f951 	bl	801aed6 <USBD_CtlError>
            return;
 801ac34:	e060      	b.n	801acf8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	0018      	movs	r0, r3
 801ac3a:	f000 fa34 	bl	801b0a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ac3e:	e05b      	b.n	801acf8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	0018      	movs	r0, r3
 801ac44:	f000 fa2f 	bl	801b0a6 <USBD_CtlSendStatus>
        break;
 801ac48:	e056      	b.n	801acf8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801ac4a:	4b2d      	ldr	r3, [pc, #180]	@ (801ad00 <USBD_SetConfig+0x144>)
 801ac4c:	781b      	ldrb	r3, [r3, #0]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d115      	bne.n	801ac7e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ac52:	687a      	ldr	r2, [r7, #4]
 801ac54:	23a7      	movs	r3, #167	@ 0xa7
 801ac56:	009b      	lsls	r3, r3, #2
 801ac58:	2102      	movs	r1, #2
 801ac5a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801ac5c:	4b28      	ldr	r3, [pc, #160]	@ (801ad00 <USBD_SetConfig+0x144>)
 801ac5e:	781b      	ldrb	r3, [r3, #0]
 801ac60:	001a      	movs	r2, r3
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801ac66:	4b26      	ldr	r3, [pc, #152]	@ (801ad00 <USBD_SetConfig+0x144>)
 801ac68:	781a      	ldrb	r2, [r3, #0]
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	0011      	movs	r1, r2
 801ac6e:	0018      	movs	r0, r3
 801ac70:	f7ff f8c4 	bl	8019dfc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	0018      	movs	r0, r3
 801ac78:	f000 fa15 	bl	801b0a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ac7c:	e03c      	b.n	801acf8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801ac7e:	4b20      	ldr	r3, [pc, #128]	@ (801ad00 <USBD_SetConfig+0x144>)
 801ac80:	781b      	ldrb	r3, [r3, #0]
 801ac82:	001a      	movs	r2, r3
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	685b      	ldr	r3, [r3, #4]
 801ac88:	429a      	cmp	r2, r3
 801ac8a:	d022      	beq.n	801acd2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	685b      	ldr	r3, [r3, #4]
 801ac90:	b2da      	uxtb	r2, r3
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	0011      	movs	r1, r2
 801ac96:	0018      	movs	r0, r3
 801ac98:	f7ff f8b0 	bl	8019dfc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801ac9c:	4b18      	ldr	r3, [pc, #96]	@ (801ad00 <USBD_SetConfig+0x144>)
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	001a      	movs	r2, r3
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801aca6:	4b16      	ldr	r3, [pc, #88]	@ (801ad00 <USBD_SetConfig+0x144>)
 801aca8:	781a      	ldrb	r2, [r3, #0]
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	0011      	movs	r1, r2
 801acae:	0018      	movs	r0, r3
 801acb0:	f7ff f87d 	bl	8019dae <USBD_SetClassConfig>
 801acb4:	0003      	movs	r3, r0
 801acb6:	2b02      	cmp	r3, #2
 801acb8:	d106      	bne.n	801acc8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801acba:	683a      	ldr	r2, [r7, #0]
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	0011      	movs	r1, r2
 801acc0:	0018      	movs	r0, r3
 801acc2:	f000 f908 	bl	801aed6 <USBD_CtlError>
            return;
 801acc6:	e017      	b.n	801acf8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	0018      	movs	r0, r3
 801accc:	f000 f9eb 	bl	801b0a6 <USBD_CtlSendStatus>
        break;
 801acd0:	e012      	b.n	801acf8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	0018      	movs	r0, r3
 801acd6:	f000 f9e6 	bl	801b0a6 <USBD_CtlSendStatus>
        break;
 801acda:	e00d      	b.n	801acf8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801acdc:	683a      	ldr	r2, [r7, #0]
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	0011      	movs	r1, r2
 801ace2:	0018      	movs	r0, r3
 801ace4:	f000 f8f7 	bl	801aed6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801ace8:	4b05      	ldr	r3, [pc, #20]	@ (801ad00 <USBD_SetConfig+0x144>)
 801acea:	781a      	ldrb	r2, [r3, #0]
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	0011      	movs	r1, r2
 801acf0:	0018      	movs	r0, r3
 801acf2:	f7ff f883 	bl	8019dfc <USBD_ClrClassConfig>
        break;
 801acf6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801acf8:	46bd      	mov	sp, r7
 801acfa:	b002      	add	sp, #8
 801acfc:	bd80      	pop	{r7, pc}
 801acfe:	46c0      	nop			@ (mov r8, r8)
 801ad00:	2000251c 	.word	0x2000251c

0801ad04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad04:	b580      	push	{r7, lr}
 801ad06:	b082      	sub	sp, #8
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
 801ad0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801ad0e:	683b      	ldr	r3, [r7, #0]
 801ad10:	88db      	ldrh	r3, [r3, #6]
 801ad12:	2b01      	cmp	r3, #1
 801ad14:	d006      	beq.n	801ad24 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801ad16:	683a      	ldr	r2, [r7, #0]
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	0011      	movs	r1, r2
 801ad1c:	0018      	movs	r0, r3
 801ad1e:	f000 f8da 	bl	801aed6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801ad22:	e026      	b.n	801ad72 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801ad24:	687a      	ldr	r2, [r7, #4]
 801ad26:	23a7      	movs	r3, #167	@ 0xa7
 801ad28:	009b      	lsls	r3, r3, #2
 801ad2a:	5cd3      	ldrb	r3, [r2, r3]
 801ad2c:	2b02      	cmp	r3, #2
 801ad2e:	dc02      	bgt.n	801ad36 <USBD_GetConfig+0x32>
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	dc03      	bgt.n	801ad3c <USBD_GetConfig+0x38>
 801ad34:	e016      	b.n	801ad64 <USBD_GetConfig+0x60>
 801ad36:	2b03      	cmp	r3, #3
 801ad38:	d00c      	beq.n	801ad54 <USBD_GetConfig+0x50>
 801ad3a:	e013      	b.n	801ad64 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	2200      	movs	r2, #0
 801ad40:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	3308      	adds	r3, #8
 801ad46:	0019      	movs	r1, r3
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	2201      	movs	r2, #1
 801ad4c:	0018      	movs	r0, r3
 801ad4e:	f000 f940 	bl	801afd2 <USBD_CtlSendData>
        break;
 801ad52:	e00e      	b.n	801ad72 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	1d19      	adds	r1, r3, #4
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	2201      	movs	r2, #1
 801ad5c:	0018      	movs	r0, r3
 801ad5e:	f000 f938 	bl	801afd2 <USBD_CtlSendData>
        break;
 801ad62:	e006      	b.n	801ad72 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801ad64:	683a      	ldr	r2, [r7, #0]
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	0011      	movs	r1, r2
 801ad6a:	0018      	movs	r0, r3
 801ad6c:	f000 f8b3 	bl	801aed6 <USBD_CtlError>
        break;
 801ad70:	46c0      	nop			@ (mov r8, r8)
}
 801ad72:	46c0      	nop			@ (mov r8, r8)
 801ad74:	46bd      	mov	sp, r7
 801ad76:	b002      	add	sp, #8
 801ad78:	bd80      	pop	{r7, pc}

0801ad7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad7a:	b580      	push	{r7, lr}
 801ad7c:	b082      	sub	sp, #8
 801ad7e:	af00      	add	r7, sp, #0
 801ad80:	6078      	str	r0, [r7, #4]
 801ad82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ad84:	687a      	ldr	r2, [r7, #4]
 801ad86:	23a7      	movs	r3, #167	@ 0xa7
 801ad88:	009b      	lsls	r3, r3, #2
 801ad8a:	5cd3      	ldrb	r3, [r2, r3]
 801ad8c:	3b01      	subs	r3, #1
 801ad8e:	2b02      	cmp	r3, #2
 801ad90:	d822      	bhi.n	801add8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ad92:	683b      	ldr	r3, [r7, #0]
 801ad94:	88db      	ldrh	r3, [r3, #6]
 801ad96:	2b02      	cmp	r3, #2
 801ad98:	d006      	beq.n	801ada8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801ad9a:	683a      	ldr	r2, [r7, #0]
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	0011      	movs	r1, r2
 801ada0:	0018      	movs	r0, r3
 801ada2:	f000 f898 	bl	801aed6 <USBD_CtlError>
        break;
 801ada6:	e01e      	b.n	801ade6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	2201      	movs	r2, #1
 801adac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801adae:	687a      	ldr	r2, [r7, #4]
 801adb0:	23a9      	movs	r3, #169	@ 0xa9
 801adb2:	009b      	lsls	r3, r3, #2
 801adb4:	58d3      	ldr	r3, [r2, r3]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d005      	beq.n	801adc6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	68db      	ldr	r3, [r3, #12]
 801adbe:	2202      	movs	r2, #2
 801adc0:	431a      	orrs	r2, r3
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	330c      	adds	r3, #12
 801adca:	0019      	movs	r1, r3
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	2202      	movs	r2, #2
 801add0:	0018      	movs	r0, r3
 801add2:	f000 f8fe 	bl	801afd2 <USBD_CtlSendData>
      break;
 801add6:	e006      	b.n	801ade6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801add8:	683a      	ldr	r2, [r7, #0]
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	0011      	movs	r1, r2
 801adde:	0018      	movs	r0, r3
 801ade0:	f000 f879 	bl	801aed6 <USBD_CtlError>
      break;
 801ade4:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ade6:	46c0      	nop			@ (mov r8, r8)
 801ade8:	46bd      	mov	sp, r7
 801adea:	b002      	add	sp, #8
 801adec:	bd80      	pop	{r7, pc}

0801adee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801adee:	b580      	push	{r7, lr}
 801adf0:	b082      	sub	sp, #8
 801adf2:	af00      	add	r7, sp, #0
 801adf4:	6078      	str	r0, [r7, #4]
 801adf6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801adf8:	683b      	ldr	r3, [r7, #0]
 801adfa:	885b      	ldrh	r3, [r3, #2]
 801adfc:	2b01      	cmp	r3, #1
 801adfe:	d108      	bne.n	801ae12 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801ae00:	687a      	ldr	r2, [r7, #4]
 801ae02:	23a9      	movs	r3, #169	@ 0xa9
 801ae04:	009b      	lsls	r3, r3, #2
 801ae06:	2101      	movs	r1, #1
 801ae08:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	0018      	movs	r0, r3
 801ae0e:	f000 f94a 	bl	801b0a6 <USBD_CtlSendStatus>
  }
}
 801ae12:	46c0      	nop			@ (mov r8, r8)
 801ae14:	46bd      	mov	sp, r7
 801ae16:	b002      	add	sp, #8
 801ae18:	bd80      	pop	{r7, pc}

0801ae1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ae1a:	b580      	push	{r7, lr}
 801ae1c:	b082      	sub	sp, #8
 801ae1e:	af00      	add	r7, sp, #0
 801ae20:	6078      	str	r0, [r7, #4]
 801ae22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ae24:	687a      	ldr	r2, [r7, #4]
 801ae26:	23a7      	movs	r3, #167	@ 0xa7
 801ae28:	009b      	lsls	r3, r3, #2
 801ae2a:	5cd3      	ldrb	r3, [r2, r3]
 801ae2c:	3b01      	subs	r3, #1
 801ae2e:	2b02      	cmp	r3, #2
 801ae30:	d80d      	bhi.n	801ae4e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ae32:	683b      	ldr	r3, [r7, #0]
 801ae34:	885b      	ldrh	r3, [r3, #2]
 801ae36:	2b01      	cmp	r3, #1
 801ae38:	d110      	bne.n	801ae5c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801ae3a:	687a      	ldr	r2, [r7, #4]
 801ae3c:	23a9      	movs	r3, #169	@ 0xa9
 801ae3e:	009b      	lsls	r3, r3, #2
 801ae40:	2100      	movs	r1, #0
 801ae42:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	0018      	movs	r0, r3
 801ae48:	f000 f92d 	bl	801b0a6 <USBD_CtlSendStatus>
      }
      break;
 801ae4c:	e006      	b.n	801ae5c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801ae4e:	683a      	ldr	r2, [r7, #0]
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	0011      	movs	r1, r2
 801ae54:	0018      	movs	r0, r3
 801ae56:	f000 f83e 	bl	801aed6 <USBD_CtlError>
      break;
 801ae5a:	e000      	b.n	801ae5e <USBD_ClrFeature+0x44>
      break;
 801ae5c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ae5e:	46c0      	nop			@ (mov r8, r8)
 801ae60:	46bd      	mov	sp, r7
 801ae62:	b002      	add	sp, #8
 801ae64:	bd80      	pop	{r7, pc}

0801ae66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ae66:	b580      	push	{r7, lr}
 801ae68:	b082      	sub	sp, #8
 801ae6a:	af00      	add	r7, sp, #0
 801ae6c:	6078      	str	r0, [r7, #4]
 801ae6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801ae70:	683b      	ldr	r3, [r7, #0]
 801ae72:	781a      	ldrb	r2, [r3, #0]
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801ae78:	683b      	ldr	r3, [r7, #0]
 801ae7a:	785a      	ldrb	r2, [r3, #1]
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801ae80:	683b      	ldr	r3, [r7, #0]
 801ae82:	3302      	adds	r3, #2
 801ae84:	781b      	ldrb	r3, [r3, #0]
 801ae86:	001a      	movs	r2, r3
 801ae88:	683b      	ldr	r3, [r7, #0]
 801ae8a:	3303      	adds	r3, #3
 801ae8c:	781b      	ldrb	r3, [r3, #0]
 801ae8e:	021b      	lsls	r3, r3, #8
 801ae90:	b29b      	uxth	r3, r3
 801ae92:	18d3      	adds	r3, r2, r3
 801ae94:	b29a      	uxth	r2, r3
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801ae9a:	683b      	ldr	r3, [r7, #0]
 801ae9c:	3304      	adds	r3, #4
 801ae9e:	781b      	ldrb	r3, [r3, #0]
 801aea0:	001a      	movs	r2, r3
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	3305      	adds	r3, #5
 801aea6:	781b      	ldrb	r3, [r3, #0]
 801aea8:	021b      	lsls	r3, r3, #8
 801aeaa:	b29b      	uxth	r3, r3
 801aeac:	18d3      	adds	r3, r2, r3
 801aeae:	b29a      	uxth	r2, r3
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801aeb4:	683b      	ldr	r3, [r7, #0]
 801aeb6:	3306      	adds	r3, #6
 801aeb8:	781b      	ldrb	r3, [r3, #0]
 801aeba:	001a      	movs	r2, r3
 801aebc:	683b      	ldr	r3, [r7, #0]
 801aebe:	3307      	adds	r3, #7
 801aec0:	781b      	ldrb	r3, [r3, #0]
 801aec2:	021b      	lsls	r3, r3, #8
 801aec4:	b29b      	uxth	r3, r3
 801aec6:	18d3      	adds	r3, r2, r3
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	80da      	strh	r2, [r3, #6]

}
 801aece:	46c0      	nop			@ (mov r8, r8)
 801aed0:	46bd      	mov	sp, r7
 801aed2:	b002      	add	sp, #8
 801aed4:	bd80      	pop	{r7, pc}

0801aed6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801aed6:	b580      	push	{r7, lr}
 801aed8:	b082      	sub	sp, #8
 801aeda:	af00      	add	r7, sp, #0
 801aedc:	6078      	str	r0, [r7, #4]
 801aede:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	2180      	movs	r1, #128	@ 0x80
 801aee4:	0018      	movs	r0, r3
 801aee6:	f000 fd1e 	bl	801b926 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	2100      	movs	r1, #0
 801aeee:	0018      	movs	r0, r3
 801aef0:	f000 fd19 	bl	801b926 <USBD_LL_StallEP>
}
 801aef4:	46c0      	nop			@ (mov r8, r8)
 801aef6:	46bd      	mov	sp, r7
 801aef8:	b002      	add	sp, #8
 801aefa:	bd80      	pop	{r7, pc}

0801aefc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801aefc:	b590      	push	{r4, r7, lr}
 801aefe:	b087      	sub	sp, #28
 801af00:	af00      	add	r7, sp, #0
 801af02:	60f8      	str	r0, [r7, #12]
 801af04:	60b9      	str	r1, [r7, #8]
 801af06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801af08:	2417      	movs	r4, #23
 801af0a:	193b      	adds	r3, r7, r4
 801af0c:	2200      	movs	r2, #0
 801af0e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d03c      	beq.n	801af90 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	0018      	movs	r0, r3
 801af1a:	f000 f83d 	bl	801af98 <USBD_GetLen>
 801af1e:	0003      	movs	r3, r0
 801af20:	3301      	adds	r3, #1
 801af22:	b29b      	uxth	r3, r3
 801af24:	18db      	adds	r3, r3, r3
 801af26:	b29a      	uxth	r2, r3
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801af2c:	193b      	adds	r3, r7, r4
 801af2e:	781b      	ldrb	r3, [r3, #0]
 801af30:	193a      	adds	r2, r7, r4
 801af32:	1c59      	adds	r1, r3, #1
 801af34:	7011      	strb	r1, [r2, #0]
 801af36:	001a      	movs	r2, r3
 801af38:	68bb      	ldr	r3, [r7, #8]
 801af3a:	189b      	adds	r3, r3, r2
 801af3c:	687a      	ldr	r2, [r7, #4]
 801af3e:	7812      	ldrb	r2, [r2, #0]
 801af40:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801af42:	193b      	adds	r3, r7, r4
 801af44:	781b      	ldrb	r3, [r3, #0]
 801af46:	193a      	adds	r2, r7, r4
 801af48:	1c59      	adds	r1, r3, #1
 801af4a:	7011      	strb	r1, [r2, #0]
 801af4c:	001a      	movs	r2, r3
 801af4e:	68bb      	ldr	r3, [r7, #8]
 801af50:	189b      	adds	r3, r3, r2
 801af52:	2203      	movs	r2, #3
 801af54:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801af56:	e017      	b.n	801af88 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	1c5a      	adds	r2, r3, #1
 801af5c:	60fa      	str	r2, [r7, #12]
 801af5e:	2417      	movs	r4, #23
 801af60:	193a      	adds	r2, r7, r4
 801af62:	7812      	ldrb	r2, [r2, #0]
 801af64:	1939      	adds	r1, r7, r4
 801af66:	1c50      	adds	r0, r2, #1
 801af68:	7008      	strb	r0, [r1, #0]
 801af6a:	0011      	movs	r1, r2
 801af6c:	68ba      	ldr	r2, [r7, #8]
 801af6e:	1852      	adds	r2, r2, r1
 801af70:	781b      	ldrb	r3, [r3, #0]
 801af72:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801af74:	193b      	adds	r3, r7, r4
 801af76:	781b      	ldrb	r3, [r3, #0]
 801af78:	193a      	adds	r2, r7, r4
 801af7a:	1c59      	adds	r1, r3, #1
 801af7c:	7011      	strb	r1, [r2, #0]
 801af7e:	001a      	movs	r2, r3
 801af80:	68bb      	ldr	r3, [r7, #8]
 801af82:	189b      	adds	r3, r3, r2
 801af84:	2200      	movs	r2, #0
 801af86:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	781b      	ldrb	r3, [r3, #0]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d1e3      	bne.n	801af58 <USBD_GetString+0x5c>
    }
  }
}
 801af90:	46c0      	nop			@ (mov r8, r8)
 801af92:	46bd      	mov	sp, r7
 801af94:	b007      	add	sp, #28
 801af96:	bd90      	pop	{r4, r7, pc}

0801af98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b084      	sub	sp, #16
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801afa0:	230f      	movs	r3, #15
 801afa2:	18fb      	adds	r3, r7, r3
 801afa4:	2200      	movs	r2, #0
 801afa6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801afa8:	e008      	b.n	801afbc <USBD_GetLen+0x24>
  {
    len++;
 801afaa:	210f      	movs	r1, #15
 801afac:	187b      	adds	r3, r7, r1
 801afae:	781a      	ldrb	r2, [r3, #0]
 801afb0:	187b      	adds	r3, r7, r1
 801afb2:	3201      	adds	r2, #1
 801afb4:	701a      	strb	r2, [r3, #0]
    buf++;
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	3301      	adds	r3, #1
 801afba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	781b      	ldrb	r3, [r3, #0]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d1f2      	bne.n	801afaa <USBD_GetLen+0x12>
  }

  return len;
 801afc4:	230f      	movs	r3, #15
 801afc6:	18fb      	adds	r3, r7, r3
 801afc8:	781b      	ldrb	r3, [r3, #0]
}
 801afca:	0018      	movs	r0, r3
 801afcc:	46bd      	mov	sp, r7
 801afce:	b004      	add	sp, #16
 801afd0:	bd80      	pop	{r7, pc}

0801afd2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801afd2:	b580      	push	{r7, lr}
 801afd4:	b084      	sub	sp, #16
 801afd6:	af00      	add	r7, sp, #0
 801afd8:	60f8      	str	r0, [r7, #12]
 801afda:	60b9      	str	r1, [r7, #8]
 801afdc:	1dbb      	adds	r3, r7, #6
 801afde:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801afe0:	68fa      	ldr	r2, [r7, #12]
 801afe2:	23a5      	movs	r3, #165	@ 0xa5
 801afe4:	009b      	lsls	r3, r3, #2
 801afe6:	2102      	movs	r1, #2
 801afe8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801afea:	1dbb      	adds	r3, r7, #6
 801afec:	881a      	ldrh	r2, [r3, #0]
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801aff2:	1dbb      	adds	r3, r7, #6
 801aff4:	881a      	ldrh	r2, [r3, #0]
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801affa:	1dbb      	adds	r3, r7, #6
 801affc:	881b      	ldrh	r3, [r3, #0]
 801affe:	68ba      	ldr	r2, [r7, #8]
 801b000:	68f8      	ldr	r0, [r7, #12]
 801b002:	2100      	movs	r1, #0
 801b004:	f000 fd41 	bl	801ba8a <USBD_LL_Transmit>

  return USBD_OK;
 801b008:	2300      	movs	r3, #0
}
 801b00a:	0018      	movs	r0, r3
 801b00c:	46bd      	mov	sp, r7
 801b00e:	b004      	add	sp, #16
 801b010:	bd80      	pop	{r7, pc}

0801b012 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801b012:	b580      	push	{r7, lr}
 801b014:	b084      	sub	sp, #16
 801b016:	af00      	add	r7, sp, #0
 801b018:	60f8      	str	r0, [r7, #12]
 801b01a:	60b9      	str	r1, [r7, #8]
 801b01c:	1dbb      	adds	r3, r7, #6
 801b01e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b020:	1dbb      	adds	r3, r7, #6
 801b022:	881b      	ldrh	r3, [r3, #0]
 801b024:	68ba      	ldr	r2, [r7, #8]
 801b026:	68f8      	ldr	r0, [r7, #12]
 801b028:	2100      	movs	r1, #0
 801b02a:	f000 fd2e 	bl	801ba8a <USBD_LL_Transmit>

  return USBD_OK;
 801b02e:	2300      	movs	r3, #0
}
 801b030:	0018      	movs	r0, r3
 801b032:	46bd      	mov	sp, r7
 801b034:	b004      	add	sp, #16
 801b036:	bd80      	pop	{r7, pc}

0801b038 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	b084      	sub	sp, #16
 801b03c:	af00      	add	r7, sp, #0
 801b03e:	60f8      	str	r0, [r7, #12]
 801b040:	60b9      	str	r1, [r7, #8]
 801b042:	1dbb      	adds	r3, r7, #6
 801b044:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b046:	68fa      	ldr	r2, [r7, #12]
 801b048:	23a5      	movs	r3, #165	@ 0xa5
 801b04a:	009b      	lsls	r3, r3, #2
 801b04c:	2103      	movs	r1, #3
 801b04e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801b050:	1dbb      	adds	r3, r7, #6
 801b052:	8819      	ldrh	r1, [r3, #0]
 801b054:	68fa      	ldr	r2, [r7, #12]
 801b056:	23ae      	movs	r3, #174	@ 0xae
 801b058:	005b      	lsls	r3, r3, #1
 801b05a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801b05c:	1dbb      	adds	r3, r7, #6
 801b05e:	8819      	ldrh	r1, [r3, #0]
 801b060:	68fa      	ldr	r2, [r7, #12]
 801b062:	23b0      	movs	r3, #176	@ 0xb0
 801b064:	005b      	lsls	r3, r3, #1
 801b066:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b068:	1dbb      	adds	r3, r7, #6
 801b06a:	881b      	ldrh	r3, [r3, #0]
 801b06c:	68ba      	ldr	r2, [r7, #8]
 801b06e:	68f8      	ldr	r0, [r7, #12]
 801b070:	2100      	movs	r1, #0
 801b072:	f000 fd41 	bl	801baf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b076:	2300      	movs	r3, #0
}
 801b078:	0018      	movs	r0, r3
 801b07a:	46bd      	mov	sp, r7
 801b07c:	b004      	add	sp, #16
 801b07e:	bd80      	pop	{r7, pc}

0801b080 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b084      	sub	sp, #16
 801b084:	af00      	add	r7, sp, #0
 801b086:	60f8      	str	r0, [r7, #12]
 801b088:	60b9      	str	r1, [r7, #8]
 801b08a:	1dbb      	adds	r3, r7, #6
 801b08c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b08e:	1dbb      	adds	r3, r7, #6
 801b090:	881b      	ldrh	r3, [r3, #0]
 801b092:	68ba      	ldr	r2, [r7, #8]
 801b094:	68f8      	ldr	r0, [r7, #12]
 801b096:	2100      	movs	r1, #0
 801b098:	f000 fd2e 	bl	801baf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b09c:	2300      	movs	r3, #0
}
 801b09e:	0018      	movs	r0, r3
 801b0a0:	46bd      	mov	sp, r7
 801b0a2:	b004      	add	sp, #16
 801b0a4:	bd80      	pop	{r7, pc}

0801b0a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b0a6:	b580      	push	{r7, lr}
 801b0a8:	b082      	sub	sp, #8
 801b0aa:	af00      	add	r7, sp, #0
 801b0ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b0ae:	687a      	ldr	r2, [r7, #4]
 801b0b0:	23a5      	movs	r3, #165	@ 0xa5
 801b0b2:	009b      	lsls	r3, r3, #2
 801b0b4:	2104      	movs	r1, #4
 801b0b6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b0b8:	6878      	ldr	r0, [r7, #4]
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	2200      	movs	r2, #0
 801b0be:	2100      	movs	r1, #0
 801b0c0:	f000 fce3 	bl	801ba8a <USBD_LL_Transmit>

  return USBD_OK;
 801b0c4:	2300      	movs	r3, #0
}
 801b0c6:	0018      	movs	r0, r3
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	b002      	add	sp, #8
 801b0cc:	bd80      	pop	{r7, pc}

0801b0ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b0ce:	b580      	push	{r7, lr}
 801b0d0:	b082      	sub	sp, #8
 801b0d2:	af00      	add	r7, sp, #0
 801b0d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b0d6:	687a      	ldr	r2, [r7, #4]
 801b0d8:	23a5      	movs	r3, #165	@ 0xa5
 801b0da:	009b      	lsls	r3, r3, #2
 801b0dc:	2105      	movs	r1, #5
 801b0de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	2100      	movs	r1, #0
 801b0e8:	f000 fd06 	bl	801baf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b0ec:	2300      	movs	r3, #0
}
 801b0ee:	0018      	movs	r0, r3
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	b002      	add	sp, #8
 801b0f4:	bd80      	pop	{r7, pc}
	...

0801b0f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b0fc:	4914      	ldr	r1, [pc, #80]	@ (801b150 <MX_USB_DEVICE_Init+0x58>)
 801b0fe:	4b15      	ldr	r3, [pc, #84]	@ (801b154 <MX_USB_DEVICE_Init+0x5c>)
 801b100:	2200      	movs	r2, #0
 801b102:	0018      	movs	r0, r3
 801b104:	f7fe fdec 	bl	8019ce0 <USBD_Init>
 801b108:	1e03      	subs	r3, r0, #0
 801b10a:	d001      	beq.n	801b110 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b10c:	f7ec fae8 	bl	80076e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b110:	4a11      	ldr	r2, [pc, #68]	@ (801b158 <MX_USB_DEVICE_Init+0x60>)
 801b112:	4b10      	ldr	r3, [pc, #64]	@ (801b154 <MX_USB_DEVICE_Init+0x5c>)
 801b114:	0011      	movs	r1, r2
 801b116:	0018      	movs	r0, r3
 801b118:	f7fe fe13 	bl	8019d42 <USBD_RegisterClass>
 801b11c:	1e03      	subs	r3, r0, #0
 801b11e:	d001      	beq.n	801b124 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801b120:	f7ec fade 	bl	80076e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b124:	4a0d      	ldr	r2, [pc, #52]	@ (801b15c <MX_USB_DEVICE_Init+0x64>)
 801b126:	4b0b      	ldr	r3, [pc, #44]	@ (801b154 <MX_USB_DEVICE_Init+0x5c>)
 801b128:	0011      	movs	r1, r2
 801b12a:	0018      	movs	r0, r3
 801b12c:	f7fe fd28 	bl	8019b80 <USBD_CDC_RegisterInterface>
 801b130:	1e03      	subs	r3, r0, #0
 801b132:	d001      	beq.n	801b138 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801b134:	f7ec fad4 	bl	80076e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b138:	4b06      	ldr	r3, [pc, #24]	@ (801b154 <MX_USB_DEVICE_Init+0x5c>)
 801b13a:	0018      	movs	r0, r3
 801b13c:	f7fe fe21 	bl	8019d82 <USBD_Start>
 801b140:	1e03      	subs	r3, r0, #0
 801b142:	d001      	beq.n	801b148 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801b144:	f7ec facc 	bl	80076e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b148:	46c0      	nop			@ (mov r8, r8)
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd80      	pop	{r7, pc}
 801b14e:	46c0      	nop			@ (mov r8, r8)
 801b150:	20000204 	.word	0x20000204
 801b154:	20002520 	.word	0x20002520
 801b158:	200000f0 	.word	0x200000f0
 801b15c:	200001f4 	.word	0x200001f4

0801b160 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b160:	b580      	push	{r7, lr}
 801b162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b164:	4907      	ldr	r1, [pc, #28]	@ (801b184 <CDC_Init_FS+0x24>)
 801b166:	4b08      	ldr	r3, [pc, #32]	@ (801b188 <CDC_Init_FS+0x28>)
 801b168:	2200      	movs	r2, #0
 801b16a:	0018      	movs	r0, r3
 801b16c:	f7fe fd23 	bl	8019bb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b170:	4a06      	ldr	r2, [pc, #24]	@ (801b18c <CDC_Init_FS+0x2c>)
 801b172:	4b05      	ldr	r3, [pc, #20]	@ (801b188 <CDC_Init_FS+0x28>)
 801b174:	0011      	movs	r1, r2
 801b176:	0018      	movs	r0, r3
 801b178:	f7fe fd39 	bl	8019bee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b17c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b17e:	0018      	movs	r0, r3
 801b180:	46bd      	mov	sp, r7
 801b182:	bd80      	pop	{r7, pc}
 801b184:	20002ca4 	.word	0x20002ca4
 801b188:	20002520 	.word	0x20002520
 801b18c:	200028a4 	.word	0x200028a4

0801b190 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b194:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b196:	0018      	movs	r0, r3
 801b198:	46bd      	mov	sp, r7
 801b19a:	bd80      	pop	{r7, pc}

0801b19c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b082      	sub	sp, #8
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6039      	str	r1, [r7, #0]
 801b1a4:	0011      	movs	r1, r2
 801b1a6:	1dfb      	adds	r3, r7, #7
 801b1a8:	1c02      	adds	r2, r0, #0
 801b1aa:	701a      	strb	r2, [r3, #0]
 801b1ac:	1d3b      	adds	r3, r7, #4
 801b1ae:	1c0a      	adds	r2, r1, #0
 801b1b0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b1b2:	1dfb      	adds	r3, r7, #7
 801b1b4:	781b      	ldrb	r3, [r3, #0]
 801b1b6:	2b23      	cmp	r3, #35	@ 0x23
 801b1b8:	d804      	bhi.n	801b1c4 <CDC_Control_FS+0x28>
 801b1ba:	009a      	lsls	r2, r3, #2
 801b1bc:	4b04      	ldr	r3, [pc, #16]	@ (801b1d0 <CDC_Control_FS+0x34>)
 801b1be:	18d3      	adds	r3, r2, r3
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b1c4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801b1c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b1c8:	0018      	movs	r0, r3
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	b002      	add	sp, #8
 801b1ce:	bd80      	pop	{r7, pc}
 801b1d0:	0802341c 	.word	0x0802341c

0801b1d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b082      	sub	sp, #8
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
 801b1dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801b1de:	4b12      	ldr	r3, [pc, #72]	@ (801b228 <CDC_Receive_FS+0x54>)
 801b1e0:	781b      	ldrb	r3, [r3, #0]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d013      	beq.n	801b20e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801b1e6:	683b      	ldr	r3, [r7, #0]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	b29a      	uxth	r2, r3
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	425b      	negs	r3, r3
 801b1f0:	6879      	ldr	r1, [r7, #4]
 801b1f2:	480e      	ldr	r0, [pc, #56]	@ (801b22c <CDC_Receive_FS+0x58>)
 801b1f4:	f7fa fa46 	bl	8015684 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b1f8:	687a      	ldr	r2, [r7, #4]
 801b1fa:	4b0d      	ldr	r3, [pc, #52]	@ (801b230 <CDC_Receive_FS+0x5c>)
 801b1fc:	0011      	movs	r1, r2
 801b1fe:	0018      	movs	r0, r3
 801b200:	f7fe fcf5 	bl	8019bee <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b204:	4b0a      	ldr	r3, [pc, #40]	@ (801b230 <CDC_Receive_FS+0x5c>)
 801b206:	0018      	movs	r0, r3
 801b208:	f7fe fd3c 	bl	8019c84 <USBD_CDC_ReceivePacket>
 801b20c:	e006      	b.n	801b21c <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	681a      	ldr	r2, [r3, #0]
 801b212:	4b08      	ldr	r3, [pc, #32]	@ (801b234 <CDC_Receive_FS+0x60>)
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	18d2      	adds	r2, r2, r3
 801b218:	4b06      	ldr	r3, [pc, #24]	@ (801b234 <CDC_Receive_FS+0x60>)
 801b21a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801b21c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801b21e:	0018      	movs	r0, r3
 801b220:	46bd      	mov	sp, r7
 801b222:	b002      	add	sp, #8
 801b224:	bd80      	pop	{r7, pc}
 801b226:	46c0      	nop			@ (mov r8, r8)
 801b228:	200027e4 	.word	0x200027e4
 801b22c:	200027e8 	.word	0x200027e8
 801b230:	20002520 	.word	0x20002520
 801b234:	200028a0 	.word	0x200028a0

0801b238 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801b238:	b5b0      	push	{r4, r5, r7, lr}
 801b23a:	b084      	sub	sp, #16
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	6078      	str	r0, [r7, #4]
 801b240:	000a      	movs	r2, r1
 801b242:	1cbb      	adds	r3, r7, #2
 801b244:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801b246:	230f      	movs	r3, #15
 801b248:	18fb      	adds	r3, r7, r3
 801b24a:	2200      	movs	r2, #0
 801b24c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801b24e:	4a11      	ldr	r2, [pc, #68]	@ (801b294 <CDC_Transmit_FS+0x5c>)
 801b250:	23ae      	movs	r3, #174	@ 0xae
 801b252:	009b      	lsls	r3, r3, #2
 801b254:	58d3      	ldr	r3, [r2, r3]
 801b256:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801b258:	68ba      	ldr	r2, [r7, #8]
 801b25a:	2385      	movs	r3, #133	@ 0x85
 801b25c:	009b      	lsls	r3, r3, #2
 801b25e:	58d3      	ldr	r3, [r2, r3]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d001      	beq.n	801b268 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801b264:	2301      	movs	r3, #1
 801b266:	e010      	b.n	801b28a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801b268:	1cbb      	adds	r3, r7, #2
 801b26a:	881a      	ldrh	r2, [r3, #0]
 801b26c:	6879      	ldr	r1, [r7, #4]
 801b26e:	4b09      	ldr	r3, [pc, #36]	@ (801b294 <CDC_Transmit_FS+0x5c>)
 801b270:	0018      	movs	r0, r3
 801b272:	f7fe fca0 	bl	8019bb6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801b276:	250f      	movs	r5, #15
 801b278:	197c      	adds	r4, r7, r5
 801b27a:	4b06      	ldr	r3, [pc, #24]	@ (801b294 <CDC_Transmit_FS+0x5c>)
 801b27c:	0018      	movs	r0, r3
 801b27e:	f7fe fcca 	bl	8019c16 <USBD_CDC_TransmitPacket>
 801b282:	0003      	movs	r3, r0
 801b284:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801b286:	197b      	adds	r3, r7, r5
 801b288:	781b      	ldrb	r3, [r3, #0]
}
 801b28a:	0018      	movs	r0, r3
 801b28c:	46bd      	mov	sp, r7
 801b28e:	b004      	add	sp, #16
 801b290:	bdb0      	pop	{r4, r5, r7, pc}
 801b292:	46c0      	nop			@ (mov r8, r8)
 801b294:	20002520 	.word	0x20002520

0801b298 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801b298:	b580      	push	{r7, lr}
 801b29a:	af00      	add	r7, sp, #0
  ESPProg = true;
 801b29c:	4b02      	ldr	r3, [pc, #8]	@ (801b2a8 <EnableESPProg+0x10>)
 801b29e:	2201      	movs	r2, #1
 801b2a0:	701a      	strb	r2, [r3, #0]
}
 801b2a2:	46c0      	nop			@ (mov r8, r8)
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	bd80      	pop	{r7, pc}
 801b2a8:	200027e4 	.word	0x200027e4

0801b2ac <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801b2b0:	4b01      	ldr	r3, [pc, #4]	@ (801b2b8 <GetUsbRxPointer+0xc>)
}
 801b2b2:	0018      	movs	r0, r3
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	bd80      	pop	{r7, pc}
 801b2b8:	200028a4 	.word	0x200028a4

0801b2bc <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801b2bc:	b580      	push	{r7, lr}
 801b2be:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801b2c0:	4b07      	ldr	r3, [pc, #28]	@ (801b2e0 <ResetUsbRxDataSize+0x24>)
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801b2c6:	4a07      	ldr	r2, [pc, #28]	@ (801b2e4 <ResetUsbRxDataSize+0x28>)
 801b2c8:	4b07      	ldr	r3, [pc, #28]	@ (801b2e8 <ResetUsbRxDataSize+0x2c>)
 801b2ca:	0011      	movs	r1, r2
 801b2cc:	0018      	movs	r0, r3
 801b2ce:	f7fe fc8e 	bl	8019bee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b2d2:	4b05      	ldr	r3, [pc, #20]	@ (801b2e8 <ResetUsbRxDataSize+0x2c>)
 801b2d4:	0018      	movs	r0, r3
 801b2d6:	f7fe fcd5 	bl	8019c84 <USBD_CDC_ReceivePacket>
}
 801b2da:	46c0      	nop			@ (mov r8, r8)
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	bd80      	pop	{r7, pc}
 801b2e0:	200028a0 	.word	0x200028a0
 801b2e4:	200028a4 	.word	0x200028a4
 801b2e8:	20002520 	.word	0x20002520

0801b2ec <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801b2f0:	4b02      	ldr	r3, [pc, #8]	@ (801b2fc <GetUsbRxDataSize+0x10>)
 801b2f2:	681b      	ldr	r3, [r3, #0]
}
 801b2f4:	0018      	movs	r0, r3
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}
 801b2fa:	46c0      	nop			@ (mov r8, r8)
 801b2fc:	200028a0 	.word	0x200028a0

0801b300 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801b300:	b580      	push	{r7, lr}
 801b302:	b082      	sub	sp, #8
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801b308:	687a      	ldr	r2, [r7, #4]
 801b30a:	4b07      	ldr	r3, [pc, #28]	@ (801b328 <GetUsbRxNextChunk+0x28>)
 801b30c:	18d2      	adds	r2, r2, r3
 801b30e:	4b07      	ldr	r3, [pc, #28]	@ (801b32c <GetUsbRxNextChunk+0x2c>)
 801b310:	0011      	movs	r1, r2
 801b312:	0018      	movs	r0, r3
 801b314:	f7fe fc6b 	bl	8019bee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b318:	4b04      	ldr	r3, [pc, #16]	@ (801b32c <GetUsbRxNextChunk+0x2c>)
 801b31a:	0018      	movs	r0, r3
 801b31c:	f7fe fcb2 	bl	8019c84 <USBD_CDC_ReceivePacket>
}
 801b320:	46c0      	nop			@ (mov r8, r8)
 801b322:	46bd      	mov	sp, r7
 801b324:	b002      	add	sp, #8
 801b326:	bd80      	pop	{r7, pc}
 801b328:	200028a4 	.word	0x200028a4
 801b32c:	20002520 	.word	0x20002520

0801b330 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b330:	b580      	push	{r7, lr}
 801b332:	b082      	sub	sp, #8
 801b334:	af00      	add	r7, sp, #0
 801b336:	0002      	movs	r2, r0
 801b338:	6039      	str	r1, [r7, #0]
 801b33a:	1dfb      	adds	r3, r7, #7
 801b33c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b33e:	683b      	ldr	r3, [r7, #0]
 801b340:	2212      	movs	r2, #18
 801b342:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b344:	4b02      	ldr	r3, [pc, #8]	@ (801b350 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b346:	0018      	movs	r0, r3
 801b348:	46bd      	mov	sp, r7
 801b34a:	b002      	add	sp, #8
 801b34c:	bd80      	pop	{r7, pc}
 801b34e:	46c0      	nop			@ (mov r8, r8)
 801b350:	20000220 	.word	0x20000220

0801b354 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b354:	b580      	push	{r7, lr}
 801b356:	b082      	sub	sp, #8
 801b358:	af00      	add	r7, sp, #0
 801b35a:	0002      	movs	r2, r0
 801b35c:	6039      	str	r1, [r7, #0]
 801b35e:	1dfb      	adds	r3, r7, #7
 801b360:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b362:	683b      	ldr	r3, [r7, #0]
 801b364:	2204      	movs	r2, #4
 801b366:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b368:	4b02      	ldr	r3, [pc, #8]	@ (801b374 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b36a:	0018      	movs	r0, r3
 801b36c:	46bd      	mov	sp, r7
 801b36e:	b002      	add	sp, #8
 801b370:	bd80      	pop	{r7, pc}
 801b372:	46c0      	nop			@ (mov r8, r8)
 801b374:	20000234 	.word	0x20000234

0801b378 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b082      	sub	sp, #8
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	0002      	movs	r2, r0
 801b380:	6039      	str	r1, [r7, #0]
 801b382:	1dfb      	adds	r3, r7, #7
 801b384:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801b386:	1dfb      	adds	r3, r7, #7
 801b388:	781b      	ldrb	r3, [r3, #0]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d106      	bne.n	801b39c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b38e:	683a      	ldr	r2, [r7, #0]
 801b390:	4908      	ldr	r1, [pc, #32]	@ (801b3b4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801b392:	4b09      	ldr	r3, [pc, #36]	@ (801b3b8 <USBD_FS_ProductStrDescriptor+0x40>)
 801b394:	0018      	movs	r0, r3
 801b396:	f7ff fdb1 	bl	801aefc <USBD_GetString>
 801b39a:	e005      	b.n	801b3a8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b39c:	683a      	ldr	r2, [r7, #0]
 801b39e:	4905      	ldr	r1, [pc, #20]	@ (801b3b4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801b3a0:	4b05      	ldr	r3, [pc, #20]	@ (801b3b8 <USBD_FS_ProductStrDescriptor+0x40>)
 801b3a2:	0018      	movs	r0, r3
 801b3a4:	f7ff fdaa 	bl	801aefc <USBD_GetString>
  }
  return USBD_StrDesc;
 801b3a8:	4b02      	ldr	r3, [pc, #8]	@ (801b3b4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801b3aa:	0018      	movs	r0, r3
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	b002      	add	sp, #8
 801b3b0:	bd80      	pop	{r7, pc}
 801b3b2:	46c0      	nop			@ (mov r8, r8)
 801b3b4:	200030a4 	.word	0x200030a4
 801b3b8:	08022ed4 	.word	0x08022ed4

0801b3bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b082      	sub	sp, #8
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	0002      	movs	r2, r0
 801b3c4:	6039      	str	r1, [r7, #0]
 801b3c6:	1dfb      	adds	r3, r7, #7
 801b3c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b3ca:	683a      	ldr	r2, [r7, #0]
 801b3cc:	4904      	ldr	r1, [pc, #16]	@ (801b3e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b3ce:	4b05      	ldr	r3, [pc, #20]	@ (801b3e4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801b3d0:	0018      	movs	r0, r3
 801b3d2:	f7ff fd93 	bl	801aefc <USBD_GetString>
  return USBD_StrDesc;
 801b3d6:	4b02      	ldr	r3, [pc, #8]	@ (801b3e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801b3d8:	0018      	movs	r0, r3
 801b3da:	46bd      	mov	sp, r7
 801b3dc:	b002      	add	sp, #8
 801b3de:	bd80      	pop	{r7, pc}
 801b3e0:	200030a4 	.word	0x200030a4
 801b3e4:	08022eec 	.word	0x08022eec

0801b3e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	b082      	sub	sp, #8
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	0002      	movs	r2, r0
 801b3f0:	6039      	str	r1, [r7, #0]
 801b3f2:	1dfb      	adds	r3, r7, #7
 801b3f4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b3f6:	683b      	ldr	r3, [r7, #0]
 801b3f8:	221a      	movs	r2, #26
 801b3fa:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b3fc:	f000 f84c 	bl	801b498 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b400:	4b02      	ldr	r3, [pc, #8]	@ (801b40c <USBD_FS_SerialStrDescriptor+0x24>)
}
 801b402:	0018      	movs	r0, r3
 801b404:	46bd      	mov	sp, r7
 801b406:	b002      	add	sp, #8
 801b408:	bd80      	pop	{r7, pc}
 801b40a:	46c0      	nop			@ (mov r8, r8)
 801b40c:	20000238 	.word	0x20000238

0801b410 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b082      	sub	sp, #8
 801b414:	af00      	add	r7, sp, #0
 801b416:	0002      	movs	r2, r0
 801b418:	6039      	str	r1, [r7, #0]
 801b41a:	1dfb      	adds	r3, r7, #7
 801b41c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801b41e:	1dfb      	adds	r3, r7, #7
 801b420:	781b      	ldrb	r3, [r3, #0]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d106      	bne.n	801b434 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b426:	683a      	ldr	r2, [r7, #0]
 801b428:	4908      	ldr	r1, [pc, #32]	@ (801b44c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801b42a:	4b09      	ldr	r3, [pc, #36]	@ (801b450 <USBD_FS_ConfigStrDescriptor+0x40>)
 801b42c:	0018      	movs	r0, r3
 801b42e:	f7ff fd65 	bl	801aefc <USBD_GetString>
 801b432:	e005      	b.n	801b440 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b434:	683a      	ldr	r2, [r7, #0]
 801b436:	4905      	ldr	r1, [pc, #20]	@ (801b44c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801b438:	4b05      	ldr	r3, [pc, #20]	@ (801b450 <USBD_FS_ConfigStrDescriptor+0x40>)
 801b43a:	0018      	movs	r0, r3
 801b43c:	f7ff fd5e 	bl	801aefc <USBD_GetString>
  }
  return USBD_StrDesc;
 801b440:	4b02      	ldr	r3, [pc, #8]	@ (801b44c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801b442:	0018      	movs	r0, r3
 801b444:	46bd      	mov	sp, r7
 801b446:	b002      	add	sp, #8
 801b448:	bd80      	pop	{r7, pc}
 801b44a:	46c0      	nop			@ (mov r8, r8)
 801b44c:	200030a4 	.word	0x200030a4
 801b450:	08022f00 	.word	0x08022f00

0801b454 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b454:	b580      	push	{r7, lr}
 801b456:	b082      	sub	sp, #8
 801b458:	af00      	add	r7, sp, #0
 801b45a:	0002      	movs	r2, r0
 801b45c:	6039      	str	r1, [r7, #0]
 801b45e:	1dfb      	adds	r3, r7, #7
 801b460:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801b462:	1dfb      	adds	r3, r7, #7
 801b464:	781b      	ldrb	r3, [r3, #0]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d106      	bne.n	801b478 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b46a:	683a      	ldr	r2, [r7, #0]
 801b46c:	4908      	ldr	r1, [pc, #32]	@ (801b490 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801b46e:	4b09      	ldr	r3, [pc, #36]	@ (801b494 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801b470:	0018      	movs	r0, r3
 801b472:	f7ff fd43 	bl	801aefc <USBD_GetString>
 801b476:	e005      	b.n	801b484 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b478:	683a      	ldr	r2, [r7, #0]
 801b47a:	4905      	ldr	r1, [pc, #20]	@ (801b490 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801b47c:	4b05      	ldr	r3, [pc, #20]	@ (801b494 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801b47e:	0018      	movs	r0, r3
 801b480:	f7ff fd3c 	bl	801aefc <USBD_GetString>
  }
  return USBD_StrDesc;
 801b484:	4b02      	ldr	r3, [pc, #8]	@ (801b490 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801b486:	0018      	movs	r0, r3
 801b488:	46bd      	mov	sp, r7
 801b48a:	b002      	add	sp, #8
 801b48c:	bd80      	pop	{r7, pc}
 801b48e:	46c0      	nop			@ (mov r8, r8)
 801b490:	200030a4 	.word	0x200030a4
 801b494:	08022f0c 	.word	0x08022f0c

0801b498 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b084      	sub	sp, #16
 801b49c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b49e:	4b10      	ldr	r3, [pc, #64]	@ (801b4e0 <Get_SerialNum+0x48>)
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b4a4:	4b0f      	ldr	r3, [pc, #60]	@ (801b4e4 <Get_SerialNum+0x4c>)
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b4aa:	4b0f      	ldr	r3, [pc, #60]	@ (801b4e8 <Get_SerialNum+0x50>)
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b4b0:	68fa      	ldr	r2, [r7, #12]
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	18d3      	adds	r3, r2, r3
 801b4b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d00b      	beq.n	801b4d6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b4be:	490b      	ldr	r1, [pc, #44]	@ (801b4ec <Get_SerialNum+0x54>)
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	2208      	movs	r2, #8
 801b4c4:	0018      	movs	r0, r3
 801b4c6:	f000 f815 	bl	801b4f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b4ca:	4909      	ldr	r1, [pc, #36]	@ (801b4f0 <Get_SerialNum+0x58>)
 801b4cc:	68bb      	ldr	r3, [r7, #8]
 801b4ce:	2204      	movs	r2, #4
 801b4d0:	0018      	movs	r0, r3
 801b4d2:	f000 f80f 	bl	801b4f4 <IntToUnicode>
  }
}
 801b4d6:	46c0      	nop			@ (mov r8, r8)
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	b004      	add	sp, #16
 801b4dc:	bd80      	pop	{r7, pc}
 801b4de:	46c0      	nop			@ (mov r8, r8)
 801b4e0:	1ff80050 	.word	0x1ff80050
 801b4e4:	1ff80054 	.word	0x1ff80054
 801b4e8:	1ff80058 	.word	0x1ff80058
 801b4ec:	2000023a 	.word	0x2000023a
 801b4f0:	2000024a 	.word	0x2000024a

0801b4f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b086      	sub	sp, #24
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	60f8      	str	r0, [r7, #12]
 801b4fc:	60b9      	str	r1, [r7, #8]
 801b4fe:	1dfb      	adds	r3, r7, #7
 801b500:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801b502:	2117      	movs	r1, #23
 801b504:	187b      	adds	r3, r7, r1
 801b506:	2200      	movs	r2, #0
 801b508:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801b50a:	187b      	adds	r3, r7, r1
 801b50c:	2200      	movs	r2, #0
 801b50e:	701a      	strb	r2, [r3, #0]
 801b510:	e02f      	b.n	801b572 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	0f1b      	lsrs	r3, r3, #28
 801b516:	2b09      	cmp	r3, #9
 801b518:	d80d      	bhi.n	801b536 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	0f1b      	lsrs	r3, r3, #28
 801b51e:	b2da      	uxtb	r2, r3
 801b520:	2317      	movs	r3, #23
 801b522:	18fb      	adds	r3, r7, r3
 801b524:	781b      	ldrb	r3, [r3, #0]
 801b526:	005b      	lsls	r3, r3, #1
 801b528:	0019      	movs	r1, r3
 801b52a:	68bb      	ldr	r3, [r7, #8]
 801b52c:	185b      	adds	r3, r3, r1
 801b52e:	3230      	adds	r2, #48	@ 0x30
 801b530:	b2d2      	uxtb	r2, r2
 801b532:	701a      	strb	r2, [r3, #0]
 801b534:	e00c      	b.n	801b550 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	0f1b      	lsrs	r3, r3, #28
 801b53a:	b2da      	uxtb	r2, r3
 801b53c:	2317      	movs	r3, #23
 801b53e:	18fb      	adds	r3, r7, r3
 801b540:	781b      	ldrb	r3, [r3, #0]
 801b542:	005b      	lsls	r3, r3, #1
 801b544:	0019      	movs	r1, r3
 801b546:	68bb      	ldr	r3, [r7, #8]
 801b548:	185b      	adds	r3, r3, r1
 801b54a:	3237      	adds	r2, #55	@ 0x37
 801b54c:	b2d2      	uxtb	r2, r2
 801b54e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	011b      	lsls	r3, r3, #4
 801b554:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b556:	2117      	movs	r1, #23
 801b558:	187b      	adds	r3, r7, r1
 801b55a:	781b      	ldrb	r3, [r3, #0]
 801b55c:	005b      	lsls	r3, r3, #1
 801b55e:	3301      	adds	r3, #1
 801b560:	68ba      	ldr	r2, [r7, #8]
 801b562:	18d3      	adds	r3, r2, r3
 801b564:	2200      	movs	r2, #0
 801b566:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b568:	187b      	adds	r3, r7, r1
 801b56a:	781a      	ldrb	r2, [r3, #0]
 801b56c:	187b      	adds	r3, r7, r1
 801b56e:	3201      	adds	r2, #1
 801b570:	701a      	strb	r2, [r3, #0]
 801b572:	2317      	movs	r3, #23
 801b574:	18fa      	adds	r2, r7, r3
 801b576:	1dfb      	adds	r3, r7, #7
 801b578:	7812      	ldrb	r2, [r2, #0]
 801b57a:	781b      	ldrb	r3, [r3, #0]
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d3c8      	bcc.n	801b512 <IntToUnicode+0x1e>
  }
}
 801b580:	46c0      	nop			@ (mov r8, r8)
 801b582:	46c0      	nop			@ (mov r8, r8)
 801b584:	46bd      	mov	sp, r7
 801b586:	b006      	add	sp, #24
 801b588:	bd80      	pop	{r7, pc}
	...

0801b58c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b58c:	b580      	push	{r7, lr}
 801b58e:	b082      	sub	sp, #8
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	4a0a      	ldr	r2, [pc, #40]	@ (801b5c4 <HAL_PCD_MspInit+0x38>)
 801b59a:	4293      	cmp	r3, r2
 801b59c:	d10e      	bne.n	801b5bc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801b59e:	4b0a      	ldr	r3, [pc, #40]	@ (801b5c8 <HAL_PCD_MspInit+0x3c>)
 801b5a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b5a2:	4b09      	ldr	r3, [pc, #36]	@ (801b5c8 <HAL_PCD_MspInit+0x3c>)
 801b5a4:	2180      	movs	r1, #128	@ 0x80
 801b5a6:	0409      	lsls	r1, r1, #16
 801b5a8:	430a      	orrs	r2, r1
 801b5aa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801b5ac:	2200      	movs	r2, #0
 801b5ae:	2100      	movs	r1, #0
 801b5b0:	201f      	movs	r0, #31
 801b5b2:	f7f2 fc75 	bl	800dea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801b5b6:	201f      	movs	r0, #31
 801b5b8:	f7f2 fc87 	bl	800deca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801b5bc:	46c0      	nop			@ (mov r8, r8)
 801b5be:	46bd      	mov	sp, r7
 801b5c0:	b002      	add	sp, #8
 801b5c2:	bd80      	pop	{r7, pc}
 801b5c4:	40005c00 	.word	0x40005c00
 801b5c8:	40021000 	.word	0x40021000

0801b5cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b5cc:	b580      	push	{r7, lr}
 801b5ce:	b082      	sub	sp, #8
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b5d4:	687a      	ldr	r2, [r7, #4]
 801b5d6:	23bc      	movs	r3, #188	@ 0xbc
 801b5d8:	009b      	lsls	r3, r3, #2
 801b5da:	58d2      	ldr	r2, [r2, r3]
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	21ac      	movs	r1, #172	@ 0xac
 801b5e0:	0089      	lsls	r1, r1, #2
 801b5e2:	468c      	mov	ip, r1
 801b5e4:	4463      	add	r3, ip
 801b5e6:	0019      	movs	r1, r3
 801b5e8:	0010      	movs	r0, r2
 801b5ea:	f7fe fc1d 	bl	8019e28 <USBD_LL_SetupStage>
}
 801b5ee:	46c0      	nop			@ (mov r8, r8)
 801b5f0:	46bd      	mov	sp, r7
 801b5f2:	b002      	add	sp, #8
 801b5f4:	bd80      	pop	{r7, pc}

0801b5f6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b5f6:	b590      	push	{r4, r7, lr}
 801b5f8:	b083      	sub	sp, #12
 801b5fa:	af00      	add	r7, sp, #0
 801b5fc:	6078      	str	r0, [r7, #4]
 801b5fe:	000a      	movs	r2, r1
 801b600:	1cfb      	adds	r3, r7, #3
 801b602:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b604:	687a      	ldr	r2, [r7, #4]
 801b606:	23bc      	movs	r3, #188	@ 0xbc
 801b608:	009b      	lsls	r3, r3, #2
 801b60a:	58d4      	ldr	r4, [r2, r3]
 801b60c:	1cfb      	adds	r3, r7, #3
 801b60e:	781a      	ldrb	r2, [r3, #0]
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	23be      	movs	r3, #190	@ 0xbe
 801b614:	0059      	lsls	r1, r3, #1
 801b616:	0013      	movs	r3, r2
 801b618:	009b      	lsls	r3, r3, #2
 801b61a:	189b      	adds	r3, r3, r2
 801b61c:	00db      	lsls	r3, r3, #3
 801b61e:	18c3      	adds	r3, r0, r3
 801b620:	185b      	adds	r3, r3, r1
 801b622:	681a      	ldr	r2, [r3, #0]
 801b624:	1cfb      	adds	r3, r7, #3
 801b626:	781b      	ldrb	r3, [r3, #0]
 801b628:	0019      	movs	r1, r3
 801b62a:	0020      	movs	r0, r4
 801b62c:	f7fe fc5a 	bl	8019ee4 <USBD_LL_DataOutStage>
}
 801b630:	46c0      	nop			@ (mov r8, r8)
 801b632:	46bd      	mov	sp, r7
 801b634:	b003      	add	sp, #12
 801b636:	bd90      	pop	{r4, r7, pc}

0801b638 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b082      	sub	sp, #8
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
 801b640:	000a      	movs	r2, r1
 801b642:	1cfb      	adds	r3, r7, #3
 801b644:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b646:	687a      	ldr	r2, [r7, #4]
 801b648:	23bc      	movs	r3, #188	@ 0xbc
 801b64a:	009b      	lsls	r3, r3, #2
 801b64c:	58d0      	ldr	r0, [r2, r3]
 801b64e:	1cfb      	adds	r3, r7, #3
 801b650:	781a      	ldrb	r2, [r3, #0]
 801b652:	6879      	ldr	r1, [r7, #4]
 801b654:	0013      	movs	r3, r2
 801b656:	009b      	lsls	r3, r3, #2
 801b658:	189b      	adds	r3, r3, r2
 801b65a:	00db      	lsls	r3, r3, #3
 801b65c:	18cb      	adds	r3, r1, r3
 801b65e:	333c      	adds	r3, #60	@ 0x3c
 801b660:	681a      	ldr	r2, [r3, #0]
 801b662:	1cfb      	adds	r3, r7, #3
 801b664:	781b      	ldrb	r3, [r3, #0]
 801b666:	0019      	movs	r1, r3
 801b668:	f7fe fcbe 	bl	8019fe8 <USBD_LL_DataInStage>
}
 801b66c:	46c0      	nop			@ (mov r8, r8)
 801b66e:	46bd      	mov	sp, r7
 801b670:	b002      	add	sp, #8
 801b672:	bd80      	pop	{r7, pc}

0801b674 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b082      	sub	sp, #8
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b67c:	687a      	ldr	r2, [r7, #4]
 801b67e:	23bc      	movs	r3, #188	@ 0xbc
 801b680:	009b      	lsls	r3, r3, #2
 801b682:	58d3      	ldr	r3, [r2, r3]
 801b684:	0018      	movs	r0, r3
 801b686:	f7fe fdf5 	bl	801a274 <USBD_LL_SOF>
}
 801b68a:	46c0      	nop			@ (mov r8, r8)
 801b68c:	46bd      	mov	sp, r7
 801b68e:	b002      	add	sp, #8
 801b690:	bd80      	pop	{r7, pc}

0801b692 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b692:	b580      	push	{r7, lr}
 801b694:	b084      	sub	sp, #16
 801b696:	af00      	add	r7, sp, #0
 801b698:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b69a:	230f      	movs	r3, #15
 801b69c:	18fb      	adds	r3, r7, r3
 801b69e:	2201      	movs	r2, #1
 801b6a0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	689b      	ldr	r3, [r3, #8]
 801b6a6:	2b02      	cmp	r3, #2
 801b6a8:	d001      	beq.n	801b6ae <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801b6aa:	f7ec f819 	bl	80076e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b6ae:	687a      	ldr	r2, [r7, #4]
 801b6b0:	23bc      	movs	r3, #188	@ 0xbc
 801b6b2:	009b      	lsls	r3, r3, #2
 801b6b4:	58d2      	ldr	r2, [r2, r3]
 801b6b6:	230f      	movs	r3, #15
 801b6b8:	18fb      	adds	r3, r7, r3
 801b6ba:	781b      	ldrb	r3, [r3, #0]
 801b6bc:	0019      	movs	r1, r3
 801b6be:	0010      	movs	r0, r2
 801b6c0:	f7fe fd97 	bl	801a1f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b6c4:	687a      	ldr	r2, [r7, #4]
 801b6c6:	23bc      	movs	r3, #188	@ 0xbc
 801b6c8:	009b      	lsls	r3, r3, #2
 801b6ca:	58d3      	ldr	r3, [r2, r3]
 801b6cc:	0018      	movs	r0, r3
 801b6ce:	f7fe fd48 	bl	801a162 <USBD_LL_Reset>
}
 801b6d2:	46c0      	nop			@ (mov r8, r8)
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	b004      	add	sp, #16
 801b6d8:	bd80      	pop	{r7, pc}
	...

0801b6dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	b082      	sub	sp, #8
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b6e4:	687a      	ldr	r2, [r7, #4]
 801b6e6:	23bc      	movs	r3, #188	@ 0xbc
 801b6e8:	009b      	lsls	r3, r3, #2
 801b6ea:	58d3      	ldr	r3, [r2, r3]
 801b6ec:	0018      	movs	r0, r3
 801b6ee:	f7fe fd91 	bl	801a214 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	699b      	ldr	r3, [r3, #24]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d005      	beq.n	801b706 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b6fa:	4b05      	ldr	r3, [pc, #20]	@ (801b710 <HAL_PCD_SuspendCallback+0x34>)
 801b6fc:	691a      	ldr	r2, [r3, #16]
 801b6fe:	4b04      	ldr	r3, [pc, #16]	@ (801b710 <HAL_PCD_SuspendCallback+0x34>)
 801b700:	2106      	movs	r1, #6
 801b702:	430a      	orrs	r2, r1
 801b704:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801b706:	46c0      	nop			@ (mov r8, r8)
 801b708:	46bd      	mov	sp, r7
 801b70a:	b002      	add	sp, #8
 801b70c:	bd80      	pop	{r7, pc}
 801b70e:	46c0      	nop			@ (mov r8, r8)
 801b710:	e000ed00 	.word	0xe000ed00

0801b714 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b714:	b580      	push	{r7, lr}
 801b716:	b082      	sub	sp, #8
 801b718:	af00      	add	r7, sp, #0
 801b71a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	699b      	ldr	r3, [r3, #24]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d007      	beq.n	801b734 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b724:	4b09      	ldr	r3, [pc, #36]	@ (801b74c <HAL_PCD_ResumeCallback+0x38>)
 801b726:	691a      	ldr	r2, [r3, #16]
 801b728:	4b08      	ldr	r3, [pc, #32]	@ (801b74c <HAL_PCD_ResumeCallback+0x38>)
 801b72a:	2106      	movs	r1, #6
 801b72c:	438a      	bics	r2, r1
 801b72e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801b730:	f000 fa44 	bl	801bbbc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b734:	687a      	ldr	r2, [r7, #4]
 801b736:	23bc      	movs	r3, #188	@ 0xbc
 801b738:	009b      	lsls	r3, r3, #2
 801b73a:	58d3      	ldr	r3, [r2, r3]
 801b73c:	0018      	movs	r0, r3
 801b73e:	f7fe fd81 	bl	801a244 <USBD_LL_Resume>
}
 801b742:	46c0      	nop			@ (mov r8, r8)
 801b744:	46bd      	mov	sp, r7
 801b746:	b002      	add	sp, #8
 801b748:	bd80      	pop	{r7, pc}
 801b74a:	46c0      	nop			@ (mov r8, r8)
 801b74c:	e000ed00 	.word	0xe000ed00

0801b750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b082      	sub	sp, #8
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801b758:	4a2d      	ldr	r2, [pc, #180]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b75a:	23bc      	movs	r3, #188	@ 0xbc
 801b75c:	009b      	lsls	r3, r3, #2
 801b75e:	6879      	ldr	r1, [r7, #4]
 801b760:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801b762:	687a      	ldr	r2, [r7, #4]
 801b764:	23b0      	movs	r3, #176	@ 0xb0
 801b766:	009b      	lsls	r3, r3, #2
 801b768:	4929      	ldr	r1, [pc, #164]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b76a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801b76c:	4b28      	ldr	r3, [pc, #160]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b76e:	4a29      	ldr	r2, [pc, #164]	@ (801b814 <USBD_LL_Init+0xc4>)
 801b770:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801b772:	4b27      	ldr	r3, [pc, #156]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b774:	2208      	movs	r2, #8
 801b776:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801b778:	4b25      	ldr	r3, [pc, #148]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b77a:	2202      	movs	r2, #2
 801b77c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b77e:	4b24      	ldr	r3, [pc, #144]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b780:	2202      	movs	r2, #2
 801b782:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801b784:	4b22      	ldr	r3, [pc, #136]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b786:	2200      	movs	r2, #0
 801b788:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801b78a:	4b21      	ldr	r3, [pc, #132]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b78c:	2200      	movs	r2, #0
 801b78e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801b790:	4b1f      	ldr	r3, [pc, #124]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b792:	2200      	movs	r2, #0
 801b794:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801b796:	4b1e      	ldr	r3, [pc, #120]	@ (801b810 <USBD_LL_Init+0xc0>)
 801b798:	0018      	movs	r0, r3
 801b79a:	f7f6 f90b 	bl	80119b4 <HAL_PCD_Init>
 801b79e:	1e03      	subs	r3, r0, #0
 801b7a0:	d001      	beq.n	801b7a6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801b7a2:	f7eb ff9d 	bl	80076e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801b7a6:	687a      	ldr	r2, [r7, #4]
 801b7a8:	23b0      	movs	r3, #176	@ 0xb0
 801b7aa:	009b      	lsls	r3, r3, #2
 801b7ac:	58d0      	ldr	r0, [r2, r3]
 801b7ae:	2318      	movs	r3, #24
 801b7b0:	2200      	movs	r2, #0
 801b7b2:	2100      	movs	r1, #0
 801b7b4:	f7f7 fecc 	bl	8013550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801b7b8:	687a      	ldr	r2, [r7, #4]
 801b7ba:	23b0      	movs	r3, #176	@ 0xb0
 801b7bc:	009b      	lsls	r3, r3, #2
 801b7be:	58d0      	ldr	r0, [r2, r3]
 801b7c0:	2358      	movs	r3, #88	@ 0x58
 801b7c2:	2200      	movs	r2, #0
 801b7c4:	2180      	movs	r1, #128	@ 0x80
 801b7c6:	f7f7 fec3 	bl	8013550 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801b7ca:	687a      	ldr	r2, [r7, #4]
 801b7cc:	23b0      	movs	r3, #176	@ 0xb0
 801b7ce:	009b      	lsls	r3, r3, #2
 801b7d0:	58d0      	ldr	r0, [r2, r3]
 801b7d2:	23c0      	movs	r3, #192	@ 0xc0
 801b7d4:	2200      	movs	r2, #0
 801b7d6:	2181      	movs	r1, #129	@ 0x81
 801b7d8:	f7f7 feba 	bl	8013550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801b7dc:	687a      	ldr	r2, [r7, #4]
 801b7de:	23b0      	movs	r3, #176	@ 0xb0
 801b7e0:	009b      	lsls	r3, r3, #2
 801b7e2:	58d0      	ldr	r0, [r2, r3]
 801b7e4:	2388      	movs	r3, #136	@ 0x88
 801b7e6:	005b      	lsls	r3, r3, #1
 801b7e8:	2200      	movs	r2, #0
 801b7ea:	2101      	movs	r1, #1
 801b7ec:	f7f7 feb0 	bl	8013550 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801b7f0:	687a      	ldr	r2, [r7, #4]
 801b7f2:	23b0      	movs	r3, #176	@ 0xb0
 801b7f4:	009b      	lsls	r3, r3, #2
 801b7f6:	58d0      	ldr	r0, [r2, r3]
 801b7f8:	2380      	movs	r3, #128	@ 0x80
 801b7fa:	005b      	lsls	r3, r3, #1
 801b7fc:	2200      	movs	r2, #0
 801b7fe:	2182      	movs	r1, #130	@ 0x82
 801b800:	f7f7 fea6 	bl	8013550 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801b804:	2300      	movs	r3, #0
}
 801b806:	0018      	movs	r0, r3
 801b808:	46bd      	mov	sp, r7
 801b80a:	b002      	add	sp, #8
 801b80c:	bd80      	pop	{r7, pc}
 801b80e:	46c0      	nop			@ (mov r8, r8)
 801b810:	200032a4 	.word	0x200032a4
 801b814:	40005c00 	.word	0x40005c00

0801b818 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b81a:	b085      	sub	sp, #20
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b820:	210f      	movs	r1, #15
 801b822:	187b      	adds	r3, r7, r1
 801b824:	2200      	movs	r2, #0
 801b826:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b828:	260e      	movs	r6, #14
 801b82a:	19bb      	adds	r3, r7, r6
 801b82c:	2200      	movs	r2, #0
 801b82e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b830:	687a      	ldr	r2, [r7, #4]
 801b832:	23b0      	movs	r3, #176	@ 0xb0
 801b834:	009b      	lsls	r3, r3, #2
 801b836:	58d3      	ldr	r3, [r2, r3]
 801b838:	000d      	movs	r5, r1
 801b83a:	187c      	adds	r4, r7, r1
 801b83c:	0018      	movs	r0, r3
 801b83e:	f7f6 f9b9 	bl	8011bb4 <HAL_PCD_Start>
 801b842:	0003      	movs	r3, r0
 801b844:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b846:	19bc      	adds	r4, r7, r6
 801b848:	197b      	adds	r3, r7, r5
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	0018      	movs	r0, r3
 801b84e:	f000 f9bc 	bl	801bbca <USBD_Get_USB_Status>
 801b852:	0003      	movs	r3, r0
 801b854:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b856:	19bb      	adds	r3, r7, r6
 801b858:	781b      	ldrb	r3, [r3, #0]
}
 801b85a:	0018      	movs	r0, r3
 801b85c:	46bd      	mov	sp, r7
 801b85e:	b005      	add	sp, #20
 801b860:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b862:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b864:	b085      	sub	sp, #20
 801b866:	af00      	add	r7, sp, #0
 801b868:	6078      	str	r0, [r7, #4]
 801b86a:	000c      	movs	r4, r1
 801b86c:	0010      	movs	r0, r2
 801b86e:	0019      	movs	r1, r3
 801b870:	1cfb      	adds	r3, r7, #3
 801b872:	1c22      	adds	r2, r4, #0
 801b874:	701a      	strb	r2, [r3, #0]
 801b876:	1cbb      	adds	r3, r7, #2
 801b878:	1c02      	adds	r2, r0, #0
 801b87a:	701a      	strb	r2, [r3, #0]
 801b87c:	003b      	movs	r3, r7
 801b87e:	1c0a      	adds	r2, r1, #0
 801b880:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b882:	260f      	movs	r6, #15
 801b884:	19bb      	adds	r3, r7, r6
 801b886:	2200      	movs	r2, #0
 801b888:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b88a:	250e      	movs	r5, #14
 801b88c:	197b      	adds	r3, r7, r5
 801b88e:	2200      	movs	r2, #0
 801b890:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b892:	687a      	ldr	r2, [r7, #4]
 801b894:	23b0      	movs	r3, #176	@ 0xb0
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	58d0      	ldr	r0, [r2, r3]
 801b89a:	19bc      	adds	r4, r7, r6
 801b89c:	1cbb      	adds	r3, r7, #2
 801b89e:	781d      	ldrb	r5, [r3, #0]
 801b8a0:	003b      	movs	r3, r7
 801b8a2:	881a      	ldrh	r2, [r3, #0]
 801b8a4:	1cfb      	adds	r3, r7, #3
 801b8a6:	7819      	ldrb	r1, [r3, #0]
 801b8a8:	002b      	movs	r3, r5
 801b8aa:	f7f6 fb18 	bl	8011ede <HAL_PCD_EP_Open>
 801b8ae:	0003      	movs	r3, r0
 801b8b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b8b2:	250e      	movs	r5, #14
 801b8b4:	197c      	adds	r4, r7, r5
 801b8b6:	19bb      	adds	r3, r7, r6
 801b8b8:	781b      	ldrb	r3, [r3, #0]
 801b8ba:	0018      	movs	r0, r3
 801b8bc:	f000 f985 	bl	801bbca <USBD_Get_USB_Status>
 801b8c0:	0003      	movs	r3, r0
 801b8c2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b8c4:	197b      	adds	r3, r7, r5
 801b8c6:	781b      	ldrb	r3, [r3, #0]
}
 801b8c8:	0018      	movs	r0, r3
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	b005      	add	sp, #20
 801b8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b8d0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8d2:	b085      	sub	sp, #20
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
 801b8d8:	000a      	movs	r2, r1
 801b8da:	1cfb      	adds	r3, r7, #3
 801b8dc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b8de:	210f      	movs	r1, #15
 801b8e0:	187b      	adds	r3, r7, r1
 801b8e2:	2200      	movs	r2, #0
 801b8e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b8e6:	260e      	movs	r6, #14
 801b8e8:	19bb      	adds	r3, r7, r6
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b8ee:	687a      	ldr	r2, [r7, #4]
 801b8f0:	23b0      	movs	r3, #176	@ 0xb0
 801b8f2:	009b      	lsls	r3, r3, #2
 801b8f4:	58d2      	ldr	r2, [r2, r3]
 801b8f6:	000d      	movs	r5, r1
 801b8f8:	187c      	adds	r4, r7, r1
 801b8fa:	1cfb      	adds	r3, r7, #3
 801b8fc:	781b      	ldrb	r3, [r3, #0]
 801b8fe:	0019      	movs	r1, r3
 801b900:	0010      	movs	r0, r2
 801b902:	f7f6 fb5b 	bl	8011fbc <HAL_PCD_EP_Close>
 801b906:	0003      	movs	r3, r0
 801b908:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b90a:	19bc      	adds	r4, r7, r6
 801b90c:	197b      	adds	r3, r7, r5
 801b90e:	781b      	ldrb	r3, [r3, #0]
 801b910:	0018      	movs	r0, r3
 801b912:	f000 f95a 	bl	801bbca <USBD_Get_USB_Status>
 801b916:	0003      	movs	r3, r0
 801b918:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b91a:	19bb      	adds	r3, r7, r6
 801b91c:	781b      	ldrb	r3, [r3, #0]
}
 801b91e:	0018      	movs	r0, r3
 801b920:	46bd      	mov	sp, r7
 801b922:	b005      	add	sp, #20
 801b924:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b926 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b926:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b928:	b085      	sub	sp, #20
 801b92a:	af00      	add	r7, sp, #0
 801b92c:	6078      	str	r0, [r7, #4]
 801b92e:	000a      	movs	r2, r1
 801b930:	1cfb      	adds	r3, r7, #3
 801b932:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b934:	210f      	movs	r1, #15
 801b936:	187b      	adds	r3, r7, r1
 801b938:	2200      	movs	r2, #0
 801b93a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b93c:	260e      	movs	r6, #14
 801b93e:	19bb      	adds	r3, r7, r6
 801b940:	2200      	movs	r2, #0
 801b942:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b944:	687a      	ldr	r2, [r7, #4]
 801b946:	23b0      	movs	r3, #176	@ 0xb0
 801b948:	009b      	lsls	r3, r3, #2
 801b94a:	58d2      	ldr	r2, [r2, r3]
 801b94c:	000d      	movs	r5, r1
 801b94e:	187c      	adds	r4, r7, r1
 801b950:	1cfb      	adds	r3, r7, #3
 801b952:	781b      	ldrb	r3, [r3, #0]
 801b954:	0019      	movs	r1, r3
 801b956:	0010      	movs	r0, r2
 801b958:	f7f6 fc0d 	bl	8012176 <HAL_PCD_EP_SetStall>
 801b95c:	0003      	movs	r3, r0
 801b95e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b960:	19bc      	adds	r4, r7, r6
 801b962:	197b      	adds	r3, r7, r5
 801b964:	781b      	ldrb	r3, [r3, #0]
 801b966:	0018      	movs	r0, r3
 801b968:	f000 f92f 	bl	801bbca <USBD_Get_USB_Status>
 801b96c:	0003      	movs	r3, r0
 801b96e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b970:	19bb      	adds	r3, r7, r6
 801b972:	781b      	ldrb	r3, [r3, #0]
}
 801b974:	0018      	movs	r0, r3
 801b976:	46bd      	mov	sp, r7
 801b978:	b005      	add	sp, #20
 801b97a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b97c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b97e:	b085      	sub	sp, #20
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
 801b984:	000a      	movs	r2, r1
 801b986:	1cfb      	adds	r3, r7, #3
 801b988:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b98a:	210f      	movs	r1, #15
 801b98c:	187b      	adds	r3, r7, r1
 801b98e:	2200      	movs	r2, #0
 801b990:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b992:	260e      	movs	r6, #14
 801b994:	19bb      	adds	r3, r7, r6
 801b996:	2200      	movs	r2, #0
 801b998:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b99a:	687a      	ldr	r2, [r7, #4]
 801b99c:	23b0      	movs	r3, #176	@ 0xb0
 801b99e:	009b      	lsls	r3, r3, #2
 801b9a0:	58d2      	ldr	r2, [r2, r3]
 801b9a2:	000d      	movs	r5, r1
 801b9a4:	187c      	adds	r4, r7, r1
 801b9a6:	1cfb      	adds	r3, r7, #3
 801b9a8:	781b      	ldrb	r3, [r3, #0]
 801b9aa:	0019      	movs	r1, r3
 801b9ac:	0010      	movs	r0, r2
 801b9ae:	f7f6 fc3e 	bl	801222e <HAL_PCD_EP_ClrStall>
 801b9b2:	0003      	movs	r3, r0
 801b9b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b9b6:	19bc      	adds	r4, r7, r6
 801b9b8:	197b      	adds	r3, r7, r5
 801b9ba:	781b      	ldrb	r3, [r3, #0]
 801b9bc:	0018      	movs	r0, r3
 801b9be:	f000 f904 	bl	801bbca <USBD_Get_USB_Status>
 801b9c2:	0003      	movs	r3, r0
 801b9c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b9c6:	19bb      	adds	r3, r7, r6
 801b9c8:	781b      	ldrb	r3, [r3, #0]
}
 801b9ca:	0018      	movs	r0, r3
 801b9cc:	46bd      	mov	sp, r7
 801b9ce:	b005      	add	sp, #20
 801b9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b9d2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b9d2:	b580      	push	{r7, lr}
 801b9d4:	b084      	sub	sp, #16
 801b9d6:	af00      	add	r7, sp, #0
 801b9d8:	6078      	str	r0, [r7, #4]
 801b9da:	000a      	movs	r2, r1
 801b9dc:	1cfb      	adds	r3, r7, #3
 801b9de:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b9e0:	687a      	ldr	r2, [r7, #4]
 801b9e2:	23b0      	movs	r3, #176	@ 0xb0
 801b9e4:	009b      	lsls	r3, r3, #2
 801b9e6:	58d3      	ldr	r3, [r2, r3]
 801b9e8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b9ea:	1cfb      	adds	r3, r7, #3
 801b9ec:	781b      	ldrb	r3, [r3, #0]
 801b9ee:	b25b      	sxtb	r3, r3
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	da0d      	bge.n	801ba10 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b9f4:	1cfb      	adds	r3, r7, #3
 801b9f6:	781b      	ldrb	r3, [r3, #0]
 801b9f8:	227f      	movs	r2, #127	@ 0x7f
 801b9fa:	4013      	ands	r3, r2
 801b9fc:	68f9      	ldr	r1, [r7, #12]
 801b9fe:	1c5a      	adds	r2, r3, #1
 801ba00:	0013      	movs	r3, r2
 801ba02:	009b      	lsls	r3, r3, #2
 801ba04:	189b      	adds	r3, r3, r2
 801ba06:	00db      	lsls	r3, r3, #3
 801ba08:	18cb      	adds	r3, r1, r3
 801ba0a:	3302      	adds	r3, #2
 801ba0c:	781b      	ldrb	r3, [r3, #0]
 801ba0e:	e00d      	b.n	801ba2c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ba10:	1cfb      	adds	r3, r7, #3
 801ba12:	781b      	ldrb	r3, [r3, #0]
 801ba14:	227f      	movs	r2, #127	@ 0x7f
 801ba16:	401a      	ands	r2, r3
 801ba18:	68f8      	ldr	r0, [r7, #12]
 801ba1a:	23b5      	movs	r3, #181	@ 0xb5
 801ba1c:	0059      	lsls	r1, r3, #1
 801ba1e:	0013      	movs	r3, r2
 801ba20:	009b      	lsls	r3, r3, #2
 801ba22:	189b      	adds	r3, r3, r2
 801ba24:	00db      	lsls	r3, r3, #3
 801ba26:	18c3      	adds	r3, r0, r3
 801ba28:	185b      	adds	r3, r3, r1
 801ba2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ba2c:	0018      	movs	r0, r3
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	b004      	add	sp, #16
 801ba32:	bd80      	pop	{r7, pc}

0801ba34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba36:	b085      	sub	sp, #20
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	6078      	str	r0, [r7, #4]
 801ba3c:	000a      	movs	r2, r1
 801ba3e:	1cfb      	adds	r3, r7, #3
 801ba40:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ba42:	210f      	movs	r1, #15
 801ba44:	187b      	adds	r3, r7, r1
 801ba46:	2200      	movs	r2, #0
 801ba48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ba4a:	260e      	movs	r6, #14
 801ba4c:	19bb      	adds	r3, r7, r6
 801ba4e:	2200      	movs	r2, #0
 801ba50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ba52:	687a      	ldr	r2, [r7, #4]
 801ba54:	23b0      	movs	r3, #176	@ 0xb0
 801ba56:	009b      	lsls	r3, r3, #2
 801ba58:	58d2      	ldr	r2, [r2, r3]
 801ba5a:	000d      	movs	r5, r1
 801ba5c:	187c      	adds	r4, r7, r1
 801ba5e:	1cfb      	adds	r3, r7, #3
 801ba60:	781b      	ldrb	r3, [r3, #0]
 801ba62:	0019      	movs	r1, r3
 801ba64:	0010      	movs	r0, r2
 801ba66:	f7f6 fa0f 	bl	8011e88 <HAL_PCD_SetAddress>
 801ba6a:	0003      	movs	r3, r0
 801ba6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ba6e:	19bc      	adds	r4, r7, r6
 801ba70:	197b      	adds	r3, r7, r5
 801ba72:	781b      	ldrb	r3, [r3, #0]
 801ba74:	0018      	movs	r0, r3
 801ba76:	f000 f8a8 	bl	801bbca <USBD_Get_USB_Status>
 801ba7a:	0003      	movs	r3, r0
 801ba7c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ba7e:	19bb      	adds	r3, r7, r6
 801ba80:	781b      	ldrb	r3, [r3, #0]
}
 801ba82:	0018      	movs	r0, r3
 801ba84:	46bd      	mov	sp, r7
 801ba86:	b005      	add	sp, #20
 801ba88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ba8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801ba8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba8c:	b087      	sub	sp, #28
 801ba8e:	af00      	add	r7, sp, #0
 801ba90:	60f8      	str	r0, [r7, #12]
 801ba92:	0008      	movs	r0, r1
 801ba94:	607a      	str	r2, [r7, #4]
 801ba96:	0019      	movs	r1, r3
 801ba98:	230b      	movs	r3, #11
 801ba9a:	18fb      	adds	r3, r7, r3
 801ba9c:	1c02      	adds	r2, r0, #0
 801ba9e:	701a      	strb	r2, [r3, #0]
 801baa0:	2408      	movs	r4, #8
 801baa2:	193b      	adds	r3, r7, r4
 801baa4:	1c0a      	adds	r2, r1, #0
 801baa6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801baa8:	2117      	movs	r1, #23
 801baaa:	187b      	adds	r3, r7, r1
 801baac:	2200      	movs	r2, #0
 801baae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bab0:	2516      	movs	r5, #22
 801bab2:	197b      	adds	r3, r7, r5
 801bab4:	2200      	movs	r2, #0
 801bab6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801bab8:	68fa      	ldr	r2, [r7, #12]
 801baba:	23b0      	movs	r3, #176	@ 0xb0
 801babc:	009b      	lsls	r3, r3, #2
 801babe:	58d0      	ldr	r0, [r2, r3]
 801bac0:	193b      	adds	r3, r7, r4
 801bac2:	881d      	ldrh	r5, [r3, #0]
 801bac4:	000e      	movs	r6, r1
 801bac6:	187c      	adds	r4, r7, r1
 801bac8:	687a      	ldr	r2, [r7, #4]
 801baca:	230b      	movs	r3, #11
 801bacc:	18fb      	adds	r3, r7, r3
 801bace:	7819      	ldrb	r1, [r3, #0]
 801bad0:	002b      	movs	r3, r5
 801bad2:	f7f6 fb14 	bl	80120fe <HAL_PCD_EP_Transmit>
 801bad6:	0003      	movs	r3, r0
 801bad8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bada:	2516      	movs	r5, #22
 801badc:	197c      	adds	r4, r7, r5
 801bade:	19bb      	adds	r3, r7, r6
 801bae0:	781b      	ldrb	r3, [r3, #0]
 801bae2:	0018      	movs	r0, r3
 801bae4:	f000 f871 	bl	801bbca <USBD_Get_USB_Status>
 801bae8:	0003      	movs	r3, r0
 801baea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801baec:	197b      	adds	r3, r7, r5
 801baee:	781b      	ldrb	r3, [r3, #0]
}
 801baf0:	0018      	movs	r0, r3
 801baf2:	46bd      	mov	sp, r7
 801baf4:	b007      	add	sp, #28
 801baf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801baf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801baf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bafa:	b087      	sub	sp, #28
 801bafc:	af00      	add	r7, sp, #0
 801bafe:	60f8      	str	r0, [r7, #12]
 801bb00:	0008      	movs	r0, r1
 801bb02:	607a      	str	r2, [r7, #4]
 801bb04:	0019      	movs	r1, r3
 801bb06:	230b      	movs	r3, #11
 801bb08:	18fb      	adds	r3, r7, r3
 801bb0a:	1c02      	adds	r2, r0, #0
 801bb0c:	701a      	strb	r2, [r3, #0]
 801bb0e:	2408      	movs	r4, #8
 801bb10:	193b      	adds	r3, r7, r4
 801bb12:	1c0a      	adds	r2, r1, #0
 801bb14:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb16:	2117      	movs	r1, #23
 801bb18:	187b      	adds	r3, r7, r1
 801bb1a:	2200      	movs	r2, #0
 801bb1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb1e:	2516      	movs	r5, #22
 801bb20:	197b      	adds	r3, r7, r5
 801bb22:	2200      	movs	r2, #0
 801bb24:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801bb26:	68fa      	ldr	r2, [r7, #12]
 801bb28:	23b0      	movs	r3, #176	@ 0xb0
 801bb2a:	009b      	lsls	r3, r3, #2
 801bb2c:	58d0      	ldr	r0, [r2, r3]
 801bb2e:	193b      	adds	r3, r7, r4
 801bb30:	881d      	ldrh	r5, [r3, #0]
 801bb32:	000e      	movs	r6, r1
 801bb34:	187c      	adds	r4, r7, r1
 801bb36:	687a      	ldr	r2, [r7, #4]
 801bb38:	230b      	movs	r3, #11
 801bb3a:	18fb      	adds	r3, r7, r3
 801bb3c:	7819      	ldrb	r1, [r3, #0]
 801bb3e:	002b      	movs	r3, r5
 801bb40:	f7f6 fa8d 	bl	801205e <HAL_PCD_EP_Receive>
 801bb44:	0003      	movs	r3, r0
 801bb46:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb48:	2516      	movs	r5, #22
 801bb4a:	197c      	adds	r4, r7, r5
 801bb4c:	19bb      	adds	r3, r7, r6
 801bb4e:	781b      	ldrb	r3, [r3, #0]
 801bb50:	0018      	movs	r0, r3
 801bb52:	f000 f83a 	bl	801bbca <USBD_Get_USB_Status>
 801bb56:	0003      	movs	r3, r0
 801bb58:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801bb5a:	197b      	adds	r3, r7, r5
 801bb5c:	781b      	ldrb	r3, [r3, #0]
}
 801bb5e:	0018      	movs	r0, r3
 801bb60:	46bd      	mov	sp, r7
 801bb62:	b007      	add	sp, #28
 801bb64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bb66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bb66:	b580      	push	{r7, lr}
 801bb68:	b082      	sub	sp, #8
 801bb6a:	af00      	add	r7, sp, #0
 801bb6c:	6078      	str	r0, [r7, #4]
 801bb6e:	000a      	movs	r2, r1
 801bb70:	1cfb      	adds	r3, r7, #3
 801bb72:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801bb74:	687a      	ldr	r2, [r7, #4]
 801bb76:	23b0      	movs	r3, #176	@ 0xb0
 801bb78:	009b      	lsls	r3, r3, #2
 801bb7a:	58d2      	ldr	r2, [r2, r3]
 801bb7c:	1cfb      	adds	r3, r7, #3
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	0019      	movs	r1, r3
 801bb82:	0010      	movs	r0, r2
 801bb84:	f7f6 faa2 	bl	80120cc <HAL_PCD_EP_GetRxCount>
 801bb88:	0003      	movs	r3, r0
}
 801bb8a:	0018      	movs	r0, r3
 801bb8c:	46bd      	mov	sp, r7
 801bb8e:	b002      	add	sp, #8
 801bb90:	bd80      	pop	{r7, pc}
	...

0801bb94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801bb94:	b580      	push	{r7, lr}
 801bb96:	b082      	sub	sp, #8
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801bb9c:	4b02      	ldr	r3, [pc, #8]	@ (801bba8 <USBD_static_malloc+0x14>)
}
 801bb9e:	0018      	movs	r0, r3
 801bba0:	46bd      	mov	sp, r7
 801bba2:	b002      	add	sp, #8
 801bba4:	bd80      	pop	{r7, pc}
 801bba6:	46c0      	nop			@ (mov r8, r8)
 801bba8:	20003598 	.word	0x20003598

0801bbac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801bbac:	b580      	push	{r7, lr}
 801bbae:	b082      	sub	sp, #8
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	6078      	str	r0, [r7, #4]

}
 801bbb4:	46c0      	nop			@ (mov r8, r8)
 801bbb6:	46bd      	mov	sp, r7
 801bbb8:	b002      	add	sp, #8
 801bbba:	bd80      	pop	{r7, pc}

0801bbbc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801bbbc:	b580      	push	{r7, lr}
 801bbbe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801bbc0:	f7eb fc56 	bl	8007470 <SystemClock_Config>
}
 801bbc4:	46c0      	nop			@ (mov r8, r8)
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	bd80      	pop	{r7, pc}

0801bbca <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801bbca:	b580      	push	{r7, lr}
 801bbcc:	b084      	sub	sp, #16
 801bbce:	af00      	add	r7, sp, #0
 801bbd0:	0002      	movs	r2, r0
 801bbd2:	1dfb      	adds	r3, r7, #7
 801bbd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bbd6:	230f      	movs	r3, #15
 801bbd8:	18fb      	adds	r3, r7, r3
 801bbda:	2200      	movs	r2, #0
 801bbdc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801bbde:	1dfb      	adds	r3, r7, #7
 801bbe0:	781b      	ldrb	r3, [r3, #0]
 801bbe2:	2b03      	cmp	r3, #3
 801bbe4:	d017      	beq.n	801bc16 <USBD_Get_USB_Status+0x4c>
 801bbe6:	dc1b      	bgt.n	801bc20 <USBD_Get_USB_Status+0x56>
 801bbe8:	2b02      	cmp	r3, #2
 801bbea:	d00f      	beq.n	801bc0c <USBD_Get_USB_Status+0x42>
 801bbec:	dc18      	bgt.n	801bc20 <USBD_Get_USB_Status+0x56>
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d002      	beq.n	801bbf8 <USBD_Get_USB_Status+0x2e>
 801bbf2:	2b01      	cmp	r3, #1
 801bbf4:	d005      	beq.n	801bc02 <USBD_Get_USB_Status+0x38>
 801bbf6:	e013      	b.n	801bc20 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801bbf8:	230f      	movs	r3, #15
 801bbfa:	18fb      	adds	r3, r7, r3
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	701a      	strb	r2, [r3, #0]
    break;
 801bc00:	e013      	b.n	801bc2a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801bc02:	230f      	movs	r3, #15
 801bc04:	18fb      	adds	r3, r7, r3
 801bc06:	2202      	movs	r2, #2
 801bc08:	701a      	strb	r2, [r3, #0]
    break;
 801bc0a:	e00e      	b.n	801bc2a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801bc0c:	230f      	movs	r3, #15
 801bc0e:	18fb      	adds	r3, r7, r3
 801bc10:	2201      	movs	r2, #1
 801bc12:	701a      	strb	r2, [r3, #0]
    break;
 801bc14:	e009      	b.n	801bc2a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801bc16:	230f      	movs	r3, #15
 801bc18:	18fb      	adds	r3, r7, r3
 801bc1a:	2202      	movs	r2, #2
 801bc1c:	701a      	strb	r2, [r3, #0]
    break;
 801bc1e:	e004      	b.n	801bc2a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801bc20:	230f      	movs	r3, #15
 801bc22:	18fb      	adds	r3, r7, r3
 801bc24:	2202      	movs	r2, #2
 801bc26:	701a      	strb	r2, [r3, #0]
    break;
 801bc28:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801bc2a:	230f      	movs	r3, #15
 801bc2c:	18fb      	adds	r3, r7, r3
 801bc2e:	781b      	ldrb	r3, [r3, #0]
}
 801bc30:	0018      	movs	r0, r3
 801bc32:	46bd      	mov	sp, r7
 801bc34:	b004      	add	sp, #16
 801bc36:	bd80      	pop	{r7, pc}

0801bc38 <arm_cfft_radix4by2_q31>:
 801bc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc3a:	465f      	mov	r7, fp
 801bc3c:	4656      	mov	r6, sl
 801bc3e:	464d      	mov	r5, r9
 801bc40:	4644      	mov	r4, r8
 801bc42:	000b      	movs	r3, r1
 801bc44:	b4f0      	push	{r4, r5, r6, r7}
 801bc46:	085b      	lsrs	r3, r3, #1
 801bc48:	b08f      	sub	sp, #60	@ 0x3c
 801bc4a:	910a      	str	r1, [sp, #40]	@ 0x28
 801bc4c:	0007      	movs	r7, r0
 801bc4e:	9009      	str	r0, [sp, #36]	@ 0x24
 801bc50:	0011      	movs	r1, r2
 801bc52:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bc54:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d100      	bne.n	801bc5c <arm_cfft_radix4by2_q31+0x24>
 801bc5a:	e0a0      	b.n	801bd9e <arm_cfft_radix4by2_q31+0x166>
 801bc5c:	0002      	movs	r2, r0
 801bc5e:	00db      	lsls	r3, r3, #3
 801bc60:	3204      	adds	r2, #4
 801bc62:	4691      	mov	r9, r2
 801bc64:	4698      	mov	r8, r3
 801bc66:	000a      	movs	r2, r1
 801bc68:	464e      	mov	r6, r9
 801bc6a:	4442      	add	r2, r8
 801bc6c:	4699      	mov	r9, r3
 801bc6e:	4688      	mov	r8, r1
 801bc70:	9208      	str	r2, [sp, #32]
 801bc72:	900d      	str	r0, [sp, #52]	@ 0x34
 801bc74:	4643      	mov	r3, r8
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	469b      	mov	fp, r3
 801bc7a:	4643      	mov	r3, r8
 801bc7c:	685b      	ldr	r3, [r3, #4]
 801bc7e:	469a      	mov	sl, r3
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	109c      	asrs	r4, r3, #2
 801bc84:	464b      	mov	r3, r9
 801bc86:	58fb      	ldr	r3, [r7, r3]
 801bc88:	109a      	asrs	r2, r3, #2
 801bc8a:	18a3      	adds	r3, r4, r2
 801bc8c:	603b      	str	r3, [r7, #0]
 801bc8e:	6833      	ldr	r3, [r6, #0]
 801bc90:	1aa4      	subs	r4, r4, r2
 801bc92:	109d      	asrs	r5, r3, #2
 801bc94:	464b      	mov	r3, r9
 801bc96:	58f3      	ldr	r3, [r6, r3]
 801bc98:	17e2      	asrs	r2, r4, #31
 801bc9a:	109b      	asrs	r3, r3, #2
 801bc9c:	18e9      	adds	r1, r5, r3
 801bc9e:	6031      	str	r1, [r6, #0]
 801bca0:	0011      	movs	r1, r2
 801bca2:	465a      	mov	r2, fp
 801bca4:	17d2      	asrs	r2, r2, #31
 801bca6:	0010      	movs	r0, r2
 801bca8:	4652      	mov	r2, sl
 801bcaa:	1aed      	subs	r5, r5, r3
 801bcac:	17eb      	asrs	r3, r5, #31
 801bcae:	17d2      	asrs	r2, r2, #31
 801bcb0:	9307      	str	r3, [sp, #28]
 801bcb2:	9204      	str	r2, [sp, #16]
 801bcb4:	0003      	movs	r3, r0
 801bcb6:	465a      	mov	r2, fp
 801bcb8:	9006      	str	r0, [sp, #24]
 801bcba:	0020      	movs	r0, r4
 801bcbc:	9105      	str	r1, [sp, #20]
 801bcbe:	f7e4 fc7f 	bl	80005c0 <__aeabi_lmul>
 801bcc2:	2280      	movs	r2, #128	@ 0x80
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	0612      	lsls	r2, r2, #24
 801bcc8:	1880      	adds	r0, r0, r2
 801bcca:	4159      	adcs	r1, r3
 801bccc:	2300      	movs	r3, #0
 801bcce:	9101      	str	r1, [sp, #4]
 801bcd0:	9300      	str	r3, [sp, #0]
 801bcd2:	4652      	mov	r2, sl
 801bcd4:	9b04      	ldr	r3, [sp, #16]
 801bcd6:	0028      	movs	r0, r5
 801bcd8:	17e9      	asrs	r1, r5, #31
 801bcda:	f7e4 fc71 	bl	80005c0 <__aeabi_lmul>
 801bcde:	9a00      	ldr	r2, [sp, #0]
 801bce0:	9b01      	ldr	r3, [sp, #4]
 801bce2:	1880      	adds	r0, r0, r2
 801bce4:	4159      	adcs	r1, r3
 801bce6:	2280      	movs	r2, #128	@ 0x80
 801bce8:	2300      	movs	r3, #0
 801bcea:	0612      	lsls	r2, r2, #24
 801bcec:	1880      	adds	r0, r0, r2
 801bcee:	4159      	adcs	r1, r3
 801bcf0:	464a      	mov	r2, r9
 801bcf2:	004b      	lsls	r3, r1, #1
 801bcf4:	50bb      	str	r3, [r7, r2]
 801bcf6:	4658      	mov	r0, fp
 801bcf8:	002a      	movs	r2, r5
 801bcfa:	9b07      	ldr	r3, [sp, #28]
 801bcfc:	9906      	ldr	r1, [sp, #24]
 801bcfe:	f7e4 fc5f 	bl	80005c0 <__aeabi_lmul>
 801bd02:	2280      	movs	r2, #128	@ 0x80
 801bd04:	2300      	movs	r3, #0
 801bd06:	0612      	lsls	r2, r2, #24
 801bd08:	1880      	adds	r0, r0, r2
 801bd0a:	4159      	adcs	r1, r3
 801bd0c:	2000      	movs	r0, #0
 801bd0e:	9103      	str	r1, [sp, #12]
 801bd10:	9002      	str	r0, [sp, #8]
 801bd12:	4652      	mov	r2, sl
 801bd14:	9b04      	ldr	r3, [sp, #16]
 801bd16:	0020      	movs	r0, r4
 801bd18:	9905      	ldr	r1, [sp, #20]
 801bd1a:	f7e4 fc51 	bl	80005c0 <__aeabi_lmul>
 801bd1e:	9a02      	ldr	r2, [sp, #8]
 801bd20:	9b03      	ldr	r3, [sp, #12]
 801bd22:	1a12      	subs	r2, r2, r0
 801bd24:	418b      	sbcs	r3, r1
 801bd26:	2080      	movs	r0, #128	@ 0x80
 801bd28:	2100      	movs	r1, #0
 801bd2a:	0600      	lsls	r0, r0, #24
 801bd2c:	1812      	adds	r2, r2, r0
 801bd2e:	414b      	adcs	r3, r1
 801bd30:	464a      	mov	r2, r9
 801bd32:	005b      	lsls	r3, r3, #1
 801bd34:	50b3      	str	r3, [r6, r2]
 801bd36:	2308      	movs	r3, #8
 801bd38:	469c      	mov	ip, r3
 801bd3a:	9b08      	ldr	r3, [sp, #32]
 801bd3c:	44e0      	add	r8, ip
 801bd3e:	3708      	adds	r7, #8
 801bd40:	3608      	adds	r6, #8
 801bd42:	4598      	cmp	r8, r3
 801bd44:	d196      	bne.n	801bc74 <arm_cfft_radix4by2_q31+0x3c>
 801bd46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801bd48:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bd4a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bd4c:	2302      	movs	r3, #2
 801bd4e:	003a      	movs	r2, r7
 801bd50:	0029      	movs	r1, r5
 801bd52:	0020      	movs	r0, r4
 801bd54:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801bd56:	f000 f957 	bl	801c008 <arm_radix4_butterfly_q31>
 801bd5a:	46a4      	mov	ip, r4
 801bd5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd5e:	2302      	movs	r3, #2
 801bd60:	0088      	lsls	r0, r1, #2
 801bd62:	4460      	add	r0, ip
 801bd64:	003a      	movs	r2, r7
 801bd66:	0029      	movs	r1, r5
 801bd68:	f000 f94e 	bl	801c008 <arm_radix4_butterfly_q31>
 801bd6c:	46a4      	mov	ip, r4
 801bd6e:	0128      	lsls	r0, r5, #4
 801bd70:	4460      	add	r0, ip
 801bd72:	6833      	ldr	r3, [r6, #0]
 801bd74:	005b      	lsls	r3, r3, #1
 801bd76:	6033      	str	r3, [r6, #0]
 801bd78:	6873      	ldr	r3, [r6, #4]
 801bd7a:	005b      	lsls	r3, r3, #1
 801bd7c:	6073      	str	r3, [r6, #4]
 801bd7e:	68b3      	ldr	r3, [r6, #8]
 801bd80:	005b      	lsls	r3, r3, #1
 801bd82:	60b3      	str	r3, [r6, #8]
 801bd84:	68f3      	ldr	r3, [r6, #12]
 801bd86:	005b      	lsls	r3, r3, #1
 801bd88:	60f3      	str	r3, [r6, #12]
 801bd8a:	3610      	adds	r6, #16
 801bd8c:	42b0      	cmp	r0, r6
 801bd8e:	d1f0      	bne.n	801bd72 <arm_cfft_radix4by2_q31+0x13a>
 801bd90:	b00f      	add	sp, #60	@ 0x3c
 801bd92:	bc3c      	pop	{r2, r3, r4, r5}
 801bd94:	4690      	mov	r8, r2
 801bd96:	4699      	mov	r9, r3
 801bd98:	46a2      	mov	sl, r4
 801bd9a:	46ab      	mov	fp, r5
 801bd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd9e:	2302      	movs	r3, #2
 801bda0:	2100      	movs	r1, #0
 801bda2:	0015      	movs	r5, r2
 801bda4:	f000 f930 	bl	801c008 <arm_radix4_butterfly_q31>
 801bda8:	46bc      	mov	ip, r7
 801bdaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bdac:	002a      	movs	r2, r5
 801bdae:	0098      	lsls	r0, r3, #2
 801bdb0:	4460      	add	r0, ip
 801bdb2:	2302      	movs	r3, #2
 801bdb4:	2100      	movs	r1, #0
 801bdb6:	f000 f927 	bl	801c008 <arm_radix4_butterfly_q31>
 801bdba:	e7e9      	b.n	801bd90 <arm_cfft_radix4by2_q31+0x158>

0801bdbc <arm_cfft_radix4by2_inverse_q31>:
 801bdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdbe:	465f      	mov	r7, fp
 801bdc0:	4656      	mov	r6, sl
 801bdc2:	464d      	mov	r5, r9
 801bdc4:	4644      	mov	r4, r8
 801bdc6:	000b      	movs	r3, r1
 801bdc8:	b4f0      	push	{r4, r5, r6, r7}
 801bdca:	085b      	lsrs	r3, r3, #1
 801bdcc:	b08f      	sub	sp, #60	@ 0x3c
 801bdce:	910a      	str	r1, [sp, #40]	@ 0x28
 801bdd0:	0007      	movs	r7, r0
 801bdd2:	9009      	str	r0, [sp, #36]	@ 0x24
 801bdd4:	0011      	movs	r1, r2
 801bdd6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bdd8:	930c      	str	r3, [sp, #48]	@ 0x30
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d100      	bne.n	801bde0 <arm_cfft_radix4by2_inverse_q31+0x24>
 801bdde:	e0a0      	b.n	801bf22 <arm_cfft_radix4by2_inverse_q31+0x166>
 801bde0:	0002      	movs	r2, r0
 801bde2:	00db      	lsls	r3, r3, #3
 801bde4:	3204      	adds	r2, #4
 801bde6:	4691      	mov	r9, r2
 801bde8:	4698      	mov	r8, r3
 801bdea:	000a      	movs	r2, r1
 801bdec:	464e      	mov	r6, r9
 801bdee:	4442      	add	r2, r8
 801bdf0:	4699      	mov	r9, r3
 801bdf2:	4688      	mov	r8, r1
 801bdf4:	9208      	str	r2, [sp, #32]
 801bdf6:	900d      	str	r0, [sp, #52]	@ 0x34
 801bdf8:	4643      	mov	r3, r8
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	469b      	mov	fp, r3
 801bdfe:	4643      	mov	r3, r8
 801be00:	685b      	ldr	r3, [r3, #4]
 801be02:	469a      	mov	sl, r3
 801be04:	683b      	ldr	r3, [r7, #0]
 801be06:	109c      	asrs	r4, r3, #2
 801be08:	464b      	mov	r3, r9
 801be0a:	58fb      	ldr	r3, [r7, r3]
 801be0c:	109a      	asrs	r2, r3, #2
 801be0e:	18a3      	adds	r3, r4, r2
 801be10:	603b      	str	r3, [r7, #0]
 801be12:	6833      	ldr	r3, [r6, #0]
 801be14:	1aa4      	subs	r4, r4, r2
 801be16:	109d      	asrs	r5, r3, #2
 801be18:	464b      	mov	r3, r9
 801be1a:	58f3      	ldr	r3, [r6, r3]
 801be1c:	17e2      	asrs	r2, r4, #31
 801be1e:	109b      	asrs	r3, r3, #2
 801be20:	18e9      	adds	r1, r5, r3
 801be22:	6031      	str	r1, [r6, #0]
 801be24:	0011      	movs	r1, r2
 801be26:	465a      	mov	r2, fp
 801be28:	17d2      	asrs	r2, r2, #31
 801be2a:	0010      	movs	r0, r2
 801be2c:	4652      	mov	r2, sl
 801be2e:	1aed      	subs	r5, r5, r3
 801be30:	17eb      	asrs	r3, r5, #31
 801be32:	17d2      	asrs	r2, r2, #31
 801be34:	9307      	str	r3, [sp, #28]
 801be36:	9204      	str	r2, [sp, #16]
 801be38:	0003      	movs	r3, r0
 801be3a:	465a      	mov	r2, fp
 801be3c:	9006      	str	r0, [sp, #24]
 801be3e:	0020      	movs	r0, r4
 801be40:	9105      	str	r1, [sp, #20]
 801be42:	f7e4 fbbd 	bl	80005c0 <__aeabi_lmul>
 801be46:	2280      	movs	r2, #128	@ 0x80
 801be48:	2300      	movs	r3, #0
 801be4a:	0612      	lsls	r2, r2, #24
 801be4c:	1880      	adds	r0, r0, r2
 801be4e:	4159      	adcs	r1, r3
 801be50:	2300      	movs	r3, #0
 801be52:	9101      	str	r1, [sp, #4]
 801be54:	9300      	str	r3, [sp, #0]
 801be56:	4652      	mov	r2, sl
 801be58:	9b04      	ldr	r3, [sp, #16]
 801be5a:	0028      	movs	r0, r5
 801be5c:	17e9      	asrs	r1, r5, #31
 801be5e:	f7e4 fbaf 	bl	80005c0 <__aeabi_lmul>
 801be62:	9a00      	ldr	r2, [sp, #0]
 801be64:	9b01      	ldr	r3, [sp, #4]
 801be66:	1a12      	subs	r2, r2, r0
 801be68:	418b      	sbcs	r3, r1
 801be6a:	2080      	movs	r0, #128	@ 0x80
 801be6c:	2100      	movs	r1, #0
 801be6e:	0600      	lsls	r0, r0, #24
 801be70:	1812      	adds	r2, r2, r0
 801be72:	414b      	adcs	r3, r1
 801be74:	464a      	mov	r2, r9
 801be76:	005b      	lsls	r3, r3, #1
 801be78:	50bb      	str	r3, [r7, r2]
 801be7a:	4658      	mov	r0, fp
 801be7c:	002a      	movs	r2, r5
 801be7e:	9b07      	ldr	r3, [sp, #28]
 801be80:	9906      	ldr	r1, [sp, #24]
 801be82:	f7e4 fb9d 	bl	80005c0 <__aeabi_lmul>
 801be86:	2280      	movs	r2, #128	@ 0x80
 801be88:	2300      	movs	r3, #0
 801be8a:	0612      	lsls	r2, r2, #24
 801be8c:	1880      	adds	r0, r0, r2
 801be8e:	4159      	adcs	r1, r3
 801be90:	2000      	movs	r0, #0
 801be92:	9103      	str	r1, [sp, #12]
 801be94:	9002      	str	r0, [sp, #8]
 801be96:	4652      	mov	r2, sl
 801be98:	9b04      	ldr	r3, [sp, #16]
 801be9a:	0020      	movs	r0, r4
 801be9c:	9905      	ldr	r1, [sp, #20]
 801be9e:	f7e4 fb8f 	bl	80005c0 <__aeabi_lmul>
 801bea2:	9b02      	ldr	r3, [sp, #8]
 801bea4:	9c03      	ldr	r4, [sp, #12]
 801bea6:	18c0      	adds	r0, r0, r3
 801bea8:	4161      	adcs	r1, r4
 801beaa:	2380      	movs	r3, #128	@ 0x80
 801beac:	2400      	movs	r4, #0
 801beae:	061b      	lsls	r3, r3, #24
 801beb0:	18c0      	adds	r0, r0, r3
 801beb2:	4161      	adcs	r1, r4
 801beb4:	464a      	mov	r2, r9
 801beb6:	004b      	lsls	r3, r1, #1
 801beb8:	50b3      	str	r3, [r6, r2]
 801beba:	2308      	movs	r3, #8
 801bebc:	469c      	mov	ip, r3
 801bebe:	9b08      	ldr	r3, [sp, #32]
 801bec0:	44e0      	add	r8, ip
 801bec2:	3708      	adds	r7, #8
 801bec4:	3608      	adds	r6, #8
 801bec6:	4598      	cmp	r8, r3
 801bec8:	d196      	bne.n	801bdf8 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801beca:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801becc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bece:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bed0:	2302      	movs	r3, #2
 801bed2:	003a      	movs	r2, r7
 801bed4:	0029      	movs	r1, r5
 801bed6:	0020      	movs	r0, r4
 801bed8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801beda:	f000 fb3b 	bl	801c554 <arm_radix4_butterfly_inverse_q31>
 801bede:	46a4      	mov	ip, r4
 801bee0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bee2:	2302      	movs	r3, #2
 801bee4:	0088      	lsls	r0, r1, #2
 801bee6:	4460      	add	r0, ip
 801bee8:	003a      	movs	r2, r7
 801beea:	0029      	movs	r1, r5
 801beec:	f000 fb32 	bl	801c554 <arm_radix4_butterfly_inverse_q31>
 801bef0:	46a4      	mov	ip, r4
 801bef2:	0128      	lsls	r0, r5, #4
 801bef4:	4460      	add	r0, ip
 801bef6:	6833      	ldr	r3, [r6, #0]
 801bef8:	005b      	lsls	r3, r3, #1
 801befa:	6033      	str	r3, [r6, #0]
 801befc:	6873      	ldr	r3, [r6, #4]
 801befe:	005b      	lsls	r3, r3, #1
 801bf00:	6073      	str	r3, [r6, #4]
 801bf02:	68b3      	ldr	r3, [r6, #8]
 801bf04:	005b      	lsls	r3, r3, #1
 801bf06:	60b3      	str	r3, [r6, #8]
 801bf08:	68f3      	ldr	r3, [r6, #12]
 801bf0a:	005b      	lsls	r3, r3, #1
 801bf0c:	60f3      	str	r3, [r6, #12]
 801bf0e:	3610      	adds	r6, #16
 801bf10:	42b0      	cmp	r0, r6
 801bf12:	d1f0      	bne.n	801bef6 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801bf14:	b00f      	add	sp, #60	@ 0x3c
 801bf16:	bc3c      	pop	{r2, r3, r4, r5}
 801bf18:	4690      	mov	r8, r2
 801bf1a:	4699      	mov	r9, r3
 801bf1c:	46a2      	mov	sl, r4
 801bf1e:	46ab      	mov	fp, r5
 801bf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf22:	2302      	movs	r3, #2
 801bf24:	2100      	movs	r1, #0
 801bf26:	0015      	movs	r5, r2
 801bf28:	f000 fb14 	bl	801c554 <arm_radix4_butterfly_inverse_q31>
 801bf2c:	46bc      	mov	ip, r7
 801bf2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf30:	002a      	movs	r2, r5
 801bf32:	0098      	lsls	r0, r3, #2
 801bf34:	4460      	add	r0, ip
 801bf36:	2302      	movs	r3, #2
 801bf38:	2100      	movs	r1, #0
 801bf3a:	f000 fb0b 	bl	801c554 <arm_radix4_butterfly_inverse_q31>
 801bf3e:	e7e9      	b.n	801bf14 <arm_cfft_radix4by2_inverse_q31+0x158>

0801bf40 <arm_cfft_q31>:
 801bf40:	b570      	push	{r4, r5, r6, lr}
 801bf42:	001e      	movs	r6, r3
 801bf44:	2380      	movs	r3, #128	@ 0x80
 801bf46:	000d      	movs	r5, r1
 801bf48:	0004      	movs	r4, r0
 801bf4a:	8801      	ldrh	r1, [r0, #0]
 801bf4c:	005b      	lsls	r3, r3, #1
 801bf4e:	2a01      	cmp	r2, #1
 801bf50:	d028      	beq.n	801bfa4 <arm_cfft_q31+0x64>
 801bf52:	4299      	cmp	r1, r3
 801bf54:	d020      	beq.n	801bf98 <arm_cfft_q31+0x58>
 801bf56:	d812      	bhi.n	801bf7e <arm_cfft_q31+0x3e>
 801bf58:	2920      	cmp	r1, #32
 801bf5a:	d004      	beq.n	801bf66 <arm_cfft_q31+0x26>
 801bf5c:	d949      	bls.n	801bff2 <arm_cfft_q31+0xb2>
 801bf5e:	2940      	cmp	r1, #64	@ 0x40
 801bf60:	d01a      	beq.n	801bf98 <arm_cfft_q31+0x58>
 801bf62:	2980      	cmp	r1, #128	@ 0x80
 801bf64:	d103      	bne.n	801bf6e <arm_cfft_q31+0x2e>
 801bf66:	6862      	ldr	r2, [r4, #4]
 801bf68:	0028      	movs	r0, r5
 801bf6a:	f7ff fe65 	bl	801bc38 <arm_cfft_radix4by2_q31>
 801bf6e:	2e00      	cmp	r6, #0
 801bf70:	d004      	beq.n	801bf7c <arm_cfft_q31+0x3c>
 801bf72:	68a2      	ldr	r2, [r4, #8]
 801bf74:	89a1      	ldrh	r1, [r4, #12]
 801bf76:	0028      	movs	r0, r5
 801bf78:	f7e4 f8c6 	bl	8000108 <arm_bitreversal_32>
 801bf7c:	bd70      	pop	{r4, r5, r6, pc}
 801bf7e:	2380      	movs	r3, #128	@ 0x80
 801bf80:	00db      	lsls	r3, r3, #3
 801bf82:	4299      	cmp	r1, r3
 801bf84:	d008      	beq.n	801bf98 <arm_cfft_q31+0x58>
 801bf86:	d92f      	bls.n	801bfe8 <arm_cfft_q31+0xa8>
 801bf88:	2380      	movs	r3, #128	@ 0x80
 801bf8a:	011b      	lsls	r3, r3, #4
 801bf8c:	4299      	cmp	r1, r3
 801bf8e:	d0ea      	beq.n	801bf66 <arm_cfft_q31+0x26>
 801bf90:	2380      	movs	r3, #128	@ 0x80
 801bf92:	015b      	lsls	r3, r3, #5
 801bf94:	4299      	cmp	r1, r3
 801bf96:	d1ea      	bne.n	801bf6e <arm_cfft_q31+0x2e>
 801bf98:	2301      	movs	r3, #1
 801bf9a:	6862      	ldr	r2, [r4, #4]
 801bf9c:	0028      	movs	r0, r5
 801bf9e:	f000 f833 	bl	801c008 <arm_radix4_butterfly_q31>
 801bfa2:	e7e4      	b.n	801bf6e <arm_cfft_q31+0x2e>
 801bfa4:	4299      	cmp	r1, r3
 801bfa6:	d019      	beq.n	801bfdc <arm_cfft_q31+0x9c>
 801bfa8:	d80b      	bhi.n	801bfc2 <arm_cfft_q31+0x82>
 801bfaa:	2920      	cmp	r1, #32
 801bfac:	d004      	beq.n	801bfb8 <arm_cfft_q31+0x78>
 801bfae:	d928      	bls.n	801c002 <arm_cfft_q31+0xc2>
 801bfb0:	2940      	cmp	r1, #64	@ 0x40
 801bfb2:	d013      	beq.n	801bfdc <arm_cfft_q31+0x9c>
 801bfb4:	2980      	cmp	r1, #128	@ 0x80
 801bfb6:	d1da      	bne.n	801bf6e <arm_cfft_q31+0x2e>
 801bfb8:	6862      	ldr	r2, [r4, #4]
 801bfba:	0028      	movs	r0, r5
 801bfbc:	f7ff fefe 	bl	801bdbc <arm_cfft_radix4by2_inverse_q31>
 801bfc0:	e7d5      	b.n	801bf6e <arm_cfft_q31+0x2e>
 801bfc2:	2380      	movs	r3, #128	@ 0x80
 801bfc4:	00db      	lsls	r3, r3, #3
 801bfc6:	4299      	cmp	r1, r3
 801bfc8:	d008      	beq.n	801bfdc <arm_cfft_q31+0x9c>
 801bfca:	d915      	bls.n	801bff8 <arm_cfft_q31+0xb8>
 801bfcc:	2380      	movs	r3, #128	@ 0x80
 801bfce:	011b      	lsls	r3, r3, #4
 801bfd0:	4299      	cmp	r1, r3
 801bfd2:	d0f1      	beq.n	801bfb8 <arm_cfft_q31+0x78>
 801bfd4:	2380      	movs	r3, #128	@ 0x80
 801bfd6:	015b      	lsls	r3, r3, #5
 801bfd8:	4299      	cmp	r1, r3
 801bfda:	d1c8      	bne.n	801bf6e <arm_cfft_q31+0x2e>
 801bfdc:	2301      	movs	r3, #1
 801bfde:	6862      	ldr	r2, [r4, #4]
 801bfe0:	0028      	movs	r0, r5
 801bfe2:	f000 fab7 	bl	801c554 <arm_radix4_butterfly_inverse_q31>
 801bfe6:	e7c2      	b.n	801bf6e <arm_cfft_q31+0x2e>
 801bfe8:	2380      	movs	r3, #128	@ 0x80
 801bfea:	009b      	lsls	r3, r3, #2
 801bfec:	4299      	cmp	r1, r3
 801bfee:	d0ba      	beq.n	801bf66 <arm_cfft_q31+0x26>
 801bff0:	e7bd      	b.n	801bf6e <arm_cfft_q31+0x2e>
 801bff2:	2910      	cmp	r1, #16
 801bff4:	d1bb      	bne.n	801bf6e <arm_cfft_q31+0x2e>
 801bff6:	e7cf      	b.n	801bf98 <arm_cfft_q31+0x58>
 801bff8:	2380      	movs	r3, #128	@ 0x80
 801bffa:	009b      	lsls	r3, r3, #2
 801bffc:	4299      	cmp	r1, r3
 801bffe:	d0db      	beq.n	801bfb8 <arm_cfft_q31+0x78>
 801c000:	e7b5      	b.n	801bf6e <arm_cfft_q31+0x2e>
 801c002:	2910      	cmp	r1, #16
 801c004:	d1b3      	bne.n	801bf6e <arm_cfft_q31+0x2e>
 801c006:	e7e9      	b.n	801bfdc <arm_cfft_q31+0x9c>

0801c008 <arm_radix4_butterfly_q31>:
 801c008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c00a:	464d      	mov	r5, r9
 801c00c:	4644      	mov	r4, r8
 801c00e:	465f      	mov	r7, fp
 801c010:	4656      	mov	r6, sl
 801c012:	469c      	mov	ip, r3
 801c014:	b4f0      	push	{r4, r5, r6, r7}
 801c016:	b0a7      	sub	sp, #156	@ 0x9c
 801c018:	9114      	str	r1, [sp, #80]	@ 0x50
 801c01a:	0889      	lsrs	r1, r1, #2
 801c01c:	9310      	str	r3, [sp, #64]	@ 0x40
 801c01e:	00cb      	lsls	r3, r1, #3
 801c020:	0015      	movs	r5, r2
 801c022:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c024:	18c2      	adds	r2, r0, r3
 801c026:	000c      	movs	r4, r1
 801c028:	469a      	mov	sl, r3
 801c02a:	9124      	str	r1, [sp, #144]	@ 0x90
 801c02c:	18d1      	adds	r1, r2, r3
 801c02e:	4663      	mov	r3, ip
 801c030:	468b      	mov	fp, r1
 801c032:	0119      	lsls	r1, r3, #4
 801c034:	910d      	str	r1, [sp, #52]	@ 0x34
 801c036:	00d9      	lsls	r1, r3, #3
 801c038:	005b      	lsls	r3, r3, #1
 801c03a:	4463      	add	r3, ip
 801c03c:	910e      	str	r1, [sp, #56]	@ 0x38
 801c03e:	00d9      	lsls	r1, r3, #3
 801c040:	465b      	mov	r3, fp
 801c042:	44da      	add	sl, fp
 801c044:	4690      	mov	r8, r2
 801c046:	4683      	mov	fp, r0
 801c048:	4699      	mov	r9, r3
 801c04a:	9022      	str	r0, [sp, #136]	@ 0x88
 801c04c:	9025      	str	r0, [sp, #148]	@ 0x94
 801c04e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c050:	9502      	str	r5, [sp, #8]
 801c052:	9500      	str	r5, [sp, #0]
 801c054:	9501      	str	r5, [sp, #4]
 801c056:	9407      	str	r4, [sp, #28]
 801c058:	465b      	mov	r3, fp
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	4642      	mov	r2, r8
 801c05e:	111c      	asrs	r4, r3, #4
 801c060:	464b      	mov	r3, r9
 801c062:	4658      	mov	r0, fp
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	6812      	ldr	r2, [r2, #0]
 801c068:	111b      	asrs	r3, r3, #4
 801c06a:	18e7      	adds	r7, r4, r3
 801c06c:	1ae3      	subs	r3, r4, r3
 801c06e:	1114      	asrs	r4, r2, #4
 801c070:	4652      	mov	r2, sl
 801c072:	6840      	ldr	r0, [r0, #4]
 801c074:	6812      	ldr	r2, [r2, #0]
 801c076:	1105      	asrs	r5, r0, #4
 801c078:	4648      	mov	r0, r9
 801c07a:	9303      	str	r3, [sp, #12]
 801c07c:	1113      	asrs	r3, r2, #4
 801c07e:	18e2      	adds	r2, r4, r3
 801c080:	465c      	mov	r4, fp
 801c082:	6840      	ldr	r0, [r0, #4]
 801c084:	1103      	asrs	r3, r0, #4
 801c086:	18ee      	adds	r6, r5, r3
 801c088:	1ae8      	subs	r0, r5, r3
 801c08a:	18bb      	adds	r3, r7, r2
 801c08c:	6023      	str	r3, [r4, #0]
 801c08e:	4644      	mov	r4, r8
 801c090:	6864      	ldr	r4, [r4, #4]
 801c092:	9004      	str	r0, [sp, #16]
 801c094:	1125      	asrs	r5, r4, #4
 801c096:	4654      	mov	r4, sl
 801c098:	6864      	ldr	r4, [r4, #4]
 801c09a:	1123      	asrs	r3, r4, #4
 801c09c:	465c      	mov	r4, fp
 801c09e:	18eb      	adds	r3, r5, r3
 801c0a0:	18f1      	adds	r1, r6, r3
 801c0a2:	6061      	str	r1, [r4, #4]
 801c0a4:	4655      	mov	r5, sl
 801c0a6:	4644      	mov	r4, r8
 801c0a8:	686d      	ldr	r5, [r5, #4]
 801c0aa:	6864      	ldr	r4, [r4, #4]
 801c0ac:	1129      	asrs	r1, r5, #4
 801c0ae:	1124      	asrs	r4, r4, #4
 801c0b0:	1a64      	subs	r4, r4, r1
 801c0b2:	4641      	mov	r1, r8
 801c0b4:	6809      	ldr	r1, [r1, #0]
 801c0b6:	9405      	str	r4, [sp, #20]
 801c0b8:	1108      	asrs	r0, r1, #4
 801c0ba:	4651      	mov	r1, sl
 801c0bc:	6809      	ldr	r1, [r1, #0]
 801c0be:	1abc      	subs	r4, r7, r2
 801c0c0:	1109      	asrs	r1, r1, #4
 801c0c2:	1a41      	subs	r1, r0, r1
 801c0c4:	17e2      	asrs	r2, r4, #31
 801c0c6:	9106      	str	r1, [sp, #24]
 801c0c8:	0011      	movs	r1, r2
 801c0ca:	9a01      	ldr	r2, [sp, #4]
 801c0cc:	9108      	str	r1, [sp, #32]
 801c0ce:	6817      	ldr	r7, [r2, #0]
 801c0d0:	17fd      	asrs	r5, r7, #31
 801c0d2:	0028      	movs	r0, r5
 801c0d4:	1af5      	subs	r5, r6, r3
 801c0d6:	17ee      	asrs	r6, r5, #31
 801c0d8:	960a      	str	r6, [sp, #40]	@ 0x28
 801c0da:	6856      	ldr	r6, [r2, #4]
 801c0dc:	9009      	str	r0, [sp, #36]	@ 0x24
 801c0de:	17f3      	asrs	r3, r6, #31
 801c0e0:	003a      	movs	r2, r7
 801c0e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c0e4:	0003      	movs	r3, r0
 801c0e6:	0020      	movs	r0, r4
 801c0e8:	f7e4 fa6a 	bl	80005c0 <__aeabi_lmul>
 801c0ec:	0032      	movs	r2, r6
 801c0ee:	17f3      	asrs	r3, r6, #31
 801c0f0:	910c      	str	r1, [sp, #48]	@ 0x30
 801c0f2:	0028      	movs	r0, r5
 801c0f4:	17e9      	asrs	r1, r5, #31
 801c0f6:	f7e4 fa63 	bl	80005c0 <__aeabi_lmul>
 801c0fa:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c0fc:	002a      	movs	r2, r5
 801c0fe:	4684      	mov	ip, r0
 801c100:	4640      	mov	r0, r8
 801c102:	4461      	add	r1, ip
 801c104:	0049      	lsls	r1, r1, #1
 801c106:	6001      	str	r1, [r0, #0]
 801c108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c10a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c10c:	0038      	movs	r0, r7
 801c10e:	f7e4 fa57 	bl	80005c0 <__aeabi_lmul>
 801c112:	0032      	movs	r2, r6
 801c114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c116:	000d      	movs	r5, r1
 801c118:	0020      	movs	r0, r4
 801c11a:	9908      	ldr	r1, [sp, #32]
 801c11c:	f7e4 fa50 	bl	80005c0 <__aeabi_lmul>
 801c120:	4646      	mov	r6, r8
 801c122:	1a6d      	subs	r5, r5, r1
 801c124:	006d      	lsls	r5, r5, #1
 801c126:	6075      	str	r5, [r6, #4]
 801c128:	9903      	ldr	r1, [sp, #12]
 801c12a:	9d05      	ldr	r5, [sp, #20]
 801c12c:	000c      	movs	r4, r1
 801c12e:	46ac      	mov	ip, r5
 801c130:	4464      	add	r4, ip
 801c132:	17e6      	asrs	r6, r4, #31
 801c134:	0031      	movs	r1, r6
 801c136:	9b00      	ldr	r3, [sp, #0]
 801c138:	9804      	ldr	r0, [sp, #16]
 801c13a:	681e      	ldr	r6, [r3, #0]
 801c13c:	17f7      	asrs	r7, r6, #31
 801c13e:	9709      	str	r7, [sp, #36]	@ 0x24
 801c140:	9f06      	ldr	r7, [sp, #24]
 801c142:	0032      	movs	r2, r6
 801c144:	1bc7      	subs	r7, r0, r7
 801c146:	17fd      	asrs	r5, r7, #31
 801c148:	950a      	str	r5, [sp, #40]	@ 0x28
 801c14a:	685d      	ldr	r5, [r3, #4]
 801c14c:	17f3      	asrs	r3, r6, #31
 801c14e:	17e8      	asrs	r0, r5, #31
 801c150:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c152:	0020      	movs	r0, r4
 801c154:	9108      	str	r1, [sp, #32]
 801c156:	f7e4 fa33 	bl	80005c0 <__aeabi_lmul>
 801c15a:	002a      	movs	r2, r5
 801c15c:	17eb      	asrs	r3, r5, #31
 801c15e:	910c      	str	r1, [sp, #48]	@ 0x30
 801c160:	0038      	movs	r0, r7
 801c162:	17f9      	asrs	r1, r7, #31
 801c164:	f7e4 fa2c 	bl	80005c0 <__aeabi_lmul>
 801c168:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c16a:	003a      	movs	r2, r7
 801c16c:	4684      	mov	ip, r0
 801c16e:	4648      	mov	r0, r9
 801c170:	4461      	add	r1, ip
 801c172:	0049      	lsls	r1, r1, #1
 801c174:	6001      	str	r1, [r0, #0]
 801c176:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c178:	0030      	movs	r0, r6
 801c17a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c17c:	f7e4 fa20 	bl	80005c0 <__aeabi_lmul>
 801c180:	002a      	movs	r2, r5
 801c182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c184:	000e      	movs	r6, r1
 801c186:	0020      	movs	r0, r4
 801c188:	9908      	ldr	r1, [sp, #32]
 801c18a:	f7e4 fa19 	bl	80005c0 <__aeabi_lmul>
 801c18e:	464c      	mov	r4, r9
 801c190:	9d05      	ldr	r5, [sp, #20]
 801c192:	1a76      	subs	r6, r6, r1
 801c194:	9903      	ldr	r1, [sp, #12]
 801c196:	0076      	lsls	r6, r6, #1
 801c198:	6066      	str	r6, [r4, #4]
 801c19a:	1b4c      	subs	r4, r1, r5
 801c19c:	9e06      	ldr	r6, [sp, #24]
 801c19e:	17e1      	asrs	r1, r4, #31
 801c1a0:	9103      	str	r1, [sp, #12]
 801c1a2:	9902      	ldr	r1, [sp, #8]
 801c1a4:	46b4      	mov	ip, r6
 801c1a6:	680f      	ldr	r7, [r1, #0]
 801c1a8:	9804      	ldr	r0, [sp, #16]
 801c1aa:	17fd      	asrs	r5, r7, #31
 801c1ac:	002b      	movs	r3, r5
 801c1ae:	684e      	ldr	r6, [r1, #4]
 801c1b0:	4460      	add	r0, ip
 801c1b2:	0005      	movs	r5, r0
 801c1b4:	17c0      	asrs	r0, r0, #31
 801c1b6:	9005      	str	r0, [sp, #20]
 801c1b8:	17f0      	asrs	r0, r6, #31
 801c1ba:	9006      	str	r0, [sp, #24]
 801c1bc:	003a      	movs	r2, r7
 801c1be:	0020      	movs	r0, r4
 801c1c0:	17e1      	asrs	r1, r4, #31
 801c1c2:	9304      	str	r3, [sp, #16]
 801c1c4:	f7e4 f9fc 	bl	80005c0 <__aeabi_lmul>
 801c1c8:	0032      	movs	r2, r6
 801c1ca:	9108      	str	r1, [sp, #32]
 801c1cc:	17f3      	asrs	r3, r6, #31
 801c1ce:	0028      	movs	r0, r5
 801c1d0:	17e9      	asrs	r1, r5, #31
 801c1d2:	f7e4 f9f5 	bl	80005c0 <__aeabi_lmul>
 801c1d6:	9808      	ldr	r0, [sp, #32]
 801c1d8:	002a      	movs	r2, r5
 801c1da:	4684      	mov	ip, r0
 801c1dc:	4650      	mov	r0, sl
 801c1de:	4461      	add	r1, ip
 801c1e0:	0049      	lsls	r1, r1, #1
 801c1e2:	6001      	str	r1, [r0, #0]
 801c1e4:	9b05      	ldr	r3, [sp, #20]
 801c1e6:	9904      	ldr	r1, [sp, #16]
 801c1e8:	0038      	movs	r0, r7
 801c1ea:	f7e4 f9e9 	bl	80005c0 <__aeabi_lmul>
 801c1ee:	0020      	movs	r0, r4
 801c1f0:	2408      	movs	r4, #8
 801c1f2:	000d      	movs	r5, r1
 801c1f4:	0032      	movs	r2, r6
 801c1f6:	9b06      	ldr	r3, [sp, #24]
 801c1f8:	9903      	ldr	r1, [sp, #12]
 801c1fa:	f7e4 f9e1 	bl	80005c0 <__aeabi_lmul>
 801c1fe:	46a4      	mov	ip, r4
 801c200:	4650      	mov	r0, sl
 801c202:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c204:	44e3      	add	fp, ip
 801c206:	44e0      	add	r8, ip
 801c208:	44e1      	add	r9, ip
 801c20a:	44e2      	add	sl, ip
 801c20c:	46a4      	mov	ip, r4
 801c20e:	1a6d      	subs	r5, r5, r1
 801c210:	006d      	lsls	r5, r5, #1
 801c212:	9a01      	ldr	r2, [sp, #4]
 801c214:	6045      	str	r5, [r0, #4]
 801c216:	9807      	ldr	r0, [sp, #28]
 801c218:	4462      	add	r2, ip
 801c21a:	3801      	subs	r0, #1
 801c21c:	9201      	str	r2, [sp, #4]
 801c21e:	9007      	str	r0, [sp, #28]
 801c220:	9b00      	ldr	r3, [sp, #0]
 801c222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c224:	9902      	ldr	r1, [sp, #8]
 801c226:	4694      	mov	ip, r2
 801c228:	4463      	add	r3, ip
 801c22a:	9300      	str	r3, [sp, #0]
 801c22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c22e:	469c      	mov	ip, r3
 801c230:	4461      	add	r1, ip
 801c232:	9102      	str	r1, [sp, #8]
 801c234:	2800      	cmp	r0, #0
 801c236:	d000      	beq.n	801c23a <arm_radix4_butterfly_q31+0x232>
 801c238:	e70e      	b.n	801c058 <arm_radix4_butterfly_q31+0x50>
 801c23a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c23c:	009b      	lsls	r3, r3, #2
 801c23e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c240:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c242:	9320      	str	r3, [sp, #128]	@ 0x80
 801c244:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c246:	2b04      	cmp	r3, #4
 801c248:	d800      	bhi.n	801c24c <arm_radix4_butterfly_q31+0x244>
 801c24a:	e180      	b.n	801c54e <arm_radix4_butterfly_q31+0x546>
 801c24c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c24e:	0893      	lsrs	r3, r2, #2
 801c250:	1e59      	subs	r1, r3, #1
 801c252:	9321      	str	r3, [sp, #132]	@ 0x84
 801c254:	00db      	lsls	r3, r3, #3
 801c256:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c258:	00d3      	lsls	r3, r2, #3
 801c25a:	9300      	str	r3, [sp, #0]
 801c25c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c25e:	911a      	str	r1, [sp, #104]	@ 0x68
 801c260:	00da      	lsls	r2, r3, #3
 801c262:	921e      	str	r2, [sp, #120]	@ 0x78
 801c264:	011a      	lsls	r2, r3, #4
 801c266:	921d      	str	r2, [sp, #116]	@ 0x74
 801c268:	001a      	movs	r2, r3
 801c26a:	4694      	mov	ip, r2
 801c26c:	005b      	lsls	r3, r3, #1
 801c26e:	4463      	add	r3, ip
 801c270:	00db      	lsls	r3, r3, #3
 801c272:	931c      	str	r3, [sp, #112]	@ 0x70
 801c274:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c276:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c278:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c27a:	9318      	str	r3, [sp, #96]	@ 0x60
 801c27c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c27e:	9316      	str	r3, [sp, #88]	@ 0x58
 801c280:	2300      	movs	r3, #0
 801c282:	9315      	str	r3, [sp, #84]	@ 0x54
 801c284:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c286:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c288:	681a      	ldr	r2, [r3, #0]
 801c28a:	685b      	ldr	r3, [r3, #4]
 801c28c:	9205      	str	r2, [sp, #20]
 801c28e:	9306      	str	r3, [sp, #24]
 801c290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c292:	468c      	mov	ip, r1
 801c294:	681a      	ldr	r2, [r3, #0]
 801c296:	685b      	ldr	r3, [r3, #4]
 801c298:	9207      	str	r2, [sp, #28]
 801c29a:	9308      	str	r3, [sp, #32]
 801c29c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c29e:	681a      	ldr	r2, [r3, #0]
 801c2a0:	685b      	ldr	r3, [r3, #4]
 801c2a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c2a4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c2a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2a8:	0013      	movs	r3, r2
 801c2aa:	4463      	add	r3, ip
 801c2ac:	4698      	mov	r8, r3
 801c2ae:	0013      	movs	r3, r2
 801c2b0:	4442      	add	r2, r8
 801c2b2:	4691      	mov	r9, r2
 801c2b4:	001a      	movs	r2, r3
 801c2b6:	444a      	add	r2, r9
 801c2b8:	4692      	mov	sl, r2
 801c2ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c2bc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c2be:	4293      	cmp	r3, r2
 801c2c0:	d800      	bhi.n	801c2c4 <arm_radix4_butterfly_q31+0x2bc>
 801c2c2:	e0dd      	b.n	801c480 <arm_radix4_butterfly_q31+0x478>
 801c2c4:	4694      	mov	ip, r2
 801c2c6:	468b      	mov	fp, r1
 801c2c8:	4644      	mov	r4, r8
 801c2ca:	4655      	mov	r5, sl
 801c2cc:	9b07      	ldr	r3, [sp, #28]
 801c2ce:	17db      	asrs	r3, r3, #31
 801c2d0:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2d2:	9b08      	ldr	r3, [sp, #32]
 801c2d4:	17db      	asrs	r3, r3, #31
 801c2d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c2d8:	9b05      	ldr	r3, [sp, #20]
 801c2da:	17db      	asrs	r3, r3, #31
 801c2dc:	930e      	str	r3, [sp, #56]	@ 0x38
 801c2de:	9b06      	ldr	r3, [sp, #24]
 801c2e0:	17db      	asrs	r3, r3, #31
 801c2e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c2e6:	17db      	asrs	r3, r3, #31
 801c2e8:	9310      	str	r3, [sp, #64]	@ 0x40
 801c2ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c2ec:	17db      	asrs	r3, r3, #31
 801c2ee:	9311      	str	r3, [sp, #68]	@ 0x44
 801c2f0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c2f2:	4463      	add	r3, ip
 801c2f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c2f6:	465b      	mov	r3, fp
 801c2f8:	4659      	mov	r1, fp
 801c2fa:	681a      	ldr	r2, [r3, #0]
 801c2fc:	464b      	mov	r3, r9
 801c2fe:	684f      	ldr	r7, [r1, #4]
 801c300:	4649      	mov	r1, r9
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	18d6      	adds	r6, r2, r3
 801c306:	1ad3      	subs	r3, r2, r3
 801c308:	9301      	str	r3, [sp, #4]
 801c30a:	684b      	ldr	r3, [r1, #4]
 801c30c:	18f8      	adds	r0, r7, r3
 801c30e:	1af9      	subs	r1, r7, r3
 801c310:	6827      	ldr	r7, [r4, #0]
 801c312:	9102      	str	r1, [sp, #8]
 801c314:	003a      	movs	r2, r7
 801c316:	682f      	ldr	r7, [r5, #0]
 801c318:	46bc      	mov	ip, r7
 801c31a:	465f      	mov	r7, fp
 801c31c:	4462      	add	r2, ip
 801c31e:	18b3      	adds	r3, r6, r2
 801c320:	109b      	asrs	r3, r3, #2
 801c322:	603b      	str	r3, [r7, #0]
 801c324:	6867      	ldr	r7, [r4, #4]
 801c326:	1ab6      	subs	r6, r6, r2
 801c328:	46b8      	mov	r8, r7
 801c32a:	686f      	ldr	r7, [r5, #4]
 801c32c:	17f2      	asrs	r2, r6, #31
 801c32e:	46bc      	mov	ip, r7
 801c330:	44e0      	add	r8, ip
 801c332:	4643      	mov	r3, r8
 801c334:	465f      	mov	r7, fp
 801c336:	18c1      	adds	r1, r0, r3
 801c338:	1089      	asrs	r1, r1, #2
 801c33a:	6079      	str	r1, [r7, #4]
 801c33c:	9900      	ldr	r1, [sp, #0]
 801c33e:	4690      	mov	r8, r2
 801c340:	468c      	mov	ip, r1
 801c342:	6867      	ldr	r7, [r4, #4]
 801c344:	6869      	ldr	r1, [r5, #4]
 801c346:	44e3      	add	fp, ip
 801c348:	1a7f      	subs	r7, r7, r1
 801c34a:	9703      	str	r7, [sp, #12]
 801c34c:	6829      	ldr	r1, [r5, #0]
 801c34e:	6827      	ldr	r7, [r4, #0]
 801c350:	1a7f      	subs	r7, r7, r1
 801c352:	9704      	str	r7, [sp, #16]
 801c354:	1ac7      	subs	r7, r0, r3
 801c356:	17fa      	asrs	r2, r7, #31
 801c358:	4692      	mov	sl, r2
 801c35a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c35c:	9a07      	ldr	r2, [sp, #28]
 801c35e:	0030      	movs	r0, r6
 801c360:	4641      	mov	r1, r8
 801c362:	f7e4 f92d 	bl	80005c0 <__aeabi_lmul>
 801c366:	9a08      	ldr	r2, [sp, #32]
 801c368:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c36a:	9112      	str	r1, [sp, #72]	@ 0x48
 801c36c:	0038      	movs	r0, r7
 801c36e:	4651      	mov	r1, sl
 801c370:	f7e4 f926 	bl	80005c0 <__aeabi_lmul>
 801c374:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c376:	9a07      	ldr	r2, [sp, #28]
 801c378:	4684      	mov	ip, r0
 801c37a:	4461      	add	r1, ip
 801c37c:	1049      	asrs	r1, r1, #1
 801c37e:	6021      	str	r1, [r4, #0]
 801c380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c382:	0038      	movs	r0, r7
 801c384:	4651      	mov	r1, sl
 801c386:	f7e4 f91b 	bl	80005c0 <__aeabi_lmul>
 801c38a:	9a08      	ldr	r2, [sp, #32]
 801c38c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c38e:	000f      	movs	r7, r1
 801c390:	0030      	movs	r0, r6
 801c392:	4641      	mov	r1, r8
 801c394:	f7e4 f914 	bl	80005c0 <__aeabi_lmul>
 801c398:	9b00      	ldr	r3, [sp, #0]
 801c39a:	9a01      	ldr	r2, [sp, #4]
 801c39c:	469c      	mov	ip, r3
 801c39e:	9803      	ldr	r0, [sp, #12]
 801c3a0:	1a7f      	subs	r7, r7, r1
 801c3a2:	107f      	asrs	r7, r7, #1
 801c3a4:	6067      	str	r7, [r4, #4]
 801c3a6:	0016      	movs	r6, r2
 801c3a8:	4464      	add	r4, ip
 801c3aa:	4684      	mov	ip, r0
 801c3ac:	4466      	add	r6, ip
 801c3ae:	17f2      	asrs	r2, r6, #31
 801c3b0:	4690      	mov	r8, r2
 801c3b2:	9902      	ldr	r1, [sp, #8]
 801c3b4:	9f04      	ldr	r7, [sp, #16]
 801c3b6:	0030      	movs	r0, r6
 801c3b8:	1bcf      	subs	r7, r1, r7
 801c3ba:	17fa      	asrs	r2, r7, #31
 801c3bc:	4692      	mov	sl, r2
 801c3be:	4641      	mov	r1, r8
 801c3c0:	9a05      	ldr	r2, [sp, #20]
 801c3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3c4:	f7e4 f8fc 	bl	80005c0 <__aeabi_lmul>
 801c3c8:	9a06      	ldr	r2, [sp, #24]
 801c3ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3cc:	9112      	str	r1, [sp, #72]	@ 0x48
 801c3ce:	0038      	movs	r0, r7
 801c3d0:	4651      	mov	r1, sl
 801c3d2:	f7e4 f8f5 	bl	80005c0 <__aeabi_lmul>
 801c3d6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c3d8:	9a05      	ldr	r2, [sp, #20]
 801c3da:	4684      	mov	ip, r0
 801c3dc:	4648      	mov	r0, r9
 801c3de:	4461      	add	r1, ip
 801c3e0:	1049      	asrs	r1, r1, #1
 801c3e2:	6001      	str	r1, [r0, #0]
 801c3e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c3e6:	0038      	movs	r0, r7
 801c3e8:	4651      	mov	r1, sl
 801c3ea:	f7e4 f8e9 	bl	80005c0 <__aeabi_lmul>
 801c3ee:	9a06      	ldr	r2, [sp, #24]
 801c3f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3f2:	000f      	movs	r7, r1
 801c3f4:	0030      	movs	r0, r6
 801c3f6:	4641      	mov	r1, r8
 801c3f8:	f7e4 f8e2 	bl	80005c0 <__aeabi_lmul>
 801c3fc:	464e      	mov	r6, r9
 801c3fe:	9a00      	ldr	r2, [sp, #0]
 801c400:	9b01      	ldr	r3, [sp, #4]
 801c402:	4694      	mov	ip, r2
 801c404:	9803      	ldr	r0, [sp, #12]
 801c406:	1a7f      	subs	r7, r7, r1
 801c408:	107f      	asrs	r7, r7, #1
 801c40a:	6077      	str	r7, [r6, #4]
 801c40c:	1a1e      	subs	r6, r3, r0
 801c40e:	9b04      	ldr	r3, [sp, #16]
 801c410:	44e1      	add	r9, ip
 801c412:	469c      	mov	ip, r3
 801c414:	17f0      	asrs	r0, r6, #31
 801c416:	4680      	mov	r8, r0
 801c418:	9902      	ldr	r1, [sp, #8]
 801c41a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c41c:	4461      	add	r1, ip
 801c41e:	17cb      	asrs	r3, r1, #31
 801c420:	000f      	movs	r7, r1
 801c422:	469a      	mov	sl, r3
 801c424:	0030      	movs	r0, r6
 801c426:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c428:	4641      	mov	r1, r8
 801c42a:	f7e4 f8c9 	bl	80005c0 <__aeabi_lmul>
 801c42e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c430:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c432:	9101      	str	r1, [sp, #4]
 801c434:	0038      	movs	r0, r7
 801c436:	4651      	mov	r1, sl
 801c438:	f7e4 f8c2 	bl	80005c0 <__aeabi_lmul>
 801c43c:	9801      	ldr	r0, [sp, #4]
 801c43e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c440:	4684      	mov	ip, r0
 801c442:	4461      	add	r1, ip
 801c444:	1049      	asrs	r1, r1, #1
 801c446:	6029      	str	r1, [r5, #0]
 801c448:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c44a:	0038      	movs	r0, r7
 801c44c:	4651      	mov	r1, sl
 801c44e:	f7e4 f8b7 	bl	80005c0 <__aeabi_lmul>
 801c452:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c454:	000f      	movs	r7, r1
 801c456:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c458:	0030      	movs	r0, r6
 801c45a:	4641      	mov	r1, r8
 801c45c:	f7e4 f8b0 	bl	80005c0 <__aeabi_lmul>
 801c460:	1a7f      	subs	r7, r7, r1
 801c462:	107f      	asrs	r7, r7, #1
 801c464:	606f      	str	r7, [r5, #4]
 801c466:	9a00      	ldr	r2, [sp, #0]
 801c468:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c46a:	4694      	mov	ip, r2
 801c46c:	4465      	add	r5, ip
 801c46e:	468c      	mov	ip, r1
 801c470:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c472:	0013      	movs	r3, r2
 801c474:	4462      	add	r2, ip
 801c476:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c478:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c47a:	429a      	cmp	r2, r3
 801c47c:	d900      	bls.n	801c480 <arm_radix4_butterfly_q31+0x478>
 801c47e:	e73a      	b.n	801c2f6 <arm_radix4_butterfly_q31+0x2ee>
 801c480:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801c482:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c484:	468c      	mov	ip, r1
 801c486:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801c488:	4462      	add	r2, ip
 801c48a:	468c      	mov	ip, r1
 801c48c:	9216      	str	r2, [sp, #88]	@ 0x58
 801c48e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801c490:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c492:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c494:	4462      	add	r2, ip
 801c496:	468c      	mov	ip, r1
 801c498:	9219      	str	r2, [sp, #100]	@ 0x64
 801c49a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c49c:	3301      	adds	r3, #1
 801c49e:	4462      	add	r2, ip
 801c4a0:	9218      	str	r2, [sp, #96]	@ 0x60
 801c4a2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801c4a4:	9315      	str	r3, [sp, #84]	@ 0x54
 801c4a6:	3208      	adds	r2, #8
 801c4a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c4aa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c4ac:	4293      	cmp	r3, r2
 801c4ae:	d800      	bhi.n	801c4b2 <arm_radix4_butterfly_q31+0x4aa>
 801c4b0:	e6e8      	b.n	801c284 <arm_radix4_butterfly_q31+0x27c>
 801c4b2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c4b4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c4b6:	009b      	lsls	r3, r3, #2
 801c4b8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c4ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c4bc:	9213      	str	r2, [sp, #76]	@ 0x4c
 801c4be:	089b      	lsrs	r3, r3, #2
 801c4c0:	9320      	str	r3, [sp, #128]	@ 0x80
 801c4c2:	2b04      	cmp	r3, #4
 801c4c4:	d900      	bls.n	801c4c8 <arm_radix4_butterfly_q31+0x4c0>
 801c4c6:	e6c1      	b.n	801c24c <arm_radix4_butterfly_q31+0x244>
 801c4c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c4ca:	469a      	mov	sl, r3
 801c4cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c4ce:	691c      	ldr	r4, [r3, #16]
 801c4d0:	685a      	ldr	r2, [r3, #4]
 801c4d2:	46a1      	mov	r9, r4
 801c4d4:	4690      	mov	r8, r2
 801c4d6:	6819      	ldr	r1, [r3, #0]
 801c4d8:	689a      	ldr	r2, [r3, #8]
 801c4da:	699f      	ldr	r7, [r3, #24]
 801c4dc:	188d      	adds	r5, r1, r2
 801c4de:	444d      	add	r5, r9
 801c4e0:	19ed      	adds	r5, r5, r7
 801c4e2:	69de      	ldr	r6, [r3, #28]
 801c4e4:	601d      	str	r5, [r3, #0]
 801c4e6:	4645      	mov	r5, r8
 801c4e8:	46b4      	mov	ip, r6
 801c4ea:	68d8      	ldr	r0, [r3, #12]
 801c4ec:	695c      	ldr	r4, [r3, #20]
 801c4ee:	182d      	adds	r5, r5, r0
 801c4f0:	192d      	adds	r5, r5, r4
 801c4f2:	4465      	add	r5, ip
 801c4f4:	605d      	str	r5, [r3, #4]
 801c4f6:	1a8d      	subs	r5, r1, r2
 801c4f8:	444d      	add	r5, r9
 801c4fa:	1bed      	subs	r5, r5, r7
 801c4fc:	609d      	str	r5, [r3, #8]
 801c4fe:	4645      	mov	r5, r8
 801c500:	1a2d      	subs	r5, r5, r0
 801c502:	192d      	adds	r5, r5, r4
 801c504:	1bad      	subs	r5, r5, r6
 801c506:	464e      	mov	r6, r9
 801c508:	60dd      	str	r5, [r3, #12]
 801c50a:	180d      	adds	r5, r1, r0
 801c50c:	1bad      	subs	r5, r5, r6
 801c50e:	4666      	mov	r6, ip
 801c510:	1bad      	subs	r5, r5, r6
 801c512:	611d      	str	r5, [r3, #16]
 801c514:	4645      	mov	r5, r8
 801c516:	1aad      	subs	r5, r5, r2
 801c518:	4442      	add	r2, r8
 801c51a:	1b12      	subs	r2, r2, r4
 801c51c:	1bd2      	subs	r2, r2, r7
 801c51e:	1a08      	subs	r0, r1, r0
 801c520:	61da      	str	r2, [r3, #28]
 801c522:	4649      	mov	r1, r9
 801c524:	2201      	movs	r2, #1
 801c526:	1a41      	subs	r1, r0, r1
 801c528:	4252      	negs	r2, r2
 801c52a:	4461      	add	r1, ip
 801c52c:	4694      	mov	ip, r2
 801c52e:	44e2      	add	sl, ip
 801c530:	4652      	mov	r2, sl
 801c532:	1b2d      	subs	r5, r5, r4
 801c534:	19ed      	adds	r5, r5, r7
 801c536:	615d      	str	r5, [r3, #20]
 801c538:	6199      	str	r1, [r3, #24]
 801c53a:	3320      	adds	r3, #32
 801c53c:	2a00      	cmp	r2, #0
 801c53e:	d1c6      	bne.n	801c4ce <arm_radix4_butterfly_q31+0x4c6>
 801c540:	b027      	add	sp, #156	@ 0x9c
 801c542:	bc3c      	pop	{r2, r3, r4, r5}
 801c544:	4690      	mov	r8, r2
 801c546:	4699      	mov	r9, r3
 801c548:	46a2      	mov	sl, r4
 801c54a:	46ab      	mov	fp, r5
 801c54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c54e:	469a      	mov	sl, r3
 801c550:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c552:	e7bc      	b.n	801c4ce <arm_radix4_butterfly_q31+0x4c6>

0801c554 <arm_radix4_butterfly_inverse_q31>:
 801c554:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c556:	464d      	mov	r5, r9
 801c558:	4644      	mov	r4, r8
 801c55a:	465f      	mov	r7, fp
 801c55c:	4656      	mov	r6, sl
 801c55e:	b4f0      	push	{r4, r5, r6, r7}
 801c560:	b0a7      	sub	sp, #156	@ 0x9c
 801c562:	469c      	mov	ip, r3
 801c564:	9114      	str	r1, [sp, #80]	@ 0x50
 801c566:	0889      	lsrs	r1, r1, #2
 801c568:	9310      	str	r3, [sp, #64]	@ 0x40
 801c56a:	00cb      	lsls	r3, r1, #3
 801c56c:	0015      	movs	r5, r2
 801c56e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c570:	18c2      	adds	r2, r0, r3
 801c572:	000c      	movs	r4, r1
 801c574:	9124      	str	r1, [sp, #144]	@ 0x90
 801c576:	18d1      	adds	r1, r2, r3
 801c578:	468b      	mov	fp, r1
 801c57a:	469a      	mov	sl, r3
 801c57c:	4663      	mov	r3, ip
 801c57e:	44da      	add	sl, fp
 801c580:	46d0      	mov	r8, sl
 801c582:	4681      	mov	r9, r0
 801c584:	4692      	mov	sl, r2
 801c586:	0119      	lsls	r1, r3, #4
 801c588:	910d      	str	r1, [sp, #52]	@ 0x34
 801c58a:	00d9      	lsls	r1, r3, #3
 801c58c:	005b      	lsls	r3, r3, #1
 801c58e:	4463      	add	r3, ip
 801c590:	910e      	str	r1, [sp, #56]	@ 0x38
 801c592:	00d9      	lsls	r1, r3, #3
 801c594:	9022      	str	r0, [sp, #136]	@ 0x88
 801c596:	9025      	str	r0, [sp, #148]	@ 0x94
 801c598:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c59a:	9502      	str	r5, [sp, #8]
 801c59c:	9500      	str	r5, [sp, #0]
 801c59e:	9501      	str	r5, [sp, #4]
 801c5a0:	9409      	str	r4, [sp, #36]	@ 0x24
 801c5a2:	464b      	mov	r3, r9
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	4652      	mov	r2, sl
 801c5a8:	111c      	asrs	r4, r3, #4
 801c5aa:	465b      	mov	r3, fp
 801c5ac:	4648      	mov	r0, r9
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	6812      	ldr	r2, [r2, #0]
 801c5b2:	6840      	ldr	r0, [r0, #4]
 801c5b4:	111b      	asrs	r3, r3, #4
 801c5b6:	18e7      	adds	r7, r4, r3
 801c5b8:	1ae3      	subs	r3, r4, r3
 801c5ba:	1114      	asrs	r4, r2, #4
 801c5bc:	4642      	mov	r2, r8
 801c5be:	1105      	asrs	r5, r0, #4
 801c5c0:	4658      	mov	r0, fp
 801c5c2:	6812      	ldr	r2, [r2, #0]
 801c5c4:	6840      	ldr	r0, [r0, #4]
 801c5c6:	9303      	str	r3, [sp, #12]
 801c5c8:	1113      	asrs	r3, r2, #4
 801c5ca:	18e2      	adds	r2, r4, r3
 801c5cc:	1103      	asrs	r3, r0, #4
 801c5ce:	18ee      	adds	r6, r5, r3
 801c5d0:	1ae8      	subs	r0, r5, r3
 801c5d2:	464d      	mov	r5, r9
 801c5d4:	18bb      	adds	r3, r7, r2
 801c5d6:	602b      	str	r3, [r5, #0]
 801c5d8:	4641      	mov	r1, r8
 801c5da:	4655      	mov	r5, sl
 801c5dc:	6849      	ldr	r1, [r1, #4]
 801c5de:	686d      	ldr	r5, [r5, #4]
 801c5e0:	110b      	asrs	r3, r1, #4
 801c5e2:	112d      	asrs	r5, r5, #4
 801c5e4:	18eb      	adds	r3, r5, r3
 801c5e6:	464d      	mov	r5, r9
 801c5e8:	18f1      	adds	r1, r6, r3
 801c5ea:	6069      	str	r1, [r5, #4]
 801c5ec:	4655      	mov	r5, sl
 801c5ee:	686d      	ldr	r5, [r5, #4]
 801c5f0:	9004      	str	r0, [sp, #16]
 801c5f2:	112c      	asrs	r4, r5, #4
 801c5f4:	4645      	mov	r5, r8
 801c5f6:	686d      	ldr	r5, [r5, #4]
 801c5f8:	1129      	asrs	r1, r5, #4
 801c5fa:	1a65      	subs	r5, r4, r1
 801c5fc:	4651      	mov	r1, sl
 801c5fe:	6809      	ldr	r1, [r1, #0]
 801c600:	1abc      	subs	r4, r7, r2
 801c602:	1108      	asrs	r0, r1, #4
 801c604:	4641      	mov	r1, r8
 801c606:	17e2      	asrs	r2, r4, #31
 801c608:	6809      	ldr	r1, [r1, #0]
 801c60a:	9207      	str	r2, [sp, #28]
 801c60c:	9a01      	ldr	r2, [sp, #4]
 801c60e:	1109      	asrs	r1, r1, #4
 801c610:	6817      	ldr	r7, [r2, #0]
 801c612:	1a41      	subs	r1, r0, r1
 801c614:	9106      	str	r1, [sp, #24]
 801c616:	0039      	movs	r1, r7
 801c618:	17ff      	asrs	r7, r7, #31
 801c61a:	0038      	movs	r0, r7
 801c61c:	9505      	str	r5, [sp, #20]
 801c61e:	1af5      	subs	r5, r6, r3
 801c620:	17ef      	asrs	r7, r5, #31
 801c622:	970b      	str	r7, [sp, #44]	@ 0x2c
 801c624:	6857      	ldr	r7, [r2, #4]
 801c626:	0003      	movs	r3, r0
 801c628:	17fe      	asrs	r6, r7, #31
 801c62a:	000a      	movs	r2, r1
 801c62c:	9108      	str	r1, [sp, #32]
 801c62e:	900a      	str	r0, [sp, #40]	@ 0x28
 801c630:	17e1      	asrs	r1, r4, #31
 801c632:	0020      	movs	r0, r4
 801c634:	960c      	str	r6, [sp, #48]	@ 0x30
 801c636:	f7e3 ffc3 	bl	80005c0 <__aeabi_lmul>
 801c63a:	003a      	movs	r2, r7
 801c63c:	17fb      	asrs	r3, r7, #31
 801c63e:	000e      	movs	r6, r1
 801c640:	0028      	movs	r0, r5
 801c642:	17e9      	asrs	r1, r5, #31
 801c644:	f7e3 ffbc 	bl	80005c0 <__aeabi_lmul>
 801c648:	4653      	mov	r3, sl
 801c64a:	1a76      	subs	r6, r6, r1
 801c64c:	0076      	lsls	r6, r6, #1
 801c64e:	601e      	str	r6, [r3, #0]
 801c650:	002a      	movs	r2, r5
 801c652:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c654:	9808      	ldr	r0, [sp, #32]
 801c656:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c658:	f7e3 ffb2 	bl	80005c0 <__aeabi_lmul>
 801c65c:	003a      	movs	r2, r7
 801c65e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c660:	000d      	movs	r5, r1
 801c662:	0020      	movs	r0, r4
 801c664:	9907      	ldr	r1, [sp, #28]
 801c666:	f7e3 ffab 	bl	80005c0 <__aeabi_lmul>
 801c66a:	4657      	mov	r7, sl
 801c66c:	186d      	adds	r5, r5, r1
 801c66e:	006d      	lsls	r5, r5, #1
 801c670:	607d      	str	r5, [r7, #4]
 801c672:	9b03      	ldr	r3, [sp, #12]
 801c674:	9e06      	ldr	r6, [sp, #24]
 801c676:	9d05      	ldr	r5, [sp, #20]
 801c678:	46b4      	mov	ip, r6
 801c67a:	1b5d      	subs	r5, r3, r5
 801c67c:	9b00      	ldr	r3, [sp, #0]
 801c67e:	17ef      	asrs	r7, r5, #31
 801c680:	0039      	movs	r1, r7
 801c682:	681f      	ldr	r7, [r3, #0]
 801c684:	17fc      	asrs	r4, r7, #31
 801c686:	0020      	movs	r0, r4
 801c688:	9c04      	ldr	r4, [sp, #16]
 801c68a:	4464      	add	r4, ip
 801c68c:	17e6      	asrs	r6, r4, #31
 801c68e:	9407      	str	r4, [sp, #28]
 801c690:	9608      	str	r6, [sp, #32]
 801c692:	685e      	ldr	r6, [r3, #4]
 801c694:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c696:	17f2      	asrs	r2, r6, #31
 801c698:	0003      	movs	r3, r0
 801c69a:	920c      	str	r2, [sp, #48]	@ 0x30
 801c69c:	0028      	movs	r0, r5
 801c69e:	003a      	movs	r2, r7
 801c6a0:	910a      	str	r1, [sp, #40]	@ 0x28
 801c6a2:	f7e3 ff8d 	bl	80005c0 <__aeabi_lmul>
 801c6a6:	0032      	movs	r2, r6
 801c6a8:	17f3      	asrs	r3, r6, #31
 801c6aa:	9807      	ldr	r0, [sp, #28]
 801c6ac:	000c      	movs	r4, r1
 801c6ae:	9908      	ldr	r1, [sp, #32]
 801c6b0:	f7e3 ff86 	bl	80005c0 <__aeabi_lmul>
 801c6b4:	4658      	mov	r0, fp
 801c6b6:	1a64      	subs	r4, r4, r1
 801c6b8:	0064      	lsls	r4, r4, #1
 801c6ba:	9a07      	ldr	r2, [sp, #28]
 801c6bc:	6004      	str	r4, [r0, #0]
 801c6be:	9b08      	ldr	r3, [sp, #32]
 801c6c0:	0038      	movs	r0, r7
 801c6c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c6c4:	f7e3 ff7c 	bl	80005c0 <__aeabi_lmul>
 801c6c8:	0032      	movs	r2, r6
 801c6ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c6cc:	000c      	movs	r4, r1
 801c6ce:	0028      	movs	r0, r5
 801c6d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c6d2:	f7e3 ff75 	bl	80005c0 <__aeabi_lmul>
 801c6d6:	9d05      	ldr	r5, [sp, #20]
 801c6d8:	465f      	mov	r7, fp
 801c6da:	46ac      	mov	ip, r5
 801c6dc:	1864      	adds	r4, r4, r1
 801c6de:	9903      	ldr	r1, [sp, #12]
 801c6e0:	0064      	lsls	r4, r4, #1
 801c6e2:	4461      	add	r1, ip
 801c6e4:	607c      	str	r4, [r7, #4]
 801c6e6:	000c      	movs	r4, r1
 801c6e8:	17c9      	asrs	r1, r1, #31
 801c6ea:	9105      	str	r1, [sp, #20]
 801c6ec:	9902      	ldr	r1, [sp, #8]
 801c6ee:	9804      	ldr	r0, [sp, #16]
 801c6f0:	680d      	ldr	r5, [r1, #0]
 801c6f2:	9e06      	ldr	r6, [sp, #24]
 801c6f4:	002b      	movs	r3, r5
 801c6f6:	17ed      	asrs	r5, r5, #31
 801c6f8:	684f      	ldr	r7, [r1, #4]
 801c6fa:	9503      	str	r5, [sp, #12]
 801c6fc:	1b85      	subs	r5, r0, r6
 801c6fe:	17e8      	asrs	r0, r5, #31
 801c700:	001a      	movs	r2, r3
 801c702:	9006      	str	r0, [sp, #24]
 801c704:	17fe      	asrs	r6, r7, #31
 801c706:	9304      	str	r3, [sp, #16]
 801c708:	0020      	movs	r0, r4
 801c70a:	9b03      	ldr	r3, [sp, #12]
 801c70c:	17e1      	asrs	r1, r4, #31
 801c70e:	9607      	str	r6, [sp, #28]
 801c710:	f7e3 ff56 	bl	80005c0 <__aeabi_lmul>
 801c714:	003a      	movs	r2, r7
 801c716:	000e      	movs	r6, r1
 801c718:	17fb      	asrs	r3, r7, #31
 801c71a:	0028      	movs	r0, r5
 801c71c:	17e9      	asrs	r1, r5, #31
 801c71e:	f7e3 ff4f 	bl	80005c0 <__aeabi_lmul>
 801c722:	4640      	mov	r0, r8
 801c724:	1a76      	subs	r6, r6, r1
 801c726:	0076      	lsls	r6, r6, #1
 801c728:	002a      	movs	r2, r5
 801c72a:	9b06      	ldr	r3, [sp, #24]
 801c72c:	6006      	str	r6, [r0, #0]
 801c72e:	9903      	ldr	r1, [sp, #12]
 801c730:	9804      	ldr	r0, [sp, #16]
 801c732:	f7e3 ff45 	bl	80005c0 <__aeabi_lmul>
 801c736:	0020      	movs	r0, r4
 801c738:	2408      	movs	r4, #8
 801c73a:	9b07      	ldr	r3, [sp, #28]
 801c73c:	000d      	movs	r5, r1
 801c73e:	003a      	movs	r2, r7
 801c740:	9905      	ldr	r1, [sp, #20]
 801c742:	f7e3 ff3d 	bl	80005c0 <__aeabi_lmul>
 801c746:	4640      	mov	r0, r8
 801c748:	46a4      	mov	ip, r4
 801c74a:	186d      	adds	r5, r5, r1
 801c74c:	006d      	lsls	r5, r5, #1
 801c74e:	6045      	str	r5, [r0, #4]
 801c750:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c752:	44e1      	add	r9, ip
 801c754:	3801      	subs	r0, #1
 801c756:	9009      	str	r0, [sp, #36]	@ 0x24
 801c758:	9a01      	ldr	r2, [sp, #4]
 801c75a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c75c:	44e2      	add	sl, ip
 801c75e:	44e3      	add	fp, ip
 801c760:	44e0      	add	r8, ip
 801c762:	46a4      	mov	ip, r4
 801c764:	4462      	add	r2, ip
 801c766:	9201      	str	r2, [sp, #4]
 801c768:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c76a:	9b00      	ldr	r3, [sp, #0]
 801c76c:	4694      	mov	ip, r2
 801c76e:	4463      	add	r3, ip
 801c770:	9300      	str	r3, [sp, #0]
 801c772:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c774:	9902      	ldr	r1, [sp, #8]
 801c776:	469c      	mov	ip, r3
 801c778:	4461      	add	r1, ip
 801c77a:	9102      	str	r1, [sp, #8]
 801c77c:	2800      	cmp	r0, #0
 801c77e:	d000      	beq.n	801c782 <arm_radix4_butterfly_inverse_q31+0x22e>
 801c780:	e70f      	b.n	801c5a2 <arm_radix4_butterfly_inverse_q31+0x4e>
 801c782:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c784:	009b      	lsls	r3, r3, #2
 801c786:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c788:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c78a:	9320      	str	r3, [sp, #128]	@ 0x80
 801c78c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c78e:	2b04      	cmp	r3, #4
 801c790:	d800      	bhi.n	801c794 <arm_radix4_butterfly_inverse_q31+0x240>
 801c792:	e17c      	b.n	801ca8e <arm_radix4_butterfly_inverse_q31+0x53a>
 801c794:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c796:	0893      	lsrs	r3, r2, #2
 801c798:	1e59      	subs	r1, r3, #1
 801c79a:	9321      	str	r3, [sp, #132]	@ 0x84
 801c79c:	00db      	lsls	r3, r3, #3
 801c79e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c7a0:	00d3      	lsls	r3, r2, #3
 801c7a2:	9300      	str	r3, [sp, #0]
 801c7a4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c7a6:	911a      	str	r1, [sp, #104]	@ 0x68
 801c7a8:	00da      	lsls	r2, r3, #3
 801c7aa:	921e      	str	r2, [sp, #120]	@ 0x78
 801c7ac:	011a      	lsls	r2, r3, #4
 801c7ae:	921d      	str	r2, [sp, #116]	@ 0x74
 801c7b0:	001a      	movs	r2, r3
 801c7b2:	4694      	mov	ip, r2
 801c7b4:	005b      	lsls	r3, r3, #1
 801c7b6:	4463      	add	r3, ip
 801c7b8:	00db      	lsls	r3, r3, #3
 801c7ba:	931c      	str	r3, [sp, #112]	@ 0x70
 801c7bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c7be:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c7c0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c7c2:	9318      	str	r3, [sp, #96]	@ 0x60
 801c7c4:	9319      	str	r3, [sp, #100]	@ 0x64
 801c7c6:	9316      	str	r3, [sp, #88]	@ 0x58
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	9315      	str	r3, [sp, #84]	@ 0x54
 801c7cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c7ce:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c7d0:	681a      	ldr	r2, [r3, #0]
 801c7d2:	685b      	ldr	r3, [r3, #4]
 801c7d4:	9205      	str	r2, [sp, #20]
 801c7d6:	9306      	str	r3, [sp, #24]
 801c7d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c7da:	468c      	mov	ip, r1
 801c7dc:	681a      	ldr	r2, [r3, #0]
 801c7de:	685b      	ldr	r3, [r3, #4]
 801c7e0:	9207      	str	r2, [sp, #28]
 801c7e2:	9308      	str	r3, [sp, #32]
 801c7e4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c7e6:	681a      	ldr	r2, [r3, #0]
 801c7e8:	685b      	ldr	r3, [r3, #4]
 801c7ea:	9209      	str	r2, [sp, #36]	@ 0x24
 801c7ec:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801c7f0:	0013      	movs	r3, r2
 801c7f2:	4463      	add	r3, ip
 801c7f4:	4698      	mov	r8, r3
 801c7f6:	0013      	movs	r3, r2
 801c7f8:	4442      	add	r2, r8
 801c7fa:	4691      	mov	r9, r2
 801c7fc:	001a      	movs	r2, r3
 801c7fe:	444a      	add	r2, r9
 801c800:	4692      	mov	sl, r2
 801c802:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c804:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c806:	4293      	cmp	r3, r2
 801c808:	d800      	bhi.n	801c80c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801c80a:	e0d9      	b.n	801c9c0 <arm_radix4_butterfly_inverse_q31+0x46c>
 801c80c:	4694      	mov	ip, r2
 801c80e:	4644      	mov	r4, r8
 801c810:	4655      	mov	r5, sl
 801c812:	4688      	mov	r8, r1
 801c814:	9b07      	ldr	r3, [sp, #28]
 801c816:	17db      	asrs	r3, r3, #31
 801c818:	930c      	str	r3, [sp, #48]	@ 0x30
 801c81a:	9b08      	ldr	r3, [sp, #32]
 801c81c:	17db      	asrs	r3, r3, #31
 801c81e:	930d      	str	r3, [sp, #52]	@ 0x34
 801c820:	9b05      	ldr	r3, [sp, #20]
 801c822:	17db      	asrs	r3, r3, #31
 801c824:	930e      	str	r3, [sp, #56]	@ 0x38
 801c826:	9b06      	ldr	r3, [sp, #24]
 801c828:	17db      	asrs	r3, r3, #31
 801c82a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c82c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c82e:	17db      	asrs	r3, r3, #31
 801c830:	9310      	str	r3, [sp, #64]	@ 0x40
 801c832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c834:	17db      	asrs	r3, r3, #31
 801c836:	9311      	str	r3, [sp, #68]	@ 0x44
 801c838:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c83a:	4463      	add	r3, ip
 801c83c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c83e:	4643      	mov	r3, r8
 801c840:	4641      	mov	r1, r8
 801c842:	681a      	ldr	r2, [r3, #0]
 801c844:	464b      	mov	r3, r9
 801c846:	684f      	ldr	r7, [r1, #4]
 801c848:	4649      	mov	r1, r9
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	18d6      	adds	r6, r2, r3
 801c84e:	1ad3      	subs	r3, r2, r3
 801c850:	9301      	str	r3, [sp, #4]
 801c852:	684b      	ldr	r3, [r1, #4]
 801c854:	1af9      	subs	r1, r7, r3
 801c856:	9102      	str	r1, [sp, #8]
 801c858:	6829      	ldr	r1, [r5, #0]
 801c85a:	18f8      	adds	r0, r7, r3
 801c85c:	468c      	mov	ip, r1
 801c85e:	6827      	ldr	r7, [r4, #0]
 801c860:	4467      	add	r7, ip
 801c862:	003a      	movs	r2, r7
 801c864:	19f3      	adds	r3, r6, r7
 801c866:	4647      	mov	r7, r8
 801c868:	109b      	asrs	r3, r3, #2
 801c86a:	603b      	str	r3, [r7, #0]
 801c86c:	6869      	ldr	r1, [r5, #4]
 801c86e:	6867      	ldr	r7, [r4, #4]
 801c870:	468c      	mov	ip, r1
 801c872:	4467      	add	r7, ip
 801c874:	003b      	movs	r3, r7
 801c876:	19c1      	adds	r1, r0, r7
 801c878:	4647      	mov	r7, r8
 801c87a:	1ab6      	subs	r6, r6, r2
 801c87c:	1089      	asrs	r1, r1, #2
 801c87e:	6079      	str	r1, [r7, #4]
 801c880:	17f2      	asrs	r2, r6, #31
 801c882:	9900      	ldr	r1, [sp, #0]
 801c884:	4692      	mov	sl, r2
 801c886:	468c      	mov	ip, r1
 801c888:	6867      	ldr	r7, [r4, #4]
 801c88a:	6869      	ldr	r1, [r5, #4]
 801c88c:	44e0      	add	r8, ip
 801c88e:	1a7f      	subs	r7, r7, r1
 801c890:	9703      	str	r7, [sp, #12]
 801c892:	6821      	ldr	r1, [r4, #0]
 801c894:	682f      	ldr	r7, [r5, #0]
 801c896:	1bc9      	subs	r1, r1, r7
 801c898:	1ac7      	subs	r7, r0, r3
 801c89a:	17fa      	asrs	r2, r7, #31
 801c89c:	4693      	mov	fp, r2
 801c89e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8a0:	9a07      	ldr	r2, [sp, #28]
 801c8a2:	9104      	str	r1, [sp, #16]
 801c8a4:	0030      	movs	r0, r6
 801c8a6:	4651      	mov	r1, sl
 801c8a8:	f7e3 fe8a 	bl	80005c0 <__aeabi_lmul>
 801c8ac:	9a08      	ldr	r2, [sp, #32]
 801c8ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8b0:	9112      	str	r1, [sp, #72]	@ 0x48
 801c8b2:	0038      	movs	r0, r7
 801c8b4:	4659      	mov	r1, fp
 801c8b6:	f7e3 fe83 	bl	80005c0 <__aeabi_lmul>
 801c8ba:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c8bc:	9a07      	ldr	r2, [sp, #28]
 801c8be:	1a41      	subs	r1, r0, r1
 801c8c0:	1049      	asrs	r1, r1, #1
 801c8c2:	6021      	str	r1, [r4, #0]
 801c8c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8c6:	0038      	movs	r0, r7
 801c8c8:	4659      	mov	r1, fp
 801c8ca:	f7e3 fe79 	bl	80005c0 <__aeabi_lmul>
 801c8ce:	9a08      	ldr	r2, [sp, #32]
 801c8d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8d2:	000f      	movs	r7, r1
 801c8d4:	0030      	movs	r0, r6
 801c8d6:	4651      	mov	r1, sl
 801c8d8:	f7e3 fe72 	bl	80005c0 <__aeabi_lmul>
 801c8dc:	9b00      	ldr	r3, [sp, #0]
 801c8de:	187f      	adds	r7, r7, r1
 801c8e0:	469c      	mov	ip, r3
 801c8e2:	107f      	asrs	r7, r7, #1
 801c8e4:	6067      	str	r7, [r4, #4]
 801c8e6:	9a01      	ldr	r2, [sp, #4]
 801c8e8:	9f03      	ldr	r7, [sp, #12]
 801c8ea:	9802      	ldr	r0, [sp, #8]
 801c8ec:	1bd7      	subs	r7, r2, r7
 801c8ee:	17fe      	asrs	r6, r7, #31
 801c8f0:	0031      	movs	r1, r6
 801c8f2:	9e04      	ldr	r6, [sp, #16]
 801c8f4:	4682      	mov	sl, r0
 801c8f6:	4464      	add	r4, ip
 801c8f8:	46b4      	mov	ip, r6
 801c8fa:	44e2      	add	sl, ip
 801c8fc:	4652      	mov	r2, sl
 801c8fe:	17d2      	asrs	r2, r2, #31
 801c900:	4693      	mov	fp, r2
 801c902:	0038      	movs	r0, r7
 801c904:	9a05      	ldr	r2, [sp, #20]
 801c906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c908:	9112      	str	r1, [sp, #72]	@ 0x48
 801c90a:	f7e3 fe59 	bl	80005c0 <__aeabi_lmul>
 801c90e:	9a06      	ldr	r2, [sp, #24]
 801c910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c912:	000e      	movs	r6, r1
 801c914:	4650      	mov	r0, sl
 801c916:	4659      	mov	r1, fp
 801c918:	f7e3 fe52 	bl	80005c0 <__aeabi_lmul>
 801c91c:	4648      	mov	r0, r9
 801c91e:	1a76      	subs	r6, r6, r1
 801c920:	1076      	asrs	r6, r6, #1
 801c922:	6006      	str	r6, [r0, #0]
 801c924:	9a05      	ldr	r2, [sp, #20]
 801c926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c928:	4650      	mov	r0, sl
 801c92a:	4659      	mov	r1, fp
 801c92c:	f7e3 fe48 	bl	80005c0 <__aeabi_lmul>
 801c930:	9a06      	ldr	r2, [sp, #24]
 801c932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c934:	000e      	movs	r6, r1
 801c936:	0038      	movs	r0, r7
 801c938:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c93a:	f7e3 fe41 	bl	80005c0 <__aeabi_lmul>
 801c93e:	9a00      	ldr	r2, [sp, #0]
 801c940:	9f03      	ldr	r7, [sp, #12]
 801c942:	4694      	mov	ip, r2
 801c944:	1876      	adds	r6, r6, r1
 801c946:	4649      	mov	r1, r9
 801c948:	44e1      	add	r9, ip
 801c94a:	46bc      	mov	ip, r7
 801c94c:	9b01      	ldr	r3, [sp, #4]
 801c94e:	1076      	asrs	r6, r6, #1
 801c950:	4463      	add	r3, ip
 801c952:	17df      	asrs	r7, r3, #31
 801c954:	604e      	str	r6, [r1, #4]
 801c956:	46ba      	mov	sl, r7
 801c958:	001e      	movs	r6, r3
 801c95a:	9802      	ldr	r0, [sp, #8]
 801c95c:	9b04      	ldr	r3, [sp, #16]
 801c95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c960:	1ac7      	subs	r7, r0, r3
 801c962:	17fb      	asrs	r3, r7, #31
 801c964:	469b      	mov	fp, r3
 801c966:	0030      	movs	r0, r6
 801c968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c96a:	4651      	mov	r1, sl
 801c96c:	f7e3 fe28 	bl	80005c0 <__aeabi_lmul>
 801c970:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c972:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c974:	9101      	str	r1, [sp, #4]
 801c976:	0038      	movs	r0, r7
 801c978:	4659      	mov	r1, fp
 801c97a:	f7e3 fe21 	bl	80005c0 <__aeabi_lmul>
 801c97e:	9801      	ldr	r0, [sp, #4]
 801c980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c982:	1a41      	subs	r1, r0, r1
 801c984:	1049      	asrs	r1, r1, #1
 801c986:	6029      	str	r1, [r5, #0]
 801c988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c98a:	0038      	movs	r0, r7
 801c98c:	4659      	mov	r1, fp
 801c98e:	f7e3 fe17 	bl	80005c0 <__aeabi_lmul>
 801c992:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c994:	000f      	movs	r7, r1
 801c996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c998:	0030      	movs	r0, r6
 801c99a:	4651      	mov	r1, sl
 801c99c:	f7e3 fe10 	bl	80005c0 <__aeabi_lmul>
 801c9a0:	187f      	adds	r7, r7, r1
 801c9a2:	107f      	asrs	r7, r7, #1
 801c9a4:	606f      	str	r7, [r5, #4]
 801c9a6:	9a00      	ldr	r2, [sp, #0]
 801c9a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c9aa:	4694      	mov	ip, r2
 801c9ac:	4465      	add	r5, ip
 801c9ae:	468c      	mov	ip, r1
 801c9b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c9b2:	0013      	movs	r3, r2
 801c9b4:	4462      	add	r2, ip
 801c9b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c9b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d900      	bls.n	801c9c0 <arm_radix4_butterfly_inverse_q31+0x46c>
 801c9be:	e73e      	b.n	801c83e <arm_radix4_butterfly_inverse_q31+0x2ea>
 801c9c0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801c9c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c9c4:	468c      	mov	ip, r1
 801c9c6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801c9c8:	4462      	add	r2, ip
 801c9ca:	468c      	mov	ip, r1
 801c9cc:	9216      	str	r2, [sp, #88]	@ 0x58
 801c9ce:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801c9d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c9d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c9d4:	4462      	add	r2, ip
 801c9d6:	468c      	mov	ip, r1
 801c9d8:	9219      	str	r2, [sp, #100]	@ 0x64
 801c9da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c9dc:	3301      	adds	r3, #1
 801c9de:	4462      	add	r2, ip
 801c9e0:	9218      	str	r2, [sp, #96]	@ 0x60
 801c9e2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801c9e4:	9315      	str	r3, [sp, #84]	@ 0x54
 801c9e6:	3208      	adds	r2, #8
 801c9e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c9ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c9ec:	4293      	cmp	r3, r2
 801c9ee:	d800      	bhi.n	801c9f2 <arm_radix4_butterfly_inverse_q31+0x49e>
 801c9f0:	e6ec      	b.n	801c7cc <arm_radix4_butterfly_inverse_q31+0x278>
 801c9f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c9f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c9f6:	009b      	lsls	r3, r3, #2
 801c9f8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c9fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c9fc:	9213      	str	r2, [sp, #76]	@ 0x4c
 801c9fe:	089b      	lsrs	r3, r3, #2
 801ca00:	9320      	str	r3, [sp, #128]	@ 0x80
 801ca02:	2b04      	cmp	r3, #4
 801ca04:	d900      	bls.n	801ca08 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801ca06:	e6c5      	b.n	801c794 <arm_radix4_butterfly_inverse_q31+0x240>
 801ca08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca0a:	469a      	mov	sl, r3
 801ca0c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ca0e:	681a      	ldr	r2, [r3, #0]
 801ca10:	6918      	ldr	r0, [r3, #16]
 801ca12:	4691      	mov	r9, r2
 801ca14:	464c      	mov	r4, r9
 801ca16:	4680      	mov	r8, r0
 801ca18:	69de      	ldr	r6, [r3, #28]
 801ca1a:	689d      	ldr	r5, [r3, #8]
 801ca1c:	46b4      	mov	ip, r6
 801ca1e:	6998      	ldr	r0, [r3, #24]
 801ca20:	1964      	adds	r4, r4, r5
 801ca22:	6859      	ldr	r1, [r3, #4]
 801ca24:	68da      	ldr	r2, [r3, #12]
 801ca26:	4444      	add	r4, r8
 801ca28:	695f      	ldr	r7, [r3, #20]
 801ca2a:	1824      	adds	r4, r4, r0
 801ca2c:	601c      	str	r4, [r3, #0]
 801ca2e:	188c      	adds	r4, r1, r2
 801ca30:	19e4      	adds	r4, r4, r7
 801ca32:	4464      	add	r4, ip
 801ca34:	605c      	str	r4, [r3, #4]
 801ca36:	464c      	mov	r4, r9
 801ca38:	1b64      	subs	r4, r4, r5
 801ca3a:	4444      	add	r4, r8
 801ca3c:	1a24      	subs	r4, r4, r0
 801ca3e:	609c      	str	r4, [r3, #8]
 801ca40:	1a8c      	subs	r4, r1, r2
 801ca42:	19e4      	adds	r4, r4, r7
 801ca44:	1ba4      	subs	r4, r4, r6
 801ca46:	60dc      	str	r4, [r3, #12]
 801ca48:	464c      	mov	r4, r9
 801ca4a:	4646      	mov	r6, r8
 801ca4c:	1aa4      	subs	r4, r4, r2
 801ca4e:	1ba4      	subs	r4, r4, r6
 801ca50:	4464      	add	r4, ip
 801ca52:	611c      	str	r4, [r3, #16]
 801ca54:	194c      	adds	r4, r1, r5
 801ca56:	1be4      	subs	r4, r4, r7
 801ca58:	1a24      	subs	r4, r4, r0
 801ca5a:	615c      	str	r4, [r3, #20]
 801ca5c:	4644      	mov	r4, r8
 801ca5e:	4666      	mov	r6, ip
 801ca60:	444a      	add	r2, r9
 801ca62:	1b12      	subs	r2, r2, r4
 801ca64:	1b92      	subs	r2, r2, r6
 801ca66:	619a      	str	r2, [r3, #24]
 801ca68:	1b4a      	subs	r2, r1, r5
 801ca6a:	1bd1      	subs	r1, r2, r7
 801ca6c:	2201      	movs	r2, #1
 801ca6e:	4252      	negs	r2, r2
 801ca70:	4694      	mov	ip, r2
 801ca72:	44e2      	add	sl, ip
 801ca74:	4652      	mov	r2, sl
 801ca76:	1809      	adds	r1, r1, r0
 801ca78:	61d9      	str	r1, [r3, #28]
 801ca7a:	3320      	adds	r3, #32
 801ca7c:	2a00      	cmp	r2, #0
 801ca7e:	d1c6      	bne.n	801ca0e <arm_radix4_butterfly_inverse_q31+0x4ba>
 801ca80:	b027      	add	sp, #156	@ 0x9c
 801ca82:	bc3c      	pop	{r2, r3, r4, r5}
 801ca84:	4690      	mov	r8, r2
 801ca86:	4699      	mov	r9, r3
 801ca88:	46a2      	mov	sl, r4
 801ca8a:	46ab      	mov	fp, r5
 801ca8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca8e:	469a      	mov	sl, r3
 801ca90:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ca92:	e7bc      	b.n	801ca0e <arm_radix4_butterfly_inverse_q31+0x4ba>

0801ca94 <arm_cmplx_mag_squared_q31>:
 801ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca96:	464f      	mov	r7, r9
 801ca98:	4646      	mov	r6, r8
 801ca9a:	0004      	movs	r4, r0
 801ca9c:	b4c0      	push	{r6, r7}
 801ca9e:	0016      	movs	r6, r2
 801caa0:	000f      	movs	r7, r1
 801caa2:	2a00      	cmp	r2, #0
 801caa4:	d018      	beq.n	801cad8 <arm_cmplx_mag_squared_q31+0x44>
 801caa6:	6823      	ldr	r3, [r4, #0]
 801caa8:	6822      	ldr	r2, [r4, #0]
 801caaa:	17d9      	asrs	r1, r3, #31
 801caac:	6863      	ldr	r3, [r4, #4]
 801caae:	0010      	movs	r0, r2
 801cab0:	4698      	mov	r8, r3
 801cab2:	17db      	asrs	r3, r3, #31
 801cab4:	4699      	mov	r9, r3
 801cab6:	000b      	movs	r3, r1
 801cab8:	f7e3 fd82 	bl	80005c0 <__aeabi_lmul>
 801cabc:	4642      	mov	r2, r8
 801cabe:	104d      	asrs	r5, r1, #1
 801cac0:	464b      	mov	r3, r9
 801cac2:	4640      	mov	r0, r8
 801cac4:	4649      	mov	r1, r9
 801cac6:	f7e3 fd7b 	bl	80005c0 <__aeabi_lmul>
 801caca:	1049      	asrs	r1, r1, #1
 801cacc:	1869      	adds	r1, r5, r1
 801cace:	3e01      	subs	r6, #1
 801cad0:	c702      	stmia	r7!, {r1}
 801cad2:	3408      	adds	r4, #8
 801cad4:	2e00      	cmp	r6, #0
 801cad6:	d1e6      	bne.n	801caa6 <arm_cmplx_mag_squared_q31+0x12>
 801cad8:	bc0c      	pop	{r2, r3}
 801cada:	4690      	mov	r8, r2
 801cadc:	4699      	mov	r9, r3
 801cade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cae0 <arm_mult_q31>:
 801cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cae2:	4646      	mov	r6, r8
 801cae4:	464f      	mov	r7, r9
 801cae6:	4690      	mov	r8, r2
 801cae8:	b4c0      	push	{r6, r7}
 801caea:	001d      	movs	r5, r3
 801caec:	0006      	movs	r6, r0
 801caee:	000f      	movs	r7, r1
 801caf0:	2400      	movs	r4, #0
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	d020      	beq.n	801cb38 <arm_mult_q31+0x58>
 801caf6:	4b12      	ldr	r3, [pc, #72]	@ (801cb40 <arm_mult_q31+0x60>)
 801caf8:	4699      	mov	r9, r3
 801cafa:	e007      	b.n	801cb0c <arm_mult_q31+0x2c>
 801cafc:	464b      	mov	r3, r9
 801cafe:	4059      	eors	r1, r3
 801cb00:	4643      	mov	r3, r8
 801cb02:	3d01      	subs	r5, #1
 801cb04:	5119      	str	r1, [r3, r4]
 801cb06:	3404      	adds	r4, #4
 801cb08:	2d00      	cmp	r5, #0
 801cb0a:	d015      	beq.n	801cb38 <arm_mult_q31+0x58>
 801cb0c:	5933      	ldr	r3, [r6, r4]
 801cb0e:	593a      	ldr	r2, [r7, r4]
 801cb10:	17d9      	asrs	r1, r3, #31
 801cb12:	593b      	ldr	r3, [r7, r4]
 801cb14:	5930      	ldr	r0, [r6, r4]
 801cb16:	17db      	asrs	r3, r3, #31
 801cb18:	f7e3 fd52 	bl	80005c0 <__aeabi_lmul>
 801cb1c:	004b      	lsls	r3, r1, #1
 801cb1e:	0fc0      	lsrs	r0, r0, #31
 801cb20:	4318      	orrs	r0, r3
 801cb22:	17c9      	asrs	r1, r1, #31
 801cb24:	17c3      	asrs	r3, r0, #31
 801cb26:	428b      	cmp	r3, r1
 801cb28:	d1e8      	bne.n	801cafc <arm_mult_q31+0x1c>
 801cb2a:	0001      	movs	r1, r0
 801cb2c:	4643      	mov	r3, r8
 801cb2e:	3d01      	subs	r5, #1
 801cb30:	5119      	str	r1, [r3, r4]
 801cb32:	3404      	adds	r4, #4
 801cb34:	2d00      	cmp	r5, #0
 801cb36:	d1e9      	bne.n	801cb0c <arm_mult_q31+0x2c>
 801cb38:	bc0c      	pop	{r2, r3}
 801cb3a:	4690      	mov	r8, r2
 801cb3c:	4699      	mov	r9, r3
 801cb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb40:	7fffffff 	.word	0x7fffffff

0801cb44 <arm_add_q31>:
 801cb44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb46:	465f      	mov	r7, fp
 801cb48:	4656      	mov	r6, sl
 801cb4a:	464d      	mov	r5, r9
 801cb4c:	4644      	mov	r4, r8
 801cb4e:	b4f0      	push	{r4, r5, r6, r7}
 801cb50:	4693      	mov	fp, r2
 801cb52:	b083      	sub	sp, #12
 801cb54:	4681      	mov	r9, r0
 801cb56:	468a      	mov	sl, r1
 801cb58:	4698      	mov	r8, r3
 801cb5a:	2200      	movs	r2, #0
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d020      	beq.n	801cba2 <arm_add_q31+0x5e>
 801cb60:	4649      	mov	r1, r9
 801cb62:	4653      	mov	r3, sl
 801cb64:	588e      	ldr	r6, [r1, r2]
 801cb66:	589b      	ldr	r3, [r3, r2]
 801cb68:	17f7      	asrs	r7, r6, #31
 801cb6a:	001c      	movs	r4, r3
 801cb6c:	0030      	movs	r0, r6
 801cb6e:	0039      	movs	r1, r7
 801cb70:	17dd      	asrs	r5, r3, #31
 801cb72:	46b4      	mov	ip, r6
 801cb74:	1900      	adds	r0, r0, r4
 801cb76:	4169      	adcs	r1, r5
 801cb78:	4463      	add	r3, ip
 801cb7a:	9000      	str	r0, [sp, #0]
 801cb7c:	9101      	str	r1, [sp, #4]
 801cb7e:	17d9      	asrs	r1, r3, #31
 801cb80:	468c      	mov	ip, r1
 801cb82:	9901      	ldr	r1, [sp, #4]
 801cb84:	458c      	cmp	ip, r1
 801cb86:	d002      	beq.n	801cb8e <arm_add_q31+0x4a>
 801cb88:	17cb      	asrs	r3, r1, #31
 801cb8a:	4909      	ldr	r1, [pc, #36]	@ (801cbb0 <arm_add_q31+0x6c>)
 801cb8c:	404b      	eors	r3, r1
 801cb8e:	4659      	mov	r1, fp
 801cb90:	508b      	str	r3, [r1, r2]
 801cb92:	2301      	movs	r3, #1
 801cb94:	425b      	negs	r3, r3
 801cb96:	469c      	mov	ip, r3
 801cb98:	44e0      	add	r8, ip
 801cb9a:	4643      	mov	r3, r8
 801cb9c:	3204      	adds	r2, #4
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d1de      	bne.n	801cb60 <arm_add_q31+0x1c>
 801cba2:	b003      	add	sp, #12
 801cba4:	bc3c      	pop	{r2, r3, r4, r5}
 801cba6:	4690      	mov	r8, r2
 801cba8:	4699      	mov	r9, r3
 801cbaa:	46a2      	mov	sl, r4
 801cbac:	46ab      	mov	fp, r5
 801cbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbb0:	7fffffff 	.word	0x7fffffff

0801cbb4 <atof>:
 801cbb4:	b510      	push	{r4, lr}
 801cbb6:	2100      	movs	r1, #0
 801cbb8:	f000 fe12 	bl	801d7e0 <strtod>
 801cbbc:	bd10      	pop	{r4, pc}

0801cbbe <atoi>:
 801cbbe:	b510      	push	{r4, lr}
 801cbc0:	220a      	movs	r2, #10
 801cbc2:	2100      	movs	r1, #0
 801cbc4:	f000 fea4 	bl	801d910 <strtol>
 801cbc8:	bd10      	pop	{r4, pc}
	...

0801cbcc <sulp>:
 801cbcc:	b570      	push	{r4, r5, r6, lr}
 801cbce:	0016      	movs	r6, r2
 801cbd0:	000d      	movs	r5, r1
 801cbd2:	f003 fcf3 	bl	80205bc <__ulp>
 801cbd6:	2e00      	cmp	r6, #0
 801cbd8:	d00d      	beq.n	801cbf6 <sulp+0x2a>
 801cbda:	236b      	movs	r3, #107	@ 0x6b
 801cbdc:	006a      	lsls	r2, r5, #1
 801cbde:	0d52      	lsrs	r2, r2, #21
 801cbe0:	1a9b      	subs	r3, r3, r2
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	dd07      	ble.n	801cbf6 <sulp+0x2a>
 801cbe6:	2400      	movs	r4, #0
 801cbe8:	4a03      	ldr	r2, [pc, #12]	@ (801cbf8 <sulp+0x2c>)
 801cbea:	051b      	lsls	r3, r3, #20
 801cbec:	189d      	adds	r5, r3, r2
 801cbee:	002b      	movs	r3, r5
 801cbf0:	0022      	movs	r2, r4
 801cbf2:	f7e5 fd23 	bl	800263c <__aeabi_dmul>
 801cbf6:	bd70      	pop	{r4, r5, r6, pc}
 801cbf8:	3ff00000 	.word	0x3ff00000

0801cbfc <_strtod_l>:
 801cbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbfe:	b0a3      	sub	sp, #140	@ 0x8c
 801cc00:	921b      	str	r2, [sp, #108]	@ 0x6c
 801cc02:	2200      	movs	r2, #0
 801cc04:	2600      	movs	r6, #0
 801cc06:	2700      	movs	r7, #0
 801cc08:	9005      	str	r0, [sp, #20]
 801cc0a:	9109      	str	r1, [sp, #36]	@ 0x24
 801cc0c:	921e      	str	r2, [sp, #120]	@ 0x78
 801cc0e:	911d      	str	r1, [sp, #116]	@ 0x74
 801cc10:	780a      	ldrb	r2, [r1, #0]
 801cc12:	2a2b      	cmp	r2, #43	@ 0x2b
 801cc14:	d053      	beq.n	801ccbe <_strtod_l+0xc2>
 801cc16:	d83f      	bhi.n	801cc98 <_strtod_l+0x9c>
 801cc18:	2a0d      	cmp	r2, #13
 801cc1a:	d839      	bhi.n	801cc90 <_strtod_l+0x94>
 801cc1c:	2a08      	cmp	r2, #8
 801cc1e:	d839      	bhi.n	801cc94 <_strtod_l+0x98>
 801cc20:	2a00      	cmp	r2, #0
 801cc22:	d042      	beq.n	801ccaa <_strtod_l+0xae>
 801cc24:	2200      	movs	r2, #0
 801cc26:	9212      	str	r2, [sp, #72]	@ 0x48
 801cc28:	2100      	movs	r1, #0
 801cc2a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801cc2c:	910c      	str	r1, [sp, #48]	@ 0x30
 801cc2e:	782a      	ldrb	r2, [r5, #0]
 801cc30:	2a30      	cmp	r2, #48	@ 0x30
 801cc32:	d000      	beq.n	801cc36 <_strtod_l+0x3a>
 801cc34:	e083      	b.n	801cd3e <_strtod_l+0x142>
 801cc36:	786a      	ldrb	r2, [r5, #1]
 801cc38:	3120      	adds	r1, #32
 801cc3a:	438a      	bics	r2, r1
 801cc3c:	2a58      	cmp	r2, #88	@ 0x58
 801cc3e:	d000      	beq.n	801cc42 <_strtod_l+0x46>
 801cc40:	e073      	b.n	801cd2a <_strtod_l+0x12e>
 801cc42:	9302      	str	r3, [sp, #8]
 801cc44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cc46:	4a95      	ldr	r2, [pc, #596]	@ (801ce9c <_strtod_l+0x2a0>)
 801cc48:	9301      	str	r3, [sp, #4]
 801cc4a:	ab1e      	add	r3, sp, #120	@ 0x78
 801cc4c:	9300      	str	r3, [sp, #0]
 801cc4e:	9805      	ldr	r0, [sp, #20]
 801cc50:	ab1f      	add	r3, sp, #124	@ 0x7c
 801cc52:	a91d      	add	r1, sp, #116	@ 0x74
 801cc54:	f002 fd62 	bl	801f71c <__gethex>
 801cc58:	230f      	movs	r3, #15
 801cc5a:	0002      	movs	r2, r0
 801cc5c:	401a      	ands	r2, r3
 801cc5e:	0004      	movs	r4, r0
 801cc60:	9206      	str	r2, [sp, #24]
 801cc62:	4218      	tst	r0, r3
 801cc64:	d005      	beq.n	801cc72 <_strtod_l+0x76>
 801cc66:	2a06      	cmp	r2, #6
 801cc68:	d12b      	bne.n	801ccc2 <_strtod_l+0xc6>
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	3501      	adds	r5, #1
 801cc6e:	951d      	str	r5, [sp, #116]	@ 0x74
 801cc70:	9312      	str	r3, [sp, #72]	@ 0x48
 801cc72:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d002      	beq.n	801cc7e <_strtod_l+0x82>
 801cc78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cc7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801cc7c:	6013      	str	r3, [r2, #0]
 801cc7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d019      	beq.n	801ccb8 <_strtod_l+0xbc>
 801cc84:	2380      	movs	r3, #128	@ 0x80
 801cc86:	0030      	movs	r0, r6
 801cc88:	061b      	lsls	r3, r3, #24
 801cc8a:	18f9      	adds	r1, r7, r3
 801cc8c:	b023      	add	sp, #140	@ 0x8c
 801cc8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc90:	2a20      	cmp	r2, #32
 801cc92:	d1c7      	bne.n	801cc24 <_strtod_l+0x28>
 801cc94:	3101      	adds	r1, #1
 801cc96:	e7ba      	b.n	801cc0e <_strtod_l+0x12>
 801cc98:	2a2d      	cmp	r2, #45	@ 0x2d
 801cc9a:	d1c3      	bne.n	801cc24 <_strtod_l+0x28>
 801cc9c:	3a2c      	subs	r2, #44	@ 0x2c
 801cc9e:	9212      	str	r2, [sp, #72]	@ 0x48
 801cca0:	1c4a      	adds	r2, r1, #1
 801cca2:	921d      	str	r2, [sp, #116]	@ 0x74
 801cca4:	784a      	ldrb	r2, [r1, #1]
 801cca6:	2a00      	cmp	r2, #0
 801cca8:	d1be      	bne.n	801cc28 <_strtod_l+0x2c>
 801ccaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccac:	931d      	str	r3, [sp, #116]	@ 0x74
 801ccae:	2300      	movs	r3, #0
 801ccb0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ccb2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d1df      	bne.n	801cc78 <_strtod_l+0x7c>
 801ccb8:	0030      	movs	r0, r6
 801ccba:	0039      	movs	r1, r7
 801ccbc:	e7e6      	b.n	801cc8c <_strtod_l+0x90>
 801ccbe:	2200      	movs	r2, #0
 801ccc0:	e7ed      	b.n	801cc9e <_strtod_l+0xa2>
 801ccc2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ccc4:	2a00      	cmp	r2, #0
 801ccc6:	d007      	beq.n	801ccd8 <_strtod_l+0xdc>
 801ccc8:	2135      	movs	r1, #53	@ 0x35
 801ccca:	a820      	add	r0, sp, #128	@ 0x80
 801cccc:	f003 fd6c 	bl	80207a8 <__copybits>
 801ccd0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ccd2:	9805      	ldr	r0, [sp, #20]
 801ccd4:	f003 f926 	bl	801ff24 <_Bfree>
 801ccd8:	9806      	ldr	r0, [sp, #24]
 801ccda:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ccdc:	3801      	subs	r0, #1
 801ccde:	2804      	cmp	r0, #4
 801cce0:	d806      	bhi.n	801ccf0 <_strtod_l+0xf4>
 801cce2:	f7e3 fa4b 	bl	800017c <__gnu_thumb1_case_uqi>
 801cce6:	0312      	.short	0x0312
 801cce8:	1e1c      	.short	0x1e1c
 801ccea:	12          	.byte	0x12
 801cceb:	00          	.byte	0x00
 801ccec:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ccee:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ccf0:	05e4      	lsls	r4, r4, #23
 801ccf2:	d502      	bpl.n	801ccfa <_strtod_l+0xfe>
 801ccf4:	2380      	movs	r3, #128	@ 0x80
 801ccf6:	061b      	lsls	r3, r3, #24
 801ccf8:	431f      	orrs	r7, r3
 801ccfa:	4b69      	ldr	r3, [pc, #420]	@ (801cea0 <_strtod_l+0x2a4>)
 801ccfc:	423b      	tst	r3, r7
 801ccfe:	d1b8      	bne.n	801cc72 <_strtod_l+0x76>
 801cd00:	f001 fd90 	bl	801e824 <__errno>
 801cd04:	2322      	movs	r3, #34	@ 0x22
 801cd06:	6003      	str	r3, [r0, #0]
 801cd08:	e7b3      	b.n	801cc72 <_strtod_l+0x76>
 801cd0a:	4966      	ldr	r1, [pc, #408]	@ (801cea4 <_strtod_l+0x2a8>)
 801cd0c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801cd0e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cd10:	400a      	ands	r2, r1
 801cd12:	4965      	ldr	r1, [pc, #404]	@ (801cea8 <_strtod_l+0x2ac>)
 801cd14:	185b      	adds	r3, r3, r1
 801cd16:	051b      	lsls	r3, r3, #20
 801cd18:	431a      	orrs	r2, r3
 801cd1a:	0017      	movs	r7, r2
 801cd1c:	e7e8      	b.n	801ccf0 <_strtod_l+0xf4>
 801cd1e:	4f60      	ldr	r7, [pc, #384]	@ (801cea0 <_strtod_l+0x2a4>)
 801cd20:	e7e6      	b.n	801ccf0 <_strtod_l+0xf4>
 801cd22:	2601      	movs	r6, #1
 801cd24:	4f61      	ldr	r7, [pc, #388]	@ (801ceac <_strtod_l+0x2b0>)
 801cd26:	4276      	negs	r6, r6
 801cd28:	e7e2      	b.n	801ccf0 <_strtod_l+0xf4>
 801cd2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cd2c:	1c5a      	adds	r2, r3, #1
 801cd2e:	921d      	str	r2, [sp, #116]	@ 0x74
 801cd30:	785b      	ldrb	r3, [r3, #1]
 801cd32:	2b30      	cmp	r3, #48	@ 0x30
 801cd34:	d0f9      	beq.n	801cd2a <_strtod_l+0x12e>
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d09b      	beq.n	801cc72 <_strtod_l+0x76>
 801cd3a:	2301      	movs	r3, #1
 801cd3c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cd3e:	2500      	movs	r5, #0
 801cd40:	220a      	movs	r2, #10
 801cd42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cd44:	950d      	str	r5, [sp, #52]	@ 0x34
 801cd46:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cd48:	9508      	str	r5, [sp, #32]
 801cd4a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801cd4c:	7804      	ldrb	r4, [r0, #0]
 801cd4e:	0023      	movs	r3, r4
 801cd50:	3b30      	subs	r3, #48	@ 0x30
 801cd52:	b2d9      	uxtb	r1, r3
 801cd54:	2909      	cmp	r1, #9
 801cd56:	d927      	bls.n	801cda8 <_strtod_l+0x1ac>
 801cd58:	2201      	movs	r2, #1
 801cd5a:	4955      	ldr	r1, [pc, #340]	@ (801ceb0 <_strtod_l+0x2b4>)
 801cd5c:	f001 fcd4 	bl	801e708 <strncmp>
 801cd60:	2800      	cmp	r0, #0
 801cd62:	d031      	beq.n	801cdc8 <_strtod_l+0x1cc>
 801cd64:	2000      	movs	r0, #0
 801cd66:	0023      	movs	r3, r4
 801cd68:	4684      	mov	ip, r0
 801cd6a:	9a08      	ldr	r2, [sp, #32]
 801cd6c:	900e      	str	r0, [sp, #56]	@ 0x38
 801cd6e:	9206      	str	r2, [sp, #24]
 801cd70:	2220      	movs	r2, #32
 801cd72:	0019      	movs	r1, r3
 801cd74:	4391      	bics	r1, r2
 801cd76:	000a      	movs	r2, r1
 801cd78:	2100      	movs	r1, #0
 801cd7a:	9107      	str	r1, [sp, #28]
 801cd7c:	2a45      	cmp	r2, #69	@ 0x45
 801cd7e:	d000      	beq.n	801cd82 <_strtod_l+0x186>
 801cd80:	e0c0      	b.n	801cf04 <_strtod_l+0x308>
 801cd82:	9b06      	ldr	r3, [sp, #24]
 801cd84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cd86:	4303      	orrs	r3, r0
 801cd88:	4313      	orrs	r3, r2
 801cd8a:	428b      	cmp	r3, r1
 801cd8c:	d08d      	beq.n	801ccaa <_strtod_l+0xae>
 801cd8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cd90:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd92:	3301      	adds	r3, #1
 801cd94:	931d      	str	r3, [sp, #116]	@ 0x74
 801cd96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd98:	785b      	ldrb	r3, [r3, #1]
 801cd9a:	2b2b      	cmp	r3, #43	@ 0x2b
 801cd9c:	d070      	beq.n	801ce80 <_strtod_l+0x284>
 801cd9e:	000c      	movs	r4, r1
 801cda0:	2b2d      	cmp	r3, #45	@ 0x2d
 801cda2:	d173      	bne.n	801ce8c <_strtod_l+0x290>
 801cda4:	2401      	movs	r4, #1
 801cda6:	e06c      	b.n	801ce82 <_strtod_l+0x286>
 801cda8:	9908      	ldr	r1, [sp, #32]
 801cdaa:	2908      	cmp	r1, #8
 801cdac:	dc09      	bgt.n	801cdc2 <_strtod_l+0x1c6>
 801cdae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801cdb0:	4351      	muls	r1, r2
 801cdb2:	185b      	adds	r3, r3, r1
 801cdb4:	930d      	str	r3, [sp, #52]	@ 0x34
 801cdb6:	9b08      	ldr	r3, [sp, #32]
 801cdb8:	3001      	adds	r0, #1
 801cdba:	3301      	adds	r3, #1
 801cdbc:	9308      	str	r3, [sp, #32]
 801cdbe:	901d      	str	r0, [sp, #116]	@ 0x74
 801cdc0:	e7c3      	b.n	801cd4a <_strtod_l+0x14e>
 801cdc2:	4355      	muls	r5, r2
 801cdc4:	195d      	adds	r5, r3, r5
 801cdc6:	e7f6      	b.n	801cdb6 <_strtod_l+0x1ba>
 801cdc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cdca:	1c5a      	adds	r2, r3, #1
 801cdcc:	921d      	str	r2, [sp, #116]	@ 0x74
 801cdce:	9a08      	ldr	r2, [sp, #32]
 801cdd0:	785b      	ldrb	r3, [r3, #1]
 801cdd2:	2a00      	cmp	r2, #0
 801cdd4:	d03a      	beq.n	801ce4c <_strtod_l+0x250>
 801cdd6:	900e      	str	r0, [sp, #56]	@ 0x38
 801cdd8:	9206      	str	r2, [sp, #24]
 801cdda:	001a      	movs	r2, r3
 801cddc:	3a30      	subs	r2, #48	@ 0x30
 801cdde:	2a09      	cmp	r2, #9
 801cde0:	d912      	bls.n	801ce08 <_strtod_l+0x20c>
 801cde2:	2201      	movs	r2, #1
 801cde4:	4694      	mov	ip, r2
 801cde6:	e7c3      	b.n	801cd70 <_strtod_l+0x174>
 801cde8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cdea:	3001      	adds	r0, #1
 801cdec:	1c5a      	adds	r2, r3, #1
 801cdee:	921d      	str	r2, [sp, #116]	@ 0x74
 801cdf0:	785b      	ldrb	r3, [r3, #1]
 801cdf2:	2b30      	cmp	r3, #48	@ 0x30
 801cdf4:	d0f8      	beq.n	801cde8 <_strtod_l+0x1ec>
 801cdf6:	001a      	movs	r2, r3
 801cdf8:	3a31      	subs	r2, #49	@ 0x31
 801cdfa:	2a08      	cmp	r2, #8
 801cdfc:	d83b      	bhi.n	801ce76 <_strtod_l+0x27a>
 801cdfe:	900e      	str	r0, [sp, #56]	@ 0x38
 801ce00:	2000      	movs	r0, #0
 801ce02:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ce04:	9006      	str	r0, [sp, #24]
 801ce06:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ce08:	001a      	movs	r2, r3
 801ce0a:	1c41      	adds	r1, r0, #1
 801ce0c:	3a30      	subs	r2, #48	@ 0x30
 801ce0e:	2b30      	cmp	r3, #48	@ 0x30
 801ce10:	d016      	beq.n	801ce40 <_strtod_l+0x244>
 801ce12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce14:	185b      	adds	r3, r3, r1
 801ce16:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce18:	9b06      	ldr	r3, [sp, #24]
 801ce1a:	210a      	movs	r1, #10
 801ce1c:	469c      	mov	ip, r3
 801ce1e:	4484      	add	ip, r0
 801ce20:	459c      	cmp	ip, r3
 801ce22:	d115      	bne.n	801ce50 <_strtod_l+0x254>
 801ce24:	9906      	ldr	r1, [sp, #24]
 801ce26:	9b06      	ldr	r3, [sp, #24]
 801ce28:	3101      	adds	r1, #1
 801ce2a:	1809      	adds	r1, r1, r0
 801ce2c:	181b      	adds	r3, r3, r0
 801ce2e:	9106      	str	r1, [sp, #24]
 801ce30:	2b08      	cmp	r3, #8
 801ce32:	dc19      	bgt.n	801ce68 <_strtod_l+0x26c>
 801ce34:	230a      	movs	r3, #10
 801ce36:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ce38:	434b      	muls	r3, r1
 801ce3a:	2100      	movs	r1, #0
 801ce3c:	18d3      	adds	r3, r2, r3
 801ce3e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ce40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ce42:	0008      	movs	r0, r1
 801ce44:	1c5a      	adds	r2, r3, #1
 801ce46:	921d      	str	r2, [sp, #116]	@ 0x74
 801ce48:	785b      	ldrb	r3, [r3, #1]
 801ce4a:	e7c6      	b.n	801cdda <_strtod_l+0x1de>
 801ce4c:	9808      	ldr	r0, [sp, #32]
 801ce4e:	e7d0      	b.n	801cdf2 <_strtod_l+0x1f6>
 801ce50:	1c5c      	adds	r4, r3, #1
 801ce52:	2b08      	cmp	r3, #8
 801ce54:	dc04      	bgt.n	801ce60 <_strtod_l+0x264>
 801ce56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce58:	434b      	muls	r3, r1
 801ce5a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ce5c:	0023      	movs	r3, r4
 801ce5e:	e7df      	b.n	801ce20 <_strtod_l+0x224>
 801ce60:	2c10      	cmp	r4, #16
 801ce62:	dcfb      	bgt.n	801ce5c <_strtod_l+0x260>
 801ce64:	434d      	muls	r5, r1
 801ce66:	e7f9      	b.n	801ce5c <_strtod_l+0x260>
 801ce68:	2100      	movs	r1, #0
 801ce6a:	2b0f      	cmp	r3, #15
 801ce6c:	dce8      	bgt.n	801ce40 <_strtod_l+0x244>
 801ce6e:	230a      	movs	r3, #10
 801ce70:	435d      	muls	r5, r3
 801ce72:	1955      	adds	r5, r2, r5
 801ce74:	e7e4      	b.n	801ce40 <_strtod_l+0x244>
 801ce76:	2200      	movs	r2, #0
 801ce78:	920e      	str	r2, [sp, #56]	@ 0x38
 801ce7a:	9206      	str	r2, [sp, #24]
 801ce7c:	3201      	adds	r2, #1
 801ce7e:	e7b1      	b.n	801cde4 <_strtod_l+0x1e8>
 801ce80:	2400      	movs	r4, #0
 801ce82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce84:	3302      	adds	r3, #2
 801ce86:	931d      	str	r3, [sp, #116]	@ 0x74
 801ce88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce8a:	789b      	ldrb	r3, [r3, #2]
 801ce8c:	001a      	movs	r2, r3
 801ce8e:	3a30      	subs	r2, #48	@ 0x30
 801ce90:	2a09      	cmp	r2, #9
 801ce92:	d913      	bls.n	801cebc <_strtod_l+0x2c0>
 801ce94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce96:	921d      	str	r2, [sp, #116]	@ 0x74
 801ce98:	2200      	movs	r2, #0
 801ce9a:	e032      	b.n	801cf02 <_strtod_l+0x306>
 801ce9c:	080238b4 	.word	0x080238b4
 801cea0:	7ff00000 	.word	0x7ff00000
 801cea4:	ffefffff 	.word	0xffefffff
 801cea8:	00000433 	.word	0x00000433
 801ceac:	7fffffff 	.word	0x7fffffff
 801ceb0:	0802389c 	.word	0x0802389c
 801ceb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ceb6:	1c5a      	adds	r2, r3, #1
 801ceb8:	921d      	str	r2, [sp, #116]	@ 0x74
 801ceba:	785b      	ldrb	r3, [r3, #1]
 801cebc:	2b30      	cmp	r3, #48	@ 0x30
 801cebe:	d0f9      	beq.n	801ceb4 <_strtod_l+0x2b8>
 801cec0:	2200      	movs	r2, #0
 801cec2:	9207      	str	r2, [sp, #28]
 801cec4:	001a      	movs	r2, r3
 801cec6:	3a31      	subs	r2, #49	@ 0x31
 801cec8:	2a08      	cmp	r2, #8
 801ceca:	d81b      	bhi.n	801cf04 <_strtod_l+0x308>
 801cecc:	3b30      	subs	r3, #48	@ 0x30
 801cece:	9310      	str	r3, [sp, #64]	@ 0x40
 801ced0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ced2:	9307      	str	r3, [sp, #28]
 801ced4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ced6:	1c59      	adds	r1, r3, #1
 801ced8:	911d      	str	r1, [sp, #116]	@ 0x74
 801ceda:	785b      	ldrb	r3, [r3, #1]
 801cedc:	001a      	movs	r2, r3
 801cede:	3a30      	subs	r2, #48	@ 0x30
 801cee0:	2a09      	cmp	r2, #9
 801cee2:	d93a      	bls.n	801cf5a <_strtod_l+0x35e>
 801cee4:	9a07      	ldr	r2, [sp, #28]
 801cee6:	1a8a      	subs	r2, r1, r2
 801cee8:	49b4      	ldr	r1, [pc, #720]	@ (801d1bc <_strtod_l+0x5c0>)
 801ceea:	9107      	str	r1, [sp, #28]
 801ceec:	2a08      	cmp	r2, #8
 801ceee:	dc04      	bgt.n	801cefa <_strtod_l+0x2fe>
 801cef0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cef2:	9207      	str	r2, [sp, #28]
 801cef4:	428a      	cmp	r2, r1
 801cef6:	dd00      	ble.n	801cefa <_strtod_l+0x2fe>
 801cef8:	9107      	str	r1, [sp, #28]
 801cefa:	2c00      	cmp	r4, #0
 801cefc:	d002      	beq.n	801cf04 <_strtod_l+0x308>
 801cefe:	9a07      	ldr	r2, [sp, #28]
 801cf00:	4252      	negs	r2, r2
 801cf02:	9207      	str	r2, [sp, #28]
 801cf04:	9a06      	ldr	r2, [sp, #24]
 801cf06:	2a00      	cmp	r2, #0
 801cf08:	d14d      	bne.n	801cfa6 <_strtod_l+0x3aa>
 801cf0a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cf0c:	4310      	orrs	r0, r2
 801cf0e:	d000      	beq.n	801cf12 <_strtod_l+0x316>
 801cf10:	e6af      	b.n	801cc72 <_strtod_l+0x76>
 801cf12:	4662      	mov	r2, ip
 801cf14:	2a00      	cmp	r2, #0
 801cf16:	d000      	beq.n	801cf1a <_strtod_l+0x31e>
 801cf18:	e6c7      	b.n	801ccaa <_strtod_l+0xae>
 801cf1a:	2b69      	cmp	r3, #105	@ 0x69
 801cf1c:	d027      	beq.n	801cf6e <_strtod_l+0x372>
 801cf1e:	dc23      	bgt.n	801cf68 <_strtod_l+0x36c>
 801cf20:	2b49      	cmp	r3, #73	@ 0x49
 801cf22:	d024      	beq.n	801cf6e <_strtod_l+0x372>
 801cf24:	2b4e      	cmp	r3, #78	@ 0x4e
 801cf26:	d000      	beq.n	801cf2a <_strtod_l+0x32e>
 801cf28:	e6bf      	b.n	801ccaa <_strtod_l+0xae>
 801cf2a:	49a5      	ldr	r1, [pc, #660]	@ (801d1c0 <_strtod_l+0x5c4>)
 801cf2c:	a81d      	add	r0, sp, #116	@ 0x74
 801cf2e:	f002 fe2b 	bl	801fb88 <__match>
 801cf32:	2800      	cmp	r0, #0
 801cf34:	d100      	bne.n	801cf38 <_strtod_l+0x33c>
 801cf36:	e6b8      	b.n	801ccaa <_strtod_l+0xae>
 801cf38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cf3a:	781b      	ldrb	r3, [r3, #0]
 801cf3c:	2b28      	cmp	r3, #40	@ 0x28
 801cf3e:	d12c      	bne.n	801cf9a <_strtod_l+0x39e>
 801cf40:	49a0      	ldr	r1, [pc, #640]	@ (801d1c4 <_strtod_l+0x5c8>)
 801cf42:	aa20      	add	r2, sp, #128	@ 0x80
 801cf44:	a81d      	add	r0, sp, #116	@ 0x74
 801cf46:	f002 fe33 	bl	801fbb0 <__hexnan>
 801cf4a:	2805      	cmp	r0, #5
 801cf4c:	d125      	bne.n	801cf9a <_strtod_l+0x39e>
 801cf4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cf50:	4a9d      	ldr	r2, [pc, #628]	@ (801d1c8 <_strtod_l+0x5cc>)
 801cf52:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cf54:	431a      	orrs	r2, r3
 801cf56:	0017      	movs	r7, r2
 801cf58:	e68b      	b.n	801cc72 <_strtod_l+0x76>
 801cf5a:	220a      	movs	r2, #10
 801cf5c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cf5e:	434a      	muls	r2, r1
 801cf60:	18d2      	adds	r2, r2, r3
 801cf62:	3a30      	subs	r2, #48	@ 0x30
 801cf64:	9210      	str	r2, [sp, #64]	@ 0x40
 801cf66:	e7b5      	b.n	801ced4 <_strtod_l+0x2d8>
 801cf68:	2b6e      	cmp	r3, #110	@ 0x6e
 801cf6a:	d0de      	beq.n	801cf2a <_strtod_l+0x32e>
 801cf6c:	e69d      	b.n	801ccaa <_strtod_l+0xae>
 801cf6e:	4997      	ldr	r1, [pc, #604]	@ (801d1cc <_strtod_l+0x5d0>)
 801cf70:	a81d      	add	r0, sp, #116	@ 0x74
 801cf72:	f002 fe09 	bl	801fb88 <__match>
 801cf76:	2800      	cmp	r0, #0
 801cf78:	d100      	bne.n	801cf7c <_strtod_l+0x380>
 801cf7a:	e696      	b.n	801ccaa <_strtod_l+0xae>
 801cf7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cf7e:	4994      	ldr	r1, [pc, #592]	@ (801d1d0 <_strtod_l+0x5d4>)
 801cf80:	3b01      	subs	r3, #1
 801cf82:	a81d      	add	r0, sp, #116	@ 0x74
 801cf84:	931d      	str	r3, [sp, #116]	@ 0x74
 801cf86:	f002 fdff 	bl	801fb88 <__match>
 801cf8a:	2800      	cmp	r0, #0
 801cf8c:	d102      	bne.n	801cf94 <_strtod_l+0x398>
 801cf8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cf90:	3301      	adds	r3, #1
 801cf92:	931d      	str	r3, [sp, #116]	@ 0x74
 801cf94:	2600      	movs	r6, #0
 801cf96:	4f8c      	ldr	r7, [pc, #560]	@ (801d1c8 <_strtod_l+0x5cc>)
 801cf98:	e66b      	b.n	801cc72 <_strtod_l+0x76>
 801cf9a:	488e      	ldr	r0, [pc, #568]	@ (801d1d4 <_strtod_l+0x5d8>)
 801cf9c:	f001 fc84 	bl	801e8a8 <nan>
 801cfa0:	0006      	movs	r6, r0
 801cfa2:	000f      	movs	r7, r1
 801cfa4:	e665      	b.n	801cc72 <_strtod_l+0x76>
 801cfa6:	9b07      	ldr	r3, [sp, #28]
 801cfa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cfaa:	1a9b      	subs	r3, r3, r2
 801cfac:	930c      	str	r3, [sp, #48]	@ 0x30
 801cfae:	9b08      	ldr	r3, [sp, #32]
 801cfb0:	2b00      	cmp	r3, #0
 801cfb2:	d101      	bne.n	801cfb8 <_strtod_l+0x3bc>
 801cfb4:	9b06      	ldr	r3, [sp, #24]
 801cfb6:	9308      	str	r3, [sp, #32]
 801cfb8:	9c06      	ldr	r4, [sp, #24]
 801cfba:	2c10      	cmp	r4, #16
 801cfbc:	dd00      	ble.n	801cfc0 <_strtod_l+0x3c4>
 801cfbe:	2410      	movs	r4, #16
 801cfc0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801cfc2:	f7e6 fa2b 	bl	800341c <__aeabi_ui2d>
 801cfc6:	9b06      	ldr	r3, [sp, #24]
 801cfc8:	0006      	movs	r6, r0
 801cfca:	000f      	movs	r7, r1
 801cfcc:	2b09      	cmp	r3, #9
 801cfce:	dc13      	bgt.n	801cff8 <_strtod_l+0x3fc>
 801cfd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d100      	bne.n	801cfd8 <_strtod_l+0x3dc>
 801cfd6:	e64c      	b.n	801cc72 <_strtod_l+0x76>
 801cfd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	dc00      	bgt.n	801cfe0 <_strtod_l+0x3e4>
 801cfde:	e07e      	b.n	801d0de <_strtod_l+0x4e2>
 801cfe0:	2b16      	cmp	r3, #22
 801cfe2:	dc63      	bgt.n	801d0ac <_strtod_l+0x4b0>
 801cfe4:	497c      	ldr	r1, [pc, #496]	@ (801d1d8 <_strtod_l+0x5dc>)
 801cfe6:	00db      	lsls	r3, r3, #3
 801cfe8:	18c9      	adds	r1, r1, r3
 801cfea:	0032      	movs	r2, r6
 801cfec:	6808      	ldr	r0, [r1, #0]
 801cfee:	6849      	ldr	r1, [r1, #4]
 801cff0:	003b      	movs	r3, r7
 801cff2:	f7e5 fb23 	bl	800263c <__aeabi_dmul>
 801cff6:	e7d3      	b.n	801cfa0 <_strtod_l+0x3a4>
 801cff8:	0022      	movs	r2, r4
 801cffa:	4b77      	ldr	r3, [pc, #476]	@ (801d1d8 <_strtod_l+0x5dc>)
 801cffc:	3a09      	subs	r2, #9
 801cffe:	00d2      	lsls	r2, r2, #3
 801d000:	189b      	adds	r3, r3, r2
 801d002:	681a      	ldr	r2, [r3, #0]
 801d004:	685b      	ldr	r3, [r3, #4]
 801d006:	f7e5 fb19 	bl	800263c <__aeabi_dmul>
 801d00a:	0006      	movs	r6, r0
 801d00c:	0028      	movs	r0, r5
 801d00e:	000f      	movs	r7, r1
 801d010:	f7e6 fa04 	bl	800341c <__aeabi_ui2d>
 801d014:	000b      	movs	r3, r1
 801d016:	0002      	movs	r2, r0
 801d018:	0039      	movs	r1, r7
 801d01a:	0030      	movs	r0, r6
 801d01c:	f7e4 fb66 	bl	80016ec <__aeabi_dadd>
 801d020:	9b06      	ldr	r3, [sp, #24]
 801d022:	0006      	movs	r6, r0
 801d024:	000f      	movs	r7, r1
 801d026:	2b0f      	cmp	r3, #15
 801d028:	ddd2      	ble.n	801cfd0 <_strtod_l+0x3d4>
 801d02a:	9b06      	ldr	r3, [sp, #24]
 801d02c:	1b1c      	subs	r4, r3, r4
 801d02e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d030:	18e4      	adds	r4, r4, r3
 801d032:	2c00      	cmp	r4, #0
 801d034:	dc00      	bgt.n	801d038 <_strtod_l+0x43c>
 801d036:	e09b      	b.n	801d170 <_strtod_l+0x574>
 801d038:	220f      	movs	r2, #15
 801d03a:	0023      	movs	r3, r4
 801d03c:	4013      	ands	r3, r2
 801d03e:	4214      	tst	r4, r2
 801d040:	d00a      	beq.n	801d058 <_strtod_l+0x45c>
 801d042:	4965      	ldr	r1, [pc, #404]	@ (801d1d8 <_strtod_l+0x5dc>)
 801d044:	00db      	lsls	r3, r3, #3
 801d046:	18c9      	adds	r1, r1, r3
 801d048:	0032      	movs	r2, r6
 801d04a:	6808      	ldr	r0, [r1, #0]
 801d04c:	6849      	ldr	r1, [r1, #4]
 801d04e:	003b      	movs	r3, r7
 801d050:	f7e5 faf4 	bl	800263c <__aeabi_dmul>
 801d054:	0006      	movs	r6, r0
 801d056:	000f      	movs	r7, r1
 801d058:	230f      	movs	r3, #15
 801d05a:	439c      	bics	r4, r3
 801d05c:	d073      	beq.n	801d146 <_strtod_l+0x54a>
 801d05e:	3326      	adds	r3, #38	@ 0x26
 801d060:	33ff      	adds	r3, #255	@ 0xff
 801d062:	429c      	cmp	r4, r3
 801d064:	dd4b      	ble.n	801d0fe <_strtod_l+0x502>
 801d066:	2300      	movs	r3, #0
 801d068:	9306      	str	r3, [sp, #24]
 801d06a:	9307      	str	r3, [sp, #28]
 801d06c:	930d      	str	r3, [sp, #52]	@ 0x34
 801d06e:	9308      	str	r3, [sp, #32]
 801d070:	2322      	movs	r3, #34	@ 0x22
 801d072:	2600      	movs	r6, #0
 801d074:	9a05      	ldr	r2, [sp, #20]
 801d076:	4f54      	ldr	r7, [pc, #336]	@ (801d1c8 <_strtod_l+0x5cc>)
 801d078:	6013      	str	r3, [r2, #0]
 801d07a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d07c:	42b3      	cmp	r3, r6
 801d07e:	d100      	bne.n	801d082 <_strtod_l+0x486>
 801d080:	e5f7      	b.n	801cc72 <_strtod_l+0x76>
 801d082:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d084:	9805      	ldr	r0, [sp, #20]
 801d086:	f002 ff4d 	bl	801ff24 <_Bfree>
 801d08a:	9908      	ldr	r1, [sp, #32]
 801d08c:	9805      	ldr	r0, [sp, #20]
 801d08e:	f002 ff49 	bl	801ff24 <_Bfree>
 801d092:	9907      	ldr	r1, [sp, #28]
 801d094:	9805      	ldr	r0, [sp, #20]
 801d096:	f002 ff45 	bl	801ff24 <_Bfree>
 801d09a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d09c:	9805      	ldr	r0, [sp, #20]
 801d09e:	f002 ff41 	bl	801ff24 <_Bfree>
 801d0a2:	9906      	ldr	r1, [sp, #24]
 801d0a4:	9805      	ldr	r0, [sp, #20]
 801d0a6:	f002 ff3d 	bl	801ff24 <_Bfree>
 801d0aa:	e5e2      	b.n	801cc72 <_strtod_l+0x76>
 801d0ac:	2325      	movs	r3, #37	@ 0x25
 801d0ae:	9a06      	ldr	r2, [sp, #24]
 801d0b0:	1a9b      	subs	r3, r3, r2
 801d0b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d0b4:	4293      	cmp	r3, r2
 801d0b6:	dbb8      	blt.n	801d02a <_strtod_l+0x42e>
 801d0b8:	240f      	movs	r4, #15
 801d0ba:	9b06      	ldr	r3, [sp, #24]
 801d0bc:	4d46      	ldr	r5, [pc, #280]	@ (801d1d8 <_strtod_l+0x5dc>)
 801d0be:	1ae4      	subs	r4, r4, r3
 801d0c0:	00e1      	lsls	r1, r4, #3
 801d0c2:	1869      	adds	r1, r5, r1
 801d0c4:	0032      	movs	r2, r6
 801d0c6:	6808      	ldr	r0, [r1, #0]
 801d0c8:	6849      	ldr	r1, [r1, #4]
 801d0ca:	003b      	movs	r3, r7
 801d0cc:	f7e5 fab6 	bl	800263c <__aeabi_dmul>
 801d0d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0d2:	1b1c      	subs	r4, r3, r4
 801d0d4:	00e4      	lsls	r4, r4, #3
 801d0d6:	192d      	adds	r5, r5, r4
 801d0d8:	682a      	ldr	r2, [r5, #0]
 801d0da:	686b      	ldr	r3, [r5, #4]
 801d0dc:	e789      	b.n	801cff2 <_strtod_l+0x3f6>
 801d0de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d0e0:	3316      	adds	r3, #22
 801d0e2:	dba2      	blt.n	801d02a <_strtod_l+0x42e>
 801d0e4:	9907      	ldr	r1, [sp, #28]
 801d0e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d0e8:	4b3b      	ldr	r3, [pc, #236]	@ (801d1d8 <_strtod_l+0x5dc>)
 801d0ea:	1a52      	subs	r2, r2, r1
 801d0ec:	00d2      	lsls	r2, r2, #3
 801d0ee:	189b      	adds	r3, r3, r2
 801d0f0:	0030      	movs	r0, r6
 801d0f2:	681a      	ldr	r2, [r3, #0]
 801d0f4:	685b      	ldr	r3, [r3, #4]
 801d0f6:	0039      	movs	r1, r7
 801d0f8:	f7e4 fe5c 	bl	8001db4 <__aeabi_ddiv>
 801d0fc:	e750      	b.n	801cfa0 <_strtod_l+0x3a4>
 801d0fe:	2300      	movs	r3, #0
 801d100:	0030      	movs	r0, r6
 801d102:	0039      	movs	r1, r7
 801d104:	4d35      	ldr	r5, [pc, #212]	@ (801d1dc <_strtod_l+0x5e0>)
 801d106:	1124      	asrs	r4, r4, #4
 801d108:	9309      	str	r3, [sp, #36]	@ 0x24
 801d10a:	2c01      	cmp	r4, #1
 801d10c:	dc1e      	bgt.n	801d14c <_strtod_l+0x550>
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d001      	beq.n	801d116 <_strtod_l+0x51a>
 801d112:	0006      	movs	r6, r0
 801d114:	000f      	movs	r7, r1
 801d116:	4b32      	ldr	r3, [pc, #200]	@ (801d1e0 <_strtod_l+0x5e4>)
 801d118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d11a:	18ff      	adds	r7, r7, r3
 801d11c:	4b2f      	ldr	r3, [pc, #188]	@ (801d1dc <_strtod_l+0x5e0>)
 801d11e:	00d5      	lsls	r5, r2, #3
 801d120:	195d      	adds	r5, r3, r5
 801d122:	0032      	movs	r2, r6
 801d124:	6828      	ldr	r0, [r5, #0]
 801d126:	6869      	ldr	r1, [r5, #4]
 801d128:	003b      	movs	r3, r7
 801d12a:	f7e5 fa87 	bl	800263c <__aeabi_dmul>
 801d12e:	4b26      	ldr	r3, [pc, #152]	@ (801d1c8 <_strtod_l+0x5cc>)
 801d130:	4a2c      	ldr	r2, [pc, #176]	@ (801d1e4 <_strtod_l+0x5e8>)
 801d132:	0006      	movs	r6, r0
 801d134:	400b      	ands	r3, r1
 801d136:	4293      	cmp	r3, r2
 801d138:	d895      	bhi.n	801d066 <_strtod_l+0x46a>
 801d13a:	4a2b      	ldr	r2, [pc, #172]	@ (801d1e8 <_strtod_l+0x5ec>)
 801d13c:	4293      	cmp	r3, r2
 801d13e:	d913      	bls.n	801d168 <_strtod_l+0x56c>
 801d140:	2601      	movs	r6, #1
 801d142:	4f2a      	ldr	r7, [pc, #168]	@ (801d1ec <_strtod_l+0x5f0>)
 801d144:	4276      	negs	r6, r6
 801d146:	2300      	movs	r3, #0
 801d148:	9309      	str	r3, [sp, #36]	@ 0x24
 801d14a:	e086      	b.n	801d25a <_strtod_l+0x65e>
 801d14c:	2201      	movs	r2, #1
 801d14e:	4214      	tst	r4, r2
 801d150:	d004      	beq.n	801d15c <_strtod_l+0x560>
 801d152:	682a      	ldr	r2, [r5, #0]
 801d154:	686b      	ldr	r3, [r5, #4]
 801d156:	f7e5 fa71 	bl	800263c <__aeabi_dmul>
 801d15a:	2301      	movs	r3, #1
 801d15c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d15e:	1064      	asrs	r4, r4, #1
 801d160:	3201      	adds	r2, #1
 801d162:	9209      	str	r2, [sp, #36]	@ 0x24
 801d164:	3508      	adds	r5, #8
 801d166:	e7d0      	b.n	801d10a <_strtod_l+0x50e>
 801d168:	23d4      	movs	r3, #212	@ 0xd4
 801d16a:	049b      	lsls	r3, r3, #18
 801d16c:	18cf      	adds	r7, r1, r3
 801d16e:	e7ea      	b.n	801d146 <_strtod_l+0x54a>
 801d170:	2c00      	cmp	r4, #0
 801d172:	d0e8      	beq.n	801d146 <_strtod_l+0x54a>
 801d174:	4264      	negs	r4, r4
 801d176:	230f      	movs	r3, #15
 801d178:	0022      	movs	r2, r4
 801d17a:	401a      	ands	r2, r3
 801d17c:	421c      	tst	r4, r3
 801d17e:	d00a      	beq.n	801d196 <_strtod_l+0x59a>
 801d180:	4b15      	ldr	r3, [pc, #84]	@ (801d1d8 <_strtod_l+0x5dc>)
 801d182:	00d2      	lsls	r2, r2, #3
 801d184:	189b      	adds	r3, r3, r2
 801d186:	0030      	movs	r0, r6
 801d188:	681a      	ldr	r2, [r3, #0]
 801d18a:	685b      	ldr	r3, [r3, #4]
 801d18c:	0039      	movs	r1, r7
 801d18e:	f7e4 fe11 	bl	8001db4 <__aeabi_ddiv>
 801d192:	0006      	movs	r6, r0
 801d194:	000f      	movs	r7, r1
 801d196:	1124      	asrs	r4, r4, #4
 801d198:	d0d5      	beq.n	801d146 <_strtod_l+0x54a>
 801d19a:	2c1f      	cmp	r4, #31
 801d19c:	dd28      	ble.n	801d1f0 <_strtod_l+0x5f4>
 801d19e:	2300      	movs	r3, #0
 801d1a0:	9306      	str	r3, [sp, #24]
 801d1a2:	9307      	str	r3, [sp, #28]
 801d1a4:	930d      	str	r3, [sp, #52]	@ 0x34
 801d1a6:	9308      	str	r3, [sp, #32]
 801d1a8:	2322      	movs	r3, #34	@ 0x22
 801d1aa:	9a05      	ldr	r2, [sp, #20]
 801d1ac:	2600      	movs	r6, #0
 801d1ae:	6013      	str	r3, [r2, #0]
 801d1b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d1b2:	2700      	movs	r7, #0
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d000      	beq.n	801d1ba <_strtod_l+0x5be>
 801d1b8:	e763      	b.n	801d082 <_strtod_l+0x486>
 801d1ba:	e55a      	b.n	801cc72 <_strtod_l+0x76>
 801d1bc:	00004e1f 	.word	0x00004e1f
 801d1c0:	080239fe 	.word	0x080239fe
 801d1c4:	080238a0 	.word	0x080238a0
 801d1c8:	7ff00000 	.word	0x7ff00000
 801d1cc:	080239f6 	.word	0x080239f6
 801d1d0:	08023a30 	.word	0x08023a30
 801d1d4:	08023cbc 	.word	0x08023cbc
 801d1d8:	08023ba8 	.word	0x08023ba8
 801d1dc:	08023b80 	.word	0x08023b80
 801d1e0:	fcb00000 	.word	0xfcb00000
 801d1e4:	7ca00000 	.word	0x7ca00000
 801d1e8:	7c900000 	.word	0x7c900000
 801d1ec:	7fefffff 	.word	0x7fefffff
 801d1f0:	2310      	movs	r3, #16
 801d1f2:	0022      	movs	r2, r4
 801d1f4:	401a      	ands	r2, r3
 801d1f6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d1f8:	421c      	tst	r4, r3
 801d1fa:	d001      	beq.n	801d200 <_strtod_l+0x604>
 801d1fc:	335a      	adds	r3, #90	@ 0x5a
 801d1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801d200:	0030      	movs	r0, r6
 801d202:	0039      	movs	r1, r7
 801d204:	2300      	movs	r3, #0
 801d206:	4dbf      	ldr	r5, [pc, #764]	@ (801d504 <_strtod_l+0x908>)
 801d208:	2201      	movs	r2, #1
 801d20a:	4214      	tst	r4, r2
 801d20c:	d004      	beq.n	801d218 <_strtod_l+0x61c>
 801d20e:	682a      	ldr	r2, [r5, #0]
 801d210:	686b      	ldr	r3, [r5, #4]
 801d212:	f7e5 fa13 	bl	800263c <__aeabi_dmul>
 801d216:	2301      	movs	r3, #1
 801d218:	1064      	asrs	r4, r4, #1
 801d21a:	3508      	adds	r5, #8
 801d21c:	2c00      	cmp	r4, #0
 801d21e:	d1f3      	bne.n	801d208 <_strtod_l+0x60c>
 801d220:	2b00      	cmp	r3, #0
 801d222:	d001      	beq.n	801d228 <_strtod_l+0x62c>
 801d224:	0006      	movs	r6, r0
 801d226:	000f      	movs	r7, r1
 801d228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	d00d      	beq.n	801d24a <_strtod_l+0x64e>
 801d22e:	236b      	movs	r3, #107	@ 0x6b
 801d230:	007a      	lsls	r2, r7, #1
 801d232:	0d52      	lsrs	r2, r2, #21
 801d234:	0039      	movs	r1, r7
 801d236:	1a9b      	subs	r3, r3, r2
 801d238:	2b00      	cmp	r3, #0
 801d23a:	dd06      	ble.n	801d24a <_strtod_l+0x64e>
 801d23c:	2b1f      	cmp	r3, #31
 801d23e:	dd5a      	ble.n	801d2f6 <_strtod_l+0x6fa>
 801d240:	2600      	movs	r6, #0
 801d242:	2b34      	cmp	r3, #52	@ 0x34
 801d244:	dd50      	ble.n	801d2e8 <_strtod_l+0x6ec>
 801d246:	27dc      	movs	r7, #220	@ 0xdc
 801d248:	04bf      	lsls	r7, r7, #18
 801d24a:	2200      	movs	r2, #0
 801d24c:	2300      	movs	r3, #0
 801d24e:	0030      	movs	r0, r6
 801d250:	0039      	movs	r1, r7
 801d252:	f7e3 f92d 	bl	80004b0 <__aeabi_dcmpeq>
 801d256:	2800      	cmp	r0, #0
 801d258:	d1a1      	bne.n	801d19e <_strtod_l+0x5a2>
 801d25a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d25c:	9a08      	ldr	r2, [sp, #32]
 801d25e:	9300      	str	r3, [sp, #0]
 801d260:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d262:	9b06      	ldr	r3, [sp, #24]
 801d264:	9805      	ldr	r0, [sp, #20]
 801d266:	f002 fec5 	bl	801fff4 <__s2b>
 801d26a:	900d      	str	r0, [sp, #52]	@ 0x34
 801d26c:	2800      	cmp	r0, #0
 801d26e:	d100      	bne.n	801d272 <_strtod_l+0x676>
 801d270:	e6f9      	b.n	801d066 <_strtod_l+0x46a>
 801d272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d274:	9907      	ldr	r1, [sp, #28]
 801d276:	17da      	asrs	r2, r3, #31
 801d278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d27a:	1a5b      	subs	r3, r3, r1
 801d27c:	401a      	ands	r2, r3
 801d27e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d280:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d282:	43db      	mvns	r3, r3
 801d284:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d286:	17db      	asrs	r3, r3, #31
 801d288:	401a      	ands	r2, r3
 801d28a:	2300      	movs	r3, #0
 801d28c:	921a      	str	r2, [sp, #104]	@ 0x68
 801d28e:	9306      	str	r3, [sp, #24]
 801d290:	9307      	str	r3, [sp, #28]
 801d292:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d294:	9805      	ldr	r0, [sp, #20]
 801d296:	6859      	ldr	r1, [r3, #4]
 801d298:	f002 fe00 	bl	801fe9c <_Balloc>
 801d29c:	9008      	str	r0, [sp, #32]
 801d29e:	2800      	cmp	r0, #0
 801d2a0:	d100      	bne.n	801d2a4 <_strtod_l+0x6a8>
 801d2a2:	e6e5      	b.n	801d070 <_strtod_l+0x474>
 801d2a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2a6:	300c      	adds	r0, #12
 801d2a8:	0019      	movs	r1, r3
 801d2aa:	691a      	ldr	r2, [r3, #16]
 801d2ac:	310c      	adds	r1, #12
 801d2ae:	3202      	adds	r2, #2
 801d2b0:	0092      	lsls	r2, r2, #2
 801d2b2:	f001 faef 	bl	801e894 <memcpy>
 801d2b6:	ab20      	add	r3, sp, #128	@ 0x80
 801d2b8:	9301      	str	r3, [sp, #4]
 801d2ba:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d2bc:	9300      	str	r3, [sp, #0]
 801d2be:	0032      	movs	r2, r6
 801d2c0:	003b      	movs	r3, r7
 801d2c2:	9805      	ldr	r0, [sp, #20]
 801d2c4:	9610      	str	r6, [sp, #64]	@ 0x40
 801d2c6:	9711      	str	r7, [sp, #68]	@ 0x44
 801d2c8:	f003 f9e4 	bl	8020694 <__d2b>
 801d2cc:	901e      	str	r0, [sp, #120]	@ 0x78
 801d2ce:	2800      	cmp	r0, #0
 801d2d0:	d100      	bne.n	801d2d4 <_strtod_l+0x6d8>
 801d2d2:	e6cd      	b.n	801d070 <_strtod_l+0x474>
 801d2d4:	2101      	movs	r1, #1
 801d2d6:	9805      	ldr	r0, [sp, #20]
 801d2d8:	f002 ff28 	bl	802012c <__i2b>
 801d2dc:	9007      	str	r0, [sp, #28]
 801d2de:	2800      	cmp	r0, #0
 801d2e0:	d10e      	bne.n	801d300 <_strtod_l+0x704>
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	9307      	str	r3, [sp, #28]
 801d2e6:	e6c3      	b.n	801d070 <_strtod_l+0x474>
 801d2e8:	234b      	movs	r3, #75	@ 0x4b
 801d2ea:	1a9a      	subs	r2, r3, r2
 801d2ec:	3b4c      	subs	r3, #76	@ 0x4c
 801d2ee:	4093      	lsls	r3, r2
 801d2f0:	4019      	ands	r1, r3
 801d2f2:	000f      	movs	r7, r1
 801d2f4:	e7a9      	b.n	801d24a <_strtod_l+0x64e>
 801d2f6:	2201      	movs	r2, #1
 801d2f8:	4252      	negs	r2, r2
 801d2fa:	409a      	lsls	r2, r3
 801d2fc:	4016      	ands	r6, r2
 801d2fe:	e7a4      	b.n	801d24a <_strtod_l+0x64e>
 801d300:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d302:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d304:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801d306:	1ad4      	subs	r4, r2, r3
 801d308:	2b00      	cmp	r3, #0
 801d30a:	db01      	blt.n	801d310 <_strtod_l+0x714>
 801d30c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801d30e:	195d      	adds	r5, r3, r5
 801d310:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d312:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d314:	1a5b      	subs	r3, r3, r1
 801d316:	2136      	movs	r1, #54	@ 0x36
 801d318:	189b      	adds	r3, r3, r2
 801d31a:	1a8a      	subs	r2, r1, r2
 801d31c:	497a      	ldr	r1, [pc, #488]	@ (801d508 <_strtod_l+0x90c>)
 801d31e:	2001      	movs	r0, #1
 801d320:	468c      	mov	ip, r1
 801d322:	2100      	movs	r1, #0
 801d324:	3b01      	subs	r3, #1
 801d326:	9116      	str	r1, [sp, #88]	@ 0x58
 801d328:	9014      	str	r0, [sp, #80]	@ 0x50
 801d32a:	4563      	cmp	r3, ip
 801d32c:	da06      	bge.n	801d33c <_strtod_l+0x740>
 801d32e:	4661      	mov	r1, ip
 801d330:	1ac9      	subs	r1, r1, r3
 801d332:	1a52      	subs	r2, r2, r1
 801d334:	291f      	cmp	r1, #31
 801d336:	dc3f      	bgt.n	801d3b8 <_strtod_l+0x7bc>
 801d338:	4088      	lsls	r0, r1
 801d33a:	9014      	str	r0, [sp, #80]	@ 0x50
 801d33c:	18ab      	adds	r3, r5, r2
 801d33e:	930e      	str	r3, [sp, #56]	@ 0x38
 801d340:	18a4      	adds	r4, r4, r2
 801d342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d346:	191c      	adds	r4, r3, r4
 801d348:	002b      	movs	r3, r5
 801d34a:	4295      	cmp	r5, r2
 801d34c:	dd00      	ble.n	801d350 <_strtod_l+0x754>
 801d34e:	0013      	movs	r3, r2
 801d350:	42a3      	cmp	r3, r4
 801d352:	dd00      	ble.n	801d356 <_strtod_l+0x75a>
 801d354:	0023      	movs	r3, r4
 801d356:	2b00      	cmp	r3, #0
 801d358:	dd04      	ble.n	801d364 <_strtod_l+0x768>
 801d35a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d35c:	1ae4      	subs	r4, r4, r3
 801d35e:	1ad2      	subs	r2, r2, r3
 801d360:	920e      	str	r2, [sp, #56]	@ 0x38
 801d362:	1aed      	subs	r5, r5, r3
 801d364:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d366:	2b00      	cmp	r3, #0
 801d368:	dd16      	ble.n	801d398 <_strtod_l+0x79c>
 801d36a:	001a      	movs	r2, r3
 801d36c:	9907      	ldr	r1, [sp, #28]
 801d36e:	9805      	ldr	r0, [sp, #20]
 801d370:	f002 ffa6 	bl	80202c0 <__pow5mult>
 801d374:	9007      	str	r0, [sp, #28]
 801d376:	2800      	cmp	r0, #0
 801d378:	d0b3      	beq.n	801d2e2 <_strtod_l+0x6e6>
 801d37a:	0001      	movs	r1, r0
 801d37c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d37e:	9805      	ldr	r0, [sp, #20]
 801d380:	f002 feec 	bl	802015c <__multiply>
 801d384:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d386:	2800      	cmp	r0, #0
 801d388:	d100      	bne.n	801d38c <_strtod_l+0x790>
 801d38a:	e671      	b.n	801d070 <_strtod_l+0x474>
 801d38c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d38e:	9805      	ldr	r0, [sp, #20]
 801d390:	f002 fdc8 	bl	801ff24 <_Bfree>
 801d394:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d396:	931e      	str	r3, [sp, #120]	@ 0x78
 801d398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	dc12      	bgt.n	801d3c4 <_strtod_l+0x7c8>
 801d39e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	dd18      	ble.n	801d3d6 <_strtod_l+0x7da>
 801d3a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d3a6:	9908      	ldr	r1, [sp, #32]
 801d3a8:	9805      	ldr	r0, [sp, #20]
 801d3aa:	f002 ff89 	bl	80202c0 <__pow5mult>
 801d3ae:	9008      	str	r0, [sp, #32]
 801d3b0:	2800      	cmp	r0, #0
 801d3b2:	d110      	bne.n	801d3d6 <_strtod_l+0x7da>
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	e65a      	b.n	801d06e <_strtod_l+0x472>
 801d3b8:	4954      	ldr	r1, [pc, #336]	@ (801d50c <_strtod_l+0x910>)
 801d3ba:	1acb      	subs	r3, r1, r3
 801d3bc:	0001      	movs	r1, r0
 801d3be:	4099      	lsls	r1, r3
 801d3c0:	9116      	str	r1, [sp, #88]	@ 0x58
 801d3c2:	e7ba      	b.n	801d33a <_strtod_l+0x73e>
 801d3c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d3c6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d3c8:	9805      	ldr	r0, [sp, #20]
 801d3ca:	f002 ffd5 	bl	8020378 <__lshift>
 801d3ce:	901e      	str	r0, [sp, #120]	@ 0x78
 801d3d0:	2800      	cmp	r0, #0
 801d3d2:	d1e4      	bne.n	801d39e <_strtod_l+0x7a2>
 801d3d4:	e64c      	b.n	801d070 <_strtod_l+0x474>
 801d3d6:	2c00      	cmp	r4, #0
 801d3d8:	dd07      	ble.n	801d3ea <_strtod_l+0x7ee>
 801d3da:	0022      	movs	r2, r4
 801d3dc:	9908      	ldr	r1, [sp, #32]
 801d3de:	9805      	ldr	r0, [sp, #20]
 801d3e0:	f002 ffca 	bl	8020378 <__lshift>
 801d3e4:	9008      	str	r0, [sp, #32]
 801d3e6:	2800      	cmp	r0, #0
 801d3e8:	d0e4      	beq.n	801d3b4 <_strtod_l+0x7b8>
 801d3ea:	2d00      	cmp	r5, #0
 801d3ec:	dd08      	ble.n	801d400 <_strtod_l+0x804>
 801d3ee:	002a      	movs	r2, r5
 801d3f0:	9907      	ldr	r1, [sp, #28]
 801d3f2:	9805      	ldr	r0, [sp, #20]
 801d3f4:	f002 ffc0 	bl	8020378 <__lshift>
 801d3f8:	9007      	str	r0, [sp, #28]
 801d3fa:	2800      	cmp	r0, #0
 801d3fc:	d100      	bne.n	801d400 <_strtod_l+0x804>
 801d3fe:	e637      	b.n	801d070 <_strtod_l+0x474>
 801d400:	9a08      	ldr	r2, [sp, #32]
 801d402:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d404:	9805      	ldr	r0, [sp, #20]
 801d406:	f003 f83f 	bl	8020488 <__mdiff>
 801d40a:	9006      	str	r0, [sp, #24]
 801d40c:	2800      	cmp	r0, #0
 801d40e:	d100      	bne.n	801d412 <_strtod_l+0x816>
 801d410:	e62e      	b.n	801d070 <_strtod_l+0x474>
 801d412:	68c3      	ldr	r3, [r0, #12]
 801d414:	9907      	ldr	r1, [sp, #28]
 801d416:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d418:	2300      	movs	r3, #0
 801d41a:	60c3      	str	r3, [r0, #12]
 801d41c:	f003 f818 	bl	8020450 <__mcmp>
 801d420:	2800      	cmp	r0, #0
 801d422:	da3b      	bge.n	801d49c <_strtod_l+0x8a0>
 801d424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d426:	4333      	orrs	r3, r6
 801d428:	d167      	bne.n	801d4fa <_strtod_l+0x8fe>
 801d42a:	033b      	lsls	r3, r7, #12
 801d42c:	d165      	bne.n	801d4fa <_strtod_l+0x8fe>
 801d42e:	22d6      	movs	r2, #214	@ 0xd6
 801d430:	4b37      	ldr	r3, [pc, #220]	@ (801d510 <_strtod_l+0x914>)
 801d432:	04d2      	lsls	r2, r2, #19
 801d434:	403b      	ands	r3, r7
 801d436:	4293      	cmp	r3, r2
 801d438:	d95f      	bls.n	801d4fa <_strtod_l+0x8fe>
 801d43a:	9b06      	ldr	r3, [sp, #24]
 801d43c:	695b      	ldr	r3, [r3, #20]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d103      	bne.n	801d44a <_strtod_l+0x84e>
 801d442:	9b06      	ldr	r3, [sp, #24]
 801d444:	691b      	ldr	r3, [r3, #16]
 801d446:	2b01      	cmp	r3, #1
 801d448:	dd57      	ble.n	801d4fa <_strtod_l+0x8fe>
 801d44a:	9906      	ldr	r1, [sp, #24]
 801d44c:	2201      	movs	r2, #1
 801d44e:	9805      	ldr	r0, [sp, #20]
 801d450:	f002 ff92 	bl	8020378 <__lshift>
 801d454:	9907      	ldr	r1, [sp, #28]
 801d456:	9006      	str	r0, [sp, #24]
 801d458:	f002 fffa 	bl	8020450 <__mcmp>
 801d45c:	2800      	cmp	r0, #0
 801d45e:	dd4c      	ble.n	801d4fa <_strtod_l+0x8fe>
 801d460:	4b2b      	ldr	r3, [pc, #172]	@ (801d510 <_strtod_l+0x914>)
 801d462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d464:	403b      	ands	r3, r7
 801d466:	2a00      	cmp	r2, #0
 801d468:	d074      	beq.n	801d554 <_strtod_l+0x958>
 801d46a:	22d6      	movs	r2, #214	@ 0xd6
 801d46c:	04d2      	lsls	r2, r2, #19
 801d46e:	4293      	cmp	r3, r2
 801d470:	d870      	bhi.n	801d554 <_strtod_l+0x958>
 801d472:	22dc      	movs	r2, #220	@ 0xdc
 801d474:	0492      	lsls	r2, r2, #18
 801d476:	4293      	cmp	r3, r2
 801d478:	d800      	bhi.n	801d47c <_strtod_l+0x880>
 801d47a:	e695      	b.n	801d1a8 <_strtod_l+0x5ac>
 801d47c:	0030      	movs	r0, r6
 801d47e:	0039      	movs	r1, r7
 801d480:	4b24      	ldr	r3, [pc, #144]	@ (801d514 <_strtod_l+0x918>)
 801d482:	2200      	movs	r2, #0
 801d484:	f7e5 f8da 	bl	800263c <__aeabi_dmul>
 801d488:	4b21      	ldr	r3, [pc, #132]	@ (801d510 <_strtod_l+0x914>)
 801d48a:	0006      	movs	r6, r0
 801d48c:	000f      	movs	r7, r1
 801d48e:	420b      	tst	r3, r1
 801d490:	d000      	beq.n	801d494 <_strtod_l+0x898>
 801d492:	e5f6      	b.n	801d082 <_strtod_l+0x486>
 801d494:	2322      	movs	r3, #34	@ 0x22
 801d496:	9a05      	ldr	r2, [sp, #20]
 801d498:	6013      	str	r3, [r2, #0]
 801d49a:	e5f2      	b.n	801d082 <_strtod_l+0x486>
 801d49c:	970e      	str	r7, [sp, #56]	@ 0x38
 801d49e:	2800      	cmp	r0, #0
 801d4a0:	d175      	bne.n	801d58e <_strtod_l+0x992>
 801d4a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d4a4:	033b      	lsls	r3, r7, #12
 801d4a6:	0b1b      	lsrs	r3, r3, #12
 801d4a8:	2a00      	cmp	r2, #0
 801d4aa:	d039      	beq.n	801d520 <_strtod_l+0x924>
 801d4ac:	4a1a      	ldr	r2, [pc, #104]	@ (801d518 <_strtod_l+0x91c>)
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d138      	bne.n	801d524 <_strtod_l+0x928>
 801d4b2:	2101      	movs	r1, #1
 801d4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4b6:	4249      	negs	r1, r1
 801d4b8:	0032      	movs	r2, r6
 801d4ba:	0008      	movs	r0, r1
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d00b      	beq.n	801d4d8 <_strtod_l+0x8dc>
 801d4c0:	24d4      	movs	r4, #212	@ 0xd4
 801d4c2:	4b13      	ldr	r3, [pc, #76]	@ (801d510 <_strtod_l+0x914>)
 801d4c4:	0008      	movs	r0, r1
 801d4c6:	403b      	ands	r3, r7
 801d4c8:	04e4      	lsls	r4, r4, #19
 801d4ca:	42a3      	cmp	r3, r4
 801d4cc:	d804      	bhi.n	801d4d8 <_strtod_l+0x8dc>
 801d4ce:	306c      	adds	r0, #108	@ 0x6c
 801d4d0:	0d1b      	lsrs	r3, r3, #20
 801d4d2:	1ac3      	subs	r3, r0, r3
 801d4d4:	4099      	lsls	r1, r3
 801d4d6:	0008      	movs	r0, r1
 801d4d8:	4282      	cmp	r2, r0
 801d4da:	d123      	bne.n	801d524 <_strtod_l+0x928>
 801d4dc:	4b0f      	ldr	r3, [pc, #60]	@ (801d51c <_strtod_l+0x920>)
 801d4de:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d4e0:	4299      	cmp	r1, r3
 801d4e2:	d102      	bne.n	801d4ea <_strtod_l+0x8ee>
 801d4e4:	3201      	adds	r2, #1
 801d4e6:	d100      	bne.n	801d4ea <_strtod_l+0x8ee>
 801d4e8:	e5c2      	b.n	801d070 <_strtod_l+0x474>
 801d4ea:	4b09      	ldr	r3, [pc, #36]	@ (801d510 <_strtod_l+0x914>)
 801d4ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d4ee:	2600      	movs	r6, #0
 801d4f0:	401a      	ands	r2, r3
 801d4f2:	0013      	movs	r3, r2
 801d4f4:	2280      	movs	r2, #128	@ 0x80
 801d4f6:	0352      	lsls	r2, r2, #13
 801d4f8:	189f      	adds	r7, r3, r2
 801d4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d1bd      	bne.n	801d47c <_strtod_l+0x880>
 801d500:	e5bf      	b.n	801d082 <_strtod_l+0x486>
 801d502:	46c0      	nop			@ (mov r8, r8)
 801d504:	080238c8 	.word	0x080238c8
 801d508:	fffffc02 	.word	0xfffffc02
 801d50c:	fffffbe2 	.word	0xfffffbe2
 801d510:	7ff00000 	.word	0x7ff00000
 801d514:	39500000 	.word	0x39500000
 801d518:	000fffff 	.word	0x000fffff
 801d51c:	7fefffff 	.word	0x7fefffff
 801d520:	4333      	orrs	r3, r6
 801d522:	d09d      	beq.n	801d460 <_strtod_l+0x864>
 801d524:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d526:	2b00      	cmp	r3, #0
 801d528:	d01c      	beq.n	801d564 <_strtod_l+0x968>
 801d52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d52c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d52e:	4213      	tst	r3, r2
 801d530:	d0e3      	beq.n	801d4fa <_strtod_l+0x8fe>
 801d532:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d534:	0030      	movs	r0, r6
 801d536:	0039      	movs	r1, r7
 801d538:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d016      	beq.n	801d56c <_strtod_l+0x970>
 801d53e:	f7ff fb45 	bl	801cbcc <sulp>
 801d542:	0002      	movs	r2, r0
 801d544:	000b      	movs	r3, r1
 801d546:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d548:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d54a:	f7e4 f8cf 	bl	80016ec <__aeabi_dadd>
 801d54e:	0006      	movs	r6, r0
 801d550:	000f      	movs	r7, r1
 801d552:	e7d2      	b.n	801d4fa <_strtod_l+0x8fe>
 801d554:	2601      	movs	r6, #1
 801d556:	4a92      	ldr	r2, [pc, #584]	@ (801d7a0 <_strtod_l+0xba4>)
 801d558:	4276      	negs	r6, r6
 801d55a:	189b      	adds	r3, r3, r2
 801d55c:	4a91      	ldr	r2, [pc, #580]	@ (801d7a4 <_strtod_l+0xba8>)
 801d55e:	431a      	orrs	r2, r3
 801d560:	0017      	movs	r7, r2
 801d562:	e7ca      	b.n	801d4fa <_strtod_l+0x8fe>
 801d564:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d566:	4233      	tst	r3, r6
 801d568:	d0c7      	beq.n	801d4fa <_strtod_l+0x8fe>
 801d56a:	e7e2      	b.n	801d532 <_strtod_l+0x936>
 801d56c:	f7ff fb2e 	bl	801cbcc <sulp>
 801d570:	0002      	movs	r2, r0
 801d572:	000b      	movs	r3, r1
 801d574:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d576:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d578:	f7e5 fb28 	bl	8002bcc <__aeabi_dsub>
 801d57c:	2200      	movs	r2, #0
 801d57e:	2300      	movs	r3, #0
 801d580:	0006      	movs	r6, r0
 801d582:	000f      	movs	r7, r1
 801d584:	f7e2 ff94 	bl	80004b0 <__aeabi_dcmpeq>
 801d588:	2800      	cmp	r0, #0
 801d58a:	d0b6      	beq.n	801d4fa <_strtod_l+0x8fe>
 801d58c:	e60c      	b.n	801d1a8 <_strtod_l+0x5ac>
 801d58e:	9907      	ldr	r1, [sp, #28]
 801d590:	9806      	ldr	r0, [sp, #24]
 801d592:	f003 f8df 	bl	8020754 <__ratio>
 801d596:	2380      	movs	r3, #128	@ 0x80
 801d598:	2200      	movs	r2, #0
 801d59a:	05db      	lsls	r3, r3, #23
 801d59c:	0004      	movs	r4, r0
 801d59e:	000d      	movs	r5, r1
 801d5a0:	f7e2 ff96 	bl	80004d0 <__aeabi_dcmple>
 801d5a4:	2800      	cmp	r0, #0
 801d5a6:	d06c      	beq.n	801d682 <_strtod_l+0xa86>
 801d5a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d177      	bne.n	801d69e <_strtod_l+0xaa2>
 801d5ae:	2e00      	cmp	r6, #0
 801d5b0:	d157      	bne.n	801d662 <_strtod_l+0xa66>
 801d5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5b4:	031b      	lsls	r3, r3, #12
 801d5b6:	d15a      	bne.n	801d66e <_strtod_l+0xa72>
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	0020      	movs	r0, r4
 801d5bc:	0029      	movs	r1, r5
 801d5be:	4b7a      	ldr	r3, [pc, #488]	@ (801d7a8 <_strtod_l+0xbac>)
 801d5c0:	f7e2 ff7c 	bl	80004bc <__aeabi_dcmplt>
 801d5c4:	2800      	cmp	r0, #0
 801d5c6:	d159      	bne.n	801d67c <_strtod_l+0xa80>
 801d5c8:	0020      	movs	r0, r4
 801d5ca:	0029      	movs	r1, r5
 801d5cc:	2200      	movs	r2, #0
 801d5ce:	4b77      	ldr	r3, [pc, #476]	@ (801d7ac <_strtod_l+0xbb0>)
 801d5d0:	f7e5 f834 	bl	800263c <__aeabi_dmul>
 801d5d4:	0004      	movs	r4, r0
 801d5d6:	000d      	movs	r5, r1
 801d5d8:	2380      	movs	r3, #128	@ 0x80
 801d5da:	061b      	lsls	r3, r3, #24
 801d5dc:	18eb      	adds	r3, r5, r3
 801d5de:	940a      	str	r4, [sp, #40]	@ 0x28
 801d5e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d5e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d5e6:	9214      	str	r2, [sp, #80]	@ 0x50
 801d5e8:	9315      	str	r3, [sp, #84]	@ 0x54
 801d5ea:	4a71      	ldr	r2, [pc, #452]	@ (801d7b0 <_strtod_l+0xbb4>)
 801d5ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5ee:	4013      	ands	r3, r2
 801d5f0:	9316      	str	r3, [sp, #88]	@ 0x58
 801d5f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d5f4:	4b6f      	ldr	r3, [pc, #444]	@ (801d7b4 <_strtod_l+0xbb8>)
 801d5f6:	429a      	cmp	r2, r3
 801d5f8:	d000      	beq.n	801d5fc <_strtod_l+0xa00>
 801d5fa:	e087      	b.n	801d70c <_strtod_l+0xb10>
 801d5fc:	4a6e      	ldr	r2, [pc, #440]	@ (801d7b8 <_strtod_l+0xbbc>)
 801d5fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d600:	4694      	mov	ip, r2
 801d602:	4463      	add	r3, ip
 801d604:	001f      	movs	r7, r3
 801d606:	0030      	movs	r0, r6
 801d608:	0019      	movs	r1, r3
 801d60a:	f002 ffd7 	bl	80205bc <__ulp>
 801d60e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d612:	f7e5 f813 	bl	800263c <__aeabi_dmul>
 801d616:	0032      	movs	r2, r6
 801d618:	003b      	movs	r3, r7
 801d61a:	f7e4 f867 	bl	80016ec <__aeabi_dadd>
 801d61e:	4a64      	ldr	r2, [pc, #400]	@ (801d7b0 <_strtod_l+0xbb4>)
 801d620:	4b66      	ldr	r3, [pc, #408]	@ (801d7bc <_strtod_l+0xbc0>)
 801d622:	0006      	movs	r6, r0
 801d624:	400a      	ands	r2, r1
 801d626:	429a      	cmp	r2, r3
 801d628:	d940      	bls.n	801d6ac <_strtod_l+0xab0>
 801d62a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d62c:	4a64      	ldr	r2, [pc, #400]	@ (801d7c0 <_strtod_l+0xbc4>)
 801d62e:	4293      	cmp	r3, r2
 801d630:	d103      	bne.n	801d63a <_strtod_l+0xa3e>
 801d632:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d634:	3301      	adds	r3, #1
 801d636:	d100      	bne.n	801d63a <_strtod_l+0xa3e>
 801d638:	e51a      	b.n	801d070 <_strtod_l+0x474>
 801d63a:	2601      	movs	r6, #1
 801d63c:	4f60      	ldr	r7, [pc, #384]	@ (801d7c0 <_strtod_l+0xbc4>)
 801d63e:	4276      	negs	r6, r6
 801d640:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d642:	9805      	ldr	r0, [sp, #20]
 801d644:	f002 fc6e 	bl	801ff24 <_Bfree>
 801d648:	9908      	ldr	r1, [sp, #32]
 801d64a:	9805      	ldr	r0, [sp, #20]
 801d64c:	f002 fc6a 	bl	801ff24 <_Bfree>
 801d650:	9907      	ldr	r1, [sp, #28]
 801d652:	9805      	ldr	r0, [sp, #20]
 801d654:	f002 fc66 	bl	801ff24 <_Bfree>
 801d658:	9906      	ldr	r1, [sp, #24]
 801d65a:	9805      	ldr	r0, [sp, #20]
 801d65c:	f002 fc62 	bl	801ff24 <_Bfree>
 801d660:	e617      	b.n	801d292 <_strtod_l+0x696>
 801d662:	2e01      	cmp	r6, #1
 801d664:	d103      	bne.n	801d66e <_strtod_l+0xa72>
 801d666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d100      	bne.n	801d66e <_strtod_l+0xa72>
 801d66c:	e59c      	b.n	801d1a8 <_strtod_l+0x5ac>
 801d66e:	2300      	movs	r3, #0
 801d670:	4c54      	ldr	r4, [pc, #336]	@ (801d7c4 <_strtod_l+0xbc8>)
 801d672:	4d4d      	ldr	r5, [pc, #308]	@ (801d7a8 <_strtod_l+0xbac>)
 801d674:	930a      	str	r3, [sp, #40]	@ 0x28
 801d676:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d678:	2400      	movs	r4, #0
 801d67a:	e7b2      	b.n	801d5e2 <_strtod_l+0x9e6>
 801d67c:	2400      	movs	r4, #0
 801d67e:	4d4b      	ldr	r5, [pc, #300]	@ (801d7ac <_strtod_l+0xbb0>)
 801d680:	e7aa      	b.n	801d5d8 <_strtod_l+0x9dc>
 801d682:	0020      	movs	r0, r4
 801d684:	0029      	movs	r1, r5
 801d686:	4b49      	ldr	r3, [pc, #292]	@ (801d7ac <_strtod_l+0xbb0>)
 801d688:	2200      	movs	r2, #0
 801d68a:	f7e4 ffd7 	bl	800263c <__aeabi_dmul>
 801d68e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d690:	0004      	movs	r4, r0
 801d692:	000d      	movs	r5, r1
 801d694:	2b00      	cmp	r3, #0
 801d696:	d09f      	beq.n	801d5d8 <_strtod_l+0x9dc>
 801d698:	940a      	str	r4, [sp, #40]	@ 0x28
 801d69a:	950b      	str	r5, [sp, #44]	@ 0x2c
 801d69c:	e7a1      	b.n	801d5e2 <_strtod_l+0x9e6>
 801d69e:	2300      	movs	r3, #0
 801d6a0:	4c41      	ldr	r4, [pc, #260]	@ (801d7a8 <_strtod_l+0xbac>)
 801d6a2:	0025      	movs	r5, r4
 801d6a4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d6a8:	001c      	movs	r4, r3
 801d6aa:	e79a      	b.n	801d5e2 <_strtod_l+0x9e6>
 801d6ac:	23d4      	movs	r3, #212	@ 0xd4
 801d6ae:	049b      	lsls	r3, r3, #18
 801d6b0:	18cf      	adds	r7, r1, r3
 801d6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6b4:	9710      	str	r7, [sp, #64]	@ 0x40
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	d1c2      	bne.n	801d640 <_strtod_l+0xa44>
 801d6ba:	4b3d      	ldr	r3, [pc, #244]	@ (801d7b0 <_strtod_l+0xbb4>)
 801d6bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d6be:	403b      	ands	r3, r7
 801d6c0:	429a      	cmp	r2, r3
 801d6c2:	d1bd      	bne.n	801d640 <_strtod_l+0xa44>
 801d6c4:	0020      	movs	r0, r4
 801d6c6:	0029      	movs	r1, r5
 801d6c8:	f7e2 ffde 	bl	8000688 <__aeabi_d2lz>
 801d6cc:	f7e3 f816 	bl	80006fc <__aeabi_l2d>
 801d6d0:	0002      	movs	r2, r0
 801d6d2:	000b      	movs	r3, r1
 801d6d4:	0020      	movs	r0, r4
 801d6d6:	0029      	movs	r1, r5
 801d6d8:	f7e5 fa78 	bl	8002bcc <__aeabi_dsub>
 801d6dc:	033c      	lsls	r4, r7, #12
 801d6de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d6e0:	0b24      	lsrs	r4, r4, #12
 801d6e2:	4334      	orrs	r4, r6
 801d6e4:	900e      	str	r0, [sp, #56]	@ 0x38
 801d6e6:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d6e8:	4a37      	ldr	r2, [pc, #220]	@ (801d7c8 <_strtod_l+0xbcc>)
 801d6ea:	431c      	orrs	r4, r3
 801d6ec:	d052      	beq.n	801d794 <_strtod_l+0xb98>
 801d6ee:	4b37      	ldr	r3, [pc, #220]	@ (801d7cc <_strtod_l+0xbd0>)
 801d6f0:	f7e2 fee4 	bl	80004bc <__aeabi_dcmplt>
 801d6f4:	2800      	cmp	r0, #0
 801d6f6:	d000      	beq.n	801d6fa <_strtod_l+0xafe>
 801d6f8:	e4c3      	b.n	801d082 <_strtod_l+0x486>
 801d6fa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d6fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d6fe:	4a34      	ldr	r2, [pc, #208]	@ (801d7d0 <_strtod_l+0xbd4>)
 801d700:	4b2a      	ldr	r3, [pc, #168]	@ (801d7ac <_strtod_l+0xbb0>)
 801d702:	f7e2 feef 	bl	80004e4 <__aeabi_dcmpgt>
 801d706:	2800      	cmp	r0, #0
 801d708:	d09a      	beq.n	801d640 <_strtod_l+0xa44>
 801d70a:	e4ba      	b.n	801d082 <_strtod_l+0x486>
 801d70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d70e:	2b00      	cmp	r3, #0
 801d710:	d02a      	beq.n	801d768 <_strtod_l+0xb6c>
 801d712:	23d4      	movs	r3, #212	@ 0xd4
 801d714:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d716:	04db      	lsls	r3, r3, #19
 801d718:	429a      	cmp	r2, r3
 801d71a:	d825      	bhi.n	801d768 <_strtod_l+0xb6c>
 801d71c:	0020      	movs	r0, r4
 801d71e:	0029      	movs	r1, r5
 801d720:	4a2c      	ldr	r2, [pc, #176]	@ (801d7d4 <_strtod_l+0xbd8>)
 801d722:	4b2d      	ldr	r3, [pc, #180]	@ (801d7d8 <_strtod_l+0xbdc>)
 801d724:	f7e2 fed4 	bl	80004d0 <__aeabi_dcmple>
 801d728:	2800      	cmp	r0, #0
 801d72a:	d016      	beq.n	801d75a <_strtod_l+0xb5e>
 801d72c:	0020      	movs	r0, r4
 801d72e:	0029      	movs	r1, r5
 801d730:	f7e2 ff8c 	bl	800064c <__aeabi_d2uiz>
 801d734:	2800      	cmp	r0, #0
 801d736:	d100      	bne.n	801d73a <_strtod_l+0xb3e>
 801d738:	3001      	adds	r0, #1
 801d73a:	f7e5 fe6f 	bl	800341c <__aeabi_ui2d>
 801d73e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d740:	0004      	movs	r4, r0
 801d742:	000d      	movs	r5, r1
 801d744:	2b00      	cmp	r3, #0
 801d746:	d122      	bne.n	801d78e <_strtod_l+0xb92>
 801d748:	2380      	movs	r3, #128	@ 0x80
 801d74a:	061b      	lsls	r3, r3, #24
 801d74c:	18cb      	adds	r3, r1, r3
 801d74e:	9018      	str	r0, [sp, #96]	@ 0x60
 801d750:	9319      	str	r3, [sp, #100]	@ 0x64
 801d752:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d756:	9214      	str	r2, [sp, #80]	@ 0x50
 801d758:	9315      	str	r3, [sp, #84]	@ 0x54
 801d75a:	22d6      	movs	r2, #214	@ 0xd6
 801d75c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d75e:	04d2      	lsls	r2, r2, #19
 801d760:	189b      	adds	r3, r3, r2
 801d762:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d764:	1a9b      	subs	r3, r3, r2
 801d766:	9315      	str	r3, [sp, #84]	@ 0x54
 801d768:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d76a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d76c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d76e:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801d770:	f002 ff24 	bl	80205bc <__ulp>
 801d774:	0002      	movs	r2, r0
 801d776:	000b      	movs	r3, r1
 801d778:	0030      	movs	r0, r6
 801d77a:	0039      	movs	r1, r7
 801d77c:	f7e4 ff5e 	bl	800263c <__aeabi_dmul>
 801d780:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d782:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d784:	f7e3 ffb2 	bl	80016ec <__aeabi_dadd>
 801d788:	0006      	movs	r6, r0
 801d78a:	000f      	movs	r7, r1
 801d78c:	e791      	b.n	801d6b2 <_strtod_l+0xab6>
 801d78e:	9418      	str	r4, [sp, #96]	@ 0x60
 801d790:	9519      	str	r5, [sp, #100]	@ 0x64
 801d792:	e7de      	b.n	801d752 <_strtod_l+0xb56>
 801d794:	4b11      	ldr	r3, [pc, #68]	@ (801d7dc <_strtod_l+0xbe0>)
 801d796:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d798:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d79a:	f7e2 fe8f 	bl	80004bc <__aeabi_dcmplt>
 801d79e:	e7b2      	b.n	801d706 <_strtod_l+0xb0a>
 801d7a0:	fff00000 	.word	0xfff00000
 801d7a4:	000fffff 	.word	0x000fffff
 801d7a8:	3ff00000 	.word	0x3ff00000
 801d7ac:	3fe00000 	.word	0x3fe00000
 801d7b0:	7ff00000 	.word	0x7ff00000
 801d7b4:	7fe00000 	.word	0x7fe00000
 801d7b8:	fcb00000 	.word	0xfcb00000
 801d7bc:	7c9fffff 	.word	0x7c9fffff
 801d7c0:	7fefffff 	.word	0x7fefffff
 801d7c4:	bff00000 	.word	0xbff00000
 801d7c8:	94a03595 	.word	0x94a03595
 801d7cc:	3fdfffff 	.word	0x3fdfffff
 801d7d0:	35afe535 	.word	0x35afe535
 801d7d4:	ffc00000 	.word	0xffc00000
 801d7d8:	41dfffff 	.word	0x41dfffff
 801d7dc:	3fcfffff 	.word	0x3fcfffff

0801d7e0 <strtod>:
 801d7e0:	b510      	push	{r4, lr}
 801d7e2:	4c04      	ldr	r4, [pc, #16]	@ (801d7f4 <strtod+0x14>)
 801d7e4:	000a      	movs	r2, r1
 801d7e6:	0001      	movs	r1, r0
 801d7e8:	4b03      	ldr	r3, [pc, #12]	@ (801d7f8 <strtod+0x18>)
 801d7ea:	6820      	ldr	r0, [r4, #0]
 801d7ec:	f7ff fa06 	bl	801cbfc <_strtod_l>
 801d7f0:	bd10      	pop	{r4, pc}
 801d7f2:	46c0      	nop			@ (mov r8, r8)
 801d7f4:	200003cc 	.word	0x200003cc
 801d7f8:	20000260 	.word	0x20000260

0801d7fc <_strtol_l.constprop.0>:
 801d7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7fe:	b085      	sub	sp, #20
 801d800:	0017      	movs	r7, r2
 801d802:	001e      	movs	r6, r3
 801d804:	9003      	str	r0, [sp, #12]
 801d806:	9101      	str	r1, [sp, #4]
 801d808:	2b24      	cmp	r3, #36	@ 0x24
 801d80a:	d844      	bhi.n	801d896 <_strtol_l.constprop.0+0x9a>
 801d80c:	000c      	movs	r4, r1
 801d80e:	2b01      	cmp	r3, #1
 801d810:	d041      	beq.n	801d896 <_strtol_l.constprop.0+0x9a>
 801d812:	4b3d      	ldr	r3, [pc, #244]	@ (801d908 <_strtol_l.constprop.0+0x10c>)
 801d814:	2208      	movs	r2, #8
 801d816:	469c      	mov	ip, r3
 801d818:	0023      	movs	r3, r4
 801d81a:	4661      	mov	r1, ip
 801d81c:	781d      	ldrb	r5, [r3, #0]
 801d81e:	3401      	adds	r4, #1
 801d820:	5d48      	ldrb	r0, [r1, r5]
 801d822:	0001      	movs	r1, r0
 801d824:	4011      	ands	r1, r2
 801d826:	4210      	tst	r0, r2
 801d828:	d1f6      	bne.n	801d818 <_strtol_l.constprop.0+0x1c>
 801d82a:	2d2d      	cmp	r5, #45	@ 0x2d
 801d82c:	d13a      	bne.n	801d8a4 <_strtol_l.constprop.0+0xa8>
 801d82e:	7825      	ldrb	r5, [r4, #0]
 801d830:	1c9c      	adds	r4, r3, #2
 801d832:	2301      	movs	r3, #1
 801d834:	9300      	str	r3, [sp, #0]
 801d836:	2210      	movs	r2, #16
 801d838:	0033      	movs	r3, r6
 801d83a:	4393      	bics	r3, r2
 801d83c:	d109      	bne.n	801d852 <_strtol_l.constprop.0+0x56>
 801d83e:	2d30      	cmp	r5, #48	@ 0x30
 801d840:	d136      	bne.n	801d8b0 <_strtol_l.constprop.0+0xb4>
 801d842:	2120      	movs	r1, #32
 801d844:	7823      	ldrb	r3, [r4, #0]
 801d846:	438b      	bics	r3, r1
 801d848:	2b58      	cmp	r3, #88	@ 0x58
 801d84a:	d131      	bne.n	801d8b0 <_strtol_l.constprop.0+0xb4>
 801d84c:	0016      	movs	r6, r2
 801d84e:	7865      	ldrb	r5, [r4, #1]
 801d850:	3402      	adds	r4, #2
 801d852:	4a2e      	ldr	r2, [pc, #184]	@ (801d90c <_strtol_l.constprop.0+0x110>)
 801d854:	9b00      	ldr	r3, [sp, #0]
 801d856:	4694      	mov	ip, r2
 801d858:	4463      	add	r3, ip
 801d85a:	0031      	movs	r1, r6
 801d85c:	0018      	movs	r0, r3
 801d85e:	9302      	str	r3, [sp, #8]
 801d860:	f7e2 fd26 	bl	80002b0 <__aeabi_uidivmod>
 801d864:	2200      	movs	r2, #0
 801d866:	4684      	mov	ip, r0
 801d868:	0010      	movs	r0, r2
 801d86a:	002b      	movs	r3, r5
 801d86c:	3b30      	subs	r3, #48	@ 0x30
 801d86e:	2b09      	cmp	r3, #9
 801d870:	d825      	bhi.n	801d8be <_strtol_l.constprop.0+0xc2>
 801d872:	001d      	movs	r5, r3
 801d874:	42ae      	cmp	r6, r5
 801d876:	dd31      	ble.n	801d8dc <_strtol_l.constprop.0+0xe0>
 801d878:	1c53      	adds	r3, r2, #1
 801d87a:	d009      	beq.n	801d890 <_strtol_l.constprop.0+0x94>
 801d87c:	2201      	movs	r2, #1
 801d87e:	4252      	negs	r2, r2
 801d880:	4584      	cmp	ip, r0
 801d882:	d305      	bcc.n	801d890 <_strtol_l.constprop.0+0x94>
 801d884:	d101      	bne.n	801d88a <_strtol_l.constprop.0+0x8e>
 801d886:	42a9      	cmp	r1, r5
 801d888:	db25      	blt.n	801d8d6 <_strtol_l.constprop.0+0xda>
 801d88a:	2201      	movs	r2, #1
 801d88c:	4370      	muls	r0, r6
 801d88e:	1828      	adds	r0, r5, r0
 801d890:	7825      	ldrb	r5, [r4, #0]
 801d892:	3401      	adds	r4, #1
 801d894:	e7e9      	b.n	801d86a <_strtol_l.constprop.0+0x6e>
 801d896:	f000 ffc5 	bl	801e824 <__errno>
 801d89a:	2316      	movs	r3, #22
 801d89c:	6003      	str	r3, [r0, #0]
 801d89e:	2000      	movs	r0, #0
 801d8a0:	b005      	add	sp, #20
 801d8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8a4:	9100      	str	r1, [sp, #0]
 801d8a6:	2d2b      	cmp	r5, #43	@ 0x2b
 801d8a8:	d1c5      	bne.n	801d836 <_strtol_l.constprop.0+0x3a>
 801d8aa:	7825      	ldrb	r5, [r4, #0]
 801d8ac:	1c9c      	adds	r4, r3, #2
 801d8ae:	e7c2      	b.n	801d836 <_strtol_l.constprop.0+0x3a>
 801d8b0:	2e00      	cmp	r6, #0
 801d8b2:	d1ce      	bne.n	801d852 <_strtol_l.constprop.0+0x56>
 801d8b4:	3608      	adds	r6, #8
 801d8b6:	2d30      	cmp	r5, #48	@ 0x30
 801d8b8:	d0cb      	beq.n	801d852 <_strtol_l.constprop.0+0x56>
 801d8ba:	3602      	adds	r6, #2
 801d8bc:	e7c9      	b.n	801d852 <_strtol_l.constprop.0+0x56>
 801d8be:	002b      	movs	r3, r5
 801d8c0:	3b41      	subs	r3, #65	@ 0x41
 801d8c2:	2b19      	cmp	r3, #25
 801d8c4:	d801      	bhi.n	801d8ca <_strtol_l.constprop.0+0xce>
 801d8c6:	3d37      	subs	r5, #55	@ 0x37
 801d8c8:	e7d4      	b.n	801d874 <_strtol_l.constprop.0+0x78>
 801d8ca:	002b      	movs	r3, r5
 801d8cc:	3b61      	subs	r3, #97	@ 0x61
 801d8ce:	2b19      	cmp	r3, #25
 801d8d0:	d804      	bhi.n	801d8dc <_strtol_l.constprop.0+0xe0>
 801d8d2:	3d57      	subs	r5, #87	@ 0x57
 801d8d4:	e7ce      	b.n	801d874 <_strtol_l.constprop.0+0x78>
 801d8d6:	2201      	movs	r2, #1
 801d8d8:	4252      	negs	r2, r2
 801d8da:	e7d9      	b.n	801d890 <_strtol_l.constprop.0+0x94>
 801d8dc:	1c53      	adds	r3, r2, #1
 801d8de:	d108      	bne.n	801d8f2 <_strtol_l.constprop.0+0xf6>
 801d8e0:	2322      	movs	r3, #34	@ 0x22
 801d8e2:	9a03      	ldr	r2, [sp, #12]
 801d8e4:	9802      	ldr	r0, [sp, #8]
 801d8e6:	6013      	str	r3, [r2, #0]
 801d8e8:	2f00      	cmp	r7, #0
 801d8ea:	d0d9      	beq.n	801d8a0 <_strtol_l.constprop.0+0xa4>
 801d8ec:	1e63      	subs	r3, r4, #1
 801d8ee:	9301      	str	r3, [sp, #4]
 801d8f0:	e007      	b.n	801d902 <_strtol_l.constprop.0+0x106>
 801d8f2:	9b00      	ldr	r3, [sp, #0]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d000      	beq.n	801d8fa <_strtol_l.constprop.0+0xfe>
 801d8f8:	4240      	negs	r0, r0
 801d8fa:	2f00      	cmp	r7, #0
 801d8fc:	d0d0      	beq.n	801d8a0 <_strtol_l.constprop.0+0xa4>
 801d8fe:	2a00      	cmp	r2, #0
 801d900:	d1f4      	bne.n	801d8ec <_strtol_l.constprop.0+0xf0>
 801d902:	9b01      	ldr	r3, [sp, #4]
 801d904:	603b      	str	r3, [r7, #0]
 801d906:	e7cb      	b.n	801d8a0 <_strtol_l.constprop.0+0xa4>
 801d908:	080238f1 	.word	0x080238f1
 801d90c:	7fffffff 	.word	0x7fffffff

0801d910 <strtol>:
 801d910:	b510      	push	{r4, lr}
 801d912:	4c04      	ldr	r4, [pc, #16]	@ (801d924 <strtol+0x14>)
 801d914:	0013      	movs	r3, r2
 801d916:	000a      	movs	r2, r1
 801d918:	0001      	movs	r1, r0
 801d91a:	6820      	ldr	r0, [r4, #0]
 801d91c:	f7ff ff6e 	bl	801d7fc <_strtol_l.constprop.0>
 801d920:	bd10      	pop	{r4, pc}
 801d922:	46c0      	nop			@ (mov r8, r8)
 801d924:	200003cc 	.word	0x200003cc

0801d928 <__cvt>:
 801d928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d92a:	001f      	movs	r7, r3
 801d92c:	2300      	movs	r3, #0
 801d92e:	0016      	movs	r6, r2
 801d930:	b08b      	sub	sp, #44	@ 0x2c
 801d932:	429f      	cmp	r7, r3
 801d934:	da04      	bge.n	801d940 <__cvt+0x18>
 801d936:	2180      	movs	r1, #128	@ 0x80
 801d938:	0609      	lsls	r1, r1, #24
 801d93a:	187b      	adds	r3, r7, r1
 801d93c:	001f      	movs	r7, r3
 801d93e:	232d      	movs	r3, #45	@ 0x2d
 801d940:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d942:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d944:	7013      	strb	r3, [r2, #0]
 801d946:	2320      	movs	r3, #32
 801d948:	2203      	movs	r2, #3
 801d94a:	439d      	bics	r5, r3
 801d94c:	2d46      	cmp	r5, #70	@ 0x46
 801d94e:	d007      	beq.n	801d960 <__cvt+0x38>
 801d950:	002b      	movs	r3, r5
 801d952:	3b45      	subs	r3, #69	@ 0x45
 801d954:	4259      	negs	r1, r3
 801d956:	414b      	adcs	r3, r1
 801d958:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d95a:	3a01      	subs	r2, #1
 801d95c:	18cb      	adds	r3, r1, r3
 801d95e:	9310      	str	r3, [sp, #64]	@ 0x40
 801d960:	ab09      	add	r3, sp, #36	@ 0x24
 801d962:	9304      	str	r3, [sp, #16]
 801d964:	ab08      	add	r3, sp, #32
 801d966:	9303      	str	r3, [sp, #12]
 801d968:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d96a:	9200      	str	r2, [sp, #0]
 801d96c:	9302      	str	r3, [sp, #8]
 801d96e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d970:	0032      	movs	r2, r6
 801d972:	9301      	str	r3, [sp, #4]
 801d974:	003b      	movs	r3, r7
 801d976:	f001 f82b 	bl	801e9d0 <_dtoa_r>
 801d97a:	0004      	movs	r4, r0
 801d97c:	2d47      	cmp	r5, #71	@ 0x47
 801d97e:	d11b      	bne.n	801d9b8 <__cvt+0x90>
 801d980:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d982:	07db      	lsls	r3, r3, #31
 801d984:	d511      	bpl.n	801d9aa <__cvt+0x82>
 801d986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d988:	18c3      	adds	r3, r0, r3
 801d98a:	9307      	str	r3, [sp, #28]
 801d98c:	2200      	movs	r2, #0
 801d98e:	2300      	movs	r3, #0
 801d990:	0030      	movs	r0, r6
 801d992:	0039      	movs	r1, r7
 801d994:	f7e2 fd8c 	bl	80004b0 <__aeabi_dcmpeq>
 801d998:	2800      	cmp	r0, #0
 801d99a:	d001      	beq.n	801d9a0 <__cvt+0x78>
 801d99c:	9b07      	ldr	r3, [sp, #28]
 801d99e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9a0:	2230      	movs	r2, #48	@ 0x30
 801d9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9a4:	9907      	ldr	r1, [sp, #28]
 801d9a6:	428b      	cmp	r3, r1
 801d9a8:	d320      	bcc.n	801d9ec <__cvt+0xc4>
 801d9aa:	0020      	movs	r0, r4
 801d9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d9b0:	1b1b      	subs	r3, r3, r4
 801d9b2:	6013      	str	r3, [r2, #0]
 801d9b4:	b00b      	add	sp, #44	@ 0x2c
 801d9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9ba:	18c3      	adds	r3, r0, r3
 801d9bc:	9307      	str	r3, [sp, #28]
 801d9be:	2d46      	cmp	r5, #70	@ 0x46
 801d9c0:	d1e4      	bne.n	801d98c <__cvt+0x64>
 801d9c2:	7803      	ldrb	r3, [r0, #0]
 801d9c4:	2b30      	cmp	r3, #48	@ 0x30
 801d9c6:	d10c      	bne.n	801d9e2 <__cvt+0xba>
 801d9c8:	2200      	movs	r2, #0
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	0030      	movs	r0, r6
 801d9ce:	0039      	movs	r1, r7
 801d9d0:	f7e2 fd6e 	bl	80004b0 <__aeabi_dcmpeq>
 801d9d4:	2800      	cmp	r0, #0
 801d9d6:	d104      	bne.n	801d9e2 <__cvt+0xba>
 801d9d8:	2301      	movs	r3, #1
 801d9da:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d9dc:	1a9b      	subs	r3, r3, r2
 801d9de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d9e0:	6013      	str	r3, [r2, #0]
 801d9e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d9e4:	9a07      	ldr	r2, [sp, #28]
 801d9e6:	681b      	ldr	r3, [r3, #0]
 801d9e8:	18d3      	adds	r3, r2, r3
 801d9ea:	e7ce      	b.n	801d98a <__cvt+0x62>
 801d9ec:	1c59      	adds	r1, r3, #1
 801d9ee:	9109      	str	r1, [sp, #36]	@ 0x24
 801d9f0:	701a      	strb	r2, [r3, #0]
 801d9f2:	e7d6      	b.n	801d9a2 <__cvt+0x7a>

0801d9f4 <__exponent>:
 801d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9f6:	232b      	movs	r3, #43	@ 0x2b
 801d9f8:	0005      	movs	r5, r0
 801d9fa:	000c      	movs	r4, r1
 801d9fc:	b085      	sub	sp, #20
 801d9fe:	7002      	strb	r2, [r0, #0]
 801da00:	2900      	cmp	r1, #0
 801da02:	da01      	bge.n	801da08 <__exponent+0x14>
 801da04:	424c      	negs	r4, r1
 801da06:	3302      	adds	r3, #2
 801da08:	706b      	strb	r3, [r5, #1]
 801da0a:	2c09      	cmp	r4, #9
 801da0c:	dd2c      	ble.n	801da68 <__exponent+0x74>
 801da0e:	ab02      	add	r3, sp, #8
 801da10:	1dde      	adds	r6, r3, #7
 801da12:	0020      	movs	r0, r4
 801da14:	210a      	movs	r1, #10
 801da16:	f7e2 fd35 	bl	8000484 <__aeabi_idivmod>
 801da1a:	0037      	movs	r7, r6
 801da1c:	3130      	adds	r1, #48	@ 0x30
 801da1e:	3e01      	subs	r6, #1
 801da20:	0020      	movs	r0, r4
 801da22:	7031      	strb	r1, [r6, #0]
 801da24:	210a      	movs	r1, #10
 801da26:	9401      	str	r4, [sp, #4]
 801da28:	f7e2 fc46 	bl	80002b8 <__divsi3>
 801da2c:	9b01      	ldr	r3, [sp, #4]
 801da2e:	0004      	movs	r4, r0
 801da30:	2b63      	cmp	r3, #99	@ 0x63
 801da32:	dcee      	bgt.n	801da12 <__exponent+0x1e>
 801da34:	1eba      	subs	r2, r7, #2
 801da36:	1ca8      	adds	r0, r5, #2
 801da38:	0001      	movs	r1, r0
 801da3a:	0013      	movs	r3, r2
 801da3c:	3430      	adds	r4, #48	@ 0x30
 801da3e:	7014      	strb	r4, [r2, #0]
 801da40:	ac02      	add	r4, sp, #8
 801da42:	3407      	adds	r4, #7
 801da44:	429c      	cmp	r4, r3
 801da46:	d80a      	bhi.n	801da5e <__exponent+0x6a>
 801da48:	2300      	movs	r3, #0
 801da4a:	42a2      	cmp	r2, r4
 801da4c:	d803      	bhi.n	801da56 <__exponent+0x62>
 801da4e:	3309      	adds	r3, #9
 801da50:	aa02      	add	r2, sp, #8
 801da52:	189b      	adds	r3, r3, r2
 801da54:	1bdb      	subs	r3, r3, r7
 801da56:	18c0      	adds	r0, r0, r3
 801da58:	1b40      	subs	r0, r0, r5
 801da5a:	b005      	add	sp, #20
 801da5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da5e:	781c      	ldrb	r4, [r3, #0]
 801da60:	3301      	adds	r3, #1
 801da62:	700c      	strb	r4, [r1, #0]
 801da64:	3101      	adds	r1, #1
 801da66:	e7eb      	b.n	801da40 <__exponent+0x4c>
 801da68:	2330      	movs	r3, #48	@ 0x30
 801da6a:	18e4      	adds	r4, r4, r3
 801da6c:	70ab      	strb	r3, [r5, #2]
 801da6e:	1d28      	adds	r0, r5, #4
 801da70:	70ec      	strb	r4, [r5, #3]
 801da72:	e7f1      	b.n	801da58 <__exponent+0x64>

0801da74 <_printf_float>:
 801da74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da76:	b097      	sub	sp, #92	@ 0x5c
 801da78:	000d      	movs	r5, r1
 801da7a:	920a      	str	r2, [sp, #40]	@ 0x28
 801da7c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801da7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da80:	9009      	str	r0, [sp, #36]	@ 0x24
 801da82:	f000 fe7d 	bl	801e780 <_localeconv_r>
 801da86:	6803      	ldr	r3, [r0, #0]
 801da88:	0018      	movs	r0, r3
 801da8a:	930d      	str	r3, [sp, #52]	@ 0x34
 801da8c:	f7e2 fb6e 	bl	800016c <strlen>
 801da90:	2300      	movs	r3, #0
 801da92:	900f      	str	r0, [sp, #60]	@ 0x3c
 801da94:	9314      	str	r3, [sp, #80]	@ 0x50
 801da96:	7e2b      	ldrb	r3, [r5, #24]
 801da98:	2207      	movs	r2, #7
 801da9a:	930c      	str	r3, [sp, #48]	@ 0x30
 801da9c:	682b      	ldr	r3, [r5, #0]
 801da9e:	930e      	str	r3, [sp, #56]	@ 0x38
 801daa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801daa2:	6823      	ldr	r3, [r4, #0]
 801daa4:	05c9      	lsls	r1, r1, #23
 801daa6:	d545      	bpl.n	801db34 <_printf_float+0xc0>
 801daa8:	189b      	adds	r3, r3, r2
 801daaa:	4393      	bics	r3, r2
 801daac:	001a      	movs	r2, r3
 801daae:	3208      	adds	r2, #8
 801dab0:	6022      	str	r2, [r4, #0]
 801dab2:	2201      	movs	r2, #1
 801dab4:	681e      	ldr	r6, [r3, #0]
 801dab6:	685f      	ldr	r7, [r3, #4]
 801dab8:	007b      	lsls	r3, r7, #1
 801daba:	085b      	lsrs	r3, r3, #1
 801dabc:	9311      	str	r3, [sp, #68]	@ 0x44
 801dabe:	9610      	str	r6, [sp, #64]	@ 0x40
 801dac0:	64ae      	str	r6, [r5, #72]	@ 0x48
 801dac2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801dac4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dac6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dac8:	4ba7      	ldr	r3, [pc, #668]	@ (801dd68 <_printf_float+0x2f4>)
 801daca:	4252      	negs	r2, r2
 801dacc:	f7e5 fc1a 	bl	8003304 <__aeabi_dcmpun>
 801dad0:	2800      	cmp	r0, #0
 801dad2:	d131      	bne.n	801db38 <_printf_float+0xc4>
 801dad4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dad6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dad8:	2201      	movs	r2, #1
 801dada:	4ba3      	ldr	r3, [pc, #652]	@ (801dd68 <_printf_float+0x2f4>)
 801dadc:	4252      	negs	r2, r2
 801dade:	f7e2 fcf7 	bl	80004d0 <__aeabi_dcmple>
 801dae2:	2800      	cmp	r0, #0
 801dae4:	d128      	bne.n	801db38 <_printf_float+0xc4>
 801dae6:	2200      	movs	r2, #0
 801dae8:	2300      	movs	r3, #0
 801daea:	0030      	movs	r0, r6
 801daec:	0039      	movs	r1, r7
 801daee:	f7e2 fce5 	bl	80004bc <__aeabi_dcmplt>
 801daf2:	2800      	cmp	r0, #0
 801daf4:	d003      	beq.n	801dafe <_printf_float+0x8a>
 801daf6:	002b      	movs	r3, r5
 801daf8:	222d      	movs	r2, #45	@ 0x2d
 801dafa:	3343      	adds	r3, #67	@ 0x43
 801dafc:	701a      	strb	r2, [r3, #0]
 801dafe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db00:	4f9a      	ldr	r7, [pc, #616]	@ (801dd6c <_printf_float+0x2f8>)
 801db02:	2b47      	cmp	r3, #71	@ 0x47
 801db04:	d900      	bls.n	801db08 <_printf_float+0x94>
 801db06:	4f9a      	ldr	r7, [pc, #616]	@ (801dd70 <_printf_float+0x2fc>)
 801db08:	2303      	movs	r3, #3
 801db0a:	2400      	movs	r4, #0
 801db0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db0e:	612b      	str	r3, [r5, #16]
 801db10:	3301      	adds	r3, #1
 801db12:	439a      	bics	r2, r3
 801db14:	602a      	str	r2, [r5, #0]
 801db16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db18:	0029      	movs	r1, r5
 801db1a:	9300      	str	r3, [sp, #0]
 801db1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801db20:	aa15      	add	r2, sp, #84	@ 0x54
 801db22:	f000 f9e5 	bl	801def0 <_printf_common>
 801db26:	3001      	adds	r0, #1
 801db28:	d000      	beq.n	801db2c <_printf_float+0xb8>
 801db2a:	e09f      	b.n	801dc6c <_printf_float+0x1f8>
 801db2c:	2001      	movs	r0, #1
 801db2e:	4240      	negs	r0, r0
 801db30:	b017      	add	sp, #92	@ 0x5c
 801db32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db34:	3307      	adds	r3, #7
 801db36:	e7b8      	b.n	801daaa <_printf_float+0x36>
 801db38:	0032      	movs	r2, r6
 801db3a:	003b      	movs	r3, r7
 801db3c:	0030      	movs	r0, r6
 801db3e:	0039      	movs	r1, r7
 801db40:	f7e5 fbe0 	bl	8003304 <__aeabi_dcmpun>
 801db44:	2800      	cmp	r0, #0
 801db46:	d00b      	beq.n	801db60 <_printf_float+0xec>
 801db48:	2f00      	cmp	r7, #0
 801db4a:	da03      	bge.n	801db54 <_printf_float+0xe0>
 801db4c:	002b      	movs	r3, r5
 801db4e:	222d      	movs	r2, #45	@ 0x2d
 801db50:	3343      	adds	r3, #67	@ 0x43
 801db52:	701a      	strb	r2, [r3, #0]
 801db54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db56:	4f87      	ldr	r7, [pc, #540]	@ (801dd74 <_printf_float+0x300>)
 801db58:	2b47      	cmp	r3, #71	@ 0x47
 801db5a:	d9d5      	bls.n	801db08 <_printf_float+0x94>
 801db5c:	4f86      	ldr	r7, [pc, #536]	@ (801dd78 <_printf_float+0x304>)
 801db5e:	e7d3      	b.n	801db08 <_printf_float+0x94>
 801db60:	2220      	movs	r2, #32
 801db62:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801db64:	686b      	ldr	r3, [r5, #4]
 801db66:	4394      	bics	r4, r2
 801db68:	1c5a      	adds	r2, r3, #1
 801db6a:	d146      	bne.n	801dbfa <_printf_float+0x186>
 801db6c:	3307      	adds	r3, #7
 801db6e:	606b      	str	r3, [r5, #4]
 801db70:	2380      	movs	r3, #128	@ 0x80
 801db72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db74:	00db      	lsls	r3, r3, #3
 801db76:	4313      	orrs	r3, r2
 801db78:	2200      	movs	r2, #0
 801db7a:	602b      	str	r3, [r5, #0]
 801db7c:	9206      	str	r2, [sp, #24]
 801db7e:	aa14      	add	r2, sp, #80	@ 0x50
 801db80:	9205      	str	r2, [sp, #20]
 801db82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801db84:	a90a      	add	r1, sp, #40	@ 0x28
 801db86:	9204      	str	r2, [sp, #16]
 801db88:	aa13      	add	r2, sp, #76	@ 0x4c
 801db8a:	9203      	str	r2, [sp, #12]
 801db8c:	2223      	movs	r2, #35	@ 0x23
 801db8e:	1852      	adds	r2, r2, r1
 801db90:	9202      	str	r2, [sp, #8]
 801db92:	9301      	str	r3, [sp, #4]
 801db94:	686b      	ldr	r3, [r5, #4]
 801db96:	0032      	movs	r2, r6
 801db98:	9300      	str	r3, [sp, #0]
 801db9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db9c:	003b      	movs	r3, r7
 801db9e:	f7ff fec3 	bl	801d928 <__cvt>
 801dba2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dba4:	0007      	movs	r7, r0
 801dba6:	2c47      	cmp	r4, #71	@ 0x47
 801dba8:	d12d      	bne.n	801dc06 <_printf_float+0x192>
 801dbaa:	1cd3      	adds	r3, r2, #3
 801dbac:	db02      	blt.n	801dbb4 <_printf_float+0x140>
 801dbae:	686b      	ldr	r3, [r5, #4]
 801dbb0:	429a      	cmp	r2, r3
 801dbb2:	dd48      	ble.n	801dc46 <_printf_float+0x1d2>
 801dbb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dbb6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801dbb8:	3b02      	subs	r3, #2
 801dbba:	b2db      	uxtb	r3, r3
 801dbbc:	930c      	str	r3, [sp, #48]	@ 0x30
 801dbbe:	0028      	movs	r0, r5
 801dbc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dbc2:	3901      	subs	r1, #1
 801dbc4:	3050      	adds	r0, #80	@ 0x50
 801dbc6:	9113      	str	r1, [sp, #76]	@ 0x4c
 801dbc8:	f7ff ff14 	bl	801d9f4 <__exponent>
 801dbcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dbce:	0004      	movs	r4, r0
 801dbd0:	1813      	adds	r3, r2, r0
 801dbd2:	612b      	str	r3, [r5, #16]
 801dbd4:	2a01      	cmp	r2, #1
 801dbd6:	dc02      	bgt.n	801dbde <_printf_float+0x16a>
 801dbd8:	682a      	ldr	r2, [r5, #0]
 801dbda:	07d2      	lsls	r2, r2, #31
 801dbdc:	d501      	bpl.n	801dbe2 <_printf_float+0x16e>
 801dbde:	3301      	adds	r3, #1
 801dbe0:	612b      	str	r3, [r5, #16]
 801dbe2:	2323      	movs	r3, #35	@ 0x23
 801dbe4:	aa0a      	add	r2, sp, #40	@ 0x28
 801dbe6:	189b      	adds	r3, r3, r2
 801dbe8:	781b      	ldrb	r3, [r3, #0]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d100      	bne.n	801dbf0 <_printf_float+0x17c>
 801dbee:	e792      	b.n	801db16 <_printf_float+0xa2>
 801dbf0:	002b      	movs	r3, r5
 801dbf2:	222d      	movs	r2, #45	@ 0x2d
 801dbf4:	3343      	adds	r3, #67	@ 0x43
 801dbf6:	701a      	strb	r2, [r3, #0]
 801dbf8:	e78d      	b.n	801db16 <_printf_float+0xa2>
 801dbfa:	2c47      	cmp	r4, #71	@ 0x47
 801dbfc:	d1b8      	bne.n	801db70 <_printf_float+0xfc>
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d1b6      	bne.n	801db70 <_printf_float+0xfc>
 801dc02:	3301      	adds	r3, #1
 801dc04:	e7b3      	b.n	801db6e <_printf_float+0xfa>
 801dc06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc08:	0011      	movs	r1, r2
 801dc0a:	2b65      	cmp	r3, #101	@ 0x65
 801dc0c:	d9d7      	bls.n	801dbbe <_printf_float+0x14a>
 801dc0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc10:	2b66      	cmp	r3, #102	@ 0x66
 801dc12:	d11a      	bne.n	801dc4a <_printf_float+0x1d6>
 801dc14:	686b      	ldr	r3, [r5, #4]
 801dc16:	2a00      	cmp	r2, #0
 801dc18:	dd09      	ble.n	801dc2e <_printf_float+0x1ba>
 801dc1a:	612a      	str	r2, [r5, #16]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d102      	bne.n	801dc26 <_printf_float+0x1b2>
 801dc20:	6829      	ldr	r1, [r5, #0]
 801dc22:	07c9      	lsls	r1, r1, #31
 801dc24:	d50b      	bpl.n	801dc3e <_printf_float+0x1ca>
 801dc26:	3301      	adds	r3, #1
 801dc28:	189b      	adds	r3, r3, r2
 801dc2a:	612b      	str	r3, [r5, #16]
 801dc2c:	e007      	b.n	801dc3e <_printf_float+0x1ca>
 801dc2e:	2b00      	cmp	r3, #0
 801dc30:	d103      	bne.n	801dc3a <_printf_float+0x1c6>
 801dc32:	2201      	movs	r2, #1
 801dc34:	6829      	ldr	r1, [r5, #0]
 801dc36:	4211      	tst	r1, r2
 801dc38:	d000      	beq.n	801dc3c <_printf_float+0x1c8>
 801dc3a:	1c9a      	adds	r2, r3, #2
 801dc3c:	612a      	str	r2, [r5, #16]
 801dc3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dc40:	2400      	movs	r4, #0
 801dc42:	65ab      	str	r3, [r5, #88]	@ 0x58
 801dc44:	e7cd      	b.n	801dbe2 <_printf_float+0x16e>
 801dc46:	2367      	movs	r3, #103	@ 0x67
 801dc48:	930c      	str	r3, [sp, #48]	@ 0x30
 801dc4a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801dc4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dc4e:	4299      	cmp	r1, r3
 801dc50:	db06      	blt.n	801dc60 <_printf_float+0x1ec>
 801dc52:	682b      	ldr	r3, [r5, #0]
 801dc54:	6129      	str	r1, [r5, #16]
 801dc56:	07db      	lsls	r3, r3, #31
 801dc58:	d5f1      	bpl.n	801dc3e <_printf_float+0x1ca>
 801dc5a:	3101      	adds	r1, #1
 801dc5c:	6129      	str	r1, [r5, #16]
 801dc5e:	e7ee      	b.n	801dc3e <_printf_float+0x1ca>
 801dc60:	2201      	movs	r2, #1
 801dc62:	2900      	cmp	r1, #0
 801dc64:	dce0      	bgt.n	801dc28 <_printf_float+0x1b4>
 801dc66:	1892      	adds	r2, r2, r2
 801dc68:	1a52      	subs	r2, r2, r1
 801dc6a:	e7dd      	b.n	801dc28 <_printf_float+0x1b4>
 801dc6c:	682a      	ldr	r2, [r5, #0]
 801dc6e:	0553      	lsls	r3, r2, #21
 801dc70:	d408      	bmi.n	801dc84 <_printf_float+0x210>
 801dc72:	692b      	ldr	r3, [r5, #16]
 801dc74:	003a      	movs	r2, r7
 801dc76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dc78:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dc7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dc7c:	47a0      	blx	r4
 801dc7e:	3001      	adds	r0, #1
 801dc80:	d129      	bne.n	801dcd6 <_printf_float+0x262>
 801dc82:	e753      	b.n	801db2c <_printf_float+0xb8>
 801dc84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc86:	2b65      	cmp	r3, #101	@ 0x65
 801dc88:	d800      	bhi.n	801dc8c <_printf_float+0x218>
 801dc8a:	e0da      	b.n	801de42 <_printf_float+0x3ce>
 801dc8c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801dc8e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801dc90:	2200      	movs	r2, #0
 801dc92:	2300      	movs	r3, #0
 801dc94:	f7e2 fc0c 	bl	80004b0 <__aeabi_dcmpeq>
 801dc98:	2800      	cmp	r0, #0
 801dc9a:	d033      	beq.n	801dd04 <_printf_float+0x290>
 801dc9c:	2301      	movs	r3, #1
 801dc9e:	4a37      	ldr	r2, [pc, #220]	@ (801dd7c <_printf_float+0x308>)
 801dca0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dca4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dca6:	47a0      	blx	r4
 801dca8:	3001      	adds	r0, #1
 801dcaa:	d100      	bne.n	801dcae <_printf_float+0x23a>
 801dcac:	e73e      	b.n	801db2c <_printf_float+0xb8>
 801dcae:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801dcb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dcb2:	42b3      	cmp	r3, r6
 801dcb4:	db02      	blt.n	801dcbc <_printf_float+0x248>
 801dcb6:	682b      	ldr	r3, [r5, #0]
 801dcb8:	07db      	lsls	r3, r3, #31
 801dcba:	d50c      	bpl.n	801dcd6 <_printf_float+0x262>
 801dcbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dcbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dcc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dcc4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dcc6:	47a0      	blx	r4
 801dcc8:	2400      	movs	r4, #0
 801dcca:	3001      	adds	r0, #1
 801dccc:	d100      	bne.n	801dcd0 <_printf_float+0x25c>
 801dcce:	e72d      	b.n	801db2c <_printf_float+0xb8>
 801dcd0:	1e73      	subs	r3, r6, #1
 801dcd2:	42a3      	cmp	r3, r4
 801dcd4:	dc0a      	bgt.n	801dcec <_printf_float+0x278>
 801dcd6:	682b      	ldr	r3, [r5, #0]
 801dcd8:	079b      	lsls	r3, r3, #30
 801dcda:	d500      	bpl.n	801dcde <_printf_float+0x26a>
 801dcdc:	e105      	b.n	801deea <_printf_float+0x476>
 801dcde:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dce0:	68e8      	ldr	r0, [r5, #12]
 801dce2:	4298      	cmp	r0, r3
 801dce4:	db00      	blt.n	801dce8 <_printf_float+0x274>
 801dce6:	e723      	b.n	801db30 <_printf_float+0xbc>
 801dce8:	0018      	movs	r0, r3
 801dcea:	e721      	b.n	801db30 <_printf_float+0xbc>
 801dcec:	002a      	movs	r2, r5
 801dcee:	2301      	movs	r3, #1
 801dcf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dcf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dcf4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dcf6:	321a      	adds	r2, #26
 801dcf8:	47b8      	blx	r7
 801dcfa:	3001      	adds	r0, #1
 801dcfc:	d100      	bne.n	801dd00 <_printf_float+0x28c>
 801dcfe:	e715      	b.n	801db2c <_printf_float+0xb8>
 801dd00:	3401      	adds	r4, #1
 801dd02:	e7e5      	b.n	801dcd0 <_printf_float+0x25c>
 801dd04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	dc3a      	bgt.n	801dd80 <_printf_float+0x30c>
 801dd0a:	2301      	movs	r3, #1
 801dd0c:	4a1b      	ldr	r2, [pc, #108]	@ (801dd7c <_printf_float+0x308>)
 801dd0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd14:	47a0      	blx	r4
 801dd16:	3001      	adds	r0, #1
 801dd18:	d100      	bne.n	801dd1c <_printf_float+0x2a8>
 801dd1a:	e707      	b.n	801db2c <_printf_float+0xb8>
 801dd1c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801dd1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd20:	4333      	orrs	r3, r6
 801dd22:	d102      	bne.n	801dd2a <_printf_float+0x2b6>
 801dd24:	682b      	ldr	r3, [r5, #0]
 801dd26:	07db      	lsls	r3, r3, #31
 801dd28:	d5d5      	bpl.n	801dcd6 <_printf_float+0x262>
 801dd2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dd2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd34:	47a0      	blx	r4
 801dd36:	2300      	movs	r3, #0
 801dd38:	3001      	adds	r0, #1
 801dd3a:	d100      	bne.n	801dd3e <_printf_float+0x2ca>
 801dd3c:	e6f6      	b.n	801db2c <_printf_float+0xb8>
 801dd3e:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd44:	425b      	negs	r3, r3
 801dd46:	4293      	cmp	r3, r2
 801dd48:	dc01      	bgt.n	801dd4e <_printf_float+0x2da>
 801dd4a:	0033      	movs	r3, r6
 801dd4c:	e792      	b.n	801dc74 <_printf_float+0x200>
 801dd4e:	002a      	movs	r2, r5
 801dd50:	2301      	movs	r3, #1
 801dd52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd58:	321a      	adds	r2, #26
 801dd5a:	47a0      	blx	r4
 801dd5c:	3001      	adds	r0, #1
 801dd5e:	d100      	bne.n	801dd62 <_printf_float+0x2ee>
 801dd60:	e6e4      	b.n	801db2c <_printf_float+0xb8>
 801dd62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd64:	3301      	adds	r3, #1
 801dd66:	e7ea      	b.n	801dd3e <_printf_float+0x2ca>
 801dd68:	7fefffff 	.word	0x7fefffff
 801dd6c:	080239f1 	.word	0x080239f1
 801dd70:	080239f5 	.word	0x080239f5
 801dd74:	080239f9 	.word	0x080239f9
 801dd78:	080239fd 	.word	0x080239fd
 801dd7c:	08023a01 	.word	0x08023a01
 801dd80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd82:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801dd84:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd86:	429e      	cmp	r6, r3
 801dd88:	dd00      	ble.n	801dd8c <_printf_float+0x318>
 801dd8a:	001e      	movs	r6, r3
 801dd8c:	2e00      	cmp	r6, #0
 801dd8e:	dc31      	bgt.n	801ddf4 <_printf_float+0x380>
 801dd90:	43f3      	mvns	r3, r6
 801dd92:	2400      	movs	r4, #0
 801dd94:	17db      	asrs	r3, r3, #31
 801dd96:	4033      	ands	r3, r6
 801dd98:	930e      	str	r3, [sp, #56]	@ 0x38
 801dd9a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801dd9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd9e:	1af3      	subs	r3, r6, r3
 801dda0:	42a3      	cmp	r3, r4
 801dda2:	dc30      	bgt.n	801de06 <_printf_float+0x392>
 801dda4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dda6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dda8:	429a      	cmp	r2, r3
 801ddaa:	dc38      	bgt.n	801de1e <_printf_float+0x3aa>
 801ddac:	682b      	ldr	r3, [r5, #0]
 801ddae:	07db      	lsls	r3, r3, #31
 801ddb0:	d435      	bmi.n	801de1e <_printf_float+0x3aa>
 801ddb2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ddb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ddb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ddb8:	1b9b      	subs	r3, r3, r6
 801ddba:	1b14      	subs	r4, r2, r4
 801ddbc:	429c      	cmp	r4, r3
 801ddbe:	dd00      	ble.n	801ddc2 <_printf_float+0x34e>
 801ddc0:	001c      	movs	r4, r3
 801ddc2:	2c00      	cmp	r4, #0
 801ddc4:	dc34      	bgt.n	801de30 <_printf_float+0x3bc>
 801ddc6:	43e3      	mvns	r3, r4
 801ddc8:	2600      	movs	r6, #0
 801ddca:	17db      	asrs	r3, r3, #31
 801ddcc:	401c      	ands	r4, r3
 801ddce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ddd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ddd2:	1ad3      	subs	r3, r2, r3
 801ddd4:	1b1b      	subs	r3, r3, r4
 801ddd6:	42b3      	cmp	r3, r6
 801ddd8:	dc00      	bgt.n	801dddc <_printf_float+0x368>
 801ddda:	e77c      	b.n	801dcd6 <_printf_float+0x262>
 801dddc:	002a      	movs	r2, r5
 801ddde:	2301      	movs	r3, #1
 801dde0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dde2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dde4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dde6:	321a      	adds	r2, #26
 801dde8:	47b8      	blx	r7
 801ddea:	3001      	adds	r0, #1
 801ddec:	d100      	bne.n	801ddf0 <_printf_float+0x37c>
 801ddee:	e69d      	b.n	801db2c <_printf_float+0xb8>
 801ddf0:	3601      	adds	r6, #1
 801ddf2:	e7ec      	b.n	801ddce <_printf_float+0x35a>
 801ddf4:	0033      	movs	r3, r6
 801ddf6:	003a      	movs	r2, r7
 801ddf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ddfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ddfc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ddfe:	47a0      	blx	r4
 801de00:	3001      	adds	r0, #1
 801de02:	d1c5      	bne.n	801dd90 <_printf_float+0x31c>
 801de04:	e692      	b.n	801db2c <_printf_float+0xb8>
 801de06:	002a      	movs	r2, r5
 801de08:	2301      	movs	r3, #1
 801de0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de0e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de10:	321a      	adds	r2, #26
 801de12:	47b0      	blx	r6
 801de14:	3001      	adds	r0, #1
 801de16:	d100      	bne.n	801de1a <_printf_float+0x3a6>
 801de18:	e688      	b.n	801db2c <_printf_float+0xb8>
 801de1a:	3401      	adds	r4, #1
 801de1c:	e7bd      	b.n	801dd9a <_printf_float+0x326>
 801de1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801de22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801de28:	47a0      	blx	r4
 801de2a:	3001      	adds	r0, #1
 801de2c:	d1c1      	bne.n	801ddb2 <_printf_float+0x33e>
 801de2e:	e67d      	b.n	801db2c <_printf_float+0xb8>
 801de30:	19ba      	adds	r2, r7, r6
 801de32:	0023      	movs	r3, r4
 801de34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de38:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de3a:	47b0      	blx	r6
 801de3c:	3001      	adds	r0, #1
 801de3e:	d1c2      	bne.n	801ddc6 <_printf_float+0x352>
 801de40:	e674      	b.n	801db2c <_printf_float+0xb8>
 801de42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801de44:	930c      	str	r3, [sp, #48]	@ 0x30
 801de46:	2b01      	cmp	r3, #1
 801de48:	dc02      	bgt.n	801de50 <_printf_float+0x3dc>
 801de4a:	2301      	movs	r3, #1
 801de4c:	421a      	tst	r2, r3
 801de4e:	d039      	beq.n	801dec4 <_printf_float+0x450>
 801de50:	2301      	movs	r3, #1
 801de52:	003a      	movs	r2, r7
 801de54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de5a:	47b0      	blx	r6
 801de5c:	3001      	adds	r0, #1
 801de5e:	d100      	bne.n	801de62 <_printf_float+0x3ee>
 801de60:	e664      	b.n	801db2c <_printf_float+0xb8>
 801de62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801de66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de68:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de6a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de6c:	47b0      	blx	r6
 801de6e:	3001      	adds	r0, #1
 801de70:	d100      	bne.n	801de74 <_printf_float+0x400>
 801de72:	e65b      	b.n	801db2c <_printf_float+0xb8>
 801de74:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801de76:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801de78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de7a:	2200      	movs	r2, #0
 801de7c:	3b01      	subs	r3, #1
 801de7e:	930c      	str	r3, [sp, #48]	@ 0x30
 801de80:	2300      	movs	r3, #0
 801de82:	f7e2 fb15 	bl	80004b0 <__aeabi_dcmpeq>
 801de86:	2800      	cmp	r0, #0
 801de88:	d11a      	bne.n	801dec0 <_printf_float+0x44c>
 801de8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de8c:	1c7a      	adds	r2, r7, #1
 801de8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de92:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de94:	47b0      	blx	r6
 801de96:	3001      	adds	r0, #1
 801de98:	d10e      	bne.n	801deb8 <_printf_float+0x444>
 801de9a:	e647      	b.n	801db2c <_printf_float+0xb8>
 801de9c:	002a      	movs	r2, r5
 801de9e:	2301      	movs	r3, #1
 801dea0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dea4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dea6:	321a      	adds	r2, #26
 801dea8:	47b8      	blx	r7
 801deaa:	3001      	adds	r0, #1
 801deac:	d100      	bne.n	801deb0 <_printf_float+0x43c>
 801deae:	e63d      	b.n	801db2c <_printf_float+0xb8>
 801deb0:	3601      	adds	r6, #1
 801deb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801deb4:	429e      	cmp	r6, r3
 801deb6:	dbf1      	blt.n	801de9c <_printf_float+0x428>
 801deb8:	002a      	movs	r2, r5
 801deba:	0023      	movs	r3, r4
 801debc:	3250      	adds	r2, #80	@ 0x50
 801debe:	e6da      	b.n	801dc76 <_printf_float+0x202>
 801dec0:	2600      	movs	r6, #0
 801dec2:	e7f6      	b.n	801deb2 <_printf_float+0x43e>
 801dec4:	003a      	movs	r2, r7
 801dec6:	e7e2      	b.n	801de8e <_printf_float+0x41a>
 801dec8:	002a      	movs	r2, r5
 801deca:	2301      	movs	r3, #1
 801decc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ded0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ded2:	3219      	adds	r2, #25
 801ded4:	47b0      	blx	r6
 801ded6:	3001      	adds	r0, #1
 801ded8:	d100      	bne.n	801dedc <_printf_float+0x468>
 801deda:	e627      	b.n	801db2c <_printf_float+0xb8>
 801dedc:	3401      	adds	r4, #1
 801dede:	68eb      	ldr	r3, [r5, #12]
 801dee0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801dee2:	1a9b      	subs	r3, r3, r2
 801dee4:	42a3      	cmp	r3, r4
 801dee6:	dcef      	bgt.n	801dec8 <_printf_float+0x454>
 801dee8:	e6f9      	b.n	801dcde <_printf_float+0x26a>
 801deea:	2400      	movs	r4, #0
 801deec:	e7f7      	b.n	801dede <_printf_float+0x46a>
 801deee:	46c0      	nop			@ (mov r8, r8)

0801def0 <_printf_common>:
 801def0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801def2:	0016      	movs	r6, r2
 801def4:	9301      	str	r3, [sp, #4]
 801def6:	688a      	ldr	r2, [r1, #8]
 801def8:	690b      	ldr	r3, [r1, #16]
 801defa:	000c      	movs	r4, r1
 801defc:	9000      	str	r0, [sp, #0]
 801defe:	4293      	cmp	r3, r2
 801df00:	da00      	bge.n	801df04 <_printf_common+0x14>
 801df02:	0013      	movs	r3, r2
 801df04:	0022      	movs	r2, r4
 801df06:	6033      	str	r3, [r6, #0]
 801df08:	3243      	adds	r2, #67	@ 0x43
 801df0a:	7812      	ldrb	r2, [r2, #0]
 801df0c:	2a00      	cmp	r2, #0
 801df0e:	d001      	beq.n	801df14 <_printf_common+0x24>
 801df10:	3301      	adds	r3, #1
 801df12:	6033      	str	r3, [r6, #0]
 801df14:	6823      	ldr	r3, [r4, #0]
 801df16:	069b      	lsls	r3, r3, #26
 801df18:	d502      	bpl.n	801df20 <_printf_common+0x30>
 801df1a:	6833      	ldr	r3, [r6, #0]
 801df1c:	3302      	adds	r3, #2
 801df1e:	6033      	str	r3, [r6, #0]
 801df20:	6822      	ldr	r2, [r4, #0]
 801df22:	2306      	movs	r3, #6
 801df24:	0015      	movs	r5, r2
 801df26:	401d      	ands	r5, r3
 801df28:	421a      	tst	r2, r3
 801df2a:	d027      	beq.n	801df7c <_printf_common+0x8c>
 801df2c:	0023      	movs	r3, r4
 801df2e:	3343      	adds	r3, #67	@ 0x43
 801df30:	781b      	ldrb	r3, [r3, #0]
 801df32:	1e5a      	subs	r2, r3, #1
 801df34:	4193      	sbcs	r3, r2
 801df36:	6822      	ldr	r2, [r4, #0]
 801df38:	0692      	lsls	r2, r2, #26
 801df3a:	d430      	bmi.n	801df9e <_printf_common+0xae>
 801df3c:	0022      	movs	r2, r4
 801df3e:	9901      	ldr	r1, [sp, #4]
 801df40:	9800      	ldr	r0, [sp, #0]
 801df42:	9d08      	ldr	r5, [sp, #32]
 801df44:	3243      	adds	r2, #67	@ 0x43
 801df46:	47a8      	blx	r5
 801df48:	3001      	adds	r0, #1
 801df4a:	d025      	beq.n	801df98 <_printf_common+0xa8>
 801df4c:	2206      	movs	r2, #6
 801df4e:	6823      	ldr	r3, [r4, #0]
 801df50:	2500      	movs	r5, #0
 801df52:	4013      	ands	r3, r2
 801df54:	2b04      	cmp	r3, #4
 801df56:	d105      	bne.n	801df64 <_printf_common+0x74>
 801df58:	6833      	ldr	r3, [r6, #0]
 801df5a:	68e5      	ldr	r5, [r4, #12]
 801df5c:	1aed      	subs	r5, r5, r3
 801df5e:	43eb      	mvns	r3, r5
 801df60:	17db      	asrs	r3, r3, #31
 801df62:	401d      	ands	r5, r3
 801df64:	68a3      	ldr	r3, [r4, #8]
 801df66:	6922      	ldr	r2, [r4, #16]
 801df68:	4293      	cmp	r3, r2
 801df6a:	dd01      	ble.n	801df70 <_printf_common+0x80>
 801df6c:	1a9b      	subs	r3, r3, r2
 801df6e:	18ed      	adds	r5, r5, r3
 801df70:	2600      	movs	r6, #0
 801df72:	42b5      	cmp	r5, r6
 801df74:	d120      	bne.n	801dfb8 <_printf_common+0xc8>
 801df76:	2000      	movs	r0, #0
 801df78:	e010      	b.n	801df9c <_printf_common+0xac>
 801df7a:	3501      	adds	r5, #1
 801df7c:	68e3      	ldr	r3, [r4, #12]
 801df7e:	6832      	ldr	r2, [r6, #0]
 801df80:	1a9b      	subs	r3, r3, r2
 801df82:	42ab      	cmp	r3, r5
 801df84:	ddd2      	ble.n	801df2c <_printf_common+0x3c>
 801df86:	0022      	movs	r2, r4
 801df88:	2301      	movs	r3, #1
 801df8a:	9901      	ldr	r1, [sp, #4]
 801df8c:	9800      	ldr	r0, [sp, #0]
 801df8e:	9f08      	ldr	r7, [sp, #32]
 801df90:	3219      	adds	r2, #25
 801df92:	47b8      	blx	r7
 801df94:	3001      	adds	r0, #1
 801df96:	d1f0      	bne.n	801df7a <_printf_common+0x8a>
 801df98:	2001      	movs	r0, #1
 801df9a:	4240      	negs	r0, r0
 801df9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801df9e:	2030      	movs	r0, #48	@ 0x30
 801dfa0:	18e1      	adds	r1, r4, r3
 801dfa2:	3143      	adds	r1, #67	@ 0x43
 801dfa4:	7008      	strb	r0, [r1, #0]
 801dfa6:	0021      	movs	r1, r4
 801dfa8:	1c5a      	adds	r2, r3, #1
 801dfaa:	3145      	adds	r1, #69	@ 0x45
 801dfac:	7809      	ldrb	r1, [r1, #0]
 801dfae:	18a2      	adds	r2, r4, r2
 801dfb0:	3243      	adds	r2, #67	@ 0x43
 801dfb2:	3302      	adds	r3, #2
 801dfb4:	7011      	strb	r1, [r2, #0]
 801dfb6:	e7c1      	b.n	801df3c <_printf_common+0x4c>
 801dfb8:	0022      	movs	r2, r4
 801dfba:	2301      	movs	r3, #1
 801dfbc:	9901      	ldr	r1, [sp, #4]
 801dfbe:	9800      	ldr	r0, [sp, #0]
 801dfc0:	9f08      	ldr	r7, [sp, #32]
 801dfc2:	321a      	adds	r2, #26
 801dfc4:	47b8      	blx	r7
 801dfc6:	3001      	adds	r0, #1
 801dfc8:	d0e6      	beq.n	801df98 <_printf_common+0xa8>
 801dfca:	3601      	adds	r6, #1
 801dfcc:	e7d1      	b.n	801df72 <_printf_common+0x82>
	...

0801dfd0 <_printf_i>:
 801dfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfd2:	b08b      	sub	sp, #44	@ 0x2c
 801dfd4:	9206      	str	r2, [sp, #24]
 801dfd6:	000a      	movs	r2, r1
 801dfd8:	3243      	adds	r2, #67	@ 0x43
 801dfda:	9307      	str	r3, [sp, #28]
 801dfdc:	9005      	str	r0, [sp, #20]
 801dfde:	9203      	str	r2, [sp, #12]
 801dfe0:	7e0a      	ldrb	r2, [r1, #24]
 801dfe2:	000c      	movs	r4, r1
 801dfe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dfe6:	2a78      	cmp	r2, #120	@ 0x78
 801dfe8:	d809      	bhi.n	801dffe <_printf_i+0x2e>
 801dfea:	2a62      	cmp	r2, #98	@ 0x62
 801dfec:	d80b      	bhi.n	801e006 <_printf_i+0x36>
 801dfee:	2a00      	cmp	r2, #0
 801dff0:	d100      	bne.n	801dff4 <_printf_i+0x24>
 801dff2:	e0bc      	b.n	801e16e <_printf_i+0x19e>
 801dff4:	497b      	ldr	r1, [pc, #492]	@ (801e1e4 <_printf_i+0x214>)
 801dff6:	9104      	str	r1, [sp, #16]
 801dff8:	2a58      	cmp	r2, #88	@ 0x58
 801dffa:	d100      	bne.n	801dffe <_printf_i+0x2e>
 801dffc:	e090      	b.n	801e120 <_printf_i+0x150>
 801dffe:	0025      	movs	r5, r4
 801e000:	3542      	adds	r5, #66	@ 0x42
 801e002:	702a      	strb	r2, [r5, #0]
 801e004:	e022      	b.n	801e04c <_printf_i+0x7c>
 801e006:	0010      	movs	r0, r2
 801e008:	3863      	subs	r0, #99	@ 0x63
 801e00a:	2815      	cmp	r0, #21
 801e00c:	d8f7      	bhi.n	801dffe <_printf_i+0x2e>
 801e00e:	f7e2 f8bf 	bl	8000190 <__gnu_thumb1_case_shi>
 801e012:	0016      	.short	0x0016
 801e014:	fff6001f 	.word	0xfff6001f
 801e018:	fff6fff6 	.word	0xfff6fff6
 801e01c:	001ffff6 	.word	0x001ffff6
 801e020:	fff6fff6 	.word	0xfff6fff6
 801e024:	fff6fff6 	.word	0xfff6fff6
 801e028:	003600a1 	.word	0x003600a1
 801e02c:	fff60080 	.word	0xfff60080
 801e030:	00b2fff6 	.word	0x00b2fff6
 801e034:	0036fff6 	.word	0x0036fff6
 801e038:	fff6fff6 	.word	0xfff6fff6
 801e03c:	0084      	.short	0x0084
 801e03e:	0025      	movs	r5, r4
 801e040:	681a      	ldr	r2, [r3, #0]
 801e042:	3542      	adds	r5, #66	@ 0x42
 801e044:	1d11      	adds	r1, r2, #4
 801e046:	6019      	str	r1, [r3, #0]
 801e048:	6813      	ldr	r3, [r2, #0]
 801e04a:	702b      	strb	r3, [r5, #0]
 801e04c:	2301      	movs	r3, #1
 801e04e:	e0a0      	b.n	801e192 <_printf_i+0x1c2>
 801e050:	6818      	ldr	r0, [r3, #0]
 801e052:	6809      	ldr	r1, [r1, #0]
 801e054:	1d02      	adds	r2, r0, #4
 801e056:	060d      	lsls	r5, r1, #24
 801e058:	d50b      	bpl.n	801e072 <_printf_i+0xa2>
 801e05a:	6806      	ldr	r6, [r0, #0]
 801e05c:	601a      	str	r2, [r3, #0]
 801e05e:	2e00      	cmp	r6, #0
 801e060:	da03      	bge.n	801e06a <_printf_i+0x9a>
 801e062:	232d      	movs	r3, #45	@ 0x2d
 801e064:	9a03      	ldr	r2, [sp, #12]
 801e066:	4276      	negs	r6, r6
 801e068:	7013      	strb	r3, [r2, #0]
 801e06a:	4b5e      	ldr	r3, [pc, #376]	@ (801e1e4 <_printf_i+0x214>)
 801e06c:	270a      	movs	r7, #10
 801e06e:	9304      	str	r3, [sp, #16]
 801e070:	e018      	b.n	801e0a4 <_printf_i+0xd4>
 801e072:	6806      	ldr	r6, [r0, #0]
 801e074:	601a      	str	r2, [r3, #0]
 801e076:	0649      	lsls	r1, r1, #25
 801e078:	d5f1      	bpl.n	801e05e <_printf_i+0x8e>
 801e07a:	b236      	sxth	r6, r6
 801e07c:	e7ef      	b.n	801e05e <_printf_i+0x8e>
 801e07e:	6808      	ldr	r0, [r1, #0]
 801e080:	6819      	ldr	r1, [r3, #0]
 801e082:	c940      	ldmia	r1!, {r6}
 801e084:	0605      	lsls	r5, r0, #24
 801e086:	d402      	bmi.n	801e08e <_printf_i+0xbe>
 801e088:	0640      	lsls	r0, r0, #25
 801e08a:	d500      	bpl.n	801e08e <_printf_i+0xbe>
 801e08c:	b2b6      	uxth	r6, r6
 801e08e:	6019      	str	r1, [r3, #0]
 801e090:	4b54      	ldr	r3, [pc, #336]	@ (801e1e4 <_printf_i+0x214>)
 801e092:	270a      	movs	r7, #10
 801e094:	9304      	str	r3, [sp, #16]
 801e096:	2a6f      	cmp	r2, #111	@ 0x6f
 801e098:	d100      	bne.n	801e09c <_printf_i+0xcc>
 801e09a:	3f02      	subs	r7, #2
 801e09c:	0023      	movs	r3, r4
 801e09e:	2200      	movs	r2, #0
 801e0a0:	3343      	adds	r3, #67	@ 0x43
 801e0a2:	701a      	strb	r2, [r3, #0]
 801e0a4:	6863      	ldr	r3, [r4, #4]
 801e0a6:	60a3      	str	r3, [r4, #8]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	db03      	blt.n	801e0b4 <_printf_i+0xe4>
 801e0ac:	2104      	movs	r1, #4
 801e0ae:	6822      	ldr	r2, [r4, #0]
 801e0b0:	438a      	bics	r2, r1
 801e0b2:	6022      	str	r2, [r4, #0]
 801e0b4:	2e00      	cmp	r6, #0
 801e0b6:	d102      	bne.n	801e0be <_printf_i+0xee>
 801e0b8:	9d03      	ldr	r5, [sp, #12]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d00c      	beq.n	801e0d8 <_printf_i+0x108>
 801e0be:	9d03      	ldr	r5, [sp, #12]
 801e0c0:	0030      	movs	r0, r6
 801e0c2:	0039      	movs	r1, r7
 801e0c4:	f7e2 f8f4 	bl	80002b0 <__aeabi_uidivmod>
 801e0c8:	9b04      	ldr	r3, [sp, #16]
 801e0ca:	3d01      	subs	r5, #1
 801e0cc:	5c5b      	ldrb	r3, [r3, r1]
 801e0ce:	702b      	strb	r3, [r5, #0]
 801e0d0:	0033      	movs	r3, r6
 801e0d2:	0006      	movs	r6, r0
 801e0d4:	429f      	cmp	r7, r3
 801e0d6:	d9f3      	bls.n	801e0c0 <_printf_i+0xf0>
 801e0d8:	2f08      	cmp	r7, #8
 801e0da:	d109      	bne.n	801e0f0 <_printf_i+0x120>
 801e0dc:	6823      	ldr	r3, [r4, #0]
 801e0de:	07db      	lsls	r3, r3, #31
 801e0e0:	d506      	bpl.n	801e0f0 <_printf_i+0x120>
 801e0e2:	6862      	ldr	r2, [r4, #4]
 801e0e4:	6923      	ldr	r3, [r4, #16]
 801e0e6:	429a      	cmp	r2, r3
 801e0e8:	dc02      	bgt.n	801e0f0 <_printf_i+0x120>
 801e0ea:	2330      	movs	r3, #48	@ 0x30
 801e0ec:	3d01      	subs	r5, #1
 801e0ee:	702b      	strb	r3, [r5, #0]
 801e0f0:	9b03      	ldr	r3, [sp, #12]
 801e0f2:	1b5b      	subs	r3, r3, r5
 801e0f4:	6123      	str	r3, [r4, #16]
 801e0f6:	9b07      	ldr	r3, [sp, #28]
 801e0f8:	0021      	movs	r1, r4
 801e0fa:	9300      	str	r3, [sp, #0]
 801e0fc:	9805      	ldr	r0, [sp, #20]
 801e0fe:	9b06      	ldr	r3, [sp, #24]
 801e100:	aa09      	add	r2, sp, #36	@ 0x24
 801e102:	f7ff fef5 	bl	801def0 <_printf_common>
 801e106:	3001      	adds	r0, #1
 801e108:	d148      	bne.n	801e19c <_printf_i+0x1cc>
 801e10a:	2001      	movs	r0, #1
 801e10c:	4240      	negs	r0, r0
 801e10e:	b00b      	add	sp, #44	@ 0x2c
 801e110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e112:	2220      	movs	r2, #32
 801e114:	6809      	ldr	r1, [r1, #0]
 801e116:	430a      	orrs	r2, r1
 801e118:	6022      	str	r2, [r4, #0]
 801e11a:	2278      	movs	r2, #120	@ 0x78
 801e11c:	4932      	ldr	r1, [pc, #200]	@ (801e1e8 <_printf_i+0x218>)
 801e11e:	9104      	str	r1, [sp, #16]
 801e120:	0021      	movs	r1, r4
 801e122:	3145      	adds	r1, #69	@ 0x45
 801e124:	700a      	strb	r2, [r1, #0]
 801e126:	6819      	ldr	r1, [r3, #0]
 801e128:	6822      	ldr	r2, [r4, #0]
 801e12a:	c940      	ldmia	r1!, {r6}
 801e12c:	0610      	lsls	r0, r2, #24
 801e12e:	d402      	bmi.n	801e136 <_printf_i+0x166>
 801e130:	0650      	lsls	r0, r2, #25
 801e132:	d500      	bpl.n	801e136 <_printf_i+0x166>
 801e134:	b2b6      	uxth	r6, r6
 801e136:	6019      	str	r1, [r3, #0]
 801e138:	07d3      	lsls	r3, r2, #31
 801e13a:	d502      	bpl.n	801e142 <_printf_i+0x172>
 801e13c:	2320      	movs	r3, #32
 801e13e:	4313      	orrs	r3, r2
 801e140:	6023      	str	r3, [r4, #0]
 801e142:	2e00      	cmp	r6, #0
 801e144:	d001      	beq.n	801e14a <_printf_i+0x17a>
 801e146:	2710      	movs	r7, #16
 801e148:	e7a8      	b.n	801e09c <_printf_i+0xcc>
 801e14a:	2220      	movs	r2, #32
 801e14c:	6823      	ldr	r3, [r4, #0]
 801e14e:	4393      	bics	r3, r2
 801e150:	6023      	str	r3, [r4, #0]
 801e152:	e7f8      	b.n	801e146 <_printf_i+0x176>
 801e154:	681a      	ldr	r2, [r3, #0]
 801e156:	680d      	ldr	r5, [r1, #0]
 801e158:	1d10      	adds	r0, r2, #4
 801e15a:	6949      	ldr	r1, [r1, #20]
 801e15c:	6018      	str	r0, [r3, #0]
 801e15e:	6813      	ldr	r3, [r2, #0]
 801e160:	062e      	lsls	r6, r5, #24
 801e162:	d501      	bpl.n	801e168 <_printf_i+0x198>
 801e164:	6019      	str	r1, [r3, #0]
 801e166:	e002      	b.n	801e16e <_printf_i+0x19e>
 801e168:	066d      	lsls	r5, r5, #25
 801e16a:	d5fb      	bpl.n	801e164 <_printf_i+0x194>
 801e16c:	8019      	strh	r1, [r3, #0]
 801e16e:	2300      	movs	r3, #0
 801e170:	9d03      	ldr	r5, [sp, #12]
 801e172:	6123      	str	r3, [r4, #16]
 801e174:	e7bf      	b.n	801e0f6 <_printf_i+0x126>
 801e176:	681a      	ldr	r2, [r3, #0]
 801e178:	1d11      	adds	r1, r2, #4
 801e17a:	6019      	str	r1, [r3, #0]
 801e17c:	6815      	ldr	r5, [r2, #0]
 801e17e:	2100      	movs	r1, #0
 801e180:	0028      	movs	r0, r5
 801e182:	6862      	ldr	r2, [r4, #4]
 801e184:	f000 fb7b 	bl	801e87e <memchr>
 801e188:	2800      	cmp	r0, #0
 801e18a:	d001      	beq.n	801e190 <_printf_i+0x1c0>
 801e18c:	1b40      	subs	r0, r0, r5
 801e18e:	6060      	str	r0, [r4, #4]
 801e190:	6863      	ldr	r3, [r4, #4]
 801e192:	6123      	str	r3, [r4, #16]
 801e194:	2300      	movs	r3, #0
 801e196:	9a03      	ldr	r2, [sp, #12]
 801e198:	7013      	strb	r3, [r2, #0]
 801e19a:	e7ac      	b.n	801e0f6 <_printf_i+0x126>
 801e19c:	002a      	movs	r2, r5
 801e19e:	6923      	ldr	r3, [r4, #16]
 801e1a0:	9906      	ldr	r1, [sp, #24]
 801e1a2:	9805      	ldr	r0, [sp, #20]
 801e1a4:	9d07      	ldr	r5, [sp, #28]
 801e1a6:	47a8      	blx	r5
 801e1a8:	3001      	adds	r0, #1
 801e1aa:	d0ae      	beq.n	801e10a <_printf_i+0x13a>
 801e1ac:	6823      	ldr	r3, [r4, #0]
 801e1ae:	079b      	lsls	r3, r3, #30
 801e1b0:	d415      	bmi.n	801e1de <_printf_i+0x20e>
 801e1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1b4:	68e0      	ldr	r0, [r4, #12]
 801e1b6:	4298      	cmp	r0, r3
 801e1b8:	daa9      	bge.n	801e10e <_printf_i+0x13e>
 801e1ba:	0018      	movs	r0, r3
 801e1bc:	e7a7      	b.n	801e10e <_printf_i+0x13e>
 801e1be:	0022      	movs	r2, r4
 801e1c0:	2301      	movs	r3, #1
 801e1c2:	9906      	ldr	r1, [sp, #24]
 801e1c4:	9805      	ldr	r0, [sp, #20]
 801e1c6:	9e07      	ldr	r6, [sp, #28]
 801e1c8:	3219      	adds	r2, #25
 801e1ca:	47b0      	blx	r6
 801e1cc:	3001      	adds	r0, #1
 801e1ce:	d09c      	beq.n	801e10a <_printf_i+0x13a>
 801e1d0:	3501      	adds	r5, #1
 801e1d2:	68e3      	ldr	r3, [r4, #12]
 801e1d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e1d6:	1a9b      	subs	r3, r3, r2
 801e1d8:	42ab      	cmp	r3, r5
 801e1da:	dcf0      	bgt.n	801e1be <_printf_i+0x1ee>
 801e1dc:	e7e9      	b.n	801e1b2 <_printf_i+0x1e2>
 801e1de:	2500      	movs	r5, #0
 801e1e0:	e7f7      	b.n	801e1d2 <_printf_i+0x202>
 801e1e2:	46c0      	nop			@ (mov r8, r8)
 801e1e4:	08023a03 	.word	0x08023a03
 801e1e8:	08023a14 	.word	0x08023a14

0801e1ec <std>:
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	b510      	push	{r4, lr}
 801e1f0:	0004      	movs	r4, r0
 801e1f2:	6003      	str	r3, [r0, #0]
 801e1f4:	6043      	str	r3, [r0, #4]
 801e1f6:	6083      	str	r3, [r0, #8]
 801e1f8:	8181      	strh	r1, [r0, #12]
 801e1fa:	6643      	str	r3, [r0, #100]	@ 0x64
 801e1fc:	81c2      	strh	r2, [r0, #14]
 801e1fe:	6103      	str	r3, [r0, #16]
 801e200:	6143      	str	r3, [r0, #20]
 801e202:	6183      	str	r3, [r0, #24]
 801e204:	0019      	movs	r1, r3
 801e206:	2208      	movs	r2, #8
 801e208:	305c      	adds	r0, #92	@ 0x5c
 801e20a:	f000 fa67 	bl	801e6dc <memset>
 801e20e:	4b0b      	ldr	r3, [pc, #44]	@ (801e23c <std+0x50>)
 801e210:	6224      	str	r4, [r4, #32]
 801e212:	6263      	str	r3, [r4, #36]	@ 0x24
 801e214:	4b0a      	ldr	r3, [pc, #40]	@ (801e240 <std+0x54>)
 801e216:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e218:	4b0a      	ldr	r3, [pc, #40]	@ (801e244 <std+0x58>)
 801e21a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e21c:	4b0a      	ldr	r3, [pc, #40]	@ (801e248 <std+0x5c>)
 801e21e:	6323      	str	r3, [r4, #48]	@ 0x30
 801e220:	4b0a      	ldr	r3, [pc, #40]	@ (801e24c <std+0x60>)
 801e222:	429c      	cmp	r4, r3
 801e224:	d005      	beq.n	801e232 <std+0x46>
 801e226:	4b0a      	ldr	r3, [pc, #40]	@ (801e250 <std+0x64>)
 801e228:	429c      	cmp	r4, r3
 801e22a:	d002      	beq.n	801e232 <std+0x46>
 801e22c:	4b09      	ldr	r3, [pc, #36]	@ (801e254 <std+0x68>)
 801e22e:	429c      	cmp	r4, r3
 801e230:	d103      	bne.n	801e23a <std+0x4e>
 801e232:	0020      	movs	r0, r4
 801e234:	3058      	adds	r0, #88	@ 0x58
 801e236:	f000 fb1f 	bl	801e878 <__retarget_lock_init_recursive>
 801e23a:	bd10      	pop	{r4, pc}
 801e23c:	0801e495 	.word	0x0801e495
 801e240:	0801e4bd 	.word	0x0801e4bd
 801e244:	0801e4f5 	.word	0x0801e4f5
 801e248:	0801e521 	.word	0x0801e521
 801e24c:	200037b8 	.word	0x200037b8
 801e250:	20003820 	.word	0x20003820
 801e254:	20003888 	.word	0x20003888

0801e258 <stdio_exit_handler>:
 801e258:	b510      	push	{r4, lr}
 801e25a:	4a03      	ldr	r2, [pc, #12]	@ (801e268 <stdio_exit_handler+0x10>)
 801e25c:	4903      	ldr	r1, [pc, #12]	@ (801e26c <stdio_exit_handler+0x14>)
 801e25e:	4804      	ldr	r0, [pc, #16]	@ (801e270 <stdio_exit_handler+0x18>)
 801e260:	f000 f86c 	bl	801e33c <_fwalk_sglue>
 801e264:	bd10      	pop	{r4, pc}
 801e266:	46c0      	nop			@ (mov r8, r8)
 801e268:	20000254 	.word	0x20000254
 801e26c:	08020e9d 	.word	0x08020e9d
 801e270:	200003d0 	.word	0x200003d0

0801e274 <cleanup_stdio>:
 801e274:	6841      	ldr	r1, [r0, #4]
 801e276:	4b0b      	ldr	r3, [pc, #44]	@ (801e2a4 <cleanup_stdio+0x30>)
 801e278:	b510      	push	{r4, lr}
 801e27a:	0004      	movs	r4, r0
 801e27c:	4299      	cmp	r1, r3
 801e27e:	d001      	beq.n	801e284 <cleanup_stdio+0x10>
 801e280:	f002 fe0c 	bl	8020e9c <_fflush_r>
 801e284:	68a1      	ldr	r1, [r4, #8]
 801e286:	4b08      	ldr	r3, [pc, #32]	@ (801e2a8 <cleanup_stdio+0x34>)
 801e288:	4299      	cmp	r1, r3
 801e28a:	d002      	beq.n	801e292 <cleanup_stdio+0x1e>
 801e28c:	0020      	movs	r0, r4
 801e28e:	f002 fe05 	bl	8020e9c <_fflush_r>
 801e292:	68e1      	ldr	r1, [r4, #12]
 801e294:	4b05      	ldr	r3, [pc, #20]	@ (801e2ac <cleanup_stdio+0x38>)
 801e296:	4299      	cmp	r1, r3
 801e298:	d002      	beq.n	801e2a0 <cleanup_stdio+0x2c>
 801e29a:	0020      	movs	r0, r4
 801e29c:	f002 fdfe 	bl	8020e9c <_fflush_r>
 801e2a0:	bd10      	pop	{r4, pc}
 801e2a2:	46c0      	nop			@ (mov r8, r8)
 801e2a4:	200037b8 	.word	0x200037b8
 801e2a8:	20003820 	.word	0x20003820
 801e2ac:	20003888 	.word	0x20003888

0801e2b0 <global_stdio_init.part.0>:
 801e2b0:	b510      	push	{r4, lr}
 801e2b2:	4b09      	ldr	r3, [pc, #36]	@ (801e2d8 <global_stdio_init.part.0+0x28>)
 801e2b4:	4a09      	ldr	r2, [pc, #36]	@ (801e2dc <global_stdio_init.part.0+0x2c>)
 801e2b6:	2104      	movs	r1, #4
 801e2b8:	601a      	str	r2, [r3, #0]
 801e2ba:	4809      	ldr	r0, [pc, #36]	@ (801e2e0 <global_stdio_init.part.0+0x30>)
 801e2bc:	2200      	movs	r2, #0
 801e2be:	f7ff ff95 	bl	801e1ec <std>
 801e2c2:	2201      	movs	r2, #1
 801e2c4:	2109      	movs	r1, #9
 801e2c6:	4807      	ldr	r0, [pc, #28]	@ (801e2e4 <global_stdio_init.part.0+0x34>)
 801e2c8:	f7ff ff90 	bl	801e1ec <std>
 801e2cc:	2202      	movs	r2, #2
 801e2ce:	2112      	movs	r1, #18
 801e2d0:	4805      	ldr	r0, [pc, #20]	@ (801e2e8 <global_stdio_init.part.0+0x38>)
 801e2d2:	f7ff ff8b 	bl	801e1ec <std>
 801e2d6:	bd10      	pop	{r4, pc}
 801e2d8:	200038f0 	.word	0x200038f0
 801e2dc:	0801e259 	.word	0x0801e259
 801e2e0:	200037b8 	.word	0x200037b8
 801e2e4:	20003820 	.word	0x20003820
 801e2e8:	20003888 	.word	0x20003888

0801e2ec <__sfp_lock_acquire>:
 801e2ec:	b510      	push	{r4, lr}
 801e2ee:	4802      	ldr	r0, [pc, #8]	@ (801e2f8 <__sfp_lock_acquire+0xc>)
 801e2f0:	f000 fac3 	bl	801e87a <__retarget_lock_acquire_recursive>
 801e2f4:	bd10      	pop	{r4, pc}
 801e2f6:	46c0      	nop			@ (mov r8, r8)
 801e2f8:	200038f9 	.word	0x200038f9

0801e2fc <__sfp_lock_release>:
 801e2fc:	b510      	push	{r4, lr}
 801e2fe:	4802      	ldr	r0, [pc, #8]	@ (801e308 <__sfp_lock_release+0xc>)
 801e300:	f000 fabc 	bl	801e87c <__retarget_lock_release_recursive>
 801e304:	bd10      	pop	{r4, pc}
 801e306:	46c0      	nop			@ (mov r8, r8)
 801e308:	200038f9 	.word	0x200038f9

0801e30c <__sinit>:
 801e30c:	b510      	push	{r4, lr}
 801e30e:	0004      	movs	r4, r0
 801e310:	f7ff ffec 	bl	801e2ec <__sfp_lock_acquire>
 801e314:	6a23      	ldr	r3, [r4, #32]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d002      	beq.n	801e320 <__sinit+0x14>
 801e31a:	f7ff ffef 	bl	801e2fc <__sfp_lock_release>
 801e31e:	bd10      	pop	{r4, pc}
 801e320:	4b04      	ldr	r3, [pc, #16]	@ (801e334 <__sinit+0x28>)
 801e322:	6223      	str	r3, [r4, #32]
 801e324:	4b04      	ldr	r3, [pc, #16]	@ (801e338 <__sinit+0x2c>)
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d1f6      	bne.n	801e31a <__sinit+0xe>
 801e32c:	f7ff ffc0 	bl	801e2b0 <global_stdio_init.part.0>
 801e330:	e7f3      	b.n	801e31a <__sinit+0xe>
 801e332:	46c0      	nop			@ (mov r8, r8)
 801e334:	0801e275 	.word	0x0801e275
 801e338:	200038f0 	.word	0x200038f0

0801e33c <_fwalk_sglue>:
 801e33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e33e:	0014      	movs	r4, r2
 801e340:	2600      	movs	r6, #0
 801e342:	9000      	str	r0, [sp, #0]
 801e344:	9101      	str	r1, [sp, #4]
 801e346:	68a5      	ldr	r5, [r4, #8]
 801e348:	6867      	ldr	r7, [r4, #4]
 801e34a:	3f01      	subs	r7, #1
 801e34c:	d504      	bpl.n	801e358 <_fwalk_sglue+0x1c>
 801e34e:	6824      	ldr	r4, [r4, #0]
 801e350:	2c00      	cmp	r4, #0
 801e352:	d1f8      	bne.n	801e346 <_fwalk_sglue+0xa>
 801e354:	0030      	movs	r0, r6
 801e356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e358:	89ab      	ldrh	r3, [r5, #12]
 801e35a:	2b01      	cmp	r3, #1
 801e35c:	d908      	bls.n	801e370 <_fwalk_sglue+0x34>
 801e35e:	220e      	movs	r2, #14
 801e360:	5eab      	ldrsh	r3, [r5, r2]
 801e362:	3301      	adds	r3, #1
 801e364:	d004      	beq.n	801e370 <_fwalk_sglue+0x34>
 801e366:	0029      	movs	r1, r5
 801e368:	9800      	ldr	r0, [sp, #0]
 801e36a:	9b01      	ldr	r3, [sp, #4]
 801e36c:	4798      	blx	r3
 801e36e:	4306      	orrs	r6, r0
 801e370:	3568      	adds	r5, #104	@ 0x68
 801e372:	e7ea      	b.n	801e34a <_fwalk_sglue+0xe>

0801e374 <iprintf>:
 801e374:	b40f      	push	{r0, r1, r2, r3}
 801e376:	b507      	push	{r0, r1, r2, lr}
 801e378:	4905      	ldr	r1, [pc, #20]	@ (801e390 <iprintf+0x1c>)
 801e37a:	ab04      	add	r3, sp, #16
 801e37c:	6808      	ldr	r0, [r1, #0]
 801e37e:	cb04      	ldmia	r3!, {r2}
 801e380:	6881      	ldr	r1, [r0, #8]
 801e382:	9301      	str	r3, [sp, #4]
 801e384:	f002 fbe8 	bl	8020b58 <_vfiprintf_r>
 801e388:	b003      	add	sp, #12
 801e38a:	bc08      	pop	{r3}
 801e38c:	b004      	add	sp, #16
 801e38e:	4718      	bx	r3
 801e390:	200003cc 	.word	0x200003cc

0801e394 <_puts_r>:
 801e394:	6a03      	ldr	r3, [r0, #32]
 801e396:	b570      	push	{r4, r5, r6, lr}
 801e398:	0005      	movs	r5, r0
 801e39a:	000e      	movs	r6, r1
 801e39c:	6884      	ldr	r4, [r0, #8]
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d101      	bne.n	801e3a6 <_puts_r+0x12>
 801e3a2:	f7ff ffb3 	bl	801e30c <__sinit>
 801e3a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e3a8:	07db      	lsls	r3, r3, #31
 801e3aa:	d405      	bmi.n	801e3b8 <_puts_r+0x24>
 801e3ac:	89a3      	ldrh	r3, [r4, #12]
 801e3ae:	059b      	lsls	r3, r3, #22
 801e3b0:	d402      	bmi.n	801e3b8 <_puts_r+0x24>
 801e3b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e3b4:	f000 fa61 	bl	801e87a <__retarget_lock_acquire_recursive>
 801e3b8:	89a3      	ldrh	r3, [r4, #12]
 801e3ba:	071b      	lsls	r3, r3, #28
 801e3bc:	d502      	bpl.n	801e3c4 <_puts_r+0x30>
 801e3be:	6923      	ldr	r3, [r4, #16]
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d11f      	bne.n	801e404 <_puts_r+0x70>
 801e3c4:	0021      	movs	r1, r4
 801e3c6:	0028      	movs	r0, r5
 801e3c8:	f000 f92a 	bl	801e620 <__swsetup_r>
 801e3cc:	2800      	cmp	r0, #0
 801e3ce:	d019      	beq.n	801e404 <_puts_r+0x70>
 801e3d0:	2501      	movs	r5, #1
 801e3d2:	426d      	negs	r5, r5
 801e3d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e3d6:	07db      	lsls	r3, r3, #31
 801e3d8:	d405      	bmi.n	801e3e6 <_puts_r+0x52>
 801e3da:	89a3      	ldrh	r3, [r4, #12]
 801e3dc:	059b      	lsls	r3, r3, #22
 801e3de:	d402      	bmi.n	801e3e6 <_puts_r+0x52>
 801e3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e3e2:	f000 fa4b 	bl	801e87c <__retarget_lock_release_recursive>
 801e3e6:	0028      	movs	r0, r5
 801e3e8:	bd70      	pop	{r4, r5, r6, pc}
 801e3ea:	3601      	adds	r6, #1
 801e3ec:	60a3      	str	r3, [r4, #8]
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	da04      	bge.n	801e3fc <_puts_r+0x68>
 801e3f2:	69a2      	ldr	r2, [r4, #24]
 801e3f4:	429a      	cmp	r2, r3
 801e3f6:	dc16      	bgt.n	801e426 <_puts_r+0x92>
 801e3f8:	290a      	cmp	r1, #10
 801e3fa:	d014      	beq.n	801e426 <_puts_r+0x92>
 801e3fc:	6823      	ldr	r3, [r4, #0]
 801e3fe:	1c5a      	adds	r2, r3, #1
 801e400:	6022      	str	r2, [r4, #0]
 801e402:	7019      	strb	r1, [r3, #0]
 801e404:	68a3      	ldr	r3, [r4, #8]
 801e406:	7831      	ldrb	r1, [r6, #0]
 801e408:	3b01      	subs	r3, #1
 801e40a:	2900      	cmp	r1, #0
 801e40c:	d1ed      	bne.n	801e3ea <_puts_r+0x56>
 801e40e:	60a3      	str	r3, [r4, #8]
 801e410:	2b00      	cmp	r3, #0
 801e412:	da0f      	bge.n	801e434 <_puts_r+0xa0>
 801e414:	0022      	movs	r2, r4
 801e416:	0028      	movs	r0, r5
 801e418:	310a      	adds	r1, #10
 801e41a:	f000 f8bf 	bl	801e59c <__swbuf_r>
 801e41e:	3001      	adds	r0, #1
 801e420:	d0d6      	beq.n	801e3d0 <_puts_r+0x3c>
 801e422:	250a      	movs	r5, #10
 801e424:	e7d6      	b.n	801e3d4 <_puts_r+0x40>
 801e426:	0022      	movs	r2, r4
 801e428:	0028      	movs	r0, r5
 801e42a:	f000 f8b7 	bl	801e59c <__swbuf_r>
 801e42e:	3001      	adds	r0, #1
 801e430:	d1e8      	bne.n	801e404 <_puts_r+0x70>
 801e432:	e7cd      	b.n	801e3d0 <_puts_r+0x3c>
 801e434:	6823      	ldr	r3, [r4, #0]
 801e436:	1c5a      	adds	r2, r3, #1
 801e438:	6022      	str	r2, [r4, #0]
 801e43a:	220a      	movs	r2, #10
 801e43c:	701a      	strb	r2, [r3, #0]
 801e43e:	e7f0      	b.n	801e422 <_puts_r+0x8e>

0801e440 <puts>:
 801e440:	b510      	push	{r4, lr}
 801e442:	4b03      	ldr	r3, [pc, #12]	@ (801e450 <puts+0x10>)
 801e444:	0001      	movs	r1, r0
 801e446:	6818      	ldr	r0, [r3, #0]
 801e448:	f7ff ffa4 	bl	801e394 <_puts_r>
 801e44c:	bd10      	pop	{r4, pc}
 801e44e:	46c0      	nop			@ (mov r8, r8)
 801e450:	200003cc 	.word	0x200003cc

0801e454 <siprintf>:
 801e454:	b40e      	push	{r1, r2, r3}
 801e456:	b500      	push	{lr}
 801e458:	490b      	ldr	r1, [pc, #44]	@ (801e488 <siprintf+0x34>)
 801e45a:	b09c      	sub	sp, #112	@ 0x70
 801e45c:	ab1d      	add	r3, sp, #116	@ 0x74
 801e45e:	9002      	str	r0, [sp, #8]
 801e460:	9006      	str	r0, [sp, #24]
 801e462:	9107      	str	r1, [sp, #28]
 801e464:	9104      	str	r1, [sp, #16]
 801e466:	4809      	ldr	r0, [pc, #36]	@ (801e48c <siprintf+0x38>)
 801e468:	4909      	ldr	r1, [pc, #36]	@ (801e490 <siprintf+0x3c>)
 801e46a:	cb04      	ldmia	r3!, {r2}
 801e46c:	9105      	str	r1, [sp, #20]
 801e46e:	6800      	ldr	r0, [r0, #0]
 801e470:	a902      	add	r1, sp, #8
 801e472:	9301      	str	r3, [sp, #4]
 801e474:	f002 fa4a 	bl	802090c <_svfiprintf_r>
 801e478:	2200      	movs	r2, #0
 801e47a:	9b02      	ldr	r3, [sp, #8]
 801e47c:	701a      	strb	r2, [r3, #0]
 801e47e:	b01c      	add	sp, #112	@ 0x70
 801e480:	bc08      	pop	{r3}
 801e482:	b003      	add	sp, #12
 801e484:	4718      	bx	r3
 801e486:	46c0      	nop			@ (mov r8, r8)
 801e488:	7fffffff 	.word	0x7fffffff
 801e48c:	200003cc 	.word	0x200003cc
 801e490:	ffff0208 	.word	0xffff0208

0801e494 <__sread>:
 801e494:	b570      	push	{r4, r5, r6, lr}
 801e496:	000c      	movs	r4, r1
 801e498:	250e      	movs	r5, #14
 801e49a:	5f49      	ldrsh	r1, [r1, r5]
 801e49c:	f000 f99a 	bl	801e7d4 <_read_r>
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	db03      	blt.n	801e4ac <__sread+0x18>
 801e4a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801e4a6:	181b      	adds	r3, r3, r0
 801e4a8:	6563      	str	r3, [r4, #84]	@ 0x54
 801e4aa:	bd70      	pop	{r4, r5, r6, pc}
 801e4ac:	89a3      	ldrh	r3, [r4, #12]
 801e4ae:	4a02      	ldr	r2, [pc, #8]	@ (801e4b8 <__sread+0x24>)
 801e4b0:	4013      	ands	r3, r2
 801e4b2:	81a3      	strh	r3, [r4, #12]
 801e4b4:	e7f9      	b.n	801e4aa <__sread+0x16>
 801e4b6:	46c0      	nop			@ (mov r8, r8)
 801e4b8:	ffffefff 	.word	0xffffefff

0801e4bc <__swrite>:
 801e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4be:	001f      	movs	r7, r3
 801e4c0:	898b      	ldrh	r3, [r1, #12]
 801e4c2:	0005      	movs	r5, r0
 801e4c4:	000c      	movs	r4, r1
 801e4c6:	0016      	movs	r6, r2
 801e4c8:	05db      	lsls	r3, r3, #23
 801e4ca:	d505      	bpl.n	801e4d8 <__swrite+0x1c>
 801e4cc:	230e      	movs	r3, #14
 801e4ce:	5ec9      	ldrsh	r1, [r1, r3]
 801e4d0:	2200      	movs	r2, #0
 801e4d2:	2302      	movs	r3, #2
 801e4d4:	f000 f96a 	bl	801e7ac <_lseek_r>
 801e4d8:	89a3      	ldrh	r3, [r4, #12]
 801e4da:	4a05      	ldr	r2, [pc, #20]	@ (801e4f0 <__swrite+0x34>)
 801e4dc:	0028      	movs	r0, r5
 801e4de:	4013      	ands	r3, r2
 801e4e0:	81a3      	strh	r3, [r4, #12]
 801e4e2:	0032      	movs	r2, r6
 801e4e4:	230e      	movs	r3, #14
 801e4e6:	5ee1      	ldrsh	r1, [r4, r3]
 801e4e8:	003b      	movs	r3, r7
 801e4ea:	f000 f987 	bl	801e7fc <_write_r>
 801e4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4f0:	ffffefff 	.word	0xffffefff

0801e4f4 <__sseek>:
 801e4f4:	b570      	push	{r4, r5, r6, lr}
 801e4f6:	000c      	movs	r4, r1
 801e4f8:	250e      	movs	r5, #14
 801e4fa:	5f49      	ldrsh	r1, [r1, r5]
 801e4fc:	f000 f956 	bl	801e7ac <_lseek_r>
 801e500:	89a3      	ldrh	r3, [r4, #12]
 801e502:	1c42      	adds	r2, r0, #1
 801e504:	d103      	bne.n	801e50e <__sseek+0x1a>
 801e506:	4a05      	ldr	r2, [pc, #20]	@ (801e51c <__sseek+0x28>)
 801e508:	4013      	ands	r3, r2
 801e50a:	81a3      	strh	r3, [r4, #12]
 801e50c:	bd70      	pop	{r4, r5, r6, pc}
 801e50e:	2280      	movs	r2, #128	@ 0x80
 801e510:	0152      	lsls	r2, r2, #5
 801e512:	4313      	orrs	r3, r2
 801e514:	81a3      	strh	r3, [r4, #12]
 801e516:	6560      	str	r0, [r4, #84]	@ 0x54
 801e518:	e7f8      	b.n	801e50c <__sseek+0x18>
 801e51a:	46c0      	nop			@ (mov r8, r8)
 801e51c:	ffffefff 	.word	0xffffefff

0801e520 <__sclose>:
 801e520:	b510      	push	{r4, lr}
 801e522:	230e      	movs	r3, #14
 801e524:	5ec9      	ldrsh	r1, [r1, r3]
 801e526:	f000 f92f 	bl	801e788 <_close_r>
 801e52a:	bd10      	pop	{r4, pc}

0801e52c <_vsniprintf_r>:
 801e52c:	b530      	push	{r4, r5, lr}
 801e52e:	0014      	movs	r4, r2
 801e530:	0005      	movs	r5, r0
 801e532:	001a      	movs	r2, r3
 801e534:	b09b      	sub	sp, #108	@ 0x6c
 801e536:	2c00      	cmp	r4, #0
 801e538:	da05      	bge.n	801e546 <_vsniprintf_r+0x1a>
 801e53a:	238b      	movs	r3, #139	@ 0x8b
 801e53c:	6003      	str	r3, [r0, #0]
 801e53e:	2001      	movs	r0, #1
 801e540:	4240      	negs	r0, r0
 801e542:	b01b      	add	sp, #108	@ 0x6c
 801e544:	bd30      	pop	{r4, r5, pc}
 801e546:	2382      	movs	r3, #130	@ 0x82
 801e548:	4668      	mov	r0, sp
 801e54a:	009b      	lsls	r3, r3, #2
 801e54c:	8183      	strh	r3, [r0, #12]
 801e54e:	2300      	movs	r3, #0
 801e550:	9100      	str	r1, [sp, #0]
 801e552:	9104      	str	r1, [sp, #16]
 801e554:	429c      	cmp	r4, r3
 801e556:	d000      	beq.n	801e55a <_vsniprintf_r+0x2e>
 801e558:	1e63      	subs	r3, r4, #1
 801e55a:	9302      	str	r3, [sp, #8]
 801e55c:	9305      	str	r3, [sp, #20]
 801e55e:	2301      	movs	r3, #1
 801e560:	4669      	mov	r1, sp
 801e562:	425b      	negs	r3, r3
 801e564:	81cb      	strh	r3, [r1, #14]
 801e566:	0028      	movs	r0, r5
 801e568:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e56a:	f002 f9cf 	bl	802090c <_svfiprintf_r>
 801e56e:	1c43      	adds	r3, r0, #1
 801e570:	da01      	bge.n	801e576 <_vsniprintf_r+0x4a>
 801e572:	238b      	movs	r3, #139	@ 0x8b
 801e574:	602b      	str	r3, [r5, #0]
 801e576:	2c00      	cmp	r4, #0
 801e578:	d0e3      	beq.n	801e542 <_vsniprintf_r+0x16>
 801e57a:	2200      	movs	r2, #0
 801e57c:	9b00      	ldr	r3, [sp, #0]
 801e57e:	701a      	strb	r2, [r3, #0]
 801e580:	e7df      	b.n	801e542 <_vsniprintf_r+0x16>
	...

0801e584 <vsniprintf>:
 801e584:	b513      	push	{r0, r1, r4, lr}
 801e586:	4c04      	ldr	r4, [pc, #16]	@ (801e598 <vsniprintf+0x14>)
 801e588:	9300      	str	r3, [sp, #0]
 801e58a:	0013      	movs	r3, r2
 801e58c:	000a      	movs	r2, r1
 801e58e:	0001      	movs	r1, r0
 801e590:	6820      	ldr	r0, [r4, #0]
 801e592:	f7ff ffcb 	bl	801e52c <_vsniprintf_r>
 801e596:	bd16      	pop	{r1, r2, r4, pc}
 801e598:	200003cc 	.word	0x200003cc

0801e59c <__swbuf_r>:
 801e59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e59e:	0006      	movs	r6, r0
 801e5a0:	000d      	movs	r5, r1
 801e5a2:	0014      	movs	r4, r2
 801e5a4:	2800      	cmp	r0, #0
 801e5a6:	d004      	beq.n	801e5b2 <__swbuf_r+0x16>
 801e5a8:	6a03      	ldr	r3, [r0, #32]
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d101      	bne.n	801e5b2 <__swbuf_r+0x16>
 801e5ae:	f7ff fead 	bl	801e30c <__sinit>
 801e5b2:	69a3      	ldr	r3, [r4, #24]
 801e5b4:	60a3      	str	r3, [r4, #8]
 801e5b6:	89a3      	ldrh	r3, [r4, #12]
 801e5b8:	071b      	lsls	r3, r3, #28
 801e5ba:	d502      	bpl.n	801e5c2 <__swbuf_r+0x26>
 801e5bc:	6923      	ldr	r3, [r4, #16]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d109      	bne.n	801e5d6 <__swbuf_r+0x3a>
 801e5c2:	0021      	movs	r1, r4
 801e5c4:	0030      	movs	r0, r6
 801e5c6:	f000 f82b 	bl	801e620 <__swsetup_r>
 801e5ca:	2800      	cmp	r0, #0
 801e5cc:	d003      	beq.n	801e5d6 <__swbuf_r+0x3a>
 801e5ce:	2501      	movs	r5, #1
 801e5d0:	426d      	negs	r5, r5
 801e5d2:	0028      	movs	r0, r5
 801e5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5d6:	6923      	ldr	r3, [r4, #16]
 801e5d8:	6820      	ldr	r0, [r4, #0]
 801e5da:	b2ef      	uxtb	r7, r5
 801e5dc:	1ac0      	subs	r0, r0, r3
 801e5de:	6963      	ldr	r3, [r4, #20]
 801e5e0:	b2ed      	uxtb	r5, r5
 801e5e2:	4283      	cmp	r3, r0
 801e5e4:	dc05      	bgt.n	801e5f2 <__swbuf_r+0x56>
 801e5e6:	0021      	movs	r1, r4
 801e5e8:	0030      	movs	r0, r6
 801e5ea:	f002 fc57 	bl	8020e9c <_fflush_r>
 801e5ee:	2800      	cmp	r0, #0
 801e5f0:	d1ed      	bne.n	801e5ce <__swbuf_r+0x32>
 801e5f2:	68a3      	ldr	r3, [r4, #8]
 801e5f4:	3001      	adds	r0, #1
 801e5f6:	3b01      	subs	r3, #1
 801e5f8:	60a3      	str	r3, [r4, #8]
 801e5fa:	6823      	ldr	r3, [r4, #0]
 801e5fc:	1c5a      	adds	r2, r3, #1
 801e5fe:	6022      	str	r2, [r4, #0]
 801e600:	701f      	strb	r7, [r3, #0]
 801e602:	6963      	ldr	r3, [r4, #20]
 801e604:	4283      	cmp	r3, r0
 801e606:	d004      	beq.n	801e612 <__swbuf_r+0x76>
 801e608:	89a3      	ldrh	r3, [r4, #12]
 801e60a:	07db      	lsls	r3, r3, #31
 801e60c:	d5e1      	bpl.n	801e5d2 <__swbuf_r+0x36>
 801e60e:	2d0a      	cmp	r5, #10
 801e610:	d1df      	bne.n	801e5d2 <__swbuf_r+0x36>
 801e612:	0021      	movs	r1, r4
 801e614:	0030      	movs	r0, r6
 801e616:	f002 fc41 	bl	8020e9c <_fflush_r>
 801e61a:	2800      	cmp	r0, #0
 801e61c:	d0d9      	beq.n	801e5d2 <__swbuf_r+0x36>
 801e61e:	e7d6      	b.n	801e5ce <__swbuf_r+0x32>

0801e620 <__swsetup_r>:
 801e620:	4b2d      	ldr	r3, [pc, #180]	@ (801e6d8 <__swsetup_r+0xb8>)
 801e622:	b570      	push	{r4, r5, r6, lr}
 801e624:	0005      	movs	r5, r0
 801e626:	6818      	ldr	r0, [r3, #0]
 801e628:	000c      	movs	r4, r1
 801e62a:	2800      	cmp	r0, #0
 801e62c:	d004      	beq.n	801e638 <__swsetup_r+0x18>
 801e62e:	6a03      	ldr	r3, [r0, #32]
 801e630:	2b00      	cmp	r3, #0
 801e632:	d101      	bne.n	801e638 <__swsetup_r+0x18>
 801e634:	f7ff fe6a 	bl	801e30c <__sinit>
 801e638:	230c      	movs	r3, #12
 801e63a:	5ee2      	ldrsh	r2, [r4, r3]
 801e63c:	0713      	lsls	r3, r2, #28
 801e63e:	d423      	bmi.n	801e688 <__swsetup_r+0x68>
 801e640:	06d3      	lsls	r3, r2, #27
 801e642:	d407      	bmi.n	801e654 <__swsetup_r+0x34>
 801e644:	2309      	movs	r3, #9
 801e646:	602b      	str	r3, [r5, #0]
 801e648:	2340      	movs	r3, #64	@ 0x40
 801e64a:	2001      	movs	r0, #1
 801e64c:	4313      	orrs	r3, r2
 801e64e:	81a3      	strh	r3, [r4, #12]
 801e650:	4240      	negs	r0, r0
 801e652:	e03a      	b.n	801e6ca <__swsetup_r+0xaa>
 801e654:	0752      	lsls	r2, r2, #29
 801e656:	d513      	bpl.n	801e680 <__swsetup_r+0x60>
 801e658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e65a:	2900      	cmp	r1, #0
 801e65c:	d008      	beq.n	801e670 <__swsetup_r+0x50>
 801e65e:	0023      	movs	r3, r4
 801e660:	3344      	adds	r3, #68	@ 0x44
 801e662:	4299      	cmp	r1, r3
 801e664:	d002      	beq.n	801e66c <__swsetup_r+0x4c>
 801e666:	0028      	movs	r0, r5
 801e668:	f000 ffa6 	bl	801f5b8 <_free_r>
 801e66c:	2300      	movs	r3, #0
 801e66e:	6363      	str	r3, [r4, #52]	@ 0x34
 801e670:	2224      	movs	r2, #36	@ 0x24
 801e672:	89a3      	ldrh	r3, [r4, #12]
 801e674:	4393      	bics	r3, r2
 801e676:	81a3      	strh	r3, [r4, #12]
 801e678:	2300      	movs	r3, #0
 801e67a:	6063      	str	r3, [r4, #4]
 801e67c:	6923      	ldr	r3, [r4, #16]
 801e67e:	6023      	str	r3, [r4, #0]
 801e680:	2308      	movs	r3, #8
 801e682:	89a2      	ldrh	r2, [r4, #12]
 801e684:	4313      	orrs	r3, r2
 801e686:	81a3      	strh	r3, [r4, #12]
 801e688:	6923      	ldr	r3, [r4, #16]
 801e68a:	2b00      	cmp	r3, #0
 801e68c:	d10b      	bne.n	801e6a6 <__swsetup_r+0x86>
 801e68e:	21a0      	movs	r1, #160	@ 0xa0
 801e690:	2280      	movs	r2, #128	@ 0x80
 801e692:	89a3      	ldrh	r3, [r4, #12]
 801e694:	0089      	lsls	r1, r1, #2
 801e696:	0092      	lsls	r2, r2, #2
 801e698:	400b      	ands	r3, r1
 801e69a:	4293      	cmp	r3, r2
 801e69c:	d003      	beq.n	801e6a6 <__swsetup_r+0x86>
 801e69e:	0021      	movs	r1, r4
 801e6a0:	0028      	movs	r0, r5
 801e6a2:	f002 fc51 	bl	8020f48 <__smakebuf_r>
 801e6a6:	230c      	movs	r3, #12
 801e6a8:	5ee2      	ldrsh	r2, [r4, r3]
 801e6aa:	2101      	movs	r1, #1
 801e6ac:	0013      	movs	r3, r2
 801e6ae:	400b      	ands	r3, r1
 801e6b0:	420a      	tst	r2, r1
 801e6b2:	d00b      	beq.n	801e6cc <__swsetup_r+0xac>
 801e6b4:	2300      	movs	r3, #0
 801e6b6:	60a3      	str	r3, [r4, #8]
 801e6b8:	6963      	ldr	r3, [r4, #20]
 801e6ba:	425b      	negs	r3, r3
 801e6bc:	61a3      	str	r3, [r4, #24]
 801e6be:	2000      	movs	r0, #0
 801e6c0:	6923      	ldr	r3, [r4, #16]
 801e6c2:	4283      	cmp	r3, r0
 801e6c4:	d101      	bne.n	801e6ca <__swsetup_r+0xaa>
 801e6c6:	0613      	lsls	r3, r2, #24
 801e6c8:	d4be      	bmi.n	801e648 <__swsetup_r+0x28>
 801e6ca:	bd70      	pop	{r4, r5, r6, pc}
 801e6cc:	0791      	lsls	r1, r2, #30
 801e6ce:	d400      	bmi.n	801e6d2 <__swsetup_r+0xb2>
 801e6d0:	6963      	ldr	r3, [r4, #20]
 801e6d2:	60a3      	str	r3, [r4, #8]
 801e6d4:	e7f3      	b.n	801e6be <__swsetup_r+0x9e>
 801e6d6:	46c0      	nop			@ (mov r8, r8)
 801e6d8:	200003cc 	.word	0x200003cc

0801e6dc <memset>:
 801e6dc:	0003      	movs	r3, r0
 801e6de:	1882      	adds	r2, r0, r2
 801e6e0:	4293      	cmp	r3, r2
 801e6e2:	d100      	bne.n	801e6e6 <memset+0xa>
 801e6e4:	4770      	bx	lr
 801e6e6:	7019      	strb	r1, [r3, #0]
 801e6e8:	3301      	adds	r3, #1
 801e6ea:	e7f9      	b.n	801e6e0 <memset+0x4>

0801e6ec <strchr>:
 801e6ec:	b2c9      	uxtb	r1, r1
 801e6ee:	7803      	ldrb	r3, [r0, #0]
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	d004      	beq.n	801e6fe <strchr+0x12>
 801e6f4:	428b      	cmp	r3, r1
 801e6f6:	d100      	bne.n	801e6fa <strchr+0xe>
 801e6f8:	4770      	bx	lr
 801e6fa:	3001      	adds	r0, #1
 801e6fc:	e7f7      	b.n	801e6ee <strchr+0x2>
 801e6fe:	424b      	negs	r3, r1
 801e700:	4159      	adcs	r1, r3
 801e702:	4249      	negs	r1, r1
 801e704:	4008      	ands	r0, r1
 801e706:	e7f7      	b.n	801e6f8 <strchr+0xc>

0801e708 <strncmp>:
 801e708:	b530      	push	{r4, r5, lr}
 801e70a:	0005      	movs	r5, r0
 801e70c:	1e10      	subs	r0, r2, #0
 801e70e:	d00b      	beq.n	801e728 <strncmp+0x20>
 801e710:	2400      	movs	r4, #0
 801e712:	3a01      	subs	r2, #1
 801e714:	5d2b      	ldrb	r3, [r5, r4]
 801e716:	5d08      	ldrb	r0, [r1, r4]
 801e718:	4283      	cmp	r3, r0
 801e71a:	d104      	bne.n	801e726 <strncmp+0x1e>
 801e71c:	42a2      	cmp	r2, r4
 801e71e:	d002      	beq.n	801e726 <strncmp+0x1e>
 801e720:	3401      	adds	r4, #1
 801e722:	2b00      	cmp	r3, #0
 801e724:	d1f6      	bne.n	801e714 <strncmp+0xc>
 801e726:	1a18      	subs	r0, r3, r0
 801e728:	bd30      	pop	{r4, r5, pc}

0801e72a <strncpy>:
 801e72a:	0003      	movs	r3, r0
 801e72c:	b530      	push	{r4, r5, lr}
 801e72e:	001d      	movs	r5, r3
 801e730:	2a00      	cmp	r2, #0
 801e732:	d006      	beq.n	801e742 <strncpy+0x18>
 801e734:	780c      	ldrb	r4, [r1, #0]
 801e736:	3a01      	subs	r2, #1
 801e738:	3301      	adds	r3, #1
 801e73a:	702c      	strb	r4, [r5, #0]
 801e73c:	3101      	adds	r1, #1
 801e73e:	2c00      	cmp	r4, #0
 801e740:	d1f5      	bne.n	801e72e <strncpy+0x4>
 801e742:	2100      	movs	r1, #0
 801e744:	189a      	adds	r2, r3, r2
 801e746:	4293      	cmp	r3, r2
 801e748:	d100      	bne.n	801e74c <strncpy+0x22>
 801e74a:	bd30      	pop	{r4, r5, pc}
 801e74c:	7019      	strb	r1, [r3, #0]
 801e74e:	3301      	adds	r3, #1
 801e750:	e7f9      	b.n	801e746 <strncpy+0x1c>

0801e752 <strstr>:
 801e752:	780a      	ldrb	r2, [r1, #0]
 801e754:	b530      	push	{r4, r5, lr}
 801e756:	2a00      	cmp	r2, #0
 801e758:	d10c      	bne.n	801e774 <strstr+0x22>
 801e75a:	bd30      	pop	{r4, r5, pc}
 801e75c:	429a      	cmp	r2, r3
 801e75e:	d108      	bne.n	801e772 <strstr+0x20>
 801e760:	2301      	movs	r3, #1
 801e762:	5ccc      	ldrb	r4, [r1, r3]
 801e764:	2c00      	cmp	r4, #0
 801e766:	d0f8      	beq.n	801e75a <strstr+0x8>
 801e768:	5cc5      	ldrb	r5, [r0, r3]
 801e76a:	42a5      	cmp	r5, r4
 801e76c:	d101      	bne.n	801e772 <strstr+0x20>
 801e76e:	3301      	adds	r3, #1
 801e770:	e7f7      	b.n	801e762 <strstr+0x10>
 801e772:	3001      	adds	r0, #1
 801e774:	7803      	ldrb	r3, [r0, #0]
 801e776:	2b00      	cmp	r3, #0
 801e778:	d1f0      	bne.n	801e75c <strstr+0xa>
 801e77a:	0018      	movs	r0, r3
 801e77c:	e7ed      	b.n	801e75a <strstr+0x8>
	...

0801e780 <_localeconv_r>:
 801e780:	4800      	ldr	r0, [pc, #0]	@ (801e784 <_localeconv_r+0x4>)
 801e782:	4770      	bx	lr
 801e784:	20000350 	.word	0x20000350

0801e788 <_close_r>:
 801e788:	2300      	movs	r3, #0
 801e78a:	b570      	push	{r4, r5, r6, lr}
 801e78c:	4d06      	ldr	r5, [pc, #24]	@ (801e7a8 <_close_r+0x20>)
 801e78e:	0004      	movs	r4, r0
 801e790:	0008      	movs	r0, r1
 801e792:	602b      	str	r3, [r5, #0]
 801e794:	f7ed ff10 	bl	800c5b8 <_close>
 801e798:	1c43      	adds	r3, r0, #1
 801e79a:	d103      	bne.n	801e7a4 <_close_r+0x1c>
 801e79c:	682b      	ldr	r3, [r5, #0]
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d000      	beq.n	801e7a4 <_close_r+0x1c>
 801e7a2:	6023      	str	r3, [r4, #0]
 801e7a4:	bd70      	pop	{r4, r5, r6, pc}
 801e7a6:	46c0      	nop			@ (mov r8, r8)
 801e7a8:	200038f4 	.word	0x200038f4

0801e7ac <_lseek_r>:
 801e7ac:	b570      	push	{r4, r5, r6, lr}
 801e7ae:	0004      	movs	r4, r0
 801e7b0:	0008      	movs	r0, r1
 801e7b2:	0011      	movs	r1, r2
 801e7b4:	001a      	movs	r2, r3
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	4d05      	ldr	r5, [pc, #20]	@ (801e7d0 <_lseek_r+0x24>)
 801e7ba:	602b      	str	r3, [r5, #0]
 801e7bc:	f7ed ff1d 	bl	800c5fa <_lseek>
 801e7c0:	1c43      	adds	r3, r0, #1
 801e7c2:	d103      	bne.n	801e7cc <_lseek_r+0x20>
 801e7c4:	682b      	ldr	r3, [r5, #0]
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d000      	beq.n	801e7cc <_lseek_r+0x20>
 801e7ca:	6023      	str	r3, [r4, #0]
 801e7cc:	bd70      	pop	{r4, r5, r6, pc}
 801e7ce:	46c0      	nop			@ (mov r8, r8)
 801e7d0:	200038f4 	.word	0x200038f4

0801e7d4 <_read_r>:
 801e7d4:	b570      	push	{r4, r5, r6, lr}
 801e7d6:	0004      	movs	r4, r0
 801e7d8:	0008      	movs	r0, r1
 801e7da:	0011      	movs	r1, r2
 801e7dc:	001a      	movs	r2, r3
 801e7de:	2300      	movs	r3, #0
 801e7e0:	4d05      	ldr	r5, [pc, #20]	@ (801e7f8 <_read_r+0x24>)
 801e7e2:	602b      	str	r3, [r5, #0]
 801e7e4:	f7ed fecb 	bl	800c57e <_read>
 801e7e8:	1c43      	adds	r3, r0, #1
 801e7ea:	d103      	bne.n	801e7f4 <_read_r+0x20>
 801e7ec:	682b      	ldr	r3, [r5, #0]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d000      	beq.n	801e7f4 <_read_r+0x20>
 801e7f2:	6023      	str	r3, [r4, #0]
 801e7f4:	bd70      	pop	{r4, r5, r6, pc}
 801e7f6:	46c0      	nop			@ (mov r8, r8)
 801e7f8:	200038f4 	.word	0x200038f4

0801e7fc <_write_r>:
 801e7fc:	b570      	push	{r4, r5, r6, lr}
 801e7fe:	0004      	movs	r4, r0
 801e800:	0008      	movs	r0, r1
 801e802:	0011      	movs	r1, r2
 801e804:	001a      	movs	r2, r3
 801e806:	2300      	movs	r3, #0
 801e808:	4d05      	ldr	r5, [pc, #20]	@ (801e820 <_write_r+0x24>)
 801e80a:	602b      	str	r3, [r5, #0]
 801e80c:	f7ee fb8c 	bl	800cf28 <_write>
 801e810:	1c43      	adds	r3, r0, #1
 801e812:	d103      	bne.n	801e81c <_write_r+0x20>
 801e814:	682b      	ldr	r3, [r5, #0]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d000      	beq.n	801e81c <_write_r+0x20>
 801e81a:	6023      	str	r3, [r4, #0]
 801e81c:	bd70      	pop	{r4, r5, r6, pc}
 801e81e:	46c0      	nop			@ (mov r8, r8)
 801e820:	200038f4 	.word	0x200038f4

0801e824 <__errno>:
 801e824:	4b01      	ldr	r3, [pc, #4]	@ (801e82c <__errno+0x8>)
 801e826:	6818      	ldr	r0, [r3, #0]
 801e828:	4770      	bx	lr
 801e82a:	46c0      	nop			@ (mov r8, r8)
 801e82c:	200003cc 	.word	0x200003cc

0801e830 <__libc_init_array>:
 801e830:	b570      	push	{r4, r5, r6, lr}
 801e832:	2600      	movs	r6, #0
 801e834:	4c0c      	ldr	r4, [pc, #48]	@ (801e868 <__libc_init_array+0x38>)
 801e836:	4d0d      	ldr	r5, [pc, #52]	@ (801e86c <__libc_init_array+0x3c>)
 801e838:	1b64      	subs	r4, r4, r5
 801e83a:	10a4      	asrs	r4, r4, #2
 801e83c:	42a6      	cmp	r6, r4
 801e83e:	d109      	bne.n	801e854 <__libc_init_array+0x24>
 801e840:	2600      	movs	r6, #0
 801e842:	f002 fee9 	bl	8021618 <_init>
 801e846:	4c0a      	ldr	r4, [pc, #40]	@ (801e870 <__libc_init_array+0x40>)
 801e848:	4d0a      	ldr	r5, [pc, #40]	@ (801e874 <__libc_init_array+0x44>)
 801e84a:	1b64      	subs	r4, r4, r5
 801e84c:	10a4      	asrs	r4, r4, #2
 801e84e:	42a6      	cmp	r6, r4
 801e850:	d105      	bne.n	801e85e <__libc_init_array+0x2e>
 801e852:	bd70      	pop	{r4, r5, r6, pc}
 801e854:	00b3      	lsls	r3, r6, #2
 801e856:	58eb      	ldr	r3, [r5, r3]
 801e858:	4798      	blx	r3
 801e85a:	3601      	adds	r6, #1
 801e85c:	e7ee      	b.n	801e83c <__libc_init_array+0xc>
 801e85e:	00b3      	lsls	r3, r6, #2
 801e860:	58eb      	ldr	r3, [r5, r3]
 801e862:	4798      	blx	r3
 801e864:	3601      	adds	r6, #1
 801e866:	e7f2      	b.n	801e84e <__libc_init_array+0x1e>
 801e868:	08023ce0 	.word	0x08023ce0
 801e86c:	08023ce0 	.word	0x08023ce0
 801e870:	08023ce4 	.word	0x08023ce4
 801e874:	08023ce0 	.word	0x08023ce0

0801e878 <__retarget_lock_init_recursive>:
 801e878:	4770      	bx	lr

0801e87a <__retarget_lock_acquire_recursive>:
 801e87a:	4770      	bx	lr

0801e87c <__retarget_lock_release_recursive>:
 801e87c:	4770      	bx	lr

0801e87e <memchr>:
 801e87e:	b2c9      	uxtb	r1, r1
 801e880:	1882      	adds	r2, r0, r2
 801e882:	4290      	cmp	r0, r2
 801e884:	d101      	bne.n	801e88a <memchr+0xc>
 801e886:	2000      	movs	r0, #0
 801e888:	4770      	bx	lr
 801e88a:	7803      	ldrb	r3, [r0, #0]
 801e88c:	428b      	cmp	r3, r1
 801e88e:	d0fb      	beq.n	801e888 <memchr+0xa>
 801e890:	3001      	adds	r0, #1
 801e892:	e7f6      	b.n	801e882 <memchr+0x4>

0801e894 <memcpy>:
 801e894:	2300      	movs	r3, #0
 801e896:	b510      	push	{r4, lr}
 801e898:	429a      	cmp	r2, r3
 801e89a:	d100      	bne.n	801e89e <memcpy+0xa>
 801e89c:	bd10      	pop	{r4, pc}
 801e89e:	5ccc      	ldrb	r4, [r1, r3]
 801e8a0:	54c4      	strb	r4, [r0, r3]
 801e8a2:	3301      	adds	r3, #1
 801e8a4:	e7f8      	b.n	801e898 <memcpy+0x4>
	...

0801e8a8 <nan>:
 801e8a8:	2000      	movs	r0, #0
 801e8aa:	4901      	ldr	r1, [pc, #4]	@ (801e8b0 <nan+0x8>)
 801e8ac:	4770      	bx	lr
 801e8ae:	46c0      	nop			@ (mov r8, r8)
 801e8b0:	7ff80000 	.word	0x7ff80000

0801e8b4 <quorem>:
 801e8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8b6:	6902      	ldr	r2, [r0, #16]
 801e8b8:	690f      	ldr	r7, [r1, #16]
 801e8ba:	b087      	sub	sp, #28
 801e8bc:	0006      	movs	r6, r0
 801e8be:	000b      	movs	r3, r1
 801e8c0:	2000      	movs	r0, #0
 801e8c2:	9102      	str	r1, [sp, #8]
 801e8c4:	42ba      	cmp	r2, r7
 801e8c6:	db6d      	blt.n	801e9a4 <quorem+0xf0>
 801e8c8:	3f01      	subs	r7, #1
 801e8ca:	00bc      	lsls	r4, r7, #2
 801e8cc:	3314      	adds	r3, #20
 801e8ce:	9305      	str	r3, [sp, #20]
 801e8d0:	191b      	adds	r3, r3, r4
 801e8d2:	9303      	str	r3, [sp, #12]
 801e8d4:	0033      	movs	r3, r6
 801e8d6:	3314      	adds	r3, #20
 801e8d8:	191c      	adds	r4, r3, r4
 801e8da:	9301      	str	r3, [sp, #4]
 801e8dc:	6823      	ldr	r3, [r4, #0]
 801e8de:	9304      	str	r3, [sp, #16]
 801e8e0:	9b03      	ldr	r3, [sp, #12]
 801e8e2:	9804      	ldr	r0, [sp, #16]
 801e8e4:	681d      	ldr	r5, [r3, #0]
 801e8e6:	3501      	adds	r5, #1
 801e8e8:	0029      	movs	r1, r5
 801e8ea:	f7e1 fc5b 	bl	80001a4 <__udivsi3>
 801e8ee:	9b04      	ldr	r3, [sp, #16]
 801e8f0:	9000      	str	r0, [sp, #0]
 801e8f2:	42ab      	cmp	r3, r5
 801e8f4:	d32b      	bcc.n	801e94e <quorem+0x9a>
 801e8f6:	9b05      	ldr	r3, [sp, #20]
 801e8f8:	9d01      	ldr	r5, [sp, #4]
 801e8fa:	469c      	mov	ip, r3
 801e8fc:	2300      	movs	r3, #0
 801e8fe:	9305      	str	r3, [sp, #20]
 801e900:	9304      	str	r3, [sp, #16]
 801e902:	4662      	mov	r2, ip
 801e904:	ca08      	ldmia	r2!, {r3}
 801e906:	6828      	ldr	r0, [r5, #0]
 801e908:	4694      	mov	ip, r2
 801e90a:	9a00      	ldr	r2, [sp, #0]
 801e90c:	b299      	uxth	r1, r3
 801e90e:	4351      	muls	r1, r2
 801e910:	9a05      	ldr	r2, [sp, #20]
 801e912:	0c1b      	lsrs	r3, r3, #16
 801e914:	1889      	adds	r1, r1, r2
 801e916:	9a00      	ldr	r2, [sp, #0]
 801e918:	4353      	muls	r3, r2
 801e91a:	0c0a      	lsrs	r2, r1, #16
 801e91c:	189b      	adds	r3, r3, r2
 801e91e:	0c1a      	lsrs	r2, r3, #16
 801e920:	b289      	uxth	r1, r1
 801e922:	9205      	str	r2, [sp, #20]
 801e924:	b282      	uxth	r2, r0
 801e926:	1a52      	subs	r2, r2, r1
 801e928:	9904      	ldr	r1, [sp, #16]
 801e92a:	0c00      	lsrs	r0, r0, #16
 801e92c:	1852      	adds	r2, r2, r1
 801e92e:	b29b      	uxth	r3, r3
 801e930:	1411      	asrs	r1, r2, #16
 801e932:	1ac3      	subs	r3, r0, r3
 801e934:	185b      	adds	r3, r3, r1
 801e936:	1419      	asrs	r1, r3, #16
 801e938:	b292      	uxth	r2, r2
 801e93a:	041b      	lsls	r3, r3, #16
 801e93c:	431a      	orrs	r2, r3
 801e93e:	9b03      	ldr	r3, [sp, #12]
 801e940:	9104      	str	r1, [sp, #16]
 801e942:	c504      	stmia	r5!, {r2}
 801e944:	4563      	cmp	r3, ip
 801e946:	d2dc      	bcs.n	801e902 <quorem+0x4e>
 801e948:	6823      	ldr	r3, [r4, #0]
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d030      	beq.n	801e9b0 <quorem+0xfc>
 801e94e:	0030      	movs	r0, r6
 801e950:	9902      	ldr	r1, [sp, #8]
 801e952:	f001 fd7d 	bl	8020450 <__mcmp>
 801e956:	2800      	cmp	r0, #0
 801e958:	db23      	blt.n	801e9a2 <quorem+0xee>
 801e95a:	0034      	movs	r4, r6
 801e95c:	2500      	movs	r5, #0
 801e95e:	9902      	ldr	r1, [sp, #8]
 801e960:	3414      	adds	r4, #20
 801e962:	3114      	adds	r1, #20
 801e964:	6823      	ldr	r3, [r4, #0]
 801e966:	c901      	ldmia	r1!, {r0}
 801e968:	9302      	str	r3, [sp, #8]
 801e96a:	466b      	mov	r3, sp
 801e96c:	891b      	ldrh	r3, [r3, #8]
 801e96e:	b282      	uxth	r2, r0
 801e970:	1a9a      	subs	r2, r3, r2
 801e972:	9b02      	ldr	r3, [sp, #8]
 801e974:	1952      	adds	r2, r2, r5
 801e976:	0c00      	lsrs	r0, r0, #16
 801e978:	0c1b      	lsrs	r3, r3, #16
 801e97a:	1a1b      	subs	r3, r3, r0
 801e97c:	1410      	asrs	r0, r2, #16
 801e97e:	181b      	adds	r3, r3, r0
 801e980:	141d      	asrs	r5, r3, #16
 801e982:	b292      	uxth	r2, r2
 801e984:	041b      	lsls	r3, r3, #16
 801e986:	431a      	orrs	r2, r3
 801e988:	9b03      	ldr	r3, [sp, #12]
 801e98a:	c404      	stmia	r4!, {r2}
 801e98c:	428b      	cmp	r3, r1
 801e98e:	d2e9      	bcs.n	801e964 <quorem+0xb0>
 801e990:	9a01      	ldr	r2, [sp, #4]
 801e992:	00bb      	lsls	r3, r7, #2
 801e994:	18d3      	adds	r3, r2, r3
 801e996:	681a      	ldr	r2, [r3, #0]
 801e998:	2a00      	cmp	r2, #0
 801e99a:	d013      	beq.n	801e9c4 <quorem+0x110>
 801e99c:	9b00      	ldr	r3, [sp, #0]
 801e99e:	3301      	adds	r3, #1
 801e9a0:	9300      	str	r3, [sp, #0]
 801e9a2:	9800      	ldr	r0, [sp, #0]
 801e9a4:	b007      	add	sp, #28
 801e9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9a8:	6823      	ldr	r3, [r4, #0]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d104      	bne.n	801e9b8 <quorem+0x104>
 801e9ae:	3f01      	subs	r7, #1
 801e9b0:	9b01      	ldr	r3, [sp, #4]
 801e9b2:	3c04      	subs	r4, #4
 801e9b4:	42a3      	cmp	r3, r4
 801e9b6:	d3f7      	bcc.n	801e9a8 <quorem+0xf4>
 801e9b8:	6137      	str	r7, [r6, #16]
 801e9ba:	e7c8      	b.n	801e94e <quorem+0x9a>
 801e9bc:	681a      	ldr	r2, [r3, #0]
 801e9be:	2a00      	cmp	r2, #0
 801e9c0:	d104      	bne.n	801e9cc <quorem+0x118>
 801e9c2:	3f01      	subs	r7, #1
 801e9c4:	9a01      	ldr	r2, [sp, #4]
 801e9c6:	3b04      	subs	r3, #4
 801e9c8:	429a      	cmp	r2, r3
 801e9ca:	d3f7      	bcc.n	801e9bc <quorem+0x108>
 801e9cc:	6137      	str	r7, [r6, #16]
 801e9ce:	e7e5      	b.n	801e99c <quorem+0xe8>

0801e9d0 <_dtoa_r>:
 801e9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e9d2:	0014      	movs	r4, r2
 801e9d4:	001d      	movs	r5, r3
 801e9d6:	69c6      	ldr	r6, [r0, #28]
 801e9d8:	b09d      	sub	sp, #116	@ 0x74
 801e9da:	940a      	str	r4, [sp, #40]	@ 0x28
 801e9dc:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e9de:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801e9e0:	9003      	str	r0, [sp, #12]
 801e9e2:	2e00      	cmp	r6, #0
 801e9e4:	d10f      	bne.n	801ea06 <_dtoa_r+0x36>
 801e9e6:	2010      	movs	r0, #16
 801e9e8:	f001 f98a 	bl	801fd00 <malloc>
 801e9ec:	9b03      	ldr	r3, [sp, #12]
 801e9ee:	1e02      	subs	r2, r0, #0
 801e9f0:	61d8      	str	r0, [r3, #28]
 801e9f2:	d104      	bne.n	801e9fe <_dtoa_r+0x2e>
 801e9f4:	21ef      	movs	r1, #239	@ 0xef
 801e9f6:	4bc7      	ldr	r3, [pc, #796]	@ (801ed14 <_dtoa_r+0x344>)
 801e9f8:	48c7      	ldr	r0, [pc, #796]	@ (801ed18 <_dtoa_r+0x348>)
 801e9fa:	f002 fb2f 	bl	802105c <__assert_func>
 801e9fe:	6046      	str	r6, [r0, #4]
 801ea00:	6086      	str	r6, [r0, #8]
 801ea02:	6006      	str	r6, [r0, #0]
 801ea04:	60c6      	str	r6, [r0, #12]
 801ea06:	9b03      	ldr	r3, [sp, #12]
 801ea08:	69db      	ldr	r3, [r3, #28]
 801ea0a:	6819      	ldr	r1, [r3, #0]
 801ea0c:	2900      	cmp	r1, #0
 801ea0e:	d00b      	beq.n	801ea28 <_dtoa_r+0x58>
 801ea10:	685a      	ldr	r2, [r3, #4]
 801ea12:	2301      	movs	r3, #1
 801ea14:	4093      	lsls	r3, r2
 801ea16:	604a      	str	r2, [r1, #4]
 801ea18:	608b      	str	r3, [r1, #8]
 801ea1a:	9803      	ldr	r0, [sp, #12]
 801ea1c:	f001 fa82 	bl	801ff24 <_Bfree>
 801ea20:	2200      	movs	r2, #0
 801ea22:	9b03      	ldr	r3, [sp, #12]
 801ea24:	69db      	ldr	r3, [r3, #28]
 801ea26:	601a      	str	r2, [r3, #0]
 801ea28:	2d00      	cmp	r5, #0
 801ea2a:	da1e      	bge.n	801ea6a <_dtoa_r+0x9a>
 801ea2c:	2301      	movs	r3, #1
 801ea2e:	603b      	str	r3, [r7, #0]
 801ea30:	006b      	lsls	r3, r5, #1
 801ea32:	085b      	lsrs	r3, r3, #1
 801ea34:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea36:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ea38:	4bb8      	ldr	r3, [pc, #736]	@ (801ed1c <_dtoa_r+0x34c>)
 801ea3a:	4ab8      	ldr	r2, [pc, #736]	@ (801ed1c <_dtoa_r+0x34c>)
 801ea3c:	403b      	ands	r3, r7
 801ea3e:	4293      	cmp	r3, r2
 801ea40:	d116      	bne.n	801ea70 <_dtoa_r+0xa0>
 801ea42:	4bb7      	ldr	r3, [pc, #732]	@ (801ed20 <_dtoa_r+0x350>)
 801ea44:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ea46:	6013      	str	r3, [r2, #0]
 801ea48:	033b      	lsls	r3, r7, #12
 801ea4a:	0b1b      	lsrs	r3, r3, #12
 801ea4c:	4323      	orrs	r3, r4
 801ea4e:	d101      	bne.n	801ea54 <_dtoa_r+0x84>
 801ea50:	f000 fd83 	bl	801f55a <_dtoa_r+0xb8a>
 801ea54:	4bb3      	ldr	r3, [pc, #716]	@ (801ed24 <_dtoa_r+0x354>)
 801ea56:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ea58:	9308      	str	r3, [sp, #32]
 801ea5a:	2a00      	cmp	r2, #0
 801ea5c:	d002      	beq.n	801ea64 <_dtoa_r+0x94>
 801ea5e:	4bb2      	ldr	r3, [pc, #712]	@ (801ed28 <_dtoa_r+0x358>)
 801ea60:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ea62:	6013      	str	r3, [r2, #0]
 801ea64:	9808      	ldr	r0, [sp, #32]
 801ea66:	b01d      	add	sp, #116	@ 0x74
 801ea68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea6a:	2300      	movs	r3, #0
 801ea6c:	603b      	str	r3, [r7, #0]
 801ea6e:	e7e2      	b.n	801ea36 <_dtoa_r+0x66>
 801ea70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ea72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea74:	9212      	str	r2, [sp, #72]	@ 0x48
 801ea76:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ea78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ea7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ea7c:	2200      	movs	r2, #0
 801ea7e:	2300      	movs	r3, #0
 801ea80:	f7e1 fd16 	bl	80004b0 <__aeabi_dcmpeq>
 801ea84:	1e06      	subs	r6, r0, #0
 801ea86:	d00b      	beq.n	801eaa0 <_dtoa_r+0xd0>
 801ea88:	2301      	movs	r3, #1
 801ea8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ea8c:	6013      	str	r3, [r2, #0]
 801ea8e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ea90:	2b00      	cmp	r3, #0
 801ea92:	d002      	beq.n	801ea9a <_dtoa_r+0xca>
 801ea94:	4ba5      	ldr	r3, [pc, #660]	@ (801ed2c <_dtoa_r+0x35c>)
 801ea96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ea98:	6013      	str	r3, [r2, #0]
 801ea9a:	4ba5      	ldr	r3, [pc, #660]	@ (801ed30 <_dtoa_r+0x360>)
 801ea9c:	9308      	str	r3, [sp, #32]
 801ea9e:	e7e1      	b.n	801ea64 <_dtoa_r+0x94>
 801eaa0:	ab1a      	add	r3, sp, #104	@ 0x68
 801eaa2:	9301      	str	r3, [sp, #4]
 801eaa4:	ab1b      	add	r3, sp, #108	@ 0x6c
 801eaa6:	9300      	str	r3, [sp, #0]
 801eaa8:	9803      	ldr	r0, [sp, #12]
 801eaaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801eaac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eaae:	f001 fdf1 	bl	8020694 <__d2b>
 801eab2:	007a      	lsls	r2, r7, #1
 801eab4:	9005      	str	r0, [sp, #20]
 801eab6:	0d52      	lsrs	r2, r2, #21
 801eab8:	d100      	bne.n	801eabc <_dtoa_r+0xec>
 801eaba:	e07b      	b.n	801ebb4 <_dtoa_r+0x1e4>
 801eabc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eabe:	9618      	str	r6, [sp, #96]	@ 0x60
 801eac0:	0319      	lsls	r1, r3, #12
 801eac2:	4b9c      	ldr	r3, [pc, #624]	@ (801ed34 <_dtoa_r+0x364>)
 801eac4:	0b09      	lsrs	r1, r1, #12
 801eac6:	430b      	orrs	r3, r1
 801eac8:	499b      	ldr	r1, [pc, #620]	@ (801ed38 <_dtoa_r+0x368>)
 801eaca:	1857      	adds	r7, r2, r1
 801eacc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eace:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ead0:	0019      	movs	r1, r3
 801ead2:	2200      	movs	r2, #0
 801ead4:	4b99      	ldr	r3, [pc, #612]	@ (801ed3c <_dtoa_r+0x36c>)
 801ead6:	f7e4 f879 	bl	8002bcc <__aeabi_dsub>
 801eada:	4a99      	ldr	r2, [pc, #612]	@ (801ed40 <_dtoa_r+0x370>)
 801eadc:	4b99      	ldr	r3, [pc, #612]	@ (801ed44 <_dtoa_r+0x374>)
 801eade:	f7e3 fdad 	bl	800263c <__aeabi_dmul>
 801eae2:	4a99      	ldr	r2, [pc, #612]	@ (801ed48 <_dtoa_r+0x378>)
 801eae4:	4b99      	ldr	r3, [pc, #612]	@ (801ed4c <_dtoa_r+0x37c>)
 801eae6:	f7e2 fe01 	bl	80016ec <__aeabi_dadd>
 801eaea:	0004      	movs	r4, r0
 801eaec:	0038      	movs	r0, r7
 801eaee:	000d      	movs	r5, r1
 801eaf0:	f7e4 fc66 	bl	80033c0 <__aeabi_i2d>
 801eaf4:	4a96      	ldr	r2, [pc, #600]	@ (801ed50 <_dtoa_r+0x380>)
 801eaf6:	4b97      	ldr	r3, [pc, #604]	@ (801ed54 <_dtoa_r+0x384>)
 801eaf8:	f7e3 fda0 	bl	800263c <__aeabi_dmul>
 801eafc:	0002      	movs	r2, r0
 801eafe:	000b      	movs	r3, r1
 801eb00:	0020      	movs	r0, r4
 801eb02:	0029      	movs	r1, r5
 801eb04:	f7e2 fdf2 	bl	80016ec <__aeabi_dadd>
 801eb08:	0004      	movs	r4, r0
 801eb0a:	000d      	movs	r5, r1
 801eb0c:	f7e4 fc1c 	bl	8003348 <__aeabi_d2iz>
 801eb10:	2200      	movs	r2, #0
 801eb12:	9004      	str	r0, [sp, #16]
 801eb14:	2300      	movs	r3, #0
 801eb16:	0020      	movs	r0, r4
 801eb18:	0029      	movs	r1, r5
 801eb1a:	f7e1 fccf 	bl	80004bc <__aeabi_dcmplt>
 801eb1e:	2800      	cmp	r0, #0
 801eb20:	d00b      	beq.n	801eb3a <_dtoa_r+0x16a>
 801eb22:	9804      	ldr	r0, [sp, #16]
 801eb24:	f7e4 fc4c 	bl	80033c0 <__aeabi_i2d>
 801eb28:	002b      	movs	r3, r5
 801eb2a:	0022      	movs	r2, r4
 801eb2c:	f7e1 fcc0 	bl	80004b0 <__aeabi_dcmpeq>
 801eb30:	4243      	negs	r3, r0
 801eb32:	4158      	adcs	r0, r3
 801eb34:	9b04      	ldr	r3, [sp, #16]
 801eb36:	1a1b      	subs	r3, r3, r0
 801eb38:	9304      	str	r3, [sp, #16]
 801eb3a:	2301      	movs	r3, #1
 801eb3c:	9315      	str	r3, [sp, #84]	@ 0x54
 801eb3e:	9b04      	ldr	r3, [sp, #16]
 801eb40:	2b16      	cmp	r3, #22
 801eb42:	d810      	bhi.n	801eb66 <_dtoa_r+0x196>
 801eb44:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eb46:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eb48:	9a04      	ldr	r2, [sp, #16]
 801eb4a:	4b83      	ldr	r3, [pc, #524]	@ (801ed58 <_dtoa_r+0x388>)
 801eb4c:	00d2      	lsls	r2, r2, #3
 801eb4e:	189b      	adds	r3, r3, r2
 801eb50:	681a      	ldr	r2, [r3, #0]
 801eb52:	685b      	ldr	r3, [r3, #4]
 801eb54:	f7e1 fcb2 	bl	80004bc <__aeabi_dcmplt>
 801eb58:	2800      	cmp	r0, #0
 801eb5a:	d047      	beq.n	801ebec <_dtoa_r+0x21c>
 801eb5c:	9b04      	ldr	r3, [sp, #16]
 801eb5e:	3b01      	subs	r3, #1
 801eb60:	9304      	str	r3, [sp, #16]
 801eb62:	2300      	movs	r3, #0
 801eb64:	9315      	str	r3, [sp, #84]	@ 0x54
 801eb66:	2200      	movs	r2, #0
 801eb68:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801eb6a:	9206      	str	r2, [sp, #24]
 801eb6c:	1bdb      	subs	r3, r3, r7
 801eb6e:	1e5a      	subs	r2, r3, #1
 801eb70:	d53e      	bpl.n	801ebf0 <_dtoa_r+0x220>
 801eb72:	2201      	movs	r2, #1
 801eb74:	1ad3      	subs	r3, r2, r3
 801eb76:	9306      	str	r3, [sp, #24]
 801eb78:	2300      	movs	r3, #0
 801eb7a:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb7c:	9b04      	ldr	r3, [sp, #16]
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	db38      	blt.n	801ebf4 <_dtoa_r+0x224>
 801eb82:	9a04      	ldr	r2, [sp, #16]
 801eb84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb86:	4694      	mov	ip, r2
 801eb88:	4463      	add	r3, ip
 801eb8a:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb8c:	2300      	movs	r3, #0
 801eb8e:	9214      	str	r2, [sp, #80]	@ 0x50
 801eb90:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eb92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801eb94:	2401      	movs	r4, #1
 801eb96:	2b09      	cmp	r3, #9
 801eb98:	d867      	bhi.n	801ec6a <_dtoa_r+0x29a>
 801eb9a:	2b05      	cmp	r3, #5
 801eb9c:	dd02      	ble.n	801eba4 <_dtoa_r+0x1d4>
 801eb9e:	2400      	movs	r4, #0
 801eba0:	3b04      	subs	r3, #4
 801eba2:	9322      	str	r3, [sp, #136]	@ 0x88
 801eba4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801eba6:	1e98      	subs	r0, r3, #2
 801eba8:	2803      	cmp	r0, #3
 801ebaa:	d867      	bhi.n	801ec7c <_dtoa_r+0x2ac>
 801ebac:	f7e1 fae6 	bl	800017c <__gnu_thumb1_case_uqi>
 801ebb0:	5b383a2b 	.word	0x5b383a2b
 801ebb4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ebb6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801ebb8:	18f6      	adds	r6, r6, r3
 801ebba:	4b68      	ldr	r3, [pc, #416]	@ (801ed5c <_dtoa_r+0x38c>)
 801ebbc:	18f2      	adds	r2, r6, r3
 801ebbe:	2a20      	cmp	r2, #32
 801ebc0:	dd0f      	ble.n	801ebe2 <_dtoa_r+0x212>
 801ebc2:	2340      	movs	r3, #64	@ 0x40
 801ebc4:	1a9b      	subs	r3, r3, r2
 801ebc6:	409f      	lsls	r7, r3
 801ebc8:	4b65      	ldr	r3, [pc, #404]	@ (801ed60 <_dtoa_r+0x390>)
 801ebca:	0038      	movs	r0, r7
 801ebcc:	18f3      	adds	r3, r6, r3
 801ebce:	40dc      	lsrs	r4, r3
 801ebd0:	4320      	orrs	r0, r4
 801ebd2:	f7e4 fc23 	bl	800341c <__aeabi_ui2d>
 801ebd6:	2201      	movs	r2, #1
 801ebd8:	4b62      	ldr	r3, [pc, #392]	@ (801ed64 <_dtoa_r+0x394>)
 801ebda:	1e77      	subs	r7, r6, #1
 801ebdc:	18cb      	adds	r3, r1, r3
 801ebde:	9218      	str	r2, [sp, #96]	@ 0x60
 801ebe0:	e776      	b.n	801ead0 <_dtoa_r+0x100>
 801ebe2:	2320      	movs	r3, #32
 801ebe4:	0020      	movs	r0, r4
 801ebe6:	1a9b      	subs	r3, r3, r2
 801ebe8:	4098      	lsls	r0, r3
 801ebea:	e7f2      	b.n	801ebd2 <_dtoa_r+0x202>
 801ebec:	9015      	str	r0, [sp, #84]	@ 0x54
 801ebee:	e7ba      	b.n	801eb66 <_dtoa_r+0x196>
 801ebf0:	920d      	str	r2, [sp, #52]	@ 0x34
 801ebf2:	e7c3      	b.n	801eb7c <_dtoa_r+0x1ac>
 801ebf4:	9b06      	ldr	r3, [sp, #24]
 801ebf6:	9a04      	ldr	r2, [sp, #16]
 801ebf8:	1a9b      	subs	r3, r3, r2
 801ebfa:	9306      	str	r3, [sp, #24]
 801ebfc:	4253      	negs	r3, r2
 801ebfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ec00:	2300      	movs	r3, #0
 801ec02:	9314      	str	r3, [sp, #80]	@ 0x50
 801ec04:	e7c5      	b.n	801eb92 <_dtoa_r+0x1c2>
 801ec06:	2300      	movs	r3, #0
 801ec08:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ec0c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec0e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	dc13      	bgt.n	801ec3c <_dtoa_r+0x26c>
 801ec14:	2301      	movs	r3, #1
 801ec16:	001a      	movs	r2, r3
 801ec18:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec1a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec1c:	9223      	str	r2, [sp, #140]	@ 0x8c
 801ec1e:	e00d      	b.n	801ec3c <_dtoa_r+0x26c>
 801ec20:	2301      	movs	r3, #1
 801ec22:	e7f1      	b.n	801ec08 <_dtoa_r+0x238>
 801ec24:	2300      	movs	r3, #0
 801ec26:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ec28:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec2a:	4694      	mov	ip, r2
 801ec2c:	9b04      	ldr	r3, [sp, #16]
 801ec2e:	4463      	add	r3, ip
 801ec30:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec32:	3301      	adds	r3, #1
 801ec34:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	dc00      	bgt.n	801ec3c <_dtoa_r+0x26c>
 801ec3a:	2301      	movs	r3, #1
 801ec3c:	9a03      	ldr	r2, [sp, #12]
 801ec3e:	2100      	movs	r1, #0
 801ec40:	69d0      	ldr	r0, [r2, #28]
 801ec42:	2204      	movs	r2, #4
 801ec44:	0015      	movs	r5, r2
 801ec46:	3514      	adds	r5, #20
 801ec48:	429d      	cmp	r5, r3
 801ec4a:	d91b      	bls.n	801ec84 <_dtoa_r+0x2b4>
 801ec4c:	6041      	str	r1, [r0, #4]
 801ec4e:	9803      	ldr	r0, [sp, #12]
 801ec50:	f001 f924 	bl	801fe9c <_Balloc>
 801ec54:	9008      	str	r0, [sp, #32]
 801ec56:	2800      	cmp	r0, #0
 801ec58:	d117      	bne.n	801ec8a <_dtoa_r+0x2ba>
 801ec5a:	21b0      	movs	r1, #176	@ 0xb0
 801ec5c:	4b42      	ldr	r3, [pc, #264]	@ (801ed68 <_dtoa_r+0x398>)
 801ec5e:	482e      	ldr	r0, [pc, #184]	@ (801ed18 <_dtoa_r+0x348>)
 801ec60:	9a08      	ldr	r2, [sp, #32]
 801ec62:	31ff      	adds	r1, #255	@ 0xff
 801ec64:	e6c9      	b.n	801e9fa <_dtoa_r+0x2a>
 801ec66:	2301      	movs	r3, #1
 801ec68:	e7dd      	b.n	801ec26 <_dtoa_r+0x256>
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	9410      	str	r4, [sp, #64]	@ 0x40
 801ec6e:	9322      	str	r3, [sp, #136]	@ 0x88
 801ec70:	3b01      	subs	r3, #1
 801ec72:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec74:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec76:	2200      	movs	r2, #0
 801ec78:	3313      	adds	r3, #19
 801ec7a:	e7cf      	b.n	801ec1c <_dtoa_r+0x24c>
 801ec7c:	2301      	movs	r3, #1
 801ec7e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec80:	3b02      	subs	r3, #2
 801ec82:	e7f6      	b.n	801ec72 <_dtoa_r+0x2a2>
 801ec84:	3101      	adds	r1, #1
 801ec86:	0052      	lsls	r2, r2, #1
 801ec88:	e7dc      	b.n	801ec44 <_dtoa_r+0x274>
 801ec8a:	9b03      	ldr	r3, [sp, #12]
 801ec8c:	9a08      	ldr	r2, [sp, #32]
 801ec8e:	69db      	ldr	r3, [r3, #28]
 801ec90:	601a      	str	r2, [r3, #0]
 801ec92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec94:	2b0e      	cmp	r3, #14
 801ec96:	d900      	bls.n	801ec9a <_dtoa_r+0x2ca>
 801ec98:	e0d9      	b.n	801ee4e <_dtoa_r+0x47e>
 801ec9a:	2c00      	cmp	r4, #0
 801ec9c:	d100      	bne.n	801eca0 <_dtoa_r+0x2d0>
 801ec9e:	e0d6      	b.n	801ee4e <_dtoa_r+0x47e>
 801eca0:	9b04      	ldr	r3, [sp, #16]
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	dd64      	ble.n	801ed70 <_dtoa_r+0x3a0>
 801eca6:	210f      	movs	r1, #15
 801eca8:	9a04      	ldr	r2, [sp, #16]
 801ecaa:	4b2b      	ldr	r3, [pc, #172]	@ (801ed58 <_dtoa_r+0x388>)
 801ecac:	400a      	ands	r2, r1
 801ecae:	00d2      	lsls	r2, r2, #3
 801ecb0:	189b      	adds	r3, r3, r2
 801ecb2:	681e      	ldr	r6, [r3, #0]
 801ecb4:	685f      	ldr	r7, [r3, #4]
 801ecb6:	9b04      	ldr	r3, [sp, #16]
 801ecb8:	2402      	movs	r4, #2
 801ecba:	111d      	asrs	r5, r3, #4
 801ecbc:	05db      	lsls	r3, r3, #23
 801ecbe:	d50a      	bpl.n	801ecd6 <_dtoa_r+0x306>
 801ecc0:	4b2a      	ldr	r3, [pc, #168]	@ (801ed6c <_dtoa_r+0x39c>)
 801ecc2:	400d      	ands	r5, r1
 801ecc4:	6a1a      	ldr	r2, [r3, #32]
 801ecc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ecc8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ecca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eccc:	f7e3 f872 	bl	8001db4 <__aeabi_ddiv>
 801ecd0:	900a      	str	r0, [sp, #40]	@ 0x28
 801ecd2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ecd4:	3401      	adds	r4, #1
 801ecd6:	4b25      	ldr	r3, [pc, #148]	@ (801ed6c <_dtoa_r+0x39c>)
 801ecd8:	930c      	str	r3, [sp, #48]	@ 0x30
 801ecda:	2d00      	cmp	r5, #0
 801ecdc:	d108      	bne.n	801ecf0 <_dtoa_r+0x320>
 801ecde:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ece0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ece2:	0032      	movs	r2, r6
 801ece4:	003b      	movs	r3, r7
 801ece6:	f7e3 f865 	bl	8001db4 <__aeabi_ddiv>
 801ecea:	900a      	str	r0, [sp, #40]	@ 0x28
 801ecec:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ecee:	e05a      	b.n	801eda6 <_dtoa_r+0x3d6>
 801ecf0:	2301      	movs	r3, #1
 801ecf2:	421d      	tst	r5, r3
 801ecf4:	d009      	beq.n	801ed0a <_dtoa_r+0x33a>
 801ecf6:	18e4      	adds	r4, r4, r3
 801ecf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecfa:	0030      	movs	r0, r6
 801ecfc:	681a      	ldr	r2, [r3, #0]
 801ecfe:	685b      	ldr	r3, [r3, #4]
 801ed00:	0039      	movs	r1, r7
 801ed02:	f7e3 fc9b 	bl	800263c <__aeabi_dmul>
 801ed06:	0006      	movs	r6, r0
 801ed08:	000f      	movs	r7, r1
 801ed0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed0c:	106d      	asrs	r5, r5, #1
 801ed0e:	3308      	adds	r3, #8
 801ed10:	e7e2      	b.n	801ecd8 <_dtoa_r+0x308>
 801ed12:	46c0      	nop			@ (mov r8, r8)
 801ed14:	08023a3a 	.word	0x08023a3a
 801ed18:	08023a51 	.word	0x08023a51
 801ed1c:	7ff00000 	.word	0x7ff00000
 801ed20:	0000270f 	.word	0x0000270f
 801ed24:	08023a36 	.word	0x08023a36
 801ed28:	08023a39 	.word	0x08023a39
 801ed2c:	08023a02 	.word	0x08023a02
 801ed30:	08023a01 	.word	0x08023a01
 801ed34:	3ff00000 	.word	0x3ff00000
 801ed38:	fffffc01 	.word	0xfffffc01
 801ed3c:	3ff80000 	.word	0x3ff80000
 801ed40:	636f4361 	.word	0x636f4361
 801ed44:	3fd287a7 	.word	0x3fd287a7
 801ed48:	8b60c8b3 	.word	0x8b60c8b3
 801ed4c:	3fc68a28 	.word	0x3fc68a28
 801ed50:	509f79fb 	.word	0x509f79fb
 801ed54:	3fd34413 	.word	0x3fd34413
 801ed58:	08023ba8 	.word	0x08023ba8
 801ed5c:	00000432 	.word	0x00000432
 801ed60:	00000412 	.word	0x00000412
 801ed64:	fe100000 	.word	0xfe100000
 801ed68:	08023aa9 	.word	0x08023aa9
 801ed6c:	08023b80 	.word	0x08023b80
 801ed70:	9b04      	ldr	r3, [sp, #16]
 801ed72:	2402      	movs	r4, #2
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d016      	beq.n	801eda6 <_dtoa_r+0x3d6>
 801ed78:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ed7a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ed7c:	220f      	movs	r2, #15
 801ed7e:	425d      	negs	r5, r3
 801ed80:	402a      	ands	r2, r5
 801ed82:	4bd7      	ldr	r3, [pc, #860]	@ (801f0e0 <_dtoa_r+0x710>)
 801ed84:	00d2      	lsls	r2, r2, #3
 801ed86:	189b      	adds	r3, r3, r2
 801ed88:	681a      	ldr	r2, [r3, #0]
 801ed8a:	685b      	ldr	r3, [r3, #4]
 801ed8c:	f7e3 fc56 	bl	800263c <__aeabi_dmul>
 801ed90:	2701      	movs	r7, #1
 801ed92:	2300      	movs	r3, #0
 801ed94:	900a      	str	r0, [sp, #40]	@ 0x28
 801ed96:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed98:	4ed2      	ldr	r6, [pc, #840]	@ (801f0e4 <_dtoa_r+0x714>)
 801ed9a:	112d      	asrs	r5, r5, #4
 801ed9c:	2d00      	cmp	r5, #0
 801ed9e:	d000      	beq.n	801eda2 <_dtoa_r+0x3d2>
 801eda0:	e0ba      	b.n	801ef18 <_dtoa_r+0x548>
 801eda2:	2b00      	cmp	r3, #0
 801eda4:	d1a1      	bne.n	801ecea <_dtoa_r+0x31a>
 801eda6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801eda8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801edaa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801edac:	2b00      	cmp	r3, #0
 801edae:	d100      	bne.n	801edb2 <_dtoa_r+0x3e2>
 801edb0:	e0bd      	b.n	801ef2e <_dtoa_r+0x55e>
 801edb2:	2200      	movs	r2, #0
 801edb4:	0030      	movs	r0, r6
 801edb6:	0039      	movs	r1, r7
 801edb8:	4bcb      	ldr	r3, [pc, #812]	@ (801f0e8 <_dtoa_r+0x718>)
 801edba:	f7e1 fb7f 	bl	80004bc <__aeabi_dcmplt>
 801edbe:	2800      	cmp	r0, #0
 801edc0:	d100      	bne.n	801edc4 <_dtoa_r+0x3f4>
 801edc2:	e0b4      	b.n	801ef2e <_dtoa_r+0x55e>
 801edc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d100      	bne.n	801edcc <_dtoa_r+0x3fc>
 801edca:	e0b0      	b.n	801ef2e <_dtoa_r+0x55e>
 801edcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801edce:	2b00      	cmp	r3, #0
 801edd0:	dd39      	ble.n	801ee46 <_dtoa_r+0x476>
 801edd2:	9b04      	ldr	r3, [sp, #16]
 801edd4:	2200      	movs	r2, #0
 801edd6:	3b01      	subs	r3, #1
 801edd8:	930c      	str	r3, [sp, #48]	@ 0x30
 801edda:	0030      	movs	r0, r6
 801eddc:	4bc3      	ldr	r3, [pc, #780]	@ (801f0ec <_dtoa_r+0x71c>)
 801edde:	0039      	movs	r1, r7
 801ede0:	f7e3 fc2c 	bl	800263c <__aeabi_dmul>
 801ede4:	900a      	str	r0, [sp, #40]	@ 0x28
 801ede6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ede8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801edea:	3401      	adds	r4, #1
 801edec:	0020      	movs	r0, r4
 801edee:	9311      	str	r3, [sp, #68]	@ 0x44
 801edf0:	f7e4 fae6 	bl	80033c0 <__aeabi_i2d>
 801edf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801edf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801edf8:	f7e3 fc20 	bl	800263c <__aeabi_dmul>
 801edfc:	4bbc      	ldr	r3, [pc, #752]	@ (801f0f0 <_dtoa_r+0x720>)
 801edfe:	2200      	movs	r2, #0
 801ee00:	f7e2 fc74 	bl	80016ec <__aeabi_dadd>
 801ee04:	4bbb      	ldr	r3, [pc, #748]	@ (801f0f4 <_dtoa_r+0x724>)
 801ee06:	0006      	movs	r6, r0
 801ee08:	18cf      	adds	r7, r1, r3
 801ee0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d000      	beq.n	801ee12 <_dtoa_r+0x442>
 801ee10:	e091      	b.n	801ef36 <_dtoa_r+0x566>
 801ee12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ee14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ee16:	2200      	movs	r2, #0
 801ee18:	4bb7      	ldr	r3, [pc, #732]	@ (801f0f8 <_dtoa_r+0x728>)
 801ee1a:	f7e3 fed7 	bl	8002bcc <__aeabi_dsub>
 801ee1e:	0032      	movs	r2, r6
 801ee20:	003b      	movs	r3, r7
 801ee22:	0004      	movs	r4, r0
 801ee24:	000d      	movs	r5, r1
 801ee26:	f7e1 fb5d 	bl	80004e4 <__aeabi_dcmpgt>
 801ee2a:	2800      	cmp	r0, #0
 801ee2c:	d000      	beq.n	801ee30 <_dtoa_r+0x460>
 801ee2e:	e29d      	b.n	801f36c <_dtoa_r+0x99c>
 801ee30:	2180      	movs	r1, #128	@ 0x80
 801ee32:	0609      	lsls	r1, r1, #24
 801ee34:	187b      	adds	r3, r7, r1
 801ee36:	0032      	movs	r2, r6
 801ee38:	0020      	movs	r0, r4
 801ee3a:	0029      	movs	r1, r5
 801ee3c:	f7e1 fb3e 	bl	80004bc <__aeabi_dcmplt>
 801ee40:	2800      	cmp	r0, #0
 801ee42:	d000      	beq.n	801ee46 <_dtoa_r+0x476>
 801ee44:	e130      	b.n	801f0a8 <_dtoa_r+0x6d8>
 801ee46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ee48:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ee4a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee4c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ee4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	da00      	bge.n	801ee56 <_dtoa_r+0x486>
 801ee54:	e177      	b.n	801f146 <_dtoa_r+0x776>
 801ee56:	9a04      	ldr	r2, [sp, #16]
 801ee58:	2a0e      	cmp	r2, #14
 801ee5a:	dd00      	ble.n	801ee5e <_dtoa_r+0x48e>
 801ee5c:	e173      	b.n	801f146 <_dtoa_r+0x776>
 801ee5e:	4ba0      	ldr	r3, [pc, #640]	@ (801f0e0 <_dtoa_r+0x710>)
 801ee60:	00d2      	lsls	r2, r2, #3
 801ee62:	189b      	adds	r3, r3, r2
 801ee64:	685c      	ldr	r4, [r3, #4]
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	9306      	str	r3, [sp, #24]
 801ee6a:	9407      	str	r4, [sp, #28]
 801ee6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	da03      	bge.n	801ee7a <_dtoa_r+0x4aa>
 801ee72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	dc00      	bgt.n	801ee7a <_dtoa_r+0x4aa>
 801ee78:	e106      	b.n	801f088 <_dtoa_r+0x6b8>
 801ee7a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ee7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ee7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee80:	9d08      	ldr	r5, [sp, #32]
 801ee82:	3b01      	subs	r3, #1
 801ee84:	195b      	adds	r3, r3, r5
 801ee86:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee88:	9a06      	ldr	r2, [sp, #24]
 801ee8a:	9b07      	ldr	r3, [sp, #28]
 801ee8c:	0030      	movs	r0, r6
 801ee8e:	0039      	movs	r1, r7
 801ee90:	f7e2 ff90 	bl	8001db4 <__aeabi_ddiv>
 801ee94:	f7e4 fa58 	bl	8003348 <__aeabi_d2iz>
 801ee98:	9009      	str	r0, [sp, #36]	@ 0x24
 801ee9a:	f7e4 fa91 	bl	80033c0 <__aeabi_i2d>
 801ee9e:	9a06      	ldr	r2, [sp, #24]
 801eea0:	9b07      	ldr	r3, [sp, #28]
 801eea2:	f7e3 fbcb 	bl	800263c <__aeabi_dmul>
 801eea6:	0002      	movs	r2, r0
 801eea8:	000b      	movs	r3, r1
 801eeaa:	0030      	movs	r0, r6
 801eeac:	0039      	movs	r1, r7
 801eeae:	f7e3 fe8d 	bl	8002bcc <__aeabi_dsub>
 801eeb2:	002b      	movs	r3, r5
 801eeb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eeb6:	3501      	adds	r5, #1
 801eeb8:	3230      	adds	r2, #48	@ 0x30
 801eeba:	701a      	strb	r2, [r3, #0]
 801eebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eebe:	002c      	movs	r4, r5
 801eec0:	429a      	cmp	r2, r3
 801eec2:	d000      	beq.n	801eec6 <_dtoa_r+0x4f6>
 801eec4:	e131      	b.n	801f12a <_dtoa_r+0x75a>
 801eec6:	0002      	movs	r2, r0
 801eec8:	000b      	movs	r3, r1
 801eeca:	f7e2 fc0f 	bl	80016ec <__aeabi_dadd>
 801eece:	9a06      	ldr	r2, [sp, #24]
 801eed0:	9b07      	ldr	r3, [sp, #28]
 801eed2:	0006      	movs	r6, r0
 801eed4:	000f      	movs	r7, r1
 801eed6:	f7e1 fb05 	bl	80004e4 <__aeabi_dcmpgt>
 801eeda:	2800      	cmp	r0, #0
 801eedc:	d000      	beq.n	801eee0 <_dtoa_r+0x510>
 801eede:	e10f      	b.n	801f100 <_dtoa_r+0x730>
 801eee0:	9a06      	ldr	r2, [sp, #24]
 801eee2:	9b07      	ldr	r3, [sp, #28]
 801eee4:	0030      	movs	r0, r6
 801eee6:	0039      	movs	r1, r7
 801eee8:	f7e1 fae2 	bl	80004b0 <__aeabi_dcmpeq>
 801eeec:	2800      	cmp	r0, #0
 801eeee:	d003      	beq.n	801eef8 <_dtoa_r+0x528>
 801eef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eef2:	07dd      	lsls	r5, r3, #31
 801eef4:	d500      	bpl.n	801eef8 <_dtoa_r+0x528>
 801eef6:	e103      	b.n	801f100 <_dtoa_r+0x730>
 801eef8:	9905      	ldr	r1, [sp, #20]
 801eefa:	9803      	ldr	r0, [sp, #12]
 801eefc:	f001 f812 	bl	801ff24 <_Bfree>
 801ef00:	2300      	movs	r3, #0
 801ef02:	7023      	strb	r3, [r4, #0]
 801ef04:	9b04      	ldr	r3, [sp, #16]
 801ef06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ef08:	3301      	adds	r3, #1
 801ef0a:	6013      	str	r3, [r2, #0]
 801ef0c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ef0e:	2b00      	cmp	r3, #0
 801ef10:	d100      	bne.n	801ef14 <_dtoa_r+0x544>
 801ef12:	e5a7      	b.n	801ea64 <_dtoa_r+0x94>
 801ef14:	601c      	str	r4, [r3, #0]
 801ef16:	e5a5      	b.n	801ea64 <_dtoa_r+0x94>
 801ef18:	423d      	tst	r5, r7
 801ef1a:	d005      	beq.n	801ef28 <_dtoa_r+0x558>
 801ef1c:	6832      	ldr	r2, [r6, #0]
 801ef1e:	6873      	ldr	r3, [r6, #4]
 801ef20:	f7e3 fb8c 	bl	800263c <__aeabi_dmul>
 801ef24:	003b      	movs	r3, r7
 801ef26:	3401      	adds	r4, #1
 801ef28:	106d      	asrs	r5, r5, #1
 801ef2a:	3608      	adds	r6, #8
 801ef2c:	e736      	b.n	801ed9c <_dtoa_r+0x3cc>
 801ef2e:	9b04      	ldr	r3, [sp, #16]
 801ef30:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef34:	e75a      	b.n	801edec <_dtoa_r+0x41c>
 801ef36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ef38:	4b69      	ldr	r3, [pc, #420]	@ (801f0e0 <_dtoa_r+0x710>)
 801ef3a:	3a01      	subs	r2, #1
 801ef3c:	00d2      	lsls	r2, r2, #3
 801ef3e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ef40:	189b      	adds	r3, r3, r2
 801ef42:	681a      	ldr	r2, [r3, #0]
 801ef44:	685b      	ldr	r3, [r3, #4]
 801ef46:	2900      	cmp	r1, #0
 801ef48:	d04c      	beq.n	801efe4 <_dtoa_r+0x614>
 801ef4a:	2000      	movs	r0, #0
 801ef4c:	496b      	ldr	r1, [pc, #428]	@ (801f0fc <_dtoa_r+0x72c>)
 801ef4e:	f7e2 ff31 	bl	8001db4 <__aeabi_ddiv>
 801ef52:	0032      	movs	r2, r6
 801ef54:	003b      	movs	r3, r7
 801ef56:	f7e3 fe39 	bl	8002bcc <__aeabi_dsub>
 801ef5a:	9a08      	ldr	r2, [sp, #32]
 801ef5c:	0006      	movs	r6, r0
 801ef5e:	4694      	mov	ip, r2
 801ef60:	000f      	movs	r7, r1
 801ef62:	9b08      	ldr	r3, [sp, #32]
 801ef64:	9316      	str	r3, [sp, #88]	@ 0x58
 801ef66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ef68:	4463      	add	r3, ip
 801ef6a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ef6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ef6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ef70:	f7e4 f9ea 	bl	8003348 <__aeabi_d2iz>
 801ef74:	0005      	movs	r5, r0
 801ef76:	f7e4 fa23 	bl	80033c0 <__aeabi_i2d>
 801ef7a:	0002      	movs	r2, r0
 801ef7c:	000b      	movs	r3, r1
 801ef7e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ef80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ef82:	f7e3 fe23 	bl	8002bcc <__aeabi_dsub>
 801ef86:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ef88:	3530      	adds	r5, #48	@ 0x30
 801ef8a:	1c5c      	adds	r4, r3, #1
 801ef8c:	701d      	strb	r5, [r3, #0]
 801ef8e:	0032      	movs	r2, r6
 801ef90:	003b      	movs	r3, r7
 801ef92:	900a      	str	r0, [sp, #40]	@ 0x28
 801ef94:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ef96:	f7e1 fa91 	bl	80004bc <__aeabi_dcmplt>
 801ef9a:	2800      	cmp	r0, #0
 801ef9c:	d16a      	bne.n	801f074 <_dtoa_r+0x6a4>
 801ef9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801efa0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efa2:	2000      	movs	r0, #0
 801efa4:	4950      	ldr	r1, [pc, #320]	@ (801f0e8 <_dtoa_r+0x718>)
 801efa6:	f7e3 fe11 	bl	8002bcc <__aeabi_dsub>
 801efaa:	0032      	movs	r2, r6
 801efac:	003b      	movs	r3, r7
 801efae:	f7e1 fa85 	bl	80004bc <__aeabi_dcmplt>
 801efb2:	2800      	cmp	r0, #0
 801efb4:	d000      	beq.n	801efb8 <_dtoa_r+0x5e8>
 801efb6:	e0a5      	b.n	801f104 <_dtoa_r+0x734>
 801efb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801efba:	42a3      	cmp	r3, r4
 801efbc:	d100      	bne.n	801efc0 <_dtoa_r+0x5f0>
 801efbe:	e742      	b.n	801ee46 <_dtoa_r+0x476>
 801efc0:	2200      	movs	r2, #0
 801efc2:	0030      	movs	r0, r6
 801efc4:	0039      	movs	r1, r7
 801efc6:	4b49      	ldr	r3, [pc, #292]	@ (801f0ec <_dtoa_r+0x71c>)
 801efc8:	f7e3 fb38 	bl	800263c <__aeabi_dmul>
 801efcc:	2200      	movs	r2, #0
 801efce:	0006      	movs	r6, r0
 801efd0:	000f      	movs	r7, r1
 801efd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801efd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801efd6:	4b45      	ldr	r3, [pc, #276]	@ (801f0ec <_dtoa_r+0x71c>)
 801efd8:	f7e3 fb30 	bl	800263c <__aeabi_dmul>
 801efdc:	9416      	str	r4, [sp, #88]	@ 0x58
 801efde:	900a      	str	r0, [sp, #40]	@ 0x28
 801efe0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801efe2:	e7c3      	b.n	801ef6c <_dtoa_r+0x59c>
 801efe4:	0030      	movs	r0, r6
 801efe6:	0039      	movs	r1, r7
 801efe8:	f7e3 fb28 	bl	800263c <__aeabi_dmul>
 801efec:	9d08      	ldr	r5, [sp, #32]
 801efee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801eff0:	002b      	movs	r3, r5
 801eff2:	4694      	mov	ip, r2
 801eff4:	9016      	str	r0, [sp, #88]	@ 0x58
 801eff6:	9117      	str	r1, [sp, #92]	@ 0x5c
 801eff8:	4463      	add	r3, ip
 801effa:	9319      	str	r3, [sp, #100]	@ 0x64
 801effc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801effe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f000:	f7e4 f9a2 	bl	8003348 <__aeabi_d2iz>
 801f004:	0004      	movs	r4, r0
 801f006:	f7e4 f9db 	bl	80033c0 <__aeabi_i2d>
 801f00a:	000b      	movs	r3, r1
 801f00c:	0002      	movs	r2, r0
 801f00e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f012:	f7e3 fddb 	bl	8002bcc <__aeabi_dsub>
 801f016:	3430      	adds	r4, #48	@ 0x30
 801f018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f01a:	702c      	strb	r4, [r5, #0]
 801f01c:	3501      	adds	r5, #1
 801f01e:	0006      	movs	r6, r0
 801f020:	000f      	movs	r7, r1
 801f022:	42ab      	cmp	r3, r5
 801f024:	d129      	bne.n	801f07a <_dtoa_r+0x6aa>
 801f026:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f028:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f02a:	9b08      	ldr	r3, [sp, #32]
 801f02c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f02e:	469c      	mov	ip, r3
 801f030:	2200      	movs	r2, #0
 801f032:	4b32      	ldr	r3, [pc, #200]	@ (801f0fc <_dtoa_r+0x72c>)
 801f034:	4464      	add	r4, ip
 801f036:	f7e2 fb59 	bl	80016ec <__aeabi_dadd>
 801f03a:	0002      	movs	r2, r0
 801f03c:	000b      	movs	r3, r1
 801f03e:	0030      	movs	r0, r6
 801f040:	0039      	movs	r1, r7
 801f042:	f7e1 fa4f 	bl	80004e4 <__aeabi_dcmpgt>
 801f046:	2800      	cmp	r0, #0
 801f048:	d15c      	bne.n	801f104 <_dtoa_r+0x734>
 801f04a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f04c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f04e:	2000      	movs	r0, #0
 801f050:	492a      	ldr	r1, [pc, #168]	@ (801f0fc <_dtoa_r+0x72c>)
 801f052:	f7e3 fdbb 	bl	8002bcc <__aeabi_dsub>
 801f056:	0002      	movs	r2, r0
 801f058:	000b      	movs	r3, r1
 801f05a:	0030      	movs	r0, r6
 801f05c:	0039      	movs	r1, r7
 801f05e:	f7e1 fa2d 	bl	80004bc <__aeabi_dcmplt>
 801f062:	2800      	cmp	r0, #0
 801f064:	d100      	bne.n	801f068 <_dtoa_r+0x698>
 801f066:	e6ee      	b.n	801ee46 <_dtoa_r+0x476>
 801f068:	0023      	movs	r3, r4
 801f06a:	3c01      	subs	r4, #1
 801f06c:	7822      	ldrb	r2, [r4, #0]
 801f06e:	2a30      	cmp	r2, #48	@ 0x30
 801f070:	d0fa      	beq.n	801f068 <_dtoa_r+0x698>
 801f072:	001c      	movs	r4, r3
 801f074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f076:	9304      	str	r3, [sp, #16]
 801f078:	e73e      	b.n	801eef8 <_dtoa_r+0x528>
 801f07a:	2200      	movs	r2, #0
 801f07c:	4b1b      	ldr	r3, [pc, #108]	@ (801f0ec <_dtoa_r+0x71c>)
 801f07e:	f7e3 fadd 	bl	800263c <__aeabi_dmul>
 801f082:	900a      	str	r0, [sp, #40]	@ 0x28
 801f084:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f086:	e7b9      	b.n	801effc <_dtoa_r+0x62c>
 801f088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d10c      	bne.n	801f0a8 <_dtoa_r+0x6d8>
 801f08e:	9806      	ldr	r0, [sp, #24]
 801f090:	9907      	ldr	r1, [sp, #28]
 801f092:	2200      	movs	r2, #0
 801f094:	4b18      	ldr	r3, [pc, #96]	@ (801f0f8 <_dtoa_r+0x728>)
 801f096:	f7e3 fad1 	bl	800263c <__aeabi_dmul>
 801f09a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f09c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f09e:	f7e1 fa2b 	bl	80004f8 <__aeabi_dcmpge>
 801f0a2:	2800      	cmp	r0, #0
 801f0a4:	d100      	bne.n	801f0a8 <_dtoa_r+0x6d8>
 801f0a6:	e164      	b.n	801f372 <_dtoa_r+0x9a2>
 801f0a8:	2600      	movs	r6, #0
 801f0aa:	0037      	movs	r7, r6
 801f0ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f0ae:	9c08      	ldr	r4, [sp, #32]
 801f0b0:	43db      	mvns	r3, r3
 801f0b2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f0b4:	2300      	movs	r3, #0
 801f0b6:	9304      	str	r3, [sp, #16]
 801f0b8:	0031      	movs	r1, r6
 801f0ba:	9803      	ldr	r0, [sp, #12]
 801f0bc:	f000 ff32 	bl	801ff24 <_Bfree>
 801f0c0:	2f00      	cmp	r7, #0
 801f0c2:	d0d7      	beq.n	801f074 <_dtoa_r+0x6a4>
 801f0c4:	9b04      	ldr	r3, [sp, #16]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d005      	beq.n	801f0d6 <_dtoa_r+0x706>
 801f0ca:	42bb      	cmp	r3, r7
 801f0cc:	d003      	beq.n	801f0d6 <_dtoa_r+0x706>
 801f0ce:	0019      	movs	r1, r3
 801f0d0:	9803      	ldr	r0, [sp, #12]
 801f0d2:	f000 ff27 	bl	801ff24 <_Bfree>
 801f0d6:	0039      	movs	r1, r7
 801f0d8:	9803      	ldr	r0, [sp, #12]
 801f0da:	f000 ff23 	bl	801ff24 <_Bfree>
 801f0de:	e7c9      	b.n	801f074 <_dtoa_r+0x6a4>
 801f0e0:	08023ba8 	.word	0x08023ba8
 801f0e4:	08023b80 	.word	0x08023b80
 801f0e8:	3ff00000 	.word	0x3ff00000
 801f0ec:	40240000 	.word	0x40240000
 801f0f0:	401c0000 	.word	0x401c0000
 801f0f4:	fcc00000 	.word	0xfcc00000
 801f0f8:	40140000 	.word	0x40140000
 801f0fc:	3fe00000 	.word	0x3fe00000
 801f100:	9b04      	ldr	r3, [sp, #16]
 801f102:	930c      	str	r3, [sp, #48]	@ 0x30
 801f104:	0023      	movs	r3, r4
 801f106:	001c      	movs	r4, r3
 801f108:	3b01      	subs	r3, #1
 801f10a:	781a      	ldrb	r2, [r3, #0]
 801f10c:	2a39      	cmp	r2, #57	@ 0x39
 801f10e:	d108      	bne.n	801f122 <_dtoa_r+0x752>
 801f110:	9a08      	ldr	r2, [sp, #32]
 801f112:	429a      	cmp	r2, r3
 801f114:	d1f7      	bne.n	801f106 <_dtoa_r+0x736>
 801f116:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f118:	9908      	ldr	r1, [sp, #32]
 801f11a:	3201      	adds	r2, #1
 801f11c:	920c      	str	r2, [sp, #48]	@ 0x30
 801f11e:	2230      	movs	r2, #48	@ 0x30
 801f120:	700a      	strb	r2, [r1, #0]
 801f122:	781a      	ldrb	r2, [r3, #0]
 801f124:	3201      	adds	r2, #1
 801f126:	701a      	strb	r2, [r3, #0]
 801f128:	e7a4      	b.n	801f074 <_dtoa_r+0x6a4>
 801f12a:	2200      	movs	r2, #0
 801f12c:	4bc6      	ldr	r3, [pc, #792]	@ (801f448 <_dtoa_r+0xa78>)
 801f12e:	f7e3 fa85 	bl	800263c <__aeabi_dmul>
 801f132:	2200      	movs	r2, #0
 801f134:	2300      	movs	r3, #0
 801f136:	0006      	movs	r6, r0
 801f138:	000f      	movs	r7, r1
 801f13a:	f7e1 f9b9 	bl	80004b0 <__aeabi_dcmpeq>
 801f13e:	2800      	cmp	r0, #0
 801f140:	d100      	bne.n	801f144 <_dtoa_r+0x774>
 801f142:	e6a1      	b.n	801ee88 <_dtoa_r+0x4b8>
 801f144:	e6d8      	b.n	801eef8 <_dtoa_r+0x528>
 801f146:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f148:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f14a:	9c06      	ldr	r4, [sp, #24]
 801f14c:	2f00      	cmp	r7, #0
 801f14e:	d014      	beq.n	801f17a <_dtoa_r+0x7aa>
 801f150:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f152:	2a01      	cmp	r2, #1
 801f154:	dd00      	ble.n	801f158 <_dtoa_r+0x788>
 801f156:	e0c8      	b.n	801f2ea <_dtoa_r+0x91a>
 801f158:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f15a:	2a00      	cmp	r2, #0
 801f15c:	d100      	bne.n	801f160 <_dtoa_r+0x790>
 801f15e:	e0be      	b.n	801f2de <_dtoa_r+0x90e>
 801f160:	4aba      	ldr	r2, [pc, #744]	@ (801f44c <_dtoa_r+0xa7c>)
 801f162:	189b      	adds	r3, r3, r2
 801f164:	9a06      	ldr	r2, [sp, #24]
 801f166:	2101      	movs	r1, #1
 801f168:	18d2      	adds	r2, r2, r3
 801f16a:	9206      	str	r2, [sp, #24]
 801f16c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f16e:	9803      	ldr	r0, [sp, #12]
 801f170:	18d3      	adds	r3, r2, r3
 801f172:	930d      	str	r3, [sp, #52]	@ 0x34
 801f174:	f000 ffda 	bl	802012c <__i2b>
 801f178:	0007      	movs	r7, r0
 801f17a:	2c00      	cmp	r4, #0
 801f17c:	d00e      	beq.n	801f19c <_dtoa_r+0x7cc>
 801f17e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f180:	2b00      	cmp	r3, #0
 801f182:	dd0b      	ble.n	801f19c <_dtoa_r+0x7cc>
 801f184:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f186:	0023      	movs	r3, r4
 801f188:	4294      	cmp	r4, r2
 801f18a:	dd00      	ble.n	801f18e <_dtoa_r+0x7be>
 801f18c:	0013      	movs	r3, r2
 801f18e:	9a06      	ldr	r2, [sp, #24]
 801f190:	1ae4      	subs	r4, r4, r3
 801f192:	1ad2      	subs	r2, r2, r3
 801f194:	9206      	str	r2, [sp, #24]
 801f196:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f198:	1ad3      	subs	r3, r2, r3
 801f19a:	930d      	str	r3, [sp, #52]	@ 0x34
 801f19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d01f      	beq.n	801f1e2 <_dtoa_r+0x812>
 801f1a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d100      	bne.n	801f1aa <_dtoa_r+0x7da>
 801f1a8:	e0b5      	b.n	801f316 <_dtoa_r+0x946>
 801f1aa:	2d00      	cmp	r5, #0
 801f1ac:	d010      	beq.n	801f1d0 <_dtoa_r+0x800>
 801f1ae:	0039      	movs	r1, r7
 801f1b0:	002a      	movs	r2, r5
 801f1b2:	9803      	ldr	r0, [sp, #12]
 801f1b4:	f001 f884 	bl	80202c0 <__pow5mult>
 801f1b8:	9a05      	ldr	r2, [sp, #20]
 801f1ba:	0001      	movs	r1, r0
 801f1bc:	0007      	movs	r7, r0
 801f1be:	9803      	ldr	r0, [sp, #12]
 801f1c0:	f000 ffcc 	bl	802015c <__multiply>
 801f1c4:	0006      	movs	r6, r0
 801f1c6:	9905      	ldr	r1, [sp, #20]
 801f1c8:	9803      	ldr	r0, [sp, #12]
 801f1ca:	f000 feab 	bl	801ff24 <_Bfree>
 801f1ce:	9605      	str	r6, [sp, #20]
 801f1d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f1d2:	1b5a      	subs	r2, r3, r5
 801f1d4:	42ab      	cmp	r3, r5
 801f1d6:	d004      	beq.n	801f1e2 <_dtoa_r+0x812>
 801f1d8:	9905      	ldr	r1, [sp, #20]
 801f1da:	9803      	ldr	r0, [sp, #12]
 801f1dc:	f001 f870 	bl	80202c0 <__pow5mult>
 801f1e0:	9005      	str	r0, [sp, #20]
 801f1e2:	2101      	movs	r1, #1
 801f1e4:	9803      	ldr	r0, [sp, #12]
 801f1e6:	f000 ffa1 	bl	802012c <__i2b>
 801f1ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f1ec:	0006      	movs	r6, r0
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d100      	bne.n	801f1f4 <_dtoa_r+0x824>
 801f1f2:	e1bc      	b.n	801f56e <_dtoa_r+0xb9e>
 801f1f4:	001a      	movs	r2, r3
 801f1f6:	0001      	movs	r1, r0
 801f1f8:	9803      	ldr	r0, [sp, #12]
 801f1fa:	f001 f861 	bl	80202c0 <__pow5mult>
 801f1fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f200:	0006      	movs	r6, r0
 801f202:	2500      	movs	r5, #0
 801f204:	2b01      	cmp	r3, #1
 801f206:	dc16      	bgt.n	801f236 <_dtoa_r+0x866>
 801f208:	2500      	movs	r5, #0
 801f20a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f20c:	42ab      	cmp	r3, r5
 801f20e:	d10e      	bne.n	801f22e <_dtoa_r+0x85e>
 801f210:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f212:	031b      	lsls	r3, r3, #12
 801f214:	42ab      	cmp	r3, r5
 801f216:	d10a      	bne.n	801f22e <_dtoa_r+0x85e>
 801f218:	4b8d      	ldr	r3, [pc, #564]	@ (801f450 <_dtoa_r+0xa80>)
 801f21a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f21c:	4213      	tst	r3, r2
 801f21e:	d006      	beq.n	801f22e <_dtoa_r+0x85e>
 801f220:	9b06      	ldr	r3, [sp, #24]
 801f222:	3501      	adds	r5, #1
 801f224:	3301      	adds	r3, #1
 801f226:	9306      	str	r3, [sp, #24]
 801f228:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f22a:	3301      	adds	r3, #1
 801f22c:	930d      	str	r3, [sp, #52]	@ 0x34
 801f22e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f230:	2001      	movs	r0, #1
 801f232:	2b00      	cmp	r3, #0
 801f234:	d008      	beq.n	801f248 <_dtoa_r+0x878>
 801f236:	6933      	ldr	r3, [r6, #16]
 801f238:	3303      	adds	r3, #3
 801f23a:	009b      	lsls	r3, r3, #2
 801f23c:	18f3      	adds	r3, r6, r3
 801f23e:	6858      	ldr	r0, [r3, #4]
 801f240:	f000 ff24 	bl	802008c <__hi0bits>
 801f244:	2320      	movs	r3, #32
 801f246:	1a18      	subs	r0, r3, r0
 801f248:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f24a:	1818      	adds	r0, r3, r0
 801f24c:	0002      	movs	r2, r0
 801f24e:	231f      	movs	r3, #31
 801f250:	401a      	ands	r2, r3
 801f252:	4218      	tst	r0, r3
 801f254:	d065      	beq.n	801f322 <_dtoa_r+0x952>
 801f256:	3301      	adds	r3, #1
 801f258:	1a9b      	subs	r3, r3, r2
 801f25a:	2b04      	cmp	r3, #4
 801f25c:	dd5d      	ble.n	801f31a <_dtoa_r+0x94a>
 801f25e:	231c      	movs	r3, #28
 801f260:	1a9b      	subs	r3, r3, r2
 801f262:	9a06      	ldr	r2, [sp, #24]
 801f264:	18e4      	adds	r4, r4, r3
 801f266:	18d2      	adds	r2, r2, r3
 801f268:	9206      	str	r2, [sp, #24]
 801f26a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f26c:	18d3      	adds	r3, r2, r3
 801f26e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f270:	9b06      	ldr	r3, [sp, #24]
 801f272:	2b00      	cmp	r3, #0
 801f274:	dd05      	ble.n	801f282 <_dtoa_r+0x8b2>
 801f276:	001a      	movs	r2, r3
 801f278:	9905      	ldr	r1, [sp, #20]
 801f27a:	9803      	ldr	r0, [sp, #12]
 801f27c:	f001 f87c 	bl	8020378 <__lshift>
 801f280:	9005      	str	r0, [sp, #20]
 801f282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f284:	2b00      	cmp	r3, #0
 801f286:	dd05      	ble.n	801f294 <_dtoa_r+0x8c4>
 801f288:	0031      	movs	r1, r6
 801f28a:	001a      	movs	r2, r3
 801f28c:	9803      	ldr	r0, [sp, #12]
 801f28e:	f001 f873 	bl	8020378 <__lshift>
 801f292:	0006      	movs	r6, r0
 801f294:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f296:	2b00      	cmp	r3, #0
 801f298:	d045      	beq.n	801f326 <_dtoa_r+0x956>
 801f29a:	0031      	movs	r1, r6
 801f29c:	9805      	ldr	r0, [sp, #20]
 801f29e:	f001 f8d7 	bl	8020450 <__mcmp>
 801f2a2:	2800      	cmp	r0, #0
 801f2a4:	da3f      	bge.n	801f326 <_dtoa_r+0x956>
 801f2a6:	9b04      	ldr	r3, [sp, #16]
 801f2a8:	220a      	movs	r2, #10
 801f2aa:	3b01      	subs	r3, #1
 801f2ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801f2ae:	9905      	ldr	r1, [sp, #20]
 801f2b0:	2300      	movs	r3, #0
 801f2b2:	9803      	ldr	r0, [sp, #12]
 801f2b4:	f000 fe5a 	bl	801ff6c <__multadd>
 801f2b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2ba:	9005      	str	r0, [sp, #20]
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	d100      	bne.n	801f2c2 <_dtoa_r+0x8f2>
 801f2c0:	e15c      	b.n	801f57c <_dtoa_r+0xbac>
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	0039      	movs	r1, r7
 801f2c6:	220a      	movs	r2, #10
 801f2c8:	9803      	ldr	r0, [sp, #12]
 801f2ca:	f000 fe4f 	bl	801ff6c <__multadd>
 801f2ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2d0:	0007      	movs	r7, r0
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	dc55      	bgt.n	801f382 <_dtoa_r+0x9b2>
 801f2d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f2d8:	2b02      	cmp	r3, #2
 801f2da:	dc2d      	bgt.n	801f338 <_dtoa_r+0x968>
 801f2dc:	e051      	b.n	801f382 <_dtoa_r+0x9b2>
 801f2de:	2336      	movs	r3, #54	@ 0x36
 801f2e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f2e2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f2e4:	9c06      	ldr	r4, [sp, #24]
 801f2e6:	1a9b      	subs	r3, r3, r2
 801f2e8:	e73c      	b.n	801f164 <_dtoa_r+0x794>
 801f2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2ec:	1e5d      	subs	r5, r3, #1
 801f2ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f2f0:	42ab      	cmp	r3, r5
 801f2f2:	db08      	blt.n	801f306 <_dtoa_r+0x936>
 801f2f4:	1b5d      	subs	r5, r3, r5
 801f2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2f8:	9c06      	ldr	r4, [sp, #24]
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	db00      	blt.n	801f300 <_dtoa_r+0x930>
 801f2fe:	e731      	b.n	801f164 <_dtoa_r+0x794>
 801f300:	1ae4      	subs	r4, r4, r3
 801f302:	2300      	movs	r3, #0
 801f304:	e72e      	b.n	801f164 <_dtoa_r+0x794>
 801f306:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f308:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f30a:	1aeb      	subs	r3, r5, r3
 801f30c:	18d3      	adds	r3, r2, r3
 801f30e:	950f      	str	r5, [sp, #60]	@ 0x3c
 801f310:	9314      	str	r3, [sp, #80]	@ 0x50
 801f312:	2500      	movs	r5, #0
 801f314:	e7ef      	b.n	801f2f6 <_dtoa_r+0x926>
 801f316:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f318:	e75e      	b.n	801f1d8 <_dtoa_r+0x808>
 801f31a:	2b04      	cmp	r3, #4
 801f31c:	d0a8      	beq.n	801f270 <_dtoa_r+0x8a0>
 801f31e:	331c      	adds	r3, #28
 801f320:	e79f      	b.n	801f262 <_dtoa_r+0x892>
 801f322:	0013      	movs	r3, r2
 801f324:	e7fb      	b.n	801f31e <_dtoa_r+0x94e>
 801f326:	9b04      	ldr	r3, [sp, #16]
 801f328:	930c      	str	r3, [sp, #48]	@ 0x30
 801f32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f32c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f32e:	2b00      	cmp	r3, #0
 801f330:	dc23      	bgt.n	801f37a <_dtoa_r+0x9aa>
 801f332:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f334:	2b02      	cmp	r3, #2
 801f336:	dd20      	ble.n	801f37a <_dtoa_r+0x9aa>
 801f338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	d000      	beq.n	801f340 <_dtoa_r+0x970>
 801f33e:	e6b5      	b.n	801f0ac <_dtoa_r+0x6dc>
 801f340:	0031      	movs	r1, r6
 801f342:	2205      	movs	r2, #5
 801f344:	9803      	ldr	r0, [sp, #12]
 801f346:	f000 fe11 	bl	801ff6c <__multadd>
 801f34a:	0006      	movs	r6, r0
 801f34c:	0001      	movs	r1, r0
 801f34e:	9805      	ldr	r0, [sp, #20]
 801f350:	f001 f87e 	bl	8020450 <__mcmp>
 801f354:	2800      	cmp	r0, #0
 801f356:	dc00      	bgt.n	801f35a <_dtoa_r+0x98a>
 801f358:	e6a8      	b.n	801f0ac <_dtoa_r+0x6dc>
 801f35a:	9b08      	ldr	r3, [sp, #32]
 801f35c:	9a08      	ldr	r2, [sp, #32]
 801f35e:	1c5c      	adds	r4, r3, #1
 801f360:	2331      	movs	r3, #49	@ 0x31
 801f362:	7013      	strb	r3, [r2, #0]
 801f364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f366:	3301      	adds	r3, #1
 801f368:	930c      	str	r3, [sp, #48]	@ 0x30
 801f36a:	e6a3      	b.n	801f0b4 <_dtoa_r+0x6e4>
 801f36c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f36e:	0037      	movs	r7, r6
 801f370:	e7f3      	b.n	801f35a <_dtoa_r+0x98a>
 801f372:	9b04      	ldr	r3, [sp, #16]
 801f374:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801f376:	930c      	str	r3, [sp, #48]	@ 0x30
 801f378:	e7f9      	b.n	801f36e <_dtoa_r+0x99e>
 801f37a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f37c:	2b00      	cmp	r3, #0
 801f37e:	d100      	bne.n	801f382 <_dtoa_r+0x9b2>
 801f380:	e100      	b.n	801f584 <_dtoa_r+0xbb4>
 801f382:	2c00      	cmp	r4, #0
 801f384:	dd05      	ble.n	801f392 <_dtoa_r+0x9c2>
 801f386:	0039      	movs	r1, r7
 801f388:	0022      	movs	r2, r4
 801f38a:	9803      	ldr	r0, [sp, #12]
 801f38c:	f000 fff4 	bl	8020378 <__lshift>
 801f390:	0007      	movs	r7, r0
 801f392:	0038      	movs	r0, r7
 801f394:	2d00      	cmp	r5, #0
 801f396:	d018      	beq.n	801f3ca <_dtoa_r+0x9fa>
 801f398:	6879      	ldr	r1, [r7, #4]
 801f39a:	9803      	ldr	r0, [sp, #12]
 801f39c:	f000 fd7e 	bl	801fe9c <_Balloc>
 801f3a0:	1e04      	subs	r4, r0, #0
 801f3a2:	d105      	bne.n	801f3b0 <_dtoa_r+0x9e0>
 801f3a4:	0022      	movs	r2, r4
 801f3a6:	4b2b      	ldr	r3, [pc, #172]	@ (801f454 <_dtoa_r+0xa84>)
 801f3a8:	482b      	ldr	r0, [pc, #172]	@ (801f458 <_dtoa_r+0xa88>)
 801f3aa:	492c      	ldr	r1, [pc, #176]	@ (801f45c <_dtoa_r+0xa8c>)
 801f3ac:	f7ff fb25 	bl	801e9fa <_dtoa_r+0x2a>
 801f3b0:	0039      	movs	r1, r7
 801f3b2:	693a      	ldr	r2, [r7, #16]
 801f3b4:	310c      	adds	r1, #12
 801f3b6:	3202      	adds	r2, #2
 801f3b8:	0092      	lsls	r2, r2, #2
 801f3ba:	300c      	adds	r0, #12
 801f3bc:	f7ff fa6a 	bl	801e894 <memcpy>
 801f3c0:	2201      	movs	r2, #1
 801f3c2:	0021      	movs	r1, r4
 801f3c4:	9803      	ldr	r0, [sp, #12]
 801f3c6:	f000 ffd7 	bl	8020378 <__lshift>
 801f3ca:	9b08      	ldr	r3, [sp, #32]
 801f3cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f3ce:	9306      	str	r3, [sp, #24]
 801f3d0:	3b01      	subs	r3, #1
 801f3d2:	189b      	adds	r3, r3, r2
 801f3d4:	2201      	movs	r2, #1
 801f3d6:	9704      	str	r7, [sp, #16]
 801f3d8:	0007      	movs	r7, r0
 801f3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3de:	4013      	ands	r3, r2
 801f3e0:	930e      	str	r3, [sp, #56]	@ 0x38
 801f3e2:	0031      	movs	r1, r6
 801f3e4:	9805      	ldr	r0, [sp, #20]
 801f3e6:	f7ff fa65 	bl	801e8b4 <quorem>
 801f3ea:	9904      	ldr	r1, [sp, #16]
 801f3ec:	0005      	movs	r5, r0
 801f3ee:	900a      	str	r0, [sp, #40]	@ 0x28
 801f3f0:	9805      	ldr	r0, [sp, #20]
 801f3f2:	f001 f82d 	bl	8020450 <__mcmp>
 801f3f6:	003a      	movs	r2, r7
 801f3f8:	900d      	str	r0, [sp, #52]	@ 0x34
 801f3fa:	0031      	movs	r1, r6
 801f3fc:	9803      	ldr	r0, [sp, #12]
 801f3fe:	f001 f843 	bl	8020488 <__mdiff>
 801f402:	2201      	movs	r2, #1
 801f404:	68c3      	ldr	r3, [r0, #12]
 801f406:	0004      	movs	r4, r0
 801f408:	3530      	adds	r5, #48	@ 0x30
 801f40a:	9209      	str	r2, [sp, #36]	@ 0x24
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d104      	bne.n	801f41a <_dtoa_r+0xa4a>
 801f410:	0001      	movs	r1, r0
 801f412:	9805      	ldr	r0, [sp, #20]
 801f414:	f001 f81c 	bl	8020450 <__mcmp>
 801f418:	9009      	str	r0, [sp, #36]	@ 0x24
 801f41a:	0021      	movs	r1, r4
 801f41c:	9803      	ldr	r0, [sp, #12]
 801f41e:	f000 fd81 	bl	801ff24 <_Bfree>
 801f422:	9b06      	ldr	r3, [sp, #24]
 801f424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f426:	1c5c      	adds	r4, r3, #1
 801f428:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f42a:	4313      	orrs	r3, r2
 801f42c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f42e:	4313      	orrs	r3, r2
 801f430:	d116      	bne.n	801f460 <_dtoa_r+0xa90>
 801f432:	2d39      	cmp	r5, #57	@ 0x39
 801f434:	d02f      	beq.n	801f496 <_dtoa_r+0xac6>
 801f436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f438:	2b00      	cmp	r3, #0
 801f43a:	dd01      	ble.n	801f440 <_dtoa_r+0xa70>
 801f43c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801f43e:	3531      	adds	r5, #49	@ 0x31
 801f440:	9b06      	ldr	r3, [sp, #24]
 801f442:	701d      	strb	r5, [r3, #0]
 801f444:	e638      	b.n	801f0b8 <_dtoa_r+0x6e8>
 801f446:	46c0      	nop			@ (mov r8, r8)
 801f448:	40240000 	.word	0x40240000
 801f44c:	00000433 	.word	0x00000433
 801f450:	7ff00000 	.word	0x7ff00000
 801f454:	08023aa9 	.word	0x08023aa9
 801f458:	08023a51 	.word	0x08023a51
 801f45c:	000002ef 	.word	0x000002ef
 801f460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f462:	2b00      	cmp	r3, #0
 801f464:	db04      	blt.n	801f470 <_dtoa_r+0xaa0>
 801f466:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f468:	4313      	orrs	r3, r2
 801f46a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f46c:	4313      	orrs	r3, r2
 801f46e:	d11e      	bne.n	801f4ae <_dtoa_r+0xade>
 801f470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f472:	2b00      	cmp	r3, #0
 801f474:	dde4      	ble.n	801f440 <_dtoa_r+0xa70>
 801f476:	9905      	ldr	r1, [sp, #20]
 801f478:	2201      	movs	r2, #1
 801f47a:	9803      	ldr	r0, [sp, #12]
 801f47c:	f000 ff7c 	bl	8020378 <__lshift>
 801f480:	0031      	movs	r1, r6
 801f482:	9005      	str	r0, [sp, #20]
 801f484:	f000 ffe4 	bl	8020450 <__mcmp>
 801f488:	2800      	cmp	r0, #0
 801f48a:	dc02      	bgt.n	801f492 <_dtoa_r+0xac2>
 801f48c:	d1d8      	bne.n	801f440 <_dtoa_r+0xa70>
 801f48e:	07eb      	lsls	r3, r5, #31
 801f490:	d5d6      	bpl.n	801f440 <_dtoa_r+0xa70>
 801f492:	2d39      	cmp	r5, #57	@ 0x39
 801f494:	d1d2      	bne.n	801f43c <_dtoa_r+0xa6c>
 801f496:	2339      	movs	r3, #57	@ 0x39
 801f498:	9a06      	ldr	r2, [sp, #24]
 801f49a:	7013      	strb	r3, [r2, #0]
 801f49c:	0023      	movs	r3, r4
 801f49e:	001c      	movs	r4, r3
 801f4a0:	3b01      	subs	r3, #1
 801f4a2:	781a      	ldrb	r2, [r3, #0]
 801f4a4:	2a39      	cmp	r2, #57	@ 0x39
 801f4a6:	d04f      	beq.n	801f548 <_dtoa_r+0xb78>
 801f4a8:	3201      	adds	r2, #1
 801f4aa:	701a      	strb	r2, [r3, #0]
 801f4ac:	e604      	b.n	801f0b8 <_dtoa_r+0x6e8>
 801f4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	dd03      	ble.n	801f4bc <_dtoa_r+0xaec>
 801f4b4:	2d39      	cmp	r5, #57	@ 0x39
 801f4b6:	d0ee      	beq.n	801f496 <_dtoa_r+0xac6>
 801f4b8:	3501      	adds	r5, #1
 801f4ba:	e7c1      	b.n	801f440 <_dtoa_r+0xa70>
 801f4bc:	9b06      	ldr	r3, [sp, #24]
 801f4be:	9a06      	ldr	r2, [sp, #24]
 801f4c0:	701d      	strb	r5, [r3, #0]
 801f4c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f4c4:	4293      	cmp	r3, r2
 801f4c6:	d02a      	beq.n	801f51e <_dtoa_r+0xb4e>
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	220a      	movs	r2, #10
 801f4cc:	9905      	ldr	r1, [sp, #20]
 801f4ce:	9803      	ldr	r0, [sp, #12]
 801f4d0:	f000 fd4c 	bl	801ff6c <__multadd>
 801f4d4:	9b04      	ldr	r3, [sp, #16]
 801f4d6:	9005      	str	r0, [sp, #20]
 801f4d8:	42bb      	cmp	r3, r7
 801f4da:	d109      	bne.n	801f4f0 <_dtoa_r+0xb20>
 801f4dc:	2300      	movs	r3, #0
 801f4de:	220a      	movs	r2, #10
 801f4e0:	9904      	ldr	r1, [sp, #16]
 801f4e2:	9803      	ldr	r0, [sp, #12]
 801f4e4:	f000 fd42 	bl	801ff6c <__multadd>
 801f4e8:	9004      	str	r0, [sp, #16]
 801f4ea:	0007      	movs	r7, r0
 801f4ec:	9406      	str	r4, [sp, #24]
 801f4ee:	e778      	b.n	801f3e2 <_dtoa_r+0xa12>
 801f4f0:	9904      	ldr	r1, [sp, #16]
 801f4f2:	2300      	movs	r3, #0
 801f4f4:	220a      	movs	r2, #10
 801f4f6:	9803      	ldr	r0, [sp, #12]
 801f4f8:	f000 fd38 	bl	801ff6c <__multadd>
 801f4fc:	2300      	movs	r3, #0
 801f4fe:	9004      	str	r0, [sp, #16]
 801f500:	220a      	movs	r2, #10
 801f502:	0039      	movs	r1, r7
 801f504:	9803      	ldr	r0, [sp, #12]
 801f506:	f000 fd31 	bl	801ff6c <__multadd>
 801f50a:	e7ee      	b.n	801f4ea <_dtoa_r+0xb1a>
 801f50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f50e:	2401      	movs	r4, #1
 801f510:	2b00      	cmp	r3, #0
 801f512:	dd00      	ble.n	801f516 <_dtoa_r+0xb46>
 801f514:	001c      	movs	r4, r3
 801f516:	9b08      	ldr	r3, [sp, #32]
 801f518:	191c      	adds	r4, r3, r4
 801f51a:	2300      	movs	r3, #0
 801f51c:	9304      	str	r3, [sp, #16]
 801f51e:	9905      	ldr	r1, [sp, #20]
 801f520:	2201      	movs	r2, #1
 801f522:	9803      	ldr	r0, [sp, #12]
 801f524:	f000 ff28 	bl	8020378 <__lshift>
 801f528:	0031      	movs	r1, r6
 801f52a:	9005      	str	r0, [sp, #20]
 801f52c:	f000 ff90 	bl	8020450 <__mcmp>
 801f530:	2800      	cmp	r0, #0
 801f532:	dcb3      	bgt.n	801f49c <_dtoa_r+0xacc>
 801f534:	d101      	bne.n	801f53a <_dtoa_r+0xb6a>
 801f536:	07ed      	lsls	r5, r5, #31
 801f538:	d4b0      	bmi.n	801f49c <_dtoa_r+0xacc>
 801f53a:	0023      	movs	r3, r4
 801f53c:	001c      	movs	r4, r3
 801f53e:	3b01      	subs	r3, #1
 801f540:	781a      	ldrb	r2, [r3, #0]
 801f542:	2a30      	cmp	r2, #48	@ 0x30
 801f544:	d0fa      	beq.n	801f53c <_dtoa_r+0xb6c>
 801f546:	e5b7      	b.n	801f0b8 <_dtoa_r+0x6e8>
 801f548:	9a08      	ldr	r2, [sp, #32]
 801f54a:	429a      	cmp	r2, r3
 801f54c:	d1a7      	bne.n	801f49e <_dtoa_r+0xace>
 801f54e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f550:	3301      	adds	r3, #1
 801f552:	930c      	str	r3, [sp, #48]	@ 0x30
 801f554:	2331      	movs	r3, #49	@ 0x31
 801f556:	7013      	strb	r3, [r2, #0]
 801f558:	e5ae      	b.n	801f0b8 <_dtoa_r+0x6e8>
 801f55a:	4b15      	ldr	r3, [pc, #84]	@ (801f5b0 <_dtoa_r+0xbe0>)
 801f55c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f55e:	9308      	str	r3, [sp, #32]
 801f560:	4b14      	ldr	r3, [pc, #80]	@ (801f5b4 <_dtoa_r+0xbe4>)
 801f562:	2a00      	cmp	r2, #0
 801f564:	d001      	beq.n	801f56a <_dtoa_r+0xb9a>
 801f566:	f7ff fa7b 	bl	801ea60 <_dtoa_r+0x90>
 801f56a:	f7ff fa7b 	bl	801ea64 <_dtoa_r+0x94>
 801f56e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f570:	2b01      	cmp	r3, #1
 801f572:	dc00      	bgt.n	801f576 <_dtoa_r+0xba6>
 801f574:	e648      	b.n	801f208 <_dtoa_r+0x838>
 801f576:	2001      	movs	r0, #1
 801f578:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f57a:	e665      	b.n	801f248 <_dtoa_r+0x878>
 801f57c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f57e:	2b00      	cmp	r3, #0
 801f580:	dc00      	bgt.n	801f584 <_dtoa_r+0xbb4>
 801f582:	e6d6      	b.n	801f332 <_dtoa_r+0x962>
 801f584:	2400      	movs	r4, #0
 801f586:	0031      	movs	r1, r6
 801f588:	9805      	ldr	r0, [sp, #20]
 801f58a:	f7ff f993 	bl	801e8b4 <quorem>
 801f58e:	9b08      	ldr	r3, [sp, #32]
 801f590:	3030      	adds	r0, #48	@ 0x30
 801f592:	5518      	strb	r0, [r3, r4]
 801f594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f596:	3401      	adds	r4, #1
 801f598:	0005      	movs	r5, r0
 801f59a:	429c      	cmp	r4, r3
 801f59c:	dab6      	bge.n	801f50c <_dtoa_r+0xb3c>
 801f59e:	2300      	movs	r3, #0
 801f5a0:	220a      	movs	r2, #10
 801f5a2:	9905      	ldr	r1, [sp, #20]
 801f5a4:	9803      	ldr	r0, [sp, #12]
 801f5a6:	f000 fce1 	bl	801ff6c <__multadd>
 801f5aa:	9005      	str	r0, [sp, #20]
 801f5ac:	e7eb      	b.n	801f586 <_dtoa_r+0xbb6>
 801f5ae:	46c0      	nop			@ (mov r8, r8)
 801f5b0:	08023a2d 	.word	0x08023a2d
 801f5b4:	08023a35 	.word	0x08023a35

0801f5b8 <_free_r>:
 801f5b8:	b570      	push	{r4, r5, r6, lr}
 801f5ba:	0005      	movs	r5, r0
 801f5bc:	1e0c      	subs	r4, r1, #0
 801f5be:	d010      	beq.n	801f5e2 <_free_r+0x2a>
 801f5c0:	3c04      	subs	r4, #4
 801f5c2:	6823      	ldr	r3, [r4, #0]
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	da00      	bge.n	801f5ca <_free_r+0x12>
 801f5c8:	18e4      	adds	r4, r4, r3
 801f5ca:	0028      	movs	r0, r5
 801f5cc:	f000 fc56 	bl	801fe7c <__malloc_lock>
 801f5d0:	4a1d      	ldr	r2, [pc, #116]	@ (801f648 <_free_r+0x90>)
 801f5d2:	6813      	ldr	r3, [r2, #0]
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d105      	bne.n	801f5e4 <_free_r+0x2c>
 801f5d8:	6063      	str	r3, [r4, #4]
 801f5da:	6014      	str	r4, [r2, #0]
 801f5dc:	0028      	movs	r0, r5
 801f5de:	f000 fc55 	bl	801fe8c <__malloc_unlock>
 801f5e2:	bd70      	pop	{r4, r5, r6, pc}
 801f5e4:	42a3      	cmp	r3, r4
 801f5e6:	d908      	bls.n	801f5fa <_free_r+0x42>
 801f5e8:	6820      	ldr	r0, [r4, #0]
 801f5ea:	1821      	adds	r1, r4, r0
 801f5ec:	428b      	cmp	r3, r1
 801f5ee:	d1f3      	bne.n	801f5d8 <_free_r+0x20>
 801f5f0:	6819      	ldr	r1, [r3, #0]
 801f5f2:	685b      	ldr	r3, [r3, #4]
 801f5f4:	1809      	adds	r1, r1, r0
 801f5f6:	6021      	str	r1, [r4, #0]
 801f5f8:	e7ee      	b.n	801f5d8 <_free_r+0x20>
 801f5fa:	001a      	movs	r2, r3
 801f5fc:	685b      	ldr	r3, [r3, #4]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d001      	beq.n	801f606 <_free_r+0x4e>
 801f602:	42a3      	cmp	r3, r4
 801f604:	d9f9      	bls.n	801f5fa <_free_r+0x42>
 801f606:	6811      	ldr	r1, [r2, #0]
 801f608:	1850      	adds	r0, r2, r1
 801f60a:	42a0      	cmp	r0, r4
 801f60c:	d10b      	bne.n	801f626 <_free_r+0x6e>
 801f60e:	6820      	ldr	r0, [r4, #0]
 801f610:	1809      	adds	r1, r1, r0
 801f612:	1850      	adds	r0, r2, r1
 801f614:	6011      	str	r1, [r2, #0]
 801f616:	4283      	cmp	r3, r0
 801f618:	d1e0      	bne.n	801f5dc <_free_r+0x24>
 801f61a:	6818      	ldr	r0, [r3, #0]
 801f61c:	685b      	ldr	r3, [r3, #4]
 801f61e:	1841      	adds	r1, r0, r1
 801f620:	6011      	str	r1, [r2, #0]
 801f622:	6053      	str	r3, [r2, #4]
 801f624:	e7da      	b.n	801f5dc <_free_r+0x24>
 801f626:	42a0      	cmp	r0, r4
 801f628:	d902      	bls.n	801f630 <_free_r+0x78>
 801f62a:	230c      	movs	r3, #12
 801f62c:	602b      	str	r3, [r5, #0]
 801f62e:	e7d5      	b.n	801f5dc <_free_r+0x24>
 801f630:	6820      	ldr	r0, [r4, #0]
 801f632:	1821      	adds	r1, r4, r0
 801f634:	428b      	cmp	r3, r1
 801f636:	d103      	bne.n	801f640 <_free_r+0x88>
 801f638:	6819      	ldr	r1, [r3, #0]
 801f63a:	685b      	ldr	r3, [r3, #4]
 801f63c:	1809      	adds	r1, r1, r0
 801f63e:	6021      	str	r1, [r4, #0]
 801f640:	6063      	str	r3, [r4, #4]
 801f642:	6054      	str	r4, [r2, #4]
 801f644:	e7ca      	b.n	801f5dc <_free_r+0x24>
 801f646:	46c0      	nop			@ (mov r8, r8)
 801f648:	20003900 	.word	0x20003900

0801f64c <rshift>:
 801f64c:	0002      	movs	r2, r0
 801f64e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f650:	6904      	ldr	r4, [r0, #16]
 801f652:	b085      	sub	sp, #20
 801f654:	3214      	adds	r2, #20
 801f656:	114b      	asrs	r3, r1, #5
 801f658:	0016      	movs	r6, r2
 801f65a:	9302      	str	r3, [sp, #8]
 801f65c:	429c      	cmp	r4, r3
 801f65e:	dd31      	ble.n	801f6c4 <rshift+0x78>
 801f660:	261f      	movs	r6, #31
 801f662:	000f      	movs	r7, r1
 801f664:	009b      	lsls	r3, r3, #2
 801f666:	00a5      	lsls	r5, r4, #2
 801f668:	18d3      	adds	r3, r2, r3
 801f66a:	4037      	ands	r7, r6
 801f66c:	1955      	adds	r5, r2, r5
 801f66e:	9300      	str	r3, [sp, #0]
 801f670:	9701      	str	r7, [sp, #4]
 801f672:	4231      	tst	r1, r6
 801f674:	d10d      	bne.n	801f692 <rshift+0x46>
 801f676:	0016      	movs	r6, r2
 801f678:	0019      	movs	r1, r3
 801f67a:	428d      	cmp	r5, r1
 801f67c:	d836      	bhi.n	801f6ec <rshift+0xa0>
 801f67e:	9b00      	ldr	r3, [sp, #0]
 801f680:	2600      	movs	r6, #0
 801f682:	3b03      	subs	r3, #3
 801f684:	429d      	cmp	r5, r3
 801f686:	d302      	bcc.n	801f68e <rshift+0x42>
 801f688:	9b02      	ldr	r3, [sp, #8]
 801f68a:	1ae4      	subs	r4, r4, r3
 801f68c:	00a6      	lsls	r6, r4, #2
 801f68e:	1996      	adds	r6, r2, r6
 801f690:	e018      	b.n	801f6c4 <rshift+0x78>
 801f692:	2120      	movs	r1, #32
 801f694:	9e01      	ldr	r6, [sp, #4]
 801f696:	9f01      	ldr	r7, [sp, #4]
 801f698:	1b89      	subs	r1, r1, r6
 801f69a:	9e00      	ldr	r6, [sp, #0]
 801f69c:	9103      	str	r1, [sp, #12]
 801f69e:	ce02      	ldmia	r6!, {r1}
 801f6a0:	4694      	mov	ip, r2
 801f6a2:	40f9      	lsrs	r1, r7
 801f6a4:	42b5      	cmp	r5, r6
 801f6a6:	d816      	bhi.n	801f6d6 <rshift+0x8a>
 801f6a8:	9b00      	ldr	r3, [sp, #0]
 801f6aa:	2600      	movs	r6, #0
 801f6ac:	3301      	adds	r3, #1
 801f6ae:	429d      	cmp	r5, r3
 801f6b0:	d303      	bcc.n	801f6ba <rshift+0x6e>
 801f6b2:	9b02      	ldr	r3, [sp, #8]
 801f6b4:	1ae4      	subs	r4, r4, r3
 801f6b6:	00a6      	lsls	r6, r4, #2
 801f6b8:	3e04      	subs	r6, #4
 801f6ba:	1996      	adds	r6, r2, r6
 801f6bc:	6031      	str	r1, [r6, #0]
 801f6be:	2900      	cmp	r1, #0
 801f6c0:	d000      	beq.n	801f6c4 <rshift+0x78>
 801f6c2:	3604      	adds	r6, #4
 801f6c4:	1ab1      	subs	r1, r6, r2
 801f6c6:	1089      	asrs	r1, r1, #2
 801f6c8:	6101      	str	r1, [r0, #16]
 801f6ca:	4296      	cmp	r6, r2
 801f6cc:	d101      	bne.n	801f6d2 <rshift+0x86>
 801f6ce:	2300      	movs	r3, #0
 801f6d0:	6143      	str	r3, [r0, #20]
 801f6d2:	b005      	add	sp, #20
 801f6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6d6:	6837      	ldr	r7, [r6, #0]
 801f6d8:	9b03      	ldr	r3, [sp, #12]
 801f6da:	409f      	lsls	r7, r3
 801f6dc:	430f      	orrs	r7, r1
 801f6de:	4661      	mov	r1, ip
 801f6e0:	c180      	stmia	r1!, {r7}
 801f6e2:	468c      	mov	ip, r1
 801f6e4:	9b01      	ldr	r3, [sp, #4]
 801f6e6:	ce02      	ldmia	r6!, {r1}
 801f6e8:	40d9      	lsrs	r1, r3
 801f6ea:	e7db      	b.n	801f6a4 <rshift+0x58>
 801f6ec:	c980      	ldmia	r1!, {r7}
 801f6ee:	c680      	stmia	r6!, {r7}
 801f6f0:	e7c3      	b.n	801f67a <rshift+0x2e>

0801f6f2 <__hexdig_fun>:
 801f6f2:	0002      	movs	r2, r0
 801f6f4:	3a30      	subs	r2, #48	@ 0x30
 801f6f6:	0003      	movs	r3, r0
 801f6f8:	2a09      	cmp	r2, #9
 801f6fa:	d802      	bhi.n	801f702 <__hexdig_fun+0x10>
 801f6fc:	3b20      	subs	r3, #32
 801f6fe:	b2d8      	uxtb	r0, r3
 801f700:	4770      	bx	lr
 801f702:	0002      	movs	r2, r0
 801f704:	3a61      	subs	r2, #97	@ 0x61
 801f706:	2a05      	cmp	r2, #5
 801f708:	d801      	bhi.n	801f70e <__hexdig_fun+0x1c>
 801f70a:	3b47      	subs	r3, #71	@ 0x47
 801f70c:	e7f7      	b.n	801f6fe <__hexdig_fun+0xc>
 801f70e:	001a      	movs	r2, r3
 801f710:	3a41      	subs	r2, #65	@ 0x41
 801f712:	2000      	movs	r0, #0
 801f714:	2a05      	cmp	r2, #5
 801f716:	d8f3      	bhi.n	801f700 <__hexdig_fun+0xe>
 801f718:	3b27      	subs	r3, #39	@ 0x27
 801f71a:	e7f0      	b.n	801f6fe <__hexdig_fun+0xc>

0801f71c <__gethex>:
 801f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f71e:	b089      	sub	sp, #36	@ 0x24
 801f720:	9307      	str	r3, [sp, #28]
 801f722:	680b      	ldr	r3, [r1, #0]
 801f724:	9201      	str	r2, [sp, #4]
 801f726:	9003      	str	r0, [sp, #12]
 801f728:	9106      	str	r1, [sp, #24]
 801f72a:	1c9a      	adds	r2, r3, #2
 801f72c:	0011      	movs	r1, r2
 801f72e:	3201      	adds	r2, #1
 801f730:	1e50      	subs	r0, r2, #1
 801f732:	7800      	ldrb	r0, [r0, #0]
 801f734:	2830      	cmp	r0, #48	@ 0x30
 801f736:	d0f9      	beq.n	801f72c <__gethex+0x10>
 801f738:	1acb      	subs	r3, r1, r3
 801f73a:	3b02      	subs	r3, #2
 801f73c:	9305      	str	r3, [sp, #20]
 801f73e:	9100      	str	r1, [sp, #0]
 801f740:	f7ff ffd7 	bl	801f6f2 <__hexdig_fun>
 801f744:	2300      	movs	r3, #0
 801f746:	001d      	movs	r5, r3
 801f748:	9302      	str	r3, [sp, #8]
 801f74a:	4298      	cmp	r0, r3
 801f74c:	d11e      	bne.n	801f78c <__gethex+0x70>
 801f74e:	2201      	movs	r2, #1
 801f750:	49a6      	ldr	r1, [pc, #664]	@ (801f9ec <__gethex+0x2d0>)
 801f752:	9800      	ldr	r0, [sp, #0]
 801f754:	f7fe ffd8 	bl	801e708 <strncmp>
 801f758:	0007      	movs	r7, r0
 801f75a:	42a8      	cmp	r0, r5
 801f75c:	d000      	beq.n	801f760 <__gethex+0x44>
 801f75e:	e06a      	b.n	801f836 <__gethex+0x11a>
 801f760:	9b00      	ldr	r3, [sp, #0]
 801f762:	7858      	ldrb	r0, [r3, #1]
 801f764:	1c5c      	adds	r4, r3, #1
 801f766:	f7ff ffc4 	bl	801f6f2 <__hexdig_fun>
 801f76a:	2301      	movs	r3, #1
 801f76c:	9302      	str	r3, [sp, #8]
 801f76e:	42a8      	cmp	r0, r5
 801f770:	d02f      	beq.n	801f7d2 <__gethex+0xb6>
 801f772:	9400      	str	r4, [sp, #0]
 801f774:	9b00      	ldr	r3, [sp, #0]
 801f776:	7818      	ldrb	r0, [r3, #0]
 801f778:	2830      	cmp	r0, #48	@ 0x30
 801f77a:	d009      	beq.n	801f790 <__gethex+0x74>
 801f77c:	f7ff ffb9 	bl	801f6f2 <__hexdig_fun>
 801f780:	4242      	negs	r2, r0
 801f782:	4142      	adcs	r2, r0
 801f784:	2301      	movs	r3, #1
 801f786:	0025      	movs	r5, r4
 801f788:	9202      	str	r2, [sp, #8]
 801f78a:	9305      	str	r3, [sp, #20]
 801f78c:	9c00      	ldr	r4, [sp, #0]
 801f78e:	e004      	b.n	801f79a <__gethex+0x7e>
 801f790:	9b00      	ldr	r3, [sp, #0]
 801f792:	3301      	adds	r3, #1
 801f794:	9300      	str	r3, [sp, #0]
 801f796:	e7ed      	b.n	801f774 <__gethex+0x58>
 801f798:	3401      	adds	r4, #1
 801f79a:	7820      	ldrb	r0, [r4, #0]
 801f79c:	f7ff ffa9 	bl	801f6f2 <__hexdig_fun>
 801f7a0:	1e07      	subs	r7, r0, #0
 801f7a2:	d1f9      	bne.n	801f798 <__gethex+0x7c>
 801f7a4:	2201      	movs	r2, #1
 801f7a6:	0020      	movs	r0, r4
 801f7a8:	4990      	ldr	r1, [pc, #576]	@ (801f9ec <__gethex+0x2d0>)
 801f7aa:	f7fe ffad 	bl	801e708 <strncmp>
 801f7ae:	2800      	cmp	r0, #0
 801f7b0:	d10d      	bne.n	801f7ce <__gethex+0xb2>
 801f7b2:	2d00      	cmp	r5, #0
 801f7b4:	d106      	bne.n	801f7c4 <__gethex+0xa8>
 801f7b6:	3401      	adds	r4, #1
 801f7b8:	0025      	movs	r5, r4
 801f7ba:	7820      	ldrb	r0, [r4, #0]
 801f7bc:	f7ff ff99 	bl	801f6f2 <__hexdig_fun>
 801f7c0:	2800      	cmp	r0, #0
 801f7c2:	d102      	bne.n	801f7ca <__gethex+0xae>
 801f7c4:	1b2d      	subs	r5, r5, r4
 801f7c6:	00af      	lsls	r7, r5, #2
 801f7c8:	e003      	b.n	801f7d2 <__gethex+0xb6>
 801f7ca:	3401      	adds	r4, #1
 801f7cc:	e7f5      	b.n	801f7ba <__gethex+0x9e>
 801f7ce:	2d00      	cmp	r5, #0
 801f7d0:	d1f8      	bne.n	801f7c4 <__gethex+0xa8>
 801f7d2:	2220      	movs	r2, #32
 801f7d4:	7823      	ldrb	r3, [r4, #0]
 801f7d6:	0026      	movs	r6, r4
 801f7d8:	4393      	bics	r3, r2
 801f7da:	2b50      	cmp	r3, #80	@ 0x50
 801f7dc:	d11d      	bne.n	801f81a <__gethex+0xfe>
 801f7de:	7863      	ldrb	r3, [r4, #1]
 801f7e0:	2b2b      	cmp	r3, #43	@ 0x2b
 801f7e2:	d02d      	beq.n	801f840 <__gethex+0x124>
 801f7e4:	2b2d      	cmp	r3, #45	@ 0x2d
 801f7e6:	d02f      	beq.n	801f848 <__gethex+0x12c>
 801f7e8:	2300      	movs	r3, #0
 801f7ea:	1c66      	adds	r6, r4, #1
 801f7ec:	9304      	str	r3, [sp, #16]
 801f7ee:	7830      	ldrb	r0, [r6, #0]
 801f7f0:	f7ff ff7f 	bl	801f6f2 <__hexdig_fun>
 801f7f4:	1e43      	subs	r3, r0, #1
 801f7f6:	b2db      	uxtb	r3, r3
 801f7f8:	0005      	movs	r5, r0
 801f7fa:	2b18      	cmp	r3, #24
 801f7fc:	d82a      	bhi.n	801f854 <__gethex+0x138>
 801f7fe:	7870      	ldrb	r0, [r6, #1]
 801f800:	f7ff ff77 	bl	801f6f2 <__hexdig_fun>
 801f804:	1e43      	subs	r3, r0, #1
 801f806:	b2db      	uxtb	r3, r3
 801f808:	3601      	adds	r6, #1
 801f80a:	3d10      	subs	r5, #16
 801f80c:	2b18      	cmp	r3, #24
 801f80e:	d91d      	bls.n	801f84c <__gethex+0x130>
 801f810:	9b04      	ldr	r3, [sp, #16]
 801f812:	2b00      	cmp	r3, #0
 801f814:	d000      	beq.n	801f818 <__gethex+0xfc>
 801f816:	426d      	negs	r5, r5
 801f818:	197f      	adds	r7, r7, r5
 801f81a:	9b06      	ldr	r3, [sp, #24]
 801f81c:	601e      	str	r6, [r3, #0]
 801f81e:	9b02      	ldr	r3, [sp, #8]
 801f820:	2b00      	cmp	r3, #0
 801f822:	d019      	beq.n	801f858 <__gethex+0x13c>
 801f824:	9b05      	ldr	r3, [sp, #20]
 801f826:	2606      	movs	r6, #6
 801f828:	425a      	negs	r2, r3
 801f82a:	4153      	adcs	r3, r2
 801f82c:	425b      	negs	r3, r3
 801f82e:	401e      	ands	r6, r3
 801f830:	0030      	movs	r0, r6
 801f832:	b009      	add	sp, #36	@ 0x24
 801f834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f836:	2301      	movs	r3, #1
 801f838:	2700      	movs	r7, #0
 801f83a:	9c00      	ldr	r4, [sp, #0]
 801f83c:	9302      	str	r3, [sp, #8]
 801f83e:	e7c8      	b.n	801f7d2 <__gethex+0xb6>
 801f840:	2300      	movs	r3, #0
 801f842:	9304      	str	r3, [sp, #16]
 801f844:	1ca6      	adds	r6, r4, #2
 801f846:	e7d2      	b.n	801f7ee <__gethex+0xd2>
 801f848:	2301      	movs	r3, #1
 801f84a:	e7fa      	b.n	801f842 <__gethex+0x126>
 801f84c:	230a      	movs	r3, #10
 801f84e:	435d      	muls	r5, r3
 801f850:	182d      	adds	r5, r5, r0
 801f852:	e7d4      	b.n	801f7fe <__gethex+0xe2>
 801f854:	0026      	movs	r6, r4
 801f856:	e7e0      	b.n	801f81a <__gethex+0xfe>
 801f858:	9b00      	ldr	r3, [sp, #0]
 801f85a:	9902      	ldr	r1, [sp, #8]
 801f85c:	1ae3      	subs	r3, r4, r3
 801f85e:	3b01      	subs	r3, #1
 801f860:	2b07      	cmp	r3, #7
 801f862:	dc0a      	bgt.n	801f87a <__gethex+0x15e>
 801f864:	9803      	ldr	r0, [sp, #12]
 801f866:	f000 fb19 	bl	801fe9c <_Balloc>
 801f86a:	1e05      	subs	r5, r0, #0
 801f86c:	d108      	bne.n	801f880 <__gethex+0x164>
 801f86e:	002a      	movs	r2, r5
 801f870:	21e4      	movs	r1, #228	@ 0xe4
 801f872:	4b5f      	ldr	r3, [pc, #380]	@ (801f9f0 <__gethex+0x2d4>)
 801f874:	485f      	ldr	r0, [pc, #380]	@ (801f9f4 <__gethex+0x2d8>)
 801f876:	f001 fbf1 	bl	802105c <__assert_func>
 801f87a:	3101      	adds	r1, #1
 801f87c:	105b      	asrs	r3, r3, #1
 801f87e:	e7ef      	b.n	801f860 <__gethex+0x144>
 801f880:	0003      	movs	r3, r0
 801f882:	3314      	adds	r3, #20
 801f884:	9302      	str	r3, [sp, #8]
 801f886:	9305      	str	r3, [sp, #20]
 801f888:	2300      	movs	r3, #0
 801f88a:	001e      	movs	r6, r3
 801f88c:	9304      	str	r3, [sp, #16]
 801f88e:	9b00      	ldr	r3, [sp, #0]
 801f890:	42a3      	cmp	r3, r4
 801f892:	d338      	bcc.n	801f906 <__gethex+0x1ea>
 801f894:	9c05      	ldr	r4, [sp, #20]
 801f896:	9b02      	ldr	r3, [sp, #8]
 801f898:	c440      	stmia	r4!, {r6}
 801f89a:	1ae4      	subs	r4, r4, r3
 801f89c:	10a4      	asrs	r4, r4, #2
 801f89e:	0030      	movs	r0, r6
 801f8a0:	612c      	str	r4, [r5, #16]
 801f8a2:	f000 fbf3 	bl	802008c <__hi0bits>
 801f8a6:	9b01      	ldr	r3, [sp, #4]
 801f8a8:	0164      	lsls	r4, r4, #5
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	1a26      	subs	r6, r4, r0
 801f8ae:	9300      	str	r3, [sp, #0]
 801f8b0:	429e      	cmp	r6, r3
 801f8b2:	dd52      	ble.n	801f95a <__gethex+0x23e>
 801f8b4:	1af6      	subs	r6, r6, r3
 801f8b6:	0031      	movs	r1, r6
 801f8b8:	0028      	movs	r0, r5
 801f8ba:	f000 ff96 	bl	80207ea <__any_on>
 801f8be:	1e04      	subs	r4, r0, #0
 801f8c0:	d00f      	beq.n	801f8e2 <__gethex+0x1c6>
 801f8c2:	2401      	movs	r4, #1
 801f8c4:	231f      	movs	r3, #31
 801f8c6:	0020      	movs	r0, r4
 801f8c8:	1e72      	subs	r2, r6, #1
 801f8ca:	4013      	ands	r3, r2
 801f8cc:	4098      	lsls	r0, r3
 801f8ce:	0003      	movs	r3, r0
 801f8d0:	1151      	asrs	r1, r2, #5
 801f8d2:	9802      	ldr	r0, [sp, #8]
 801f8d4:	0089      	lsls	r1, r1, #2
 801f8d6:	5809      	ldr	r1, [r1, r0]
 801f8d8:	4219      	tst	r1, r3
 801f8da:	d002      	beq.n	801f8e2 <__gethex+0x1c6>
 801f8dc:	42a2      	cmp	r2, r4
 801f8de:	dc34      	bgt.n	801f94a <__gethex+0x22e>
 801f8e0:	2402      	movs	r4, #2
 801f8e2:	0031      	movs	r1, r6
 801f8e4:	0028      	movs	r0, r5
 801f8e6:	f7ff feb1 	bl	801f64c <rshift>
 801f8ea:	19bf      	adds	r7, r7, r6
 801f8ec:	9b01      	ldr	r3, [sp, #4]
 801f8ee:	689b      	ldr	r3, [r3, #8]
 801f8f0:	42bb      	cmp	r3, r7
 801f8f2:	da42      	bge.n	801f97a <__gethex+0x25e>
 801f8f4:	0029      	movs	r1, r5
 801f8f6:	9803      	ldr	r0, [sp, #12]
 801f8f8:	f000 fb14 	bl	801ff24 <_Bfree>
 801f8fc:	2300      	movs	r3, #0
 801f8fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f900:	26a3      	movs	r6, #163	@ 0xa3
 801f902:	6013      	str	r3, [r2, #0]
 801f904:	e794      	b.n	801f830 <__gethex+0x114>
 801f906:	3c01      	subs	r4, #1
 801f908:	7823      	ldrb	r3, [r4, #0]
 801f90a:	2b2e      	cmp	r3, #46	@ 0x2e
 801f90c:	d012      	beq.n	801f934 <__gethex+0x218>
 801f90e:	9b04      	ldr	r3, [sp, #16]
 801f910:	2b20      	cmp	r3, #32
 801f912:	d104      	bne.n	801f91e <__gethex+0x202>
 801f914:	9b05      	ldr	r3, [sp, #20]
 801f916:	c340      	stmia	r3!, {r6}
 801f918:	2600      	movs	r6, #0
 801f91a:	9305      	str	r3, [sp, #20]
 801f91c:	9604      	str	r6, [sp, #16]
 801f91e:	7820      	ldrb	r0, [r4, #0]
 801f920:	f7ff fee7 	bl	801f6f2 <__hexdig_fun>
 801f924:	230f      	movs	r3, #15
 801f926:	4018      	ands	r0, r3
 801f928:	9b04      	ldr	r3, [sp, #16]
 801f92a:	4098      	lsls	r0, r3
 801f92c:	3304      	adds	r3, #4
 801f92e:	4306      	orrs	r6, r0
 801f930:	9304      	str	r3, [sp, #16]
 801f932:	e7ac      	b.n	801f88e <__gethex+0x172>
 801f934:	9b00      	ldr	r3, [sp, #0]
 801f936:	42a3      	cmp	r3, r4
 801f938:	d8e9      	bhi.n	801f90e <__gethex+0x1f2>
 801f93a:	2201      	movs	r2, #1
 801f93c:	0020      	movs	r0, r4
 801f93e:	492b      	ldr	r1, [pc, #172]	@ (801f9ec <__gethex+0x2d0>)
 801f940:	f7fe fee2 	bl	801e708 <strncmp>
 801f944:	2800      	cmp	r0, #0
 801f946:	d1e2      	bne.n	801f90e <__gethex+0x1f2>
 801f948:	e7a1      	b.n	801f88e <__gethex+0x172>
 801f94a:	0028      	movs	r0, r5
 801f94c:	1eb1      	subs	r1, r6, #2
 801f94e:	f000 ff4c 	bl	80207ea <__any_on>
 801f952:	2800      	cmp	r0, #0
 801f954:	d0c4      	beq.n	801f8e0 <__gethex+0x1c4>
 801f956:	2403      	movs	r4, #3
 801f958:	e7c3      	b.n	801f8e2 <__gethex+0x1c6>
 801f95a:	9b00      	ldr	r3, [sp, #0]
 801f95c:	2400      	movs	r4, #0
 801f95e:	429e      	cmp	r6, r3
 801f960:	dac4      	bge.n	801f8ec <__gethex+0x1d0>
 801f962:	1b9e      	subs	r6, r3, r6
 801f964:	0029      	movs	r1, r5
 801f966:	0032      	movs	r2, r6
 801f968:	9803      	ldr	r0, [sp, #12]
 801f96a:	f000 fd05 	bl	8020378 <__lshift>
 801f96e:	0003      	movs	r3, r0
 801f970:	3314      	adds	r3, #20
 801f972:	0005      	movs	r5, r0
 801f974:	1bbf      	subs	r7, r7, r6
 801f976:	9302      	str	r3, [sp, #8]
 801f978:	e7b8      	b.n	801f8ec <__gethex+0x1d0>
 801f97a:	9b01      	ldr	r3, [sp, #4]
 801f97c:	685e      	ldr	r6, [r3, #4]
 801f97e:	42be      	cmp	r6, r7
 801f980:	dd6f      	ble.n	801fa62 <__gethex+0x346>
 801f982:	9b00      	ldr	r3, [sp, #0]
 801f984:	1bf6      	subs	r6, r6, r7
 801f986:	42b3      	cmp	r3, r6
 801f988:	dc36      	bgt.n	801f9f8 <__gethex+0x2dc>
 801f98a:	9b01      	ldr	r3, [sp, #4]
 801f98c:	68db      	ldr	r3, [r3, #12]
 801f98e:	2b02      	cmp	r3, #2
 801f990:	d024      	beq.n	801f9dc <__gethex+0x2c0>
 801f992:	2b03      	cmp	r3, #3
 801f994:	d026      	beq.n	801f9e4 <__gethex+0x2c8>
 801f996:	2b01      	cmp	r3, #1
 801f998:	d117      	bne.n	801f9ca <__gethex+0x2ae>
 801f99a:	9b00      	ldr	r3, [sp, #0]
 801f99c:	42b3      	cmp	r3, r6
 801f99e:	d114      	bne.n	801f9ca <__gethex+0x2ae>
 801f9a0:	2b01      	cmp	r3, #1
 801f9a2:	d10b      	bne.n	801f9bc <__gethex+0x2a0>
 801f9a4:	9b01      	ldr	r3, [sp, #4]
 801f9a6:	9a07      	ldr	r2, [sp, #28]
 801f9a8:	685b      	ldr	r3, [r3, #4]
 801f9aa:	2662      	movs	r6, #98	@ 0x62
 801f9ac:	6013      	str	r3, [r2, #0]
 801f9ae:	2301      	movs	r3, #1
 801f9b0:	9a02      	ldr	r2, [sp, #8]
 801f9b2:	612b      	str	r3, [r5, #16]
 801f9b4:	6013      	str	r3, [r2, #0]
 801f9b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f9b8:	601d      	str	r5, [r3, #0]
 801f9ba:	e739      	b.n	801f830 <__gethex+0x114>
 801f9bc:	9900      	ldr	r1, [sp, #0]
 801f9be:	0028      	movs	r0, r5
 801f9c0:	3901      	subs	r1, #1
 801f9c2:	f000 ff12 	bl	80207ea <__any_on>
 801f9c6:	2800      	cmp	r0, #0
 801f9c8:	d1ec      	bne.n	801f9a4 <__gethex+0x288>
 801f9ca:	0029      	movs	r1, r5
 801f9cc:	9803      	ldr	r0, [sp, #12]
 801f9ce:	f000 faa9 	bl	801ff24 <_Bfree>
 801f9d2:	2300      	movs	r3, #0
 801f9d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f9d6:	2650      	movs	r6, #80	@ 0x50
 801f9d8:	6013      	str	r3, [r2, #0]
 801f9da:	e729      	b.n	801f830 <__gethex+0x114>
 801f9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d1f3      	bne.n	801f9ca <__gethex+0x2ae>
 801f9e2:	e7df      	b.n	801f9a4 <__gethex+0x288>
 801f9e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d1dc      	bne.n	801f9a4 <__gethex+0x288>
 801f9ea:	e7ee      	b.n	801f9ca <__gethex+0x2ae>
 801f9ec:	0802389c 	.word	0x0802389c
 801f9f0:	08023aa9 	.word	0x08023aa9
 801f9f4:	08023aba 	.word	0x08023aba
 801f9f8:	1e77      	subs	r7, r6, #1
 801f9fa:	2c00      	cmp	r4, #0
 801f9fc:	d12f      	bne.n	801fa5e <__gethex+0x342>
 801f9fe:	2f00      	cmp	r7, #0
 801fa00:	d004      	beq.n	801fa0c <__gethex+0x2f0>
 801fa02:	0039      	movs	r1, r7
 801fa04:	0028      	movs	r0, r5
 801fa06:	f000 fef0 	bl	80207ea <__any_on>
 801fa0a:	0004      	movs	r4, r0
 801fa0c:	231f      	movs	r3, #31
 801fa0e:	117a      	asrs	r2, r7, #5
 801fa10:	401f      	ands	r7, r3
 801fa12:	3b1e      	subs	r3, #30
 801fa14:	40bb      	lsls	r3, r7
 801fa16:	9902      	ldr	r1, [sp, #8]
 801fa18:	0092      	lsls	r2, r2, #2
 801fa1a:	5852      	ldr	r2, [r2, r1]
 801fa1c:	421a      	tst	r2, r3
 801fa1e:	d001      	beq.n	801fa24 <__gethex+0x308>
 801fa20:	2302      	movs	r3, #2
 801fa22:	431c      	orrs	r4, r3
 801fa24:	9b00      	ldr	r3, [sp, #0]
 801fa26:	0031      	movs	r1, r6
 801fa28:	1b9b      	subs	r3, r3, r6
 801fa2a:	2602      	movs	r6, #2
 801fa2c:	0028      	movs	r0, r5
 801fa2e:	9300      	str	r3, [sp, #0]
 801fa30:	f7ff fe0c 	bl	801f64c <rshift>
 801fa34:	9b01      	ldr	r3, [sp, #4]
 801fa36:	685f      	ldr	r7, [r3, #4]
 801fa38:	2c00      	cmp	r4, #0
 801fa3a:	d03f      	beq.n	801fabc <__gethex+0x3a0>
 801fa3c:	9b01      	ldr	r3, [sp, #4]
 801fa3e:	68db      	ldr	r3, [r3, #12]
 801fa40:	2b02      	cmp	r3, #2
 801fa42:	d010      	beq.n	801fa66 <__gethex+0x34a>
 801fa44:	2b03      	cmp	r3, #3
 801fa46:	d012      	beq.n	801fa6e <__gethex+0x352>
 801fa48:	2b01      	cmp	r3, #1
 801fa4a:	d106      	bne.n	801fa5a <__gethex+0x33e>
 801fa4c:	07a2      	lsls	r2, r4, #30
 801fa4e:	d504      	bpl.n	801fa5a <__gethex+0x33e>
 801fa50:	9a02      	ldr	r2, [sp, #8]
 801fa52:	6812      	ldr	r2, [r2, #0]
 801fa54:	4314      	orrs	r4, r2
 801fa56:	421c      	tst	r4, r3
 801fa58:	d10c      	bne.n	801fa74 <__gethex+0x358>
 801fa5a:	2310      	movs	r3, #16
 801fa5c:	e02d      	b.n	801faba <__gethex+0x39e>
 801fa5e:	2401      	movs	r4, #1
 801fa60:	e7d4      	b.n	801fa0c <__gethex+0x2f0>
 801fa62:	2601      	movs	r6, #1
 801fa64:	e7e8      	b.n	801fa38 <__gethex+0x31c>
 801fa66:	2301      	movs	r3, #1
 801fa68:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fa6a:	1a9b      	subs	r3, r3, r2
 801fa6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fa6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	d0f2      	beq.n	801fa5a <__gethex+0x33e>
 801fa74:	692b      	ldr	r3, [r5, #16]
 801fa76:	2000      	movs	r0, #0
 801fa78:	9302      	str	r3, [sp, #8]
 801fa7a:	009b      	lsls	r3, r3, #2
 801fa7c:	9304      	str	r3, [sp, #16]
 801fa7e:	002b      	movs	r3, r5
 801fa80:	9a04      	ldr	r2, [sp, #16]
 801fa82:	3314      	adds	r3, #20
 801fa84:	1899      	adds	r1, r3, r2
 801fa86:	681a      	ldr	r2, [r3, #0]
 801fa88:	1c54      	adds	r4, r2, #1
 801fa8a:	d01c      	beq.n	801fac6 <__gethex+0x3aa>
 801fa8c:	3201      	adds	r2, #1
 801fa8e:	601a      	str	r2, [r3, #0]
 801fa90:	002b      	movs	r3, r5
 801fa92:	3314      	adds	r3, #20
 801fa94:	2e02      	cmp	r6, #2
 801fa96:	d13f      	bne.n	801fb18 <__gethex+0x3fc>
 801fa98:	9a01      	ldr	r2, [sp, #4]
 801fa9a:	9900      	ldr	r1, [sp, #0]
 801fa9c:	6812      	ldr	r2, [r2, #0]
 801fa9e:	3a01      	subs	r2, #1
 801faa0:	428a      	cmp	r2, r1
 801faa2:	d109      	bne.n	801fab8 <__gethex+0x39c>
 801faa4:	000a      	movs	r2, r1
 801faa6:	201f      	movs	r0, #31
 801faa8:	4010      	ands	r0, r2
 801faaa:	2201      	movs	r2, #1
 801faac:	4082      	lsls	r2, r0
 801faae:	1149      	asrs	r1, r1, #5
 801fab0:	0089      	lsls	r1, r1, #2
 801fab2:	58cb      	ldr	r3, [r1, r3]
 801fab4:	4213      	tst	r3, r2
 801fab6:	d13d      	bne.n	801fb34 <__gethex+0x418>
 801fab8:	2320      	movs	r3, #32
 801faba:	431e      	orrs	r6, r3
 801fabc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fabe:	601d      	str	r5, [r3, #0]
 801fac0:	9b07      	ldr	r3, [sp, #28]
 801fac2:	601f      	str	r7, [r3, #0]
 801fac4:	e6b4      	b.n	801f830 <__gethex+0x114>
 801fac6:	c301      	stmia	r3!, {r0}
 801fac8:	4299      	cmp	r1, r3
 801faca:	d8dc      	bhi.n	801fa86 <__gethex+0x36a>
 801facc:	68ab      	ldr	r3, [r5, #8]
 801face:	9a02      	ldr	r2, [sp, #8]
 801fad0:	429a      	cmp	r2, r3
 801fad2:	db18      	blt.n	801fb06 <__gethex+0x3ea>
 801fad4:	6869      	ldr	r1, [r5, #4]
 801fad6:	9803      	ldr	r0, [sp, #12]
 801fad8:	3101      	adds	r1, #1
 801fada:	f000 f9df 	bl	801fe9c <_Balloc>
 801fade:	1e04      	subs	r4, r0, #0
 801fae0:	d104      	bne.n	801faec <__gethex+0x3d0>
 801fae2:	0022      	movs	r2, r4
 801fae4:	2184      	movs	r1, #132	@ 0x84
 801fae6:	4b1d      	ldr	r3, [pc, #116]	@ (801fb5c <__gethex+0x440>)
 801fae8:	481d      	ldr	r0, [pc, #116]	@ (801fb60 <__gethex+0x444>)
 801faea:	e6c4      	b.n	801f876 <__gethex+0x15a>
 801faec:	0029      	movs	r1, r5
 801faee:	692a      	ldr	r2, [r5, #16]
 801faf0:	310c      	adds	r1, #12
 801faf2:	3202      	adds	r2, #2
 801faf4:	0092      	lsls	r2, r2, #2
 801faf6:	300c      	adds	r0, #12
 801faf8:	f7fe fecc 	bl	801e894 <memcpy>
 801fafc:	0029      	movs	r1, r5
 801fafe:	9803      	ldr	r0, [sp, #12]
 801fb00:	f000 fa10 	bl	801ff24 <_Bfree>
 801fb04:	0025      	movs	r5, r4
 801fb06:	692b      	ldr	r3, [r5, #16]
 801fb08:	1c5a      	adds	r2, r3, #1
 801fb0a:	612a      	str	r2, [r5, #16]
 801fb0c:	2201      	movs	r2, #1
 801fb0e:	3304      	adds	r3, #4
 801fb10:	009b      	lsls	r3, r3, #2
 801fb12:	18eb      	adds	r3, r5, r3
 801fb14:	605a      	str	r2, [r3, #4]
 801fb16:	e7bb      	b.n	801fa90 <__gethex+0x374>
 801fb18:	692a      	ldr	r2, [r5, #16]
 801fb1a:	9902      	ldr	r1, [sp, #8]
 801fb1c:	428a      	cmp	r2, r1
 801fb1e:	dd0b      	ble.n	801fb38 <__gethex+0x41c>
 801fb20:	2101      	movs	r1, #1
 801fb22:	0028      	movs	r0, r5
 801fb24:	f7ff fd92 	bl	801f64c <rshift>
 801fb28:	9b01      	ldr	r3, [sp, #4]
 801fb2a:	3701      	adds	r7, #1
 801fb2c:	689b      	ldr	r3, [r3, #8]
 801fb2e:	42bb      	cmp	r3, r7
 801fb30:	da00      	bge.n	801fb34 <__gethex+0x418>
 801fb32:	e6df      	b.n	801f8f4 <__gethex+0x1d8>
 801fb34:	2601      	movs	r6, #1
 801fb36:	e7bf      	b.n	801fab8 <__gethex+0x39c>
 801fb38:	221f      	movs	r2, #31
 801fb3a:	9c00      	ldr	r4, [sp, #0]
 801fb3c:	9900      	ldr	r1, [sp, #0]
 801fb3e:	4014      	ands	r4, r2
 801fb40:	4211      	tst	r1, r2
 801fb42:	d0f7      	beq.n	801fb34 <__gethex+0x418>
 801fb44:	9a04      	ldr	r2, [sp, #16]
 801fb46:	189b      	adds	r3, r3, r2
 801fb48:	3b04      	subs	r3, #4
 801fb4a:	6818      	ldr	r0, [r3, #0]
 801fb4c:	f000 fa9e 	bl	802008c <__hi0bits>
 801fb50:	2320      	movs	r3, #32
 801fb52:	1b1b      	subs	r3, r3, r4
 801fb54:	4298      	cmp	r0, r3
 801fb56:	dbe3      	blt.n	801fb20 <__gethex+0x404>
 801fb58:	e7ec      	b.n	801fb34 <__gethex+0x418>
 801fb5a:	46c0      	nop			@ (mov r8, r8)
 801fb5c:	08023aa9 	.word	0x08023aa9
 801fb60:	08023aba 	.word	0x08023aba

0801fb64 <L_shift>:
 801fb64:	2308      	movs	r3, #8
 801fb66:	b570      	push	{r4, r5, r6, lr}
 801fb68:	2520      	movs	r5, #32
 801fb6a:	1a9a      	subs	r2, r3, r2
 801fb6c:	0092      	lsls	r2, r2, #2
 801fb6e:	1aad      	subs	r5, r5, r2
 801fb70:	6843      	ldr	r3, [r0, #4]
 801fb72:	6804      	ldr	r4, [r0, #0]
 801fb74:	001e      	movs	r6, r3
 801fb76:	40ae      	lsls	r6, r5
 801fb78:	40d3      	lsrs	r3, r2
 801fb7a:	4334      	orrs	r4, r6
 801fb7c:	6004      	str	r4, [r0, #0]
 801fb7e:	6043      	str	r3, [r0, #4]
 801fb80:	3004      	adds	r0, #4
 801fb82:	4288      	cmp	r0, r1
 801fb84:	d3f4      	bcc.n	801fb70 <L_shift+0xc>
 801fb86:	bd70      	pop	{r4, r5, r6, pc}

0801fb88 <__match>:
 801fb88:	b530      	push	{r4, r5, lr}
 801fb8a:	6803      	ldr	r3, [r0, #0]
 801fb8c:	780c      	ldrb	r4, [r1, #0]
 801fb8e:	3301      	adds	r3, #1
 801fb90:	2c00      	cmp	r4, #0
 801fb92:	d102      	bne.n	801fb9a <__match+0x12>
 801fb94:	6003      	str	r3, [r0, #0]
 801fb96:	2001      	movs	r0, #1
 801fb98:	bd30      	pop	{r4, r5, pc}
 801fb9a:	781a      	ldrb	r2, [r3, #0]
 801fb9c:	0015      	movs	r5, r2
 801fb9e:	3d41      	subs	r5, #65	@ 0x41
 801fba0:	2d19      	cmp	r5, #25
 801fba2:	d800      	bhi.n	801fba6 <__match+0x1e>
 801fba4:	3220      	adds	r2, #32
 801fba6:	3101      	adds	r1, #1
 801fba8:	42a2      	cmp	r2, r4
 801fbaa:	d0ef      	beq.n	801fb8c <__match+0x4>
 801fbac:	2000      	movs	r0, #0
 801fbae:	e7f3      	b.n	801fb98 <__match+0x10>

0801fbb0 <__hexnan>:
 801fbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbb2:	680b      	ldr	r3, [r1, #0]
 801fbb4:	b08b      	sub	sp, #44	@ 0x2c
 801fbb6:	9201      	str	r2, [sp, #4]
 801fbb8:	9901      	ldr	r1, [sp, #4]
 801fbba:	115a      	asrs	r2, r3, #5
 801fbbc:	0092      	lsls	r2, r2, #2
 801fbbe:	188a      	adds	r2, r1, r2
 801fbc0:	9202      	str	r2, [sp, #8]
 801fbc2:	0019      	movs	r1, r3
 801fbc4:	221f      	movs	r2, #31
 801fbc6:	4011      	ands	r1, r2
 801fbc8:	9008      	str	r0, [sp, #32]
 801fbca:	9106      	str	r1, [sp, #24]
 801fbcc:	4213      	tst	r3, r2
 801fbce:	d002      	beq.n	801fbd6 <__hexnan+0x26>
 801fbd0:	9b02      	ldr	r3, [sp, #8]
 801fbd2:	3304      	adds	r3, #4
 801fbd4:	9302      	str	r3, [sp, #8]
 801fbd6:	9b02      	ldr	r3, [sp, #8]
 801fbd8:	2500      	movs	r5, #0
 801fbda:	1f1f      	subs	r7, r3, #4
 801fbdc:	003e      	movs	r6, r7
 801fbde:	003c      	movs	r4, r7
 801fbe0:	9b08      	ldr	r3, [sp, #32]
 801fbe2:	603d      	str	r5, [r7, #0]
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	9507      	str	r5, [sp, #28]
 801fbe8:	9305      	str	r3, [sp, #20]
 801fbea:	9503      	str	r5, [sp, #12]
 801fbec:	9b05      	ldr	r3, [sp, #20]
 801fbee:	3301      	adds	r3, #1
 801fbf0:	9309      	str	r3, [sp, #36]	@ 0x24
 801fbf2:	9b05      	ldr	r3, [sp, #20]
 801fbf4:	785b      	ldrb	r3, [r3, #1]
 801fbf6:	9304      	str	r3, [sp, #16]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d028      	beq.n	801fc4e <__hexnan+0x9e>
 801fbfc:	9804      	ldr	r0, [sp, #16]
 801fbfe:	f7ff fd78 	bl	801f6f2 <__hexdig_fun>
 801fc02:	2800      	cmp	r0, #0
 801fc04:	d155      	bne.n	801fcb2 <__hexnan+0x102>
 801fc06:	9b04      	ldr	r3, [sp, #16]
 801fc08:	2b20      	cmp	r3, #32
 801fc0a:	d819      	bhi.n	801fc40 <__hexnan+0x90>
 801fc0c:	9b03      	ldr	r3, [sp, #12]
 801fc0e:	9a07      	ldr	r2, [sp, #28]
 801fc10:	4293      	cmp	r3, r2
 801fc12:	dd12      	ble.n	801fc3a <__hexnan+0x8a>
 801fc14:	42b4      	cmp	r4, r6
 801fc16:	d206      	bcs.n	801fc26 <__hexnan+0x76>
 801fc18:	2d07      	cmp	r5, #7
 801fc1a:	dc04      	bgt.n	801fc26 <__hexnan+0x76>
 801fc1c:	002a      	movs	r2, r5
 801fc1e:	0031      	movs	r1, r6
 801fc20:	0020      	movs	r0, r4
 801fc22:	f7ff ff9f 	bl	801fb64 <L_shift>
 801fc26:	9b01      	ldr	r3, [sp, #4]
 801fc28:	2508      	movs	r5, #8
 801fc2a:	429c      	cmp	r4, r3
 801fc2c:	d905      	bls.n	801fc3a <__hexnan+0x8a>
 801fc2e:	1f26      	subs	r6, r4, #4
 801fc30:	2500      	movs	r5, #0
 801fc32:	0034      	movs	r4, r6
 801fc34:	9b03      	ldr	r3, [sp, #12]
 801fc36:	6035      	str	r5, [r6, #0]
 801fc38:	9307      	str	r3, [sp, #28]
 801fc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc3c:	9305      	str	r3, [sp, #20]
 801fc3e:	e7d5      	b.n	801fbec <__hexnan+0x3c>
 801fc40:	9b04      	ldr	r3, [sp, #16]
 801fc42:	2b29      	cmp	r3, #41	@ 0x29
 801fc44:	d15a      	bne.n	801fcfc <__hexnan+0x14c>
 801fc46:	9b05      	ldr	r3, [sp, #20]
 801fc48:	9a08      	ldr	r2, [sp, #32]
 801fc4a:	3302      	adds	r3, #2
 801fc4c:	6013      	str	r3, [r2, #0]
 801fc4e:	9b03      	ldr	r3, [sp, #12]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d053      	beq.n	801fcfc <__hexnan+0x14c>
 801fc54:	42b4      	cmp	r4, r6
 801fc56:	d206      	bcs.n	801fc66 <__hexnan+0xb6>
 801fc58:	2d07      	cmp	r5, #7
 801fc5a:	dc04      	bgt.n	801fc66 <__hexnan+0xb6>
 801fc5c:	002a      	movs	r2, r5
 801fc5e:	0031      	movs	r1, r6
 801fc60:	0020      	movs	r0, r4
 801fc62:	f7ff ff7f 	bl	801fb64 <L_shift>
 801fc66:	9b01      	ldr	r3, [sp, #4]
 801fc68:	429c      	cmp	r4, r3
 801fc6a:	d936      	bls.n	801fcda <__hexnan+0x12a>
 801fc6c:	001a      	movs	r2, r3
 801fc6e:	0023      	movs	r3, r4
 801fc70:	cb02      	ldmia	r3!, {r1}
 801fc72:	c202      	stmia	r2!, {r1}
 801fc74:	429f      	cmp	r7, r3
 801fc76:	d2fb      	bcs.n	801fc70 <__hexnan+0xc0>
 801fc78:	9b02      	ldr	r3, [sp, #8]
 801fc7a:	1c61      	adds	r1, r4, #1
 801fc7c:	1eda      	subs	r2, r3, #3
 801fc7e:	2304      	movs	r3, #4
 801fc80:	4291      	cmp	r1, r2
 801fc82:	d805      	bhi.n	801fc90 <__hexnan+0xe0>
 801fc84:	9b02      	ldr	r3, [sp, #8]
 801fc86:	3b04      	subs	r3, #4
 801fc88:	1b1b      	subs	r3, r3, r4
 801fc8a:	089b      	lsrs	r3, r3, #2
 801fc8c:	3301      	adds	r3, #1
 801fc8e:	009b      	lsls	r3, r3, #2
 801fc90:	9a01      	ldr	r2, [sp, #4]
 801fc92:	18d3      	adds	r3, r2, r3
 801fc94:	2200      	movs	r2, #0
 801fc96:	c304      	stmia	r3!, {r2}
 801fc98:	429f      	cmp	r7, r3
 801fc9a:	d2fc      	bcs.n	801fc96 <__hexnan+0xe6>
 801fc9c:	683b      	ldr	r3, [r7, #0]
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d104      	bne.n	801fcac <__hexnan+0xfc>
 801fca2:	9b01      	ldr	r3, [sp, #4]
 801fca4:	429f      	cmp	r7, r3
 801fca6:	d127      	bne.n	801fcf8 <__hexnan+0x148>
 801fca8:	2301      	movs	r3, #1
 801fcaa:	603b      	str	r3, [r7, #0]
 801fcac:	2005      	movs	r0, #5
 801fcae:	b00b      	add	sp, #44	@ 0x2c
 801fcb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fcb2:	9b03      	ldr	r3, [sp, #12]
 801fcb4:	3501      	adds	r5, #1
 801fcb6:	3301      	adds	r3, #1
 801fcb8:	9303      	str	r3, [sp, #12]
 801fcba:	2d08      	cmp	r5, #8
 801fcbc:	dd06      	ble.n	801fccc <__hexnan+0x11c>
 801fcbe:	9b01      	ldr	r3, [sp, #4]
 801fcc0:	429c      	cmp	r4, r3
 801fcc2:	d9ba      	bls.n	801fc3a <__hexnan+0x8a>
 801fcc4:	2300      	movs	r3, #0
 801fcc6:	2501      	movs	r5, #1
 801fcc8:	3c04      	subs	r4, #4
 801fcca:	6023      	str	r3, [r4, #0]
 801fccc:	220f      	movs	r2, #15
 801fcce:	6823      	ldr	r3, [r4, #0]
 801fcd0:	4010      	ands	r0, r2
 801fcd2:	011b      	lsls	r3, r3, #4
 801fcd4:	4303      	orrs	r3, r0
 801fcd6:	6023      	str	r3, [r4, #0]
 801fcd8:	e7af      	b.n	801fc3a <__hexnan+0x8a>
 801fcda:	9b06      	ldr	r3, [sp, #24]
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d0dd      	beq.n	801fc9c <__hexnan+0xec>
 801fce0:	2320      	movs	r3, #32
 801fce2:	9a06      	ldr	r2, [sp, #24]
 801fce4:	9902      	ldr	r1, [sp, #8]
 801fce6:	1a9b      	subs	r3, r3, r2
 801fce8:	2201      	movs	r2, #1
 801fcea:	4252      	negs	r2, r2
 801fcec:	40da      	lsrs	r2, r3
 801fcee:	3904      	subs	r1, #4
 801fcf0:	680b      	ldr	r3, [r1, #0]
 801fcf2:	4013      	ands	r3, r2
 801fcf4:	600b      	str	r3, [r1, #0]
 801fcf6:	e7d1      	b.n	801fc9c <__hexnan+0xec>
 801fcf8:	3f04      	subs	r7, #4
 801fcfa:	e7cf      	b.n	801fc9c <__hexnan+0xec>
 801fcfc:	2004      	movs	r0, #4
 801fcfe:	e7d6      	b.n	801fcae <__hexnan+0xfe>

0801fd00 <malloc>:
 801fd00:	b510      	push	{r4, lr}
 801fd02:	4b03      	ldr	r3, [pc, #12]	@ (801fd10 <malloc+0x10>)
 801fd04:	0001      	movs	r1, r0
 801fd06:	6818      	ldr	r0, [r3, #0]
 801fd08:	f000 f826 	bl	801fd58 <_malloc_r>
 801fd0c:	bd10      	pop	{r4, pc}
 801fd0e:	46c0      	nop			@ (mov r8, r8)
 801fd10:	200003cc 	.word	0x200003cc

0801fd14 <sbrk_aligned>:
 801fd14:	b570      	push	{r4, r5, r6, lr}
 801fd16:	4e0f      	ldr	r6, [pc, #60]	@ (801fd54 <sbrk_aligned+0x40>)
 801fd18:	000d      	movs	r5, r1
 801fd1a:	6831      	ldr	r1, [r6, #0]
 801fd1c:	0004      	movs	r4, r0
 801fd1e:	2900      	cmp	r1, #0
 801fd20:	d102      	bne.n	801fd28 <sbrk_aligned+0x14>
 801fd22:	f001 f989 	bl	8021038 <_sbrk_r>
 801fd26:	6030      	str	r0, [r6, #0]
 801fd28:	0029      	movs	r1, r5
 801fd2a:	0020      	movs	r0, r4
 801fd2c:	f001 f984 	bl	8021038 <_sbrk_r>
 801fd30:	1c43      	adds	r3, r0, #1
 801fd32:	d103      	bne.n	801fd3c <sbrk_aligned+0x28>
 801fd34:	2501      	movs	r5, #1
 801fd36:	426d      	negs	r5, r5
 801fd38:	0028      	movs	r0, r5
 801fd3a:	bd70      	pop	{r4, r5, r6, pc}
 801fd3c:	2303      	movs	r3, #3
 801fd3e:	1cc5      	adds	r5, r0, #3
 801fd40:	439d      	bics	r5, r3
 801fd42:	42a8      	cmp	r0, r5
 801fd44:	d0f8      	beq.n	801fd38 <sbrk_aligned+0x24>
 801fd46:	1a29      	subs	r1, r5, r0
 801fd48:	0020      	movs	r0, r4
 801fd4a:	f001 f975 	bl	8021038 <_sbrk_r>
 801fd4e:	3001      	adds	r0, #1
 801fd50:	d1f2      	bne.n	801fd38 <sbrk_aligned+0x24>
 801fd52:	e7ef      	b.n	801fd34 <sbrk_aligned+0x20>
 801fd54:	200038fc 	.word	0x200038fc

0801fd58 <_malloc_r>:
 801fd58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fd5a:	2203      	movs	r2, #3
 801fd5c:	1ccb      	adds	r3, r1, #3
 801fd5e:	4393      	bics	r3, r2
 801fd60:	3308      	adds	r3, #8
 801fd62:	0005      	movs	r5, r0
 801fd64:	001f      	movs	r7, r3
 801fd66:	2b0c      	cmp	r3, #12
 801fd68:	d234      	bcs.n	801fdd4 <_malloc_r+0x7c>
 801fd6a:	270c      	movs	r7, #12
 801fd6c:	42b9      	cmp	r1, r7
 801fd6e:	d833      	bhi.n	801fdd8 <_malloc_r+0x80>
 801fd70:	0028      	movs	r0, r5
 801fd72:	f000 f883 	bl	801fe7c <__malloc_lock>
 801fd76:	4e37      	ldr	r6, [pc, #220]	@ (801fe54 <_malloc_r+0xfc>)
 801fd78:	6833      	ldr	r3, [r6, #0]
 801fd7a:	001c      	movs	r4, r3
 801fd7c:	2c00      	cmp	r4, #0
 801fd7e:	d12f      	bne.n	801fde0 <_malloc_r+0x88>
 801fd80:	0039      	movs	r1, r7
 801fd82:	0028      	movs	r0, r5
 801fd84:	f7ff ffc6 	bl	801fd14 <sbrk_aligned>
 801fd88:	0004      	movs	r4, r0
 801fd8a:	1c43      	adds	r3, r0, #1
 801fd8c:	d15f      	bne.n	801fe4e <_malloc_r+0xf6>
 801fd8e:	6834      	ldr	r4, [r6, #0]
 801fd90:	9400      	str	r4, [sp, #0]
 801fd92:	9b00      	ldr	r3, [sp, #0]
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d14a      	bne.n	801fe2e <_malloc_r+0xd6>
 801fd98:	2c00      	cmp	r4, #0
 801fd9a:	d052      	beq.n	801fe42 <_malloc_r+0xea>
 801fd9c:	6823      	ldr	r3, [r4, #0]
 801fd9e:	0028      	movs	r0, r5
 801fda0:	18e3      	adds	r3, r4, r3
 801fda2:	9900      	ldr	r1, [sp, #0]
 801fda4:	9301      	str	r3, [sp, #4]
 801fda6:	f001 f947 	bl	8021038 <_sbrk_r>
 801fdaa:	9b01      	ldr	r3, [sp, #4]
 801fdac:	4283      	cmp	r3, r0
 801fdae:	d148      	bne.n	801fe42 <_malloc_r+0xea>
 801fdb0:	6823      	ldr	r3, [r4, #0]
 801fdb2:	0028      	movs	r0, r5
 801fdb4:	1aff      	subs	r7, r7, r3
 801fdb6:	0039      	movs	r1, r7
 801fdb8:	f7ff ffac 	bl	801fd14 <sbrk_aligned>
 801fdbc:	3001      	adds	r0, #1
 801fdbe:	d040      	beq.n	801fe42 <_malloc_r+0xea>
 801fdc0:	6823      	ldr	r3, [r4, #0]
 801fdc2:	19db      	adds	r3, r3, r7
 801fdc4:	6023      	str	r3, [r4, #0]
 801fdc6:	6833      	ldr	r3, [r6, #0]
 801fdc8:	685a      	ldr	r2, [r3, #4]
 801fdca:	2a00      	cmp	r2, #0
 801fdcc:	d133      	bne.n	801fe36 <_malloc_r+0xde>
 801fdce:	9b00      	ldr	r3, [sp, #0]
 801fdd0:	6033      	str	r3, [r6, #0]
 801fdd2:	e019      	b.n	801fe08 <_malloc_r+0xb0>
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	dac9      	bge.n	801fd6c <_malloc_r+0x14>
 801fdd8:	230c      	movs	r3, #12
 801fdda:	602b      	str	r3, [r5, #0]
 801fddc:	2000      	movs	r0, #0
 801fdde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fde0:	6821      	ldr	r1, [r4, #0]
 801fde2:	1bc9      	subs	r1, r1, r7
 801fde4:	d420      	bmi.n	801fe28 <_malloc_r+0xd0>
 801fde6:	290b      	cmp	r1, #11
 801fde8:	d90a      	bls.n	801fe00 <_malloc_r+0xa8>
 801fdea:	19e2      	adds	r2, r4, r7
 801fdec:	6027      	str	r7, [r4, #0]
 801fdee:	42a3      	cmp	r3, r4
 801fdf0:	d104      	bne.n	801fdfc <_malloc_r+0xa4>
 801fdf2:	6032      	str	r2, [r6, #0]
 801fdf4:	6863      	ldr	r3, [r4, #4]
 801fdf6:	6011      	str	r1, [r2, #0]
 801fdf8:	6053      	str	r3, [r2, #4]
 801fdfa:	e005      	b.n	801fe08 <_malloc_r+0xb0>
 801fdfc:	605a      	str	r2, [r3, #4]
 801fdfe:	e7f9      	b.n	801fdf4 <_malloc_r+0x9c>
 801fe00:	6862      	ldr	r2, [r4, #4]
 801fe02:	42a3      	cmp	r3, r4
 801fe04:	d10e      	bne.n	801fe24 <_malloc_r+0xcc>
 801fe06:	6032      	str	r2, [r6, #0]
 801fe08:	0028      	movs	r0, r5
 801fe0a:	f000 f83f 	bl	801fe8c <__malloc_unlock>
 801fe0e:	0020      	movs	r0, r4
 801fe10:	2207      	movs	r2, #7
 801fe12:	300b      	adds	r0, #11
 801fe14:	1d23      	adds	r3, r4, #4
 801fe16:	4390      	bics	r0, r2
 801fe18:	1ac2      	subs	r2, r0, r3
 801fe1a:	4298      	cmp	r0, r3
 801fe1c:	d0df      	beq.n	801fdde <_malloc_r+0x86>
 801fe1e:	1a1b      	subs	r3, r3, r0
 801fe20:	50a3      	str	r3, [r4, r2]
 801fe22:	e7dc      	b.n	801fdde <_malloc_r+0x86>
 801fe24:	605a      	str	r2, [r3, #4]
 801fe26:	e7ef      	b.n	801fe08 <_malloc_r+0xb0>
 801fe28:	0023      	movs	r3, r4
 801fe2a:	6864      	ldr	r4, [r4, #4]
 801fe2c:	e7a6      	b.n	801fd7c <_malloc_r+0x24>
 801fe2e:	9c00      	ldr	r4, [sp, #0]
 801fe30:	6863      	ldr	r3, [r4, #4]
 801fe32:	9300      	str	r3, [sp, #0]
 801fe34:	e7ad      	b.n	801fd92 <_malloc_r+0x3a>
 801fe36:	001a      	movs	r2, r3
 801fe38:	685b      	ldr	r3, [r3, #4]
 801fe3a:	42a3      	cmp	r3, r4
 801fe3c:	d1fb      	bne.n	801fe36 <_malloc_r+0xde>
 801fe3e:	2300      	movs	r3, #0
 801fe40:	e7da      	b.n	801fdf8 <_malloc_r+0xa0>
 801fe42:	230c      	movs	r3, #12
 801fe44:	0028      	movs	r0, r5
 801fe46:	602b      	str	r3, [r5, #0]
 801fe48:	f000 f820 	bl	801fe8c <__malloc_unlock>
 801fe4c:	e7c6      	b.n	801fddc <_malloc_r+0x84>
 801fe4e:	6007      	str	r7, [r0, #0]
 801fe50:	e7da      	b.n	801fe08 <_malloc_r+0xb0>
 801fe52:	46c0      	nop			@ (mov r8, r8)
 801fe54:	20003900 	.word	0x20003900

0801fe58 <__ascii_mbtowc>:
 801fe58:	b082      	sub	sp, #8
 801fe5a:	2900      	cmp	r1, #0
 801fe5c:	d100      	bne.n	801fe60 <__ascii_mbtowc+0x8>
 801fe5e:	a901      	add	r1, sp, #4
 801fe60:	1e10      	subs	r0, r2, #0
 801fe62:	d006      	beq.n	801fe72 <__ascii_mbtowc+0x1a>
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d006      	beq.n	801fe76 <__ascii_mbtowc+0x1e>
 801fe68:	7813      	ldrb	r3, [r2, #0]
 801fe6a:	600b      	str	r3, [r1, #0]
 801fe6c:	7810      	ldrb	r0, [r2, #0]
 801fe6e:	1e43      	subs	r3, r0, #1
 801fe70:	4198      	sbcs	r0, r3
 801fe72:	b002      	add	sp, #8
 801fe74:	4770      	bx	lr
 801fe76:	2002      	movs	r0, #2
 801fe78:	4240      	negs	r0, r0
 801fe7a:	e7fa      	b.n	801fe72 <__ascii_mbtowc+0x1a>

0801fe7c <__malloc_lock>:
 801fe7c:	b510      	push	{r4, lr}
 801fe7e:	4802      	ldr	r0, [pc, #8]	@ (801fe88 <__malloc_lock+0xc>)
 801fe80:	f7fe fcfb 	bl	801e87a <__retarget_lock_acquire_recursive>
 801fe84:	bd10      	pop	{r4, pc}
 801fe86:	46c0      	nop			@ (mov r8, r8)
 801fe88:	200038f8 	.word	0x200038f8

0801fe8c <__malloc_unlock>:
 801fe8c:	b510      	push	{r4, lr}
 801fe8e:	4802      	ldr	r0, [pc, #8]	@ (801fe98 <__malloc_unlock+0xc>)
 801fe90:	f7fe fcf4 	bl	801e87c <__retarget_lock_release_recursive>
 801fe94:	bd10      	pop	{r4, pc}
 801fe96:	46c0      	nop			@ (mov r8, r8)
 801fe98:	200038f8 	.word	0x200038f8

0801fe9c <_Balloc>:
 801fe9c:	b570      	push	{r4, r5, r6, lr}
 801fe9e:	69c5      	ldr	r5, [r0, #28]
 801fea0:	0006      	movs	r6, r0
 801fea2:	000c      	movs	r4, r1
 801fea4:	2d00      	cmp	r5, #0
 801fea6:	d10e      	bne.n	801fec6 <_Balloc+0x2a>
 801fea8:	2010      	movs	r0, #16
 801feaa:	f7ff ff29 	bl	801fd00 <malloc>
 801feae:	1e02      	subs	r2, r0, #0
 801feb0:	61f0      	str	r0, [r6, #28]
 801feb2:	d104      	bne.n	801febe <_Balloc+0x22>
 801feb4:	216b      	movs	r1, #107	@ 0x6b
 801feb6:	4b19      	ldr	r3, [pc, #100]	@ (801ff1c <_Balloc+0x80>)
 801feb8:	4819      	ldr	r0, [pc, #100]	@ (801ff20 <_Balloc+0x84>)
 801feba:	f001 f8cf 	bl	802105c <__assert_func>
 801febe:	6045      	str	r5, [r0, #4]
 801fec0:	6085      	str	r5, [r0, #8]
 801fec2:	6005      	str	r5, [r0, #0]
 801fec4:	60c5      	str	r5, [r0, #12]
 801fec6:	69f5      	ldr	r5, [r6, #28]
 801fec8:	68eb      	ldr	r3, [r5, #12]
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d013      	beq.n	801fef6 <_Balloc+0x5a>
 801fece:	69f3      	ldr	r3, [r6, #28]
 801fed0:	00a2      	lsls	r2, r4, #2
 801fed2:	68db      	ldr	r3, [r3, #12]
 801fed4:	189b      	adds	r3, r3, r2
 801fed6:	6818      	ldr	r0, [r3, #0]
 801fed8:	2800      	cmp	r0, #0
 801feda:	d118      	bne.n	801ff0e <_Balloc+0x72>
 801fedc:	2101      	movs	r1, #1
 801fede:	000d      	movs	r5, r1
 801fee0:	40a5      	lsls	r5, r4
 801fee2:	1d6a      	adds	r2, r5, #5
 801fee4:	0030      	movs	r0, r6
 801fee6:	0092      	lsls	r2, r2, #2
 801fee8:	f001 f8d6 	bl	8021098 <_calloc_r>
 801feec:	2800      	cmp	r0, #0
 801feee:	d00c      	beq.n	801ff0a <_Balloc+0x6e>
 801fef0:	6044      	str	r4, [r0, #4]
 801fef2:	6085      	str	r5, [r0, #8]
 801fef4:	e00d      	b.n	801ff12 <_Balloc+0x76>
 801fef6:	2221      	movs	r2, #33	@ 0x21
 801fef8:	2104      	movs	r1, #4
 801fefa:	0030      	movs	r0, r6
 801fefc:	f001 f8cc 	bl	8021098 <_calloc_r>
 801ff00:	69f3      	ldr	r3, [r6, #28]
 801ff02:	60e8      	str	r0, [r5, #12]
 801ff04:	68db      	ldr	r3, [r3, #12]
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d1e1      	bne.n	801fece <_Balloc+0x32>
 801ff0a:	2000      	movs	r0, #0
 801ff0c:	bd70      	pop	{r4, r5, r6, pc}
 801ff0e:	6802      	ldr	r2, [r0, #0]
 801ff10:	601a      	str	r2, [r3, #0]
 801ff12:	2300      	movs	r3, #0
 801ff14:	6103      	str	r3, [r0, #16]
 801ff16:	60c3      	str	r3, [r0, #12]
 801ff18:	e7f8      	b.n	801ff0c <_Balloc+0x70>
 801ff1a:	46c0      	nop			@ (mov r8, r8)
 801ff1c:	08023a3a 	.word	0x08023a3a
 801ff20:	08023b1a 	.word	0x08023b1a

0801ff24 <_Bfree>:
 801ff24:	b570      	push	{r4, r5, r6, lr}
 801ff26:	69c6      	ldr	r6, [r0, #28]
 801ff28:	0005      	movs	r5, r0
 801ff2a:	000c      	movs	r4, r1
 801ff2c:	2e00      	cmp	r6, #0
 801ff2e:	d10e      	bne.n	801ff4e <_Bfree+0x2a>
 801ff30:	2010      	movs	r0, #16
 801ff32:	f7ff fee5 	bl	801fd00 <malloc>
 801ff36:	1e02      	subs	r2, r0, #0
 801ff38:	61e8      	str	r0, [r5, #28]
 801ff3a:	d104      	bne.n	801ff46 <_Bfree+0x22>
 801ff3c:	218f      	movs	r1, #143	@ 0x8f
 801ff3e:	4b09      	ldr	r3, [pc, #36]	@ (801ff64 <_Bfree+0x40>)
 801ff40:	4809      	ldr	r0, [pc, #36]	@ (801ff68 <_Bfree+0x44>)
 801ff42:	f001 f88b 	bl	802105c <__assert_func>
 801ff46:	6046      	str	r6, [r0, #4]
 801ff48:	6086      	str	r6, [r0, #8]
 801ff4a:	6006      	str	r6, [r0, #0]
 801ff4c:	60c6      	str	r6, [r0, #12]
 801ff4e:	2c00      	cmp	r4, #0
 801ff50:	d007      	beq.n	801ff62 <_Bfree+0x3e>
 801ff52:	69eb      	ldr	r3, [r5, #28]
 801ff54:	6862      	ldr	r2, [r4, #4]
 801ff56:	68db      	ldr	r3, [r3, #12]
 801ff58:	0092      	lsls	r2, r2, #2
 801ff5a:	189b      	adds	r3, r3, r2
 801ff5c:	681a      	ldr	r2, [r3, #0]
 801ff5e:	6022      	str	r2, [r4, #0]
 801ff60:	601c      	str	r4, [r3, #0]
 801ff62:	bd70      	pop	{r4, r5, r6, pc}
 801ff64:	08023a3a 	.word	0x08023a3a
 801ff68:	08023b1a 	.word	0x08023b1a

0801ff6c <__multadd>:
 801ff6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ff6e:	000f      	movs	r7, r1
 801ff70:	9001      	str	r0, [sp, #4]
 801ff72:	000c      	movs	r4, r1
 801ff74:	001e      	movs	r6, r3
 801ff76:	2000      	movs	r0, #0
 801ff78:	690d      	ldr	r5, [r1, #16]
 801ff7a:	3714      	adds	r7, #20
 801ff7c:	683b      	ldr	r3, [r7, #0]
 801ff7e:	3001      	adds	r0, #1
 801ff80:	b299      	uxth	r1, r3
 801ff82:	4351      	muls	r1, r2
 801ff84:	0c1b      	lsrs	r3, r3, #16
 801ff86:	4353      	muls	r3, r2
 801ff88:	1989      	adds	r1, r1, r6
 801ff8a:	0c0e      	lsrs	r6, r1, #16
 801ff8c:	199b      	adds	r3, r3, r6
 801ff8e:	0c1e      	lsrs	r6, r3, #16
 801ff90:	b289      	uxth	r1, r1
 801ff92:	041b      	lsls	r3, r3, #16
 801ff94:	185b      	adds	r3, r3, r1
 801ff96:	c708      	stmia	r7!, {r3}
 801ff98:	4285      	cmp	r5, r0
 801ff9a:	dcef      	bgt.n	801ff7c <__multadd+0x10>
 801ff9c:	2e00      	cmp	r6, #0
 801ff9e:	d022      	beq.n	801ffe6 <__multadd+0x7a>
 801ffa0:	68a3      	ldr	r3, [r4, #8]
 801ffa2:	42ab      	cmp	r3, r5
 801ffa4:	dc19      	bgt.n	801ffda <__multadd+0x6e>
 801ffa6:	6861      	ldr	r1, [r4, #4]
 801ffa8:	9801      	ldr	r0, [sp, #4]
 801ffaa:	3101      	adds	r1, #1
 801ffac:	f7ff ff76 	bl	801fe9c <_Balloc>
 801ffb0:	1e07      	subs	r7, r0, #0
 801ffb2:	d105      	bne.n	801ffc0 <__multadd+0x54>
 801ffb4:	003a      	movs	r2, r7
 801ffb6:	21ba      	movs	r1, #186	@ 0xba
 801ffb8:	4b0c      	ldr	r3, [pc, #48]	@ (801ffec <__multadd+0x80>)
 801ffba:	480d      	ldr	r0, [pc, #52]	@ (801fff0 <__multadd+0x84>)
 801ffbc:	f001 f84e 	bl	802105c <__assert_func>
 801ffc0:	0021      	movs	r1, r4
 801ffc2:	6922      	ldr	r2, [r4, #16]
 801ffc4:	310c      	adds	r1, #12
 801ffc6:	3202      	adds	r2, #2
 801ffc8:	0092      	lsls	r2, r2, #2
 801ffca:	300c      	adds	r0, #12
 801ffcc:	f7fe fc62 	bl	801e894 <memcpy>
 801ffd0:	0021      	movs	r1, r4
 801ffd2:	9801      	ldr	r0, [sp, #4]
 801ffd4:	f7ff ffa6 	bl	801ff24 <_Bfree>
 801ffd8:	003c      	movs	r4, r7
 801ffda:	1d2b      	adds	r3, r5, #4
 801ffdc:	009b      	lsls	r3, r3, #2
 801ffde:	18e3      	adds	r3, r4, r3
 801ffe0:	3501      	adds	r5, #1
 801ffe2:	605e      	str	r6, [r3, #4]
 801ffe4:	6125      	str	r5, [r4, #16]
 801ffe6:	0020      	movs	r0, r4
 801ffe8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ffea:	46c0      	nop			@ (mov r8, r8)
 801ffec:	08023aa9 	.word	0x08023aa9
 801fff0:	08023b1a 	.word	0x08023b1a

0801fff4 <__s2b>:
 801fff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fff6:	0007      	movs	r7, r0
 801fff8:	0018      	movs	r0, r3
 801fffa:	000c      	movs	r4, r1
 801fffc:	3008      	adds	r0, #8
 801fffe:	2109      	movs	r1, #9
 8020000:	9301      	str	r3, [sp, #4]
 8020002:	0015      	movs	r5, r2
 8020004:	f7e0 f958 	bl	80002b8 <__divsi3>
 8020008:	2301      	movs	r3, #1
 802000a:	2100      	movs	r1, #0
 802000c:	4283      	cmp	r3, r0
 802000e:	db0a      	blt.n	8020026 <__s2b+0x32>
 8020010:	0038      	movs	r0, r7
 8020012:	f7ff ff43 	bl	801fe9c <_Balloc>
 8020016:	1e01      	subs	r1, r0, #0
 8020018:	d108      	bne.n	802002c <__s2b+0x38>
 802001a:	000a      	movs	r2, r1
 802001c:	4b19      	ldr	r3, [pc, #100]	@ (8020084 <__s2b+0x90>)
 802001e:	481a      	ldr	r0, [pc, #104]	@ (8020088 <__s2b+0x94>)
 8020020:	31d3      	adds	r1, #211	@ 0xd3
 8020022:	f001 f81b 	bl	802105c <__assert_func>
 8020026:	005b      	lsls	r3, r3, #1
 8020028:	3101      	adds	r1, #1
 802002a:	e7ef      	b.n	802000c <__s2b+0x18>
 802002c:	9b08      	ldr	r3, [sp, #32]
 802002e:	6143      	str	r3, [r0, #20]
 8020030:	2301      	movs	r3, #1
 8020032:	6103      	str	r3, [r0, #16]
 8020034:	2d09      	cmp	r5, #9
 8020036:	dd18      	ble.n	802006a <__s2b+0x76>
 8020038:	0023      	movs	r3, r4
 802003a:	3309      	adds	r3, #9
 802003c:	001e      	movs	r6, r3
 802003e:	9300      	str	r3, [sp, #0]
 8020040:	1964      	adds	r4, r4, r5
 8020042:	7833      	ldrb	r3, [r6, #0]
 8020044:	220a      	movs	r2, #10
 8020046:	0038      	movs	r0, r7
 8020048:	3b30      	subs	r3, #48	@ 0x30
 802004a:	f7ff ff8f 	bl	801ff6c <__multadd>
 802004e:	3601      	adds	r6, #1
 8020050:	0001      	movs	r1, r0
 8020052:	42a6      	cmp	r6, r4
 8020054:	d1f5      	bne.n	8020042 <__s2b+0x4e>
 8020056:	002c      	movs	r4, r5
 8020058:	9b00      	ldr	r3, [sp, #0]
 802005a:	3c08      	subs	r4, #8
 802005c:	191c      	adds	r4, r3, r4
 802005e:	002e      	movs	r6, r5
 8020060:	9b01      	ldr	r3, [sp, #4]
 8020062:	429e      	cmp	r6, r3
 8020064:	db04      	blt.n	8020070 <__s2b+0x7c>
 8020066:	0008      	movs	r0, r1
 8020068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802006a:	2509      	movs	r5, #9
 802006c:	340a      	adds	r4, #10
 802006e:	e7f6      	b.n	802005e <__s2b+0x6a>
 8020070:	1b63      	subs	r3, r4, r5
 8020072:	5d9b      	ldrb	r3, [r3, r6]
 8020074:	220a      	movs	r2, #10
 8020076:	0038      	movs	r0, r7
 8020078:	3b30      	subs	r3, #48	@ 0x30
 802007a:	f7ff ff77 	bl	801ff6c <__multadd>
 802007e:	3601      	adds	r6, #1
 8020080:	0001      	movs	r1, r0
 8020082:	e7ed      	b.n	8020060 <__s2b+0x6c>
 8020084:	08023aa9 	.word	0x08023aa9
 8020088:	08023b1a 	.word	0x08023b1a

0802008c <__hi0bits>:
 802008c:	2280      	movs	r2, #128	@ 0x80
 802008e:	0003      	movs	r3, r0
 8020090:	0252      	lsls	r2, r2, #9
 8020092:	2000      	movs	r0, #0
 8020094:	4293      	cmp	r3, r2
 8020096:	d201      	bcs.n	802009c <__hi0bits+0x10>
 8020098:	041b      	lsls	r3, r3, #16
 802009a:	3010      	adds	r0, #16
 802009c:	2280      	movs	r2, #128	@ 0x80
 802009e:	0452      	lsls	r2, r2, #17
 80200a0:	4293      	cmp	r3, r2
 80200a2:	d201      	bcs.n	80200a8 <__hi0bits+0x1c>
 80200a4:	3008      	adds	r0, #8
 80200a6:	021b      	lsls	r3, r3, #8
 80200a8:	2280      	movs	r2, #128	@ 0x80
 80200aa:	0552      	lsls	r2, r2, #21
 80200ac:	4293      	cmp	r3, r2
 80200ae:	d201      	bcs.n	80200b4 <__hi0bits+0x28>
 80200b0:	3004      	adds	r0, #4
 80200b2:	011b      	lsls	r3, r3, #4
 80200b4:	2280      	movs	r2, #128	@ 0x80
 80200b6:	05d2      	lsls	r2, r2, #23
 80200b8:	4293      	cmp	r3, r2
 80200ba:	d201      	bcs.n	80200c0 <__hi0bits+0x34>
 80200bc:	3002      	adds	r0, #2
 80200be:	009b      	lsls	r3, r3, #2
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	db03      	blt.n	80200cc <__hi0bits+0x40>
 80200c4:	3001      	adds	r0, #1
 80200c6:	4213      	tst	r3, r2
 80200c8:	d100      	bne.n	80200cc <__hi0bits+0x40>
 80200ca:	2020      	movs	r0, #32
 80200cc:	4770      	bx	lr

080200ce <__lo0bits>:
 80200ce:	6803      	ldr	r3, [r0, #0]
 80200d0:	0001      	movs	r1, r0
 80200d2:	2207      	movs	r2, #7
 80200d4:	0018      	movs	r0, r3
 80200d6:	4010      	ands	r0, r2
 80200d8:	4213      	tst	r3, r2
 80200da:	d00d      	beq.n	80200f8 <__lo0bits+0x2a>
 80200dc:	3a06      	subs	r2, #6
 80200de:	2000      	movs	r0, #0
 80200e0:	4213      	tst	r3, r2
 80200e2:	d105      	bne.n	80200f0 <__lo0bits+0x22>
 80200e4:	3002      	adds	r0, #2
 80200e6:	4203      	tst	r3, r0
 80200e8:	d003      	beq.n	80200f2 <__lo0bits+0x24>
 80200ea:	40d3      	lsrs	r3, r2
 80200ec:	0010      	movs	r0, r2
 80200ee:	600b      	str	r3, [r1, #0]
 80200f0:	4770      	bx	lr
 80200f2:	089b      	lsrs	r3, r3, #2
 80200f4:	600b      	str	r3, [r1, #0]
 80200f6:	e7fb      	b.n	80200f0 <__lo0bits+0x22>
 80200f8:	b29a      	uxth	r2, r3
 80200fa:	2a00      	cmp	r2, #0
 80200fc:	d101      	bne.n	8020102 <__lo0bits+0x34>
 80200fe:	2010      	movs	r0, #16
 8020100:	0c1b      	lsrs	r3, r3, #16
 8020102:	b2da      	uxtb	r2, r3
 8020104:	2a00      	cmp	r2, #0
 8020106:	d101      	bne.n	802010c <__lo0bits+0x3e>
 8020108:	3008      	adds	r0, #8
 802010a:	0a1b      	lsrs	r3, r3, #8
 802010c:	071a      	lsls	r2, r3, #28
 802010e:	d101      	bne.n	8020114 <__lo0bits+0x46>
 8020110:	3004      	adds	r0, #4
 8020112:	091b      	lsrs	r3, r3, #4
 8020114:	079a      	lsls	r2, r3, #30
 8020116:	d101      	bne.n	802011c <__lo0bits+0x4e>
 8020118:	3002      	adds	r0, #2
 802011a:	089b      	lsrs	r3, r3, #2
 802011c:	07da      	lsls	r2, r3, #31
 802011e:	d4e9      	bmi.n	80200f4 <__lo0bits+0x26>
 8020120:	3001      	adds	r0, #1
 8020122:	085b      	lsrs	r3, r3, #1
 8020124:	d1e6      	bne.n	80200f4 <__lo0bits+0x26>
 8020126:	2020      	movs	r0, #32
 8020128:	e7e2      	b.n	80200f0 <__lo0bits+0x22>
	...

0802012c <__i2b>:
 802012c:	b510      	push	{r4, lr}
 802012e:	000c      	movs	r4, r1
 8020130:	2101      	movs	r1, #1
 8020132:	f7ff feb3 	bl	801fe9c <_Balloc>
 8020136:	2800      	cmp	r0, #0
 8020138:	d107      	bne.n	802014a <__i2b+0x1e>
 802013a:	2146      	movs	r1, #70	@ 0x46
 802013c:	4c05      	ldr	r4, [pc, #20]	@ (8020154 <__i2b+0x28>)
 802013e:	0002      	movs	r2, r0
 8020140:	4b05      	ldr	r3, [pc, #20]	@ (8020158 <__i2b+0x2c>)
 8020142:	0020      	movs	r0, r4
 8020144:	31ff      	adds	r1, #255	@ 0xff
 8020146:	f000 ff89 	bl	802105c <__assert_func>
 802014a:	2301      	movs	r3, #1
 802014c:	6144      	str	r4, [r0, #20]
 802014e:	6103      	str	r3, [r0, #16]
 8020150:	bd10      	pop	{r4, pc}
 8020152:	46c0      	nop			@ (mov r8, r8)
 8020154:	08023b1a 	.word	0x08023b1a
 8020158:	08023aa9 	.word	0x08023aa9

0802015c <__multiply>:
 802015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802015e:	0014      	movs	r4, r2
 8020160:	690a      	ldr	r2, [r1, #16]
 8020162:	6923      	ldr	r3, [r4, #16]
 8020164:	000d      	movs	r5, r1
 8020166:	b08b      	sub	sp, #44	@ 0x2c
 8020168:	429a      	cmp	r2, r3
 802016a:	db02      	blt.n	8020172 <__multiply+0x16>
 802016c:	0023      	movs	r3, r4
 802016e:	000c      	movs	r4, r1
 8020170:	001d      	movs	r5, r3
 8020172:	6927      	ldr	r7, [r4, #16]
 8020174:	692e      	ldr	r6, [r5, #16]
 8020176:	6861      	ldr	r1, [r4, #4]
 8020178:	19bb      	adds	r3, r7, r6
 802017a:	9303      	str	r3, [sp, #12]
 802017c:	68a3      	ldr	r3, [r4, #8]
 802017e:	19ba      	adds	r2, r7, r6
 8020180:	4293      	cmp	r3, r2
 8020182:	da00      	bge.n	8020186 <__multiply+0x2a>
 8020184:	3101      	adds	r1, #1
 8020186:	f7ff fe89 	bl	801fe9c <_Balloc>
 802018a:	9002      	str	r0, [sp, #8]
 802018c:	2800      	cmp	r0, #0
 802018e:	d106      	bne.n	802019e <__multiply+0x42>
 8020190:	21b1      	movs	r1, #177	@ 0xb1
 8020192:	4b49      	ldr	r3, [pc, #292]	@ (80202b8 <__multiply+0x15c>)
 8020194:	4849      	ldr	r0, [pc, #292]	@ (80202bc <__multiply+0x160>)
 8020196:	9a02      	ldr	r2, [sp, #8]
 8020198:	0049      	lsls	r1, r1, #1
 802019a:	f000 ff5f 	bl	802105c <__assert_func>
 802019e:	9b02      	ldr	r3, [sp, #8]
 80201a0:	2200      	movs	r2, #0
 80201a2:	3314      	adds	r3, #20
 80201a4:	469c      	mov	ip, r3
 80201a6:	19bb      	adds	r3, r7, r6
 80201a8:	009b      	lsls	r3, r3, #2
 80201aa:	4463      	add	r3, ip
 80201ac:	9304      	str	r3, [sp, #16]
 80201ae:	4663      	mov	r3, ip
 80201b0:	9904      	ldr	r1, [sp, #16]
 80201b2:	428b      	cmp	r3, r1
 80201b4:	d32a      	bcc.n	802020c <__multiply+0xb0>
 80201b6:	0023      	movs	r3, r4
 80201b8:	00bf      	lsls	r7, r7, #2
 80201ba:	3314      	adds	r3, #20
 80201bc:	3514      	adds	r5, #20
 80201be:	9308      	str	r3, [sp, #32]
 80201c0:	00b6      	lsls	r6, r6, #2
 80201c2:	19db      	adds	r3, r3, r7
 80201c4:	9305      	str	r3, [sp, #20]
 80201c6:	19ab      	adds	r3, r5, r6
 80201c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80201ca:	2304      	movs	r3, #4
 80201cc:	9306      	str	r3, [sp, #24]
 80201ce:	0023      	movs	r3, r4
 80201d0:	9a05      	ldr	r2, [sp, #20]
 80201d2:	3315      	adds	r3, #21
 80201d4:	9501      	str	r5, [sp, #4]
 80201d6:	429a      	cmp	r2, r3
 80201d8:	d305      	bcc.n	80201e6 <__multiply+0x8a>
 80201da:	1b13      	subs	r3, r2, r4
 80201dc:	3b15      	subs	r3, #21
 80201de:	089b      	lsrs	r3, r3, #2
 80201e0:	3301      	adds	r3, #1
 80201e2:	009b      	lsls	r3, r3, #2
 80201e4:	9306      	str	r3, [sp, #24]
 80201e6:	9b01      	ldr	r3, [sp, #4]
 80201e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80201ea:	4293      	cmp	r3, r2
 80201ec:	d310      	bcc.n	8020210 <__multiply+0xb4>
 80201ee:	9b03      	ldr	r3, [sp, #12]
 80201f0:	2b00      	cmp	r3, #0
 80201f2:	dd05      	ble.n	8020200 <__multiply+0xa4>
 80201f4:	9b04      	ldr	r3, [sp, #16]
 80201f6:	3b04      	subs	r3, #4
 80201f8:	9304      	str	r3, [sp, #16]
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	d056      	beq.n	80202ae <__multiply+0x152>
 8020200:	9b02      	ldr	r3, [sp, #8]
 8020202:	9a03      	ldr	r2, [sp, #12]
 8020204:	0018      	movs	r0, r3
 8020206:	611a      	str	r2, [r3, #16]
 8020208:	b00b      	add	sp, #44	@ 0x2c
 802020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802020c:	c304      	stmia	r3!, {r2}
 802020e:	e7cf      	b.n	80201b0 <__multiply+0x54>
 8020210:	9b01      	ldr	r3, [sp, #4]
 8020212:	6818      	ldr	r0, [r3, #0]
 8020214:	b280      	uxth	r0, r0
 8020216:	2800      	cmp	r0, #0
 8020218:	d01e      	beq.n	8020258 <__multiply+0xfc>
 802021a:	4667      	mov	r7, ip
 802021c:	2500      	movs	r5, #0
 802021e:	9e08      	ldr	r6, [sp, #32]
 8020220:	ce02      	ldmia	r6!, {r1}
 8020222:	683b      	ldr	r3, [r7, #0]
 8020224:	9307      	str	r3, [sp, #28]
 8020226:	b28b      	uxth	r3, r1
 8020228:	4343      	muls	r3, r0
 802022a:	001a      	movs	r2, r3
 802022c:	466b      	mov	r3, sp
 802022e:	0c09      	lsrs	r1, r1, #16
 8020230:	8b9b      	ldrh	r3, [r3, #28]
 8020232:	4341      	muls	r1, r0
 8020234:	18d3      	adds	r3, r2, r3
 8020236:	9a07      	ldr	r2, [sp, #28]
 8020238:	195b      	adds	r3, r3, r5
 802023a:	0c12      	lsrs	r2, r2, #16
 802023c:	1889      	adds	r1, r1, r2
 802023e:	0c1a      	lsrs	r2, r3, #16
 8020240:	188a      	adds	r2, r1, r2
 8020242:	b29b      	uxth	r3, r3
 8020244:	0c15      	lsrs	r5, r2, #16
 8020246:	0412      	lsls	r2, r2, #16
 8020248:	431a      	orrs	r2, r3
 802024a:	9b05      	ldr	r3, [sp, #20]
 802024c:	c704      	stmia	r7!, {r2}
 802024e:	42b3      	cmp	r3, r6
 8020250:	d8e6      	bhi.n	8020220 <__multiply+0xc4>
 8020252:	4663      	mov	r3, ip
 8020254:	9a06      	ldr	r2, [sp, #24]
 8020256:	509d      	str	r5, [r3, r2]
 8020258:	9b01      	ldr	r3, [sp, #4]
 802025a:	6818      	ldr	r0, [r3, #0]
 802025c:	0c00      	lsrs	r0, r0, #16
 802025e:	d020      	beq.n	80202a2 <__multiply+0x146>
 8020260:	4663      	mov	r3, ip
 8020262:	0025      	movs	r5, r4
 8020264:	4661      	mov	r1, ip
 8020266:	2700      	movs	r7, #0
 8020268:	681b      	ldr	r3, [r3, #0]
 802026a:	3514      	adds	r5, #20
 802026c:	682a      	ldr	r2, [r5, #0]
 802026e:	680e      	ldr	r6, [r1, #0]
 8020270:	b292      	uxth	r2, r2
 8020272:	4342      	muls	r2, r0
 8020274:	0c36      	lsrs	r6, r6, #16
 8020276:	1992      	adds	r2, r2, r6
 8020278:	19d2      	adds	r2, r2, r7
 802027a:	0416      	lsls	r6, r2, #16
 802027c:	b29b      	uxth	r3, r3
 802027e:	431e      	orrs	r6, r3
 8020280:	600e      	str	r6, [r1, #0]
 8020282:	cd40      	ldmia	r5!, {r6}
 8020284:	684b      	ldr	r3, [r1, #4]
 8020286:	0c36      	lsrs	r6, r6, #16
 8020288:	4346      	muls	r6, r0
 802028a:	b29b      	uxth	r3, r3
 802028c:	0c12      	lsrs	r2, r2, #16
 802028e:	18f3      	adds	r3, r6, r3
 8020290:	189b      	adds	r3, r3, r2
 8020292:	9a05      	ldr	r2, [sp, #20]
 8020294:	0c1f      	lsrs	r7, r3, #16
 8020296:	3104      	adds	r1, #4
 8020298:	42aa      	cmp	r2, r5
 802029a:	d8e7      	bhi.n	802026c <__multiply+0x110>
 802029c:	4662      	mov	r2, ip
 802029e:	9906      	ldr	r1, [sp, #24]
 80202a0:	5053      	str	r3, [r2, r1]
 80202a2:	9b01      	ldr	r3, [sp, #4]
 80202a4:	3304      	adds	r3, #4
 80202a6:	9301      	str	r3, [sp, #4]
 80202a8:	2304      	movs	r3, #4
 80202aa:	449c      	add	ip, r3
 80202ac:	e79b      	b.n	80201e6 <__multiply+0x8a>
 80202ae:	9b03      	ldr	r3, [sp, #12]
 80202b0:	3b01      	subs	r3, #1
 80202b2:	9303      	str	r3, [sp, #12]
 80202b4:	e79b      	b.n	80201ee <__multiply+0x92>
 80202b6:	46c0      	nop			@ (mov r8, r8)
 80202b8:	08023aa9 	.word	0x08023aa9
 80202bc:	08023b1a 	.word	0x08023b1a

080202c0 <__pow5mult>:
 80202c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80202c2:	2303      	movs	r3, #3
 80202c4:	0015      	movs	r5, r2
 80202c6:	0007      	movs	r7, r0
 80202c8:	000e      	movs	r6, r1
 80202ca:	401a      	ands	r2, r3
 80202cc:	421d      	tst	r5, r3
 80202ce:	d008      	beq.n	80202e2 <__pow5mult+0x22>
 80202d0:	4925      	ldr	r1, [pc, #148]	@ (8020368 <__pow5mult+0xa8>)
 80202d2:	3a01      	subs	r2, #1
 80202d4:	0092      	lsls	r2, r2, #2
 80202d6:	5852      	ldr	r2, [r2, r1]
 80202d8:	2300      	movs	r3, #0
 80202da:	0031      	movs	r1, r6
 80202dc:	f7ff fe46 	bl	801ff6c <__multadd>
 80202e0:	0006      	movs	r6, r0
 80202e2:	10ad      	asrs	r5, r5, #2
 80202e4:	d03d      	beq.n	8020362 <__pow5mult+0xa2>
 80202e6:	69fc      	ldr	r4, [r7, #28]
 80202e8:	2c00      	cmp	r4, #0
 80202ea:	d10f      	bne.n	802030c <__pow5mult+0x4c>
 80202ec:	2010      	movs	r0, #16
 80202ee:	f7ff fd07 	bl	801fd00 <malloc>
 80202f2:	1e02      	subs	r2, r0, #0
 80202f4:	61f8      	str	r0, [r7, #28]
 80202f6:	d105      	bne.n	8020304 <__pow5mult+0x44>
 80202f8:	21b4      	movs	r1, #180	@ 0xb4
 80202fa:	4b1c      	ldr	r3, [pc, #112]	@ (802036c <__pow5mult+0xac>)
 80202fc:	481c      	ldr	r0, [pc, #112]	@ (8020370 <__pow5mult+0xb0>)
 80202fe:	31ff      	adds	r1, #255	@ 0xff
 8020300:	f000 feac 	bl	802105c <__assert_func>
 8020304:	6044      	str	r4, [r0, #4]
 8020306:	6084      	str	r4, [r0, #8]
 8020308:	6004      	str	r4, [r0, #0]
 802030a:	60c4      	str	r4, [r0, #12]
 802030c:	69fb      	ldr	r3, [r7, #28]
 802030e:	689c      	ldr	r4, [r3, #8]
 8020310:	9301      	str	r3, [sp, #4]
 8020312:	2c00      	cmp	r4, #0
 8020314:	d108      	bne.n	8020328 <__pow5mult+0x68>
 8020316:	0038      	movs	r0, r7
 8020318:	4916      	ldr	r1, [pc, #88]	@ (8020374 <__pow5mult+0xb4>)
 802031a:	f7ff ff07 	bl	802012c <__i2b>
 802031e:	9b01      	ldr	r3, [sp, #4]
 8020320:	0004      	movs	r4, r0
 8020322:	6098      	str	r0, [r3, #8]
 8020324:	2300      	movs	r3, #0
 8020326:	6003      	str	r3, [r0, #0]
 8020328:	2301      	movs	r3, #1
 802032a:	421d      	tst	r5, r3
 802032c:	d00a      	beq.n	8020344 <__pow5mult+0x84>
 802032e:	0031      	movs	r1, r6
 8020330:	0022      	movs	r2, r4
 8020332:	0038      	movs	r0, r7
 8020334:	f7ff ff12 	bl	802015c <__multiply>
 8020338:	0031      	movs	r1, r6
 802033a:	9001      	str	r0, [sp, #4]
 802033c:	0038      	movs	r0, r7
 802033e:	f7ff fdf1 	bl	801ff24 <_Bfree>
 8020342:	9e01      	ldr	r6, [sp, #4]
 8020344:	106d      	asrs	r5, r5, #1
 8020346:	d00c      	beq.n	8020362 <__pow5mult+0xa2>
 8020348:	6820      	ldr	r0, [r4, #0]
 802034a:	2800      	cmp	r0, #0
 802034c:	d107      	bne.n	802035e <__pow5mult+0x9e>
 802034e:	0022      	movs	r2, r4
 8020350:	0021      	movs	r1, r4
 8020352:	0038      	movs	r0, r7
 8020354:	f7ff ff02 	bl	802015c <__multiply>
 8020358:	2300      	movs	r3, #0
 802035a:	6020      	str	r0, [r4, #0]
 802035c:	6003      	str	r3, [r0, #0]
 802035e:	0004      	movs	r4, r0
 8020360:	e7e2      	b.n	8020328 <__pow5mult+0x68>
 8020362:	0030      	movs	r0, r6
 8020364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020366:	46c0      	nop			@ (mov r8, r8)
 8020368:	08023b74 	.word	0x08023b74
 802036c:	08023a3a 	.word	0x08023a3a
 8020370:	08023b1a 	.word	0x08023b1a
 8020374:	00000271 	.word	0x00000271

08020378 <__lshift>:
 8020378:	b5f0      	push	{r4, r5, r6, r7, lr}
 802037a:	000c      	movs	r4, r1
 802037c:	0016      	movs	r6, r2
 802037e:	6923      	ldr	r3, [r4, #16]
 8020380:	1157      	asrs	r7, r2, #5
 8020382:	b085      	sub	sp, #20
 8020384:	18fb      	adds	r3, r7, r3
 8020386:	9301      	str	r3, [sp, #4]
 8020388:	3301      	adds	r3, #1
 802038a:	9300      	str	r3, [sp, #0]
 802038c:	6849      	ldr	r1, [r1, #4]
 802038e:	68a3      	ldr	r3, [r4, #8]
 8020390:	9002      	str	r0, [sp, #8]
 8020392:	9a00      	ldr	r2, [sp, #0]
 8020394:	4293      	cmp	r3, r2
 8020396:	db10      	blt.n	80203ba <__lshift+0x42>
 8020398:	9802      	ldr	r0, [sp, #8]
 802039a:	f7ff fd7f 	bl	801fe9c <_Balloc>
 802039e:	2300      	movs	r3, #0
 80203a0:	0001      	movs	r1, r0
 80203a2:	0005      	movs	r5, r0
 80203a4:	001a      	movs	r2, r3
 80203a6:	3114      	adds	r1, #20
 80203a8:	4298      	cmp	r0, r3
 80203aa:	d10c      	bne.n	80203c6 <__lshift+0x4e>
 80203ac:	21ef      	movs	r1, #239	@ 0xef
 80203ae:	002a      	movs	r2, r5
 80203b0:	4b25      	ldr	r3, [pc, #148]	@ (8020448 <__lshift+0xd0>)
 80203b2:	4826      	ldr	r0, [pc, #152]	@ (802044c <__lshift+0xd4>)
 80203b4:	0049      	lsls	r1, r1, #1
 80203b6:	f000 fe51 	bl	802105c <__assert_func>
 80203ba:	3101      	adds	r1, #1
 80203bc:	005b      	lsls	r3, r3, #1
 80203be:	e7e8      	b.n	8020392 <__lshift+0x1a>
 80203c0:	0098      	lsls	r0, r3, #2
 80203c2:	500a      	str	r2, [r1, r0]
 80203c4:	3301      	adds	r3, #1
 80203c6:	42bb      	cmp	r3, r7
 80203c8:	dbfa      	blt.n	80203c0 <__lshift+0x48>
 80203ca:	43fb      	mvns	r3, r7
 80203cc:	17db      	asrs	r3, r3, #31
 80203ce:	401f      	ands	r7, r3
 80203d0:	00bf      	lsls	r7, r7, #2
 80203d2:	0023      	movs	r3, r4
 80203d4:	201f      	movs	r0, #31
 80203d6:	19c9      	adds	r1, r1, r7
 80203d8:	0037      	movs	r7, r6
 80203da:	6922      	ldr	r2, [r4, #16]
 80203dc:	3314      	adds	r3, #20
 80203de:	0092      	lsls	r2, r2, #2
 80203e0:	189a      	adds	r2, r3, r2
 80203e2:	4007      	ands	r7, r0
 80203e4:	4206      	tst	r6, r0
 80203e6:	d029      	beq.n	802043c <__lshift+0xc4>
 80203e8:	3001      	adds	r0, #1
 80203ea:	1bc0      	subs	r0, r0, r7
 80203ec:	9003      	str	r0, [sp, #12]
 80203ee:	468c      	mov	ip, r1
 80203f0:	2000      	movs	r0, #0
 80203f2:	681e      	ldr	r6, [r3, #0]
 80203f4:	40be      	lsls	r6, r7
 80203f6:	4306      	orrs	r6, r0
 80203f8:	4660      	mov	r0, ip
 80203fa:	c040      	stmia	r0!, {r6}
 80203fc:	4684      	mov	ip, r0
 80203fe:	9e03      	ldr	r6, [sp, #12]
 8020400:	cb01      	ldmia	r3!, {r0}
 8020402:	40f0      	lsrs	r0, r6
 8020404:	429a      	cmp	r2, r3
 8020406:	d8f4      	bhi.n	80203f2 <__lshift+0x7a>
 8020408:	0026      	movs	r6, r4
 802040a:	3615      	adds	r6, #21
 802040c:	2304      	movs	r3, #4
 802040e:	42b2      	cmp	r2, r6
 8020410:	d304      	bcc.n	802041c <__lshift+0xa4>
 8020412:	1b13      	subs	r3, r2, r4
 8020414:	3b15      	subs	r3, #21
 8020416:	089b      	lsrs	r3, r3, #2
 8020418:	3301      	adds	r3, #1
 802041a:	009b      	lsls	r3, r3, #2
 802041c:	50c8      	str	r0, [r1, r3]
 802041e:	2800      	cmp	r0, #0
 8020420:	d002      	beq.n	8020428 <__lshift+0xb0>
 8020422:	9b01      	ldr	r3, [sp, #4]
 8020424:	3302      	adds	r3, #2
 8020426:	9300      	str	r3, [sp, #0]
 8020428:	9b00      	ldr	r3, [sp, #0]
 802042a:	9802      	ldr	r0, [sp, #8]
 802042c:	3b01      	subs	r3, #1
 802042e:	0021      	movs	r1, r4
 8020430:	612b      	str	r3, [r5, #16]
 8020432:	f7ff fd77 	bl	801ff24 <_Bfree>
 8020436:	0028      	movs	r0, r5
 8020438:	b005      	add	sp, #20
 802043a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802043c:	cb01      	ldmia	r3!, {r0}
 802043e:	c101      	stmia	r1!, {r0}
 8020440:	429a      	cmp	r2, r3
 8020442:	d8fb      	bhi.n	802043c <__lshift+0xc4>
 8020444:	e7f0      	b.n	8020428 <__lshift+0xb0>
 8020446:	46c0      	nop			@ (mov r8, r8)
 8020448:	08023aa9 	.word	0x08023aa9
 802044c:	08023b1a 	.word	0x08023b1a

08020450 <__mcmp>:
 8020450:	b530      	push	{r4, r5, lr}
 8020452:	690b      	ldr	r3, [r1, #16]
 8020454:	6904      	ldr	r4, [r0, #16]
 8020456:	0002      	movs	r2, r0
 8020458:	1ae0      	subs	r0, r4, r3
 802045a:	429c      	cmp	r4, r3
 802045c:	d10f      	bne.n	802047e <__mcmp+0x2e>
 802045e:	3214      	adds	r2, #20
 8020460:	009b      	lsls	r3, r3, #2
 8020462:	3114      	adds	r1, #20
 8020464:	0014      	movs	r4, r2
 8020466:	18c9      	adds	r1, r1, r3
 8020468:	18d2      	adds	r2, r2, r3
 802046a:	3a04      	subs	r2, #4
 802046c:	3904      	subs	r1, #4
 802046e:	6815      	ldr	r5, [r2, #0]
 8020470:	680b      	ldr	r3, [r1, #0]
 8020472:	429d      	cmp	r5, r3
 8020474:	d004      	beq.n	8020480 <__mcmp+0x30>
 8020476:	2001      	movs	r0, #1
 8020478:	429d      	cmp	r5, r3
 802047a:	d200      	bcs.n	802047e <__mcmp+0x2e>
 802047c:	3802      	subs	r0, #2
 802047e:	bd30      	pop	{r4, r5, pc}
 8020480:	4294      	cmp	r4, r2
 8020482:	d3f2      	bcc.n	802046a <__mcmp+0x1a>
 8020484:	e7fb      	b.n	802047e <__mcmp+0x2e>
	...

08020488 <__mdiff>:
 8020488:	b5f0      	push	{r4, r5, r6, r7, lr}
 802048a:	000c      	movs	r4, r1
 802048c:	b087      	sub	sp, #28
 802048e:	9000      	str	r0, [sp, #0]
 8020490:	0011      	movs	r1, r2
 8020492:	0020      	movs	r0, r4
 8020494:	0017      	movs	r7, r2
 8020496:	f7ff ffdb 	bl	8020450 <__mcmp>
 802049a:	1e05      	subs	r5, r0, #0
 802049c:	d110      	bne.n	80204c0 <__mdiff+0x38>
 802049e:	0001      	movs	r1, r0
 80204a0:	9800      	ldr	r0, [sp, #0]
 80204a2:	f7ff fcfb 	bl	801fe9c <_Balloc>
 80204a6:	1e02      	subs	r2, r0, #0
 80204a8:	d104      	bne.n	80204b4 <__mdiff+0x2c>
 80204aa:	4b40      	ldr	r3, [pc, #256]	@ (80205ac <__mdiff+0x124>)
 80204ac:	4840      	ldr	r0, [pc, #256]	@ (80205b0 <__mdiff+0x128>)
 80204ae:	4941      	ldr	r1, [pc, #260]	@ (80205b4 <__mdiff+0x12c>)
 80204b0:	f000 fdd4 	bl	802105c <__assert_func>
 80204b4:	2301      	movs	r3, #1
 80204b6:	6145      	str	r5, [r0, #20]
 80204b8:	6103      	str	r3, [r0, #16]
 80204ba:	0010      	movs	r0, r2
 80204bc:	b007      	add	sp, #28
 80204be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204c0:	2600      	movs	r6, #0
 80204c2:	42b0      	cmp	r0, r6
 80204c4:	da03      	bge.n	80204ce <__mdiff+0x46>
 80204c6:	0023      	movs	r3, r4
 80204c8:	003c      	movs	r4, r7
 80204ca:	001f      	movs	r7, r3
 80204cc:	3601      	adds	r6, #1
 80204ce:	6861      	ldr	r1, [r4, #4]
 80204d0:	9800      	ldr	r0, [sp, #0]
 80204d2:	f7ff fce3 	bl	801fe9c <_Balloc>
 80204d6:	1e02      	subs	r2, r0, #0
 80204d8:	d103      	bne.n	80204e2 <__mdiff+0x5a>
 80204da:	4b34      	ldr	r3, [pc, #208]	@ (80205ac <__mdiff+0x124>)
 80204dc:	4834      	ldr	r0, [pc, #208]	@ (80205b0 <__mdiff+0x128>)
 80204de:	4936      	ldr	r1, [pc, #216]	@ (80205b8 <__mdiff+0x130>)
 80204e0:	e7e6      	b.n	80204b0 <__mdiff+0x28>
 80204e2:	6923      	ldr	r3, [r4, #16]
 80204e4:	3414      	adds	r4, #20
 80204e6:	9300      	str	r3, [sp, #0]
 80204e8:	009b      	lsls	r3, r3, #2
 80204ea:	18e3      	adds	r3, r4, r3
 80204ec:	0021      	movs	r1, r4
 80204ee:	9401      	str	r4, [sp, #4]
 80204f0:	003c      	movs	r4, r7
 80204f2:	9302      	str	r3, [sp, #8]
 80204f4:	693b      	ldr	r3, [r7, #16]
 80204f6:	3414      	adds	r4, #20
 80204f8:	009b      	lsls	r3, r3, #2
 80204fa:	18e3      	adds	r3, r4, r3
 80204fc:	9303      	str	r3, [sp, #12]
 80204fe:	0003      	movs	r3, r0
 8020500:	60c6      	str	r6, [r0, #12]
 8020502:	468c      	mov	ip, r1
 8020504:	2000      	movs	r0, #0
 8020506:	3314      	adds	r3, #20
 8020508:	9304      	str	r3, [sp, #16]
 802050a:	9305      	str	r3, [sp, #20]
 802050c:	4663      	mov	r3, ip
 802050e:	cb20      	ldmia	r3!, {r5}
 8020510:	b2a9      	uxth	r1, r5
 8020512:	000e      	movs	r6, r1
 8020514:	469c      	mov	ip, r3
 8020516:	cc08      	ldmia	r4!, {r3}
 8020518:	0c2d      	lsrs	r5, r5, #16
 802051a:	b299      	uxth	r1, r3
 802051c:	1a71      	subs	r1, r6, r1
 802051e:	1809      	adds	r1, r1, r0
 8020520:	0c1b      	lsrs	r3, r3, #16
 8020522:	1408      	asrs	r0, r1, #16
 8020524:	1aeb      	subs	r3, r5, r3
 8020526:	181b      	adds	r3, r3, r0
 8020528:	1418      	asrs	r0, r3, #16
 802052a:	b289      	uxth	r1, r1
 802052c:	041b      	lsls	r3, r3, #16
 802052e:	4319      	orrs	r1, r3
 8020530:	9b05      	ldr	r3, [sp, #20]
 8020532:	c302      	stmia	r3!, {r1}
 8020534:	9305      	str	r3, [sp, #20]
 8020536:	9b03      	ldr	r3, [sp, #12]
 8020538:	42a3      	cmp	r3, r4
 802053a:	d8e7      	bhi.n	802050c <__mdiff+0x84>
 802053c:	0039      	movs	r1, r7
 802053e:	9c03      	ldr	r4, [sp, #12]
 8020540:	3115      	adds	r1, #21
 8020542:	2304      	movs	r3, #4
 8020544:	428c      	cmp	r4, r1
 8020546:	d304      	bcc.n	8020552 <__mdiff+0xca>
 8020548:	1be3      	subs	r3, r4, r7
 802054a:	3b15      	subs	r3, #21
 802054c:	089b      	lsrs	r3, r3, #2
 802054e:	3301      	adds	r3, #1
 8020550:	009b      	lsls	r3, r3, #2
 8020552:	9901      	ldr	r1, [sp, #4]
 8020554:	18cd      	adds	r5, r1, r3
 8020556:	9904      	ldr	r1, [sp, #16]
 8020558:	002e      	movs	r6, r5
 802055a:	18cb      	adds	r3, r1, r3
 802055c:	001f      	movs	r7, r3
 802055e:	9902      	ldr	r1, [sp, #8]
 8020560:	428e      	cmp	r6, r1
 8020562:	d311      	bcc.n	8020588 <__mdiff+0x100>
 8020564:	9c02      	ldr	r4, [sp, #8]
 8020566:	1ee9      	subs	r1, r5, #3
 8020568:	2000      	movs	r0, #0
 802056a:	428c      	cmp	r4, r1
 802056c:	d304      	bcc.n	8020578 <__mdiff+0xf0>
 802056e:	0021      	movs	r1, r4
 8020570:	3103      	adds	r1, #3
 8020572:	1b49      	subs	r1, r1, r5
 8020574:	0889      	lsrs	r1, r1, #2
 8020576:	0088      	lsls	r0, r1, #2
 8020578:	181b      	adds	r3, r3, r0
 802057a:	3b04      	subs	r3, #4
 802057c:	6819      	ldr	r1, [r3, #0]
 802057e:	2900      	cmp	r1, #0
 8020580:	d010      	beq.n	80205a4 <__mdiff+0x11c>
 8020582:	9b00      	ldr	r3, [sp, #0]
 8020584:	6113      	str	r3, [r2, #16]
 8020586:	e798      	b.n	80204ba <__mdiff+0x32>
 8020588:	4684      	mov	ip, r0
 802058a:	ce02      	ldmia	r6!, {r1}
 802058c:	b288      	uxth	r0, r1
 802058e:	4460      	add	r0, ip
 8020590:	1400      	asrs	r0, r0, #16
 8020592:	0c0c      	lsrs	r4, r1, #16
 8020594:	1904      	adds	r4, r0, r4
 8020596:	4461      	add	r1, ip
 8020598:	1420      	asrs	r0, r4, #16
 802059a:	b289      	uxth	r1, r1
 802059c:	0424      	lsls	r4, r4, #16
 802059e:	4321      	orrs	r1, r4
 80205a0:	c702      	stmia	r7!, {r1}
 80205a2:	e7dc      	b.n	802055e <__mdiff+0xd6>
 80205a4:	9900      	ldr	r1, [sp, #0]
 80205a6:	3901      	subs	r1, #1
 80205a8:	9100      	str	r1, [sp, #0]
 80205aa:	e7e6      	b.n	802057a <__mdiff+0xf2>
 80205ac:	08023aa9 	.word	0x08023aa9
 80205b0:	08023b1a 	.word	0x08023b1a
 80205b4:	00000237 	.word	0x00000237
 80205b8:	00000245 	.word	0x00000245

080205bc <__ulp>:
 80205bc:	b510      	push	{r4, lr}
 80205be:	2400      	movs	r4, #0
 80205c0:	4b0c      	ldr	r3, [pc, #48]	@ (80205f4 <__ulp+0x38>)
 80205c2:	4a0d      	ldr	r2, [pc, #52]	@ (80205f8 <__ulp+0x3c>)
 80205c4:	400b      	ands	r3, r1
 80205c6:	189b      	adds	r3, r3, r2
 80205c8:	42a3      	cmp	r3, r4
 80205ca:	dc06      	bgt.n	80205da <__ulp+0x1e>
 80205cc:	425b      	negs	r3, r3
 80205ce:	151a      	asrs	r2, r3, #20
 80205d0:	2a13      	cmp	r2, #19
 80205d2:	dc05      	bgt.n	80205e0 <__ulp+0x24>
 80205d4:	2380      	movs	r3, #128	@ 0x80
 80205d6:	031b      	lsls	r3, r3, #12
 80205d8:	4113      	asrs	r3, r2
 80205da:	0019      	movs	r1, r3
 80205dc:	0020      	movs	r0, r4
 80205de:	bd10      	pop	{r4, pc}
 80205e0:	3a14      	subs	r2, #20
 80205e2:	2401      	movs	r4, #1
 80205e4:	2a1e      	cmp	r2, #30
 80205e6:	dc02      	bgt.n	80205ee <__ulp+0x32>
 80205e8:	2480      	movs	r4, #128	@ 0x80
 80205ea:	0624      	lsls	r4, r4, #24
 80205ec:	40d4      	lsrs	r4, r2
 80205ee:	2300      	movs	r3, #0
 80205f0:	e7f3      	b.n	80205da <__ulp+0x1e>
 80205f2:	46c0      	nop			@ (mov r8, r8)
 80205f4:	7ff00000 	.word	0x7ff00000
 80205f8:	fcc00000 	.word	0xfcc00000

080205fc <__b2d>:
 80205fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80205fe:	0006      	movs	r6, r0
 8020600:	6903      	ldr	r3, [r0, #16]
 8020602:	3614      	adds	r6, #20
 8020604:	009b      	lsls	r3, r3, #2
 8020606:	18f3      	adds	r3, r6, r3
 8020608:	1f1d      	subs	r5, r3, #4
 802060a:	682c      	ldr	r4, [r5, #0]
 802060c:	000f      	movs	r7, r1
 802060e:	0020      	movs	r0, r4
 8020610:	9301      	str	r3, [sp, #4]
 8020612:	f7ff fd3b 	bl	802008c <__hi0bits>
 8020616:	2220      	movs	r2, #32
 8020618:	1a12      	subs	r2, r2, r0
 802061a:	603a      	str	r2, [r7, #0]
 802061c:	0003      	movs	r3, r0
 802061e:	4a1c      	ldr	r2, [pc, #112]	@ (8020690 <__b2d+0x94>)
 8020620:	280a      	cmp	r0, #10
 8020622:	dc15      	bgt.n	8020650 <__b2d+0x54>
 8020624:	210b      	movs	r1, #11
 8020626:	0027      	movs	r7, r4
 8020628:	1a09      	subs	r1, r1, r0
 802062a:	40cf      	lsrs	r7, r1
 802062c:	433a      	orrs	r2, r7
 802062e:	468c      	mov	ip, r1
 8020630:	0011      	movs	r1, r2
 8020632:	2200      	movs	r2, #0
 8020634:	42ae      	cmp	r6, r5
 8020636:	d202      	bcs.n	802063e <__b2d+0x42>
 8020638:	9a01      	ldr	r2, [sp, #4]
 802063a:	3a08      	subs	r2, #8
 802063c:	6812      	ldr	r2, [r2, #0]
 802063e:	3315      	adds	r3, #21
 8020640:	409c      	lsls	r4, r3
 8020642:	4663      	mov	r3, ip
 8020644:	0027      	movs	r7, r4
 8020646:	40da      	lsrs	r2, r3
 8020648:	4317      	orrs	r7, r2
 802064a:	0038      	movs	r0, r7
 802064c:	b003      	add	sp, #12
 802064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020650:	2700      	movs	r7, #0
 8020652:	42ae      	cmp	r6, r5
 8020654:	d202      	bcs.n	802065c <__b2d+0x60>
 8020656:	9d01      	ldr	r5, [sp, #4]
 8020658:	3d08      	subs	r5, #8
 802065a:	682f      	ldr	r7, [r5, #0]
 802065c:	210b      	movs	r1, #11
 802065e:	4249      	negs	r1, r1
 8020660:	468c      	mov	ip, r1
 8020662:	449c      	add	ip, r3
 8020664:	2b0b      	cmp	r3, #11
 8020666:	d010      	beq.n	802068a <__b2d+0x8e>
 8020668:	4661      	mov	r1, ip
 802066a:	2320      	movs	r3, #32
 802066c:	408c      	lsls	r4, r1
 802066e:	1a5b      	subs	r3, r3, r1
 8020670:	0039      	movs	r1, r7
 8020672:	40d9      	lsrs	r1, r3
 8020674:	430c      	orrs	r4, r1
 8020676:	4322      	orrs	r2, r4
 8020678:	0011      	movs	r1, r2
 802067a:	2200      	movs	r2, #0
 802067c:	42b5      	cmp	r5, r6
 802067e:	d901      	bls.n	8020684 <__b2d+0x88>
 8020680:	3d04      	subs	r5, #4
 8020682:	682a      	ldr	r2, [r5, #0]
 8020684:	4664      	mov	r4, ip
 8020686:	40a7      	lsls	r7, r4
 8020688:	e7dd      	b.n	8020646 <__b2d+0x4a>
 802068a:	4322      	orrs	r2, r4
 802068c:	0011      	movs	r1, r2
 802068e:	e7dc      	b.n	802064a <__b2d+0x4e>
 8020690:	3ff00000 	.word	0x3ff00000

08020694 <__d2b>:
 8020694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020696:	2101      	movs	r1, #1
 8020698:	0016      	movs	r6, r2
 802069a:	001f      	movs	r7, r3
 802069c:	f7ff fbfe 	bl	801fe9c <_Balloc>
 80206a0:	1e04      	subs	r4, r0, #0
 80206a2:	d105      	bne.n	80206b0 <__d2b+0x1c>
 80206a4:	0022      	movs	r2, r4
 80206a6:	4b25      	ldr	r3, [pc, #148]	@ (802073c <__d2b+0xa8>)
 80206a8:	4825      	ldr	r0, [pc, #148]	@ (8020740 <__d2b+0xac>)
 80206aa:	4926      	ldr	r1, [pc, #152]	@ (8020744 <__d2b+0xb0>)
 80206ac:	f000 fcd6 	bl	802105c <__assert_func>
 80206b0:	033b      	lsls	r3, r7, #12
 80206b2:	007d      	lsls	r5, r7, #1
 80206b4:	0b1b      	lsrs	r3, r3, #12
 80206b6:	0d6d      	lsrs	r5, r5, #21
 80206b8:	d002      	beq.n	80206c0 <__d2b+0x2c>
 80206ba:	2280      	movs	r2, #128	@ 0x80
 80206bc:	0352      	lsls	r2, r2, #13
 80206be:	4313      	orrs	r3, r2
 80206c0:	9301      	str	r3, [sp, #4]
 80206c2:	2e00      	cmp	r6, #0
 80206c4:	d025      	beq.n	8020712 <__d2b+0x7e>
 80206c6:	4668      	mov	r0, sp
 80206c8:	9600      	str	r6, [sp, #0]
 80206ca:	f7ff fd00 	bl	80200ce <__lo0bits>
 80206ce:	9b01      	ldr	r3, [sp, #4]
 80206d0:	9900      	ldr	r1, [sp, #0]
 80206d2:	2800      	cmp	r0, #0
 80206d4:	d01b      	beq.n	802070e <__d2b+0x7a>
 80206d6:	2220      	movs	r2, #32
 80206d8:	001e      	movs	r6, r3
 80206da:	1a12      	subs	r2, r2, r0
 80206dc:	4096      	lsls	r6, r2
 80206de:	0032      	movs	r2, r6
 80206e0:	40c3      	lsrs	r3, r0
 80206e2:	430a      	orrs	r2, r1
 80206e4:	6162      	str	r2, [r4, #20]
 80206e6:	9301      	str	r3, [sp, #4]
 80206e8:	9e01      	ldr	r6, [sp, #4]
 80206ea:	61a6      	str	r6, [r4, #24]
 80206ec:	1e73      	subs	r3, r6, #1
 80206ee:	419e      	sbcs	r6, r3
 80206f0:	3601      	adds	r6, #1
 80206f2:	6126      	str	r6, [r4, #16]
 80206f4:	2d00      	cmp	r5, #0
 80206f6:	d014      	beq.n	8020722 <__d2b+0x8e>
 80206f8:	2635      	movs	r6, #53	@ 0x35
 80206fa:	4b13      	ldr	r3, [pc, #76]	@ (8020748 <__d2b+0xb4>)
 80206fc:	18ed      	adds	r5, r5, r3
 80206fe:	9b08      	ldr	r3, [sp, #32]
 8020700:	182d      	adds	r5, r5, r0
 8020702:	601d      	str	r5, [r3, #0]
 8020704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020706:	1a36      	subs	r6, r6, r0
 8020708:	601e      	str	r6, [r3, #0]
 802070a:	0020      	movs	r0, r4
 802070c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802070e:	6161      	str	r1, [r4, #20]
 8020710:	e7ea      	b.n	80206e8 <__d2b+0x54>
 8020712:	a801      	add	r0, sp, #4
 8020714:	f7ff fcdb 	bl	80200ce <__lo0bits>
 8020718:	9b01      	ldr	r3, [sp, #4]
 802071a:	2601      	movs	r6, #1
 802071c:	6163      	str	r3, [r4, #20]
 802071e:	3020      	adds	r0, #32
 8020720:	e7e7      	b.n	80206f2 <__d2b+0x5e>
 8020722:	4b0a      	ldr	r3, [pc, #40]	@ (802074c <__d2b+0xb8>)
 8020724:	18c0      	adds	r0, r0, r3
 8020726:	9b08      	ldr	r3, [sp, #32]
 8020728:	6018      	str	r0, [r3, #0]
 802072a:	4b09      	ldr	r3, [pc, #36]	@ (8020750 <__d2b+0xbc>)
 802072c:	18f3      	adds	r3, r6, r3
 802072e:	009b      	lsls	r3, r3, #2
 8020730:	18e3      	adds	r3, r4, r3
 8020732:	6958      	ldr	r0, [r3, #20]
 8020734:	f7ff fcaa 	bl	802008c <__hi0bits>
 8020738:	0176      	lsls	r6, r6, #5
 802073a:	e7e3      	b.n	8020704 <__d2b+0x70>
 802073c:	08023aa9 	.word	0x08023aa9
 8020740:	08023b1a 	.word	0x08023b1a
 8020744:	0000030f 	.word	0x0000030f
 8020748:	fffffbcd 	.word	0xfffffbcd
 802074c:	fffffbce 	.word	0xfffffbce
 8020750:	3fffffff 	.word	0x3fffffff

08020754 <__ratio>:
 8020754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020756:	b087      	sub	sp, #28
 8020758:	000f      	movs	r7, r1
 802075a:	a904      	add	r1, sp, #16
 802075c:	0006      	movs	r6, r0
 802075e:	f7ff ff4d 	bl	80205fc <__b2d>
 8020762:	9000      	str	r0, [sp, #0]
 8020764:	9101      	str	r1, [sp, #4]
 8020766:	9b00      	ldr	r3, [sp, #0]
 8020768:	9c01      	ldr	r4, [sp, #4]
 802076a:	0038      	movs	r0, r7
 802076c:	a905      	add	r1, sp, #20
 802076e:	9302      	str	r3, [sp, #8]
 8020770:	9403      	str	r4, [sp, #12]
 8020772:	f7ff ff43 	bl	80205fc <__b2d>
 8020776:	000d      	movs	r5, r1
 8020778:	0002      	movs	r2, r0
 802077a:	000b      	movs	r3, r1
 802077c:	6930      	ldr	r0, [r6, #16]
 802077e:	6939      	ldr	r1, [r7, #16]
 8020780:	9e04      	ldr	r6, [sp, #16]
 8020782:	1a40      	subs	r0, r0, r1
 8020784:	9905      	ldr	r1, [sp, #20]
 8020786:	0140      	lsls	r0, r0, #5
 8020788:	1a71      	subs	r1, r6, r1
 802078a:	1841      	adds	r1, r0, r1
 802078c:	0508      	lsls	r0, r1, #20
 802078e:	2900      	cmp	r1, #0
 8020790:	dd08      	ble.n	80207a4 <__ratio+0x50>
 8020792:	9901      	ldr	r1, [sp, #4]
 8020794:	1841      	adds	r1, r0, r1
 8020796:	9103      	str	r1, [sp, #12]
 8020798:	9802      	ldr	r0, [sp, #8]
 802079a:	9903      	ldr	r1, [sp, #12]
 802079c:	f7e1 fb0a 	bl	8001db4 <__aeabi_ddiv>
 80207a0:	b007      	add	sp, #28
 80207a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207a4:	1a2b      	subs	r3, r5, r0
 80207a6:	e7f7      	b.n	8020798 <__ratio+0x44>

080207a8 <__copybits>:
 80207a8:	b570      	push	{r4, r5, r6, lr}
 80207aa:	0014      	movs	r4, r2
 80207ac:	0005      	movs	r5, r0
 80207ae:	3901      	subs	r1, #1
 80207b0:	6913      	ldr	r3, [r2, #16]
 80207b2:	1149      	asrs	r1, r1, #5
 80207b4:	3101      	adds	r1, #1
 80207b6:	0089      	lsls	r1, r1, #2
 80207b8:	3414      	adds	r4, #20
 80207ba:	009b      	lsls	r3, r3, #2
 80207bc:	1841      	adds	r1, r0, r1
 80207be:	18e3      	adds	r3, r4, r3
 80207c0:	42a3      	cmp	r3, r4
 80207c2:	d80d      	bhi.n	80207e0 <__copybits+0x38>
 80207c4:	0014      	movs	r4, r2
 80207c6:	3411      	adds	r4, #17
 80207c8:	2500      	movs	r5, #0
 80207ca:	429c      	cmp	r4, r3
 80207cc:	d803      	bhi.n	80207d6 <__copybits+0x2e>
 80207ce:	1a9b      	subs	r3, r3, r2
 80207d0:	3b11      	subs	r3, #17
 80207d2:	089b      	lsrs	r3, r3, #2
 80207d4:	009d      	lsls	r5, r3, #2
 80207d6:	2300      	movs	r3, #0
 80207d8:	1940      	adds	r0, r0, r5
 80207da:	4281      	cmp	r1, r0
 80207dc:	d803      	bhi.n	80207e6 <__copybits+0x3e>
 80207de:	bd70      	pop	{r4, r5, r6, pc}
 80207e0:	cc40      	ldmia	r4!, {r6}
 80207e2:	c540      	stmia	r5!, {r6}
 80207e4:	e7ec      	b.n	80207c0 <__copybits+0x18>
 80207e6:	c008      	stmia	r0!, {r3}
 80207e8:	e7f7      	b.n	80207da <__copybits+0x32>

080207ea <__any_on>:
 80207ea:	0002      	movs	r2, r0
 80207ec:	6900      	ldr	r0, [r0, #16]
 80207ee:	b510      	push	{r4, lr}
 80207f0:	3214      	adds	r2, #20
 80207f2:	114b      	asrs	r3, r1, #5
 80207f4:	4298      	cmp	r0, r3
 80207f6:	db13      	blt.n	8020820 <__any_on+0x36>
 80207f8:	dd0c      	ble.n	8020814 <__any_on+0x2a>
 80207fa:	241f      	movs	r4, #31
 80207fc:	0008      	movs	r0, r1
 80207fe:	4020      	ands	r0, r4
 8020800:	4221      	tst	r1, r4
 8020802:	d007      	beq.n	8020814 <__any_on+0x2a>
 8020804:	0099      	lsls	r1, r3, #2
 8020806:	588c      	ldr	r4, [r1, r2]
 8020808:	0021      	movs	r1, r4
 802080a:	40c1      	lsrs	r1, r0
 802080c:	4081      	lsls	r1, r0
 802080e:	2001      	movs	r0, #1
 8020810:	428c      	cmp	r4, r1
 8020812:	d104      	bne.n	802081e <__any_on+0x34>
 8020814:	009b      	lsls	r3, r3, #2
 8020816:	18d3      	adds	r3, r2, r3
 8020818:	4293      	cmp	r3, r2
 802081a:	d803      	bhi.n	8020824 <__any_on+0x3a>
 802081c:	2000      	movs	r0, #0
 802081e:	bd10      	pop	{r4, pc}
 8020820:	0003      	movs	r3, r0
 8020822:	e7f7      	b.n	8020814 <__any_on+0x2a>
 8020824:	3b04      	subs	r3, #4
 8020826:	6819      	ldr	r1, [r3, #0]
 8020828:	2900      	cmp	r1, #0
 802082a:	d0f5      	beq.n	8020818 <__any_on+0x2e>
 802082c:	2001      	movs	r0, #1
 802082e:	e7f6      	b.n	802081e <__any_on+0x34>

08020830 <__ascii_wctomb>:
 8020830:	0003      	movs	r3, r0
 8020832:	1e08      	subs	r0, r1, #0
 8020834:	d005      	beq.n	8020842 <__ascii_wctomb+0x12>
 8020836:	2aff      	cmp	r2, #255	@ 0xff
 8020838:	d904      	bls.n	8020844 <__ascii_wctomb+0x14>
 802083a:	228a      	movs	r2, #138	@ 0x8a
 802083c:	2001      	movs	r0, #1
 802083e:	601a      	str	r2, [r3, #0]
 8020840:	4240      	negs	r0, r0
 8020842:	4770      	bx	lr
 8020844:	2001      	movs	r0, #1
 8020846:	700a      	strb	r2, [r1, #0]
 8020848:	e7fb      	b.n	8020842 <__ascii_wctomb+0x12>
	...

0802084c <__ssputs_r>:
 802084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802084e:	688e      	ldr	r6, [r1, #8]
 8020850:	b085      	sub	sp, #20
 8020852:	001f      	movs	r7, r3
 8020854:	000c      	movs	r4, r1
 8020856:	680b      	ldr	r3, [r1, #0]
 8020858:	9002      	str	r0, [sp, #8]
 802085a:	9203      	str	r2, [sp, #12]
 802085c:	42be      	cmp	r6, r7
 802085e:	d830      	bhi.n	80208c2 <__ssputs_r+0x76>
 8020860:	210c      	movs	r1, #12
 8020862:	5e62      	ldrsh	r2, [r4, r1]
 8020864:	2190      	movs	r1, #144	@ 0x90
 8020866:	00c9      	lsls	r1, r1, #3
 8020868:	420a      	tst	r2, r1
 802086a:	d028      	beq.n	80208be <__ssputs_r+0x72>
 802086c:	2003      	movs	r0, #3
 802086e:	6921      	ldr	r1, [r4, #16]
 8020870:	1a5b      	subs	r3, r3, r1
 8020872:	9301      	str	r3, [sp, #4]
 8020874:	6963      	ldr	r3, [r4, #20]
 8020876:	4343      	muls	r3, r0
 8020878:	9801      	ldr	r0, [sp, #4]
 802087a:	0fdd      	lsrs	r5, r3, #31
 802087c:	18ed      	adds	r5, r5, r3
 802087e:	1c7b      	adds	r3, r7, #1
 8020880:	181b      	adds	r3, r3, r0
 8020882:	106d      	asrs	r5, r5, #1
 8020884:	42ab      	cmp	r3, r5
 8020886:	d900      	bls.n	802088a <__ssputs_r+0x3e>
 8020888:	001d      	movs	r5, r3
 802088a:	0552      	lsls	r2, r2, #21
 802088c:	d528      	bpl.n	80208e0 <__ssputs_r+0x94>
 802088e:	0029      	movs	r1, r5
 8020890:	9802      	ldr	r0, [sp, #8]
 8020892:	f7ff fa61 	bl	801fd58 <_malloc_r>
 8020896:	1e06      	subs	r6, r0, #0
 8020898:	d02c      	beq.n	80208f4 <__ssputs_r+0xa8>
 802089a:	9a01      	ldr	r2, [sp, #4]
 802089c:	6921      	ldr	r1, [r4, #16]
 802089e:	f7fd fff9 	bl	801e894 <memcpy>
 80208a2:	89a2      	ldrh	r2, [r4, #12]
 80208a4:	4b18      	ldr	r3, [pc, #96]	@ (8020908 <__ssputs_r+0xbc>)
 80208a6:	401a      	ands	r2, r3
 80208a8:	2380      	movs	r3, #128	@ 0x80
 80208aa:	4313      	orrs	r3, r2
 80208ac:	81a3      	strh	r3, [r4, #12]
 80208ae:	9b01      	ldr	r3, [sp, #4]
 80208b0:	6126      	str	r6, [r4, #16]
 80208b2:	18f6      	adds	r6, r6, r3
 80208b4:	6026      	str	r6, [r4, #0]
 80208b6:	003e      	movs	r6, r7
 80208b8:	6165      	str	r5, [r4, #20]
 80208ba:	1aed      	subs	r5, r5, r3
 80208bc:	60a5      	str	r5, [r4, #8]
 80208be:	42be      	cmp	r6, r7
 80208c0:	d900      	bls.n	80208c4 <__ssputs_r+0x78>
 80208c2:	003e      	movs	r6, r7
 80208c4:	0032      	movs	r2, r6
 80208c6:	9903      	ldr	r1, [sp, #12]
 80208c8:	6820      	ldr	r0, [r4, #0]
 80208ca:	f000 fb7e 	bl	8020fca <memmove>
 80208ce:	2000      	movs	r0, #0
 80208d0:	68a3      	ldr	r3, [r4, #8]
 80208d2:	1b9b      	subs	r3, r3, r6
 80208d4:	60a3      	str	r3, [r4, #8]
 80208d6:	6823      	ldr	r3, [r4, #0]
 80208d8:	199b      	adds	r3, r3, r6
 80208da:	6023      	str	r3, [r4, #0]
 80208dc:	b005      	add	sp, #20
 80208de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208e0:	002a      	movs	r2, r5
 80208e2:	9802      	ldr	r0, [sp, #8]
 80208e4:	f000 fc05 	bl	80210f2 <_realloc_r>
 80208e8:	1e06      	subs	r6, r0, #0
 80208ea:	d1e0      	bne.n	80208ae <__ssputs_r+0x62>
 80208ec:	6921      	ldr	r1, [r4, #16]
 80208ee:	9802      	ldr	r0, [sp, #8]
 80208f0:	f7fe fe62 	bl	801f5b8 <_free_r>
 80208f4:	230c      	movs	r3, #12
 80208f6:	2001      	movs	r0, #1
 80208f8:	9a02      	ldr	r2, [sp, #8]
 80208fa:	4240      	negs	r0, r0
 80208fc:	6013      	str	r3, [r2, #0]
 80208fe:	89a2      	ldrh	r2, [r4, #12]
 8020900:	3334      	adds	r3, #52	@ 0x34
 8020902:	4313      	orrs	r3, r2
 8020904:	81a3      	strh	r3, [r4, #12]
 8020906:	e7e9      	b.n	80208dc <__ssputs_r+0x90>
 8020908:	fffffb7f 	.word	0xfffffb7f

0802090c <_svfiprintf_r>:
 802090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802090e:	b0a1      	sub	sp, #132	@ 0x84
 8020910:	9003      	str	r0, [sp, #12]
 8020912:	001d      	movs	r5, r3
 8020914:	898b      	ldrh	r3, [r1, #12]
 8020916:	000f      	movs	r7, r1
 8020918:	0016      	movs	r6, r2
 802091a:	061b      	lsls	r3, r3, #24
 802091c:	d511      	bpl.n	8020942 <_svfiprintf_r+0x36>
 802091e:	690b      	ldr	r3, [r1, #16]
 8020920:	2b00      	cmp	r3, #0
 8020922:	d10e      	bne.n	8020942 <_svfiprintf_r+0x36>
 8020924:	2140      	movs	r1, #64	@ 0x40
 8020926:	f7ff fa17 	bl	801fd58 <_malloc_r>
 802092a:	6038      	str	r0, [r7, #0]
 802092c:	6138      	str	r0, [r7, #16]
 802092e:	2800      	cmp	r0, #0
 8020930:	d105      	bne.n	802093e <_svfiprintf_r+0x32>
 8020932:	230c      	movs	r3, #12
 8020934:	9a03      	ldr	r2, [sp, #12]
 8020936:	6013      	str	r3, [r2, #0]
 8020938:	2001      	movs	r0, #1
 802093a:	4240      	negs	r0, r0
 802093c:	e0cf      	b.n	8020ade <_svfiprintf_r+0x1d2>
 802093e:	2340      	movs	r3, #64	@ 0x40
 8020940:	617b      	str	r3, [r7, #20]
 8020942:	2300      	movs	r3, #0
 8020944:	ac08      	add	r4, sp, #32
 8020946:	6163      	str	r3, [r4, #20]
 8020948:	3320      	adds	r3, #32
 802094a:	7663      	strb	r3, [r4, #25]
 802094c:	3310      	adds	r3, #16
 802094e:	76a3      	strb	r3, [r4, #26]
 8020950:	9507      	str	r5, [sp, #28]
 8020952:	0035      	movs	r5, r6
 8020954:	782b      	ldrb	r3, [r5, #0]
 8020956:	2b00      	cmp	r3, #0
 8020958:	d001      	beq.n	802095e <_svfiprintf_r+0x52>
 802095a:	2b25      	cmp	r3, #37	@ 0x25
 802095c:	d148      	bne.n	80209f0 <_svfiprintf_r+0xe4>
 802095e:	1bab      	subs	r3, r5, r6
 8020960:	9305      	str	r3, [sp, #20]
 8020962:	42b5      	cmp	r5, r6
 8020964:	d00b      	beq.n	802097e <_svfiprintf_r+0x72>
 8020966:	0032      	movs	r2, r6
 8020968:	0039      	movs	r1, r7
 802096a:	9803      	ldr	r0, [sp, #12]
 802096c:	f7ff ff6e 	bl	802084c <__ssputs_r>
 8020970:	3001      	adds	r0, #1
 8020972:	d100      	bne.n	8020976 <_svfiprintf_r+0x6a>
 8020974:	e0ae      	b.n	8020ad4 <_svfiprintf_r+0x1c8>
 8020976:	6963      	ldr	r3, [r4, #20]
 8020978:	9a05      	ldr	r2, [sp, #20]
 802097a:	189b      	adds	r3, r3, r2
 802097c:	6163      	str	r3, [r4, #20]
 802097e:	782b      	ldrb	r3, [r5, #0]
 8020980:	2b00      	cmp	r3, #0
 8020982:	d100      	bne.n	8020986 <_svfiprintf_r+0x7a>
 8020984:	e0a6      	b.n	8020ad4 <_svfiprintf_r+0x1c8>
 8020986:	2201      	movs	r2, #1
 8020988:	2300      	movs	r3, #0
 802098a:	4252      	negs	r2, r2
 802098c:	6062      	str	r2, [r4, #4]
 802098e:	a904      	add	r1, sp, #16
 8020990:	3254      	adds	r2, #84	@ 0x54
 8020992:	1852      	adds	r2, r2, r1
 8020994:	1c6e      	adds	r6, r5, #1
 8020996:	6023      	str	r3, [r4, #0]
 8020998:	60e3      	str	r3, [r4, #12]
 802099a:	60a3      	str	r3, [r4, #8]
 802099c:	7013      	strb	r3, [r2, #0]
 802099e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80209a0:	4b54      	ldr	r3, [pc, #336]	@ (8020af4 <_svfiprintf_r+0x1e8>)
 80209a2:	2205      	movs	r2, #5
 80209a4:	0018      	movs	r0, r3
 80209a6:	7831      	ldrb	r1, [r6, #0]
 80209a8:	9305      	str	r3, [sp, #20]
 80209aa:	f7fd ff68 	bl	801e87e <memchr>
 80209ae:	1c75      	adds	r5, r6, #1
 80209b0:	2800      	cmp	r0, #0
 80209b2:	d11f      	bne.n	80209f4 <_svfiprintf_r+0xe8>
 80209b4:	6822      	ldr	r2, [r4, #0]
 80209b6:	06d3      	lsls	r3, r2, #27
 80209b8:	d504      	bpl.n	80209c4 <_svfiprintf_r+0xb8>
 80209ba:	2353      	movs	r3, #83	@ 0x53
 80209bc:	a904      	add	r1, sp, #16
 80209be:	185b      	adds	r3, r3, r1
 80209c0:	2120      	movs	r1, #32
 80209c2:	7019      	strb	r1, [r3, #0]
 80209c4:	0713      	lsls	r3, r2, #28
 80209c6:	d504      	bpl.n	80209d2 <_svfiprintf_r+0xc6>
 80209c8:	2353      	movs	r3, #83	@ 0x53
 80209ca:	a904      	add	r1, sp, #16
 80209cc:	185b      	adds	r3, r3, r1
 80209ce:	212b      	movs	r1, #43	@ 0x2b
 80209d0:	7019      	strb	r1, [r3, #0]
 80209d2:	7833      	ldrb	r3, [r6, #0]
 80209d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80209d6:	d016      	beq.n	8020a06 <_svfiprintf_r+0xfa>
 80209d8:	0035      	movs	r5, r6
 80209da:	2100      	movs	r1, #0
 80209dc:	200a      	movs	r0, #10
 80209de:	68e3      	ldr	r3, [r4, #12]
 80209e0:	782a      	ldrb	r2, [r5, #0]
 80209e2:	1c6e      	adds	r6, r5, #1
 80209e4:	3a30      	subs	r2, #48	@ 0x30
 80209e6:	2a09      	cmp	r2, #9
 80209e8:	d950      	bls.n	8020a8c <_svfiprintf_r+0x180>
 80209ea:	2900      	cmp	r1, #0
 80209ec:	d111      	bne.n	8020a12 <_svfiprintf_r+0x106>
 80209ee:	e017      	b.n	8020a20 <_svfiprintf_r+0x114>
 80209f0:	3501      	adds	r5, #1
 80209f2:	e7af      	b.n	8020954 <_svfiprintf_r+0x48>
 80209f4:	9b05      	ldr	r3, [sp, #20]
 80209f6:	6822      	ldr	r2, [r4, #0]
 80209f8:	1ac0      	subs	r0, r0, r3
 80209fa:	2301      	movs	r3, #1
 80209fc:	4083      	lsls	r3, r0
 80209fe:	4313      	orrs	r3, r2
 8020a00:	002e      	movs	r6, r5
 8020a02:	6023      	str	r3, [r4, #0]
 8020a04:	e7cc      	b.n	80209a0 <_svfiprintf_r+0x94>
 8020a06:	9b07      	ldr	r3, [sp, #28]
 8020a08:	1d19      	adds	r1, r3, #4
 8020a0a:	681b      	ldr	r3, [r3, #0]
 8020a0c:	9107      	str	r1, [sp, #28]
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	db01      	blt.n	8020a16 <_svfiprintf_r+0x10a>
 8020a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020a14:	e004      	b.n	8020a20 <_svfiprintf_r+0x114>
 8020a16:	425b      	negs	r3, r3
 8020a18:	60e3      	str	r3, [r4, #12]
 8020a1a:	2302      	movs	r3, #2
 8020a1c:	4313      	orrs	r3, r2
 8020a1e:	6023      	str	r3, [r4, #0]
 8020a20:	782b      	ldrb	r3, [r5, #0]
 8020a22:	2b2e      	cmp	r3, #46	@ 0x2e
 8020a24:	d10c      	bne.n	8020a40 <_svfiprintf_r+0x134>
 8020a26:	786b      	ldrb	r3, [r5, #1]
 8020a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a2a:	d134      	bne.n	8020a96 <_svfiprintf_r+0x18a>
 8020a2c:	9b07      	ldr	r3, [sp, #28]
 8020a2e:	3502      	adds	r5, #2
 8020a30:	1d1a      	adds	r2, r3, #4
 8020a32:	681b      	ldr	r3, [r3, #0]
 8020a34:	9207      	str	r2, [sp, #28]
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	da01      	bge.n	8020a3e <_svfiprintf_r+0x132>
 8020a3a:	2301      	movs	r3, #1
 8020a3c:	425b      	negs	r3, r3
 8020a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a40:	4e2d      	ldr	r6, [pc, #180]	@ (8020af8 <_svfiprintf_r+0x1ec>)
 8020a42:	2203      	movs	r2, #3
 8020a44:	0030      	movs	r0, r6
 8020a46:	7829      	ldrb	r1, [r5, #0]
 8020a48:	f7fd ff19 	bl	801e87e <memchr>
 8020a4c:	2800      	cmp	r0, #0
 8020a4e:	d006      	beq.n	8020a5e <_svfiprintf_r+0x152>
 8020a50:	2340      	movs	r3, #64	@ 0x40
 8020a52:	1b80      	subs	r0, r0, r6
 8020a54:	4083      	lsls	r3, r0
 8020a56:	6822      	ldr	r2, [r4, #0]
 8020a58:	3501      	adds	r5, #1
 8020a5a:	4313      	orrs	r3, r2
 8020a5c:	6023      	str	r3, [r4, #0]
 8020a5e:	7829      	ldrb	r1, [r5, #0]
 8020a60:	2206      	movs	r2, #6
 8020a62:	4826      	ldr	r0, [pc, #152]	@ (8020afc <_svfiprintf_r+0x1f0>)
 8020a64:	1c6e      	adds	r6, r5, #1
 8020a66:	7621      	strb	r1, [r4, #24]
 8020a68:	f7fd ff09 	bl	801e87e <memchr>
 8020a6c:	2800      	cmp	r0, #0
 8020a6e:	d038      	beq.n	8020ae2 <_svfiprintf_r+0x1d6>
 8020a70:	4b23      	ldr	r3, [pc, #140]	@ (8020b00 <_svfiprintf_r+0x1f4>)
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	d122      	bne.n	8020abc <_svfiprintf_r+0x1b0>
 8020a76:	2207      	movs	r2, #7
 8020a78:	9b07      	ldr	r3, [sp, #28]
 8020a7a:	3307      	adds	r3, #7
 8020a7c:	4393      	bics	r3, r2
 8020a7e:	3308      	adds	r3, #8
 8020a80:	9307      	str	r3, [sp, #28]
 8020a82:	6963      	ldr	r3, [r4, #20]
 8020a84:	9a04      	ldr	r2, [sp, #16]
 8020a86:	189b      	adds	r3, r3, r2
 8020a88:	6163      	str	r3, [r4, #20]
 8020a8a:	e762      	b.n	8020952 <_svfiprintf_r+0x46>
 8020a8c:	4343      	muls	r3, r0
 8020a8e:	0035      	movs	r5, r6
 8020a90:	2101      	movs	r1, #1
 8020a92:	189b      	adds	r3, r3, r2
 8020a94:	e7a4      	b.n	80209e0 <_svfiprintf_r+0xd4>
 8020a96:	2300      	movs	r3, #0
 8020a98:	200a      	movs	r0, #10
 8020a9a:	0019      	movs	r1, r3
 8020a9c:	3501      	adds	r5, #1
 8020a9e:	6063      	str	r3, [r4, #4]
 8020aa0:	782a      	ldrb	r2, [r5, #0]
 8020aa2:	1c6e      	adds	r6, r5, #1
 8020aa4:	3a30      	subs	r2, #48	@ 0x30
 8020aa6:	2a09      	cmp	r2, #9
 8020aa8:	d903      	bls.n	8020ab2 <_svfiprintf_r+0x1a6>
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d0c8      	beq.n	8020a40 <_svfiprintf_r+0x134>
 8020aae:	9109      	str	r1, [sp, #36]	@ 0x24
 8020ab0:	e7c6      	b.n	8020a40 <_svfiprintf_r+0x134>
 8020ab2:	4341      	muls	r1, r0
 8020ab4:	0035      	movs	r5, r6
 8020ab6:	2301      	movs	r3, #1
 8020ab8:	1889      	adds	r1, r1, r2
 8020aba:	e7f1      	b.n	8020aa0 <_svfiprintf_r+0x194>
 8020abc:	aa07      	add	r2, sp, #28
 8020abe:	9200      	str	r2, [sp, #0]
 8020ac0:	0021      	movs	r1, r4
 8020ac2:	003a      	movs	r2, r7
 8020ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8020b04 <_svfiprintf_r+0x1f8>)
 8020ac6:	9803      	ldr	r0, [sp, #12]
 8020ac8:	f7fc ffd4 	bl	801da74 <_printf_float>
 8020acc:	9004      	str	r0, [sp, #16]
 8020ace:	9b04      	ldr	r3, [sp, #16]
 8020ad0:	3301      	adds	r3, #1
 8020ad2:	d1d6      	bne.n	8020a82 <_svfiprintf_r+0x176>
 8020ad4:	89bb      	ldrh	r3, [r7, #12]
 8020ad6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020ad8:	065b      	lsls	r3, r3, #25
 8020ada:	d500      	bpl.n	8020ade <_svfiprintf_r+0x1d2>
 8020adc:	e72c      	b.n	8020938 <_svfiprintf_r+0x2c>
 8020ade:	b021      	add	sp, #132	@ 0x84
 8020ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ae2:	aa07      	add	r2, sp, #28
 8020ae4:	9200      	str	r2, [sp, #0]
 8020ae6:	0021      	movs	r1, r4
 8020ae8:	003a      	movs	r2, r7
 8020aea:	4b06      	ldr	r3, [pc, #24]	@ (8020b04 <_svfiprintf_r+0x1f8>)
 8020aec:	9803      	ldr	r0, [sp, #12]
 8020aee:	f7fd fa6f 	bl	801dfd0 <_printf_i>
 8020af2:	e7eb      	b.n	8020acc <_svfiprintf_r+0x1c0>
 8020af4:	08023c70 	.word	0x08023c70
 8020af8:	08023c76 	.word	0x08023c76
 8020afc:	08023c7a 	.word	0x08023c7a
 8020b00:	0801da75 	.word	0x0801da75
 8020b04:	0802084d 	.word	0x0802084d

08020b08 <__sfputc_r>:
 8020b08:	6893      	ldr	r3, [r2, #8]
 8020b0a:	b510      	push	{r4, lr}
 8020b0c:	3b01      	subs	r3, #1
 8020b0e:	6093      	str	r3, [r2, #8]
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	da04      	bge.n	8020b1e <__sfputc_r+0x16>
 8020b14:	6994      	ldr	r4, [r2, #24]
 8020b16:	42a3      	cmp	r3, r4
 8020b18:	db07      	blt.n	8020b2a <__sfputc_r+0x22>
 8020b1a:	290a      	cmp	r1, #10
 8020b1c:	d005      	beq.n	8020b2a <__sfputc_r+0x22>
 8020b1e:	6813      	ldr	r3, [r2, #0]
 8020b20:	1c58      	adds	r0, r3, #1
 8020b22:	6010      	str	r0, [r2, #0]
 8020b24:	7019      	strb	r1, [r3, #0]
 8020b26:	0008      	movs	r0, r1
 8020b28:	bd10      	pop	{r4, pc}
 8020b2a:	f7fd fd37 	bl	801e59c <__swbuf_r>
 8020b2e:	0001      	movs	r1, r0
 8020b30:	e7f9      	b.n	8020b26 <__sfputc_r+0x1e>

08020b32 <__sfputs_r>:
 8020b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b34:	0006      	movs	r6, r0
 8020b36:	000f      	movs	r7, r1
 8020b38:	0014      	movs	r4, r2
 8020b3a:	18d5      	adds	r5, r2, r3
 8020b3c:	42ac      	cmp	r4, r5
 8020b3e:	d101      	bne.n	8020b44 <__sfputs_r+0x12>
 8020b40:	2000      	movs	r0, #0
 8020b42:	e007      	b.n	8020b54 <__sfputs_r+0x22>
 8020b44:	7821      	ldrb	r1, [r4, #0]
 8020b46:	003a      	movs	r2, r7
 8020b48:	0030      	movs	r0, r6
 8020b4a:	f7ff ffdd 	bl	8020b08 <__sfputc_r>
 8020b4e:	3401      	adds	r4, #1
 8020b50:	1c43      	adds	r3, r0, #1
 8020b52:	d1f3      	bne.n	8020b3c <__sfputs_r+0xa>
 8020b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020b58 <_vfiprintf_r>:
 8020b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b5a:	b0a1      	sub	sp, #132	@ 0x84
 8020b5c:	000f      	movs	r7, r1
 8020b5e:	0015      	movs	r5, r2
 8020b60:	001e      	movs	r6, r3
 8020b62:	9003      	str	r0, [sp, #12]
 8020b64:	2800      	cmp	r0, #0
 8020b66:	d004      	beq.n	8020b72 <_vfiprintf_r+0x1a>
 8020b68:	6a03      	ldr	r3, [r0, #32]
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d101      	bne.n	8020b72 <_vfiprintf_r+0x1a>
 8020b6e:	f7fd fbcd 	bl	801e30c <__sinit>
 8020b72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020b74:	07db      	lsls	r3, r3, #31
 8020b76:	d405      	bmi.n	8020b84 <_vfiprintf_r+0x2c>
 8020b78:	89bb      	ldrh	r3, [r7, #12]
 8020b7a:	059b      	lsls	r3, r3, #22
 8020b7c:	d402      	bmi.n	8020b84 <_vfiprintf_r+0x2c>
 8020b7e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020b80:	f7fd fe7b 	bl	801e87a <__retarget_lock_acquire_recursive>
 8020b84:	89bb      	ldrh	r3, [r7, #12]
 8020b86:	071b      	lsls	r3, r3, #28
 8020b88:	d502      	bpl.n	8020b90 <_vfiprintf_r+0x38>
 8020b8a:	693b      	ldr	r3, [r7, #16]
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	d113      	bne.n	8020bb8 <_vfiprintf_r+0x60>
 8020b90:	0039      	movs	r1, r7
 8020b92:	9803      	ldr	r0, [sp, #12]
 8020b94:	f7fd fd44 	bl	801e620 <__swsetup_r>
 8020b98:	2800      	cmp	r0, #0
 8020b9a:	d00d      	beq.n	8020bb8 <_vfiprintf_r+0x60>
 8020b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020b9e:	07db      	lsls	r3, r3, #31
 8020ba0:	d503      	bpl.n	8020baa <_vfiprintf_r+0x52>
 8020ba2:	2001      	movs	r0, #1
 8020ba4:	4240      	negs	r0, r0
 8020ba6:	b021      	add	sp, #132	@ 0x84
 8020ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020baa:	89bb      	ldrh	r3, [r7, #12]
 8020bac:	059b      	lsls	r3, r3, #22
 8020bae:	d4f8      	bmi.n	8020ba2 <_vfiprintf_r+0x4a>
 8020bb0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020bb2:	f7fd fe63 	bl	801e87c <__retarget_lock_release_recursive>
 8020bb6:	e7f4      	b.n	8020ba2 <_vfiprintf_r+0x4a>
 8020bb8:	2300      	movs	r3, #0
 8020bba:	ac08      	add	r4, sp, #32
 8020bbc:	6163      	str	r3, [r4, #20]
 8020bbe:	3320      	adds	r3, #32
 8020bc0:	7663      	strb	r3, [r4, #25]
 8020bc2:	3310      	adds	r3, #16
 8020bc4:	76a3      	strb	r3, [r4, #26]
 8020bc6:	9607      	str	r6, [sp, #28]
 8020bc8:	002e      	movs	r6, r5
 8020bca:	7833      	ldrb	r3, [r6, #0]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d001      	beq.n	8020bd4 <_vfiprintf_r+0x7c>
 8020bd0:	2b25      	cmp	r3, #37	@ 0x25
 8020bd2:	d148      	bne.n	8020c66 <_vfiprintf_r+0x10e>
 8020bd4:	1b73      	subs	r3, r6, r5
 8020bd6:	9305      	str	r3, [sp, #20]
 8020bd8:	42ae      	cmp	r6, r5
 8020bda:	d00b      	beq.n	8020bf4 <_vfiprintf_r+0x9c>
 8020bdc:	002a      	movs	r2, r5
 8020bde:	0039      	movs	r1, r7
 8020be0:	9803      	ldr	r0, [sp, #12]
 8020be2:	f7ff ffa6 	bl	8020b32 <__sfputs_r>
 8020be6:	3001      	adds	r0, #1
 8020be8:	d100      	bne.n	8020bec <_vfiprintf_r+0x94>
 8020bea:	e0ae      	b.n	8020d4a <_vfiprintf_r+0x1f2>
 8020bec:	6963      	ldr	r3, [r4, #20]
 8020bee:	9a05      	ldr	r2, [sp, #20]
 8020bf0:	189b      	adds	r3, r3, r2
 8020bf2:	6163      	str	r3, [r4, #20]
 8020bf4:	7833      	ldrb	r3, [r6, #0]
 8020bf6:	2b00      	cmp	r3, #0
 8020bf8:	d100      	bne.n	8020bfc <_vfiprintf_r+0xa4>
 8020bfa:	e0a6      	b.n	8020d4a <_vfiprintf_r+0x1f2>
 8020bfc:	2201      	movs	r2, #1
 8020bfe:	2300      	movs	r3, #0
 8020c00:	4252      	negs	r2, r2
 8020c02:	6062      	str	r2, [r4, #4]
 8020c04:	a904      	add	r1, sp, #16
 8020c06:	3254      	adds	r2, #84	@ 0x54
 8020c08:	1852      	adds	r2, r2, r1
 8020c0a:	1c75      	adds	r5, r6, #1
 8020c0c:	6023      	str	r3, [r4, #0]
 8020c0e:	60e3      	str	r3, [r4, #12]
 8020c10:	60a3      	str	r3, [r4, #8]
 8020c12:	7013      	strb	r3, [r2, #0]
 8020c14:	65a3      	str	r3, [r4, #88]	@ 0x58
 8020c16:	4b59      	ldr	r3, [pc, #356]	@ (8020d7c <_vfiprintf_r+0x224>)
 8020c18:	2205      	movs	r2, #5
 8020c1a:	0018      	movs	r0, r3
 8020c1c:	7829      	ldrb	r1, [r5, #0]
 8020c1e:	9305      	str	r3, [sp, #20]
 8020c20:	f7fd fe2d 	bl	801e87e <memchr>
 8020c24:	1c6e      	adds	r6, r5, #1
 8020c26:	2800      	cmp	r0, #0
 8020c28:	d11f      	bne.n	8020c6a <_vfiprintf_r+0x112>
 8020c2a:	6822      	ldr	r2, [r4, #0]
 8020c2c:	06d3      	lsls	r3, r2, #27
 8020c2e:	d504      	bpl.n	8020c3a <_vfiprintf_r+0xe2>
 8020c30:	2353      	movs	r3, #83	@ 0x53
 8020c32:	a904      	add	r1, sp, #16
 8020c34:	185b      	adds	r3, r3, r1
 8020c36:	2120      	movs	r1, #32
 8020c38:	7019      	strb	r1, [r3, #0]
 8020c3a:	0713      	lsls	r3, r2, #28
 8020c3c:	d504      	bpl.n	8020c48 <_vfiprintf_r+0xf0>
 8020c3e:	2353      	movs	r3, #83	@ 0x53
 8020c40:	a904      	add	r1, sp, #16
 8020c42:	185b      	adds	r3, r3, r1
 8020c44:	212b      	movs	r1, #43	@ 0x2b
 8020c46:	7019      	strb	r1, [r3, #0]
 8020c48:	782b      	ldrb	r3, [r5, #0]
 8020c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8020c4c:	d016      	beq.n	8020c7c <_vfiprintf_r+0x124>
 8020c4e:	002e      	movs	r6, r5
 8020c50:	2100      	movs	r1, #0
 8020c52:	200a      	movs	r0, #10
 8020c54:	68e3      	ldr	r3, [r4, #12]
 8020c56:	7832      	ldrb	r2, [r6, #0]
 8020c58:	1c75      	adds	r5, r6, #1
 8020c5a:	3a30      	subs	r2, #48	@ 0x30
 8020c5c:	2a09      	cmp	r2, #9
 8020c5e:	d950      	bls.n	8020d02 <_vfiprintf_r+0x1aa>
 8020c60:	2900      	cmp	r1, #0
 8020c62:	d111      	bne.n	8020c88 <_vfiprintf_r+0x130>
 8020c64:	e017      	b.n	8020c96 <_vfiprintf_r+0x13e>
 8020c66:	3601      	adds	r6, #1
 8020c68:	e7af      	b.n	8020bca <_vfiprintf_r+0x72>
 8020c6a:	9b05      	ldr	r3, [sp, #20]
 8020c6c:	6822      	ldr	r2, [r4, #0]
 8020c6e:	1ac0      	subs	r0, r0, r3
 8020c70:	2301      	movs	r3, #1
 8020c72:	4083      	lsls	r3, r0
 8020c74:	4313      	orrs	r3, r2
 8020c76:	0035      	movs	r5, r6
 8020c78:	6023      	str	r3, [r4, #0]
 8020c7a:	e7cc      	b.n	8020c16 <_vfiprintf_r+0xbe>
 8020c7c:	9b07      	ldr	r3, [sp, #28]
 8020c7e:	1d19      	adds	r1, r3, #4
 8020c80:	681b      	ldr	r3, [r3, #0]
 8020c82:	9107      	str	r1, [sp, #28]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	db01      	blt.n	8020c8c <_vfiprintf_r+0x134>
 8020c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020c8a:	e004      	b.n	8020c96 <_vfiprintf_r+0x13e>
 8020c8c:	425b      	negs	r3, r3
 8020c8e:	60e3      	str	r3, [r4, #12]
 8020c90:	2302      	movs	r3, #2
 8020c92:	4313      	orrs	r3, r2
 8020c94:	6023      	str	r3, [r4, #0]
 8020c96:	7833      	ldrb	r3, [r6, #0]
 8020c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8020c9a:	d10c      	bne.n	8020cb6 <_vfiprintf_r+0x15e>
 8020c9c:	7873      	ldrb	r3, [r6, #1]
 8020c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8020ca0:	d134      	bne.n	8020d0c <_vfiprintf_r+0x1b4>
 8020ca2:	9b07      	ldr	r3, [sp, #28]
 8020ca4:	3602      	adds	r6, #2
 8020ca6:	1d1a      	adds	r2, r3, #4
 8020ca8:	681b      	ldr	r3, [r3, #0]
 8020caa:	9207      	str	r2, [sp, #28]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	da01      	bge.n	8020cb4 <_vfiprintf_r+0x15c>
 8020cb0:	2301      	movs	r3, #1
 8020cb2:	425b      	negs	r3, r3
 8020cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cb6:	4d32      	ldr	r5, [pc, #200]	@ (8020d80 <_vfiprintf_r+0x228>)
 8020cb8:	2203      	movs	r2, #3
 8020cba:	0028      	movs	r0, r5
 8020cbc:	7831      	ldrb	r1, [r6, #0]
 8020cbe:	f7fd fdde 	bl	801e87e <memchr>
 8020cc2:	2800      	cmp	r0, #0
 8020cc4:	d006      	beq.n	8020cd4 <_vfiprintf_r+0x17c>
 8020cc6:	2340      	movs	r3, #64	@ 0x40
 8020cc8:	1b40      	subs	r0, r0, r5
 8020cca:	4083      	lsls	r3, r0
 8020ccc:	6822      	ldr	r2, [r4, #0]
 8020cce:	3601      	adds	r6, #1
 8020cd0:	4313      	orrs	r3, r2
 8020cd2:	6023      	str	r3, [r4, #0]
 8020cd4:	7831      	ldrb	r1, [r6, #0]
 8020cd6:	2206      	movs	r2, #6
 8020cd8:	482a      	ldr	r0, [pc, #168]	@ (8020d84 <_vfiprintf_r+0x22c>)
 8020cda:	1c75      	adds	r5, r6, #1
 8020cdc:	7621      	strb	r1, [r4, #24]
 8020cde:	f7fd fdce 	bl	801e87e <memchr>
 8020ce2:	2800      	cmp	r0, #0
 8020ce4:	d040      	beq.n	8020d68 <_vfiprintf_r+0x210>
 8020ce6:	4b28      	ldr	r3, [pc, #160]	@ (8020d88 <_vfiprintf_r+0x230>)
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	d122      	bne.n	8020d32 <_vfiprintf_r+0x1da>
 8020cec:	2207      	movs	r2, #7
 8020cee:	9b07      	ldr	r3, [sp, #28]
 8020cf0:	3307      	adds	r3, #7
 8020cf2:	4393      	bics	r3, r2
 8020cf4:	3308      	adds	r3, #8
 8020cf6:	9307      	str	r3, [sp, #28]
 8020cf8:	6963      	ldr	r3, [r4, #20]
 8020cfa:	9a04      	ldr	r2, [sp, #16]
 8020cfc:	189b      	adds	r3, r3, r2
 8020cfe:	6163      	str	r3, [r4, #20]
 8020d00:	e762      	b.n	8020bc8 <_vfiprintf_r+0x70>
 8020d02:	4343      	muls	r3, r0
 8020d04:	002e      	movs	r6, r5
 8020d06:	2101      	movs	r1, #1
 8020d08:	189b      	adds	r3, r3, r2
 8020d0a:	e7a4      	b.n	8020c56 <_vfiprintf_r+0xfe>
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	200a      	movs	r0, #10
 8020d10:	0019      	movs	r1, r3
 8020d12:	3601      	adds	r6, #1
 8020d14:	6063      	str	r3, [r4, #4]
 8020d16:	7832      	ldrb	r2, [r6, #0]
 8020d18:	1c75      	adds	r5, r6, #1
 8020d1a:	3a30      	subs	r2, #48	@ 0x30
 8020d1c:	2a09      	cmp	r2, #9
 8020d1e:	d903      	bls.n	8020d28 <_vfiprintf_r+0x1d0>
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	d0c8      	beq.n	8020cb6 <_vfiprintf_r+0x15e>
 8020d24:	9109      	str	r1, [sp, #36]	@ 0x24
 8020d26:	e7c6      	b.n	8020cb6 <_vfiprintf_r+0x15e>
 8020d28:	4341      	muls	r1, r0
 8020d2a:	002e      	movs	r6, r5
 8020d2c:	2301      	movs	r3, #1
 8020d2e:	1889      	adds	r1, r1, r2
 8020d30:	e7f1      	b.n	8020d16 <_vfiprintf_r+0x1be>
 8020d32:	aa07      	add	r2, sp, #28
 8020d34:	9200      	str	r2, [sp, #0]
 8020d36:	0021      	movs	r1, r4
 8020d38:	003a      	movs	r2, r7
 8020d3a:	4b14      	ldr	r3, [pc, #80]	@ (8020d8c <_vfiprintf_r+0x234>)
 8020d3c:	9803      	ldr	r0, [sp, #12]
 8020d3e:	f7fc fe99 	bl	801da74 <_printf_float>
 8020d42:	9004      	str	r0, [sp, #16]
 8020d44:	9b04      	ldr	r3, [sp, #16]
 8020d46:	3301      	adds	r3, #1
 8020d48:	d1d6      	bne.n	8020cf8 <_vfiprintf_r+0x1a0>
 8020d4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020d4c:	07db      	lsls	r3, r3, #31
 8020d4e:	d405      	bmi.n	8020d5c <_vfiprintf_r+0x204>
 8020d50:	89bb      	ldrh	r3, [r7, #12]
 8020d52:	059b      	lsls	r3, r3, #22
 8020d54:	d402      	bmi.n	8020d5c <_vfiprintf_r+0x204>
 8020d56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020d58:	f7fd fd90 	bl	801e87c <__retarget_lock_release_recursive>
 8020d5c:	89bb      	ldrh	r3, [r7, #12]
 8020d5e:	065b      	lsls	r3, r3, #25
 8020d60:	d500      	bpl.n	8020d64 <_vfiprintf_r+0x20c>
 8020d62:	e71e      	b.n	8020ba2 <_vfiprintf_r+0x4a>
 8020d64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020d66:	e71e      	b.n	8020ba6 <_vfiprintf_r+0x4e>
 8020d68:	aa07      	add	r2, sp, #28
 8020d6a:	9200      	str	r2, [sp, #0]
 8020d6c:	0021      	movs	r1, r4
 8020d6e:	003a      	movs	r2, r7
 8020d70:	4b06      	ldr	r3, [pc, #24]	@ (8020d8c <_vfiprintf_r+0x234>)
 8020d72:	9803      	ldr	r0, [sp, #12]
 8020d74:	f7fd f92c 	bl	801dfd0 <_printf_i>
 8020d78:	e7e3      	b.n	8020d42 <_vfiprintf_r+0x1ea>
 8020d7a:	46c0      	nop			@ (mov r8, r8)
 8020d7c:	08023c70 	.word	0x08023c70
 8020d80:	08023c76 	.word	0x08023c76
 8020d84:	08023c7a 	.word	0x08023c7a
 8020d88:	0801da75 	.word	0x0801da75
 8020d8c:	08020b33 	.word	0x08020b33

08020d90 <__sflush_r>:
 8020d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020d92:	220c      	movs	r2, #12
 8020d94:	5e8b      	ldrsh	r3, [r1, r2]
 8020d96:	0005      	movs	r5, r0
 8020d98:	000c      	movs	r4, r1
 8020d9a:	071a      	lsls	r2, r3, #28
 8020d9c:	d456      	bmi.n	8020e4c <__sflush_r+0xbc>
 8020d9e:	684a      	ldr	r2, [r1, #4]
 8020da0:	2a00      	cmp	r2, #0
 8020da2:	dc02      	bgt.n	8020daa <__sflush_r+0x1a>
 8020da4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8020da6:	2a00      	cmp	r2, #0
 8020da8:	dd4e      	ble.n	8020e48 <__sflush_r+0xb8>
 8020daa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8020dac:	2f00      	cmp	r7, #0
 8020dae:	d04b      	beq.n	8020e48 <__sflush_r+0xb8>
 8020db0:	2200      	movs	r2, #0
 8020db2:	2080      	movs	r0, #128	@ 0x80
 8020db4:	682e      	ldr	r6, [r5, #0]
 8020db6:	602a      	str	r2, [r5, #0]
 8020db8:	001a      	movs	r2, r3
 8020dba:	0140      	lsls	r0, r0, #5
 8020dbc:	6a21      	ldr	r1, [r4, #32]
 8020dbe:	4002      	ands	r2, r0
 8020dc0:	4203      	tst	r3, r0
 8020dc2:	d033      	beq.n	8020e2c <__sflush_r+0x9c>
 8020dc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020dc6:	89a3      	ldrh	r3, [r4, #12]
 8020dc8:	075b      	lsls	r3, r3, #29
 8020dca:	d506      	bpl.n	8020dda <__sflush_r+0x4a>
 8020dcc:	6863      	ldr	r3, [r4, #4]
 8020dce:	1ad2      	subs	r2, r2, r3
 8020dd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d001      	beq.n	8020dda <__sflush_r+0x4a>
 8020dd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020dd8:	1ad2      	subs	r2, r2, r3
 8020dda:	2300      	movs	r3, #0
 8020ddc:	0028      	movs	r0, r5
 8020dde:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8020de0:	6a21      	ldr	r1, [r4, #32]
 8020de2:	47b8      	blx	r7
 8020de4:	89a2      	ldrh	r2, [r4, #12]
 8020de6:	1c43      	adds	r3, r0, #1
 8020de8:	d106      	bne.n	8020df8 <__sflush_r+0x68>
 8020dea:	6829      	ldr	r1, [r5, #0]
 8020dec:	291d      	cmp	r1, #29
 8020dee:	d846      	bhi.n	8020e7e <__sflush_r+0xee>
 8020df0:	4b29      	ldr	r3, [pc, #164]	@ (8020e98 <__sflush_r+0x108>)
 8020df2:	410b      	asrs	r3, r1
 8020df4:	07db      	lsls	r3, r3, #31
 8020df6:	d442      	bmi.n	8020e7e <__sflush_r+0xee>
 8020df8:	2300      	movs	r3, #0
 8020dfa:	6063      	str	r3, [r4, #4]
 8020dfc:	6923      	ldr	r3, [r4, #16]
 8020dfe:	6023      	str	r3, [r4, #0]
 8020e00:	04d2      	lsls	r2, r2, #19
 8020e02:	d505      	bpl.n	8020e10 <__sflush_r+0x80>
 8020e04:	1c43      	adds	r3, r0, #1
 8020e06:	d102      	bne.n	8020e0e <__sflush_r+0x7e>
 8020e08:	682b      	ldr	r3, [r5, #0]
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d100      	bne.n	8020e10 <__sflush_r+0x80>
 8020e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8020e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020e12:	602e      	str	r6, [r5, #0]
 8020e14:	2900      	cmp	r1, #0
 8020e16:	d017      	beq.n	8020e48 <__sflush_r+0xb8>
 8020e18:	0023      	movs	r3, r4
 8020e1a:	3344      	adds	r3, #68	@ 0x44
 8020e1c:	4299      	cmp	r1, r3
 8020e1e:	d002      	beq.n	8020e26 <__sflush_r+0x96>
 8020e20:	0028      	movs	r0, r5
 8020e22:	f7fe fbc9 	bl	801f5b8 <_free_r>
 8020e26:	2300      	movs	r3, #0
 8020e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8020e2a:	e00d      	b.n	8020e48 <__sflush_r+0xb8>
 8020e2c:	2301      	movs	r3, #1
 8020e2e:	0028      	movs	r0, r5
 8020e30:	47b8      	blx	r7
 8020e32:	0002      	movs	r2, r0
 8020e34:	1c43      	adds	r3, r0, #1
 8020e36:	d1c6      	bne.n	8020dc6 <__sflush_r+0x36>
 8020e38:	682b      	ldr	r3, [r5, #0]
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d0c3      	beq.n	8020dc6 <__sflush_r+0x36>
 8020e3e:	2b1d      	cmp	r3, #29
 8020e40:	d001      	beq.n	8020e46 <__sflush_r+0xb6>
 8020e42:	2b16      	cmp	r3, #22
 8020e44:	d11a      	bne.n	8020e7c <__sflush_r+0xec>
 8020e46:	602e      	str	r6, [r5, #0]
 8020e48:	2000      	movs	r0, #0
 8020e4a:	e01e      	b.n	8020e8a <__sflush_r+0xfa>
 8020e4c:	690e      	ldr	r6, [r1, #16]
 8020e4e:	2e00      	cmp	r6, #0
 8020e50:	d0fa      	beq.n	8020e48 <__sflush_r+0xb8>
 8020e52:	680f      	ldr	r7, [r1, #0]
 8020e54:	600e      	str	r6, [r1, #0]
 8020e56:	1bba      	subs	r2, r7, r6
 8020e58:	9201      	str	r2, [sp, #4]
 8020e5a:	2200      	movs	r2, #0
 8020e5c:	079b      	lsls	r3, r3, #30
 8020e5e:	d100      	bne.n	8020e62 <__sflush_r+0xd2>
 8020e60:	694a      	ldr	r2, [r1, #20]
 8020e62:	60a2      	str	r2, [r4, #8]
 8020e64:	9b01      	ldr	r3, [sp, #4]
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	ddee      	ble.n	8020e48 <__sflush_r+0xb8>
 8020e6a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020e6c:	0032      	movs	r2, r6
 8020e6e:	001f      	movs	r7, r3
 8020e70:	0028      	movs	r0, r5
 8020e72:	9b01      	ldr	r3, [sp, #4]
 8020e74:	6a21      	ldr	r1, [r4, #32]
 8020e76:	47b8      	blx	r7
 8020e78:	2800      	cmp	r0, #0
 8020e7a:	dc07      	bgt.n	8020e8c <__sflush_r+0xfc>
 8020e7c:	89a2      	ldrh	r2, [r4, #12]
 8020e7e:	2340      	movs	r3, #64	@ 0x40
 8020e80:	2001      	movs	r0, #1
 8020e82:	4313      	orrs	r3, r2
 8020e84:	b21b      	sxth	r3, r3
 8020e86:	81a3      	strh	r3, [r4, #12]
 8020e88:	4240      	negs	r0, r0
 8020e8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020e8c:	9b01      	ldr	r3, [sp, #4]
 8020e8e:	1836      	adds	r6, r6, r0
 8020e90:	1a1b      	subs	r3, r3, r0
 8020e92:	9301      	str	r3, [sp, #4]
 8020e94:	e7e6      	b.n	8020e64 <__sflush_r+0xd4>
 8020e96:	46c0      	nop			@ (mov r8, r8)
 8020e98:	dfbffffe 	.word	0xdfbffffe

08020e9c <_fflush_r>:
 8020e9c:	690b      	ldr	r3, [r1, #16]
 8020e9e:	b570      	push	{r4, r5, r6, lr}
 8020ea0:	0005      	movs	r5, r0
 8020ea2:	000c      	movs	r4, r1
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d102      	bne.n	8020eae <_fflush_r+0x12>
 8020ea8:	2500      	movs	r5, #0
 8020eaa:	0028      	movs	r0, r5
 8020eac:	bd70      	pop	{r4, r5, r6, pc}
 8020eae:	2800      	cmp	r0, #0
 8020eb0:	d004      	beq.n	8020ebc <_fflush_r+0x20>
 8020eb2:	6a03      	ldr	r3, [r0, #32]
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d101      	bne.n	8020ebc <_fflush_r+0x20>
 8020eb8:	f7fd fa28 	bl	801e30c <__sinit>
 8020ebc:	220c      	movs	r2, #12
 8020ebe:	5ea3      	ldrsh	r3, [r4, r2]
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	d0f1      	beq.n	8020ea8 <_fflush_r+0xc>
 8020ec4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020ec6:	07d2      	lsls	r2, r2, #31
 8020ec8:	d404      	bmi.n	8020ed4 <_fflush_r+0x38>
 8020eca:	059b      	lsls	r3, r3, #22
 8020ecc:	d402      	bmi.n	8020ed4 <_fflush_r+0x38>
 8020ece:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020ed0:	f7fd fcd3 	bl	801e87a <__retarget_lock_acquire_recursive>
 8020ed4:	0028      	movs	r0, r5
 8020ed6:	0021      	movs	r1, r4
 8020ed8:	f7ff ff5a 	bl	8020d90 <__sflush_r>
 8020edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020ede:	0005      	movs	r5, r0
 8020ee0:	07db      	lsls	r3, r3, #31
 8020ee2:	d4e2      	bmi.n	8020eaa <_fflush_r+0xe>
 8020ee4:	89a3      	ldrh	r3, [r4, #12]
 8020ee6:	059b      	lsls	r3, r3, #22
 8020ee8:	d4df      	bmi.n	8020eaa <_fflush_r+0xe>
 8020eea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020eec:	f7fd fcc6 	bl	801e87c <__retarget_lock_release_recursive>
 8020ef0:	e7db      	b.n	8020eaa <_fflush_r+0xe>
	...

08020ef4 <__swhatbuf_r>:
 8020ef4:	b570      	push	{r4, r5, r6, lr}
 8020ef6:	000e      	movs	r6, r1
 8020ef8:	001d      	movs	r5, r3
 8020efa:	230e      	movs	r3, #14
 8020efc:	5ec9      	ldrsh	r1, [r1, r3]
 8020efe:	0014      	movs	r4, r2
 8020f00:	b096      	sub	sp, #88	@ 0x58
 8020f02:	2900      	cmp	r1, #0
 8020f04:	da0c      	bge.n	8020f20 <__swhatbuf_r+0x2c>
 8020f06:	89b2      	ldrh	r2, [r6, #12]
 8020f08:	2380      	movs	r3, #128	@ 0x80
 8020f0a:	0011      	movs	r1, r2
 8020f0c:	4019      	ands	r1, r3
 8020f0e:	421a      	tst	r2, r3
 8020f10:	d114      	bne.n	8020f3c <__swhatbuf_r+0x48>
 8020f12:	2380      	movs	r3, #128	@ 0x80
 8020f14:	00db      	lsls	r3, r3, #3
 8020f16:	2000      	movs	r0, #0
 8020f18:	6029      	str	r1, [r5, #0]
 8020f1a:	6023      	str	r3, [r4, #0]
 8020f1c:	b016      	add	sp, #88	@ 0x58
 8020f1e:	bd70      	pop	{r4, r5, r6, pc}
 8020f20:	466a      	mov	r2, sp
 8020f22:	f000 f865 	bl	8020ff0 <_fstat_r>
 8020f26:	2800      	cmp	r0, #0
 8020f28:	dbed      	blt.n	8020f06 <__swhatbuf_r+0x12>
 8020f2a:	23f0      	movs	r3, #240	@ 0xf0
 8020f2c:	9901      	ldr	r1, [sp, #4]
 8020f2e:	021b      	lsls	r3, r3, #8
 8020f30:	4019      	ands	r1, r3
 8020f32:	4b04      	ldr	r3, [pc, #16]	@ (8020f44 <__swhatbuf_r+0x50>)
 8020f34:	18c9      	adds	r1, r1, r3
 8020f36:	424b      	negs	r3, r1
 8020f38:	4159      	adcs	r1, r3
 8020f3a:	e7ea      	b.n	8020f12 <__swhatbuf_r+0x1e>
 8020f3c:	2100      	movs	r1, #0
 8020f3e:	2340      	movs	r3, #64	@ 0x40
 8020f40:	e7e9      	b.n	8020f16 <__swhatbuf_r+0x22>
 8020f42:	46c0      	nop			@ (mov r8, r8)
 8020f44:	ffffe000 	.word	0xffffe000

08020f48 <__smakebuf_r>:
 8020f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f4a:	2602      	movs	r6, #2
 8020f4c:	898b      	ldrh	r3, [r1, #12]
 8020f4e:	0005      	movs	r5, r0
 8020f50:	000c      	movs	r4, r1
 8020f52:	b085      	sub	sp, #20
 8020f54:	4233      	tst	r3, r6
 8020f56:	d007      	beq.n	8020f68 <__smakebuf_r+0x20>
 8020f58:	0023      	movs	r3, r4
 8020f5a:	3347      	adds	r3, #71	@ 0x47
 8020f5c:	6023      	str	r3, [r4, #0]
 8020f5e:	6123      	str	r3, [r4, #16]
 8020f60:	2301      	movs	r3, #1
 8020f62:	6163      	str	r3, [r4, #20]
 8020f64:	b005      	add	sp, #20
 8020f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f68:	ab03      	add	r3, sp, #12
 8020f6a:	aa02      	add	r2, sp, #8
 8020f6c:	f7ff ffc2 	bl	8020ef4 <__swhatbuf_r>
 8020f70:	9f02      	ldr	r7, [sp, #8]
 8020f72:	9001      	str	r0, [sp, #4]
 8020f74:	0039      	movs	r1, r7
 8020f76:	0028      	movs	r0, r5
 8020f78:	f7fe feee 	bl	801fd58 <_malloc_r>
 8020f7c:	2800      	cmp	r0, #0
 8020f7e:	d108      	bne.n	8020f92 <__smakebuf_r+0x4a>
 8020f80:	220c      	movs	r2, #12
 8020f82:	5ea3      	ldrsh	r3, [r4, r2]
 8020f84:	059a      	lsls	r2, r3, #22
 8020f86:	d4ed      	bmi.n	8020f64 <__smakebuf_r+0x1c>
 8020f88:	2203      	movs	r2, #3
 8020f8a:	4393      	bics	r3, r2
 8020f8c:	431e      	orrs	r6, r3
 8020f8e:	81a6      	strh	r6, [r4, #12]
 8020f90:	e7e2      	b.n	8020f58 <__smakebuf_r+0x10>
 8020f92:	2380      	movs	r3, #128	@ 0x80
 8020f94:	89a2      	ldrh	r2, [r4, #12]
 8020f96:	6020      	str	r0, [r4, #0]
 8020f98:	4313      	orrs	r3, r2
 8020f9a:	81a3      	strh	r3, [r4, #12]
 8020f9c:	9b03      	ldr	r3, [sp, #12]
 8020f9e:	6120      	str	r0, [r4, #16]
 8020fa0:	6167      	str	r7, [r4, #20]
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d00c      	beq.n	8020fc0 <__smakebuf_r+0x78>
 8020fa6:	0028      	movs	r0, r5
 8020fa8:	230e      	movs	r3, #14
 8020faa:	5ee1      	ldrsh	r1, [r4, r3]
 8020fac:	f000 f832 	bl	8021014 <_isatty_r>
 8020fb0:	2800      	cmp	r0, #0
 8020fb2:	d005      	beq.n	8020fc0 <__smakebuf_r+0x78>
 8020fb4:	2303      	movs	r3, #3
 8020fb6:	89a2      	ldrh	r2, [r4, #12]
 8020fb8:	439a      	bics	r2, r3
 8020fba:	3b02      	subs	r3, #2
 8020fbc:	4313      	orrs	r3, r2
 8020fbe:	81a3      	strh	r3, [r4, #12]
 8020fc0:	89a3      	ldrh	r3, [r4, #12]
 8020fc2:	9a01      	ldr	r2, [sp, #4]
 8020fc4:	4313      	orrs	r3, r2
 8020fc6:	81a3      	strh	r3, [r4, #12]
 8020fc8:	e7cc      	b.n	8020f64 <__smakebuf_r+0x1c>

08020fca <memmove>:
 8020fca:	b510      	push	{r4, lr}
 8020fcc:	4288      	cmp	r0, r1
 8020fce:	d806      	bhi.n	8020fde <memmove+0x14>
 8020fd0:	2300      	movs	r3, #0
 8020fd2:	429a      	cmp	r2, r3
 8020fd4:	d008      	beq.n	8020fe8 <memmove+0x1e>
 8020fd6:	5ccc      	ldrb	r4, [r1, r3]
 8020fd8:	54c4      	strb	r4, [r0, r3]
 8020fda:	3301      	adds	r3, #1
 8020fdc:	e7f9      	b.n	8020fd2 <memmove+0x8>
 8020fde:	188b      	adds	r3, r1, r2
 8020fe0:	4298      	cmp	r0, r3
 8020fe2:	d2f5      	bcs.n	8020fd0 <memmove+0x6>
 8020fe4:	3a01      	subs	r2, #1
 8020fe6:	d200      	bcs.n	8020fea <memmove+0x20>
 8020fe8:	bd10      	pop	{r4, pc}
 8020fea:	5c8b      	ldrb	r3, [r1, r2]
 8020fec:	5483      	strb	r3, [r0, r2]
 8020fee:	e7f9      	b.n	8020fe4 <memmove+0x1a>

08020ff0 <_fstat_r>:
 8020ff0:	2300      	movs	r3, #0
 8020ff2:	b570      	push	{r4, r5, r6, lr}
 8020ff4:	4d06      	ldr	r5, [pc, #24]	@ (8021010 <_fstat_r+0x20>)
 8020ff6:	0004      	movs	r4, r0
 8020ff8:	0008      	movs	r0, r1
 8020ffa:	0011      	movs	r1, r2
 8020ffc:	602b      	str	r3, [r5, #0]
 8020ffe:	f7eb fae5 	bl	800c5cc <_fstat>
 8021002:	1c43      	adds	r3, r0, #1
 8021004:	d103      	bne.n	802100e <_fstat_r+0x1e>
 8021006:	682b      	ldr	r3, [r5, #0]
 8021008:	2b00      	cmp	r3, #0
 802100a:	d000      	beq.n	802100e <_fstat_r+0x1e>
 802100c:	6023      	str	r3, [r4, #0]
 802100e:	bd70      	pop	{r4, r5, r6, pc}
 8021010:	200038f4 	.word	0x200038f4

08021014 <_isatty_r>:
 8021014:	2300      	movs	r3, #0
 8021016:	b570      	push	{r4, r5, r6, lr}
 8021018:	4d06      	ldr	r5, [pc, #24]	@ (8021034 <_isatty_r+0x20>)
 802101a:	0004      	movs	r4, r0
 802101c:	0008      	movs	r0, r1
 802101e:	602b      	str	r3, [r5, #0]
 8021020:	f7eb fae2 	bl	800c5e8 <_isatty>
 8021024:	1c43      	adds	r3, r0, #1
 8021026:	d103      	bne.n	8021030 <_isatty_r+0x1c>
 8021028:	682b      	ldr	r3, [r5, #0]
 802102a:	2b00      	cmp	r3, #0
 802102c:	d000      	beq.n	8021030 <_isatty_r+0x1c>
 802102e:	6023      	str	r3, [r4, #0]
 8021030:	bd70      	pop	{r4, r5, r6, pc}
 8021032:	46c0      	nop			@ (mov r8, r8)
 8021034:	200038f4 	.word	0x200038f4

08021038 <_sbrk_r>:
 8021038:	2300      	movs	r3, #0
 802103a:	b570      	push	{r4, r5, r6, lr}
 802103c:	4d06      	ldr	r5, [pc, #24]	@ (8021058 <_sbrk_r+0x20>)
 802103e:	0004      	movs	r4, r0
 8021040:	0008      	movs	r0, r1
 8021042:	602b      	str	r3, [r5, #0]
 8021044:	f7eb fae4 	bl	800c610 <_sbrk>
 8021048:	1c43      	adds	r3, r0, #1
 802104a:	d103      	bne.n	8021054 <_sbrk_r+0x1c>
 802104c:	682b      	ldr	r3, [r5, #0]
 802104e:	2b00      	cmp	r3, #0
 8021050:	d000      	beq.n	8021054 <_sbrk_r+0x1c>
 8021052:	6023      	str	r3, [r4, #0]
 8021054:	bd70      	pop	{r4, r5, r6, pc}
 8021056:	46c0      	nop			@ (mov r8, r8)
 8021058:	200038f4 	.word	0x200038f4

0802105c <__assert_func>:
 802105c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802105e:	0014      	movs	r4, r2
 8021060:	001a      	movs	r2, r3
 8021062:	4b09      	ldr	r3, [pc, #36]	@ (8021088 <__assert_func+0x2c>)
 8021064:	0005      	movs	r5, r0
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	000e      	movs	r6, r1
 802106a:	68d8      	ldr	r0, [r3, #12]
 802106c:	4b07      	ldr	r3, [pc, #28]	@ (802108c <__assert_func+0x30>)
 802106e:	2c00      	cmp	r4, #0
 8021070:	d101      	bne.n	8021076 <__assert_func+0x1a>
 8021072:	4b07      	ldr	r3, [pc, #28]	@ (8021090 <__assert_func+0x34>)
 8021074:	001c      	movs	r4, r3
 8021076:	4907      	ldr	r1, [pc, #28]	@ (8021094 <__assert_func+0x38>)
 8021078:	9301      	str	r3, [sp, #4]
 802107a:	9402      	str	r4, [sp, #8]
 802107c:	002b      	movs	r3, r5
 802107e:	9600      	str	r6, [sp, #0]
 8021080:	f000 f866 	bl	8021150 <fiprintf>
 8021084:	f000 f874 	bl	8021170 <abort>
 8021088:	200003cc 	.word	0x200003cc
 802108c:	08023c81 	.word	0x08023c81
 8021090:	08023cbc 	.word	0x08023cbc
 8021094:	08023c8e 	.word	0x08023c8e

08021098 <_calloc_r>:
 8021098:	b570      	push	{r4, r5, r6, lr}
 802109a:	0c0b      	lsrs	r3, r1, #16
 802109c:	0c15      	lsrs	r5, r2, #16
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d11e      	bne.n	80210e0 <_calloc_r+0x48>
 80210a2:	2d00      	cmp	r5, #0
 80210a4:	d10c      	bne.n	80210c0 <_calloc_r+0x28>
 80210a6:	b289      	uxth	r1, r1
 80210a8:	b294      	uxth	r4, r2
 80210aa:	434c      	muls	r4, r1
 80210ac:	0021      	movs	r1, r4
 80210ae:	f7fe fe53 	bl	801fd58 <_malloc_r>
 80210b2:	1e05      	subs	r5, r0, #0
 80210b4:	d01a      	beq.n	80210ec <_calloc_r+0x54>
 80210b6:	0022      	movs	r2, r4
 80210b8:	2100      	movs	r1, #0
 80210ba:	f7fd fb0f 	bl	801e6dc <memset>
 80210be:	e016      	b.n	80210ee <_calloc_r+0x56>
 80210c0:	1c2b      	adds	r3, r5, #0
 80210c2:	1c0c      	adds	r4, r1, #0
 80210c4:	b289      	uxth	r1, r1
 80210c6:	b292      	uxth	r2, r2
 80210c8:	434a      	muls	r2, r1
 80210ca:	b29b      	uxth	r3, r3
 80210cc:	b2a1      	uxth	r1, r4
 80210ce:	4359      	muls	r1, r3
 80210d0:	0c14      	lsrs	r4, r2, #16
 80210d2:	190c      	adds	r4, r1, r4
 80210d4:	0c23      	lsrs	r3, r4, #16
 80210d6:	d107      	bne.n	80210e8 <_calloc_r+0x50>
 80210d8:	0424      	lsls	r4, r4, #16
 80210da:	b292      	uxth	r2, r2
 80210dc:	4314      	orrs	r4, r2
 80210de:	e7e5      	b.n	80210ac <_calloc_r+0x14>
 80210e0:	2d00      	cmp	r5, #0
 80210e2:	d101      	bne.n	80210e8 <_calloc_r+0x50>
 80210e4:	1c14      	adds	r4, r2, #0
 80210e6:	e7ed      	b.n	80210c4 <_calloc_r+0x2c>
 80210e8:	230c      	movs	r3, #12
 80210ea:	6003      	str	r3, [r0, #0]
 80210ec:	2500      	movs	r5, #0
 80210ee:	0028      	movs	r0, r5
 80210f0:	bd70      	pop	{r4, r5, r6, pc}

080210f2 <_realloc_r>:
 80210f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80210f4:	0006      	movs	r6, r0
 80210f6:	000c      	movs	r4, r1
 80210f8:	0015      	movs	r5, r2
 80210fa:	2900      	cmp	r1, #0
 80210fc:	d105      	bne.n	802110a <_realloc_r+0x18>
 80210fe:	0011      	movs	r1, r2
 8021100:	f7fe fe2a 	bl	801fd58 <_malloc_r>
 8021104:	0004      	movs	r4, r0
 8021106:	0020      	movs	r0, r4
 8021108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802110a:	2a00      	cmp	r2, #0
 802110c:	d103      	bne.n	8021116 <_realloc_r+0x24>
 802110e:	f7fe fa53 	bl	801f5b8 <_free_r>
 8021112:	2400      	movs	r4, #0
 8021114:	e7f7      	b.n	8021106 <_realloc_r+0x14>
 8021116:	f000 f832 	bl	802117e <_malloc_usable_size_r>
 802111a:	0007      	movs	r7, r0
 802111c:	4285      	cmp	r5, r0
 802111e:	d802      	bhi.n	8021126 <_realloc_r+0x34>
 8021120:	0843      	lsrs	r3, r0, #1
 8021122:	42ab      	cmp	r3, r5
 8021124:	d3ef      	bcc.n	8021106 <_realloc_r+0x14>
 8021126:	0029      	movs	r1, r5
 8021128:	0030      	movs	r0, r6
 802112a:	f7fe fe15 	bl	801fd58 <_malloc_r>
 802112e:	9001      	str	r0, [sp, #4]
 8021130:	2800      	cmp	r0, #0
 8021132:	d0ee      	beq.n	8021112 <_realloc_r+0x20>
 8021134:	002a      	movs	r2, r5
 8021136:	42bd      	cmp	r5, r7
 8021138:	d900      	bls.n	802113c <_realloc_r+0x4a>
 802113a:	003a      	movs	r2, r7
 802113c:	0021      	movs	r1, r4
 802113e:	9801      	ldr	r0, [sp, #4]
 8021140:	f7fd fba8 	bl	801e894 <memcpy>
 8021144:	0021      	movs	r1, r4
 8021146:	0030      	movs	r0, r6
 8021148:	f7fe fa36 	bl	801f5b8 <_free_r>
 802114c:	9c01      	ldr	r4, [sp, #4]
 802114e:	e7da      	b.n	8021106 <_realloc_r+0x14>

08021150 <fiprintf>:
 8021150:	b40e      	push	{r1, r2, r3}
 8021152:	b517      	push	{r0, r1, r2, r4, lr}
 8021154:	4c05      	ldr	r4, [pc, #20]	@ (802116c <fiprintf+0x1c>)
 8021156:	ab05      	add	r3, sp, #20
 8021158:	cb04      	ldmia	r3!, {r2}
 802115a:	0001      	movs	r1, r0
 802115c:	6820      	ldr	r0, [r4, #0]
 802115e:	9301      	str	r3, [sp, #4]
 8021160:	f7ff fcfa 	bl	8020b58 <_vfiprintf_r>
 8021164:	bc1e      	pop	{r1, r2, r3, r4}
 8021166:	bc08      	pop	{r3}
 8021168:	b003      	add	sp, #12
 802116a:	4718      	bx	r3
 802116c:	200003cc 	.word	0x200003cc

08021170 <abort>:
 8021170:	2006      	movs	r0, #6
 8021172:	b510      	push	{r4, lr}
 8021174:	f000 f834 	bl	80211e0 <raise>
 8021178:	2001      	movs	r0, #1
 802117a:	f7eb f9f3 	bl	800c564 <_exit>

0802117e <_malloc_usable_size_r>:
 802117e:	1f0b      	subs	r3, r1, #4
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	1f18      	subs	r0, r3, #4
 8021184:	2b00      	cmp	r3, #0
 8021186:	da01      	bge.n	802118c <_malloc_usable_size_r+0xe>
 8021188:	580b      	ldr	r3, [r1, r0]
 802118a:	18c0      	adds	r0, r0, r3
 802118c:	4770      	bx	lr

0802118e <_raise_r>:
 802118e:	b570      	push	{r4, r5, r6, lr}
 8021190:	0004      	movs	r4, r0
 8021192:	000d      	movs	r5, r1
 8021194:	291f      	cmp	r1, #31
 8021196:	d904      	bls.n	80211a2 <_raise_r+0x14>
 8021198:	2316      	movs	r3, #22
 802119a:	6003      	str	r3, [r0, #0]
 802119c:	2001      	movs	r0, #1
 802119e:	4240      	negs	r0, r0
 80211a0:	bd70      	pop	{r4, r5, r6, pc}
 80211a2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	d004      	beq.n	80211b2 <_raise_r+0x24>
 80211a8:	008a      	lsls	r2, r1, #2
 80211aa:	189b      	adds	r3, r3, r2
 80211ac:	681a      	ldr	r2, [r3, #0]
 80211ae:	2a00      	cmp	r2, #0
 80211b0:	d108      	bne.n	80211c4 <_raise_r+0x36>
 80211b2:	0020      	movs	r0, r4
 80211b4:	f000 f830 	bl	8021218 <_getpid_r>
 80211b8:	002a      	movs	r2, r5
 80211ba:	0001      	movs	r1, r0
 80211bc:	0020      	movs	r0, r4
 80211be:	f000 f819 	bl	80211f4 <_kill_r>
 80211c2:	e7ed      	b.n	80211a0 <_raise_r+0x12>
 80211c4:	2a01      	cmp	r2, #1
 80211c6:	d009      	beq.n	80211dc <_raise_r+0x4e>
 80211c8:	1c51      	adds	r1, r2, #1
 80211ca:	d103      	bne.n	80211d4 <_raise_r+0x46>
 80211cc:	2316      	movs	r3, #22
 80211ce:	6003      	str	r3, [r0, #0]
 80211d0:	2001      	movs	r0, #1
 80211d2:	e7e5      	b.n	80211a0 <_raise_r+0x12>
 80211d4:	2100      	movs	r1, #0
 80211d6:	0028      	movs	r0, r5
 80211d8:	6019      	str	r1, [r3, #0]
 80211da:	4790      	blx	r2
 80211dc:	2000      	movs	r0, #0
 80211de:	e7df      	b.n	80211a0 <_raise_r+0x12>

080211e0 <raise>:
 80211e0:	b510      	push	{r4, lr}
 80211e2:	4b03      	ldr	r3, [pc, #12]	@ (80211f0 <raise+0x10>)
 80211e4:	0001      	movs	r1, r0
 80211e6:	6818      	ldr	r0, [r3, #0]
 80211e8:	f7ff ffd1 	bl	802118e <_raise_r>
 80211ec:	bd10      	pop	{r4, pc}
 80211ee:	46c0      	nop			@ (mov r8, r8)
 80211f0:	200003cc 	.word	0x200003cc

080211f4 <_kill_r>:
 80211f4:	2300      	movs	r3, #0
 80211f6:	b570      	push	{r4, r5, r6, lr}
 80211f8:	4d06      	ldr	r5, [pc, #24]	@ (8021214 <_kill_r+0x20>)
 80211fa:	0004      	movs	r4, r0
 80211fc:	0008      	movs	r0, r1
 80211fe:	0011      	movs	r1, r2
 8021200:	602b      	str	r3, [r5, #0]
 8021202:	f7eb f99f 	bl	800c544 <_kill>
 8021206:	1c43      	adds	r3, r0, #1
 8021208:	d103      	bne.n	8021212 <_kill_r+0x1e>
 802120a:	682b      	ldr	r3, [r5, #0]
 802120c:	2b00      	cmp	r3, #0
 802120e:	d000      	beq.n	8021212 <_kill_r+0x1e>
 8021210:	6023      	str	r3, [r4, #0]
 8021212:	bd70      	pop	{r4, r5, r6, pc}
 8021214:	200038f4 	.word	0x200038f4

08021218 <_getpid_r>:
 8021218:	b510      	push	{r4, lr}
 802121a:	f7eb f98d 	bl	800c538 <_getpid>
 802121e:	bd10      	pop	{r4, pc}

08021220 <expf>:
 8021220:	b570      	push	{r4, r5, r6, lr}
 8021222:	1c04      	adds	r4, r0, #0
 8021224:	f000 f8e6 	bl	80213f4 <__ieee754_expf>
 8021228:	1c05      	adds	r5, r0, #0
 802122a:	1c20      	adds	r0, r4, #0
 802122c:	f000 f83c 	bl	80212a8 <finitef>
 8021230:	2800      	cmp	r0, #0
 8021232:	d00b      	beq.n	802124c <expf+0x2c>
 8021234:	490c      	ldr	r1, [pc, #48]	@ (8021268 <expf+0x48>)
 8021236:	1c20      	adds	r0, r4, #0
 8021238:	f7df f98e 	bl	8000558 <__aeabi_fcmpgt>
 802123c:	2800      	cmp	r0, #0
 802123e:	d007      	beq.n	8021250 <expf+0x30>
 8021240:	f7fd faf0 	bl	801e824 <__errno>
 8021244:	25ff      	movs	r5, #255	@ 0xff
 8021246:	2322      	movs	r3, #34	@ 0x22
 8021248:	05ed      	lsls	r5, r5, #23
 802124a:	6003      	str	r3, [r0, #0]
 802124c:	1c28      	adds	r0, r5, #0
 802124e:	bd70      	pop	{r4, r5, r6, pc}
 8021250:	4906      	ldr	r1, [pc, #24]	@ (802126c <expf+0x4c>)
 8021252:	1c20      	adds	r0, r4, #0
 8021254:	f7df f96c 	bl	8000530 <__aeabi_fcmplt>
 8021258:	2800      	cmp	r0, #0
 802125a:	d0f7      	beq.n	802124c <expf+0x2c>
 802125c:	f7fd fae2 	bl	801e824 <__errno>
 8021260:	2322      	movs	r3, #34	@ 0x22
 8021262:	2500      	movs	r5, #0
 8021264:	6003      	str	r3, [r0, #0]
 8021266:	e7f1      	b.n	802124c <expf+0x2c>
 8021268:	42b17217 	.word	0x42b17217
 802126c:	c2cff1b5 	.word	0xc2cff1b5

08021270 <sqrtf>:
 8021270:	b570      	push	{r4, r5, r6, lr}
 8021272:	1c05      	adds	r5, r0, #0
 8021274:	f000 f822 	bl	80212bc <__ieee754_sqrtf>
 8021278:	1c29      	adds	r1, r5, #0
 802127a:	1c04      	adds	r4, r0, #0
 802127c:	1c28      	adds	r0, r5, #0
 802127e:	f7e0 f971 	bl	8001564 <__aeabi_fcmpun>
 8021282:	2800      	cmp	r0, #0
 8021284:	d10e      	bne.n	80212a4 <sqrtf+0x34>
 8021286:	2100      	movs	r1, #0
 8021288:	1c28      	adds	r0, r5, #0
 802128a:	f7df f951 	bl	8000530 <__aeabi_fcmplt>
 802128e:	2800      	cmp	r0, #0
 8021290:	d008      	beq.n	80212a4 <sqrtf+0x34>
 8021292:	f7fd fac7 	bl	801e824 <__errno>
 8021296:	2321      	movs	r3, #33	@ 0x21
 8021298:	2100      	movs	r1, #0
 802129a:	6003      	str	r3, [r0, #0]
 802129c:	1c08      	adds	r0, r1, #0
 802129e:	f7df fc99 	bl	8000bd4 <__aeabi_fdiv>
 80212a2:	1c04      	adds	r4, r0, #0
 80212a4:	1c20      	adds	r0, r4, #0
 80212a6:	bd70      	pop	{r4, r5, r6, pc}

080212a8 <finitef>:
 80212a8:	22ff      	movs	r2, #255	@ 0xff
 80212aa:	0043      	lsls	r3, r0, #1
 80212ac:	085b      	lsrs	r3, r3, #1
 80212ae:	2001      	movs	r0, #1
 80212b0:	05d2      	lsls	r2, r2, #23
 80212b2:	4293      	cmp	r3, r2
 80212b4:	db00      	blt.n	80212b8 <finitef+0x10>
 80212b6:	2000      	movs	r0, #0
 80212b8:	4770      	bx	lr
	...

080212bc <__ieee754_sqrtf>:
 80212bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80212be:	0003      	movs	r3, r0
 80212c0:	0042      	lsls	r2, r0, #1
 80212c2:	1c04      	adds	r4, r0, #0
 80212c4:	20ff      	movs	r0, #255	@ 0xff
 80212c6:	0852      	lsrs	r2, r2, #1
 80212c8:	05c0      	lsls	r0, r0, #23
 80212ca:	4282      	cmp	r2, r0
 80212cc:	d30a      	bcc.n	80212e4 <__ieee754_sqrtf+0x28>
 80212ce:	1c21      	adds	r1, r4, #0
 80212d0:	1c20      	adds	r0, r4, #0
 80212d2:	f7df fe65 	bl	8000fa0 <__aeabi_fmul>
 80212d6:	1c01      	adds	r1, r0, #0
 80212d8:	1c20      	adds	r0, r4, #0
 80212da:	f7df faf1 	bl	80008c0 <__aeabi_fadd>
 80212de:	1c04      	adds	r4, r0, #0
 80212e0:	1c20      	adds	r0, r4, #0
 80212e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80212e4:	2a00      	cmp	r2, #0
 80212e6:	d0fb      	beq.n	80212e0 <__ieee754_sqrtf+0x24>
 80212e8:	2c00      	cmp	r4, #0
 80212ea:	da07      	bge.n	80212fc <__ieee754_sqrtf+0x40>
 80212ec:	1c21      	adds	r1, r4, #0
 80212ee:	1c20      	adds	r0, r4, #0
 80212f0:	f7df ff94 	bl	800121c <__aeabi_fsub>
 80212f4:	1c01      	adds	r1, r0, #0
 80212f6:	f7df fc6d 	bl	8000bd4 <__aeabi_fdiv>
 80212fa:	e7f0      	b.n	80212de <__ieee754_sqrtf+0x22>
 80212fc:	0022      	movs	r2, r4
 80212fe:	15e1      	asrs	r1, r4, #23
 8021300:	4002      	ands	r2, r0
 8021302:	4204      	tst	r4, r0
 8021304:	d046      	beq.n	8021394 <__ieee754_sqrtf+0xd8>
 8021306:	2280      	movs	r2, #128	@ 0x80
 8021308:	000f      	movs	r7, r1
 802130a:	025b      	lsls	r3, r3, #9
 802130c:	0a5b      	lsrs	r3, r3, #9
 802130e:	0412      	lsls	r2, r2, #16
 8021310:	3f7f      	subs	r7, #127	@ 0x7f
 8021312:	4313      	orrs	r3, r2
 8021314:	07c9      	lsls	r1, r1, #31
 8021316:	d400      	bmi.n	802131a <__ieee754_sqrtf+0x5e>
 8021318:	005b      	lsls	r3, r3, #1
 802131a:	2400      	movs	r4, #0
 802131c:	2180      	movs	r1, #128	@ 0x80
 802131e:	2019      	movs	r0, #25
 8021320:	0026      	movs	r6, r4
 8021322:	107f      	asrs	r7, r7, #1
 8021324:	005b      	lsls	r3, r3, #1
 8021326:	0449      	lsls	r1, r1, #17
 8021328:	1875      	adds	r5, r6, r1
 802132a:	001a      	movs	r2, r3
 802132c:	429d      	cmp	r5, r3
 802132e:	dc02      	bgt.n	8021336 <__ieee754_sqrtf+0x7a>
 8021330:	186e      	adds	r6, r5, r1
 8021332:	1b5a      	subs	r2, r3, r5
 8021334:	1864      	adds	r4, r4, r1
 8021336:	3801      	subs	r0, #1
 8021338:	0053      	lsls	r3, r2, #1
 802133a:	0849      	lsrs	r1, r1, #1
 802133c:	2800      	cmp	r0, #0
 802133e:	d1f3      	bne.n	8021328 <__ieee754_sqrtf+0x6c>
 8021340:	2a00      	cmp	r2, #0
 8021342:	d019      	beq.n	8021378 <__ieee754_sqrtf+0xbc>
 8021344:	4d17      	ldr	r5, [pc, #92]	@ (80213a4 <__ieee754_sqrtf+0xe8>)
 8021346:	4e18      	ldr	r6, [pc, #96]	@ (80213a8 <__ieee754_sqrtf+0xec>)
 8021348:	6828      	ldr	r0, [r5, #0]
 802134a:	6831      	ldr	r1, [r6, #0]
 802134c:	682b      	ldr	r3, [r5, #0]
 802134e:	9301      	str	r3, [sp, #4]
 8021350:	f7df ff64 	bl	800121c <__aeabi_fsub>
 8021354:	1c01      	adds	r1, r0, #0
 8021356:	9801      	ldr	r0, [sp, #4]
 8021358:	f7df f8f4 	bl	8000544 <__aeabi_fcmple>
 802135c:	2800      	cmp	r0, #0
 802135e:	d00b      	beq.n	8021378 <__ieee754_sqrtf+0xbc>
 8021360:	6828      	ldr	r0, [r5, #0]
 8021362:	6831      	ldr	r1, [r6, #0]
 8021364:	f7df faac 	bl	80008c0 <__aeabi_fadd>
 8021368:	682d      	ldr	r5, [r5, #0]
 802136a:	1c01      	adds	r1, r0, #0
 802136c:	1c28      	adds	r0, r5, #0
 802136e:	f7df f8df 	bl	8000530 <__aeabi_fcmplt>
 8021372:	2800      	cmp	r0, #0
 8021374:	d011      	beq.n	802139a <__ieee754_sqrtf+0xde>
 8021376:	3402      	adds	r4, #2
 8021378:	23fc      	movs	r3, #252	@ 0xfc
 802137a:	1064      	asrs	r4, r4, #1
 802137c:	059b      	lsls	r3, r3, #22
 802137e:	18e3      	adds	r3, r4, r3
 8021380:	05fc      	lsls	r4, r7, #23
 8021382:	18e4      	adds	r4, r4, r3
 8021384:	e7ac      	b.n	80212e0 <__ieee754_sqrtf+0x24>
 8021386:	005b      	lsls	r3, r3, #1
 8021388:	3201      	adds	r2, #1
 802138a:	4203      	tst	r3, r0
 802138c:	d0fb      	beq.n	8021386 <__ieee754_sqrtf+0xca>
 802138e:	3a01      	subs	r2, #1
 8021390:	1a89      	subs	r1, r1, r2
 8021392:	e7b8      	b.n	8021306 <__ieee754_sqrtf+0x4a>
 8021394:	2080      	movs	r0, #128	@ 0x80
 8021396:	0400      	lsls	r0, r0, #16
 8021398:	e7f7      	b.n	802138a <__ieee754_sqrtf+0xce>
 802139a:	2301      	movs	r3, #1
 802139c:	3401      	adds	r4, #1
 802139e:	439c      	bics	r4, r3
 80213a0:	e7ea      	b.n	8021378 <__ieee754_sqrtf+0xbc>
 80213a2:	46c0      	nop			@ (mov r8, r8)
 80213a4:	20000420 	.word	0x20000420
 80213a8:	2000041c 	.word	0x2000041c

080213ac <roundf>:
 80213ac:	0dc3      	lsrs	r3, r0, #23
 80213ae:	b2db      	uxtb	r3, r3
 80213b0:	3b7f      	subs	r3, #127	@ 0x7f
 80213b2:	0002      	movs	r2, r0
 80213b4:	b510      	push	{r4, lr}
 80213b6:	2b16      	cmp	r3, #22
 80213b8:	dc13      	bgt.n	80213e2 <roundf+0x36>
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	da07      	bge.n	80213ce <roundf+0x22>
 80213be:	0fc2      	lsrs	r2, r0, #31
 80213c0:	07d0      	lsls	r0, r2, #31
 80213c2:	3301      	adds	r3, #1
 80213c4:	d102      	bne.n	80213cc <roundf+0x20>
 80213c6:	23fe      	movs	r3, #254	@ 0xfe
 80213c8:	059b      	lsls	r3, r3, #22
 80213ca:	4318      	orrs	r0, r3
 80213cc:	bd10      	pop	{r4, pc}
 80213ce:	4908      	ldr	r1, [pc, #32]	@ (80213f0 <roundf+0x44>)
 80213d0:	4119      	asrs	r1, r3
 80213d2:	4208      	tst	r0, r1
 80213d4:	d0fa      	beq.n	80213cc <roundf+0x20>
 80213d6:	2080      	movs	r0, #128	@ 0x80
 80213d8:	03c0      	lsls	r0, r0, #15
 80213da:	4118      	asrs	r0, r3
 80213dc:	1880      	adds	r0, r0, r2
 80213de:	4388      	bics	r0, r1
 80213e0:	e7f4      	b.n	80213cc <roundf+0x20>
 80213e2:	2b80      	cmp	r3, #128	@ 0x80
 80213e4:	d1f2      	bne.n	80213cc <roundf+0x20>
 80213e6:	1c01      	adds	r1, r0, #0
 80213e8:	f7df fa6a 	bl	80008c0 <__aeabi_fadd>
 80213ec:	e7ee      	b.n	80213cc <roundf+0x20>
 80213ee:	46c0      	nop			@ (mov r8, r8)
 80213f0:	007fffff 	.word	0x007fffff

080213f4 <__ieee754_expf>:
 80213f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80213f6:	21ff      	movs	r1, #255	@ 0xff
 80213f8:	0043      	lsls	r3, r0, #1
 80213fa:	1c04      	adds	r4, r0, #0
 80213fc:	085b      	lsrs	r3, r3, #1
 80213fe:	05c9      	lsls	r1, r1, #23
 8021400:	428b      	cmp	r3, r1
 8021402:	d904      	bls.n	802140e <__ieee754_expf+0x1a>
 8021404:	1c01      	adds	r1, r0, #0
 8021406:	1c20      	adds	r0, r4, #0
 8021408:	f7df fa5a 	bl	80008c0 <__aeabi_fadd>
 802140c:	e00d      	b.n	802142a <__ieee754_expf+0x36>
 802140e:	0fc6      	lsrs	r6, r0, #31
 8021410:	428b      	cmp	r3, r1
 8021412:	d104      	bne.n	802141e <__ieee754_expf+0x2a>
 8021414:	2e00      	cmp	r6, #0
 8021416:	d000      	beq.n	802141a <__ieee754_expf+0x26>
 8021418:	e0ba      	b.n	8021590 <__ieee754_expf+0x19c>
 802141a:	1c20      	adds	r0, r4, #0
 802141c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802141e:	495d      	ldr	r1, [pc, #372]	@ (8021594 <__ieee754_expf+0x1a0>)
 8021420:	4288      	cmp	r0, r1
 8021422:	dd04      	ble.n	802142e <__ieee754_expf+0x3a>
 8021424:	2000      	movs	r0, #0
 8021426:	f000 f8f1 	bl	802160c <__math_oflowf>
 802142a:	1c04      	adds	r4, r0, #0
 802142c:	e7f5      	b.n	802141a <__ieee754_expf+0x26>
 802142e:	2800      	cmp	r0, #0
 8021430:	da06      	bge.n	8021440 <__ieee754_expf+0x4c>
 8021432:	4a59      	ldr	r2, [pc, #356]	@ (8021598 <__ieee754_expf+0x1a4>)
 8021434:	4293      	cmp	r3, r2
 8021436:	d903      	bls.n	8021440 <__ieee754_expf+0x4c>
 8021438:	2000      	movs	r0, #0
 802143a:	f000 f8e1 	bl	8021600 <__math_uflowf>
 802143e:	e7f4      	b.n	802142a <__ieee754_expf+0x36>
 8021440:	4a56      	ldr	r2, [pc, #344]	@ (802159c <__ieee754_expf+0x1a8>)
 8021442:	4293      	cmp	r3, r2
 8021444:	d96e      	bls.n	8021524 <__ieee754_expf+0x130>
 8021446:	4a56      	ldr	r2, [pc, #344]	@ (80215a0 <__ieee754_expf+0x1ac>)
 8021448:	00b5      	lsls	r5, r6, #2
 802144a:	4293      	cmp	r3, r2
 802144c:	d84e      	bhi.n	80214ec <__ieee754_expf+0xf8>
 802144e:	4b55      	ldr	r3, [pc, #340]	@ (80215a4 <__ieee754_expf+0x1b0>)
 8021450:	1c20      	adds	r0, r4, #0
 8021452:	5959      	ldr	r1, [r3, r5]
 8021454:	f7df fee2 	bl	800121c <__aeabi_fsub>
 8021458:	4b53      	ldr	r3, [pc, #332]	@ (80215a8 <__ieee754_expf+0x1b4>)
 802145a:	1c07      	adds	r7, r0, #0
 802145c:	595b      	ldr	r3, [r3, r5]
 802145e:	2501      	movs	r5, #1
 8021460:	1bad      	subs	r5, r5, r6
 8021462:	9300      	str	r3, [sp, #0]
 8021464:	1bad      	subs	r5, r5, r6
 8021466:	9900      	ldr	r1, [sp, #0]
 8021468:	1c38      	adds	r0, r7, #0
 802146a:	f7df fed7 	bl	800121c <__aeabi_fsub>
 802146e:	1c04      	adds	r4, r0, #0
 8021470:	1c21      	adds	r1, r4, #0
 8021472:	1c20      	adds	r0, r4, #0
 8021474:	f7df fd94 	bl	8000fa0 <__aeabi_fmul>
 8021478:	494c      	ldr	r1, [pc, #304]	@ (80215ac <__ieee754_expf+0x1b8>)
 802147a:	1c06      	adds	r6, r0, #0
 802147c:	f7df fd90 	bl	8000fa0 <__aeabi_fmul>
 8021480:	494b      	ldr	r1, [pc, #300]	@ (80215b0 <__ieee754_expf+0x1bc>)
 8021482:	f7df fecb 	bl	800121c <__aeabi_fsub>
 8021486:	1c31      	adds	r1, r6, #0
 8021488:	f7df fd8a 	bl	8000fa0 <__aeabi_fmul>
 802148c:	4949      	ldr	r1, [pc, #292]	@ (80215b4 <__ieee754_expf+0x1c0>)
 802148e:	f7df fa17 	bl	80008c0 <__aeabi_fadd>
 8021492:	1c31      	adds	r1, r6, #0
 8021494:	f7df fd84 	bl	8000fa0 <__aeabi_fmul>
 8021498:	4947      	ldr	r1, [pc, #284]	@ (80215b8 <__ieee754_expf+0x1c4>)
 802149a:	f7df febf 	bl	800121c <__aeabi_fsub>
 802149e:	1c31      	adds	r1, r6, #0
 80214a0:	f7df fd7e 	bl	8000fa0 <__aeabi_fmul>
 80214a4:	4945      	ldr	r1, [pc, #276]	@ (80215bc <__ieee754_expf+0x1c8>)
 80214a6:	f7df fa0b 	bl	80008c0 <__aeabi_fadd>
 80214aa:	1c31      	adds	r1, r6, #0
 80214ac:	f7df fd78 	bl	8000fa0 <__aeabi_fmul>
 80214b0:	1c01      	adds	r1, r0, #0
 80214b2:	1c20      	adds	r0, r4, #0
 80214b4:	f7df feb2 	bl	800121c <__aeabi_fsub>
 80214b8:	1c01      	adds	r1, r0, #0
 80214ba:	1c06      	adds	r6, r0, #0
 80214bc:	1c20      	adds	r0, r4, #0
 80214be:	f7df fd6f 	bl	8000fa0 <__aeabi_fmul>
 80214c2:	9001      	str	r0, [sp, #4]
 80214c4:	2d00      	cmp	r5, #0
 80214c6:	d140      	bne.n	802154a <__ieee754_expf+0x156>
 80214c8:	2180      	movs	r1, #128	@ 0x80
 80214ca:	1c30      	adds	r0, r6, #0
 80214cc:	05c9      	lsls	r1, r1, #23
 80214ce:	f7df fea5 	bl	800121c <__aeabi_fsub>
 80214d2:	1c01      	adds	r1, r0, #0
 80214d4:	9801      	ldr	r0, [sp, #4]
 80214d6:	f7df fb7d 	bl	8000bd4 <__aeabi_fdiv>
 80214da:	1c21      	adds	r1, r4, #0
 80214dc:	f7df fe9e 	bl	800121c <__aeabi_fsub>
 80214e0:	1c01      	adds	r1, r0, #0
 80214e2:	20fe      	movs	r0, #254	@ 0xfe
 80214e4:	0580      	lsls	r0, r0, #22
 80214e6:	f7df fe99 	bl	800121c <__aeabi_fsub>
 80214ea:	e79e      	b.n	802142a <__ieee754_expf+0x36>
 80214ec:	4934      	ldr	r1, [pc, #208]	@ (80215c0 <__ieee754_expf+0x1cc>)
 80214ee:	1c20      	adds	r0, r4, #0
 80214f0:	f7df fd56 	bl	8000fa0 <__aeabi_fmul>
 80214f4:	4b33      	ldr	r3, [pc, #204]	@ (80215c4 <__ieee754_expf+0x1d0>)
 80214f6:	5959      	ldr	r1, [r3, r5]
 80214f8:	f7df f9e2 	bl	80008c0 <__aeabi_fadd>
 80214fc:	f7e0 f848 	bl	8001590 <__aeabi_f2iz>
 8021500:	0005      	movs	r5, r0
 8021502:	f7e0 f865 	bl	80015d0 <__aeabi_i2f>
 8021506:	4930      	ldr	r1, [pc, #192]	@ (80215c8 <__ieee754_expf+0x1d4>)
 8021508:	1c06      	adds	r6, r0, #0
 802150a:	f7df fd49 	bl	8000fa0 <__aeabi_fmul>
 802150e:	1c01      	adds	r1, r0, #0
 8021510:	1c20      	adds	r0, r4, #0
 8021512:	f7df fe83 	bl	800121c <__aeabi_fsub>
 8021516:	492d      	ldr	r1, [pc, #180]	@ (80215cc <__ieee754_expf+0x1d8>)
 8021518:	1c07      	adds	r7, r0, #0
 802151a:	1c30      	adds	r0, r6, #0
 802151c:	f7df fd40 	bl	8000fa0 <__aeabi_fmul>
 8021520:	9000      	str	r0, [sp, #0]
 8021522:	e7a0      	b.n	8021466 <__ieee754_expf+0x72>
 8021524:	22d0      	movs	r2, #208	@ 0xd0
 8021526:	0592      	lsls	r2, r2, #22
 8021528:	4293      	cmp	r3, r2
 802152a:	d20c      	bcs.n	8021546 <__ieee754_expf+0x152>
 802152c:	4928      	ldr	r1, [pc, #160]	@ (80215d0 <__ieee754_expf+0x1dc>)
 802152e:	1c20      	adds	r0, r4, #0
 8021530:	f7df f9c6 	bl	80008c0 <__aeabi_fadd>
 8021534:	21fe      	movs	r1, #254	@ 0xfe
 8021536:	0589      	lsls	r1, r1, #22
 8021538:	f7df f80e 	bl	8000558 <__aeabi_fcmpgt>
 802153c:	1e05      	subs	r5, r0, #0
 802153e:	d097      	beq.n	8021470 <__ieee754_expf+0x7c>
 8021540:	21fe      	movs	r1, #254	@ 0xfe
 8021542:	0589      	lsls	r1, r1, #22
 8021544:	e75f      	b.n	8021406 <__ieee754_expf+0x12>
 8021546:	2500      	movs	r5, #0
 8021548:	e792      	b.n	8021470 <__ieee754_expf+0x7c>
 802154a:	2080      	movs	r0, #128	@ 0x80
 802154c:	1c31      	adds	r1, r6, #0
 802154e:	05c0      	lsls	r0, r0, #23
 8021550:	f7df fe64 	bl	800121c <__aeabi_fsub>
 8021554:	1c01      	adds	r1, r0, #0
 8021556:	9801      	ldr	r0, [sp, #4]
 8021558:	f7df fb3c 	bl	8000bd4 <__aeabi_fdiv>
 802155c:	1c01      	adds	r1, r0, #0
 802155e:	9800      	ldr	r0, [sp, #0]
 8021560:	f7df fe5c 	bl	800121c <__aeabi_fsub>
 8021564:	1c39      	adds	r1, r7, #0
 8021566:	f7df fe59 	bl	800121c <__aeabi_fsub>
 802156a:	1c01      	adds	r1, r0, #0
 802156c:	20fe      	movs	r0, #254	@ 0xfe
 802156e:	0580      	lsls	r0, r0, #22
 8021570:	f7df fe54 	bl	800121c <__aeabi_fsub>
 8021574:	002b      	movs	r3, r5
 8021576:	337d      	adds	r3, #125	@ 0x7d
 8021578:	db02      	blt.n	8021580 <__ieee754_expf+0x18c>
 802157a:	05ec      	lsls	r4, r5, #23
 802157c:	1824      	adds	r4, r4, r0
 802157e:	e74c      	b.n	802141a <__ieee754_expf+0x26>
 8021580:	21d8      	movs	r1, #216	@ 0xd8
 8021582:	3564      	adds	r5, #100	@ 0x64
 8021584:	05ed      	lsls	r5, r5, #23
 8021586:	1828      	adds	r0, r5, r0
 8021588:	0509      	lsls	r1, r1, #20
 802158a:	f7df fd09 	bl	8000fa0 <__aeabi_fmul>
 802158e:	e74c      	b.n	802142a <__ieee754_expf+0x36>
 8021590:	2400      	movs	r4, #0
 8021592:	e742      	b.n	802141a <__ieee754_expf+0x26>
 8021594:	42b17217 	.word	0x42b17217
 8021598:	42cff1b5 	.word	0x42cff1b5
 802159c:	3eb17218 	.word	0x3eb17218
 80215a0:	3f851591 	.word	0x3f851591
 80215a4:	08023cc8 	.word	0x08023cc8
 80215a8:	08023cc0 	.word	0x08023cc0
 80215ac:	3331bb4c 	.word	0x3331bb4c
 80215b0:	35ddea0e 	.word	0x35ddea0e
 80215b4:	388ab355 	.word	0x388ab355
 80215b8:	3b360b61 	.word	0x3b360b61
 80215bc:	3e2aaaab 	.word	0x3e2aaaab
 80215c0:	3fb8aa3b 	.word	0x3fb8aa3b
 80215c4:	08023cd0 	.word	0x08023cd0
 80215c8:	3f317180 	.word	0x3f317180
 80215cc:	3717f7d1 	.word	0x3717f7d1
 80215d0:	7149f2ca 	.word	0x7149f2ca

080215d4 <with_errnof>:
 80215d4:	b570      	push	{r4, r5, r6, lr}
 80215d6:	000d      	movs	r5, r1
 80215d8:	1c04      	adds	r4, r0, #0
 80215da:	f7fd f923 	bl	801e824 <__errno>
 80215de:	6005      	str	r5, [r0, #0]
 80215e0:	1c20      	adds	r0, r4, #0
 80215e2:	bd70      	pop	{r4, r5, r6, pc}

080215e4 <xflowf>:
 80215e4:	b510      	push	{r4, lr}
 80215e6:	1c0b      	adds	r3, r1, #0
 80215e8:	2800      	cmp	r0, #0
 80215ea:	d002      	beq.n	80215f2 <xflowf+0xe>
 80215ec:	2380      	movs	r3, #128	@ 0x80
 80215ee:	061b      	lsls	r3, r3, #24
 80215f0:	18cb      	adds	r3, r1, r3
 80215f2:	1c18      	adds	r0, r3, #0
 80215f4:	f7df fcd4 	bl	8000fa0 <__aeabi_fmul>
 80215f8:	2122      	movs	r1, #34	@ 0x22
 80215fa:	f7ff ffeb 	bl	80215d4 <with_errnof>
 80215fe:	bd10      	pop	{r4, pc}

08021600 <__math_uflowf>:
 8021600:	2180      	movs	r1, #128	@ 0x80
 8021602:	b510      	push	{r4, lr}
 8021604:	0549      	lsls	r1, r1, #21
 8021606:	f7ff ffed 	bl	80215e4 <xflowf>
 802160a:	bd10      	pop	{r4, pc}

0802160c <__math_oflowf>:
 802160c:	21e0      	movs	r1, #224	@ 0xe0
 802160e:	b510      	push	{r4, lr}
 8021610:	05c9      	lsls	r1, r1, #23
 8021612:	f7ff ffe7 	bl	80215e4 <xflowf>
 8021616:	bd10      	pop	{r4, pc}

08021618 <_init>:
 8021618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802161a:	46c0      	nop			@ (mov r8, r8)
 802161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802161e:	bc08      	pop	{r3}
 8021620:	469e      	mov	lr, r3
 8021622:	4770      	bx	lr

08021624 <_fini>:
 8021624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021626:	46c0      	nop			@ (mov r8, r8)
 8021628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802162a:	bc08      	pop	{r3}
 802162c:	469e      	mov	lr, r3
 802162e:	4770      	bx	lr
